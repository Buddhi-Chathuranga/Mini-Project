-----------------------------------------------------------------------------
--
--  Fragment:     CustomerOrderLineAddressDialog
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
--  2021-10-01 PrRtlk  SC21R2-2966, Used the Subset Customer Order in ShipmentCreation Enumeration for Customer Order related Shipment Creation types.
--  2021-07-13 MiKulk  SC21R2-1881,Removed Duplicate FreightPriceListNo, from input list. Added the CustomerNo to the  CustomerOrderLineStructure and updated usages accordingly.
--  2021-07-13         updated ValidateContactCommand to pass the CustomerNo instead of the DeliverToCustomerNo, also changed the reference too.
--  2020-11-06 KiSalk  Bug 155793(SCZ-12085), Modified ValidateAddressNo, by adding parameters delivery_eadtime_ and picking_leadtime_.
--  2020-06-10 KiSalk  Bug 154335(SCZ-10322), Added maxlength to ship address attributes in CustomerOrderLineStructure.
--  2020-01-14 RaVdlk  SCXTEND-1426,Updated the picking lead time when Ship Via Code is changed
--  2019-10-21 MaRalk  SCXTEND-1083, Removed structure DeliveryAttrStrucure and instead used AddressDetailStructure.
--  2019-09-24 MaRalk  SCXTEND-536, Added attribute AddressInfoChanged to the CustomerOrderLineStructure
--  2019-09-24         and handled enabling Ok button.
--  2019-02-19 SeJalk  SCUXXW4-8387, Converted from dlgCustOrderLine using MTG Version: 1.34
-----------------------------------------------------------------------------
fragment CustomerOrderLineAddressDialog;
component ORDER;
layer Core;
description "Use this fragment to view or modify the delivery address and the delivery information for the customer order line.";
include fragment CustomerOrderLineInitialCheck;
include fragment ReplicateOrderChangesDialog;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
dialog CustomerOrderLineAddressDialog for CustomerOrderLineStructure {
   label = "Customer Order Line Address";
   input(Company, OrderNo, LineNo, RelNo, LineItemNo, ShipAddrNo, DefaultAddrFlag, AddrFlag, ShipViaCode, ExtTransportCalendarId,
   FreightMapId, ZoneId, FreightPriceListNo, CustomerNo, DelTermsLocation, DeliveryLeadtime, PickingLeadtime, ForwardAgentId,
   ShipViaCode, DeliveryTerms, Contract, PartNo, SupplyCode, VendorNo, Contact, RouteId, SupplierShipViaTransit,
   CustCalendarId, ShipmentType, ShipmentCreation, RegionCode, DistrictCode, DockCode, SubDockCode, DeliverySequence, LocationNo,
   DeliverToCustomerNo, IntrastatExempt, SupplyCode, Objstate, LanguageCode, ShipAddrInCity, AddrInCity) {
      command InitOrderAddressCommand;
   }
   group OrderLineGroup;
   group DeliveryAddressGroup;
   group DelInfoGroup;
   group FreightGroup;
   command Ok;
   command Cancel;
   command SetDefaultInfoFlagCommand;

}

--------------------------------- COMMANDS ----------------------------------

command Ok for CustomerOrderLineStructure {
   variable TaxMethodVar Text;
   variable ReplicationVar Structure(AddressReplicationStructure);
   variable AddressDetailVar Structure(AddressDetailStructure);
   variable AllowSendChangeRequestVar Boolean;
   variable SendChangeRequestVar Text;
   variable ReplicateChangesVar Text;
   variable ShipAddressVar Structure(ShipAddressStructure);

   enabled = [AddressInfoChanged];

   execute {
      //Replicate, start
      copy this into AddressDetailVar skip nulls;
      copy this into ShipAddressVar;
      call CheckDeliveryInfoReplication(AddressDetailVar, ShipAddressVar) into ReplicationVar;

      if [ReplicationVar.ReplicateColumnsModified = "TRUE"] {
         if [ReplicationVar.SendChangeRequest = "TRUE"] {
            set AllowSendChangeRequestVar = true;
         }
         else {
            set AllowSendChangeRequestVar = false;
         }
         dialog ReplicateOrderChangesDialog(AllowSendChangeRequestVar, AllowSendChangeRequestVar) into(SendChangeRequestVar, ReplicateChangesVar) {
            when CANCEL {
               exit CANCEL;
            }
            when OK {
               set ReplicateChanges = ReplicateChangesVar;
               set ChangeRequest = SendChangeRequestVar;
               set ChangedAttribNotInPol = ReplicationVar.ChangedAttribNotInPol;
            }
         }
      }
      //Replicate, end

      copy this into AddressDetailVar skip nulls;
      call SaveOrderLine(AddressDetailVar, OrderNo, LineNo, RelNo, LineItemNo);

      if [DefaultAddrFlag = "No" and LineItemNo <= 0] {
         call SaveDeliveryLineAddress(OrderNo,
         LineNo,
         RelNo,
         LineItemNo,
         ShipAddrName,
         ShipAddress1,
         ShipAddress2,
         ShipAddress3,
         ShipAddress4,
         ShipAddress5,
         ShipAddress6,
         ShipAddrZipCode,
         ShipAddrCity,
         ShipAddrState,
         ShipAddrCounty,
         ShipAddrCountryCode,
         ShipAddrInCity,
         AddrFlag,
         ReplicateChanges,
         ChangeRequest);
      }
      if [AddrFlag = "Yes" and AddrFlag != original.AddrFlag] {
         call GetExternalTaxCalMethodDb(Company) into TaxMethodVar;
         if [TaxMethodVar = "NOT_USED"] {
            alert("Tax lines have not been changed for the single occurrence address line(s). You may want to check the tax information.");
         }
      }
      exit OK;
   }
}

command InitOrderAddressCommand for CustomerOrderLineStructure {
   variable AddressVar {
      type = Structure(LineAddressStructure);
   }
   execute {

      call GetLineAddressInfo(OrderNo, LineNo, RelNo, LineItemNo, ShipAddrNo, DefaultAddrFlag, AddrFlag, DeliverToCustomerNo, Contact) into AddressVar;
      set AddrInCity = AddressVar.AddrInCity;
      set AddressName = AddressVar.AddressName;
      set Address1 = AddressVar.Address1;
      set Address2 = AddressVar.Address2;
      set Address3 = AddressVar.Address3;
      set Address4 = AddressVar.Address4;
      set Address5 = AddressVar.Address5;
      set Address6 = AddressVar.Address6;
      set ZipCode = AddressVar.ZipCode;
      set City = AddressVar.City;
      set County = AddressVar.County;
      set State = AddressVar.State;
      set CountryCode = AddressVar.CountryCode;
      set CountryDesc = AddressVar.CountryDesc;
      set ContactName = AddressVar.ContactName;

      if [DefaultAddrFlag = "No" and AddrFlag = "Yes"] {
         set ShipAddrInCity = AddressVar.AddrInCity;
         set ShipAddrName = AddressVar.AddressName;
         set ShipAddress1 = AddressVar.Address1;
         set ShipAddress2 = AddressVar.Address2;
         set ShipAddress3 = AddressVar.Address3;
         set ShipAddress4 = AddressVar.Address4;
         set ShipAddress5 = AddressVar.Address5;
         set ShipAddress6 = AddressVar.Address6;
         set ShipAddrZipCode = AddressVar.ZipCode;
         set ShipAddrCity = AddressVar.City;
         set ShipAddrCounty = AddressVar.County;
         set ShipAddrState = AddressVar.State;
         set ShipAddrCountryCode = AddressVar.CountryCode;
         set ShipAddrCountryDesc = AddressVar.CountryDesc;
      }
   }
}

command SetDefaultInfoFlagCommand for CustomerOrderLineStructure clone InitOrderAddressCommand {
   label = "Set to Default Info";
   variable AddressDetailVar {
      type = Structure(AddressDetailStructure);
   }
   visible = [DefaultAddrFlag = "No"];
   execute {
      set AddressInfoChanged = true;
      set DefaultAddrFlag = "Yes";
      call GetParentAddressDetails(OrderNo) into AddressDetailVar;
      copy AddressDetailVar into this skip nulls;
      super;
      set AddrFlag = AddressDetailVar.ParentSingleOccAddrFlag;
      exit;
   }
}

command SetAddrFlagCommand for CustomerOrderLineStructure clone InitOrderAddressCommand {
   execute {
      set DefaultAddrFlag = "No";
      set AddressInfoChanged = true;
      super;
      if [DefaultAddrFlag = "No"] {
         if [AddrFlag = "Yes"] {
            if [ShipAddress1 = null and ShipAddress2 = null and ShipAddress3 = null and ShipAddress4 = null and ShipAddress5 = null and ShipAddress6 = null
            and ShipAddrCity = null and ShipAddrCounty = null and ShipAddrState = null and ShipAddrZipCode = null and ShipAddrCountryCode = null and ShipAddrName = null] {
               set ShipAddress1 = AddressVar.Address1;
               set ShipAddress2 = AddressVar.Address2;
               set ShipAddress3 = AddressVar.Address3;
               set ShipAddress4 = AddressVar.Address4;
               set ShipAddress5 = AddressVar.Address5;
               set ShipAddress6 = AddressVar.Address6;
               set ShipAddrCity = AddressVar.City;
               set ShipAddrCountryDesc = AddressVar.CountryDesc;
               set ShipAddrCounty = AddressVar.County;
               set ShipAddrState = AddressVar.State;
               set ShipAddrZipCode = AddressVar.ZipCode;
               set ShipAddrCountryCode = AddressVar.CountryCode;
               set ShipAddrInCity = AddressVar.AddrInCity;
               set ShipAddrName = AddressVar.AddressName;
            }
         }
      }
   }
}

command SetDefaultInfoCommand for CustomerOrderLineStructure clone InitOrderAddressCommand {
   execute {
      set AddressInfoChanged = true;
      if [DefaultAddrFlag = "Yes"] {
         set DefaultAddrFlag = "No";
         super;
      }
      if [DefaultAddrFlag = "No"] {
         if [AddrFlag = "Yes"] {
            if [ShipAddress1 = null and ShipAddress2 = null and ShipAddress3 = null and ShipAddress4 = null and ShipAddress5 = null and ShipAddress6 = null
            and ShipAddrCity = null and ShipAddrCounty = null and ShipAddrState = null and ShipAddrZipCode = null and ShipAddrCountryCode = null and ShipAddrName = null] {
               set ShipAddress1 = AddressVar.Address1;
               set ShipAddress2 = AddressVar.Address2;
               set ShipAddress3 = AddressVar.Address3;
               set ShipAddress4 = AddressVar.Address4;
               set ShipAddress5 = AddressVar.Address5;
               set ShipAddress6 = AddressVar.Address6;
               set ShipAddrCity = AddressVar.City;
               set ShipAddrCountryDesc = AddressVar.CountryDesc;
               set ShipAddrCounty = AddressVar.County;
               set ShipAddrState = AddressVar.State;
               set ShipAddrZipCode = AddressVar.ZipCode;
               set ShipAddrCountryCode = AddressVar.CountryCode;
               set ShipAddrInCity = AddressVar.AddrInCity;
               set ShipAddrName = AddressVar.AddressName;
            }
         }
      }
   }
}

command ValidateContactCommand for CustomerOrderLineStructure clone SetDefaultInfoCommand {
   execute {
      call GetContactName(CustomerNo, DefaultAddrFlag, OrderNo, ShipAddrNo, Contact) into ContactName;
      super;
   }
}

command ValidateDeliveryTermsCommnad for CustomerOrderLineStructure clone SetDefaultInfoCommand {
   execute {
      set DelTermsLocation = null;
      super;
   }
}

command ValidateShipmentTypeCommnad for CustomerOrderLineStructure clone SetDefaultInfoCommand {
   variable ShipmentCreationVar {
      type = Structure(ShipmntCreationStructure);
   }

   execute {
      call GetShipmentCreationCo(ShipmentType) into ShipmentCreationVar;
      set ShipmentCreation = ShipmentCreationVar.ShipmentCreation;
      super;
   }
}

command ValidateRouteIdCommnad for CustomerOrderLineStructure clone SetDefaultInfoCommand {
   execute {
      if [RouteId != null] {
         call FetchForwardAgentId(RouteId, CustomerNo) into ForwardAgentId;
      }
      super;
   }
}

command ValidateForwardAgentId for CustomerOrderLineStructure clone SetDefaultInfoCommand {
   variable FreightPriceListNoVar {
      type = Text;
   }

   execute {
      call GetFreightPriceListNo(
      OrderNo,
      Contract,
      ShipViaCode,
      FreightMapId,
      ForwardAgentId,
      VendorNo,
      SupplyCode) into FreightPriceListNoVar;
      if [FreightPriceListNoVar] {
         set FreightPriceListNo = FreightPriceListNoVar;
      }
      super;
   }
}

command ValidateShipViaCodeCommand for CustomerOrderLineStructure clone SetDefaultInfoCommand {
   variable DeliveryAttrVar {
      type = Structure(AddressDetailStructure);
   }
   variable PickingLeadtimeVar Number;

   execute {
      set PickingLeadtimeVar = PickingLeadtime;
      call FetchDescriptionAndLeadtime(
      OrderNo,
      Contract,
      DeliverToCustomerNo,
      ShipAddrNo,
      ShipViaCode,
      PartNo,
      SupplyCode,
      VendorNo,
      AddrFlag,
      DeliveryTerms,
      DelTermsLocation,
      ForwardAgentId,
      DeliveryLeadtime,
      PickingLeadtimeVar,
      FreightMapId,
      ZoneId,
      ExtTransportCalendarId,
      RouteId,
      ShipmentType,
      FreightPriceListNo) into DeliveryAttrVar;

      set ExtTransportCalendarId = DeliveryAttrVar.ExtTransportCalendarId;
      set FreightMapId = DeliveryAttrVar.FreightMapId;
      set ZoneId = DeliveryAttrVar.ZoneId;
      set FreightPriceListNo = DeliveryAttrVar.FreightPriceListNo;
      set DeliveryLeadtime = DeliveryAttrVar.DeliveryLeadtime;
      set PickingLeadtimeVar = DeliveryAttrVar.PickingLeadtime;
      set ForwardAgentId = DeliveryAttrVar.ForwardAgentId;
      set DeliveryTerms = DeliveryAttrVar.DeliveryTerms;
      set DelTermsLocation = DeliveryAttrVar.DelTermsLocation;
      set ShipmentType = DeliveryAttrVar.ShipmentType;
      set RouteId = DeliveryAttrVar.RouteId;
      set SupplierShipViaTransit = DeliveryAttrVar.SupplierShipViaTransit;

      if [not Objstate in("Picked", "Delivered", "Invoiced", "Cancelled")] {
         set PickingLeadtime = PickingLeadtimeVar;
      }
      super;
   }
}

command ValidateAddressCommand for CustomerOrderLineStructure {
   execute {
      set DefaultAddrFlag = "No";
      set AddressInfoChanged = true;
   }
}


command ValidateShipAddresNoCommand for CustomerOrderLineStructure clone InitOrderAddressCommand {
   variable AddressDetailVar {
      type = Structure(AddressDetailStructure);
   }
   execute {
      set DefaultAddrFlag = "No";
      set AddressInfoChanged = true;
      call ValidateAddressNo(
      OrderNo,
      LineNo,
      RelNo,
      LineItemNo,
      ShipAddrNo,
      AddrFlag,
      DefaultAddrFlag,
      DeliveryLeadtime,
      PickingLeadtime,
      ShipmentCreation) into AddressDetailVar;
      copy AddressDetailVar into this skip nulls;
      super;
   }
}


command SetAddressInfoChangedCommand for CustomerOrderLineStructure {
   execute {
      set AddressInfoChanged = true;
   }
}
---------------------------------- GROUPS -----------------------------------

group DelInfoGroup for CustomerOrderLineStructure {
   label = "Delivery Information";

   lov ContactRef with ReferenceCustInfoContactLovPubSelector using FilterContact(ShipAddrNo) {
      visible = [true];
      validate command ValidateContactCommand;
      description = ContactName;
   }

   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
      validate command ValidateRouteIdCommnad;
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
      validate command ValidateForwardAgentId;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
      validate command ValidateShipViaCodeCommand;
   }
   lov SupplierShipViaTransitRef with ReferenceMpccomShipViaSelector {
      description = SupplierShipViaTransitRef.Description;
      validate command SetDefaultInfoCommand;
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      description = DeliveryTermsRef.Description;
      validate command ValidateDeliveryTermsCommnad;
   }
   lov CustCalendarIdRef with ReferenceWorkTimeCalendarSelector {
      description = CustCalendarIdRef.Description;
      validate command SetDefaultInfoCommand;
   }
   lov ExtTransportCalendarIdRef with ReferenceWorkTimeCalendarSelector {
      description = ExtTransportCalendarIdRef.Description;
      validate command SetDefaultInfoCommand;
   }
   field DelTermsLocation {
      validate command SetDefaultInfoCommand;
   }
   field DeliveryLeadtime {
      validate command SetDefaultInfoCommand;
      size = Small;
   }
   field PickingLeadtime {
      editable = [not Objstate in("Picked", "Delivered", "Invoiced", "Cancelled")];
      validate command SetDefaultInfoCommand;
      size = Small;
   }
   lov ShipmentTypeRef with ReferenceShipmentTypeSelector {
      validate command ValidateShipmentTypeCommnad;
   }
   field ShipmentCreation {
      validate command SetDefaultInfoCommand;
      size = Small;
   }
   field IntrastatExempt {
      validate command SetDefaultInfoCommand;
      enumerationtrue = "Exempt";
      enumerationfalse = "Include";
      size = Small;
   }
   lov RegionCodeRef with ReferenceSalesRegionSelector {
      validate command SetDefaultInfoCommand;
      size = Small;
   }
   lov DistrictCodeRef with ReferenceSalesDistrictSelector {
      validate command SetDefaultInfoCommand;
      size = Small;
   }
   field DockCode {
      size = Small;
      validate command SetAddressInfoChangedCommand;
   }
   field SubDockCode {
      size = Small;
      validate command SetAddressInfoChangedCommand;
   }
   field DeliverySequence {
      size = Small;
      validate command SetAddressInfoChangedCommand;
   }
   field LocationNo {
      size = Small;
      validate command SetAddressInfoChangedCommand;
   }
}

group FreightGroup for CustomerOrderLineStructure {
   label = "Freight";
   lov FreightMapIdRef with ReferenceFreightMapSelector {
      description = FreightMapIdRef.Description;
   }
   lov ZoneIdRef with ReferenceFreightZoneSelector {
      description = ZoneIdRef.Description;
   }
   lov FreightPriceListNoRef with ReferenceFreightPriceListBaseSelector {
      description = FreightPriceListNoRef.Description;
   }
}

group OrderLineGroup for CustomerOrderLineStructure {
   label = "";
   field OrderNo {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field DeliverToCustomerNo {
      size = Small;
   }
   lov LanguageCodeRef with ReferenceIsoLanguageSelector {
      description = LanguageCodeRef.Description;
      editable = [false];
      size = Small;
   }
   field DefaultAddrFlag {
      editable = [false];
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      size = Small;
   }
}

group DeliveryAddressGroup for CustomerOrderLineStructure {
   label = "Delivery Address";
   lov ShipAddrNoRef with ReferenceCustAddressShipLovSelector {
      visible = [AddrFlag = "No" and LineItemNo <= 0];
      validate command ValidateShipAddresNoCommand;
   }
   field AddressName {
      visible = [DefaultAddrFlag = "Yes" or AddrFlag = "No"];
   }
   field ShipAddrName {
      visible = [DefaultAddrFlag = "No" and AddrFlag = "Yes"];
      editable = [LineItemNo <= 0];
      validate command SetAddressInfoChangedCommand;
   }
   field AddrFlag {
      validate command SetAddrFlagCommand;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      size = Small;
      editable = [LineItemNo <= 0];
   }
   addressfield {
      address1 Address1;
      address2 Address2;
      address3 Address3;
      address4 Address4;
      address5 Address5;
      address6 Address6;
      city City;
      country CountryDesc;
      county County;
      state State;
      zipcode ZipCode;
      countrycode CountryCode;
      label = "Address Details";
      size = Medium;
      visible = [DefaultAddrFlag = "Yes" or AddrFlag = "No"];
      editable = [false];
      validate command SetAddressInfoChangedCommand;
   }

   addressfield {
      address1 ShipAddress1;
      address2 ShipAddress2;
      address3 ShipAddress3;
      address4 ShipAddress4;
      address5 ShipAddress5;
      address6 ShipAddress6;
      city ShipAddrCity;
      country ShipAddrCountryDesc;
      county ShipAddrCounty;
      state ShipAddrState;
      zipcode ShipAddrZipCode;
      countrycode ShipAddrCountryCode;
      label = "Address Details";
      size = Medium;
      validate command ValidateAddressCommand;
      visible = [DefaultAddrFlag = "No" and AddrFlag = "Yes"];
      editable = [LineItemNo <= 0];
   }

   field AddrInCity {
      visible = [DefaultAddrFlag = "Yes" or AddrFlag = "No"];
      size = Small;
   }
   field ShipAddrInCity {
      visible = [DefaultAddrFlag = "No" and AddrFlag = "Yes"];
      editable = [LineItemNo <= 0];
      size = Small;
      validate command SetAddressInfoChangedCommand;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
--------------------------------- FUNCTIONS ---------------------------------
function GetLineAddressInfo Structure(LineAddressStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter ShipAddrNo Text;
   parameter DefaultAddrFlag Enumeration(GenYesNo);
   parameter AddrFlag Enumeration(GenYesNo);
   parameter DeliverToCustomerNo Text;
   parameter Contact Text;
}

function GetExternalTaxCalMethodDb Text {
   parameter Company Text;
}

function FetchDescriptionAndLeadtime Structure(AddressDetailStructure) {
   parameter OrderNo Text;
   parameter Contract Text;
   parameter DeliverToCustomerNo Text;
   parameter ShipAddrNo Text;
   parameter ShipViaCode Text;
   parameter PartNo Text;
   parameter SupplyCode  Enumeration(OrderSupplyType);
   parameter VendorNo Text;
   parameter AddrFlag Enumeration(GenYesNo);
   parameter DeliveryTerms Text;
   parameter DelTermsLocation Text;
   parameter ForwardAgentId Text;
   parameter DeliveryLeadtime Number;
   parameter PickingLeadtime Number;
   parameter FreightMapId  Text;
   parameter ZoneId Text;
   parameter ExtTransportCalendarId Text;
   parameter RouteId Text;
   parameter ShipmentType Text;
   parameter FreightPriceListNo Text;
}

function ValidateAddressNo Structure(AddressDetailStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter ShipAddrNo Text;
   parameter AddrFlag Enumeration(GenYesNo);
   parameter DefaultAddrFlag Enumeration(GenYesNo);
   parameter DeliveryLeadtime Number;
   parameter PickingLeadtime Number;
   parameter ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
}

function GetParentAddressDetails Structure(AddressDetailStructure) {
   parameter OrderNo Text;
}

function GetShipmentCreationCo Structure(ShipmntCreationStructure) {
   parameter ShipmentType Text;
}

function FetchForwardAgentId Text {
   parameter RouteId Text;
   parameter CustomerNo Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure ShipmntCreationStructure {
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
}

structure CustomerOrderLineStructure {
   attribute OrderNo Text {
      maxlength = 100;
      editable = [false];
   }
   attribute LineNo Text {
      label = "Del No";
      editable = [false];
   }
   attribute RelNo Text {
      label = "Del No";
      editable = [false];
   }
   attribute LineItemNo Number {
      label = "Line Item No";
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
   }
   attribute Contact Text {
      label = "Customer Contact";
   }
   attribute ContactName Text {
      maxlength = 200;
   }
   attribute RouteId Text {
      label = "Route";
      format = uppercase;
   }
   attribute ForwardAgentId Text {
      label = "Forwarder";
      format = uppercase;
   }
   attribute ShipViaCode Text {
      label = "Ship Via";
      format = uppercase;
   }
   attribute SupplierShipViaTransit Text {
      editable = [false];
   }
   attribute DeliveryTerms Text {
      format = uppercase;
   }
   attribute CustCalendarId Text {
      label = "Customer Calendar";
      format = uppercase;
   }
   attribute CustCalendarDescription Text;

   attribute ExtTransportCalendarId Text {
      label = "External Transport Calendar";
      format = uppercase;
   }
   attribute ExtTransportCalendarDesc Text;

   attribute DeliveryLeadtime Number {
      maxlength = 3;
      label = "External Transport Lead Time";
   }
   attribute IntrastatExempt Enumeration(IntrastatExempt) {
      label = "Intrastat Exempt";
      required = [true];
   }
   attribute RegionCode Text {
      label = "Region";
      format = uppercase;
   }
   attribute DistrictCode Text {
      label = "District";
      format = uppercase;
   }
   attribute DockCode Text {
      label = "Dock Code";
   }
   attribute DeliverySequence Number;
   attribute SubDockCode Text {
      label = "Sub Dock Code";
   }
   attribute LocationNo Text {
      label = "To Location Number";
   }
   attribute ZoneId Text {
      label = "Freight Zone";
      editable = [false];
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute FreightPriceListNo Text {
      editable = [false];
   }
   attribute SupplyCode Enumeration(OrderSupplyType) {
      --fetch = "supply_code_db";
      maxlength = 3;
      editable = [ETag = null];
   }
   attribute DeliveryType Text {
      editable = [false];
   }
   attribute VendorNo Text {
      editable = [ETag = null];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute CatalogNo Text {
      editable = [false];
   }
   attribute DeliverToCustomerNo Text {
      editable = [false];
   }
   attribute CustomerNo Text {
      editable = [false];
   }
   attribute Company Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute QtyOnOrder Number {
      editable = [false];
   }
   attribute PlannedDeliveryDate Timestamp {
      editable = [false];
   }
   attribute PlannedShipDate Timestamp {
      editable = [false];
   }
   attribute TaxLiability Text {
      editable = [ETag != null];
   }
   attribute DemandCode Enumeration(OrderSupplyType) {
      maxlength = 20;
      editable = [false];
   }
   attribute ShipmentConnectedDb Text {
      fetch = "shipment_connected_db";
      maxlength = 20;
      editable = [false];
   }
   attribute DopNewQtyDemand Text {
      maxlength = 100;
   }
   attribute ShipmentType Text;
   attribute Objstate Enumeration(CustomerOrderLineState);
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
   attribute LanguageCode Text;
   attribute DelTermsLocation Text;
   attribute PickingLeadtime Number;
   attribute ShipAddrInCity Boolean {
      label = "Within City Limit";
      required = [true];
   }
   attribute AddrInCity Boolean {
      label = "Within City Limit";
      required = [true];
      editable = [false];
   }
   attribute DefaultAddrFlag Enumeration(GenYesNo) {
      label = "Default Info";
      required = [true];
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      label = "Single Occurrence";
      required = [true];
   }

   attribute ShipAddrName Text {
      label = "Name";
   }
   attribute ShipAddress1 Text {
      label = "Address 1";
      maxlength = 35;
   }
   attribute ShipAddress2 Text {
      label = "Address 2";
      maxlength = 35;
   }
   attribute ShipAddress3 Text {
      label = "Address 3";
      maxlength = 100;
   }
   attribute ShipAddress4 Text {
      label = "Address 4";
      maxlength = 100;
   }
   attribute ShipAddress5 Text {
      label = "Address 5";
      maxlength = 100;
   }
   attribute ShipAddress6 Text {
      label = "Address 6";
   }
   attribute ShipAddrZipCode Text {
      label = "Zip Code";
      maxlength = 35;
   }
   attribute ShipAddrCity Text {
      label = "City";
      maxlength = 35;
   }
   attribute ShipAddrState Text {
      label = "State";
      maxlength = 35;
   }
   attribute ShipAddrCounty Text {
      label = "County";
      maxlength = 35;
   }
   attribute ShipAddrCountryCode Text {
      label = "Country Code";
   }
   attribute ShipAddrCountryDesc Text {
      label = "Country Desc";
   }

   attribute AddressName Text {
      editable = [false];
   }
   attribute Address1 Text;
   attribute Address2 Text;
   attribute Address3 Text;
   attribute Address4 Text;
   attribute Address5 Text;
   attribute Address6 Text;
   attribute ZipCode Text;
   attribute City Text;
   attribute County Text;
   attribute State Text;
   attribute CountryCode Text;
   attribute CountryDesc Text {
      label = "Country";
      maxlength = 2000;
   }
   attribute ChangedAttribNotInPol Text;
   attribute ReplicateChanges Text;
   attribute ChangeRequest Text;
   attribute AddressInfoChanged Boolean {
      required = [true];
   }

   reference LanguageCodeRef(LanguageCode) to IsoLanguage(LanguageCode) {
      label = "Language code";
   }
   reference FreightPriceListNoRef(FreightPriceListNo) to FreightPriceListBase(PriceListNo) {
      label = "Freight Price List";
   }
   reference CustomerOrderRef(OrderNo) to CustomerOrder(OrderNo);

   reference ShipAddrNoRef(DeliverToCustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference ContactRef(CustomerNo, ShipAddrNo, Contact) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Customer Contact";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship Via";
   }
   reference SupplierShipViaTransitRef(SupplierShipViaTransit) to MpccomShipVia(ShipViaCode) {
      label = "Supplier Ship Via Transit";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference CustCalendarIdRef(CustCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "Customer Calendar";
   }
   reference ExtTransportCalendarIdRef(ExtTransportCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "External Transport Calendar";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(FreightMapId, ZoneId) to FreightZone(FreightMapId, ZoneId) {
      label = "Freight Zone";
   }
}

structure LineAddressStructure {
   attribute AddrInCity Boolean;
   attribute AddressName Text;
   attribute Address1 Text;
   attribute Address2 Text;
   attribute Address3 Text;
   attribute Address4 Text;
   attribute Address5 Text;
   attribute Address6 Text;
   attribute ZipCode Text;
   attribute City Text;
   attribute County Text;
   attribute State Text;
   attribute CountryCode Text;
   attribute CountryDesc Text;
   attribute ContactName Text;
}

structure ShipAddressStructure {
   attribute ShipAddrName Text;
   attribute ShipAddress1 Text;
   attribute ShipAddress2 Text;
   attribute ShipAddress3 Text;
   attribute ShipAddress4 Text;
   attribute ShipAddress5 Text;
   attribute ShipAddress6 Text;
   attribute ShipAddrZipCode Text;
   attribute ShipAddrCity Text;
   attribute ShipAddrCounty Text;
   attribute ShipAddrState Text;
   attribute ShipAddrCountryCode Text;
   attribute ShipAddrCountryDesc Text;
}


structure AddressDetailStructure {
   attribute OrderNo     Text;
   attribute LineNo      Text;
   attribute RelNo       Text;
   attribute LineItemNo  Number;
   attribute ForwardAgentId Text;
   attribute ShipViaCode Text;
   attribute DeliveryLeadtime Number;
   attribute PickingLeadtime Number;
   attribute ExtTransportCalendarId Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute FreightMapId Text;
   attribute ZoneId Text;
   attribute FreightPriceListNo Text;
   attribute TaxLiability Text;
   attribute EndCustomerId Text;
   attribute ShipViaDesc Text;
   attribute DeliveryTermsDesc Text;
   attribute IntrastatExempt Enumeration(IntrastatExempt);
   attribute RegionCode Text;
   attribute DistrictCode Text;
   attribute SupplierShipViaTransit Text;
   attribute RouteId Text;
   attribute CustCalendarId Text;
   attribute ShipmentType Text;
   attribute Contact Text;
   attribute VatFreeVatCode Text;
   attribute ContactName Text;
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
   attribute ParentSingleOccAddrFlag Enumeration(GenYesNo);
   attribute ShipAddrNo Text;
   attribute AddressName Text;
   attribute PlannedDeliveryDate Timestamp;
   attribute PlannedShipDate Timestamp;
   attribute DockCode Text;
   attribute SubDockCode Text;
   attribute LocationNo Text;
   attribute DeliverySequence Number;
   attribute DefaultAddrFlag Enumeration(GenYesNo);
   attribute AddrFlag Enumeration(GenYesNo);
   attribute DeliverToCustomerNo Text;
   attribute ChangedAttribNotInPol Text;
   attribute ReplicateChanges Text;
   attribute ChangeRequest Text;
}

structure AddressReplicationStructure {
   attribute ChangedAttribNotInPol    Text;
   attribute ReplicateColumnsModified Text;
   attribute SendChangeRequest        Text;
}

function GetContactName Text {
   parameter CustomerNo Text;
   parameter DefaultAddrFlag Enumeration(GenYesNo);
   parameter OrderNo Text;
   parameter ShipAddrNo Text;
   parameter Contact Text;
}

function FilterContact List < Entity(CustInfoContactLovPub) >  {
   parameter ShipAddrNo Text;
   where = "ADDRESS_ID = :ShipAddrNo";
}

function GetFreightPriceListNo Text {
   parameter OrderNo Text;
   parameter Contract Text;
   parameter ShipViaCode Text;
   parameter FreightMapId Text;
   parameter ForwardAgentId Text;
   parameter VendorNo Text;
   parameter SupplyCode Enumeration(OrderSupplyType);
}

action SaveDeliveryLineAddress {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
   parameter OrderNo          Text;
   parameter LineNo           Text;
   parameter RelNo            Text;
   parameter LineItemNo       Number;
   parameter AddrName         Text;
   parameter Address1         Text;
   parameter Address2         Text;
   parameter Address3         Text;
   parameter Address4         Text;
   parameter Address5         Text;
   parameter Address6         Text;
   parameter ZipCode          Text;
   parameter City             Text;
   parameter State            Text;
   parameter County           Text;
   parameter CountryCode      Text;
   parameter InCity           Boolean;
   parameter AddrFlag         Enumeration(GenYesNo);
   parameter ReplicateChanges Text;
   parameter ChangeRequest    Text;
   supportwarnings = [true];
   ludependencies = CustomerOrderLine;
}

action SaveOrderLine {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
   parameter DetailRec Structure(AddressDetailStructure);
   parameter OrderNo     Text;
   parameter LineNo      Text;
   parameter RelNo       Text;
   parameter LineItemNo  Number;
   supportwarnings = [true];
   ludependencies = CustomerOrderLine;
}

function CheckDeliveryInfoReplication Structure(AddressReplicationStructure) {
   parameter DetailRec  Structure(AddressDetailStructure);
   parameter AddressRec Structure(ShipAddressStructure);
}

//function CheckLineAddressReplication Structure(AddressReplicationStructure) {
//   parameter AddressRec Structure(LineAddressStructure);
//}
