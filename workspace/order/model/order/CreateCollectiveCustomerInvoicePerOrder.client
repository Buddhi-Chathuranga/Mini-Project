--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
--  201029     MaEelk  SC2020R1-10872, Size of the badge CustomerOrderRef.Objstate was set to be the default
--  190614     KHVESE  SCUXXW4-22308, Changed the singleton to selector and overriden the selecor.
--  180917     RuLiLK  SCUXXW4-8990, Converted from frmCollectiveInvperOrder using MTG Version: 1.27.
--  ------     ------  ---------------------------------------------------------
client CreateCollectiveCustomerInvoicePerOrder;
component ORDER;
layer Core;
projection CreateCollectiveCustomerInvoicePerOrder;
include fragment CustOrdCust1Selector;
include fragment SetupCustomerInvoiceClosingDateDialog;
include fragment SalesPartSalesmanLovSelector;
include fragment CustBillAddressLovSelector;
include fragment CustomerOrderStateBadge;

-------------------------------- MAIN PAGES ---------------------------------

page Form using CollectiveInvoicePerOrderSet {
   label = "Collective Invoice per Order";
   selector CollectiveInvoicePerOrderSelector;
   group CollectiveInvperOrderGroup;
   list CollectiveInvPerOrderList(CollectiveInvPerOrderArray);
}

--------------------------------- COMMANDS ----------------------------------

command CreateCollectiveInvoiceCommand for CollectiveInvoicePerOrderLine {
   label = "Create Collective Invoice";
   mode = SelectedRecords;
   enabled = [true];

   variable ClosestClosingDate {
      type = Date;
   }
   variable CustomerInvoiceClosingDateSelectionVar {
      type = Enumeration(CustomerInvoiceClosingDateEnum);
   }

   variable CreateCollectiveInvoice {
      type = Boolean;
   }
   variable RentalLinesExistVar {
      type = Boolean;
   }

   variable KeyrefsVar;
   bulkexecute {

      ifany [ClosingDate != null] {
         set CustomerInvoiceClosingDateSelectionVar = "UsePredefinedClosingDate";
         dialog ClosingDateDialog(ClosestClosingDate, CustomerInvoiceClosingDateSelectionVar) into(ClosestClosingDate, CustomerInvoiceClosingDateSelectionVar) {
            when CANCEL {
               exit;
            }
         }
      }
      else
         {
         set CustomerInvoiceClosingDateSelectionVar = "IgnoreClosingDate";
      }
      confirm("Customer(s) will be invoiced.") {
         when CANCEL {
            exit;
         }
      }
      set CreateCollectiveInvoice = true;
      call CheckRentalLinesExist(Selection) into RentalLinesExistVar;
      if [RentalLinesExistVar = "TRUE"] {
         confirm("Note that any due rental transactions will not be generated automatically as part of the collective invoicing process, these will first have to be generated separately. Would you like to continue?") {
            when CANCEL {
               set CreateCollectiveInvoice = false;
            }
         }
      }

      if [CreateCollectiveInvoice = true] {
         -- ToDO! TEUXX-11975: Selection needs to support more than 32000 characters.
         call MakeCollectiveInvoice(Selection, parent.TaxLiabilityCountryDb, ClosestClosingDate, CustomerInvoiceClosingDateSelectionVar) {
            when SUCCESS {
               hideselection();
            }
            when FAIL {
               error("${error.Message}");
               exit;
            }
         }
      }
   }
}
command ViewOrderLinesCommand for CollectiveInvoicePerOrderLine {
   label = "View Order Lines";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/CollectiveInvoiceableLinesPerOrder/Form?$filter=OrderNo eq $[OrderNo] and TaxLiabilityCountryDb eq $[TaxLiabilityCountryDb]";
   }
}

command RentalTransactionsCommand for CollectiveInvoicePerOrderLine {
   label = "Rental Transactions";
   mode = SelectedRecords;
   enabled = [RentalLinesExist = "TRUE"];
   bulkexecute {
      bulknavigate "page/RentalTransactions/List?$filter=OrderRef1 eq $[OrderNo] and RentalTypeDb eq 'CUST ORDER'";
   }
}

--------------------------------- SELECTORS ---------------------------------

@Override
selector CollectiveInvoicePerOrderSelector for CollectiveInvoicePerOrder {
   label = "${CustomerNo} - ${Contract} - ${PayTermIdKey}";
   static CustomerNo;
   static JinsuiInvoice {
      visible = [false];
      searchable = false;
   }
   static PayTermIdKey;
   static UsePriceInclTax {
      visible = [false];
      searchable = false;
   }
   static CurrencyCode {
      visible = [false];
      searchable = false;
   }
   static BillAddrNoKey {
      visible = [false];
      searchable = false;
   }
   static TaxLiabilityCountryDb {
      visible = [false];
      searchable = false;
   }
   static Contract;
   static Company {
      visible = [false];
      searchable = false;
   }
   static CurrencyRateTypeKey {
      visible = [false];
      searchable = false;
   }
   static ProjectIdKey {
      visible = [false];
      searchable = false;
   }
   fieldorder = CustomerNo, Contract, PayTermIdKey;
}

---------------------------------- GROUPS -----------------------------------
group CollectiveInvperOrderGroup for CollectiveInvoicePerOrder {
   label = "";

   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      label = "Invoice Customer";
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerNoRef.Name;
   }
   field ContractRef {
      size = Small;
   }
   field OrdersNotInvoiced {
      size = Small;
   }
   field CurrencyCodeRef {
      size = Small;
   }
   field CustOrdCustomerRef.CyclePeriod {
      label = "Cycle Interval";
      size = Small;

   }
   field PayTermIdRef {
      size = Small;
   }

   lov BillAddressRef with CustBillAddressLovSelector {
      label = "Document Address";
      preview = CustBillAddressLovCard;
      size = Small;
   }
   field PlannedInvoiceDate;
   field CurrencyRateType {
      size = Small;
   }
   field ProjectId {
      size = Small;
   }
   field TaxLiabilityCountry {
      size = Small;
   }
   @DynamicComponentDependency JINSUI
   field JinsuiInvoiceBool {
      size = Small;
   }
   field UsePriceInclTaxBool {
      size = Small;
   }
}
----------------------------------- LISTS -----------------------------------
list CollectiveInvPerOrderList for CollectiveInvoicePerOrderLine {
   label = "Orders";
   lov CustomerNoDeliveryRef with ReferenceCustOrdCust1Selector {
      label = "Customer";
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerNoDeliveryRef.Name;

   }
   field OrderNo {
      size = Small;
   }
   fieldset CustomerOrderStateReferencedFieldSet;

   lov SalesmanCodeRef with ReferenceSalesPartSalesmanLovSelector {
      contactwidget {
         enabled = [SalesmanCodeRef.SalesmanCode != null];
         source = Person;
      }
   }

   field WantedDeliveryDate;
   field DateEntered;
   field ClosingDate;
   fieldranking CustomerNoDelivery, CustomerName, OrderNo, CustomerOrderRef.State, WantedDeliveryDate, DateEntered, ClosingDate;

   commandgroup CommandGroupCmdGroup {

      command CreateCollectiveInvoiceCommand;
      command ViewOrderLinesCommand;
      command RentalTransactionsCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------

