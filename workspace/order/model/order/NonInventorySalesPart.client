--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-18  Skanlk  Bug 161110(SC21R2-3223), Modified SalesPartServiceGroup by making PartDescriptionInUse field as multiline field.
-- 2021-02-22  WaSalk  SC2020R1-12577, Removed fragment LocalizationControlCenterHandler and modified StatisticalCodeGroup visibility condition,
-- 2021-02-22          valdate command of Contract field to support LCC concept.
-- 2020-09-17  SBalLK  GESPRING20-537, Added to enable StatisticalCodeGroup when ItalyIntrastatEnabled and part type is service.
-- 2020-02-19  MaEelk  SCXTEND-2225, Enabled the Duplicate Functionality.
-- 2019-11-07  FRBESE  SCXTEND-1156, Changed NonInventorySalesPartNavEntry navigator entry index from 700 to 500.
-- 2019-05-16  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand
-- 2019-01-15  IzShlk  SCUXXW4-9427, Converted from frmSalesPartService using MTG Version: 1.34
--------------------------------------------------------------------------------------

client NonInventorySalesPart;
component ORDER;
layer Core;
projection NonInventorySalesPartHandling;
include fragment AllSalesPartServiceLovSelector;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLov2Selector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment ApplicationCountrySelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment SalesPartBaseGroups;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment PartDescriptionsTab;
include fragment PartCharacteristicsTab;
include fragment SalesPartChargeTab;
include fragment DiscreteCharacNumericValueSelector;
include fragment ConfigurationBasePricingTab;
-- gelr: good_service_statistical_code, begin
include fragment StatisticalCodeSelector;
-- gelr: good_service_statistical_code, end

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry NonInventorySalesPartNavEntry parent OrderNavigator.SalesPart at index 500 {
      label = "Non-Inventory Sales Part";
      page Form;
   }
   entry NonInventorySalesPartMasterNavEntry parent OrderNavigator.PartMasterDataSalesPart at index 500 {
      label = "Non-Inventory Sales Part";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using SalesPartSet {
   label = "Non-Inventory Sales Part";
   startupmode = search;
   selector SalesPartSelector;
   group SalesPartServiceGroup;

   tabs {
      tab {
         label = "General";
         arrange {
            group IntrastatGroup;
            group SourcingGroup;
         }
         arrange {
            group UnitOfMeasureGroup;
            group Grouping;
         }
         arrange {

            group PricingGroup;
            group TaxGroup;
         }
         arrange {
            group GTINGroup;
            group MiscInfoGroup;
         }
         arrange {
            group PartIndicatorsGroup {
               collapsed = [true];
            }
            group ReplacementPartGroup {
               collapsed = [true];
            }
            -- gelr: good_service_statistical_code, begin
            group StatisticalCodeGroup {
               visible = ["GOOD_SERVICE_STATISTICAL_CODE" in EnabledLccParams and EnabledLccParams != "" or
               (("ITALY_INTRASTAT" in EnabledLccParams) and NonInvPartType = "Service")];
               collapsed = [true];
            }
            -- gelr: good_service_statistical_code, end
         }
      }
      tab {
         label = "Descriptions";
         visible = [not(isNew)];
         group SalesPartLanguageDescGroup;
         list SalesPartLanguageDescList(SalesPartLanguageDescArray);
      }
      tab {
         label = "Characteristics";
         visible = [not(isNew)];
         group PartCharacteristicsGroup;
         list SalesPartCharacteristicList(SalesPartCharacteristicArray);
      }
      tab {
         label = "Charges";
         visible = [not(isNew)];
         list SalesPartChargeList(SalesPartChargeArray);
      }
      @DynamicComponentDependency CFGCHR
      tab {
         label = "Configuration Base Pricing";
         visible = [not(isNew) and Configurable];
         list CharacteristicBasePriceList(CharacteristicBasePriceArray) {
            copyoncruddefault(CatalogNo) to(PartNo);
            copyoncruddefault(CatalogNo) to(CatalogNo);
         }
         list OptionValueBasePriceList(OptionValueBasePriceArray) bind CharacteristicBasePriceList {
            display = Nested;
         }
      }
   }

   command ComplementaryPartsCommand;
   command DocumentTextCommand;

   @DynamicComponentDependency VIM
   command ConnectServicesCommand;

   commandgroup CommandGroup3CmdGroup {
      label = "Customer Warranty";
      command CustomerWarrantyCreateEditCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ComplementaryPartsCommand for SalesPart {
   label = "Complementary Parts";
   enabled = [CatalogNo != null];
   execute {
      navigate "page/ComplementaryParts/List?$filter=Contract eq $[Contract] and ParentPartNo eq $[CatalogNo]";
   }
}
command DocumentTextCommand for SalesPart {
   label = "Document Text";
   enabled = [NoteId != null];

   variable LabelTextVar;
   execute {
      set LabelTextVar = " for Non-Inventory Sales Part - ${CatalogNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

@DynamicComponentDependency VIM
command ConnectServicesCommand for SalesPart {
   label = "Connect Services";
   enabled = [true];
   mode = SingleRecord;
   execute {
      navigate "page/ConnectMxServicesToNonInventorySalesPart/Form?$filter=Contract eq $[Contract] and CatalogNo eq $[CatalogNo]";
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector SalesPartSelector for SalesPart {
   label = "${CatalogNo} - ${PartDescriptionInUse} - ${Contract}";
   static CatalogNo;
   static PartDescriptionInUse;
   static Contract;
}

---------------------------------- GROUPS -----------------------------------
group SalesPartServiceGroup for SalesPart {
   label = "";
   -- for search purpose
   field CatalogNo {
      visible = [false];
      searchable = true;
   }
   lov CatalogNoRef with ReferenceAllSalesPartServiceLovSelector using CatalogFilter(Contract) {
      freeinput = [true];
      searchable = false;
      validate command {
         variable CatalogInfoVar {
            type = Structure(CatalogInfo);
         }

         execute {
            call ValidateCatalogNo(CatalogNo, Contract) into CatalogInfoVar;
            set Configurable = CatalogInfoVar.Configurable;

            if [CatalogInfoVar.InfoMessage = null] {
               if [CatalogInfoVar.CatalogDesc != null] {
                  if [PartDescriptionInUse = null] {
                     set CatalogDesc = CatalogInfoVar.CatalogDesc;
                     set PartDescriptionInUse = CatalogInfoVar.CatalogDesc;
                  }
               }
               if [CatalogInfoVar.UnitCode != null] {
                  if [SalesUnitMeas = null and PriceUnitMeas = null] {
                     set SalesUnitMeas = CatalogInfoVar.UnitCode;
                     set PriceUnitMeas = CatalogInfoVar.UnitCode;
                  }
               }
            }
            else {
               info("${CatalogInfoVar.InfoMessage}");
            }
         }
      }
   }
   field PartDescriptionInUse {
      editable = [not(SiteDiscomInfoRef.UsePartcaDescOrder  and PartCatalogRef.PartNo != null)];
      multiline = true;
      size = Medium;
      validate command {
         execute {
            if [CatalogDesc = null or not(SiteDiscomInfoRef.UsePartcaDescOrder)] {
               set CatalogDesc = PartDescriptionInUse;
            }
         }
      }
   }

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         variable ContractInfoVar {
            type = Structure(ContractInfo);
         }
         execute {
            call ValidateContract(Contract) into ContractInfoVar;
            set Company = ContractInfoVar.Company;
            set CurrencyCode = ContractInfoVar.Currency;
            set UsePriceInclTax = ContractInfoVar.UsePriceInclTax;

            if [TaxClassId = null] {
               set TaxCode = ContractInfoVar.TaxCode;
               set Taxable = ContractInfoVar.Taxable;
            }
            -- gelr:localization_control_center, begin
            set EnabledLccParams = ContractInfo.EnabledLccParams;
            -- gelr:localization_control_center, end
         }
      }
   }
   @DynamicComponentDependency RENTAL
   field SalesType {
      size = Small;
   }
   field NonInvPartType {
      size = Small;
      validate command {
         execute {
            if [NonInvPartType = "Service"] {
               set CustomsStatNo = null;
               set IntrastatConvFactor = null;
            }
            else {
               if [ItalyIntrastatEnabled] {
                  set StatisticalCode = null;
               }
            }
         }
      }
   }
   field Activeind {
      size = Small;
      enumerationtrue = "ActivePart";
      enumerationfalse = "InactivePart";
   }
   field Company {
      visible = [false];
   }
}

group SourcingGroup for SalesPart {
   label = "Sourcing";

   @DynamicComponentDependency PURCH
   lov PurchasePartNoRef with ReferencePurchasePartLov2Selector using PartFilter(Contract);
   field SourcingOption {
      validate command {
         execute {
            if [not(SourcingOption in("NotDecided", "UseSourcingRule"))] {
               set RuleId = null;
            }
         }
      }
   }
   lov RuleIdRef with ReferenceSourcingRuleSelector {
      description = RuleIdRef.Description;
   }
}

group UnitOfMeasureGroup for SalesPart {
   label = "Unit of Measure";
   field SalesUnitMeasRef {
      size = Small;
      validate command {
         variable PriceConvFactorVar {
            type = Number;
         }

         execute {
            if [SalesUnitMeas != null] {
               call UnitMeasureExist(SalesUnitMeas) into UomExistVar;
               if [PriceUnitMeas = null] {
                  set PriceUnitMeas = SalesUnitMeas;
               }
               call GetPriceConvFactor(SalesUnitMeas, PriceUnitMeas) into PriceConvFactorVar;
               set PriceConvFactor = PriceConvFactorVar;
            }
         }
      }
   }
   field PriceConvFactor;
   field PriceUnitMeasRef {
      size = Small;
      validate command {
         variable PriceConvFactorVar {
            type = Number;
         }

         execute {
            if [PriceUnitMeas != null] {
               call UnitMeasureExist(PriceUnitMeas) into UomExistVar;

               call GetPriceConvFactor(SalesUnitMeas, PriceUnitMeas) into PriceConvFactorVar;
               set PriceConvFactor = PriceConvFactorVar;
            }
         }
      }
   }
}

group PartIndicatorsGroup for SalesPart {
   label = "Indicators";
   field ExportToExternalApp;
   field Configurable {
      size = Small;
   }
   field DocumentText {
      size = Small;
   }
   field CustomerWarranty {
      size = Small;
      searchable = false;
   }
}

group IntrastatGroup for SalesPart {
   label = "Intrastat";
   lov CustomsStatNoRef with ReferenceCustomsStatisticsNumberSelector {
      editable = [NonInvPartType != "Service"];
      description = CustomsStatNoRef.Description;
      validate command {
         execute {
            if [CustomsStatNo = null] {
               set IntrastatConvFactor = null;
            }
         }
      }
   }
   field IntrastatConvFactor {
      editable = [NonInvPartType != "Service"];
      size = Small;
   }
   field CustomsStatNoRef.CustomsUnitMeas {
      size = Small;
      label = "Customs UoM";
   }
   lov CountryOfOriginRef with ReferenceApplicationCountrySelector {
      description = CountryOfOriginRef.Description;
      searchable = false;
   }
}

@Override
group TaxGroup for SalesPart {
   field TaxCode {
      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePricesStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPrice, ListPriceInclTax, RentalListPrice, RentalListPriceInclTax, Taxable, TaxCode, Company) into PriceInfoVar;
            if [UsePriceInclTax] {
               set ListPrice = PriceInfoVar.Price;
               set RentalListPrice = PriceInfoVar.RentalPrice;
            }
            else {
               set ListPriceInclTax = PriceInfoVar.PriceInclTax;
               set RentalListPriceInclTax = PriceInfoVar.RentalPriceInclTax;
            }
         }
      }
   }
   field Taxable {
      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePricesStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPrice, ListPriceInclTax, RentalListPrice, RentalListPriceInclTax, Taxable, TaxCode, Company) into PriceInfoVar;
            if [UsePriceInclTax] {
               set ListPrice = PriceInfoVar.Price;
               set RentalListPrice = PriceInfoVar.RentalPrice;
            }
            else {
               set ListPriceInclTax = PriceInfoVar.PriceInclTax;
               set RentalListPriceInclTax = PriceInfoVar.RentalPriceInclTax;
            }
         }
      }
   }
}

@Override
group PricingGroup for SalesPart {
   currency ListPrice(CurrencyCode) {
      validate command {
         variable PriceInclTaxVar {
            type = Number;
         }
         execute {
            call CalculatePriceInclTax(ListPrice, Taxable, TaxCode, Company) into PriceInclTaxVar;
            set ListPriceInclTax = PriceInclTaxVar;
         }
      }
   }
   currency ListPriceInclTax(CurrencyCode) {
      validate command {
         variable PriceVar {
            type = Number;
         }
         execute {
            call CalculatePrice(ListPriceInclTax, Taxable, TaxCode, Company) into PriceVar;
            set ListPrice = PriceVar;
         }
      }
   }
   @DynamicComponentDependency RENTAL
   currency RentalListPrice(CurrencyCode) {
      editable = [not(UsePriceInclTax)];
      validate command {
         variable PriceInclTaxVar {
            type = Number;
         }
         execute {
            call CalculatePriceInclTax(RentalListPrice, Taxable, TaxCode, Company) into PriceInclTaxVar;
            set RentalListPriceInclTax = PriceInclTaxVar;
         }
      }
   }
   @DynamicComponentDependency RENTAL
   currency RentalListPriceInclTax(CurrencyCode) {
      label = "Rental Price Including Tax";
      editable = [UsePriceInclTax];
      validate command {
         variable PriceVar {
            type = Number;
         }
         execute {
            call CalculatePrice(RentalListPriceInclTax, Taxable, TaxCode, Company) into PriceVar;
            set RentalListPrice = PriceVar;
         }
      }
   }
   field Cost;
}
group MiscInfoGroup for SalesPart {
   label = "Miscellaneous";
   field MinimumQty;
   field CloseTolerance {
      searchable = false;
   }
   field DateEntered;
   field NoteText {
      label = "Notes";
      size = Large;
      multiline = true;
   }
}
-- gelr: good_service_statistical_code, begin
group StatisticalCodeGroup for SalesPart {
   label = "Goods/Services Statistical Code";
   lov StatisticalCodeRef with ReferenceStatisticalCodeSelector using StatisticalCodeFilter(Company) {
      description = StatisticalCodeRef.Description;
      size = Large;
   }
}
-- gelr: good_service_statistical_code, end
----------------------------------- LISTS -----------------------------------

