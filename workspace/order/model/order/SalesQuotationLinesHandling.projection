------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------
-- 2021-07-06  ThKrlk  Bug 159890(SCZ-15402), Modified OrderQuotationLine entity to avoid duplication of Tax Amount/Base. And get Tax Amount/Curr.
-- 2020-11-12  RavDlk  SC2020R1-11228, Handled booleans and enumerations for some attrbutes
-- 2020-09-17  MaEelk  GESPRIND20-5399, added Discounted Price Rounded parameter enabled condition when fetching the SQL columns
-- 2020-09-17          to Discount, QuotationDiscount and AdditionalDiscount
-- 2018-06-05  SeJalk  SCUXXW4-991, created from tbwOrderQuotationLineOverview using MTG Version: 1.20
------------------------------------------------------------------------------------------
projection SalesQuotationLinesHandling;
component ORDER;
layer Core;
description "Use this API to get an overview of the quotation lines.";
category Users;
include fragment SalesPartGtinNoLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CustAddressShipLovSelector;
include fragment TaxCalcStructureActiveSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment OrderQuotationLovSelector;
include fragment OrderCancelReasonLovSelector;
include fragment CancelSalesQuotationLineDialog;
include fragment LostWonQuotationDialog;
include fragment LoseWinReasonLovSelector;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
@DynamicComponentDependency CFGCHR
include fragment ReplaceCharacteristicValueDialog;
include fragment CoChargeJoinSelector;
include fragment OrdersPerSiteLovSelector;
include fragment QuotationsPerSiteLovSelector;
include fragment TaxLinesCommonAssistant;
include fragment OrderQuotationLineInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset OrderQuotationLineSet for OrderQuotationLine;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity OrderQuotationLine {
   crud = Read, Update;
   ludependencies = OrderQuotationLine, OrderQuoteLineDiscount, DocumentText;

   keys = QuotationNo, LineNo, RelNo, LineItemNo;

   where = "LINE_ITEM_NO <= 0 AND QUOTATION_NO IN (SELECT QUOTATION_NO FROM ORDER_QUOTATION  WHERE B2B_ORDER_DB = 'FALSE')";

   attribute QuotationNo Text {
      format = uppercase;
   }
   attribute RelNo Text {
      label = "Del No";
   }
   attribute Rental Boolean("TRUE", "FALSE") {
      label = "Rental";
      fetch = "RENTAL_DB";
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute CustomerNo Text {
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Description";
      editable = [false];
   }
   attribute Configurable Boolean {
      fetch = "DECODE(Sales_Part_API.Get_Configurable_Db(CONTRACT, CATALOG_NO),'CONFIGURED','TRUE', 'FALSE')";
      label = "Configurable";
      editable = [false];
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   @DynamicComponentDependency ORDSTR
   attribute InterimOrder Text {
      fetch = "Order_Quotation_Line_API.Get_Interim_Order_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO, CTP_PLANNED_DB)";
      editable = [false];
      label = "Interim Order Header";
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
      editable = [false];
   }
   attribute DesiredQty Number {
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute AvailableQty Number {
      fetch = "Reserve_Customer_Order_API.Get_Available_Qty(NVL(Supplier_API.Get_Acquisition_Site(vendor_no),contract), NVL(part_no,catalog_no),configuration_id,NULL,NULL,NULL,NULL,order_supply_type_db,'COMPANY OWNED',NULL,NULL,condition_code,vendor_no,'FALSE')";
      editable = [false];
   }
   attribute InputUoMGroup Boolean("TRUE", "FALSE") {
      fetch = "Input_Unit_Meas_Group_API.Is_Usage_Allowed(Inventory_Part_API.Get_Input_Unit_Meas_Group_Id( CONTRACT, part_no ), 'ORDER' )";
      label = "Input UoM Group";
      editable = [false];
   }
   attribute InputUnitMeas Text {
      label = "Input UoM";
      editable = [false];
   }
   attribute InputQty Number {
      editable = [false];
   }
   attribute InputConvFactor Number {
      editable = [false];
   }
   attribute InputVariableValues Text {
      label = "Input Values";
      editable = [false];
   }
   attribute PriceBreaks Boolean("TRUE", "FALSE") {
      fetch = "Order_Quotation_Grad_Price_API.Grad_Price_Exist(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      editable = [false];
   }
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute SalesUnitMeasure Text {
      label = "UoM";
      editable = [false];
   }
   attribute BaseSaleUnitPrice Number {
      label = "Price/Base";
      editable = [false];
   }
   attribute BaseUnitPriceInclTax Number {
      label = "Price incl Tax/Base";
      editable = [false];
   }
   attribute PartPrice Number {
      label = "Source Price/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute PriceSource Enumeration(PricingSource) {
      editable = [false];
   }
   attribute PriceSourceId Text {
      editable = [false];
      format = uppercase;
   }
   attribute CalcCharPrice Number {
      label = "Calculated Characteristics Price/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute CharPrice Number {
      label = "Characteristics Price/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute CalculatedPriceCurrency Text {
      fetch = "PART_PRICE + CALC_CHAR_PRICE";
      label = "Calculated Price/Curr";
      editable = [false];
   }
   attribute SaleUnitPrice Number {
      label = "Price/Curr";
      editable = [false];
   }
   attribute UnitPriceInclTax Number {
      label = "Price incl Tax/Curr";
      editable = [false];
   }
   attribute PriceFreeze Enumeration(FreezeFlag) {
      fetch = "price_freeze_db";
      label = "Price Freeze";
      required = [true];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute Discount Number {
      fetch = "DECODE(Order_Quotation_API.Get_Disc_Price_Round_Db(QUOTATION_NO),'TRUE',DECODE(Order_Quotation_API.Get_Use_Price_Incl_Tax_Db(QUOTATION_NO), 'FALSE',ORIGINAL_DISCOUNT, DISCOUNT),DISCOUNT)";
      label = "Discount %";
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute QuotationDiscount Number {
      fetch = "DECODE(Order_Quotation_API.Get_Disc_Price_Round_Db(QUOTATION_NO),'TRUE',DECODE(Order_Quotation_API.Get_Use_Price_Incl_Tax_Db(QUOTATION_NO), 'FALSE',ORIGINAL_QUOTATION_DISCOUNT, DISCOUNT),QUOTATION_DISCOUNT)";

      label = "Group Discount %";
      editable = [false];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute AdditionalDiscount Number {
      fetch = "DECODE(Order_Quotation_API.Get_Disc_Price_Round_Db(QUOTATION_NO),'TRUE',DECODE(Order_Quotation_API.Get_Use_Price_Incl_Tax_Db(QUOTATION_NO), 'FALSE',ORIGINAL_ADD_DISCOUNT, ADDITIONAL_DISCOUNT),ADDITIONAL_DISCOUNT)";

      label = "Additional Discount %";
      required = [true];
      editable = [false];
   }
   attribute TotalOrderLineDiscount Number {
      fetch = "Order_Quotation_Line_Api.Get_Total_Discount(QUOTATION_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Total Order Line Discount %";
      required = [true];
      editable = [false];
   }
   attribute FreeOfCharge Boolean("TRUE", "FALSE") {
      fetch = "free_of_charge_db";
      editable = [false];
   }
   attribute FreeOfChargeTaxBasis Number {
      label = "Tax Basis for FOC/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute CompanyBearingTaxAmountBase Number {
      fetch = "Order_Quotation_Line_API.Get_Comp_Bearing_Tax_Amount(QUOTATION_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Company Bearing Tax Amount/Base ";
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalBase Number {
      fetch = "Order_Quotation_Line_API.Get_Base_Sale_Price_Total(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Net Amount/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute TaxAmount Number {
      fetch = "Order_Quotation_Line_API.Get_Total_Tax_Amount_Curr(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Tax Amount/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute GrossTotalBase Number {
      fetch = "Order_Quotation_Line_API.Get_Base_Price_Incl_Tax_Total(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Gross Amount/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalCurrency Number {
      fetch = "Order_Quotation_Line_API.Get_Sale_Price_Total(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Net Amount/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute GrossTotalCurrency Number {
      fetch = "Order_Quotation_Line_API.Get_Sale_Price_Incl_Tax_Total(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Gross Amount/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute OrderSupplyType Enumeration(OrderSupplyType) {
      label = "Supply Code";
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute SupplySiteInventoryUoM Text {
      fetch = "INVENTORY_PART_API.Get_Unit_Meas(Supplier_API.Get_Acquisition_Site(VENDOR_NO), PART_NO)";
      label = "Supply Site Inventory UoM";
      editable = [false];
   }
   attribute ChargedItem Enumeration(ChargedItem) {
      fetch = "charged_item_db";
      label = "Charged Item";
      required = [true];
   }
   attribute DeliveryType Text {
      editable = [false];
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
      editable = [false];
   }
   attribute Cost Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute TaxCode Text {
      editable = [false];
   }
   attribute TaxCalcStructureId Text {
      editable = [false];
   }
   attribute TaxLiability Text {
      editable = [false];
   }
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(COMPANY, 'ORDER_QUOTATION_LINE', QUOTATION_NO,LINE_NO,REL_NO,LINE_ITEM_NO, '*')";
      label = "Multiple Tax Lines";
      editable = [false];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID),'1','TRUE','FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(CUST_WARRANTY_ID,NULL,'FALSE','TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute OriginalPartNo Text {
      editable = [false];
   }
   attribute ConOrderNo Text {
      editable = [false];
      label = "CO No";
   }
   attribute ConLineNo Text {
      editable = [false];
      label = "CO Line No";
   }
   attribute ConRelNo Text {
      editable = [false];
      label = "CO Rel No";
   }
   attribute PlannedDueDate Date {
      editable = [false];
   }
   attribute ConfigurationRequiredDate Date {
      fetch = "planned_delivery_date";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
      editable = [false];
   }
   attribute PromisedDeliveryDate Timestamp {
      editable = [false];
      label = "Promised Delivery Date/Time";
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalStartDate Date {
      fetch = "Rental_Object_API.Get_Planned_Rental_Start_Date(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalStartTime Time {
      fetch = "Rental_Object_API.Get_Planned_Rental_Start_Time(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      label = "Planned Rental Start Time";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalDuration Number {
      fetch = "Rental_Object_API.Get_Planned_Rental_Duration(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute RentalDurationUoM Enumeration(RentalDurationUnitMeas) {
      fetch = "Rental_Object_API.Get_Rental_Duration_Unit_Me_Db(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      label = "Rental Duration UoM";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalEndDate Date {
      fetch = "Rental_Object_API.Get_Planned_Rental_End_Date(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalEndTime Time {
      fetch = "Rental_Object_API.Get_Planned_Rental_End_Time(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute ChargeableDays Number {
      fetch = "RENTAL_OBJECT_MANAGER_API.Calculate_Chargeable_Days(Rental_Object_API.Get_Planned_Rental_Start_Date(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION')), Rental_Object_API.Get_Planned_Rental_End_Date(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION')), Rental_Object_API.Get_Chargeable_Id(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION')), Rental_Object_API.Get_Exception_Id(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION')), Rental_Period_Rounding_API.Encode(Rental_Object_API.Get_Period_Rounding(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalReturnDate Date {
      fetch = "Rental_Object_API.Get_Planned_Rental_Return_Date(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute ChargeableDaysID Text {
      fetch = "Rental_Object_API.Get_Chargeable_Id(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      label = "Chargeable Days ID";
      maxlength = 30;
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute DateExceptionID Text {
      fetch = "Rental_Object_API.Get_Exception_Id(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      label = "Date Exception ID";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency RENTAL
   attribute PeriodRounding Text {
      fetch = "Rental_Object_API.Get_Period_Rounding(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute ScheduleID Text {
      fetch = "Rental_Object_API.Get_Trans_Schedule_Id(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION'))";
      label = "Schedule ID";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency RENTAL
   attribute ScheduleDescription Text {
      fetch = "RENTAL_TRANS_SCHEDULE_API.Get_Description(Rental_Object_API.Get_Trans_Schedule_Id(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO,'ORDER QUOTATION')))";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute StartRentalOption Text {
      fetch = "Rental_Object_API.Get_Start_Rental_Option(Rental_Object_API.Get_Rental_No(QUOTATION_NO, LINE_NO, REL_NO, LINE_ITEM_NO, 'ORDER QUOTATION'))";
      editable = [false];
   }
   attribute DefaultAddrFlag Enumeration(GenYesNo) {
      fetch = "Default_Addr_Flag_Db";
      label = "Default Info";
      required = [true];
   }
   attribute SingleOccAddrFlag Boolean("TRUE", "FALSE") {
      label = "Single Occurrence";
      editable = [false];
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
      editable = [false];
   }
   attribute EndCustomerId Text {
      editable = [false];
   }
   attribute EndCustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(END_CUSTOMER_ID)";
      editable = [false];
   }
   attribute ShipViaCode Text {
      editable = [false];
   }
   attribute DeliveryTerms Text {
      editable = [false];
   }
   attribute DelTermsLocation Text {
      editable = [false];
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute ZoneId Text {
      editable = [false];
      label = "Freight Zone";
   }
   attribute FreightPriceListNo Text {
      editable = [false];
   }
   attribute ForwardAgentId Text {
      editable = [false];
      format = uppercase;
   }
   attribute DeliveryLeadtime Number {
      editable = [false];
   }
   attribute ExtTransportCalendarId Text {
      label = "External Transport Calendar";
      editable = [false];
   }
   attribute ReleasePlanning Enumeration(ReleasePlanning) {
      fetch = "release_planning_db";
      label = "Release For Planning";
      editable = [false];
   }
   attribute CustomerPartBuyQty Number {
      label = "Customer Sales Qty";
   }
   attribute CustomerPartUnitMeas Text {
      label = "Customer UoM";
      editable = [false];
   }
   attribute ProbabilityToWin Number {
      label = "Probability %";
      editable = [false];
   }
   attribute LostTo Text {
      editable = [false];
   }
   attribute ReasonId Text {
      editable = [false];
   }
   attribute LatestReleaseDate Date {
      editable = [false];
   }
   attribute CtpPlanned Enumeration(GenYesNo) {
      label = "Capability Check";
      fetch = "Ctp_Planned_Db";
      editable = [false];
   }
   attribute SelfBilling Enumeration(SelfBillingType) {
      label = "Self Billing";
      fetch = "Self_Billing_Db";
      editable = [false];
      required = [true];
   }
   attribute CancelReason Text {
      editable = [ETag != null];
   }
   attribute GtinNo Text {
      fetch = "SALES_PART_API.Get_Gtin_No(CONTRACT, CATALOG_NO, INPUT_UNIT_MEAS)";
      editable = [false];
   }
   attribute PartFreightFactor Number {
      fetch = "Part_Catalog_API.Get_Freight_Factor(NVL(PART_NO,CATALOG_NO))";
      editable = [false];
   }
   attribute AdjustedWeightNet Number {
      editable = [false];
   }
   attribute AdjustedWeightGross Number {
      editable = [false];
   }
   attribute AdjustedVolume Number {
      editable = [false];
   }
   attribute FreightFree Boolean("TRUE", "FALSE") {
      label = "Freight Free";
      fetch = "freight_free_db";
      editable = [false];
   }
   attribute Condition Text {
      fetch = "Order_Quotation_Line_API.Get_Allowed_Operations__( QUOTATION_NO,LINE_NO, REL_NO, LINE_ITEM_NO)";
      editable = [false];
   }
   attribute Company Text {
      editable = [false];
   }
   attribute ConLineItemNo Number {
      editable = [false];
   }
   attribute ConfiguredLinePriceId Number {
      editable = [false];
   }
   attribute CurrencyRate Number {
      maxlength = 11;
   }
   attribute RevisedQtyDue Number {
      editable = [false];
   }
   attribute TaxAmountBase Number {
      fetch = "Order_Quotation_Line_API.Get_Total_Tax_Amount_Base(QUOTATION_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Tax Amount/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute TaxLiabilityTypeDb Text {
      label = "Tax Liability Type";
      editable = [false];
   }
   -- This is used for navigating to Business Opportunity Lines from the "Estimator" lobby. Only used during our navigation and
   -- does not appear in the select when simply populating the page.
   @DynamicComponentDependency ESTMAN
   attribute EstimateConnected Number {
      fetch = "NVL((SELECT 1
                    FROM estimate_deliverable del
                    WHERE TO_CHAR(del.estimate_id) = demand_order_ref1
                    AND TO_CHAR(del.estimate_revision_no) = demand_order_ref2
                    AND del.ref1 = quotation_no
                    AND del.ref2 = line_no
                    AND del.object_type_db = 'SALES_QUOTATION'
                    AND Estimate_Header_API.Get_Objstate(del.estimate_id, del.estimate_revision_no) != 'Closed'
                    AND EXISTS (SELECT 1
                                FROM user_finance_auth_pub
                                WHERE company = Estimate_Header_API.Get_Company(estimate_id, estimate_revision_no))), 0)";
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(condition_code)";
      editable = [false];
   }

   @DynamicComponentDependency PURCH
   attribute AcquisitionSite Text {
      fetch = "Supplier_API.Get_Acquisition_Site(vendor_no)";
      label = "Supply Site";
      maxlength = 100;
   }

   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      label = "Inventory UoM";
      maxlength = 100;
   }
   reference CustomerInfoRef(CustomerNo) to CustomerInfo(CustomerId);
   reference QuotationNoRef(QuotationNo) to OrderQuotation(QuotationNo) {
      label = "Quotation No";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCustomer(CustomerNo) {
      label = "Customer";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartPriceTaxLov(Contract, CatalogNo) {
      label = "Sales Part";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
   reference SalesUnitMeasureRef(SalesUnitMeasure) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(PartNo, Contract, VendorNo) to PurchasePartSupplierLov(PartNo, Contract, VendorNo) {
      label = "Supplier";
   }
   reference TaxCodeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }
   reference ConOrderNoRef(ConOrderNo) to CustomerOrder(OrderNo) {
      label = "CO No";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship Via Code";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map ID";
   }
   reference ZoneIdRef(FreightMapId, ZoneId) to FreightZone(FreightMapId, ZoneId) {
      label = "Freight Zone";
   }
   reference FreightPriceListNoRef(FreightPriceListNo) to FreightPriceListBase(PriceListNo) {
      label = "Freight Price List No";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forward Agent";
   }
   reference ExtTransportCalendarIdRef(ExtTransportCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "External Transport Calendar";
   }
   reference LostToRef(LostTo) to Competitor(CompetitorId) {
      label = "Lost To";
   }
   reference ReasonIdRef(ReasonId) to LoseWinReason(ReasonId) {
      label = "Reason ID";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }
   reference GtinNoRef(Contract, GtinNo) to SalesPartGtinNoLov(Contract, GtinNo) {
      label = "GTIN No";
   }

   action SetQuotationLost {
      parameter ReasonId Text;
      parameter LostTo Text;
      parameter LostNote Text;
      supportwarnings = [true];
   }
   action SetQuotationWon {
      parameter ReasonId Text;
      parameter WonNote Text;
      supportwarnings = [true];
   }
   action ReplaceQuotationLine {
      parameter Contract Text;
      parameter CatalogNo Text;
      parameter BuyQuantity Number;
      parameter DesiredQty Number;
      supportwarnings = [true];
   }
}

--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency PURCH
function GetExternalSuppliers List<Entity(PurchasePartSupplierLov)> {
   where = "VENDOR_CATEGORY = Supplier_Category_API.Decode('E')";
   basedon Reference_PurchasePartSupplierLov;
}
@DynamicComponentDependency PURCH
function GetInternalSuppliers List<Entity(PurchasePartSupplierLov)> {
   where = "VENDOR_CATEGORY = Supplier_Category_API.Decode('I')";
   basedon Reference_PurchasePartSupplierLov;
}

function GetQuotationNo List<Entity(OrderQuotationLov)> {
   -- dummy where not used
   where = "1=1";
   basedon Reference_OrderQuotationLov;
}

function GetConfigurableDb Text {
   parameter Contract Text;
   parameter CatalogNo Text;
}
function PackLineKeys  Structure(LineDetailStructure) {
   parameter Selection Text;
}
function GetPartNo Text {
   parameter Contract Text;
   parameter CatalogNo Text;
}

function GetCharacteristics Structure(CharacteristicStructure) {
   parameter Selection Text;
}

function GetTaxCalMethod Text {
   parameter Company Text;
}
---------------------------------- ACTIONS ----------------------------------

action ReplaceCharValueForConfigs {
   initialcheck none;
   parameter ConnectedIdAttr Text;
   parameter CharacteristicId  Text;
   parameter CharacteristicValue Text;
   supportwarnings = [true];
   ludependencies = OrderQuotationLine;
}

action ExecutingInterimOrder Boolean {
   initialcheck implementation;
   parameter Method Text;
   parameter Source Text;
   parameter Identity1 Text;
   parameter Identity2 Text;
   parameter Identity3 Text;
   parameter Identity4 Number;
   parameter Contract Text;
   parameter PartNo Text;
   parameter Quantity Number;
   parameter RequiredDate Date;

   ludependencies = OrderQuotationLine;
}

action RefreshQuotationLines {
   initialcheck none;
   ludependencies = OrderQuotationLine;
}

action RefreshAfterCrud {
   initialcheck none;
   // Dummy method to refresh SalesPromotionDealBuy, SalesPromotionDealGet
   ludependencies = OrderQuotationLine;
}
-------------------------------- STRUCTURES ---------------------------------
structure  LineDetailStructure {
   attribute SameOrder     Boolean;
   attribute QuotationNo     Text;
   attribute LineNoArr     Text;
   attribute RelNoArr      Text;
   attribute LineItemNoArr Text;
   attribute ReasonId Text;
   attribute LoseWinNote Text;
   attribute Contract Text;
   attribute Category Text;
   attribute CustomerNo Text;

}

structure CharacteristicStructure {
   attribute PartNos Text;
   attribute CharacteristicIds Text;
   attribute WantedDeliveryDate Timestamp;
   attribute ConnectedIdAttr Text;
}




