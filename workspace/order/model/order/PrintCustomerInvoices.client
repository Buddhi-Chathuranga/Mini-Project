
--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-07-29  PraWlk  FI21R2-3355, Disabled the Print Invoice option if the outgoing fiscal not is used, as the invoice is printed automatically
-- 2021-07-29          once the fiscal note is sent and the response loaded.
-- 2019-11-06  FRBESE  SCXTEND-1156, Changed PrintCustomerInvoiceNavEntry navigator entry index from 100 to 1000.
-- 2019-01-14  KHVESE  SCUXXW4-1239, SCUXXW4-13285, Modified command PrintInvoiceCommand and assistant PrintCustomerInvoice and added badge MessageType to the PrintCustomerInvoiceWarningList.
-- 2018-11-15  KHVESE  SCUXXW4-1239, SCUXXW4-13273, Corrected the enable property on command EmailInvoiceCommand, PrintInvoiceCommand and SendInvoiceCommand
-- 2018-11-07  KHVESE  SCUXXW4-1239, SCUXXW4-8830, Included fragment SendInvoiceAssistant and Implemented commnd SendInvoice and
-- 2018-11-07          removed command PrintoutSendCommand since it considered as out of scope.
-- 2018-10-08  RaVdlk  SCUXXW4-1239, Made the warning list visible if the Exist variable is TRUE
-- 2018-09-26  RaVdlk  SCUXXW4-1239, Added the assistant PrintCustomerInvoice to handle warnings raised in multi selection (Print RMB)
-- 2018-09-24  HPetse  SCUXXW4-1239, Added badge colors on Invoice Status
-- 2018-07-09  RaVdlk  SCUXXW4-8355, Created dlgCustomerInvoiceEmailOvw using an assitant
-- 2018-06-04  RaVdlk  SCUXXW4-1239, Converted from tbwPrintCustomerInvoice  using MTG Version: 1.16
-- 2020-08-04  Sacnlk  GESPRING20-5112, Added ValidateSend for mx_xml_doc_reporting functionality.
--------------------------------------------------------------------------------------

client PrintCustomerInvoices;
component ORDER;
layer Core;
projection PrintCustomerInvoices;

include fragment UserAllowedSiteLovSelector;
include fragment SendInvoiceAssistant;
include fragment OrdInvoiceTypeLovSelector;
warningsenabled = EmailCustomerInvoice;

------------------------------ NAVIGATOR ENTRY ------------------------------

navigator {
   entry PrintCustomerInvoiceNavEntry parent OrderNavigator.SalesInvoicing at index 1000 {
      label = "Print Customer Invoices";
      page List;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page List using CustomerOrderInvHeadSet {
   label = "Print Customer Invoices";
   startupmode = search;

   list PrintCustomerInvoiceList;
}

----------------------------------- LISTS -----------------------------------

list PrintCustomerInvoiceList for CustomerOrderInvHead {
   orderby = Company, PartyType, SeriesId, InvoiceNo;
   field Company;
   field SeriesId;
   field InvoiceNo;
   field SbReferenceNo;
   badge CustomerOrderInvoiceState {
      emphasis Progress1 = [CustomerOrderInvoiceState = "Preliminary"];
      emphasis Progress3 = [CustomerOrderInvoiceState = "Printed"];
      emphasis StateCancelled = [CustomerOrderInvoiceState = "Cancelled"];
      emphasis Progress5 = [CustomerOrderInvoiceState = "Posted"];
      emphasis Progress7 = [CustomerOrderInvoiceState = "PostedAuth"];
      emphasis Progress9 = [CustomerOrderInvoiceState = "PartlyPaidPosted"];
      emphasis Progress12 = [CustomerOrderInvoiceState = "PaidPosted"];
      style = TextOnly;
   }
   lov InvoiceTypeRef with ReferenceOrdInvoiceTypeLovSelector {
      description = InvoiceTypeRef.Description;
      size = Large;
      searchable = false;
   }
   field AdvancePrepaymBasedInvoice;
   field CorrectionInvoice;
   field Branch;
   field Currency;
   field CreatorsReference;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector;
   field CustomerOrderRef.OrderId {
      label = "Order Type";

   }
   field CustomerOrderRef.CustomerNo {
      label = "Customer No";
      contactwidget {
         enabled = [CustomerOrderRef.CustomerNo != null];
         source = Customer;
      }
   }
   field Identity {
      contactwidget {
         enabled = [Identity != null];
         source = Customer;
      }
   }
   field Name {
      label = "Customer Address Name.";
   }
   field InvoiceAddressId;
   field DeliveryAddressId;
   field InvoiceDate;
   field LatestDeliveryDate;
   field WantedDeliveryDate;
   lov PayTermIdRef with ReferencePaymentTermSelector {
      description = PayTermIdRef.Description;
      size = Large;
   }
   field DueDate;
   field Collect;
   field OrderDate;
   field OurReference;
   field YourReference;
   field ShipVia;
   field ForwardAgentId {
      label = "Forwarder";
   }
   field LabelNote;
   field DeliveryTerms;
   field NetAmount {
      label = "Net Amt/Curr";
   }
   field VatAmount {
      label = "Tax Amt/Curr";
   }
   field GrossAmount {
      label = "Gross Amt/Curr";
   }
   field MediaCode;
   field NcfReference;
   @DynamicComponentDependency JINSUI
   field JsInvoiceState;
   field AggregationNo;
   fieldranking Company, InvoiceNo, CreatorsReference, Identity, InvoiceTypeDescription, DueDate;

   command PrintInvoiceCommand;
   command EmailInvoiceCommand;
   command SendInvoiceCommand;
}


-------------------------------- ASSISTANTS ---------------------------------

assistant EmailCustomerInvoiceAssistant  using CustomerInvoiceVirtualSet {
   label = "E-mail";
   input(Selection);

   init command {
      execute {
         set SelectionList = Selection;
      }
   }
   steps {
      step {
         list CustomerInvoiceEmailList(CustomerInvoiceEmailArray);
      }
      final step {
      }
   }
   finish command {
      execute {
         call EmailCustomerInvoice();
         exit OK;
      }
   }
}
--------------------------------- COMMANDS ----------------------------------

command PrintInvoiceCommand for CustomerOrderInvHead {
   variable Print {
      type = Boolean;
   }
   label = "Print";
   mode = SelectedRecords;

   enabled = [(count(Company) = 1) and(MediaCode = null and(CustomerOrderRef = null or CustomerOrderRef.BlockedType = null or CustomerOrderRef.BlockedType != "ManualBlocked" or AdvancePrepaymBasedInvoice)) and not("OUTGOING_FISCAL_NOTE" in EnabledLccParams)];
   bulkexecute {
      if [MediaCode = null] {
         assistant PrintCustomerInvoice(Selection) {
            when OK {
               exit OK;
            }
         }
      }
   }
}


command EmailInvoiceCommand for CustomerOrderInvHead {
   label = "E-mail";
   mode = SelectedRecords;
   enabled = [(count(*, EmailAddress != null and CustomerOrderInvoiceState = "Preliminary") > 0) and MediaCode = null and(CustomerOrderRef = null or CustomerOrderRef.BlockedType = null or CustomerOrderRef.BlockedType != "ManualBlocked" or AdvancePrepaymBasedInvoice)];
   bulkexecute {
      assistant EmailCustomerInvoiceAssistant(Selection) {
         when OK {
            exit OK;
         }
      }
   }
}


command SendInvoiceCommand for CustomerOrderInvHead {
   label = "Send";
   mode = SelectedRecords;
   enabled = [(count(Company) = 1) and(MediaCode != null) and(CustomerOrderRef = null or CustomerOrderRef.BlockedType = null or CustomerOrderRef.BlockedType != "ManualBlocked" or AdvancePrepaymBasedInvoice)];
   bulkexecute {
      -- gelr:mx_xml_doc_reporting, begin
      call ValidateSend(Selection);
      -- gelr:mx_xml_doc_reporting, end
      assistant SendInvoiceAssistant("CUSTOMERINVOICESUPPLYCHAIN", null, Selection) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}


list CustomerInvoiceEmailList for CustomerInvoiceEmailVirtual {
   editmode = SingleCellEdit;
   field InvoiceId {
      searchable = false;
   }
   field InvoiceCustomer {
      searchable = false;
   }
   field YourReference {
      searchable = false;
   }
   field Email {
      searchable = false;
      size = Large;
   }
}

assistant PrintCustomerInvoice using PrintCustomerInvoiceVirtualSet {
   label = "Print Customer invoices";
   input(Selection);
   steps {
      step {
         list PrintCustomerInvoiceWarningList(WarningsArray) {
            visible = [Exist];
         }
         markdowntext {
            visible = [Exist];
            text = "Customer invoice(s) without warning will be printed.";
         }
         markdowntext {
            visible = [Exist = false];
            text = "Customer invoice(s) will be printed.";
         }
      }
      final step {
      }
   }
   finish command {
      execute {
         call PrintInvoice();
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

list PrintCustomerInvoiceWarningList for PrintCustomerInvoiceWarningVirtual {
   label = "Warnings";
   multiselect = [false];
   badge MessageType {
      style = IconOnly;
      icon = "information";
      emphasis Warning = [true];
      size = Small;
   }
   field Company;
   field InvoiceId;
   field Warning {
      size = Large;
   }
}
