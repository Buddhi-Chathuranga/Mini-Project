--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-11-07  FRBESE  SCXTEND-1156, Changed "Find Part By Characteristics" navigator entry indexes from 100 to 300.
-- 2019-01-10  SaGeLK  SCUXXW4-8770, Moved the Sales part of the code from FindPartByCharacteristics
--------------------------------------------------------------------------------------
fragment FindSalesPartByCharacteristicsList;
component ORDER;
layer Core;
description "Use this fragment to display Sales parts lists in Find Part By Characteristics";

// Document Text related fragments
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;

//SALES PART
include fragment SalesPartsList;
include fragment SalesPartLov2Selector;
include fragment InventoryPartLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLov2Selector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment NonRentalSalesPartLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PartFindSalesPartByCharacteristicsNavEntry parent OrderNavigator.SalesPart at index 300 {
      label = "Find Part By Characteristics";
      assistant FindPartByCharacteristicsAssistant;
   }
   entry MasterDataFindSalesPartByCharacteristicsNavEntry parent OrderNavigator.PartMasterDataSalesPart at index 300 {
      label = "Find Part By Characteristics";
      assistant FindPartByCharacteristicsAssistant;
   }
}
----------------------------------- LISTS -----------------------------------
list SalesCharacteristicFinalList for SalesPartCharacteristic {
   label = "Characteristics";
   lov CharacteristicCodeRef with ReferenceCharacteristicSelector {
      description = CharacteristicCodeRef.Description;
   }
   field AttrValue {
      size = Small;
   }
   field UnitMeasRef {
      size = Small;
   }
   // fieldranking CharacteristicCodeRef, CharacteristicRef.Description, AttrValue, UnitMeasRef;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartCharacteristicSet for SalesPartCharacteristic;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPart {
   ludependencies = CharacteristicTemplateVirtual;
   ludependencies = CharacteristicTemplCharListVirtual;
   ludependencies = DocumentText;
   crud = Read;
}

@Override
entity SalesPartCharacteristic {
   crud = Read;
   from = "sales_part_characteristic";
   exec = "SALES_PART_CHARACTERISTIC_API";
   keys = CatalogNo, CharacteristicCode {
      where = "CATALOG_NO = :CatalogNo and CHARACTERISTIC_CODE = :CharacteristicCode";
   }
   use attributes = AttrValue, UnitMeas;
   attribute Contract Text {
      required = [false];
      editable = [false];
   }
   attribute CatalogNo Text {
      fetch = "catalog_no";
      label = "Sales Part";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
   }
   attribute CharacteristicCode Text {
      fetch = "characteristic_code";
      label = "Characteristic Code";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
   }
   attribute AttrValue Text {
      fetch = "attr_value";
      label = "Value";
      maxlength = 60;
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 10;
   }
   reference CharacteristicCodeRef(CharacteristicCode) to Characteristic(CharacteristicCode) {
      label = "Characteristic Code";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function FilterSalesPartList List < Entity(SalesPart) > {
   parameter EngAttribute Text;
   ludependencies = CharacteristicTemplCharListVirtual;
}

function SalesGetValue List < Entity(SalesPartCharacteristic) > {
   basedon SalesPartCharacteristicSet;
   parameter Selection Text;

   where = "catalog_no = Client_SYS.Get_Key_Reference_Value(:Selection, 'CATALOG_NO') AND
   contract = Client_SYS.Get_Key_Reference_Value(:Selection, 'CONTRACT')";
}
