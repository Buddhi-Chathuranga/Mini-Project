-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-05-16  fgusse  SCUXXW4-20685, Corrected DocumentTextCommand, variable labelvar
-- 2019-01-24  SATGLK  SCUXXW4-8995, Converted from frmCommissionAgree using MTG Version: 1.34
--------------------------------------------------------------------------------------
client CommissionAgreement;
component ORDER;
layer Core;
projection CommissionAgreementHandling;
include fragment SalesPartComLovSelector;
include fragment CustOrdCust2Selector;
include fragment InvoiceCustomerTypeGroupSelector;
include fragment DocumentText;

warningsenabled = CommissionAgree;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CommissionAgreementNavEntry parent OrderNavigator.SalesCommission at index 100 {
      label = "Commission Agreement";
      page Form home CommissionAgree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using CommissionAgreementSet {
   label = "Commission Agreement";
   startupmode = search;
   selector CommissionAgreeSelector;
   group CommissionAgreeGroup;
   list CommissionAgreeLineList(CommissionAgreementLines);
   commandgroup NewRevisionCmdGroup {

      command CreateNewRevisionCommand;
   }
   commandgroup DocumentCmdGroup {

      command DocumentTextCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
command CreateNewRevisionCommand for CommissionAgree {
   label = "Create New Revision";
   enabled = [true];
   variable RevisionNoVar Number;
   execute {
      confirm("Do you want to create a new revision of the current agreement?") {
         when OK {
            call CopyAgreement() into RevisionNoVar {
               when SUCCESS {
                  if[RevisionNoVar != null] {
                     navigate "page/CommissionAgreement/Form?$filter=RevisionNo eq $[RevisionNoVar] and AgreementId eq '${AgreementId}'";
                  }
               }
               when FAIL {
                  if [not(error.Message = null)] {
                     error("${error.Message}");
                  }
               }
            }
         }
      }
   }
}
command DocumentTextCommand for CommissionAgree {
   label = "Document Text";
   variable LabelVar {
      type = Text;
   }
   execute {
      set LabelVar = " for Commission Agree - ${AgreementId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelVar, false) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
command CommissionAgreementLineCommand for CommissionAgreeLine {
   label = "Commission Agreement Line";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/CommissionAgreementLine/Form?$filter=LineNo eq $[LineNo] and AgreementId eq '${AgreementId}' and RevisionNo eq $[RevisionNo]";
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector CommissionAgreeSelector for CommissionAgree {
   label = "${AgreementId} - ${RevisionNo}";
   static AgreementId;
   static Description;
   static ValidFrom;
   static ValidUntil;
   static RevisionNo;
}

---------------------------------- GROUPS -----------------------------------
group CommissionAgreeGroup for CommissionAgree {
   label = "";
   field AgreementId {
      size = Small;

   }
   field Description;
   daterangefield {
      startdate ValidFrom;
      enddate ValidUntil;
      label = "Validity Period";
   }
   field RevisionNo;
   field CommissionCalcBase {
      size = Small;

   }
   field AgreementDate;
   field CurrencyCodeRef {
      size = Small;
   }
   field NoteText {
      multiline = true;
      size = Medium;
   }
   field DocumentText {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------
list CommissionAgreeLineList for CommissionAgreeLine {
   label = "Commission Lines";
   orderby = SequenceOrder, LineNo;
   field LineNo;
   field SequenceOrder;
   field Percentage;
   field CommissionRangeType;
   field RangeExists;
   field CommissionCalcMeth;
   lov CatalogNoRef with ReferenceSalesPartComLovSelector {
      label = "Sales Part";
      description = CatalogNoRef.CatalogDesc;
   }
   lov CustomerNoRef with ReferenceCustOrdCust2Selector {
      label = "Customer";
      description = CustomerNoRef.Name;
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
   }
   lov StatCustGrpRef with ReferenceCustomerGroupSelector {
      description = StatCustGrpRef.Description;
   }
   field IdentityType;
   lov GroupIdRef with ReferenceInvoiceCustomerTypeGroupSelector {
      description = GroupIdRef.Description;
   }
   lov CountryCodeRef with ReferenceIsoCountrySelector {
      description = CountryCodeRef.Description;
   }
   lov MarketCodeRef with ReferenceSalesMarketSelector {
      description = MarketCodeRef.Description;
   }
   lov RegionCodeRef with ReferenceSalesRegionSelector {
      description = RegionCodeRef.Description;
   }
   lov SalesPriceGroupIdRef with ReferenceSalesPriceGroupSelector {
      description = SalesPriceGroupIdRef.Description;
   }
   lov CatalogGroupRef with ReferenceSalesGroupSelector {
      description = CatalogGroupRef.Description;
   }
   lov CommodityCodeRef with ReferenceCommodityGroupSelector {
      description = CommodityCodeRef.Description;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }
   fieldranking LineNo, SequenceOrder, Percentage, CommissionRangeType, RangeExists, CommissionCalcMeth, CatalogNoRef, SalesPartDescription, CustomerNoRef, CustomerName;
   commandgroup AgreementLineCmdGroup {

      command CommissionAgreementLineCommand;
   }
}
