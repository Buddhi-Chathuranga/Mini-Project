-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-11-12  KiSalk  Bug 161030(SC21R2-5473), Passed identifier value "CustomerAgreement" to RemoveInvalidPricesDialog and RemoveBasePrices.
-- 2021-09-14  Skanlk  Bug 160817(SC21R2-2724), Enabled search for the Name on Customer field.
-- 2021-04-27  ApWilk  Bug 158926(SCZ-14477), Modified CustomerAgreementGroup to add the coordinator name also to be displayed in the drop down.
-- 2020-11-17  RavDlk  SC2020R1-11227, Handled the enumerations UseExplicit and AgreementSent
-- 2020-02-25  RaVdlk  SCXTEND-2230, Enabled duplicate functionality for tbwAgreementAssortmentDeal
-- 2020-02-20  RaVdlk  SCXTEND-2231, Enabled duplicate functionality for tbwAgreementSalesGroupDeal
-- 2020-02-14  RaVdlk  SCXTEND-2211, Enabled duplicate functionality for frmCustomerAgreement
-- 2019-05-16  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand
-- 2019-04-07  Maeelk  SCUXXW4-18069, Added stringify to RemoveInvalidPricesCommand.
-- 2019-04-01  milise  SCUXXW4-18022,Replacing of label = "" with showlabel = false
-- 2018-09-04  IzShlk  SCUXXW4-9057, Converted from frmCustomerAgreement using MTG Version: 1.29
-- 2018-10-01  IzShlk  SCUXXW4-9852, Converted from tbwCustomerAgreementSite using MTG Version: 1.29
-- 2018-10-08  IzShlk  SCUXXW4-9612, Converted from tbwAgreementAssortmentDeal using MTG Version: 1.30
-- 2018-10-15  IzShlk  SCUXXW4-9617, Converted from tbwAgreementSalesGroupDeal using MTG Version: 1.31
--------------------------------------------------------------------------------------

client CustomerAgreement;
component ORDER;
layer Core;
projection CustomerAgreementHandling;

include fragment CustOrdCust2Selector;
include fragment OrderCoordinatorLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment SiteClusteDialog;
include fragment SiteClusterLevelLovSelector;
include fragment SiteClusterNodeJoinSelector;
include fragment TransferAgreementDialog;
include fragment RemoveInvalidPricesDialog;
include fragment AdjustAgreementOffsetDialog;
include fragment UpdateSalesPartPricesDialog;
include fragment MpccomPhraseTextLovSelector;
include fragment OutputTypeLovSelector;
include fragment DocumentText;
include fragment AssortmentNodeLov3Selector;
include fragment ChangeValidToDateDialog;
include fragment CopyCustomerAgreementLinesDialog;
include fragment AddSalesPartToAgreementDialog;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartForPriceListLovSelector;
include fragment SalesPartBasePriceSiteLovSelector;
include fragment SalesPartBasePriceDescLovSelector;
include fragment SalesPartBasePricePartLovSelector;
include fragment AgreementSalesPartDealTab;
include fragment CustOrdCust9Selector;
include fragment CustOrdCust8Selector;
include fragment SalesGroupStateIndicator;

warningsenabled = CustomerAgreement;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CustomerAgreementNavEntry parent OrderNavigator.PricingCustomerAgreement at index 100 {
      label = "Customer Agreement";
      page Form home CustomerAgreement;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using CustomerAgreementSet {
   label = "Customer Agreement";
   startupmode = search;
   stateindicator CustomerAgreementStateIndicator;
   crudactions {
      duplicate {
         enabled = [true];
      }
   }
   searchcontext CustomerAgreementSearchContext {
      defaults = CustomerAgreementSearchContextDefaults();


   }
   selector CustomerAgrmntSelector;
   group CustomerAgreementGroup;

   tabs {
      tab {
         label = "General";
         arrange {
            arrange {
               group CustomerAgreementDeliveryInfo;
               group CustomerAgreementMiscInfo;
            }
            group CustomerAgreementIndications;
         }
         group CustomerAgreementDates;
         group CustomerAgreementComments {
            collapsed = [true];
         }
      }
      tab {
         label = "Deal per Part";
         list AgreementSalesPartDealList using FetchAgreementSalesPartDealListLines(AgreementId, searchcontext.CustomerAgreementSearchContext.ShowDetails, searchcontext.CustomerAgreementSearchContext.ValidDate) {
            copyoncruddefault(AgreementId, ValidFromDummy, UsePriceInclTax) to(AgreementId, ValidFromDate, UsePriceInclTax);
         }
      }
      tab {
         visible = [AssortmentId = null];
         label = "Deal per Sales Group";
         list AgreementSalesGroupDealList using FetchAgreementSalesGroupDealListLines(AgreementId, searchcontext.CustomerAgreementSearchContext.ShowDetails, searchcontext.CustomerAgreementSearchContext.ValidDate) {
            copyoncruddefault(AgreementId) to(AgreementId);
         }
      }
      tab {
         visible = [AssortmentId != null];
         label = "Deal per Assortment";
         list AgreementAssortmentDealList using FetchAgreementAssortmentDealListLines(AgreementId, AssortmentId, searchcontext.CustomerAgreementSearchContext.ShowDetails, searchcontext.CustomerAgreementSearchContext.ValidDate) {
            copyoncruddefault(AgreementId, AssortmentId) to(AgreementId, AssortmentId);
         }
      }
      tab {
         label = "Valid for Sites";
         list CustomerAgreementSiteList(CustomerAgreementSiteRef);
      }
   }
   commandgroup CommandGroup1CmdGroup {

      commandgroup CommandGroupCmdGroup {
         label = "Status";
         command Activate;
         command Negotiate;
         command Close;
      }
   }

   commandgroup PrintCmdGroup {

      commandgroup CommandGroup2CmdGroup {
         label = "Print";
         command PrintRetrospectiveInvoiceRepCommand;
         command PrintAgreementCommand;
      }
   }

   commandgroup ShareCmdGroup {

      commandgroup CommandShareCmdGroup {
         label = "Share";
         command SendAgreementCommand;
         command CopyAgreementCommand;
      }
   }

   commandgroup PriceAdjustmentCmdGroup {

      commandgroup CommandGroup3CmdGroup {
         label = "Price Adjustments";
         command RemoveInvalidPricesCommand;
         command AdjustOffsetsCommand;
         command UpdateSalesPartPricesCommand;
      }
   }

   commandgroup AddSalesPartCmdGroup {

      command AddNewSalesPartsCommand;
   }
   commandgroup CommandGroup4CmdGroup {

      command DocumentTextCommand;
   }

   commandgroup CommandGroup5CmdGroup {
      label = "Translation";
      command TranslationCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
@Override
command Activate for CustomerAgreement {
   label = "Set Active";
   enabled = [Objstate in("Planned", "Negotiated", "Closed") and AllowActive];
}

command PrintRetrospectiveInvoiceRepCommand for CustomerAgreement {
   label = "Print Retrospective Invoice Report";
   enabled = [true];

   variable ResultKeyNum {
      type = Number;
   }

   execute {
      confirm("A Retrospective Invoice Report for Agreement ${AgreementId} will be printed.") {
         when OK {
            call GetReportResultKeyList() into ResultKeyNum;
            printdialog ResultKeyNum;
         }
      }
   }
}
command PrintAgreementCommand for CustomerAgreement {
   label = "Print Agreement";
   enabled = [true];

   variable ResultKeyNum {
      type = Number;
   }

   execute {
      call GetPrintReportResultKeyList(searchcontext.CustomerAgreementSearchContext.ValidDate) into ResultKeyNum;
      printdialog ResultKeyNum;
   }
}
command SendAgreementCommand for CustomerAgreement {
   label = "Send Agreement";
   enabled = [Objstate = "Active" and PartDeal = 1];

   execute {
      dialog TransferAgreementDialog(AgreementId, CustomerNo, CustomerNoRef.Name, null, "PRICAT", DefaultMediaCode, CheckAgreementSent) {
         when CANCEL {
            exit;
         }
      }
   }
}
command CopyAgreementCommand for CustomerAgreement {
   label = "Copy Agreement";
   enabled = [true];
   execute {
      navigate "assistant/CopyCustomerAgreement/Assistant?$action=SetupDefaultValues{FromAgreementIdVar:$[AgreementId]}";
   }
}
command RemoveInvalidPricesCommand for CustomerAgreement {
   label = "Remove Invalid Prices";
   variable KeepFromDt {
      type = Date;
   }

   variable RemovedItemsNum {
      type = Number;
   }
   variable AgreementSelectionVar
      {
      type = Text;
   }
   enabled = [true];

   bulkexecute {
      stringify(records, "AGREEMENT_ID=${AgreementId}^", JSON) into AgreementSelectionVar;
      dialog RemoveInvalidPricesDialog("CustomerAgreement") into(KeepFromDt) {
         when OK {
            call RemoveBasePrices(AgreementSelectionVar, KeepFromDt, "CustomerAgreement") into RemovedItemsNum;
            if [RemovedItemsNum > 0] {
               alert("${RemovedItemsNum} record(s) removed.");
            }
            else
               {
               alert("No records were removed.");
            }
         }
      }
   }
}

command AdjustOffsetsCommand for CustomerAgreement {
   label = "Adjust Offsets";

   variable PercentOffsetVar {
      type = Number;
   }
   variable AmountOffsetVar {
      type = Number;
   }
   variable ValidToDateVar {
      type = Date;
   }
   variable AdjustmentTypeVar {
      type = Text;
   }
   variable IncludeBothDatesVar {
      type = Boolean;
   }
   variable AdjustmentsVar {
      type = Number;
   }
   variable AdjustTypeVar {
      type = Text;
   }
   variable IncludePeriodVar {
      type = Text;
   }

   enabled = [true];
   execute {
      dialog AdjustAgreementOffsetDialog(AgreementId, CurrencyCode, SiteDate) into(PercentOffsetVar, AmountOffsetVar, ValidToDateVar, AdjustmentTypeVar, IncludeBothDatesVar) {
         when OK {
            if [AdjustmentTypeVar = "ADD"] {
               set AdjustTypeVar = "AddToOffset";
            }
            else {
               if [AdjustmentTypeVar = "ADJUST"] {
                  set AdjustTypeVar = "AdjustOffset";
               }
            }

            if [PercentOffsetVar = null] {
               set PercentOffsetVar = 0;
            }
            if [AmountOffsetVar = null] {
               set AmountOffsetVar = 0;
            }


            if [IncludeBothDatesVar] {
               set IncludePeriodVar = "TRUE";
            }
            else {
               set IncludePeriodVar = "FALSE";
            }

            call AdjustOffsetAgreement(AgreementId, PercentOffsetVar, AmountOffsetVar, ValidToDateVar, AdjustTypeVar, IncludePeriodVar) into AdjustmentsVar;

            if [AdjustmentsVar > 0] {
               alert("${AdjustmentsVar} Item(s) Adjusted.");
            }
            else
               {
               alert("No Item Adjusted.");
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command AddNewSalesPartsCommand for CustomerAgreement {
   label = "Add New Sales Parts";
   enabled = [true];
   execute {
      dialog AddSalesPartToAgreementDialog(AgreementId, SiteDate) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command UpdateSalesPartPricesCommand for CustomerAgreement {
   label = "Update Sales Part Prices";
   enabled = [Objstate = "Active"];

   execute {
      dialog UpdateSalesPartPricesDialog(AgreementId) {
         when CANCEL {
            exit;
         }
      }
   }
}
command DocumentTextCommand for CustomerAgreement {
   label = "Document Text";
   enabled = [true];
   variable LabelTextVar;
   execute {
      set LabelTextVar = "for Customer Agreement - ${AgreementId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when OK {
            exit OK;
         }
      }
   }
}
command TranslationCommand for CustomerAgreement {
   label = "Translation";
   enabled = [true];
   mode = Global;
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Lu eq 'CustomerAgreement' and Module eq 'ORDER'";
   }
}

-- Customer Agreement Site Commands
command AddSitesfromSiteClusterCommand for CustomerAgreement {
   label = "Add Sites from Site Cluster";
   mode = Global;
   enabled = [true];
   variable SiteclusterIdVar {
      type = Text;

   }
   variable SiteClusterNodeIdVar {
      type = Text;
   }
   execute {

      dialog SiteClusterDialog into(SiteclusterIdVar, SiteClusterNodeIdVar) {
         when OK {
            call AddSitesFromSiteCluster(SiteclusterIdVar, SiteClusterNodeIdVar);
            exit OK;
         }
         when CANCEL {
            exit CANCEL;

         }
      }
   }
}

-- Deal per Assortment Commands
command DealperAssortmentDiscountCommand for AgreementAssortmentDeal {
   label = "Deal per Assortment Discount";
   enabled = [true];
   mode = SingleRecord;
   variable UpdAllowedVar {
      type = Boolean;
   }


   execute {
      if [parent.Objstate != "Closed"] {
         set UpdAllowedVar = true;
      }
      else {
         set UpdAllowedVar = false;
      }
      navigate "assistant/CustomerAgreementDealPerAssortDiscount/CustomerAgreementDealPerAssortmentDiscountAssistant?$action=SetupSourceInfo{AgreementIdVar:$[AgreementId], MinQuantityVar:$[MinQuantity], ValidFromVar:$[ValidFrom], PriceUnitMeasVar:$[PriceUnitMeas], AssortmentIdVar:$[AssortmentId], AssortmentNodeIdVar : $[AssortmentNodeId], DealPriceVar : $[DealPrice], ValidToVar:$[ValidTo], CurrencyCodeVar:$[parent.CurrencyCode], UpdAllowedVar:$[UpdAllowedVar]}";
   }
}

command SalesPartsCommand for AgreementAssortmentDeal {
   label = "Sales Parts";
   enabled = [true];
   mode = SingleRecord;
   variable PriceSourceVar;

   execute {
      set PriceSourceVar = "AgreementAssortment";
      navigate "page/SalesPartsForAssortments/List?searchcontext=PriceSource:$[PriceSourceVar],SourceAssortment:$[AssortmentId],SourceAssortmentNode:$[AssortmentNodeId],SourceId:$[AgreementId],SourcePriceUnitMeas:$[PriceUnitMeas]";
   }
}

command ChangeValidToDateCommand for AgreementAssortmentDeal {
   label = "Change Valid to Date";
   mode = SelectedRecords;

   enabled = [true];

   bulkexecute {
      dialog SetValidToDateDialog(Selection, "Agreement_Assortment") {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CopyAssortmentLinestoAgreemeCommand for AgreementAssortmentDeal {
   label = "Copy Assortment Lines to Agreement";
   mode = SelectedRecords;
   enabled = [true];

   bulkexecute {
      dialog CopyCustomerAgreementLinesDialog(Selection, "Agreement_Assortment") {
         when OK {
            exit OK;
         }

         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

-- Deal per Sales Group Commands
command DealperSalesGroupDiscountCommand for AgreementSalesGroupDeal {
   label = "Deal per Sales Group Discount";
   enabled = [true];
   mode = SingleRecord;
   variable UpdAllowedVar {
      type = Boolean;
   }
   execute {
      if [parent.Objstate != "Closed"] {
         set UpdAllowedVar = true;
      }
      else {
         set UpdAllowedVar = false;
      }
      navigate "assistant/CustomerAgreementDealPerSalesGroupDiscount/AgreementDealGroupDiscountAssistant?$action=SetupSourceInfo{AgreementIdVar:$[AgreementId], MinQuantityVar:$[MinQuantity], ValidFromVar:$[ValidFromDate], CatalogGroupVar:$[CatalogGroup], ValidToVar:$[ValidToDate], UpdAllowedVar:$[UpdAllowedVar]}";
   }
}

command CopySalesGroupLinestoAgreemCommand for AgreementSalesGroupDeal {
   label = "Copy Sales Group Lines to Agreement";
   mode = SelectedRecords;
   enabled = [true];

   bulkexecute {
      dialog CopyCustomerAgreementLinesDialog(Selection, "Agreement_Sales_Group") {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CmdChangeValidToDateCommand for AgreementSalesGroupDeal {
   label = "Change Valid to Date";
   mode = SelectedRecords;

   enabled = [true];

   bulkexecute {
      dialog SetValidToDateDialog(Selection, "Agreement_Sales_Group") {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
selector CustomerAgrmntSelector for CustomerAgreement {
   label = "${AgreementId} - ${Description} ";
   static AgreementId;
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group CustomerAgreementGroup for CustomerAgreement {
   label = "";

   field AgreementId {
      size = Small;
   }
   field Description;
   lov CustomerNoRef with ReferenceCustOrdCust2Selector {
      description = CustomerNoRef.Name;
      search = CustomerNo, Name;
      contactwidget {
         enabled = [true];
         source = Customer;
      }

      validate command {
         variable AgreementDefaultsVar {
            type = Structure(AgreementDefaults);
         }

         execute {
            if [CustomerNo != null] {
               call FetchAgreementDefaults(Company, AgreementId, CustomerNo) into AgreementDefaultsVar;
               set  DelTermsLocation = AgreementDefaultsVar.DelTermsLocation;
               set DeliveryTerms = AgreementDefaultsVar.DeliveryTerms;
               set ShipViaCode = AgreementDefaultsVar.ShipViaCode;
               set CurrencyCode = AgreementDefaultsVar.CurrencyCode;
               if [AgreementDefaultsVar.UsePriceInclTax = "TRUE"] {
                  set  UsePriceInclTax = true;
               }
               else {
                  set  UsePriceInclTax = false;
               }
            }
         }
      }
   }
   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      description = AuthorizeCodeRef.Name;
      size = Small;
      contactwidget {
         enabled = [AuthorizeCode != null];
         source = Person;
      }
   }
   field AssortmentIdRef {
      size = Small;
   }
   field CurrencyCodeRef {
      size = Small;
   }
}

group CustomerAgreementDeliveryInfo for CustomerAgreement {
   label = "Delivery Information";

   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation {
      label = "Delivery Terms Location";
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
   }
   field UseByObjectHead {
      size = Large;
   }
}

group CustomerAgreementDates for CustomerAgreement {
   label = "Dates";

   daterangefield {
      startdate ValidFrom;
      enddate ValidUntil;
      label = "Validity Period";
   }
   field AgreementDate;
}

group CustomerAgreementIndications for CustomerAgreement {
   label = "Indicators";

   field UseExplicit {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field RebateBuilder;
   field UsePriceBreakTemplates;
   field UsePriceInclTax {
      label = "Use Price Including Tax";
      size = FullWidth;
   }
   field AgreementSent {
      label = "Communicated";
      showlabel = false;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Communicated";
      falselabel = "Not Communicated";
   }
   field DocumentText;
   field NoteText {
      label = "Notes";
      size = Large;
      multiline = true;
   }
}

group CustomerAgreementMiscInfo for CustomerAgreement {
   label = "Miscellaneous";
   lov SupAgreementIdRef with ReferenceCustomerAgreementSelector using SupAgreement(AgreementId, CustomerNo) {
      label = "Supersede Agreement";
   }
   field CustAgreementId {
      label = "Customer's Agreement";
   }
}

group CustomerAgreementComments for CustomerAgreement {
   label = "Comments";

   field Comments {
      label = "Comment";
      showlabel = false;
      size = Large;
      multiline = true;
   }
}


----------------------------------- LISTS -----------------------------------
-- Valid for site Tab
list CustomerAgreementSiteList for CustomerAgreementSite {
   crudactions {
      duplicate {
         enabled = [false];
      }
   }
   lov ContractRef with ReferenceCompanySiteSelector using ContractFilter(parent.Company) {
      description = ContractRef.Description;
   }

   commandgroup CommandGroupCmdGroup {

      command AddSitesfromSiteClusterCommand;
   }
}

-- Deal per Assortment Tab
list AgreementAssortmentDealList for AgreementAssortmentDeal {
   orderby = AssortmentNodeId, PriceUnitMeas, MinQuantity, ValidFrom;

   lov AssortmentNodeIdRef with ReferenceAssortmentNodeLov3Selector {
      description = AssortmentNodeIdRef.Description;
   }
   field MinQuantity;
   field ValidFrom;
   field ValidTo;
   field PriceUnitMeasRef {
      size = Small;
   }
   field DealPrice {
      editable = [not(PriceUnitMeas = "*" or PriceUnitMeas = null)];
      preserveprecision = [true];
   }
   field ProvisionalPrice;
   lov DiscountTypeRef with ReferenceSalesDiscountTypeSelector {
      editable = [not(DiscountLineCount > 1 or NetPrice or(DiscountAmountsExist and DealPrice = null))];
      description = DiscountTypeRef.Description;
      validate command {
         execute {
            set Discount = DiscountTypeRef.Discount;
         }
      }
   }
   field Discount {
      editable = [not(DiscountLineCount > 1 or NetPriceDb)];
   }
   field NetPrice {
      validate command {
         variable DiscountFieldsVar {
            type = Structure(DiscountFields);
         }

         execute {
            call ValidateNetPrice(DiscountType, Discount, NetPrice, DiscountLineCount, AgreementId, AssortmentId, AssortmentNodeId, MinQuantity, ValidFrom, PriceUnitMeas) into DiscountFieldsVar;
            set DiscountType = DiscountFieldsVar.DiscountType;
            set Discount = DiscountFieldsVar.Discount;
         }
      }
   }
   field Rounding;
   field LastUpdate;
   field NoteText {
      searchable = false;
      multiline = true;
   }
   field DiscountAmountsExist;

   commandgroup CommandGroupCmdGroup {

      command DealperAssortmentDiscountCommand;
      command CopyAssortmentLinestoAgreemeCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command SalesPartsCommand;
   }

   commandgroup CommandGroup3CmdGroup {

      command ChangeValidToDateCommand;
   }
}

-- Deal per Sales Group Tab
list AgreementSalesGroupDealList for AgreementSalesGroupDeal {
   orderby = CatalogGroup, MinQuantity, ValidFromDate;
   lov CatalogGroupRef with ReferenceSalesGroupSelector {
      label = "Sales Group";
      description = CatalogGroupRef.Description;
      size = Large;
   }
   field MinQuantity;
   field ValidFromDate;
   field ValidToDate;

   lov DiscountTypeRef with ReferenceSalesDiscountTypeSelector {
      required = [IsMultiDiscount];
      size = Small;
      validate command {
         execute {
            set Discount = DiscountTypeRef.Discount;
         }
      }
   }
   field Discount;
   field NoteText {
      searchable = false;
      multiline = true;
   }

   commandgroup CommandGroup2CmdGroup {

      command DealperSalesGroupDiscountCommand;
      command CopySalesGroupLinestoAgreemCommand;
      command CmdChangeValidToDateCommand;
   }
}

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator CustomerAgreementStateIndicator for CustomerAgreement {

   state "Planned" {
      completed = 12%;
      emphasis Progress1 = [Objstate = "Planned"];
   }
   state "Active" {
      completed = 33%;
      emphasis Progress4 = [Objstate = "Active"];
   }
   state "Negotiated" {
      completed = 67%;
      emphasis Progress8 = [Objstate = "Negotiated"];
   }
   state "Closed" {
      completed = 100%;
      emphasis Progress12 = [Objstate = "Closed"];
   }
}

------------------------------ SEARCH CONTEXTS ------------------------------

searchcontext CustomerAgreementSearchContext for CustomerAgreementSearchContextStructure {
   label = "";
   field ShowDetails {
      label = "View Option";
      validate command {

         execute {
            call FetchValidDate(searchcontext.CustomerAgreementSearchContext.ShowDetails) into ValidDate;
         }
      }
   }
   field ValidDate {
      visible = [searchcontext.CustomerAgreementSearchContext.ShowDetails = "ViewWithValidDate"];
   }
}