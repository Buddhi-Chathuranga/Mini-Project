--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-02-24  WaSalk  SC2020R1-12575, Removed fragment LocalizationControlCenterHandler attribute GoodServiceStatisticalCodeEnabled,
-- 2021-02-24          added EnabledLccParams and added it to structure ContractInfo for suport LCC concept.
-- 2021-02-10  RasDlk  SC2020R1-12168, Added validation for ReplacementPartNo in SalesPart.
-- 2021-02-03  NiDalk  SC2020R1-12228, Added validation for Close Tolerance in SalesPart.
-- 2020-02-19  MaEelk  SCXTEND-2224, Enabled the Duplicate Functionality.
-- 2018-11-22  IzShlk  SCUXXW4-9422, Converted from frmSalesPartPackage using MTG Version: 1.33
--------------------------------------------------------------------------------------

projection PackagePartHandling;
component ORDER;
layer Core;
description "Use this API to enter package parts. Package parts are sales parts consisting of a number of components, i.e., a stereo package, and should be ordered as whole units.";
category Users;
include fragment DiscreteCharacNumericValueSelector;
include fragment NonRentalSalesPartLovSelector;
include fragment SalesPartLovSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartPackageLovSelector;
include fragment PartDescriptionsTab;
include fragment PartCharacteristicsTab;
include fragment SalesPartChargeTab;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment SalesPartBaseGroups;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartSet for SalesPart;
entityset SalesPartVirtualSet for SalesPartVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPart {
   ludependencies = DocumentText, SalesPartPackage;
   keys = CatalogNo, Contract {
      where = "CATALOG_NO = :CatalogNo and CONTRACT = :Contract";
   }
   where = "CATALOG_TYPE_DB = 'PKG' and SALES_TYPE_DB IN ('SALES', 'SALES RENTAL')";
   use attributes = CatalogDesc, SalesUnitMeas, PriceConvFactor, PriceUnitMeas, ExpectedAveragePrice, MinimumQty, SalesPriceGroupId, CatalogGroup, DiscountGroup, SalesPartRebateGroup, TaxCode, TaxClassId, DateEntered, CloseTolerance, DeliveryType, CustomsStatNo, ReplacementPartNo, DateOfReplacement, PrintControlCode, ListPrice, ListPriceInclTax, EngAttribute, NoteId, Company, NoteText, InvertedConvFactor, StatisticalCode;
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 25;
   }
   attribute CatalogDesc Text {
      fetch = "catalog_desc";
      label = "Sales Part Description";
      maxlength = 200;
      editable = [ETag != null];
   }
   attribute PartDescriptionInUse Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, catalog_no)";
      label = "Part Description in Use";
      maxlength = 200;
   }
   attribute PartCatalogPartDescription Text {
      fetch = "Part_Catalog_API.Get_Description(catalog_no)";
      label = "Part Catalog Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
   }
   attribute PriceConvFactor Number {
      label = "Price Conversion Factor";
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
      required = [true];
   }
   attribute CurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(company)";
      editable = [false];
   }
   attribute ExpectedAveragePrice Number {
      label = "Expected Average Price";
      format = ifscurrency;
   }
   attribute MinimumQty Number {
      label = "Min Sales Qty";
   }
   attribute SalesPriceGroupId Text {
      label = "Sales Price Grp";
   }
   attribute SalesPartRebateGroup Text {
      label = "Rebate Group";
   }
   attribute TaxClassId Text {
      label = "Tax Class";
   }
   attribute DateEntered Date {
      editable = [false];
   }
   attribute Activeind Enumeration(ActiveSalesPart) {

      fetch = "activeind_db";
      label = "Active";
      required = [true];
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "taxable_db";
      label = "Taxable";
      required = [true];
   }
   attribute ExportToExternalApp Boolean("TRUE", "FALSE") {
      fetch = "export_to_external_app_db";
      label = "Export to External Application";
      required = [true];
   }
   attribute AllowPartialPkgDeliv Boolean("TRUE", "FALSE") {
      fetch = "allow_partial_pkg_deliv_db";
      label = "Allow Incomplete Packages";
      required = [true];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute CloseTolerance Number {
      label = "Closing Tolerance";
      validate [CloseTolerance >= 0 and CloseTolerance <= 100] message "Close Tolerance cannot be less than 0 or greater than 100.";
   }
   attribute Gtin Text {
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(catalog_no)";
      label = "GTIN";
      editable = [false];
   }
   attribute DeliveryType Text {
      editable = [ETag != null];
   }
   attribute CustomsStatNo Text {
      label = "Customs Stat No";
   }
   attribute DateOfReplacement Date {
      label = "Replacement Date";
   }
   attribute PrintControlCode Text {
      label = "Print Code";
   }
   attribute TotalSalesCost Number {
      fetch = "Sales_Part_API.Get_Total_Cost(contract,catalog_no)";
      label = "Total Sales Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalSalesPrice Number {
      fetch = "Sales_Part_API.Get_Total_Sales_Price(contract,catalog_no)";
      editable = [false];
      format = ifscurrency;
   }
   attribute ContributionMargin Number {
      label = "Contribution Margin Rate (%)";
      fetch = "Sales_Part_API.Get_Contribution_Margin(contract,catalog_no)";
   }
   attribute ListPrice Number {
      label = "Price";
      format = ifscurrency;
   }
   attribute ListPriceInclTax Number {
      label = "Price Including Tax";
      format = ifscurrency;
   }
   attribute EngAttribute Text {
      label = "Characteristic Template";
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute NoteIdExist Text {
      fetch = "Document_Text_API.Note_Id_Exist(note_id)";
      editable = [false];
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
      required = [false];
   }
   attribute CatalogType Enumeration(SalesPartType) {
      fetch = "catalog_type_db";
      editable = [ETag = null];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute GtinSeries Text {
      fetch = "Part_Gtin_API.Get_Gtin_Series(catalog_no,Part_Gtin_API.Get_Default_Gtin_No(catalog_no))";
      label = "GTIN Series";
      editable = [false];
   }
   attribute InvertedConvFactor Number {
      required = [false];
      editable = [false];
   }
   attribute CurrDate Date {
      fetch = "trunc(Site_API.Get_Site_Date(Contract))";
      default = "trunc(Site_API.Get_Site_Date(rec_.Contract))";
   }
   attribute ReplacementPartNo Text {
      validate [ReplacementPartNo = null or DateOfReplacement != null] message "Replacement part must have a date of replacement.";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   reference PartCatalogRef(CatalogNo) to PartCatalog(PartNo);
   reference CatalogNoRef(CatalogNo) to SalesPartPackageLov(CatalogNo) {
      label = "Sales Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference DiscountGroupRef(DiscountGroup) to SalesDiscountGroup(DiscountGroup) {
      label = "Discount Group";
   }
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCodeExemptRef(Company, TaxCode) to TaxCodeExemptRestricted(Company, FeeCode) {
      label = "Tax Code Exempt";
   }
   reference TaxClassIdRef(Company, TaxClassId) to TaxClass(Company, TaxClassId) {
      label = "Tax Class";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   reference CustomsStatNoRef(CustomsStatNo) to CustomsStatisticsNumber(CustomsStatNo) {
      label = "Customs Statistics No";
   }
   reference ReplacementPartNoRef(Contract, ReplacementPartNo) to SalesPartPriceTaxLov(Contract, CatalogNo) {
      label = "Replacement Part";
   }
   reference PrintControlCodeRef(PrintControlCode) to CustOrdPrintControl(PrintControlCode) {
      label = "Print Code";
   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Characteristic Template";
   }
   reference SiteDiscomInfoRef(Contract) to SiteDiscomInfo(Contract);
   -- gelr: good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr: good_service_statistical_code, end
   array SalesPartPackageArray(CatalogNo, Contract) to SalesPartPackage(ParentPart, Contract);
   array SalesPartCharacteristicArray(CatalogNo, Contract) to SalesPartCharacteristic(CatalogNo, Contract);
   array SalesPartLanguageDescArray(Contract, CatalogNo) to SalesPartLanguageDesc(Contract, CatalogNo);
   array SalesPartChargeArray(Contract, CatalogNo) to SalesPartCharge(Contract, CatalogNo);

}

@Override
entity SalesPartPackage {
   keys = CatalogNo, Contract, ParentPart {
      where = "CATALOG_NO = :CatalogNo and CONTRACT = :Contract and PARENT_PART = :ParentPart";
   }
   use attributes = QtyPerAssembly;
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute Description Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract,catalog_no)";
      label = "Description";
      editable = [false];
   }
   attribute QtyPerAssembly Number {
      label = "Qty/Assembly";
   }
   attribute Contract Text {
      label = "Contract";
   }
   attribute UoM Text {
      fetch = "Sales_Part_API.Get_Sales_Unit_Meas(contract,catalog_no)";
      editable = [false];
   }
   attribute CustWarrantyId Number {
      fetch = "Sales_Part_API.Get_Cust_Warranty_Id(contract,catalog_no)";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute CustomerWarranty Boolean {
      fetch = "DECODE(Sales_Part_API.Get_Cust_Warranty_Id(contract,catalog_no), NULL, 'FALSE', 'TRUE')";
      editable = [false];
   }

   reference CatalogNoRef(Contract, CatalogNo) to SalesPartLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
}

@Override
query SalesPartPriceTaxLov {
   from = "sales_part_price_tax_lov";
   lu = SalesPart;
   keys = Contract, CatalogNo;
   ludependencies = SalesPart;
   attribute CatalogDesc Text {
      label = "Description";
      lovcolumn = [true];
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, catalog_no)";
   }
}
---------------------------------- ACTIONS ----------------------------------
action ValidateContract Structure(ContractInfo) {
   initialcheck none;
   parameter Contract Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetCatalogInfo Structure(PartCatalogInfo) {
   parameter Contract Text;
   parameter CatalogNo Text;
}

function GetPriceConvFactor Number {
   parameter SalesUnitMeas Text;
   parameter PriceUnitMeas Text;
}

function CalculatePrice Structure(PriceInfo) {
   parameter SalesPriceInclTax Number;
   parameter TaxCode Text;
   parameter Taxable Boolean;
   parameter Company Text;
   parameter TotalSalesCost Number;
}

function CalculatePriceIncludingTax Structure(PriceInfo) {
   parameter ListPrice Number;
   parameter TaxCode Text;
   parameter Taxable Boolean;
   parameter Company Text;
   parameter TotalSalesCost Number;
}

function ReplacementPartFilter List<Entity(SalesPartPriceTaxLov)> {
   parameter CatelogNo Text;
   where = "CATALOG_NO != :CatelogNo";
}

function ValidateCatalogNo Structure(CatalogInfo) {
   parameter CatelogNo Text;
   parameter Contract Text;
}

function ValidateMarginRate Structure(PriceValues) {
   parameter ConMargin Number;
   parameter TotalSalesCost Number;
   parameter TaxCode Text;
   parameter Company Text;
}

function CatalogFilter List<Entity(SalesPartPackageLov)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}

function UnitMeasureExist Text {
   parameter SalesUnitMeas Text;
}

-- gelr: good_service_statistical_code, begin
function StatisticalCodeFilter List<Entity(StatisticalCode)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
-- gelr: good_service_statistical_code, end
-------------------------------- STRUCTURES ---------------------------------
structure ContractInfo {
   attribute Company Text;
   attribute Currency Text;
   attribute UsePriceInclTax Boolean;
   attribute Taxable Boolean;
   attribute TaxCode Text;
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text;
   -- gelr:localization_control_center, end
}

structure CatalogInfo {
   attribute CatalogDesc Text;
   attribute UnitCode Text;
   attribute InfoMessage Text;
}

structure PriceInfo {
   attribute Price Number;
   attribute ConMargin Number;
}

structure PriceValues {
   attribute Price Number;
   attribute PriceIncludingTax Number;
}

structure PartCatalogInfo {
   attribute CatalogDescription Text;
   attribute UnitMeasure Text;
}




