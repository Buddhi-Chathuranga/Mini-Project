--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-09-13  DhAplk  SC21R2-2673, Removed CommandGroupCmdGroup from SalesPartBasePricesList.
-- 2020-06-03  Inaklk  SC21R2-1360, Wrong info message is triggered when setting "Origin from Costing" as True when creating a new record.
-- 2020-11-16  MaEelk  SC2020R1-11302, SalesPriceOrigin was handled as an enumeration.
-- 2020-03-05  RaVdlk  SCXTEND-2208, Enabled Duplicate functionality
-- 2019-06-14  MaEelk  SCUXXW4-22428, Removed the parameter Contract from CostSetLov in AddNewSalesPartAssistant
-- 2019-06-14          Removed the default % value when opening the asistant.
-- 2019-06-13  MaEelk  SCUXXW4-22199, Added new query SalesPartLovQuery and directed the SalesPartRef to this Query.
-- 2019-06-13          Replaced CatalogNoRef references with SalesPartRef references
-- 2019-06-11  MaEelk  SCUXXW4-22200, Made initialcheck null in AddNewSalesPart.
-- 2019-04-17  MaEelk  SCUXXW4-18525, Added where clause to the function TemplateIds.
-- 2019-04-05  MaEelk  SCUXXW4-18657, Moved the RMBs which we given as GLOBAL to SalesPartBasePrices.client and SalesPartRentalPrices.client.
-- 2019-04-01  MaEelk  SCUXXW4-17850, RMBs Add New Sales Parts, Update Base Prices, Add New Sales Parts to Sales Price Lists and
-- 2019-04-01          Update Sales Price Lists from Base Prices were made Global
-- 2019-02-15  MaEelk  SCUXXW4-8062, Added RMB Add New Sales Parts.
-- 2019-01-05  MaEelk  SCUXXW4-1446, Converted from tbwSalesPartBasePrice using MTG Version: 1.34
--------------------------------------------------------------------------------------
fragment SalesPartBasePricesList;
component ORDER;
layer Core;
description "Use this window to manage base prices for given sales parts or rental parts.";
include fragment SalesPriceGroupPartLovSelector;
include fragment SalesPartBpriceAllowedLovSelector;
include fragment RentalPartBpriceAllowedLovSelector;
@DynamicComponentDependency COST
include fragment CostSetLovSelector;
include fragment SalesPartLov2Selector;
include fragment SalesPartInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------
command PriceBreaksperSalesPartCommand {
   label = "Price Breaks per Sales Part";
   enabled = [ValidTemplate = 1];
   execute {
      navigate "page/PriceBreaksPerSalesParts/List?$filter=BasePriceSite eq $[BasePriceSite] and CatalogNo eq $[CatalogNo] and SalesPriceTypeDb eq $[SalesPriceTypeDb]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list SalesPartBasePricesList for SalesPartBasePrices {

   lov BasePriceSiteRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         execute {
            call FetchDefaultAttributes(BasePriceSite, CatalogNo, SalesPriceTypeDb, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax,
            BasePrice, BasePriceInclTax, SalesPartRef.ListPrice, SalesPartRef.ListPriceInclTax, SalesPartRef.RentalListPrice, SalesPartRef.RentalListPriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set Company = DefaultAttributesStructure.Company;
            set CurrencyCode = DefaultAttributesStructure.CurrencyCode;
            set TaxCode = DefaultAttributesStructure.TaxCode;
            set SalesPriceOrigin = DefaultAttributesStructure.SalesPriceOrigin;
            set UsePriceInclTax = DefaultAttributesStructure.UsePriceInclTaxDb;
            set BaseLinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaseLinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
         }
      }
   }

   lov CatalogNoRef with ReferenceSalesPartLov2Selector using CatalogNumbers {
      label = "Sales Part";
      size = Large;
      description = SalesPartRef.CatalogDesc;
      validate command {
         execute {
            call FetchDefaultAttributes(BasePriceSite, CatalogNo, SalesPriceTypeDb, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax,
            BasePrice, BasePriceInclTax, SalesPartRef.ListPrice, SalesPartRef.ListPriceInclTax, SalesPartRef.RentalListPrice, SalesPartRef.RentalListPriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set Company = DefaultAttributesStructure.Company;
            set CurrencyCode = DefaultAttributesStructure.CurrencyCode;
            set TaxCode = DefaultAttributesStructure.TaxCode;
            set SalesPriceOrigin = DefaultAttributesStructure.SalesPriceOrigin;
            set UsePriceInclTax = DefaultAttributesStructure.UsePriceInclTaxDb;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
         }
      }
   }
   badge Objstate {
      label = "Status";
      emphasis StatePlanned = [Objstate = "Planned"];
      emphasis StateActive = [Objstate = "Active"];
      emphasis StateOpen = [Objstate = "Pending"];
      emphasis StateClosed = [Objstate = "Closed"];
      style = TextOnly;
   }
   field SalesPriceOrigin {
      enumerationtrue = "Costing";
      enumerationfalse = "Manual";
      truelabel = "Yes";
      falselabel = "No";
      validate command {
         execute {
            call ValidateSalesPriceOrigin(BasePriceSite, CatalogNo, SalesPriceTypeDb, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax,
            BasePrice, BasePriceInclTax, SalesPartRef.ListPrice, SalesPartRef.ListPriceInclTax, SalesPartRef.RentalListPrice, SalesPartRef.RentalListPriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
            set CostSet = DefaultAttributesStructure.CostSet;

         }
      }

   }
   @DynamicComponentDependency COST
   field CostSetRef {
      editable = [SalesPriceOrigin = "Costing"];
      validate command {
         enabled = [SalesPriceOrigin = "Costing"];
         execute {
            call ValidateCostSet(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet) into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
         }
      }
   }
   field BaselinePrice {
      editable = [UsePriceInclTax = false];
      preserveprecision = [true];

      validate command {
         execute {
            call ValidatePrices(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
            if [SalesPriceOrigin = "Costing"] {
               alert("Origin from Costing Check will be removed. No longer valid for automatic base price updating Origin from Costing.");
               set SalesPriceOrigin = DefaultAttributesStructure.SalesPriceOrigin;
               set CostSet = DefaultAttributesStructure.CostSet;
            }
         }
      }
   }
   field PercentageOffset {
      preserveprecision = [true];

      validate command {
         execute {
            call ValidatePrices(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
         }
      }
   }
   field AmountOffset {
      preserveprecision = [true];

      validate command {
         execute {
            call ValidatePrices(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
         }
      }
   }
   field BasePrice {
      editable = [UsePriceInclTax = false];
      preserveprecision = [true];

      validate command {
         execute {
            call ValidatePrices(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet, "BACKWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
            if [SalesPriceOrigin = "Costing"] {
               alert("Origin from Costing Check will be removed. No longer valid for automatic base price updating Origin from Costing.");
               set SalesPriceOrigin = DefaultAttributesStructure.SalesPriceOrigin;
               set CostSet = DefaultAttributesStructure.CostSet;
            }
         }
      }
   }
   lov SalesPriceGroupIdRef with ReferenceSalesPriceGroupSelector {
      description = SalesPriceGroupIdRef.Description;
      size = Large;
      editable = [false];
   }
   field CurrencyCode {
      label = "Base Currency";
   }
   field PreviousBasePrice {
      preserveprecision = [true];
   }
   field BasePriceDifference;
   field SalesPartRef.PriceUnitMeas {
      size = Small;
      label = "Price UoM";
   }
   field LastUpdated;
   field BasePriceInclTax {
      editable = [UsePriceInclTax = true];
      preserveprecision = [true];

      validate command {
         execute {
            call ValidatePrices(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet, "BACKWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
            if [SalesPriceOrigin = "Costing"] {
               alert("Origin from Costing Check will be removed. No longer valid for automatic base price updating Origin from Costing.");
               set SalesPriceOrigin = DefaultAttributesStructure.SalesPriceOrigin;
               set CostSet = DefaultAttributesStructure.CostSet;
            }
         }
      }
   }
   lov TaxCodeRef with ReferenceStatutoryFeeSelector {
      description = TaxCodeRef.Description;
      label = "Tax Code";
      searchable = false;
      size = Large;
   }
   field SalesPartRef.Taxable {
      size = Small;
      label = "Taxable";
   }
   lov SalesGroupRef with ReferenceSalesGroupSelector {
      description = SalesGroupRef.Description;
      size = Large;
      editable = [false];

   }
   lov TemplateIdRef with ReferencePriceBreakTemplateSelector using TemplateIds(SalesPartRef.PriceUnitMeas, SalesPriceTypeDb) {
      description = TemplateIdRef.Description;
      label = "Price Break Template";
      size = Large;
   }
   field BaselinePriceInclTax {
      editable = [UsePriceInclTax = true];
      preserveprecision = [true];

      validate command {
         execute {
            call ValidatePrices(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
            if [SalesPriceOrigin = "Costing"] {
               alert("Origin from Costing Check will be removed. No longer valid for automatic base price updating Origin from Costing.");
               set SalesPriceOrigin = DefaultAttributesStructure.SalesPriceOrigin;
               set CostSet = DefaultAttributesStructure.CostSet;
            }
         }
      }
   }
   field UsePriceInclTax {
      validate command {
         execute {
            call ValidatePrices(BasePriceSite, CatalogNo, SalesPriceOrigin, UsePriceInclTax, BaselinePrice, BaselinePriceInclTax, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset, CostSet, "FORWARD") into DefaultAttributesStructure;
            set BaselinePrice = DefaultAttributesStructure.BaseLinePrice;
            set BaselinePriceInclTax = DefaultAttributesStructure.BaseLinePriceInclTax;
            set BasePrice = DefaultAttributesStructure.BasePrice;
            set BasePriceInclTax = DefaultAttributesStructure.BasePriceInclTax;
         }
      }
   }
   fieldranking TaxCodeRef, SalesPartRef.Taxable, TemplateIdRef, SalesPartRef.PriceUnitMeas;

   commandgroup CommandGroup2CmdGroup {
      command PriceBreaksperSalesPartCommand;
   }
}

assistant AddNewSalesPartAssistant for AddNewSalesPartStructure {
   label = "Add New Sales Parts";
   input(SalesPriceTypeDb);


   init command {
      execute {
         set PercentageOffset = 0;
         set AmountOffset = 0;
      }
   }
   steps {
      step {
         group CostingGroup;
         group OffsetGroup;
         group FilteredByGroup;
         group ExecuteGroup;
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      variable NumberOfNewLinesVar {
         type = Number;
      }
      variable AddPartVar {
         type = Boolean;

      }
      enabled = [(OriginFromCosting = false) or((OriginFromCosting = true) and(Costset != null))];
      execute {
         if [(SalesPriceTypeDb = null) or(SalesPriceTypeDb = "SALES PRICES")] {
            confirm("Do you want to add new Sales Part(s) into Sales Part Base Prices?") {
               when OK {
                  set AddPartVar = true;

               }
               when CANCEL {
                  exit CANCEL;
               }

            }
         }
         else {
            if [(SalesPriceTypeDb = "RENTAL PRICES")] {
               confirm("Do you want to add new Sales Part(s) into Sales Part Rental Base Prices?") {
                  when OK {
                     set AddPartVar = true;
                  }
                  when CANCEL {
                     exit CANCEL;
                  }

               }

            }
         }
         if [AddPartVar] {
            call AddNewSalesPart(RunBackground, BasePriceSite, CatalogNo, SalesPriceGroup, OriginFromCosting, SalesPriceTypeDb, Costset, PercentageOffset, AmountOffset) into NumberOfNewLinesVar;
            if [RunBackground = false] {
               if [NumberOfNewLinesVar > 0] {
                  if [(SalesPriceTypeDb = null) or(SalesPriceTypeDb = "SALES PRICES")] {
                     alert("${NumberOfNewLinesVar} new line(s) added to sales part base price.");
                  }
                  else {
                     alert("${NumberOfNewLinesVar} new line(s) added to sales part rental base price.");
                  }
               }
               else {
                  alert("No records added to Base Price.");
               }
               exit OK;
            }
         }

      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CostingGroup for AddNewSalesPartStructure {
   label = "Costing";
   field OriginFromCosting {
      editable = [(SalesPriceTypeDb = null) or(SalesPriceTypeDb = "SALES PRICES")];
   }
   @DynamicComponentDependency COST
   lov CostsetRef with ReferenceCostSetLovSelector using CostSets(BasePriceSite) {
      editable = [((SalesPriceTypeDb = null) or(SalesPriceTypeDb = "SALES PRICES")) and(OriginFromCosting = true)];
   }
}

group OffsetGroup for AddNewSalesPartStructure {
   label = "Offset";
   field PercentageOffset;
   field AmountOffset;

}

group FilteredByGroup for AddNewSalesPartStructure {
   label = "Filtered By";
   multilov CatalogNoRef with SalesPartBpriceAllowedLovLovList using SalesPartBpriceAllowedLovLovListSet {
      visible = [(SalesPriceTypeDb = null) or(SalesPriceTypeDb = "SALES PRICES")];
   }
   multilov RentalCatalogNoRef with RentalPartBpriceAllowedLovLovList using RentalPartBpriceAllowedLovLovListSet {
      visible = [(SalesPriceTypeDb = "RENTAL PRICES")];
   }
   multilov BasePriceSiteRef with UserAllowedSiteLovLovList using UserAllowedSiteLovLovListSet;
   multilov SalesPriceGroupRef with SalesPriceGroupPartLovLovList using SalesPriceGroups;


}
group ExecuteGroup for AddNewSalesPartStructure {
   label = "Execute";
   field RunBackground {
      defaulttoprevious = [true];

   }

}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartBpriceAllowedLovLovListSet for SalesPartBpriceAllowedLov;
entityset RentalPartBpriceAllowedLovLovListSet for RentalPartBpriceAllowedLov;
entityset UserAllowedSiteLovLovListSet for UserAllowedSiteLov;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPartBasePrices using SalesPartBasePrice {
   keys = BasePriceSite, CatalogNo, SalesPriceType;
   where = "SALES_PRICE_TYPE_DB = 'SALES PRICES'";
   use attributes = CostSet, BaselinePrice, PercentageOffset, AmountOffset, BasePrice, PreviousBasePrice, LastUpdated, BasePriceInclTax, TemplateId, BaselinePriceInclTax;
   attribute SalesPriceOrigin Enumeration(SalesPriceOrigin) {
      fetch = "sales_price_origin_db";
      label = "Origin from Costing";
      required = [true];
   }
   attribute BaselinePrice Number {
      format = ifscurrency;
   }
   attribute PercentageOffset Number {
      format = ifscurrency;
   }
   attribute AmountOffset Number {
      format = ifscurrency;

   }
   attribute BasePrice Number {
      format = ifscurrency;
   }
   attribute PreviousBasePrice Number {
      format = ifscurrency;
   }
   attribute LastUpdated Timestamp {
      label = "Base Price Modified";
   }
   attribute BasePriceInclTax Number {
      format = ifscurrency;
   }
   attribute TemplateId Text {
      label = "Price Break Template ID";
      format = uppercase;
   }
   attribute BaselinePriceInclTax Number {
      format = ifscurrency;
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute SalesPriceType Text {
      fetch = "sales_price_type";
      default = "Sales_Price_type_API.Decode('SALES PRICES')";
   }
   attribute SalesPriceTypeDb Text {
      fetch = "sales_price_type_db";
      default = "'SALES PRICES'";
   }
   attribute ValidTemplate Number {
      fetch = "Sales_Part_Base_Price_API.Is_Valid_Price_Break_Templ(BASE_PRICE_SITE, catalog_no, TEMPLATE_ID, SALES_PRICE_TYPE_DB)";
      editable = [false];
   }
   attribute CurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(BASE_PRICE_SITE))";
      editable = [false];
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(base_price_site)";
      editable = [false];
   }
   attribute TaxCode Text {
      fetch = "Sales_Part_API.Get_Tax_Code(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute BasePriceDifference Number {
      fetch = "Sales_Part_Base_Price_API.Get_Base_Price_Difference (BASE_PRICE, PREVIOUS_BASE_PRICE)";
      label = "Base Price Difference (%)";
      editable = [false];
   }
   reference SalesPartRef(BasePriceSite, CatalogNo) to SalesPartLovQuery(Contract, CatalogNo) {
      prefetch SalesPriceGroupId as SalesPriceGroupId;
      prefetch CatalogGroup as CatalogGroup;
   }
   reference TaxCodeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference BasePriceSiteRef(BasePriceSite) to UserAllowedSiteLov(Contract) {
      label = "Base Price Site";
   }
   reference CatalogNoRef(BasePriceSite, CatalogNo) to SalesPartLov2(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";

   }
   @DynamicComponentDependency COST
   reference CostSetRef(BasePriceSite, CostSet) to CostSet(Contract, CostSet) {
      label = "Cost Set";
   }
   reference SalesGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference TemplateIdRef(TemplateId) to PriceBreakTemplate(TemplateId) {
      label = "Price Break Template ID";
   }
   reference CompanyRef(Company) to CompanyFinance(Company);
}

---------------------------------- QUERIES ----------------------------------
query SalesPartLovQuery {
   from = "sales_part_pub";
   lu = SalesPart;
   keys = Contract, CatalogNo;

   attribute Contract Text {
      label = "Site";
   }
   attribute CatalogNo Text {
      label = "Sales Part Number";
   }
   attribute CatalogDesc Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(CONTRACT, CATALOG_NO)";
      label = "Description";
   }
   attribute SalesPriceGroupId Text {
      label = "Sales Price Group";
   }
   attribute CatalogGroup Text {
      label = "Catalog Group";
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
   }
   attribute TaxCode Text {
      label = "Tex Code";
   }
   attribute Taxable Boolean {
      label = "Taxable";
      fetch = "TAXABLE_DB";
   }
   attribute ListPrice Number {
      label = "Price";
   }
   attribute ListPriceInclTax Number {
      label = "Price Incl Tax";
   }
   attribute RentalListPrice Number {
      label = "Rental Price";
   }
   attribute RentalListPriceInclTax Number {
      label = "Rental Price Incl Tax";
   }
}
---------------------------------- ACTIONS ----------------------------------
action AddNewSalesPart Number {
   initialcheck none;
   ludependencies = SalesPartBasePrice;
   parameter RunBackground Boolean;
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
   parameter SalesPriceGroup Text;
   parameter OriginFromCosting Boolean;
   parameter SalesPriceTypeDb Text;
   parameter Costset Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
}
--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency COST
function CostSets List < Entity(CostSetLov) > {
   parameter BasePriceSite Text;
   where = "CONTRACT IS NOT NULL AND CONTRACT LIKE NVL(:BasePriceSite, '%')";
}

function SalesPriceGroups List < Entity(SalesPriceGroupPartLov) > {
   where = "OBJSTATE = 'Active'";
}

function CatalogNumbers List < Entity(SalesPartLov2) > {
   where = "Sales_Price_Group_API.Get_Sales_Price_Group_Type_Db(SALES_PRICE_GROUP_ID) != 'UNIT BASED'";
}

function TemplateIds List < Entity(PriceBreakTemplate) > {
   parameter PriceUnitMeas Text;
   parameter SalesPriceTypeDb Text;
   where = "OBJSTATE = 'Active' AND    PRICE_UNIT_MEAS = :PriceUnitMeas AND    SALES_PRICE_TYPE_DB = :SalesPriceTypeDb";
}

function FetchDefaultAttributes Structure(DefaultAttributesStructure) {
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
   parameter SalesPriceTypeDb Text;
   parameter SalesPriceOrigin Enumeration(SalesPriceOrigin);
   parameter UsePriceInclTaxDb Boolean;
   parameter BaseLinePrice Number;
   parameter BaseLinePriceInclTax Number;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter ListPrice Number;
   parameter ListPriceInclTax Number;
   parameter RentalListPrice Number;
   parameter RentalListPriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter CostSet Number;
   parameter Direction Text;
}

function ValidatePrices Structure(DefaultAttributesStructure) {
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
   parameter SalesPriceOrigin Enumeration(SalesPriceOrigin);
   parameter UsePriceInclTaxDb Boolean;
   parameter BaseLinePrice Number;
   parameter BaseLinePriceInclTax Number;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter CostSet Number;
   parameter Direction Text;
}

function ValidateSalesPriceOrigin Structure(DefaultAttributesStructure) {
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
   parameter SalesPriceTypeDb Text;
   parameter SalesPriceOrigin Enumeration(SalesPriceOrigin);
   parameter UsePriceInclTaxDb Boolean;
   parameter BaseLinePrice Number;
   parameter BaseLinePriceInclTax Number;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter ListPrice Number;
   parameter ListPriceInclTax Number;
   parameter RentalListPrice Number;
   parameter RentalListPriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter CostSet Number;
   parameter Direction Text;
}

function ValidateCostSet Structure(DefaultAttributesStructure) {
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
   parameter SalesPriceOrigin Enumeration(SalesPriceOrigin);
   parameter UsePriceInclTaxDb Boolean;
   parameter BaseLinePrice Number;
   parameter BaseLinePriceInclTax Number;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter CostSet Number;
}


-------------------------------- STRUCTURES ---------------------------------
structure DefaultAttributesStructure {
   attribute Company Text;
   attribute CurrencyCode Text;
   attribute TaxCode Text;
   attribute SalesPriceOrigin Enumeration(SalesPriceOrigin);
   attribute UsePriceInclTaxDb Boolean;
   attribute BaseLinePrice Number;
   attribute BaseLinePriceInclTax Number;
   attribute BasePrice Number;
   attribute BasePriceInclTax Number;
   attribute CostSet Number;
}

structure AddNewSalesPartStructure {
   attribute OriginFromCosting Boolean("TRUE", "FALSE") {
      label = "Origin From Costing";
      required = [true];

   }
   attribute Costset Number {
      label = "Cost Set";
   }
   attribute RunBackground Boolean("TRUE", "FALSE") {
      label = "Run in background";
      required = [true];
   }

   attribute PercentageOffset Number {
      label = "Percentage Offset";
   }
   attribute AmountOffset Number {
      label = "Amount Offset";
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 1000;
      format = uppercase;
   }
   attribute BasePriceSite Text {
      label = "Base Price Site";
      maxlength = 100;
      format = uppercase;
   }
   attribute SalesPriceGroup Text {
      label = "Sales Price Group";
      maxlength = 100;
      format = uppercase;
   }
   attribute SalesPriceTypeDb Text {
      editable = [false];
   }
   @DynamicComponentDependency COST
   reference CostsetRef(Costset) to CostSetLov(CostSet) {
      label = "Cost Set";
   }
   reference CatalogNoRef(CatalogNo) to SalesPartBpriceAllowedLov(CatalogNo) {
      label = "Sales Part No";
   }
   reference RentalCatalogNoRef(CatalogNo) to RentalPartBpriceAllowedLov(CatalogNo) {
      label = "Sales Part No";
   }

   reference BasePriceSiteRef(BasePriceSite) to UserAllowedSiteLov(Contract) {
      label = "Base Price Site";
   }
   reference SalesPriceGroupRef(SalesPriceGroup) to SalesPriceGroupPartLov(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
}


