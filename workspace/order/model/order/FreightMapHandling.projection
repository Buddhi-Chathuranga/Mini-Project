-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-01-02  ChJalk  SCUXXW4-9200, Added frmFreightZoneGenaral using MTG Version: 1.33
-- 2018-12-05  NiNilk  SCUXXW4-909, Disabled the edit button in tbwFreightZoneValidSupp
-- 2018-11-28  pipelk  SCUXXW4-906,  Added tbwFreightZoneValidSite using MTG Version: 1.33
-- 2018-11-26  NiNilk  SCUXXW4-909, Added tbwFreightZoneValidSupp using MTG Version: 1.33
-- 2018-11-24  ChJalk  SCUXXW4-9180, Converted from frmFreightMap using MTG Version: 1.33
--------------------------------------------------------------------------------------

projection FreightMapHandling;
component ORDER;
layer Core;
description "Manage FreightMap";
category Users;

include fragment CompanySitePubSelector;
include fragment MpccomShipViaLovSelector;
include fragment SiteClusteDialog;
include fragment SiteClusterNodeJoinSelector;
include fragment SiteClusterLevelLovSelector;
include fragment StateCodes2Selector;
include fragment IsoCountryLovSelector;
include fragment ApplicationCountrySelector;
include fragment CountyCode2LovSelector;
include fragment CityName1LovSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset FreightMapSet for FreightMap;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity FreightMap {
   supportwarnings = [true];
   use attributes = Description, ShipViaCode, OwningSite;
   attribute FreightMapId Text {
      maxlength = 100;
   }
   attribute Description Text {
      label = "Map Description";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute ShipViaCodeDescription Text {
      fetch = "Mpccom_Ship_Via_API.Get_Description(ship_via_code)";
      label = "Ship Via Code Description";
      maxlength = 200;
      editable = [false];
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map ID";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference OwningSiteRef(OwningSite) to CompanySite(Contract) {
      label = "Owning Site";
   }
   array FreightZoneArray(FreightMapId) to FreightZone(FreightMapId);
   array FreightMapArray(FreightMapId) to FreightZoneValidSite(FreightMapId);
   array DetailFreightZoneValidSuppliers(FreightMapId) to FreightZoneValidSupp(FreightMapId);

   action AddSitesFromSiteCluster {
      parameter SiteClusterId Text;
      parameter SiteClusterNodeId Text;
      ludependencies = FreightZoneValidSite;
   }
}

@Override
entity FreightZone {

   ludependencies = FreightMap, FreightZone;
   use attributes = Description, FreightZoneBasis, BaseCountry;

   attribute ZoneId  Text;
   attribute BaseCountry Text {
      label = "Base Country";
   }
   attribute FreightZoneBasis Enumeration(FreightZoneBasis) {
      label = "Zone Defined By";
      fetch = "freight_zone_basis_db";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map ID";
   }
   reference BaseCountryRef(BaseCountry) to IsoCountry(CountryCode) {
      label = "Base Country";
   }
   array FreightZoneDetailsListArray(FreightMapId, ZoneId) to FreightZoneDetails(FreightMapId, ZoneId);
}

@Override
entity FreightZoneDetails {

   ludependencies = FreightMap, FreightZone, FreightZoneDetails;
   use attributes = DiscreteValue, FromZipCode, ToZipCode;

   attribute ItemNo Text {
      default = "Freight_Zone_Details_API.Get_Next_Item_No(:FreightMapId, :ZoneId)";
      label = "Item No";
   }
   attribute DiscreteValue Text {
      format = uppercase;
   }
   attribute DiscreteValueDescription Text {
      fetch = "Freight_Zone_Details_API.Get_Value_Description(freight_map_id,zone_id,discrete_value)";
      label = "Discrete Value Description";
      maxlength = 2000;
   }
   attribute FromZipCode Number {
      maxlength = 10;
   }
   attribute ToZipCode Number {
      maxlength = 10;
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map ID";
   }
   reference ZoneIdRef(FreightMapId, ZoneId) to FreightZone(FreightMapId, ZoneId) {
      label = "Zone ID";
   }
   reference DiscreteValueRef(DiscreteValue) to StateCodes2(StateCode) {
      label = "Discrete Value";
   }
   reference DiscreteValueRef1(DiscreteValue) to ApplicationCountry(CountryCode) {
      label = "Discrete Value";
   }
   reference DiscreteValueRef2(DiscreteValue) to CountyCode2Lov(CountyCode) {
      label = "Discrete Value";
   }
   reference DiscreteValueRef3(DiscreteValue) to CityName1Lov(CityCode) {
      label = "Discrete Value";
   }
}

@Override
entity FreightZoneValidSite {
   crud = Create, Read, Delete;
   from = "freight_zone_valid_site";
   exec = "FREIGHT_ZONE_VALID_SITE_API";
   keys = Contract, FreightMapId {
      where = "CONTRACT = :Contract and FREIGHT_MAP_ID = :FreightMapId ";
   }

   attribute Contract Text {
      fetch = "contract";
   }

   attribute Description Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }

   reference ContractRef(Contract) to CompanySite(Contract) {
      label = "Site";
   }

}
@Override
entity FreightZoneValidSupp {
   crud = Create, Read, Delete;
   reference SupplierIdRef(SupplierId) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
}
------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetDescription List<Entity(MpccomShipVia)> {
   parameter ShipViaCode Text;
   where = "OBJSTATE in ('Active')";
}

function ContractFilter List<Entity(CompanySite)> {
   parameter OwningSite Text;
   where = "CONTRACT IN (SELECT site FROM User_Allowed_Site_Pub)";
}

function StateCodeFilter List<Entity(StateCodes2)> {
   parameter CountryCode Text;
   where = "COUNTRY_CODE = :CountryCode";
}

function CountyFilter List<Entity(CountyCode2Lov)> {
   parameter CountryCode Text;
   where = "COUNTRY = :CountryCode";
}

function CityFilter List<Entity(CityName1Lov)> {
   parameter CountryCode Text;
   where = "COUNTRY = :CountryCode";
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

