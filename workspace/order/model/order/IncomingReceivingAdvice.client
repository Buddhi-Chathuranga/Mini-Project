--------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   --------------------------------------------------------------
-- 2019-11-07  Satglk   SCXTEND-892, Added Received Date.
-- 2019-10-16  Satglk   SCXTEND-892, Added Created Date.
-- 2019-06-03  fgusse   SCUXXW4-20929, Added status colors for badge Objstate
-- 2018-04-06  JeLise   SCUXXW4-11177, Renaming according to guidelines and re-converted using MTG Version: 1.16
-- 2017-11-28  SeJalk   SCUXXW4-9177, Converted from frmExtReceivingAdvice, tbwExtReceivingAdviceLine and
-- 2017-11-28           dlgMatchReceivingAdvice using MTG Version: 1.12
--------------------------------------------------------------------------------------

client IncomingReceivingAdvice;
component ORDER;
layer Core;
projection IncomingReceivingAdviceHandling;
include fragment CustOrdCust1Selector;
include fragment CustomerOrderDelivNoteUivSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry IncomingReceivingAdviceNavEntry parent OrderNavigator.DeliveryConfirmationReceivingAdvice at index 100 {
      label = "Incoming Receiving Advice";
      page Form home ExtReceivingAdvice;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page Form using IncomingReceivingAdvices {
   label = "Incoming Receiving Advice";
   startupmode = search;
   stateindicator IncomingReceivingAdvStateIndicator;
   crudactions {
      edit {
         visible = [Objstate = "Stopped" or Objstate = "MatchingInProgress" or Objstate = "Changed" or Objstate = "Received"];
      }
   }
   selector IncomingReceivingAdviceSelector;
   group IncomingReceivingAdviceGroup;
   list IncomingReceivingAdviceLineList(IncomingReceivingAdviceLineArray);

   commandgroup CommandGroup {

      command MatchCommand;
      command CancelCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

assistant Assistant using MatchReceivingAdvices {
   label = "Match Receiving Advice and Delivery";
   setup InitValues {
      variable ReceivingMessageIdNum {
         type = Number;
      }
      variable ReceivingMessageLineNum {
         type = Number;
      }
      variable DeliveryNoteNoStr {
         type = Text;
      }
      variable CustomerNoStr {
         type = Text;
      }
      variable CustomerNameStr {
         type = Text;
      }
      variable ReceivingAdviceTypeStr {
         type = Text;
      }
      variable InternalSuppContractStr {
         type = Text;
      }
      variable CustomerPartNoStr {
         type = Text;
      }
      variable SalesPartNoStr {
         type = Text;
      }
      variable ReferenceIdStr {
         type = Text;
      }
      variable CustPONoStr {
         type = Text;
      }
      variable CustPOLineNoStr {
         type = Text;
      }
      variable CustPORelNoStr {
         type = Text;
      }
      variable ArrivalDateDt {
         type = Date;
      }
      variable QtyConfirmArrivalNum {
         type = Number;
      }
      variable ApprovedDateDt {
         type = Date;
      }
      variable QtyConfirmApprovedNum {
         type = Number;
      }

      execute {
         set ReceivingMessageId = ReceivingMessageIdNum;
         set ReceivingMessageLine = ReceivingMessageLineNum;
         set DeliveryNoteNo = DeliveryNoteNoStr;
         set CustomerNo = CustomerNoStr;
         set CustomerName = CustomerNameStr;
         set ReceivingAdviceType = ReceivingAdviceTypeStr;
         set InternalSuppContract = InternalSuppContractStr;
         set CustomerPartNo = CustomerPartNoStr;
         set SalesPartNo = SalesPartNoStr;
         set ReferenceId = ReferenceIdStr;
         set CustPONo = CustPONoStr;
         set CustPOLineNo = CustPOLineNoStr;
         set CustPORelNo = CustPORelNoStr;
         set ArrivalDate = ArrivalDateDt;
         set QtyConfirmArrival = QtyConfirmArrivalNum;
         set ApprovedDate = ApprovedDateDt;
         set QtyConfirmApproved = QtyConfirmApprovedNum;
         set ConfArrivedMatch = 0;
         set ConfApprovedMatch = 0;
         set LineCount = 0;
      }
   }

   steps {
      step {
         group MatchReceivingAdviceGroup;
         group ConfirmedArrivedGroup;
         group ConfirmedApprovedGroup;
         list ItemsToMatchList(DeliverUnconfirmedArray);
      }
      final step {
      }
   }
   finish command {
      enabled = [LineCount > 0 and((ReceivingAdviceType = "ARRIVED_GOODS" and QtyConfirmArrival = ConfArrivedMatch) or(ReceivingAdviceType = "APPROVED_GOODS" and QtyConfirmArrival = ConfArrivedMatch and QtyConfirmApproved = ConfApprovedMatch))];
      execute {
         call ExecuteOk(Objkey);
         navigate back;
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
}

--------------------------------- COMMANDS ----------------------------------

command MatchCommand for IncomingReceivingAdvice {
   label = "Match";
   enabled = [Objstate in("Stopped", "Changed", "Received")];
   execute {
      call Match();
   }
}

command CancelCommand for IncomingReceivingAdvice {
   label = "Cancel";
   enabled = [Objstate in("Stopped", "Changed", "Received")];
   execute {
      confirm("The incoming receiving advice message will be cancelled.") {
         when OK {
            call Cancel();
         }
      }
   }
}

command CancelCommand for IncomingReceivingAdviceLine {
   label = "Cancel";
   enabled = [Objstate in("QtyDifference", "Stopped", "Changed", "Received")];
   mode = SelectedRecords;
   execute {
      confirm("The incoming receiving advice line will be cancelled.") {
         when OK {
            call Cancel();
         }
      }
   }
}

command ManualMatchingCommand for IncomingReceivingAdviceLine {
   label = "Manual Matching";
   variable ValidateData Structure(ValidateStructure);

   enabled = [Objstate in("QtyDifference", "Stopped", "Changed", "Received")];
   execute {
      call ValidateBeforeManualMatch() into ValidateData;
      if [ValidateData.ErrorMsg = "VALIDATE_OK"] {
         navigate "assistant/IncomingReceivingAdvice/Assistant?$action=InitValues{
         ReceivingMessageIdNum:$[parent.MessageId], ReceivingMessageLineNum:$[MessageLine], DeliveryNoteNoStr:$[ReceiptReference],
         CustomerNoStr:$[ValidateData.CustomerNo], CustomerNameStr:$[parent.CustomerName], ReceivingAdviceTypeStr:$[parent.ReceivingAdviceType], InternalSuppContractStr:$[Contract],
         CustomerPartNoStr:$[CustomerPartNo], SalesPartNoStr:$[CatalogNo], ReferenceIdStr:$[CustomerRefId], CustPONoStr:$[CustomerPoNo], CustPOLineNoStr:$[CustomerPoLineNo],
         CustPORelNoStr:$[CustomerPoReleaseNo], ArrivalDateDt:$[ArrivalDate], QtyConfirmArrivalNum:$[QtyConfirmedArrived], ApprovedDateDt:$[ReceiptDate], QtyConfirmApprovedNum:$[QtyConfirmedApproved]}";
      }
      else {
         alert("Some information required to do manual matching is missing. See the error message in line/general tab.");
         navigate "page/IncomingReceivingAdvice/Form?$filter=MessageId eq $[parent.MessageId]";
      }
   }
}

command MatchAllCommand {
   label = "Match All";
   variable KeyrefsVar {
      type = Text;
   }
   execute {
      stringify(ItemsToMatchList, keyref) into KeyrefsVar;
      call MatchAll(KeyrefsVar);
   }
}

--------------------------------- SELECTORS ---------------------------------

@Override
selector IncomingReceivingAdviceSelector for IncomingReceivingAdvice {
   label = "${MessageId}";
   static MessageId;
   static ReceivingAdviceDate;

   badge Objstate {
      label = "Status";
      emphasis StateStopped = [Objstate = "Stopped"];
      emphasis Progress3 = [Objstate = "MatchingInProgress"];
      emphasis Progress5 = [Objstate = "Changed"];
      emphasis Progress7 = [Objstate = "QtyDifference"];
      emphasis Progress9 = [Objstate = "Received"];
      emphasis Progress11 = [Objstate = "PartiallyMatched"];
      emphasis Progress12 = [Objstate = "Matched"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
      style = TextOnly;
   }
   static CustomerNo;
   static CustomerName;
}

---------------------------------- GROUPS -----------------------------------

group IncomingReceivingAdviceGroup for IncomingReceivingAdvice {
   label = "";
   field MessageId {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   field AdviceId;
   field ReceivingAdviceType2;
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      description = CustomerNoRef.Name;
   }
   field Company {
      size = Small;
   }
   field InternalCustomerSite {
      size = Small;
   }
   field BuyerCode {
      contactwidget {
         enabled = [BuyerCode != null];
         source = Person;
      }
   }
   daterangefield {
      startdate DateFrom;
      enddate DateTo;
      label = "Valid Period";
   }
   field ReceivingAdviceDate;
   field CreatedDate;
   field MatchedDate;
   field ErrorMessage {
      size = FullWidth;
      multiline = true;
   }
   field ReceivingAdviceType {
      visible = [false];
   }
}

group MatchReceivingAdviceGroup for MatchReceivingAdviceVirtual {
   label = "";
   static ReceivingMessageId;
   static ReceivingMessageLine {
      size = Small;
   }
   static CustomerNo {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
   }
   static CustomerName;
   static ReferenceId {
      size = Small;
   }
   static CustPONo {
      size = Small;
   }
   static CustPOLineNo {
      size = Small;
   }
   static CustPORelNo {
      size = Small;
   }
   static DeliveryNoteNo;
   static SalesPartNo {
      size = Small;
   }
}

group ConfirmedArrivedGroup for MatchReceivingAdviceVirtual {
   label = "Confirmed Arrived";
   static ArrivalDate;
   static QtyConfirmArrival;
   static ConfArrivedMatch;
}

group ConfirmedApprovedGroup for MatchReceivingAdviceVirtual {
   label = "Confirmed Approved";
   static ApprovedDate;
   static QtyConfirmApproved;
   static ConfApprovedMatch;
}

----------------------------------- LISTS -----------------------------------

list IncomingReceivingAdviceLineList for IncomingReceivingAdviceLine {
   label = "";
   field MessageLine;
   field ReceiptReference;
   field CustomerPoNo;
   field CustomerPoLineNo {
      size = Small;
   }
   field CustomerPoReleaseNo {
      size = Small;
   }
   field CustomerPoReceiptNo;
   field CustomerRefId;
   field CustomerPartNo;
   field CatalogNo;
   field GtinNo {
      size = Small;
   }
   field QtyConfirmedArrived {
      searchable = false;
   }
   field QtyConfirmedApproved;
   field SalesUnitMeas {
      size = Small;
   }
   field ArrivalDate {
      searchable = false;
   }
   field ReceiptDate {
      searchable = false;
   }
   field DeliveryDate {
      searchable = false;
   }

   badge Objstate {
      label = "Status";
      style = TextOnly;
      emphasis StateStopped = [Objstate = "Stopped"];
      emphasis Progress3 = [Objstate = "MatchingInProgress"];
      emphasis Progress5 = [Objstate = "Changed"];
      emphasis Progress7 = [Objstate = "QtyDifference"];
      emphasis Progress9 = [Objstate = "Received"];
      emphasis Progress11 = [Objstate = "PartiallyMatched"];
      emphasis Progress12 = [Objstate = "Matched"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
   field ErrorMessage {
      size = Large;
   }
   field MatchedUser {
      size = Small;
      contactwidget {
         enabled = [MatchedUser != null];
         source = Person;
      }

   }
   fieldranking CustomerPoNo, CustomerPartNo, QtyConfirmedArrived, QtyConfirmedApproved, ArrivalDate, ErrorMessage, Objstate, DeliveryDate, ReceiptDate;
   commandgroup CommandGroup {

      command CancelCommand;
      command ManualMatchingCommand;
   }
}

list ItemsToMatchList for DeliverUnconfirmedCustomerOrderVirtual {
   label = "";
   editmode = SingleCellEdit;
   field Match {
      size = Small;
   }
   field ContractRef {
      size = Small;
   }
   lov DelnoteNoRef with ReferenceCustomerOrderDelivNoteUivSelector {
      size = Small;
   }
   field OrderNo;
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field RefId;
   field CustomerPoNo;
   field CustomerPoLineNo {
      size = Small;
   }
   field CustomerPoRelNo {
      size = Small;
   }
   field QtyDelivered;
   field ConfirmedArrivedQty {
      validate command {
         execute {
            if [ConfirmedArrivedQty < QtyConfirmedArrived] {
               alert("The value for qty confirmed arrived should be greater than ${QtyConfirmedArrived}, enter a valid quantity.");
            }
         }
      }
   }
   field ConfirmedApprovedQty {
      editable = [ReceivingAdviceType = "APPROVED_GOODS"];
      validate command {
         execute {
            if [ConfirmedApprovedQty < QtyToInvoice] {
               alert("The value for qty to invoice should be greater than ${QtyToInvoice}, enter a valid quantity.");
            }
         }
      }
   }
   field DateDelivered;

   command MatchAllCommand {
      enabled = [parent.LineCount > 0];
      mode = Global;

   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

-- use differrent state name to set proper sorting
stateindicator IncomingReceivingAdvStateIndicator for IncomingReceivingAdvice {

   state "Received" {
      completed = 10%;
      emphasis Progress9 = [Objstate = "Received"];
   }
   state "Stopped" {
      completed = 100%;
      emphasis StateStopped = [Objstate = "Stopped"];
   }
   state "Changed" {
      completed = 20%;
      emphasis Progress5 = [Objstate = "Changed"];
   }
   state "QtyDifference" {
      completed = 40%;
      emphasis Progress7 = [Objstate = "QtyDifference"];
   }

   state "PartiallyMatched" {
      completed = 60%;
      emphasis Progress11 = [Objstate = "PartiallyMatched"];
   }
   state "MatchingInProgress" {
      completed = 80%;
      emphasis Progress3 = [Objstate = "MatchingInProgress"];
   }
   state "Matched" {
      completed = 100%;
      emphasis Progress12 = [Objstate = "Matched"];
   }

   state "Cancelled" {
      completed = 100%;
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }

}
----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

