-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2021-02-01  DhAplk   SC2020R1-11784, Replaced complex project views using Get methods if reference is read only.
-- 2019-06-17  JaBalk   SCUXXW4-21993, Changed the label of Warehouse.
-- 2019-06-14  JaBalk   SCUXXW4-21971, Enabled the catch qty field to edit only if the CatchQtyPicked has value.
-- 2019-06-13  JaBalk   SCUXXW4-21993, Added some fields to CustomerOrder entity to show them in CustomerOrderLovList.
-- 2019-05-26  JaBalk   SCUXXW4-16045, Added ludependencies to DeliverWithDifferences.
-- 2019-05-15  JaBalk   SCUXXW4-17701, Modified DeliverWithDifferences  action to deliver inv parts and non inv parts.
-- 2019-05-09  RasDlk   SCUXXW4-20453,20549,20598, Implemented the code related to InputUoM.
-- 2019-05-06  JaBalk   SCUXXW4-17701, Changed the lu depencies of action DeliverWithDifferences.
-- 2019-05-02  JaBalk   SCUXXW4-17701, connected a DELIVER_CUSTOMER_ORDER view for dlgShipDiffInv instead of
-- 2019-05-02           INVENTORY_PART_IN_STOCK as the order line keys are needed in the reservation level to retrieve Qty to Deliver.
-- 2019-04-10  JaBalk   SCUXXW4-17701, Implemented a InventoryPartInStock entity for dlgShipDiffInv.
-- 2019-03-27  JaBalk   SCUXXW4-1546,  Added Deliver_With_Differences___.
-- 2019-01-31  KuBalk   SCUXXW4-1549,  Converted from tbwShipDiffNonInventory.
-- 2019-01-31  KuBalk   SCUXXW4-1544,  Converted from tbwShipDiffInventory.
-- 2019-01-24  KuBalk   SCUXXW4-15872, Converted from frmShipDiff using MTG Version: 1.34.
-------------------------------------------------------------------------------------------------

projection DeliverCustomerOrderWithDifferences;
component ORDER;
layer Core;
description "Manage CustomerOrderLine";
category Users;
include fragment CustOrdCust2Selector;
include fragment CustomerOrderInitialCheck;
include fragment InputUnitOfMeasure;
include fragment UserAllowedSiteLovSelector;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderSet for CustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrder {
   crud = Read;
   where = "Customer_Order_Flow_API.Deliver_With_Diff_Allowed__(ORDER_NO) = 1 AND OBJSTATE IN ('Released','Reserved','PartiallyDelivered','Picked')";
   --ludependencies = CustomerOrderLineInv, CustomerOrderLineNonInv;
   supportwarnings = [true];
   use attributes = Contract, WantedDeliveryDate, CustomerNo, RouteId;
   attribute OrderNo Text {
      maxlength = 100;
   }
   attribute Contract Text;
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   attribute CustomerNo Text;
   attribute CustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(customer_no)";
      label = "Customer Name";
      maxlength = 2000;
   }
   attribute RouteId Text {
      label = "Route ID";
   }
   attribute Description Text {
      fetch = "Delivery_Route_API.Get_Description(route_id)";
      label = "Description";
      maxlength = 2000;
   }
   attribute InventoryLinesExist Number {
      fetch = "Deliver_Customer_Order_API.Ready_Inv_Lines_On_Order__(ORDER_NO)";
   }
   attribute NonInventoryLinesExist Number {
      fetch = "Deliver_Customer_Order_API.Ready_Non_Inv_Lines_On_Order__(ORDER_NO)";
   }
   attribute UsesShipmentInventory Number {
      fetch = "Customer_Order_API.Uses_Shipment_Inventory(ORDER_NO)";
   }
   -- added this attribute to show the label status while searching PO umber
   attribute Objstate Enumeration(CustomerOrderState) {
      label = "Status";
      fetch = "Objstate";
   }
   -- added the following attributes to show it while searching PO umber using find button
   attribute AuthorizeCode Text {
      fetch = "authorize_code";
      label = "Coordinator";
   }
   attribute BillAddrNo Text {
      fetch = "BILL_ADDR_NO";
      label = "Doc Addr";
   }
   attribute CustomerNoPayRef Text {
      fetch = "customer_no_pay_ref";
      label = "Customer No Pay Reference";
   }
   attribute Priority Number {
      fetch = "priority";
   }
   attribute ProposedPrepaymentAmount Number {
      fetch = "proposed_prepayment_amount";
      label = "Required Prepayment Amount";
   }
   attribute PrepaymentApproved Boolean("TRUE", "FALSE") {
      fetch = "prepayment_approved_db";
   }
   attribute BackorderOption Enumeration(CustomerBackorderOption) {
      fetch = "backorder_option_db";
      label = "Backorder Option";
   }
   attribute ExpectedPrepaymentDate Date {
      fetch = "expected_prepayment_date";
   }
   attribute FreightMapId Date {
      fetch = "freight_map_id";
      label = "Freight Map ID";
   }
   attribute ZoneId Date {
      fetch = "zone_id";
      label = "Zone ID";
   }
   attribute FreightPriceListNo Date {
      fetch = "freight_price_list_no";
      label = "Price List No";
   }
   attribute ApplyFixDelivFreightDb Boolean("TRUE", "FALSE") {
      fetch = "apply_fix_deliv_freight_db";
      label = "Apply Fixed Delivery Freight";
   }
   attribute ShipmentType Text {
      format = uppercase;
   }
   attribute VendorNo Text {
      fetch = "vendor_no";
      label = "Deliver-from Supplier";
   }
   attribute FreeOfChgTaxPayParty Enumeration(TaxPayingParty) {
      fetch = "free_of_chg_tax_pay_party";
      label = "Tax Paying Party for FOC";
   }


   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }

   array CustomerOrderArray(OrderNo) to CustomerOrderLineNonInv(OrderNo);
   array CustomerOrderArrayInv(OrderNo) to CustomerOrderLineInv(OrderNo);

}

query CustomerOrderLineNonInv {
   from = "CUSTOMER_ORDER_LINE";
   lu = CustomerOrderLine;
   keys = OrderNo, LineNo, RelNo, LineItemNo;
   where = "Cust_Order_Load_List_API.Get_Load_Id( ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO) IS NULL AND SUPPLY_CODE_DB != 'PD' AND PART_NO IS NULL AND BUY_QTY_DUE - QTY_SHIPPED + QTY_SHIPDIFF > 0 AND LINE_ITEM_NO >= 0 AND SHIPMENT_CONNECTED_DB = 'FALSE' AND OBJSTATE != 'Cancelled'";
   --ludependencies = CustomerOrder;
   attribute OrderNo Text {
      editable = [false];
   }
   attribute QtyToDeliver Number {
      label = "Qty to Deliver";
      fetch = "qty_to_ship";
      editable = [true];
      updatable = [true];
   }
   attribute QtyToShip Number {
      label = "Reserved Qty";
      fetch = "qty_to_ship";
      editable = [false];
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
      fetch = "buy_qty_due";
      editable = [false];
   }
   attribute LineNo Text {
      fetch = "line_no";
      editable = [false];
   }
   attribute RelNo Text {
      fetch = "rel_no";
      label = "Del No";
      editable = [false];
   }

   attribute LineItemNo Number {
      fetch = "line_item_no";
      label = "Line Item No";
   }
   --NOTE: only used for the ORDER BY in the client.
   attribute LineNumber Text {
      fetch = "LPAD(line_no,4)";
      editable = [false];
   }
   --NOTE: only used for the ORDER BY in the client.
   attribute ReleaseNumber Text {
      fetch = "LPAD(rel_no,4)";
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Part No";
      fetch = "catalog_no";
      editable = [false];
   }
   attribute SalesUnitMeas Text {
      label = "UoM";
      fetch = "sales_unit_meas";
      editable = [false];
   }
   attribute CatalogType Enumeration(SalesPartType) {
      label = "Sales Part Type";
      fetch = "CATALOG_TYPE_DB";
      editable = [false];
   }
   attribute QtyShipped Number {
      fetch = "qty_shipped";
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      editable = [false];
   }
   attribute CatalogDescription Text {
      fetch = "Customer_Order_Line_API.Get_Catalog_Desc(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
   }
   attribute PackagePartNo Text {
      fetch = "Customer_Order_Line_API.Get_Catalog_No(ORDER_NO,LINE_NO,REL_NO, -1)";
      editable = [false];
   }
   attribute Objstate Enumeration(CustomerOrderLineState) {
      fetch = "objstate";
      editable = [false];
   }
   attribute CloseLineDb Boolean("TRUE", "FALSE") {
      fetch = "'FALSE'";
      label = "Close";
      editable = [true];
      updatable = [false];
      required = [true];
   }

   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigurationIdRef(ConfigurationId) to ConfigurationSpec(ConfigurationId) {
      label = "Configuration ID";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
}


------------------------------ ENTITY DETAILS -------------------------------

query CustomerOrderLineInv {
   from = "customer_order_line";
   lu = CustomerOrderLine;
   keys = OrderNo, LineNo, RelNo, LineItemNo {
      where = "ORDER_NO = :OrderNo and LINE_NO = :LineNo and REL_NO = :RelNo and LINE_ITEM_NO = :LineItemNo";
   }
   where = "LINE_ITEM_NO >= 0 AND QTY_PICKED > 0 AND SHIPMENT_CONNECTED_DB = 'FALSE' AND Cust_Order_Load_List_API.Get_Load_Id( ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO) IS NULL";
   attribute OrderNo Text {
      fetch = "order_no";
      label = "Order No";
      maxlength = 12;
      editable = [false];
      updatable = [false];
      format = uppercase;
   }
   attribute LineNo Text {
      fetch = "line_no";
      label = "Line No";
      maxlength = 4;
      editable = [false];
      updatable = [false];
   }
   attribute RelNo Text {
      fetch = "rel_no";
      label = "Del No";
      maxlength = 4;
      editable = [false];
      updatable = [false];
   }
   attribute LineItemNo Number {
      fetch = "line_item_no";
      label = "Line Item No";
      required = [true];
      editable = [false];
      updatable = [false];
   }
    --NOTE: only used for the ORDER BY in the client.
   attribute LineNumber Text {
      fetch = "LPAD(line_no,4)";
      editable = [false];
   }
   --NOTE: only used for the ORDER BY in the client.
   attribute ReleaseNumber Text {
      fetch = "LPAD(rel_no,4)";
      editable = [false];
   }
   attribute QtyToDeliver Number {
      fetch = "qty_picked";
      label = "Qty to Deliver";
      editable = [false];
      updatable = [false];
   }
   attribute CatchQtyToDeliver Number {
      fetch = "qty_picked";
      label = "Catch Qty to Deliver";
      editable = [false];
      updatable = [false];
   }
   attribute QtyPicked Number {
      fetch = "qty_picked";
      label = "Picked Qty";
      editable = [false];
   }
   attribute CatchQtyPicked Number {
      fetch = "Deliver_Customer_Order_API.Get_Catch_Qty_To_Deliver(order_no,line_no,rel_no,line_item_no)";
      label = "Picked Catch Qty";
      editable = [false];
   }
   attribute CloseLineDb Boolean("TRUE", "FALSE") {
      fetch = "'FALSE'";
      label = "Close";
      editable = [true];
      updatable = [false];
      required = [true];
   }
   attribute Objstate Enumeration(CustomerOrderLineState) {
      fetch = "objstate";
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "part_ownership_db";
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no, line_no, rel_no, line_item_no, part_ownership_db)";
      label = "Owner";
      maxlength = 2000;
      editable = [false];
   }
   attribute OwningCustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(owning_customer_no)";
      label = "Owning Customer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, part_no)";
      label = "Catch UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute CatalogType Enumeration(SalesPartType) {
      fetch = "catalog_type_db";
      label = "Sales Part Type";
      editable = [false];
   }
   attribute QtyShipped Number {
      fetch = "qty_shipped";
      label = "Qty Shipped";
      required = [true];
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute SalesUnitMeas Text {
      label = "U/M";
      editable = [false];
   }
   attribute UoM Text {
      label = "UoM";
      fetch = "INVENTORY_PART_API.Get_Unit_Meas(contract,part_no)";
      editable = [false];
   }
   attribute PackagePartNo Text {
      fetch = "Customer_Order_Line_API.Get_Catalog_No(order_no, line_no, rel_no, -1)";
      editable = [false];
   }
   attribute InputUomAllowed Boolean("TRUE", "FALSE") {
      fetch = "Input_Unit_meas_Group_API.Is_Usage_Allowed(Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(contract, part_no), 'ORDER')";
      label = "Input UoM";
   }

   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference UMRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "U/M";
   }
   reference CatchUomRef(CatchUom) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }

   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }

   array ShipInvArray(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderReservation(OrderNo, LineNo, RelNo, LineItemNo);

}
query CustomerOrderReservation {
   from = "deliver_customer_order_diff";
   keys = OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId;
--   ludependencies = CustomerOrder, CustomerOrderLineInv;
   attribute QtyToDeliver Number {
      label = "Qty to Deliver";
      fetch = "qty_picked";
      editable = [true];
      updatable = [true];
   }

   attribute InvUnitMeas Text {
      label = "Inventory UoM";
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      editable = [false];
   }
   attribute CatchQtyToDeliver Number {
      label = "Catch Qty to Deliver";
      fetch = "catch_qty_to_deliver";
      editable = [true];
      updatable = [true];
   }
   attribute CatchUnitMeas Text {
      label = "Catch UoM";
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, part_no)";
      editable = [false];
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
      fetch = "qty_picked";
      editable = [false];
   }
   attribute CatchQtyPicked Number {
      label = "Picked Catch Qty";
      fetch = "catch_qty_to_deliver";
      editable = [false];
   }
   attribute OrderNo Text {
      editable = [false];
   }
   attribute LineNo Text {
      editable = [false];
   }
   attribute RelNo Text {
      editable = [false];
   }
   attribute LineItemNo Number {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute LotBatchNo Text {
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Rev No";
      editable = [false];
   }
   attribute HandlingUnitId Number {
      maxlength = 75;
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "INVENTORY_LOCATION_API.Get_Warehouse(contract, location_no)";
      label = "Warehouse ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute BayId Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bay_No(contract, location_no)";
      label = "Bay ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "INVENTORY_LOCATION_API.Get_Row_No(contract, location_no)";
      label = "Row ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TierId Text {
      fetch = "INVENTORY_LOCATION_API.Get_Tier_No(contract, location_no)";
      label = "Tier ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinId Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bin_No(contract, location_no)";
      label = "Bin ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      maxlength = 75;
      fetch = "Inventory_Part_In_Stock_API.Get_Availability_Control_Id(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id)";
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(Inventory_Part_In_Stock_API.Get_Availability_Control_Id(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id))";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }

   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      fetch = "Activity_API.Get_Project_id(activity_seq)";
      label = "Project ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySeq Number {
      maxlength = 10;
      editable = [false];
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitType Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   -- this column is needed to keep the previous value when entering an invalid number and to replace the wrong value with the correct value
   attribute PreviousQtyToDeliver Number {
      label = "Qty to Deliver";
      fetch = "qty_picked";
      editable = [false];
      updatable = [false];
   }
   attribute InputUomGroupId Text {
      fetch = "Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(contract, part_no)";
      label = "Input UoM Group ID";
      maxlength = 30;
      editable = [false];
   }
   attribute InputUom Text {
      fetch = "input_unit_meas";
      label = "Input UoM";
      editable = [ETag != null];
   }
   attribute InputQty Number {
      fetch = "input_qty";
      label = "Input Qty";
      editable = [ETag != null];
   }
   attribute InputConversion Number {
      fetch = "input_conv_factor";
      label = "Input Conv Factor";
      editable = [false];
   }
   attribute InputValue Text {
      fetch = "input_variable_values";
      label = "Input Values";
      maxlength = 2000;
      editable = [false];
   }
   attribute MultiplePicking Text {
      fetch = "multiple_picking";
      label = "Multiple Picking";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "Activity_API.Get_Sub_Project_Id(activity_seq)";
      label = "Sub Project ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityId Text {
      fetch = "Activity_API.Get_Activity_No(activity_seq)";
      label = "Activity Id";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(activity_seq)";
      label = "Activity Description";
      editable = [false];
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   @DynamicComponentDependency PROJ
   reference ActivityRef(ActivitySeq) to Activity(ActivitySeq);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Availability Control ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference InputUomRef(InputUom) to InputUnitMeas(UnitCode) {
      label = "Input UoM";
   }
}
------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action DeliverWithDifferences {
   initialcheck DeliverWithDifferencesInitialCheck(InventoryLineDetails);
   parameter OrderNo Text;
   parameter InventoryLineDetails LongText;
   parameter ReservationLineDetails LongText;
   parameter NonInventoryDetails LongText;
   supportwarnings = [true];
   ludependencies = CustomerOrder, CustomerOrderLineInv, CustomerOrderLineNonInv;
}
action CancelDeliverOrder {
   initialcheck CustomerOrderInitialCheck(OrderNo);
   parameter OrderNo Text;
   supportwarnings = [true];
   ludependencies = CustomerOrder;
}
--------------------------------- FUNCTIONS ---------------------------------

function CheckAllLicenseConnected Number {
   parameter OrderNo Text;
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


