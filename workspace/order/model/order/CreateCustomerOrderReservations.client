----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 181204      RAKUSE  SCUXXW4-8640, Converted dialog 'dlgPSheetCreateOrderReservations' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CreateCustomerOrderReservations;
component ORDER;
layer Core;
projection CreateCustomerOrderReservationsHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent OrderNavigator.SalesReservation at index 300 {
      label = "Create Customer Order Reservations";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";

   field PlannedDueDate {
      visible = [TaskOption = "Now"];
      required = [true];
      size = Small;
   }

   field ExecutionOffset {
      visible = [TaskOption = "Schedule"];
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      freeinput = [true];
      description = ContractRef.ContractDesc;
   }

}

group COHeaderParameterGroup for TaskVirtual {
   label = "CO Header Parameters";

   lov OrderTypeRef with ReferenceCustOrderTypeSelector {
      freeinput = [true];
      size = Small;
   }
   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      freeinput = [true];
      description = AuthorizeCodeRef.Name;
   }
   field Priority {
      size = Small;
      validate command {

         variable ValidPriority Boolean;
         execute {
            call ValidatePriority(Priority) into ValidPriority;
            if [ValidPriority != true] {
               set Priority = "";
               alert("Field format is invalid.");
            }
         }
      }
   }
}

group COLineParameterGroup for TaskVirtual {
   label = "CO Line Parameters";

   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      freeinput = [true];
      description = CustomerNoRef.Name;
   }
   lov DeliverAddressRef with ReferenceCustAddressShipLovSelector {
      freeinput = [true];
      size = Small;
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      freeinput = [true];
      size = Small;
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      freeinput = [true];
      size = Small;
   }
   lov PartNoRef with ReferenceInventoryPartSelector {
      freeinput = [true];
      size = Small;
   }
   lov ShipViaRef with ReferenceMpccomShipViaSelector {
      freeinput = [true];
      size = Small;
   }
   field CatalogType;
}

group AdvancedOptionsGroup for TaskVirtual {
   label = "Additional Parameters - Options";
   field ReserveAllLinesCo;
}


-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Create Customer Order Reservations";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         -- Init parameters
         set PlannedDueDate = Params.PlannedDueDate;
         set Contract = Params.Contract;
         set ExecutionOffset = Params.ExecutionOffset;
         set OrderType = Params.OrderType;
         set Coordinator = Params.Coordinator;
         set Priority = Params.Priority;
         set DeliverToCustomerNo = Params.DeliverToCustomerNo;
         set DeliveryAddress = Params.DeliveryAddress;
         set RouteId = Params.RouteId;
         set ForwardAgentId = Params.ForwardAgentId;
         set PartNo = Params.PartNo;
         set ShipVia = Params.ShipVia;
         set ReserveAllLinesCo = Params.ReserveAllLinesCo;
         set FairShareRes = Params.FairShareRes;
         set CatalogType = Params.CatalogType;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         group COHeaderParameterGroup;
         group COLineParameterGroup;
         group AdvancedOptionsGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(TaskOption = "Now" and PlannedDueDate != null) or(TaskOption = "Schedule") and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
