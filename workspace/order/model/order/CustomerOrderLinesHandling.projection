------------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   ------------------------------------------------------------------------------
-- 2021-12-23  Skanlk   Bug 161134(SC21R2-6825), Added the attribute TaxIdType for the entity CustomerOrderJoin to validate Tax ID other than EU countires.
-- 2021-10-01  PrRtlk   SC21R2-2966, Used the Subset Customer Order in ShipmentCreation Enumeration for Customer Order related Shipment Creation types.
-- 2021-08-10  Inaklk   SC21R2-2242, Use FreeOfCharge instead of FreeOfChargeDb to correct parameters to actions
-- 2021-06-29  MiKulk   SC21R2-1693, Added a default where to the entityset CustomerOrderJoinSet.
-- 2021-06-15  MUSHLK   MF21R2-1943, Changed the data type of PlannedDueDate to Timestamp and made it editable.
-- 2021-04-30  cecobr   FI21R2-916, gelr:brazilian_specific_attributes, Add Acquisition Reason to Business Transaction, Sales Part and CO Line
-- 2020-12-17  MaRalk   SC2020R1-11406, Handled attributes ConsignmentStock, StagedBilling, CreateSmObjectOption, SmConnection,
-- 2020-12-17           CtpPlanned as enumerations instead of boolean.
-- 2020-10-16  Erlise   Bug 148761(SCZ-11844), Modified entity CustomerOrderJoin by adding an attribute SupplySitePartNo.
-- 2020-09-21  MaEelk   GESPRING20-5401, Added Discounted Price Rounded parameter enabled condition when fetching the SQL column
-- 2020-09-21           to Discount, OrderDiscount and AdditionalDiscount.
-- 2020-03-23  MaRalk   SCXTEND-4102, Changed data type of the DateEntered attribute as Timestamp
-- 2020-03-23           in order to compatible with the model and to make search work.
-- 2020-03-06  JaThlk   SCXTEND-2147, Added PlannedDueDateTruncated to support Warehouse Instant View lobby page.
-- 2019-03-04  ErRalk   SCXTEND-3657, Added PlannedShipDateTruncated for Shipping planner outbound lobby.
-- 2019-10-25  JeLise   SCXTEND-993, Removed the replication functionality.
-- 2019-07-05  MeAblk   SCUXXW4-18021, Removed some unwanted attributes and references.
-- 2019-06-18  JeLise   SCUXXW4-8717, Included ReplicateOrderChangesDialog and added ReplicateColumnsModified
-- 2019-06-18           to handle the replication functionality.
-- 2019-03-12  ErRalk   SCUXXW4-17233, Added Dependency Annotation for the relevant fields.
-- 2019-02-11  JeLise   SCUXXW4-1086, Added action CreateChangeRequest for replication.
-- 2018-10-09  HaPulk   SCUXXW4-1084, Converted from tbwOverviewCustOrdLine using MTG Version: 1.30
------------------------------------------------------------------------------------------------------

projection CustomerOrderLinesHandling;
component ORDER;
layer Core;
description "Use this API to view a list of the customer order lines recorded in the system. ";
category Users;
include fragment SalesPartGtinNoLovSelector;
@DynamicComponentDependency CONMGT
include fragment ConItemCustOrderLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CustomerTemplateLovSelector;
include fragment CustAddressShipLovSelector;
@DynamicComponentDependency EQUIP
include fragment EquipmentObjCustNoScrappedSelector;
include fragment TaxCalcStructureActiveSelector;
include fragment TaxLiabilityLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
-- Used for command "Update Sales Part Prices"
include fragment UpdateSalesPartPricesFromLineDialog;
include fragment ValidCustomerAgreementLovSelector;
include fragment SupplyChainOrderAnalysisCommand;
-- Used for Code Parts
include fragment CodeStringAllBasic;
-- Used for CO Line Commands and Validations
include fragment SalesOrderLineCommonValidationCommands;
include fragment CustomerOrderLineInitialCheck;
@DynamicComponentDependency PURCH
include fragment PurchaseOrderInitialCheck;
include fragment SalesOrderLineCommonCommands;
include fragment TaxIdNumbersValidation;
include fragment SalesInterimOrderCommands;
include fragment ShipmentTypeSelector;
-- gelr:brazilian_specific_attributes, begin
include fragment AcquisitionReasonSelector;
-- gelr:brazilian_specific_attributes, end

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CustomerOrderJoinSet for CustomerOrderJoin {
   defaultwhere = "(
                     (order_objstate IN ('Invoiced') AND order_closed_date >= (SYSDATE - 100))
                     OR
                     (order_objstate IN ('Planned','Released','Reserved','Picked','PartiallyDelivered','Delivered'))
                    )
                   ";
}

-- CustomerOrderLine entity is overridden to avoid code generation errors since it cannot identify the CustomerOrderLineState enumeration
-- from CustomerOrderLineStructure in CustomerOrderLineAddressDialog.fragment
@Override
entity CustomerOrderLine {
   crud = Read;
}

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrderJoin using CustomerOrderLine {
   crud = Read, Update;
   from = "customer_order_join";
   where = "LINE_ITEM_NO <= 0 ";
   supportwarnings = [true];
   -- gelr:brazilian_specific_attributes, added AcquisitionReasonId
   -- gelr:disc_price_rounded, added DiscPriceRound, OriginalDiscount, OriginalOrderDiscount, OriginalAddDiscount
   use attributes = RentalDb, OrderId, CustomerNo, CustomerName, Contract, CatalogNo, CatalogDesc, ConfigurationId, ConditionCode, CatalogType, PartNo, PurchasePartNo,
   SupplyCode, VendorNo, SupplySite, SupplySiteReserveType, BuyQtyDue, DesiredQty, ConvFactor, InvertedConvFactor, RevisedQtyDue, AbnormalDemandDb, InputUnitMeas, InputQty,
   InputConvFactor, InputVariableValues, PriceListNo, PriceSource, PriceSourceId, ConsignmentStock, PartOwnership, ChargedItem, QtyAssigned, QtyShort, QtyOnOrder,
   QtyToShip, QtyShipdiff, QtyConfirmeddiff, QtyReturned, QtyInvoiced, SalesUnitMeas, PriceConvFactor, PartPrice, CalcCharPrice, CharPrice, SaleUnitPrice, UnitPriceInclTax,
   CustomsValue, ProvisionalPriceDb, PriceFreeze, PriceFreezeDb, CurrencyCode, CurrencyRate, BaseSaleUnitPrice, BaseUnitPriceInclTax, Cost, WantedDeliveryDate, TargetDate,
   PlannedDeliveryDate, PromisedDeliveryDate, PlannedShipDate, PriceEffectivityDate, PlannedShipPeriod, UsePriceInclTax, TaxLiability, TaxCode, TaxClassId, TaxCalcStructureId,
   TaxIdNo, TaxIdValidatedDate, BlockedForInvoicingDb, Discount, OrderDiscount, AdditionalDiscount, FreeOfCharge, FreeOfChargeTaxBasis, RebateBuilderDb, LineTotalQty,
   LineTotalWeightGross, LineTotalWeight, RouteId, LineDeliveryType, CustomerPartNo, CustomerPartConvFactor, CustPartInvertConvFact, CustomerPartUnitMeas, CustomerPartBuyQty,
   DemandCode, DemandOrderRef1, DemandOrderRef2, DemandOrderRef3, StagedBillingDb, SelfBilling, NoteText, DopConnection, CreateSmObjectOption, SmConnectionDb, SupSmObject,
   SupSmContract, DefaultAddrFlag, AddrFlag, EndCustomerId, ShipAddrNo, DeliverToCustomerNo, DockCode, SubDockCode, RefId, CustomerPoLineNo, CustomerPoRelNo, LocationNo,
   OriginalPartNo, Priority, LatestReleaseDate, CtpPlannedDb, JobId, CustCalendarId, PickingLeadtime, ShipViaCode, SupplierShipViaTransit, SupplierShipViaTransitDesc,
   DeliveryTerms, DelTermsLocation, DeliveryLeadtime, ExtTransportCalendarId, DeliveryConfirmedDb, DistrictCode, RegionCode, OriginatingRelNo, ExchangeItemDb, LoadId,
   ProjectId, ActivitySeq, CancelReason, SalesContractNo, AdjustedWeightNet, AdjustedWeightGross, AdjustedVolume, ForwardAgentId, OrderObjstate, ConfiguredLinePriceId,
   CustWarrantyId, OriginatingLineItemNo, ReplicateChanges, ChangeRequest, SupplyCodeDb, OrderConfDb, PriceSourceNetPriceDb, DopNewQtyDemand, CatalogTypeDb, PickedQtySalesUom,
   DeliveredQtySalesUom, PartLevelDb, PartLevelId, CustomerLevelDb, CustomerLevelId, NoteId, DemandCodeDb, CodeA, CodeB, CodeC, CodeD, CodeE, CodeF, CodeG, CodeH, CodeI, CodeJ,
   LinePreAccountingId, SupplySiteDueDate, RelMtrlPlanning, PlannedDueDate, FirstActualShipDate, RealShipDate, DateEntered, CloseTolerance, OpenShipmentQty, ShipmentConnectableQty,
   ShipmentType, ShipmentCreation, PackingInstructionId, ChangedAttribNotInPol, LimitSalesToAssortmentsDb, OwningCustomerNo, Objstate,
   Company, AcquisitionOrigin, StatisticalCode, DiscPriceRound, OriginalDiscount, OriginalOrderDiscount, OriginalAddDiscount, AcquisitionReasonId, OrderClosedDate;
   ludependencies = DocumentText;

   attribute OrderNo Text {
      editable = [false];
   }
   attribute LineNo Text {
      editable = [false];
   }
   attribute RelNo Text {
      label = "Del No";
      editable = [false];
   }
   attribute LineItemNo Number {
      editable = [false];
   }
   attribute LineItemNumber Text {
      fetch = "line_item_no";
   }
   attribute Rental Boolean("TRUE", "FALSE") {
      fetch = "rental_db";
      label = "Rental";
      editable = [false];
   }
   attribute RentalDb Text {
      fetch = "rental_db";
      label = "Rental";
      maxlength = 20;
      editable = [false];
      required = [false];
   }
   attribute OrderId Text {
      fetch = "order_id";
      label = "Order Type";
      maxlength = 3;
      editable = [false];
   }
   attribute CustomerName Text {
      fetch = "customer_name";
      label = "Customer Name";
      maxlength = 100;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      editable = [false];
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
      editable = [false];
   }
   attribute Configurable Boolean("CONFIGURED", "NOT CONFIGURED") {
      fetch = "DECODE(Sales_Part_API.Get_Configurable_Db(CONTRACT, CATALOG_NO),'CONFIGURED','TRUE', 'FALSE')";
      label = "Configurable";
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   attribute InterimOrder Text {
      fetch = "Customer_Order_Line_API.Get_Interim_Order_No(order_no, line_no, rel_no, line_item_no, ctp_planned_db)";
      label = "Interim Order Header";
      maxlength = 100;
      editable = [false];
   }
   attribute CatalogType Enumeration(SalesPartType) {
      label = "Sales Part Type";
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute PurchasePartNo Text {
      editable = [ETag = null];
   }
   attribute SupplyCode Enumeration(OrderSupplyType) {
      editable = [ETag != null];
   }
   attribute VendorNo Text {
      editable = [ETag != null];
   }
   attribute SupplySite Text {
      label = "Supply Site";
      editable = [ETag = null];
   }
   attribute SupplySiteReservedQty Number {
      fetch = "Inventory_Part_API.Get_Site_Converted_Qty(supply_site, part_no, Co_Supply_Site_Reservation_API.Get_Qty_Reserved(order_no, line_no, rel_no, line_item_no), contract, 'ADD')";
      label = "Supply Site Reserved Qty";
      editable = [false];
   }
   attribute SupplySiteReserveType Enumeration(SupplySiteReserveType.Subset1) {
      fetch = "supply_site_reserve_type_db";
      label = "Supply Site Reservation Type";
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
      editable = [false];
   }
   attribute ConvFactor Number {
      editable = [false];
   }
   attribute InvertedConvFactor Number {
      label = "Inverted Conversion Factor";
      editable = [false];
   }
   attribute RevisedQtyDue Number {
      label = "Inventory Qty";
      editable = [false];
   }
   attribute AbnormalDemandDb Boolean("TRUE", "FALSE") {
      fetch = "abnormal_demand_db";
      label = "Abnormal Demand";
      required = [true];
   }
   attribute InputUomGroup Boolean("TRUE", "FALSE") {
      fetch = "Input_Unit_Meas_Group_API.Is_Usage_Allowed(Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(contract, Sales_Part_API.Get_Part_No(contract, catalog_no)), 'ORDER')";
      label = "Input UoM Group";
      editable = [false];
   }
   attribute InputUnitMeas Text {
      label = "Input UoM";
      editable = [false];
   }
   attribute InputQty Number {
      editable = [false];
   }
   attribute InputConvFactor Number {
      editable = [false];
   }
   attribute InputVariableValues Text {
      label = "Input Values";
      editable = [false];
   }
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute PriceListDescription Text {
      fetch = "Sales_Price_List_API.Get_Description(price_list_no)";
   }
   attribute PriceSource Enumeration(PricingSource) {
      fetch = "price_source_db";
      maxlength = 200;
      editable = [false];
   }
   attribute PriceSourceId Text {
      editable = [false];
      format = uppercase;
   }
   attribute ConsignmentStock Enumeration(ConsignmentStock) {
      fetch = "consignment_stock_db";
      label = "Consignment Stock";
      required = [true];
      editable = [ETag != null];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no, line_no, rel_no, line_item_no, part_ownership_db)";
      label = "Owner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute ChargedItem Enumeration(ChargedItem) {
      label = "Charged Item";
      editable = [false];
   }
   attribute QtyAssigned Number {
      label = "Reserved Qty";
      editable = [false];
   }
   attribute SupplySitePartNo Text;
   attribute AvailableQty Number {
      fetch = "Reserve_Customer_Order_API.Get_Available_Qty(NVL(supply_site, contract), NVL(NVL(supply_site_part_no, part_no), catalog_no), configuration_id, order_no, line_no, rel_no, line_item_no, supply_code_db, part_ownership_db, owning_customer_no, project_id, condition_code, null, 'TRUE')";
      label = "Available Qty";
      editable = [false];
   }
   attribute PickedQty Number {
      fetch = "DECODE(catalog_type_db, 'INV', qty_picked, null)";
      label = "Picked Qty";
      editable = [false];
   }
   attribute QtyShort Number {
      label = "Shortage Qty";
      editable = [false];
   }
   attribute QtyOnOrder Number {
      label = "Pegged Qty";
      editable = [false];
   }
   attribute QtyToShip Number {
      label = "Non-Inventory Qty to Deliver";
      editable = [false];
   }
   attribute DeliveredQty Number {
      fetch = "DECODE(catalog_type_db, 'INV', qty_shipped, null)";
      label = "Delivered Qty";
      editable = [false];
   }
   attribute QtyShipdiff Number {
      label = "Qty Diff when Delivered";
      editable = [false];
   }
   attribute QtyConfirmeddiff Number {
      label = "Delivered Qty Diff from Confirmed";
      editable = [false];
   }
   attribute QtyReturned Number {
      label = "Returned Qty";
      editable = [false];
   }
   attribute QtyInvoiced Number {
      label = "Invoiced Qty";
      editable = [false];
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
      editable = [false];
   }
   attribute PriceConvFactor Number {
      editable = [false];
   }
   attribute PartPrice Number {
      label = "Source Price/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute CalcCharPrice Number {
      label = "Calc Char Price/Curr";
      format = ifscurrency;
      editable = [false];
   }
   attribute CharPrice Number {
      label = "Char Price/Curr";
      format = ifscurrency;
   }
   attribute TotalCalcSalesPriceCurr Number {
      fetch = "part_price + NVL(calc_char_price, 0)";
      label = "Total Calc Sales Price/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute SaleUnitPrice Number {
      label = "Price/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      label = "Sales Price Incl Tax/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute CustomsValue Number {
      format = ifscurrency;
   }
   attribute ProvisionalPriceDb Boolean("TRUE", "FALSE") {
      fetch = "provisional_price_db";
      label = "Provisional Price";
      required = [true];
   }
   attribute PriceFreeze Enumeration(FreezeFlag) {
      label = "Price Freeze";
      required = [true];
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      label = "Currency";
      maxlength = 3;
      editable = [false];
      format = uppercase;
   }
   attribute CurrencyRate Number {
      fetch = "Order_Currency_Rate_Util_API.Get_Fin_Curr_Rate(currency_rate, company, currency_code)";
      label = "Currency Rate";
      maxlength = 11;
      editable = [false];
   }
   attribute BaseSaleUnitPrice Number {
      label = "Price/Base";
      fetch = "base_sale_unit_price";
      editable = [false];
      format = ifscurrency;
   }
   attribute BaseUnitPriceInclTax Number {
      label = "Price incl Tax/Base";
      fetch = "base_unit_price_incl_tax";
      editable = [false];
      format = ifscurrency;
   }
   attribute NetAmtBase Number {
      fetch = "Customer_Order_Line_API.Get_Base_Sale_Price_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Net Amt/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "Customer_Order_Line_API.Get_Base_Price_Incl_Tax_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Gross Amt/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute NetAmountCurr Number {
      fetch = "Customer_Order_Line_API.Get_Sale_Price_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Net Amount/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute GrossAmtCurr Number {
      fetch = "Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Gross Amt/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute Cost Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalCostBase Number {
      fetch = "Customer_Order_Line_API.Get_Total_Cost(order_no, line_no, rel_no, line_item_no)";
      label = "Total Cost/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
      editable = [ETag != null];
   }
   attribute TargetDate Timestamp {
      label = "Target Date/Time";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
      editable = [ETag != null];
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
      editable = [ETag != null];
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
      required = [true];
      editable = [ETag != null];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalStartDate Timestamp {
      fetch = "Rental_Object_API.Get_Planned_Rental_Start_Date(rental_no)";
      label = "Planned Rental Start Date";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalStartTime Time {
      fetch = "Rental_Object_API.Get_Planned_Rental_Start_Time(rental_no)";
      label = "Planned Rental Start Time";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalDuration Number {
      fetch = "Rental_Object_API.Get_Planned_Rental_Duration(rental_no)";
      label = "Planned Rental Duration";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute RentalDurationUom Enumeration(RentalDurationUnitMeas) {
      --fetch = "(SELECT rental_duration_unit_meas_db FROM rental_object WHERE rental_no = Rental_Object_API.Get_Rental_No(order_no, line_no, rel_no, line_item_no,'CUST ORDER'))";
      fetch = "Rental_Object_API.Get_Rental_Duration_Unit_Me_Db(rental_no)";
      label = "Rental Duration UoM";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalEndDate Timestamp {
      fetch = "Rental_Object_API.Get_Planned_Rental_End_Date(rental_no)";
      label = "Planned Rental End Date";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalEndTime Time {
      fetch = "Rental_Object_API.Get_Planned_Rental_End_Time(rental_no)";
      label = "Planned Rental End Time";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute ChargeableDays Number {
      fetch = "Rental_Object_Manager_API.Calculate_Chargeable_Days(Rental_Object_API.Get_Planned_Rental_Start_Date(rental_no), Rental_Object_API.Get_Planned_Rental_End_Date(rental_no), Rental_Object_API.Get_Chargeable_Id(rental_no), Rental_Object_API.Get_Exception_Id(rental_no), Rental_Period_Rounding_API.Encode(Rental_Object_API.Get_Period_Rounding(rental_no)))";
      label = "Chargeable Days";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute PlannedRentalReturnDate Date {
      fetch = "Rental_Object_API.Get_Planned_Rental_Return_Date(rental_no)";
      label = "Planned Rental Return Date";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute ChargeableDaysID Text {
      fetch = "Rental_Object_API.Get_Chargeable_Id(rental_no)";
      label = "Chargeable Days ID";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency RENTAL
   attribute DateExceptionID Text {
      fetch = "Rental_Object_API.Get_Exception_Id(rental_no)";
      label = "Date Exception ID";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency RENTAL
   attribute PeriodRounding Text {
      fetch = "Rental_Object_API.Get_Period_Rounding(rental_no)";
      label = "Period Rounding";
      maxlength = 200;
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute ScheduleID Text {
      fetch = "Rental_Object_API.Get_Trans_Schedule_Id(rental_no)";
      label = "Schedule ID";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency RENTAL
   attribute ScheduleDescription Text {
      fetch = "Rental_Trans_Schedule_API.Get_Description(Rental_Object_API.Get_Trans_Schedule_Id(rental_no))";
      label = "Schedule Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute StartRentalOption Enumeration(StartRentalOption) {
      fetch = "Rental_Object_API.Get_Start_Rental_Option_Db(rental_no)";
      label = "Start Rental Option";
      editable = [false];
   }
   attribute PriceEffectivityDate Date {
      label = "Price Effective Date";
      editable = [false];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      editable = [false];
   }
   attribute TaxCode Text {
      label = "Tax code";
      editable = [false];
      updatable = [false];
   }
   attribute TaxCalcStructureId Text {
      label = "Tax Calculation Structure";
      editable = [false];
      updatable = [false];
   }
   attribute TaxCodeDescription Text {
      fetch = "Statutory_Fee_API.Get_Description(company, tax_code)";
      label = "Tax Code Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TaxClassId Text {
      label = "Tax Class";
      editable = [false];
   }
   attribute TaxClassDescription Text {
      fetch = "Tax_Class_API.Get_Description(company, tax_class_id)";
      label = "Tax Class Description";
      maxlength = 100;
      editable = [false];
   }
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(company,'CUSTOMER_ORDER_LINE',order_no,line_no,rel_no,line_item_no, '*')";
      label = "Multiple Tax Lines";
      editable = [false];
   }
   attribute TaxIdNo Text {
      label = "Tax ID";
      maxlength = 200;
   }
   attribute TaxIdValidatedDate Date {
      editable = [false];
   }
   attribute TaxAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Total_Tax_Amount_Base(order_no, line_no, rel_no, line_item_no)";
      label = "Tax Amount/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute TaxAmountCurr Number {
      fetch = "Customer_Order_Line_API.Get_Total_Tax_Amount_Curr(order_no, line_no, rel_no, line_item_no)";
      label = "Tax Amount/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BlockedForInvoicingDb Boolean("TRUE", "FALSE") {
      fetch = "blocked_for_invoicing_db";
      label = "Invoice Blocked";
      required = [true];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute Discount Number {
      fetch = "DECODE(DISC_PRICE_ROUND,'TRUE',DECODE(USE_PRICE_INCL_TAX_DB, 'FALSE',ORIGINAL_DISCOUNT, DISCOUNT),DISCOUNT)";
      label = "Discount (%)";
      editable = [false];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute OrderDiscount Number {
      fetch = "DECODE(DISC_PRICE_ROUND,'TRUE',DECODE(USE_PRICE_INCL_TAX_DB, 'FALSE',ORIGINAL_ORDER_DISCOUNT, ORDER_DISCOUNT),ORDER_DISCOUNT)";
      label = "Group Discount (%)";
      editable = [false];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute AdditionalDiscount Number {
      fetch = "DECODE(DISC_PRICE_ROUND,'TRUE',DECODE(USE_PRICE_INCL_TAX_DB, 'FALSE',ORIGINAL_ADD_DISCOUNT, ADDITIONAL_DISCOUNT),ADDITIONAL_DISCOUNT)";
      label = "Additional Discount (%)";
      editable = [false];
   }
   attribute TotalOrderLineDiscount Number {
      fetch = "Customer_Order_Line_API.Get_Total_Discount_Percentage(order_no,line_no,rel_no,line_item_no)";
      label = "Total Order Line Discount (%)";
      editable = [false];
   }
   attribute FreeOfCharge Boolean("TRUE", "FALSE") {
      fetch = "free_of_charge_db";
      label = "Free of Charge";
      editable = [false];
   }
   attribute FreeOfChargeTaxBasis Number {
      label = "Tax Basis for FOC/Curr";
      format = ifscurrency;
   }
   attribute CompanyBearingTaxAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Comp_Bearing_Tax_Amount(order_no, line_no, rel_no, line_item_no)";
      label = "Company Bearing Tax Amount/Base ";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute RebateBuilderDb Boolean("TRUE", "FALSE") {
      fetch = "rebate_builder_db";
      label = "Rebate Builder";
   }
   attribute LineTotalQty Number {
      label = "Volume";
      editable = [false];
   }
   attribute LineTotalWeightGross Number {
      label = "Total Gross Weight";
      editable = [false];
   }
   attribute LineTotalWeight Number {
      label = "Weight";
      editable = [false];
   }
   attribute RouteId Text {
      editable = [false];
   }
   attribute RouteDescription Text {
      fetch = "Delivery_Route_API.Get_Description(route_id)";
      label = "Route Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute LineDeliveryType Text {
      fetch = "line_delivery_type";
      label = "Delivery Type";
      maxlength = 20;
      editable = [true];
      format = uppercase;
   }
   attribute CustomerPartNo Text {
      label = "Customer's Part No";
      editable = [false];
   }
   attribute CustomerPartConvFactor Number {
      editable = [false];
   }
   attribute CustPartInvertConvFact Number {
      label = "Invert Conv Fact";
      editable = [false];
   }
   attribute CustomerPartUnitMeas Text {
      label = "Customer's UoM";
      editable = [false];
   }
   attribute CustomerPartBuyQty Number {
      label = "Customer Sales Qty";
      editable = [false];
   }
   attribute DemandCode Enumeration(OrderSupplyType) {
      editable = [false];
   }
   attribute DemandOrderRef1 Text {
      label = "Order Ref 1";
      editable = [false];
   }
   attribute DemandOrderRef2 Text {
      label = "Order Ref 2";
      editable = [false];
   }
   attribute DemandOrderRef3 Text {
      label = "Order Ref 3";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute RentalNo Number {
      fetch = "Rental_Object_API.Get_Primary_Rental_No(order_no, line_no, rel_no, line_item_no, 'CUST ORDER')";
      label = "Rental No";
      editable = [false];
   }
   attribute MilestoneExists Boolean("TRUE", "FALSE") {
      fetch = "Customer_Order_Milestone_API.Milestone_Exist(order_no,line_no,rel_no,line_item_no)";
      label = "Milestone Exists";
      editable = [false];
   }
   attribute StagedBilling Enumeration(StagedBillingType) {
      fetch = "staged_billing_db";
      label = "Staged Billing";
      editable = [false];
      required = [true];
   }

   attribute SelfBilling Enumeration(SelfBillingType) {
      label = "Self-Billing";
   }
   attribute NoteText Text {
      editable = [ETag != null];
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID),1,'TRUE','FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute DopConnection Enumeration(DopConnection) {
      editable = [ETag != null];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute CreateSmObjectOption Enumeration(CreateSmObjectOption) {
      fetch = "create_sm_object_option_db";
      label = "Create SM Object";
      required = [true];
      editable = [ETag != null];
   }
   attribute SmConnection Enumeration(ServiceManagementConnect) {
      fetch = "sm_connection_db";
      label = "SM Connection";
      required = [true];
      editable = [ETag = null];
   }
   attribute SupSmObject Text {
      label = "Superior SM Object ID";
   }
   attribute SupSmContract Text {
      label = "Superior SM Site";
   }
   attribute DefaultAddrFlag Enumeration(GenYesNo) {
      label = "Default Info";
      fetch = "default_addr_flag_db";
      required = [true];
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      label = "Single Occurrence";
      fetch = "addr_flag_db";
      required = [true];
   }
   attribute EndCustomerId Text {
      label = "End Customer";
      editable = [false];
   }
   attribute EndCustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(end_customer_id)";
      label = "End Customer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
      format = uppercase;
   }
   attribute DeliverToCustomerNo Text {
      label = "Deliver-to-Customer No";
   }
   attribute RefId Text {
      label = "Reference ID";
      editable = [ETag = null];
   }
   attribute CustomerPoLineNo Text {
      label = "Customer's PO Line No";
   }
   attribute CustomerPoRelNo Text {
      label = "Customer's PO Rel No";
   }
   attribute LocationNo Text {
      label = "To Location No";
   }
   attribute OriginalPartNo Text {
      label = "Original Sales Part No";
      editable = [false];
   }
   attribute Priority Number {
      fetch = "priority";
      label = "Priority";
      editable = [ETag = null];
   }
   attribute LatestReleaseDate Date {
      editable = [false];
   }
   attribute CtpPlanned Enumeration(GenYesNo) {
      fetch = "ctp_planned_db";
      label = "Capability Check";
      editable = [false];
      required = [true];
   }
   attribute JobId Text {
      editable = [false];
   }
   attribute CustCalendarId Text {
      label = "Customer Calendar";
      editable = [false];
      format = uppercase;
   }
   attribute PickingLeadtime Number {
      editable = [ETag != null];
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
      editable = [ETag = null];
   }
   attribute ShipViaDescription Text {
      fetch = "Mpccom_Ship_Via_API.Get_Description(ship_via_code)";
      label = "Ship Via Description";
      maxlength = 100;
      editable = [false];
   }
   attribute SupplierShipViaTransit Text {
      editable = [false];
   }
   attribute SupplierShipViaTransitDesc Text {
      editable = [false];
   }
   attribute DeliveryTerms Text {
      editable = [ETag = null];
   }
   attribute DeliveryTermsDescription Text {
      fetch = "Order_Delivery_Term_API.Get_Description(delivery_terms)";
      label = "Delivery Terms Description";
      maxlength = 100;
      editable = [false];
   }
   attribute DelTermsLocation Text {
      editable = [false];
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
      editable = [ETag != null];
   }
   attribute ExtTransportCalendarId Text {
      label = "External Transport Calendar";
      editable = [false];
      format = uppercase;
   }
   attribute ConfirmedDate Date {
      fetch = "Customer_Order_Delivery_API.Get_Latest_Date_Confirmed(order_no,line_no,rel_no,line_item_no)";
      label = "Confirmed Date";
      editable = [false];
   }
   attribute ConfirmedQty Number {
      fetch = "Outstanding_Sales_API.Get_Total_Qty_Confirmed(order_no, line_no, rel_no, line_item_no)";
      label = "Confirmed Qty";
      editable = [false];
   }
   attribute DeliveryConfirmedNetAmtBase Number {
      fetch = "Outstanding_Sales_API.Get_Total_Confirm_Amount(order_no, line_no, rel_no, line_item_no)";
      label = "Delivery Confirmed Net Amt/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute DeliveryConfirmedDb Boolean("TRUE", "FALSE") {
      fetch = "delivery_confirmed_db";
      label = "Delivery Confirmed";
      editable = [false];
   }
   attribute OriginatingRelNo Text {
      label = "Previous Delivery No";
      editable = [false];
   }
   attribute ExchangeItemDb Boolean("EXCHANGED ITEM", "ITEM NOT EXCHANGED") {
      fetch = "exchange_item_db";
      label = "PO Exchange";
      editable = [false];
   }
   attribute LoadId Number {
      label = "Load List ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      maxlength = 2000;
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
      editable = [ETag = null];
   }
   attribute CancelReason Text {
      editable = [ETag != null];
   }
   attribute CancellationReasonDescription Text {
      fetch = "Order_Cancel_Reason_API.Get_Reason_Description(cancel_reason)";
      label = "Cancellation Reason Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SalesContractNo Text {
      fetch = "sales_contract_no";
      label = "Sales Contract No";
      maxlength = 15;
      editable = [false];
      format = uppercase;
   }
   attribute GTIN Text {
      fetch = "Sales_Part_API.Get_Gtin_No(contract, catalog_no, input_unit_meas)";
      label = "GTIN";
      maxlength = 14;
      editable = [false];
   }
   reference GTINRef(Contract, GTIN) to SalesPartGtinNoLov(Contract, GtinNo) {
      label = "GTIN";
   }
   attribute FreightFactor Number {
      fetch = "Part_Catalog_API.Get_Freight_Factor(NVL(part_no,catalog_no))";
      label = "Freight Factor";
      editable = [false];
   }
   attribute AdjustedWeightNet Number {
      label = "Adjusted Net Weight";
      editable = [false];
   }
   attribute AdjustedWeightGross Number {
      label = "Adjusted Gross Weight";
      editable = [false];
   }
   attribute AdjustedVolume Number {
      label = "Adjusted Volume";
      editable = [false];
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute OrderObjstate Text {
      fetch = "order_objstate";
      label = "Order State";
      editable = [false];
      maxlength = 20;
   }
   attribute ConfiguredLinePriceId Number {
      editable = [false];
   }
   attribute ReplicateChanges Text {
      insertable = [false];
      updatable = [true];
   }
   attribute ChangeRequest Text {
      insertable = [false];
      updatable = [true];
   }
   attribute PeggedCompExist Text {
      fetch = "Customer_Order_Line_API.Check_Pegged_Component_Exist(order_no, line_no, rel_no, line_item_no)";
      maxlength = 100;
      editable = [false];
   }
   attribute SupplyCodeDb Text {
      fetch = "supply_code_db";
      label = "Supply Code";
      maxlength = 3;
   }
   attribute CurrencyRounding Number {
      fetch = "Currency_Code_API.Get_Currency_Rounding(company,currency_code)";
      label = "Currency Rounding";
      editable = [false];
   }
   attribute PickReservedQty Text {
      fetch = "Pick_Customer_Order_API.Reserved_As_Picked_Allowed__(order_no,line_no,rel_no,line_item_no)";
      label = "Pick Reserved Qty";
      maxlength = 100;
      editable = [false];
   }
   attribute OrderConfDb Text {
      fetch = "order_conf_db";
      label = "Order conf db";
      maxlength = 4;
      required = [true];
   }
   attribute PriceSourceNetPriceDb Boolean("TRUE", "FALSE") {
      label = "Net Price";
      editable = [false];
   }
   @DynamicComponentDependency DOP
   attribute DopConnectionExists Number {
      fetch = "Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(order_no, line_no, rel_no, line_item_no)";
      label = "Dop Connection Exists";
      editable = [false];
   }
   attribute DopNewQtyDemand Text {
      editable = [ETag != null];
   }
   attribute CatalogTypeDb Text {
      fetch = "catalog_type_db";
      label = "Sales Part Type";
      maxlength = 16;
      required = [true];
   }
   attribute PickedQtySalesUom Number {
      fetch = "qty_picked/conv_factor";
      label = "Picked Qty/Sales UoM";
      editable = [false];
   }
   attribute DeliveredQtySalesUom Number {
      fetch = "qty_shipped/conv_factor";
      label = "Delivered Qty/Sales UoM";
      editable = [false];
   }
   attribute ShipmentExist Number {
      fetch = "Shipment_Line_API.Shipment_Connected_Lines_Exist(order_no, 'CUSTOMER_ORDER', line_no, rel_no, line_item_no)";
      label = "Shipment Exist";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartLevelDb Text {
      fetch = "part_level_db";
      label = "(Untitled)";
      maxlength = 30;
   }
   attribute PartLevelId Text {
      label = "(Untitled)";
   }
   attribute CustomerLevelDb Text {
      fetch = "customer_level_db";
      label = "(Untitled)";
      maxlength = 30;
   }
   attribute CustomerLevelId Text {
      label = "(Untitled)";
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute DeliveryCountryCode Text {
      fetch = "Cust_Order_Line_Address_API.Get_Country_Code(order_no, line_no, rel_no, line_item_no)";
      maxlength = 20;
   }
   attribute DemandCodeDb Text {
      fetch = "demand_code_db";
      label = "Demand code db";
      maxlength = 20;
      editable = [false];
   }
   attribute CodeA Text {
      label = "@A";
      editable = [false];
      format = uppercase;
   }
   attribute CodeB Text {
      label = "@B";
      editable = [false];
      format = uppercase;
   }
   attribute CodeC Text {
      label = "@C";
      editable = [false];
      format = uppercase;
   }
   attribute CodeD Text {
      label = "@D";
      editable = [false];
      format = uppercase;
   }
   attribute CodeE Text {
      label = "@E";
      editable = [false];
      format = uppercase;
   }
   attribute CodeF Text {
      label = "@F";
      editable = [false];
      format = uppercase;
   }
   attribute CodeG Text {
      label = "@G";
      editable = [false];
      format = uppercase;
   }
   attribute CodeH Text {
      label = "@H";
      editable = [false];
      format = uppercase;
   }
   attribute CodeI Text {
      label = "@I";
      editable = [false];
      format = uppercase;
   }
   attribute CodeJ Text {
      label = "@J";
      editable = [false];
      format = uppercase;
   }
   attribute LinePreAccountingId Number {
      fetch = "line_pre_accounting_id";
      label = "Pre Accounting ID";
      editable = [ETag = null];
   }
   attribute SupplySiteDueDate Date {
      editable = [ETag = null];
   }
   attribute RelMtrlPlanning Boolean("TRUE", "FALSE") {
      label = "Release for Mtrl Planning";
   }
   attribute PlannedDueDate Timestamp {
      editable = [ETag != null];
   }
   attribute FirstActualShipDate Date {
      editable = [false];
   }
   attribute RealShipDate Date {
      label = "Last Actual Ship Date";
      editable = [false];
   }
   attribute DateEntered Timestamp {
      label = "Created";
   }
   attribute CloseTolerance Number {
      label = "Closing Tolerance (%)";
   }
   @DynamicComponentDependency EXPCTR
   attribute ExportLicenseStatusForFindAndConnect Enumeration(ExpLicenseConnectHeadStates) {
      fetch = "Exp_License_Connect_Head_API.Get_State_By_Ref(order_no, line_no, rel_no, line_item_no,Customer_Order_Line_API.Get_Expctr_License_Order_Type(demand_code_db, demand_order_ref1, demand_order_ref2, demand_order_ref3))";
      label = "Export License Status for Find and Connect";
      editable = [false];
   }
   attribute OpenShipmentQty Number {
      label = "Open Shipment Qty";
      editable = [false];
   }
   attribute ShipmentConnectableQty Number {
      fetch = "(revised_qty_due - qty_shipped - open_shipment_qty + qty_shipdiff)";
      label = "Shipment Connectable Qty";
      editable = [false];
   }
   attribute ShipmentType Text {
      editable = [ETag != null];
   }
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder) {
      editable = [ETag != null];
   }
   attribute PackingInstructionId Text {
      editable = [false];
   }
   attribute CustomerPoNo Text {
      fetch = "customer_po_no";
      label = "Customer's PO No";
      maxlength = 50;
      editable = [false];
   }
   attribute LimitSalesToAssortmentsDb Text {
      fetch = "limit_sales_to_assortments_db";
      label = "Limit Sales To Assortments Db";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyUnreservable Number {
      fetch = "qty_assigned - Reserve_Shipment_API.Get_Total_Qty_On_Pick_List(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO,'CUSTOMER_ORDER',NULL)";
      editable = [false];
   }
   attribute ClassificationStandard Text {
      fetch = "classification_standard";
      label = "Classification Standard";
      maxlength = 25;
      editable = [false];
      format = uppercase;
      implementationtype = "VARCHAR2(25)";
   }
   attribute ClassificationPartNo Text {
      fetch = "classification_part_no";
      label = "Classification Part No";
      maxlength = 25;
      editable = [false];
      implementationtype = "VARCHAR2(25)";
   }
   attribute ClassificationUnitMeas Text {
      fetch = "classification_unit_meas";
      label = "Classification Unit Meas";
      maxlength = 10;
      editable = [false];
      implementationtype = "VARCHAR2(10)";
   }
   attribute TaxLiabilityTypeDb Text {
      label = "Tax Liability Type";
      maxlength = 20;
      editable = [false];
   }
   attribute TaxIdNoTemp Text {
      fetch = "'*'";
   }
   attribute ValidatePriceEffectiveDate Boolean {
      editable = [true];
      fetch = "'FALSE'";
   }
   attribute PriceEffDateValidated Boolean {
      editable = [true];
      fetch = "'FALSE'";
   }
   attribute TaxLiabilityChanged Boolean {
      editable = [true];
      fetch = "'FALSE'";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "PROJECT_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "PROJECT_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(ACTIVITY_SEQ)";
      label = "Sub Project ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "ACTIVITY_API.Get_Activity_No(ACTIVITY_SEQ)";
      label = "Activity ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "ACTIVITY_API.Get_Description(ACTIVITY_SEQ)";
      label = "Activity Description";
      maxlength = 2000;
      editable = [false];
   }
   -- these dummy attributes are used for ValidateTaxCodeCustomerOrderJoinCommand
   attribute Source Text {
      fetch = "'CUSTOMERORDER'";
   }
   attribute Identity1 Text {
      fetch = "order_no";
   }
   attribute Identity2 Text {
      fetch = "line_no";
   }
   attribute Identity3 Text {
      fetch = "rel_no";
   }
   attribute Identity4 Number {
      fetch = "line_item_no";
   }
   -- needed to change attribute names to suit with common commands
   attribute OrderState Text {
      fetch = "order_objstate";
      label = "Order State";
      editable = [false];
      maxlength = 20;
   }
   -- used different name due to conflict with above field.
   attribute HeaderStatus Text {
      fetch = "order_state";
      label = "Order Status";
      editable = [false];
   }
   attribute CustomerNoPay Text {
      fetch = "Customer_Order_API.Get_Customer_No_Pay(ORDER_NO)";
   }
   attribute CustomerNoPayAddrNo Text {
      fetch = "Customer_Order_API.Get_Customer_No_Pay_Addr_No(ORDER_NO)";
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(condition_code)";
   }
   attribute InvPartSuppSiteUnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(supply_site, part_no)";
   }
   attribute InvPartUnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
   }
   attribute OwningCustomerName Text {
      fetch = "Customer_Info_API.Get_Name(owning_customer_no)";
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Sales_Part_API.Get_Taxable_Db(contract, catalog_no), 'TRUE', 'TRUE', 'FALSE')";
   }
   -- added to pass sever notification to refresh the prices.
   attribute RefresshPriceSource Text {
      fetch = "'FALSE'";
   }
   -- Used for navigation from the Dynamic Order Processing Lobby
   attribute DeliveredLessThanPegged Boolean("TRUE", "FALSE") {
      fetch = "DECODE(SIGN(buy_qty_due - qty_on_order - qty_assigned), '1', 'TRUE', 'FALSE')";
   }
   -- Used for navigation from the Dynamic Order Processing Lobby
   attribute Planner Text {
      fetch = "Inventory_Part_API.Get_Planner_Buyer(contract, part_no)";
   }
   attribute AuthorizeCode Text {
      fetch = "Customer_Order_API.Get_Authorize_Code(order_no)";
   }
   attribute PlannedShipDateTruncated Date {
      fetch = "TRUNC(planned_ship_date)";
   }
   attribute PlannedDueDateTruncated Date {
      fetch = "TRUNC(planned_due_date)";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_per_Company(company)";
   }
   -- gelr:localization_control_center, end
   attribute OrderClosedDate Date;
   @DynamicComponentDependency DEFORD
   attribute IsDefordConnected Boolean("TRUE", "FALSE") {
      fetch = "Def_Contract_Order_Item_API.Co_Line_And_Deford_Connected(order_no, line_no, rel_no, line_item_no, project_id)";
   }
   attribute TaxIdType Text {
      fetch = "Customer_Order_Line_API.Get_Tax_Id_Type(order_no, line_no, rel_no, line_item_no)";
      label = "Tax Id Type";
      editable = [false];
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference WorkTimeCalendarRef(CustCalendarId) to WorkTimeCalendar(CalendarId);
   reference WorkTimeCalendar2Ref(ExtTransportCalendarId) to WorkTimeCalendar(CalendarId);
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part No";
   }
   @DynamicComponentDependency PURCH
   reference PurchasePartNoRef(Contract, PurchasePartNo) to PurchasePart(Contract, PartNo) {
      label = "Purchase Part No";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(PurchasePartNo, Contract, VendorNo) to PurchasePartSupplierLov(PartNo, Contract, VendorNo) {
      label = "Supplier";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List";
   }
   reference OwnerRef(Owner) to CustOrdCust1(CustomerNo) {
      label = "Owner";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference TaxLiabilityRef(TaxLiability) to TaxLiabilityLov(TaxLiability) {
      label = "Tax Liability";
   }
   reference TaxCodeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference LineDeliveryTypeRef(Company, LineDeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   reference CustomerPartUnitMeasRef(CustomerPartUnitMeas) to IsoUnit(UnitCode) {
      label = "Customer's UoM";
   }
   @DynamicComponentDependency EQUIP
   reference SupSmObjectRef(CustomerNo, SupSmObject) to EquipmentObjCustNoScrapped(Identity, MchCode) {
      label = "Superior SM Object ID";
   }
   reference ShipAddrNoRef(DeliverToCustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference DeliverToCustomerNoRef(DeliverToCustomerNo) to CustomerTemplateLov(TemplateCustomerId) {
      label = "Deliver-to-Customer No";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via Code";
   }
   reference SupplierShipViaTransitRef(SupplierShipViaTransit) to MpccomShipVia(ShipViaCode) {
      label = "Supplier Ship Via Transit";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District Code";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region Code";
   }
   reference LoadIdRef(LoadId) to CustOrderLoadList(LoadId) {
      label = "Load List ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }

   reference AccountRef(Company, CodeA) to Account(Company, Account);
   reference CodeBRef(Company, CodeB) to CodeB(Company, CodeB);
   reference CodeCRef(Company, CodeC) to CodeC(Company, CodeC);
   reference CodeDRef(Company, CodeD) to CodeD(Company, CodeD);
   reference CodeERef(Company, CodeE) to CodeE(Company, CodeE);
   reference CodeFRef(Company, CodeF) to CodeF(Company, CodeF);
   reference CodeGRef(Company, CodeG) to CodeG(Company, CodeG);
   reference CodeHRef(Company, CodeH) to CodeH(Company, CodeH);
   reference CodeIRef(Company, CodeI) to CodeI(Company, CodeI);
   reference CodeJRef(Company, CodeJ) to CodeJ(Company, CodeJ);
   -- gelr: acquisition_origin, begin
   reference AcquisitionOriginRef(Company, AcquisitionOrigin) to AcquisitionOrigin(Company, AcquisitionOrigin) {
      label = "Acquisition Origin";
   }
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr:good_service_statistical_code, end
   -- gelr:brazilian_specific_attributes, begin
   reference AcquisitionReasonIdRef(Company, AcquisitionReasonId) to AcquisitionReason(Company, AcquisitionReasonId) {
      label = "Acquisition Reason Id";
   }
   -- gelr:brazilian_specific_attributes, end
}

------------------------------- ENUMERATIONS --------------------------------
@Override
@DynamicComponentDependency EXPCTR
enumeration ExpLicenseConnectHeadStates {
   enumerationtype = EntityState;
   exec = "Exp_License_Connect_Head_API";
   value = "Planned" {
      identifier = "Planned";
      label = "Planned";
   }
   value = "BlockedEndUsage" {
      identifier = "BlockedEndUsage";
      label = "Blocked End Usage";
   }
   value = "Denied" {
      identifier = "Denied";
      label = "Denied";
   }
   value = "Unconnected" {
      identifier = "Unconnected";
      label = "Unconnected";
   }
   value = "PartlyConnected" {
      identifier = "PartlyConnected";
      label = "Partly Connected";
   }
   value = "Approved" {
      identifier = "Approved";
      label = "Approved";
   }
}
---------------------------------- ACTIONS ----------------------------------
--Used for command "Update Sales Part Prices"
action ModifyProvisionalPrice {
   initialcheck implementation;
   parameter Selection Text;
}
--Used for command "Update Sales Part Prices"
action ModifySaleUnitPrice {
   initialcheck implementation;
   parameter Selection Text;
   parameter UsePriceInclTax Text;
   parameter NewPrice Number;
   parameter NewPriceInclTax Number;
}
--Used for command "Update Sales Part Prices"
action ModifyDealPrice {
   initialcheck implementation;
   parameter Selection Text;
   parameter PriceSourceId Text;
   parameter NewPrice Number;
   parameter NewPriceInclTax Number;
}
--Used for command "Update Sales Part Prices"
action NewAgreementSalesPartDeal {
   initialcheck implementation;
   supportwarnings = [true];
   parameter Selection Text;
   parameter PriceSourceId Text;
   parameter NewPrice Number;
   parameter NewPriceInclTax Number;
}

--Used for command "Update Sales Part Prices"
action NewAgreementAndPartDeal Text {
   initialcheck implementation;
   supportwarnings = [true];
   parameter CustomerNo Text;
   parameter Contract Text;
   parameter CurrencyCode Text;
   parameter CatalogNo Text;
   parameter NewPrice Number;
   parameter NewPriceInclTax Number;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetCustomerOrderAddressCountryCode List<Entity(TaxLiabilityLov)> {
   parameter OrderNo Text;
   where = "COUNTRY_CODE = Customer_Order_Address_API.Get_Country_Code (:OrderNo) OR COUNTRY_CODE = '*'";
}

function GetCustOrdCustomerAddressCountryCode List<Entity(TaxLiabilityLov)> {
   parameter DeliverToCustNo Text;
   parameter ShipAddrNo Text;
   where = "COUNTRY_CODE = Cust_Ord_Customer_Address_API.Get_Country_Code (:DeliverToCustNo, :ShipAddrNo) OR COUNTRY_CODE = '*'";
}

function GetDeliveryCountryCode List<Entity(TaxLiabilityLov)> {
   parameter DeliveryCountryCode Text;
   where = "COUNTRY_CODE = :DeliveryCountryCode OR COUNTRY_CODE = '*'";
}


@DynamicComponentDependency PURCH
function GetVendorCategoryType List<Entity(PurchasePartSupplierLov)> {
   parameter CategoryType Text;
   where = "VENDOR_CATEGORY = Supplier_Category_API.Decode(:CategoryType)";
}

function GetSupplySiteReserveType Structure(SupplySiteReserveTypeStruct) {
   parameter SupplySite Text;
   parameter Contract Text;
}

function ValidatePriceEffecDate Structure(ValidatePriceEffectivityDateStruct) {
   parameter PriceListNo Text;
   parameter Contract Text;
   parameter CatalogNo Text;
   parameter CustomerNo Text;
   parameter CurrencyCode Text;
   parameter PriceEffectivityDate Date;
   parameter PriceEffDateValidated Boolean;
}

function UpdatePriceEffectivityDate Text {
   parameter Contract Text;
}

function ValidateShipAddressNo Structure(ValidateAddressNoStruct) {
   parameter ShipAddrNo Text;
   parameter CustomerNo Text;
   parameter DemandCodeDb Text;
   parameter SupplySite Text;
   parameter Contract Text;
   parameter DeliverToCustomerNo Text;
   parameter OrderNo Text;
   parameter DeliveryCountryCode Text;
}

--Used for command "Update Sales Part Prices"
function GetPriceSourceInfo Structure(GetPriceSourceInfoStruct) {
   parameter Selection Text;
}

function GetLineDetails Structure(LineDetailStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

function HandleOvwRmaViewEditEnable Boolean {
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
   parameter SupplyCode Enumeration(OrderSupplyType);
}

function HandleOvwRmaViewCreateEnable Boolean {
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
   parameter SupplyCode Enumeration(OrderSupplyType);
}

@DynamicComponentDependency EQUIP
function GetSuperiorSmSite Text {
   parameter CustomerNo Text;
   parameter SupSmObject Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure GetShipmentCreationCoStruct {
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
}

structure SupplySiteReserveTypeStruct {
   attribute SupplySiteReserveType Enumeration(SupplySiteReserveType.Subset1);
}

structure ValidatePriceEffectivityDateStruct {
   attribute CustomerLevelDb Text;
   attribute CustomerLevelId Text;
   attribute PriceListNo Text;
   attribute PriceEffDateValidated Boolean;
}

structure ValidateAddressNoStruct {
   attribute TaxLiability Text;
   attribute TaxLiabilityType Text;
   attribute DeliveryTerms Text;
   attribute DeliveryTermsDesc Text;
   attribute RegionCode Text;
   attribute DistrictCode Text;
}

--Used for command "Update Sales Part Prices"
structure GetPriceSourceInfoStruct {
   attribute OrderNo Text {
      editable = [false];
   }
   attribute LineNo Text {
      editable = [false];
   }
   attribute RelNo Text {
      label = "Del No";
      editable = [false];
   }
   attribute LineItemNo Number {
      editable = [false];
   }
   attribute CustomerNo Text {
      required = [true];
   }
   attribute Contract Text {
      required = [true];
   }
   attribute CatalogNo Text {
      required = [true];
   }
   attribute CurrencyCode Text {
      required = [true];
   }
   attribute CustomerPartNo Text {
      required = [true];
   }
   attribute RentalDb Text {
      required = [true];
   }
   attribute UsePriceInclTax Text {
      required = [true];
   }
   attribute PriceSourceId Text {
      required = [true];
   }
   attribute PriceSourceDb Text {
      required = [true];
   }
}

structure LineDetailStructure {
   attribute FreightMapId Text;
   attribute ZoneId Text;
   attribute FreightPriceListNo Text;
   attribute Contact Text;
   attribute IntrastatExempt Enumeration(IntrastatExempt);
   attribute LanguageCode Text;
   attribute DeliverySequence Number;

}
