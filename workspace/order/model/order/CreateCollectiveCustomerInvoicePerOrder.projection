--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
--  191025     Satglk  SCXTEND-963 Salesman renamed to Salesperson
--  180917     RuLiLK  Converted from frmCollectiveInvperOrder using MTG Version: 1.27.
--  ------     ------  ---------------------------------------------------------

projection CreateCollectiveCustomerInvoicePerOrder;
component ORDER;
layer Core;
description "Use this API to create a collective invoice of customer orders for the same customer during a certain period of time";
category Users;
include fragment CustOrdCust1Selector;
include fragment SetupCustomerInvoiceClosingDateDialog;
include fragment SalesPartSalesmanLovSelector;
include fragment CustBillAddressLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CollectiveInvoicePerOrderSet for CollectiveInvoicePerOrder;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

query CollectiveInvoicePerOrder {
   from = "customer_order_collect_invoice";
   keys = CustomerNo, JinsuiInvoice, PayTermIdKey, UsePriceInclTax, CurrencyCode, BillAddrNoKey, TaxLiabilityCountryDb, Contract, Company, CurrencyRateTypeKey, ProjectIdKey;

   attribute CustomerNo Text {
      fetch = "customer_no";
      label = "Invoice Customer ID";
      maxlength = 20;
      editable = [false];
   }
   attribute CustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(customer_no)";
      label = "Customer Name";
      maxlength = 100;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      label = "Currency Code";
      maxlength = 3;
      required = [true];
   }
   attribute PayTermId Text {
      fetch = "pay_term_id";
      label = "Payment Terms";
      maxlength = 20;
   }
   attribute PayTermIdKey Text {
      fetch = "NVL(PAY_TERM_ID, CHR(32))";
      label = "Payment Terms";
   }
   attribute BillAddrNo Text {
      fetch = "bill_addr_no";
      label = "Document Address";
      maxlength = 50;
   }
   attribute BillAddrNoKey Text {
      fetch = "NVL(BILL_ADDR_NO, CHR(32))";
      label = "Doc Address";
   }
   attribute OrdersNotInvoiced Number {
      fetch = "orders_not_invoiced";
      label = "Orders Not Invoiced";
   }
   attribute PlannedInvoiceDate Date {
      fetch = "Cust_Invoice_Close_Date_API.Get_Planned_Invoice_Date(CUSTOMER_NO, CONTRACT, DELIVERY_DATE)";
      label = "Planned Invoice Date";
      required = [true];
   }
   attribute CurrencyRateType Text {
      fetch = "currency_rate_type";
      label = "Currency Rate Type";
      maxlength = 10;
      format = uppercase;
   }
   attribute CurrencyRateTypeKey Text {
      fetch = "NVL(CURRENCY_RATE_TYPE, CHR(32))";
      label = "Currency Rate Type";
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 10;
   }
   attribute ProjectIdKey Text {
      fetch = "NVL(PROJECT_ID, '*')";
      label = "Project ID";
   }
   attribute TaxLiabilityCountry Text {
      fetch = "tax_liability_country";
      label = "Tax Liability Country";
      maxlength = 2000;
   }
   attribute UsePriceInclTaxBool Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax";
      label = "Use Price Incl Tax";
   }
   attribute UsePriceInclTax Text;
   attribute TaxLiabilityCountryDb Text {
      fetch = "TAX_LIABILITY_COUNTRY_DB";
      label = "Tax Liability Country Code";
      format = uppercase;
   }
   attribute JinsuiInvoiceBool Boolean("TRUE", "FALSE") {
      fetch = "JINSUI_INVOICE";
      label = "Jinsui Invoice";
   }
   attribute JinsuiInvoice Text;
   attribute Company Text {
      fetch = "COMPANY";
      label = "Company";
      format = uppercase;
   }
   reference CustOrdCustomerRef(CustomerNo) to CustOrdCustomer(CustomerNo);
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Invoice Customer ID";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
   reference PayTermIdRef(Company, PayTermId) to PaymentTerm(Company, PayTermId) {
      label = "Payment Terms";
   }
--CustOrdCustomerAddress
   reference BillAddressRef(CustomerNo, BillAddrNoKey) to CustBillAddressLov(CustomerNo, AddrNo);

   array CollectiveInvPerOrderArray(CustomerNo, PayTermId, CurrencyCode, BillAddrNo, TaxLiabilityCountryDb, Contract, CurrencyRateTypeKey, ProjectIdKey, UsePriceInclTax, JinsuiInvoice) to CollectiveInvoicePerOrderLine(CustomerNo, PayTermId, CurrencyCode, BillAddrNo, TaxLiabilityCountryDb, Contract, CurrencyRateTypeKey, ProjectIdKey, UsePriceInclTax, JinsuiInvoice);
}

query CollectiveInvoicePerOrderLine {
   from = "collect_custom_invoice";

   keys = OrderNo;

   attribute JinsuiInvoice Text;
   attribute UsePriceInclTax Text;
   attribute BillAddrNoKey Text {
      fetch = "NVL(BILL_ADDR_NO, CHR(32))";
      label = "Doc Address";
   }
   attribute CustomerNoDelivery Text {
      fetch = "customer_no_delivery";
      label = "Customer No";
   }

   attribute OrderNo Text {
      fetch = "order_no";
      label = "Order No";
   }
   attribute WantedDeliveryDate Timestamp {
      fetch = "wanted_delivery_date";
      label = "Wanted Delivery Date/Time";
   }
   attribute DateEntered Date {
      fetch = "date_entered";
      label = "Created";
      implementationtype = "DATE";
   }
   attribute ClosingDate Date {
      fetch = "Cust_Invoice_Close_Date_API.Get_Closest_Closing_Day(customer_no, contract)";
      label = "Closing Date";
   }
   attribute CustomerNo Text {
      fetch = "customer_no";
      label = "Customer No";
      maxlength = 20;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Contract";
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      label = "Currency Code";
   }
   attribute PayTermId Text {
      fetch = "pay_term_id";
      label = "Pay Term Id";
      format = uppercase;
   }
   attribute PayTermIdKey Text {
      fetch = "NVL(PAY_TERM_ID, CHR(32))";
      label = "Payment Terms";
   }
   attribute BillAddrNo Text {
      fetch = "bill_addr_no";
      label = "Bill Addr No";
      format = uppercase;
   }
   attribute CurrencyRateType Text {
      fetch = "currency_rate_type";
      label = "Currency Rate Type";
   }
   attribute CurrencyRateTypeKey Text {
      fetch = "NVL(CURRENCY_RATE_TYPE, CHR(32))";
      label = "Currency Rate Type";
   }
   attribute TaxLiabilityCountryDb Text {
      fetch = "tax_liability_country_db";
      label = "Tax Liability Country Code";
      format = uppercase;
   }
   attribute RentalLinesExist Text {
      fetch = "Customer_Order_API.Rental_Lines_Exist(order_no)";
      label = "Rental Lines Exist";
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
   }
   attribute ProjectIdKey Text {
      fetch = "NVL(PROJECT_ID, '*')";
      label = "Project ID";
   }
   attribute SalesmanCode Text {
      fetch = "CUSTOMER_ORDER_API.Get_Salesman_Code(ORDER_NO)";
      label = "Salesperson";
      format = uppercase;
   }

   reference CustomerOrderRef(OrderNo) to CustomerOrder(OrderNo);
   reference CustOrdCustomerRef(CustomerNo) to CustOrdCustomer(CustomerNo);
   reference CustomerNoDeliveryRef(CustomerNoDelivery) to CustOrdCust1(CustomerNo);
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
}

---------------------------------- ACTIONS ----------------------------------

action MakeCollectiveInvoice {
   initialcheck implementation;
   parameter FullSelection Text;
   parameter TaxCountry Text;
   parameter ClosestClosingDate Date;
   parameter CustomerInvoiceClosingDateSelection Enumeration(CustomerInvoiceClosingDateEnum);
}
--------------------------------- FUNCTIONS ---------------------------------

function CheckRentalLinesExist Text {
   parameter FullSelection Text;
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------




