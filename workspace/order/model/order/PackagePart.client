--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-18  Skanlk  Bug 161110(SC21R2-3223), Modified SalesPartPackageGroup by making PartDescriptionInUse field as multiline field.
-- 2021-02-24  WaSalk  SC2020R1-12575,Removed LocalizationControlCenterHandler fragment and InitLocalizationFunctionalitiesCommand,
-- 2020-02-24          modified StatisticalCodeGroup visibility and added EnabledLccParams to validate command of ContractRef.
-- 2020-02-19  MaEelk  SCXTEND-2224, Enabled the Duplicate Functionality.
-- 2019-05-17  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand
-- 2018-11-22  IzShlk  SCUXXW4-9422, Converted from frmSalesPartPackage using MTG Version: 1.33
--------------------------------------------------------------------------------------

client PackagePart;
component ORDER;
layer Core;
projection PackagePartHandling;
include fragment SalesPartPackageLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment SalesPartLovSelector;
include fragment DiscreteCharacNumericValueSelector;
include fragment PartDescriptionsTab;
include fragment PartCharacteristicsTab;
include fragment SalesPartChargeTab;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment SalesPartBaseGroups;
-- gelr: good_service_statistical_code, begin
include fragment StatisticalCodeSelector;
-- gelr: good_service_statistical_code, end

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PackagePartNavEntry parent OrderNavigator.SalesPart at index 400 {
      label = "Package Part";
      page Form;
   }
   entry PartMasterPackagePartNavEntry parent OrderNavigator.PartMasterDataSalesPart at index 400 {
      label = "Package Part";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using SalesPartSet {
   label = "Package Part";
   startupmode = search;

   selector SalesPartSelector;
   group SalesPartPackageGroup;

   tabs {
      tab {
         label = "General";
         arrange {
            arrange {
               group PricingGroup;
               group ComponentsGroup;
            }
            arrange {
               group Grouping;
               group UnitOfMeasureGroup;
            }
         }
         arrange {
            group IndicatorsGroup {
               collapsed = [true];
            }
            group TaxGroup {
               collapsed = [true];
            }
         }
         arrange {
            group GTINGroup {
               collapsed = [true];
            }
            group ReplacementGroup {
               collapsed = [true];
            }
            -- gelr: good_service_statistical_code, begin
            group StatisticalCodeGroup {
               collapsed = [true];
               visible = ["GOOD_SERVICE_STATISTICAL_CODE" in EnabledLccParams];
            }
            -- gelr: good_service_statistical_code, end
         }
         group MiscInfoGroup {
            collapsed = [true];
         }
         list SalesPartPackageList(SalesPartPackageArray) {
            visible = [not(isNew)];
         }
      }
      tab {
         label = "Description";
         visible = [not(isNew)];
         group SalesPartLanguageDescGroup;
         list SalesPartLanguageDescList(SalesPartLanguageDescArray);
      }
      tab {
         label = "Characteristics";
         visible = [not(isNew)];
         group PartCharacteristicsGroup;
         list SalesPartCharacteristicList(SalesPartCharacteristicArray);
      }
      tab {
         label = "Charges";
         visible = [not(isNew)];
         list SalesPartChargeList(SalesPartChargeArray);
      }
   }

   command ComplementaryPartsCommand;

   commandgroup CommandGroup2CmdGroup {
      command DocumentTextCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ComplementaryPartsCommand for SalesPart {
   label = "Complementary Parts";
   enabled = [CatalogNo != null];

   execute {
      navigate "page/ComplementaryParts/List?$filter=Contract eq $[Contract] and ParentPartNo eq $[CatalogNo]";
   }
}
command DocumentTextCommand for SalesPart {
   label = "Document Text";
   enabled = [NoteId != null];

   variable LabelTextVar;
   execute {
      set LabelTextVar = " for Package Part - ${CatalogNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
command ViewCustomerWarrantyCommand for SalesPartPackage {
   label = "Customer Warranty";
   enabled = [CustWarrantyId != null];

   execute {
      -- View only so passing false as SelectMethod (last parameter)
      assistant CustomerWarranty.CustomerWarrantyAssistant(CatalogNo, null, CustWarrantyId, false) into(CustWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector SalesPartSelector for SalesPart {
   label = "${CatalogNo} - ${PartDescriptionInUse} - ${Contract}";
   static CatalogNo;
   static PartDescriptionInUse;
   static Contract;
}

---------------------------------- GROUPS -----------------------------------
group SalesPartPackageGroup for SalesPart {

   label = "";
   -- for search purpose
   field CatalogNo {
      visible = [false];
      searchable = true;
   }
   lov CatalogNoRef with ReferenceSalesPartPackageLovSelector using CatalogFilter(Contract) {
      freeinput = [true];
      searchable = false;
      validate command {
         variable CatalogInfoVar {
            type = Structure(CatalogInfo);
         }

         execute {
            call ValidateCatalogNo(CatalogNo, Contract) into CatalogInfoVar;
            if [CatalogInfoVar.InfoMessage = null] {
               if [CatalogInfoVar.CatalogDesc != null] {
                  if [PartDescriptionInUse = null] {
                     set CatalogDesc = CatalogInfoVar.CatalogDesc;
                     set PartDescriptionInUse = CatalogInfoVar.CatalogDesc;
                  }
               }
               if [CatalogInfoVar.UnitCode != null] {
                  if [SalesUnitMeas = null and PriceUnitMeas = null] {
                     set SalesUnitMeas = CatalogInfoVar.UnitCode;
                     set PriceUnitMeas = CatalogInfoVar.UnitCode;
                  }
               }
            }
            else {
               info("${CatalogInfoVar.InfoMessage}");
            }
         }
      }
   }
   field PartDescriptionInUse {
      editable = [not(SiteDiscomInfoRef.UsePartcaDescOrder  and PartCatalogRef.PartNo != null)];
      multiline = true;
      size = Medium;
      validate command {
         execute {
            if [CatalogDesc = null] {
               set CatalogDesc = PartDescriptionInUse;
            }
         }
      }
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
      description = ContractRef.ContractDesc;

      validate command {
         variable ContractInfoVar {
            type = Structure(ContractInfo);
         }

         execute {
            call ValidateContract(Contract) into ContractInfoVar;
            set Company = ContractInfoVar.Company;
            set CurrencyCode = ContractInfoVar.Currency;
            set UsePriceInclTax = ContractInfoVar.UsePriceInclTax;

            if [TaxClassId = null] {
               set TaxCode = ContractInfoVar.TaxCode;
               set Taxable = ContractInfoVar.Taxable;
            }
            -- gelr:localization_control_center, begin
            set EnabledLccParams = ContractInfoVar.EnabledLccParams;
            -- gelr:localization_control_center, end
         }
      }
   }
   field Activeind {
      enumerationtrue = "ActivePart";
      enumerationfalse = "InactivePart";

   }
   field Company {
      visible = [false];
   }
}

@Override
group PricingGroup for SalesPart {
   label = "Package";
   currency ListPrice(CurrencyCode) {
      validate command {
         variable PriceInfoVar {
            type = Structure(PriceInfo);
         }

         execute {
            call CalculatePriceIncludingTax(ListPrice, TaxCode, Taxable, Company, TotalSalesCost) into PriceInfoVar;
            set ListPriceInclTax = PriceInfoVar.Price;
            set ContributionMargin = PriceInfoVar.ConMargin;
         }
      }
   }
   currency ListPriceInclTax(CurrencyCode) {
      validate command {
         variable PriceInfoVar {
            type = Structure(PriceInfo);
         }
         execute {
            call CalculatePrice(ListPriceInclTax, TaxCode, Taxable, Company, TotalSalesCost) into PriceInfoVar;
            set ListPrice = PriceInfoVar.Price;
            set ContributionMargin = PriceInfoVar.ConMargin;
         }
      }
   }
   field ContributionMargin {
      format = decimal;
      validate command {
         variable PriceValuesVar {
            type = Structure(PriceValues);
         }

         execute {
            if [ContributionMargin >= 100] {
               error("Invalid contribution margin rate!");
               exit;
            }
            else {
               if [ContributionMargin = null] {
                  set ContributionMargin = 0;
               }
               else {
                  call ValidateMarginRate(ContributionMargin, TotalSalesCost, TaxCode, Company) into PriceValuesVar;
                  set ListPrice = PriceValuesVar.Price;
                  set ListPriceInclTax = PriceValuesVar.PriceIncludingTax;
               }
            }
         }
      }
   }
}

group ComponentsGroup for SalesPart {
   label = "Components";

   currency TotalSalesPrice(CurrencyCode);
   currency TotalSalesCost(CurrencyCode);
}

group UnitOfMeasureGroup for SalesPart {
   label = "Unit of Measure";

   field SalesUnitMeasRef {
      size = Small;
      validate command {
         variable PriceConvFactorVar {
            type = Number;
         }

         execute {
            if [SalesUnitMeas != null] {
               call UnitMeasureExist(SalesUnitMeas) into UomVar;
               if [PriceUnitMeas = null] {
                  set PriceUnitMeas = SalesUnitMeas;
               }
               call GetPriceConvFactor(SalesUnitMeas, PriceUnitMeas) into PriceConvFactorVar;
               set PriceConvFactor = PriceConvFactorVar;
            }
         }
      }
   }
   field PriceConvFactor {
      validate command {
         execute {
            if [PriceConvFactor = 0 or PriceConvFactor = null] {
               set ListPrice = 0;
               set ListPriceInclTax = 0;
            }
         }
      }
   }
   field PriceUnitMeasRef {
      size = Small;
      validate command {
         variable PriceConvFactorVar {
            type = Number;
         }

         execute {
            if [PriceUnitMeas != null] {
               call UnitMeasureExist(PriceUnitMeas) into UomVar;

               call GetPriceConvFactor(SalesUnitMeas, PriceUnitMeas) into PriceConvFactorVar;
               set PriceConvFactor = PriceConvFactorVar;
            }
         }
      }
   }
}

group IndicatorsGroup for SalesPart {
   label = "Indicators";
   field ExportToExternalApp;
   field AllowPartialPkgDeliv;
   field DocumentText;
}

@Override
group TaxGroup for SalesPart {
   field TaxCode {
      validate command {
         variable PriceInfoVar {
            type = Structure(PriceInfo);
         }

         execute {
            if [UsePriceInclTax] {
               call CalculatePrice(ListPriceInclTax, TaxCode, Taxable, Company, TotalSalesCost) into PriceInfoVar;
               set ListPrice = PriceInfoVar.Price;
               set ContributionMargin = PriceInfoVar.ConMargin;
            }
            else {
               call CalculatePriceIncludingTax(ListPrice, TaxCode, Taxable, Company, TotalSalesCost) into PriceInfoVar;
               set ListPriceInclTax = PriceInfoVar.Price;
               set ContributionMargin = PriceInfoVar.ConMargin;
            }
         }
      }
   }
   field Taxable {
      validate command {
         variable PriceInfoVar {
            type = Structure(PriceInfo);
         }

         execute {
            if [UsePriceInclTax] {
               call CalculatePrice(ListPriceInclTax, TaxCode, Taxable, Company, TotalSalesCost) into PriceInfoVar;
               set ListPrice = PriceInfoVar.Price;
               set ContributionMargin = PriceInfoVar.ConMargin;
            }
            else {
               call CalculatePriceIncludingTax(ListPrice, TaxCode, Taxable, Company, TotalSalesCost) into PriceInfoVar;
               set ListPriceInclTax = PriceInfoVar.Price;
               set ContributionMargin = PriceInfoVar.ConMargin;
            }
         }
      }
   }
}

group ReplacementGroup for SalesPart {
   label = "Replacement Part";
   lov ReplacementPartNoRef with ReferenceSalesPartPriceTaxLovSelector using ReplacementPartFilter(CatalogNo) {
      description = ReplacementPartNoRef.CatalogDesc;
   }
   field DateOfReplacement;
}

group MiscInfoGroup for SalesPart {
   label = "Misc Information";
   field DateEntered;
   field MinimumQty {
      size = Small;
   }
   field CloseTolerance {
      size = Small;
      searchable = false;
   }
   lov PrintControlCodeRef with ReferenceCustOrdPrintControlSelector {
      description = PrintControlCodeRef.Description;
   }
   lov CustomsStatNoRef with ReferenceCustomsStatisticsNumberSelector {
      description = CustomsStatNoRef.Description;
   }
   field NoteText {
      label = "Notes";
      size = FullWidth;
      multiline = true;
   }
}

-- gelr: good_service_statistical_code, begin
group StatisticalCodeGroup for SalesPart {
   label = "Goods/Services Statistical Code";
   lov StatisticalCodeRef with ReferenceStatisticalCodeSelector using StatisticalCodeFilter(Company) {
      description = StatisticalCodeRef.Description;
      size = Large;
   }
}
-- gelr: good_service_statistical_code, end
----------------------------------- LISTS -----------------------------------

list SalesPartPackageList for SalesPartPackage {
   label = "Package Components";

   lov CatalogNoRef with ReferenceSalesPartLovSelector {
      validate command {
         variable CatalogInfoVar {
            type = Structure(PartCatalogInfo);
         }

         execute {
            call GetCatalogInfo(Contract, CatalogNo) into CatalogInfoVar;
            set Description = CatalogInfoVar.CatalogDescription;
            set UoM = CatalogInfoVar.UnitMeasure;
         }
      }
   }
   field Description {
      searchable = false;
   }
   field UoM {
      size = Small;
      label = "UoM";
   }
   field QtyPerAssembly;
   field CustomerWarranty;

   command ViewCustomerWarrantyCommand;
}
