-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2018-08-13  JeLise   SCUXXW4-8475, Converted from dlgOpportunityClose using MTG Version: 1.25
-------------------------------------------------------------------------------------------------

fragment CloseSalesQuotationDialog;
component ORDER;
layer Core;
description "Use this fragment to Close a Sales Quotation";

----------------------------- CLIENT FRAGMENTS ------------------------------

---------------------------------- GROUPS -----------------------------------
group CloseQuotationGroup for CloseQuotationStructure {
   label = "";
   field QuotationNo {
      editable = [false];
      size = Small;
   }
   field ClosedStatus {
      required = [true];
      size = Small;
      validate command {
         execute {
            if [ClosedStatus != original.ClosedStatus] {
               set Note = null;
               set ReasonId = null;
            }
         }
      }
   }
   lov LostToRef with ReferenceCompetitorSelector {
      label = "Lost To";
      description = LostToRef.CompetitorName;
      visible = [ClosedStatus = "Lost"];
      required = [ClosedStatus = "Lost"];
   }
   lov ReasonIdRef with ReferenceLoseWinReasonLovSelector using GetValidWonLostReasons(ClosedStatus) {
      description = ReasonIdRef.ReasonDescription;
      visible = [ClosedStatus != "NoDecision"];
      required = [ClosedStatus != "NoDecision"];
   }
   field Note {
      multiline = true;
      size = FullWidth;
   }
}

---------------------------------- DIALOGS ----------------------------------
dialog CloseQuotationDialog for CloseQuotationStructure {
   label = "Close Quotation";
   input(QuotationNo, ClosedStatus, ReasonId, LostTo, Note);
   output(ClosedStatus, ReasonId, LostTo, Note);

   group CloseQuotationGroup;

   commandgroup ButtonCmdGroup {
      
      command Ok {
         enabled = [ClosedStatus != null and((ClosedStatus = "NoDecision") or(ClosedStatus = "Won" and ReasonId != null) or(ClosedStatus = "Lost" and LostTo != null and ReasonId != null))];
      }
      command Cancel;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

---------------------------------- ACTIONS ----------------------------------
action CloseQuotation {
   initialcheck implementation;
   ludependencies = OrderQuotation;
   parameter QuotationNo Text;
   parameter ClosedStatus Enumeration(LostWon);
   parameter ReasonId Text {
      required = [false];
   }
   parameter LostTo Text {
      required = [false];
   }
   parameter ReasonNote Text {
      required = [false];
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetValidWonLostReasons List < Entity(LoseWinReason) > {
   parameter ClosedStatus Enumeration(LostWon);
   where = "used_by_entity_db LIKE '%^SQ^%' AND lose_win_db = DECODE(:ClosedStatus, 'LOST', 'LOSE', 'WIN')";
}

-------------------------------- STRUCTURES ---------------------------------
structure CloseQuotationStructure {
   attribute QuotationNo Text {
      label = "Quotation No";
      maxlength = 12;
      format = uppercase;
   }
   attribute ClosedStatus Enumeration(LostWon) {
      label = "Closed Status";
      required = [true];
   }
   attribute LostTo Text {
      label = "Lost To";
      maxlength = 10;
      format = uppercase;
   }
   attribute Competitor Text {
      label = "Competitor Name";
      maxlength = 50;
   }
   attribute ReasonId Text {
      label = "Reason ID";
      maxlength = 10;
      format = uppercase;
   }
   attribute ReasonDescription Text {
      label = "Reason Description";
      maxlength = 100;
   }
   attribute Note Text {
      label = "Reason Note";
      maxlength = 2000;
   }
   attribute OpportunityNo Text {
      label = "Opportunity No";
      maxlength = 12;
      format = uppercase;
   }
   reference LostToRef(LostTo) to Competitor(CompetitorId) {
      label = "Lost To";
   }
   reference ReasonIdRef(ReasonId) to LoseWinReasonLov(ReasonId) {
      label = "Reason ID";
   }
}

