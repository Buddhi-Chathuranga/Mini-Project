-------------------------------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   -------------------------------------------------------------------------------------------------------
-- 2018-11-01  SeJalk   SCUXXW4-8687, Used the same for dlgQuoteSubstituteSalesPart
-- 2018-10-24  SeJalk   SCUXXW4-8802, Converted from dlgSubstituteSalesPart using MTG Version: 1.31
-------------------------------------------------------------------------------------------------------------------------------
client SubstituteSalesPart;
component ORDER;
layer Core;
projection SubstituteSalesPartHandling;
warningsenabled = SetSubstitutePart;

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant SubstituteSalesPartAssistant using CustomerOrderLineVirtualSet {
   label = "Substitute Sales Part";
   setup SetupSourceInfo {
      variable OrderNoVar {
         type = Text;
      }
      variable LineNoVar {
         type = Text;
      }
      variable RelNoVar {
         type = Text;
      }
      variable LineItemNoVar {
         type = Number;
      }
      variable SourceVar {
         type = Text;
      }
      variable PromisedDeliveryDateVar {
         type = Timestamp;
      }

      execute {
         set OrderNo = OrderNoVar;
         set LineNo = LineNoVar;
         set RelNo = RelNoVar;
         set LineItemNo = LineItemNoVar;
         set Source = SourceVar;
         set PromisedDeliveryDate = PromisedDeliveryDateVar;
      }
   }
   steps {
      step {
         group SubstituteSalesPartGroup;
         list SubstituteSalesPartList(SubstituteSalesPartArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [LineTotal > 0];

      execute {
         if [LineTotal > BuyQtyDue] {
            confirm("The new sales quantity is larger than original sales quantity. Do you want to continue?") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
         else
            {
            if [LineTotal < BuyQtyDue] {
               confirm("The new sales quantity is less than original sales quantity. Do you want to continue?.") {
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
         }
         call SetSubstitutePart();
         navigate back;
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group SubstituteSalesPartGroup for CustomerOrderLineVirtual {
   label = "";
   field OrderNo {
      size = Small;
      label = "Order no";
      visible = [Source = "ORDER"];
   }
   field OrderNo {
      label = "Quotation no";
      visible = [Source = "QUOTATION"];

      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   field WantedDeliveryDate {
      size = Small;
   }
   field CatalogNo {
      size = Small;
   }
   field CatalogDesc;
   measure BuyQtyDue(SalesUnitMeas) {
      size = Small;
   }
   measure PriceQty(PriceUnitMeas) {
      size = Small;
   }

   field SaleUnitPrice {
      size = Small;
      preserveprecision = [true];
   }
   field UnitPriceInclTax {
      size = Small;
      preserveprecision = [true];
   }
   field Discount {
      size = Small;
   }

   field NetAmt {
      size = Small;
   }
   field GrossAmt {
      size = Small;
   }
   field UsePriceInclTaxDb {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------
list SubstituteSalesPartList for SubstituteSalesPartVirtual {
   label = "Substitute Parts";

   editmode = SingleCellEdit;
   measure BuyQtyDue(SalesUnitMeas) {
      validate command {
         execute {
            if [BuyQtyDue < 0] {
               error("Negative Sales Quantity is not allowed");
            }
            if [BuyQtyDue = null] {
               error("Sales Quantity must have a value");
            }
         }
      }
   }
   field SubstituteSalesPart;
   field SubSalesPartDescription;
   field QtyAvailable {
      searchable = false;
   }
   field EarliestShipDate {
      searchable = false;
   }
   measure PriceQty(PriceUnitMeas);

   field SaleUnitPrice {
      editable = [not parent.UsePriceInclTaxDb];
      preserveprecision = [true];

      searchable = false;
      validate command {
         variable PricesVar {
            type = PriceStructure;
         }
         execute {
            if [SaleUnitPrice = null or Taxable = null or TaxCode = null] {
               set PriceInclTax = SaleUnitPrice;
            }
            else
               {
               // Currency rounding need to fix TEUXX-14791
               call CalculatePrices(SaleUnitPrice, PriceInclTax, "NET_BASE", TaxPercentage, 2) into PriceStructure;
               set SaleUnitPrice = PriceStructure.SaleUnitPrice;
               set PriceInclTax = PriceStructure.SaleUnitPriceInclTax;
            }
         }

      }

   }
   field PriceInclTax {
      editable = [parent.UsePriceInclTaxDb];
      preserveprecision = [true];

      searchable = false;
      validate command {
         execute {
            if [PriceInclTax = null or Taxable = null or TaxCode = null] {
               set SaleUnitPrice = PriceInclTax;
            }
            else {
               // Curency rounding need to fix TEUXX-14791
               call CalculatePrices(SaleUnitPrice, PriceInclTax, "GROSS_BASE", TaxPercentage, 2) into PriceStructure;
               set SaleUnitPrice = PriceStructure.SaleUnitPrice;
               set PriceInclTax = PriceStructure.SaleUnitPriceInclTax;
            }

         }

      }
   }
   field Discount {

      searchable = false;
   }
   field NetAmt {
      searchable = false;
   }
   field GrossAmt {
      searchable = false;
   }
   field TaxCode {
      size = Small;
      searchable = false;
   }
   field TaxCodeDescription {
      searchable = false;
   }
  // fieldranking SubstituteSalesPartRef, SubstituteSalesPartDescription;
}
