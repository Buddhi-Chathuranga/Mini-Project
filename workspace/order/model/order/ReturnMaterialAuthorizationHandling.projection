--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-12  Inaklk  SC21R2-2325, Removed entity bound action CreateRma action and create non entity bound action CreateRma
-- 2021-03-05  DhAplk  SC2020R1-12819, Changed SupplyCountry attribute type to Lookup(IsoCountry) in ReturnMaterial overriden entity.
-- 2021-03-03  WaSalk  SC2020R1-12579, Removed fragment LocalizationControlCenterHandler, ModifyDateAppliedEnabled and added EnabledLccParams.
-- 2021-03-02  RoJalk  Bug 156929(SCZ-13820),Pipeline function was removed so that custom fields can be added to the Return Material. Most of the attributes
-- 2021-03-02          included in the pipeline function could be removed from the projection since they were not visible in the client and not bound to entity.
-- 2021-03-02          Added SingleOccReturnAddressInfo()and SingleOccDeliveryAddressInfo()to handle fetching single occurance address related information and
-- 2021-03-02          ExpctrConnected() check whether RMA is coonected to export control
-- 2021-02-25  Maeelk  SC2020R1-12687, References to MpccomShipVia and OrderDeliveryTerm were replaced
-- 2021-02-25          with MpccomShipViaLov and OrderDeliveryTermLov respectively.
-- 2021-01-25  HarWlk  SC2020R1-11959, Added Zoom functionality to OriginatingRmaNo and ReceiptRmaNo.
-- 2020-12-16  ErRalk  SC2020R1-11705, Added function GetCustomerNo to fetch CustomerNo during the validation of OrderId and ShipmentId.
-- 2020-12-03  ErRalk  Bug 154854(SCZ-12479), Added OrdConnectedLinesExist() method to check whether the order connected RMA lines are exist for a given RMA
-- 2020-10-07  WaSalk  SC2020R1-9584, Added action Refreshpage to refresh after state change to release.
-- 2020-07-28  UdGnlk  SCXTEND-4675, Modified GetCustomerInfo by adding additional parameter TemplateShipmentId to fetch customer information.
-- 2020-04-24  JaThlk  AP10-2218, Enabled FW Crud Create.
-- 2020-04-23  JaThlk  AP10-2224, Added ConfigurationId to support configured parts.
-- 2020-03-26  JaThlk  SCXTEND-3932, Added the function GetCustomerInfo to fetch Customer Information.
-- 2020-03-23  JaThlk  SCXTEND-4030, Added lu dependencies to the virtual, OrderLinesToReturnVirtual.
-- 2020-03-20  JaThlk  SCXTEND-4052, Added lu dependencies to the virtual CreateRmaVirtual to enable finish command properly.
-- 2020-03-02  ChFolk  SCXTEND-2146, Added enumeration ReturnOptionEnum, action ConnectLinesToRma and virtuals CreateRmaVirtual and OrderLinesToReturnVirtual.
-- 2020-01-29  Kagalk  GESPRING20-1624, Added modify_date_applied functionality.
-- 2019-10-16  Hairlk  SCXTEND-805, Avalara integration, Added reference CustomerTaxUsageTypeRef to ReturnMaterial.
-- 2019-08-22  MaEelk  SCUXXW4-23909, Removed the fragment CreateCreditInvoiceAssistant.
-- 2019-07-12  MaEelk  SCUXXW4-20211, Moved DefaultValueStruc to ReturnMaterial.fragment and removed unnecessary structures from the projection.
-- 2019-07-01  Satglk  SCUXXW4-21406, In IntrastatExemptDb the conditions interchanged, and editable condition added
-- 2019-05-23  MaEelk  SCUXXW4-20211, Replaced the get methods written to fetch address information with the attributes from Return_Material_API.Header_Information
-- 2019-04-09  MaEelk  SCUXXW4-18955, Added ludependency to the query RetunMaterialHistory.
-- 2019-02-18  MaEelk  SCUXXW4-9372, Added RMB-Create Credit Invoice.
-- 2019-02-01  MaEelk  SCUXXW4-9372, Added RMB-approve for Credit.
-- 2018-11-13  HaPulk  SCUXXW4-8295, Added logic for command "Create Corrective Inter-Site Price Postings".
-- 2018-10-08  MaEelk  SCUXXW4-9372, Layout changes in RMA Header, Misc RMA Info and History.
-- 2018-08-03  MaEelk  SCUXXW4-9372, Implemented RMB Cancel in RMA Header.
-- 2018-06-21  MaEelk  SCUXXW4-1391, Added Totals to Return Material Lines.
-- 2018-06-15  IZSHLK  SCUXXW4-9372, Converted from frmReturnMaterialAuthorization using MTG Version: 1.21
--------------------------------------------------------------------------------------

projection ReturnMaterialAuthorizationHandling;
component ORDER;
layer Core;
description "Use this API to enter customer requests to return ordered and delivered material and services. You can release, deny or cancel a planned return material authorization. You also can print a return note which informs the customer of the parts and the quantity that is allowed to return.";
category Users;
include fragment OrderCoordinatorLovSelector;
include fragment TaxLiabilityLovSelector;
include fragment CountyCode1LovSelector;
include fragment StateCodeLovSelector;
include fragment CityCode1LovSelector;
include fragment CustBillAddressLovSelector;
include fragment ShipmentRmaLovSelector;
include fragment CoRmaLovSelector;
include fragment CustInfoContactLovPubSelector;
include fragment CustOrdCust2Selector;
include fragment CustOrdCust5Selector;
include fragment UserAllowedSiteLovSelector;
include fragment CustomerOrderChargeLovSelector;
include fragment OrderCancelReasonLovSelector;
include fragment CancelReasonDialog;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
-- Use for "Create Corrective Inter-Site Price Postings" command
include fragment CreateCorrectiveInterSitePricePostingsDialog;
include fragment InventoryLocation11Selector;
include fragment InventoryPartInStockDelivSelector;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment DocumentText;
include fragment ReturnMaterialChargeTab;
include fragment ReturnMaterialLineTab;
include fragment CustAddressShipLovSelector;
@DynamicComponentDependency PURCH
include fragment SupplierDelAddressLovSelector;
include fragment CompanyAddressLovPubSelector;
include fragment ReturnMaterial;
include fragment SalesPartInventoryLovSelector;
include fragment MpccomShipViaLovSelector;
include fragment OrderDeliveryTermLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ReturnMaterialSet for ReturnMaterial;
entityset CreateRmaVirtualSet for CreateRmaVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity ReturnMaterial {
   crud = Read, Create, Update;
   ludependencies = ReturnMaterial, ReturnMaterialLine, ReturnMaterialCharge, DocumentText;
   attribute ReturnApproverId Text {
      label = "Coordinator";
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute CustRef Text {
      label = "Reference";
   }
   attribute ReferenceName Text {
      fetch = "Contact_Util_API.Get_Cust_Contact_Name(CUSTOMER_NO, CUSTOMER_NO_ADDR_NO, CUST_REF)";
      label = "Reference Name";
      editable = [false];
      updatable = [false];
   }
   attribute ReturnToVendorNo Text {
      label = "Return to Supplier";
      format = uppercase;
   }
   attribute ReturnToContract Text {
      label = "Return to Site";
      format = uppercase;
   }
   attribute RmaReportPrinted Enumeration(RmaReportPrinted) {
      fetch = "RMA_REPORT_PRINTED_DB";
      label = "Printed";
      editable = [false];
      required = [true];
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute UsePriceInclTax Text {
      fetch = "USE_PRICE_INCL_TAX";
      label = "Use Price Incl Tax";
      editable = [false];
      required = [false];
   }
   attribute UsePriceInclTaxDb Boolean("TRUE", "FALSE") {
      fetch = "USE_PRICE_INCL_TAX_DB";
      label = "Use Price Incl Tax";
      editable = [ETag = null];
      required = [true];
   }
   attribute CustomerNoAddrNo Text {
      label = "Document Address";
      format = uppercase;
   }
   attribute ReceiptRmaNo Number {
      editable = [ETag = null];
      label = "Receipt RMA No";
   }
   attribute CustomerNoCredit Text {
      label = "Credit Customer No";
   }
   attribute CustomerNoCreditAddrNo Text {
      label = "Credit Address ID";
      format = uppercase;
   }
   attribute CancelReason Text {
      editable = [ETag != null];
   }
   attribute SupplyCountry Lookup(IsoCountry) {
      label = "Supply Country";
      required = [false];
   }
   attribute SupplyCountryDb Text {
      fetch = "SUPPLY_COUNTRY_DB";
      label = "Supply Country";
      required = [true];
      format = uppercase;
   }
   attribute ShipAddrFlag Enumeration(GenYesNo) {
      label = "Single Occurance";
      fetch = "SHIP_ADDR_FLAG_DB";
      editable = [true];
   }
   attribute AddressName Text {
      fetch = "NVL(Customer_Info_Address_API.Get_Name(RETURN_FROM_CUSTOMER_NO,SHIP_ADDR_NO), Cust_Ord_Customer_API.Get_Name(RETURN_FROM_CUSTOMER_NO))";
      editable = [false];
      updatable = [false];
   }
   attribute ReturnAddrFlag Enumeration(GenYesNo) {
      fetch = "RETURN_ADDR_FLAG_DB";
      label = "Single Occurance";
      required = [true];
   }
   attribute ReturnAddrName1  Text {
      fetch = "Return_Material_API.Get_Return_Addr_Name(RETURN_TO_CONTRACT, Site_API.Get_Company(RETURN_TO_CONTRACT), RETURN_ADDR_NO, RETURN_TO_VENDOR_NO, COMPANY)";
      editable = [false];
      updatable = [false];
   }
   attribute ShipAddrName Text {
      label = "Name";
      fetch = "SHIP_ADDR_NAME";
   }
   attribute ShipAddress1 Text {
      label = "Single Occurence Ship Address 1";
      fetch = "SHIP_ADDRESS1";
   }
   attribute ShipAddress2 Text {
      label = "Single Occurence Ship Address 2";
      fetch = "SHIP_ADDRESS2";
   }
   attribute ShipAddress3 Text {
      label = "Single Occurence Ship Address 3";
      fetch = "SHIP_ADDRESS3";
   }
   attribute ShipAddress4 Text {
      label = "Single Occurence Ship Address 4";
      fetch = "SHIP_ADDRESS4";
   }
   attribute ShipAddress5 Text {
      label = "Single Occurence Ship Address 5";
      fetch = "SHIP_ADDRESS5";
   }
   attribute ShipAddress6 Text {
      label = "Single Occurence Ship Address 6";
      fetch = "SHIP_ADDRESS6";
   }
   attribute ShipAddrZipCode Text {
      label = "Single Occurrence Ship Address Zip Code";
      fetch = "SHIP_ADDR_ZIP_CODE";
   }
   attribute ShipAddrCity Text {
      label = "Single Occurrence Ship Address City";
      fetch = "SHIP_ADDR_CITY";
   }
   attribute ShipAddrState Text {
      label = "Single Occurrence Ship Address State";
      fetch = "SHIP_ADDR_STATE";
   }
   attribute ShipAddrCounty Text {
      label = "Single Occurrence Ship Address County";
      fetch = "SHIP_ADDR_COUNTY";
   }
   -- I changed from enumeration to text since it is hidden
   attribute ShipAddrCountryCode Text {
      fetch = "SHIP_ADDR_COUNTRY_CODE";
      label = "Single Occurrence Ship Address Country Code";
   }
   attribute ShipAddrCountryDesc Text {
      fetch = "Iso_Country_API.Get_Description(SHIP_ADDR_COUNTRY_CODE)";
      label = "Single Occurrence Ship Address Country Description";
   }
   attribute NoteId Number;
   attribute TaskId Number {
      label = "Task ID";
      editable = [false];
   }
   attribute JinsuiInvoice Text {
      fetch = "JINSUI_INVOICE";
      label = "Jinsui Invoice";
      required = [false];
   }
   attribute JinsuiInvoiceDb Boolean("TRUE", "FALSE") {
      fetch = "JINSUI_INVOICE_DB";
      label = "Jinsui Invoice";
      required = [true];
   }
   attribute IntrastatExempt Enumeration(IntrastatExempt) {
      fetch = "INTRASTAT_EXEMPT_DB";
      label = "Intrastat Exempt";
      required = [true];
      editable = [ETag = null];
   }
   attribute ReturnAddress1 Text {
      label = "Return Occurrence Address1";
      fetch = "RETURN_ADDRESS1";
   }
   attribute ReturnAddress2 Text {
      label = "Return Occurrence Address2";
      fetch = "RETURN_ADDRESS2";
   }
   attribute ReturnAddress3 Text {
      label = "Return Occurrence Address3";
      fetch = "RETURN_ADDRESS3";
   }
   attribute ReturnAddress4 Text {
      label = "Return Occurrence Address4";
      fetch = "RETURN_ADDRESS4";
   }
   attribute ReturnAddress5 Text {
      label = "Return Occurrence Address5";
      fetch = "RETURN_ADDRESS5";
   }
   attribute ReturnAddress6 Text {
      label = "Return Occurrence Address6";
      fetch = "RETURN_ADDRESS6";
   }
   attribute ReturnAddrZipCode Text {
      label = "Return Occurrence Address Zip Code";
      fetch = "RETURN_ADDR_ZIP_CODE";
   }
   attribute ReturnAddrCity Text {
      label = "Return Occurrence Address City";
      fetch = "RETURN_ADDR_CITY";
   }
   attribute ReturnAddrState Text {
      label = "Return Occurrence Address State";
      fetch = "RETURN_ADDR_STATE";
   }
   attribute ReturnAddrCounty Text {
      label = "Return Occurrence Address County";
      fetch = "RETURN_ADDR_COUNTY";
   }
   attribute ReturnAddrCountryCode Text {
      label = "Return Occurrence Address Country";
      fetch = "RETURN_ADDR_COUNTRY_CODE";
   }
   attribute ReturnAddrCountryDesc Text {
      fetch = "Iso_Country_API.Get_Description(RETURN_ADDR_COUNTRY_CODE)";
   }
   attribute CaseId Number {
      editable = [false];
      label = "Case ID";
   }
   attribute DocumentAddressName Text {
      fetch = "Customer_Info_Address_API.Get_Name(CUSTOMER_NO,CUSTOMER_NO_ADDR_NO)";
      label = "Document Address Name";
      editable = [false];
      updatable = [false];
   }
   attribute OriginatingRmaNo Number {
      label = "Originating RMA No";
      editable = [ETag = null];
   }
   attribute CreditAddressName Text {
      label = "Credit Address Name";
      fetch = "Customer_Info_Address_API.Get_Name(CUSTOMER_NO_CREDIT,CUSTOMER_NO_CREDIT_ADDR_NO)";
      editable = [false];
      updatable = [false];
   }

   // Invisible fields
   attribute Condition Text {
      fetch = "Return_Material_API.Get_Allowed_Operations__(RMA_NO)";
   }

   attribute Company Text {
      label = "Company";
      fetch = "COMPANY";
      editable = [false];
   }
   attribute ReturnToCompany Text {
      label = "Company";
      fetch = "Site_API.Get_Company(RETURN_TO_CONTRACT)";
      editable = [false];
      updatable = [false];
   }
   attribute TaxLiability Text {
      fetch = "TAX_LIABILITY";
   }
   attribute ManualyEdited Boolean("TRUE", "FALSE") {
      fetch = "Fnd_Boolean_API.Get_Db_Value(0)";
      editable = [false];
   }
   attribute DeliveryCountry Text {
      label = "Delivery Country";
      fetch = "Delivery_Country_Code";
   }
   attribute ChildTaxUpdatePossible Number {
      fetch = "Return_Material_API.Child_Tax_Update_Possible__(RMA_NO)";
      editable = [false];
   }
   attribute UpdateLineTaxes Text {
      fetch = "'FALSE'";
      default = "'FALSE'";
      updatable = [true];
      insertable = [false];
      editable = [false];
   }
   attribute DisconnectExpLicense Text {
      fetch = "'FALSE'";
      default = "'FALSE'";
      updatable = [true];
      insertable = [false];
      editable = [false];
   }
   attribute TaxCalcMethod Text {
      fetch = "Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company)";
   }
   attribute CustomerName Text {
      fetch = "Customer_Info_API.Get_Name(CUSTOMER_NO)";
   }
   attribute CreditCustomerName Text {
      fetch = "Customer_Info_API.Get_Name(CUSTOMER_NO_CREDIT)";
   }
   @DynamicComponentDependency PURCH
   attribute ReturnToVenderName Text {
      fetch = "Supplier_Info_API.Get_Name(RETURN_TO_VENDOR_NO)";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   reference CustomerInfoRef(CustomerNo) to CustomerInfo(CustomerId);
   reference CustomerNoAddrNoRef(CustomerNo, CustomerNoAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Document Address";
   }
   reference ReturnApproverIdRef(ReturnApproverId) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
   }
   reference CustRefRef(CustomerNo, CustomerNoAddrNo, CustRef) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Reference";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   @DynamicComponentDependency PURCH
   reference ReturnToVendorNoRef(ReturnToVendorNo) to ValidSupplierLov(VendorNo) {
      label = "Return to Supplier";
   }
   reference ReturnToContractRef(ReturnToContract) to Site(Contract) {
      label = "Return to Site";
   }
   reference ReturnAddrNoFromContractRef(ReturnAddrNo) to CompanyAddressLovPub(DeliveryAddress) {
      label = "Return Address";
   }
   @DynamicComponentDependency PURCH
   reference ReturnAddrNoFromSupplierRef(ReturnAddrNo) to SupplierDelAddressLov(AddrNo) {
      label = "Return Address";
   }
   reference OrderNoRef(OrderNo) to CoRmaLov(OrderNo) {
      label = "Order No";
   }
   reference ShipmentIdRef(ShipmentId) to ShipmentRmaLov(ShipmentId) {
      label = "Shipment ID";
   }
   reference CustomerNoCreditRef(CustomerNoCredit) to CustOrdCust2(CustomerNo) {
      label = "Credit Customer No";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference CustomerNoCreditAddrNoRef(CustomerNoCredit, CustomerNoCreditAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Credit Address ID";
   }
   reference TaxLiabilityRef(TaxLiability) to TaxLiabilityLov(TaxLiability) {
      label = "Tax Liability";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }
   reference SupplyCountryDbRef(SupplyCountryDb) to IsoCountry(CountryCode) {
      label = "Supply Country";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipViaLov(ShipViaCode);
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms);
   reference CompanyFinanceRef(Company) to CompanyFinance(Company);
   reference ReturnMaterialTotalAmountRef(RmaNo) to ReturnMaterialTotalAmount(RmaNo);
   reference CustomerTaxUsageTypeRef(CustomerTaxUsageType) to CustomerTaxUsageType(CustomerTaxUsageType) {
      label = "Customer Tax Usage Type";
   }
   reference OriginatingRmaNoRef(OriginatingRmaNo) to ReturnMaterial(RmaNo) {
      label = "Originating RMA No";
   }
   reference ReceiptRmaNoRef(ReceiptRmaNo) to ReturnMaterial(RmaNo) {
      label = "Receipt RMA No";
   }

   array ReturnMaterialLinesArray(RmaNo) to ReturnMaterialLine(RmaNo);
   array ReturnMaterialChargeArray(RmaNo) to ReturnMaterialCharge(RmaNo);
   action ApproveCharges {
      ludependencies = ReturnMaterialCharge;
   }
   action ApproveNormalLinesForCredit {
      supportwarnings = [true];
      ludependencies = ReturnMaterialCharge;
   }
   action RemoveCreditApproval {
      ludependencies = ReturnMaterialCharge;
   }
   action CancelReturnMaterial {
      parameter CancelReason Text;
   }
   action GetResultKey Text;
   action CreateCorrectionInvoiceFromReturn;
   action Refreshpage {
      initialcheck none;
      ludependencies = ReturnMaterial, ReturnMaterialLine;
   }
}

@Override
entity ReturnMaterialTotalAmount using ReturnMaterial {
   from = "return_material rm, Return_Material_API.Calculate_Totals(rm.rma_no) rmt";
   crud = Read;
   ludependencies = ReturnMaterial, ReturnMaterialLine, ReturnMaterialCharge;

   attribute TotalNetAmountBase Number {
      fetch = "rmt.total_line_base";
      label = "Total Net Amt/Base";
      format = ifscurrency;
   }
   attribute TotalChargeBase Number {
      fetch = "rmt.total_charge_base";
      label = "Total Charge Net Amt/Base";
      format = ifscurrency;
   }
   attribute TotalNetAmountIncludingChargeBase Number {
      fetch = "rmt.total_amount_base";
      label = "Total Net Amt incl Charge/Base";
      format = ifscurrency;
   }
   attribute TotalNetAmountCurr Number {
      fetch = "rmt.total_line_curr";
      label = "Total Net Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalChargeCurr Number {
      fetch = "rmt.total_charge_curr";
      label = "Total Charge Net Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalNetAmountIncludingChargeCur Number {
      fetch = "rmt.total_amount_curr";
      label = "Total Net Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalTaxAmountCur Number {
      fetch = "rmt.total_line_tax_curr";
      label = "Total Tax Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalChargeTaxAmounttCur Number {
      fetch = "rmt.total_charge_tax_curr";
      label = "Total Charge Tax Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalTaxAmountIncludingChargeCur Number {
      fetch = "rmt.toatal_tax_amount_curr";
      label = "Total Tax Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalGrossAmountCurr Number {
      fetch = "rmt.total_line_gross_curr";
      label = "Total Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalGrossChargeCurr Number {
      fetch = "rmt.total_charge_gross_curr";
      label = "Total Charge Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute TotalGrossAmountIncludingChargeCurr Number {
      fetch = "rmt.total_gross_amount_curr";
      label = "Total Gross incl Charge/Curr";
      format = ifscurrency;
   }
   attribute Charges Boolean("TRUE", "FALSE") {
      fetch = "DECODE(rmt.charge_exist, '1', 'TRUE', 'FALSE')";
      label = "Charges";
      required = [true];
      editable = [false];
   }
   reference CompanyFinanceRef(Company) to CompanyFinance(Company);
}

---------------------------------- QUERIES ----------------------------------
query ReturnMaterialHistory {
   from = "return_material_history";
   lu = ReturnMaterialHistory;
   keys = RmaNo, HistoryNo;
   ludependencies = ReturnMaterial, ReturnMaterialLine, ReturnMaterialCharge;

   attribute RmaNo Number;
   attribute HistoryNo Number;
   attribute DateEntered Timestamp {
      label = "Modified";
   }
   attribute HistState Text;
   attribute Status Text {
      fetch = "Return_Material_History_API.Get_Hist_State(RMA_NO, HISTORY_NO)";
      label = "Status";
   }
   attribute Userid Text {
      label = "By";
      format = uppercase;
   }
   attribute MessageText Text {
      label = "Info";
   }
}

@Override
query CustAddressShipLov {
   reference DeliveryAddressRef(CustomerNo, AddrNo) to CustomerInfoAddress(CustomerId, AddressId);
}

@Override
query CompanyAddressLovPub {
   reference ReturnCompanyAddressRef(Company, DeliveryAddress) to CompanyAddress(Company, AddressId);
}


@Override
@DynamicComponentDependency PURCH
query SupplierDelAddressLov {
   reference ReturnSupplierAddressRef(VendorNo, AddrNo) to SupplierInfoAddress(SupplierId, AddressId);
}

------------------------------- ENUMERATIONS --------------------------------

enumeration ReturnOptionEnum {
   value = "RETURN_TO_OWN_SITE" {
      identifier = "ReturnToOwnSite";
      label = "Return to Own Site";
   }
   value = "RETURN_TO_DIFF_SITE" {
      identifier = "ReturnToDiffSite";
      label = "Return to Different Site";
   }
   value = "RETURN_TO_SUPPLIER" {
      identifier = "ReturnToSupplier";
      label = "Return to Supplier";
   }
}

---------------------------------- ACTIONS ----------------------------------
action ConnectLinesToRma {
   initialcheck none;
   parameter ParentObjkey Text;
   parameter RmaNo Number;
}

action CreateRma Number {
   initialcheck implementation;
   parameter ParentObjkey Text;
}
--------------------------------- FUNCTIONS ---------------------------------

function CustContactName Text {
   parameter CustomerNo Text;
   parameter CustomerNoAddrNo Text;
   parameter CustRef Text;
}

function CheckLineConnPromoExist Number {
   parameter RmaNo Number;
}

function CreateCreditInvoiceAllowed Boolean {
   parameter RmaNo Number;
}

function OrderNumbers List<Entity(CoRmaLov)> {
   parameter Contract   Text;
   parameter CustomerNo Text;
   parameter CurrencyCode Text;
   where = "CONTRACT= :Contract AND( :CustomerNo IS NULL OR(CUSTOMER_NO = :CustomerNo AND CURRENCY_CODE = :CurrencyCode))";
}

function ShipmentIds List<Entity(ShipmentRmaLov)> {
   parameter Contract   Text;
   parameter CustomerNo Text;
   where = "CONTRACT= :Contract AND ( :CustomerNo IS NULL OR (RECEIVER_ID = :CustomerNo))";
}

function TaxLiabilities List<Entity(TaxLiabilityLov)> {
   parameter DeliveryCountry Text;
   parameter ShipAddrNo Text;
   where = "(:DeliveryCountry IS NULL) OR (COUNTRY_CODE = :DeliveryCountry OR COUNTRY_CODE = '*')";
}

function ValidateAddressRelatedDetails Structure(AddressDetailStruc) {
   parameter CustomerNo Text;
   parameter CustomerNoAddrNo Text;
   parameter ShipAddrNo Text;
   parameter CustomerNoCreditAddrNo Text;
   parameter CustomerNoCredit Text;
   parameter Company Text;
   parameter SupplyCountryDb Text;
   parameter RmaAddr Boolean;
   parameter ShipAddr Boolean;
   parameter CreditAddr Boolean;
}

function FetchReturnToInformation Structure(ReturnInformationStruc) {
   parameter ReturnToVendorNo Text;
   parameter ReturnToContract Text;
   parameter Contract Text;
   parameter Company Text;
}

function ValidateReturnAddrNo Text {
   parameter ReturnAddrNo Text;
   parameter ReturnToVendorNo Text;
   parameter ReturnToContract Text;
   parameter ReturnToCompany Text;
}

function FetchAddressRelatedDetails Structure(AddressDetailStruc) {
   parameter RmaNo Number;
   parameter CustomerNo Text;
   parameter ReturnFromCustomerNo Text;
   parameter OrderNo Text;
   parameter ShipmentId Number;
   parameter ShipAddrNo Text;
   parameter CustomerNoAddrNo Text;
}

function ValidateContract Structure(DefaultValueStruc) {
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter OrderNo Text;
   parameter ShipmentId Number;
   parameter ShipAddrNo Text;
}

function ValidateCustomer Structure(DefaultValueStruc) {
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter SupplyCountryDb Text;
   parameter Company Text;
   parameter OrderNo Text;
   parameter ShipmentId Number;
   parameter ShipAddrNo Text;

}

function GetCreditApproveLineStatus Structure(CreditApproveLineStatusStructure) {
   parameter RmaNo Number;
}

function CancelReasons List<Entity(OrderCancelReason)> {
   where = "USED_BY_ENTITY_DB like '%^RM^%' AND OBJSTATE in ('Active')";
}

function GetTaxLiability Text {
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter Company Text;
   parameter SupplyCountryDb Text;
}

function OrdConnectedLinesExist Text {
   parameter RmaNo Number;
}

@DynamicComponentDependency PURCH
function SupplierAddrNos List<Entity(SupplierDelAddressLov)> {
   parameter ReturnToVendorNo Text;
   where = ":ReturnToVendorNo IS NULL OR VENDOR_NO = :ReturnToVendorNo";
}

function CompanyAddrNos List<Entity(CompanyAddressLovPub)> {
   parameter ReturnToCompany Text;
   where = "COMPANY = :ReturnToCompany";
}

function ReturnMaterialHistoryList List<Entity(ReturnMaterialHistory)> {
   parameter RmaNo Number;
   where = "RMA_NO = :RmaNo";
}

function GetReturnToVendorNo Text {
   parameter ReturnToContract Text;
}

function GetCurrencyCode Text {
   parameter CustomerNo Text;
}

function GetCustomerInfo Structure(CustomerInfoStructure) {
   parameter TemplateOrderNo    Text;
   parameter TemplateShipmentId Number;
}

function GetCustomerNo Text {
   parameter OrderNo Text;
   parameter ShipmentId Number;
   parameter ValidateFrom Text;
}

function ExpctrConnected  Text {
   parameter RmaNo Number;
}

function SingleOccReturnAddressInfo Structure(AddressDetailStruc) {
   parameter ReturnToContract Text;
   parameter ReturnAddrNo     Text;
   parameter ReturnToVendorNo Text;
   parameter Company          Text;
}

function SingleOccDeliveryAddressInfo Structure(AddressDetailStruc) {
   parameter OrderNo              Text;
   parameter ShipmentId           Number;
   parameter ReturnFromCustomerNo Text;
   parameter ShipAddrNo           Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ReturnMaterialHistStructure {
   attribute RmaNo Number;
}

structure CreditApproveLineStatusStructure {
   attribute HasCreditedLinesToApprove Boolean;
   attribute HasNormalLinesToApprove Boolean;
}

structure AddressDetailStruc {
   attribute Address1 Text;
   attribute Address2 Text;
   attribute Address3 Text;
   attribute Address4 Text;
   attribute Address5 Text;
   attribute Address6 Text;
   attribute City Text;
   attribute State Text;
   attribute ZipCode Text;
   attribute County Text;
   attribute CountryCode Text;
   attribute AddressName Text;
   attribute ShipAddress1 Text;
   attribute ShipAddress2 Text;
   attribute ShipAddress3 Text;
   attribute ShipAddress4 Text;
   attribute ShipAddress5 Text;
   attribute ShipAddress6 Text;
   attribute ShipAddrCity Text;
   attribute ShipAddrState Text;
   attribute ShipAddrZipCode Text;
   attribute ShipAddrCounty Text;
   attribute ShipAddrCountryCode Text;
   attribute ShipAddrName Text;
   attribute CustomerNo Text;
   attribute CustomerNoAddrNo Text;
   attribute DocumentAddressName Text;
   attribute ShipAddrNo Text;
   attribute CustomerNoCreditAddrNo Text;
   attribute CreditAddressName Text;
   attribute CustomerNoCredit Text;
   attribute CustRef Text;
   attribute ReferenceName Text;
   attribute DeliveryCountry Text;
   attribute TaxLiability Text;
   attribute IntrastatExempt Enumeration(IntrastatExempt);
   attribute ShipAddrFlag Enumeration(GenYesNo);

}

structure ReturnInformationStruc {
   attribute ReturnToContract Text;
   attribute ReturnToCompany Text;
   attribute ReturnAddrNo Text;
   attribute ReturnAddrName Text;
   attribute ReturnAddress1 Text;
   attribute ReturnAddress2 Text;
   attribute ReturnAddress3 Text;
   attribute ReturnAddress4 Text;
   attribute ReturnAddress5 Text;
   attribute ReturnAddress6 Text;
   attribute ReturnAddrCity Text;
   attribute ReturnAddrState Text;
   attribute ReturnAddrZipCode Text;
   attribute ReturnAddrCounty Text;
   attribute ReturnAddrCountryCode Text;
   attribute InfoMessage Text;
}

structure CustomerInfoStructure {
   attribute CustomerNo Text;
   attribute CurrencyCode Text;
}


--------------------------------- VIRTUALS ----------------------------------
virtual CreateRmaVirtual {
   ludependencies = OrderLinesToReturnVirtual;
   attribute ReturnOption Enumeration(ReturnOptionEnum);
   attribute RmaNo Number;
   attribute Contract Text {
      required = [true];
   }
   attribute ReturnToContract Text;
   attribute ReturnToSupplier Text;
   attribute Coordinator Text;
   attribute CustomerNo Text {
      required = [true];
   }
   attribute CurrencyCode Text {
      required = [true];
   }
   attribute TemplateOrderNo Text;
   attribute TemplateShipmentId Number;
   attribute ReturnReason Text;
   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CoordinatorRef(Coordinator) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   @DynamicComponentDependency PURCH
   reference ReturnToSupplierRef(ReturnToSupplier) to ValidSupplierLov(VendorNo) {
      label = "Return to Supplier";
   }
   reference ReturnToContractRef(ReturnToContract) to Site(Contract) {
      label = "Return to Site";
   }
   reference TemplateOrderNoRef(TemplateOrderNo) to CoRmaLov(OrderNo) {
      label = "Customer Order No";
   }
   reference ReturnMaterialReasonRef(ReturnReason) to ReturnMaterialReason(ReturnReasonCode) {
      label = "Return Reason";
   }
   reference TemplateShipmentIdRef(TemplateShipmentId) to ShipmentRmaLov(ShipmentId) {
      label = "Shipment ID";
   }
   array OrderLinesArray() to OrderLinesToReturnVirtual();
   //action CreateRma Number;

}

virtual OrderLinesToReturnVirtual {
   ludependencies = CreateRmaVirtual;
   crud = Delete, Update;
   attribute RmaNo Number;
   attribute Contract Text;
   attribute ReturnQty Number;
   attribute OrderNo Text {
      editable = [false];
      updatable = [false];
   }
   attribute LineNo Text {
      editable = [false];
      updatable = [false];
   }
   attribute RelNo Text {
      editable = [false];
      updatable = [false];
   }
   attribute LineItemNo Number {
      editable = [false];
      updatable = [false];
   }
   attribute SalesPartNo Text {
      editable = [false];
      updatable = [false];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      editable = [false];
      updatable = [false];
   }
   attribute QtyToBeReturn Number {
      editable = [false];
      updatable = [false];
   }
   attribute ReturnReason Text;

   reference ReturnMaterialReasonRef(ReturnReason) to ReturnMaterialReason(ReturnReasonCode) {
      label = "Return Reason";
   }
   reference SalesPartRef(Contract, SalesPartNo) to SalesPartInventoryLov(Contract, CatalogNo) {
      label = "Sales Part";
   }
}
