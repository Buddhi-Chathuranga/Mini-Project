-----------------------------------------------------------------------------
--
--  Logical unit: MediaLibraryAttachmenthandling
--  Component:    APPSRV
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  180425  MDAHSE  NGMWO-985, Changed to use our own Get_Rowid_From_Keyref_Baseview until the framework provides one.
--  180730  SHEPLK  SAUXXW4-9309, Modified CRUD_Upload___ to support all file formats. Added Blob_To_Clob___.
--  180913  MDAHSE  SAUXXW4-9905, Add Get_Lu_Name_Media_Aware___ to get better error handling in the client.
--  190911  AMNALK  SAZDOC-182, Bypass the thumbnail generation in Oracle 19c to avoid runtime errors.
--  200131  lasslk  SAZDOC-390,Oracle 19c certification - Media Thumbnail generation Issue fixed.
--  200415  MDAHSE  Now we handle media upload from Java. Removing stuff we don't need...
--  200810  MAABSE  TEAURENAFW-3248, Copied content from MediaPanel.plsvc
--  210301  DEEKLK  AM2020R1-7516, Changed objid_ type to VARCHAR2 in defined places.
--  210517  DEEKLK  AM2020R1-7785, Modified Create_New_Media_Item___() and Create_New_Media_Library_Item___().
--  210922  puvelk  AM21R2-2638, Added DeleteMediaItem, SetMediaItemToPrivate and IsB2BUser methods
-----------------------------------------------------------------------------

layer Core;

FUNCTION Get_O_C_T_Result_Count___(
   lu_name_ IN VARCHAR2,
   key_ref_ IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   RETURN Media_Library_API.Get_Obj_Conn_Client_Hit_Count(lu_name_, key_ref_);
END Get_O_C_T_Result_Count___;

/* Moved to MediaLibraryAttachment.fragment
FUNCTION Media_Library_Result_Set___(
   lu_name_ IN VARCHAR2,
   key_ref_ IN VARCHAR2 ) RETURN Mlib_Result_Struct_Arr
IS
   count_            NUMBER := 1;
   record_           Mlib_Result_Struct_Rec;
   ret_              Mlib_Result_Struct_Arr;

   source_ref_list_      VARCHAR2(2000);
   source_ref_           VARCHAR2(2000) := key_ref_;
   ptr_                  NUMBER;
   source_lu_            VARCHAR2(2000) := lu_name_;
   read_only_            VARCHAR2(30);
   trans_source_lu_name_ VARCHAR2(2000);

   CURSOR get_record_set(luname_ IN VARCHAR2, keyref_ IN VARCHAR2) IS
      SELECT l.lu_name, l.key_ref, l.locked_db , t.library_id, t.library_item_id, t.item_id , t.default_media, l.connected_obj_ref1, l.connected_obj_ref2
      FROM MEDIA_LIBRARY_ITEM t, MEDIA_LIBRARY l
      WHERE t.library_id = l.library_id AND l.key_ref = keyref_ AND l.lu_name = luname_
      ORDER BY t.default_media DESC;
BEGIN
   ret_ := Mlib_Result_Struct_Arr();

   FOR rec_ IN get_record_set(lu_name_, key_ref_) LOOP
      Build_Media_Item_Record___(record_,
       rec_.lu_name,
       rec_.key_ref,
       rec_.library_id,
       rec_.library_item_id,
       rec_.item_id,
       rec_.default_media,
       rec_.locked_db);

      ret_.extend(1);
      ret_(count_) := record_;
      count_ := count_ + 1;
   END LOOP;

   source_ref_list_ := Obj_Connect_LU_Transform_API.Get_Transformed_Lu_Key_List(lu_name_, key_ref_, 'MediaLibrary');
   WHILE Obj_Connect_Lu_Transform_API.Get_Next_From_Key_List(source_lu_, trans_source_lu_name_, source_ref_, read_only_, ptr_, source_ref_list_) = 'TRUE' LOOP
      FOR rec_ IN get_record_set(source_lu_, source_ref_) LOOP
         Build_Media_Item_Record___(record_,
          rec_.lu_name,
          rec_.key_ref,
          rec_.library_id,
          rec_.library_item_id,
          rec_.item_id,
          rec_.default_media,
          rec_.locked_db);

         ret_.extend(1);
         ret_(count_) := record_;
         count_ := count_ + 1;
      END LOOP;
   END LOOP;

  RETURN ret_;
END Media_Library_Result_Set___;
*/

/* Moved to MediaLibraryAttachment.fragment
PROCEDURE  Build_Media_Item_Record___ (
   record_           IN OUT Mlib_Result_Struct_Rec,
   lu_name_          IN VARCHAR2,
   key_ref_          IN VARCHAR2,
   library_id_       IN VARCHAR2,
   library_item_id_  IN NUMBER,
   item_id_          IN NUMBER,
   default_media_    IN VARCHAR2,
   locked_db_        IN VARCHAR2 )
IS
   media_item_rec_   Media_Item_API.Public_rec;

BEGIN
   record_.lu_name         := lu_name_;
   record_.key_ref         := key_ref_;
   record_.library_id      := library_id_;
   record_.library_item_id := library_item_id_;
   record_.item_id         := item_id_;
   record_.default_media   := default_media_;
   record_.locked_db       := locked_db_;

   media_item_rec_         := Media_Item_API.Get(record_.item_id );
   record_.name            := media_item_rec_.name;
   record_.description     := media_item_rec_.description;
   record_.media_file      := media_item_rec_.media_file;
   record_.media_item_type := media_item_rec_.media_item_type;
   record_.private_media_item := media_item_rec_.private_media_item;
   record_.file_ext        := Get_Media_File_Extension___(item_id_);

   record_.media_thumb     := Media_Item_API.Get_Media_Thumb(record_.item_id );
   record_.source := lu_name_;

   IF record_.source IS NOT NULL THEN
      record_.source := Language_SYS.translate_lu_prompt_(record_.source);
   END IF;
END Build_Media_Item_Record___;
*/

FUNCTION Get_Next_Ref___ ( ref_ VARCHAR2,
                           ptr_ IN OUT NUMBER,
                           val_ IN OUT VARCHAR2) RETURN BOOLEAN
IS
   from_  NUMBER;
   to_    NUMBER;
   text_separator_   VARCHAR2(1) := Client_SYS.text_separator_;
BEGIN
   from_ := nvl(ptr_, 1);
   to_   := instr(ref_, text_separator_, from_);
   IF (to_ > 0) THEN
      val_  := substr(ref_, from_, (to_-from_));
      ptr_   := to_+1;
      RETURN(TRUE);
   ELSE
      RETURN(FALSE);
   END IF;
END Get_Next_Ref___;


FUNCTION Get_Media_File_Stream___(
   item_id_ IN NUMBER ) RETURN BLOB
IS
   media_object_ BLOB;
BEGIN
   Media_Item_API.Get_Media_Item(media_object_,item_id_);
   RETURN media_object_;
END Get_Media_File_Stream___;

FUNCTION Get_Text_File_Stream___(
   item_id_ IN NUMBER ) RETURN CLOB
IS

BEGIN
   RETURN Media_Item_API.Get_Media_Text(item_id_);
END Get_Text_File_Stream___;

/* Moved to MediaLibraryAttachment.fragment
FUNCTION Get_File_Metadata___(
   item_id_ IN NUMBER ) RETURN File_Metadata_Rec
IS
   file_type_           VARCHAR2(100);
   item_type_           VARCHAR2(100);
   count_               NUMBER := 1;
   record_              File_Metadata_Rec;
BEGIN

   item_type_ := Media_Item_API.Get_Media_Item_Type_Db(item_id_);

   IF item_type_ = 'IMAGE' THEN
      file_type_ := 'PNG';
   ELSIF item_type_ = 'AUDIO' THEN
      file_type_ := 'MP3';
   ELSIF item_type_ = 'VIDEO' THEN
      file_type_ := 'WMV';
   ELSIF item_type_ = 'TEXT' THEN
      file_type_ := 'txt';
   END IF;

   record_.page_count      := count_;
   record_.extension       := file_type_;
   record_.item_type       := item_type_;

   RETURN record_;
END Get_File_Metadata___;
*/

/* Moved to MediaLibraryAttachment.fragment
FUNCTION Get_Media_File_Extension___(
   item_id_ IN NUMBER) RETURN VARCHAR2
IS
   filename_            Media_Item_TAB.media_file%TYPE;
   extension_           VARCHAR2(200);
   file_meta_rec_       File_Metadata_Rec;
BEGIN
   filename_  := Media_Item_API.Get_Media_File(item_id_);

   IF filename_ IS NOT NULL AND INSTR(filename_, '.', -1) > 0 THEN
      extension_ := SUBSTR(filename_, INSTR(filename_, '.', -1) + 1);
   END IF;
   IF extension_ IS NULL THEN
      file_meta_rec_ := Get_File_Metadata___(item_id_);
      extension_ := file_meta_rec_.extension;
   END IF;
   RETURN UPPER(extension_);
END Get_Media_File_Extension___;
*/

FUNCTION Get_Media_File_Ext_List___ RETURN VARCHAR2
IS
BEGIN
   RETURN Media_Library_Util_API.Get_Media_File_Ext_List();
END Get_Media_File_Ext_List___;

FUNCTION Get_Editable_Lu_Name___(
   target_lu_name_ IN VARCHAR2,
   service_        IN VARCHAR2 ) RETURN VARCHAR2
IS

BEGIN
   IF (Obj_Connect_Lu_Transform_API.Is_Currently_Transformed(target_lu_name_,service_) = 'TRUE') THEN
      RETURN Obj_Connect_Lu_Transform_API.Get_Editable_Lu_Name(target_lu_name_, service_);
   ELSE
      RETURN target_lu_name_;
   END IF;
END Get_Editable_Lu_Name___;


FUNCTION Extract_Title_From_File_Name___(
   file_name_ IN VARCHAR2 ) RETURN VARCHAR2
IS

BEGIN
   RETURN Media_Item_API.Make_Nice_Name_From_File_Name (file_name_);
END Extract_Title_From_File_Name___;


FUNCTION Get_Transformed_Key_Ref___(
   target_lu_name_ IN VARCHAR2,
   source_lu_name_ IN VARCHAR2,
   service_        IN VARCHAR2,
   target_key_ref_ IN VARCHAR2 ) RETURN VARCHAR2
IS

BEGIN
   RETURN Obj_Connect_Lu_Transform_API.Get_Transformed_Key_Ref(target_lu_name_, source_lu_name_, service_, target_key_ref_);
END Get_Transformed_Key_Ref___;

FUNCTION Get_Lu_Name_Media_Aware___(
   lu_name_ IN VARCHAR2) RETURN VARCHAR2
IS

BEGIN
   IF NOT Object_Connection_SYS.Is_Connection_Aware(lu_name_, 'MediaLibrary') THEN
      RETURN 'FALSE';
   END IF;
   RETURN 'TRUE';
END Get_Lu_Name_Media_Aware___;

PROCEDURE Create_New_Media_Item___ (
   name_        IN  VARCHAR2,
   description_ IN  VARCHAR2,
   item_id_     OUT VARCHAR2)
IS
   attr_       VARCHAR2(32000);
   info_       VARCHAR2(2000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN

   Client_SYS.Add_To_Attr ('NAME'               , name_,        attr_);
   Client_SYS.Add_To_Attr ('DESCRIPTION'        , description_, attr_);
   -- Defaulting to IMAGE. Will be changed later by Java code
   -- calling Media_Item_API.Set_Media_Attributes.
   Client_SYS.Add_To_Attr ('MEDIA_ITEM_TYPE_DB' , 'IMAGE',      attr_);
   Client_SYS.Add_To_Attr ('PRIVATE_MEDIA_ITEM' , 'FALSE',      attr_);
   Client_SYS.Add_To_Attr ('ARCHIVED_DB'        , 'FALSE',      attr_);
   Client_SYS.Add_To_Attr ('LATEST_ACCESS_DATE' , SYSDATE,      attr_);

   Media_Item_API.New__ (info_, objid_, objversion_, attr_, 'DO');

   item_id_ := Client_SYS.Get_Item_Value ('ITEM_ID', attr_);

END Create_New_Media_Item___;

PROCEDURE Create_New_Media_Library_Item___ (
   library_id_  IN  VARCHAR2,
   item_id_     IN VARCHAR2)
IS
   attr_            VARCHAR2(32000);
   info_            VARCHAR2(2000);
   objid_           VARCHAR2(2000);
   objversion_      VARCHAR2(2000);
   library_item_id_ media_library_item_tab.library_item_id%TYPE;
BEGIN

   library_item_id_ := Media_Library_Item_API.Get_Next_Library_Item_Id__ (library_id_);

   Media_Library_Item_API.New__ (info_, objid_, objversion_, attr_, 'PREPARE');

   Client_SYS.Add_To_Attr ('LIBRARY_ID'      , library_id_,      attr_);
   Client_SYS.Add_To_Attr ('LIBRARY_ITEM_ID' , library_item_id_, attr_);
   Client_SYS.Add_To_Attr ('ITEM_ID'         , item_id_,         attr_);

   Media_Library_Item_API.New__ (info_, objid_, objversion_, attr_, 'DO');

END Create_New_Media_Library_Item___;

FUNCTION Create_And_Connect_Media___  (
   lu_name_     IN VARCHAR2,
   key_ref_     IN VARCHAR2,
   name_        IN VARCHAR2,
   description_ IN VARCHAR2) RETURN Media_Keys_Struct_Rec
IS
   library_id_    media_library_tab.library_id%TYPE;
   item_id_       media_item_tab.item_id%TYPE;
   objid_         VARCHAR2(128);
   ret_           Media_Keys_Struct_Rec;
   -- If the user leaves the Name field empty, it means we will use the file name
   -- for Name and Description. We cannot leave the values empty here, so we will
   -- set them to <NULL> and later change them in Media_Item_API.Set_Media_Attributes,
   -- called from Java.
   name_to_use_ media_item_tab.name%TYPE := NVL(name_, '<NULL>');
   desc_to_use_ media_item_tab.description%TYPE := NVL(description_, '<NULL>');
BEGIN
   objid_ := Media_Library_API.Get_Rowid_From_Keyref_Baseview (lu_name_, key_ref_);
   Media_Library_Api.Check_And_Create_Connection(library_id_, lu_name_, objid_);
   -- We will use the same values for both Name and Description attributes
   -- since it is not possible to enter
   Create_New_Media_Item___ (name_to_use_, desc_to_use_, item_id_);
   Create_New_Media_Library_Item___ (library_id_, item_id_);
   ret_.item_id := item_id_;
   RETURN ret_;
END Create_And_Connect_Media___;



FUNCTION Get_Library_Id___ (
        lu_name_ IN VARCHAR2,
        key_ref_ IN VARCHAR2) RETURN VARCHAR2
IS
   objid_                 VARCHAR2(128);
   library_id_            media_library_tab.library_id%TYPE;
   source_lu_name_        VARCHAR2(100);
   source_key_ref_        VARCHAR2(2000);
   source_lu_name_to_use_ VARCHAR2(100);
   source_key_ref_to_use_ VARCHAR2(2000);
BEGIN
   source_lu_name_ := Get_Editable_Lu_Name___(lu_name_, 'MediaLibrary');

   IF source_lu_name_ != lu_name_ THEN
      source_key_ref_ := Get_Transformed_Key_Ref___(lu_name_, source_lu_name_, 'MediaLibrary', key_ref_);
      source_key_ref_to_use_ := source_key_ref_;
      source_lu_name_to_use_ := source_lu_name_;
   ELSE
      source_lu_name_to_use_ := lu_name_;
      source_key_ref_to_use_ := key_ref_;
   END IF;

   objid_ := Media_Library_API.Get_Rowid_From_Keyref_Baseview(source_lu_name_to_use_, source_key_ref_to_use_);
   Media_Library_Api.Check_And_Create_Connection(library_id_, source_lu_name_to_use_, objid_);

   RETURN library_id_;
END Get_Library_Id___;

@IgnoreUnitTest TrivialFunction
FUNCTION Is_B2_B_User___ RETURN BOOLEAN
IS
BEGIN
   $IF (Component_Enterp_SYS.INSTALLED) $THEN
      RETURN ((B2b_User_Util_API.Get_User_Default_Supplier IS NOT NULL) OR (B2b_User_Util_API.Get_User_Default_Customer IS NOT NULL));
   $ELSE
      RETURN FALSE;
   $END
END Is_B2_B_User___;

@IgnoreUnitTest NoOutParams
PROCEDURE Set_Media_Item_To_Private___ (
   item_id_ IN NUMBER)
IS
BEGIN
	Media_Item_Api.Set_Media_Item_To_Private(item_id_);
END Set_Media_Item_To_Private___;

@IgnoreUnitTest TrivialFunction
PROCEDURE Detach_Media_Item___ (
   library_id_ IN VARCHAR2,
   library_item_id_ IN VARCHAR2,
   item_id_ IN NUMBER,
   info$_ OUT VARCHAR2)
IS
BEGIN
	Media_Library_Item_API.Handle_Delete(info$_, library_id_, library_item_id_, item_id_, 'DO');
END Detach_Media_Item___;
