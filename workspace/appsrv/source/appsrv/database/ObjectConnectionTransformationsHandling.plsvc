-----------------------------------------------------------------------------
--
--  Logical unit: ObjectConnectionTransformationsHandling
--  Component:    APPSRV
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  200929  MDAHSE  Change to use the new dictionary_sys views because of the work with solution sets.
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Obj_Connect_Lu_Transform_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   transformation_method_   OBJ_CONNECT_LU_TRANSFORM_TAB.transformation_method%TYPE;

BEGIN

   IF (Client_SYS.Item_Exist('TRANSFORMATION_METHOD', attr_) ) THEN
      transformation_method_ := Client_SYS.Get_Item_Value('TRANSFORMATION_METHOD', attr_);
      IF transformation_method_ IS NOT NULL  THEN
         Client_SYS.Add_To_Attr('TRANSFORMATION_METHOD',transformation_method_ , attr_);
      ELSE
         Client_SYS.Add_To_Attr('TRANSFORMATION_METHOD', ' ', attr_);
         Client_SYS.Add_To_Attr('ACTIVE_DB', 'FALSE', attr_);
         Client_SYS.Add_To_Attr('SKIP_VALIDATION', 'TRUE', attr_);
      END IF;
   ELSE
      Client_SYS.Add_To_Attr('SKIP_VALIDATION', 'TRUE', attr_);
      Client_SYS.Add_To_Attr('TRANSFORMATION_METHOD', ' ', attr_);
      Client_SYS.Add_To_Attr('ACTIVE_DB', 'FALSE', attr_);
   END IF;
   super(etag_, key_, attr_, info_, action_);

END CRUD_Create___;

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Transform_Editor_Virtual_Rec )
IS
BEGIN
   super(rec_);
   Populate_List___(rec_.objkey, rec_.source, rec_.target, rec_.transformation_method);
END CRUD_Create___;

PROCEDURE Populate_List___ (
   parent_objkey_           IN VARCHAR2,
   source_                  IN VARCHAR2,
   target_                  IN VARCHAR2,
   transformation_method_   IN VARCHAR2 )
IS
   target_columns_                      VARCHAR2(32000);
   source_keys_                         VARCHAR2(1000);
   has_transform_                       BOOLEAN;
   temp_source_                         VARCHAR2(1000);
   temp_target_                         VARCHAR2(1000);
   position_left_                       NUMBER;
   position_right_                      NUMBER;
   target_columns_count_dummy_          NUMBER;
   target_columns_list_                 Utility_SYS.STRING_TABLE;
   source_list_columns_count_dummy_     NUMBER;
   temp_source_list_columns_            VARCHAR2(1000);
   source_columns_list_                 Utility_SYS.STRING_TABLE;
   transform_list_columns_count_dummy_  NUMBER;
   transform_list_columns_list_         Utility_SYS.STRING_TABLE;
   transform_editor_list_virtual_rec_   Transform_Editor_List_Virtual_Rec;

BEGIN
   target_columns_ := Obj_Connect_Lu_Transform_API.Get_CS_All_Columns(target_);
   source_keys_    := Obj_Connect_Lu_Transform_API.Get_CS_Key_Columns(source_);

   Utility_SYS.Tokenize(target_columns_       , ',', target_columns_list_        , target_columns_count_dummy_);
   Utility_SYS.Tokenize(source_keys_          , ',', source_columns_list_        , source_list_columns_count_dummy_);
   Utility_SYS.Tokenize(transformation_method_, ',', transform_list_columns_list_, transform_list_columns_count_dummy_);


   FOR count_source_ IN source_columns_list_.FIRST..source_columns_list_.LAST LOOP
      transform_editor_list_virtual_rec_.target := NULL;
      FOR count_transform_ IN transform_list_columns_list_.FIRST..transform_list_columns_list_.LAST LOOP
         has_transform_ := FALSE;

         temp_source_list_columns_ := source_columns_list_(count_source_);
         transform_editor_list_virtual_rec_.objkey                    := sys_guid();
         transform_editor_list_virtual_rec_.parent_objkey             := parent_objkey_;
         transform_editor_list_virtual_rec_.source                    := source_columns_list_(count_source_);

         position_left_   := INSTR(transform_list_columns_list_(count_transform_), '=') -1;
         position_right_  := (LENGTH(transform_list_columns_list_(count_transform_)) - position_left_ - 1) * (-1);

         IF(position_left_ > 0) THEN
            temp_target_  := SUBSTR(transform_list_columns_list_(count_transform_), 0, position_left_);
            IF(temp_target_ = source_columns_list_(count_source_)) THEN
               transform_editor_list_virtual_rec_.target :=SUBSTR(transform_list_columns_list_(count_transform_),(position_right_));
            END IF;
         ELSE
            temp_source_ := source_columns_list_(count_source_) ;
            FOR count_target IN target_columns_list_.FIRST..target_columns_list_.LAST LOOP
               has_transform_ := TRUE;
               IF ((temp_source_ = target_columns_list_(count_target)) AND (has_transform_ = TRUE)) THEN
                  transform_editor_list_virtual_rec_.target := target_columns_list_(count_target);
               END IF;
            END LOOP;
         END IF;
      END LOOP;
      CRUD_Create___(transform_editor_list_virtual_rec_);
   END LOOP;
END Populate_List___;

FUNCTION Get_Valid_Target_Column_Names___(
   lu_name_ IN VARCHAR2 )  RETURN Objid_Arr
IS
   target_columns_count_         NUMBER ;
   temp_target_group_            VARCHAR2(30);
   target_groups_collection_     Objid_Arr := Objid_Arr();
   target_columns_list_          Utility_SYS.STRING_TABLE;
   target_columns_               VARCHAR2(32000);
   view_name_                    VARCHAR2(30);

   CURSOR get_target_group IS
      SELECT objid
      FROM   dictionary_sys_view_column_act
      WHERE lu_name = lu_name_
      AND   column_name = temp_target_group_
      AND   view_name = view_name_;
BEGIN
   view_name_      := Obj_Connect_Lu_Transform_API.Get_View_For_Column_Name(lu_name_);
   target_columns_ := Obj_Connect_Lu_Transform_API.Get_CS_All_Columns(lu_name_);
   Utility_SYS.Tokenize(target_columns_, ',', target_columns_list_, target_columns_count_);

   FOR i IN 1..target_columns_count_ LOOP
      temp_target_group_ := target_columns_list_(i);
      FOR rec_ IN get_target_group LOOP
         target_groups_collection_.EXTEND;
         target_groups_collection_(target_groups_collection_.last) := rec_.objid;
      END LOOP;
   END LOOP;
   RETURN target_groups_collection_;
END Get_Valid_Target_Column_Names___;

FUNCTION Get_Transformation___ (
   objkey_           IN VARCHAR2,
   source_           IN VARCHAR2,
   target_           IN VARCHAR2,
   service_           IN VARCHAR2 ) RETURN VARCHAR2
IS

   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   info_             VARCHAR2(4000);
   attr_             VARCHAR2(4000);
   transformation_   VARCHAR2(1000);

   CURSOR get_lists IS
      SELECT source, target
      FROM  object_connection_transformations_handling_transform_editor_list_virtual_vrt
      WHERE parent_objkey = objkey_;

      CURSOR get_objid_version  IS
      SELECT objid, objversion
      FROM obj_connect_lu_transform
         WHERE target_lu_name = target_
         AND   source_lu_name = source_
         AND   service_name = service_;
   BEGIN

   FOR rec IN get_lists LOOP
      transformation_    := CONCAT(transformation_, rec.source);
      IF (rec.target IS NOT NULL AND rec.source != rec.target) THEN
         transformation_ := CONCAT (transformation_, CONCAT('=', rec.target));
      END IF;
      transformation_    := CONCAT(transformation_, ',');
   END LOOP;

   attr_ := NULL;
   OPEN get_objid_version;
   FETCH get_objid_version INTO objid_, objversion_;
   CLOSE get_objid_version;

   Client_SYS.Set_Item_Value('TRANSFORMATION_METHOD', trim(BOTH ',' FROM transformation_), attr_);
   OBJ_CONNECT_LU_TRANSFORM_API.MODIFY__(info_, objid_, objversion_, attr_, 'DO');

   RETURN trim(BOTH ',' FROM transformation_);
END Get_Transformation___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Obj_Connect_Lu_Transform_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   system_defined_  VARCHAR2(5);
   modified_by_     VARCHAR2(30);
BEGIN
   IF(key_.target_lu_name IS NOT NULL AND key_.source_lu_name IS NOT NULL AND  key_.service_name IS NOT NULL) THEN
      SELECT modified_by
         INTO  modified_by_
         FROM  obj_connect_lu_transform_tab
         WHERE target_lu_name = key_.target_lu_name
         AND   source_lu_name = key_.source_lu_name
         AND   service_name = key_.service_name;
      END IF;
   system_defined_ := Obj_Connect_Lu_Transform_API.Get_System_Defined(key_.target_lu_name, key_.source_lu_name, key_.service_name);

 IF ((system_defined_ = 'TRUE') AND (modified_by_ IS NULL)) THEN
     Client_SYS.Add_Warning(lu_name_, 'OCULTSYSDEFMOD: Looks up a localized string similar to Modifying a system defined transformation rule may result unexpected functional behaviors.');
   END IF;
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Delete___ (
   etag_   IN OUT VARCHAR2,
   key_    IN  Obj_Connect_Lu_Transform_Key,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   system_defined_  VARCHAR2(5);
   modified_by_     VARCHAR2(30);
BEGIN
   IF(key_.target_lu_name IS NOT NULL AND key_.source_lu_name IS NOT NULL AND  key_.service_name IS NOT NULL) THEN
      SELECT modified_by
         INTO  modified_by_
         FROM  obj_connect_lu_transform_tab
         WHERE target_lu_name = key_.target_lu_name
         AND   source_lu_name = key_.source_lu_name
         AND   service_name = key_.service_name;
      END IF;
   system_defined_ := Obj_Connect_Lu_Transform_API.Get_System_Defined(key_.target_lu_name, key_.source_lu_name, key_.service_name);

 IF ((system_defined_ = 'TRUE') AND (modified_by_ IS NULL)) THEN
     Client_SYS.Add_Warning(lu_name_, 'OCULTSYSDEFDEL: Looks up a localized string similar to Deleting a system defined transformation rule may result unexpected functional behaviors.');

   END IF;
   super(etag_, key_, info_, action_);
END CRUD_Delete___;






