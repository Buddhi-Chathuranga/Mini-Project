-----------------------------------------------------------------------------
--
--  Logical unit: FormulaHandling
--  Component:    APPSRV
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Check_Valid___(
   formula_id_ IN VARCHAR2 )
IS
BEGIN
   IF (Formula_API.Get_Objstate(formula_id_) = Formula_API.DB_VALID) THEN
      Error_SYS.Record_General(lu_name_,'NO_MOD_ALLOWED: Valid formulas can not be modified.');
   END IF;
END Check_Valid___;

@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Formula_Item_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   rec_  Formula_Item_Rec;
BEGIN
   Add_To_Rec_From_Attr___(attr_, rec_);
   Check_Valid___(rec_.formula_id);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Formula_Item_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
BEGIN
   Check_Valid___(key_.formula_id);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Formula_Item_Variable_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
BEGIN
   Check_Valid___(key_.formula_id);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;

@Override
PROCEDURE CRUD_Delete___ (
   etag_   IN OUT VARCHAR2,
   key_    IN  Formula_Item_Key,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
BEGIN
   Check_Valid___(key_.formula_id);
   super(etag_, key_, info_, action_);
END CRUD_Delete___;

FUNCTION Test_Formula___(
   formula_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   result_  VARCHAR2(2000);
   valid_   VARCHAR2(50);
BEGIN
   Formula_API.Test_Formula(result_, valid_, formula_id_);
   RETURN (valid_ != 'FALSE');
END Test_Formula___;

FUNCTION Fetch_Formula_Item_Enumeration___(
   item_type_ IN VARCHAR2 ) RETURN Formula_Item_Enumeration_Struct_Arr
IS
   enumeration_string_        VARCHAR2(2000);
   count_                     NUMBER;
   enumeration_list_          Utility_SYS.STRING_TABLE;
   enumeration_record_        Formula_Item_Enumeration_Struct_Rec;
   enumeration_table_         Formula_Item_Enumeration_Struct_Arr;
BEGIN
   CASE item_type_
      WHEN 'OPERATOR' THEN
         Arithmetic_Operator_API.Enumerate(enumeration_string_);
      WHEN 'FUNCTION' THEN
         Number_Function_API.Enumerate(enumeration_string_);
      WHEN 'VARIABLE' THEN
         Formula_Variable_API.Enumerate(enumeration_string_);
      ELSE
         enumeration_string_ := NULL;
   END CASE;
   Utility_SYS.Tokenize(string_        => enumeration_string_,
                        delimiter_     => Client_SYS.field_separator_,
                        output_table_  => enumeration_list_,
                        token_count_   => count_);
   enumeration_table_ := Formula_Item_Enumeration_Struct_Arr();
   IF (enumeration_list_.count <> 0) THEN
      FOR i IN enumeration_list_.FIRST..enumeration_list_.LAST LOOP
         enumeration_record_.item_type := item_type_;
         enumeration_record_.variable_id := enumeration_list_(i);
         IF (item_type_ = 'VARIABLE') THEN
            enumeration_record_.description := Formula_Variable_API.Get_Description(enumeration_list_(i));
         ELSE
            enumeration_record_.description := NULL;
         END IF;
         enumeration_table_.extend(1);
         enumeration_table_(i) := enumeration_record_;
      END LOOP;
   END IF;
   RETURN enumeration_table_;
END Fetch_Formula_Item_Enumeration___;
