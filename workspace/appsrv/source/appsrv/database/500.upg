-----------------------------------------------------------------------------
--  Module : APPSRV
--
--  Purpose: Upgrade database objects for IFS/Application Services
--           from version 4.1.0 to 5.0.0
--
--  File   : 500.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  --------------------------------------------------
--  180228   PRDALK  STRSA-36328, Added indices MEDIA_ARCHIVE_RK, MEDIA_ARCHIVE_PK for the MEDIA_ARCHIVE_TAB.
--  180103   NISMLK  STRMF-16704, Remove records in MEDIA_REPORT_TAB and MEDIA_LIBRARY_REPORT_TAB for obsoleted SHOP_ORDER_PICK_LISTS_REP and SHOP_ORDER_WARE_PICK_LISTS_REP reports.
--  171120   MDAHSE  STRSA-15472, Set Default Position for all map position records.
--  170913   PRDALK  STRSA-29723, Merged Bug 135941, Added MEDIA_ARCHIVE_TAB and new columns to MEDIA_ITEM_TAB.
--  170518   CLEKLK  STRSA-25111, Merged Bug 135775, Corrected the index WORK_TIME_COUNTER_DESC_IX2 index which was renamed from the WORK_TIME_COUNTER_DESC_2_IX
--  170407   MDAHSE  STRSA-15472: Copy data from virt_map_position_tab to map_position_tab and step up sequence.
--  170316   MDAHSE  STRSA-15472: No max value on the Map Position sequence.
--  170225   safalk  STRSA-17722, Code review
--  161201   CHGULK  FINHR-2065 , Added new column fetch_jurisdiction_code.
--  161121   MDAHSE  STRSA-15472, Add table MAP_POSITION_TAB, plus indexes and sequence.
--  160714   NISMLK  STRMF-6065, Added LOCKED to MEDIA_LIBRARY_TAB.
--  160510   RaNhlk  STRMF-4245, Add ROWSTATE to QUA_DISPOSITION_CODE_TAB.
--  160505   chdelk  STRMF_4246, Add ROWSTATE to QUA_NON_CONFORMANCE_TAB.
--  151029   SamGLK  STRSA-757, Created.
-----------------------------------------------------------------------------

SET SERVEROUTPUT ON
EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_1');
PROMPT Start upgrading with 500.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------

-- ***** MAP_POSITION_SEQ Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_2');
PROMPT Create database sequence MAP_POSITION_SEQ

DECLARE
   sequence_name_ VARCHAR2(30) := 'MAP_POSITION_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 MINVALUE 1 NOMAXVALUE NOCYCLE', TRUE);
END;
/

-- ***** MAP_POSITION_SEQ End *****

---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ----------------------------
---------------------------------------------------------------------------------------------

-- ***** Iso_Currency_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_3');
PROMPT Adding currency_number TO iso_currency_tab
DECLARE
   columns_      Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_NUMBER', 'NUMBER', 'Y');
   Database_SYS.Alter_Table('ISO_CURRENCY_TAB', columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_4');
PROMPT Updating column currency_number in iso_currency_tab
DECLARE
   columns_      Database_SYS.ColumnTabType;

   PROCEDURE Update_Currency_Number (
      currency_code_    IN VARCHAR2,
      currency_number_  IN NUMBER )
   IS
   BEGIN
      UPDATE iso_currency_tab
      SET currency_number = currency_number_,
          rowversion = SYSDATE
      WHERE currency_code = currency_code_
      AND currency_number IS NULL;
   END Update_Currency_Number;
BEGIN
   Update_Currency_Number('AED',784);
   Update_Currency_Number('AFN',971);
   Update_Currency_Number('ALL',8);
   Update_Currency_Number('AMD',51);
   Update_Currency_Number('ANG',532);
   Update_Currency_Number('AOA',973);
   Update_Currency_Number('ARS',32);
   Update_Currency_Number('AUD',36);
   Update_Currency_Number('AWG',533);
   Update_Currency_Number('AZN',944);
   Update_Currency_Number('BAM',977);
   Update_Currency_Number('BBD',52);
   Update_Currency_Number('BDT',50);
   Update_Currency_Number('BGN',975);
   Update_Currency_Number('BHD',48);
   Update_Currency_Number('BIF',108);
   Update_Currency_Number('BMD',60);
   Update_Currency_Number('BND',96);
   Update_Currency_Number('BOB',68);
   Update_Currency_Number('BRL',986);
   Update_Currency_Number('BSD',44);
   Update_Currency_Number('BTN',64);
   Update_Currency_Number('BWP',72);
   Update_Currency_Number('BYR',974);
   Update_Currency_Number('BZD',84);
   Update_Currency_Number('CAD',124);
   Update_Currency_Number('CDF',976);
   Update_Currency_Number('CHE',947);
   Update_Currency_Number('CHF',756);
   Update_Currency_Number('CHW',948);
   Update_Currency_Number('CLP',152);
   Update_Currency_Number('CNY',156);
   Update_Currency_Number('COP',170);
   Update_Currency_Number('COU',970);
   Update_Currency_Number('CRC',188);
   Update_Currency_Number('CUC',931);
   Update_Currency_Number('CUP',192);
   Update_Currency_Number('CVE',132);
   Update_Currency_Number('CZK',203);
   Update_Currency_Number('DJF',262);
   Update_Currency_Number('DKK',208);
   Update_Currency_Number('DOP',214);
   Update_Currency_Number('DZD',12);
   Update_Currency_Number('EGP',818);
   Update_Currency_Number('ERN',232);
   Update_Currency_Number('ETB',230);
   Update_Currency_Number('EUR',978);
   Update_Currency_Number('FJD',242);
   Update_Currency_Number('FKP',238);
   Update_Currency_Number('GBP',826);
   Update_Currency_Number('GEL',981);
   Update_Currency_Number('GHS',936);
   Update_Currency_Number('GIP',292);
   Update_Currency_Number('GMD',270);
   Update_Currency_Number('GNF',324);
   Update_Currency_Number('GTQ',320);
   Update_Currency_Number('GYD',328);
   Update_Currency_Number('HKD',344);
   Update_Currency_Number('HNL',340);
   Update_Currency_Number('HRK',191);
   Update_Currency_Number('HTG',332);
   Update_Currency_Number('HUF',348);
   Update_Currency_Number('IDR',360);
   Update_Currency_Number('ILS',376);
   Update_Currency_Number('INR',356);
   Update_Currency_Number('IQD',368);
   Update_Currency_Number('IRR',364);
   Update_Currency_Number('ISK',352);
   Update_Currency_Number('JMD',388);
   Update_Currency_Number('JOD',400);
   Update_Currency_Number('JPY',392);
   Update_Currency_Number('KES',404);
   Update_Currency_Number('KGS',417);
   Update_Currency_Number('KHR',116);
   Update_Currency_Number('KMF',174);
   Update_Currency_Number('KPW',408);
   Update_Currency_Number('KRW',410);
   Update_Currency_Number('KWD',414);
   Update_Currency_Number('KYD',136);
   Update_Currency_Number('KZT',398);
   Update_Currency_Number('LAK',418);
   Update_Currency_Number('LBP',422);
   Update_Currency_Number('LKR',144);
   Update_Currency_Number('LRD',430);
   Update_Currency_Number('LSL',426);
   Update_Currency_Number('LYD',434);
   Update_Currency_Number('MAD',504);
   Update_Currency_Number('MDL',498);
   Update_Currency_Number('MGA',969);
   Update_Currency_Number('MKD',807);
   Update_Currency_Number('MMK',104);
   Update_Currency_Number('MNT',496);
   Update_Currency_Number('MOP',446);
   Update_Currency_Number('MRO',478);
   Update_Currency_Number('MUR',480);
   Update_Currency_Number('MVR',462);
   Update_Currency_Number('MXN',484);
   Update_Currency_Number('MYR',458);
   Update_Currency_Number('MZN',943);
   Update_Currency_Number('NAD',516);
   Update_Currency_Number('NGN',566);
   Update_Currency_Number('NIO',558);
   Update_Currency_Number('NOK',578);
   Update_Currency_Number('NPR',524);
   Update_Currency_Number('NZD',554);
   Update_Currency_Number('OMR',512);
   Update_Currency_Number('PAB',590);
   Update_Currency_Number('PEN',604);
   Update_Currency_Number('PGK',598);
   Update_Currency_Number('PHP',608);
   Update_Currency_Number('PKR',586);
   Update_Currency_Number('PLN',985);
   Update_Currency_Number('PYG',600);
   Update_Currency_Number('QAR',634);
   Update_Currency_Number('RON',946);
   Update_Currency_Number('RSD',941);
   Update_Currency_Number('RWF',646);
   Update_Currency_Number('SAR',682);
   Update_Currency_Number('SBD',90);
   Update_Currency_Number('SCR',690);
   Update_Currency_Number('SDG',938);
   Update_Currency_Number('SEK',752);
   Update_Currency_Number('SGD',702);
   Update_Currency_Number('SHP',654);
   Update_Currency_Number('SLL',694);
   Update_Currency_Number('SOS',706);
   Update_Currency_Number('SRD',968);
   Update_Currency_Number('SSP',728);
   Update_Currency_Number('STD',678);
   Update_Currency_Number('SVC',222);
   Update_Currency_Number('SYP',760);
   Update_Currency_Number('SZL',748);
   Update_Currency_Number('THB',764);
   Update_Currency_Number('TJS',972);
   Update_Currency_Number('TMT',934);
   Update_Currency_Number('TND',788);
   Update_Currency_Number('TOP',776);
   Update_Currency_Number('TRY',949);
   Update_Currency_Number('TTD',780);
   Update_Currency_Number('TWD',901);
   Update_Currency_Number('TZS',834);
   Update_Currency_Number('UAH',980);
   Update_Currency_Number('UGX',800);
   Update_Currency_Number('USD',840);
   Update_Currency_Number('UYI',940);
   Update_Currency_Number('UYU',858);
   Update_Currency_Number('UZS',860);
   Update_Currency_Number('VEF',937);
   Update_Currency_Number('VND',704);
   Update_Currency_Number('VUV',548);
   Update_Currency_Number('WST',882);
   Update_Currency_Number('XAF',950);
   Update_Currency_Number('XAG',961);
   Update_Currency_Number('XAU',959);
   Update_Currency_Number('XCD',951);
   Update_Currency_Number('XDR',960);
   Update_Currency_Number('XOF',952);
   Update_Currency_Number('XPD',964);
   Update_Currency_Number('XPF',953);
   Update_Currency_Number('XPT',962);
   Update_Currency_Number('XTS',963);
   Update_Currency_Number('XXX',999);
   Update_Currency_Number('YER',886);
   Update_Currency_Number('ZAR',710);
   Update_Currency_Number('ZMW',967);
   Update_Currency_Number('ZWL',932);
   COMMIT;
END;
/
-- ***** Iso_Currency_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Iso_Time_Zone_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_5');
PROMPT Recreate ISO_TIME_ZONE_UIX1 TO be UNIQUE
DECLARE
   index_name_ VARCHAR2(30) := 'ISO_TIME_ZONE_UIX1';
   table_name_ VARCHAR2(30) := 'ISO_TIME_ZONE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'USED_IN_APPL');
   Database_SYS.Set_Table_Column(columns_, 'TIME_ZONE_CODE');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** Iso_Time_Zone_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Qua_Non_Conformance_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_6');
PROMPT Add ROWSTATE to QUA_NON_CONFORMANCE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'QUA_NON_CONFORMANCE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_7');
PROMPT UPDATE ROWSTATE IN  QUA_NON_CONFORMANCE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'QUA_NON_CONFORMANCE_TAB';
   sql_stmt  VARCHAR2(200);
BEGIN
   IF(Database_SYS.Column_Exist('QUA_NON_CONFORMANCE_TAB','OBSOLETE')) THEN
     sql_stmt := 'UPDATE QUA_NON_CONFORMANCE_TAB
                  SET rowstate = DECODE(obsolete,''FALSE'',''Active'',''Blocked'')';
      EXECUTE IMMEDIATE sql_stmt;
   END IF;
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);

END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_8');
PROMPT make OBSOLETE COLUMN as nullable in QUA_NON_CONFORMANCE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'QUA_NON_CONFORMANCE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'OBSOLETE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/

-- ***** Qua_Non_Conformance_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** QUA_DISPOSITION_CODE_TAB Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_9');
PROMPT Add ROWSTATE AND make OBSOLETE nullable IN QUA_DISPOSITION_CODE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'QUA_DISPOSITION_CODE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OBSOLETE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_10');
PROMPT UPDATE ROWSTATE IN  QUA_DISPOSITION_CODE_TAB
DECLARE
columns_    Database_SYS.ColumnTabType;
table_name_ VARCHAR2(30) := 'QUA_DISPOSITION_CODE_TAB';
BEGIN

   UPDATE  QUA_DISPOSITION_CODE_TAB
   SET rowstate = DECODE(obsolete,'FALSE','Active','Blocked');

   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);

END;
/

-- ***** QUA_DISPOSITION_CODE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** MEDIA_LIBRARY_TAB Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_11');
PROMPT Adding LOCKED to MEDIA_LIBRARY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'MEDIA_LIBRARY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_:= Database_SYS.Set_Column_values('LOCKED', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column (table_name_, 'A', column_, TRUE);
END;
/


-- ***** MEDIA_LIBRARY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ISO_COUNTRY_TAB Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_12');
PROMPT Changing  SYSTEM_ADDED COLUMN IN  ISO_COUNTRY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ISO_COUNTRY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SYSTEM_ADDED', 'VARCHAR2(1)', 'N', '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_13');
PROMPT Adding new column fetch_jurisdiction_code to ISO_COUNTRY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ISO_COUNTRY_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'FETCH_JURISDICTION_CODE', 'VARCHAR2(20)');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_14');
PROMPT Update new column fetch_jurisdiction_code
DECLARE
   table_name_         VARCHAR2(30)  := 'ISO_COUNTRY_TAB';
   column_name_        VARCHAR2(30)  := 'SALES_TAX';
   stmt_               VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, column_name_)) THEN
      stmt_ := 'UPDATE iso_country_tab t'||
      ' SET fetch_jurisdiction_code ='||
      ' CASE WHEN (t.sales_tax = ''Y'' ) THEN ''TRUE'''||
           ' WHEN (t.sales_tax = ''N'' ) THEN ''FALSE'''||
           ' ELSE ''FALSE'' END'||
      ' WHERE t.fetch_jurisdiction_code IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_15');
PROMPT Update column fetch_jurisdiction_code to NOT NULL
DECLARE
   table_name_       VARCHAR2(30) := 'ISO_COUNTRY_TAB';
   column_           Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('FETCH_JURISDICTION_CODE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_16');
PROMPT Update column sales_tax to NULLABLE
DECLARE
   table_name_       VARCHAR2(30) := 'ISO_COUNTRY_TAB';
   column_           Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_TAX', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** ISO_COUNTRY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ISO_CURRENCY_TAB Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_17');
PROMPT Changing  SYSTEM_ADDED COLUMN IN  ISO_CURRENCY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ISO_CURRENCY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SYSTEM_ADDED', 'VARCHAR2(1)', 'N', '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** ISO_CURRENCY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** Map_Position_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_18');
PROMPT Create table MAP_POSITION_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'MAP_POSITION_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'POSITION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(32)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF', 'VARCHAR2(256)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LONGITUDE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LATITUDE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALTITUDE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEFAULT_POSITION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOTES', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_BY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MODIFIED_BY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MODIFIED_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_19');
PROMPT Setting values for new attributes CreatedDate and CreatedBy

UPDATE map_position_tab
SET created_date = rowversion,
    modified_date = rowversion,
    created_by = '&APPLICATION_OWNER',
    modified_by = '&APPLICATION_OWNER'
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_20');
PROMPT Create index primary key MAP_POSITION_PK

DECLARE
   index_name_ VARCHAR2(30) := 'MAP_POSITION_PK';
   table_name_ VARCHAR2(30) := 'MAP_POSITION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'POSITION_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_21');
PROMPT Create ROWKEY index

DECLARE
   index_name_ VARCHAR2(30) := 'MAP_POSITION_RK';
   table_name_ VARCHAR2(30) := 'MAP_POSITION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_22');
PROMPT Create index MAP_POSITION_IX1

DECLARE
   index_name_ VARCHAR2(30) := 'MAP_POSITION_IX1';
   table_name_ VARCHAR2(30) := 'MAP_POSITION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LU_NAME');
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_23');
PROMPT Copy data from virt_map_position_tab to map_position_tab

BEGIN
   IF Database_SYS.Table_Exist ('VIRT_MAP_POSITION_TAB') THEN
      EXECUTE IMMEDIATE 'INSERT INTO map_position_tab
                       (position_id,
                        lu_name,
                        key_ref,
                        longitude,
                        latitude,
                        rowversion,
                        created_date,
                        modified_date,
                        created_by,
                        modified_by,
                        rowkey)
                      SELECT
                        position_id,
                        lu_name,
                        key_ref,
                        longitude,
                        latitude,
                        rowversion,
                        rowversion,
                        rowversion,
                        :createdby,
                        :modifiedby,
                        sys_guid()
                        FROM virt_map_position_tab'
      USING '&APPLICATION_OWNER', '&APPLICATION_OWNER';
      COMMIT;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_24');
PROMPT Step up map_position_seq according to max value in map_position_tab

DECLARE
   max_pos_   NUMBER;
   curr_pos_  NUMBER;
BEGIN

   -- Increase the current value in MAP_POSITION_SEQ to match the
   -- highest position number used. There is no way to modify the
   -- sequence object apart from calling its NEXTVAL function, so
   -- we need to do that in a loop.

   SELECT map_position_seq.NEXTVAL INTO curr_pos_ FROM dual;
   SELECT MAX(position_id) INTO max_pos_ FROM map_position_tab;

   WHILE curr_pos_ < max_pos_ LOOP
     SELECT map_position_seq.NEXTVAL INTO curr_pos_ FROM dual;
   END LOOP;

END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_25');
PROMPT Set Default Position for all map position records

DECLARE
   CURSOR objects IS
     SELECT lu_name, key_ref
     FROM map_position_tab
     GROUP BY lu_name, key_ref;

   CURSOR pos_for_object (lu_name_ IN VARCHAR2,
                          key_ref_ IN VARCHAR2) IS
     SELECT rowid
     FROM map_position_tab
     WHERE lu_name = lu_name_
     AND key_ref   = key_ref_
     -- This ORDER BY is not an optimal way to know what would be the default
     -- position, but we did the same thing in the old integration to Scheduling.
     ORDER BY rowversion DESC;

   rowcount_ NUMBER;

BEGIN
   -- First loop over all unique objects that has positions
   FOR obj_ IN objects
   LOOP
      -- For each object, set the first (newest, due to the ORDER BY)
      -- position as the default one and the rest as not default.
      FOR pos_ IN pos_for_object (obj_.lu_name, obj_.key_ref)
      LOOP
         rowcount_ := pos_for_object%ROWCOUNT; -- Cannot use %ROWCOUNT in the DECODE...
         UPDATE map_position_tab
           SET default_position = DECODE (rowcount_,
                                          1, 1, -- First (1) record = Default
                                          0)    -- Other records = Not default
           WHERE rowid = pos_.rowid;
      END LOOP;
   END LOOP;
END;
/

COMMIT;

-- ***** Map_Position_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Iso_Language_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_26');
PROMPT REMOVING OBSOLETE LANGUAGE CODES
DECLARE
   PROCEDURE Remove_Obsolete_Lan_Code___ (
      language_code_ IN VARCHAR2, 
      new_language_code_ IN VARCHAR2)
   IS
      info_         VARCHAR2(4000);
      exist_        NUMBER;
      table_name_   VARCHAR2(4000);
      column_exist_  NUMBER;
   
      CURSOR get_iso_language(language_code_ VARCHAR2) IS
         SELECT 1
         FROM   iso_language_tab
         WHERE  language_code = language_code_ 
         AND    used_in_appl = 'FALSE';
      
      CURSOR get_iso_language_cols IS
         SELECT rs.col_name, rs.lu_name, rs.view_name
         FROM   reference_sys_tab rs
         WHERE  rs.ref_name = 'IsoLanguage'
         AND    rs.option_name <> 'NOCHECK';
      
      CURSOR get_table(lu_name_ VARCHAR2) IS
         SELECT table_name
         FROM dictionary_sys_tab
         WHERE lu_name = lu_name_;
      
   BEGIN
      OPEN get_iso_language(language_code_);
      FETCH get_iso_language INTO exist_;
      IF (get_iso_language%FOUND) THEN
         CLOSE get_iso_language;
            FOR rec_ IN get_iso_language_cols LOOP
               
               OPEN get_table(rec_.lu_name);
               FETCH get_table INTO table_name_;
               CLOSE get_table;

               IF (table_name_ IS NULL AND (UPPER(rec_.lu_name) = UPPER(REPLACE( rec_.view_name, '_', '' ) ))) THEN
                  table_name_ := rec_.view_name || '_TAB';
               END IF;
               IF (table_name_ IS NOT NULL AND Database_SYS.Column_Exist(table_name_, rec_.col_name)) THEN               
                 EXECUTE IMMEDIATE 'UPDATE ' || table_name_ || ' ' ||
                        'SET    ' || rec_.col_name || ' = '  || ''''|| new_language_code_   || ''''|| ' ' ||
                        'WHERE  ' || rec_.col_name || ' =  ' || ''''|| language_code_ || ''''; 
                 COMMIT;
               END IF;
            END LOOP;  
            
            DELETE
               FROM  iso_language_tab
               WHERE language_code = language_code_;
      ELSE
         CLOSE get_iso_language;
      END IF;
   END;
   
   BEGIN  
      Remove_Obsolete_Lan_Code___('in', 'id');
      Remove_Obsolete_Lan_Code___('iw', 'he');
      Remove_Obsolete_Lan_Code___('ji', 'yi');
   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_27');
PROMPT Setting English (en) to true in used_in_appl. 
BEGIN
   UPDATE iso_language_tab
   SET used_in_appl = 'TRUE'
   WHERE language_code = 'en'
   AND used_in_appl = 'FALSE';
   COMMIT;
END;
/


-- ***** Iso_Language_tab End *****

-- ***** WORK_TIME_COUNTER_DESC_TAB Start *****
EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_28');
PROMPT FIXING INDEX ISSUE IN WORK_TIME_COUNTER_DESC_TAB 
DECLARE
   columns_          Installation_SYS.ColumnTabType;
   table_name_         VARCHAR2(30)    := 'WORK_TIME_COUNTER_DESC_TAB';
   index_name_         VARCHAR2(30)    := 'WORK_TIME_COUNTER_DESC_IX2';
BEGIN
      IF (Database_SYS.Index_Exist('WORK_TIME_COUNTER_DESC_2_IX')) THEN
         Database_SYS.Remove_Indexes(table_name_, 'WORK_TIME_COUNTER_DESC_2_IX', true);
      END IF;
      IF (Database_SYS.Index_Exist(index_name_)) THEN
         Database_SYS.Remove_Indexes(table_name_, index_name_, true);	
      END IF;     
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'CALENDAR_ID');
      Installation_SYS.Set_Table_Column(columns_, 'START_TIME DESC');
      Installation_SYS.Set_Table_Column(columns_, 'END_TIME');
      Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);           
END;
/  

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_29');
PROMPT creating INDEX WORK_TIME_COUNTER_DESC_IX5 
DECLARE
   index_name_ VARCHAR2(30) := 'WORK_TIME_COUNTER_DESC_IX5';
   table_name_ VARCHAR2(30) := 'WORK_TIME_COUNTER_DESC_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CALENDAR_ID');
   Database_SYS.Set_Table_Column(columns_, 'WORK_DAY');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WORK_TIME_COUNTER_DESC_TAB End *****


-- ***** MEDIA_ITEM_TAB Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_30');
PROMPT ADD COLUMNS ARCHIVED, ARCHIVE_NO, LATEST_ACCESS_DATE
DECLARE           
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'MEDIA_ITEM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVED',            'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_NO',          'NUMBER',      'Y');
   Database_SYS.Set_Table_Column(columns_, 'LATEST_ACCESS_DATE',  'DATE',        'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_31');
PROMPT UPDATE THE LATEST_ACCESS_DATE FOR ALL ROWS
BEGIN
   UPDATE MEDIA_ITEM_TAB 
   SET LATEST_ACCESS_DATE = SYSDATE,
       ARCHIVED = 'FALSE';
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_32');
PROMPT MAKE THE LATEST_ACCESS_DATE NOT NULLABLE
DECLARE           
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'MEDIA_ITEM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVED',            'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LATEST_ACCESS_DATE',  'DATE',        'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
-- ***** MEDIA_ITEM_TAB End *****


-- ***** MEDIA_ARCHIVE_TAB Start *****  

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_33');
PROMPT CREATE NEW TABLE MEDIA_ARCHIVE_TAB
DECLARE           
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'MEDIA_ARCHIVE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_METHOD', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_REF1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_REF2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_REF3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_REF4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_REF5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WALLET_PATH', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WALLET_PASSWORD', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_34');
PROMPT Creating sequence MEDIA_ARCHIVE_SEQ
DECLARE
   sequence_     VARCHAR2(32) := 'MEDIA_ARCHIVE_SEQ';
   parameters_   VARCHAR2(128):= 'START WITH 1 INCREMENT BY 1';
BEGIN
   Database_SYS.Create_Sequence(sequence_, parameters_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_35');
PROMPT CONSTRAINTS ON MEDIA_ARCHIVE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_PK';
   table_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_RK';
   table_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


-- ***** MEDIA_ARCHIVE_TAB End *****  

-- ***** MEDIA_ITEM_LANGUAGE_TAB Start *****  

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_36');
PROMPT ADD COLUMNS ARCHIVED, ARCHIVE_NO, LATEST_ACCESS_DATE
DECLARE           
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'MEDIA_ITEM_LANGUAGE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVED',            'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_NO',          'NUMBER',      'Y');
   Database_SYS.Set_Table_Column(columns_, 'LATEST_ACCESS_DATE',  'DATE',        'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_37');
PROMPT UPDATE THE LATEST_ACCESS_DATE FOR ALL ROWS
BEGIN
   UPDATE MEDIA_ITEM_LANGUAGE_TAB 
   SET LATEST_ACCESS_DATE = SYSDATE,
       ARCHIVED = 'FALSE';
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_38');
PROMPT MAKE THE LATEST_ACCESS_DATE NOT NULLABLE
DECLARE           
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'MEDIA_ITEM_LANGUAGE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVED',            'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LATEST_ACCESS_DATE',  'DATE',        'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

-- ***** MEDIA_ITEM_LANGUAGE_TAB End *****  

-- ***** MEDIA_ARCHIVE_DELETE_ITEM_TAB Start *****  

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_39');
PROMPT CREATE NEW TABLE MEDIA_ARCHIVE_DELETE_ITEM_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_DELETE_ITEM_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LANGUAGE_CODE', 'VARCHAR2(2)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ARCHIVE_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_DELETE_ITEM_PK';
   table_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_DELETE_ITEM_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID');
   Database_SYS.Set_Table_Column(columns_, 'LANGUAGE_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_DELETE_ITEM_RK';
   table_name_ VARCHAR2(30) := 'MEDIA_ARCHIVE_DELETE_ITEM_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** MEDIA_ARCHIVE_DELETE_ITEM_TAB End *****  

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_40');
PROMPT Removing records in MEDIA_REPORT_TAB for SHOP_ORDER_PICK_LISTS_REP and SHOP_ORDER_WARE_PICK_LISTS_REP obsolete reports. 
BEGIN
   DELETE FROM MEDIA_REPORT_TAB
    WHERE report_id IN ('SHOP_ORDER_PICK_LISTS_REP', 'SHOP_ORDER_WARE_PICK_LISTS_REP');
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_41');
PROMPT Removing records in MEDIA_LIBRARY_REPORT_TAB for SHOP_ORDER_PICK_LISTS_REP and SHOP_ORDER_WARE_PICK_LISTS_REP obsolete reports. 
BEGIN
   DELETE FROM MEDIA_LIBRARY_REPORT_TAB
    WHERE report_id IN ('SHOP_ORDER_PICK_LISTS_REP', 'SHOP_ORDER_WARE_PICK_LISTS_REP');
   COMMIT;
END;
/

---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_42');
PROMPT Removing Unused views from Database
BEGIN
   Database_SYS.Remove_View('MEDIA_REPORT_LOCALIZE', TRUE);
   Database_SYS.Remove_View('WORK_TIME_INCL_RES_PUB', TRUE);
   Database_SYS.Remove_View('TECHNICAL_SPECIFICATION_ATTR2', TRUE);
   Database_SYS.Remove_View('TECHNICAL_SPECIFICATION_ATTR', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Timestamp_43');
PROMPT Upgrade statements in file 500.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','500.upg','Done');

