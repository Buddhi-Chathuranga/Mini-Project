-------------------------------------------------------------------------------
--
--  Filename      : 410.upg
--  Module        : APPSRV
--  Purpose       : Upgrade database objects for IFS/Application Services
--                  from version 4.0.0 to 4.1.0
--
--  Date    Sign    History
--  ------  ----    ---------------------------------------------------------------------
--  131003  japelk  Created.
--  131003  japelk  TIBE-3645, following entries are APP8 SP2  merge related.
--  120926  Dhselk  Optimised code and made to standards (=> 121005_QA_APPSRV.cdb).
--  120919  LaRelk  Created and Merged all corrections into this unified file (=> 121005_QA_APPSRV.cdb).
--  120909  ArAmlk  Added show_in_chart not null column to table qua_non_conformance_tab (=> 121005_QA_APPSRV.cdb).
--  120403  ArAmLk  Create table QUA_DISPOSITION_CODE_TAB and copy data from MRB_DISPOSITION_CODE_TAB and NCR_DISPOSITION_CODE_TAB (=> 121005_QA_APPSRV.cdb).
--  120223  SUJALK  Bug Id 99698, Added column Media_File to Media_Item_Tab.
--  121122  ErSrLK  Bug 106916, Created. Introduced a new sequence APPSRV_MEDIA_ITEM_SEQ to support retrieval of the next Media Item ID.
--  121122  ErSrLK  Bug 107148, Created. Introduced a new index WORK_TIME_COUNTER_DESC_4_IX in WORK_TIME_COUNTER_DESC_TAB to support fast retrieval of range scans.
--  130206  AMCHLK  Added new columns "Modified By" and "System Defined"  to OBJ_CONNECT_LU_TRANSFORM_TAB, update "System Defined" value for exisiting data.                              
--  130215  AMCHLK  Added new column "Modified Date" to OBJ_CONNECT_LU_TRANSFORM_TAB.  
--  130322  ErSrLK  Bug 109104, Created. Introduced a new sequence APPSRV_MEDIA_LIBRARY_SEQ to support retrieval of the next Media Library ID.
--  130909  chanlk  130909_CAHOOK_APPSRV.cdb
--  140806  THIMLK  PRMF-63, Merged LCS Patch 112393.
--  140806          130926  THIMLK  Bug 112393, Added the column, private_media_item into Media_Item_Tab. 
--  121026  KrRaLK  Bug 106057, Merged changes from bug 106057.
--  140901  safalk  Merged changes from 140901_PRSA-2345_APPSRV.cdb.
--  150208  KrRaLK  Merged changes from 150208_PRSA-6365_Appsrv.cdb.
------------------------------------------------------------------------------------------


DEFINE PARENT_MODULE = APPSRV
DEFINE CHILD_MODULE  = APPSRB

SET SERVEROUTPUT ON


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_1');
PROMPT Rename nonstandard index in WORK_TIME_COUNTER_DESC_TAB
BEGIN
   Database_SYS.Rename_Index('WORK_TIME_COUNTER_DESC_1_IX','WORK_TIME_COUNTER_DESC_IX1',TRUE);
	Database_SYS.Rename_Index('WORK_TIME_COUNTER_DESC_2_IX','WORK_TIME_COUNTER_DESC_IX2',TRUE);
	Database_SYS.Rename_Index('WORK_TIME_COUNTER_DESC_3_IX','WORK_TIME_COUNTER_DESC_IX3',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_2');
PROMPT Rename nonstandard index in WORK_TIME_COUNTER_RES_TAB
BEGIN
   Database_SYS.Rename_Index('WORK_TIME_COUNTER_RES_1_IX','WORK_TIME_COUNTER_RES_IX1',TRUE);
	Database_SYS.Rename_Index('WORK_TIME_COUNTER_RES_2_IX','WORK_TIME_COUNTER_RES_IX2',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_3');
PROMPT Rename nonstandard index in MEDIA_LIBRARY_TAB
BEGIN
   Database_SYS.Rename_Index('MEDIA_LIBRARY_IX','MEDIA_LIBRARY_IX1',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_4');
PROMPT Rename nonstandard index AND constraint in TECHNICAL_OBJECT_REFERENCE_TAB
BEGIN
   Database_SYS.Rename_Index('TECHNICAL_OBJECT_REFERENCE_UIX','TECHNICAL_OBJECT_REF_UIX1',TRUE);
	Database_SYS.Rename_Index('TECHNICAL_OBJECT_REF_SPC_UIX','TECHNICAL_OBJECT_REF_UIX2',TRUE);
	Database_SYS.Rename_Index('TECHNICAL_OBJECT_KEYREF_UIX','TECHNICAL_OBJECT_REF_UIX3',TRUE);
	Database_SYS.Rename_Index('TECHNICAL_OBJECT_KEYREFSPC_UIX','TECHNICAL_OBJECT_REF_UIX4',TRUE);
	Database_SYS.Rename_Index('TECHNICAL_OBJECT_REF_CLASS_IX','TECHNICAL_OBJECT_REF_IX1',TRUE);
	Database_SYS.Rename_Constraint('TECHNICAL_OBJECT_REFERENCE_TAB','TECHNICAL_OBJECT_CONNECT_PK','TECHNICAL_OBJECT_REFERENCE_PK',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_5');
PROMPT Rename nonstandard constraint in TECHNICAL_ATTRIB_TEXT_TAB
BEGIN
   Database_SYS.Rename_Constraint('TECHNICAL_ATTRIB_TEXT_TAB','TECHNICAL_ATTRIB_VALUE_PK','TECHNICAL_ATTRIB_TEXT_PK',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_6');
PROMPT Rename nonstandard constraint in ISO_TIME_ZONE_TAB
BEGIN
   Database_SYS.Rename_Index('ISO_TIME_ZONE_UIX','ISO_TIME_ZONE_UIX1',TRUE);
END;
/
  

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_7');
PROMPT Rename nonstandard constraint in ISO_COUNTRY_TAB
BEGIN
   Database_SYS.Rename_Index('ISO_COUNTRY_UIX','ISO_COUNTRY_UIX1',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_8');
PROMPT Rename nonstandard constraint in ISO_CURRENCY_TAB
BEGIN
   Database_SYS.Rename_Index('ISO_CURRENCY_UIX','ISO_CURRENCY_UIX1',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_9');
PROMPT Rename nonstandard constraint in ISO_LANGUAGE_TAB
BEGIN
   Database_SYS.Rename_Index('ISO_LANGUAGE_UIX','ISO_LANGUAGE_UIX1',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_10');
PROMPT Rename nonstandard constraint in ISO_UNIT_TAB
BEGIN
   Database_SYS.Rename_Index('ISO_UNIT_UIX','ISO_UNIT_UIX1',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_11');
PROMPT Rename nonstandard constraint in WORK_TIME_COUNTER_TAB
BEGIN
   Database_SYS.Rename_Index('WORK_TIME_COUNTER_UIX','WORK_TIME_COUNTER_UIX1',TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_12');
PROMPT Adding new table QUA_DISPOSITION_CODE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'QUA_DISPOSITION_CODE_TAB';
   index_name_    VARCHAR2(30) := 'QUA_DISPOSITION_CODE_RK';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'DISPOSITION_CODE',        'VARCHAR2(25)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'DISPOSITION_DESCRIPTION', 'VARCHAR2(100)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'VERIFY_SCRAPPING',        'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'OBSOLETE',                'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'NOTES',                   'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column (columns_,'ROWKEY',                  'VARCHAR2(50)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',              'DATE',           'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DISPOSITION_CODE');
   Database_SYS.Create_Constraint(table_name_, 'QUA_DISPOSITION_CODE_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column (columns_ , 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_13');
PROMPT Adding new table QUA_NON_CONFORMANCE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'QUA_NON_CONFORMANCE_TAB';
   index_name_    VARCHAR2(30) := 'QUA_NON_CONFORMANCE_RK';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'NONCONFORMANCE_CODE',        'VARCHAR2(25)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'NONCONFORMANCE_DESCRIPTION', 'VARCHAR2(100)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'OBSOLETE',                   'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'NOTES',                      'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHOW_IN_CHART',              'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column (columns_,'ROWKEY',                     'VARCHAR2(50)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',           'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'NONCONFORMANCE_CODE');
   Database_SYS.Create_Constraint(table_name_, 'QUA_NON_CONFORMANCE_PK', columns_, 'P', '&IFSAPP_INDEX',NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column (columns_ , 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_14');
PROMPT Copy MRB registered disposition codes.
DECLARE
   stmt_         VARCHAR2(2000);
   num_          NUMBER ;
   
   CURSOR check_exist (disposition_code_  VARCHAR2) IS  
    SELECT 1
    FROM qua_disposition_code_tab
    WHERE disposition_code = disposition_code_ ;

BEGIN
      IF (Database_SYS.Table_Exist('MRB_DISPOSITION_CODE_TAB')) THEN
         stmt_ := 'BEGIN
         INSERT INTO qua_disposition_code_tab
         (disposition_code,
          disposition_description,
          verify_scrapping,
          obsolete,
          rowversion)
         SELECT disposition_code,
                disposition_description,
                verify_scrapping,
                ''FALSE'',
                SYSDATE
           FROM mrb_disposition_code_tab
          WHERE disposition_code NOT IN
                (SELECT disposition_code FROM qua_disposition_code_tab);
          END;';
         EXECUTE IMMEDIATE stmt_;
      ELSE
        num_ := 0;        
        OPEN check_exist ('*');
        FETCH check_exist INTO num_;
        CLOSE check_exist ;

        IF (num_= 0) THEN
         INSERT INTO qua_disposition_code_tab
            (disposition_code,
             disposition_description,
             verify_scrapping,
             obsolete,
             rowversion)
            VALUES
               ('*',
                'IFS Applications',
                'FALSE',
                'FALSE',
                SYSDATE);
        END IF;
       
        num_ := 0;        
        OPEN check_exist ('APPROVE');
        FETCH check_exist INTO num_;
        CLOSE check_exist ;

        IF (num_= 0) THEN        
         INSERT INTO qua_disposition_code_tab
            (disposition_code,
             disposition_description,
             verify_scrapping,
             obsolete,
             rowversion)
            VALUES
               ('APPROVE',
                'Approved',
                'FALSE',
                'FALSE',
                SYSDATE);
        END IF; 
  
        num_ := 0;        
        OPEN check_exist ('SCRAP');
        FETCH check_exist INTO num_;
        CLOSE check_exist ;

        IF (num_= 0) THEN                
         INSERT INTO qua_disposition_code_tab
            (disposition_code,
             disposition_description,
             verify_scrapping,
             obsolete,
             rowversion)
            VALUES
               ('SCRAP',
                'Scrapped',
                'TRUE',
                'FALSE',
                SYSDATE);
        END IF; 

      END IF;
      COMMIT;
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_15');
PROMPT Copy MRB registered non-conformance codes.
DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
      IF (Database_SYS.Table_Exist('MRB_CODE_TAB')) THEN
         stmt_ := 'BEGIN
         INSERT INTO qua_non_conformance_tab
            (nonconformance_code,
             nonconformance_description,
             notes,
             obsolete,
             show_in_chart,
             rowversion)
            SELECT mrb_code,
                   mrb_code_desc,
                   mrb_code_text,
                   ''FALSE'',
                   ''TRUE'',
                   SYSDATE
              FROM mrb_code_tab
             WHERE mrb_code NOT IN
                   (SELECT nonconformance_code FROM qua_non_conformance_tab);
         END;';

         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_16');
PROMPT Adding column MEDIA_FILE to MEDIA_ITEM_TAB
DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := 'MEDIA_ITEM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_); 
   Database_SYS.Set_Table_Column (columns_ , 'MEDIA_FILE', 'VARCHAR2(300)', 'Y' );
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_17');
PROMPT Creating Sequence APPSRV_MEDIA_ITEM_SEQ
DECLARE
   sequence_     VARCHAR2(30) := 'APPSRV_MEDIA_ITEM_SEQ';
   parameters_   VARCHAR2(500);
   next_item_id_ NUMBER;
BEGIN
   -- Retrieve the next item id
   SELECT (NVL(MAX(item_id), 999)+1) INTO next_item_id_ FROM media_item_tab;
   parameters_ := 'INCREMENT BY 1 START WITH '|| next_item_id_ ||' MINVALUE 1000 MAXVALUE 99999999999999 NOCYCLE NOCACHE NOORDER';
   Database_SYS.Create_Sequence(sequence_, parameters_, TRUE);
   COMMIT;
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_18');
PROMPT Creating new INDEX WORK_TIME_COUNTER_DESC_IX4
DECLARE
   table_name_    VARCHAR2(30) := 'WORK_TIME_COUNTER_DESC_TAB';
   index_name_    VARCHAR2(30) := 'WORK_TIME_COUNTER_DESC_IX4';
   columns_       Database_SYS.ColumnTabType;
   old_index_     VARCHAR2(30) := 'WORK_TIME_COUNTER_DESC_4_IX';
BEGIN
   IF (Database_SYS.Index_Exist(old_index_)) THEN
      -- Index already exists from Apps8 LCS patch, rename it
      Database_SYS.Rename_Index(old_index_, index_name_, TRUE);
   ELSE
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'CALENDAR_ID', 'VARCHAR2(10)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'START_TIME', 'DATE', 'N');
      Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;   
   COMMIT;
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_19');
PROMPT Adding MODIFIED_BY AND SYSTEM_DEFINED to OBJ_CONNECT_LU_TRANSFORM_TAB
DECLARE
   columns_   Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'SYSTEM_DEFINED', 'VARCHAR2(5)'  , 'Y' );
   Database_SYS.Set_Table_Column ( columns_ ,'MODIFIED_BY'   , 'VARCHAR2(30)' , 'Y' );
   Database_SYS.Set_Table_Column ( columns_ ,'MODIFIED_DATE' , 'DATE'         , 'Y' );
   Database_SYS.Alter_Table ('OBJ_CONNECT_LU_TRANSFORM_TAB', columns_, TRUE);
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_20');
PROMPT Updating SYSTEM_DEFINED for already exixting data IN OBJ_CONNECT_LU_TRANSFORM_TAB
DECLARE

   PROCEDURE Define_As_System ( target_lu_name_          IN VARCHAR2,
                                source_lu_name_          IN VARCHAR2,
                                service_name_            IN VARCHAR2,
                                editable_                IN VARCHAR2,
                                transformation_method_   IN VARCHAR2)
   IS
      dummy_     NUMBER;

      CURSOR get_sys_define_lu_data IS
         SELECT 1
         FROM OBJ_CONNECT_LU_TRANSFORM_TAB
         WHERE target_lu_name        = target_lu_name_
         AND   source_lu_name        = source_lu_name_
         AND   service_name          = service_name_ 
         AND   editable              = editable_
         AND   transformation_method = transformation_method_;
   BEGIN

         OPEN  get_sys_define_lu_data;
         FETCH get_sys_define_lu_data INTO dummy_;
         IF (get_sys_define_lu_data%FOUND) THEN
            CLOSE get_sys_define_lu_data;

            UPDATE OBJ_CONNECT_LU_TRANSFORM_TAB
               SET   system_defined = 'TRUE'
               WHERE target_lu_name        = target_lu_name_
               AND   source_lu_name        = source_lu_name_
               AND   service_name          = service_name_; 
         ELSE
            CLOSE get_sys_define_lu_data;   
         END IF;

   END;

BEGIN
   Define_As_System('ShopMaterialAlloc',     'PartCatalog',          'MediaLibrary',      'TARGET', 'PART_NO');
   Define_As_System('ShopOrderOperation',    'ShopOrd',              'MediaLibrary',      'TARGET', 'ORDER_NO,RELEASE_NO,SEQUENCE_NO');
   Define_As_System('ShopOrderOperation',    'PartCatalog',          'MediaLibrary',      'TARGET', 'PART_NO');
   Define_As_System('ShopOrderOperGuide',    'RoutingOperWorkGuide', 'MediaLibrary',      'TARGET', 'SHOP_ORD_WORK_GUIDE_UTIL_API.TRANSFORM_OP_WORK_GUIDE_KEY__');
   Define_As_System('ShopOrderOperTool',     'ManufTool',            'MediaLibrary',      'TARGET', 'CONTRACT,TOOL_ID');
   Define_As_System('ShopMaterialAllocGuide','ManufStructWorkGuide', 'MediaLibrary',      'TARGET', 'SHOP_ORD_WORK_GUIDE_UTIL_API.TRANSFORM_ALLOC_GUIDE_KEY__');
   Define_As_System('ShopMaterialAlloc',     'PartCatalog',          'DocReferenceObject','TARGET', 'PART_NO');
   Define_As_System('ShopOrderOperation',    'ShopOrd',              'DocReferenceObject','TARGET', 'ORDER_NO,RELEASE_NO,SEQUENCE_NO');
   Define_As_System('ShopOrderOperation',    'EngPartRevision',      'DocReferenceObject','TARGET', 'SHOP_ORD_UTIL_API.TRANSF_SHOP_OP_TO_ENG_PART_REV');
   Define_As_System('ShopOrderOperation',    'InventoryPart',        'DocReferenceObject','TARGET', 'CONTRACT,PART_NO');
   Define_As_System('ShopOrderOperation',    'PartRevision',         'DocReferenceObject','TARGET', 'SHOP_ORD_UTIL_API.TRANSF_SHOP_OP_TO_PART_REV');
   Define_As_System('ShopOrderOperation',    'RoutingHead',          'DocReferenceObject','TARGET', 'SHOP_ORD_UTIL_API.TRANSF_SHOP_OP_TO_ROUT_HEAD');
   Define_As_System('ShopOrderOperation',    'RoutingAlternate',     'DocReferenceObject','TARGET', 'SHOP_ORD_UTIL_API.TRANSF_SHOP_OP_TO_ROUT_ALT');
   Define_As_System('ShopOrderOperation',    'RoutingOperation',     'DocReferenceObject','TARGET', 'SHOP_ORD_UTIL_API.TRANSF_SHOP_OP_TO_ROUT_OP');
   Define_As_System('ShopOrderOperation',    'ProdStructureHead',    'DocReferenceObject','TARGET', 'SHOP_ORD_UTIL_API.TRANSF_SHOP_OP_TO_STRUCT_HEAD');
   Define_As_System('ShopOrderOperGuide',    'RoutingOperWorkGuide', 'DocReferenceObject','TARGET', 'SHOP_ORD_WORK_GUIDE_UTIL_API.TRANSFORM_OP_WORK_GUIDE_KEY__');
   Define_As_System('ShopOrderOperTool',     'ManufTool',            'DocReferenceObject','TARGET', 'CONTRACT,TOOL_ID');
   Define_As_System('ShopMaterialAllocGuide','ManufStructWorkGuide', 'DocReferenceObject','TARGET', 'SHOP_ORD_WORK_GUIDE_UTIL_API.TRANSFORM_ALLOC_GUIDE_KEY__'); 
   
   
   Define_As_System('QmanCtrlPlanLineSo', 'QmanControlPlanLine', 'MediaLibrary'     , 'TARGET','CONTROL_PLAN_NO,CTRL_PLAN_REVISION_NO,DATA_POINT');
   Define_As_System('QmanCtrlPlanLineSo', 'QmanControlPlanLine', 'DocReferenceObject'  , 'TARGET','CONTROL_PLAN_NO,CTRL_PLAN_REVISION_NO,DATA_POINT');
   
   Define_As_System('ConfigSpecValue', 'BasePartCharacteristic', 'MediaLibrary', 'NONE', 'CONFIG_MEDIA_MANAGER_API.TRANSFORM_CONFIG_KEY');
   
   Define_As_System('QmanCtrlPlanLineSo', 'QmanControlPlanLine', 'MediaLibrary', 'TARGET','CONTROL_PLAN_NO,CTRL_PLAN_REVISION_NO,DATA_POINT');
   Define_As_System('QmanCtrlPlanLineSo', 'QmanControlPlanLine', 'DocReferenceObject', 'TARGET','CONTROL_PLAN_NO,CTRL_PLAN_REVISION_NO,DATA_POINT');
   
   Define_As_System('ActiveRound', 'WorkOrder', 'DocReferenceObject', 'SOURCE', 'WO_NO'); 
   Define_As_System('ActiveSeparate', 'WorkOrder', 'DocReferenceObject', 'SOURCE', 'WO_NO'); 
   Define_As_System('HistoricalRound', 'WorkOrder', 'DocReferenceObject', 'SOURCE', 'WO_NO'); 
   Define_As_System('HistoricalSeparate', 'WorkOrder', 'DocReferenceObject', 'SOURCE', 'WO_NO');   
   
   Define_As_System('PostingProposal', 'PostingProposalHead', 'DocReferenceObject', 'TARGET','COMPANY,INVOICE_ID,PROPOSAL_ID'); 
   Define_As_System('ManSuppInvoice', 'PostingProposalHead', 'DocReferenceObject', 'TARGET','COMPANY,INVOICE_ID,PROPOSAL_ID=1'); 
   --
   COMMIT;	
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_21');
PROMPT Update SYSTEM_DEFINED with default value
BEGIN
   UPDATE OBJ_CONNECT_LU_TRANSFORM_TAB
     SET system_defined = 'FALSE'
     WHERE system_defined IS NULL;
   --	
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_22');
PROMPT Creating Sequence APPSRV_MEDIA_LIBRARY_SEQ
DECLARE
   sequence_         VARCHAR2(30) := 'APPSRV_MEDIA_LIBRARY_SEQ';
   parameters_       VARCHAR2(500);
   next_library_id_  NUMBER;
BEGIN
   -- Retrieve the next library id
   SELECT (NVL(MAX(TO_NUMBER(library_id)), 999)+1) INTO next_library_id_ FROM media_library_tab;
   parameters_ := 'INCREMENT BY 1 START WITH '|| next_library_id_ ||' MINVALUE 1000 MAXVALUE 99999999999999 NOCYCLE NOCACHE NOORDER';
   Database_SYS.Create_Sequence(sequence_, parameters_, TRUE);
   COMMIT;
END;
/


DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ISO_COUNTRY_TAB';
BEGIN
   UPDATE ISO_COUNTRY_TAB
   SET EU_MEMBER = 'N'
   WHERE EU_MEMBER IS NULL;
   
   UPDATE ISO_COUNTRY_TAB
   SET SALES_TAX = 'N'
   WHERE SALES_TAX IS NULL;
   
   Database_SYS.Set_Table_Column(columns_, 'EU_MEMBER', 'VARCHAR2(1)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SALES_TAX', 'VARCHAR2(1)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'MEDIA_LIBRARY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTENT_RESTRICTION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TECHNICAL_ATTRIB_TAB';
BEGIN
   
   UPDATE TECHNICAL_ATTRIB_TAB
   SET ATTRIB_NUMBER = 1
   WHERE ATTRIB_NUMBER IS NULL;
   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ATTRIB_NUMBER', 'NUMBER', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TECHNICAL_SPECIFICATION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TECHNICAL_CLASS', 'VARCHAR2(10)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FORMULA_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WORK_TIME_CALENDAR_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
BEGIN
   DECLARE
      -- Remove Manual security entries.
      PROCEDURE Remove_Pres_Object_Security(
                                      po_id_      IN VARCHAR2,
                                      sec_object_ IN VARCHAR2) IS
      BEGIN
            DELETE FROM pres_object_security_tab
               WHERE UPPER(po_id) = UPPER(po_id_)
                  AND UPPER(sec_object) = UPPER(sec_object_)
                  AND info_type = 'Manual';
      END remove_pres_object_security;
      
   BEGIN 
         -- Remove Manual security entries that are obsolete.
         Remove_Pres_Object_Security('APPSRVifsExcelReport', 'QDIM_ISO_UNIT_OL$');
         Remove_Pres_Object_Security('APPSRVifsExcelReport', 'QDIM_WORK_TIME_CALENDAR_OL$');
         Remove_Pres_Object_Security('APPSRVifsExcelReport', 'QDIM_WORK_TIME_PERIOD_OL$');
             
   END;                                                                                                                                         
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_23');
PROMPT Adding column PRIVATE_MEDIA_ITEM to MEDIA_ITEM_TAB
DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := 'MEDIA_ITEM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_); 
   Database_SYS.Set_Table_Column (columns_ , 'PRIVATE_MEDIA_ITEM', 'VARCHAR2(5)');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_24');
PROMPT Setting the PRIVATE_MEDIA_ITEM COLUMN TO NOT NULL and updaing the PRIVATE_MEDIA_ITEM coloumn value to FALSE.     
DECLARE           
   columns_        Database_SYS.ColumnTabType;
   table_name_     VARCHAR2(30) := 'MEDIA_ITEM_TAB';
BEGIN
   UPDATE media_item_tab
      SET private_media_item = 'FALSE'
    WHERE private_media_item IS NULL;

   COMMIT; 
   Database_SYS.Set_Table_Column(columns_, 'PRIVATE_MEDIA_ITEM', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Timestamp_25');
PROMPT Create index TECHNICAL_SPECIFICATION_IX

DECLARE
   columns_          Database_SYS.ColumnTabType;
   table_name_       VARCHAR2(30) := 'TECHNICAL_SPECIFICATION_TAB';
   index_name_       VARCHAR2(30) := 'TECHNICAL_SPECIFICATION_IX';
BEGIN
  Database_SYS.Reset_Column_Table( columns_ );
  Database_SYS.Set_Table_Column (columns_ , 'ATTRIBUTE');
  Database_SYS.Create_Index ( table_name_,  index_name_, columns_,'N',  '&IFSAPP_INDEX ',  NULL , TRUE, TRUE);

END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('APPSRV','410.upg','Done');
