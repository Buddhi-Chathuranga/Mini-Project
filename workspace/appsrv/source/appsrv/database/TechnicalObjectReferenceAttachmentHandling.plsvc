-----------------------------------------------------------------------------
--
--  Logical unit: TechnicalObjectReferenceAttachmentHandling
--  Component:    APPSRV
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  191008  Tajalk  SAXTEND-208, Created
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Create_Modify_Technical_Class___ (
	lu_name_ IN VARCHAR2,
	key_ref_ IN VARCHAR2,
	technical_class_ IN VARCHAR2)
IS
   attr_                VARCHAR2(32000);
   info_                VARCHAR2(32000);
   objid_               VARCHAR2(4000);
   objversion_          VARCHAR2(4000);
   
   CURSOR get_objid_objversion IS
      SELECT objid, objversion
      FROM  technical_object_reference t
      WHERE t.lu_name = lu_name_
      AND   t.key_ref = key_ref_;
BEGIN
   -- add check to validate
   
	OPEN  get_objid_objversion;
   FETCH get_objid_objversion INTO objid_, objversion_;
   CLOSE get_objid_objversion;
   
   IF objid_ IS NOT NULL THEN
      
      Client_SYS.Clear_Attr(attr_);
      
      Client_SYS.Add_To_Attr('TECHNICAL_CLASS', technical_class_, attr_);
      
      Technical_Object_Reference_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
   ELSE
      
      Client_SYS.Clear_Attr(attr_);
      
      Technical_Object_Reference_API.New__(info_, objid_, objversion_ ,attr_, 'PREPARE');

      Client_SYS.Add_To_Attr('LU_NAME', lu_name_, attr_);
      Client_SYS.Add_To_Attr('KEY_REF', key_ref_, attr_);
      Client_SYS.Add_To_Attr('TECHNICAL_CLASS', technical_class_, attr_);

      Technical_Object_Reference_API.New__(info_, objid_, objversion_, attr_, 'DO');
      
   END IF;
END Create_Modify_Technical_Class___;


PROCEDURE Remove_Technical_Class___ (
	lu_name_ IN VARCHAR2,
	key_ref_ IN VARCHAR2)
IS
   attr_                VARCHAR2(32000);
   info_                VARCHAR2(32000);
   objid_               VARCHAR2(4000);
   objversion_          VARCHAR2(4000);
   
   CURSOR get_objid_objversion IS
      SELECT objid, objversion
      FROM  technical_object_reference t
      WHERE t.lu_name = lu_name_
      AND   t.key_ref = key_ref_;
BEGIN
	-- add check to validate
   
	OPEN  get_objid_objversion;
   FETCH get_objid_objversion INTO objid_, objversion_;
   CLOSE get_objid_objversion;
   
   IF objid_ IS NOT NULL THEN
      Technical_Object_Reference_API.Remove__(info_, objid_, objversion_, 'DO');
   END IF;
END Remove_Technical_Class___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Technical_Specification_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   value_        VARCHAR2(32000);
   objid_        VARCHAR2(4000);
   objversion_   VARCHAR2(4000);
   alphanum_     NUMBER := 0;
   
   CURSOR check_alphanum IS
      SELECT 1 
      FROM technical_spec_alphanum t
      WHERE t.objid = objid_
      AND   t.objversion = objversion_;
BEGIN
   
   value_ := Client_SYS.Get_Item_Value('VALUE_BOTH', attr_);
   
   IF value_ IS NOT NULL THEN
      objid_ := Get_Objid_From_Etag___(etag_);
      objversion_ := Get_Objversion_From_Etag___(etag_);
      
      OPEN  check_alphanum;
      FETCH check_alphanum INTO alphanum_;
      CLOSE check_alphanum;
      
      IF alphanum_ = 1 THEN
         Client_SYS.Add_To_Attr('VALUE_TEXT', value_, attr_);
      ELSE
         IF Is_Number(value_) = 'TRUE' THEN
            Client_SYS.Add_To_Attr('VALUE_NO', value_, attr_); 
         ELSE
            Error_SYS.Appl_General(lu_name_, 'UXXTECHOBJNOTNUMBER: Input :P1 is not a valid number', value_);
         END IF;
      END IF;
   ELSE
      Client_SYS.Add_To_Attr('VALUE_TEXT', value_, attr_);
      Client_SYS.Add_To_Attr('VALUE_NO', value_, attr_);
   END IF;
   
   super(etag_, key_, attr_, info_, action_);
   --Add post-processing code here
END CRUD_Update___;

FUNCTION Is_Number (
   value_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   dummy_ NUMBER;
BEGIN
   dummy_ := TO_NUMBER(value_);
   RETURN ('TRUE');
EXCEPTION
   WHEN value_error THEN
     RETURN ('FALSE');
END Is_Number;

PROCEDURE Refresh_Attributes___ (
	key_ IN Technical_Object_Virtual_Key)
IS
   rec_     Technical_Object_Virtual_Rec;
BEGIN
	rec_ := Get_Record___(key_);
   
   Technical_Object_Reference_API.Copy_Attributes_(rec_.technical_spec_no, rec_.technical_class);
END Refresh_Attributes___;

PROCEDURE Change_Status_Technical_Class___ (
	technical_spec_no_ IN NUMBER)
IS
BEGIN
	Technical_Object_Reference_API.Change_Reference_Status(technical_spec_no_);
END Change_Status_Technical_Class___;
