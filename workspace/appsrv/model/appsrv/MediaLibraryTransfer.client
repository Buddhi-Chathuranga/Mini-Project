client MediaLibraryTransfer;
component APPSRV;
layer Core;
projection MediaLibraryTransferHandling;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry MediaLibraryMediaItems parent AppsrvNavigator.ApplicationBaseSetupMediaLibrary at index 500 {
      label = "Transfer Media";
      assistant Assistant;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
assistant Assistant using TransferInfoVirtualSet {
   label = "Transfer Media";
   steps {
      step {
         label = "Repository Details";
         markdowntext {
            text = "This functionality can be used to move media items between Database and File Storage type repositories.";
            emphasis Info = [true];
         }
         group RepositoryGroup;
         group MediaItemTypesGroup;
         group MediaLibraryObjectsGroup;
         next command {
            enabled = [(FromRepo != null and ToRepo != null) and(ImageSelected or VideoSelected or AudioSelected) and ObjectTypesSelected and LuNames != null];
            execute {
               call LoadObjectTypes();
            }
         }
      }
      step {
         label = "Object Types";
         list SelectObjectTypeList(SelectObjectTypesArray);
         next command {
            enabled = [false];
         }
      }
      final step {
         markdowntext {
            text = "Background job added successfully to transfer media.";
            emphasis Success = [true];
         }
      }
   }
   finish command {
      enabled = [(FromRepo != null and ToRepo != null) and(ImageSelected or VideoSelected or AudioSelected)
      and((component.Assistant.ActiveStep = 1 and not ObjectTypesSelected) or(component.Assistant.ActiveStep != 1))];
      variable ItemCount Number;
      execute {
         if [component.Assistant.ActiveStep = 1 and not ObjectTypesSelected] {
            call GetMediaItemCount() into ItemCount;
            confirm("By pressing OK, ${ItemCount} media items will be posted for transfer from the source to the target repository.") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
         call BatchTransferMedia();
      }
   }
}

--------------------------------- COMMANDS ----------------------------------


--------------------------------- SELECTORS ---------------------------------

 
---------------------------------- GROUPS -----------------------------------
group RepositoryGroup for TransferInfoVirtual {
   label = "Repository Information";

   field FromRepo {
      validate command {
         execute {
            if [(ToRepo = FromRepo)] {
               set FromRepo = null;
               error("The from and to repository cannot be the same.");
            }
         }
      }
   }
   field ToRepo {
      validate command {
         execute {
            if [(ToRepo = FromRepo)] {
               set ToRepo = null;
               error("The from and to repository cannot be the same.");
            }
         }
      }
   }
}

group MediaItemTypesGroup for TransferInfoVirtual {
   label = "Media Item Types";

   field ImageSelected;
   field VideoSelected;
   field AudioSelected;
}

group MediaLibraryObjectsGroup for TransferInfoVirtual {
   label = "Media Items connected Object Types";

   field ObjectTypesSelected;
   multilov AllConnectedLuNamesRef with  AllConnectedLuNamesQueryLovList using AllConnectedLuNamesQuerySet {
      visible = [ObjectTypesSelected];
      size = FullWidth;
   }
}

----------------------------------- LISTS -----------------------------------
list SelectObjectTypeList for SelectObjectTypesVirtual {
   editmode = SingleCellEdit;
   singlerecordedit = [true];
   multiselect = [false];

   field Selected;
   static LuName;
   static LuDesc;
   static Quantity;
}


---------------------------------- DIALOGS ----------------------------------


-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------
