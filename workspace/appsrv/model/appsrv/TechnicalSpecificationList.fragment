--------------------------------------------------------------------------------------
-- Required includes to make this fragment work properly:
-- - include fragment TechnicalAttribBothSelector

-- Date Sign History
-- ---------- ------ ---------------------------------------------------------------
-- 2018-10-23 KrRaLK SAUXXW4-7186, Created.
-- 2020-01-21 LASSLK SAXTEND-1244,Implement LOV Filtering
--------------------------------------------------------------------------------------
fragment TechnicalSpecificationList;
component APPSRV;
layer Core;
description "Use to add or modify the technical class connected to the object or design part, and add or modify values for the technical attributes connected to the technical class in IFS/Applications Services.";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command TechSpecChangeStatusCommand for TechnicalObjectReference {
   label = "Change Status";
   enabled = [true];
   execute {
      call SetTechnicalReferenceStatus(TechnicalSpecNo);
   }
}

command TechSpecRefreshAttributesCommand for TechnicalObjectReference {
   label = "Refresh Attributes";
   enabled = [true];
   execute {
      call CopyTechnicalAttributes(TechnicalSpecNo, TechnicalClass);
      refresh;
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceTechnicalClassSelector for TechnicalClass {
   label = "";
   static TechnicalClass {
      label = "Technical Class";
   }
   static Description {
      label = "Description";
   }
}
---------------------------------- GROUPS -----------------------------------
group CharPublicContainerGroup for TechnicalObjectReference {
   label = "Technical Class - ${TechnicalClass}";

   lov TechnicalClassRef with ReferenceTechnicalClassSelector {
      search = TechnicalClass, Description;
      size = Large;
      description = TechnicalClassRef.Description;
   }
   field TechnicalSpecNo {
      visible = [false];
   }
   field KeyRef {
      visible = [false];
   }
   badge OkYesNo {
      style = TextOnly;
      size = Medium;
      emphasis StatePreliminary = [OkYesNo = "NotApproved"];
      emphasis StateActive = [OkYesNo = "Approved"];
   }

   field OkSign {
      size = Medium;
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }

   field DtOk {
      size = Small;
   }

//   lov GroupNameRef with ReferenceTechnicalGroupSelector using GetGroupName(TechnicalClass) {
//      size = Medium;
//      label = "Group Name";
//      required = [false];
//   }

//   field GroupNameRef.GroupDesc {
//      size = Large;
//      label = "Group Description";
//      required = [false];
//
//   }

}

----------------------------------- LISTS -----------------------------------
list TechnicalSpecNumericList for TechnicalSpecNumeric {
   label = "Technical Attributes";
   orderby = AttribNumber;

   field AttribNumber {
      size = Small;
   }
   field AttributeRef {
      size = Large;
      validate command {
         execute {
            call GetTechnicalUnit(TechnicalClass, Attribute) into Uom;

         }
      }
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Large;
      label = "Description";
   }
   field Uom {
      size = Small;
   }
   field ValueNo;
   field LowerLimit;
   field UpperLimit;
   field Info {
      size = Medium;
      multiline = true;
   }
   field GroupNameRef {
      size = Medium;
      columnvisible = [false];
      editable = [false];
   }
   field GroupNameDesc {
      size = Large;
      label = "Group Description";
      columnvisible = [false];
      editable = [false];
   }
}
list TechnicalSpecAlphanumList for TechnicalSpecAlphanum {
   label = "Technical Attributes";
   orderby = AttribNumber;

   field AttribNumber {
      size = Small;
   }
   field Attribute {
      size = Large;
      //! TODO: Equivalent APF control, tblTechnicalSpecAlphanum_colsAttribute, handles a PM_DataItemValidate message in colsAttribute_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)
      validate command {
         execute {
            warning("Validation logic for 'Attribute' not implemented!");
         }
      }
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Large;
      label = "Description";
   }
   lov ValueTextRef with TechnicalAttribTextSelector {
      size = Medium;
      freeinput = [true];
   }
   field Info {
      size = Medium;
      multiline = true;
   }
   field GroupNameRef {
      size = Medium;
      columnvisible = [false];
      editable = [false];
   }
   field GroupNameDesc {
      size = Large;
      label = "Group Description";
      columnvisible = [false];
      editable = [false];
   }
}
list TechnicalSpecBothList for TechnicalSpecification {
   label = "Technical Attributes";
   orderby = AttribNumber;
   field AttribNumber {
      size = Small;
   }
   field AttributeRef {
      size = Large;
      //! TODO: Equivalent APF control, tblTechnicalSpecBoth_colsAttribute, handles a PM_DataItemValidate message in colsAttribute_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)
      validate command {
         execute {
            warning("Validation logic for 'Attribute' not implemented!");
         }
      }
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Large;
      label = "Description";
   }
   field ValueText {
      size = Small;
   }
   field TechnicalUom {
      size = Small;
   }
   field ValueNo;
   field LowerLimit;
   field UpperLimit;
   field Info {
      size = Medium;
      multiline = true;
   }
   field GroupNameRef {
      size = Medium;
      columnvisible = [false];
      editable = [false];
   }
   field GroupNameDesc {
      size = Large;
      label = "Group Description";
      columnvisible = [false];
      editable = [false];
   }
}
list TechnicalSpecGrpList for TechnicalSpecificationGrp {
   label = "Technical Attributes";
   orderby = AttribNumber;

   field AttribNumber;
   lov AttributeRef with ReferenceTechnicalAttribBothSelector {
      size = Small;
      //! TODO: Equivalent APF control, tblTechnicalSpecGrp_colsAttribute, handles a PM_DataItemValidate message in colsAttribute_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)
      validate command {
         execute {
            warning("Validation logic for 'Attribute' not implemented!");
         }
      }
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Small;
      label = "Description";
   }
   field ValueText {
      size = Medium;
   }
   field TechnicalUom {
      size = Small;
   }
   field ValueNo;
   field LowerLimit;
   field UpperLimit;
   field Info {
      size = Medium;
      multiline = true;
   }
}
list TechSpecNumGrpList for TechnicalSpecNumeric {
   label = "Technical Attributes";
   orderby = AttribNumber;
   field AttribNumber;
   field AttributeRef {
      size = Small;
      validate command {
         execute {
            call GetTechnicalUnit(TechnicalClass, Attribute) into Uom;
            //! TODO: Equivalent APF control, tblTechSpecNumGrp_colsAttribute, handles Validate messages as well. Investigate and handle that here.
         }
      }
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Small;
      label = "Description";
   }
   field Uom {
      size = Small;
   }
   field ValueNo;
   field LowerLimit;
   field UpperLimit;
   field Info {
      size = Medium;
      multiline = true;
   }
}
list TechSpecAlphanumGrpList for TechnicalSpecAlphanum {
   label = "Technical Attributes";
   orderby = AttribNumber;
   field AttribNumber;
   field Attribute {
      size = Small;
      //! TODO: Equivalent APF control, tblTechSpecAlphanumGrp_colsAttribute, handles a PM_DataItemValidate message in colsAttribute_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)
      validate command {
         execute {
            warning("Validation logic for 'Attribute' not implemented!");
         }
      }
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Small;
      label = "Description";
   }
   field ValueTextRef {
      size = Medium;
   }
   field Info {
      size = Medium;
      multiline = true;
   }

}

list TechnicalSpecAllList for TechnicalSpecification {
   label = "";
   orderby = AttribNumber;
   crudactions {
      edit {
         enabled = [parent.Status = "NotApproved"];
      }
      delete {
         enabled = [parent.Status = "NotApproved"];
      }
   }


   field AttribNumber {
      size = Small;
      columnvisible = [false];
   }
   field AttributeRef {
      size = Medium;
      columnvisible = [false];
   }
   badge ObjTypeMod {
      size = Small;
      label = "Type";
      style = TextOnly;
      emphasis Ok = [ObjTypeMod = "#"];
      emphasis On = [ObjTypeMod = "A#"];
   }
   field TechnicalAttribStdRef.AttribDesc {
      label = "Description";
   }
   lov ValueTextRef with TechnicalAttribTextSelector {
      size = Medium;
      freeinput = [true];
   }
   field TechnicalUom {
      size = Small;
   }
   field LowerLimit;
   field UpperLimit;
   field Info {
      size = Medium;
      multiline = true;
   }
   field GroupName {
      columnvisible = [false];
   }
   field GroupDescription {
      columnvisible = [false];
   }
   field GroupOrder {
      columnvisible = [false];
   }

}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- SINGLETON ---------------------------------
singleton TechnicalObjectReferenceSingleton for TechnicalObjectReference {
   crudactions {
   }
   command TechSpecChangeStatusCommand;
   command TechSpecRefreshAttributesCommand;
}

--------------------------------- CHECKLIST ---------------------------------

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset TechnicalObjectReferenceSet for TechnicalObjectReference;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity TechnicalObjectReference {
   crud = Create, Read, Update, Delete;
   from = "technical_object_reference";
   exec = "TECHNICAL_OBJECT_REFERENCE_API";
   keys = LuName, KeyRef, TechnicalSpecNo {
      where = "LU_NAME = :LuName and KEY_REF = :KeyRef and TECHNICAL_SPEC_NO = :TechnicalSpecNo";
   }
   ludependencies = TechnicalObjectReference, TechnicalClass;
   use attributes = TechnicalClass, OkYesNo, OkSign, DtOk;
   attribute LuName Text {
      fetch = "lu_name";
      label = "LU Name";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
   }
   attribute KeyRef Text {
      fetch = "key_ref";
      label = "Key Ref";
      maxlength = 600;
      required = [false];
      editable = [false];
   }
   attribute KeyValue Text {
      fetch = "key_value";
      label = "Key Value";
      maxlength = 600;
      required = [false];
      editable = [ETag = null];
   }
   attribute TechnicalSpecNo Number {
      fetch = "technical_spec_no";
      label = "Technical Spec No";
      required = [false];
      editable = [ETag = null];
   }
   attribute GroupName Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute TechnicalClass Text {
      fetch = "technical_class";
      label = "Technical Class";
      maxlength = 10;
      required = [false];
      format = uppercase;
   }
   attribute OkYesNo Enumeration(TechnicalObjRefApproved) {
      fetch = "ok_yes_no_db";
      label = "Status";
      editable = [false];
      required = [false];
   }
   attribute OkSign Text {
      fetch = "ok_sign";
      label = "Changed By";
      maxlength = 30;
      editable = [false];
      required = [false];
   }
   attribute DtOk Date {
      fetch = "dt_ok";
      label = "Date";
      editable = [false];
      required = [false];
   }

   reference TechnicalClassRef(TechnicalClass) to TechnicalClass(TechnicalClass) {
      label = "Technical Class";
      prefetch Description as TechnicalClassDesc;
   }
   reference GroupNameRef(TechnicalClass, GroupName) to TechnicalGroup(TechnicalClass, GroupName) {
      label = "Group Name";
   }
   array TechnicalSpecNumericArray(TechnicalSpecNo) to TechnicalSpecNumeric(TechnicalSpecNo);
   array TechnicalSpecAlphanumArray(TechnicalSpecNo) to TechnicalSpecAlphanum(TechnicalSpecNo);
   array TechnicalSpecBothArray(TechnicalSpecNo) to TechnicalSpecification(TechnicalSpecNo);
   array TechnicalSpecGrpArray(TechnicalSpecNo) to TechnicalSpecificationGrp(TechnicalSpecNo);
   array TechSpecNumGrpArray(TechnicalSpecNo, GroupName) to TechnicalSpecNumericGrp(TechnicalSpecNo, GroupName);
   array TechSpecAlphanumGrpArray(TechnicalSpecNo, GroupName) to TechnicalSpecAlphanumGrp(TechnicalSpecNo, GroupName);

   action SetTechnicalReferenceStatus {
      ludependencies = TechnicalObjectReference;
      ludependencies = TechnicalSpecNumeric;
      ludependencies = TechnicalSpecAlphanum;
      parameter TechnicalSpecNoIn Number;
   }
   action CopyTechnicalAttributes {
      ludependencies = TechnicalObjectReference;
      parameter TechnicalSpecNoIn Number;
      parameter TechnicalClassIn Text;
   }
}

@Override
entity TechnicalSpecNumeric {
   crud = Read, Update, Delete;
   from = "technical_spec_numeric";
   exec = "TECHNICAL_SPEC_NUMERIC_API";
   ludependencies = TechnicalObjectReference, TechnicalSpecAlphanum, TechnicalSpecNumeric;
   keys = TechnicalSpecNo, TechnicalClass, Attribute {
      where = "TECHNICAL_SPEC_NO = :TechnicalSpecNo and TECHNICAL_CLASS = :TechnicalClass and ATTRIBUTE = :Attribute";
   }
   use attributes = AttribNumber, ValueNo, LowerLimit, UpperLimit, Info, AltValueNo, AltUnit;
   attribute TechnicalSpecNo Number {
      fetch = "technical_spec_no";
      label = "Technical Specification No";
      required = [true];
      editable = [ETag = null];
   }
   attribute TechnicalClass Text {
      fetch = "technical_class";
      label = "Technical Class";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AttribNumber Number {
      fetch = "attrib_number";
      label = "Order";
      required = [true];
      editable = [ETag = null];
   }
   attribute Attribute Text {
      fetch = "attribute";
      label = "Attribute";
      maxlength = 15;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Uom Text {
      fetch = "Technical_Attrib_Numeric_API.Get_Technical_Unit_(technical_class,attribute)";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute ValueNo Number {
      fetch = "value_no";
      label = "Value Number";
   }
   attribute LowerLimit Number {
      fetch = "lower_limit";
      label = "Lower Limit";
   }
   attribute UpperLimit Number {
      fetch = "upper_limit";
      label = "Upper Limit";
   }
   attribute Info Text {
      fetch = "info";
      label = "Info";
      maxlength = 2000;
   }
   attribute AltValueNo Number {
      fetch = "alt_value_no";
      label = "Alternative Numerical Value";
   }
   attribute AltUnit Text {
      fetch = "alt_unit";
      label = "Alternative UoM";
      maxlength = 10;
   }
   attribute GroupName Text {
      fetch = "group_name";
      insertable = [false];
      updatable = [false];
   }
   reference TechnicalAttribStdRef(Attribute) to TechnicalAttribStd(Attribute);
   reference TechnicalClassRef(TechnicalClass) to TechnicalClass(TechnicalClass) {
      label = "Technical Class";
   }
   reference AttributeRef(Attribute) to TechnicalAttribStd(Attribute) {
      label = "Attribute";
   }
   reference GroupNameRef(TechnicalClass, GroupName) to TechnicalGroup(TechnicalClass, GroupName) {
      label = "Group Name";
      prefetch GroupDesc as GroupNameDesc;
   }
   reference AltUnitRef(AltUnit) to TechnicalUnitConv(Unit);
}
@Override
entity TechnicalSpecAlphanum {
   crud = Read, Update, Delete;
   from = "technical_spec_alphanum";
   exec = "TECHNICAL_SPEC_ALPHANUM_API";
   ludependencies = TechnicalObjectReference, TechnicalSpecAlphanum, TechnicalSpecNumeric;
   keys = TechnicalSpecNo, TechnicalClass, Attribute {
      where = "TECHNICAL_SPEC_NO = :TechnicalSpecNo and TECHNICAL_CLASS = :TechnicalClass and ATTRIBUTE = :Attribute";
   }
   use attributes = AttribNumber, ValueText, Info;
   attribute TechnicalSpecNo Number {
      fetch = "technical_spec_no";
      label = "Technical Specification No";
      required = [true];
      editable = [ETag = null];
   }
   attribute TechnicalClass Text {
      fetch = "technical_class";
      label = "Technical Class";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AttribNumber Number {
      fetch = "attrib_number";
      label = "Order";
      editable = [false];
   }
   attribute Attribute Text {
      fetch = "attribute";
      label = "Attribute";
      maxlength = 15;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute ValueText Text {
      fetch = "value_text";
      label = "Value Text";
      maxlength = 20;
   }
   attribute Info Text {
      fetch = "info";
      label = "Info";
      maxlength = 2000;
   }
   attribute GroupName Text {
      fetch = "group_name";
      insertable = [false];
      updatable = [false];
   }
   reference TechnicalAttribStdRef(Attribute) to TechnicalAttribStd(Attribute);
   reference ValueTextRef(TechnicalClass, Attribute, ValueText) to TechnicalAttribText(TechnicalClass, Attribute, ValueText) {
      label = "Value Text";
   }
   reference GroupNameRef(TechnicalClass, GroupName) to TechnicalGroup(TechnicalClass, GroupName) {
      label = "Group Name";
      prefetch GroupDesc as GroupNameDesc;
   }
}
@Override
entity TechnicalSpecification {
   crud = Read;
   from = "technical_specification_both";
   exec = "TECHNICAL_SPECIFICATION_API";
   ludependencies = TechnicalObjectReference, TechnicalSpecAlphanum, TechnicalSpecNumeric;
   keys = TechnicalSpecNo, TechnicalClass, Attribute {
      where = "TECHNICAL_SPEC_NO = :TechnicalSpecNo and TECHNICAL_CLASS = :TechnicalClass and ATTRIBUTE = :Attribute";
   }
   use attributes = AttribNumber, ValueText, ValueNo, LowerLimit, UpperLimit, Info;
   attribute TechnicalSpecNo Number {
      fetch = "technical_spec_no";
      label = "Technical Specification Number";
      maxlength = 0;
      required = [true];
      editable = [ETag = null];
   }
   attribute TechnicalClass Text {
      fetch = "technical_class";
      label = "Technical Class";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AttribNumber Number {
      fetch = "attrib_number";
      label = "Order";
      maxlength = 0;
      required = [true];
      editable = [ETag = null];
   }
   attribute Attribute Text {
      fetch = "attribute";
      label = "Attribute";
      maxlength = 15;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ValueText Text {
      fetch = "value_text";
      label = "Value Text";
      maxlength = 20;
      editable = [false];
   }
   attribute TechnicalUom Text {
      fetch = "Technical_Attrib_Numeric_API.Get_Technical_Unit_(technical_class,attribute)";
      label = "Technical UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute ValueNo Number {
      fetch = "value_no";
      label = "Value Number";
      maxlength = 0;
      editable = [false];
   }
   attribute LowerLimit Number {
      fetch = "lower_limit";
      label = "Lower Limit";
      maxlength = 0;
   }
   attribute UpperLimit Number {
      fetch = "upper_limit";
      label = "Upper Limit";
      maxlength = 0;
   }
   attribute Info Text {
      fetch = "info";
      label = "Info";
      maxlength = 2000;
   }

   attribute ObjTypeMod Text {
      fetch = "CASE WHEN OBJTYPE = 'TechnicalSpecNumeric' THEN '#' ELSE 'A#' END";
      editable = [false];
   }
   attribute ValueBoth Text {
      fetch = "CASE WHEN VALUE_TEXT IS NOT NULL THEN VALUE_TEXT ELSE TO_CHAR(VALUE_NO) END";
      editable = [true];
   }

   attribute GroupName Text {
      fetch = "group_name";
      insertable = [false];
      updatable = [false];
   }
   attribute GroupDescription Text {
      fetch = "Technical_Group_API.Get_Description(GROUP_NAME)";
      editable = [false];
   }
   attribute GroupOrder Number {
      fetch = "Technical_Group_API.Get_Group_Order(TECHNICAL_CLASS, GROUP_NAME)";
      editable = [false];
   }

   reference ValueTextRef(TechnicalClass, Attribute, ValueBoth) to TechnicalAttribText(TechnicalClass, Attribute, ValueText) {
      label = "Value Text";
   }
   reference TechnicalAttribStdRef(Attribute) to TechnicalAttribStd(Attribute);
   reference TechnicalClassRef(TechnicalClass) to TechnicalClass(TechnicalClass) {
      label = "Technical Class";
   }
   reference AttributeRef(TechnicalClass, Attribute) to TechnicalAttrib(TechnicalClass, Attribute) {
      label = "Attribute";
   }
   reference GroupNameRef(TechnicalClass, GroupName) to TechnicalGroup(TechnicalClass, GroupName) {
      label = "Group Name";
      prefetch GroupDesc as GroupNameDesc;

   }
}
@Override
entity TechnicalSpecificationGrp using TechnicalSpecification {
   crud = Read, Update, Delete;
   from = "technical_spec_grp_both";
   exec = "TECHNICAL_SPECIFICATION_API";
   ludependencies = TechnicalObjectReference;
   ludependencies = TechnicalSpecAlphanum;
   ludependencies = TechnicalSpecNumeric;
   keys = TechnicalSpecNo, TechnicalClass {
      where = "TECHNICAL_SPEC_NO = :TechnicalSpecNo and TECHNICAL_CLASS = :TechnicalClass and GROUP_NAME = :GroupName";
   }
   use attributes = AttribNumber, Attribute, ValueText, ValueNo, LowerLimit, UpperLimit, Info;
   attribute TechnicalSpecNo Number {
      fetch = "technical_spec_no";
      label = "Technical Specification Number";
      required = [true];
      editable = [ETag = null];
   }
   attribute TechnicalClass Text {
      fetch = "technical_class";
      label = "Technical Class";
      maxlength = 100;
      required = [true];
   }
   attribute AttribNumber Number {
      fetch = "attrib_number";
      label = "Order";
      maxlength = 0;
      required = [true];
      editable = [ETag = null];
   }
   attribute Attribute Text {
      fetch = "attribute";
      label = "Attribute";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute ValueText Text {
      fetch = "value_text";
      label = "Value Text";
      maxlength = 20;
      editable = [false];
   }
   attribute TechnicalUom Text {
      fetch = "Technical_Attrib_Numeric_API.Get_Technical_Unit_(technical_class,attribute)";
      label = "Technical UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute ValueNo Number {
      fetch = "value_no";
      label = "Value Number";
      maxlength = 0;
      editable = [false];
   }
   attribute LowerLimit Number {
      fetch = "lower_limit";
      label = "Lower Limit";
      maxlength = 0;
      editable = [false];
   }
   attribute UpperLimit Number {
      fetch = "upper_limit";
      label = "Upper Limit";
      maxlength = 0;
      editable = [false];
   }
   attribute Info Text {
      fetch = "info";
      label = "Info";
      maxlength = 2000;
      required = [true];
      editable = [ETag = null];
   }
   attribute GroupName Text {
      fetch = "group_name";
      label = "Group Name";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   reference TechnicalAttribStdRef(Attribute) to TechnicalAttribStd(Attribute);
   reference AttributeRef(TechnicalClass, Attribute) to TechnicalAttribBoth(TechnicalClass, Attribute) {
      label = "Attribute";
   }
}
@Override
entity TechnicalSpecNumericGrp using TechnicalSpecNumeric {
   crud = Read, Update, Delete;
   from = "technical_spec_grp_num";
   exec = "TECHNICAL_SPEC_NUMERIC_API";
   ludependencies = TechnicalObjectReference;
   ludependencies = TechnicalSpecAlphanum;
   ludependencies = TechnicalSpecNumeric;
   keys = TechnicalSpecNo {
      where = "TECHNICAL_SPEC_NO = :TechnicalSpecNo and GROUP_NAME = :GroupName";
   }
   use attributes = AttribNumber, ValueNo, LowerLimit, UpperLimit, Info, AltValueNo, AltUnit;
   attribute TechnicalSpecNo Number {
      fetch = "technical_spec_no";
      label = "Technical Specification No";
      required = [true];
      editable = [ETag = null];
   }
   attribute TechnicalClass Text {
      fetch = "technical_class";
      label = "Technical Class";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AttribNumber Number {
      fetch = "attrib_number";
      label = "Order";
      required = [true];
      editable = [ETag = null];
   }
   attribute Attribute Text {
      fetch = "attribute";
      label = "Attribute";
      maxlength = 15;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Uom Text {
      fetch = "Technical_Attrib_Numeric_API.Get_Technical_Unit_(technical_class,attribute)";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute ValueNo Number {
      fetch = "value_no";
      label = "Value Number";
   }
   attribute LowerLimit Number {
      fetch = "lower_limit";
      label = "Lower Limit";
   }
   attribute UpperLimit Number {
      fetch = "upper_limit";
      label = "Upper Limit";
   }
   attribute Info Text {
      fetch = "info";
      label = "Info";
      maxlength = 2000;
   }
   attribute AltValueNo Number {
      fetch = "alt_value_no";
      label = "Alternative Numerical Value";
   }
   attribute AltUnit Text {
      fetch = "alt_unit";
      label = "Alternative UoM";
      maxlength = 10;
   }
   attribute GroupName Text {
      fetch = "group_name";
      label = "Group Name";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   reference TechnicalAttribStdRef(Attribute) to TechnicalAttribStd(Attribute);
   reference TechnicalClassRef(TechnicalClass) to TechnicalClass(TechnicalClass) {
      label = "Technical Class";
   }
   reference AttributeRef(Attribute) to TechnicalAttribStd(Attribute) {
      label = "Attribute";
   }
   reference AltUnitRef(AltUnit) to TechnicalUnitConv(Unit) {
      label = "Alternative UoM";
   }
}
@Override
entity TechnicalSpecAlphanumGrp using TechnicalSpecAlphanum {
   crud = Read, Update, Delete;
   from = "tech_spec_grp_alphanum";
   exec = "TECHNICAL_SPEC_ALPHANUM_API";
   ludependencies = TechnicalObjectReference;
   ludependencies = TechnicalSpecAlphanum;
   ludependencies = TechnicalSpecNumeric;
   keys = TechnicalSpecNo {
      where = "TECHNICAL_SPEC_NO = :TechnicalSpecNo and GROUP_NAME = :GroupName";
   }
   use attributes = AttribNumber, ValueText, Info;
   attribute TechnicalSpecNo Number {
      fetch = "technical_spec_no";
      label = "Technical Specification No";
      required = [true];
      editable = [ETag = null];
   }
   attribute TechnicalClass Text {
      fetch = "technical_class";
      label = "Technical Class";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AttribNumber Number {
      fetch = "attrib_number";
      label = "Order";
      editable = [false];
   }
   attribute Attribute Text {
      fetch = "attribute";
      label = "Attribute";
      maxlength = 15;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute ValueText Text {
      fetch = "value_text";
      label = "Value Text";
      maxlength = 20;
   }
   attribute Info Text {
      fetch = "info";
      label = "Info";
      maxlength = 2000;
   }
   attribute GroupName Text {
      fetch = "group_name";
      label = "Group Name";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   reference TechnicalAttribStdRef(Attribute) to TechnicalAttribStd(Attribute);
   reference ValueTextRef(TechnicalClass, Attribute, ValueText) to TechnicalAttribText(TechnicalClass, Attribute, ValueText) {
      label = "Value Text";
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration SelectionAttribTypeEnum {
   value = "Numeric" {
      label = "Numeric";

   }
   value = "Alpha" {
      label = "Alpha";
   }
   value = "Both" {
      label = "Both";
   }
}

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetTechnicalUnit Text {
   parameter TechnicalClass Text;
   parameter Attribute Text;
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------
