client ObjectConnectionTransformations;
component APPSRV;
layer Core;
projection ObjectConnectionTransformationsHandling;
include fragment KeyTransformationTestAssistant;
warningsenabled = ObjConnectLuTransform;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ObjectConnectionTransformationsNavEntry parent AppsrvNavigator.ApplicationBaseSetupSystemSetup at index 1500 {
      label = "Object Connection Transformations";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using ObjConnectLuTransformSet {

   label = "Object Connection Transformations";
   list ObjectConnectTransformationList;
}

-------------------------------- ASSISTANTS ---------------------------------
assistant TransformEditorAssistant using TransformEditorSet {
   label = "Edit Transformation";
   input(Source, Target, TransformationMethod, Service);
   output(TransformationMethod);

   steps {
      step {
         list TransformEditorList(LinkedTransformEditor);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      variable TransformationMethodVar Text;

      execute {
         call GetTransformation(Objkey, Source, Target, Service) into TransformationMethodVar;
         set TransformationMethod = TransformationMethodVar;
         exit OK;
      }
   }
   cancel command {
      visible = [false];
      
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------
command ObjConnectionSavedCommand for ObjConnectLuTransform {
   variable TransformationMethodVar Text;
   bulkexecute {
      if [Record.TransformationMethod = null or Record.TransformationMethod = " "] {
         if [CreateCount = 1] {
            assistant TransformEditorAssistant(Record.SourceLuName, Record.TargetLuName, Record.TransformationMethod, Record.ServiceName)into(TransformationMethodVar) {
               when OK {
                  exit OK;
               }
            }
         }
      }
   }
}
command CmdEditTransformCommand for ObjConnectLuTransform {
   label = "Edit Transformation";
   enabled = [true];
   variable TransformationMethodVar Text;
   execute {
      assistant TransformEditorAssistant(SourceLuName, TargetLuName, TransformationMethod, ServiceName)into(TransformationMethodVar) {
         when OK {
            exit OK;
         }
      }
   }
}
command CmdTestTransformCommand for ObjConnectLuTransform {
   label = "Test Transformation";
   mode = SingleRecord;
   enabled = [true];
   execute {
      assistant TransformTestAssistant(ServiceName, SourceLuName, TargetLuName, Selection) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
selector TargetColumnNamesSelector for GetTargetNames {
   static ColumnName;
}

selector TargetLUColumnNamesSelector for GetTargetLUNames {
   static LuName;
}

selector SorceLuColumnNamesSelector for GetSorceLuName {
   static LuName;
}

selector ServiceColumnNamesSelector for GetServiceName {
   static ServiceList;
}

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list ObjectConnectTransformationList for ObjConnectLuTransform {
   crudactions {
      after command ObjConnectionSavedCommand;
   }
   lov TargetLuNameRef with TargetLUColumnNamesSelector {
      label = "Target LU Name";
      size = Medium;
   }

   lov ServiceNameRef with ServiceColumnNamesSelector {
      label = "Service Name";
      size = Medium;
      searchable = true;
   }

   lov SourceLuNameRef with SorceLuColumnNamesSelector using FilterSourceLuName(ServiceName) {
      label = "Source LU Name";
      size = Medium;
   }

   field Editable {
      size = Small;
   }

   field TransformationMethod {
      size = Large;
   }

   field ActiveDb {
      size = Small;
   }

   field SystemDefined {
      size = Small;
   }

   field ModifiedByRef {
      size = Small;
   }

   field ModifiedDate;

   commandgroup CommandGroupCmdGroup {
      command CmdEditTransformCommand;
      command CmdTestTransformCommand;
   }

}

list TransformEditorList for TransformEditorListVirtual {
   label = "Map Source And Target Keys";
   editmode = SingleCellEdit;
   field Source {
      label = "Source LU Key";
      editable = [false];
   }
   lov TargetRef with TargetColumnNamesSelector using GetValidTargetColumnNames(parent.Target) {
      label = "Target LU Key";
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------