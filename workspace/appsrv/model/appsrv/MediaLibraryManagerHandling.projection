-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210207  DEEKLK  AM2020R1-7316, Modified MediaItem, made MediaObject implementation java.
--  210517  DEEKLK  AM2020R1-7785, Modified MediaLibraryItem.
--  210912  DEEKLK  AMZDOC-1158, Modified MediaLibraryItem.
-----------------------------------------------------------------------------
projection MediaLibraryManagerHandling;
component APPSRV;
layer Core;
description "Manage Media Library Manager";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
include fragment MediaLibReportDialog;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset MediaLibrarySet for MediaLibrary;
entityset LibraryIdStorageSet for LibraryIdStorage;
entityset MediaItemSet for MediaItem;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity MediaLibrary {
   crud = Read;
   supportwarnings = [true];
   use attributes = ConnectedObjRef1, ConnectedObjRef2, ConnectedObjRef3, ConnectedObjRef4, ConnectedObjRef5, LuName, KeyRef;
   attribute ConnectedObjSource Text {
      fetch = "language_sys.translate_lu_prompt_(lu_name)";
      label = "Connected Obj Source";
      maxlength = 200;
      required = [true];
   }
   attribute ConnectedObjRef1 Text {
      maxlength = 200;
      required = [true];
   }
   attribute ConnectedObjRef2 Text {
      maxlength = 200;
   }
   attribute ConnectedObjRef3 Text {
      maxlength = 200;
   }
   attribute ConnectedObjRef4 Text {
      maxlength = 200;
   }
   attribute ConnectedObjRef5 Text {
      maxlength = 200;
   }
   attribute Description Text {
      fetch = "Media_Library_API.Get_Library_Conn_Description(library_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute LibraryId Text {
      required = [true];
      label = "Library ID";
   }
   attribute LuName Text {
      maxlength = 2000;
   }
   attribute LockedDb Boolean("TRUE", "FALSE") {
      fetch = "locked_db";
      label = "Locked";
      editable = [false];
   }
   attribute ConnectedObjRef1Title Text {
      fetch = "Media_Library_API.Get_Connected_Obj_Ref1_Title(library_id)";
   }
   attribute ConnectedObjRef2Title Text {
      fetch = "Media_Library_API.Get_Connected_Obj_Ref2_Title(library_id)";
   }
   attribute ConnectedObjRef3Title Text {
      fetch = "Media_Library_API.Get_Connected_Obj_Ref3_Title(library_id)";
   }
   attribute ConnectedObjRef4Title Text {
      fetch = "Media_Library_API.Get_Connected_Obj_Ref4_Title(library_id)";
   }
   attribute ConnectedObjRef5Title Text {
      fetch = "Media_Library_API.Get_Connected_Obj_Ref5_Title(library_id)";
   }

   reference ConnectedObjRef1Ref(ConnectedObjRef1) to MediaItem(ItemId) {
      label = "Connected Obj Ref1";
   }

   array LibraryItemDetailsArray(LibraryId) to MediaLibraryItem(LibraryId);

   action CopyLibraryByRef {
      parameter VarConnectedObjSource Text;
      parameter VarConnectedObjRef1 Text;
      parameter VarConnectedObjRef2 Text;
      parameter VarConnectedObjRef3 Text;
      parameter VarConnectedObjRef4 Text;
      parameter VarConnectedObjRef5 Text;
      parameter VarToLibraryId Text;
      ludependencies = MediaLibraryItem;
   }
   action CopyMediaItems {
      ludependencies = MediaLibrary, LibraryIdStorage;
   }
   action PasteMediaItems {
      ludependencies = MediaLibrary, MediaLibraryItem, LibraryIdStorage;
      parameter ToLibraryId Text;
   }
}
@Override
entity MediaLibraryItem {
   from = "media_library_item_join";
   supportwarnings = [true];
   keys = LibraryItemId, ItemId, LibraryId {
      where = "LIBRARY_ITEM_ID = :LibraryItemId and ITEM_ID = :ItemId and LIBRARY_ID = :LibraryId";
   }
   use attributes = DefaultMedia, MediaPrintOption, NoteText, CreatedBy, CreatedDate;
   attribute LibraryItemId Number {
      label = "Library Item ID";
      editable = [false];
   }
   attribute ItemId Number {
      label = "Item ID";
      editable = [ETag = null];
   }
   attribute DefaultMedia Boolean("TRUE", "FALSE") {
      label = "Default Image";
      editable = [false];
      required = [false];
   }
   attribute Name Text {
      maxlength = 200;
      required = [true];
   }
   attribute Description Text {
      maxlength = 2000;
      required = [true];
   }
   attribute CreatedBy Text {
      editable = [false];
   }
   attribute CreatedDate Timestamp {
      editable = [false];
   }
   attribute LibraryId Text {
      label = "Collection Id";
   }
   attribute MediaFile Text {
      fetch = "media_file";
      label = "Media File";
      maxlength = 300;
   }
   attribute MediaItemType Enumeration(MediaItemType) {
      fetch = "media_item_type_db";
      label = "Media Item Type Db";
      maxlength = 20;
      required = [true];
   }
   attribute PrivateMediaItem Boolean("TRUE", "FALSE") {
      fetch = "private_media_item";
      label = "Private Media Item";
      insertable = [false];
      updatable = [true];
      required = [false];
   }
   attribute Obsolete Boolean("TRUE", "FALSE") {
      editable = [false];
      required = [false];
   }
   attribute MediaItemObsolete Boolean("TRUE", "FALSE") {
      fetch = "nvl(Media_Item_API.Get_Obsolete(item_id), 'FALSE')";
      editable = [false];
      required = [false];
   }
   attribute HasMultipleConnections Text {
      fetch = "Media_Library_Item_API.Has_Multiple_Connections(item_id)";
   }
   attribute HasSingleConnection Text {
      fetch = "Media_Library_Item_API.Has_Single_Connection(item_id)";
   }

   reference MediaItemRef(ItemId) to MediaItem(ItemId);
   reference ItemIdRef(ItemId) to MediaItem(ItemId) {
      label = "Item ID";
      where = "PRIVATE_MEDIA_ITEM = FALSE";
      copy Name to Name;
      copy Description to Description;
      copy MediaItemType to MediaItemType;
      copy ArchiveNo to MediaArchive;
   }

   array MediaItemArray(ItemId) to MediaItem(ItemId);

   action SetDefaultLibraryMedia {
      ludependencies = MediaLibraryItem;
   }
   action InsertData Text;
}

@Override
entity MediaItem {
   attribute MediaObject Stream {
      implementation = "Java";
   }
   attribute MediaText LongText {
      inlined = [true];
      editable = [true];
   }
   attribute Obsolete Boolean("Tes", "No");
   attribute PrivateMediaItem Boolean("Tes", "No");
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------





--------------------------------- FUNCTIONS ---------------------------------
function GetMediaObject Stream {
   parameter VarItemId Number;
}
function GetItemId List<Entity(MediaItem)> {
   where = "OBSOLETE = 'FALSE' AND PRIVATE_MEDIA_ITEM = 'FALSE'";
}

-------------------------------- STRUCTURES ---------------------------------
structure CopyLibraryStructure {
   attribute LuName Text;
   attribute ConnectedObjSourceTranslated Text {
      label = "Connected Obj Source";
      maxlength = 200;
      editable = [false];
   }
   attribute ConnectedObjRef1 Text {
      label = "${ConnectedObjRef1Title}";

      maxlength = 200;
      format = uppercase;
   }
   attribute ConnectedObjRef2 Text {
      label = "${ConnectedObjRef2Title}";
      maxlength = 200;
      format = uppercase;
   }
   attribute ConnectedObjRef3 Text {
      label = "${ConnectedObjRef3Title}";
      maxlength = 200;
      format = uppercase;
   }
   attribute ConnectedObjRef4 Text {
      label = "${ConnectedObjRef4Title}";
      maxlength = 200;
      format = uppercase;
   }
   attribute ConnectedObjRef5 Text {
      label = "${ConnectedObjRef5Title}";
      maxlength = 200;
      format = uppercase;
   }
   attribute ConnectedObjRef1Title Text;
   attribute ConnectedObjRef2Title Text;
   attribute ConnectedObjRef3Title Text;
   attribute ConnectedObjRef4Title Text;
   attribute ConnectedObjRef5Title Text;
}

--------------------------------- VIRTUALS ----------------------------------
virtual LibraryIdStorage {
   attribute LibraryId Text;
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


