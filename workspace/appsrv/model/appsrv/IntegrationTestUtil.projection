projection IntegrationTestUtil;
component APPSRV;
layer Core;
description "Utilities for integration testing. Do not grant to normal end users in production.";
category Users;

--------------------------------- FRAGMENTS ---------------------------------


----------------------------- MAIN ENTRY POINTS -----------------------------


------------------------------ ENTITY DETAILS -------------------------------


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------

// Execute a background job, don't wait
action ExecuteBackgroundJobNoWait {
   initialcheck none;
   parameter JobId Number;
}

// Execute a background job, wait until "done"
action ExecuteBackgroundJobWaitDone {
   initialcheck none;
   parameter JobId Number;
}

// Execute a background job, wait until "done"
// ArgumentString should pass key-value pairs separated by semi colons eg: CALENDAR_ID=PJ5;PROJECT_ID=PJ001;
action FindAndExecuteBackgroundJobWaitDone {
   initialcheck none;
   parameter Description Text;
   parameter ArgumentString Text;
}

// Find the latest background job for a Procedure and execute, wait until "done"
@apidoc {
   @description : Finds and executes background job. Waits until the background job is executed or 3 minutes
   @param ProcedureName : Name of the procedure in the background job
   @param Description : Full or part of the description in the background job
   @param ArgumentString : <<Argument string should be key value pairs separated by ';' as record separators. e.g. "CATALOG_NO=INVPART-1;PRICE_LIST=SCPL345"
   If more than one value pair that are not adjacent, can be passed with %(percentage sign) as separator. e.g. "CATALOG_NO=INVPART-1%PRICE_LIST=SCPL345">>
}
action FindAndExecuteProcedureWaitDoneWithArgs {
   initialcheck none;
   parameter ProcedureName Text;
   parameter Description Text;
   parameter ArgumentString Text;
}

// Find the latest background job that is generated from IFS Connect and execute, wait until "done"
//By the time this methods is called, background job may not have been created but wait until it is generated by IFS Connctivity
action FindAndExecuteConnectProcedureWaitDone {
   initialcheck none;
   parameter ProcedureName Text;
}

// removes all cost/revenue elements per CodePart A created from the STD template
action RemoveAllCostRevElementsPerCodePart {
   initialcheck none;
   parameter Company Text;
}

action RemoveAllCostRevElements {
   initialcheck none;
   parameter Company Text;
}


--------------------------------- FUNCTIONS ---------------------------------

// Get job state, don't wait until "done"
function GetJobStateNoWait Text {
   parameter JobId Number;
}

// Get job state, wait until "done"
function GetJobStateWaitDone Text {
   parameter JobId Number;
}

// This method retrieves latest background job id, matching the parameters given in the ArgumentList.
// The format of the ArgumentList should be, e.g. "CONTRACT=SC-S1^PART_NO=SC-P1^"
function GetLatestJobIdByParameters Number {
   parameter ProcedureName Text;
   parameter ArgumentList Text;
}

//Return Work date by adding no. of working days equals to Duration to the StartDate
//Ex: Calendar = PJ5, StartDate = 2020-07-23, Duration = 3 will return 2020-07-28
//Ex: Calendar = PJ5, StartDate = 2020-07-23, Duration = -2 will return 2020-07-21
function GetWorkDay Date {
   parameter Calendar Text;
   parameter StartDate Timestamp;
   parameter Duration Number;
}

-------------------------------- STRUCTURES ---------------------------------


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
