-----------------------------------------------------------------------------
--  Date         Sign    History
--  ------      ------  -----------------------------------------------------
--  2020-01-21  LASSLK  SAXTEND-1244,Implement LOV Filtering
-----------------------------------------------------------------------------
client Calendar;
component APPSRV;
layer Core;
projection CalendarHandling;
// Enterprise Explorer Source: frmWorkTimeCalendar

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry WorkTimeCalendarNavEntry parent AppsrvNavigator.ApplicationBaseSetupWorkTimeCalendar at index 100 {

      label = "Calendar";
      page Form home WorkTimeCalendar;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page Form using WorkTimeCalendarSet {
   label = "Calendar";
   stateindicator WorkTimeCalendarStateIndicator;
   selector WorkTimeCalendarSelector;
   group WorkTimeCalendarGroup;
   list WorkTimeDescList(WorkTimeDescArray);

   commandgroup CommandGroupCmdGroup {

      command GenerateCalendarCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command ScheduleExceptionCommand;
      command GeneratedCalendarsCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------

// --- Suggestions, based on resolved logic within 'frmWorkTimeCalendar' ---
// Navigation actions: The following code templates can be verified and used to define the 'execute' section of a command:
//   navigate "page/ScheduleException/Form";   // In Enterprise Explorer identifyed as 'frmWorkTimeException' (APPSRV)
//   navigate "page/GeneratedCalendars/List";   // In Enterprise Explorer identifyed as 'tbwCounterOverview' (APPSRV)
//   navigate "page/Schedule/Form";   // In Enterprise Explorer identifyed as 'frmWorkTimeSchedule' (APPSRV)
// -------------

command GenerateCalendarCommand for WorkTimeCalendar {
   label = "Generate Calendar";

   enabled = [true];

   execute {
      messagebox("Warning", warning, "You are about to start a background job that generates the selected calendar. This process might affect a number of orders and planned operations that possibly needs to be replanned or reconsidered when this operation has finished. After the generation, make sure to check the consequences before any actions are taken. Do you want to start the generating process now?") {
         when OK {
            confirm("Are you really sure you want to start the calendar generation now and is this a proper time to do that?") {
               when CANCEL {
                  exit;
               }
            }
         }
         when CANCEL {
            exit;
         }

      }
      call GenerateCalendar();
   }
}

command ScheduleExceptionCommand for WorkTimeCalendar {
   label = "Schedule Exception";

   enabled = [ExceptionCodeRef != null];

   execute {
      navigate "page/ScheduleException/Form?$filter=ExceptionCode eq $[ExceptionCodeRef.ExceptionCode]";
   }
}

command GeneratedCalendarsCommand for WorkTimeCalendar {
   label = "Generated Calendars";

   enabled = [true];

   execute {
      navigate "page/GeneratedCalendars/List?$filter=CalendarId eq $[CalendarId]";
   }
}

command ScheduleCommand for WorkTimeCalendarDesc {
   label = "Schedule";

   enabled = [true];

   execute {
      navigate "page/Schedule/Form?$filter=Schedule eq $[Schedule]";
   }
}

--------------------------------- SELECTORS ---------------------------------

@Override
selector WorkTimeCalendarSelector for WorkTimeCalendar {
   label = "${CalendarId} - ${Description} - ${Objstate}";
   static CalendarId;
   static Description;

   badge Objstate {
      style = TextOnly;
      label = "Status";

      emphasis StatePreliminary = [Objstate = "NotGenerated"];
      emphasis StateInProgress = [Objstate = "ChangesPending"];
      emphasis StateCompleted = [Objstate = "Generated"];
   }
}

@Override
selector ReferenceWorkTimeExceptionSelector for WorkTimeException {
   label = "";
   static ExceptionCode {
      label = "Exception ID";
   }
   static Description;
}


---------------------------------- GROUPS -----------------------------------

group WorkTimeCalendarGroup for WorkTimeCalendar {
   label = "";

   field CalendarId {
      size = Small;
   }
   field Description;

   lov ExceptionCodeRef with ReferenceWorkTimeExceptionSelector {
      search = ExceptionCode, Description;
      label = "Exception";
      description = ExceptionCodeRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------

list WorkTimeDescList for WorkTimeCalendarDesc {
   label = "Schedules";

   lov ScheduleRef with ReferenceWorkTimeScheduleSelector {
      search = Schedule, Description;
      size = Large;
      description = ScheduleRef.Description;
   }
   field StartDate;
   field EndDate;

   commandgroup CommandGroupCmdGroup {

      command ScheduleCommand;
   }
}

----------------------------------- CARDS -----------------------------------


---------------------------------- DIALOGS ----------------------------------


---------------------------------- CHARTS -----------------------------------


---------------------------------- SHEETS -----------------------------------


------------------------------ STATE INDICATOR ------------------------------

@Override
stateindicator WorkTimeCalendarStateIndicator for WorkTimeCalendar {

   state "NotGenerated" {
      completed = 5%;
      emphasis StatePreliminary = [Objstate = "NotGenerated"];
   }
   state "ChangesPending" {
      completed = 50%;
      emphasis StateInProgress = [Objstate = "ChangesPending"];
   }
   state "Generated" {
      completed = 100%;
      emphasis StateCompleted = [Objstate = "Generated"];
   }
}


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------

