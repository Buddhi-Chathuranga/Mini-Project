
-----------------------------------------------------------------------------
--  Date         Sign    History
--  ------      ------  ---------------------------------------------------------
--  2020-01-21  LASSLK  SAXTEND-1244,Implement LOV Filtering
--  2020-07-16  CLEKLK  Bug 154708, Modified FormulaItemList
-----------------------------------------------------------------------------
client Formula;
component APPSRV;
layer Core;
projection FormulaHandling;
include fragment CopyFormulaDialog;


----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry FormulaNavEntry parent AppsrvNavigator.ApplicationBaseSetupFormula at index 100 {
      label = "Formula";
      page Form home Formula;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using FormulaSet {
   label = "Formula";
   stateindicator FormulaStateIndicator;
   crudactions {
      edit {
         enabled = [Objstate = "Invalid"];
      }
   }
   selector FormulaSelector;
   group FormulaGroup;
   group FormulaCalculationGroup;
   list FormulaItemList(FormulaItemArray) {
      preselect = [false];
   }
   list FormulaVaribleList(FormulaVaribleArray) {
      preselect = [false];
   }
   commandgroup CommandGroupCmdGroup {

      command SetValid {
         label = "Valid";
      }
      command SetInvalid {
         label = "Invalid";
      }
   }
   commandgroup CommandGroup2CmdGroup {

      @DynamicComponentDependency PARTCA
      command UsedbyGroupsCommand;
      command CopyFormulaCommand;
   }
   commandgroup ButtonCmdGroup {

      command TestFormulaCommand;
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

-------------------------------- ASSISTANTS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group FormulaGroup for Formula {
   label = "";
   field FormulaId {
      size = Medium;
   }
   field Description {
      size = Large;
   }
   lov FormulaUomRef with ReferenceIsoUnitSelector {
      search = UnitCode, Description;
      size = Small;
   }
   field UomDescription {
      size = Large;
   }
}

group FormulaCalculationGroup for Formula {
   label = "Formula and Calculation";
   field Formula {
      size = FullWidth;
   }
   field TestResult {
      size = FullWidth;
   }
}

----------------------------------- LISTS -----------------------------------
list FormulaItemList for FormulaItem {
   orderby = FormulaItemSequence;
   crudactions {
      new {
         enabled = [parent.Objstate = "Invalid"];
      }
      edit {
         enabled = [parent.Objstate = "Invalid"];
      }
      delete {
         enabled = [parent.Objstate = "Invalid"];
      }
   }
   field FormulaItemSequence {
      size = Small;
   }
   field ItemType {
      size = Small;
      validate command {
         enabled = [not(Item = null)];
         execute {
            set Item = null;
         }
      }
   }
   lov ItemRef with FormulaItemEnumerationSelector using FetchFormulaItemEnumeration(ItemType) {
      freeinput = [true];
   }

   field ItemRef.Description {
      label = "Description";
      size = Large;
   }
   field Notes {
      size = Large;
   }

   fieldranking FormulaItemSequence, ItemType, ItemRef, ItemRef.Description, Notes;
}

list FormulaVaribleList for FormulaItemVariable {
   crudactions {
      edit {
         enabled = [parent.Objstate = "Invalid"];
      }
   }
   lov VariableIdRef with ReferenceFormulaVariableSelector {
      search = VariableId, Description;
      size = Small;
   }
   field VariableIdRef.Description {
      size = Large;
      label = "Description";
   }
   field VariableIdRef.UnitCode {
      size = Small;
      label = "UoM";
   }
   field ValueSource {
      size = Small;
   }
   field VariableValue {
      size = Small;
      validate command {
         enabled = [ValueSource = "Fixed"];
         execute {
            set TestValue = VariableValue;
         }
      }
   }
   field TestValue {
      size = Small;
   }

   fieldranking VariableIdRef, VariableIdRef.Description, VariableIdRef.UnitCode, ValueSource, VariableValue, TestValue;
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector FormulaSelector for Formula {
   label = "${FormulaId}";
   static FormulaId;
   badge Objstate {
      style = TextOnly;
      emphasis StatePreliminary = [Objstate = "Invalid"];
      emphasis StateReleased = [Objstate = "Valid"];
   }
}

selector FormulaItemEnumerationSelector for FormulaItemEnumerationStruct {
   static VariableId {
      showlabel = false;
   }
}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator FormulaStateIndicator for Formula {
   state "Invalid" {
      completed = 100%;
      emphasis StatePreliminary = [Objstate = "Invalid"];
   }
   state "Valid" {
      completed = 100%;
      emphasis StateReleased = [Objstate = "Valid"];
   }
}

--------------------------------- COMMANDS ----------------------------------
@DynamicComponentDependency PARTCA
command UsedbyGroupsCommand for Formula {
   label = "Used by Groups";
   enabled = [true];
   execute {
      navigate "page/InputUom/List?$filter=FormulaId eq $[FormulaId]";
         // In Enterprise Explorer identifyed as 'tbwInputUnitMeasOverview' (PARTCA)
   }
}

command CopyFormulaCommand for Formula {
   label = "Copy Formula";
   enabled = [not(component.FormulaItemList.IsDirty)];
   variable NewFormulaIdStr {
      type = Text;
   }
   execute {
      dialog CopyFormulaDialog(FormulaId) into(NewFormulaIdStr) {
         when OK {
            navigate "page/Formula/Form?$filter=FormulaId eq $[NewFormulaIdStr]";
            info("Formula copied.");
         }
      }
   }
}

command TestFormulaCommand for Formula {
   label = "Test Formula";
   variable IsValidBool {
      type = Boolean;
   }
   //! TODO: needed for TestFormulaCommand - revisit once http://jira/browse/PJUXXW4-6266 has been looked at
   enabled = [component.FormulaItemList.IsEmpty = false and not(component.FormulaItemList.IsDirty) and not(component.FormulaVaribleList.IsDirty) and NullTestValueCount = 0];
   execute {
      call TestFormula(FormulaId) into IsValidBool;
      if [not(IsValidBool) and not(TestResult = null)] {
         error("There is an error in the entered formula.");
      }
      else {
         success("No errors when testing entered formula.");
      }
   }
}

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.19
// Enterprise Explorer Source: frmFormula



