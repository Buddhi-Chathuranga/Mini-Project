fragment MediaLibReportDialog;
component APPSRV;
layer Core;
description "Put some useful description here ...";

----------------------------- CLIENT FRAGMENTS ------------------------------

assistant MediaLibReportAssistant using MediaLibraryReportVirtualSet {
   label = "Print Details";
   input(LibraryId, LibraryItemId, InsertVar);

   singlestep {
      group DefaultSettingsGroup {
         label = "";
      }
      list MediaLibraryReportList(ListArray);
   }
}

list MediaLibraryReportList for MediaLibraryReport {
   label = "";
   field ReportTitle {
      size = Medium;
   }
   field MediaPrintOption {
      size = Small;
      editable = [DefaultSettings];
   }
}

group DefaultSettingsGroup for MediaReportVirtual {
   field DefaultSettings {
      label = "Use Default Settings";
      validate command {
         execute {
            if[DefaultSettings = true] {
               call RemoveData(LibraryId, LibraryItemId);
            }
         }
      }
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
entityset MediaLibraryReportVirtualSet for MediaReportVirtual;

virtual MediaReportVirtual {
   attribute LibraryId Text;
   attribute LibraryItemId Number;
   attribute DefaultSettings Boolean("TRUE", "FALSE") {
      required = [true];
      fetch = "'FALSE'";
   }
   array ListArray(LibraryId, LibraryItemId) to MediaLibraryReport(LibraryId, LibraryItemId);

   action RemoveData {
      parameter LibraryId Text;
      parameter LibraryItemId Number;
   }
}

@Override
entity MediaLibraryReport {

   crud = Read, Update;
   from = "media_library_report";
   exec = "MEDIA_LIBRARY_REPORT_API";
   keys = LibraryId, LibraryItemId, ReportId {
      where = "LIBRARY_ID = :LibraryId and LIBRARY_ITEM_ID = :LibraryItemId  and REPORT_ID = :ReportId";
   }
   ludependencies = MediaLibraryReport;

   use attributes = MediaPrintOption;
   attribute LibraryId Text {
      fetch = "library_id";
      label = "Library ID";
      maxlength = 200;
      required = [true];
      editable = [ETag = null];
   }
   attribute LibraryItemId Number {
      fetch = "library_item_id";
      label = "Library Item ID";
      required = [true];
      editable = [ETag = null];
   }
   attribute ReportId Text {
      fetch = "report_id";
      label = "Report ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
   }
   attribute Description Text {
      fetch = "Media_Report_API.Get_Description(report_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ReportTitle Text {
      fetch = "Media_Library_Report_API.Get_Report_Title(report_id)";
      label = "Report Title";
      maxlength = 100;
      editable = [false];
   }
   attribute MediaPrintOption Enumeration(MediaPrintOption) {
      fetch = "media_print_option_db";
      label = "Media Print Option";
      required = [true];
   }
   reference LibraryItemIdRef(LibraryId, LibraryItemId) to MediaLibraryItem(LibraryId, LibraryItemId) {
      label = "Library Item ID";
   }
   reference ReportIdRef(ReportId) to MediaReport(ReportId) {
      label = "Report ID";
   }


}

function GetReportTitle Text {
   parameter ReportId Text;
}
function InsertInitialData Text {
   parameter LibraryId Text;
   parameter LibraryItemId Number;
}



