PROMPT Creating CAMUNDA_INSTALL_SYS specification

-- [IFS COMPLETE BLOCK PACKAGE CAMUNDA_INSTALL_SYS]
CREATE OR REPLACE PACKAGE &CAMUNDA_APPOWNER..CAMUNDA_INSTALL_SYS AUTHID DEFINER IS

module_                   CONSTANT VARCHAR2(6)      := 'FNDBAS';
service_                  CONSTANT VARCHAR2(30)     := 'CamundaInstall';
lu_name_                  CONSTANT VARCHAR2(30)     := 'CamundaInstall';
lu_type_                  CONSTANT VARCHAR2(30)     := 'SystemService';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

ORA_MAX_NAME_LEN            CONSTANT NUMBER :=  dbms_standard.ORA_MAX_NAME_LEN;

TYPE ColRec IS RECORD (
     table_name   VARCHAR2(ORA_MAX_NAME_LEN),
     column_name   VARCHAR2(4000),
     data_type     VARCHAR2(ORA_MAX_NAME_LEN),
     nullable      VARCHAR2(1),
     default_value VARCHAR2(100),
     lob_parameter VARCHAR2(4000),
     keep_default  VARCHAR2(1));

TYPE ColumnTabType    IS TABLE OF ColRec  INDEX BY BINARY_INTEGER;

TYPE ColViewRec IS RECORD (
     column_name    VARCHAR2(ORA_MAX_NAME_LEN),
     column_source  VARCHAR2(4000),
     column_comment VARCHAR2(4000));

TYPE ColumnViewType   IS TABLE OF ColViewRec  INDEX BY BINARY_INTEGER;

TYPE ObjectRec  IS RECORD (object_name    VARCHAR2(ORA_MAX_NAME_LEN));

TYPE ObjectArray IS TABLE OF ObjectRec  INDEX BY BINARY_INTEGER;

TYPE IndexRec  IS RECORD (index_name    VARCHAR2(ORA_MAX_NAME_LEN), index_type    VARCHAR2(30));

TYPE IndexArray IS TABLE OF IndexRec  INDEX BY BINARY_INTEGER;


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE Add_Lob_Column (
   table_name_  IN VARCHAR2,
   column_      IN ColRec,
   show_info_   IN BOOLEAN DEFAULT FALSE );

PROCEDURE Alter_Lob_Column (
   table_name_  IN VARCHAR2,
   column_      IN ColRec,
   show_info_   IN BOOLEAN DEFAULT FALSE );

PROCEDURE Alter_Table (
   table_name_    IN VARCHAR2,
   columns_       IN ColumnTabType,
   show_info_     IN BOOLEAN DEFAULT FALSE );

--@PoReadOnly(Alter_Table_Column)
PROCEDURE Alter_Table_Column (
   table_name_  IN VARCHAR2,
   alter_type_  IN VARCHAR2,
   column_      IN ColRec,
   show_info_   IN BOOLEAN DEFAULT FALSE );

--@PoReadOnly(Alter_Table_Rowmovement)
PROCEDURE Alter_Table_Rowmovement (
   table_name_  IN VARCHAR2,
   enable_      IN BOOLEAN,
   show_info_   IN BOOLEAN DEFAULT FALSE );

--@PoReadOnly(Column_Exist)
FUNCTION Column_Exist (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Constraint_Exist)
FUNCTION Constraint_Exist (
   constraint_name_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Create_Constraint)
PROCEDURE Create_Constraint (
   table_name_       IN VARCHAR2,
   constraint_name_  IN VARCHAR2,
   columns_          IN ColumnTabType,
   type_             IN VARCHAR2 DEFAULT 'P',
   index_tablespace_ IN VARCHAR2 DEFAULT NULL,
   storage_          IN VARCHAR2 DEFAULT NULL,
   replace_          IN BOOLEAN  DEFAULT TRUE,
   show_info_        IN BOOLEAN  DEFAULT FALSE,
   use_index_        IN BOOLEAN  DEFAULT TRUE,
   reference_clause_ IN VARCHAR2 DEFAULT NULL,
   on_delete_clause_ IN VARCHAR2 DEFAULT NULL );

--@PoReadOnly(Create_Context)
PROCEDURE Create_Context (
   context_name_      IN VARCHAR2,
   context_package_   IN VARCHAR2,
   initialized_       IN VARCHAR2 DEFAULT NULL,
   accessed_          IN VARCHAR2 DEFAULT NULL,
   show_info_         IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Directory)
PROCEDURE Create_Directory (
   directory_name_  IN VARCHAR2,
   path_            IN VARCHAR2,
   read_grant_      IN BOOLEAN  DEFAULT TRUE,
   write_grant_     IN BOOLEAN  DEFAULT TRUE,
   show_info_       IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Index)
PROCEDURE Create_Index (
   table_name_      IN VARCHAR2,
   index_name_      IN VARCHAR2,
   columns_         IN ColumnTabType,
   type_            IN VARCHAR2 DEFAULT 'N',
   tablespace_      IN VARCHAR2 DEFAULT NULL,
   storage_         IN VARCHAR2 DEFAULT NULL,
   replace_         IN BOOLEAN  DEFAULT TRUE,
   show_info_       IN BOOLEAN  DEFAULT FALSE,
   exception_       IN BOOLEAN  DEFAULT FALSE,
   expression_      IN BOOLEAN  DEFAULT FALSE  );

--@PoReadOnly(Create_Sequence)
PROCEDURE Create_Sequence (
   sequence_     IN VARCHAR2,
   parameters_   IN VARCHAR2,
   show_info_    IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Text_Index)
PROCEDURE Create_Text_Index (
   index_name_      IN VARCHAR2,
   table_name_      IN VARCHAR2,
   column_name_     IN VARCHAR2,
   parameters_      IN VARCHAR2,
   replace_         IN BOOLEAN  DEFAULT TRUE,
   show_info_       IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Trigger)
PROCEDURE Create_Trigger (
   trigger_name_  IN VARCHAR2,
   trigger_type_  IN VARCHAR2,
   dml_event_     IN VARCHAR2,
   columns_       IN ColumnTabType,
   table_name_    IN VARCHAR2,
   condition_     IN VARCHAR2,
   plsql_block_   IN VARCHAR2,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Disable_Trigger)
PROCEDURE Disable_Trigger (
   trigger_name_  IN VARCHAR2,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Enable_Trigger)
PROCEDURE Enable_Trigger (
   trigger_name_  IN VARCHAR2,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Table)
PROCEDURE Create_Table (
   table_name_    IN VARCHAR2,
   columns_       IN ColumnTabType,
   tablespace_    IN VARCHAR2 DEFAULT NULL,
   storage_       IN VARCHAR2 DEFAULT NULL,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Table_Iot)
PROCEDURE Create_Table_Iot (
   table_name_    IN VARCHAR2,
   columns_       IN ColumnTabType,
   primary_key_   IN ColumnTabType,
   tablespace_    IN VARCHAR2 DEFAULT NULL,
   storage_       IN VARCHAR2 DEFAULT NULL,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Or_Replace_Table)
PROCEDURE Create_Or_Replace_Table (
   table_name_    IN VARCHAR2,
   columns_       IN ColumnTabType,
   tablespace_    IN VARCHAR2 DEFAULT NULL,
   storage_       IN VARCHAR2 DEFAULT NULL,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Or_Replace_Type)
PROCEDURE Create_Or_Replace_Type (
   type_name_     IN VARCHAR2,
   columns_       IN ColumnTabType,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Or_Replace_Type)
PROCEDURE Create_Or_Replace_Type (
   type_name_     IN VARCHAR2,
   type_table_    IN VARCHAR2,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Type)
PROCEDURE Create_Type (
   type_name_     IN VARCHAR2,
   columns_       IN ColumnTabType,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Type)
PROCEDURE Create_Type (
   type_name_     IN VARCHAR2,
   type_table_    IN VARCHAR2,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Or_Replace_Empty_View)
PROCEDURE Create_Or_Replace_Empty_View (
   view_name_    IN VARCHAR2,
   columns_      IN ColumnViewType,
   lu_           IN VARCHAR2 DEFAULT NULL,
   module_       IN VARCHAR2 DEFAULT NULL,
   server_only_  IN VARCHAR2 DEFAULT NULL,
   show_info_    IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Create_Temporary_Table)
PROCEDURE Create_Temporary_Table (
   table_name_    IN VARCHAR2,
   columns_       IN ColumnTabType,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Format_Column)
FUNCTION Format_Column (
   colrec_ IN ColRec,
   type_ IN VARCHAR2 DEFAULT 'TABLE',
   create_table_ IN BOOLEAN  DEFAULT FALSE ) RETURN VARCHAR2;

--@PoReadOnly(Format_Columns)
FUNCTION Format_Columns (
   columns_ IN ColumnTabType,
   type_    IN VARCHAR2 DEFAULT 'TABLE',
   create_table_ IN BOOLEAN  DEFAULT FALSE ) RETURN VARCHAR2;

--@PoReadOnly(Functionality_Exist)
FUNCTION Functionality_Exist (
   functionality_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Column_Nullable)
FUNCTION Get_Column_Nullable (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Column_On_Null)
FUNCTION Get_Column_On_Null (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Column_Type)
FUNCTION Get_Column_Type (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Object_Type)
FUNCTION Get_Object_Type (
   object_name_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Default_Value)
FUNCTION Get_Default_Value (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2 ) RETURN LONG;

--@PoReadOnly(Get_Index_Columns)
FUNCTION Get_Index_Columns (
   index_name_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Index_Columns)
FUNCTION Get_Index_Columns (
   table_name_  IN VARCHAR2,
   index_name_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Index_Table)
FUNCTION Get_Index_Table (
   index_name_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Index_Type)
FUNCTION Get_Index_Type (
   index_name_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Index_Uniqueness)
FUNCTION Get_Index_Uniqueness (
   table_name_  IN VARCHAR2,
   index_name_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Constraint_Columns)
FUNCTION Get_Constraint_Columns (
   constraint_name_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Constraint_Columns)
FUNCTION Get_Constraint_Columns (
   table_name_      IN VARCHAR2,
   constraint_name_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Referenced_Columns)
FUNCTION Get_Referenced_Columns (
   table_name_      IN VARCHAR2,
   constraint_name_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Index_Exist)
FUNCTION Index_Exist (
   index_name_  IN VARCHAR2,
   table_name_  IN VARCHAR2 DEFAULT NULL ) RETURN BOOLEAN;

--@PoReadOnly(Is_Option_Available)
FUNCTION Is_Option_Available (
   option_ IN  VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Is_Rowmovement_Enabled)
FUNCTION Is_Rowmovement_Enabled (
   table_name_   IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Is_Table_Iot)
FUNCTION Is_Table_Iot (
   table_name_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Is_Table_Temporary)
FUNCTION Is_Table_Temporary (
   table_name_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Is_Table_Queue)
FUNCTION Is_Table_Queue (
   table_name_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Is_Table_Mw)
FUNCTION Is_Table_Mw (
   table_name_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Object_Exist)
FUNCTION Object_Exist (
   object_name_  IN VARCHAR2,
   object_type_  IN VARCHAR2,
   status_       IN VARCHAR2 DEFAULT NULL ) RETURN BOOLEAN;

--@PoReadOnly(Rebuild_Index)
PROCEDURE Rebuild_Index (
   index_name_       IN VARCHAR2,
   show_info_        IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Constraints)
PROCEDURE Remove_Constraints(
   table_name_      IN VARCHAR2,
   constraint_name_ IN VARCHAR2 DEFAULT '%',
   show_info_       IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Context)
PROCEDURE Remove_Context(
   context_name_    IN VARCHAR2,
   show_info_       IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Indexes)
PROCEDURE Remove_Indexes (
   table_name_ IN VARCHAR2,
   index_name_ IN VARCHAR2 DEFAULT '%',
   show_info_  IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Lob_Column)
PROCEDURE Remove_Lob_Column (
   table_name_  IN VARCHAR2,
   column_      IN ColRec,
   show_info_   IN BOOLEAN DEFAULT FALSE );

--@PoReadOnly(Remove_Materialized_View)
PROCEDURE Remove_Materialized_View (
   view_name_ IN VARCHAR2,
   show_info_ IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Materialized_View_Log)
PROCEDURE Remove_Materialized_View_Log (
   table_name_ IN VARCHAR2,
   show_info_  IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Package)
PROCEDURE Remove_Package (
   package_name_ IN VARCHAR2,
   show_info_    IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Sequence)
PROCEDURE Remove_Sequence (
   sequence_name_ IN VARCHAR2,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Synonym)
PROCEDURE Remove_Synonym (
   synonym_name_ IN VARCHAR2,
   show_info_    IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Table)
PROCEDURE Remove_Table (
   table_name_ IN VARCHAR2,
   show_info_  IN BOOLEAN DEFAULT FALSE,
   purge_      IN BOOLEAN DEFAULT FALSE );

--@PoReadOnly(Remove_Type)
PROCEDURE Remove_Type (
   type_name_ IN VARCHAR2,
   show_info_  IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_Trigger)
PROCEDURE Remove_Trigger (
   trigger_name_  IN VARCHAR2,
   show_info_     IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Remove_View)
PROCEDURE Remove_View (
   view_name_ IN VARCHAR2,
   show_info_ IN BOOLEAN  DEFAULT FALSE );

--@PoReadOnly(Rename_Column)
PROCEDURE Rename_Column (
   table_name_       IN VARCHAR2,
   new_column_name_  IN VARCHAR2,
   old_column_name_  IN VARCHAR2,
   show_info_        IN BOOLEAN  DEFAULT FALSE,
   exception_        IN BOOLEAN  DEFAULT TRUE );

--@PoReadOnly(Rename_Table)
PROCEDURE Rename_Table (
   source_table_       IN VARCHAR2,
   target_table_       IN VARCHAR2,
   show_info_          IN BOOLEAN DEFAULT FALSE,
   exception_          IN BOOLEAN DEFAULT TRUE,
   remove_indexes_     IN BOOLEAN DEFAULT TRUE,
   remove_constraints_ IN BOOLEAN DEFAULT TRUE,
   remove_triggers_    IN BOOLEAN DEFAULT TRUE );

PROCEDURE Rename_Sequence (
   source_sequence_    IN VARCHAR2,
   target_sequence_    IN VARCHAR2,
   show_info_          IN BOOLEAN  DEFAULT FALSE,
   exception_          IN BOOLEAN  DEFAULT TRUE );

--@PoReadOnly(Rename_Constraint)
PROCEDURE Rename_Constraint (
   table_name_         IN VARCHAR2,
   source_constraint_  IN VARCHAR2,
   target_constraint_  IN VARCHAR2,
   show_info_          IN BOOLEAN  DEFAULT FALSE,
   exception_          IN BOOLEAN  DEFAULT TRUE );

--@PoReadOnly(Rename_Index)
PROCEDURE Rename_Index (
   source_index_       IN VARCHAR2,
   target_index_       IN VARCHAR2,
   show_info_          IN BOOLEAN  DEFAULT FALSE,
   exception_          IN BOOLEAN  DEFAULT TRUE );

--@PoReadOnly(Reset_Column)
PROCEDURE Reset_Column (
   column_ IN OUT NOCOPY ColRec );

--@PoReadOnly(Reset_Column_Table)
PROCEDURE Reset_Column_Table (
   columns_ IN OUT NOCOPY ColumnTabType );

--@PoReadOnly(Set_Column_Values)
FUNCTION Set_Column_Values (
   column_name_   IN     VARCHAR2,
   data_type_     IN     VARCHAR2 DEFAULT NULL,
   nullable_      IN     VARCHAR2 DEFAULT NULL,
   default_value_ IN     VARCHAR2 DEFAULT NULL,
   lob_parameter_ IN     VARCHAR2 DEFAULT NULL,
   keep_default_  IN     VARCHAR2 DEFAULT NULL ) RETURN ColRec;

--@PoReadOnly(Set_Table_Column)
PROCEDURE Set_Table_Column (
   columns_ IN OUT NOCOPY ColumnTabType,
   column_  IN     ColRec );

--@PoReadOnly(Set_Table_Column)
PROCEDURE Set_Table_Column (
   columns_       IN OUT NOCOPY ColumnTabType,
   column_name_   IN     VARCHAR2,
   data_type_     IN     VARCHAR2 DEFAULT NULL,
   nullable_      IN     VARCHAR2 DEFAULT NULL,
   default_value_ IN     VARCHAR2 DEFAULT NULL,
   lob_parameter_ IN     VARCHAR2 DEFAULT NULL,
   keep_default_  IN     VARCHAR2 DEFAULT NULL );

--@PoReadOnly(Set_View_Column_Values)
FUNCTION Set_View_Column_Values (
   column_name_    IN     VARCHAR2,
   column_source_  IN     VARCHAR2,
   column_comment_ IN     VARCHAR2 DEFAULT NULL ) RETURN ColViewRec;

--@PoReadOnly(Set_View_Column)
PROCEDURE Set_View_Column (
   columns_ IN OUT NOCOPY ColumnViewType,
   column_  IN     ColViewRec );

--@PoReadOnly(Set_View_Column)
PROCEDURE Set_View_Column (
   columns_        IN OUT NOCOPY ColumnViewType,
   column_name_    IN     VARCHAR2,
   column_source_  IN     VARCHAR2,
   column_comment_ IN     VARCHAR2 DEFAULT NULL );

--@PoReadOnly(Sequence_Exist)
FUNCTION Sequence_Exist (
   sequence_name_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Table_Exist)
FUNCTION Table_Exist (
   table_name_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Type_Exist)
FUNCTION Type_Exist (
   type_name_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Text_Index_Exist)
FUNCTION Text_Index_Exist (
   index_name_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Trigger_Exist)
FUNCTION Trigger_Exist (
   trigger_name_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(View_Exist)
FUNCTION View_Exist (
   view_name_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Package_Exist)
FUNCTION Package_Exist (
   package_name_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Primary_Key_Constraint_Exist)
FUNCTION Primary_Key_Constraint_Exist (
   table_name_      IN VARCHAR2) RETURN BOOLEAN;

--@PoReadOnly(Method_Exist)
FUNCTION Method_Exist (
   package_name_ IN VARCHAR2,
   method_name_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Mtrl_View_Exist)
FUNCTION Mtrl_View_Exist (
   mtrl_view_ IN VARCHAR2) RETURN BOOLEAN;

--@PoReadOnly(Mtrl_View_Log_Exist)
FUNCTION Mtrl_View_Log_Exist (
   mtrl_view_log_tbl_ IN VARCHAR2) RETURN BOOLEAN;

--@PoReadOnly(Move_Lob_Segment)
PROCEDURE Move_Lob_Segment (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2, 
   tablespace_  IN VARCHAR2 DEFAULT 'IFSAPP_LOB',
   show_info_   IN BOOLEAN  DEFAULT TRUE );

--@PoReadOnly(Move_Object)
PROCEDURE Move_Object (
   object_name_      IN VARCHAR2,    
   tablespace_       IN VARCHAR2 DEFAULT NULL,
   show_info_        IN BOOLEAN  DEFAULT FALSE,
   forced_offline_   IN BOOLEAN  DEFAULT FALSE);

--@PoReadOnly(Get_TableSpace_Name)
FUNCTION Get_TableSpace_Name (
   object_name_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Lob_Freepools)
FUNCTION Get_Lob_Freepools (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2 ) RETURN NUMBER;

--@PoReadOnly(Get_Lob_Sizes)
PROCEDURE Get_Lob_Sizes (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2,
   total_blocks_ OUT NUMBER,
   total_bytes_ OUT NUMBER,
   unused_blocks_ OUT NUMBER,
   unused_bytes_ OUT NUMBER,
   last_used_extent_file_id_ OUT NUMBER,
   last_used_extent_block_id_ OUT NUMBER,
   last_used_block_ OUT NUMBER );

--@PoReadOnly(Alter_Lob_Freepools)
PROCEDURE Alter_Lob_Freepools (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2, 
   show_info_   IN BOOLEAN  DEFAULT TRUE );

--@PoReadOnly(Change_Lob_Row_Movement)
PROCEDURE Change_Lob_Row_Movement (
   table_name_  IN VARCHAR2,
   column_name_ IN VARCHAR2, 
   tablespace_  IN VARCHAR2 DEFAULT 'IFSAPP_LOB',
   show_info_   IN BOOLEAN  DEFAULT TRUE );

PROCEDURE Register_Sub_Section (
   module_        IN VARCHAR2,
   register_id_   IN VARCHAR2,
   sub_section_   IN NUMBER  DEFAULT 1,
   processed_ok_  IN VARCHAR2,
   status_info_   IN VARCHAR2 DEFAULT NULL,
   file_name_     IN VARCHAR2 DEFAULT NULL,
   description_   IN VARCHAR2 DEFAULT NULL );

PROCEDURE Clear_Sub_Section (
   module_        IN VARCHAR2,
   register_id_   IN VARCHAR2,
   sub_section_   IN NUMBER );

--@PoReadOnly(Is_Sub_Section_Registered)
FUNCTION Is_Sub_Section_Registered (
   module_        IN VARCHAR2,
   register_id_   IN VARCHAR2,
   sub_section_   IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Reset_Module_Delivery_Flags;

FUNCTION Get_Index_Expression (
   table_name_  IN VARCHAR2,
   index_name_  IN VARCHAR2) RETURN VARCHAR2;

PROCEDURE Grant_Ifssys (
   show_info_ IN BOOLEAN  DEFAULT FALSE );

PROCEDURE Grant_Appowner (
   show_info_ IN BOOLEAN  DEFAULT FALSE );   

PROCEDURE Set_Verbose;
-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Change_Index_Buffer_Pool__
--
-- Change_Table_Buffer_Pool__
--
-- Coalesce_Index__
-----------------------------------------------------------------------------

PROCEDURE Change_Index_Buffer_Pool__ (
   index_name_  IN VARCHAR2,
   buffer_pool_ IN VARCHAR2 DEFAULT 'DEFAULT' );

PROCEDURE Change_Table_Buffer_Pool__ (
   table_name_  IN VARCHAR2,
   buffer_pool_ IN VARCHAR2 DEFAULT 'DEFAULT' );

PROCEDURE Coalesce_Index__ (
   index_name_ IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Init)
PROCEDURE Init;

END CAMUNDA_INSTALL_SYS;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR
