/*
 * PdfInserter.java
 *
 * Modified:
 *    madrse  2008-Feb-25 - Rewritten to use java access provider
 *    CHAALK  2017-Jul-06 - Remove jdom and use org.w3c.dom conversion
 */

package ifs.fnd.printingnode;

import ifs.fnd.log.*;

import ifs.client.application.remoteprintingnode.*;
import ifs.client.application.reportpdfinsert.*;

import ifs.fnd.printingnode.printagentutility.*;
import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;

import java.io.*;

import com.lowagie.text.pdf.*;


/**
 * Class that performs insertion of nested PDFs.
 */
class PdfInserter {

   private Logger log = LogMgr.getFrameworkLogger();

   private Element options;

   private byte[] resultPfd;

   /**
    * Exception generated by PDF insertion process.
    */
   static class InsertException extends Exception {
      InsertException(Throwable cause, String message) {
         super(message, cause);
      }
   }

   /**
    * Creates a new PdfInserter that performs insertion of specified PDFs.
    * @throws InsertException if the insertion process has failed
    */
   PdfInserter(byte[] pdf, Element options) throws InsertException {
      this.options = options;
      this.resultPfd = insertExtraPDFFiles(options, pdf);
   }

   /**
    * Gets the resulting PFD containing nested PDFs.
    * @return merged PDF or the original one if there were no nested PDFs to insert
    */
   byte[] getResultPdf() {
      return resultPfd;
   }

   private byte[] insertExtraPDFFiles(Element el, byte[] pdf) throws InsertException {
      try{
         Element INSERTS = PrintAgentUtil.getChildElement(el, "INSERTS");
         String[] pdfFiles = new String[6];
         if(INSERTS != null) {
		 
            NodeList insertlist = INSERTS.getChildNodes();
            
            for(int i=0;i<insertlist.getLength();i++)
            {
               if(insertlist.item(i).getNodeType() == Node.ELEMENT_NODE){
                  Element insertElement = (Element)insertlist.item(i);
                  if(insertElement.getTextContent()!=null && insertElement.getTextContent().length()>0 )
                  { 
                        if(insertElement.getNodeName().equalsIgnoreCase("INSERT_FIRST"))
                        {
                           processInsertElement(insertElement.getChildNodes(), pdfFiles, 0);
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_REST"))
                        {
                           processInsertElement(insertElement.getChildNodes(), pdfFiles, 2);
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_LAST"))
                        {
                           processInsertElement(insertElement.getChildNodes(), pdfFiles, 4);
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_FIRST_BEFORE"))
                        {
                           pdfFiles[0] = insertElement.getTextContent().trim();
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_FIRST_AFTER"))
                        {
                           pdfFiles[1] = insertElement.getTextContent().trim();
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_REST_BEFORE"))
                        {
                           pdfFiles[2] = insertElement.getTextContent().trim();
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_REST_AFTER"))
                        {
                           pdfFiles[3] = insertElement.getTextContent().trim();
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_LAST_BEFORE"))
                        {
                           pdfFiles[4] = insertElement.getTextContent().trim();
                        }
                        else if(insertElement.getNodeName().equalsIgnoreCase("INSERT_LAST_AFTER"))
                        {
                           pdfFiles[5] = insertElement.getTextContent().trim();
                        }
                  }
               }
            }

            
            return mergePDF(pdf, pdfFiles);
         }
         else
            return pdf;
      }
      catch(Exception e) {
         throw new InsertException(e, "Exception on processing Insert pdf:"+e.getMessage());
      }
   }

   private void processInsertElement(final NodeList list, final String[] pdfFiles, int offset) {
      for(int i = 0; i < list.getLength(); i++) {
         if(list.item(i).getNodeType() == Node.ELEMENT_NODE){
            Element firstEL = (Element)list.item(i);
            String pdfName = firstEL.getTextContent().trim();
            String location = firstEL.getAttribute("location");
            if(location == null)
               pdfFiles[offset+1] = pdfName;
            else if(location.equals("before") )
               pdfFiles[offset] = pdfName;
            else if(location.equals("after") )
               pdfFiles[offset+1] = pdfName;
         }
      }
   }

   private byte[] mergePDF(byte[] pdf, String[] pdfFiles) throws InsertException {
      ByteArrayOutputStream os = new ByteArrayOutputStream();
      try {
         byte[] pdf_first_before = null;
         byte[] pdf_first_after = null;
         byte[] pdf_rest_before = null;
         byte[] pdf_rest_after = null;
         byte[] pdf_last_before = null;
         byte[] pdf_last_after = null;
         if(pdfFiles[0] != null){
            pdf_first_before = getPdf(pdfFiles[0]);
         }
         if(pdfFiles[1] != null){
            pdf_first_after = getPdf(pdfFiles[1]);
         }
         if(pdfFiles[2] != null){
            pdf_rest_before = getPdf(pdfFiles[2]);
         }
         if(pdfFiles[3] != null){
            pdf_rest_after = getPdf(pdfFiles[3]);
         }
         if(pdfFiles[4] != null){
            pdf_last_before = getPdf(pdfFiles[4]);
         }
         if(pdfFiles[5] != null){
            pdf_last_after = getPdf(pdfFiles[5]);
         }


         PdfReader reader1 = new PdfReader(pdf);
         reader1.consolidateNamedDestinations();
         int n1 = reader1.getNumberOfPages();

         com.lowagie.text.Document document = new com.lowagie.text.Document(reader1.getPageSizeWithRotation(1));
         PdfCopy writer = new PdfCopy(document, os);
         document.open();

         PdfReader reader_first_before = null;
         PdfReader reader_first_after = null;
         PdfReader reader_rest_before = null;
         PdfReader reader_rest_after = null;
         PdfReader reader_last_before = null;
         PdfReader reader_last_after = null;

         if(pdf_first_before != null) {
            reader_first_before = new PdfReader(pdf_first_before);
            reader_first_before.consolidateNamedDestinations();
         }
         if(pdf_first_after != null) {
            reader_first_after = new PdfReader(pdf_first_after);
            reader_first_after.consolidateNamedDestinations();
         }

         if(pdf_rest_before != null) {
            reader_rest_before = new PdfReader(pdf_rest_before);
            reader_rest_before.consolidateNamedDestinations();
         }
         if(pdf_rest_after != null) {
            reader_rest_after = new PdfReader(pdf_rest_after);
            reader_rest_after.consolidateNamedDestinations();
         }

         if(pdf_last_before != null) {
            reader_last_before = new PdfReader(pdf_last_before);
            reader_last_before.consolidateNamedDestinations();
         }
         if(pdf_last_after != null) {
            reader_last_after = new PdfReader(pdf_last_after);
            reader_last_after.consolidateNamedDestinations();
         }

         PdfImportedPage page;
         
         /*Bug 93035
          Handle when page count ==1
          *1page can be the fist page and it can be the last page as well.
          */
         if(n1==1)
         {
            if(reader_first_before != null)
               addAllPages(writer,reader_first_before);
            if(reader_last_before != null)
               addAllPages(writer,reader_last_before);
            
               page = writer.getImportedPage(reader1, 1);
               writer.addPage(page);
               
            if(reader_first_after != null)
               addAllPages(writer,reader_first_after);
               
            if(reader_last_after != null)
               addAllPages(writer,reader_last_after);
               
         }
         else
         {
               if(reader_first_before != null)
                  addAllPages(writer,reader_first_before);
               page = writer.getImportedPage(reader1, 1);
               writer.addPage(page);
               if(reader_first_after != null)
                  addAllPages(writer,reader_first_after);

               if(n1 > 2) {
                  for (int i = 2; i < n1; i++) {
                     if(pdf_rest_before != null) {
                        reader_rest_before = new PdfReader(pdf_rest_before);
                        reader_rest_before.consolidateNamedDestinations();
                     }
                     if(pdf_rest_after != null) {
                        reader_rest_after = new PdfReader(pdf_rest_after);
                        reader_rest_after.consolidateNamedDestinations();
                     }

                     if(reader_rest_before != null)
                        addAllPages(writer,reader_rest_before);
                     page = writer.getImportedPage(reader1, i);
                     writer.addPage(page);
                     if(reader_rest_after != null)
                        addAllPages(writer,reader_rest_after);
                     writer.freeReader(reader_rest_before);
                     writer.freeReader(reader_rest_after);

                  }
               }


                  if(reader_last_before != null)
                     addAllPages(writer,reader_last_before);
                  page = writer.getImportedPage(reader1, n1);
                  writer.addPage(page);
                  if(reader_last_after != null)
                     addAllPages(writer,reader_last_after);

         
         }
         writer.freeReader(reader1);
         writer.freeReader(reader_first_before);
         writer.freeReader(reader_first_after);
         writer.freeReader(reader_last_before);
         writer.freeReader(reader_last_after);
         writer.freeReader(reader_rest_before);
         writer.freeReader(reader_rest_after);

         document.close();
         if(reader1 != null)
            reader1.close();
         if(reader_first_before != null)
            reader_first_before.close();
         if(reader_first_after != null)
            reader_first_after.close();
         if(reader_last_before != null)
            reader_last_before.close();
         if(reader_last_after != null)
            reader_last_after.close();
         if(reader_rest_before != null)
            reader_rest_before.close();
         if(reader_rest_after != null)
            reader_rest_after.close();

         return os.toByteArray();
      }
      catch(Exception e) {
         throw new InsertException(e, "Error while merging PDF: "+e.getMessage());
      }
      finally {
         try{
            os.close();
         }
         catch(Exception ee) {
            throw new InsertException(ee, "Error while merging PDF: "+ee.getMessage());
         }
      }
   }

   private byte[] getPdf(String pdfId) throws InsertException {
      try{
         PrintJobHandler handler = PrintJobHandlerFactory.getHandler();
         ReportPdfInsert pdf1 = new ReportPdfInsert();
         pdf1.id.setValue(pdfId);
         pdf1 =(ReportPdfInsert) handler.getReportPdfInsert(pdf1);
         return pdf1.pdf.getValue();
      }
      catch(Exception e) {
         throw new InsertException(e, "Exception while getting PDF " + pdfId +" :"+e.getMessage());
      }
   }

   private void addAllPages(PdfCopy writer, PdfReader reader) throws InsertException {
      try {
         int n = reader.getNumberOfPages();
         for(int i = 1; i < n+1;i++){
            PdfImportedPage page = writer.getImportedPage(reader, i);
            writer.addPage(page);
         }
      }
      catch(Exception e) {
         throw new InsertException(e, "Error while adding PDF pages: "+e.getMessage());
      }
   }
}
