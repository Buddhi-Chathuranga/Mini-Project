-----------------------------------------------------------------------------
--
--  Logical unit: ModelDesign
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Foundation1;

-------------------- PUBLIC PROJECTION LIVE CONTENT -------------------------

VIEW md_projection IS
SELECT md.model_id, md.name projection_name, md.version
   FROM fnd_model_design_tab md
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_entityset IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Container.EntitySets[*]'
   COLUMNS (
      entityset_name   VARCHAR2(100)         PATH '$.Name',
      entity_name      VARCHAR2(100)         PATH '$.EntityType',
      definition       VARCHAR2(4000) FORMAT JSON PATH '$')) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_singleton IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Container.Singletons[*]'
   COLUMNS (
      singleton_name   VARCHAR2(100)         PATH '$.Name',
      entity_name      VARCHAR2(100)         PATH '$.EntityType',
      definition       VARCHAR2(4000) FORMAT JSON PATH '$')) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_action IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Container.Actions[*]'
   COLUMNS (
      action_name      VARCHAR2(100)         PATH '$.Name',
      definition       VARCHAR2(4000) FORMAT JSON PATH '$')) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_function IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Container.Functions[*]'
   COLUMNS (
      function_name    VARCHAR2(100)         PATH '$.Name',
      definition       VARCHAR2(4000) FORMAT JSON PATH '$')) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_structure IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Structures[*]'
   COLUMNS (
      structure_name   VARCHAR2(100)             PATH '$.Name')) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_structure_attrib IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Structures[*]'
   COLUMNS (
      structure_name   VARCHAR2(100)             PATH '$.Name',
      NESTED PATH '$.Attributes[*]'
      COLUMNS (
         seq               FOR ORDINALITY,
         attribute_name    VARCHAR2(100)              PATH '$.Name',
         definition        VARCHAR2(4000) FORMAT JSON PATH '$'))) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_enumeration IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Enumerations[*]'
   COLUMNS (
      enumeration_name VARCHAR2(100)             PATH '$.Name',
      definition       VARCHAR2(4000) FORMAT JSON PATH '$')) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_entity IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Entities[*]'
   COLUMNS (
      entity_name      VARCHAR2(100)             PATH '$.Name',
      support_warnings VARCHAR2(100)             PATH '$.SupportWarnings',
      keys             VARCHAR2(200)  FORMAT JSON PATH '$.Keys')) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_entity_attribute IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Entities[*]'
   COLUMNS (
      entity_name     VARCHAR2(100)             PATH '$.Name',
      NESTED PATH '$.Attributes[*]'
      COLUMNS (
         seq               FOR ORDINALITY,
         attribute_name    VARCHAR2(100)              PATH '$.Name',
         definition        VARCHAR2(4000) FORMAT JSON PATH '$'))) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection';


VIEW md_projection_entity_action IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Entities[*]'
   COLUMNS (
      entity_name     VARCHAR2(100)             PATH '$.Name',
      NESTED PATH '$.Actions[*]'
      COLUMNS (
         action_name       VARCHAR2(100)              PATH '$.Name',
         definition        VARCHAR2(4000) FORMAT JSON PATH '$'))) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection'
   AND   meta.action_name IS NOT NULL;


VIEW md_projection_entity_function IS
SELECT md.model_id, md.name projection_name, meta.*
   FROM fnd_model_design_tab md,
        json_table(Model_Design_SYS.Get_Data_Content_(data_format_ => md.kind, model_type_ => md.artifact, model_name_ => md.name), '$.projection.Entities[*]'
   COLUMNS (
      entity_name     VARCHAR2(100)             PATH '$.Name',
      NESTED PATH '$.Functions[*]'
      COLUMNS (
         function_name     VARCHAR2(100)              PATH '$.Name',
         definition        VARCHAR2(4000) FORMAT JSON PATH '$'))) meta
   WHERE md.kind = 'ServerMetadata'
   AND   md.artifact = 'projection'
   AND   meta.function_name IS NOT NULL;

-------------------- PUBLIC CLIENT LIVE CONTENT -----------------------------

VIEW md_client IS
SELECT md.model_id, md.name client_name, md.version, proj.name projection_name
   FROM fnd_model_design_tab md,
        fnd_model_design_tab proj
   WHERE md.kind = 'ClientMetadata'
   AND   md.artifact = 'client'
   AND   md.reference = proj.model_id (+);

-------------------- PUBLIC VIEW DEFINITIONS --------------------------------

VIEW fnd_model_design IS
   SELECT model_id,
          description,
          artifact,
          Name,
          kind,
          reference,
          profiled,
          version
   FROM fnd_model_design_tab;

VIEW fnd_model_api_doc IS
   SELECT model_id,
          description,
          Name,
          version
   FROM fnd_model_api_doc_tab;


VIEW fnd_model_design_data IS
   SELECT model_id,
          scope_id,
          data_id,
          artifact,
          Name,
          line_no,
          layer_no,
          content,
          content_hash,
          based_on_content,
          based_on_content_hash,
          reference,
          visibility,
          dependencies,
          rowkey objkey
   FROM fnd_model_design_data_tab;


VIEW fnd_model_effective_data IS
   SELECT model_id,
          scope_id,
          data_id,
          artifact,
          Name,
          line_no,
          content
      FROM fnd_model_design_data_tab a
      WHERE layer_no = (SELECT max(layer_no)
                         FROM   fnd_model_design_data_tab b
                         WHERE  a.model_id = b.model_id
                         AND    a.scope_id = b.scope_id
                         AND    a.data_id = b.data_id
                         AND   (layer_no = 1
                             OR 'TRUE' = (SELECT profiled
                                          FROM   fnd_model_design_tab m
                                          WHERE  m.model_id = b.model_id)))
      AND  (dependencies IS NULL
         OR dependencies IN (SELECT module
                             FROM module_tab
                             WHERE  nvl(version, '*') NOT IN ('*','?')));
                             
-------------------- PRIVATE VIEW DEFINITIONS -------------------------------

