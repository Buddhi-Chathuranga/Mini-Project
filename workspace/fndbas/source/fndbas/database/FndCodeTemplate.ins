-------------------------------------------------------------------------------------------- 
-- 
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  110320  HAAR    Created.
--  130109  MaBo  Added templates for data replication
--  130508  KRGUSE  Moved FNDCOB related entries from FNDBAS to FNDCOB. This file
--                  is now mainly a placeholder.
-------------------------------------------------------------------------------------------- 

--NOTE!! Avoid slash and ampersand characters in the templates, use CHR(47) resp CHR(38) instead.
--Also, SET SERVEROUT(PUT) ON should be avoid on a single row. Break the string and concat this into the template instead.

SET SERVEROUTPUT ON

PROMPT Install Fnd_Code_Templates

/*
Each entry in this file should look something like this:

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := '[Name of the template, used as key]';
   rec_.description  := '[Description of the template]';
   rec_.template     := '[Template content]';
   Fnd_Code_Template_API.Register(rec_);
END;
/

*/


DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'DataArchivePackage';
   rec_.description  := 'Template for creation of Data Archive Package';
   rec_.rowkey       := 'F12863D0548541A4BC5F60E4C2D20D13';
   rec_.template     := 'PROMPT Dropping package <<<PKG>>>

BEGIN
  Data_Archive_Object_API.Drop_Package__(''<<<AOID>>>'');
EXCEPTION
  WHEN OTHERS THEN
     NULL;
END;
'||CHR(47)||'
-----------------------------------------------------------------------------
--
--  Logical unit: DataArchiveObject
--
--  IFS/Archiving Template Version 1.1
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  <<<SYSDATE>>>      Generated 
-----------------------------------------------------------------------------

DEFINE MODULE = FNDBAS
DEFINE LU     = DataArchiveObject
DEFINE PKG    = <<<PKG>>>

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating <<<PKG>>> specification

CREATE OR REPLACE PACKAGE <<<PKG>>> IS

module_  CONSTANT VARCHAR2(25) := ''<<<AMPERSAND>>>MODULE'';
lu_name_ CONSTANT VARCHAR2(25) := ''DataArchiveObject'';

PROCEDURE Archive_Master(
   processed_    IN OUT NUMBER,
   stmt_         IN VARCHAR2,
   aoid_         IN VARCHAR2,
   exec_id_      IN VARCHAR2,
   archive_date_ IN DATE);

PROCEDURE Init;  

END <<<PKG>>>;
'||CHR(47)||'
SHOW ERROR
-----------------------------------------------------------------------------
--
-- Package Body
--
-----------------------------------------------------------------------------
--
--  Logical unit: DataArchiveObject
--
--  Purpose:      Performs archiving of the object <<<AOID>>>
--
--  IFS/Archiving Template Version 1.1
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  <<<SYSDATE>>>      Generated 
-----------------------------------------------------------------------------

DEFINE MODULE = FNDBAS
DEFINE LU     = DataArchiveObject
DEFINE PKG    = <<<PKG>>>

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating <<<PKG>>> implementation

CREATE OR REPLACE PACKAGE BODY <<<PKG>>> IS

   arc_rec_                   Data_Archive_Util_API.arc_type;
   data_archive_destination_  Data_Archive_Object_Tab.data_archive_destination%TYPE;
   data_archive_id_           Data_Archive_Log_Tab.archive_id%TYPE;
   data_archive_date_         Data_Archive_Log_Tab.archive_date%TYPE;
<<<DATA_ARCHIVE_TYPE_DECL>>>

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------

<<<MOVE_OBJECT_DECL>>>

<<<REMOVE_OBJECT_DECL>>>

<<<ARCHIVE_CHILD_DECL>>>

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

<<<MOVE_OBJECT_PROC>>>

<<<REMOVE_OBJECT_PROC>>>

<<<ARCHIVE_CHILD_PROC>>>

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE <<<ARCHIVE_MASTER_PROC>>>(
   processed_    IN OUT NUMBER,
   stmt_         IN VARCHAR2,
   aoid_         IN VARCHAR2,
   exec_id_      IN VARCHAR2,
   archive_date_ IN DATE) 
IS
   table_name_ CONSTANT VARCHAR2(30) := ''<<<TABLE_NAME>>>'';
   rowid_arr_  Data_Archive_Util_API.Rowid_Array_Type;
   param_      VARCHAR2(2000);
   no_rowids_  NUMBER;
   i           BINARY_INTEGER;
   CURSOR get_executions IS
      SELECT do.aoid, do.data_archive_destination, do.destination_dir,
             do.db_link, do.transaction_size, do.archive_package
      FROM   data_archive_object_tab do
      WHERE  do.aoid = aoid_;
BEGIN
   data_archive_id_ := aoid_ || ''_'' || exec_id_;
   data_archive_date_ := archive_date_;
   processed_ := 0;
   data_archive_destination_ := Data_Archive_Object_API.Get(aoid_).Data_Archive_Destination;
   arc_rec_.data_archive_destination_ := data_archive_destination_;
   arc_rec_.data_archive_date_ := data_archive_date_;
   arc_rec_.error_ := FALSE;
   FOR exec IN get_executions LOOP
      arc_rec_.data_archive_start_date_ := sysdate;
      arc_rec_.data_archive_aoid_ := aoid_;
      arc_rec_.data_archive_destination_ := exec.data_archive_destination;
      arc_rec_.data_archive_destination_dir_ := exec.destination_dir;
      arc_rec_.data_archive_db_link_ := exec.db_link;
      arc_rec_.data_archive_exec_id_ := exec_id_;
      arc_rec_.data_archive_package_ := exec.archive_package;
      arc_rec_.data_archive_id_      := data_archive_id_;
   END LOOP;
   param_ := arc_rec_.data_archive_destination_dir_ || ''_'' || aoid_ || ''_'' || exec_id_ || ''_'' || to_char(arc_rec_.data_archive_date_,''YYYYMMDD_HH24MISS'') ||''.txt'';
   Data_Archive_Util_API.Init_variables(arc_rec_);
<<<INIT_ARCHIVE_FILE>>>
   Data_Archive_Util_API.Get_All_Rowids(rowid_arr_, no_rowids_, stmt_, NULL);
   FOR i_ IN 1..no_rowids_ LOOP
      BEGIN
         SAVEPOINT master;
         <<<CALL_MOVE_MASTER>>>
<<<CALL_ARCHIVE_MASTER_CHILD>>>
         <<<CALL_REMOVE_MASTER>>>
         COMMIT;
<<<WRITE_LINE_BUFFER>>>   
         processed_ := processed_ + 1;
      EXCEPTION
         WHEN OTHERS THEN
            ROLLBACK TO master;
            RAISE;
      END;
   END LOOP;
<<<END_ARCHIVE_FILE>>>
<<<ARCHIVE_FILE_EXCEPTION>>>
END <<<ARCHIVE_MASTER_PROC>>>;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END <<<PKG>>>;
'||CHR(47)||'

SHOW ERROR

-----------------------------------------------------------------------------
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'DataArchiveMoveObjectProcedure';
   rec_.description  := 'Template for Move object procedure for Data Archive Package';
   rec_.rowkey       := '0DECFEF789CB4C21A72EB502495C2BE5';
   rec_.template     := 'PROCEDURE <<<MOVE_PROCEDURE>>> (
   rowid_ IN ROWID )<<<SPEC_END>>>
IS
   table_name_    CONSTANT VARCHAR2(30) := ''<<<TABLE_NAME>>>'';
   table_value_   NUMBER := <<<TABLE_NO>>>;
   no_columns_    NUMBER := <<<NO_COLUMNS>>>;
   collist_no_    NUMBER := 0;
   line_          VARCHAR2(2000);
   counter_       VARCHAR2(20);

<<<CURSOR_MOVE_OBJECT>>>
BEGIN
<<<MOVE_OBJECT_CODE>>>
END <<<MOVE_PROCEDURE>>>;
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'DataArchiveRemoveObjectProcedure';
   rec_.description  := 'Template for Remove object procedure for Data Archive Package';
   rec_.rowkey       := '8963E58213564C668BA7D560497D9D36';
   rec_.template     := 'PROCEDURE  <<<REMOVE_PROCEDURE>>> (
   rowid_ IN ROWID)<<<SPEC_END>>>
IS
BEGIN
   IF (<<<DATA_ARCHIVE_TYPE>>> IN (''Move'', ''Remove'')) THEN
      DELETE FROM <<<TABLE_NAME>>> WHERE rowid = rowid_;
   END IF;
END <<<REMOVE_PROCEDURE>>>;
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'DataArchiveChildProcedure';
   rec_.description  := 'Template for Archive Child procedure for Data Archive Package';
   rec_.rowkey       := '09F880C36E5B48B8A46BE38A63C58FF3';
   rec_.template     := 'PROCEDURE <<<ARCHIVE_PROCEDURE>>> (
   rowid_ IN ROWID,
   aoid_  IN VARCHAR2)<<<SPEC_END>>>
IS
   table_name_    CONSTANT VARCHAR2(30) := ''<<<TABLE_NAME>>>'';
   CURSOR get_object IS
   <<<CURSOR_SELECT_CHILD>>>
BEGIN
   FOR obj IN get_object LOOP
      <<<CALL_MOVE_CHILD>>>
<<<CALL_ARCHIVE_CHILD_CHILDREN>>>
      <<<CALL_REMOVE_CHILD>>>
   END LOOP;
END <<<ARCHIVE_PROCEDURE>>>;
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ReplicationDesignTrigger';
   rec_.description  := 'Template for generating trigger used when replicating data';
   rec_.rowkey       := '4614385A006A40EB9D143A0F8ED90298';
   rec_.template     := '-----------------------------------------------------------------------------
--
--  Business Object triggers
--
--  Purpose:
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  <<<SYSDATE>>>      Generated 
-----------------------------------------------------------------------------
'||'SET SERVEROUT ON'||'
--
REM Add a Replication date column in each triggering table
REM ------------------------------------------------------
--
BEGIN DECLARE
   cursor_          INTEGER;
   execute_         INTEGER;
   statement_       VARCHAR2(100);
   column_exists_   EXCEPTION;
   PRAGMA           EXCEPTION_INIT(column_exists_, -1430); 
   BEGIN
      cursor_ := DBMS_SQL.OPEN_CURSOR;
      <<<LOOP_ADD_DATE_COLUMN>>>
      BEGIN
         statement_ := ''ALTER TABLE <<<TABLE>>> ADD (ifs$replication$date DATE)'';
         DBMS_SQL.PARSE(cursor_, statement_, DBMS_SQL.V7);
         execute_ := DBMS_SQL.EXECUTE(cursor_);
      EXCEPTION
         WHEN column_exists_ THEN
            NULL;
         WHEN others THEN
            dbms_output.put_line(''ERROR when adding column to <<<TABLE>>>: '' || sqlerrm);
      END;
      <<<LOOP_ADD_DATE_COLUMN>>>
   END;
END;
'||CHR(47)||'
DEFINE MODULE          = FNDCON
DEFINE BUSINESS_OBJECT = <<<BO>>>
--
<<<LOOP_CREATE_BEFORE_TRIGGER>>>
DEFINE LU      = <<<LU>>>
DEFINE TABLE   = <<<TABLE>>>
DEFINE TRIGGER = <<<TRIGGER>>>

CREATE OR REPLACE TRIGGER '||CHR(38)||'TRIGGER
   BEFORE INSERT OR UPDATE  
   ON '||CHR(38)||'TABLE
   FOR EACH ROW
   <<<TRIGGER_CONDITION>>>
BEGIN
   IF ( App_Context_SYS.Find_Boolean_Value(''REPLICATION_UTIL_API.Object_Replicated_'', FALSE )) THEN
      RETURN;
   END IF;
   IF ( UPDATING ) THEN
      <<<CHECK_UPDATED_COLUMNS>>>
      NULL;
   END IF;
   :new.ifs$replication$date := sysdate;
EXCEPTION
   WHEN OTHERS THEN
      Error_SYS.System_General('''||CHR(38)||'TRIGGER '' || sqlerrm);
END;
'||CHR(47)||'
<<<LOOP_CREATE_BEFORE_TRIGGER>>>

<<<LOOP_CREATE_AFTER_TRIGGER>>>
DEFINE LU      = <<<LU>>>
DEFINE TABLE   = <<<TABLE>>>
DEFINE TRIGGER = <<<TRIGGER>>>

CREATE OR REPLACE TRIGGER '||CHR(38)||'TRIGGER
   AFTER INSERT OR UPDATE  
   ON '||CHR(38)||'TABLE
   FOR EACH ROW 
   <<<TRIGGER_CONDITION>>>
DECLARE
   newrec_    replication_queue_tab%ROWTYPE;
   attr_      VARCHAR2(2000);
BEGIN
   IF ( App_Context_SYS.Find_Boolean_Value(''REPLICATION_UTIL_API.Object_Replicated_'', FALSE )) THEN
      RETURN;
   END IF;
   IF ( INSERTING ) THEN
      newrec_.operation := ''NEW'';
   ELSE
      <<<CHECK_UPDATED_COLUMNS>>>
      newrec_.operation := ''MODIFY'';
   END IF;
   newrec_.business_object := '''||CHR(38)||'BUSINESS_OBJECT'';
   --
   -- Attribute group Business Object keys
   -- ------------------------------------
   <<<BO_OBJECT_KEYS>>>
   --
   newrec_.business_object_id := attr_; 
   newrec_.lu_name := '''||CHR(38)||'LU'';
   newrec_.key_rowid := :new.rowid;
   --
   -- Attribute group LU keys
   -- -----------------------
   Client_SYS.Clear_Attr(attr_);
   <<<OBJECT_KEYS>>>
   -- 
   newrec_.key_values := attr_;
   --
   -- For each Replication Group create an entry in the Replication Queue
   -- -------------------------------------------------------------------
   <<<REPLICATION_GROUP>>>
EXCEPTION
   WHEN OTHERS THEN
      Error_SYS.System_General('''||CHR(38)||'TRIGGER '' || sqlerrm);
END;
'||CHR(47)||'
<<<LOOP_CREATE_AFTER_TRIGGER>>>
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ReplicationDesignReceiveAPI';
   rec_.description  := 'Template for package body to receive replication data';
   rec_.rowkey       := '5AD8C84BE8C3469387E9B00ADAF38C87';
   rec_.template     := '-----------------------------------------------------------------------------
--
--  Logical unit: 
--
--  Purpose:
--
--  IFS/Replication Template Version 1.0
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  <<<SYSDATE>>>      Generated 
-----------------------------------------------------------------------------
--
DEFINE MODULE = FNDRPL
DEFINE LU     = <<<LU>>>
DEFINE PKG    = <<<PKG>>>
--
DEFINE BO     = <<<BO>>>
--
PROMPT Creating '||CHR(38)||'PKG specification
--
CREATE OR REPLACE PACKAGE '||CHR(38)||'PKG IS
--
module_  CONSTANT VARCHAR2(25) := '''||CHR(38)||'MODULE'';
lu_name_ CONSTANT VARCHAR2(25) := '''||CHR(38)||'LU'';

-----------------------------------------------------------------------------
--------------------------  PROTECTED METHODS -------------------------------
-----------------------------------------------------------------------------
PROCEDURE Receive_Message (
   message_id_          IN in_message_tab.message_id%TYPE,
   operation_           IN VARCHAR2,
   sender_              IN in_message_tab.sender%TYPE,
   bo_                  IN VARCHAR2,
   bo_key_              IN VARCHAR2,
   timezone_difference_ IN NUMBER,
   date_format_         IN VARCHAR2,
   attr_grp_rec_        IN VARCHAR2,
   attribute_rec_       IN VARCHAR2,
   send_warning_str_    IN VARCHAR2,
   send_info_str_       IN VARCHAR2,
   receive_warning_str_ IN VARCHAR2,
   receive_info_str_    IN VARCHAR2 );
--
PROCEDURE Init;
--
END '||CHR(38)||'PKG;
'||CHR(47)||'
SHOW ERROR
-----------------------------------------------------------------------------';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ReplicationDesignReceiveAPY';
   rec_.description  := 'Template for package specification to receive replication data';
   rec_.rowkey       := '0E1F71AECBB849E5993158AF222EAE46';
   rec_.template     := '-----------------------------------------------------------------------------
--
--  Logical unit: 
--
--  Purpose:
--
--  IFS/Replication Template Version 1.0
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  <<<SYSDATE>>>      Generated 
-----------------------------------------------------------------------------
--
DEFINE MODULE = FNDRPL
DEFINE LU     = <<<LU>>>
DEFINE PKG    = <<<PKG>>>
--
DEFINE BO     = <<<BO>>>
--
-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------
--
PROMPT Creating '||CHR(38)||'PKG implementation
--
CREATE OR REPLACE PACKAGE BODY '||CHR(38)||'PKG IS
--
new_modify_exception_              EXCEPTION;
configuration_error_               EXCEPTION;
message_error_                     EXCEPTION;

sleep_                             CONSTANT NUMBER := 5; -- Number of seconds to sleep when another process
--                                                 is working on the same business object.
--
TYPE type_spread_rec IS RECORD (
   receive_group   VARCHAR2(30),
   lu_name         VARCHAR2(30),
   column_name     VARCHAR2(30),
   column_value    VARCHAR2(2000));
TYPE type_column_rec IS RECORD (
   receive_group   VARCHAR2(30),
   lu_name         VARCHAR2(30),
   column_name     VARCHAR2(30),
   new_allowed     BOOLEAN,
   modify_allowed  BOOLEAN);
--
TYPE type_spread_table IS TABLE OF type_spread_rec
   INDEX BY BINARY_INTEGER;   
TYPE type_column_table IS TABLE OF type_column_rec
   INDEX BY BINARY_INTEGER;   
--
--
-- Cache - loaded when application is started.
-- ---------------------------------------------------------------------------
spread_table_    type_spread_table;
spread_value_    VARCHAR2(2000);
--
subst_table_     type_spread_table;
default_table_   type_spread_table;
constant_table_  type_spread_table;
column_allowed_  type_column_table;
-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
--
-- Waits on executing processes working on the same business object.
-- Wait time is limited to one minute. 
-- ---------------------------------------------------------------------------
PROCEDURE Wait___ (message_id_  IN in_message_tab.message_id%TYPE,
                  bo_          IN VARCHAR2 ) 
IS
   wait_            BOOLEAN := TRUE;
   waits_           NUMBER := 0;
   dummy_           NUMBER;
   CURSOR c1_wait (id_ in_message_tab.message_id%TYPE,
                   bo_ in_message_tab.sender_message_id%TYPE ) IS
      SELECT 1
      FROM   in_message_tab
      WHERE  sender_message_id =  bo_
      AND    message_id        <  id_
      AND    rowstate          IN (''Processing'',''Transferred'');        
BEGIN
   WHILE ( wait_ ) LOOP
      OPEN c1_wait (message_id_, bo_);
      FETCH c1_wait INTO dummy_;
      IF ( c1_wait%NOTFOUND OR (waits_ > (60 / sleep_)) ) THEN
         CLOSE c1_wait;
         RETURN;
      END IF;
      CLOSE c1_wait;
      dbms_lock.sleep(sleep_);
      waits_ := waits_ + 1;
   END LOOP;
END Wait___;
--
FUNCTION Value_In___ (
   value_            IN VARCHAR2,
   string_of_values_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   IF ( INSTR('' ,'' || string_of_values_ || '','', '','' || value_ || '','') > 0 ) THEN 
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
EXCEPTION
   WHEN others THEN
      RETURN FALSE;
END Value_In___;
--
-- Checks if a COLUMN_NAME is accepted in a NEW and/or MODIFY operation on
-- LU_NAME for data replicated from a RECEIVE_GROUP.
-- -----------------------------------------------------------------------
PROCEDURE Accept_Column___ (
   new_              IN OUT BOOLEAN,
   mod_              IN OUT BOOLEAN,
   receive_group_    IN     VARCHAR2,
   lu_               IN     VARCHAR2,
   column_name_      IN     VARCHAR2,
   send_warning_     IN     BOOLEAN,
   send_info_        IN     BOOLEAN,
   receive_warning_  IN     BOOLEAN,
   receive_info_     IN     BOOLEAN,
   log_operation_    IN     VARCHAR2 )
IS
   group_found_      BOOLEAN := FALSE;
   lu_found_         BOOLEAN := FALSE;
   sql_error_        VARCHAR2(512);
BEGIN
   new_ := FALSE;
   mod_ := FALSE;
   FOR i IN 1..column_allowed_.COUNT LOOP
      IF ( column_allowed_(i).receive_group = receive_group_ ) THEN
         group_found_ := TRUE;
         IF ( column_allowed_(i).lu_name = lu_ ) THEN
            lu_found_ := TRUE;
            IF ( column_allowed_(i).column_name = column_name_ ) THEN
               new_ := column_allowed_(i).new_allowed;
               mod_ := column_allowed_(i).modify_allowed;
               RETURN;
            END IF;
         END IF; 
      END IF;
      IF ( ( group_found_ AND (column_allowed_(i).receive_group != receive_group_) ) OR
           ( lu_found_    AND (column_allowed_(i).lu_name       != lu_      ) ) ) THEN
         RETURN;
      END IF;
   END LOOP;
EXCEPTION
   WHEN others THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, 0, 0,
         ''RCV06: '||CHR(38)||'PKG..Accept_Column___'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Accept_Column___'', sql_error_);      
END Accept_Column___;
--
-- Change values to its SUBSTITUTION VALUES in the attribute strings for
-- NEW/MODIFY operations on an LU_NAME for data replicated from RECEIVE_GROUP.
-- ---------------------------------------------------------------------------
PROCEDURE Set_Subst_Value___ (
   receive_group_    IN     VARCHAR2,
   lu_               IN     VARCHAR2,
   new_attr_         IN OUT VARCHAR2,
   modify_attr_      IN OUT VARCHAR2,
   send_warning_     IN     BOOLEAN,
   send_info_        IN     BOOLEAN,
   receive_warning_  IN     BOOLEAN,
   receive_info_     IN     BOOLEAN,
   log_operation_    IN     VARCHAR2 )
IS
   group_found_      BOOLEAN := FALSE;
   lu_found_         BOOLEAN := FALSE;
   new_allowed_      BOOLEAN;
   modify_allowed_   BOOLEAN;
   from_             NUMBER;
   len_              NUMBER;
   to_               NUMBER;
   field_separator_  VARCHAR2(1) := '','';
   record_separator_ VARCHAR2(1) := '';'';
   subst_value_      VARCHAR2(2000);
   old_value_        VARCHAR2(2000);
   new_value_        VARCHAR2(2000);
   sql_error_        VARCHAR2(512);
BEGIN
   subst_value_ := NULL;
   FOR i IN 1..subst_table_.COUNT LOOP
      IF ( subst_table_(i).receive_group = receive_group_ ) THEN
         group_found_ := TRUE;
         IF ( subst_table_(i).lu_name = lu_ ) THEN
            lu_found_ := TRUE;
            subst_value_ := subst_table_(i).column_value;
            old_value_ := Client_SYS.Get_Item_Value(subst_table_(i).column_name, new_attr_);
            IF ( old_value_ IS NOT NULL ) THEN
               len_ := LENGTH(old_value_);
               from_ := INSTR(record_separator_ || subst_value_, record_separator_ || old_value_ || field_separator_);
               IF ( from_ > 0 ) THEN
                  to_ := INSTR(subst_value_, record_separator_, from_ + 1);
                  IF ( to_ > 0 ) THEN
                     new_value_ := SUBSTR(subst_value_, from_ + len_ + 1, to_ - from_ -len_ - 1);
                  END IF;
               END IF;
               IF ( new_value_ IS NOT NULL ) THEN
                  Accept_Column___(new_allowed_, modify_allowed_, receive_group_, lu_, subst_table_(i).column_name,
                                  send_warning_, send_info_, receive_warning_, receive_info_, log_operation_); 
                  IF ( new_allowed_ ) THEN
                     Client_SYS.Set_Item_Value(subst_table_(i).column_name, new_value_, new_attr_);
                  END IF;
                  IF ( modify_allowed_ ) THEN
                     Client_SYS.Set_Item_Value(subst_table_(i).column_name, new_value_, modify_attr_);
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
      IF ( ( group_found_ AND (subst_table_(i).receive_group != receive_group_) ) OR
           ( lu_found_    AND (subst_table_(i).lu_name       != lu_      ) ) ) THEN
         RETURN;
      END IF;
   END LOOP;
EXCEPTION
   WHEN others THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, 0, 0,
         ''RCV01: '||CHR(38)||'PKG..Set_Subst_Value___'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Set_Subst_Value___'', sql_error_);      
END Set_Subst_Value___;
--
-- Adds DEFAULT_VALUES to the attribute string for a NEW operation on an 
-- LU_NAME for data replicated from RECEIVE_GROUP.
-- ---------------------------------------------------------------------
PROCEDURE Set_Default_Values___ (
   receive_group_    IN     VARCHAR2,
   lu_               IN     VARCHAR2,
   new_attr_         IN OUT VARCHAR2,
   send_warning_     IN     BOOLEAN,
   send_info_        IN     BOOLEAN,
   receive_warning_  IN     BOOLEAN,
   receive_info_     IN     BOOLEAN,
   log_operation_    IN     VARCHAR2 )
IS
   old_value_        VARCHAR2(2000);
   group_found_      BOOLEAN := FALSE;
   lu_found_         BOOLEAN := FALSE;
   sql_error_        VARCHAR2(512);
BEGIN
   FOR i IN 1..default_table_.COUNT LOOP
      IF ( default_table_(i).receive_group = receive_group_ ) THEN
         group_found_ := TRUE;
         IF ( default_table_(i).lu_name = lu_ ) THEN
            lu_found_ := TRUE;
            old_value_ := Client_SYS.Get_Item_Value(default_table_(i).column_name, new_attr_);
            IF ( old_value_ IS NULL ) THEN
               Client_SYS.Set_Item_Value(default_table_(i).column_name, default_table_(i).column_value, new_attr_);
            END IF;
         END IF;
      END IF;
      IF ( ( group_found_ AND (default_table_(i).receive_group != receive_group_) ) OR
           ( lu_found_    AND (default_table_(i).lu_name       != lu_      ) ) ) THEN
         RETURN;
      END IF;
   END LOOP;
EXCEPTION
   WHEN others THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, 0, 0,
         ''RCV02: '||CHR(38)||'PKG..Set_Default_Values___'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Set_Default_Values___'', sql_error_);      
END Set_Default_Values___;
--
-- Adds CONSTANT_VALUES to the attribute string for a NEW operation and
-- updates the attribute string for a MODIFY operation on an LU_NAME for 
-- data replicated from RECEIVE_GROUP.
-- ---------------------------------------------------------------------
PROCEDURE Set_Constant_Values___ (
   receive_group_    IN     VARCHAR2,
   lu_               IN     VARCHAR2,
   new_attr_         IN OUT VARCHAR2,
   modify_attr_      IN OUT VARCHAR2,
   send_warning_     IN     BOOLEAN,
   send_info_        IN     BOOLEAN,
   receive_warning_  IN     BOOLEAN,
   receive_info_     IN     BOOLEAN,
   log_operation_    IN     VARCHAR2 )
IS
   group_found_      BOOLEAN := FALSE;
   lu_found_         BOOLEAN := FALSE;
   old_value_        VARCHAR2(2000);
   sql_error_        VARCHAR2(512);
BEGIN
   FOR i IN 1..constant_table_.COUNT LOOP
      IF ( constant_table_(i).receive_group = receive_group_ ) THEN
         group_found_ := TRUE;
         IF ( constant_table_(i).lu_name = lu_ ) THEN
            lu_found_ := TRUE;
            Client_SYS.Set_Item_Value(constant_table_(i).column_name, constant_table_(i).column_value, new_attr_);
            old_value_ := Client_SYS.Get_Item_Value(constant_table_(i).column_name, modify_attr_);
            IF ( old_value_ IS NOT NULL ) THEN
               Client_SYS.Set_Item_Value(constant_table_(i).column_name, constant_table_(i).column_value, modify_attr_);
            END IF;
         END IF;
      END IF;
      IF ( ( group_found_ AND (constant_table_(i).receive_group != receive_group_) ) OR
           ( lu_found_    AND (constant_table_(i).lu_name       != lu_      ) ) ) THEN
         RETURN;
      END IF;
   END LOOP;
EXCEPTION
   WHEN others THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, 0, 0,
         ''RCV03: '||CHR(38)||'PKG..Set_Constant_Values___'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Set_Constant_Values___'', sql_error_);      
END Set_Constant_Values___;
--
-- Returns the next SPREAD_VALUE for a SPREAD_COLUMN. When the procedure is first 
-- called for a RECEIVE_GROUP/LU_NAME/COLUMN_NAME the argument ptr_ must be NULL.
-- ------------------------------------------------------------------------------
FUNCTION Get_Next_Spread_Value___ (
   next_value_       OUT    VARCHAR2, 
   ptr_              IN OUT NUMBER,
   receive_group_    IN     VARCHAR2,
   lu_               IN     VARCHAR2,
   column_name_      IN     VARCHAR2,
   send_warning_     IN     BOOLEAN,
   send_info_        IN     BOOLEAN,
   receive_warning_  IN     BOOLEAN,
   receive_info_     IN     BOOLEAN,
   log_operation_    IN     VARCHAR2 ) RETURN BOOLEAN
IS
   group_found_      BOOLEAN := FALSE;
   lu_found_         BOOLEAN := FALSE;
   from_             NUMBER;
   to_               NUMBER;
   record_separator_ VARCHAR2(1) := '';'';
   sql_error_        VARCHAR2(512);
BEGIN
   IF ( (column_name_ IS NULL) OR (column_name_ = '''') ) THEN
      RETURN FALSE;
   END IF;
   IF ( ptr_ IS NULL ) THEN
      ptr_ := 1;
      spread_value_ := NULL;
      FOR i IN 1..spread_table_.COUNT LOOP
         IF ( spread_table_(i).receive_group = receive_group_ ) THEN
            group_found_ := TRUE;
            IF ( spread_table_(i).lu_name = lu_ ) THEN
               lu_found_ := TRUE;
               IF ( spread_table_(i).column_name = column_name_ ) THEN
                  spread_value_ := spread_table_(i).column_value;
                  EXIT;
               END IF;
            END IF;
         END IF;
         IF ( ( group_found_ AND (spread_table_(i).receive_group != receive_group_) ) OR
              ( lu_found_    AND (spread_table_(i).lu_name       != lu_      ) ) ) THEN
            EXIT;
         END IF;
      END LOOP;
   END IF;
--
   from_ := INSTR(record_separator_ || spread_value_, record_separator_, 1, ptr_);
   IF ( from_ > 0 ) THEN
      to_ := INSTR(record_separator_ || spread_value_, record_separator_, 1, ptr_ + 1);
      IF ( to_ > 0 ) THEN
         ptr_ := ptr_ + 1;
         next_value_ := SUBSTR(spread_value_, from_, to_ - from_ - 1);
         RETURN TRUE; 
      END IF;
   END IF;
   RETURN FALSE;
EXCEPTION
   WHEN others THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, 0, 0,
         ''RCV04: '||CHR(38)||'PKG..Get_Next_Spread_Value___'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      RETURN FALSE;
END Get_Next_Spread_Value___;
--
FUNCTION Receive_Business_Object___ (
   sender_          IN in_message_tab.sender%TYPE,
   receive_group_   IN VARCHAR2,
   operation_       IN VARCHAR2,
   send_warning_    IN BOOLEAN,
   send_info_       IN BOOLEAN,
   receive_warning_ IN BOOLEAN,
   receive_info_    IN BOOLEAN,
   log_operation_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   sql_error_        VARCHAR2(512);
BEGIN
   IF  ( (operation_ IN (''NEW'',''LOAD'')) AND (receive_group_ IN (<<<RCV_OBJECT_NEW>>>)) ) THEN
      NULL;
   ELSIF ( (operation_ = ''MODIFY'')      AND (receive_group_ IN (<<<RCV_OBJECT_MODIFY>>>)) ) THEN
      NULL;
   ELSE
      RETURN FALSE;
   END IF;
   RETURN TRUE;
EXCEPTION
   WHEN others THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, 0, 0,
         ''RCV07: '||CHR(38)||'PKG..Receive_Business_Object___'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Receive_Business_Object___'', sql_error_);      
END Receive_Business_Object___;
--
PROCEDURE <<<LOOP_CREATE_RECEIVE_LINES>>> (
   message_id_         IN in_message_tab.message_id%TYPE,
   receive_group_      IN VARCHAR2,
   bo_operation_       IN VARCHAR2,
   attr_grp_rec_       IN VARCHAR2,
   attribute_rec_      IN VARCHAR2,
   send_warning_       IN BOOLEAN,
   send_info_          IN BOOLEAN,
   receive_warning_    IN BOOLEAN,
   receive_info_       IN BOOLEAN,
   log_operation_      IN VARCHAR2,
   new_modify_error_   IN BOOLEAN,
   remote_timezone_difference_ IN NUMBER,
   remote_date_format_         IN VARCHAR2  )
IS
   attr_               VARCHAR2(32000);
   new_attr_           VARCHAR2(32000);
   modify_attr_        VARCHAR2(32000);
   na_                 VARCHAR2(32000);
   value_              VARCHAR2(2000);
   new_value_          VARCHAR2(2000);
   next_value_         VARCHAR2(2000);
   column_             VARCHAR2(2000);
   spread_column_      VARCHAR2(30);
   name_               VARCHAR2(30);
   lu_                 VARCHAR2(30) := ''<<<PROC_NAME>>>'';
   date_               DATE;
   ptr_                NUMBER;
   index_              NUMBER;
   dummy_              NUMBER;
   end_of_record_      BOOLEAN := FALSE;
   add_attribute_      BOOLEAN;
   new_allowed_        BOOLEAN;
   modify_allowed_     BOOLEAN;
   info_               VARCHAR2(2000);
   objid_              <<<OBJECT_VIEW>>>.objid%TYPE;
   objversion_         <<<OBJECT_VIEW>>>.objversion%TYPE;
   message_line_       in_message_line_pub.message_line%TYPE;
   operation_          replication_queue_tab.operation%TYPE;
   local_operation_    replication_queue_tab.operation%TYPE;
   sql_error_          VARCHAR2(512);
   --
   <<<OBJECT_KEY_DECL>>>
   --
BEGIN
   WHILE ( Client_SYS.Get_Next_From_Attr(attr_grp_rec_, ptr_, name_, value_) ) LOOP
      <<<FIND_KEY_VALUES_AND_OLD_VALUES>>>
   END LOOP;
   --
   IF    ( (operation_ IN (''NEW'',''LOAD'')) AND (receive_group_ IN (<<<RCV_LU_NEW>>>)) )    THEN 
      NULL;
   ELSIF ( (operation_ = ''MODIFY'')        AND (receive_group_ IN (<<<RCV_LU_MODIFY>>>)) ) THEN 
      NULL;
   ELSE
      RETURN;
   END IF;
   --
--   Client_SYS.Clear_Attr(new_attr_);
   --
--   <<<CALL_NEW_PREPARE>>>
   --
--   new_attr_prep_ := new_attr_;
   Client_SYS.Clear_Attr(new_attr_);
   Client_SYS.Clear_Attr(modify_attr_);
   --
   WHILE ( NOT (end_of_record_) ) LOOP
      value_ := Client_SYS.Get_Item_Value(''NAME'', attribute_rec_);
      message_line_ := Client_SYS.Get_Item_Value(''MESSAGE_LINE'', attribute_rec_);
      IF ( value_ != ''ATTRIBUTE'' ) THEN RAISE message_error_; END IF;
      --
      ptr_ := NULL;
      --
      -- Position pointer in attribute string according to message standard.
      -- Raise an error if there is no data in the attribute string - (this
      -- should never happen).
      -- -------------------------------------------------------------------
      IF ( Client_SYS.Get_Next_From_Attr(attribute_rec_, ptr_, name_, column_) ) THEN
         IF ( Client_SYS.Get_Next_From_Attr(attribute_rec_, ptr_, name_, column_) ) THEN
            IF ( Client_SYS.Get_Next_From_Attr(attribute_rec_, ptr_, name_, column_) ) THEN NULL;
            ELSE RAISE message_error_;                                        END IF;
         ELSE    RAISE message_error_;                                        END IF;
      ELSE       RAISE message_error_;                                        END IF;
      --
      WHILE ( Client_SYS.Get_Next_From_Attr(attribute_rec_, ptr_, name_, column_) AND (end_of_record_ = FALSE) ) LOOP
         IF ( column_ = ''END_ATTRIBUTE'' ) THEN
            end_of_record_ := TRUE;
         ELSE
            IF ( Client_SYS.Get_Next_From_Attr(attribute_rec_, ptr_, name_, value_) ) THEN
               IF    ( value_ = ''__NULL__'' )      THEN value_         := NULL;
               ELSIF ( value_ = ''END_ATTRIBUTE'' ) THEN end_of_record_ := TRUE; END IF;
               Accept_Column___(new_allowed_, modify_allowed_, receive_group_, lu_, column_,
                                send_warning_, send_info_, receive_warning_, receive_info_, log_operation_);  
               IF ( new_allowed_ OR modify_allowed_ ) THEN
                  IF ( column_ IN (<<<DATE_COLUMN_LIST>>>) ) THEN
                     date_ := TO_DATE(value_, remote_date_format_);
                     date_ := Replication_Util_API.Convert_Time__(date_, remote_timezone_difference_);
                     IF ( new_allowed_ )   THEN Client_SYS.Add_To_Attr(column_, date_, new_attr_);    END IF;
                     IF ( modify_allowed_) THEN Client_SYS.Add_To_Attr(column_, date_, modify_attr_); END IF;
                  ELSE
                     IF ( new_allowed_ )   THEN Client_SYS.Add_To_Attr(column_, value_, new_attr_);    END IF;
                     IF ( modify_allowed_) THEN Client_SYS.Add_To_Attr(column_, value_, modify_attr_); END IF;
                  END IF;
               END IF;
            ELSE
               RAISE message_error_;
            END IF;
         END IF;
      END LOOP;
   END LOOP;
   Set_Subst_Value___(receive_group_, lu_, new_attr_, modify_attr_,
                     send_warning_, send_info_, receive_warning_, receive_info_, log_operation_);
   Set_Constant_Values___(receive_group_, lu_, new_attr_, modify_attr_,
                         send_warning_, send_info_, receive_warning_, receive_info_, log_operation_);
   Set_Default_Values___(receive_group_, lu_, new_attr_,
                        send_warning_, send_info_, receive_warning_, receive_info_, log_operation_);
   --
   IF ( (new_attr_ IS NOT NULL) OR (modify_attr_ IS NOT NULL) ) THEN
      spread_column_ := ''<<<SPREAD_COLUMN>>>'';
      --
      -- If we dont have a SPREAD COLUMN we do ordinary replication.
      -- -----------------------------------------------------------
      IF ( NVL(LENGTH(spread_column_),0) < 2 ) THEN
         --
         <<<FIND_KEY_VALUES>>>
         --
         BEGIN
            SELECT objid, objversion
            INTO   objid_, objversion_
            FROM   <<<OBJECT_VIEW>>>
            <<<OBJECT_KEY_CONDITION>>>
            ;
            local_operation_ := ''MODIFY'';
         EXCEPTION
            WHEN others THEN
               local_operation_ := ''NEW'';
         END;
         --
         -- If new_modify_error_ is FALSE (default) then we dont care if there is
         -- an operation error. If message says NEW and the object exist we MODIFY,
         -- if message says MODIFY and object dont exist we create it.
         -- -----------------------------------------------------------------------
         IF ( new_modify_error_ ) THEN
            IF ( (operation_ = local_operation_) OR (operation_ = ''LOAD'') ) THEN
               NULL;
            ELSE
               RAISE new_modify_exception_;
            END IF;
         END IF;
         na_ := new_attr_;
         IF ( local_operation_ = ''NEW'' ) THEN
            attr_ := new_attr_;
            --
            <<<FUNCTION_CALL_ON_ATTR>>>
            --
            <<<CALL_NEW>>>
            Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
               ''RCV10: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', ''Object created'', log_operation_, ''INFORMATION'',
               send_warning_, send_info_, receive_warning_, receive_info_);
         ELSE
            ptr_  := NULL;
            Client_SYS.Clear_Attr(attr_);
            WHILE ( Client_SYS.Get_Next_From_Attr(modify_attr_, ptr_, name_, value_) ) LOOP
               add_attribute_ := TRUE;
               <<<REMOVE_KEY_VALUES>>>
               IF ( add_attribute_ ) THEN
                  Client_SYS.Add_To_Attr(name_, value_, attr_);
               END IF;
            END LOOP;
            --
            <<<FUNCTION_CALL_ON_ATTR>>>
            --
            <<<CALL_MODIFY>>>       
            Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
               ''RCV10: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', ''Object modified'', log_operation_, ''INFORMATION'',
               send_warning_, send_info_, receive_warning_, receive_info_);
         END IF;
      ELSE
         --
         -- SPREADING means that we use the primary object to CREATE or MODIFY objects with
         -- another value in a key column then the primary object.
         -- SPREAD COLUMN is a primary key column which can take different values according
         -- to the configuration.
         -- --------------------------------------------------------------------------------
         index_ := NULL;
         WHILE ( Get_Next_Spread_Value___ (next_value_, index_, receive_group_, lu_, spread_column_,
                                          send_warning_, send_info_, receive_warning_, receive_info_, log_operation_) ) LOOP
            Client_SYS.Set_Item_Value(spread_column_, next_value_, new_attr_);
            Client_SYS.Set_Item_Value(spread_column_, next_value_, modify_attr_);
            Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
               ''RCV10: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', ''Object spread to '' || next_value_, log_operation_, ''INFORMATION'',
               send_warning_, send_info_, receive_warning_, receive_info_);
            --
            <<<FIND_KEY_VALUES>>>
            --
            BEGIN
               SELECT objid, objversion
               INTO   objid_, objversion_
               FROM   <<<OBJECT_VIEW>>>
               <<<OBJECT_KEY_CONDITION>>>
               ;
               local_operation_ := ''MODIFY'';
            EXCEPTION
               WHEN others THEN
                  local_operation_ := ''NEW'';
            END;
            na_ := new_attr_;
            IF ( local_operation_ = ''NEW'' ) THEN
               attr_ := new_attr_;
               --
               <<<FUNCTION_CALL_ON_ATTR>>>
               --
               <<<CALL_NEW>>>
               Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
                  ''RCV10: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', ''Object created'', log_operation_, ''INFORMATION'',
                  send_warning_, send_info_, receive_warning_, receive_info_);
            ELSE
               ptr_ := NULL;
               Client_SYS.Clear_Attr(attr_);
               WHILE ( Client_SYS.Get_Next_From_Attr(modify_attr_, ptr_, name_, value_) ) LOOP
                  add_attribute_ := TRUE;
                  <<<REMOVE_KEY_VALUES>>>
                  IF ( add_attribute_ ) THEN
                     Client_SYS.Add_To_Attr(name_, value_, attr_);
                  END IF;
               END LOOP;
               --
               --
               <<<FUNCTION_CALL_ON_ATTR>>>
               --
               <<<CALL_MODIFY>>>       
               Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
                  ''RCV10: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', ''Object modified'', log_operation_, ''INFORMATION'',
                  send_warning_, send_info_, receive_warning_, receive_info_);
            END IF;
         END LOOP;
      END IF;
   END IF;
   Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', lu_, rows_received_ => 1);
   --
EXCEPTION
   WHEN message_error_ THEN
      sql_error_ := ''Syntax error in message - record rejected'';
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
         ''RCV08: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', lu_, errors_on_receive_ => 1);
      Error_SYS.Appl_General(lu_name_ || ''.<<<PROC_NAME>>>'', sql_error_);      
   WHEN new_modify_exception_ THEN
      sql_error_ := ''Operation '' || operation_ || '' in conflict - record rejected'';
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
         ''RCV09: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', lu_, errors_on_receive_ => 1);
      Error_SYS.Appl_General(lu_name_ || ''.<<<PROC_NAME>>>'', sql_error_);      
   WHEN OTHERS THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
         ''RCV10: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', lu_, errors_on_receive_ => 1);
      Error_SYS.Appl_General(lu_name_ || ''.<<<PROC_NAME>>>'', sql_error_);      
END <<<LOOP_CREATE_RECEIVE_LINES>>>;
-----------------------------------------------------------------------------
--------------------------  PROTECTED METHODS -------------------------------
-----------------------------------------------------------------------------
PROCEDURE Receive_Message (
   message_id_          IN in_message_tab.message_id%TYPE,
   operation_           IN VARCHAR2,
   sender_              IN in_message_tab.sender%TYPE,
   bo_                  IN VARCHAR2,
   bo_key_              IN VARCHAR2,
   timezone_difference_ IN NUMBER,
   date_format_         IN VARCHAR2,
   attr_grp_rec_        IN VARCHAR2,
   attribute_rec_       IN VARCHAR2,
   send_warning_str_    IN VARCHAR2,
   send_info_str_       IN VARCHAR2,
   receive_warning_str_ IN VARCHAR2,
   receive_info_str_    IN VARCHAR2 )
IS
   attr_            VARCHAR2(32000);
   value_           VARCHAR2(255);
   error_           VARCHAR2(1000);
   lu_              VARCHAR2(30);
   receive_group_   VARCHAR2(30);
   message_line_    in_message_line_pub.message_line%TYPE;
   send_warning_    BOOLEAN := FALSE;
   send_info_       BOOLEAN := FALSE;
   receive_warning_ BOOLEAN := FALSE;
   receive_info_    BOOLEAN := FALSE;
   sql_error_       VARCHAR2(512);
   log_operation_   VARCHAR2(15);
   new_modify_error_ BOOLEAN;
   remote_timezone_difference_  NUMBER;
   remote_date_format_          VARCHAR2(50);
 
   CURSOR c1_group (sender_ replication_queue_tab.business_object%TYPE) IS
      SELECT a.receive_group  AS receive_group
      FROM   replication_sender_tab a
      WHERE  a.sender = sender_;
BEGIN
   IF ( NVL(send_warning_str_,''FALSE'')  = ''FALSE'' ) THEN
      send_warning_    := TRUE;
   END IF;
   IF ( NVL(send_info_str_,''FALSE'')  = ''FALSE'' ) THEN
      send_info_       := TRUE;
   END IF;
   IF ( NVL(receive_warning_str_,''FALSE'')  = ''FALSE'' ) THEN
      receive_warning_ := TRUE;
   END IF;
   IF ( NVL(receive_info_str_,''FALSE'')  = ''FALSE'' ) THEN
      receive_info_    := TRUE;
   END IF;
   Wait___ (message_id_, bo_);
--
   IF ( operation_ = ''LOAD'' ) THEN
      log_operation_ := operation_;
   ELSE
      log_operation_ := ''RECEIVE'';
   END IF;
   new_modify_error_ := <<<NEW_MODIFY_TRUE_FALSE>>>;
   OPEN c1_group (sender_);
   FETCH c1_group INTO receive_group_;
   IF ( c1_group%NOTFOUND ) THEN
      CLOSE c1_group;
      RAISE configuration_error_;
   END IF;
   CLOSE c1_group;
   IF ( Receive_Business_Object___(sender_, receive_group_, operation_,
                                   send_warning_, send_info_, receive_warning_, receive_info_, log_operation_) ) THEN
      remote_timezone_difference_ := timezone_difference_;
      remote_date_format_ := date_format_;
      --Replication_Util_API.Object_Replicated_ := TRUE;
      App_Context_SYS.Set_Value(''REPLICATION_UTIL_API.Object_Replicated_'', TRUE);
      --

      lu_ := Client_SYS.Get_Item_Value(''C01'', attr_grp_rec_);
      message_line_ := Client_SYS.Get_Item_Value(''MESSAGE_LINE'', attribute_rec_);
      --
      -- Insert Connectivity message lines into Business Object objects (LU) data
      -- ------------------------------------------------------------------------
      <<<CALL_RECEIVE_LINES>>>
      --
      -- Accept Connectivity message
      -- ---------------------------
      Connectivity_SYS.Accept_Message(message_id_);
   ELSE
      Connectivity_SYS.Reject_Message(message_id_);
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, 0,
         ''RCV12: '||CHR(38)||'PKG..Receive_Message'', ''message rejected'', log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
   END IF;
   COMMIT;
--   Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', '''||CHR(38)||'BO'', rows_received_ => 1);
   --Replication_Util_API.Object_Replicated_ := FALSE;
   App_Context_SYS.Set_Value(''REPLICATION_UTIL_API.Object_Replicated_'', FALSE);
   COMMIT;
EXCEPTION
   WHEN message_error_ THEN
      sql_error_ := ''Syntax error in message - record rejected'';
      ROLLBACK;
      Connectivity_SYS.Reject_Message(message_id_);
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
         ''RCV13: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
--      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', errors_on_receive_ => 1);
      --Replication_Util_API.Object_Replicated_ := FALSE;
      App_Context_SYS.Set_Value(''REPLICATION_UTIL_API.Object_Replicated_'', FALSE);
      COMMIT;
      Error_SYS.Appl_General(lu_name_ || ''.<<<PROC_NAME>>>'', sql_error_);      
   WHEN configuration_error_ THEN
      sql_error_ := ''No configuration found for '' || sender_;
      ROLLBACK;
      Connectivity_SYS.Reject_Message(message_id_);
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
         ''RCV14: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
--      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', errors_on_receive_ => 1);
      --Replication_Util_API.Object_Replicated_ := FALSE;
      App_Context_SYS.Set_Value(''REPLICATION_UTIL_API.Object_Replicated_'', FALSE);
      COMMIT;
      Error_SYS.Appl_General(lu_name_ || ''.<<<PROC_NAME>>>'', sql_error_);      
   WHEN others THEN
      sql_error_ := sqlerrm;
      ROLLBACK;
      Connectivity_SYS.Reject_Message(message_id_);
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, 0,
         ''RCV15: '||CHR(38)||'PKG..Receive_Message'', sql_error_, log_operation_, ''ERROR'',
         send_warning_, send_info_, receive_warning_, receive_info_);
--      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', '''||CHR(38)||'BO'', errors_on_receive_ => 1);
      --Replication_Util_API.Object_Replicated_ := FALSE;
      App_Context_SYS.Set_Value(''REPLICATION_UTIL_API.Object_Replicated_'', FALSE);
      COMMIT;
      Error_SYS.Appl_General('''||CHR(38)||'PKG..Receive_Message'', sql_error_);      
END Receive_Message;
--
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;
--
-- Load data into cache
-- --------------------
BEGIN
   NULL;
--
   <<<SPREAD_VALUES>>>
--
   <<<SUBST_VALUES>>>
--   
   <<<DEFAULT_VALUES>>>
--
   <<<CONSTANT_VALUES>>>
--
   <<<COLUMN_ACCESS_RIGHTS>>>
END '||CHR(38)||'PKG;
'||CHR(47)||'
SHOW ERROR
-----------------------------------------------------------------------------';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ReplicationDesignSendAPI';
   rec_.description  := 'Template for package body to send replication data';
   rec_.rowkey       := 'BE994A55E20F4F4D88C2DEEDF79775F3';
   rec_.template     := '-----------------------------------------------------------------------------
--
--  Logical unit: 
--
--  Purpose:
--
--  IFS/Replication Template Version 1.0
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  <<<SYSDATE>>>      Generated 
-----------------------------------------------------------------------------
--
DEFINE MODULE = FNDRPL
DEFINE LU     = <<<LU>>>
DEFINE PKG    = <<<PKG>>>
--
DEFINE BO     = <<<BO>>>
--
PROMPT Creating '||CHR(38)||'PKG specification
--
CREATE OR REPLACE PACKAGE '||CHR(38)||'PKG IS
--
module_  CONSTANT VARCHAR2(25) := '''||CHR(38)||'MODULE'';
lu_name_ CONSTANT VARCHAR2(25) := '''||CHR(38)||'LU'';
-----------------------------------------------------------------------------
--------------------------  PROTECTED METHODS -------------------------------
-----------------------------------------------------------------------------
PROCEDURE Resend_Business_Object (
   replication_group_  IN VARCHAR2,
   business_object_    IN VARCHAR2,
   date_               IN VARCHAR2 := ''1900-01-02'',
   lu_                 IN VARCHAR2 := ''%'',
   commit_interval_    IN NUMBER := 100,
   send_warning_str_   IN VARCHAR2,
   send_info_str_      IN VARCHAR2,
   receive_warning_str_ IN VARCHAR2,
   receive_info_str_   IN VARCHAR2 );
--
PROCEDURE Create_Message (
   business_object_id_  IN replication_queue_tab.business_object_id%TYPE,
   send_warning_str_    IN VARCHAR2,
   send_info_str_       IN VARCHAR2,
   receive_warning_str_ IN VARCHAR2,
   receive_info_str_    IN VARCHAR2 );
--
PROCEDURE Init;
--
END '||CHR(38)||'PKG;
'||CHR(47)||'
SHOW ERROR
-----------------------------------------------------------------------------';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ReplicationDesignSendAPY';
   rec_.description  := 'Template for package specification to send replication data';
   rec_.rowkey       := 'BFFF4615DD804B8A8B01C0B4F2495042';
   rec_.template     := '-----------------------------------------------------------------------------
--
--  Logical unit: 
--
--  Purpose:
--
--  IFS/Replication Template Version 1.0
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  <<<SYSDATE>>>      Generated 
-----------------------------------------------------------------------------
--
DEFINE MODULE = FNDRPL
DEFINE LU     = <<<LU>>>
DEFINE PKG    = <<<PKG>>>
--
DEFINE BO     = <<<BO>>>
--
-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------
--
PROMPT Creating '||CHR(38)||'PKG implementation
--
CREATE OR REPLACE PACKAGE BODY '||CHR(38)||'PKG IS

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
--
-- If a column has no value (IS NULL) then the value __NULL__ is inserted in the
-- message. This is done beacuse the method Connectivity_SYS.Get_Next_Message_Line
-- used by the receiving process does not return the columns with now values.
-- The value __NULL__ makes it possible to update a column to NULL as well as it
-- guarantees a correct syntax in the message. 
--
-- The following Add_To_Attr procedures is used because the use of
-- Client_SYS.Add_To_Attr(name_, NVL(value_,''__NULL__''), attr_) would
-- result in a value error when the value is of type DATE or NUMBER.
-- -------------------------------------------------------------------------------
PROCEDURE Add_To_Attr___ (
   name_  IN     VARCHAR2,
   value_ IN     VARCHAR2,
   attr_  IN OUT VARCHAR2 )
IS
BEGIN
   IF ( value_ IS NULL ) THEN
      Client_SYS.Add_To_Attr(name_, ''__NULL__'', attr_);
   ELSE
      Client_SYS.Add_To_Attr(name_, value_, attr_);
   END IF;
END Add_To_Attr___;
--
PROCEDURE Add_To_Attr___ (
   name_  IN     VARCHAR2,
   value_ IN     NUMBER,
   attr_  IN OUT VARCHAR2 )
IS
BEGIN
   IF ( value_ IS NULL ) THEN
      Client_SYS.Add_To_Attr(name_, ''__NULL__'', attr_);
   ELSE
      Client_SYS.Add_To_Attr(name_, value_, attr_);
   END IF;
END Add_To_Attr___;
--
PROCEDURE Add_To_Attr___ (
   name_  IN     VARCHAR2,
   value_ IN     DATE,
   attr_  IN OUT VARCHAR2 )
IS
BEGIN
   IF ( value_ IS NULL ) THEN
      Client_SYS.Add_To_Attr(name_, ''__NULL__'', attr_);
   ELSE
      Client_SYS.Add_To_Attr(name_, value_, attr_);
   END IF;
END Add_To_Attr___;
--
FUNCTION Create_Head___ (
   receiver_           IN out_message_tab.receiver%TYPE,
   replication_group_  IN replication_queue_tab.replication_group%TYPE,
   business_object_id_ IN replication_queue_tab.business_object_id%TYPE,
   send_warning_       IN BOOLEAN,
   send_info_          IN BOOLEAN,
   receive_warning_    IN BOOLEAN,
   receive_info_       IN BOOLEAN ) RETURN NUMBER
IS
   message_id_         out_message_tab.message_id%TYPE;
   bo_id_              out_message_tab.application_receiver_id%TYPE;
   attr_               VARCHAR2(32000);
   value_              VARCHAR2(2000);
   name_               VARCHAR2(30);
   ptr_                NUMBER;
   site_id_            installation_site_tab.site_id%TYPE;
   sql_error_          VARCHAR2(512);
   CURSOR sender IS
      SELECT a.receiver
      FROM   replication_receiver a,
             installation_site b
      WHERE  a.site_id   = b.site_id
      AND    b.this_site = ''TRUE'';
   CURSOR this_site IS
      SELECT a.site_id
      FROM   installation_site a
      WHERE  a.this_site = ''TRUE'';
BEGIN
   OPEN sender;
   FETCH sender INTO site_id_;
   CLOSE sender;
   IF ( site_id_ IS NULL ) THEN
      OPEN this_site;
      FETCH this_site INTO site_id_;
      CLOSE this_site;
   END IF;
   --
   -- Create Connectivity message head
   -- --------------------------------
   WHILE ( Client_SYS.Get_Next_From_Attr(business_object_id_, ptr_, name_, value_) ) LOOP
      bo_id_ := bo_id_ || name_ || ''='' || value_ || '';'';
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr(''CLASS_ID'', ''IFS_REPLICATION'', attr_);
   Client_SYS.Add_To_Attr(''RECEIVER'', receiver_, attr_);
   Client_SYS.Add_To_Attr(''MEDIA_CODE'', ''REPLICATION'', attr_);
   Client_SYS.Add_To_Attr(''APPLICATION_MESSAGE_ID'', '''||CHR(38)||'BO'' || ''=>'' || bo_id_, attr_);
   Client_SYS.Add_To_Attr(''APPLICATION_RECEIVER_ID'', bo_id_, attr_);
   IF ( site_id_ IS NOT NULL ) THEN
      Client_SYS.Add_To_Attr(''SENDER'', site_id_, attr_);
   END IF;
   Connectivity_SYS.Create_Message(message_id_, attr_);
   RETURN message_id_;
EXCEPTION
   WHEN OTHERS THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, 0,
                                       ''REPL01: '||CHR(38)||'PKG..Create_Head___'', sql_error_, ''SEND'', ''ERROR'',
                                       send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Create_Head___'', sql_error_);      
END Create_Head___;
--
PROCEDURE Create_Business_Object___ (
   message_id_         IN out_message_tab.message_id%TYPE,
   message_line_       IN out_message_line_tab.message_line%TYPE,
   receiver_           IN out_message_tab.receiver%TYPE,
   replication_group_  IN replication_queue_tab.replication_group%TYPE,
   business_object_id_ IN replication_queue_tab.business_object_id%TYPE,
   operation_          IN replication_queue_tab.operation%TYPE,
   send_warning_       IN BOOLEAN,
   send_info_          IN BOOLEAN,
   receive_warning_    IN BOOLEAN,
   receive_info_       IN BOOLEAN )
IS
   attr_               VARCHAR2(500);
   value_              VARCHAR2(2000);
   name_               VARCHAR2(30);
   ptr_                NUMBER;
   column_no_          NUMBER;
   column_name_1_      VARCHAR2(3);
   column_name_2_      VARCHAR2(3);
   sql_error_          VARCHAR2(512);
BEGIN
   --
   -- Create header record for business object
   -- ----------------------------------------
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr(''MESSAGE_ID'', message_id_, attr_);
   Client_SYS.Add_To_Attr(''MESSAGE_LINE'', message_line_, attr_);
   Client_SYS.Add_To_Attr(''NAME'', ''BUSINESS_OBJECT'', attr_);
   Client_SYS.Add_To_Attr(''C00'', ''BUSINESS_OBJECT'', attr_);
   Client_SYS.Add_To_Attr(''C01'', '''||CHR(38)||'BO'', attr_);
   Client_SYS.Add_To_Attr(''C02'', ''OPERATION'', attr_);
   Client_SYS.Add_To_Attr(''C03'', operation_, attr_);
   --
   column_no_ := 4;
   ptr_ := NULL;
   --
   -- Create primary key column names and values
   -- ------------------------------------------
   WHILE ( Client_SYS.Get_Next_From_Attr(business_object_id_, ptr_, name_, value_) ) LOOP
      IF ( (LENGTH(name_) < 5) OR (SUBSTR(name_, 1, 4) <> ''OLD_'') ) THEN
         column_name_1_ := ''C'' || LTRIM(TO_CHAR(column_no_, ''00''));
         column_name_2_ := ''C'' || LTRIM(TO_CHAR(column_no_ + 1, ''00''));
         column_no_ := column_no_ + 2;
         Client_SYS.Add_To_Attr(column_name_1_, name_, attr_);
         Client_SYS.Add_To_Attr(column_name_2_, value_, attr_);
      END IF;
   END LOOP;
   ptr_ := NULL;
   --
   -- Create old values for primary key column names and values (if the values have been changed
   -- ------------------------------------------------------------------------------------------
   WHILE ( Client_SYS.Get_Next_From_Attr(business_object_id_, ptr_, name_, value_) ) LOOP
      IF ( (LENGTH(name_) > 4) AND (SUBSTR(name_, 1, 4) = ''OLD_'') ) THEN
         column_name_1_ := ''C'' || LTRIM(TO_CHAR(column_no_, ''00''));
         column_name_2_ := ''C'' || LTRIM(TO_CHAR(column_no_ + 1, ''00''));
         column_no_ := column_no_ + 2;
         Client_SYS.Add_To_Attr(column_name_1_, name_, attr_);
         Client_SYS.Add_To_Attr(column_name_2_, value_, attr_);
      END IF;
   END LOOP;
   column_name_1_ := ''C'' || LTRIM(TO_CHAR(column_no_, ''00''));
   column_name_2_ := ''C'' || LTRIM(TO_CHAR((column_no_ + 1), ''00''));
   column_no_ := column_no_ + 2;
   Client_SYS.Add_To_Attr(column_name_1_, ''TIMEZONE_DIFFERENCE'', attr_);
   Client_SYS.Add_To_Attr(column_name_2_, Installation_Site_API.Get_Timezone_Difference_, attr_);
   column_name_1_ := ''C'' || LTRIM(TO_CHAR(column_no_, ''00''));
   column_name_2_ := ''C'' || LTRIM(TO_CHAR((column_no_ + 1), ''00''));
   column_no_ := column_no_ + 2;
   Client_SYS.Add_To_Attr(column_name_1_, ''DATE_FORMAT'', attr_);
   Client_SYS.Add_To_Attr(column_name_2_, Client_SYS.date_format_, attr_);
   Connectivity_SYS.Create_Message_Line(attr_);
   Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'BO'', NULL, NULL, message_id_, message_line_,
                                    ''REPL02: Create Business Object message'', NULL, ''SEND'', ''INFORMATION'',
                                    send_warning_, send_info_, receive_warning_, receive_info_);
EXCEPTION
   WHEN OTHERS THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
                                       ''REPL03: '||CHR(38)||'PKG..Create_Business_ Object___'', sql_error_, ''SEND'', ''ERROR'',
                                       send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Create_Business_ Object___'', sql_error_);      
END Create_Business_Object___;
--
PROCEDURE <<<CREATE_MESSAGE_LINES>>> (
   message_id_         IN     out_message_tab.message_id%TYPE,
   message_line_       IN OUT out_message_line_tab.message_line%TYPE,
   receiver_           IN     out_message_tab.receiver%TYPE,
   replication_group_  IN     replication_queue_tab.replication_group%TYPE,
   lu_                 IN     replication_queue_tab.lu_name%TYPE,
   operation_          IN     replication_queue_tab.operation%TYPE,
   key_values_         IN     replication_queue_tab.key_values%TYPE,
   key_rowid_          IN     replication_queue_tab.key_rowid%TYPE,
   object_version_     IN     replication_queue_tab.business_object_version%TYPE,
   curr_rowid_         IN OUT replication_queue_tab.key_rowid%TYPE,
   send_warning_       IN     BOOLEAN,
   send_info_          IN     BOOLEAN,
   receive_warning_    IN     BOOLEAN,
   receive_info_       IN     BOOLEAN )
IS
   attr_               VARCHAR2(32000);
   value_              VARCHAR2(2000);
   ptr_                NUMBER;
   name_               VARCHAR2(30);
   column_no_          NUMBER;
   column_name_1_      VARCHAR2(3);
   column_name_2_      VARCHAR2(3);
   sql_error_          VARCHAR2(512);
   --
   c1_rec              <<<VIEW_NAME>>>%ROWTYPE;
   CURSOR c1 (rowid_ replication_queue_tab.key_rowid%TYPE) IS
      SELECT a.*
      FROM   <<<VIEW_NAME>>> a
      WHERE  a.objid = rowid_;
   --
BEGIN
   --
   IF ( NVL(curr_rowid_,''0'') = key_rowid_ ) THEN
      RETURN;
   END IF;
   curr_rowid_ := key_rowid_;
   --
   OPEN c1 (key_rowid_);
   FETCH c1 INTO c1_rec;
   IF ( c1%NOTFOUND ) THEN
      CLOSE c1;
      RETURN;
   END IF;
   CLOSE c1;
   --
   -- Create header record for attribute group
   -- ----------------------------------------
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr(''MESSAGE_ID'', message_id_, attr_);
   Client_SYS.Add_To_Attr(''MESSAGE_LINE'', message_line_, attr_);
   Client_SYS.Add_To_Attr(''NAME'', ''ATTRIBUTE_GROUP'', attr_);
   Client_SYS.Add_To_Attr(''C00'', ''ATTRIBUTE_GROUP'', attr_);
   Client_SYS.Add_To_Attr(''C01'', lu_, attr_);
   Client_SYS.Add_To_Attr(''C02'', ''OPERATION'', attr_);
   Client_SYS.Add_To_Attr(''C03'', operation_, attr_);
   --
   column_no_ := 4;
   ptr_ := NULL;
   --
   -- Create primary key column names and values
   -- ------------------------------------------
   WHILE ( Client_SYS.Get_Next_From_Attr(key_values_, ptr_, name_, value_) ) LOOP
      IF ( (LENGTH(name_) < 5) OR (SUBSTR(name_, 1, 4) <> ''OLD_'') ) THEN
         column_name_1_ := ''C'' || LTRIM(TO_CHAR(column_no_, ''00''));
         column_name_2_ := ''C'' || LTRIM(TO_CHAR(column_no_ + 1, ''00''));
         column_no_ := column_no_ + 2;
         Client_SYS.Add_To_Attr(column_name_1_, name_, attr_);
         Client_SYS.Add_To_Attr(column_name_2_, value_, attr_);
      END IF;
   END LOOP;
   ptr_ := NULL;
   --
   -- Create old values for primary key column names and values (if the values have been changed
   -- ------------------------------------------------------------------------------------------
   WHILE ( Client_SYS.Get_Next_From_Attr(key_values_, ptr_, name_, value_) ) LOOP
      IF ( (LENGTH(name_) > 5) AND (SUBSTR(name_, 1, 4) = ''OLD_'') ) THEN
         column_name_1_ := ''C'' || LTRIM(TO_CHAR(column_no_, ''00''));
         column_name_2_ := ''C'' || LTRIM(TO_CHAR(column_no_ + 1, ''00''));
         column_no_ := column_no_ + 2;
         Client_SYS.Add_To_Attr(column_name_1_, name_, attr_);
         Client_SYS.Add_To_Attr(column_name_2_, value_, attr_);
      END IF;
   END LOOP;
   --
   column_name_1_ := ''C'' || LTRIM(TO_CHAR(column_no_, ''00''));
   column_name_2_ := ''C'' || LTRIM(TO_CHAR((column_no_ + 1), ''00''));
   column_no_ := column_no_ + 2;
   Client_SYS.Add_To_Attr(column_name_1_, ''OBJECT_VERSION'', attr_);
   Client_SYS.Add_To_Attr(column_name_2_, object_version_, attr_);
   Connectivity_SYS.Create_Message_Line(attr_);
   message_line_ := message_line_ + 1;
   --
   -- Create data record(s) for attribute group
   -- -----------------------------------------
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr(''MESSAGE_ID'', message_id_, attr_);
   Client_SYS.Add_To_Attr(''MESSAGE_LINE'', message_line_, attr_);
   Client_SYS.Add_To_Attr(''NAME'', ''ATTRIBUTE'', attr_);
   --
   <<<VIEW_COLUMNS>>>
   --
   Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', lu_, rows_sent_ => 1);
EXCEPTION
   WHEN OTHERS THEN
      sql_error_ := sqlerrm;
      IF ( c1%ISOPEN ) THEN
         CLOSE c1;
      END IF;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
                                       ''REPL04: '||CHR(38)||'PKG..<<<PROC_NAME>>>'', sql_error_, ''SEND'', ''ERROR'',
                                       send_warning_, send_info_, receive_warning_, receive_info_);
      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', lu_, errors_on_send_ => 1);
--      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', errors_on_send_ => 1);
      Error_SYS.Appl_General(lu_name_ || ''.<<<PROC_NAME>>>'', sql_error_);      
END <<<CREATE_MESSAGE_LINES>>>;
-----------------------------------------------------------------------------
--------------------------  PROTECTED METHODS -------------------------------
-----------------------------------------------------------------------------
PROCEDURE Resend_Business_Object (
   replication_group_  IN VARCHAR2,
   business_object_    IN VARCHAR2,
   date_               IN VARCHAR2 := ''1900-01-02'',
   lu_                 IN VARCHAR2 := ''%'',
   commit_interval_    IN NUMBER := 100,
   send_warning_str_   IN VARCHAR2,
   send_info_str_      IN VARCHAR2,
   receive_warning_str_ IN VARCHAR2,
   receive_info_str_   IN VARCHAR2 )
IS
   date_limit_      DATE;
   commit_counter_  NUMBER;
   newrec_          replication_queue_tab%ROWTYPE;
   attr_            VARCHAR2(2000);
   local_date_      VARCHAR2(10);
   local_lu_        VARCHAR2(30);
   local_commit_i_  NUMBER;
   send_warning_    BOOLEAN := FALSE;
   send_info_       BOOLEAN := FALSE;
   receive_warning_ BOOLEAN := FALSE;
   receive_info_    BOOLEAN := FALSE;
   sql_error_       VARCHAR2(512);
   <<<CREATE_LOAD_CURSOR>>>
   CURSOR c1_<<<LU>>> (date_ DATE) IS
      SELECT rowid, a.*
      FROM   <<<TABLE>>> a
      WHERE  NVL(a.ifs$replication$date,TO_DATE(''19000101'',''YYYYMMDD'')) > date_;
   <<<CREATE_LOAD_CURSOR>>>
BEGIN
   IF ( NVL(send_warning_str_,''FALSE'')  = ''FALSE'' ) THEN
      send_warning_    := TRUE;
   END IF;
   IF ( NVL(send_info_str_,''FALSE'')  = ''FALSE'' ) THEN
      send_info_       := TRUE;
   END IF;
   IF ( NVL(receive_warning_str_,''FALSE'')  = ''FALSE'' ) THEN
      receive_warning_ := TRUE;
   END IF;
   IF ( NVL(receive_info_str_,''FALSE'')  = ''FALSE'' ) THEN
      receive_info_    := TRUE;
   END IF;
   local_date_     := nvl(date_, ''1900-01-02'');
   local_lu_       := nvl(lu_, ''%'');
   local_commit_i_ := nvl(commit_interval_, 100);
   BEGIN
      date_limit_ := TO_DATE(SUBSTR(local_date_,1,10),''YYYY-MM-DD'');
   EXCEPTION
      WHEN others THEN
         BEGIN
            date_limit_ := TO_DATE(SUBSTR(local_date_,1,8),''YYYYMMDD'');
         EXCEPTION
            WHEN others THEN
               date_limit_ := TO_DATE(''1900-01-02'',''YYYY-MM-DD'');      
      END;
   END;
   <<<CREATE_LOAD_INSTRUCTION>>>
   IF ( local_lu_ IN (''<<<LU>>>'',''%'') ) THEN
      commit_counter_ := 0;
      FOR c1 IN c1_<<<LU>>> (date_limit_) LOOP      
         newrec_.operation := ''LOAD'';
         newrec_.business_object := business_object_;
         --
         -- Attribute group Business Object keys
         -- ------------------------------------
         Client_SYS.Clear_Attr(attr_);
         <<<BO_OBJECT_KEYS>>>
         --
         newrec_.business_object_id := attr_; 
         newrec_.lu_name := ''<<<LU>>>'';
         newrec_.key_rowid := c1.rowid;
         --
         -- Attribute group LU keys
         -- -----------------------
         Client_SYS.Clear_Attr(attr_);
         <<<OBJECT_KEYS>>>
         -- 
         newrec_.key_values := attr_;
         newrec_.replication_group := replication_group_;
         <<<REPLICATION_GROUP>>>
         --
         commit_counter_ := commit_counter_ + 1;
         IF ( commit_counter_ > local_commit_i_ ) THEN
            COMMIT;
            commit_counter_ := 0;
         END IF;
      END LOOP;
   END IF;
   <<<CREATE_LOAD_INSTRUCTION>>>
EXCEPTION
   WHEN OTHERS THEN
      sql_error_ := sqlerrm;
      ROLLBACK;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, 0, 0,
                                       ''REPL04: '||CHR(38)||'PKG..Resend_Business_Object'', sql_error_, ''SEND'', ''ERROR'',
                                       send_warning_, send_info_, receive_warning_, receive_info_);
      Error_SYS.Appl_General(lu_name_ || ''.Resend_Business_Object'', sql_error_);      
END Resend_Business_Object;
--
PROCEDURE Create_Message (
   business_object_id_  IN replication_queue_tab.business_object_id%TYPE,
   send_warning_str_    IN VARCHAR2,
   send_info_str_       IN VARCHAR2,
   receive_warning_str_ IN VARCHAR2,
   receive_info_str_    IN VARCHAR2 )
IS
   message_id_         out_message_tab.message_id%TYPE := 0;
   message_line_       out_message_line_tab.message_line%TYPE := 2;
   bo_operation_       replication_queue_tab.operation%TYPE;
   key_values_         replication_queue_tab.key_values%TYPE;
   send_warning_       BOOLEAN := FALSE;
   send_info_          BOOLEAN := FALSE;
   receive_warning_    BOOLEAN := FALSE;
   receive_info_       BOOLEAN := FALSE;
   sql_error_          VARCHAR2(512);
--
<<<ROWID_DECL>>>
--   
   CURSOR c_group (object_id_ replication_queue_tab.business_object_id%TYPE ) IS
      SELECT DISTINCT a.replication_group AS replication_group
      FROM   replication_queue_tab a
      WHERE  a.business_object    = '''||CHR(38)||'BO''
      AND    a.business_object_id = object_id_
      AND    a.rowstate           = ''Transferred'';
--      AND    a.rowstate           = ''Processing'';
   CURSOR c_receiver (replication_group_ replication_group_tab.replication_group%TYPE ) IS
      SELECT a.receiver AS receiver
      FROM   replication_receiver_tab a
      WHERE  a.replication_group = replication_group_;
   CURSOR c_queue (object_id_   replication_queue_tab.business_object_id%TYPE,
                   repl_group_  replication_queue_tab.replication_group%TYPE ) IS
      SELECT rowid, a.*
      FROM   replication_queue_tab a
      WHERE  a.business_object    = '''||CHR(38)||'BO''
      AND    a.business_object_id = object_id_
      AND    a.replication_group  = repl_group_
      AND    a.rowstate           = ''Transferred''
--      AND    a.rowstate           = ''Processing''
      ORDER BY a.seq_no;
BEGIN
   IF ( NVL(send_warning_str_,''FALSE'')  = ''FALSE'' ) THEN
      send_warning_    := TRUE;
   END IF;
   IF ( NVL(send_info_str_,''FALSE'')  = ''FALSE'' ) THEN
      send_info_       := TRUE;
   END IF;
   IF ( NVL(receive_warning_str_,''FALSE'')  = ''FALSE'' ) THEN
      receive_warning_ := TRUE;
   END IF;
   IF ( NVL(receive_info_str_,''FALSE'')  = ''FALSE'' ) THEN
      receive_info_    := TRUE;
   END IF;
   FOR c1 IN c_group (business_object_id_) LOOP 
      FOR c2 IN c_receiver (c1.replication_group) LOOP
         message_id_ := 0;
         FOR c3 IN c_queue (business_object_id_, c1.replication_group) LOOP
            IF ( message_id_ = 0 ) THEN
               --
               -- Create Connectivity message head
               -- --------------------------------
               message_id_ := Create_Head___(c2.receiver, c1.replication_group, business_object_id_,
                                             send_warning_, send_info_, receive_warning_, receive_info_);
               --
               <<<ROWID_NULL>>>
               --
               -- Create Connectivity message line 1 (business object data)
               -- ---------------------------------------------------------
               IF ( c3.lu_name = ''<<<MASTER_LU>>>'' ) THEN
                  bo_operation_ := c3.operation;
               ELSE
                  bo_operation_ := ''MODIFY'';
               END IF;
               Create_Business_Object___(message_id_, 1, c2.receiver, c1.replication_group,
                                         business_object_id_, bo_operation_,
                                         send_warning_, send_info_, receive_warning_, receive_info_);
            END IF;
            --
            -- Create Connectivity message lines with attribute group (LU) data
            -- ----------------------------------------------------------------
            <<<CALL_MESSAGE_LINES>>>
         END LOOP;
         --
         -- Release Connectivity message
         -- ----------------------------
		 IF ( message_id_ > 0 ) THEN
            Connectivity_SYS.Release_Message(message_id_);
		 END IF;
      END LOOP; 
      FOR c4 IN c_queue (business_object_id_, c1.replication_group) LOOP
         --
         -- Change state on processed records
         -- ---------------------------------
         UPDATE replication_queue_tab a
         SET    a.rowstate   = ''Replicated'',
                a.rowversion = sysdate
         WHERE  a.rowid = c4.rowid;
      END LOOP;
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      sql_error_ := sqlerrm;
      Replication_Log_API.Create_Log__('''||CHR(38)||'BO'', '''||CHR(38)||'PKG'', NULL, NULL, message_id_, message_line_,
                                       ''REPL04: '||CHR(38)||'PKG..Create_Message'', sql_error_, ''SEND'', ''ERROR'',
                                       send_warning_, send_info_, receive_warning_, receive_info_);
--      Replication_Statistics_API.Create_Statistics('''||CHR(38)||'BO'', '''||CHR(38)||'BO'', errors_on_send_ => 1);
      Error_SYS.Appl_General(lu_name_ || ''.Create_Message'', sql_error_);      
END Create_Message;
--
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;
--
END '||CHR(38)||'PKG;
'||CHR(47)||'
SHOW ERROR
-----------------------------------------------------------------------------';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ExportPORepository';
   rec_.description  := 'Main template for Export of Presentation Object Repository';
   rec_.rowkey       := '7E7F99E14F074FF5B83DA7A4C5345550';
   rec_.template     := 
'----------------------------------------------------------------------------
-- Exported by: IFS Foundation1
-- Component:   <<<MODULE>>>
-- Date:        <<<SYSDATE>>>
-- Description: This file is automatically generated by the Scan Tool.
--              Do not modify this file manually!
--              Instead, modify the repository and perform the export again.
----------------------------------------------------------------------------
--
-- Reset Repository 
--

BEGIN
   Pres_Object_Util_API.Reset_Repository(''<<<MODULE>>>'', ''Auto''<<<LAYER_ID>>>);
   COMMIT;
END;
'||CHR(47)||'
';

   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ExportPO';
   rec_.description  := 'Template for Export of one Presentation Object';
   rec_.rowkey       := '7CD444DB72844363B7A7F6CE7CB52466';
   rec_.template     := 
'--
-- PresObject <<<PO_ID>>> 
--
BEGIN
   Security_SYS.New_Pres_Object(''<<<PO_ID>>>'', ''<<<MODULE>>>'', ''<<<PO_TYPE>>>'', <<<UNICODE_START>>>''<<<PO_ID_DESCR>>>''<<<UNICODE_END>>>, ''<<<PO_INFO_TYPE>>>''<<<PO_ALLOW_READ_ONLY>>><<<PO_LAYER_ID>>>);';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ExportPOEnd';
   rec_.description  := 'Template for Export of one Presentation Object';
   rec_.rowkey       := '427C0F18C5324E57A3ECD7D67E01DCFF';
   rec_.template     := 
'   COMMIT;
END;
'||CHR(47)||'
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ExportPOSecurity';
   rec_.description  := 'Template for Export of Presentation Object Security';
   rec_.rowkey       := 'A6BDA7B173FE43999728D8E68AD4DD13';
   rec_.template     := 
'   Security_SYS.New_Pres_Object_Sec(''<<<PO_ID>>>'', ''<<<SEC_OBJECT>>>'', ''<<<SEC_OBJECT_TYPE>>>'', ''<<<SEC_SUB_TYPE>>>'', ''<<<SEC_INFO_TYPE>>>'');';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ExportPODependency';
   rec_.description  := 'Template for Export of Presentation Object Dependency';
   rec_.rowkey       := 'BDF17C2D105E4E13A5D4233C1283ECB2';
   rec_.template     := 
'   Security_SYS.New_Pres_Object_Dependency(''<<<PO_ID>>>'', ''<<<MODULE>>>'', ''<<<TO_PO_ID>>>'', ''<<<PRES_OBJECT_DEP_TYPE>>>'', ''<<<DEP_INFO_TYPE>>>'');';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'ExportPODynDep';
   rec_.description  := 'Template for Export of Presentation Object Dynamic Dependency';
   rec_.rowkey       := '1DE77AFB1C254742B01A19BD9930AEDD';
   rec_.template     := 
'--
-- Dynamic dependencies 
--
BEGIN';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'RecUpdateTrackingTrigger';
   rec_.description  := 'Template for record change tracking trigger';
   rec_.rowkey       := '35891F64E10B43C5BAAC05AC5CF25B1B';
   rec_.template     := 
'
   CREATE OR REPLACE TRIGGER <<<TRIGGER_NAME>>>
   AFTER UPDATE ON <<<TABLE_NAME>>>
   FOR EACH ROW
DECLARE
   old_values           ClOB;
   new_values           CLOB;
   col_change_count     PLS_INTEGER := 0;
   changed_col_names    Message_SYS.name_table;

BEGIN
   IF Fnd_Obj_Tracking_Sys.Is_Subscribed_Object(:NEW.ROWKEY) AND Fnd_Obj_Tracking_SYS.Is_Lu_Tracked(''<<<LU_NAME>>>'') THEN
   
      old_values := Message_SYS.Construct_Clob_Message(''OLD_VALUES'');
      new_values := Message_SYS.Construct_Clob_Message(''NEW_VALUES'');
   <<<COL_CHECK_BEGIN>>>
      IF (:NEW.<<<COLUMN_NAME>>> != :OLD.<<<COLUMN_NAME>>>) OR
         ((:NEW.<<<COLUMN_NAME>>> IS NULL) AND (:OLD.<<<COLUMN_NAME>>> IS NOT NULL)) OR
         ((:NEW.<<<COLUMN_NAME>>> IS NOT NULL) AND (:OLD.<<<COLUMN_NAME>>> IS NULL)) THEN
         Message_SYS.Add_Attribute(old_values, ''<<<COLUMN_NAME>>>'', :OLD.<<<COLUMN_NAME>>>);
         Message_SYS.Add_Attribute(new_values, ''<<<COLUMN_NAME>>>'', :NEW.<<<COLUMN_NAME>>>);
         col_change_count := col_change_count + 1;
         changed_col_names(col_change_count) := ''<<<COLUMN_NAME>>>'';
      END IF;
   <<<COL_CHECK_END>>>   
      IF (col_change_count > 0) AND Fnd_Obj_Tracking_Sys.Are_Changes_Subscribed_To(changed_col_names,''<<<LU_NAME>>>'') THEN
         Fnd_Obj_Tracking_Sys.Post_Object_Changes(''U'',''<<<LU_NAME>>>'',''<<<VIEW_NAME>>>'',''<<<TABLE_NAME>>>'',
                                                  :NEW.ROWKEY,old_values,new_values,''<<<TRK_QUEUE_NAME>>>'');
      END IF;
   END IF;
END;
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'RecDeleteTrackingTrigger';
   rec_.description  := 'Template for record deletes tracking trigger';
   rec_.rowkey       := 'D83D947ADCF7488B8C455F35C827D1C5';
   rec_.template     := 
'
   CREATE OR REPLACE TRIGGER <<<TRIGGER_NAME>>>
   AFTER DELETE ON <<<TABLE_NAME>>>
   FOR EACH ROW
DECLARE
BEGIN
   IF Fnd_Obj_Tracking_Sys.Is_Subscribed_Object(:OLD.ROWKEY) AND Fnd_Obj_Tracking_SYS.Is_Lu_Tracked(''<<<LU_NAME>>>'') THEN
      Fnd_Obj_Tracking_Sys.Post_Object_Changes(''D'',''<<<LU_NAME>>>'',''<<<VIEW_NAME>>>'',''<<<TABLE_NAME>>>'',
                                               :OLD.ROWKEY,NULL,NULL,''<<<TRK_QUEUE_NAME>>>'');
   END IF;
END;
';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/

DECLARE
   rec_ Fnd_Code_Template_TAB%ROWTYPE;
BEGIN
   rec_.template_id  := 'AureanCustomPage_List';
   rec_.description  := 'Template for Aurean CustomPage With List';
   rec_.template     := '{"name":"<<<CP_NAME>>>","component": "<<<CP_COMPONENT>>>","version":"[#[generate:version]#]","id":"ClientMetadata.client:<<<CP_NAME>>>","projection":[#[reference:projection:<<<CP_PROJECTION>>>]#],"layout":{"commands": {[#[jsonnamedcontent:kind:command]#]},"groups": {[#[jsonnamedcontent:kind:group]#]},"lists": {[#[jsonnamedcontent:kind:list]#]},"pages": {[#[jsonnamedcontent:kind:page]#]},"selectors": {[#[jsonnamedcontent:kind:selector]#]}}}';
   rec_.rowversion   := sysdate;
   Fnd_Code_Template_API.Register(rec_);
END;
/
COMMIT
/
