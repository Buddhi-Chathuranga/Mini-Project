-----------------------------------------------------------------------------
--
--  Logical unit: HistoryLog
--
--  File:         HistoryLog.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  280305  Bamalk Created.
--  040805  Mesalk Added support for raw data view creation. (Bug id #44975)
--  051028  MAOL  Removed QRP's (F1PR467).
--  100715  ChMu  Certified the assert safe for dynamic SQLs (Bug#84970)
--  110503  CHAA  EASTONE-16468 : Remove report layout definitions from RDF
--  110804  ChMu  Changed column comments of new_value and old_value (Bug#95022)
-----------------------------------------------------------------------------

DEFINE MODULE         = FNDBAS
DEFINE LU             = HistoryLog
DEFINE PKG            = HISTORY_LOG_RPI

DEFINE TABLE          = INFO_SERVICES_RPT
DEFINE RAWVIEW        = INFO_SERVICES_RPV
DEFINE VIEW           = HISTORY_LOG_REP
DEFINE METHOD         = Report_Overview

DEFINE LOG_ID         = n1
DEFINE COMPONENT      = s1
DEFINE LOGICAL_UNIT   = s2
DEFINE TABLE_NAME     = s3
DEFINE TIME_STAMP     = d1
DEFINE KEYS           = s4
DEFINE USERNAME       = s5
DEFINE HISTORY_TYPE   = s6
DEFINE NOTE           = s7
DEFINE COLUMN_NAME    = s8
DEFINE OLD_VALUE      = s9
DEFINE NEW_VALUE      = s10


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR


-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                               result_key,
       ROW_NO                                   row_no,
       &log_id                                  log_id,
       &component                               module,
       &logical_unit                            lu_name,
       &table_name                              table_name,
       &time_stamp                              time_stamp,
       &keys                                    keys,
       &username                                username,
       &history_type                            history_type,
       &note                                    note,
       &column_name                             column_name,
       &old_value                               old_value,
       &new_value                               new_value
FROM  &RAWVIEW
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..log_id IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Log Id^TITLE=Log Id :^ITEM_NAME=iLogId^';
COMMENT ON COLUMN &VIEW..module IS
   'FLAGS=A----^DATATYPE=STRING(6)/UPPERCASE^PROMPT=Module^TITLE=Module :^ITEM_NAME=iModule^REF=MODULE^QFLAGS=MC---^QUERY=Module:';
COMMENT ON COLUMN &VIEW..lu_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=LU Name^TITLE=LU Name :^ITEM_NAME=iLuName^QFLAGS=OW--L^QUERY=LU Name:^REF=MODULE_LU_LOV(MODULE)';
COMMENT ON COLUMN &VIEW..table_name IS
   'FLAGS=A----^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Table Name^TITLE=Table Name :^ITEM_NAME=iTableName^QFLAGS=OW--L^QUERY=Table Name:';
COMMENT ON COLUMN &VIEW..time_stamp IS
   'FLAGS=A----^DATATYPE=DATE/DATE^PROMPT=Time Stamp^TITLE=Time :^ITEM_NAME=iTimeStamp^QFLAGS=OW-BL^QUERY=Log Date:';
COMMENT ON COLUMN &VIEW..keys IS
   'FLAGS=A----^DATATYPE=STRING(600)^PROMPT=Keys^TITLE=Keys :^ITEM_NAME=iKeys^';
COMMENT ON COLUMN &VIEW..username IS
   'FLAGS=A----^DATATYPE=STRING(230)/UPPERCASE^PROMPT=User Name^TITLE=User :^ITEM_NAME=iUsername^REF=FndUser^QFLAGS=----L^QUERY=User Name:';
COMMENT ON COLUMN &VIEW..history_type IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=History Type^TITLE=History Type :^ITEM_NAME=iHistoryType^QFLAGS=----L^QUERY=History Type:^ENUMERATE=HISTORY_TYPE_API.Enumerate';
COMMENT ON COLUMN &VIEW..note IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Note^TITLE=Note :^ITEM_NAME=iNote^';
COMMENT ON COLUMN &VIEW..column_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Column Name^TITLE=Column Name^ITEM_NAME=iColumnName^';
COMMENT ON COLUMN &VIEW..old_value IS
   'FLAGS=A----^DATATYPE=STRING(4000)^PROMPT=Old Value^TITLE=Old Value^ITEM_NAME=iOldValue^';
COMMENT ON COLUMN &VIEW..new_value IS
   'FLAGS=A----^DATATYPE=STRING(4000)^PROMPT=New Value^TITLE=New Value^ITEM_NAME=iNewValue^';


BEGIN
   Report_SYS.Define_Report_('&VIEW', '&MODULE', '&LU', 'History Log Report', '&TABLE', '&PKG..&METHOD', 7,'','','','PLSQL1.2','TRUE','Administration','Logs');
   Report_SYS.Define_Report_Text_( '&VIEW', 'txLogDate', 'Log Date:' );
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   TYPE log_cur_type IS REF CURSOR;
   log_cur_          log_cur_type;
   log_cur_detail_   log_cur_type;
   result_key_       NUMBER;
   row_no_           NUMBER := 1;
   parent_row_no_    NUMBER := 0;
   log_id_           history_log_admin.log_id%TYPE;
   module_           history_log_admin.module%TYPE;
   lu_name_          history_log_admin.lu_name%TYPE;
   table_name_       history_log_admin.table_name%TYPE;
   time_stamp_       history_log_admin.time_stamp%TYPE;
   keys_             history_log_admin.keys%TYPE;
   username_         history_log_admin.username%TYPE;
   history_type_     history_log_admin.history_type%TYPE;
   note_             history_log_admin.note%TYPE;
   column_name_      history_log_attribute.column_name%TYPE;
   old_value_        history_log_attribute.old_value%TYPE;
   new_value_        history_log_attribute.new_value%TYPE; 
   stmt_             VARCHAR2(2000);
   stmt_detail_      VARCHAR2(2000);
   where_stmt_       VARCHAR2(1700);
   v_log_id_         NUMBER;
   local_param_attr_ VARCHAR2(2000) := parameter_attr_;
   do_xml_           BOOLEAN        := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_            BOOLEAN        := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_              CLOB;
   package_name_     VARCHAR2(100)  := 'HISTORY_LOG_REP';

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   username_ := Client_SYS.Get_Item_Value('USERNAME', parameter_attr_);
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'HISTORY_LOGS');
   END IF;
    
   stmt_ := 'SELECT log_id, module, lu_name, table_name, time_stamp, keys, '||
            'username, history_type, note '||
            'FROM history_log_admin ';
                  
   where_stmt_ := Report_SYS.Parse_Where_Expression(local_param_attr_);        

   IF INSTR(where_stmt_,'TIME_STAMP') > 0 THEN
      where_stmt_ := REPLACE(where_stmt_,'TIME_STAMP', 'to_char(TIME_STAMP,''yyyy-mm-dd'')');
   END IF;

   IF INSTR(where_stmt_,'SYSDATE') > 0 THEN
      where_stmt_ := REPLACE(where_stmt_,'''SYSDATE''', 'to_char(SYSDATE,''yyyy-mm-dd'')');
   END IF;

   IF where_stmt_ IS NOT NULL THEN
      stmt_ := stmt_ || ' WHERE ' || where_stmt_ || ' ORDER BY log_id, module, lu_name, table_name ';
   END IF;
   
   -- safe due to Report_SYS.Parse_Where_Expression
   -- ifs_assert_safe chmulk 20100715
   OPEN log_cur_ FOR stmt_;
   LOOP
      FETCH log_cur_ INTO log_id_, module_, lu_name_, table_name_, time_stamp_, keys_,
                          username_, history_type_, note_;           
         
      EXIT WHEN log_cur_%NOTFOUND;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'HISTORY_LOG');           
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOG_ID', log_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'MODULE', module_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LU_NAME', lu_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TABLE_NAME', table_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TIME_STAMP', time_stamp_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'KEYS', REPLACE(keys_,'^','    '));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USERNAME', username_ ||' - '||substr(Fnd_User_API.Get_Description(username_),1,200));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'HISTORY_TYPE', history_type_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NOTE', note_);
      END IF;

      v_log_id_  := log_id_;     
      stmt_detail_ := 'SELECT column_name, old_value, new_value '||
                      'FROM history_log_attribute '||
                      'WHERE log_id = '||v_log_id_ ;
      IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'HISTORY_LOG_ATTRIBUTES');
      END IF;
      
      -- ifs_assert_safe chmulk 20100715
      OPEN log_cur_detail_ FOR stmt_detail_ ;
      LOOP

         FETCH log_cur_detail_ INTO  column_name_, old_value_, new_value_; 
         EXIT WHEN log_cur_detail_%NOTFOUND;

         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'HISTORY_LOG_ATTRIBUTE');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_NAME', column_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OLD_VALUE', old_value_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NEW_VALUE', new_value_);
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE (
                  result_key, 
                  row_no, 
                  parent_row_no, 
                  &log_id,
                  &component, 
                  &logical_unit, 
                  &table_name,
                  &time_stamp, 
                  &keys, 
                  &username,
                  &history_type, 
                  &note,
                  &column_name,
                  &old_value,
                  &new_value) 
            VALUES (
                  result_key_, 
                  row_no_, 
                  parent_row_no_, 
                  log_id_,
                  module_, 
                  lu_name_, 
                  table_name_,
                  time_stamp_, 
                  REPLACE(keys_,'^','    '), 
                  username_ ||' - '||substr(Fnd_User_API.Get_Description(username_),1,200),
                  history_type_, 
                  note_,
                  column_name_,
                  old_value_,
                  new_value_);   
            row_no_ := row_no_ + 1;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'HISTORY_LOG_ATTRIBUTE');
         END IF;
      END LOOP;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'HISTORY_LOG_ATTRIBUTES');
         Xml_Record_Writer_SYS.End_Element(xml_, 'HISTORY_LOG');
      END IF;
   END LOOP;

IF (do_xml_) THEN
   Xml_Record_Writer_SYS.End_Element(xml_, 'HISTORY_LOGS');
END IF;

IF (do_xml_) THEN
   Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
   Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
END IF;

END &METHOD;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE RAWVIEW
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE LOG_ID
UNDEFINE COMPONENT
UNDEFINE LOGICAL_UNIT
UNDEFINE TABLE_NAME
UNDEFINE TIME_STAMP
UNDEFINE KEYS
UNDEFINE USERNAME
UNDEFINE HISTORY_TYPE
UNDEFINE NOTE
UNDEFINE COLUMN_NAME
UNDEFINE OLD_VALUE
UNDEFINE NEW_VALUE
