-----------------------------------------------------------------------------
--
--  Logical unit: FunctionalAreaConflict
--
--  File:         FunctionalAreaConflictRep.RDF
--  Version:      Foundation1 2.2
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  070111  HAMALK  Bug 62802 Created for Functional Area Conflicts
--  070405  CHAALK  Bug 64242 Removed Report_SYS.Refresh_RPV_View
--  091217  DUWILK  Bug 85492 Add parameters User, Functional Area,Conflict Type.   
--  100108  AJPELK EAST-20 commented out XSL layout(s)
--  110503  CHAA  EASTONE-16468 : Remove report layout definitions from RDF
--  130208  SRSOLK  Bug 108234 Add CONFLICT_TYPE DB value check for count. 
-----------------------------------------------------------------------------

define MODULE             = FNDBAS
define LU                 = FunctionalAreaConflict
define PKG                = FUNCTIONAL_AREA_CONFLICT_RPI
define TABLE              = INFO_SERVICES_RPT
define RAWVIEW            = INFO_SERVICES_RPV
define VIEW               = FUNCTIONAL_AREA_CONFLICT_REP
define METHOD             = Report_Overview

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Refreshing RPV view &RAWVIEW

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                        RESULT_KEY,
       ROW_NO                            ROW_NO,
       s1                                USERID,
       s2                                FUNCTIONAL_AREA_ID,
       s3                                CONFLICT_AREA_ID,
       s4                                CONFLICT_TYPE,
       s5                                CONFLICT_TYPE_IMAGE,
       n1                                WARNING_COUNT,
       n2                                NOT_ALLOWED_COUNT,
       n3					             CONFLICT_COUNT,
       n4                                USER_COUNT,
       n5                                FUNCTIONAL_AREA_COUNT, 
       n6                                CONFLICT_AREA_COUNT,
       n7                                CONFLICT_TYPE_COUNT
FROM  &RAWVIEW
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';
COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..USERID IS
   'FLAGS=A----^DATATYPE=STRING(120)^PROMPT=UserId^QUERY=User^QFLAGS=----L^TITLE=User ID^ITEM_NAME=iUserId^REF=FndUser^';
COMMENT ON COLUMN &VIEW..FUNCTIONAL_AREA_ID IS
   'FLAGS=A----^DATATYPE=STRING(120)^PROMPT=FunctionalAreaId^QUERY=Functional Area^QFLAGS=----L^TITLE=FunctionalAreaId^ITEM_NAME=iFunctionalAreaId^REF=SoxFunctionalArea^';
COMMENT ON COLUMN &VIEW..CONFLICT_AREA_ID IS
   'FLAGS=A----^DATATYPE=STRING(120)^PROMPT=ConflictAreaId^TITLE=ConflictAreaId^ITEM_NAME=iConflictAreaId^';
COMMENT ON COLUMN &VIEW..CONFLICT_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(400)^PROMPT=ConflictType^QUERY=Conflict Type^QFLAGS=----L^TITLE=Conflict Type^ITEM_NAME=iConflictType^';
COMMENT ON COLUMN &VIEW..WARNING_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=WarningCount^TITLE=Number of Warnings^ITEM_NAME=iWarningCount^';
COMMENT ON COLUMN &VIEW..NOT_ALLOWED_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=NotAllowedCount^TITLE=Number of NotAllowed Conflicts^ITEM_NAME=iNotAllowedCount^';
COMMENT ON COLUMN &VIEW..CONFLICT_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=ConflictCount^TITLE=Conflicts Count^ITEM_NAME=iConflictCount^';
COMMENT ON COLUMN &VIEW..USER_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=UserCount^TITLE=Number of Users with Conflicts :^ITEM_NAME=iUserCount^';
COMMENT ON COLUMN &VIEW..FUNCTIONAL_AREA_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=FunctionalAreaCount^TITLE=Number of Functional Areas with Conflicts :^ITEM_NAME=iFunctionalAreaCount^';
COMMENT ON COLUMN &VIEW..CONFLICT_AREA_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=ConflictAreaCount^TITLE=Number of Conflict Areas with Conflicts :^ITEM_NAME=iConflictAreaCount^';
COMMENT ON COLUMN &VIEW..CONFLICT_TYPE_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=ConflictTypeCount^TITLE=Number of Conflict Types :^ITEM_NAME=iConflictTypeCount^';


BEGIN
Report_SYS.Define_Report_(
      '&VIEW',
      '&MODULE',
      '&LU', 
      'Functional Area Conflict',
      '&TABLE',
      '&PKG..&METHOD',
      7,
      '',
      '',
      '',
      'PLSQL1.2',
      'TRUE',
     'Administration',
     'Installation');


    Report_SYS.Define_Report_Text_( '&VIEW', 'txSummary', 
      'Summary' );
    Report_SYS.Define_Report_Text_( '&VIEW', 'txDetails', 
      'Details' );
    Report_SYS.Define_Report_Text_( '&VIEW', 'txDescription', 
      'Conflict Description' );

Report_SYS.Refresh_('&VIEW');
END;
/



-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2)
IS
   result_key_         NUMBER;
   xml_                CLOB;
   package_name_       VARCHAR2(100) := 'FUNCTIONAL_AREA_CONFLICT_REP';
   current_user_       VARCHAR2(100) := ' ';
   warning_count_      NUMBER;
   notallowed_count_   NUMBER;
   conflicts_exists_   BOOLEAN := FALSE;
   user_id_            VARCHAR2(30);
   functional_area_id_ VARCHAR2(50);
   conflict_type_   VARCHAR2(20);


----------------------------------------------------------------------------------------------------

CURSOR get_conflicts IS
SELECT  userid, functional_area_id, conflict_area_id, conflict_type, conflict_type_db
   FROM user_functional_area_conflicts
   WHERE Report_SYS.Parse_Parameter(userid, user_id_) = 'TRUE'
         AND Report_SYS.Parse_Parameter(functional_area_id, functional_area_id_) = 'TRUE'
         AND Report_SYS.Parse_Parameter(conflict_type, conflict_type_) = 'TRUE'
   ORDER BY userid;

CURSOR get_counts IS
SELECT  count(distinct userid) UsersWithConflicts, count(distinct functional_area_id) FunctionalAreas, 
        count(distinct conflict_area_id) ConflictAreas, count(distinct conflict_type) ConflictTypes
   FROM user_functional_area_conflicts;

---------------------------------------------------------------------------------------------------

BEGIN
	General_Sys.Init_Method(lu_name_, '&PKG', 'Report_Overview');
   
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   user_id_ := Client_SYS.Get_Item_Value('USERID', parameter_attr_);
   functional_area_id_ := Client_SYS.Get_Item_Value('FUNCTIONAL_AREA_ID', parameter_attr_);
   conflict_type_ := Client_SYS.Get_Item_Value('CONFLICT_TYPE', parameter_attr_);


   Xml_Record_Writer_SYS.Create_Report_Header(xml_,'FUNCTIONAL_AREA_CONFLICT_REP',package_name_);
   
   FOR count_ IN get_counts LOOP
      Xml_Record_Writer_SYS.Add_Element(xml_,'USER_COUNT', count_.UsersWithConflicts);
      Xml_Record_Writer_SYS.Add_Element(xml_,'FUNCTIONAL_AREA_COUNT', count_.FunctionalAreas);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONFLICT_AREA_COUNT', count_.ConflictAreas);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONFLICT_TYPE_COUNT', count_.ConflictTypes);
   END LOOP;
   
   Xml_Record_Writer_SYS.Start_Element(xml_, 'CONFLICT_USERS');
   
   FOR conflict_ IN get_conflicts LOOP
      
      conflicts_exists_ := TRUE;
      
      IF (current_user_ != conflict_.USERID) THEN -- If this is a "new" user
         
         IF (current_user_ != ' ') THEN            
            Xml_Record_Writer_SYS.End_Element(xml_, 'CONFLICTS');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WARNING_COUNT', warning_count_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NOT_ALLOWED_COUNT', notallowed_count_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFLICT_COUNT', warning_count_ + notallowed_count_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'CONFLICT_USER');            
         END IF;
         
         warning_count_ := 0;
         notallowed_count_ := 0;
         
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CONFLICT_USER');
   	 Xml_Record_Writer_SYS.Add_Element(xml_,'USERID', conflict_.USERID);
         
         current_user_ := conflict_.USERID;
         
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CONFLICTS');
      END IF;
      
      Xml_Record_Writer_SYS.Start_Element(xml_, 'CONFLICT');
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONFLICT_TYPE', conflict_.CONFLICT_TYPE);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONFLICT_AREA_ID', conflict_.CONFLICT_AREA_ID);
      Xml_Record_Writer_SYS.Add_Element(xml_,'FUNCTIONAL_AREA_ID', conflict_.FUNCTIONAL_AREA_ID);
      Xml_Record_Writer_SYS.End_Element(xml_, 'CONFLICT');
      
	  IF (conflict_.conflict_type_db = 'WARNING') THEN
         warning_count_ := warning_count_ + 1;
      END IF;
      
      IF (conflict_.conflict_type_db = 'NOTALLOWED') THEN
         notallowed_count_ := notallowed_count_ + 1;
      END IF;
   
   END LOOP;
   
   -- Close everything up properly
   IF (conflicts_exists_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'CONFLICTS');
      Xml_Record_Writer_SYS.Add_Element(xml_,'WARNING_COUNT', warning_count_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'NOT_ALLOWED_COUNT', notallowed_count_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFLICT_COUNT', warning_count_ + notallowed_count_);
      Xml_Record_Writer_SYS.End_Element(xml_, 'CONFLICT_USER');
   END IF;
   Xml_Record_Writer_SYS.End_Element(xml_, 'CONFLICT_USERS');
   Xml_Record_Writer_SYS.End_Element(xml_,'FUNCTIONAL_AREA_CONFLICT_REP');
   Report_SYS.Finish_Xml_Report('FUNCTIONAL_AREA_CONFLICT_REP',result_key_,xml_);

END &METHOD;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE RAWVIEW
UNDEFINE VIEW
UNDEFINE METHOD
