-----------------------------------------------------------------------------
--
--  Logical unit: LicenseMetric
--
--  Report:       LicenseMetric
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating LICENSE_METRIC_RPI specification

CREATE OR REPLACE PACKAGE LICENSE_METRIC_RPI AS

module_ CONSTANT VARCHAR2(6) := 'FNDBAS';
lu_name_ CONSTANT VARCHAR2(25) := 'LicenseMetric';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test
   RETURN NUMBER;

PROCEDURE Init;

END LICENSE_METRIC_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table LICENSE_METRIC_RPT

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LICENSE_METRIC_RPT';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMER_ID', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMER_NAME', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'INSTALLATION_ID', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TAKEN_AT', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'METRIC', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LICENSE_METRIC_RPT';
   index_name_ VARCHAR2(30) := 'LICENSE_METRIC_RPK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view LICENSE_METRIC_REP

CREATE OR REPLACE VIEW LICENSE_METRIC_REP AS
SELECT RESULT_KEY, ROW_NO, PARENT_ROW_NO, ROWVERSION
   ,CUSTOMER_ID,CUSTOMER_NAME,INSTALLATION_ID,TAKEN_AT,METRIC,DESCRIPTION,VALUE
FROM   LICENSE_METRIC_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE LICENSE_METRIC_REP
   IS 'LU=LicenseMetric^PROMPT=License Metric^MODULE=FNDBAS^TITLETEXT=License Metric^';

COMMENT ON COLUMN LICENSE_METRIC_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN LICENSE_METRIC_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN LICENSE_METRIC_REP.customer_id
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Id^';
COMMENT ON COLUMN LICENSE_METRIC_REP.customer_name
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Name^';
COMMENT ON COLUMN LICENSE_METRIC_REP.installation_id
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Installation Id^';
COMMENT ON COLUMN LICENSE_METRIC_REP.taken_at
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Taken At^';
COMMENT ON COLUMN LICENSE_METRIC_REP.metric
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Metric^';
COMMENT ON COLUMN LICENSE_METRIC_REP.description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^';
COMMENT ON COLUMN LICENSE_METRIC_REP.value
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Value^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('LICENSE_METRIC_REP', 'FNDBAS', 'LicenseMetric', 'License Metric', 'LICENSE_METRIC_RPT', 'LICENSE_METRIC_RPI.Execute_Report', 780);
   Report_SYS.Define_Report_Text_('LICENSE_METRIC_REP', 'LICENSE_MET', 'License Metrics As At');
   Report_SYS.Refresh_('LICENSE_METRIC_REP');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('LICENSE_METRIC_REP');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating LICENSE_METRIC_RPI implementation

CREATE OR REPLACE PACKAGE BODY LICENSE_METRIC_RPI IS

   CURSOR get_company_registration IS
      select
       max(case when Parameter = 'CUSTOMER_ID' then value end) CUSTOMER_ID,
       max(case when Parameter = 'CUSTOMER_NAME' then value end) CUSTOMER_NAME,
       max(case when Parameter = 'INSTALLATION_ID' then value end) INSTALLATION_ID
      from  fnd_license;

   CURSOR get_taken_at IS
      select max(taken_at) Taken_At from FND_LICENSE_METRIC_RESULT t;

   CURSOR get_fnd_license_metric_result IS
      select r.metric,m.description, REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(r.value,chr(31),'='), chr(30), ',' || chr(10)), ','||chr(10)||'$' , '') as value
      from FND_LICENSE_METRIC_RESULT r, fnd_license_metric m
      where r.metric = m.metric and r.taken_at = ( 
      select max(t.taken_at) Taken_At
      FROM FND_LICENSE_METRIC_RESULT t )
      order by m.type;

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   rec_company_registration_  IN get_company_registration%ROWTYPE DEFAULT NULL,
   rec_taken_at_              IN get_taken_at%ROWTYPE DEFAULT NULL,
   rec_fnd_license_metric_result_ IN get_fnd_license_metric_result%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO LICENSE_METRIC_RPT (
      result_key,
      customer_id,
      customer_name,
      installation_id,
      taken_at,
      metric,
      description,
      value,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      rec_company_registration_.customer_id,
      rec_company_registration_.customer_name,
      rec_company_registration_.installation_id,
      rec_taken_at_.taken_at,
      rec_fnd_license_metric_result_.metric,
      rec_fnd_license_metric_result_.description,
      rec_fnd_license_metric_result_.value,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_company_registration_ BOOLEAN;
   rec_company_registration_ get_company_registration%ROWTYPE;
   has_taken_at_ BOOLEAN;
   rec_taken_at_ get_taken_at%ROWTYPE;
   has_fnd_license_metric_result_ BOOLEAN;
   rec_fnd_license_metric_result_ get_fnd_license_metric_result%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, 'LICENSE_METRIC_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'LICENSE_METRIC_REP', 'License Metric');

   has_company_registration_ := FALSE;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'COMPANY_REGISTRATIONS1');
   OPEN get_company_registration;
   LOOP
      FETCH get_company_registration INTO rec_company_registration_;
      has_company_registration_ := get_company_registration%FOUND OR get_company_registration%ROWCOUNT > 0;
      EXIT WHEN get_company_registration%NOTFOUND;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'COMPANY_REGISTRATION');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CUSTOMER_ID', rec_company_registration_.customer_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CUSTOMER_NAME', rec_company_registration_.customer_name);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'INSTALLATION_ID', rec_company_registration_.installation_id);
      has_taken_at_ := FALSE;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'TAKEN_TIMES1');
      OPEN get_taken_at;
      LOOP
         FETCH get_taken_at INTO rec_taken_at_;
         has_taken_at_ := get_taken_at%FOUND OR get_taken_at%ROWCOUNT > 0;
         EXIT WHEN get_taken_at%NOTFOUND;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'TAKEN_AT');
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAKEN_AT', rec_taken_at_.taken_at);
         has_fnd_license_metric_result_ := FALSE;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'FND_LICENSE_METRIC_RESULTS1');
         OPEN get_fnd_license_metric_result;
         LOOP
            FETCH get_fnd_license_metric_result INTO rec_fnd_license_metric_result_;
            has_fnd_license_metric_result_ := get_fnd_license_metric_result%FOUND OR get_fnd_license_metric_result%ROWCOUNT > 0;
            EXIT WHEN get_fnd_license_metric_result%NOTFOUND;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'FND_LICENSE_METRIC_RESULT');
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'METRIC', rec_fnd_license_metric_result_.metric);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'DESCRIPTION', rec_fnd_license_metric_result_.description);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'VALUE', rec_fnd_license_metric_result_.value);
            Xml_Record_Writer_SYS.End_Element(xml$_, 'FND_LICENSE_METRIC_RESULT');
            Add_Result_Row___(result_key$_,
                              rec_company_registration_ => rec_company_registration_,
                              rec_taken_at_ => rec_taken_at_,
                              rec_fnd_license_metric_result_ => rec_fnd_license_metric_result_,
                              row_no$_ => row_no$_);
         END LOOP;
         CLOSE get_fnd_license_metric_result;
         Xml_Record_Writer_SYS.End_Element(xml$_, 'FND_LICENSE_METRIC_RESULTS1');
         IF NOT has_fnd_license_metric_result_ THEN
            Add_Result_Row___(result_key$_,
                              rec_company_registration_ => rec_company_registration_,
                              rec_taken_at_ => rec_taken_at_,
                              row_no$_ => row_no$_);
         END IF;

         Xml_Record_Writer_SYS.End_Element(xml$_, 'TAKEN_AT');
         EXIT;
      END LOOP;
      CLOSE get_taken_at;
      Xml_Record_Writer_SYS.End_Element(xml$_, 'TAKEN_TIMES1');
      IF NOT has_taken_at_ THEN
         Add_Result_Row___(result_key$_,
                           rec_company_registration_ => rec_company_registration_,
                           row_no$_ => row_no$_);
      END IF;

      Xml_Record_Writer_SYS.End_Element(xml$_, 'COMPANY_REGISTRATION');
      EXIT;
   END LOOP;
   CLOSE get_company_registration;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'COMPANY_REGISTRATIONS1');
   IF NOT has_company_registration_ THEN
      Add_Result_Row___(result_key$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'LICENSE_METRIC_REP');
   Report_SYS.Finish_Xml_Report('LICENSE_METRIC_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_company_registration%ISOPEN THEN
            CLOSE get_company_registration;
         END IF;
         IF get_taken_at%ISOPEN THEN
            CLOSE get_taken_at;
         END IF;
         IF get_fnd_license_metric_result%ISOPEN THEN
            CLOSE get_fnd_license_metric_result;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'LICENSE_METRIC_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END LICENSE_METRIC_RPI;
/
SHOW ERROR