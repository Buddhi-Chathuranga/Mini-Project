-----------------------------------------------------------------------------
--
--  Logical unit: ConnectTestRep
--
--  Report:       ConnectTest
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating CONNECT_TEST_RPI specification

CREATE OR REPLACE PACKAGE CONNECT_TEST_RPI AS

module_ CONSTANT VARCHAR2(6) := 'FNDBAS';
lu_name_ CONSTANT VARCHAR2(25) := 'ConnectTestRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   test_id_                  IN VARCHAR2)
   RETURN NUMBER;

PROCEDURE Init;

END CONNECT_TEST_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table CONNECT_TEST_RPT

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONNECT_TEST_RPT';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TEST_ID', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'NUMBER', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONNECT_TEST_RPT';
   index_name_ VARCHAR2(30) := 'CONNECT_TEST_RPK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view CONNECT_TEST_REP

CREATE OR REPLACE VIEW CONNECT_TEST_REP AS
SELECT *
FROM   CONNECT_TEST_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE CONNECT_TEST_REP
   IS 'LU=ConnectTestRep^PROMPT=Connect Test^MODULE=FNDBAS^';

COMMENT ON COLUMN CONNECT_TEST_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN CONNECT_TEST_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN CONNECT_TEST_REP.test_id
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Test ID^QUERY=Test Id:^QFLAGS=O---L^';
COMMENT ON COLUMN CONNECT_TEST_REP.value
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Value^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('CONNECT_TEST_REP', 'FNDBAS', 'ConnectTestRep', 'Connect Test', 'CONNECT_TEST_RPT', 'CONNECT_TEST_RPI.Execute_Report', 0,'','','','PLSQL1.2','TRUE','Administration','Tests');
   Report_SYS.Define_Report_Text_('CONNECT_TEST_REP', 'CONNECT_TEST', 'Sample');
   Report_SYS.Refresh_('CONNECT_TEST_REP');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating CONNECT_TEST_RPI implementation

CREATE OR REPLACE PACKAGE BODY CONNECT_TEST_RPI IS

   TYPE binds$ IS RECORD (
      test_id                   VARCHAR2(2000),
      value                     NUMBER);

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO CONNECT_TEST_RPT (
      result_key,
      test_id,
      value,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      binds$_.test_id,
      binds$_.value,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'CONNECT_TEST_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.test_id              := Client_SYS.Get_Item_Value('TEST_ID', parameter_attr_); 

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'CONNECT_TEST_REP', 'Connect Test');
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'VALUE', binds$_.value);

   Xml_Record_Writer_SYS.End_Element(xml$_, 'CONNECT_TEST_REP');
   Report_SYS.Finish_Xml_Report('CONNECT_TEST_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   test_id_                  IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'CONNECT_TEST_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (test_id_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TEST_ID', test_id_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END CONNECT_TEST_RPI;
/
SHOW ERROR