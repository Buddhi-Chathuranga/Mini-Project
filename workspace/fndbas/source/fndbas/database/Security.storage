-----------------------------------------------------------------------------
--
--  Logical unit: Security
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------


layer Core;

-------------------- TABLE DEFINITIONS --------------------------------------

 TABLE security_sys_tab IS
      ( package_name                   VARCHAR2(30)   NOT NULL,
        method_name                    VARCHAR2(30)   NOT NULL,
        role                           VARCHAR2(30)   NOT NULL );

PRIMARY KEY security_sys_pk IS security_sys_tab ( package_name, method_name, role );

INDEX security_sys_ix IS security_sys_tab (role);

TABLE security_sys_privs_tab IS
      ( grantee                        VARCHAR2(30)   NOT NULL,
        table_name                     VARCHAR2(30)   NOT NULL,
        privilege                      VARCHAR2(40)   NOT NULL );

PRIMARY KEY security_sys_privs_pk IS security_sys_privs_tab ( table_name, grantee );

INDEX security_sys_privs_ix IS security_sys_privs_tab (grantee);

-------------------- OTHER DEFINITIONS --------------------------------------
TABLE security_sys_role_tree_tab IS 
      ( role                           VARCHAR2(30)   NOT NULL,
        granted_role                   VARCHAR2(30)   NOT NULL);

PRIMARY KEY security_sys_role_tree_pk IS security_sys_role_tree_tab (role, granted_role);

TEMPORARY TABLE security_sys_expanded_role_tab IS
      ( role                       VARCHAR2(30) NOT NULL,
        granted_role               VARCHAR2(30) NOT NULL);

UNIQUE INDEX security_sys_expanded_role_uix IS security_sys_expanded_role_tab (role, granted_role);

DECLARE 
   table_name_ VARCHAR2(30) := 'SECURITY_SYS_REFRESH_USER_TAB';
   index_name_ VARCHAR2(30) := 'SECURITY_SYS_REFRESH_USER_UIX';
   columns_    Installation_SYS.ColumnTabType; 
   stmnt_      VARCHAR2(32000);
BEGIN
   IF NOT (Installation_SYS.Table_Exist ( table_name_ ) ) THEN
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'IDENTITY', 'VARCHAR2(30)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'REQUEST_ID', 'VARCHAR2(100)', 'N');
      stmnt_ := 'CREATE GLOBAL TEMPORARY TABLE ' || table_name_ || ' ( ';
      stmnt_ := stmnt_ || Installation_SYS.Format_Columns (columns_, 'TABLE');
      stmnt_ := stmnt_ || ') ON COMMIT PRESERVE ROWS';
      @ApproveDynamicStatement(2016-11-01,dobese)
      EXECUTE IMMEDIATE stmnt_;      
      Dbms_Output.Put_Line('Create_Temporary_Table: Table ' || table_name_ || ' created.');
   ELSE
      Dbms_Output.Put_Line('Create_Temporary_Table: Table ' || table_name_ || ' already created.');
   END IF;
   --Create the index
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'IDENTITY');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;

