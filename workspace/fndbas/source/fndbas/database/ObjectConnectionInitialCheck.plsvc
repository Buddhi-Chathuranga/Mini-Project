-----------------------------------------------------------------------------
--
--  Fragment:     ObjectConnectionInitialCheck
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  190520  RAKUSE  TEUXXCC-2131: Fragment to be used for 'initialcheck' logic related to Object Connections.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Object_Key_Ref_Initial_Check___ (
   lu_name_ IN VARCHAR2,
   key_ref_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Initial_Check___(lu_name_, key_ref_, true);
END Object_Key_Ref_Initial_Check___;


PROCEDURE Object_Key_Ref_Initial_Check___ (
   lu_name_ IN VARCHAR2,
   key_ref_ IN VARCHAR2)
IS
BEGIN
   IF (NOT (Object_Key_Ref_Initial_Check___(lu_name_, key_ref_))) THEN
      Error_SYS.Appl_Failure(lu_name_, err_source_ => 'Object_Key_Ref_Initial_Check___(lu_name_, key_ref_)');
   END IF;
END Object_Key_Ref_Initial_Check___;


FUNCTION Object_Key_Values_Initial_Check___ (
   lu_name_ IN VARCHAR2,
   key_value_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Initial_Check___(lu_name_, key_value_, false);
END Object_Key_Values_Initial_Check___;


PROCEDURE Object_Key_Values_Initial_Check___ (
   lu_name_ IN VARCHAR2,
   key_value_ IN VARCHAR2)
IS
BEGIN
   IF (NOT (Object_Key_Values_Initial_Check___(lu_name_, key_value_))) THEN
      Error_SYS.Appl_Failure(lu_name_, err_source_ => 'Object_Key_Values_Initial_Check___(lu_name_, key_value_)');
   END IF;
END Object_Key_Values_Initial_Check___;


FUNCTION Initial_Check___ (
   lu_name_          IN VARCHAR2,
   value_            IN VARCHAR2,
   value_is_key_ref_ IN BOOLEAN) RETURN BOOLEAN
IS
   dummy_ NUMBER;

   key1_  VARCHAR2(2000);
   key2_  VARCHAR2(2000);
   key3_  VARCHAR2(2000);
   key4_  VARCHAR2(2000);
   key5_  VARCHAR2(2000);
   key6_  VARCHAR2(2000);
   key7_  VARCHAR2(2000);
   key8_  VARCHAR2(2000);
   key9_  VARCHAR2(2000);
   key10_ VARCHAR2(2000);

   view_name_ VARCHAR2(50) := Dictionary_SYS.Get_Base_View(lu_name_);
   stmt_      VARCHAR2(5000);
   key_nr_    NUMBER := 0;
   --SOLSETFW
   CURSOR get_keys IS
     SELECT column_name
     FROM   dictionary_sys_view_column_act
     WHERE  view_name = view_name_
     AND    type_flag IN ('P', 'K')
     ORDER BY column_index;

   FUNCTION Append_To_Where___(
      stmt_             IN OUT VARCHAR2,
      key_name_         IN VARCHAR2,
      value_            IN VARCHAR2,
      pos_              IN NUMBER,
      value_is_key_ref_ IN BOOLEAN) RETURN VARCHAR2
   IS
   BEGIN
      IF (pos_ = 1) THEN
         -- First key gets the 'WHERE'...
         stmt_ := stmt_ || ' WHERE ' || key_name_ || ' = :p0';
         IF NOT (value_is_key_ref_) THEN
            RETURN substr(value_, 1, instr(value_, '^', 1, 1)-1);
         END IF;
      ELSE
         -- ...following keys will get an 'AND'.
         stmt_ := stmt_ || ' AND ' || key_name_ || ' = :p' || to_char(pos_-1);
         IF NOT (value_is_key_ref_) THEN
            RETURN substr(value_, instr(value_, '^', 1, pos_-1)+1, instr(value_, '^', 1, pos_)-instr(value_, '^', 1, pos_-1)-1);         
         END IF;
      END IF;

      RETURN Client_SYS.Get_Key_Reference_Value(value_, key_name_);
   END Append_To_Where___;  
BEGIN
   Assert_Sys.Assert_Is_View(view_name_);

   stmt_ := 'SELECT count(*) FROM ' || view_name_;
   FOR key IN get_keys LOOP
      key_nr_ := key_nr_ + 1;
      CASE key_nr_
        WHEN 1 THEN
          key1_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 2 THEN
          key2_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 3 THEN
          key3_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 4 THEN
          key4_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 5 THEN
          key5_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 6 THEN
          key6_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 7 THEN
          key7_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 8 THEN
          key8_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 9 THEN
          key9_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
        WHEN 10 THEN
          key10_ := Append_To_Where___(stmt_, key.column_name, value_, key_nr_, value_is_key_ref_);
      END CASE;

   END LOOP;
   
   CASE key_nr_
     WHEN 1 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_;
     WHEN 2 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_;
     WHEN 3 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_;
     WHEN 4 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_, key4_;
     WHEN 5 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_, key4_, key5_;
     WHEN 6 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_, key4_, key5_, key6_;
     WHEN 7 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_, key4_, key5_, key6_, key7_;
     WHEN 8 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_, key4_, key5_, key6_, key7_, key8_;
     WHEN 9 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_, key4_, key5_, key6_, key7_, key8_, key9_;
     WHEN 10 THEN
      @ApproveDynamicStatement(2019-05-20, RAKUSE)
      EXECUTE IMMEDIATE stmt_ INTO dummy_ USING key1_, key2_, key3_, key4_, key5_, key6_, key7_, key8_, key9_, key10_;
   END CASE;
   
   RETURN CASE dummy_ WHEN 0 THEN FALSE ELSE TRUE END;
END Initial_Check___;
