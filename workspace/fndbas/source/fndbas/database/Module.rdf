-----------------------------------------------------------------------------
--
--  Logical unit: Module
--
--  File:         ComponentInfo.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  020212  ROOD  Added new layout with letter paper format (ToDo#4077).
--                Removed query possibility for options and status in view comments
--                since it was not implemented in the method.
--  020627  ROOD  Corrected usage of General_SYS.Init_Method (ToDo#4087).
--  030212  ROOD  Changed module to FNDBAS (ToDo#4149).
--  030630  MAOL  Modified report to generate XML (Report Designer).
--  040316  MAOL  Modified report to use new Report_SYS.Define_ methods (#43396).
--  040701  ROOD  Added comment for report view (F1PR413).
--  040702  ROOD  Used raw data view in report view (Bug#44975).
--  040706  ROOD  Modified some calls to dictionary_sys (F1PR413).
--  051028  MAOL  Removed QRP's (F1PR467).
--  110503  CHAA  EASTONE-16468 : Remove report layout definitions from RDF
-----------------------------------------------------------------------------

DEFINE MODULE             = FNDBAS
DEFINE LU                 = Module
DEFINE PKG                = MODULE_RPI

DEFINE TABLE              = INFO_SERVICES_RPT
DEFINE RAWVIEW            = INFO_SERVICES_RPV
DEFINE VIEW               = MODULE_REP
DEFINE METHOD             = Report_Information

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT a.result_key                            RESULT_KEY,
       c.row_no                                ROW_NO,
       substr(a.s1,1,6)                        COMPONENT,
       substr(a.s2,1,50)                       NAME,
       substr(a.s3,1,500)                      DESCRIPTION,
       substr(a.s4,1,10)                       VERSION,
       substr(a.s5,1,100)                      VERSION_DESC,
       null                                    OPTIONS,
       substr(b.s1,1,25)                       LOGICAL_UNIT,
       substr(c.s1,1,30)                       OBJECT_NAME,
       substr(c.s2,1,30)                       OBJECT_TYPE,
       c.d1                                    LAST_DDL_TIME,
       substr(c.s3,1,7)                        STATUS
FROM  &RAWVIEW a, &RAWVIEW b, &RAWVIEW c
WHERE a.result_key = b.result_key AND b.result_key = c.result_key (+)
AND a.row_no = b.parent_row_no AND b.row_no = c.parent_row_no (+)
AND a.parent_row_no = 0
WITH  read only;


COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Language Module^';
COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..COMPONENT IS
   'FLAGS=A----^DATATYPE=STRING(6)/UPPERCASE^PROMPT=Module^QUERY=Component:^
   ^STATUS=Short name of components^REF=Module^QFLAGS=OW---^TITLE=Component^ITEM_NAME=iComponent^';
COMMENT ON COLUMN &VIEW..name IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Name^TITLE=Name^ITEM_NAME=iName^';
COMMENT ON COLUMN &VIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(500)^PROMPT=Description^TITLE=Description^
   ^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..version IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Version^TITLE=Version^ITEM_NAME=iVersion^
   ^QUERY=Version:^STATUS=The version number for the component^';
COMMENT ON COLUMN &VIEW..version_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Version Desc^TITLE=Version Desc^
   ^ITEM_NAME=iVersionDesc^';
COMMENT ON COLUMN &VIEW..options IS
   'FLAGS=A----^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..logical_unit IS
   'FLAGS=A----^TITLE=Logical Unit^ITEM_NAME=iLogicalUnit^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..object_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Object Name^ITEM_NAME=iObjectName^';
COMMENT ON COLUMN &VIEW..object_type IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Object Type^ITEM_NAME=iObjectType^';
COMMENT ON COLUMN &VIEW..last_ddl_time IS
   'FLAGS=A----^TITLE=Last Ddl Time^ITEM_NAME=iLastDdlTime^DATATYPE=DATE/DATETIME^';
COMMENT ON COLUMN &VIEW..status IS
   'FLAGS=A----^TITLE=Status^ITEM_NAME=iStatus^DATATYPE=STRING(7)^';


BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Component Information','&TABLE','&PKG..&METHOD',7,'','','','PLSQL1.2','TRUE','Administration','Installation');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

field_separator_ CONSTANT VARCHAR2(1) := Client_SYS.field_separator_;

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_        NUMBER;
   row_no_            NUMBER := 1;
   component_         VARCHAR2(2000);
   version_           VARCHAR2(2000);
   option_            VARCHAR2(2000);

   module_row_no_     NUMBER;

   logical_unit_list_ VARCHAR2(32000);
   logical_unit_      VARCHAR2(30);
   lu_from_           NUMBER;
   lu_to_             NUMBER;
   lu_row_no_         NUMBER;

   view_list_         VARCHAR2(32000);
   view_              VARCHAR2(30);
   view_from_         NUMBER;
   view_to_           NUMBER;

   package_list_      VARCHAR2(32000);
   package_           VARCHAR2(30);
   package_from_      NUMBER;
   package_to_        NUMBER;

   last_ddl_time_     DATE;
   status_            VARCHAR2(7);
   
   do_xml_  BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_result_set_   BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_stream_     CLOB;
   
   CURSOR get_module IS
      SELECT module, name, description, version, version_desc
         FROM module_tab
         WHERE Report_SYS.Parse_Parameter(module, component_) = 'TRUE'
         AND   Report_SYS.Parse_Parameter(version, version_) = 'TRUE';
   CURSOR ddl_status(object_name_ VARCHAR2, object_type_ VARCHAR2) IS
     SELECT last_ddl_time, status
       FROM user_objects
       WHERE object_name = object_name_
       AND object_type = object_type_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   component_ := Client_SYS.Get_Item_Value('COMPONENT', parameter_attr_);
   version_ := Client_SYS.Get_Item_Value('VERSION', parameter_attr_);
   option_ := Client_SYS.Get_Item_Value('OPTION', parameter_attr_);
   row_no_ := 1;
   IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Create_Report_Header(xml_stream_,'&VIEW','Component_Information');
         Xml_Record_Writer_SYS.Start_Element(xml_stream_, 'MODULES');
   END IF;      
   FOR master_ IN get_module LOOP
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_stream_, 'MODULE');
         Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'MODULE', master_.module);
         Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'NAME', master_.name);
         Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'DESCRIPTION', master_.description);
         Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'VERSION', master_.version);
         Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'VERSION_DESC', master_.version_desc);
      END IF;
      IF (do_result_set_) THEN
         INSERT INTO &TABLE (result_key, row_no, parent_row_no, s1, s2, s3, s4, s5)
         VALUES (result_key_, row_no_, 0, master_.module, master_.name, master_.description, master_.version, master_.version_desc);
      END IF;
      module_row_no_ := row_no_;
      row_no_ := row_no_ + 1;
      Dictionary_SYS.Enum_Module_Logical_Units_(logical_unit_list_, master_.module);
      lu_from_ := 1;
      lu_to_ := instr(logical_unit_list_, field_separator_);
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_stream_, 'LOGICAL_UNITS');
      END IF;
      WHILE (lu_to_ > 0) LOOP
         logical_unit_ := substr(logical_unit_list_, lu_from_, lu_to_ - lu_from_);
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_stream_, 'LOGICAL_UNIT');
            Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'NAME', logical_unit_);
         END IF;
         IF (do_result_set_) THEN
            INSERT INTO &TABLE (result_key, row_no, parent_row_no, s1)
            VALUES (result_key_, row_no_, module_row_no_, logical_unit_);
         END IF;
         lu_row_no_ := row_no_;
         row_no_ := row_no_ + 1;
         Dictionary_SYS.Get_Logical_Unit_Views__(logical_unit_, view_list_);
         view_from_ := 1;
         view_to_ := instr(view_list_, field_separator_);
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_stream_, 'DATABASE_OBJECTS');
         END IF;
         WHILE ((view_to_ > 0)) LOOP
            view_ := substr(view_list_, view_from_, view_to_ - view_from_);
            OPEN ddl_status(view_, 'VIEW');
            FETCH ddl_status INTO last_ddl_time_, status_;
            CLOSE ddl_status;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_stream_, 'DATABASE_OBJECT');
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'NAME', view_);
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'TYPE', 'VIEW');
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'LAST_DDL_TIME', last_ddl_time_);
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'STATUS', status_);
               Xml_Record_Writer_SYS.End_Element(xml_stream_, 'DATABASE_OBJECT');               
            END IF;
            IF (do_result_set_) THEN
               INSERT INTO &TABLE (result_key, row_no, parent_row_no, s1, s2, d1,s3)
               VALUES (result_key_, row_no_, lu_row_no_, view_, 'VIEW', last_ddl_time_, status_);
            END IF;
            row_no_ := row_no_ + 1;
            view_from_ := view_to_ + 1;
            view_to_ := instr(view_list_, field_separator_, view_from_);
         END LOOP;
         Dictionary_SYS.Get_Logical_Unit_Packages__(logical_unit_, package_list_);
         package_from_ := 1;
         package_to_ := instr(package_list_, field_separator_);
         WHILE ((package_to_ > 0)) LOOP
            package_ := substr(package_list_, package_from_, package_to_ - package_from_);
            OPEN ddl_status(package_, 'PACKAGE BODY');
            FETCH ddl_status INTO last_ddl_time_, status_;
            CLOSE ddl_status;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_stream_, 'DATABASE_OBJECT');
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'NAME', package_);
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'TYPE', 'PACKAGE');
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'LAST_DDL_TIME', last_ddl_time_);
               Xml_Record_Writer_SYS.Add_Element(xml_stream_, 'STATUS', status_);
               Xml_Record_Writer_SYS.End_Element(xml_stream_, 'DATABASE_OBJECT');               
            END IF;
            IF (do_result_set_) THEN
               INSERT INTO &TABLE (result_key, row_no, parent_row_no, s1, s2, d1, s3)
               VALUES (result_key_, row_no_, lu_row_no_, package_, 'PACKAGE', last_ddl_time_, status_);
            END IF;
            row_no_ := row_no_ + 1;
            package_from_ := package_to_ + 1;
            package_to_ := instr(package_list_, field_separator_, package_from_);
         END LOOP;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_stream_, 'DATABASE_OBJECTS');
            Xml_Record_Writer_SYS.End_Element(xml_stream_, 'LOGICAL_UNIT');
         END IF;
         lu_from_ := lu_to_ + 1;
         lu_to_ := instr(logical_unit_list_, field_separator_, lu_from_);
      END LOOP;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_stream_, 'LOGICAL_UNITS');
         Xml_Record_Writer_SYS.End_Element(xml_stream_, 'MODULE');   
      END IF;
   END LOOP;
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_stream_, 'MODULES');
      Xml_Record_Writer_SYS.End_Element(xml_stream_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_stream_);
   END IF;
END &METHOD;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE RAWVIEW
UNDEFINE VIEW
UNDEFINE METHOD
