-----------------------------------------------------------------------------
--
--  Logical unit: CustomBranding
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Default___ (
   rec_ IN OUT Fnd_Branding_Property_Default_Rec )
IS
BEGIN
   super(rec_);
   rec_.theme := 'default';
END CRUD_Default___;

@Override
PROCEDURE CRUD_Default___ (
   rec_ IN OUT Fnd_Branding_Property_Dark_Rec )
IS
BEGIN
   super(rec_);
   rec_.theme := 'working-late';
END CRUD_Default___;

FUNCTION Get_All_Branding_Property_Lists___
   
   RETURN Branding_Property_List_Arr
IS
   rec_ Branding_Property_List_Rec;
   property_list_ Branding_Property_List_Arr := Branding_Property_List_Arr();
   
   CURSOR properties IS
      SELECT t1.*,t2.type, t2.css_property, t2.css_override FROM (SELECT * FROM fnd_branding_property_tab) t1 left join
         fnd_branding_token_tab t2 ON t1.property = t2.property;
      
BEGIN
   
   FOR rec IN properties LOOP
      rec_.code := rec.code;
      rec_.property := rec.property;
      rec_.theme := rec.theme;
      rec_.value := rec.value;
      rec_.type := rec.type;
      rec_.css_property := rec.css_property;
      rec_.css_override := rec.css_override;
      property_list_.extend;
      property_list_(property_list_.last) := rec_;
   END LOOP;

   RETURN property_list_;
  
END Get_All_Branding_Property_Lists___;


FUNCTION Get_All_Brandings___
   RETURN Branding_List_Arr
IS
   rec_ Branding_List_Rec;
   branding_list_ Branding_List_Arr := Branding_List_Arr();
   
   CURSOR brandings IS
      SELECT t.code, t.name, t.context, t.state
      FROM fnd_branding_tab t;
     
BEGIN
   
   FOR rec IN brandings LOOP
      rec_.code := rec.code;
      rec_.name := rec.name;
      rec_.context := rec.context;
      rec_.state := rec.state;
      branding_list_.extend;
      branding_list_(branding_list_.last) := rec_;
   END LOOP;
   RETURN branding_list_;
  
END Get_All_Brandings___;



PROCEDURE Copy_Default_Properties___ (
   code_ IN VARCHAR2,
   to_theme_ IN VARCHAR2)
IS   
   CURSOR get_default_rows IS
      SELECT *
      FROM fnd_branding_property_tab t
      WHERE t.theme = 'default'
      AND t.code = code_ ;
      
   attr_ VARCHAR2(32000);
   info_ VARCHAR2(32000);
   objid_ VARCHAR2(32000);
   objversion_ VARCHAR2(32000);
  
   
BEGIN
   FOR rec_ IN get_default_rows LOOP
      
      IF (NOT Fnd_Branding_Property_API.Exists(rec_.code, rec_.property, to_theme_)) THEN
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('CODE', rec_.code, attr_);
         Client_SYS.Add_To_Attr('PROPERTY', rec_.property, attr_);
         Client_SYS.Add_To_Attr('THEME', to_theme_ , attr_);
         Client_SYS.Add_To_Attr('VALUE', rec_.value, attr_);
         
         Fnd_Branding_Property_API.New__(info_, objid_, objversion_, attr_, 'DO');
      END IF;
      
   END LOOP;

END Copy_Default_Properties___;


PROCEDURE Copy_Default_Property___ (
   code_ IN VARCHAR2,
   property_ IN   VARCHAR2,
   to_theme_ IN VARCHAR2)
IS
   value_ VARCHAR2(32000);
   attr_ VARCHAR2(32000);
   info_ VARCHAR2(32000);
   
   objid_ VARCHAR2(32000);
   objversion_ VARCHAR2(32000);
   
BEGIN
   
   SELECT t.value INTO value_
   FROM fnd_branding_property_tab t
   WHERE t.theme = 'default'
   AND t.code = code_ AND t.property = property_;
   
   SELECT objid, objversion INTO objid_, objversion_
   FROM Fnd_Branding_Property t
   WHERE t.theme = to_theme_
   AND t.code = code_ AND t.property = property_;
   
   IF (value_ IS NOT NULL ) THEN
      Client_SYS.Add_To_Attr('VALUE', value_, attr_);
      Fnd_Branding_Property_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   
EXCEPTION
   when no_data_found THEN
      NULL;
      
END Copy_Default_Property___;


PROCEDURE Unpublish___ (
   code_ IN VARCHAR2)
IS

BEGIN
   UPDATE fnd_branding_tab
         SET state = 'UNPUBLISHED'
       WHERE code = code_;

END Unpublish___;


PROCEDURE Publish___ (
   code_ IN VARCHAR2)
IS
   is_invalid_custom_ NUMBER;
   multiple_mappings_ NUMBER;
   
BEGIN
   SELECT count(*) INTO is_invalid_custom_
         FROM fnd_branding_tab t WHERE t.code = code_ AND t.context = 'CUSTOM'
         AND (t.context_expression IS NULL or t.context_expression = '');
      
   SELECT count(*) INTO multiple_mappings_
      FROM fnd_branding_tab t1 WHERE t1.state = 'PUBLISHED' AND t1.context_expression = 
            (SELECT t2.context_expression FROM fnd_branding_tab t2 WHERE t2.code = code_);   
   
   IF (is_invalid_custom_ > 0) THEN 
      Error_SYS.Appl_General(lu_name_, '100001: Missing Context expression.');
      
   ELSIF (multiple_mappings_ > 0) THEN 
      Error_SYS.Appl_General(lu_name_, '100002: Only 1 Published appearance can be set for each context.');
   ELSE 
      UPDATE fnd_branding_tab
            SET state = 'PUBLISHED'
          WHERE code = code_;
   END IF;
   
END Publish___;


@Override
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN  VARCHAR2,
   key_    IN  Fnd_Branding_Key,
   values_ IN  Copy_Values_Rec,
   attr_   OUT VARCHAR2,
   info_   OUT VARCHAR2 )
IS
BEGIN
   super(objid_, key_, values_, attr_, info_);
   Client_SYS.Set_Item_Value('DUPLICATE_CHECK', key_.code, attr_);
   Client_SYS.Set_Item_Value('STATE', 'UNPUBLISHED', attr_);
END CRUD_Default_Copy___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Fnd_Branding_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   duplicate_check_ VARCHAR2(100);
BEGIN
   super(etag_, key_, attr_, info_, action_);
   duplicate_check_ := Client_SYS.Get_Item_Value('DUPLICATE_CHECK', attr_);
   IF (duplicate_check_ IS NOT NULL AND duplicate_check_ != 'None') THEN
      Fnd_Branding_API.Duplicate_Branding(duplicate_check_, key_.code);
   END IF;
END CRUD_Create___;