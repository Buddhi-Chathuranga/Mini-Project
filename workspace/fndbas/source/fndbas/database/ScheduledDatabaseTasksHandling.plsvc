-----------------------------------------------------------------------------
--
--  Logical unit: ScheduledDatabaseTasksAnalysis
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Run_Batch_Schedule___ (
	key_ IN Scheduled_Database_Task_Key)
IS
BEGIN
	BATCH_SCHEDULE_API.RUN_BATCH_SCHEDULE__(key_.schedule_id,'FALSE');
END Run_Batch_Schedule___;

@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Scheduled_Database_Task_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   next_execution_date_ DATE;
BEGIN
   Client_SYS.Add_To_Attr('BATCH_SCHEDULE_TYPE_DB', 'TASK', attr_);
   Batch_Schedule_API.Parse_Execution_Plan__(key_.schedule_id, attr_);
   super(etag_,key_,attr_,info_,action_);  
   Batch_Schedule_API.Update_Get_Next_Exec_Date_(key_.schedule_id, next_execution_date_);
   Client_SYS.Add_To_Attr('NEXT_EXECUTION_DATE', next_execution_date_, attr_);
END CRUD_Create___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Scheduled_Database_Task_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
BEGIN
   Batch_Schedule_API.Parse_Execution_Plan__(key_.schedule_id, attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;

PROCEDURE Add_Param_To_Schedule___ (
   key_                IN New_Scheduled_Task_Virtual_Key,
   schedule_method_id_ IN NUMBER ) 
IS
   param_attr_          VARCHAR2(32000) := NULL;   
   ret_                 Entity_Dec;
   default_values_msg_  VARCHAR2(32000) := NULL;
   count_ NUMBER;
   method_id_ NUMBER;
   records_count_ NUMBER;

   CURSOR method_param IS
     SELECT seq_no,name,value, mandatory
     FROM BATCH_SCHEDULE_METHOD_PAR_TAB
     WHERE schedule_method_id = schedule_method_id_;
BEGIN
   BEGIN
      SELECT schedule_method_id INTO method_id_
      FROM ${PROJECTION}_NEW_SCHEDULED_TASK_METHOD_PAR_VIRTUAL_VRT
      WHERE parent_objkey = key_.objkey AND rownum = 1;
   EXCEPTION
      WHEN no_data_found THEN
         method_id_ := NULL;
   END;

   Batch_Schedule_Method_Par_API.Get_Default_Values__(default_values_msg_,schedule_method_id_);

   IF method_id_ != schedule_method_id_ THEN
      DELETE FROM ${PROJECTION}_NEW_SCHEDULED_TASK_METHOD_PAR_VIRTUAL_VRT WHERE parent_objkey = key_.objkey;
      FOR method_param_rec_ in method_param
      LOOP
         Client_SYS.Add_To_Attr('PARENT_OBJKEY',key_.objkey,param_attr_);
         Client_SYS.Add_To_Attr('SCHEDULE_METHOD_ID',schedule_method_id_,param_attr_);
         Client_SYS.Add_To_Attr('SEQ_NO',method_param_rec_.seq_no,param_attr_);
         Client_SYS.Add_To_Attr('NAME',method_param_rec_.name,param_attr_);     
         Client_SYS.Add_To_Attr('USER_VALUE',Message_SYS.Find_Attribute(default_values_msg_, method_param_rec_.name, ''),param_attr_);
         Client_SYS.Add_To_Attr('MANDATORY',method_param_rec_.mandatory,param_attr_);
         ret_ := CRUD_Create(param_attr_,'DO', new_scheduled_task_method_par_virtual## => '');
         param_attr_ := NULL;
      END LOOP;
   ELSE
      SELECT COUNT(objkey) INTO records_count_
      FROM ${PROJECTION}_NEW_SCHEDULED_TASK_METHOD_PAR_VIRTUAL_VRT
      WHERE parent_objkey = key_.objkey;
      
      IF records_count_ = 0 THEN
         FOR method_param_rec_ in method_param
         LOOP
         Client_SYS.Add_To_Attr('PARENT_OBJKEY',key_.objkey,param_attr_);
         Client_SYS.Add_To_Attr('SCHEDULE_METHOD_ID',schedule_method_id_,param_attr_);
         Client_SYS.Add_To_Attr('SEQ_NO',method_param_rec_.seq_no,param_attr_);
         Client_SYS.Add_To_Attr('NAME',method_param_rec_.name,param_attr_);     
         Client_SYS.Add_To_Attr('USER_VALUE',Message_SYS.Find_Attribute(default_values_msg_, method_param_rec_.name, ''),param_attr_);
         Client_SYS.Add_To_Attr('MANDATORY',method_param_rec_.mandatory,param_attr_);   
         ret_ := CRUD_Create(param_attr_,'DO', new_scheduled_task_method_par_virtual## => '');
         param_attr_ := NULL;
         END LOOP;
      END IF;
END IF;
   SELECT count(*) INTO count_
     FROM ${PROJECTION}_NEW_SCHEDULED_TASK_METHOD_PAR_VIRTUAL_VRT v
    WHERE v.mandatory = 'TRUE' AND v.user_value IS NULL AND v.parent_objkey = key_.objkey;

   IF count_ >= 1  THEN
      UPDATE ${PROJECTION}_NEW_SCHEDULED_TASK_VIRTUAL_VRT s
         SET s.enable_param_next = 'FALSE'
       WHERE s.objkey = key_.objkey;
   ELSE
      UPDATE ${PROJECTION}_NEW_SCHEDULED_TASK_VIRTUAL_VRT m
         SET m.enable_param_next = 'TRUE'
       WHERE m.objkey = key_.objkey;
   END IF;
END Add_Param_To_Schedule___;

FUNCTION Create_Task_Schedule___ (
   key_ IN New_Scheduled_Task_Virtual_Key ) RETURN VARCHAR2
IS
   virt_rec_      New_Scheduled_Task_Virtual_Rec;
   param_rec_     batch_schedule_par_tab%ROWTYPE;
   attr_          VARCHAR2(32000);
   ret_           Entity_Dec;
BEGIN
   virt_rec_ := Get_Record___(key_);   
   Add_To_Attr_From_Rec___(virt_rec_,attr_);
   attr_ := Client_SYS.Remove_Attr('ACTIVE', attr_);
   Client_SYS.Set_Item_Value('ACTIVE_DB', CASE WHEN virt_rec_.active THEN 'TRUE' else 'FALSE' end, attr_);
   attr_ := Client_SYS.Remove_Attr('CHECK_EXECUTING', attr_);
   Client_SYS.Set_Item_Value('CHECK_EXECUTING_DB', CASE WHEN virt_rec_.check_executing THEN 'TRUE' else 'FALSE' end, attr_);
   attr_ := Client_SYS.Remove_Attr('STREAM_MSG_ON_COMPLETION', attr_);
   Client_SYS.Set_Item_Value('STREAM_MSG_ON_COMPLETION_DB', CASE WHEN virt_rec_.stream_msg_on_completion THEN 'TRUE' else 'FALSE' end, attr_);
   ret_ := CRUD_Create(attr_,'DO', scheduled_database_task## => '');
 
   FOR virt_par_rec_ in Get_Method_Param___(key_)
      LOOP
         param_rec_.schedule_id := Client_SYS.Get_Item_Value('SCHEDULE_ID', ret_.attr);
         param_rec_.name        := virt_par_rec_.name;
         param_rec_.value       := virt_par_rec_.user_value;
         
         Batch_Schedule_Par_API.New__(param_rec_);
         param_rec_ := NULL;
      END LOOP;
   RETURN Client_SYS.Get_Item_Value('SCHEDULE_ID', ret_.attr);
END Create_Task_Schedule___;

@Override
PROCEDURE CRUD_Default___ (
   rec_  IN OUT New_Scheduled_Task_Virtual_Rec )
IS
   info_          VARCHAR2(32000);
   objid_         VARCHAR2(100);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
BEGIN
   super(rec_);
   Batch_Schedule_API.New__(info_,objid_,objversion_,attr_,'PREPARE');
   Add_To_Rec_From_Attr___(attr_,rec_);
   IF (Client_SYS.Item_Exist('ACTIVE_DB', attr_)) THEN
      rec_.active := CASE Client_SYS.Get_Item_Value('ACTIVE_DB', attr_) WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
   END IF;
   rec_.schedule_option :='DAILY';
   rec_.schedule_time := TO_DATE(SYSDATE);  
END CRUD_Default___ ;   

PROCEDURE Cleanup_Task_Virtual___ (
   key_ IN New_Scheduled_Task_Virtual_Key ) 
IS
   
BEGIN
  DELETE FROM ${PROJECTION}_NEW_SCHEDULED_TASK_METHOD_PAR_VIRTUAL_VRT WHERE parent_objkey = key_.objkey;
  DELETE FROM ${PROJECTION}_NEW_SCHEDULED_TASK_VIRTUAL_VRT WHERE objkey = key_.objkey;
END Cleanup_Task_Virtual___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Batch_Schedule_Par_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   mandatory_ VARCHAR2(5);
   name_ VARCHAR2(30);
   value_ VARCHAR2(4000);
   validaton_ VARCHAR2(200);
   validate_method_string_ VARCHAR2(500);
   msg_ VARCHAR2(32000);
BEGIN
   validaton_   := Batch_Schedule_Method_API.Get_Validation_Method__(Batch_Schedule_API.Get_Schedule_Method_Id(key_.SCHEDULE_ID));
   mandatory_   := Batch_Schedule_Method_Par_API.Get_Mandatory_Db(Batch_Schedule_API.Get_Schedule_Method_Id(key_.SCHEDULE_ID), key_.SEQ_NO);
   name_        := Batch_Schedule_Method_Par_API.Get_Parameter_Name(Batch_Schedule_API.Get_Schedule_Method_Id(key_.SCHEDULE_ID), key_.SEQ_NO);
   value_       := Client_SYS.Get_Item_Value('VALUE', attr_);
   IF Batch_Schedule_Method_Par_API.Get_Data_Type(Batch_Schedule_API.Get_Schedule_Method_Id(key_.SCHEDULE_ID),key_.SEQ_NO) = 'DATE' THEN 
      Batch_Schedule_Method_Par_API.Check_Valid_Date(value_);
   END IF;
   IF mandatory_ = 'TRUE' AND value_ IS NULL THEN
      Error_SYS.Appl_General(lu_name_,'VALNOTEXIST: Enter a value for mandatory task parameter :P1',name_);
   ELSIF validaton_ IS NOT NULL THEN 
      msg_ := Message_SYS.Construct('');
      Message_SYS.Add_Attribute(msg_ , name_, value_);  
      validate_method_string_ := 'BEGIN '|| validaton_ || '(:p1); END;';
      @ApproveDynamicStatement(2020-08-11,gisslk)
      execute immediate (validate_method_string_) USING msg_;
      super(etag_, key_, attr_, info_, action_);
   ELSE 
      super(etag_, key_, attr_, info_, action_);
   END IF;
END CRUD_Update___;

@Override
PROCEDURE CRUD_Update___(
   old_ IN New_Scheduled_Task_Method_Par_Virtual_Rec,
   new_ IN New_Scheduled_Task_Method_Par_Virtual_Rec )
IS
   count_ NUMBER;
   validaton_ VARCHAR2(200);
   validate_method_string_ VARCHAR2(500);
   msg_ VARCHAR2(32000);
BEGIN
   validaton_   := Batch_Schedule_Method_API.Get_Validation_Method__(old_.schedule_method_id);
   IF Batch_Schedule_Method_Par_API.Get_Data_Type(old_.schedule_method_id,new_.SEQ_NO) = 'DATE' THEN 
      Batch_Schedule_Method_Par_API.Check_Valid_Date(new_.user_value);
   END IF;
   IF validaton_ IS NOT NULL THEN 
      msg_ := Message_SYS.Construct('');
      Message_SYS.Add_Attribute(msg_ , new_.name, new_.user_value);  
      validate_method_string_ := 'BEGIN '|| validaton_ || '(:p1); END;';
      @ApproveDynamicStatement(2020-08-11,gisslk)
      execute immediate (validate_method_string_) USING msg_;
   END IF;
   super(old_, new_);
   SELECT count(*) INTO count_
     FROM ${PROJECTION}_NEW_SCHEDULED_TASK_METHOD_PAR_VIRTUAL_VRT v
    WHERE v.mandatory = 'TRUE' AND v.user_value IS NULL AND v.parent_objkey = old_.parent_objkey;

   IF count_ >= 1  THEN
      UPDATE ${PROJECTION}_NEW_SCHEDULED_TASK_VIRTUAL_VRT s
         SET s.enable_param_next = 'FALSE'
       WHERE s.objkey = old_.parent_objkey;
   ELSE
      UPDATE ${PROJECTION}_NEW_SCHEDULED_TASK_VIRTUAL_VRT m
         SET m.enable_param_next = 'TRUE'
       WHERE m.objkey = old_.parent_objkey;
   END IF;
END CRUD_Update___;
