-----------------------------------------------------------------------------
--
--  Logical unit: FndZipFileTemp
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------


layer Core;

-------------------- TABLE DEFINITIONS --------------------------------------

TABLE FND_UNZIPPED_FILE_TEMP_TAB IS (
   file_id                       VARCHAR2(50)   NOT NULL, 
   fnd_user                      VARCHAR2(30)   NOT NULL, 
   file_path                     VARCHAR2(1000) NOT NULL,
   file_content                  CLOB           NOT NULL,
   created_date                  DATE           DEFAULT SYSDATE NOT NULL);
   
-------------------- OTHER DEFINITIONS --------------------------------------

OBJECT FND_ZIP_OBJECT_REC IS (
   file_path_     VARCHAR2(1000),
   content_       BLOB   ); 
   
COLLECTION FND_ZIP_OBJECT_TAB IS TABLE OF FND_ZIP_OBJECT_REC;
 
DECLARE

BEGIN
   @ApproveDynamicStatement(2020-01-24,AkiRLK)
   EXECUTE IMMEDIATE 
      'CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "FndZipUtilImpl" AS
      import java.sql.*;
      import java.io.*;
      import java.util.zip.*;

      public class FndZipUtilImpl{
         public static void zipFiles(java.sql.Blob zip, java.sql.Array fileObjArray) throws Exception{
            OutputStream os = zip.setBinaryStream(0);           
            BufferedOutputStream bos = new BufferedOutputStream(os);
            ZipOutputStream zos = new ZipOutputStream(bos);    
            String logMessage = null;
            Object[] fileArr = (Object[]) fileObjArray.getArray();  

            try{
               if(fileArr != null){
                  for(Object fileObj : fileArr){
                     if(fileObj instanceof Struct){
                        Struct fileStruct = (Struct) fileObj ;
                        Object[] file = fileStruct.getAttributes();

                        String filePath = (file[0] instanceof String ) ? (String) file[0] : null ;
                        Blob fileContent = (file[1] instanceof Blob ) ?  (Blob) file[1] : null ;

                        if( filePath == null || fileContent == null ) {
                           logMessage = "File path or File content is not received!";
                        }else{
                           InputStream is = fileContent.getBinaryStream();
                           BufferedInputStream bis = new BufferedInputStream(is);
                           int bufSize = 1024;
                           byte []buf = new byte[bufSize];
                           zos.putNextEntry(new ZipEntry(filePath));
                           int bytesread;
                           while ((bytesread = bis.read(buf, 0, bufSize)) != -1) {
                              zos.write(buf, 0, bytesread);
                           }
                        }
                     }else{
                        logMessage = "Input is inconsistent with the expected type : Struct";
                     }                  
                     zos.closeEntry();
                     zos.flush();
                  }
               }         
            }
            catch(Exception e){
               System.err.println(e.getMessage());
            }
            finally{
               System.out.println(logMessage);
               zos.close();   
            } 
         }        
      }';
END;
