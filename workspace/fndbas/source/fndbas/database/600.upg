-----------------------------------------------------------------------------------
--
-- File: 600.upg
--
-- Date: 2012-11-16
--
-- Purpose: Upgrade IFS Base Server database objects
--          from release 5.0.0 to 6.0.0.
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------------
--  121116  HAAR  Created
--  131223  SJAYLK Removed BI objects, scripts
--  140217  JOWISE Added columns in for text and term translations.
--  140507  USRA   TEBASE-247: Fixed inconsistencies with CDB files.
--  140516  NaBaLK TEREPORT-1240: Fixed inconsistencies with CDB files.
--  140523  MADDLK TEBASE-237: Disabled HistoryLog related Existing triggers for FndEvent and HistoryLog.
--  140709  NaBaLK TEREPORT-1310: Added XML_REPORT_ARCHIVE_TAB and XML_REPORT_ACCESS_TAB
--  140722  NaBaLK TEREPORT-1305: Merged CF_RESULT_TYPE and CF_RESULT_SET_TYPE
--  140725  NaBaLK TEREPORT-1355: Moved XML_HEADER and XML_FOOTER to XML_REPORT_ARCHIVE_TAB
--  140806  PGANLK EAP_TE-G1408747 : Check whether oracle user  exists for a particular fnduser before creating.
--  141110  MADRSE TEJSE-200: Added Batch Processor CDB files
--  141208  DOBESE TEBASE-818 Moved obsolete packages, sequences, indexes and views from clear script
--  141214  HAMALK TEREPORT-1528 Modified the Primary Key of REPORT_RULE_CONDITION_TAB and REPORT_RULE_ACTION_TAB
--  150120  MADRSE TEJSE-249: Removed ROWKEY from FND_CLIENT_LOGON_TAB
--  150214  MADDLK TEBASE-829: Added Client Identifier column to SERVER_LOG_TAB
--  150219  MADDLK TEBASE-387: Added USE_FOR_DEVELOPMENT column to FND_LAYER_TAB
--  150226  CHAALK TEREPORT-1626: LCS patch merge for patch 121020
--  150226  MADRSE TEBASE-990: Renamed some FNDCN PK-indexes
--  150409  MADRSE LCS-122014: EAP_ Process Print Job upgrade error
--  160509  NaBaLK TEREPORT-2085: Adding default values for REPORT_MODE before making it mandatory
-----------------------------------------------------------------------------------


-----------------------------------------------------------------------------------
-- Server
-----------------------------------------------------------------------------------

DEFINE MODULE = FNDBAS

SET SERVEROUTPUT ON


DECLARE
   column_  Installation_SYS.ColRec;
   CURSOR get_default_values IS
      SELECT *
      FROM user_tab_columns t
      WHERE t.data_default IS NOT NULL
      AND nullable = 'N'
      AND default_on_null = 'NO';
BEGIN
   FOR rec IN get_default_values LOOP
      IF (rec.data_default NOT LIKE 'NULL%') THEN
         EXECUTE IMMEDIATE 'ALTER TABLE '||rec.table_name||' MODIFY '||rec.column_name||' DEFAULT ON NULL '||rec.data_default;
         Dbms_Output.Put_Line('Default value handling changed for ' || rec.table_name || ' ' || rec.column_name  || ' to ON NULL ' || rec.data_default || '. Time: ' || to_char(Dbms_Utility.Get_Cpu_Time));
      END IF;
   END LOOP;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_1');
PROMPT Adopting users TO Oracle proxy users

DECLARE

   CURSOR get_users IS
      SELECT *
      FROM fnd_user_tab t
      WHERE t.oracle_user IS NULL;

   CURSOR get_temp IS
      SELECT tablespace_name
      FROM dba_temp_files;

   ts_default_    VARCHAR2(30);
   ts_temporary_  VARCHAR2(30);
   def_profile_   VARCHAR2(30);

--   no_user  EXCEPTION;
--   PRAGMA   EXCEPTION_INIT(no_user, -1918);

   FUNCTION Get_Default_Tablespace___ RETURN VARCHAR2
   IS
      tablespace_ VARCHAR2(128);
   BEGIN
      EXECUTE IMMEDIATE 'SELECT value FROM fnd_setting_tab WHERE parameter = ''TS_DEFAULT''' 
              INTO      tablespace_;
      
      RETURN NVL(tablespace_, 'USERS');
   EXCEPTION
      WHEN no_data_found THEN
         RETURN 'USERS';
   END Get_Default_Tablespace___;
   
   FUNCTION Get_Default_Temp_Tablespace___ RETURN VARCHAR2
   IS
      tablespace_ VARCHAR2(128);
   BEGIN
      EXECUTE IMMEDIATE 'SELECT value FROM fnd_setting_tab WHERE parameter = ''TS_TEMPORARY''' 
              INTO      tablespace_;
      
      RETURN NVL(tablespace_, 'TEMP');
   EXCEPTION
      WHEN no_data_found THEN
         RETURN 'TEMP';
   END Get_Default_Temp_Tablespace___;
   
   FUNCTION Get_Default_Profile___ RETURN VARCHAR2
   IS
      tablespace_ VARCHAR2(128);
   BEGIN
      EXECUTE IMMEDIATE 'SELECT value FROM fnd_setting_tab WHERE parameter = ''DEFAULT_PROFILE''' 
              INTO      tablespace_;
      
      RETURN NVL(tablespace_, 'DEFAULT');
   EXCEPTION
      WHEN no_data_found THEN
         RETURN 'DEFAULT';
   END Get_Default_Profile___;
   
   FUNCTION Check_Tablespace___ (
      tablespace_name_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_ NUMBER := 0;

      CURSOR get_ts IS
         SELECT 1
         FROM user_tablespaces
         WHERE tablespace_name = tablespace_name_;
   BEGIN
      OPEN get_ts;
      FETCH get_ts INTO dummy_;
      CLOSE get_ts;
      IF (dummy_ = 1) THEN
         RETURN(TRUE);
      ELSE
         RETURN(FALSE);
      END IF;
   END Check_Tablespace___;

   FUNCTION Check_Oracle_User_Exist___(
      fnd_user_identity IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_ NUMBER := 0;
      CURSOR get_oracle_user IS
         SELECT 1
         FROM dba_users
         WHERE username = fnd_user_identity;
   BEGIN
      OPEN get_oracle_user;
      FETCH get_oracle_user INTO dummy_;
      CLOSE get_oracle_user;
      IF (dummy_ = 1) THEN
         RETURN(TRUE);
      ELSE
         RETURN(FALSE);
      END IF;
   END Check_Oracle_User_Exist___;

   FUNCTION Is_Locked___ (
         userid_  IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_   NUMBER;
      CURSOR get_user IS
         SELECT 1
         FROM dba_users
         WHERE username = userid_
         AND account_status LIKE '%LOCKED%';
   BEGIN
      OPEN  get_user;
      FETCH get_user INTO dummy_;
      CLOSE get_user;
      IF (dummy_ = 1) THEN -- Account locked
         RETURN(TRUE);
      ELSE
         RETURN(FALSE);
      END IF;
   END Is_Locked___;

   PROCEDURE Grant_Roles___
        (userid_  IN VARCHAR2 )
   IS
      CURSOR get_roles IS
         SELECT *
         FROM FND_USER_ROLE_TAB t
         WHERE t.identity=userid_
         AND t.role
         NOT IN (
             SELECT t1.GRANTED_ROLE
             FROM dba_role_privs t1
             WHERE grantee = userid_);
   BEGIN
      FOR rec IN get_roles LOOP
         EXECUTE IMMEDIATE
            'GRANT "'||rec.role||'" TO "'||rec.Identity||'"';
      END LOOP;
   END Grant_Roles___;

BEGIN
   def_profile_  := Get_Default_Profile___;
   ts_default_   := Get_Default_Tablespace___;
   ts_temporary_ := Get_Default_Temp_Tablespace___;
   
   IF NOT Check_Tablespace___(ts_temporary_) THEN
      OPEN get_temp;
      FETCH get_temp INTO ts_temporary_;
      CLOSE get_temp;
   END IF;
   --
   FOR rec_ IN get_users LOOP
      DECLARE
         pwd_ VARCHAR2(16) := dbms_random.string('a',16);
      BEGIN
         IF NOT Check_Oracle_User_Exist___(rec_.identity) THEN            
            EXECUTE IMMEDIATE
                   'CREATE USER "'||rec_.identity||
                   '" IDENTIFIED BY "'|| pwd_ ||
                   '" PROFILE "'||def_profile_||
                   '" DEFAULT TABLESPACE '||ts_default_||
                   ' TEMPORARY TABLESPACE '||ts_temporary_ ||
                   ' PASSWORD EXPIRE';
	        Dbms_Output.Put_Line('Oracle account ' || rec_.identity|| ' created. This account will be linked with FndUser ' || rec_.identity || '.');
	     ELSE
		    Dbms_Output.Put_Line('Oracle account '|| rec_.identity||' already exists. This Oracle user will be linked with the fnduser '||rec_.identity);
         END IF;
		 
         IF (rec_.active = 'TRUE') THEN
            IF (Is_Locked___(rec_.identity)) THEN
               EXECUTE IMMEDIATE
                      'ALTER USER "'||rec_.identity||
                      '" ACCOUNT UNLOCK';
               Dbms_Output.Put_Line('Oracle account '|| rec_.identity||' unlocked as FndUser is Active.');
            END IF;
         ELSE
            IF (NOT Is_Locked___(rec_.identity)) THEN
               EXECUTE IMMEDIATE
                      'ALTER USER "'||rec_.identity||
                      '" ACCOUNT LOCK';
               Dbms_Output.Put_Line('Oracle account '|| rec_.identity||' locked as FndUser is Inactive.');
            END IF;
         END IF;		 
		 
         Grant_Roles___(rec_.identity);
      END;
   END LOOP;
   UPDATE fnd_user_tab
   SET oracle_user = identity
   WHERE oracle_user IS NULL;
   COMMIT;
END;
/

DECLARE
   CURSOR get_users IS
      SELECT *
      FROM fnd_user_tab t
      WHERE t.oracle_user IS NOT NULL;

   ifssys_  CONSTANT VARCHAR2(6) := 'IFSSYS';
   no_user  EXCEPTION;
   PRAGMA   EXCEPTION_INIT(no_user, -1918);

BEGIN
   FOR rec IN get_users LOOP
      BEGIN
         EXECUTE IMMEDIATE 'ALTER USER "'||rec.oracle_user||'"  GRANT CONNECT THROUGH '||ifssys_;
      EXCEPTION
         WHEN no_user THEN
            NULL;
      END;
   END LOOP;
END;
/

DECLARE
   column_     Installation_SYS.colrec;
   table_name_ VARCHAR2(30) := 'FND_USER_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ORACLE_USER', 'VARCHAR2(30)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_2');
PROMPT ADDING NEW COLUMNS TO TABLE SEARCH_DOMAIN_RUNTIME_TAB
-- Removal of globals
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SEARCH_DOMAIN_RUNTIME_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('TOTAL_TO_PROCESS', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('PROCESSED', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_3');
PROMPT ADDING NEW COLUMN TO TABLE TRANSACTION_SYS_LOCAL_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_LOCAL_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LONG_OP_ID', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('SLNO', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('SO_FAR', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('TOTAL_WORK', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_4');
PROMPT Creating tables and indexes for logical unit FndProfiler

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_PROFILER_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RUNID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'IDENTITY', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STATEMENT', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_PROFILER_TAB';
   index_name_ VARCHAR2(30) := 'FND_PROFILER_PK';
   rkidx_name_ VARCHAR2(30) := 'FND_PROFILER_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RUNID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_5');
PROMPT dropping obsolete VIEWS, INDEXES and PACKAGES related to mobile client
BEGIN
   Installation_SYS.Remove_View('MOBILE_CLIENT_PACKAGE', TRUE);
   Installation_SYS.Remove_Package('MOBILE_CLIENT_PACKAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_MOBILE_CLIENT_PKG_TAB');
   Installation_SYS.Rename_Table('FNDDR_MOBILE_CLIENT_PKG_TAB', 'FNDDR_MOBILE_CLIENT_PKG_OLD', TRUE);

   Installation_SYS.Remove_View('MOBILE_ENTITY_SYNCH', TRUE);
   Installation_SYS.Remove_Package('MOBILE_ENTITY_SYNCH_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDMOB_ENTITY_SYNCH_TAB');
   Installation_SYS.Rename_Table('FNDMOB_ENTITY_SYNCH_TAB', 'FNDMOB_ENTITY_SYNCH_OLD', TRUE);

   Installation_SYS.Remove_View('MOBILE_OPTIMIZER_DATA', TRUE);
   Installation_SYS.Remove_Package('MOBILE_OPTIMIZER_DATA_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDMOB_OPTIMIZER_DATA_TAB');
   Installation_SYS.Rename_Table('FNDMOB_OPTIMIZER_DATA_TAB', 'FNDMOB_OPTIMIZER_DATA_OLD', TRUE);

   Installation_SYS.Remove_View('MOBILE_USER_CACHE', TRUE);
   Installation_SYS.Remove_Package('MOBILE_USER_CACHE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDMOB_USER_CACHE_TAB');
   Installation_SYS.Rename_Table('FNDMOB_USER_CACHE_TAB', 'FNDMOB_USER_CACHE_OLD', TRUE);

   Installation_SYS.Remove_View('FNDRR_MOBILE_PKG_LOCATION', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_6');
PROMPT MODIFYING TABLE REPORT_PLUGIN_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_PLUGIN_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('PLUG_IN', 'VARCHAR2(10)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_7');
PROMPT MODIFYING TABLE REPORT_SYS_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_SYS_TAB';
BEGIN
   BEGIN
      UPDATE report_sys_tab
      SET rowversion = SYSDATE
      WHERE rowversion IS NULL;

      column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;

   BEGIN
      UPDATE report_sys_tab
      SET report_title = report_id
      WHERE report_title IS NULL;

      column_ := Installation_SYS.Set_Column_Values('REPORT_TITLE', 'VARCHAR2(50)', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;

   BEGIN
      UPDATE report_sys_tab
      SET report_mode = 'PLSQL1.2'
      WHERE report_mode IS NULL;

      column_ := Installation_SYS.Set_Column_Values('REPORT_MODE', 'VARCHAR2(20)', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;

   BEGIN
      UPDATE report_sys_tab
      SET life = 0
      WHERE life IS NULL;

      column_ := Installation_SYS.Set_Column_Values('LIFE', 'NUMBER', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_8');
PROMPT MODIFYING TABLE REPORT_SYS_COLUMN_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_SYS_COLUMN_TAB';
BEGIN
   BEGIN
      UPDATE report_sys_column_tab
      SET rowversion = SYSDATE
      WHERE rowversion IS NULL;

      column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;
   BEGIN
      column_ := Installation_SYS.Set_Column_Values('COLUMN_ID', 'NUMBER', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_9');
PROMPT MODIFYING TABLE REPORT_SYS_LAYOUT_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_SYS_LAYOUT_TAB';
BEGIN
   UPDATE report_sys_layout_tab
   SET layout_title = layout_name
   WHERE layout_title IS NULL;

   column_ := Installation_SYS.Set_Column_Values('LAYOUT_TITLE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_10');
PROMPT MODIFYING TABLE USER_GROUP_USER_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'USER_GROUP_USER_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('USER_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_11');
PROMPT Adding/modifying new COLUMNS IN REPORT_RESULT_GEN_CONFIG_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_RESULT_GEN_CONFIG_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ENABLE_CUSTOM_FIELDS', 'VARCHAR2(20)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE report_result_gen_config_tab
SET enable_custom_fields = 'TRUE'
WHERE enable_custom_fields IS NULL;

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_RESULT_GEN_CONFIG_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ENABLE_CUSTOM_FIELDS', 'VARCHAR2(20)','N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIY', column_, TRUE);
END;
/



exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_12');
PROMPT MODIFYING TABLE SERVER_LOG_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SERVER_LOG_TAB';
BEGIN
   UPDATE server_log_tab
   SET checked = 'FALSE'
   WHERE checked IS NULL;

   column_ := Installation_SYS.Set_Column_Values('CHECKED', 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_13');
PROMPT MODIFYING TABLE SEC_CHECKPOINT_LOG_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SEC_CHECKPOINT_LOG_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('USER_COMMENT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_14');
PROMPT PRINTED TABLE PRINT_JOB_CONTENTS_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRINT_JOB_CONTENTS_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('PRINTED', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_15');
PROMPT MODIFYING TABLE PRINT_JOB_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRINT_JOB_TAB';
BEGIN
   BEGIN
      UPDATE print_job_tab
      SET rowversion = SYSDATE
      WHERE rowversion IS NULL;

      column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;

   BEGIN
      column_ := Installation_SYS.Set_Column_Values('STATUS', 'VARCHAR2(30)', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;

   BEGIN
      UPDATE print_job_tab
      SET expire_date = rowversion
      WHERE expire_date IS NULL;

      column_ := Installation_SYS.Set_Column_Values('EXPIRE_DATE', 'DATE', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;

   BEGIN
      UPDATE print_job_tab
      SET routing_info = empty_clob()
      WHERE routing_info IS NULL;

      column_ := Installation_SYS.Set_Column_Values('ROUTING_INFO', 'CLOB', 'N');
      Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
   END;
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_16');
PROMPT MODIFYING TABLE ARCHIVE_DISTRIBUTION_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ARCHIVE_DISTRIBUTION_TAB';
BEGIN
   UPDATE ARCHIVE_DISTRIBUTION_TAB
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_17');
PROMPT MODIFYING TABLE ARCHIVE_FILE_NAME_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ARCHIVE_FILE_NAME_TAB';
BEGIN
   UPDATE ARCHIVE_FILE_NAME_TAB
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_18');
PROMPT MODIFYING TABLE ARCHIVE_PARAMETER_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ARCHIVE_PARAMETER_TAB';
BEGIN
   UPDATE ARCHIVE_PARAMETER_TAB
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_19');
PROMPT MODIFYING TABLE ARCHIVE_VARIABLE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ARCHIVE_VARIABLE_TAB';
BEGIN
   UPDATE ARCHIVE_VARIABLE_TAB
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_20');
PROMPT MODIFYING TABLE SITE_TEXT_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SITE_TEXT_TAB';
BEGIN
   UPDATE site_text_tab
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_21');
PROMPT MODIFYING TABLE WORKSPACE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WORKSPACE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('WORKSPACE_ID', 'VARCHAR2(120)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_CHANGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_CHANGE_TAB';
   rkidx_name_ VARCHAR2(30) := 'PRES_OBJECT_CHANGE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_TAB';
   rkidx_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_SEC_CHANGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_SEC_CHANGE_TAB';
   rkidx_name_ VARCHAR2(30) := 'PRES_OBJECT_SEC_CHANGE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_22');
PROMPT MODIFYING TABLE FNDRR_CLIENT_PROFILE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FNDRR_CLIENT_PROFILE_TAB';
BEGIN
   BEGIN
      UPDATE fndrr_client_profile_tab
      SET profile_name = '*'
      WHERE profile_name IS NULL;

      column_ := Installation_SYS.Set_Column_Values('PROFILE_NAME', 'VARCHAR2(200)', 'N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;
   BEGIN
      UPDATE fndrr_client_profile_tab
      SET text_id$ = SYS_GUID()
      WHERE text_id$ IS NULL;

      column_ := Installation_SYS.Set_Column_Values('TEXT_ID$', 'VARCHAR2(50)', 'N', 'SYS_GUID()');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   END;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_23');
PROMPT MODIFYING TABLE FNDRR_USER_CLIENT_PROFILE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FNDRR_USER_CLIENT_PROFILE_TAB';
BEGIN
   UPDATE fndrr_user_client_profile_tab
   SET ordinal = 0
   WHERE ordinal IS NULL;

   UPDATE fndrr_user_client_profile_tab
   SET enabled = 1
   WHERE enabled IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ORDINAL', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('ENABLED', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_24');
PROMPT MODIFYING TABLE NOTE_BOOK_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'NOTE_BOOK_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('NOTE_BOOK_KEY', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_25');
PROMPT MODIFYING TABLE LDAP_CONFIGURATION_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LDAP_CONFIGURATION_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('CONFIGURATION_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_26');
PROMPT MODIFYING TABLE FNDCN_RECURRENCE_AGENDA_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FNDCN_RECURRENCE_AGENDA_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('RECURRENCE_AGENDA_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_27');
PROMPT MODIFYING TABLE FND_SETTING_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_SETTING_TAB';
BEGIN
   UPDATE fnd_setting_tab
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_28');
PROMPT MODIFYING TABLE TRANSACTION_SYS_LOCAL_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_LOCAL_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_LOCAL_TAB';
BEGIN
   UPDATE transaction_sys_local_tab
   SET rowversion = 1
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_29');
PROMPT MODIFYING TABLE TRANSACTION_SYS_STATUS_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_STATUS_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_STATUS_TAB';
BEGIN
   UPDATE transaction_sys_status_tab
   SET rowversion = 1
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_30');
PROMPT MODIFYING TABLE LANGUAGE_SYS_IMP_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_SYS_IMP_TAB';
BEGIN
   UPDATE language_sys_imp_tab
   SET TYPE = 'Basic Data'
   WHERE TYPE IS NULL;

   column_ := Installation_SYS.Set_Column_Values('TYPE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_31');
PROMPT MODIFYING TABLE LANGUAGE_PROPERTY_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_PROPERTY_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_PROPERTY_TAB';
BEGIN
   UPDATE LANGUAGE_PROPERTY_TAB
   SET rowversion = 1
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_32');
PROMPT MODIFYING TABLE DISTRIBUTION_GROUP_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DISTRIBUTION_GROUP_TAB';
BEGIN
   UPDATE distribution_group_tab
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_33');
PROMPT MODIFYING TABLE DISTRIBUTION_GROUP_MEMBER_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DISTRIBUTION_GROUP_MEMBER_TAB';
BEGIN
   UPDATE distribution_group_member_tab
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_34');
PROMPT MODIFYING TABLE LOGICAL_PRINTER_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LOGICAL_PRINTER_TAB';
BEGIN
   UPDATE logical_printer_tab
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   UPDATE logical_printer_tab
   SET description = printer_id
   WHERE description IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_35');
PROMPT MODIFYING TABLE PDF_ARCHIVE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PDF_ARCHIVE_TAB';
BEGIN
   UPDATE pdf_archive_tab
   SET pdf = empty_blob()
   WHERE pdf IS NULL;

   column_ := Installation_SYS.Set_Column_Values('PDF', 'BLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_36');
PROMPT MODIFYING TABLE LANGUAGE_ATTRIBUTE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_ATTRIBUTE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_ATTRIBUTE_TAB';
BEGIN
   UPDATE LANGUAGE_ATTRIBUTE_TAB
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/



exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_37');
PROMPT MODIFYING TABLE LANGUAGE_CONTEXT_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
BEGIN
   UPDATE LANGUAGE_CONTEXT_TAB
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_38');
PROMPT MODIFYING TABLE ARCHIVE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ARCHIVE_TAB';
BEGIN
   UPDATE ARCHIVE_TAB
   SET rowversion = SYSDATE
   WHERE rowversion IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_39');
PROMPT MODIFYING TABLE FND_CODE_TEMPLATE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_CODE_TEMPLATE_TAB';
BEGIN
   UPDATE fnd_code_template_tab
   SET template = empty_clob()
   WHERE template IS NULL;

   column_ := Installation_SYS.Set_Column_Values('TEMPLATE', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_40');
PROMPT MODIFYING TABLE BINARY_OBJECT_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'BINARY_OBJECT_TAB';
   stmt_       VARCHAR2(2000) := 'UPDATE binary_object_tab SET length = null WHERE length IS NOT NULL';
BEGIN
   DECLARE
      invalid_identifier  EXCEPTION;
      PRAGMA              exception_init(invalid_identifier, -0904);
   BEGIN
      EXECUTE IMMEDIATE stmt_;
   EXCEPTION
      WHEN invalid_identifier THEN
         NULL;
   END;
   column_ := Installation_SYS.Set_Column_Values('LENGTH', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_41');
PROMPT MODIFYING TABLE FND_EVENT_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_TAB';
BEGIN
   UPDATE fnd_event_tab
   SET event_enable = 'FALSE'
   WHERE event_enable IS NULL;

   column_ := Installation_SYS.Set_Column_Values('EVENT_ENABLE', 'VARCHAR2(5)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_42');
PROMPT MODIFYING TABLE DICTIONARY_SYS_TAB
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'OBJSTATE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OBJKEY', 'VARCHAR2(4)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_43');
PROMPT MODIFYING TABLE CUSTOM_MENU_TEXT_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30)   := 'CUSTOM_MENU_TEXT_TAB';
   stmt_       VARCHAR2(2000) := 'UPDATE custom_menu_text_tab SET status_text = null WHERE status_text IS NOT NULL';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('STATUS_TEXT', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   DECLARE
      invalid_identifier  EXCEPTION;
      PRAGMA              exception_init(invalid_identifier, -0904);
   BEGIN
      EXECUTE IMMEDIATE stmt_;
   EXCEPTION
      WHEN invalid_identifier THEN
         NULL;
   END;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_44');
PROMPT MODIFYING TABLE REPLICATION_QUEUE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPLICATION_QUEUE_TAB';
BEGIN
   UPDATE replication_queue_tab
   SET rowstate = '<UPGRADE>'
   WHERE rowstate IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_45');
PROMPT MODIFYING TABLE OUT_MESSAGE_LINE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'OUT_MESSAGE_LINE_TAB';
BEGIN
   UPDATE out_message_line_tab
   SET rowstate = '<UPGRADE>'
   WHERE rowstate IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_46');
PROMPT MODIFYING TABLE IN_MESSAGE_LINE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'IN_MESSAGE_LINE_TAB';
BEGIN
   UPDATE in_message_line_tab
   SET rowstate = '<UPGRADE>'
   WHERE rowstate IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_47');
PROMPT MODIFYING TABLE OUT_MESSAGE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'OUT_MESSAGE_TAB';
BEGIN
   UPDATE out_message_tab
   SET rowstate = '<UPGRADE>'
   WHERE rowstate IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_48');
PROMPT MODIFYING TABLE IN_MESSAGE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'IN_MESSAGE_TAB';
BEGIN
   UPDATE in_message_tab
   SET rowstate = '<UPGRADE>'
   WHERE rowstate IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_49');
PROMPT MODIFYING TABLE FND_MONITOR_ENTRY_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_MONITOR_ENTRY_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('CATEGORY_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
EXCEPTION
   WHEN OTHERS THEN
      Dbms_Output.Put_Line('Cannot set the CATEGORY_ID column in FND_MONITOR_ENTRY_TAB to mandatory');
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_50');
PROMPT CREATING TABLE CLEANUP_TEMPORARY_DATA_TAB
DECLARE
   temp_ NUMBER;
   CURSOR check_exist IS
      SELECT 1
      FROM user_tables
      WHERE table_name = 'CLEANUP_TEMPORARY_DATA_TAB';
BEGIN
   OPEN check_exist;
   FETCH check_exist INTO temp_;
   IF check_exist%FOUND THEN
      CLOSE check_exist;
   ELSE
      CLOSE check_exist;
      EXECUTE IMMEDIATE
        'CREATE TABLE cleanup_temporary_data_tab (
            table_name  VARCHAR2(30) NOT NULL,
            column_name VARCHAR2(30) NOT NULL,
            age         NUMBER NOT NULL,
            user_name   VARCHAR2(30) NOT NULL,
            time_stamp  DATE NOT NULL)
         TABLESPACE &IFSAPP_DATA';

      EXECUTE IMMEDIATE
        'ALTER TABLE cleanup_temporary_data_tab
         ADD ( CONSTRAINT cleanup_temporary_data_pk PRIMARY KEY ( table_name)
         USING INDEX TABLESPACE &IFSAPP_INDEX)';
   END IF;
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PLSQLAP_BUFFER_TMP';
BEGIN
   Installation_SYS.Remove_Table(table_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'BUFFER', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TYP', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STATUS', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COMPOUND_ITEM', 'VARCHAR2(5)', 'N');
   Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'BUFFER', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO', 'NUMBER', 'N');
   Installation_SYS.Create_Index(table_name_, 'PLSQLAP_BUFFER_IX', columns_);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Create_Index(table_name_, 'PLSQLAP_BUFFER_IX2', columns_);
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_VIEW_COLUMN_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('TABLE_COLUMN_NAME', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('COLUMN_REFERENCE', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_51');
PROMPT CREATING TABLE CLEANUP_TEMPORARY_DATA_TAB
DECLARE
   temp_ NUMBER;
   CURSOR check_exist IS
      SELECT 1
      FROM user_tables
      WHERE table_name = 'CLEANUP_TEMPORARY_DATA_TAB';
BEGIN
   OPEN check_exist;
   FETCH check_exist INTO temp_;
   IF check_exist%FOUND THEN
      CLOSE check_exist;
   ELSE
      CLOSE check_exist;
      EXECUTE IMMEDIATE
        'CREATE TABLE cleanup_temporary_data_tab (
            table_name  VARCHAR2(30) NOT NULL,
            column_name VARCHAR2(30) NOT NULL,
            age         NUMBER NOT NULL,
            user_name   VARCHAR2(30) NOT NULL,
            time_stamp  DATE NOT NULL)
         TABLESPACE &IFSAPP_DATA';

      EXECUTE IMMEDIATE
        'ALTER TABLE cleanup_temporary_data_tab
         ADD ( CONSTRAINT cleanup_temporary_data_pk PRIMARY KEY ( table_name)
         USING INDEX TABLESPACE &IFSAPP_INDEX)';
   END IF;
END;
/


BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 103302)) THEN

		UPDATE custom_menu_tab t
		SET t.po_id = t.parameter
		WHERE t.custom_menu_type IN ('1', '2')
		AND EXISTS(SELECT 1 FROM pres_object_tab s WHERE s.po_id = t.parameter);

		UPDATE custom_menu_tab t
		SET t.po_id = NULL
		WHERE t.custom_menu_type IN ('1', '2')
		AND NOT EXISTS(SELECT 1 FROM pres_object_tab s WHERE s.po_id = t.parameter);

      Installation_SYS.Register_Db_Patch('&MODULE', 103302, 'Correcting the values for PO_ID in custom menus created before 92923.');
      COMMIT;
   END IF;
END;
/

BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 104983)) THEN

		UPDATE custom_menu_tab t
		SET t.po_id = t.window
		WHERE t.custom_menu_type IN ('10', '11', '12')
		AND t.po_id IS NULL;

      Installation_SYS.Register_Db_Patch('&MODULE', 104983, 'Setting default values for NULL PO_IDs');
      COMMIT;
   END IF;
END;
/

--------------------------------------------------------------------------------------------
-- 1. First rename the existing column to make room for the new one.
--------------------------------------------------------------------------------------------
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 103298)) THEN
      Installation_SYS.Rename_Column(table_name_, 'ACTION_PARAMETERS_103298', 'ACTION_PARAMETERS');
   END IF;
END;
/


--------------------------------------------------------------------------------------------
-- 2. Add the new column as a nullable clob.
--------------------------------------------------------------------------------------------
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 103298)) THEN
      column_ := Installation_SYS.Set_Column_Values('ACTION_PARAMETERS', 'CLOB', 'Y', NULL, 'LOB (ACTION_PARAMETERS) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
      Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
   END IF;
END;
/


--------------------------------------------------------------------------------------------
-- 3. Copy the data from old column to the new one.
--------------------------------------------------------------------------------------------
DECLARE
   stmt_  VARCHAR2(2000);
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 103298)) THEN
      stmt_ := '
         UPDATE fnd_event_action_tab
            SET action_parameters = action_parameters_103298
          WHERE action_parameters IS NULL';
       EXECUTE IMMEDIATE stmt_;
   END IF;
END;
/


--------------------------------------------------------------------------------------------
-- 4. Make the new column NOT NULL.
--------------------------------------------------------------------------------------------
DECLARE
   column_      Installation_SYS.ColRec;
   table_name_  VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
   column_name_ VARCHAR2(30) := 'ACTION_PARAMETERS';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 103298)) THEN
      column_ := Installation_SYS.Set_Column_Values(column_name_, 'CLOB', 'N', NULL, '(PCTVERSION 10)');
      Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
   END IF;
END;
/

--------------------------------------------------------------------------------------------
-- 5. Cleanup and register the patch after successful installation.
--------------------------------------------------------------------------------------------
DECLARE
   TYPE Ref_Cursor IS REF CURSOR;

   check_updated    Ref_Cursor;
   column_          Installation_SYS.ColRec;
   table_name_      VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
   stmt_            VARCHAR2(2000);
   dummy_           NUMBER;

   no_sync_on_table EXCEPTION;
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 103298)) THEN
      -- Safty net to see if the upgrade has run correctly
      stmt_ := '
         SELECT 1
           FROM fnd_event_action_tab
          WHERE to_char(action_parameters_103298) != dbms_lob.substr(action_parameters, 4000)
             OR dbms_lob.getlength(action_parameters) > 4000';

      OPEN  check_updated FOR  stmt_;
      FETCH check_updated INTO dummy_;
      CLOSE check_updated;

      IF dummy_ IS NOT NULL THEN
         RAISE no_sync_on_table;
      END IF;

      -- All values are copied to the new column: Time to remove the old one
      column_ := Installation_SYS.Set_Column_Values('ACTION_PARAMETERS_103298');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_, TRUE);

      -- Register the patch after successful installation
      Installation_SYS.Register_Db_Patch('&MODULE', 103298, 'New event action - field "To" can have only 100 characters');
   END IF;
EXCEPTION
   WHEN no_sync_on_table THEN
      dbms_output.put_line('NO_SYNC_ON_TABLE: Error while upgrading the table [ FND_EVENT_ACTION_TAB ].');
END;
/

COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_52');
PROMPT Correcting values set for event action parameter
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 108335)) THEN

		UPDATE fnd_event_action_tab t
		SET t.action_parameters = ' '
		WHERE t.action_parameters LIKE 'Dummy';

      Installation_SYS.Register_Db_Patch('&MODULE', 108335, 'Correcting the values of event action parameter from Dummy to whitespace.');
      COMMIT;
   END IF;
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TODO_ITEM_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'COMPLETED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COMPLETE_RESPONSE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COMPLETE_RESPONSE_OPTIONS', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COMPLETED_DATE', 'DATE','Y');
   Installation_SYS.Set_Table_Column(columns_, 'COMPLETED_BY', 'VARCHAR2(100)','Y');
   Installation_SYS.Alter_Table(table_name_, columns_);
END;
/


UPDATE pres_object_tab
   SET info_type = CASE UPPER(info_type)
                     WHEN 'AUTO' THEN 'Auto'
                     WHEN 'MANUAL' THEN 'Manual'
                     WHEN 'MODIFIED' THEN 'Modified'
                     ELSE 'Manual'
                   END
 WHERE info_type NOT IN ( 'Auto', 'Manual', 'Modified' )
/

BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 106173)) THEN
      Installation_SYS.Register_Db_Patch('&MODULE', 106173, 'Values for Info Type in Presentation Objects are not validated');
   END IF;
END;
/

COMMIT
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_53');
PROMPT Changing state Externally Executing of background jobs to ExternallyExecuting
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 107558)) THEN

		UPDATE transaction_sys_local_tab t
         SET t.state = 'ExternallyExecuting'
       WHERE t.state = 'Externally Executing';

      Installation_SYS.Register_Db_Patch('&MODULE', 107558, 'Changed state Externally Executing to ExternallyExecuting');
      COMMIT;
   END IF;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_54');
PROMPT ADDING PARAMETER USE_SSL to CONNECTOR SENDERS

INSERT INTO fndcn_config_param_tab (help_text, ordinal, instance_name, area_name, group_name, parameter_value, parameter_type, parameter_name, rowversion)
SELECT 'Enable if the mail server requires ssl', MAX(P.ordinal) + 1, P.instance_name, P.area_name, P.group_name, 'false', 'TypeBoolean', 'USE_SSL', 1 FROM fndcn_config_param_tab P
 WHERE P.area_name  = 'Integration'
   AND P.group_name = 'ConnectorReaders'
   AND P.instance_name = 'MAIL_READER1'
   AND EXISTS ( SELECT NULL
                  FROM fndcn_config_param_inst_tab I
                 WHERE I.area_name     = P.area_name
                   AND I.group_name    = P.group_name
                   AND I.instance_name = P.instance_name )
   AND NOT EXISTS ( SELECT NULL
                      FROM fndcn_config_param_tab R
                     WHERE R.area_name      = P.area_name
                       AND R.group_name     = P.group_name
                       AND R.instance_name  = P.instance_name
                       AND R.parameter_name = 'USE_SSL' )
 GROUP BY P.area_name, P.group_name, P.instance_name
/
INSERT INTO fndcn_config_param_tab (help_text, ordinal, instance_name, area_name, group_name, parameter_value, parameter_type, parameter_name, rowversion)
SELECT 'Enable if the mail server requires ssl', MAX(P.ordinal) + 1, P.instance_name, P.area_name, P.group_name, 'false', 'TypeBoolean', 'USE_SSL', 1 FROM fndcn_config_param_tab P
 WHERE P.area_name  = 'Integration'
   AND P.group_name = 'ConnectorSenders'
   AND P.instance_name = 'MAIL_SENDER1'
   AND EXISTS ( SELECT NULL
                  FROM fndcn_config_param_inst_tab I
                 WHERE I.area_name     = P.area_name
                   AND I.group_name    = P.group_name
                   AND I.instance_name = P.instance_name )
   AND NOT EXISTS ( SELECT NULL
                      FROM fndcn_config_param_tab R
                     WHERE R.area_name      = P.area_name
                       AND R.group_name     = P.group_name
                       AND R.instance_name  = P.instance_name
                       AND R.parameter_name = 'USE_SSL' )
 GROUP BY P.area_name, P.group_name, P.instance_name
/
COMMIT
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_55');
PROMPT Adding column Event_Trigger_Type to FndEvent

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('EVENT_TRIGGER_TYPE', 'VARCHAR2(20)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE FND_EVENT_TAB
SET event_trigger_type = 'AFTER'
WHERE event_trigger_type IS NULL
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('EVENT_TRIGGER_TYPE', 'VARCHAR2(20)','N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_56');
PROMPT Removing erroneous profile entries from personal profiles
BEGIN
	DELETE FROM fndrr_client_profile_value_tab
	WHERE (profile_id, profile_section) IN (SELECT profile_id, profile_section FROM fndrr_client_profile_value_tab
	WHERE profile_section LIKE 'User/Windows/Features/frm%/Layout%'
	AND profile_entry IN ('OutlineNames','Version')
	AND profile_id NOT IN (SELECT profile_id FROM fndrr_client_profile_tab WHERE owner IS NULL)
	GROUP BY profile_id, profile_section
	HAVING count(*) = 2
	MINUS
	SELECT profile_id, profile_section FROM fndrr_client_profile_value_tab
	WHERE profile_section LIKE 'User/Windows/Features/frm%/Layout%'
	AND profile_entry NOT IN ('OutlineNames','Version')
	GROUP BY profile_id, profile_section);

	Installation_SYS.Register_Db_Patch('&MODULE', 110462, 'Removing erroneous profile entries from personal profiles');
	COMMIT;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_57');
PROMPT Correcting values set for event action parameter
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 108335)) THEN

		UPDATE fnd_event_action_tab t
		SET t.action_parameters = ' '
		WHERE t.action_parameters LIKE 'Dummy';

      Installation_SYS.Register_Db_Patch('&MODULE', 108335, 'Correcting the values of event action parameter from Dummy to whitespace.');
      COMMIT;
   END IF;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_58');
PROMPT Correcting model file errors on FND_EVENT_ACTION_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
BEGIN
   UPDATE fnd_event_action_tab
      SET action_parameters = empty_clob()
    WHERE action_parameters IS NULL;

   column_ := Installation_SYS.Set_Column_Values('ACTION_PARAMETERS', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_59');
PROMPT Correcting model file errors on LANGUAGE_FILE_EXPORT_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_FILE_EXPORT_TAB';
BEGIN
   UPDATE language_file_export_tab
      SET exported_file = empty_clob()
    WHERE exported_file IS NULL;

   column_ := Installation_SYS.Set_Column_Values('EXPORTED_FILE', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_60');
PROMPT Correcting model file errors on LANGUAGE_FILE_IMPORT_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_FILE_IMPORT_TAB';
BEGIN
   UPDATE language_file_import_tab
      SET import_file = empty_clob()
    WHERE import_file IS NULL;

   column_ := Installation_SYS.Set_Column_Values('IMPORT_FILE', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_61');
PROMPT Modifying DEFAULT_LAYOUT_TYPE COLUMN IN REPORT_RESULT_GEN_CONFIG_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_RESULT_GEN_CONFIG_TAB';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', 109681)) THEN
      column_ := Installation_SYS.Set_Column_Values('DEFAULT_LAYOUT_TYPE', 'VARCHAR2(20)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);

      Installation_SYS.Register_Db_Patch('&MODULE', 109681, 'Set the DEFAULT_LAYOUT_TYPE Nullable');
      COMMIT;
   END IF;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_62');
PROMPT Creating TABLE for logical unit FndWorkflowConnection


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'EVENT_LU_NAME', 'VARCHAR2(25)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EVENT_ID', 'VARCHAR2(32)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OBJECT_KEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ITEM_ID', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CALLBACK_URL', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CORRELATION_ID', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_TAB';
   rkidx_name_ VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   dummy_       NUMBER;
   columns_     Installation_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_TAB';
   column_name_ VARCHAR2(30) := 'REQUEST_ID';
   CURSOR check_col IS
      SELECT 1
      FROM user_tab_columns
      WHERE table_name = table_name_
      AND column_name = column_name_;
BEGIN
   OPEN check_col;
   FETCH check_col INTO dummy_;
   IF check_col%FOUND THEN
      CLOSE check_col;
   ELSE
      CLOSE check_col;
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, column_name_, 'NUMBER', 'Y');
      Installation_SYS.Alter_Table (table_name_, columns_, TRUE);
   END IF;
END;
/

BEGIN
   Installation_SYS.Create_Sequence ('FND_WORKFLOW_CONNECTION_SEQ', 'MINVALUE 1 START WITH 1 INCREMENT BY 1');
END;
/

DECLARE
   columns_     Installation_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_TAB';
   request_id_ NUMBER;
   CURSOR get_rec IS
      SELECT ROWID
      FROM fnd_workflow_connection_tab
      WHERE request_id IS NULL;
BEGIN
   FOR rec_ IN get_rec LOOP
      SELECT fnd_workflow_connection_seq.NEXTVAL
      INTO request_id_
      FROM dual;
      UPDATE fnd_workflow_connection_tab
      SET request_id = request_id_
      WHERE ROWID = rec_.ROWID;
   END LOOP;
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'request_id', 'NUMBER', 'N');
   Installation_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REQUEST_ID', 'NUMBER', 'N');
   Installation_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_TAB';
   index_name_ VARCHAR2(30) := 'FND_WORKFLOW_CONNECTION_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REQUEST_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_63');
PROMPT Creating TABLE for logical unit FndWorkflowServer


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_WORKFLOW_SERVER_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'URL', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'USER_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASSWORD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_SERVER', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_WORKFLOW_SERVER_TAB';
   index_name_ VARCHAR2(30) := 'FND_WORKFLOW_SERVER_PK';
   rkidx_name_ VARCHAR2(30) := 'FND_WORKFLOW_SERVER_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_64');
PROMPT Adding required parameters to scheduled database task DATABASE_SYS.VALIDATE_INDEXES__

DECLARE
  CURSOR scheduled_jobs IS
     SELECT bs.schedule_id
     FROM batch_schedule_tab bs, batch_schedule_method_tab bsm
     WHERE bsm.method_name = 'DATABASE_SYS.VALIDATE_INDEXES__'
     AND bs.schedule_method_id = bsm.schedule_method_id;

  TYPE ScheduleId_Table IS TABLE OF batch_schedule_tab.schedule_id%TYPE;
  schedules_            ScheduleId_Table;
BEGIN
     OPEN  scheduled_jobs;
     FETCH scheduled_jobs BULK COLLECT INTO schedules_;
     CLOSE scheduled_jobs;

     IF (schedules_.count > 0) THEN
        FOR i_ IN schedules_.first..schedules_.last LOOP
          BEGIN
            INSERT INTO batch_schedule_par_tab (schedule_id, seq_no, name, value,rowversion)
                   VALUES (schedules_(i_), 1, 'MAX_ATTEMPTS_', '5',SYSDATE);
          EXCEPTION
             WHEN DUP_VAL_ON_INDEX THEN
                  NULL;
          END;

          BEGIN
            INSERT INTO batch_schedule_par_tab (schedule_id, seq_no, name, value,rowversion)
                   VALUES (schedules_(i_), 2, 'SLEEP_BEFORE_RETRY_SECONDS_', '10',SYSDATE);
          EXCEPTION
             WHEN DUP_VAL_ON_INDEX THEN
               NULL;
          END;
        END LOOP;
     END IF;
END;
/

COMMIT
/
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_65');
PROMPT Creating tables and indexes for logical unit FndClientLogon
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_CLIENT_LOGON_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SESSION_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NODE', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DIRECTORY_ID', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'OS_USER', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MACHINE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROGRAM', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_AGENT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SESSION_CREATED', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_CLIENT_LOGON_TAB';
   index_name_ VARCHAR2(30) := 'FND_CLIENT_LOGON_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SESSION_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_CLIENT_LOGON_TAB';
   index_name_ VARCHAR2(30) := 'FND_CLIENT_LOGON_IX';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DIRECTORY_ID');
   Installation_SYS.Set_Table_Column(columns_, 'OS_USER');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_66');
PROMPT Removing obsolete columns in REPORT_RULE_ACTION_TAB and REPORT_RULE_CONDITION_TAB


BEGIN

   IF Installation_SYS.Column_Exist('REPORT_RULE_ACTION_TAB','REPORT_ID') THEN
     Installation_SYS.Remove_Table('REPORT_RULE_ACTION_TAB');
   END IF;

   IF Installation_SYS.Column_Exist('REPORT_RULE_CONDITION_TAB','REPORT_ID') THEN
     Installation_SYS.Remove_Table('REPORT_RULE_CONDITION_TAB');
   END IF;

END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_67');
PROMPT Creating TABLE for logical unit ReportRuleDefinition

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_DEFINITION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLED', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRIORITY', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NO_MULTI', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_DEFINITION_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_RULE_DEFINITION_PK';
   rkidx_name_ VARCHAR2(30) := 'REPORT_RULE_DEFINITION_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_ACTION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_LIST', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLED', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_ACTION_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_RULE_ACTION_PK';
   rkidx_name_ VARCHAR2(30) := 'REPORT_RULE_ACTION_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/



DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'START_PARENT', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LOGICAL_OP', 'VARCHAR2(3)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EXPR1', 'VARCHAR2(400)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'OPERATOR', 'VARCHAR2(2)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'EXPR2', 'VARCHAR2(400)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'END_PARENT', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_PK';
   rkidx_name_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_68');
PROMPT Creating REPORT_RULE_CONDITION_SEQ sequence

DECLARE
   last_ NUMBER:=0;
BEGIN
   BEGIN
      SELECT NVL(MAX(TO_NUMBER(TRANSLATE(
             row_no USING CHAR_CS))),0) + 100
      INTO   last_
      FROM   report_rule_condition_tab;
   EXCEPTION
      WHEN OTHERS THEN null;
   END;
   BEGIN
      EXECUTE IMMEDIATE('CREATE SEQUENCE REPORT_RULE_CONDITION_SEQ START WITH ' || TO_CHAR(last_ + 1));
   EXCEPTION
      WHEN OTHERS THEN null;
   END;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_69');
PROMPT Creating REPORT_RULE_ACTION_SEQ sequence

DECLARE
   last_ NUMBER:=0;
BEGIN
   BEGIN
      SELECT NVL(MAX(TO_NUMBER(TRANSLATE(
             row_no USING CHAR_CS))),0) + 100
      INTO   last_
      FROM   report_rule_action_tab;
   EXCEPTION
      WHEN OTHERS THEN null;
   END;
   BEGIN
      EXECUTE IMMEDIATE('CREATE SEQUENCE REPORT_RULE_ACTION_SEQ START WITH ' || TO_CHAR(last_ + 1));
   EXCEPTION
      WHEN OTHERS THEN null;
   END;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_70');
PROMPT Creating TABLE for logical unit ReportRuleLog


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_LOG_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOG_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'EXECUTED', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRINT_JOB_ID', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_TYPE', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_LOG_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_RULE_LOG_PK';
   rkidx_name_ VARCHAR2(30) := 'REPORT_RULE_LOG_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOG_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_71');
PROMPT Creating REPORT_RULE_LOG_SEQ sequence

DECLARE
   last_ NUMBER:=0;
BEGIN
   BEGIN
      SELECT NVL(MAX(TO_NUMBER(TRANSLATE(
             log_id USING CHAR_CS))),0) + 100
      INTO   last_
      FROM   report_rule_log_tab;
   EXCEPTION
      WHEN OTHERS THEN null;
   END;
   BEGIN
      EXECUTE IMMEDIATE('CREATE SEQUENCE REPORT_RULE_LOG_SEQ START WITH ' || TO_CHAR(last_ + 1));
   EXCEPTION
      WHEN OTHERS THEN null;
   END;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_72');
PROMPT Creating TABLE for logical unit ReportLuDefinition

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_LU_DEFINITION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'BLOCK_XPATH', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_73');
PROMPT Creating INDEX for logical unit ReportLuDefinition

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_LU_DEFINITION_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_LU_DEFINITION_PK';
   rkidx_name_ VARCHAR2(30) := 'REPORT_LU_DEFINITION_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID');
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'BLOCK_XPATH');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_74');
PROMPT SET obsolete COLUMNS TO nullable

DECLARE
   column_ Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('FROM_MODULE', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('PRES_OBJECT_DEPENDENCY_TAB', 'M', column_);

   column_ := Installation_SYS.Set_Column_Values('MODULE', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('PRES_OBJECT_DEPENDENCY_TAB', 'M', column_);

   column_ := Installation_SYS.Set_Column_Values('MODULE', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('PRES_OBJECT_DEP_CHANGE_TAB', 'M', column_);

   column_ := Installation_SYS.Set_Column_Values('SOURCE_AREA', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('TRANSACTION_SYS_LOCAL_TAB', 'M', column_);

   column_ := Installation_SYS.Set_Column_Values('SOURCE_ID', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('TRANSACTION_SYS_LOCAL_TAB', 'M', column_);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_75');
PROMPT Dropping obsolete VIEWS, INDEXES and PACKAGES related to old Developer Studio model repository

BEGIN
   Installation_SYS.Remove_View('ACTIVITY_ENTITY_FILTER', TRUE);
   Installation_SYS.Remove_Package('ACTIVITY_ENTITY_FILTER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ACTIVITY_ENT_FILTR_TAB');
   Installation_SYS.Rename_Table('FNDDR_ACTIVITY_ENT_FILTR_TAB', 'FNDDR_ACTIVITY_ENT_FILTR_OLD', TRUE);

   Installation_SYS.Remove_View('ACTIVITY_ENTITY_USAGE', TRUE);
   Installation_SYS.Remove_Package('ACTIVITY_ENTITY_USAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ACTIVITY_ENT_USAGE_TAB');
   Installation_SYS.Rename_Table('FNDDR_ACTIVITY_ENT_USAGE_TAB', 'FNDDR_ACTIVITY_ENT_USAGE_OLD', TRUE);

   Installation_SYS.Remove_View('ACTIVITY_FNDDR', TRUE);
   Installation_SYS.Remove_Package('ACTIVITY_FNDDR_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ACTIVITY_TAB');
   Installation_SYS.Rename_Table('FNDDR_ACTIVITY_TAB', 'FNDDR_ACTIVITY_OLD', TRUE);

   Installation_SYS.Remove_View('ACTIVITY_PACKAGE', TRUE);
   Installation_SYS.Remove_Package('ACTIVITY_PACKAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ACTIVITY_PACKAGE_TAB');
   Installation_SYS.Rename_Table('FNDDR_ACTIVITY_PACKAGE_TAB', 'FNDDR_ACTIVITY_PACKAGE_OLD', TRUE);

   Installation_SYS.Remove_View('ACTIVITY_PACKAGE_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('ACTIVITY_PACKAGE_DIAGRAM_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ACTIVITY_PKG_DIAG_TAB');
   Installation_SYS.Rename_Table('FNDDR_ACTIVITY_PKG_DIAG_TAB', 'FNDDR_ACTIVITY_PKG_DIAG_OLD', TRUE);

   Installation_SYS.Remove_View('ATTRIBUTE_STATE_VALIDATION', TRUE);
   Installation_SYS.Remove_Package('ATTRIBUTE_STATE_VALIDATION_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ATTR_STAT_VALIDATION_TAB');
   Installation_SYS.Rename_Table('FNDDR_ATTR_STAT_VALIDATION_TAB', 'FNDDR_ATTR_STAT_VALIDATION_OLD', TRUE);

   Installation_SYS.Remove_View('ATTRIBUTE_VALIDATION_RULE', TRUE);
   Installation_SYS.Remove_Package('ATTRIBUTE_VALIDATION_RULE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ATTR_VALIDATION_RULE_TAB');
   Installation_SYS.Rename_Table('FNDDR_ATTR_VALIDATION_RULE_TAB', 'FNDDR_ATTR_VALIDATION_RULE_OLD', TRUE);

   Installation_SYS.Remove_View('CLIENT_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('CLIENT_DIAGRAM_API', TRUE);
   Installation_SYS.Rename_Table('FNDDR_CLIENT_DIAGRAM_TAB', 'FNDDR_CLIENT_DIAGRAM_OLD', TRUE);

   Installation_SYS.Remove_View('CLIENT_PACKAGE', TRUE);
   Installation_SYS.Remove_Package('CLIENT_PACKAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_CLIENT_PACKAGE_TAB');
   Installation_SYS.Rename_Table('FNDDR_CLIENT_PACKAGE_TAB', 'FNDDR_CLIENT_PACKAGE_OLD', TRUE);

   Installation_SYS.Remove_View('CLIENT_PLUG_IN', TRUE);
   Installation_SYS.Remove_Package('CLIENT_PLUG_IN_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_CLIENTPLUGIN_TAB');
   Installation_SYS.Rename_Table('FNDDR_CLIENTPLUGIN_TAB', 'FNDDR_CLIENTPLUGIN_OLD', TRUE);

   Installation_SYS.Remove_View('CLIENT_PLUG_IN_ACTIVITY', TRUE);
   Installation_SYS.Remove_Package('CLIENT_PLUG_IN_ACTIVITY_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_CLIENTPLUGIN_ACT_TAB');
   Installation_SYS.Rename_Table('FNDDR_CLIENTPLUGIN_ACT_TAB', 'FNDDR_CLIENTPLUGIN_ACT_OLD', TRUE);

   Installation_SYS.Remove_View('DETAIL_VALIDATION', TRUE);
   Installation_SYS.Remove_Package('DETAIL_VALIDATION_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_DETAIL_VALIDATION_TAB');
   Installation_SYS.Rename_Table('FNDDR_DETAIL_VALIDATION_TAB', 'FNDDR_DETAIL_VALIDATION_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY', TRUE);
   Installation_SYS.Remove_Package('ENTITY_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_TAB', 'FNDDR_ENTITY_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_ASSOCIATION', TRUE);
   Installation_SYS.Remove_Package('ENTITY_ASSOCIATION_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_ASSOCIATION_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_ASSOCIATION_TAB', 'FNDDR_ENTITY_ASSOCIATION_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_ASSOCIATION_ATTR', TRUE);
   Installation_SYS.Remove_Package('ENTITY_ASSOCIATION_ATTR_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_ASSO_ATTR_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_ASSO_ATTR_TAB', 'FNDDR_ENTITY_ASSO_ATTR_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_ASS_STATE_VALID', TRUE);
   Installation_SYS.Remove_Package('ENTITY_ASS_STATE_VALID_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ASSOC_STATE_VALID_TAB');
   Installation_SYS.Rename_Table('FNDDR_ASSOC_STATE_VALID_TAB', 'FNDDR_ASSOC_STATE_VALID_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_ATTRIBUTE', TRUE);
   Installation_SYS.Remove_Package('ENTITY_ATTRIBUTE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_ATTRIBUTE_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_ATTRIBUTE_TAB', 'FNDDR_ENTITY_ATTRIBUTE_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('ENTITY_DIAGRAM_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_DIAGRAM_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_DIAGRAM_TAB', 'FNDDR_ENTITY_DIAGRAM_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_PACKAGE', TRUE);
   Installation_SYS.Remove_Package('ENTITY_PACKAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_PACKAGE_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_PACKAGE_TAB', 'FNDDR_ENTITY_PACKAGE_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_PACKAGE_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('ENTITY_PACKAGE_DIAGRAM_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_PKG_DIAGRAM_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_PKG_DIAGRAM_TAB', 'FNDDR_ENTITY_PKG_DIAGRAM_OLD', TRUE);

   Installation_SYS.Remove_View('ENTITY_STATE', TRUE);
   Installation_SYS.Remove_Package('ENTITY_STATE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENTITY_STATE_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENTITY_STATE_TAB', 'FNDDR_ENTITY_STATE_OLD', TRUE);

   Installation_SYS.Remove_View('ENUMERATION_VALUE', TRUE);
   Installation_SYS.Remove_Package('ENUMERATION_VALUE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_ENUMERATION_VALUE_TAB');
   Installation_SYS.Rename_Table('FNDDR_ENUMERATION_VALUE_TAB', 'FNDDR_ENUMERATION_VALUE_OLD', TRUE);

   Installation_SYS.Remove_View('FEATURE', TRUE);
   Installation_SYS.Remove_Package('FEATURE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_FEATURE_TAB');
   Installation_SYS.Rename_Table('FNDDR_FEATURE_TAB', 'FNDDR_FEATURE_OLD', TRUE);

   Installation_SYS.Remove_View('FEATURE_ACTIVITY', TRUE);
   Installation_SYS.Remove_Package('FEATURE_ACTIVITY_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_FEATURE_ACTIVITY_TAB');
   Installation_SYS.Rename_Table('FNDDR_FEATURE_ACTIVITY_TAB', 'FNDDR_FEATURE_ACTIVITY_OLD', TRUE);

   Installation_SYS.Remove_View('FEATURE_WIDGET', TRUE);
   Installation_SYS.Remove_Package('FEATURE_WIDGET_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_FEATURE_WIDGET_TAB');
   Installation_SYS.Rename_Table('FNDDR_FEATURE_WIDGET_TAB', 'FNDDR_FEATURE_WIDGET_OLD', TRUE);

   Installation_SYS.Remove_View('FILTER', TRUE);
   Installation_SYS.Remove_Package('FILTER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_FILTER_TAB');
   Installation_SYS.Rename_Table('FNDDR_FILTER_TAB', 'FNDDR_FILTER_OLD', TRUE);

   Installation_SYS.Remove_View('FILTER_PARAMETER', TRUE);
   Installation_SYS.Remove_Package('FILTER_PARAMETER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_FILTER_PARAMETER_TAB');
   Installation_SYS.Rename_Table('FNDDR_FILTER_PARAMETER_TAB', 'FNDDR_FILTER_PARAMETER_OLD', TRUE);

   Installation_SYS.Remove_View('HANDLER', TRUE);
   Installation_SYS.Remove_Package('HANDLER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_HANDLER_TAB');
   Installation_SYS.Rename_Table('FNDDR_HANDLER_TAB', 'FNDDR_HANDLER_OLD', TRUE);

   Installation_SYS.Remove_View('HANDLER_METHOD', TRUE);
   Installation_SYS.Remove_Package('HANDLER_METHOD_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_HANDLER_METHOD_TAB');
   Installation_SYS.Rename_Table('FNDDR_HANDLER_METHOD_TAB', 'FNDDR_HANDLER_METHOD_OLD', TRUE);

   Installation_SYS.Remove_View('INDEX_COLUMN', TRUE);
   Installation_SYS.Remove_Package('INDEX_COLUMN_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_INDEX_COLUMN_TAB');
   Installation_SYS.Rename_Table('FNDDR_INDEX_COLUMN_TAB', 'FNDDR_INDEX_COLUMN_OLD', TRUE);

   Installation_SYS.Remove_View('J2EE_APPLICATION', TRUE);
   Installation_SYS.Remove_Package('J2EE_APPLICATION_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_J2EE_APPLICATION_TAB');
   Installation_SYS.Rename_Table('FNDDR_J2EE_APPLICATION_TAB', 'FNDDR_J2EE_APPLICATION_OLD', TRUE);

   Installation_SYS.Remove_View('J2EE_MODULE', TRUE);
   Installation_SYS.Remove_Package('J2EE_MODULE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_J2EE_MODULE_TAB');
   Installation_SYS.Rename_Table('FNDDR_J2EE_MODULE_TAB', 'FNDDR_J2EE_MODULE_OLD', TRUE);

   Installation_SYS.Remove_View('LOGICAL_UNIT', TRUE);
   Installation_SYS.Remove_Package('LOGICAL_UNIT_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_LOGICAL_UNIT_TAB');
   Installation_SYS.Rename_Table('FNDDR_LOGICAL_UNIT_TAB', 'FNDDR_LOGICAL_UNIT_OLD', TRUE);

   Installation_SYS.Remove_View('MAPPED_ENTITY', TRUE);
   Installation_SYS.Remove_Package('MAPPED_ENTITY_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_MAPPED_ENTITY_TAB');
   Installation_SYS.Rename_Table('FNDDR_MAPPED_ENTITY_TAB', 'FNDDR_MAPPED_ENTITY_OLD', TRUE);

   Installation_SYS.Remove_View('METHOD_FILTER', TRUE);
   Installation_SYS.Remove_Package('METHOD_FILTER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_METHOD_FILTER_TAB');
   Installation_SYS.Rename_Table('FNDDR_METHOD_FILTER_TAB', 'FNDDR_METHOD_FILTER_OLD', TRUE);

   Installation_SYS.Remove_View('METHOD_PARAMETER', TRUE);
   Installation_SYS.Remove_Package('METHOD_PARAMETER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_METHOD_PARAMETER_TAB');
   Installation_SYS.Rename_Table('FNDDR_METHOD_PARAMETER_TAB', 'FNDDR_METHOD_PARAMETER_OLD', TRUE);

   Installation_SYS.Remove_View('MODEL_IMPORT_LOG', TRUE);
   Installation_SYS.Remove_Package('MODEL_IMPORT_LOG_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_MODEL_IMPORT_LOG_TAB');
   Installation_SYS.Rename_Table('FNDDR_MODEL_IMPORT_LOG_TAB', 'FNDDR_MODEL_IMPORT_LOG_OLD', TRUE);

   Installation_SYS.Remove_View('MODEL_WORKSPACE', TRUE);
   Installation_SYS.Remove_Package('MODEL_WORKSPACE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_MODEL_WORKSPACE_TAB');
   Installation_SYS.Rename_Table('FNDDR_MODEL_WORKSPACE_TAB', 'FNDDR_MODEL_WORKSPACE_OLD', TRUE);

   Installation_SYS.Remove_View('MODULE_DEPENDENCY_FNDDR', TRUE);
   Installation_SYS.Remove_Package('MODULE_DEPENDENCY_FNDDR_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_MODULE_DEPENDENCY_TAB');
   Installation_SYS.Rename_Table('FNDDR_MODULE_DEPENDENCY_TAB', 'FNDDR_MODULE_DEPENDENCY_OLD', TRUE);

   Installation_SYS.Remove_View('MODULE_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('MODULE_DIAGRAM_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_MODULE_DIAGRAM_TAB');
   Installation_SYS.Rename_Table('FNDDR_MODULE_DIAGRAM_TAB', 'FNDDR_MODULE_DIAGRAM_OLD', TRUE);

   Installation_SYS.Remove_View('MODULE_FNDDR', TRUE);
   Installation_SYS.Remove_Package('MODULE_FNDDR_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_MODULE_TAB');
   Installation_SYS.Rename_Table('FNDDR_MODULE_TAB', 'FNDDR_MODULE_OLD', TRUE);

   Installation_SYS.Remove_View('PACKAGE_DEPENDENCY', TRUE);
   Installation_SYS.Remove_Package('PACKAGE_DEPENDENCY_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_PACKAGE_DEPENDENCY_TAB');
   Installation_SYS.Rename_Table('FNDDR_PACKAGE_DEPENDENCY_TAB', 'FNDDR_PACKAGE_DEPENDENCY_OLD', TRUE);

   Installation_SYS.Remove_View('PACKAGE_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('PACKAGE_DIAGRAM_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_PACKAGE_DIAGRAM_TAB');
   Installation_SYS.Rename_Table('FNDDR_PACKAGE_DIAGRAM_TAB', 'FNDDR_PACKAGE_DIAGRAM_OLD', TRUE);

   Installation_SYS.Remove_View('PARAMETER', TRUE);
   Installation_SYS.Remove_Package('PARAMETER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_PARAMETER_TAB');
   Installation_SYS.Rename_Table('FNDDR_PARAMETER_TAB', 'FNDDR_PARAMETER_OLD', TRUE);

   Installation_SYS.Remove_View('PLSQL_METHOD', TRUE);
   Installation_SYS.Remove_Package('PLSQL_METHOD_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_PLSQL_METHOD_TAB');
   Installation_SYS.Rename_Table('FNDDR_PLSQL_METHOD_TAB', 'FNDDR_PLSQL_METHOD_OLD', TRUE);

   Installation_SYS.Remove_View('PLSQL_PACKAGE', TRUE);
   Installation_SYS.Remove_Package('PLSQL_PACKAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_PLSQL_PACKAGE_TAB');
   Installation_SYS.Rename_Table('FNDDR_PLSQL_PACKAGE_TAB', 'FNDDR_PLSQL_PACKAGE_OLD', TRUE);

   Installation_SYS.Remove_View('PLSQL_PARAMETER', TRUE);
   Installation_SYS.Remove_Package('PLSQL_PARAMETER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_PLSQL_PARAMETER_TAB');
   Installation_SYS.Rename_Table('FNDDR_PLSQL_PARAMETER_TAB', 'FNDDR_PLSQL_PARAMETER_OLD', TRUE);

   Installation_SYS.Remove_View('PROJECT_SETTING', TRUE);
   Installation_SYS.Remove_Package('PROJECT_SETTING_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_PROJECT_SETTING_TAB');
   Installation_SYS.Rename_Table('FNDDR_PROJECT_SETTING_TAB', 'FNDDR_PROJECT_SETTING_OLD', TRUE);

   Installation_SYS.Remove_View('REPORT_PARAMETER', TRUE);
   Installation_SYS.Remove_Package('REPORT_PARAMETER_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_REPORT_PARAMETER_TAB');
   Installation_SYS.Rename_Table('FNDDR_REPORT_PARAMETER_TAB', 'FNDDR_REPORT_PARAMETER_OLD', TRUE);

   Installation_SYS.Remove_View('REPORT_TEXT', TRUE);
   Installation_SYS.Remove_Package('REPORT_TEXT_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_REPORT_TEXT_TAB');
   Installation_SYS.Rename_Table('FNDDR_REPORT_TEXT_TAB', 'FNDDR_REPORT_TEXT_OLD', TRUE);

   Installation_SYS.Remove_View('SERVER_PACKAGE', TRUE);
   Installation_SYS.Remove_Package('SERVER_PACKAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_SERVER_PACKAGE_TAB');
   Installation_SYS.Rename_Table('FNDDR_SERVER_PACKAGE_TAB', 'FNDDR_SERVER_PACKAGE_OLD', TRUE);

   Installation_SYS.Remove_View('SERV_PACKAGE_DEPENDENCY', TRUE);
   Installation_SYS.Remove_Package('SERV_PACKAGE_DEPENDENCY_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_SERV_PKG_DEPENDENCY_TAB');
   Installation_SYS.Rename_Table('FNDDR_SERV_PKG_DEPENDENCY_TAB', 'FNDDR_SERV_PKG_DEPENDENCY_OLD', TRUE);

   Installation_SYS.Remove_View('STATE_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('STATE_DIAGRAM_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_STATE_DIAGRAM_TAB');
   Installation_SYS.Rename_Table('FNDDR_STATE_DIAGRAM_TAB', 'FNDDR_STATE_DIAGRAM_OLD', TRUE);

   Installation_SYS.Remove_View('STATE_EVENT', TRUE);
   Installation_SYS.Remove_Package('STATE_EVENT_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_STATE_EVENT_TAB');
   Installation_SYS.Rename_Table('FNDDR_STATE_EVENT_TAB', 'FNDDR_STATE_EVENT_OLD', TRUE);

   Installation_SYS.Remove_View('STEREOTYPE', TRUE);
   Installation_SYS.Remove_Package('STEREOTYPE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_STEREOTYPE_TAB');
   Installation_SYS.Rename_Table('FNDDR_STEREOTYPE_TAB', 'FNDDR_STEREOTYPE_OLD', TRUE);

   Installation_SYS.Remove_View('STORAGE_ATTRIBUTE', TRUE);
   Installation_SYS.Remove_Package('STORAGE_ATTRIBUTE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_STORAGE_ATTRIBUTE_TAB');
   Installation_SYS.Rename_Table('FNDDR_STORAGE_ATTRIBUTE_TAB', 'FNDDR_STORAGE_ATTRIBUTE_OLD', TRUE);

   Installation_SYS.Remove_View('STORAGE_DIAGRAM', TRUE);
   Installation_SYS.Remove_Package('STORAGE_DIAGRAM_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_STORAGE_DIAGRAM_TAB');
   Installation_SYS.Rename_Table('FNDDR_STORAGE_DIAGRAM_TAB', 'FNDDR_STORAGE_DIAGRAM_OLD', TRUE);

   Installation_SYS.Remove_View('STORAGE_OBJECT', TRUE);
   Installation_SYS.Remove_Package('STORAGE_OBJECT_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_STORAGE_OBJECT_TAB');
   Installation_SYS.Rename_Table('FNDDR_STORAGE_OBJECT_TAB', 'FNDDR_STORAGE_OBJECT_OLD', TRUE);

   Installation_SYS.Remove_View('STORAGE_PACKAGE', TRUE);
   Installation_SYS.Remove_Package('STORAGE_PACKAGE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_STORAGE_PACKAGE_TAB');
   Installation_SYS.Rename_Table('FNDDR_STORAGE_PACKAGE_TAB', 'FNDDR_STORAGE_PACKAGE_OLD', TRUE);

   Installation_SYS.Remove_View('TABLE_INDEX', TRUE);
   Installation_SYS.Remove_Package('TABLE_INDEX_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_TABLE_INDEX_TAB');
   Installation_SYS.Rename_Table('FNDDR_TABLE_INDEX_TAB', 'FNDDR_TABLE_INDEX_OLD', TRUE);

   Installation_SYS.Remove_View('VALIDATION_OBJECT', TRUE);
   Installation_SYS.Remove_Package('VALIDATION_OBJECT_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_VALIDATION_OBJECT_TAB');
   Installation_SYS.Rename_Table('FNDDR_VALIDATION_OBJECT_TAB', 'FNDDR_VALIDATION_OBJECT_OLD', TRUE);

   Installation_SYS.Remove_View('VIEW_ASSOCIATION', TRUE);
   Installation_SYS.Remove_Package('VIEW_ASSOCIATION_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_VIEW_ASSOCIATION_TAB');
   Installation_SYS.Rename_Table('FNDDR_VIEW_ASSOCIATION_TAB', 'FNDDR_VIEW_ASSOCIATION_OLD', TRUE);

   Installation_SYS.Remove_View('VIEW_ATTRIBUTE', TRUE);
   Installation_SYS.Remove_Package('VIEW_ATTRIBUTE_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_VIEW_ATTRIBUTE_TAB');
   Installation_SYS.Rename_Table('FNDDR_VIEW_ATTRIBUTE_TAB', 'FNDDR_VIEW_ATTRIBUTE_OLD', TRUE);

   Installation_SYS.Remove_View('VIEW_FNDDR', TRUE);
   Installation_SYS.Remove_Package('VIEW_FNDDR_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_VIEW_TAB');
   Installation_SYS.Rename_Table('FNDDR_VIEW_TAB', 'FNDDR_VIEW_OLD', TRUE);

   Installation_SYS.Remove_Package('VIEW_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('FND_WORKSPACE_UTIL_API', TRUE);

   Installation_SYS.Remove_Package('CLIENT_PACKAGE_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('CLIENT_PLUG_IN_TYPE_API', TRUE);    
   Installation_SYS.Remove_Package('ENTITY_CATEGORY_API', TRUE);
   Installation_SYS.Remove_Package('ENTITY_STATES_API', TRUE);
   Installation_SYS.Remove_Package('ENTITY_STATE_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('ENTITY_USAGE_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('FEATURE_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('METHOD_IMPLEMENTATION_API', TRUE);
   Installation_SYS.Remove_Package('QUEUE_TYPES_API', TRUE);
   Installation_SYS.Remove_Package('STORAGE_OBJECT_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('STORAGE_OPERATION_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('TRANSACTIONAL_BEHAVIOR_API', TRUE);
   Installation_SYS.Remove_Package('UPDATE_ACTION_TYPE_API', TRUE);
   Installation_SYS.Remove_Package('UPDATE_OBJECT_TYPE_API', TRUE);

   Installation_SYS.Remove_View('WIDGET', TRUE);
   Installation_SYS.Remove_Package('WIDGET_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_WIDGET_TAB');
   Installation_SYS.Rename_Table('FNDDR_WIDGET_TAB', 'FNDDR_WIDGET_OLD', TRUE);

   Installation_SYS.Remove_View('WIDGET_ACTIVITY', TRUE);
   Installation_SYS.Remove_Package('WIDGET_ACTIVITY_API', TRUE);
   Installation_SYS.Remove_Indexes('FNDDR_WIDGET_ACTIVITY_TAB');
   Installation_SYS.Rename_Table('FNDDR_WIDGET_ACTIVITY_TAB', 'FNDDR_WIDGET_ACTIVITY_OLD', TRUE);

   Installation_SYS.Remove_View('WORKSPACE', TRUE);
   Installation_SYS.Remove_Package('WORKSPACE_API', TRUE);
   Installation_SYS.Remove_Indexes('WORKSPACE_TAB');
   Installation_SYS.Rename_Table('WORKSPACE_TAB', 'WORKSPACE_OLD', TRUE);

   Installation_SYS.Remove_View('FNDRR_ACTIVITY', TRUE);
   Installation_SYS.Remove_View('FNDRR_ACTIVITY_PACKAGE', TRUE);
   Installation_SYS.Remove_View('FNDRR_ACTIVITY_URL', TRUE);
   Installation_SYS.Remove_View('FNDRR_ASSOCIATION_ATTR_CONN', TRUE);
   Installation_SYS.Remove_View('FNDRR_ENTITY_ACTIVITY_SYNC', TRUE);
   Installation_SYS.Remove_View('FNDRR_ENTITY_ACTIVITY_URL', TRUE);
   Installation_SYS.Remove_View('FNDRR_ENTITY_ASSOCIATION', TRUE);
   Installation_SYS.Remove_View('FNDRR_MODULE', TRUE);
   Installation_SYS.Remove_View('FNDRR_REPORT_AGGREGATE', TRUE);
   Installation_SYS.Remove_View('FNDRR_REPORT_ATTRIBUTE', TRUE);
   Installation_SYS.Remove_View('FNDRR_REPORT_DEFINITION', TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_76');
PROMPT Renaming COLUMN entity_state TO rowstate IN Term tables

DECLARE
   dummy_        NUMBER;
   table_name_   VARCHAR2(30) := 'TERM_TAB';
   new_col_name_ VARCHAR2(30) := 'ROWSTATE';
   old_col_name_ VARCHAR2(30) := 'ENTITY_STATE';
   column_       Installation_SYS.ColRec;
   CURSOR check_col IS
      SELECT 1
      FROM user_tab_columns
      WHERE table_name = table_name_
      AND column_name = old_col_name_;
BEGIN
   OPEN check_col;
   FETCH check_col INTO dummy_;
   IF check_col%FOUND THEN
      CLOSE check_col;
      Installation_SYS.Rename_Column(table_name_, new_col_name_, old_col_name_, TRUE);
   ELSE
      CLOSE check_col;
   END IF;
   column_ := Installation_SYS.Set_Column_Values(new_col_name_, 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

DECLARE
   dummy_        NUMBER;
   table_name_   VARCHAR2(30) := 'TERM_TRANSLATED_DEFINITION_TAB';
   new_col_name_ VARCHAR2(30) := 'ROWSTATE';
   old_col_name_ VARCHAR2(30) := 'ENTITY_STATE';
   column_       Installation_SYS.ColRec;
   CURSOR check_col IS
      SELECT 1
      FROM user_tab_columns
      WHERE table_name = table_name_
      AND column_name = old_col_name_;
BEGIN
   OPEN check_col;
   FETCH check_col INTO dummy_;
   IF check_col%FOUND THEN
      CLOSE check_col;
      Installation_SYS.Rename_Column(table_name_, new_col_name_, old_col_name_, TRUE);
   ELSE
      CLOSE check_col;
   END IF;
   column_ := Installation_SYS.Set_Column_Values(new_col_name_, 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

DECLARE
   dummy_        NUMBER;
   table_name_   VARCHAR2(30) := 'TERM_TRANSLATED_NAME_TAB';
   new_col_name_ VARCHAR2(30) := 'ROWSTATE';
   old_col_name_ VARCHAR2(30) := 'ENTITY_STATE';
   column_       Installation_SYS.ColRec;
   CURSOR check_col IS
      SELECT 1
      FROM user_tab_columns
      WHERE table_name = table_name_
      AND column_name = old_col_name_;
BEGIN
   OPEN check_col;
   FETCH check_col INTO dummy_;
   IF check_col%FOUND THEN
      CLOSE check_col;
      Installation_SYS.Rename_Column(table_name_, new_col_name_, old_col_name_, TRUE);
   ELSE
      CLOSE check_col;
   END IF;
   column_ := Installation_SYS.Set_Column_Values(new_col_name_, 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

DECLARE
   dummy_        NUMBER;
   table_name_   VARCHAR2(30) := 'TERM_USAGE_DEFINITION_TAB';
   new_col_name_ VARCHAR2(30) := 'ROWSTATE';
   old_col_name_ VARCHAR2(30) := 'ENTITY_STATE';
   column_       Installation_SYS.ColRec;
   CURSOR check_col IS
      SELECT 1
      FROM user_tab_columns
      WHERE table_name = table_name_
      AND column_name = old_col_name_;
BEGIN
   OPEN check_col;
   FETCH check_col INTO dummy_;
   IF check_col%FOUND THEN
      CLOSE check_col;
      Installation_SYS.Rename_Column(table_name_, new_col_name_, old_col_name_, TRUE);
   ELSE
      CLOSE check_col;
   END IF;
   column_ := Installation_SYS.Set_Column_Values(new_col_name_, 'VARCHAR2(20)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_77');
PROMPT Dropping obsolete VIEWS

BEGIN
   Installation_SYS.Remove_View('FNDCN_MESSAGE_QUEUE', TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_78');
PROMPT Dropping obsolete LUs Note AND Notebook

BEGIN
   Installation_SYS.Remove_View('NOTE', TRUE);
   Installation_SYS.Remove_Package('NOTE_API', TRUE);
   Installation_SYS.Remove_Indexes('NOTE_TAB');
   Installation_SYS.Rename_Table('NOTE_TAB', 'NOTE_OLD', TRUE);

   Installation_SYS.Remove_View('NOTE_BOOK', TRUE);
   Installation_SYS.Remove_Package('NOTE_BOOK_API', TRUE);
   Installation_SYS.Remove_Indexes('NOTE_BOOK_TAB');
   Installation_SYS.Rename_Table('NOTE_BOOK_TAB', 'NOTE_BOOK_OLD', TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_79');
PROMPT ADDING NEW COLUMN TO TABLE QUICK_REPORT_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'QUICK_REPORT_TAB';
BEGIN
   IF ( NOT Installation_SYS.Column_Exist(table_name_, 'ROW_TYPE' ) ) THEN
      column_ := Installation_SYS.Set_Column_Values('ROW_TYPE', 'VARCHAR(100)', 'Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;

   IF ( NOT Installation_SYS.Column_Exist(table_name_, 'QUERY' ) ) THEN
      column_ := Installation_SYS.Set_Column_Values('QUERY', 'CLOB', 'Y', NULL, 'LOB (query) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
      Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
   END IF;

   IF ( Installation_SYS.Get_Column_Type(table_name_, 'SQL_EXPRESSION') = 'VARCHAR2' ) THEN
      -- rename old column
      Installation_SYS.Rename_Column(table_name_, 'SQL_EX_OLD', 'SQL_EXPRESSION', TRUE);

      -- add new clob column
      column_ := Installation_SYS.Set_Column_Values('SQL_EXPRESSION', 'CLOB', 'Y', NULL, 'LOB (SQL_EXPRESSION) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
      Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   END IF;
END;
/

DECLARE
  column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'QUICK_REPORT_TAB';
BEGIN
   IF ( Installation_SYS.Column_Exist(table_name_, 'SQL_EX_OLD' ) ) THEN
      -- move existing data to new column
      EXECUTE IMMEDIATE 'UPDATE QUICK_REPORT_TAB SET SQL_EXPRESSION = SQL_EX_OLD';

      -- Drop old column
      column_ := Installation_SYS.Set_Column_Values('SQL_EX_OLD', 'VARCHAR(4000)', 'Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
   END IF;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_80');
PROMPT Adding HUD reposiory

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('VALUE', 'CLOB', 'Y', NULL, 'LOB (VALUE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_TAB';
   index_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_TAB';
   index_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_DATA_SOURCE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('VALUE', 'CLOB', 'Y', NULL, 'LOB (VALUE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_DATA_SOURCE_TAB';
   index_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_DATA_SOURCE_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_DATA_SOURCE_TAB';
   index_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_DATA_SOURCE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_ELEMENT_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('VALUE', 'CLOB', 'Y', NULL, 'LOB (VALUE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_ELEMENT_TAB';
   index_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_ELEMENT_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_ELEMENT_TAB';
   index_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_ELEMENT_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_81');
PROMPT Correcting BasicDataTranslation Path data, remove trailing '~'

UPDATE language_sys_tab
   SET path = Substr(path, 1, length(path)-1)
   WHERE TYPE LIKE 'Basic Data'
   AND path LIKE '%~'
/



exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_82');
PROMPT Changing ENABLED_WHEN column on CUSTOM_MENU_TAB to a CLOB

DECLARE

   CURSOR Get_Column_Type IS
   select data_type  from user_tab_columns c
   where c.TABLE_NAME = 'CUSTOM_MENU_TAB'
   and c.COLUMN_NAME = 'ENABLED_WHEN';

   data_type_   VARCHAR2(50) := NULL;

   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOM_MENU_TAB';

   stmt_  VARCHAR2(2000);
BEGIN
   OPEN Get_Column_Type;
   FETCH Get_Column_Type INTO data_type_;
   CLOSE Get_Column_Type;

   IF data_type_ = 'VARCHAR2' THEN

    -- Rename column
    Installation_SYS.Rename_Column(table_name_, 'ENABLED_WHEN_TMP', 'ENABLED_WHEN');

    -- Add clob column
    column_ := Installation_SYS.Set_Column_Values('ENABLED_WHEN', 'CLOB', 'Y', NULL, 'LOB (ENABLED_WHEN) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
    Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

    -- Update data. This keeps any old SAL Code so it can be used as reference when defining the new conditions. Old Sal code will be ignored in runtime.
    stmt_ := '
          UPDATE CUSTOM_MENU_TAB
          SET ENABLED_WHEN = ENABLED_WHEN_TMP
          WHERE ENABLED_WHEN IS NULL';
    EXECUTE IMMEDIATE stmt_;

    -- Remove temporary column
    column_ := Installation_SYS.Set_Column_Values('ENABLED_WHEN_TMP');
    Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_, TRUE);

   END IF;
END;
/



exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_83');
PROMPT USER_QUICK_REPORT_TAB

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'USER_QUICK_REPORT_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TITLE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROW_TYPE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'OWNER', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('SQL_EXPRESSION', 'CLOB', 'N', NULL, 'LOB (sql_expression) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('QUERY', 'CLOB', 'N', NULL, 'LOB (query) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'USER_QUICK_REPORT_TAB';
   index_name_ VARCHAR2(30) := 'USER_QUICK_REPORT_PK';
   rkidx_name_ VARCHAR2(30) := 'USER_QUICK_REPORT_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'BATCH_SCHEDULE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('EXECUTION_TIME', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('TIMED_EXECUTIONS', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CHECK_EXECUTING', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE batch_schedule_tab
SET check_executing = 'FALSE'
WHERE check_executing IS NULL
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'BATCH_SCHEDULE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('CHECK_EXECUTING', 'VARCHAR2(5)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


UPDATE batch_schedule_tab b
   SET check_executing = 'TRUE'
 WHERE b.schedule_id IN
  (SELECT synchronize_task_ref
     FROM search_domain_runtime_tab a
    WHERE a.synchronize_task_ref IS NOT NULL)
/

UPDATE batch_schedule_tab b
   SET check_executing = 'TRUE'
 WHERE b.schedule_id IN
  (SELECT optimize_task_ref
     FROM search_domain_runtime_tab a
    WHERE a.optimize_task_ref IS NOT NULL)
/

UPDATE batch_schedule_tab b
   SET check_executing = 'TRUE'
 WHERE b.schedule_id IN
  (SELECT rebuild_task_ref
     FROM search_domain_runtime_tab a
    WHERE a.rebuild_task_ref IS NOT NULL)
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_84');
PROMPT Adding LU FndLayer

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_LAYER_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Set_Table_Column(columns_, 'USE_FOR_DEVELOPMENT', 'NUMBER', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_LAYER_TAB';
   index_name_ VARCHAR2(30) := 'FND_LAYER_PK';
   rkidx_name_ VARCHAR2(30) := 'FND_LAYER_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_85');
PROMPT Adding TABLE TO LanguageTranslation

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_TRANSLATION_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LAST_UPDATE', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('REJECT_STATUS', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('REJECT_INFORMATION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CASE_ID', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_86');
PROMPT Adding TABLE TO TermTranslatedName

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TERM_TRANSLATED_NAME_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('REJECT_STATUS', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('REJECT_INFORMATION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CASE_ID', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_87');
PROMPT Dropping AND recreating PresObjectBuild TABLES


BEGIN
   Installation_SYS.Remove_Table('PRES_OBJECT_BUILD_TAB');
   Installation_SYS.Remove_Table('PRES_OBJECT_SECURITY_BUILD_TAB');
   Installation_SYS.Remove_Table('PRES_OBJECT_DEP_BUILD_TAB');
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_BUILD_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_TYPE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION_PROG', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ALLOW_READ_ONLY', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_BUILD_TAB';
   index_name_ VARCHAR2(30) := 'PRES_OBJECT_BUILD_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PO_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_SECURITY_BUILD_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEC_OBJECT', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_SEC_SUB_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEC_OBJECT_TYPE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_SECURITY_BUILD_TAB';
   index_name_ VARCHAR2(30) := 'PRES_OBJECT_SECURITY_BUILD_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PO_ID');
   Installation_SYS.Set_Table_Column(columns_, 'SEC_OBJECT');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- TABLE DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_BUILD_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_DEP_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INFO_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_BUILD_TAB';
   index_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_BUILD_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PO_ID');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PO_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_DEP_TYPE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_88');
PROMPT Adding LayerId TO PresObject
-- PresObject
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LAYER_ID', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

BEGIN
   EXECUTE IMMEDIATE 'UPDATE pres_object_tab SET layer_id = ''Core'' WHERE layer_id IS NULL';
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LAYER_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_SEQ', '', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', '', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

-----------------------------------------------------------------------------
-------------------- TABLE DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_DEP_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INFO_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_89');
PROMPT Remove duplicates from PRES_OBJECT_DEP_CHANGE_TAB
BEGIN
        EXECUTE IMMEDIATE '
           BEGIN
              LOOP
                 DELETE FROM pres_object_dep_change_tab
                 WHERE  pres_object_seq IN (SELECT MAX(pres_object_seq)
                                            FROM   pres_object_dep_change_tab
                                            GROUP  BY from_po_id,
                                                      to_po_id,
                                                      pres_object_dep_type
                                            HAVING COUNT(*) > 1);
                                            
                 EXIT WHEN NVL(SQL%ROWCOUNT,0) <= 0;
              END LOOP;
           END;';
EXCEPTION
   WHEN OTHERS THEN
      NULL;
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_TAB';
   index_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PO_ID');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PO_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_DEP_TYPE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_TAB';
   index_name_ VARCHAR2(30) := 'PRES_OBJECT_DEP_CHANGE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_90');
PROMPT Remove duplicates from PRES_OBJECT_DEPENDENCY_TAB
BEGIN
        EXECUTE IMMEDIATE '
           BEGIN
              LOOP
                 DELETE FROM pres_object_dependency_tab
                 WHERE  pres_object_seq IN (SELECT MAX(pres_object_seq)
                                            FROM   pres_object_dependency_tab
                                            GROUP  BY from_po_id,
                                                      to_po_id,
                                                      pres_object_dep_type
                                            HAVING COUNT(*) > 1);
                                            
                 EXIT WHEN NVL(SQL%ROWCOUNT,0) <= 0;
              END LOOP;
           END;';
EXCEPTION
   WHEN OTHERS THEN
      NULL;
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEPENDENCY_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_SEQ', '', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', '', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

-----------------------------------------------------------------------------
-------------------- TABLE DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEPENDENCY_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PO_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_DEP_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INFO_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEPENDENCY_TAB';
   index_name_ VARCHAR2(30) := 'PRES_OBJECT_DEPENDENCY_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PO_ID');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PO_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PRES_OBJECT_DEP_TYPE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PRES_OBJECT_DEPENDENCY_TAB';
   index_name_ VARCHAR2(30) := 'PRES_OBJECT_DEPENDENCY_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/



DECLARE
   columns_     Installation_SYS.ColumnTabType;
   object_name_ VARCHAR2(30) := 'SEARCH_DOMAIN_STATE_TYPE';
BEGIN
   Installation_SYS.Remove_Type(object_name_, TRUE);
   Installation_SYS.Set_Table_Column(columns_, 'SEARCH_DOMAIN', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'INDEX_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TEXT_KEY', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TEXT', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'DATE', 'Y');
   Installation_SYS.Create_Or_Replace_Type(object_name_, columns_, TRUE);
END;
/


DECLARE
   collection_name_ VARCHAR2(30) := 'SEARCH_DOMAIN_STATES_TYPE';
BEGIN
   Installation_SYS.Create_Or_Replace_Type(collection_name_, 'SEARCH_DOMAIN_STATE_TYPE', TRUE);
END;
/


DECLARE
   columns_     Installation_SYS.ColumnTabType;
   object_name_ VARCHAR2(30) := 'SEARCH_DOMAIN_QUERY_TYPE';
BEGIN
   Installation_SYS.Remove_Type(object_name_, TRUE);
   Installation_SYS.Set_Table_Column(columns_, 'SEARCH_DOMAIN', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TITLE', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRIMARY_KEY', 'VARCHAR2(32000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SNIPPET', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RANK', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ORDERING', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_LIST', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'HITS', 'NUMBER', 'Y');
   Installation_SYS.Create_Or_Replace_Type(object_name_, columns_, TRUE);
END;
/


DECLARE
   collection_name_ VARCHAR2(30) := 'SEARCH_DOMAIN_QUERIES_TYPE';
BEGIN
   Installation_SYS.Create_Or_Replace_Type(collection_name_, 'SEARCH_DOMAIN_QUERY_TYPE', TRUE);
END;
/


DECLARE
   columns_     Installation_SYS.ColumnTabType;
   object_name_ VARCHAR2(30) := 'AVAILABLE_SEARCH_DOMAIN_TYPE';
BEGIN
   Installation_SYS.Remove_Type(object_name_, TRUE);
   Installation_SYS.Set_Table_Column(columns_, 'SEARCH_DOMAIN', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STORAGE_OBJECT_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COLUMN_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL_B2B', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL_WIN', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL_RWC', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_LIST', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USED_IN_SEARCH_METHOD', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SEARCH_DOMAIN_TYPE', 'VARCHAR2(6)', 'Y');
   Installation_SYS.Create_Or_Replace_Type(object_name_, columns_, TRUE);
END;
/


DECLARE
   collection_name_ VARCHAR2(30) := 'AVAILABLE_SEARCH_DOMAINS_TYPE';
BEGIN
   Installation_SYS.Create_Or_Replace_Type(collection_name_, 'AVAILABLE_SEARCH_DOMAIN_TYPE', TRUE);
END;
/


BEGIN
   BEGIN
      Ctx_Ddl.Drop_Policy('BLOB_POLICY');
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
   Ctx_Ddl.Create_Policy('BLOB_POLICY', 'CTXSYS.AUTO_FILTER');
   BEGIN
      Ctx_Ddl.Drop_Section_Group('APPLICATION_SEARCH');
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
   Ctx_Ddl.Create_Section_Group('APPLICATION_SEARCH', 'AUTO_SECTION_GROUP');
   BEGIN
      Ctx_Ddl.Drop_Preference('APPLICATION_SEARCH_LEXER');
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
   Ctx_Ddl.Create_Preference('APPLICATION_SEARCH_LEXER', 'BASIC_LEXER');
   Ctx_Ddl.Set_Attribute('APPLICATION_SEARCH_LEXER', 'PRINTJOINS', '_');
   BEGIN
      Ctx_Ddl.Drop_Preference('APPLICATION_SEARCH_STORAGE');
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
   Ctx_Ddl.Create_preference('APPLICATION_SEARCH_STORAGE', 'BASIC_STORAGE');
   Ctx_Ddl.Set_attribute('APPLICATION_SEARCH_STORAGE','FORWARD_INDEX','TRUE');
   Ctx_Ddl.Set_attribute('APPLICATION_SEARCH_STORAGE','SAVE_COPY','PLAINTEXT');
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_91');
PROMPT Adding column RefreshUi to CustomMenu.

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOM_MENU_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('REFRESH_UI', 'VARCHAR2(20)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_92');
PROMPT Set RefreshUi to TRUE for PL/SQL Block menus where RefreshUi is not yet set

BEGIN
   UPDATE CUSTOM_MENU_TAB
     SET REFRESH_UI = 'TRUE'
     WHERE CUSTOM_MENU_TYPE = '12'
       AND REFRESH_UI = NULL;
   COMMIT;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_93');
PROMPT Renaming TODO_ITEM_OWNER to TODO_ITEM_OWNER_TAB

DECLARE
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Rename_Table('TODO_ITEM_OWNER', 'TODO_ITEM_OWNER_TAB', TRUE, TRUE, FALSE, FALSE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_94');
PROMPT Adding Layer to LanguageContext

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LAYER', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE language_context_tab
SET layer = 'Core'
WHERE layer IS NULL;

DECLARE
   column_     Installation_SYS.ColRec;
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
   ix_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_IX';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LAYER', 'VARCHAR2(100)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PARENT');
   Installation_SYS.Set_Table_Column(columns_, 'NAME');
   Installation_SYS.Set_Table_Column(columns_, 'MAIN_TYPE');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER');
   Installation_SYS.Create_Index(table_name_, ix_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
   ix_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_IX4';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LAYER', 'VARCHAR2(100)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PARENT');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER');
   Installation_SYS.Create_Index(table_name_, ix_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_IX3';
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODULE ASC');
   Installation_SYS.Set_Table_Column(columns_, 'MAIN_TYPE ASC');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER ASC');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_95');
PROMPT Increases column main_type in  LanguageDestination

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_DESTINATION_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('MAIN_TYPE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_96');
PROMPT Increases column main_type in  LanguageSource

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_SOURCE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('MAIN_TYPE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_97');
PROMPT Attempting to DISABLE history LOGGING related existing TRIGGERS of FndEvent AND HistoryLog LUs

BEGIN

      DELETE
      FROM HISTORY_SETTING_TAB
      WHERE TABLE_NAME IN ('FND_EVENT_TAB','HISTORY_LOG_TAB');

      DELETE
      FROM HISTORY_SETTING_ATTRIBUTE_TAB
      WHERE TABLE_NAME IN ('FND_EVENT_TAB','HISTORY_LOG_TAB');

      Installation_SYS.Disable_Trigger('FND_EVENT_I', TRUE);
      Installation_SYS.Disable_Trigger('FND_EVENT_U', TRUE);
      Installation_SYS.Disable_Trigger('FND_EVENT_D', TRUE);
      Installation_SYS.Disable_Trigger('HISTORY_LOG_I', TRUE);
      Installation_SYS.Disable_Trigger('HISTORY_LOG_U', TRUE);
      Installation_SYS.Disable_Trigger('HISTORY_LOG_D', TRUE);

      COMMIT;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_98');
PROMPT Creating TABLE PDF_REPORT_EVENT_PARAM_TAB


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PDF_REPORT_EVENT_PARAM_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAM_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAM_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAM_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PDF_REPORT_EVENT_PARAM_TAB';
   index_name_ VARCHAR2(30) := 'PDF_REPORT_EVENT_PARAM_PK';
   rkidx_name_ VARCHAR2(30) := 'PDF_REPORT_EVENT_PARAM_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PARAM_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_99');
PROMPT Adding attribute to ARCHIVE_TAB


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ARCHIVE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'EVENT_PARAMS', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_,columns_,TRUE);
END;
/


BEGIN
   BEGIN
      Ctx_Ddl.Drop_Preference('APPLICATION_SEARCH_STORAGE');
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
   Ctx_Ddl.Create_preference('APPLICATION_SEARCH_STORAGE', 'BASIC_STORAGE');
   Ctx_Ddl.Set_attribute('APPLICATION_SEARCH_STORAGE','FORWARD_INDEX','TRUE');
   Ctx_Ddl.Set_attribute('APPLICATION_SEARCH_STORAGE','SAVE_COPY','PLAINTEXT');
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_100');
PROMPT Renaming TO naming convention

DECLARE
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Rename_Constraint('FNDCN_UML_DIAGRAM_TAB', 'UML_DIAGRAM_PK', 'FNDCN_UML_DIAGRAM_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_TARGET_TAB', 'TARGET_PK', 'FNDCN_TARGET_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_ROUTE_CONDITION_TAB', 'ROUTE_CONDITION_PK', 'FNDCN_ROUTE_CONDITION_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_ROUTE_ADDRESS_TAB', 'ROUTE_ADDRESS_PK', 'FNDCN_ROUTE_ADDRESS_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_RECURRENCE_PATTERN_TAB', 'RECURRENCE_PATTERN_PK', 'FNDCN_RECURRENCE_PATTERN_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_RECURRENCE_AGENDA_TAB', 'RECURRENCE_AGENDA_PK', 'FNDCN_RECURRENCE_AGENDA_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_MOD_SYS_DOCUMENT_TAB', 'MODULE_SYSTEM_DOCUMENTATION_PK', 'FNDCN_MOD_SYS_DOCUMENT_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_MESSAGE_BODY_TAB', 'MESSAGE_BODY_PK', 'FNDCN_MESSAGE_BODY_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_MSG_ARCHIVE_SEARCH_TAB', 'MESSAGE_ARCHIVE_SEARCH_PK', 'FNDCN_MSG_ARCHIVE_SEARCH_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_MSG_ARCHIVE_TAB', 'MESSAGE_ARCHIVE_PK', 'FNDCN_MSG_ARCHIVE_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_MSG_ARCHIVE_BODY_TAB', 'MESSAGE_ARCHIVE_BODY_PK', 'FNDCN_MSG_ARCHIVE_BODY_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_MSG_ARCHIVE_ADDR_TAB', 'MESSAGE_ARCHIVE_ADDRESS_PK', 'FNDCN_MSG_ARCHIVE_ADDR_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_LUOPERATION_TAB', 'LUOPERATION_PK', 'FNDCN_LUOPERATION_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_LUATTRIBUTE_TAB', 'LUATTRIBUTE_PK', 'FNDCN_LUATTRIBUTE_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_LOGICAL_UNIT_TAB', 'LOGICAL_UNIT_PK', 'FNDCN_LOGICAL_UNIT_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_IFACE_CONTROL_PARAM_TAB', 'IFACE_CONTROL_PARAMETER_PK', 'FNDCN_IFACE_CONTROL_PARAM_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_CONFIG_PARAM_TAB', 'CONFIG_PARAMETER_PK', 'FNDCN_CONFIG_PARAM_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_CONFIG_PARAM_INST_TAB', 'CONFIG_PARAMETER_INSTANCE_PK', 'FNDCN_CONFIG_PARAM_INST_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_CONFIG_PARAM_GROUP_TAB', 'CONFIG_PARAMETER_GROUP_PK', 'FNDCN_CONFIG_PARAM_GROUP_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_CONFIG_PARAM_AREA_TAB', 'CONFIG_PARAMETER_AREA_PK', 'FNDCN_CONFIG_PARAM_AREA_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_CONDITION_PART_TAB', 'CONDITION_PART_PK', 'FNDCN_CONDITION_PART_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_CACHED_ARTIFACT_TAB', 'CACHED_ARTIFACT_PK', 'FNDCN_CACHED_ARTIFACT_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_CACHED_ARTIFACT_ELEM_TAB', 'CACHED_ARTIFACT_ELEMENT_PK', 'FNDCN_CACHED_ARTIFACT_ELEM_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_APPLICATION_MESSAGE_TAB', 'APPLICATION_MESSAGE_PK', 'FNDCN_APPLICATION_MESSAGE_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_ADDRESS_LABEL_TAB', 'ADDRESS_LABEL_PK', 'FNDCN_ADDRESS_LABEL_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('PERMISSION_SET_FILTER_PAR_TAB', 'PERMISSION_SET_FILTER_PARAM_PK', 'PERMISSION_SET_FILTER_PAR_PK', TRUE, FALSE);
   Installation_SYS.Rename_Constraint('FNDCN_ROUTE_ADDRESS_REF_TAB', 'ROUTE_ADDRESS_REFERENCE_PK', 'FNDCN_ROUTE_ADDRESS_REF_PK', TRUE, FALSE);

   Installation_SYS.Rename_Index('TERM_IX2', 'TERM_SX1', TRUE, FALSE);
   --Installation_SYS.Rename_Index('FNDRR_CLIENT_PROFILE_IX', 'FNDRR_CLIENT_PROFILE_SX1', TRUE, FALSE);
   Installation_SYS.Rename_Index('FND_USER_IX3', 'FND_USER_SX1', TRUE, FALSE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_101');
PROMPT Recreating INDEX FNDRR_CLIENT_PROFILE_IX AS an UNIQUE INDEX named FNDRR_CLIENT_PROFILE_SX1
DECLARE 
   columns_ Installation_SYS.ColumnTabType; 
BEGIN 
   IF Installation_SYS.Index_Exist('FNDRR_CLIENT_PROFILE_IX', 'FNDRR_CLIENT_PROFILE_TAB') THEN
      Installation_SYS.Remove_Indexes('FNDRR_CLIENT_PROFILE_TAB', 'FNDRR_CLIENT_PROFILE_IX', TRUE);
   ELSIF Installation_SYS.Index_Exist('FNDRR_CLIENT_PROFILE_SX1', 'FNDRR_CLIENT_PROFILE_TAB') THEN
      Installation_SYS.Remove_Indexes('FNDRR_CLIENT_PROFILE_TAB', 'FNDRR_CLIENT_PROFILE_SX1', TRUE);
   END IF;
   Installation_SYS.Set_Table_Column(columns_, 'TEXT_ID$'); 
   Installation_SYS.Create_Index('FNDRR_CLIENT_PROFILE_TAB', 'FNDRR_CLIENT_PROFILE_SX1', columns_, 'U', 
                                 '&IFSAPP_INDEX', NULL, TRUE, TRUE); 
END; 
/



exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_102');
PROMPT CREATING TABLE XML_REPORT_ARCHIVE_TAB

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'XML_REPORT_ARCHIVE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('XML_HEADER', 'CLOB', 'Y', NULL, 'LOB (XML_HEADER) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('XML_FOOTER', 'CLOB', 'Y', NULL, 'LOB (XML_FOOTER) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'XML_REPORT_ARCHIVE_TAB';
   index_name_ VARCHAR2(30) := 'XML_REPORT_ARCHIVE_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'XML_REPORT_ARCHIVE_TAB';
   index_name_ VARCHAR2(30) := 'XML_REPORT_ARCHIVE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_103');
PROMPT CREATING TABLE XML_REPORT_ACCESS_TAB

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'XML_REPORT_ACCESS_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'XML_REPORT_ACCESS_TAB';
   index_name_ VARCHAR2(30) := 'XML_REPORT_ACCESS_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'XML_REPORT_ACCESS_TAB';
   index_name_ VARCHAR2(30) := 'XML_REPORT_ACCESS_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   collection_name_ VARCHAR2(30) := 'CF_RESULT_TYPE';
BEGIN
   IF NOT Installation_SYS.Type_Exist(collection_name_) THEN
      Installation_SYS.Create_Type(collection_name_, 'VARCHAR2(4000)', TRUE);
   END IF;
END;
/


DECLARE
   collection_name_ VARCHAR2(30) := 'CF_RESULT_SET_TYPE';
BEGIN
   IF NOT Installation_SYS.Type_Exist(collection_name_) THEN
      Installation_SYS.Create_Type(collection_name_, 'CF_RESULT_TYPE', TRUE);
   END IF;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_104');
PROMPT Moving XML_Header AND XML_Footer FROM PDF_ARCHIVE_TAB TO XML_REPORT_ARCHIVE_TAB

DECLARE
   column_    Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PDF_ARCHIVE_TAB';
BEGIN
   IF (Installation_SYS.Column_Exist('PDF_ARCHIVE_TAB','XML_HEADER')) THEN
      EXECUTE IMMEDIATE 'DELETE FROM XML_REPORT_ARCHIVE_TAB';
      EXECUTE IMMEDIATE 'INSERT INTO XML_REPORT_ARCHIVE_TAB (result_key, id, rowversion, rowkey, xml_header, xml_footer)
      SELECT result_key, id, rowversion, sys_guid(), xml_header, xml_footer FROM PDF_ARCHIVE_TAB';

      COMMIT;

      column_ := Installation_SYS.Set_Column_Values('XML_HEADER', 'CLOB','Y');
      Installation_SYS.Remove_Lob_Column(table_name_, column_, TRUE);
      column_ := Installation_SYS.Set_Column_Values('XML_FOOTER', 'CLOB','Y');
      Installation_SYS.Remove_Lob_Column(table_name_, column_, TRUE);
   END IF;
END;
/



DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PERFORMANCE_ANALYZE_SOURCE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RUN_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LINE', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TYPE', 'VARCHAR2(12)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TEXT', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'UNIT_NUMBER', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TOTAL_OCCUR', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TOTAL_TIME', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MIN_TIME', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MAX_TIME', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PERFORMANCE_ANALYZE_SOURCE_TAB';
   index_name_ VARCHAR2(30) := 'PERFORMANCE_ANALYZE_SOURCE_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RUN_ID');
   Installation_SYS.Set_Table_Column(columns_, 'NAME');
   Installation_SYS.Set_Table_Column(columns_, 'TYPE');
   Installation_SYS.Set_Table_Column(columns_, 'LINE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'OUT_MESSAGE_LINE_TAB';
   index_name_ VARCHAR2(30) := 'OUT_MESSAGE_LINE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_105');
PROMPT Remove Code FOR Fnd Personal Messages

BEGIN
   Installation_SYS.Rename_Table('FND_EVENT_MY_MESSAGES_TAB', 'FND_EVENT_MY_MESSAGES_OLD');
   Installation_SYS.Remove_Sequence('FND_EVENT_MY_MESSAGES_SEQ');
   Installation_SYS.Remove_View('FND_EVENT_MY_MESSAGES');
   Installation_SYS.Remove_Package('FND_EVENT_MY_MESSAGES_API');
END;
/




DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_STREAM_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FROM_USER', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TO_USER', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'HEADER', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VISIBLE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STREAM_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'READ', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'URL', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'NOTES', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(25)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'REFERENCE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_STREAM_TAB';
   index_name_ VARCHAR2(30) := 'FND_STREAM_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_STREAM_TAB';
   index_name_ VARCHAR2(30) := 'FND_STREAM_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FND_STREAM_IX';
   table_name_ VARCHAR2(30) := 'FND_STREAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'VISIBLE');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   sequence_name_ VARCHAR2(30) := 'FND_STREAM_ID_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(25)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_VIEW', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SUB_OBJKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USERNAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_HEADER', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'NOTES', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SEND_EMAIL', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_URL', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'EXPIRY_DATE', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DISABLED', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_IX';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SUB_OBJKEY');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   sequence_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_ID_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_COLUMN', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_LU', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TERM_VERSION_HANDLE_ID', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TERM_DISPLAY_TYPE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_ID');
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_COLUMN');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_IX';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_LU');
   Installation_SYS.Set_Table_Column(columns_, 'SUBSCRIPTION_COLUMN');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_OBJ_TRACKING_RUNTIME_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTIVE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'INSERT_TRIGGER', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'UPDATE_TRIGGER', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DELETE_TRIGGER', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RUNNING', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_TRACKING_RUNTIME_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_TRACKING_RUNTIME_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_OBJ_TRACKING_RUNTIME_TAB';
   index_name_ VARCHAR2(30) := 'FND_OBJ_TRACKING_RUNTIME_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   queue_name_ VARCHAR2(30) := 'FND_TRK_LU_DMO_Q';
   message_struct_name_ VARCHAR2(30) := 'FND_REC_TRK_INFO_TYPE';
   message_struct_     Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(message_struct_, 'DMO_TYPE', 'VARCHAR2(1)', 'Y');
   Installation_SYS.Set_Table_Column(message_struct_, 'TABLE_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(message_struct_, 'VIEW_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(message_struct_, 'LU_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(message_struct_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(message_struct_, 'OLD_VALUES', 'CLOB', 'Y');
   Installation_SYS.Set_Table_Column(message_struct_, 'NEW_VALUES', 'CLOB', 'Y');
   Installation_SYS.Set_Table_Column(message_struct_, 'FND_USER', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Create_Or_Replace_Oracle_AQ(queue_name_ => queue_name_,
                                                message_struct_name_ => message_struct_name_,
                                                message_struct_ => message_struct_,
                                                multiple_consumers_ => TRUE,
                                                description_ => 'Queue to keep data manupulation operation info',
                                                show_info_ => TRUE);
END;
/


BEGIN
   DELETE FROM server_log_category_tab WHERE category_id = 'IFS Sessions';
   DELETE FROM server_log_category_tab WHERE category_id = 'Sessions';
   DELETE FROM server_log_category_tab WHERE category_id = 'Intrusions';
END;
/

BEGIN
   EXECUTE IMMEDIATE 'NOAUDIT SESSION WHENEVER NOT SUCCESSFUL';
END;
/
BEGIN
   EXECUTE IMMEDIATE 'NOAUDIT SESSION WHENEVER SUCCESSFUL';
END;
/



DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'APPLICATION_MSG_STATISTICS_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOG_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_BY', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STATE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COUNT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EXTERNAL_ID', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'APPLICATION_MSG_STATISTICS_TAB';
   index_name_ VARCHAR2(30) := 'APPLICATION_MSG_STATISTICS_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOG_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'APPLICATION_MSG_STATISTICS_TAB';
   index_name_ VARCHAR2(30) := 'APPLICATION_MSG_STATISTICS_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_106');
PROMPT Creating TABLE CONDITIONAL_FIELD_ACTION_TAB

exec Installation_SYS.Log_Detail_Time_Stamp('&MODULE', '140912_MUTHU_Fndbas.cdb','Start');


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CONDITIONAL_FIELD_ACTION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VIEW_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COLUMN_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_PROPERTY', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_INDEX', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_ENABLED', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_CRITERIA', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONDITIONAL_FIELD_ACTION_TAB';
   index_name_ VARCHAR2(30) := 'CONDITIONAL_FIELD_ACTION_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONDITIONAL_FIELD_ACTION_TAB';
   index_name_ VARCHAR2(30) := 'CONDITIONAL_FIELD_ACTION_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_107');
PROMPT Remove unnecessary rowkeys

DECLARE
   column_  Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Remove_Constraints('MODULE_TAB', 'MODULE_RK', TRUE);
   Installation_SYS.Remove_Constraints('MODULE_DEPENDENCY_TAB', 'MODULE_DEPENDENCY_RK', TRUE);
   Installation_SYS.Remove_Constraints('MODULE_DB_PATCH_TAB', 'MODULE_DB_PATCH_RK', TRUE);
   Installation_SYS.Remove_Constraints('BATCH_SYS_TAB', 'BATCH_SYS_RK', TRUE);
   Installation_SYS.Remove_Constraints('DATABASE_SYS_ORACLE_INDEX_TAB', 'DATABASE_SYS_ORACLE_INDEX_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_TAB', 'DICTIONARY_SYS_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_VIEW_TAB', 'DICTIONARY_SYS_VIEW_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_VIEW_COLUMN_TAB', 'DICTIONARY_SYS_VIEW_COLUMN_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_PACKAGE_TAB', 'DICTIONARY_SYS_PACKAGE_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_METHOD_TAB', 'DICTIONARY_SYS_METHOD_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_DOMAIN_TAB', 'DICTIONARY_SYS_DOMAIN_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_STATE_TAB', 'DICTIONARY_SYS_STATE_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_STATE_EVENT_TAB', 'DICTIONARY_SYS_STATE_EVENT_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_STATE_TRANS_TAB', 'DICTIONARY_SYS_STATE_TRANS_RK', TRUE);
   Installation_SYS.Remove_Constraints('DICTIONARY_SYS_STATE_MACH_TAB', 'DICTIONARY_SYS_STATE_MACH_RK', TRUE);
   Installation_SYS.Remove_Constraints('SECURITY_SYS_TAB', 'SECURITY_SYS_RK', TRUE);
   Installation_SYS.Remove_Constraints('SECURITY_SYS_PRIVS_TAB', 'SECURITY_SYS_PRIVS_RK', TRUE);
   Installation_SYS.Remove_Constraints('REFERENCE_SYS_TAB', 'REFERENCE_SYS_RK', TRUE);
   Installation_SYS.Remove_Constraints('TRANSACTION_SYS_LOCAL_TAB', 'TRANSACTION_SYS_LOCAL_RK', TRUE);
   Installation_SYS.Remove_Constraints('TRANSACTION_SYS_STATUS_TAB', 'TRANSACTION_SYS_STATUS_RK', TRUE);
   Installation_SYS.Remove_Constraints('OBJECT_CONNECTION_SYS_TAB', 'OBJECT_CONNECTION_SYS_RK', TRUE);
   Installation_SYS.Remove_Constraints('LANGUAGE_SYS_TAB', 'LANGUAGE_SYS_RK', TRUE);
   Installation_SYS.Remove_Constraints('LANGUAGE_SYS_IMP_TAB', 'LANGUAGE_SYS_IMP_RK', TRUE);
   Installation_SYS.Remove_Constraints('PERFORMANCE_ANALYZE_SOURCE_TAB', 'PERFORMANCE_ANALYZE_SOURCE_RK', TRUE);
   Installation_SYS.Remove_Constraints('FND_USER_ROLE_RUNTIME_TAB', 'FND_USER_ROLE_RUNTIME_RK', TRUE);
   Installation_SYS.Remove_Constraints('FUNC_AREA_CONFLICT_CACHE_TAB', 'FUNC_AREA_CONFLICT_CACHE_RK', TRUE);
   Installation_SYS.Remove_Constraints('FUNC_AREA_SEC_CACHE_TAB', 'FUNC_AREA_SEC_CACHE_RK', TRUE);
   Installation_SYS.Remove_Constraints('PLSQLAP_ENVIRONMENT_TAB', 'PLSQLAP_ENVIRONMENT_RK', TRUE);
   Installation_SYS.Remove_Constraints('SOD_CACHE_TAB', 'SOD_CACHE_RK', TRUE);
   Installation_SYS.Remove_Constraints('USER_PROFILE_SYS_TAB', 'USER_PROFILE_SYS_RK', TRUE);
   Installation_SYS.Remove_Constraints('USER_PROFILE_ENTRY_SYS_TAB', 'USER_PROFILE_ENTRY_SYS_RK', TRUE);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('MODULE_TAB', 'D', column_);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('MODULE_DEPENDENCY_TAB', 'D', column_);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('MODULE_DB_PATCH_TAB', 'D', column_);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('BATCH_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DATABASE_SYS_ORACLE_INDEX_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_VIEW_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_VIEW_COLUMN_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_PACKAGE_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_METHOD_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_DOMAIN_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_STATE_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_STATE_EVENT_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_STATE_TRANS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('DICTIONARY_SYS_STATE_MACH_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('SECURITY_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('SECURITY_SYS_PRIVS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('REFERENCE_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('TRANSACTION_SYS_LOCAL_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('TRANSACTION_SYS_STATUS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('OBJECT_CONNECTION_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('LANGUAGE_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('LANGUAGE_SYS_IMP_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('PERFORMANCE_ANALYZE_SOURCE_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('FND_USER_ROLE_RUNTIME_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('FUNC_AREA_CONFLICT_CACHE_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('FUNC_AREA_SEC_CACHE_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('PLSQLAP_ENVIRONMENT_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('SOD_CACHE_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('USER_PROFILE_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

   column_ := Installation_SYS.Set_Column_Values('ROWKEY', NULL, 'Y');
   Installation_SYS.Alter_Table_Column('USER_PROFILE_ENTRY_SYS_TAB', 'D', column_, TRUE);
   Installation_SYS.Reset_Column(column_);

END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_108');
PROMPT Creating REPORT_LAYOUT_TEMPLATE_TAB

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_LAYOUT_TEMPLATE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('DATA', 'BLOB', 'Y', NULL, 'LOB (DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_LAYOUT_TEMPLATE_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_LAYOUT_TEMPLATE_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_LAYOUT_TEMPLATE_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_LAYOUT_TEMPLATE_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_109');
PROMPT Adding columns to REPORT_PDF_INSERT_TAB


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_PDF_INSERT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('FILE_NAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table_Column('REPORT_PDF_INSERT_TAB', 'A', column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('FILE_DATE', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column('REPORT_PDF_INSERT_TAB', 'A', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_110');
PROMPT Adding column to dictionary_sys_view_tab


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_VIEW_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('SERVER_ONLY', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

UPDATE dictionary_sys_view_tab
SET server_only = 'FALSE'
WHERE server_only IS NULL;

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_VIEW_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('SERVER_ONLY', 'VARCHAR2(5)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


DECLARE
  queue_name_ VARCHAR2(30) := 'CLIENT_NOTIF_Q';
  message_struct_name_ VARCHAR2(30) := 'sys.aq$_jms_text_message';
BEGIN
   Installation_SYS.Create_Or_Replace_Oracle_AQ(queue_name_ => queue_name_,
                                                message_struct_name_ => message_struct_name_,
                                                multiple_consumers_ => FALSE,
                                                description_ => 'Oracle AQ JMS queue to send notifications to IFS MWS',
                                                start_queue_ => TRUE,
                                                show_info_ => TRUE);

END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_111');
PROMPT Changing state from Released or Waiting to Suspended for application messages of type 'Background Job'
DECLARE
   error_prefix_ CONSTANT VARCHAR2(100) := 'Batch Processor Upgrade: ';
   count_ NUMBER := 0;
BEGIN
   FOR A IN (SELECT application_message_id
               FROM fndcn_application_message_tab
              WHERE message_type = 'Background Job'
                AND (state = 'Released' OR state = 'Waiting')
              ORDER BY 1)
   LOOP
      UPDATE fndcn_application_message_tab
         SET state = 'Suspended', error_text = error_prefix_ || 'State [' || state || '] changed to [Suspended] on queue ' || queue, state_date = sysdate
       WHERE application_message_id = A.application_message_id;
      count_ := count_ + 1;
      Dbms_Output.Put_Line(error_prefix_ || 'State of application message [' || A.application_message_id || '] changed to [Suspended]');
   END LOOP;
   Dbms_Output.Put_Line(count_ || ' application messages updated.');
END;
/

COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_112');
PROMPT Changing state to Cancelled for application messages having invalid state according to new version of Message_State_Types_API
DECLARE
   error_prefix_ CONSTANT VARCHAR2(100) := 'Batch Processor Upgrade: ';
   count_ NUMBER := 0;
BEGIN
   FOR A IN (SELECT application_message_id, state
               FROM fndcn_application_message_tab
              WHERE state IS NULL OR state NOT IN ('Cancelled','Failed','Finished','Processing','Released','Suspended','Waiting'))
   LOOP
      UPDATE fndcn_application_message_tab
         SET state = 'Cancelled', error_text = error_prefix_ || 'Invalid state [' || state || '] changed to [Cancelled]', state_date = sysdate
       WHERE application_message_id = A.application_message_id;

       FOR L IN (SELECT * FROM fndcn_address_label_tab WHERE application_message_id = A.application_message_id) LOOP
          UPDATE fndcn_address_label_tab
             SET state = 'Failed', error_text = error_prefix_ || 'State [' || state || '] changed to [Failed]'
           WHERE application_message_id = A.application_message_id;
      END LOOP;
      count_ := count_ + 1;
   END LOOP;
   Dbms_Output.Put_Line(count_ || ' application messages updated.');
END;
/

COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_113');
PROMPT Adding column NEXT_EXECUTION_TIME to FNDCN_APPLICATION_MESSAGE_TAB
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NEXT_EXECUTION_TIME', 'DATE', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_114');
PROMPT Adding column TAG to FNDCN_APPLICATION_MESSAGE_TAB
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TAG', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_115');
PROMPT Adding columns CREATED_TIMESTAMP and FINISHED_TIMESTAMP to FNDCN_APPLICATION_MESSAGE_TAB
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_TIMESTAMP', 'TIMESTAMP', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FINISHED_TIMESTAMP', 'TIMESTAMP', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_116');
PROMPT Adding columns ADDRESS_SEQ_NO and MESSAGE_TEMPLATE to FNDCN_MESSAGE_BODY_TAB
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FNDCN_MESSAGE_BODY_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_SEQ_NO', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_TEMPLATE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_117');
PROMPT Creating non-unique index on FNDCN_MESSAGE_BODY_TAB(MESSAGE_TEMPLATE)
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FNDCN_MESSAGE_BODY_TAB';
   index_name_ VARCHAR2(30) := 'FNDCN_MESSAGE_BODY_TEMPLATE_IX';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_TEMPLATE');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_118');
PROMPT Creating non-unique index on FNDCN_APPLICATION_MESSAGE_TAB(TAG)
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   index_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_IX_2';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TAG');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_119');
PROMPT Increasing size of ROUTE_ADDRESS columns TRANSFORMER and RESPONSE_TRANSFORMER to 4000 characters
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FNDCN_ROUTE_ADDRESS_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_120');
PROMPT Increasing size of ADDRESS_LABEL columns TRANSFORMER and RESPONSE_TRANSFORMER to 4000 characters
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FNDCN_ADDRESS_LABEL_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-----------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_121');
PROMPT Moving ROUTE_ADDRESS.TRANSFORMER_2 to empty ROUTE_ADDRESS.TRANSFORMER
UPDATE fndcn_route_address_tab
   SET transformer = transformer_2, transformer_2 = NULL
 WHERE transformer IS NULL AND transformer_2 IS NOT NULL
/
COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_122');
PROMPT Moving ROUTE_ADDRESS.TRANSFORMER_2 to non empty ROUTE_ADDRESS.TRANSFORMER
UPDATE fndcn_route_address_tab
   SET transformer = transformer || ',' || transformer_2, transformer_2 = NULL
 WHERE transformer IS NOT NULL AND transformer_2 IS NOT NULL
/
COMMIT
/
-----------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_123');
PROMPT Moving ROUTE_ADDRESS.RESPONSE_TRANSFORMER_2 to empty ROUTE_ADDRESS.RESPONSE_TRANSFORMER
UPDATE fndcn_route_address_tab
   SET response_transformer = response_transformer_2, response_transformer_2 = NULL
 WHERE response_transformer IS NULL AND response_transformer_2 IS NOT NULL
/
COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_124');
PROMPT Moving ROUTE_ADDRESS.RESPONSE_TRANSFORMER_2 to non empty ROUTE_ADDRESS.RESPONSE_TRANSFORMER
UPDATE fndcn_route_address_tab
   SET response_transformer = response_transformer || ',' || response_transformer_2, response_transformer_2 = NULL
 WHERE response_transformer IS NOT NULL AND response_transformer_2 IS NOT NULL
/
COMMIT
/
-----------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_125');
PROMPT Moving ADDRESS_LABEL.TRANSFORMER_2 to empty ADDRESS_LABEL.TRANSFORMER
UPDATE fndcn_address_label_tab
   SET transformer = transformer_2, transformer_2 = NULL
 WHERE transformer IS NULL AND transformer_2 IS NOT NULL
/
COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_126');
PROMPT Moving ADDRESS_LABEL.TRANSFORMER_2 to non empty ADDRESS_LABEL.TRANSFORMER
UPDATE fndcn_address_label_tab
   SET transformer = transformer || ',' || transformer_2, transformer_2 = NULL
 WHERE transformer IS NOT NULL AND transformer_2 IS NOT NULL
/
COMMIT
/
-----------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_127');
PROMPT Moving ADDRESS_LABEL.RESPONSE_TRANSFORMER_2 to empty ADDRESS_LABEL.RESPONSE_TRANSFORMER
UPDATE fndcn_address_label_tab
   SET response_transformer = response_transformer_2, response_transformer_2 = NULL
 WHERE response_transformer IS NULL AND response_transformer_2 IS NOT NULL
/
COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_128');
PROMPT Moving ADDRESS_LABEL.RESPONSE_TRANSFORMER_2 TO non empty ADDRESS_LABEL.RESPONSE_TRANSFORMER
UPDATE fndcn_address_label_tab
   SET response_transformer = response_transformer || ',' || response_transformer_2, response_transformer_2 = NULL
 WHERE response_transformer IS NOT NULL AND response_transformer_2 IS NOT NULL
/
COMMIT
/
-----------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_129');
PROMPT Set EXECUTE_IN_ORDER to InSequence for queues with MAX_PROCESSES = 1 configured for only one Batchserver
--------------------------------------------------------------------------------------------------------

update fndcn_config_param_tab X
   set X.parameter_value = 'InSequence'
 where X.area_name = 'Integration'
   and X.group_name = 'MessageQueues'
   and X.parameter_name = 'EXECUTE_IN_ORDER'
   and nvl(X.parameter_value, 'false') = 'false'
   and X.instance_name in
    (select Q.instance_name
       from fndcn_config_param_tab Q
      where Q.area_name = X.area_name
        and Q.group_name = 'MessageQueues'
        and Q.parameter_name = 'MAX_PROCESSES'
        and Q.parameter_value = '1'
        and 1 = (select count(*)
                   from fndcn_config_param_inst_tab B
                  where B.area_name = Q.area_name
                    and B.group_name = 'Servers'
                    and B.instance_type = 'BatchServer'
                    and exists (select null
                                  from fndcn_config_param_tab P
                                 where P.area_name = B.area_name
                                   and P.group_name = B.group_name
                                   and P.instance_name = B.instance_name
                                   and P.parameter_name = 'QUEUES'
                                   and ','||translate(P.parameter_value, chr(10)||chr(13)||','||' ', ',,,,')||',' LIKE '%,' || Q.instance_name || ',%')));

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_130');
PROMPT Delete recurrence agendas
--------------------------------------------------------------------------------------------------------
delete fndcn_config_param_group_tab where area_name = 'Integration' and group_name = 'RecurrenceAgendas';
delete fndcn_config_param_inst_tab  where area_name = 'Integration' and group_name = 'RecurrenceAgendas';
delete fndcn_config_param_tab       where area_name = 'Integration' and group_name = 'RecurrenceAgendas';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_131');
PROMPT Delete MQHeaders configuration group
--------------------------------------------------------------------------------------------------------
delete fndcn_config_param_group_tab where area_name = 'Integration' and group_name = 'MQHeaders';
delete fndcn_config_param_inst_tab  where area_name = 'Integration' and group_name = 'MQHeaders';
delete fndcn_config_param_tab       where area_name = 'Integration' and group_name = 'MQHeaders';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_132');
PROMPT Delete MQSeries readers and senders
--------------------------------------------------------------------------------------------------------
delete fndcn_config_param_tab where (area_name, group_name, instance_name) in
 (select area_name, group_name, instance_name
    from fndcn_config_param_inst_tab
   where area_name = 'Integration'
     and group_name in ('ConnectorReaders', 'ConnectorSenders')
     and instance_type = 'MQSeries');

delete fndcn_config_param_inst_tab
 where area_name = 'Integration'
   and group_name in ('ConnectorReaders', 'ConnectorSenders')
   and instance_type = 'MQSeries';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_133');
PROMPT Delete SMS sender
--------------------------------------------------------------------------------------------------------
delete fndcn_config_param_tab where (area_name, group_name, instance_name) in
 (select area_name, group_name, instance_name
    from fndcn_config_param_inst_tab
   where area_name = 'Integration'
     and group_name = 'ConnectorSenders'
     and instance_type = 'SMS');

delete fndcn_config_param_inst_tab
 where area_name = 'Integration'
   and group_name = 'ConnectorSenders'
   and instance_type = 'SMS';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_134');
PROMPT Delete Shell Command sender
--------------------------------------------------------------------------------------------------------
delete fndcn_config_param_tab where (area_name, group_name, instance_name) in
 (select area_name, group_name, instance_name
    from fndcn_config_param_inst_tab
   where area_name = 'Integration'
     and group_name = 'ConnectorSenders'
     and instance_type = 'ShellCommand');

delete fndcn_config_param_inst_tab
 where area_name = 'Integration'
   and group_name = 'ConnectorSenders'
   and instance_type = 'ShellCommand';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_135');
PROMPT Delete Batchserver instances
--------------------------------------------------------------------------------------------------------
delete fndcn_config_param_tab where (area_name, group_name, instance_name) in
 (select area_name, group_name, instance_name
    from fndcn_config_param_inst_tab
   where area_name = 'Integration'
     and group_name = 'Servers'
     and instance_type = 'BatchServer');

delete fndcn_config_param_inst_tab
 where area_name = 'Integration'
   and group_name = 'Servers'
   and instance_type = 'BatchServer';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_136');
PROMPT Delete obsolete configuration parameters from ConnectServer and J2EEServer
--------------------------------------------------------------------------------------------------------

delete fndcn_config_param_tab
 where (area_name, group_name, instance_name) in
    (select area_name, group_name, instance_name
       from fndcn_config_param_inst_tab
      where area_name = 'Integration'
        and group_name = 'Servers'
        and instance_type = 'ConnectServer')
   and parameter_name in ('LISTENER_PORT', 'MONITORING_CONFIG');

delete fndcn_config_param_tab
 where (area_name, group_name, instance_name) in
    (select area_name, group_name, instance_name
       from fndcn_config_param_inst_tab
      where area_name = 'Integration'
        and group_name = 'Servers'
        and instance_type = 'J2EEServer')
   and parameter_name in ('BULK_MESSAGE_SIZE', 'BULK_MESSAGE_DELAY', 'MONITORING_CONFIG');

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_137');
PROMPT Change type of PORT parameters from TEXT to NUMBER
--------------------------------------------------------------------------------------------------------

update fndcn_config_param_tab
   set parameter_type = 'TypeNumber'
 where area_name = 'Integration'
   and group_name = 'ConnectorSenders'
   and parameter_name = 'PORT'
   and parameter_type = 'TypeText';

--------------------------------------------------------------------------------------------------------
-- Update queue parameters
--
--   Delete:
--     MAX_PROCESSES
--     POLL_TIME
--     DEBUG
--     DEBUG_LEVEL
--     DEBUG_FILE
--   Keep:
--     EXECUTE_IN_ORDER
--   New:
--     STOP_QUEUE
--     LOG_LEVEL
--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_138');
PROMPT Delete obsolete queue parameters
--------------------------------------------------------------------------------------------------------
delete fndcn_config_param_tab
 where area_name = 'Integration'
   and group_name = 'MessageQueues'
   and parameter_name in ('MAX_PROCESSES', 'POLL_TIME', 'DEBUG', 'DEBUG_LEVEL', 'DEBUG_FILE', 'STOP_CHECK_INTERVAL');

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_139');
PROMPT Add DEAFULT message queue
--------------------------------------------------------------------------------------------------------
BEGIN
   insert into fndcn_config_param_inst_tab (rowversion,created_date,instance_type,description,area_name,group_name,instance_name,static_config,rowkey)
   values (1,sysdate,NULL,'Default queue','Integration','MessageQueues','DEFAULT',1,sys_guid());
   Dbms_Output.Put_Line('DEFAULT queue created');
   insert into fndcn_config_param_tab (help_text,write_protected,ordinal,instance_name,area_name,group_name,parameter_value,value_list,parameter_type,parameter_name,rowversion,rowkey)
   values ('This flag guarantee that the messages in this queue will be executed in order.',null,3,'DEFAULT','Integration','MessageQueues','false','','TypeBoolean','EXECUTE_IN_ORDER',1,sys_guid());
   Dbms_Output.Put_Line('EXECUTE_IN_ORDER parameter created');
EXCEPTION
   WHEN dup_val_on_index THEN
      Dbms_Output.Put_Line('Row already exists');
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_140');
PROMPT Add STOP_QUEUE parameter to existing queues
--------------------------------------------------------------------------------------------------------
insert into FNDCN_CONFIG_PARAM_TAB
 (area_name, group_name, instance_name, ordinal, parameter_name,
  parameter_value, parameter_type, help_text, rowversion)
select P.area_name, P.group_name, P.instance_name, max(P.ordinal) + 1, 'STOP_QUEUE',
       'false', 'TypeBoolean', 'Tick in if you want to stop the queue temporarily', 1
  from FNDCN_CONFIG_PARAM_TAB P
 where P.area_name  = 'Integration'
   and P.group_name = 'MessageQueues'
   and not exists ( select null
                      from FNDCN_CONFIG_PARAM_TAB R
                     where R.area_name      = P.area_name
                       and R.group_name     = P.group_name
                       and R.instance_name  = P.instance_name
                       and R.parameter_name = 'STOP_QUEUE' )
 group by P.area_name, P.group_name, P.instance_name
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_141');
PROMPT Add LOG_LEVEL parameter to existing queues
--------------------------------------------------------------------------------------------------------
insert into FNDCN_CONFIG_PARAM_TAB
 (area_name, group_name, instance_name, ordinal, parameter_name,
  parameter_value, parameter_type, value_list, help_text, rowversion)
select P.area_name, P.group_name, P.instance_name, max(P.ordinal) + 1, 'LOG_LEVEL',
       'WARNING', 'TypeEnum', 'ERROR WARNING INFO TRACE DEBUG', 'Log level for Batch Processor logging messages tagged with this queue name', 1
  from FNDCN_CONFIG_PARAM_TAB P
 where P.area_name  = 'Integration'
   and P.group_name = 'MessageQueues'
   and not exists ( select null
                      from FNDCN_CONFIG_PARAM_TAB R
                     where R.area_name      = P.area_name
                       and R.group_name     = P.group_name
                       and R.instance_name  = P.instance_name
                       and R.parameter_name = 'LOG_LEVEL' )
 group by P.area_name, P.group_name, P.instance_name
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_142');
PROMPT Set ApplicationMessage.Tag = 'BATCH' for Background Jobs
--------------------------------------------------------------------------------------------------------

update fndcn_application_message_tab
   set tag = 'BATCH'
 where message_type = 'Background Job'
   and tag is null;

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_143');
PROMPT Set MessageBody.MessageTemplate for Background Jobs. Move invalid/obsolete messages to ERROR/TRASHCAN queue.
--------------------------------------------------------------------------------------------------------
DECLARE
   PROCEDURE Move_Application_Message(id_ NUMBER, queue_ VARCHAR2, state_ VARCHAR2, error_msg_ VARCHAR2) IS
      error_prefix_ CONSTANT VARCHAR2(100) := 'Batch Processor Upgrade: ';
   BEGIN
      UPDATE fndcn_application_message_tab
         SET queue = queue_,
             state = state_,
             error_text = error_prefix_ || error_msg_ || '. MESSAGE_TYPE changed.',
             state_date = sysdate,
             tag = NULL,
             message_type = message_type || '-Moved'
       WHERE application_message_id = id_;
       Dbms_Output.Put_Line('Application message [' || id_ || ']: ' || error_msg_);
   END Move_Application_Message;

   FUNCTION Is_Application_Message_Valid(id_ NUMBER) RETURN BOOLEAN IS
      body_count_    NUMBER;
      address_count_ NUMBER;
      error_msg_     VARCHAR2(2000);
   BEGIN
      SELECT count(*) INTO body_count_    FROM fndcn_message_body_tab  WHERE application_message_id = id_ AND nvl(reply, 0) = 0 AND address_seq_no IS NULL;
      SELECT count(*) INTO address_count_ FROM fndcn_address_label_tab WHERE application_message_id = id_;

      IF body_count_ = 0 THEN
         error_msg_ := 'Missing input message body';
      ELSIF body_count_ > 1 THEN
         error_msg_ := 'Too many input message bodies';
      ELSIF address_count_ = 0 THEN
         error_msg_ := 'Missing address label line';
      ELSIF address_count_ > 1 THEN
         error_msg_ := 'Too many address label lines';
      END IF;

      IF error_msg_ IS NOT NULL THEN
         Move_Application_Message(id_, 'ERROR', 'Failed', 'Invalid message moved to queue [ERROR] because of [' || error_msg_ || ']');
         RETURN FALSE;
      ELSE
         RETURN TRUE;
      END IF;
   END Is_Application_Message_Valid;

   PROCEDURE Set_Message_Template(id_ NUMBER, template_ VARCHAR2, subject_ VARCHAR2) IS
   BEGIN
      UPDATE fndcn_message_body_tab
         SET message_template = template_
       WHERE application_message_id = id_ AND nvl(reply, 0) = 0 AND address_seq_no IS NULL;
       Dbms_Output.Put_Line('Application message [' || id_ || ']: Message template set to [' || template_ || '] for subject [' || subject_ || ']');
   END Set_Message_Template;

   PROCEDURE Skip_Application_Message(id_ NUMBER, subject_ VARCHAR2) IS
   BEGIN
       Dbms_Output.Put_Line('Application message [' || id_ || ']: Untouched message with subject [' || subject_ || ']');
   END Skip_Application_Message;

   FUNCTION Is_Inet_Trans(id_ NUMBER) RETURN BOOLEAN IS
      blob_ BLOB;
   BEGIN
      SELECT message_value
        INTO blob_
        FROM fndcn_message_body_tab
       WHERE application_message_id = id_ AND nvl(reply, 0) = 0 AND address_seq_no IS NULL;
	   
      RETURN Dbms_Lob.Instr(blob_, Utl_Raw.Cast_To_Raw('<MEDIA_CODE>INET_TRANS</MEDIA_CODE>')) > 0;
   END Is_Inet_Trans;

BEGIN
   FOR A IN (SELECT * FROM fndcn_application_message_tab WHERE tag = 'BATCH') LOOP
      IF Is_Application_Message_Valid(A.application_message_id) THEN
         DECLARE
            address_data_ VARCHAR2(4000);
         BEGIN
            SELECT rtrim(address_data, ':')
              INTO address_data_
              FROM fndcn_address_label_tab
             WHERE application_message_id = A.application_message_id;

            IF A.message_function = 'PrintAgent' AND address_data_ = 'PrintAgentHandler:ProcessJob' THEN
               Set_Message_Template(A.application_message_id, 'ProcessJob', A.subject);

            ELSIF A.message_function = 'Connectivity' AND address_data_ = 'ConnectivityProcessingHandler:ProcessOutboxMessages' THEN
               IF Is_Inet_Trans(A.application_message_id) then
                  Set_Message_Template(A.application_message_id, 'ProcessOutboxMessages', A.subject);
               ELSE
                  Move_Application_Message(A.application_message_id, 'TRASHCAN', 'Failed', 'Obsolete [Connectivity] message moved to queue [TRASHCAN]');
               END IF;

            ELSIF A.message_function = 'CleanupQueue' THEN
               Move_Application_Message(A.application_message_id, 'TRASHCAN', 'Failed', 'Obsolete [CleanupQueue] message moved to queue [TRASHCAN]');

            ELSE
               Skip_Application_Message(A.application_message_id, A.subject);

            END IF;
         END;
      END IF;
   END LOOP;
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_144');
PROMPT Set instance type for all message queues to 'MessageQueue'
--------------------------------------------------------------------------------------------------------

update fndcn_config_param_inst_tab
   set instance_type = 'MessageQueue'
 where area_name = 'Integration'
   and group_name = 'MessageQueues'
   and instance_type <> 'MessageQueue';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_145');
PROMPT Change the name and type of EXECUTE_IN_ORDER parameter for all queues
--------------------------------------------------------------------------------------------------------

update fndcn_config_param_tab
   set parameter_name = 'EXECUTION_MODE',
       parameter_value = decode(parameter_value, 'InSequence', 'InSequence', decode(nvl(parameter_value,'false'),'false','InParallel','InOrder')),
       parameter_type = 'TypeEnum',
       value_list = 'InOrder InSequence InParallel',
       help_text = 'InOrder - execute sequentially in strict order of arrival, block queue on failure'||chr(10)||
                   'InSequence - execute sequentially, do not block queue on failure'||chr(10)||
                   'InParallel - execute parallely'
where area_name = 'Integration'
   and group_name = 'MessageQueues'
   and parameter_name = 'EXECUTE_IN_ORDER';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_146');
PROMPT Delete obsolete configuration parameters from J2EEServer
--------------------------------------------------------------------------------------------------------

update fndcn_config_param_inst_tab
   set static_config = 1
 where area_name = 'Integration'
   and group_name = 'Servers'
   and instance_name = 'J2EE_SERVER'
   and nvl(static_config, 0) <> 1;

delete fndcn_config_param_tab
 where area_name = 'Integration'
   and group_name = 'Servers'
   and instance_name = 'J2EE_SERVER'
   and parameter_name in ('DEBUG','DEBUG_DIRECTORY','DEBUG_LEVEL','LOG_FILE','MAX_RETRIES','RETRY_INTERVAL','XML_VALIDATION');

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_147');
PROMPT Delete obsolete configuration parameters from JMS Reader
--------------------------------------------------------------------------------------------------------

delete fndcn_config_param_tab
where (area_name, group_name, instance_name) in
    (select area_name, group_name, instance_name
       from fndcn_config_param_inst_tab
      where area_name = 'Integration'
        and group_name = 'ConnectorReaders'
        and instance_type = 'JMS')
   and parameter_name in ('NAMING_URL_PKGS', 'NAMING_FACTORY_INITIAL', 'DEBUG', 'DEBUG_FILE', 'DEBUG_LEVEL');

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_148');
PROMPT Add PRINT_JOB_ID placeholder to report formatters
--------------------------------------------------------------------------------------------------------

DECLARE
   PROCEDURE lob_replace(blob_  IN OUT BLOB,
                         what_  IN VARCHAR2,
                         with_  IN VARCHAR2) IS
      n_ NUMBER;
   BEGIN
      n_ := Dbms_Lob.Instr(blob_, Utl_Raw.Cast_To_Raw(what_));
      IF (NVL(n_, 0) > 0) THEN
         Dbms_Lob.Copy(blob_, blob_, Dbms_Lob.Getlength(blob_), n_ + LENGTH(with_), n_ + LENGTH(what_));
         Dbms_Lob.Write(blob_, LENGTH(with_), n_, Utl_Raw.Cast_To_Raw(with_));
      
         IF (LENGTH(what_) > LENGTH(with_)) THEN
            Dbms_Lob.Trim(blob_, Dbms_Lob.Getlength(blob_) - LENGTH(what_) + LENGTH(with_));
         END IF;
      END IF;
   END lob_replace;
   
BEGIN
   FOR body_ IN (SELECT application_message_id, seq_no, message_value, ROWID
                   FROM fndcn_message_body_tab WHERE message_template = 'ProcessJob' FOR UPDATE)
   LOOP
      IF Dbms_Lob.Instr(body_.message_value, Utl_Raw.Cast_To_Raw('<PRINT_JOB_ID>')) = 0 THEN
         lob_replace(body_.message_value, '</PRINT_AGENT>', ' <PRINT_JOB_ID>0</PRINT_JOB_ID>' || chr(10) || '</PRINT_AGENT>');
         
         Dbms_Output.Put_Line('Added PRINT_JOB_ID placeholder to report formatter: application message id [' || body_.application_message_id || '] seq_no [' || body_.seq_no || ']');
      END IF;
   END LOOP;
END;
/

COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_149');
PROMPT Recreating and starting JMS queue for Batch Processor
DECLARE
   --
   -- Recreating and starting JMS queue for Batch Processor
   --
   queue_table_ CONSTANT VARCHAR2(100) := 'BATCH_PROC_QUEUE_TAB';
   queue_       CONSTANT VARCHAR2(100) := 'BATCH_PROC_QUEUE';

   PROCEDURE Drop_Queue_Table__ (table_name_ VARCHAR2) IS
      no_table EXCEPTION;
      PRAGMA   EXCEPTION_INIT(no_table, -24002);
   BEGIN
      Dbms_Aqadm.Drop_Queue_Table(table_name_, true);
   EXCEPTION
      WHEN no_table THEN
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END;

BEGIN
   Drop_Queue_Table__(queue_table_);

   Dbms_Aqadm.Create_Queue_Table
     (queue_table        => queue_table_,                 -- max 24 characters
      storage_clause     => 'TABLESPACE &IFSAPP_DATA',    -- indexes will be also created in this tablespace
      queue_payload_type => 'SYS.AQ$_JMS_BYTES_MESSAGE',  -- corresponds to DataInputStream in java
      multiple_consumers => FALSE);                       -- FALSE for queues, TRUE for topics

   Dbms_Aqadm.Create_Queue
     (queue_name  => queue_,
      queue_table => queue_table_);
   Dbms_Aqadm.Start_Queue (queue_);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_150');
PROMPT Removing RECURRENCE_AGENDA package and view
BEGIN
   Installation_SYS.Rename_Table('FNDCN_RECURRENCE_AGENDA_TAB', 'FNDCN_RECURRENCE_AGENDA_OLD');
   Installation_SYS.Remove_View('RECURRENCE_AGENDA');
   Installation_SYS.Remove_Package('RECURRENCE_AGENDA_API');
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_151');
PROMPT Removing RECURRENCE_PATTERN package and view
BEGIN
   Installation_SYS.Rename_Table('FNDCN_RECURRENCE_PATTERN_TAB', 'FNDCN_RECURRENCE_PATTERN_OLD');
   Installation_SYS.Remove_View('RECURRENCE_PATTERN');
   Installation_SYS.Remove_Package('RECURRENCE_PATTERN_API');
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_152');
PROMPT Removing TARGET package and view
BEGIN
   Installation_SYS.Rename_Table('FNDCN_TARGET_TAB', 'FNDCN_TARGET_OLD');
   Installation_SYS.Remove_View('TARGET');
   Installation_SYS.Remove_Package('TARGET_API');
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_153');
PROMPT Removing APPLICATION_MESSAGE_UTIL_API package
BEGIN
   Installation_SYS.Remove_Package('APPLICATION_MESSAGE_UTIL_API');
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_154');
PROMPT Dropping trigger MESSAGE_ARCHIVE_UTIL_RBT
BEGIN
   Installation_SYS.Remove_Trigger('MESSAGE_ARCHIVE_UTIL_RBT', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_155');
PROMPT Clear sod_cache_table to remove in-consistence reference to the batch schedule 'Refresh Cache for Segregation of Duties'

BEGIN

   DELETE
   FROM sod_cache_tab t1
   WHERE
   NOT EXISTS(
      SELECT 1
      FROM batch_schedule_tab t2
      WHERE t2.schedule_id=t1.cache_task_ref
   );
   COMMIT;

END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_156');
PROMPT MODIFYING TABLE LANGUAGE_CONTEXT_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_157');
PROMPT CREATE ARCHIVE_IX2

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ARCHIVE_TAB';
   index_name_ VARCHAR2(30) := 'ARCHIVE_IX2';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NOTES');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_158');
PROMPT CREATE REPORT_PLUGIN_SETTINGS_TAB

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REPORT_PLUGIN_SETTINGS_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_DESC', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_PLUGIN_SETTINGS_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_PLUGIN_SETTINGS_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_PLUGIN_SETTINGS_TAB';
   index_name_ VARCHAR2(30) := 'REPORT_PLUGIN_SETTINGS_RK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_159');
PROMPT Modifying the Primary Key of REPORT_RULE_CONDITION_TAB and REPORT_RULE_ACTION_TAB.
DECLARE
   column_     Installation_SYS.ColRec;
   columns_    Installation_SYS.ColumnTabType;
   table_name_condition_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_TAB';
   table_name_action_    VARCHAR2(30) := 'REPORT_RULE_ACTION_TAB';
   index_name_condition_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_PK';
   index_name_action_ VARCHAR2(30) := 'REPORT_RULE_ACTION_PK';

BEGIN
   Installation_SYS.Remove_Constraints(table_name_condition_,index_name_condition_);
   Installation_SYS.Remove_Constraints(table_name_action_,index_name_action_);
END;
/

DECLARE

BEGIN
   delete from REPORT_RULE_CONDITION_TAB
   where rowid not in
   (select min(rowid) from REPORT_RULE_CONDITION_TAB group by rule_id, ordinal);
   COMMIT;

   delete from REPORT_RULE_ACTION_TAB
   where rowid not in
   (select min(rowid) from REPORT_RULE_ACTION_TAB group by rule_id, ordinal);
   COMMIT;
END;
/

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_condition_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_TAB';
   table_name_action_    VARCHAR2(30) := 'REPORT_RULE_ACTION_TAB';
   index_name_condition_ VARCHAR2(30) := 'REPORT_RULE_CONDITION_PK';
   index_name_action_ VARCHAR2(30) := 'REPORT_RULE_ACTION_PK';

BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL');

   Installation_SYS.Create_Constraint(table_name_condition_, index_name_condition_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);


   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL');

   Installation_SYS.Create_Constraint(table_name_action_, index_name_action_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   object_name_ VARCHAR2(30) := 'FND_EVENT_PARAMETER_TYPE';
   columns_     Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'EVENT_LU_NAME', 'VARCHAR2(25)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EVENT_ID', 'VARCHAR2(32)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(64)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ID_TYPE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLSQL_METHOD', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Create_Type(object_name_, columns_, TRUE);
END;
/


DECLARE
   collection_name_ VARCHAR2(30) := 'FND_EVENT_PARAMETERS_TYPE';
BEGIN
   Installation_SYS.Create_Type(collection_name_, 'FND_EVENT_PARAMETER_TYPE', TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_160');
PROMPT Adding the new columns to BATCH_QUEUE_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'BATCH_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NODE_ATTACHED', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'NODE', 'NUMBER', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_161');
PROMPT Rename objects to correct names

DECLARE
   table_name_ VARCHAR2(30) := 'QUERY_HINT_TABLE_TAB';
BEGIN
   -- Call the procedure
   Installation_SYS.Rename_Constraint(table_name_        => table_name_,
                                      source_constraint_ => 'QUERY_HINT_RK',
                                      target_constraint_ => 'QUERY_HINT_TABLE_RK',
                                      show_info_         => TRUE,
                                      exception_         => FALSE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_162');
PROMPT Drop obsolete views.

BEGIN
   Installation_SYS.Remove_View('FND_SESSION_REP', TRUE);
   Installation_SYS.Remove_View('FND_SESSION_LICENSE', TRUE);
   Installation_SYS.Remove_View('FNDCN_MESSAGE_QUEUE', TRUE);
   Installation_SYS.Remove_View('PERFORMANCE_ANALYZE_DATA', TRUE);
   Installation_SYS.Remove_View('PERFORMANCE_ANALYZE_RUNS', TRUE);
   Installation_SYS.Remove_View('PERFORMANCE_ANALYZE_SRC', TRUE);
   Installation_SYS.Remove_View('PERFORMANCE_ANALYZE_UNITS', TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_163');
PROMPT Drop obsolete sequences.

BEGIN
   Installation_SYS.Remove_Sequence('PRES_OBJECT_SEQ', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_164');
PROMPT Drop obsolete synonyms.

BEGIN
   Installation_SYS.Remove_Synonym('PLSQL_PROFILER_DATA');
   Installation_SYS.Remove_Synonym('PLSQL_PROFILER_RUNS');
   Installation_SYS.Remove_Synonym('PLSQL_PROFILER_UNITS');
   Installation_SYS.Remove_Synonym('PLSQL_PROFILER_RUNNUMBER');
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_165');
PROMPT Drop obsolete packages.

BEGIN
   Installation_SYS.Remove_Package('FND_SESSION_RPI', TRUE);
   Installation_SYS.Remove_Package('SECURITY_CHECKPOINT_METHOD_API', TRUE);
   Installation_SYS.Remove_Package('MODULE_TRANSLATE_ATTR_UTIL_API', TRUE);
   Installation_SYS.Remove_Package('INSTALLED_COMPONENT_SYS', TRUE);
   Installation_SYS.Remove_Package('DATATYPE_API', TRUE);
END;
/

BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', '120257')) THEN
      EXECUTE IMMEDIATE 'ALTER SEQUENCE HISTORY_LOG_SEQ CACHE 20 ORDER';
      Installation_SYS.Register_Db_Patch('&MODULE', '120257','To specify ORDER to history_log_seq sequence');
   END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_166');
PROMPT Adding column Client_Identifier to ServerLog.

DECLARE  
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SERVER_LOG_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('CLIENT_IDENTIFIER', 'VARCHAR2(100)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

DECLARE
   
BEGIN
   Installation_SYS.Remove_View('FND_TRANSLATION');
   Installation_SYS.Remove_Package('FND_TRANSLATION_API');
   Installation_SYS.Rename_Table('FND_TRANSLATION_TAB', 'FND_TRANSLATION_600');
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_167');
PROMPT Adding TEXT_ID$ and INDEX for ARCHIVE_TAB
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ARCHIVE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('TEXT_ID$', 'VARCHAR2(50)','N', 'sys_guid()');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'ARCHIVE_SX1';
   table_name_ VARCHAR2(30) := 'ARCHIVE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TEXT_ID$');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Timestamp_168');
PROMPT Increasing the length of the column MESSAGE of PRINT_JOB_TAB.
DECLARE
   column_ Installation_SYS.ColRec;
BEGIN
      Installation_SYS.Reset_Column(column_);
      column_ := Installation_SYS.Set_Column_Values('MESSAGE', 'VARCHAR2(2000)');
      Installation_SYS.Alter_Table_Column('PRINT_JOB_TAB', 'M', column_, TRUE);
END;
/
-----------------------------------------------------------------------------------
-- Finish up
-----------------------------------------------------------------------------------

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','600.upg','Done');



