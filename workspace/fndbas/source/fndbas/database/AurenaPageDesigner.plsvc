-----------------------------------------------------------------------------
--
--  Logical unit: AurenaPageDesigner
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;
   
FUNCTION Get_Reference_Data___ (
   reference_ IN VARCHAR2) RETURN Ref_Data_Arr
IS
BEGIN
   RETURN Get_Reference_Data___(reference_, NULL);
END Get_Reference_Data___;

FUNCTION Get_Reference_Data___(
   reference_ IN VARCHAR2,
   parameters_ IN VARCHAR2)  RETURN Ref_Data_Arr
IS
BEGIN
   CASE
      WHEN reference_ = 'GetPages' THEN
         RETURN Get_Pages___;
      WHEN reference_ = 'GetPageAttributes' THEN
         RETURN Get_Page_Attributes___(parameters_);
      WHEN reference_ = 'GetQReportTypes' THEN
         RETURN Get_QReportTypes___;
      WHEN reference_ = 'GetQReports' THEN
         RETURN Get_QReports___(parameters_);
      WHEN reference_ = 'GetOperationalReportTypes' THEN
         RETURN Get_OperationalReportTypes___;
      WHEN reference_ = 'GetOperationalReports' THEN
         RETURN Get_OperationalReports___(parameters_);
      WHEN reference_ = 'GetClientPages' THEN
         RETURN Get_Client_Pages___(parameters_);
      WHEN reference_ = 'GetClients' THEN
         RETURN Get_Clients___;
      WHEN reference_ = 'GetLobbies' THEN
         RETURN Get_Lobbies___;
      WHEN reference_ = 'GetInitContextAttributes' THEN
         RETURN Get_InitContextAttributes___(parameters_);
   END CASE;
   EXCEPTION
      WHEN CASE_NOT_FOUND THEN
         RETURN Ref_Data_Arr();
END Get_Reference_Data___;


FUNCTION Get_Clients___ RETURN Ref_Data_Arr
IS
   rec_ Ref_Data_Rec;
   result_ Ref_Data_Arr := Ref_Data_Arr();

   CURSOR clients IS
      SELECT name
      FROM FND_MODEL_DESIGN_TAB
      WHERE kind = 'ClientMetadata'
      AND artifact = 'client'
      ORDER BY name;
BEGIN
   FOR client_ IN clients LOOP
      rec_.value := client_.name;
      result_.extend;
      result_(result_.last) := rec_;
   END LOOP;
   RETURN result_;
END Get_Clients___;

FUNCTION Get_Client_Pages___(
   client_ IN VARCHAR2 )  RETURN Ref_Data_Arr
IS
   rec_ Ref_Data_Rec;
   result_ Ref_Data_Arr := Ref_Data_Arr();

   CURSOR pages(model_id_ VARCHAR2) IS
      SELECT DISTINCT name
      FROM FND_MODEL_DESIGN_DATA_TAB
      WHERE artifact = 'page'
      AND model_id = model_id_
      ORDER BY name;
BEGIN
   FOR page_ IN pages('ClientMetadata.client:' || client_) LOOP
      rec_.value := page_.name;
      result_.extend;
      result_(result_.last) := rec_;
   END LOOP;
   RETURN result_;
END Get_Client_Pages___;

FUNCTION Get_Pages___ RETURN Ref_Data_Arr
IS
   result_ Ref_Data_Arr := Ref_Data_Arr();
   rec_ Ref_Data_Rec;
   count_ NUMBER;
   
   CURSOR search_aurena_Pages_model IS
   SELECT SUBSTR(t.model_id ,Instr(t.model_id , ':')+1,LENGTH( t.model_id )) MODEL, 
   t.name PAGE_NAME 
   FROM FND_MODEL_DESIGN_DATA_TAB t
   WHERE t.artifact = 'page';
BEGIN
   count_ := 1;
   FOR page_ IN search_aurena_Pages_model LOOP
      result_.extend;
      rec_.value := 'page/' || page_.MODEL || '/' || page_.PAGE_NAME;
      result_(count_) := rec_;
      count_ := count_ + 1;   
   END LOOP;
   
  RETURN result_;
END Get_Pages___;

FUNCTION Get_Entity_Attributes___(
   projection_name_ IN VARCHAR2,
   entity_name_ IN VARCHAR2 )  RETURN Ref_Data_Arr
IS
   result_ Ref_Data_Arr := Ref_Data_Arr();
   rec_ Ref_Data_Rec;
BEGIN
   $IF Component_Fndcob_SYS.INSTALLED $THEN
      DECLARE
         count_ NUMBER;
         CURSOR get_attributes(projection_name_ VARCHAR2, entity_ IN VARCHAR2) IS
            SELECT t.attr_client_name FROM PROJ_CONFIG_ENTITY_ATTR t
            WHERE t.projection_name = projection_name_  
            AND t.entity_name = entity_;
      BEGIN
         count_ := 1;
         FOR attr_ IN get_attributes(projection_name_, entity_name_) LOOP
            result_.extend;
            rec_.value := attr_.attr_client_name;
            result_(count_) := rec_;
            count_ := count_ + 1;
         END LOOP;
         RETURN result_;
      END;
   $ELSE
      RETURN result_;
   $END
END Get_Entity_Attributes___;

FUNCTION Get_Page_Attributes___(
   page_ IN VARCHAR2)  RETURN Ref_Data_Arr
IS
   count_ NUMBER;
   model_id_ VARCHAR2(500);
   data_type_ VARCHAR2(500);
   data_id_ VARCHAR2(500);
   entity_ VARCHAR2(500);
   projection_ VARCHAR2(500);
   
   CURSOR get_page_entity(model_id_ VARCHAR2, dataid_ IN VARCHAR2) IS
   SELECT json_value(t.content, '$.entity' RETURNING VARCHAR2(32)) entity from FND_MODEL_DESIGN_DATA t
   WHERE t.model_id = model_id_ AND t.data_id = dataid_;
   
   CURSOR get_page_projection(model_id_ VARCHAR2) IS 
   SELECT SUBSTR(t.reference, Instr(t.reference ,':')+1, LENGTH( t.reference )) FROM FND_MODEL_DESIGN t
   WHERE t.model_id = model_id_;

BEGIN
   count_ := 1;
   data_type_:= SUBSTR(page_ ,0 ,INSTR(page_ , '/')-1);
   model_id_ := SUBSTR(page_ ,INSTR(page_ , '/')+1,LENGTH( page_ ));
   data_id_  := SUBSTR(model_id_ ,INSTR(model_id_ , '/')+1,LENGTH( model_id_ ));
   model_id_ := SUBSTR(model_id_ ,0,INSTR(model_id_ , '/')-1);
   
   model_id_ := 'ClientMetadata.client:'|| model_id_;
   data_id_  := data_type_||':'|| data_id_;
   
   OPEN get_page_entity(model_id_,data_id_);
   FETCH get_page_entity INTO entity_;
   CLOSE get_page_entity;
   
   OPEN get_page_projection(model_id_);
   FETCH get_page_projection INTO projection_;
   CLOSE get_page_projection;
  
  RETURN Get_Entity_Attributes___(projection_,entity_);
END Get_Page_Attributes___;

FUNCTION Get_InitContextAttributes___(
   page_ IN VARCHAR2)  RETURN Ref_Data_Arr
IS
   
   result_ Ref_Data_Arr := Ref_Data_Arr();
   rec_ Ref_Data_Rec;
   model_id_ VARCHAR2(500);
   data_type_ VARCHAR2(500);
   data_id_ VARCHAR2(500);
   metadata_clob_ CLOB;
   metadata_ json_object_t;
   keys_ json_key_list;
   
   CURSOR get_page_entity(model_id_ VARCHAR2, dataid_ IN VARCHAR2) IS
      SELECT t.content AS content from FND_MODEL_DESIGN_DATA t
      WHERE t.model_id = model_id_ AND t.data_id = dataid_;
   
BEGIN
   data_type_:= SUBSTR(page_ ,0 ,INSTR(page_ , '/')-1);
   model_id_ := SUBSTR(page_ ,INSTR(page_ , '/')+1,LENGTH( page_ ));
   data_id_  := SUBSTR(model_id_ ,INSTR(model_id_ , '/')+1,LENGTH( model_id_ ));
   model_id_ := SUBSTR(model_id_ ,0,INSTR(model_id_ , '/')-1);
   
   model_id_ := 'ClientMetadata.client:'|| model_id_;
   data_id_  := data_type_||':'|| data_id_;
   
   OPEN get_page_entity(model_id_,data_id_);
   FETCH get_page_entity INTO metadata_clob_;
   CLOSE get_page_entity;
   
   IF metadata_clob_ IS NOT NULL THEN
      metadata_ := json_object_t(metadata_clob_);
      metadata_ := metadata_.get_object('initcontext');
      IF metadata_ IS NOT NULL THEN
         metadata_ := metadata_.get_object('parameters');
         IF metadata_ IS NOT NULL THEN
            keys_ := metadata_.get_keys;
            FOR i IN 1..keys_.COUNT 
            LOOP
               result_.extend;
               rec_.value := keys_(i);
               rec_.label := keys_(i);
               result_(i) := rec_;
            END LOOP;
         END IF;
      END IF;
   END IF;
   
   RETURN result_;
END Get_InitContextAttributes___;

FUNCTION Get_QReportTypes___ RETURN Ref_Data_Arr
IS
   result_ Ref_Data_Arr := Ref_Data_Arr();
   rec_ Ref_Data_Rec;
   count_ NUMBER;
   
   CURSOR get_qr_types IS
   select DISTINCT t.QR_TYPE_DB, t.QR_TYPE FROM QUICK_REPORT t;
BEGIN
   count_ := 1;
   FOR qrt_ IN get_qr_types LOOP
      result_.extend;
      rec_.value := qrt_.QR_TYPE_DB;
      rec_.label := qrt_.QR_TYPE;
      result_(count_) := rec_;
      count_ := count_ + 1;   
   END LOOP;
   
  RETURN result_;
END Get_QReportTypes___;

FUNCTION Get_QReports___(
   paramter_ IN VARCHAR2 )  RETURN Ref_Data_Arr
IS
   result_  Ref_Data_Arr := Ref_Data_Arr();
   rec_     Ref_Data_Rec;
   count_   NUMBER := 1;
   qr_type_ QUICK_REPORT.QR_TYPE_DB%TYPE;
   
   CURSOR get_qrs(type_db_ VARCHAR2) IS
      SELECT QUICK_REPORT_ID, DESCRIPTION, QR_TYPE_DB
      FROM   QUICK_REPORT
      WHERE  QR_TYPE_DB LIKE type_db_;
BEGIN
   IF paramter_ IS NULL THEN
      qr_type_ := '%';
   ELSE
      qr_type_ := paramter_;
   END IF;
   
   FOR qrt_ IN get_qrs(qr_type_) LOOP
      result_.extend;
      rec_.value := qrt_.QUICK_REPORT_ID;
      rec_.label := qrt_.DESCRIPTION;
      rec_.data := qrt_.QR_TYPE_DB;
      result_(count_) := rec_;
      count_ := count_ + 1;   
   END LOOP;
   
  RETURN result_;
END Get_QReports___;


FUNCTION Get_OperationalReportTypes___ RETURN Ref_Data_Arr

IS
   result_ Ref_Data_Arr := Ref_Data_Arr();
   rec_ Ref_Data_Rec;
   count_ NUMBER;
   
   CURSOR get_report_types IS
      SELECT DISTINCT CASE WHEN t.REPORT_MODE LIKE 'EXCEL%' THEN 'BUSINESS_REPORTER' 
      ELSE 'OPERATIONAL' END  AS REPORT_TYPE_DB, CASE WHEN t.REPORT_MODE LIKE 'EXCEL%' THEN 'Business Reporter' 
      ELSE 'Operational' END AS REPORT_TYPE FROM REPORT_DEFINITION t
      WHERE t.REPORT_MODE NOT LIKE 'EXCEL%';
      -- TODO remove this where once Business reporter type support added
   
BEGIN
   count_ := 1;
   FOR qrt_ IN get_report_types LOOP
      result_.extend;
      rec_.value := qrt_.REPORT_TYPE_DB;
      rec_.label := qrt_.REPORT_TYPE;
      result_(count_) := rec_;
      count_ := count_ + 1;   
   END LOOP;
   
  RETURN result_;
END Get_OperationalReportTypes___;


FUNCTION Get_OperationalReports___(
   paramter_ IN VARCHAR2) RETURN Ref_Data_Arr
   
IS
   result_  Ref_Data_Arr := Ref_Data_Arr();
   rec_     Ref_Data_Rec;
   count_   NUMBER := 1;
   report_type_ VARCHAR2(20);
   
   CURSOR get_operational_reports (type_db_ VARCHAR2) IS
      SELECT REPORT_ID, REPORT_TITLE, REPORT_TYPE, 
      Aurena_Report_Metadata_SYS.Get_Projection_Name__(REPORT_ID) AS REPORT_PROJECTION 
      FROM (
         SELECT t.REPORT_ID, t.REPORT_TITLE, CASE WHEN t.REPORT_MODE LIKE 'EXCEL%' 
         THEN 'BUSINESS_REPORTER' ELSE 'OPERATIONAL' END AS REPORT_TYPE
         FROM  REPORT_DEFINITION t) data
      WHERE REPORT_TYPE LIKE type_db_;
      
BEGIN
   
   IF paramter_ IS NULL THEN
      report_type_ := '%';
   ELSE
      report_type_ := paramter_;
   END IF;
      
   FOR ort_ IN get_operational_reports(report_type_) LOOP
      result_.extend;
      rec_.value := ort_.REPORT_ID;
      rec_.label := ort_.REPORT_TITLE;
      rec_.data := ort_.REPORT_PROJECTION;
      result_(count_) := rec_;
      count_ := count_ + 1;   
   END LOOP;
   
  RETURN result_;
  
END Get_OperationalReports___;

FUNCTION Get_Lobbies___ RETURN Ref_Data_Arr
IS
   rec_ Ref_Data_Rec;
   result_ Ref_Data_Arr := Ref_Data_Arr();

   CURSOR lobbies IS
      SELECT id
      FROM COMPOSITE_PAGE;
BEGIN
   FOR lobby_ IN lobbies LOOP
      rec_.value := lobby_.id;
      rec_.label := Composite_Page_Repository_API.Get_Lobby_Title__(lobby_.id);
      result_.extend;
      result_(result_.last) := rec_;
   END LOOP;

   RETURN result_;
END Get_Lobbies___;

PROCEDURE Create_Or_Replace_Artifact_Configuration___ (
   key_ IN VARCHAR2)
IS
   model_key_    Model_Design_Data_Virtual_Key;
   virt_rec_     Model_Design_Data_Virtual_Rec;
   clob_content_ CLOB;
BEGIN
   model_key_.objkey := key_;
   virt_rec_ := Get_Record___(model_key_);
   IF virt_rec_.content IS NOT NULL THEN
      clob_content_ := Blob_To_Clob___(virt_rec_.content);
      Model_Design_SYS.Save_Config_Content(virt_rec_.model_id, virt_rec_.scope_id, virt_rec_.data_id, clob_content_, layer_no_=> Model_Design_SYS.CONFIG_DRAFT_LAYER, visibility_=> 'Draft');
      Language_Source_Util_API.Scan_Config_Trans_Contexts_(virt_rec_.model_id, virt_rec_.scope_id);
   END IF;
   CRUD_Delete___(virt_rec_);
END Create_Or_Replace_Artifact_Configuration___;

PROCEDURE Remove_Artifact_Configuration___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2,
   data_id_  IN VARCHAR2 )
IS
   core_row_key_  VARCHAR2(50) := NULL;
   core_content_  CLOB;
   layer_two_key_ VARCHAR2(50) := NULL;   
BEGIN   
   SELECT rowkey 
      INTO layer_two_key_
      FROM FND_MODEL_DESIGN_DATA_TAB
      WHERE model_id = model_id_
      AND   scope_id = scope_id_
      AND   data_id = data_id_
      AND   layer_no = 2;
   
   BEGIN
      SELECT rowkey, content 
         INTO core_row_key_, core_content_
         FROM FND_MODEL_DESIGN_DATA_TAB
         WHERE model_id = model_id_
         AND   scope_id = scope_id_
         AND   data_id = data_id_
         AND   layer_no = 1;

      IF core_row_key_ IS NOT NULL THEN
         -- Shadow it from a core content
         Model_Design_SYS.Save_Config_Content(model_id_, scope_id_, data_id_, core_content_, layer_no_=> Model_Design_SYS.CONFIG_DRAFT_LAYER, visibility_=> 'Reverted');
      END IF;   
      EXCEPTION
         WHEN NO_DATA_FOUND THEN 
            BEGIN
               -- No core element. try to shadow with an empty  
               -- TODO: Check this, should this be a possible and valid scenario (it is today, when reverting scoped published artifacts)?!?
               -- Due to this, there's an exception added to Model_Design_SYS.Save_Config_Content, allowing empty content for 'Reverted' 'Drafts'. /Rakuse
               Model_Design_SYS.Save_Config_Content(model_id_, scope_id_, data_id_, empty_clob(), layer_no_=> Model_Design_SYS.CONFIG_DRAFT_LAYER, visibility_=> 'Reverted');
            END;
   END;   
   
   EXCEPTION
      WHEN NO_DATA_FOUND THEN 
         BEGIN
            Model_Design_SYS.Delete_Config_Content(model_id_, scope_id_, data_id_, Model_Design_SYS.CONFIG_DRAFT_LAYER);
         END;
END Remove_Artifact_Configuration___;
      
      
PROCEDURE Publish_Configurations___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2 ) 
IS
BEGIN
   Aurena_Designer_Util_API.Publish_Page_Configurations(model_id_, scope_id_);
END Publish_Configurations___;

PROCEDURE Unpublish_Configurations___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2 )
IS
BEGIN
   Aurena_Designer_Util_API.Unpublish_Page_Configurations(model_id_, scope_id_);
END Unpublish_Configurations___;

FUNCTION Get_Original_Metadata___(
   model_id_           IN VARCHAR2,
   exclude_projection_ IN BOOLEAN) RETURN CLOB
IS
BEGIN
   RETURN Model_Design_SYS.Get_Data_Content_(model_id_, max_layer_ => 1, exclude_projection_ => exclude_projection_);
END Get_Original_Metadata___;

FUNCTION Get_Original_Metadata_Upd8___(
   model_id_           IN VARCHAR2,
   exclude_projection_ IN BOOLEAN) RETURN CLOB
IS
BEGIN
   RETURN Get_Original_Metadata___(model_id_, exclude_projection_);
END Get_Original_Metadata_Upd8___;

FUNCTION Get_Configured_Metadata___(
   model_id_           IN VARCHAR2,
   scope_id_           IN VARCHAR2,
   exclude_projection_ IN BOOLEAN) RETURN CLOB
IS
BEGIN
   IF (Configuration_Exists___(model_id_, scope_id_)) THEN
      RETURN Model_Design_SYS.Get_Data_Content_(model_id_, scope_id_, max_layer_ => Model_Design_SYS.CONFIG_DRAFT_LAYER, include_unpublished_ => TRUE, exclude_projection_ => exclude_projection_);
   ELSE
      RETURN NULL;
   END IF;
END Get_Configured_Metadata___;

@Deprecated
FUNCTION Get_Configured_Metadata_Upd8___(
   model_id_           IN VARCHAR2,
   scope_id_           IN VARCHAR2,
   exclude_projection_ IN BOOLEAN) RETURN CLOB
IS
BEGIN
   RETURN Get_Configured_Metadata___(model_id_, scope_id_, exclude_projection_);
END Get_Configured_Metadata_Upd8___;

FUNCTION Get_Published_Metadata___(
   model_id_           IN VARCHAR2,
   scope_id_           IN VARCHAR2,
   exclude_projection_ IN BOOLEAN) RETURN CLOB
IS
BEGIN
   IF(model_id_ = 'DEBUG_THROW_ERROR') THEN
      RAISE CASE_NOT_FOUND;
   END IF;

   IF(Published_Configuration_Exists___(model_id_, scope_id_)) THEN
      RETURN Model_Design_SYS.Get_Data_Content_(model_id_, scope_id_, max_layer_ => Model_Design_SYS.RUNTIME_MAX_LAYER, include_unpublished_ => TRUE, exclude_projection_ => exclude_projection_);
   ELSE
      RETURN NULL;
   END IF;
END Get_Published_Metadata___;

@Deprecated
FUNCTION Get_Published_Metadata_Upd8___(
   model_id_           IN VARCHAR2,
   scope_id_           IN VARCHAR2,
   exclude_projection_ IN BOOLEAN) RETURN CLOB
IS
BEGIN
   RETURN Get_Published_Metadata___(model_id_, scope_id_, exclude_projection_);
END Get_Published_Metadata_Upd8___;

FUNCTION Get_Baseline_Metadata___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2,
   exclude_projection_  IN BOOLEAN) RETURN CLOB
IS
BEGIN
   RETURN Model_Design_SYS.Get_Baseline_Content_(model_id_, scope_id_, exclude_projection_);
END Get_Baseline_Metadata___;

FUNCTION Get_Used_Contexts___(
   model_id_ IN VARCHAR2) RETURN CLOB
IS
   CURSOR Get_Contexts (model_id_ VARCHAR2) IS      
   SELECT DISTINCT scope_id
      FROM fnd_model_design_data_tab
      WHERE model_id = model_id_
      ORDER BY scope_id;

   scope_array_ json_array_t := json_array_t('[]'); 
BEGIN
   FOR data_ IN Get_Contexts(model_id_) LOOP
      scope_array_.append(data_.scope_id);
   END LOOP;
  
   RETURN scope_array_.stringify();
END Get_Used_Contexts___;

FUNCTION Blob_To_Clob___ (
   blob_in_ IN BLOB) RETURN CLOB
IS
   file_clob_     CLOB;
   dest_offset_   NUMBER := 1;
   src_offset_    NUMBER := 1;
   lang_context_  NUMBER := dbms_lob.default_lang_ctx;
   warning_       NUMBER;
BEGIN
   Dbms_Lob.Createtemporary(file_clob_, FALSE, Dbms_Lob.Call);
   Dbms_Lob.Converttoclob(file_clob_, blob_in_, Dbms_Lob.lobmaxsize, dest_offset_, src_offset_, Dbms_Lob.default_csid, lang_context_, warning_);
   RETURN file_clob_;
END Blob_To_Clob___;

FUNCTION Configuration_Exists___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2) RETURN BOOLEAN
IS
   temp_ NUMBER;
BEGIN
   SELECT 1 INTO temp_
      FROM  fnd_model_design_data_tab
      WHERE model_id = model_id_
      AND   scope_id = scope_id_
      AND   layer_no > 1
      AND   rownum = 1;
      
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
END Configuration_Exists___;

FUNCTION Published_Configuration_Exists___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2) RETURN BOOLEAN
IS
   temp_ NUMBER;
BEGIN
   SELECT 1 INTO temp_
      FROM  fnd_model_design_data_tab
      WHERE model_id = model_id_
      AND   scope_id = scope_id_
      AND   layer_no > 1
      AND   layer_no < Model_Design_SYS.RUNTIME_MAX_LAYER
      AND   rownum = 1;
      
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
END Published_Configuration_Exists___;

FUNCTION Get_Publish_Status___(
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2 )  RETURN Publish_Status_Rec
IS
   CURSOR get_published_nodes IS
      SELECT 1
        FROM  fnd_model_design_data_tab
        WHERE layer_no = 2
        AND   scope_id = scope_id_
        AND   model_id = model_id_;
   
   CURSOR get_unpublished_nodes IS
      SELECT 1
        FROM  fnd_model_design_data_tab
        WHERE layer_no = Model_Design_SYS.CONFIG_DRAFT_LAYER
        AND   visibility IN ('Draft','Reverted')
        AND   scope_id = scope_id_
        AND   model_id = model_id_;
   
   dummy_ NUMBER;
   publish_status_ Publish_Status_Rec;
BEGIN
   OPEN get_published_nodes;
   FETCH get_published_nodes INTO dummy_;
   publish_status_.has_published_nodes := get_published_nodes%FOUND;
   CLOSE get_published_nodes;
   
   OPEN get_unpublished_nodes;
   FETCH get_unpublished_nodes INTO dummy_;
   publish_status_.has_unpublished_nodes := get_unpublished_nodes%FOUND;
   CLOSE get_unpublished_nodes;
   
   RETURN publish_status_;
END Get_Publish_Status___;


FUNCTION Is_Baseline_In_Sync___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Model_Design_Util_Api.Is_Baseline_In_Sync(model_id_, scope_id_);
END Is_Baseline_In_Sync___;


PROCEDURE Save_Config_Content___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2,
   data_id_ IN VARCHAR2,
   artifact_ IN CLOB,
   baseline_ IN CLOB,
   refresh_translations_ IN BOOLEAN)
IS
BEGIN
    Model_Design_SYS.Save_Config_Content(model_id_, scope_id_, data_id_, artifact_, baseline_, layer_no_=> Model_Design_SYS.CONFIG_DRAFT_LAYER, visibility_=> 'Draft');
   -- For save transactions where multiple artifacts are saved for the same model.
   -- The translation refresh can be supressed and called separately at the end.
   IF refresh_translations_ THEN
      Language_Source_Util_API.Scan_Config_Trans_Contexts_(model_id_, scope_id_);
   END IF;
END Save_Config_Content___;


PROCEDURE Refresh_Translations___ (
   model_id_ IN VARCHAR2,
   scope_id_ IN VARCHAR2)
IS
BEGIN
	Language_Source_Util_API.Scan_Config_Trans_Contexts_(model_id_, scope_id_);
END Refresh_Translations___;
