-----------------------------------------------------------------------------
--
--  Logical unit: UserTasks
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  10/01/2018  sawelk  Created
--  07/07/2020  nijilk  Modified with new methods.
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Complete_Task___ (
   item_id_ IN VARCHAR2 ) 
IS
   
BEGIN
   --Todo_Item_API.Complete_Task(item_id_);
   Complete_Task(item_id_);
END Complete_Task___;

PROCEDURE Set_My_Todo_Flag___ (
   item_id_ IN VARCHAR2,
   flag_ IN VARCHAR2 ) 
IS
   
BEGIN
   --My_Todo_item_API.Set_My_Todo_Flag(item_id_, flag_);
   Set_My_Todo_Flag(item_id_, flag_);
END Set_My_Todo_Flag___;

PROCEDURE Clear_My_Todo_Flag___ (
   item_id_ IN VARCHAR2) 
IS
   
BEGIN
   --My_Todo_item_API.Clear_My_Todo_Flag(item_id_);
   Clear_My_Todo_Flag(item_id_);
END Clear_My_Todo_Flag___;

PROCEDURE Modify_My_Task___ (
   item_id_       IN VARCHAR2,
   title_         IN VARCHAR2,
   item_message_  IN VARCHAR2,
   priority_      IN VARCHAR2,
   flag_          IN VARCHAR2,
   due_date_      IN DATE) 
IS
   
BEGIN
   --Todo_Item_API.Modify_My_Task(item_id_, title_,item_message_, priority_);
   Modify_Todo_Task(item_id_, title_,item_message_, priority_);
   --My_Todo_Item_API.Modify_My_Task(item_id_, flag_);
   Modify_MyTodo_Task(item_id_, flag_,due_date_);
END Modify_My_Task___;

PROCEDURE Mark_As_Read___ (
   item_id_ IN VARCHAR2 ) 
IS
   
BEGIN
   --My_Todo_Item_API.Mark_As_Read(item_id_);
   Mark_As_Read(item_id_);
END Mark_As_Read___;

PROCEDURE Mark_As_Unread___ (
   item_id_ IN VARCHAR2 ) 
IS
   
BEGIN
   --My_Todo_Item_API.Mark_As_Unread(item_id_);
   Mark_As_Unread(item_id_);
END Mark_As_Unread___;

PROCEDURE Set_Priority___ (
   item_id_ IN VARCHAR2,
   priority_   IN VARCHAR2 ) 
IS
   
BEGIN
   --Todo_Item_API.Change_Priority(item_id_, priority_);
   Change_Priority(item_id_, priority_);
END Set_Priority___;

PROCEDURE Create_New_Basic_Task___ (
   person_id_       IN VARCHAR2 DEFAULT NULL,
   title_           IN VARCHAR2,
   message_         IN VARCHAR2,
   priority_        IN VARCHAR2,
   business_object_ IN VARCHAR2 DEFAULT NULL,
   url_             IN VARCHAR2 DEFAULT NULL,
   key_ref_         IN VARCHAR2,
   flag_            IN VARCHAR2,
   due_date_        IN DATE ) 
IS
   taskid_ VARCHAR2(100) ;
   personid_ VARCHAR2(100);
   session_person_ VARCHAR2(100);
   weburl_    VARCHAR2(4000);
   selected_keyref_ json_array_t;  
BEGIN
   
   $IF Component_Enterp_SYS.INSTALLED $THEN
      personid_ := person_id_;
      session_person_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User());
      IF(personid_ IS NULL) THEN 
         personid_ := session_person_;
      END IF;
      IF key_ref_ IS NOT NULL THEN 
      -- constructing the web url from strigfied keyrefs and page url
--      weburl_ := Get_Escaped_Web_Url___(url_,key_ref_);
        selected_keyref_ := json_array_t.parse(key_ref_);
        weburl_ := Get_Escaped_Web_Url___(url_,selected_keyref_);
      ELSE
         weburl_ := NULL;
      END IF;
      IF(Person_Info_API.Check_Exist(personid_) = 'TRUE') THEN
         --taskid_ := Todo_Item_API.Insert_Basic_Task__(title_, message_, priority_, business_object_, weburl_, personid_);
         taskid_ := Insert_Basic_Task__(title_, message_, priority_, business_object_, weburl_, personid_);
         --My_Todo_item_API.Insert_Basic_My_Todo_Item__(personid_, taskid_, flag_);
         Insert_Basic_My_Todo_Item__(personid_, taskid_, flag_,due_date_);
         IF (session_person_ <> personid_) THEN 
            Todo_History_api.Add_History_Item__(taskid_, session_person_, personid_);
            --My_Todo_item_API.Insert_Basic_Sent_To_Item__(session_person_, taskid_);            
         END IF;
         --RETURN Language_SYS.Translate_Constant(lu_name_ => lu_name_, err_text_=> 'TASKCREATIONMSGINIT: Task ":P1" created for :P2', p1_ => title_, p2_ => Person_Info_API.Get_Name_For_User(personid_));
      ELSE
         NULL;
         --RETURN Language_SYS.Translate_Constant(lu_name_ => lu_name_, err_text_=>'TASKCREATIONERRORMSG: Error in creating the task. Person Does not Exist');
      END IF;
   $END
   personid_ := NULL;
   --RETURN Language_SYS.Translate_Constant(lu_name_ => lu_name_, err_text_=>'TASKCREATIONNOPERSON: Person Not Available');

END Create_New_Basic_Task___;

FUNCTION Valid_Person___(
   person_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      IF (Person_Info_API.Is_Valid_User(person_id_) = 'TRUE') THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   $END
   RETURN FALSE;      
END Valid_Person___;

------------------------------------------------ MOVED CODE FROM MYTODOITEM and TODOITEM DB LOGIC ---------------------------------------------
--FUNCTION Get_Todo_Objid_Objversion(
--   item_id_ IN VARCHAR2) RETURN TODO_ITEM_API.Public_Rec
--IS
--   temp_ TODO_ITEM_API.Public_Rec;
--   
--   CURSOR get_objid_objversion(item_id_ VARCHAR2) IS
--    SELECT rowid, rowversion
--    FROM  todo_item_tab
--    WHERE item_id = item_id_--;
--    
--BEGIN
--   OPEN get_objid_objversion(item_id_);
--   FETCH get_objid_objversion INTO temp_.rowid,temp_.rowversion;
--   CLOSE get_objid_objversion;
--   return temp_;
--END Get_Todo_Objid_Objversion;


-- NEED TO DO MORE REFACTORING ON FOLLOWING METHODS.

@UncheckedAccess
PROCEDURE Change_Priority(
   item_id_    IN VARCHAR2,
   priority_   IN VARCHAR2)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ TODO_ITEM_TAB.rowversion%TYPE;
   
   CURSOR get_objid_objversion(item_id_ VARCHAR2) IS
    SELECT rowid, rowversion
    FROM  todo_item_tab
    WHERE item_id = item_id_;
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_Sys.Add_To_Attr('PRIORITY_DB',priority_,attr_);   
   --Get_Id_Version_By_Keys___(objid_,objversion_,item_id_);
   OPEN get_objid_objversion(item_id_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   --temp_ := Get_Todo_Objid_Objversion(item_id_);
   objid_      := rowid_;
   objversion_ := rowversion_;
   Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO');
END Change_Priority;

@UncheckedAccess
PROCEDURE Modify_Todo_Task(
   item_id_    IN VARCHAR2,
   title_ IN VARCHAR2,
   item_message_ IN VARCHAR2,
   priority_  IN VARCHAR2)
IS
   --newrec_ todo_item_tab%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ TODO_ITEM_TAB.rowversion%TYPE;
   
   CURSOR get_objid_objversion(item_id_ VARCHAR2) IS
    SELECT rowid, rowversion
    FROM  todo_item_tab
    WHERE item_id = item_id_;
BEGIN
    Client_SYS.Clear_Attr(attr_);
--   newrec_ := Todo_Item_API.Get_Object_By_Keys___(item_id_);
--   newrec_.item_id := item_id_;
--   newrec_.title   := title_;
--   newrec_.item_message := item_message_;
--   newrec_.priority := priority_;
--   Modify___(newrec_);
--   
   Client_Sys.Add_To_Attr('TITLE',title_,attr_);
   Client_Sys.Add_To_Attr('ITEM_MESSAGE',item_message_,attr_);
   Client_Sys.Add_To_Attr('PRIORITY_DB',priority_,attr_);
   OPEN get_objid_objversion(item_id_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   objid_      := rowid_;
   objversion_ := rowversion_;
   Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO');
END Modify_Todo_Task; 

@UncheckedAccess
PROCEDURE Modify_MyTodo_Task(
   item_id_    IN VARCHAR2,
   flag_       IN VARCHAR2,
   due_date_   IN DATE)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ MY_TODO_ITEM_TAB.rowversion%TYPE;
   identity_    VARCHAR2(2000);
   
   CURSOR get_objid_objversion(item_id_ VARCHAR2, identity_ VARCHAR2) IS
   SELECT rowid, rowversion
         FROM  my_todo_item_tab
         WHERE item_id = item_id_
         AND   identity = identity_;
   
BEGIN
   Client_SYS.Clear_Attr(attr_);
   $IF Component_Enterp_SYS.INSTALLED $THEN
   identity_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User());
   Client_Sys.Add_To_Attr('FLAG',Todo_Flag_API.Decode(flag_),attr_);
   Client_Sys.Add_To_Attr('DUE_DATE',due_date_,attr_);
   OPEN get_objid_objversion(item_id_, identity_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   objid_      := rowid_;
   objversion_ := rowversion_;
   My_Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO');
   $END
END Modify_MyTodo_Task; 

@UncheckedAccess
PROCEDURE Complete_Task(
   item_id_    IN VARCHAR2,
   response_   IN VARCHAR2 DEFAULT NULL)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ TODO_ITEM_TAB.rowversion%TYPE;
   
   CURSOR get_objid_objversion(item_id_ VARCHAR2) IS
    SELECT rowid, rowversion
    FROM  todo_item_tab
    WHERE item_id = item_id_;
    
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_Sys.Add_To_Attr('COMPLETED',1,attr_);
   Client_Sys.Add_To_Attr('COMPLETED_DATE',trunc(SYSDATE),attr_);
   Client_Sys.Add_To_Attr('COMPLETED_BY',Fnd_Session_Api.Get_Fnd_User,attr_);
   OPEN get_objid_objversion(item_id_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   objid_      := rowid_;
   objversion_ := rowversion_;
   Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO');
END Complete_Task; 

PROCEDURE Set_My_Todo_Flag(
   item_id_    IN VARCHAR2,
   flag_ IN VARCHAR2)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   identity_    VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ MY_TODO_ITEM_TAB.rowversion%TYPE;
   
   CURSOR get_objid_objversion(item_id_ VARCHAR2, identity_ VARCHAR2) IS
   SELECT rowid, rowversion
         FROM  my_todo_item_tab
         WHERE item_id = item_id_
         AND   identity = identity_;
    
BEGIN
   Client_SYS.Clear_Attr(attr_);
   $IF Component_Enterp_SYS.INSTALLED $THEN
   identity_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User());
   Client_Sys.Add_To_Attr('FLAG',Todo_Flag_API.Decode(flag_),attr_);
   OPEN get_objid_objversion(item_id_, identity_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   objid_      := rowid_;
   objversion_ := rowversion_;
   My_Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO');
   $END
END Set_My_Todo_Flag;

PROCEDURE Clear_My_Todo_Flag(
   item_id_    IN VARCHAR2)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   identity_    VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ MY_TODO_ITEM_TAB.rowversion%TYPE;
   
   CURSOR get_objid_objversion(item_id_ VARCHAR2, identity_ VARCHAR2) IS
   SELECT rowid, rowversion
         FROM  my_todo_item_tab
         WHERE item_id = item_id_
         AND   identity = identity_;
BEGIN
   Client_SYS.Clear_Attr(attr_);
   $IF Component_Enterp_SYS.INSTALLED $THEN
   identity_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User());
   Client_Sys.Add_To_Attr('FLAG',Todo_Flag_API.Decode(null),attr_);
   OPEN get_objid_objversion(item_id_, identity_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   objid_      := rowid_;
   objversion_ := rowversion_;
   My_Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO');
   $END
END Clear_My_Todo_Flag;


PROCEDURE Mark_As_Read(
   item_id_    IN VARCHAR2)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   identity_    VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ MY_TODO_ITEM_TAB.rowversion%TYPE;
   
    CURSOR get_objid_objversion(item_id_ VARCHAR2, identity_ VARCHAR2) IS
   SELECT rowid, rowversion
         FROM  my_todo_item_tab
         WHERE item_id = item_id_
         AND   identity = identity_;
 BEGIN
   Client_SYS.Clear_Attr(attr_);
   $IF Component_Enterp_SYS.INSTALLED $THEN
   identity_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User());
   Client_Sys.Add_To_Attr('READ',1,attr_);
   OPEN get_objid_objversion(item_id_, identity_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   objid_      := rowid_;
   objversion_ := rowversion_;
   My_Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO'); 
   $END
 END Mark_As_Read;
 
 PROCEDURE Mark_As_Unread(
   item_id_    IN VARCHAR2)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   identity_    VARCHAR2(2000);
   rowid_      ROWID;
   rowversion_ MY_TODO_ITEM_TAB.rowversion%TYPE;
   
    CURSOR get_objid_objversion(item_id_ VARCHAR2, identity_ VARCHAR2) IS
   SELECT rowid, rowversion
         FROM  my_todo_item_tab
         WHERE item_id = item_id_
         AND   identity = identity_;
 BEGIN
   Client_SYS.Clear_Attr(attr_);
   $IF Component_Enterp_SYS.INSTALLED $THEN
   identity_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User());
   Client_Sys.Add_To_Attr('READ',0,attr_);
   OPEN get_objid_objversion(item_id_, identity_);
   FETCH get_objid_objversion INTO rowid_,rowversion_;
   CLOSE get_objid_objversion;
   objid_      := rowid_;
   objversion_ := rowversion_;
   My_Todo_Item_API.Modify__(info_,objid_,objversion_,attr_,'DO'); 
   $END
 END Mark_As_Unread;
 
FUNCTION Get_Escaped_Web_Url___(
   page_url_ IN VARCHAR2, 
   key_ref_ IN json_array_t ) RETURN VARCHAR2
IS
  current_selection_            VARCHAR2(32000);
  constructed_filter_part_      VARCHAR2(32000) := '';
BEGIN
   IF (key_ref_.get_size = 1) THEN
      current_selection_ := key_ref_.get_string(0);
      RETURN page_url_ || '?$filter=keyref eq ''' || utl_url.escape(current_selection_, true) || '''';
   ELSE
      FOR i_ IN 0 .. key_ref_.get_size - 1 LOOP
      current_selection_ := key_ref_.get_string(i_);
         IF i_ = key_ref_.get_size -1 THEN 
         constructed_filter_part_ := constructed_filter_part_|| 'keyref eq ''' || utl_url.escape(current_selection_, true) || '''';  
         ELSE 
         constructed_filter_part_ := constructed_filter_part_|| 'keyref eq ''' || utl_url.escape(current_selection_, true) || '''' || ' or ';  
         END IF; 
      END LOOP;
      RETURN page_url_ || '?$filter=' || constructed_filter_part_;
   END IF;
END Get_Escaped_Web_Url___;

FUNCTION Insert_Basic_Task__ (
   title_           IN VARCHAR2,
   message_         IN VARCHAR2,
   priority_        IN VARCHAR2,
   business_object_ IN VARCHAR2,
   url_             IN VARCHAR2,
   personid_        IN VARCHAR2) RETURN VARCHAR2
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   info_       VARCHAR2(2000);
   item_id_       VARCHAR2 (100);
   item_shared_ NUMBER;
   session_person_ VARCHAR2 (100);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   $IF Component_Enterp_SYS.INSTALLED $THEN
      session_person_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User()); 
   $END    
   IF(personid_ = session_person_) THEN
      item_shared_ := 0;
   ELSE
      item_shared_ := 1;
   END IF;
   item_id_ := sys_guid();
   Client_SYS.Add_To_Attr('ITEM_ID', item_id_, attr_);
   Client_SYS.Add_To_Attr('TITLE', title_, attr_);
   Client_SYS.Add_To_Attr('ITEM_MESSAGE', message_, attr_);
   Client_SYS.Add_To_Attr('BUSINESS_OBJECT', business_object_, attr_);
   Client_SYS.Add_To_Attr('COMPLETED', 0, attr_);
   Client_SYS.Add_To_Attr('PRIORITY_DB', priority_, attr_);
   Client_SYS.Add_To_Attr('SHARED', item_shared_, attr_);
   Client_SYS.Add_To_Attr('WEB_URL', url_, attr_);
   Client_SYS.Add_To_Attr('ITEM_TYPE_DB', Todo_Item_Type_API.DB_ALERT, attr_);
   Todo_Item_API.New__(info_, objid_, objversion_, attr_, 'DO'); --Insert___(objid_, objversion_, newrec_, attr_);  
   RETURN item_id_;
END Insert_Basic_Task__;

PROCEDURE Insert_Basic_My_Todo_Item__ (
   person_id_        IN VARCHAR2 DEFAULT NULL,   
   item_id_          IN VARCHAR2,
   flag_             IN VARCHAR2,
   due_date_         IN DATE)
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   info_       VARCHAR2(2000);
   attr_       VARCHAR2(2000);   
   temp_id_    VARCHAR2(100);
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      temp_id_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User());
   $END 
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ITEM_ID',item_id_ , attr_);
   Client_SYS.Add_To_Attr('IDENTITY', NVL(person_id_, temp_id_), attr_);
   Client_SYS.Add_To_Attr('FOLDER_ID',  Post_To_Folder___(NVL(person_id_, temp_id_)), attr_);
   Client_SYS.Add_To_Attr('DATE_RECEIVED', sysdate, attr_);
   Client_SYS.Add_To_Attr('NEW_ITEM', 1, attr_);
   Client_SYS.Add_To_Attr('READ', 0, attr_);
   Client_SYS.Add_To_Attr('SENT_BY', temp_id_, attr_);
   Client_SYS.Add_To_Attr('TIME_STAMP', sysdate, attr_);
   Client_SYS.Add_To_Attr('FLAG', Todo_Flag_API.Decode(flag_), attr_);
   Client_SYS.Add_To_Attr('DUE_DATE', due_date_, attr_);
   My_Todo_Item_API.New__(info_, objid_, objversion_, attr_, 'DO');
   -- increment folder item counter.
END Insert_Basic_My_Todo_Item__;


FUNCTION Post_To_Folder___ (
   user_ IN VARCHAR2 ) RETURN VARCHAR2 
IS
   folder_id_           VARCHAR2(100);	
   attr_                VARCHAR2(2000);	
   info_                VARCHAR2(2000);
   objid_               VARCHAR2(200);
   objversion_          VARCHAR2(200);
   item_counter_        NUMBER;
   unread_item_counter_ NUMBER;
   CURSOR folder_exist(user_id_ IN VARCHAR2) IS
      SELECT folder_id, item_counter, unread_item_counter
      FROM TODO_FOLDER_TAB
      WHERE identity = user_id_
      AND main_folder = 1
      AND folder_type = ToDo_Folder_Type_API.DB_TODO;
BEGIN
   OPEN folder_exist (user_);
   FETCH folder_exist INTO folder_id_, item_counter_, unread_item_counter_;
   IF (folder_exist%NOTFOUND) THEN
      folder_id_ := Sys_Guid;
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr( 'FOLDER_ID', folder_id_, attr_ );
      Client_SYS.Add_To_Attr( 'IDENTITY', user_, attr_ );
      Client_SYS.Add_To_Attr( 'MAIN_FOLDER', 1, attr_ );
      Client_SYS.Add_To_Attr( 'FOLDER_INDEX', 0, attr_ );
      Client_SYS.Add_To_Attr( 'ITEM_COUNTER', 1, attr_ );
      Client_SYS.Add_To_Attr( 'UNREAD_ITEM_COUNTER', 1, attr_ );
      Client_SYS.Add_To_Attr( 'FOLDER_TYPE_DB', ToDo_Folder_Type_API.DB_TODO, attr_ );
      Client_SYS.Add_To_Attr( 'NAME', 'Todo Items', attr_ );
      ToDo_Folder_API.New__(info_, objid_, objversion_, attr_, 'DO');
   ELSE
      UPDATE TODO_FOLDER_TAB
      SET item_counter = item_counter_ + 1,
          unread_item_counter = unread_item_counter_ + 1
      WHERE folder_id = folder_id_
      AND identity = user_
      AND main_folder = 1
      AND folder_type = ToDo_Folder_Type_API.DB_TODO;
   END IF;
   CLOSE folder_exist;
   RETURN folder_id_;
END Post_To_Folder___;
