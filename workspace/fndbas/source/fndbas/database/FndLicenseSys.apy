-----------------------------------------------------------------------------
--
--  Purpose:  Do not alter anything defined in this file. This file cannot be customized. No single patches can be merged. Only the complete file as delivered by R&D can be deployed.
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  130102  MADR  Corrected format of error messages and added validation of view in Validate_Custom_License (Bug#107299)
--  130614  UDLE  Added new IFS users (Bug#110006)
--  130806  MADR  New definition of view FND_ROLE_CONTENT (Bug#111786)
--  140314  JEHUSE Split protected views and methods from logical Unit
--  150205  MADRSE TEJSE-410: Validate CTU license should be done in same transaction
--  160926  MABOSE TEINST-498 Views in apv file
-----------------------------------------------------------------------------


DEFINE PKG = FND_LICENSE_SYS

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

PROCEDURE Get_Custom_License_Info (
   license_name_    OUT VARCHAR2,
   number_of_users_ OUT NUMBER,
   usage_view_      IN  VARCHAR2)
IS
BEGIN
   Error_SYS.Appl_General(lu_name_, 'OBSOLETE_METHOD_CALL: Calling obsolete interface :P1', 'Fnd_License_SYS.Get_Custom_License_Info');
END Get_Custom_License_Info;


PROCEDURE Validate_Custom_License (
   usage_view_ IN VARCHAR2)
IS
BEGIN
   Error_SYS.Appl_General(lu_name_, 'OBSOLETE_METHOD_CALL: Calling obsolete interface :P1', 'Fnd_License_SYS.Validate_Custom_License');
END Validate_Custom_License;


PROCEDURE Validate_User_ATU_License (
   license_ IN VARCHAR2)
IS
BEGIN
   Error_SYS.Appl_General(lu_name_, 'OBSOLETE_METHOD_CALL: Calling obsolete interface :P1', 'Fnd_License_SYS.Validate_User_ATU_License');
END Validate_User_ATU_License;


FUNCTION Is_ATU_License_Valid (
   license_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   RETURN TRUE;
END Is_ATU_License_Valid;


FUNCTION Compute_View_Hash (
   owner_     IN VARCHAR2,
   view_name_ IN VARCHAR2) RETURN NUMBER
IS
   text_ LONG;
   hash_size_ CONSTANT NUMBER := power(2, 30);
BEGIN
   --
   -- The following implementation raises an exception if the the view text is longer than 32K.
   -- To remove this limitation a more complicated code using Dbms_Sql.Column_Value_Long may be written.
   --
   SELECT text INTO text_ FROM sys.all_views WHERE owner = upper(owner_) AND view_name = upper(view_name_);
   text_ := REPLACE(text_, CHR(13), '');
   text_ := rtrim(text_, CHR(10) || CHR(32));
   RETURN dbms_utility.get_hash_value(text_, 0, hash_size_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN value_error THEN
      Error_SYS.System_General('Cannot compute hash key on view :P1, which has SQL text longer than 32K', view_name_);
END Compute_View_Hash;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR


UNDEFINE PKG
-----------------------------------------------------------------------------
