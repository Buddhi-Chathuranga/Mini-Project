-----------------------------------------------------------------------------
--
--  Fragment:     ScheduledReportOptions
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

FUNCTION Pack_Report_Attr___ (
   virt_rec_ IN Virtual_Order_Report_Rec) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Add_To_Attr('REPORT_ID', virt_rec_.REPORT_ID, attr_);
   IF (virt_rec_.LAYOUT_NAME IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LAYOUT_NAME', virt_rec_.LAYOUT_NAME, attr_);
   END IF;
   IF (virt_rec_.REPORT_LANG_CODE IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LANG_CODE', virt_rec_.REPORT_LANG_CODE, attr_);
   END IF;
   IF (virt_rec_.SCHEDULE_ID IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SCHEDULE_ID', virt_rec_.SCHEDULE_ID, attr_);      
   END IF;
   RETURN attr_;   
END Pack_Report_Attr___;

FUNCTION Pack_Archiving_Attr___ (
   virt_rec_ IN Virtual_Order_Report_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
   pdf_archiving_ BOOLEAN;
BEGIN   
   IF (virt_rec_.REPORT_SEND_PDF) THEN
      pdf_archiving_ := TRUE;
   ELSE
      pdf_archiving_ := CASE virt_rec_.REPORT_SETTING WHEN 'PRINTER' THEN TRUE ELSE FALSE END;
   END IF;
      
   Client_SYS.Add_To_Attr('PDF_ARCHIVING', Bool_To_Str___(pdf_archiving_), attr_);   
   Client_SYS.Add_To_Attr('SEND_PDF', Bool_To_Str___(virt_rec_.REPORT_SEND_PDF), attr_);
   IF (virt_rec_.REPORT_SEND_PDF = TRUE) THEN
      Client_SYS.Add_To_Attr('SEND_PDF_TO', virt_rec_.REPORT_SEND_PDF_TO, attr_);
   END IF;   
   
   RETURN attr_;                
END Pack_Archiving_Attr___;

--PROCEDURE Unpack_Report_Attr___(
--   rec_ IN OUT Virtual_Order_Report_Rec,
--   report_attr_ IN VARCHAR2)
--IS
--   ptr_   NUMBER := NULL;
--   name_  VARCHAR2(30);
--   value_ VARCHAR2(2000);
--BEGIN
--   WHILE (Client_SYS.Get_Next_From_Attr(report_attr_, ptr_, name_, value_)) LOOP
--      Trace___('Unpack_Report_Attr___.' || name_, value_);      
--      CASE name_
--         WHEN 'LAYOUT_NAME' THEN rec_.layout_name := value_;
--         WHEN 'LANG_CODE' THEN rec_.report_lang_code := value_;
--         ELSE NULL;         
--      END CASE;
--   END LOOP;         
--END Unpack_Report_Attr___; 

--PROCEDURE Unpack_Archiving_Attr___(
--   rec_ IN OUT Virtual_Order_Report_Rec,
--   archive_attr_ IN VARCHAR2)
--IS
--   ptr_   NUMBER := NULL;
--   name_  VARCHAR2(30);
--   value_ VARCHAR2(2000);
--BEGIN
--   WHILE (Client_SYS.Get_Next_From_Attr(archive_attr_, ptr_, name_, value_)) LOOP
--      Trace___('Unpack_Archiving_Attr___.' || name_, value_);
--      CASE name_
--         WHEN ('PDF_ARCHIVING') THEN
--            Trace___('PDF_ARCHIVING', value_);
--         WHEN ('SEND_PDF') THEN
--            rec_.REPORT_SEND_PDF := Str_To_Bool___(value_);
--            Trace___('SEND_PDF', value_);
--         WHEN ('SEND_PDF_TO') THEN
--            rec_.REPORT_SEND_PDF_TO := value_;
--            Trace___('SEND_PDF_TO', value_);
--      END CASE;
--   END LOOP;
--END Unpack_Archiving_Attr___;

--PROCEDURE Unpack_Message_Attr___(
--   rec_ IN OUT Virtual_Order_Report_Rec,
--   message_attr_ IN VARCHAR2)
--IS
--   ptr_   NUMBER := NULL;
--   name_  VARCHAR2(30);
--   value_ VARCHAR2(2000);
--BEGIN
--   WHILE (Client_SYS.Get_Next_From_Attr(message_attr_, ptr_, name_, value_)) LOOP
--      Trace___('Unpack_Message_Attr___.' || name_, value_);
--      CASE name_
--         WHEN ('MESSAGE_TYPE') THEN
--            rec_.REPORT_SETTING := value_;
--            Trace___('MESSAGE_TYPE', value_);
--         WHEN ('PRINTER_ID') THEN
--            rec_.REPORT_PRINTER_ID := Unpack_Printer_Id___(value_);
--            Trace___('PRINTER_ID', value_);
--         WHEN ('SEND_EMAIL_TO') THEN
--            rec_.REPORT_SEND_EMAIL_TO := value_;
--            Trace___('SEND_EMAIL_TO', value_);
--      END CASE;
--   END LOOP;         
--END Unpack_Message_Attr___;

FUNCTION Pack_Message_Attr___ (
   virt_rec_ IN Virtual_Order_Report_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Add_To_Attr('MESSAGE_TYPE', virt_rec_.REPORT_SETTING, attr_);
   CASE virt_rec_.REPORT_SETTING
   WHEN ('NONE') THEN
      NULL;
   WHEN ('PRINTER') THEN
      Trace___('MESSAGE_TYPE', Pack_Printer_Id___(virt_rec_.REPORT_PRINTER_ID));
      Client_SYS.Add_To_Attr('PRINTER_ID', Pack_Printer_Id___(virt_rec_.REPORT_PRINTER_ID), attr_);
   WHEN ('EMAIL') THEN
      Client_SYS.Add_To_Attr('SEND_EMAIL_TO', virt_rec_.REPORT_SEND_EMAIL_TO, attr_);
   END CASE;
   RETURN attr_;
END Pack_Message_Attr___;

FUNCTION Pack_Printer_Id___ (
   printer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   packed_printer_id_ VARCHAR2(1000);
   
   CURSOR cur_printer_id IS
      SELECT DESCRIPTION || ',SERVER,' || PRINTER_ID
      FROM LOGICAL_PRINTER
      WHERE  PRINTER_ID = printer_id_;
BEGIN
   IF printer_id_ IS NULL THEN
      RETURN '';
   END IF;
   
   OPEN cur_printer_id;
   FETCH cur_printer_id INTO packed_printer_id_;   
   CLOSE cur_printer_id;   
   RETURN packed_printer_id_;   
END Pack_Printer_Id___;

--FUNCTION Unpack_Printer_Id___ (
--   packed_printer_id_ IN VARCHAR2 ) RETURN VARCHAR2
--IS   
--BEGIN
--   IF packed_printer_id_ IS NULL THEN
--      RETURN '';
--   END IF;
--   RETURN SUBSTR(packed_printer_id_, instr(packed_printer_id_,',SERVER,',1) + 8);
--END Unpack_Printer_Id___;

--PROCEDURE Unpack_Distribution_Attr___(
--   rec_ IN OUT Virtual_Order_Report_Rec,
--   distr_attr_ IN VARCHAR2)
--IS
--   token_table_ Utility_SYS.STRING_TABLE;
--   token_count_ NUMBER;   
--   value_       VARCHAR2(100);
--   
--   users_       VARCHAR2(32000);
--   groups_      VARCHAR2(32000);
--   
--   gdelim_      VARCHAR2(1);
--   udelim_      VARCHAR2(1);   
--BEGIN
--   -- Example:
--   -- FROM->  AHAGSE<FS>AKJOSE<FS>
--   -- TO->    ["IDENTITY=AHAGSE^","IDENTITY=AKJOSE^"]
--   Utility_SYS.Tokenize(distr_attr_, Client_SYS.field_separator_, token_table_, token_count_);
--   FOR i IN 1 .. token_table_.COUNT LOOP
--      value_ := token_table_(i);
--      Trace___('Unpack_Distribution_Attr___. Value', value_);
--      IF Distribution_Group_API.Exists(value_) THEN
--         groups_ := groups_ || gdelim_ || '"' || 'GROUP_NAME' || '=' || value_ || '^"';
--         gdelim_ := ',';
--      ELSE
--         users_ := users_ || udelim_ || '"' || 'IDENTITY' || '=' || value_ || '^"';
--         udelim_ := ',';
--      END IF;      
--   END LOOP;
--   
--   IF length(udelim_) > 0 THEN
--      users_ := '[' || users_ ||']';
--      Trace___('Distribution Users', users_);
--   END IF;
--   IF length(gdelim_) > 0 THEN
--      groups_ := '[' || groups_ ||']';
--      Trace___('Distribution Groups', groups_);   
--   END IF;
--
--   rec_.distribution_users := users_;
--   rec_.distribution_groups := groups_;         
--END Unpack_Distribution_Attr___;
--
--PROCEDURE Unpack_External_Archive_Attr___(
--   rec_ IN OUT Virtual_Order_Report_Rec,
--   external_attr_ IN VARCHAR2)
--IS
--   ptr_   NUMBER := NULL;
--   name_  VARCHAR2(30);
--   value_ VARCHAR2(2000);
--BEGIN
--   WHILE (Client_SYS.Get_Next_From_Attr(external_attr_, ptr_, name_, value_)) LOOP
--      Trace___('Unpack_External_Archive_Attr___.' || name_, value_);
--   END LOOP;         
--END Unpack_External_Archive_Attr___;


FUNCTION Args_To_Attr___ (
	args_ IN VARCHAR2) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   -- FROM_DATE=${FromDate};FROM_YEAR=2019;
   attr_ := REPLACE(args_, ';', Client_SYS.record_separator_);
   attr_ := REPLACE(attr_, '=', Client_SYS.field_separator_);
   RETURN attr_;
END Args_To_Attr___;


@Override
PROCEDURE CRUD_Default___ (
   rec_ IN OUT Virtual_Order_Report_Rec )
IS
   info_       VARCHAR2(32000);
   objid_      VARCHAR2(100);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
BEGIN
   Trace___('CRUD_Default___!');
   super(rec_);
   
   Batch_Schedule_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');   
   attr_ := Client_SYS.Remove_Attr('EXECUTION_PLAN', attr_);
   attr_ := Client_SYS.Remove_Attr('NEXT_EXECUTION_DATE', attr_);

   Add_To_Rec_From_Attr___(attr_, rec_);
   
   IF (Client_SYS.Item_Exist('ACTIVE_DB', attr_)) THEN      
      rec_.active := Str_To_Bool___(Client_SYS.Get_Item_Value('ACTIVE_DB', attr_));
   END IF;
--   IF (Client_SYS.Item_Exist('CHECK_EXECUTING_DB', attr_)) THEN
--      rec_.check_executing := CASE Client_SYS.Get_Item_Value('CHECK_EXECUTING_DB', attr_) WHEN arg_const_TRUE_ THEN TRUE ELSE FALSE END;
--   END IF;
   IF (Client_SYS.Item_Exist('STREAM_MSG_ON_COMPLETION_DB', attr_)) THEN
      rec_.stream_msg_on_completion := Str_To_Bool___(Client_SYS.Get_Item_Value('STREAM_MSG_ON_COMPLETION_DB', attr_));
   END IF;

   rec_.schedule_option := 'DAILY';      
   rec_.scheduled_day_number := 1;
   rec_.schedule_datetime := sysdate;
   rec_.schedule_time := TO_DATE(rec_.schedule_datetime);      
   rec_.schedule_interval := '00:00';      
 
   --Trace___('CRUD_Default___! REPORT_ID', rec_.report_id);   
END CRUD_Default___;


@Override
PROCEDURE CRUD_Create___(
   rec_ IN Virtual_Order_Report_Rec )
IS
   rec_copy_ Virtual_Order_Report_Rec;
   execution_plan_ VARCHAR2(1000);
BEGIN
   Trace___('CRUD_Create___! REPORT_ID', rec_.report_id);   
   --Add pre-processing code here
   rec_copy_ := rec_;
   rec_copy_.schedule_name := 'Scheduled Report - ' || Report_Sys.Get_Report_Title(rec_.report_id);
   Parse_Execution_Plan__(execution_plan_, rec_copy_.next_execution_date, rec_copy_, true);
   
   super(rec_copy_);

   --Add post-processing code here
   Trace___('CRUD_Create___ END!');
END CRUD_Create___;


@Override
PROCEDURE CRUD_Update___(
   old_ IN Virtual_Order_Report_Rec,
   new_ IN Virtual_Order_Report_Rec )
IS
   rec_copy_ Virtual_Order_Report_Rec;
   execution_plan_ VARCHAR2(1000);
BEGIN
   Trace___('CRUD_Update___! REPORT_ID', old_.report_id);   
   --Add pre-processing code here
   rec_copy_ := new_;
   
   Parse_Execution_Plan__(execution_plan_, rec_copy_.next_execution_date, rec_copy_, true);
   
   super(old_, rec_copy_);
   --Add post-processing code here
   Trace___('CRUD_Update___ END!');
END CRUD_Update___;


FUNCTION Get_Dynamic_Value___ (
   procedure_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   stmt_  VARCHAR2(2000);
   value_ VARCHAR2(32000);
BEGIN
   Assert_SYS.Assert_Is_Procedure(procedure_);
   stmt_ := 'BEGIN '||procedure_||'(:value_); END;';
   @ApproveDynamicStatement(2019-05-21,rakuse)
   EXECUTE IMMEDIATE stmt_ USING OUT value_;
   RETURN (SUBSTR(value_, 1, 500));
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END Get_Dynamic_Value___;


FUNCTION Bool_To_Str___ (
	value_ IN BOOLEAN) RETURN VARCHAR2
IS
BEGIN
   RETURN CASE value_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END;
END Bool_To_Str___;

FUNCTION Str_To_Bool___ (
	value_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   RETURN CASE value_ WHEN 'TRUE' THEN TRUE ELSE FALSE END;
END Str_To_Bool___;

FUNCTION Schedule_Report___ (
	key_ IN Virtual_Order_Report_Key) RETURN NUMBER
IS
BEGIN
   Trace___('Schedule_Report___');
   RETURN Create_Report___(key_, TRUE);
END Schedule_Report___;

FUNCTION Create_Report___ (
	key_ IN Virtual_Order_Report_Key,
   scheduled_ IN BOOLEAN DEFAULT FALSE) RETURN NUMBER
IS
   virt_rec_      Virtual_Order_Report_Rec;
   report_attr_   VARCHAR2(2000);
   param_attr_    VARCHAR2(32000);
   dist_list_     VARCHAR2(2000) := Fnd_Session_API.Get_Fnd_User();
   external_attr_ VARCHAR2(32000);
   result_key_    NUMBER;
   
   installation_id_     VARCHAR2(100);
BEGIN
   --RETURN result_key_;
   virt_rec_ := Get_Record___(key_);
   Trace___('REPORT_ID', virt_rec_.report_id);
   Trace___('DISTRIBUTION_USERS', virt_rec_.distribution_users);
   Trace___('DISTRIBUTION_GROUPS', virt_rec_.distribution_groups);   
   
   -- REPORT ATTR
   Client_SYS.Add_To_Attr('REPORT_ID', virt_rec_.report_id, report_attr_);
   
   -- PARAM ATTR
   --param_attr_ := virt_rec_.parameters2;
   --param_attr_ := Create_Attr___(virt_rec_);
   Trace___('param_attr_', param_attr_);
   Trace_SYS.Attribute_String(param_attr_, 'param_attr_');
   Validate_Parameter_Attr___(virt_rec_.report_id, param_attr_);
   
   -- DIST ATTR
   dist_list_ := Pack_Items___(virt_rec_.distribution_users, dist_list_);
   dist_list_ := Pack_Items___(virt_rec_.distribution_groups, dist_list_);
   Trace___('dist_list_', dist_list_);

   IF (scheduled_) THEN
      Parse_Execution_Plan__(virt_rec_.execution_plan, virt_rec_.next_execution_date, virt_rec_);
         
      IF (virt_rec_.schedule_id IS NULL) THEN
         Batch_SYS.New_Batch_Schedule (
            virt_rec_.schedule_id,           -- OUT
            virt_rec_.next_execution_date,   -- IN OUT
            virt_rec_.start_date,            -- IN OUT
            virt_rec_.stop_date,
            virt_rec_.schedule_name,
            'ARCHIVE_API.CREATE_AND_PRINT_REPORT__',
            Bool_To_Str___(virt_rec_.active),
            virt_rec_.execution_plan,
            virt_rec_.lang_code,
            installation_id_,
            virt_rec_.report_id,
            NULL, --Bool_To_Str___(virt_rec_.check_executing),
            Bool_To_Str___(virt_rec_.stream_msg_on_completion),
            virt_rec_.stream_notes);
      ELSE
         Batch_SYS.Modify_Batch_Schedule (
            virt_rec_.next_execution_date,
            virt_rec_.start_date,            -- IN OUT
            virt_rec_.stop_date,
            virt_rec_.schedule_id,
            virt_rec_.schedule_name,
            Bool_To_Str___(virt_rec_.active),
            virt_rec_.execution_plan,
            virt_rec_.lang_code,
            Bool_To_Str___(virt_rec_.stream_msg_on_completion),
            virt_rec_.stream_notes);
      END IF;
      
      Set_Parameter___(virt_rec_.schedule_id, 'REPORT_ATTR', Pack_Report_Attr___(virt_rec_));
      Set_Parameter___(virt_rec_.schedule_id, 'PARAMETER_ATTR', param_attr_);
      Set_Parameter___(virt_rec_.schedule_id, 'MESSAGE_ATTR', Pack_Message_Attr___(virt_rec_));
      Set_Parameter___(virt_rec_.schedule_id, 'ARCHIVING_ATTR', Pack_Archiving_Attr___(virt_rec_));
      Set_Parameter___(virt_rec_.schedule_id, 'DISTRIBUTION_LIST', dist_list_);
      Set_Parameter___(virt_rec_.schedule_id, 'EXTERNAL_ARCHIVE_ATTR', external_attr_);
      
      RETURN virt_rec_.schedule_id;
   ELSE
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, param_attr_, dist_list_);
      Trace___('ResultKey', result_key_);
      RETURN result_key_;   
   END IF;

END Create_Report___;

PROCEDURE Parse_Execution_Plan__ (
   execution_plan_ OUT VARCHAR2,
   next_execution_date_ OUT DATE,
   virt_rec_ IN Virtual_Order_Report_Rec,
   silent_mode_ IN BOOLEAN DEFAULT FALSE)
IS   
   attr_       VARCHAR2(32000);
   start_date_ DATE;
BEGIN
   Add_To_Attr_From_Rec___(virt_rec_, attr_);
   Trace_SYS.Attribute_String(attr_);
      
   -- Evaluate the Execution Plan...
   Batch_Schedule_API.Parse_Execution_Plan__(virt_rec_.schedule_id, attr_);         
   execution_plan_ := Client_SYS.Get_Item_Value('EXECUTION_PLAN', attr_);   
   Trace_SYS.Field('EXECUTION_PLAN', execution_plan_);   
   start_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('START_DATE', attr_));
   
   -- ...followed by the Next Execution Date   
   next_execution_date_ := Batch_SYS.Get_Next_Exec_Time__(execution_plan_,
                                                          NULL,
                                                          start_date_,
                                                          Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('STOP_DATE', attr_)));
                                                          
   IF (next_execution_date_ IS NULL) THEN
      next_execution_date_ := Client_SYS.Attr_Value_To_Date(TO_CHAR(start_date_, 'YYYY-MM-DD') || '-' || TO_CHAR(SYSDATE, 'HH24:MI:SS'));
   END IF;

   Trace_SYS.Field('NEXT_EXECUTION_DATE', next_execution_date_);

EXCEPTION
   WHEN OTHERS THEN
      IF (NOT silent_mode_) THEN
         RAISE;
      END IF;
      execution_plan_ := NULL;
      next_execution_date_ := NULL;
END Parse_Execution_Plan__;

PROCEDURE Set_Parameter___ (
   schedule_id_ IN NUMBER,
   name_        IN VARCHAR2,
   value_       IN VARCHAR2)
IS   
   param_rec_ batch_schedule_par_tab%ROWTYPE;   
   
   CURSOR get_param IS
      SELECT seq_no, rowkey
      FROM  batch_schedule_par_tab
      WHERE schedule_id = schedule_id_         
      AND   name = name_;
BEGIN
   Trace___('Set_Parameter___');
   OPEN  get_param;
   FETCH get_param INTO param_rec_.SEQ_NO, param_rec_.ROWKEY;
   CLOSE get_param;

   param_rec_.SCHEDULE_ID := schedule_id_;
   param_rec_.NAME        := name_;
   param_rec_.VALUE       := value_;     
   IF (param_rec_.SEQ_NO IS NULL) THEN
      Trace___('Create Param "' || name_ || '"', value_);
      Batch_Schedule_Par_API.New__(param_rec_);            
   ELSE
      Trace___('Update Param "' || name_ || '"', value_);
      Batch_Schedule_Par_API.Modify__(param_rec_);            
   END IF;
END Set_Parameter___;


FUNCTION Resolve_Label___ (
   logical_unit_   IN VARCHAR2,
   report_id_    IN VARCHAR2,
   column_name_  IN VARCHAR2,
   column_query_ IN VARCHAR2) RETURN VARCHAR2
IS
   label_ VARCHAR2(200);
BEGIN
   label_ := NVL(Language_SYS.Translate_Report_Question_(logical_unit_, report_id_, column_name_, column_query_), column_query_);   
   IF (SUBSTR(label_,LENGTH(label_)) = ':') THEN
      RETURN SUBSTR(label_,1, LENGTH(label_)-1);
   END IF;
   RETURN label_;
END Resolve_Label___;


FUNCTION Pack_Items___(
   items_ IN VARCHAR2,
   list_  IN VARCHAR2) RETURN VARCHAR2
IS
   from_        NUMBER := 1;
   to_          NUMBER;
   value_       VARCHAR2(500);
   packed_list_ VARCHAR2(2000) := list_;
BEGIN
   IF items_ IS NULL THEN
      RETURN packed_list_;
   END IF;
   -- Example:
   -- FROM->  ["IDENTITY=AHAGSE^","IDENTITY=AKJOSE^"]
   -- TO->    AHAGSE<FS>AKJOSE<FS>
   WHILE (instr(items_,'=',from_)> 0) LOOP
      from_ := instr(items_,'=',from_);
      to_ := instr(items_,'^',from_);
      value_ := substr(items_,from_+1,to_-from_-1);
      from_ := to_;
      packed_list_ := packed_list_ || Client_SYS.field_separator_ || value_;
   END LOOP;   
   RETURN packed_list_;
END Pack_Items___;


PROCEDURE Validate_Parameter_Attr___ (
   report_id_ VARCHAR2,
   attr_ VARCHAR2)
IS   
   ptr_           NUMBER := NULL;
   name_          VARCHAR2(100);
   value_         VARCHAR2(1000);   
BEGIN
   Trace___('Validate_Parameter_Attr___');
   Check_Required___(report_id_, attr_);
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      Validate_Parameter___(report_id_, name_, value_);      
   END LOOP;   
END Validate_Parameter_Attr___;


PROCEDURE Check_Required___ (
   report_id_ IN VARCHAR2,  
   attr_      IN VARCHAR2)
IS   
   CURSOR required_cols IS
      SELECT column_name, column_title       -- INVESTIGATE: Use column_query instead of column_title?
      FROM REPORT_COLUMN_DEFINITION
      WHERE report_id = report_id_
      AND column_query is not null
      AND SUBSTR(column_qflags, 1,1) IN ('M');
BEGIN
   -- TEMP DISIABLED
--   RETURN;
   Trace___('Check_Required___');   
   FOR col IN required_cols LOOP
      IF (Client_SYS.Get_Item_Value(col.column_name, attr_) IS NULL) THEN
         Error_SYS.Appl_General(lu_name_, 'REQUIRED_VALUE_MISSING: Report Parameter '':P1'' must be specified.', 
         Resolve_Label___(Report_Definition_API.Get_Lu_Name(report_id_), report_id_, col.column_name, col.column_title));  -- INVESTIGATE: Use column_query instead of column_title?
      END IF;
   END LOOP;  
   
END Check_Required___;


PROCEDURE Validate_Parameter___ (
   report_id_   IN VARCHAR2,
   column_name_ IN VARCHAR2,
   value_       IN VARCHAR2)
IS
   validate_method_ VARCHAR2(32000);
   
   CURSOR get_validate_method IS
      SELECT validate_method
      FROM REPORT_COLUMN_DEFINITION
      WHERE report_id = report_id_
      AND column_name = column_name_;
BEGIN
   -- TEMP DISIABLED
   --RETURN;
   OPEN get_validate_method;
   FETCH get_validate_method INTO validate_method_;
   CLOSE get_validate_method;
   IF (validate_method_ IS NOT NULL) THEN 
      Trace___('Found validate method for "' || column_name_ || '" => ', validate_method_); 
      Assert_SYS.Assert_Is_Procedure(validate_method_);
      @ApproveDynamicStatement(2019-03-13,rakuse)
      EXECUTE IMMEDIATE 'BEGIN '||validate_method_||'(:value_); END;' USING IN value_;
   END IF;      
EXCEPTION
   WHEN no_data_found THEN
      NULL;
END Validate_Parameter___;

FUNCTION Validate_Custom_Execution_Plan___ (
	execution_plan_ IN VARCHAR2) RETURN DATE
IS
BEGIN
   Batch_SYS.Check_Batch_Sched_Cust_Expr__(execution_plan_);   
   RETURN Batch_SYS.Update_Exec_Time__(execution_plan_);
END Validate_Custom_Execution_Plan___;

FUNCTION Enumerate_Layout___(
   report_id_ IN VARCHAR2 ) RETURN Objid_Arr
IS
   arr_layouts_ Objid_Arr := Objid_Arr();
   
   list_ VARCHAR2(32000);
   start_pos_ NUMBER := 1;
   end_pos_ NUMBER;
   full_layout_ VARCHAR2(2000);
   objid_ ROWID;
   layout_name_ VARCHAR2(2000);
   
   CURSOR objidget(rpt_id_ IN VARCHAR2,layout_name_ IN VARCHAR2) IS
      SELECT objid
      FROM report_layout_definition 
      WHERE report_id = rpt_id_
      AND   layout_name LIKE layout_name_||'%';
   
BEGIN   
   Report_Layout_Definition_API.Enumerate_Layout(list_, report_id_); --droped the result key for the moment 
   IF list_ IS NULL THEN
      RETURN arr_layouts_;
   END IF;
   
   WHILE INSTR(list_,client_sys.record_separator_,start_pos_,1) > 0 LOOP            
      arr_layouts_.extend;
      end_pos_ :=  INSTR(list_,client_sys.record_separator_,start_pos_,1);
      full_layout_  := SUBSTR(list_,start_pos_,end_pos_);
      layout_name_ := SUBSTR(full_layout_,1,INSTR(full_layout_ ,client_sys.field_separator_,1,1)-1);
      OPEN objidget(report_id_,layout_name_);
      LOOP
         FETCH objidget INTO objid_;
         EXIT WHEN objidget%NOTFOUND;              
         arr_layouts_(arr_layouts_.last) := objid_;
      END LOOP;
      CLOSE objidget;
      start_pos_ := end_pos_ +1;           
   END LOOP;   
   
   RETURN arr_layouts_;
END Enumerate_Layout___;

FUNCTION Enumerate_Report_Languages___(
   report_id_ IN VARCHAR2 ) RETURN Objid_Arr
IS
   language_code_arr_ Objid_Arr := Objid_Arr();
   list_ VARCHAR2(4000);
   lang_code_long_ VARCHAR2(12);
   lang_code_short_ VARCHAR2(3);
   start_pos_ NUMBER ;
   end_pos_ NUMBER;
   objid_ ROWID;
   
   CURSOR langcodeobjids(lng_ IN VARCHAR2) IS  
      SELECT objid
      FROM LANGUAGE_CODE
      WHERE lang_code = lng_;   
BEGIN
   start_pos_ :=1;
   language_sys.enumerate_report_languages_(list_, report_id_);
   IF list_ IS NOT NULL THEN
      WHILE( INSTR(list_,client_sys.record_separator_,start_pos_,1) > 0) LOOP
         language_code_arr_.extend;
         end_pos_ := INSTR(list_,client_sys.record_separator_,start_pos_,1);        
         lang_code_long_ := SUBSTR(list_,start_pos_,(end_pos_-start_pos_));         
         lang_code_short_:= SUBSTR(lang_code_long_,1,INSTR(lang_code_long_,client_sys.field_separator_,1,1)-1);         
         OPEN langcodeobjids(lang_code_short_);
         LOOP
            FETCH langcodeobjids INTO  objid_;            
            EXIT WHEN langcodeobjids%NOTFOUND ;
            language_code_arr_(language_code_arr_.last) := objid_;
         END LOOP;
         CLOSE langcodeobjids;
         start_pos_ := end_pos_ +1;
      END LOOP;
   END IF;
   RETURN language_code_arr_;
  
END Enumerate_Report_Languages___;

--------------------------- REGISTRATION METHODS ----------------------------

PROCEDURE Append_Param_Value___ (
   text_ IN OUT VARCHAR2,
	name_ IN VARCHAR2,
   value_ IN VARCHAR2)
IS
BEGIN
   text_ := text_ || '\r\n\r\n' || name_ || ' = ';
   IF (value_ IS NOT NULL) THEN
      text_ := text_ || '**' || value_ || '**';      
   END IF;
END Append_Param_Value___;


FUNCTION Pack_Attrs___ (
	key_ IN Virtual_Order_Report_Key) RETURN Packed_Attributes_Rec
IS
   virt_rec_  Virtual_Order_Report_Rec;
   dist_list_ VARCHAR2(2000) := Fnd_Session_API.Get_Fnd_User();
   
   ret_       Packed_Attributes_Rec;
BEGIN
   virt_rec_ := Get_Record___(key_);

   -- DIST ATTR
   dist_list_ := Pack_Items___(virt_rec_.distribution_users, dist_list_);
   dist_list_ := Pack_Items___(virt_rec_.distribution_groups, dist_list_);
   ret_.distribution_attr := dist_list_;
   
   ret_.schedule_options := Encode___(Pack_Schedule_Options___(virt_rec_));
   ret_.report_attr      := Encode___(Pack_Report_Attr___(virt_rec_));
   ret_.archiving_attr   := Encode___(Pack_Archiving_Attr___(virt_rec_));
   ret_.message_attr     := Encode___(Pack_Message_Attr___(virt_rec_));   
   RETURN ret_;
END Pack_Attrs___;

FUNCTION Encode___ (
   value_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN   
   RETURN REPLACE(value_, Client_SYS.record_separator_, '^');
END Encode___;

FUNCTION Decode___ (
   value_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN REPLACE(value_, '^', Client_SYS.record_separator_);
END Decode___;

FUNCTION Pack_Schedule_Options___ (
   virt_rec_ IN Virtual_Order_Report_Rec ) RETURN VARCHAR2
IS
   attr_                VARCHAR2(32000);
   execution_plan_      VARCHAR2(2000);
   next_execution_date_ DATE;
BEGIN
   Parse_Execution_Plan__(execution_plan_, next_execution_date_, virt_rec_);
   Trace___('Pack_Schedule_Options___. Execution_plan_', execution_plan_);
      
   Client_SYS.Add_To_Attr('SCHEDULE_NAME', virt_rec_.schedule_name, attr_);
   Client_SYS.Add_To_Attr('EXECUTION_PLAN', execution_plan_, attr_);

   --Client_SYS.Add_To_Attr('NEXT_EXECUTION_DATE', virt_rec_.next_execution_date, attr_);
   Client_SYS.Add_To_Attr('START_DATE', virt_rec_.start_date, attr_);
   Client_SYS.Add_To_Attr('STOP_DATE', virt_rec_.stop_date, attr_);
   
   Client_SYS.Add_To_Attr('ACTIVE', Bool_To_Str___(virt_rec_.active), attr_);
   Client_SYS.Add_To_Attr('LANG_CODE', virt_rec_.lang_code, attr_);
   Client_SYS.Add_To_Attr('STREAM_MSG_ON_COMPLETION', Bool_To_Str___(virt_rec_.stream_msg_on_completion), attr_);
   Client_SYS.Add_To_Attr('STREAM_NOTES', virt_rec_.stream_notes, attr_);
   
   RETURN attr_;   
END Pack_Schedule_Options___;

FUNCTION Schedule_Report___ (
   param_attr_             IN VARCHAR2,
   coded_schedule_options_ IN VARCHAR2,
   coded_report_attr_      IN VARCHAR2,
   coded_message_attr_     IN VARCHAR2,
   coded_archiving_attr_   IN VARCHAR2,
   dist_list_              IN VARCHAR2) RETURN NUMBER
IS
   schedule_id_         NUMBER;
   next_execution_date_ DATE;
   start_date_          DATE;
   
   schedule_options_ VARCHAR2(32000) := Decode___(coded_schedule_options_);
   report_attr_      VARCHAR2(32000) := Decode___(coded_report_attr_);
   message_attr_     VARCHAR2(32000) := Decode___(coded_message_attr_);
   archiving_attr_   VARCHAR2(32000) := Decode___(coded_archiving_attr_);
   external_attr_    VARCHAR2(32000);

   report_id_                VARCHAR2(100);   
   schedule_name_            VARCHAR2(1000);
   execution_plan_           VARCHAR2(2000);
   stop_date_                DATE;
   lang_code_                VARCHAR2(1000);   
   active_                   VARCHAR2(1000);
   stream_msg_on_completion_ VARCHAR2(1000);
   stream_notes_             VARCHAR2(2000);
   installation_id_          VARCHAR2(1000);
BEGIN
   report_id_ := Client_SYS.Get_Item_Value('REPORT_ID', report_attr_);
   
   schedule_name_ := Client_SYS.Get_Item_Value('SCHEDULE_NAME', schedule_options_);
   execution_plan_ := Client_SYS.Get_Item_Value('EXECUTION_PLAN', schedule_options_);   
   start_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('START_DATE', schedule_options_));
   stop_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('STOP_DATE', schedule_options_));   
   lang_code_ := Client_SYS.Get_Item_Value('LANG_CODE', schedule_options_);   
   active_ := Client_SYS.Get_Item_Value('ACTIVE', schedule_options_);
   stream_msg_on_completion_ := Client_SYS.Get_Item_Value('STREAM_MSG_ON_COMPLETION', schedule_options_);
   stream_notes_ := Client_SYS.Get_Item_Value('STREAM_NOTES', schedule_options_);
         
   Batch_SYS.New_Batch_Schedule (
      schedule_id_,           -- OUT
      next_execution_date_,   -- IN OUT
      start_date_,            -- IN OUT
      stop_date_,             -- IN
      schedule_name_,
      'ARCHIVE_API.CREATE_AND_PRINT_REPORT__',
      active_,
      execution_plan_,
      lang_code_,
      installation_id_,
      report_id_,
      NULL, -- check_executing
      stream_msg_on_completion_,         
      stream_notes_);

   Client_SYS.Set_Item_Value('SCHEDULE_ID', schedule_id_, report_attr_);
   Set_Parameter___(schedule_id_, 'REPORT_ATTR', report_attr_);
   Set_Parameter___(schedule_id_, 'PARAMETER_ATTR', param_attr_);
   Set_Parameter___(schedule_id_, 'MESSAGE_ATTR', message_attr_);
   Set_Parameter___(schedule_id_, 'ARCHIVING_ATTR', archiving_attr_);
   Set_Parameter___(schedule_id_, 'DISTRIBUTION_LIST', Fix_Separator___(dist_list_));
   Set_Parameter___(schedule_id_, 'EXTERNAL_ARCHIVE_ATTR', external_attr_);
      
   RETURN schedule_id_;
END Schedule_Report___;

FUNCTION Fix_Separator___ (
   list_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   IF (SUBSTR(list_, LENGTH(list_)) = client_sys.field_separator_) THEN
      RETURN list_;
   ELSE
      RETURN list_ || Client_SYS.field_separator_;
   END IF;      
END Fix_Separator___;

--------------------------------- TRACE METHODS ----------------------------------

PROCEDURE Trace___ (
   name_ IN VARCHAR2,
   text_ IN VARCHAR2)
IS
BEGIN
   NULL;
--   Trace_SYS.Field(name_, REPLACE(text_, '^', '-'));
END Trace___;


PROCEDURE Trace___ (
   text_ IN VARCHAR2)
IS
BEGIN
   NULL;
--   Trace_SYS.Message(text_);
END Trace___;