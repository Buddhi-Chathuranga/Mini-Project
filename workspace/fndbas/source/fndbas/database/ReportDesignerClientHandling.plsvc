-----------------------------------------------------------------------------
--
--  Logical unit: ReportDesignerClientHandling
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

FUNCTION Is_Fndcob_Installed___ RETURN BOOLEAN
IS
BEGIN
$IF Component_Fndcob_SYS.INSTALLED $THEN
   RETURN TRUE;
$ELSE
   RETURN FALSE;
$END
END Is_Fndcob_Installed___;

FUNCTION Get_Layout___ (
   objkey_   IN VARCHAR2) RETURN BLOB
IS
   file_ BLOB;
   CURSOR layout IS
      SELECT layout
      FROM    ${PROJECTION}_report_layout_virtual_vrt
      WHERE objkey = objkey_;
BEGIN
   OPEN layout;
   FETCH layout INTO file_;
   CLOSE layout;
   RETURN file_;
END Get_Layout___;  

@Override
PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Report_Layout_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS   
   layout_obj_key_   VARCHAR2(1000);
   layout_           BLOB;
BEGIN
   layout_obj_key_ := Client_SYS.Get_Item_Value('LAYOUT_OBJ_KEY', attr_);
   super(etag_, key_, attr_, info_, action_);
   IF (action_ = 'DO') THEN
      layout_         := Get_Layout___(layout_obj_key_);
      Report_Layout_API.Update_Report_Layout(key_.report_id, key_.layout_name, layout_);
   END IF;
END CRUD_Update___;  


@Override
PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Report_Layout_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS   
   layout_obj_key_   VARCHAR2(1000);
   layout_           BLOB;
BEGIN
   layout_obj_key_ := Client_SYS.Get_Item_Value('LAYOUT_OBJ_KEY', attr_);
   super(etag_, key_, attr_, info_, action_);
   IF (action_ = 'DO') THEN
      layout_         := Get_Layout___(layout_obj_key_);
      Report_Layout_API.Update_Report_Layout(key_.report_id, key_.layout_name, layout_);
   END IF;
END CRUD_Create___;

FUNCTION Report_Format_Request_Plap___ (
   result_key_        IN NUMBER,
   layout_name_       IN VARCHAR2,
   language_code_     IN VARCHAR2,
   number_formatting_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   rendered_output_id_   VARCHAR2(1000);
BEGIN
   Archive_API.Check_Authorized(result_key_);    
   rendered_output_id_ := REPORT_SYS.Report_Format_Request(result_key_,layout_name_,language_code_,number_formatting_);
   RETURN rendered_output_id_;
END Report_Format_Request_Plap___;