-----------------------------------------------------------------------------
--
--  Logical unit: FrameworkServices
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

FUNCTION Get_Picture_Id___ (
   fnd_user_ IN VARCHAR2 )RETURN VARCHAR2
IS
   picture_id_ NUMBER;
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      SELECT PICTURE_ID INTO picture_id_
      FROM PERSON_INFO_ALL
      WHERE user_id = fnd_user_;
      RETURN picture_id_;
   $ELSE
      RETURN NULL;
   $END
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
END Get_Picture_Id___;

--
-- Information on current user
--

FUNCTION Get_Current_User_Information___ RETURN User_Info_Rec
IS

BEGIN
   RETURN Get_User_Information___(Get_Current_User_Id___);
END Get_Current_User_Information___;


FUNCTION Get_User_Information___(
   user_id_ IN VARCHAR2 ) RETURN User_Info_Rec
IS
   rec_ User_Info_Rec;
   fnd_user_rec_ Fnd_User_API.Public_Rec;
   CURSOR preferred_language IS
		select lang_code_rfc3066 from language_code WHERE lang_code = (fnd_user_api.get_property(user_id_, 'PREFERRED_LANGUAGE'));
   CURSOR fallback_language IS
		select lang_code_rfc3066 from language_code WHERE lang_code = (fnd_setting_api.get_value('DEFAULT_LANGUAGE'));
BEGIN
   rec_.user_id := user_id_;
   fnd_user_rec_ := Fnd_User_API.Get(rec_.user_id );
   rec_.name := fnd_user_rec_.description;
   rec_.directory_id := fnd_user_rec_.web_user;
   rec_.picture := NULL;
   rec_.smtp_email := fnd_user_api.get_property(user_id_, 'SMTP_MAIL_ADDRESS');
   rec_.mobile_phone := fnd_user_api.get_property(user_id_, 'MOBILE_PHONE');

	OPEN preferred_language;
	FETCH preferred_language INTO rec_.preferred_language;
	CLOSE preferred_language;
	OPEN fallback_language;
	FETCH fallback_language INTO rec_.fallback_language;
	CLOSE fallback_language;

   $IF Component_Enterp_SYS.INSTALLED $THEN
      rec_.person_id := Person_Info_API.Get_Id_For_Current_User;

      IF rec_.person_id IS NOT NULL THEN
         rec_.name := Get_Person_Name___(rec_.person_id);
         rec_.email := Get_Person_Email___(rec_.person_id);
         rec_.work_phone := Get_Person_Phone_No___(rec_.person_id);
         rec_.mobile_no := Get_Person_Mobile_No___(rec_.person_id);
         rec_.picture_etag := Get_Person_Pic_Etag___(rec_.person_id);
      END IF;
   $END
   RETURN rec_;
END Get_User_Information___;


FUNCTION Get_Current_User_Id___ RETURN VARCHAR2
IS

BEGIN
   RETURN Fnd_Session_API.Get_Fnd_User;
END Get_Current_User_Id___;


FUNCTION Get_Current_User_Direc_11___ RETURN VARCHAR2
IS

BEGIN
   RETURN Get_User_Directory_Id___(Get_Current_User_Id___);
END Get_Current_User_Direc_11___;

FUNCTION Get_Current_User_Picture___ RETURN BLOB
IS

BEGIN
   RETURN Get_User_Picture___(Get_Current_User_Id___);
END Get_Current_User_Picture___;

FUNCTION Get_Current_User_Picture_Stream___ RETURN BLOB
IS

BEGIN
   RETURN Get_Current_User_Picture___;
END Get_Current_User_Picture_Stream___;


FUNCTION Get_User_Directory_Id___(
   user_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS

BEGIN
   RETURN Fnd_User_API.Get_Web_User(user_id_);
END Get_User_Directory_Id___;

FUNCTION Get_Current_User_Name___ RETURN VARCHAR2
IS

BEGIN
   RETURN Get_User_Name___(Get_Current_User_Id___);
END Get_Current_User_Name___;

--
-- Information of other users
--

FUNCTION Get_User_Name___(
   user_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS

BEGIN
   RETURN Fnd_User_API.Get_Description(user_id_);
END Get_User_Name___;

FUNCTION Get_User_Picture___(
   user_id_ IN VARCHAR2 ) RETURN BLOB
IS
   picture_id_ NUMBER := Get_Picture_Id___(user_id_);
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   display_text_     VARCHAR2(2000);
   file_name_        VARCHAR2(2000);
   file_path_        VARCHAR2(2000);
   external_storage_ VARCHAR2(2000);
   application_data_ VARCHAR2(2000);
   lob_objid_        VARCHAR2(2000);
   length_           NUMBER;
   picture_ BLOB;
BEGIN
   IF picture_id_ IS NOT NULL THEN
      Binary_Object_API.Get_Object_Info(objid_, objversion_, display_text_, file_name_, file_path_, external_storage_, application_data_, length_, lob_objid_, picture_id_);

      SELECT data INTO picture_
      FROM BINARY_OBJECT_DATA_BLOCK_TAB
      WHERE ROWID = lob_objid_;
      RETURN picture_;
   ELSE
      RETURN NULL;
   END IF;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
END Get_User_Picture___;

FUNCTION Get_User_Picture_Stream___(
   user_id_ IN VARCHAR2 ) RETURN BLOB
IS

BEGIN
   RETURN Get_User_Picture___(user_id_);
END Get_User_Picture_Stream___;

FUNCTION Get_Person_Picture___(
   person_id_ IN VARCHAR2 ) RETURN BLOB
IS
   picture_id_ NUMBER;
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   display_text_     VARCHAR2(2000);
   file_name_        VARCHAR2(2000);
   file_path_        VARCHAR2(2000);
   external_storage_ VARCHAR2(2000);
   application_data_ VARCHAR2(2000);
   lob_objid_        VARCHAR2(2000);
   length_           NUMBER;
   picture_ BLOB;
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      picture_id_ := Person_Info_API.Get_Picture_Id(person_id_);
   $END

   IF picture_id_ IS NOT NULL THEN
      Binary_Object_API.Get_Object_Info(objid_, objversion_, display_text_, file_name_, file_path_, external_storage_, application_data_, length_, lob_objid_, picture_id_);

      SELECT data INTO picture_
      FROM BINARY_OBJECT_DATA_BLOCK_TAB
      WHERE ROWID = lob_objid_;
      RETURN picture_;
   ELSE
      RETURN NULL;
   END IF;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
END Get_Person_Picture___;

FUNCTION Get_Person_Pic_Etag___(
   person_id_ IN VARCHAR2) RETURN VARCHAR2
IS
   picture_id_ NUMBER;
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      picture_id_ := Person_Info_API.Get_Picture_Id(person_id_);
   $END

   RETURN Get_Picture_Etag___(picture_id_);
END Get_Person_Pic_Etag___;

FUNCTION Get_User_Pic_Etag___(
   user_id_ IN VARCHAR2) RETURN VARCHAR2
IS
   picture_id_ NUMBER := Get_Picture_Id___(user_id_);
BEGIN
   RETURN Get_Picture_Etag___(picture_id_);
END Get_User_Pic_Etag___;

FUNCTION Get_Picture_Etag___(
   picture_id_ IN NUMBER) RETURN VARCHAR2
IS
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   display_text_     VARCHAR2(2000);
   file_name_        VARCHAR2(2000);
   file_path_        VARCHAR2(2000);
   external_storage_ VARCHAR2(2000);
   application_data_ VARCHAR2(2000);
   lob_objid_        VARCHAR2(2000);
   length_           NUMBER;
BEGIN
   IF picture_id_ IS NOT NULL THEN
      Binary_Object_API.Get_Object_Info(objid_, objversion_, display_text_, file_name_, file_path_, external_storage_, application_data_, length_, lob_objid_, picture_id_);
      RETURN objid_|| objversion_;
   ELSE
      RETURN NULL;
   END IF;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
END Get_Picture_Etag___;

FUNCTION Get_Person_Email___ (
   person_id_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      RETURN Comm_Method_API.Get_Default_Value(Party_Type_API.DB_PERSON, person_id_, Comm_Method_Code_API.DB_E_MAIL);
   $ELSE
      RETURN NULL;
   $END
END Get_Person_Email___;

FUNCTION Get_Person_Phone_No___ (
   person_id_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      RETURN Comm_Method_API.Get_Default_Value(Party_Type_API.DB_PERSON, person_id_, Comm_Method_Code_API.DB_PHONE);
   $ELSE
      RETURN NULL;
   $END
END Get_Person_Phone_No___;

FUNCTION Get_Person_Mobile_No___ (
   person_id_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      RETURN Comm_Method_API.Get_Default_Value(Party_Type_API.DB_PERSON, person_id_, Comm_Method_Code_API.DB_MOBILE);
   $ELSE
      RETURN NULL;
   $END
END Get_Person_Mobile_No___;

FUNCTION Get_Person_Picture_Stream___(
   person_id_ IN VARCHAR2 ) RETURN BLOB
IS

BEGIN
   RETURN Get_Person_Picture___(person_id_);
END Get_Person_Picture_Stream___;

FUNCTION Get_Person_Name___(
   person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      RETURN Person_Info_API.Get_Name(person_id_);
   $ELSE
      RETURN NULL;
   $END
END Get_Person_Name___;

FUNCTION Get_Person_User_Id___(
   person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      RETURN Person_Info_API.Get_User_Id(person_id_);
   $ELSE
      RETURN NULL;
   $END
END Get_Person_User_Id___;

FUNCTION Get_Person_Job_Title___(
   person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      RETURN Person_Info_API.Get_Job_Title(person_id_);
   $ELSE
      RETURN NULL;
   $END
END Get_Person_Job_Title___;

FUNCTION Get_Person_Information___(
   person_id_ IN VARCHAR2 ) RETURN Public_Person_Info_Rec
IS
   rec_ Public_Person_Info_Rec;
BEGIN
   rec_.name := Get_Person_Name___(person_id_);
   rec_.picture := NULL;
   rec_.email := Get_Person_Email___(person_id_);
   rec_.work_phone := Get_Person_Phone_No___(person_id_);
   rec_.mobile_no := Get_Person_Mobile_No___(person_id_);
   rec_.picture_etag := Get_Person_Pic_Etag___(person_id_);
   rec_.user_id := Get_Person_User_Id___(person_id_);
   rec_.job_title := Get_Person_Job_Title___(person_id_);
   RETURN rec_;
END Get_Person_Information___;

FUNCTION Get_Fnd_User_Information___(
   user_id_ IN VARCHAR2 ) RETURN Fnd_User_Info_Rec
IS
   rec_ Fnd_User_Info_Rec;
   fnd_user_rec_ Fnd_User_API.Public_Rec;
BEGIN
   fnd_user_rec_ := Fnd_User_API.Get(user_id_);
   rec_.user_id := fnd_user_rec_.identity;
   rec_.directory_id := fnd_user_rec_.web_user;
   rec_.name := fnd_user_rec_.description;
   rec_.email := fnd_user_api.get_property(user_id_, 'SMTP_MAIL_ADDRESS');
   rec_.mobile_no := fnd_user_api.get_property(user_id_, 'MOBILE_PHONE');
   rec_.picture_etag := Get_User_Pic_Etag___(user_id_);
   RETURN rec_;
END Get_Fnd_User_Information___;


FUNCTION Get_Object_Connection_Service_List___ RETURN Obj_Conn_Service_List_Arr
IS
   rec_ Obj_Conn_Service_List_Rec;
   lulist_ Obj_Conn_Service_List_Arr := Obj_Conn_Service_List_Arr();
   --SOLSETFW
   CURSOR getlu IS
      SELECT lu_name, service_list
      FROM   object_connection_sys_tab
      WHERE  Object_Connection_SYS.Is_Lu_Active__(lu_name) = 'TRUE';
BEGIN
   FOR rec IN getlu LOOP
      rec_.lu_name := rec.lu_name;
      rec_.service_list := rec.service_list;
      lulist_.extend;
      lulist_(lulist_.last):= rec_;
   END LOOP;
   RETURN lulist_;
END Get_Object_Connection_Service_List___;


FUNCTION Get_Logical_Units___(
   service_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   lu_conn_list_ VARCHAR2(32000);
BEGIN
   Object_Connection_SYS.Enumerate_Logical_Units(lu_conn_list_, service_);
   RETURN lu_conn_list_;
END Get_Logical_Units___;

FUNCTION Get_Key_Reference___(
   lu_name_ IN VARCHAR2,
   obj_id_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_ref_ VARCHAR2(32000);
BEGIN
   Client_SYS.get_key_reference(key_ref_, lu_name_, obj_id_);
   RETURN key_ref_;
END Get_Key_Reference___;

FUNCTION Get_Attachment_Count___ (
   lu_name_  IN VARCHAR2,
   key_ref_  IN VARCHAR2,
   services_ IN Text_Arr) RETURN Service_Count_Arr
IS
   method_     VARCHAR2(200);
   service_    Service_Count_Rec;
   count_list_ Service_Count_Arr := Service_Count_Arr();
BEGIN
   IF (services_.COUNT > 0) THEN
      FOR i IN 1 .. services_.COUNT LOOP
         service_.service := services_(i);
         method_ := Dictionary_SYS.Clientnametodbname_(service_.service) || '_API.Get_Object_Connection_Count__';
         Assert_SYS.Assert_Is_Package_Method(method_);
         @ApproveDynamicStatement(2020-11-11,rakuse)
         EXECUTE IMMEDIATE 'BEGIN :result := ' || method_ || '(:lu_name, :key_ref); END;'
            USING OUT service_.count, IN lu_name_, IN key_ref_;  
         count_list_.extend;
         count_list_(count_list_.LAST) := service_;         
      END LOOP;
   END IF;
   
   RETURN count_list_;
END Get_Attachment_Count___;

FUNCTION Get_Attachment_Count___(
   lu_name_            IN VARCHAR2,
   key_ref_            IN VARCHAR2,
   documents_          IN BOOLEAN,
   media_              IN BOOLEAN,
   object_connections_ IN VARCHAR2 ) RETURN Attachment_Count_Rec
IS
   connections_ Utility_SYS.String_Table;
   dummy_ NUMBER;
   result_ NUMBER;
   count_method_ VARCHAR2(200);
   document_count_ INTEGER := 0;
   media_count_ INTEGER := 0;
   object_connection_count_ VARCHAR2(2000);
   rec_ Attachment_Count_Rec;
BEGIN
   IF documents_ THEN
      document_count_ := Get_Document_Count___(lu_name_, key_ref_);
   END IF;

   IF media_ THEN
      media_count_ := Get_Media_Count___(lu_name_, key_ref_);
   END IF;

   IF NOT (object_connections_ IS NULL) THEN
      Utility_SYS.Tokenize(object_connections_, ',', connections_, dummy_);
      FOR i IN connections_.first .. connections_.last LOOP
         IF (UPPER(connections_(i)) = 'DOC_REFERENCE_OBJECT' OR UPPER(connections_(i)) = 'MEDIA_LIBRARY') THEN
            count_method_ := connections_(i) || '_API.Get_Obj_Conn_Client_Hit_Count';
         ELSE
            count_method_ := connections_(i) || '_API.Get_Object_Connection_Count__';
         END IF;
         Assert_SYS.Assert_Is_Package_Method(count_method_);
         @ApproveDynamicStatement(2019-06-12,liesse)
         EXECUTE IMMEDIATE 'BEGIN :result := ' || count_method_ || '(:lu_name, :key_ref); END;'
            USING OUT result_, IN lu_name_, IN key_ref_;
         IF NOT (object_connection_count_ IS NULL) THEN
            object_connection_count_ := object_connection_count_ || rec_.object_connection_count || ',' || REPLACE(connections_(i), '_') || '=' || result_;
         ELSE
            object_connection_count_ := object_connection_count_ || REPLACE(connections_(i), '_') || '=' || result_;
         END IF;
      END LOOP;
   END IF;
   rec_.document_count := document_count_;
   rec_.media_count := media_count_;
   rec_.object_connection_count := object_connection_count_;
   RETURN rec_;
END Get_Attachment_Count___;

FUNCTION Get_Document_Count___(
   lu_name_ IN VARCHAR2,
   key_ref_ IN VARCHAR2 ) RETURN INTEGER
IS

BEGIN
   $IF Component_Docman_SYS.INSTALLED $THEN
      RETURN Doc_Reference_Object_API.Get_Obj_Conn_Client_Hit_Count(lu_name_, key_ref_);
   $ELSE
      RETURN 0;
   $END
END Get_Document_Count___;

FUNCTION Get_Media_Count___(
   lu_name_ IN VARCHAR2,
   key_ref_ IN VARCHAR2 ) RETURN INTEGER
IS

BEGIN
   $IF Component_Appsrv_SYS.INSTALLED $THEN
      RETURN Media_Library_API.Get_Obj_Conn_Client_Hit_Count(lu_name_, key_ref_);
   $ELSE
      RETURN 0;
   $END
END Get_Media_Count___;

PROCEDURE Modify_Person_Image___ (
   person_id_  VARCHAR2,
   picture_id_ VARCHAR2)
IS
   attr_ VARCHAR2(32000);
   info_ VARCHAR2(32000);
   objid_ VARCHAR2(32000);
   objversion_ VARCHAR2(32000);
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
   SELECT objid, objversion INTO objid_, objversion_
   FROM Person_Info_All
   WHERE person_id = person_id_;
      -- Temporary Fix
      -- Bypass HR Approval Process
      Client_SYS.Add_To_Attr('FROM_HR', 'TRUE', attr_);
      Client_SYS.Add_To_Attr('PICTURE_ID', picture_id_, attr_);
      Person_Info_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
   $ELSE
      NULL;
   $END
END Modify_Person_Image___;

FUNCTION Init_My_Picture___ (
   image_name_ IN VARCHAR2 ) RETURN Person_Picture_Info_Rec
IS
   img_info_ Person_Picture_Info_Rec;
   objversion_ VARCHAR2(1000);
   objid_ VARCHAR2(1000);
BEGIN
   $IF Component_Enterp_SYS.INSTALLED $THEN
      IF Person_Info_API.Get_Id_For_Current_User IS NULL THEN
         Error_SYS.Appl_General(lu_name_, 'NOPERSON: Cannot update image because the current user is not assosiated to a Person record.');
      END IF;
      img_info_.picture_id := Get_Picture_Id___(Get_Current_User_Id___);
      Binary_Object_API.Create_Or_Replace(img_info_.picture_id, image_name_, image_name_, NULL, 'FALSE', 0, 'PICTURE');
      Binary_Object_Data_Block_API.New__(objversion_, objid_, img_info_.picture_id, NULL);
      img_info_.seq_id := 1;
      Modify_Person_Image___(Person_Info_API.Get_Id_For_Current_User, img_info_.picture_id);
      RETURN img_info_;
   $ELSE
      Error_SYS.Appl_General(lu_name_, 'NOUPDIMAGE: Cannot update user image because component ENTERP is not installed');
   $END
END Init_My_Picture___;

FUNCTION Get_System_Parameter_List___ RETURN System_Parameter_List_Arr
IS
   rec_ System_Parameter_List_Rec;
   parameter_list_ System_Parameter_List_Arr := System_Parameter_List_Arr();
   CURSOR parameters IS
      SELECT parameter, value
      FROM FND_SETTING
      WHERE parameter IN ('URL_HELP_BASE', 'URL_OPEN_IFS', 'URL_APP_ONWEB', 'URL_APP_SUPPORT',
      'ADDRESS_MAP_ENABLED', 'ADDRESS_MAP_URL', 'SEARCH_MATCH_CASE', 'IMAGE_EDITABLE', 'AZURE_LOGGING', 'INSTRUMENTATION_KEY', 'FND_BOT_SYSTEM_ID', 'DEFAULT_DATA_FILTER',
      'USER_ANALYTICS', 'USER_ANALYTICS_KEY', 'AUR_HELP_LANG', 'DISABLED_FEATURES', 'TIME_FORMAT', 'MAP_PROVIDER', 'MAP_PARAMETERS', 'SYSTEM_URL','SKIP_FILE_SCAN');
BEGIN
   FOR rec IN parameters LOOP
      rec_.parameter := rec.parameter;
      rec_.value := rec.value;
      parameter_list_.extend;
      parameter_list_(parameter_list_.last) := rec_;
   END LOOP;
   RETURN parameter_list_;
END Get_System_Parameter_List___;


FUNCTION Get_System_Parameter___(
   parameter_key_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   parameter_value_ VARCHAR2(1000);
BEGIN
   parameter_value_ := Fnd_Setting_API.Get_Value(parameter_key_);
   RETURN parameter_value_;
END Get_System_Parameter___;

FUNCTION Is_Projection_Available___(
   projection_ IN VARCHAR2 )  RETURN BOOLEAN
IS
BEGIN
   IF Fnd_Session_Api.Get_Fnd_User = Fnd_Session_Api.Get_App_Owner THEN
      --SOLSETFW
      RETURN Fnd_Projection_API.Is_Active(projection_);
   ELSE
      RETURN Fnd_Projection_Grant_API.Is_Available(projection_) = 'TRUE';
   END IF;
END Is_Projection_Available___;

FUNCTION Get_C_S_V_List___ RETURN Context_Substitution_Variable_List_Arr
IS
   rec_ Context_Substitution_Variable_List_Rec;
   csv_list_ Context_Substitution_Variable_List_Arr := Context_Substitution_Variable_List_Arr();
   method_ VARCHAR2(1000);
   query_ VARCHAR2(1000);

   CURSOR csvs IS
      SELECT name, server_method, implementation_type_db, transient_db, fnd_data_type_db
      FROM CONTEXT_SUBSTITUTION_VAR
      WHERE fnd_data_type_db != 'DATE';
BEGIN
	FOR rec IN csvs LOOP
      rec_.name := '#' || rec.name || '#';
      rec_.data_type := rec.fnd_data_type_db;
      method_ := rec.server_method;
      query_ := 'SELECT ' || method_ || ' FROM DUAL';

      @ApproveDynamicStatement(2019-09-24,chwrlk)
      EXECUTE IMMEDIATE query_ INTO rec_.value;

      csv_list_.extend;
      csv_list_(csv_list_.last) := rec_;
   END LOOP;

   RETURN csv_list_;
END Get_C_S_V_List___;

FUNCTION Get_Application_Name___ RETURN VARCHAR2
IS
BEGIN
   RETURN regexp_substr(database_sys.get_solution_set(),'[^:]+', 1, 2);
END Get_Application_Name___;

FUNCTION Get_Obj_Con_Services___ (
   category_ IN VARCHAR2) RETURN Obj_Con_Service_Arr
IS
   count_          NUMBER;   
   services_       Utility_SYS.STRING_TABLE;
   models_         Utility_SYS.STRING_TABLE;
   descriptions_   Utility_SYS.STRING_TABLE;

   service_model_  Obj_Con_Service_Rec;
   service_models_ Obj_Con_Service_Arr := Obj_Con_Service_Arr();   
BEGIN
   count_ := Object_Connection_Metadata_SYS.Enumerate_Services_(services_, models_, descriptions_, category_);
   IF (count_ > 0) THEN
      FOR i IN 1 .. count_ LOOP
         service_model_.service     := services_(i);
         service_model_.model_name  := models_(i);
         service_model_.description := descriptions_(i);
            
         service_models_.extend(1);
         service_models_(service_models_.LAST) := service_model_;
      END LOOP;
   END IF;
   
   RETURN service_models_;           
END Get_Obj_Con_Services___;

FUNCTION Get_Debug_Details___ (
   projection_name_ IN VARCHAR2) RETURN Debug_Info_Arr
IS
   arr_ Debug_Info_Arr;   
   CURSOR get_all IS
      SELECT DISTINCT based_on AS entity_name, NVL(e.from_view, q.from_view) AS from_view
         FROM fnd_proj_entityset es
            LEFT JOIN fnd_proj_entity e on e.projection_name = es.projection_name AND e.entity_name = es.based_on
            LEFT JOIN fnd_proj_query q  on q.projection_name = es.projection_name AND q.query_name  = es.based_on
         WHERE es.projection_name = projection_name_
         AND based_on_type IN ('Entity', 'Query');    -- 'Virtual' and 'Summary' are intentionally ignored!            
BEGIN   
   OPEN get_all;
   FETCH get_all BULK COLLECT INTO arr_;
   CLOSE get_all;
   
   RETURN arr_;
END Get_Debug_Details___;
