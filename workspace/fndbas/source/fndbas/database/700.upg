-----------------------------------------------------------------------------------
--
-- File: 700.upg
--
-- Date: 2015-10-26
--
-- Purpose: Upgrade IFS Base Server database objects
--          from release 6.0.0 to 7.0.0.
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------------
--  151026  MADDLK Created
-----------------------------------------------------------------------------------


-----------------------------------------------------------------------------------
-- Server
-----------------------------------------------------------------------------------

DEFINE MODULE = FNDBAS

SET SERVEROUTPUT ON

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_1');
PROMPT Removing OPTIONS_IN_USE and LAYOUT_OPTIONS columns from report_sys_layout_tab

DECLARE
   column_ Installation_SYS.ColRec;
BEGIN
	IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', '122637')) THEN
		column_ := Installation_SYS.Set_Column_Values('OPTIONS_IN_USE');
		Installation_SYS.Alter_Table_Column('report_sys_layout_tab', 'DROP COLUMN', column_, TRUE);
	
		column_ := Installation_SYS.Set_Column_Values('LAYOUT_OPTIONS');
		Installation_SYS.Alter_Table_Column('report_sys_layout_tab', 'DROP COLUMN', column_, TRUE);
		
		Installation_SYS.Register_Db_Patch('&MODULE', 122637, 'Removing OPTIONS_IN_USE and LAYOUT_OPTIONS columns from report_sys_layout_tab');
		COMMIT;
	END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_2');
PROMPT Add CREATED_TIME column to the PRINT_JOB_TAB.

DECLARE
  column_     Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'PRINT_JOB_TAB';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', '123141')) THEN
      column_ := Installation_SYS.Set_Column_Values('CREATED_TIME', 'DATE', 'Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

      Installation_SYS.Register_Db_Patch('&MODULE', 123141, 'Ability to query print jobs for print job status and created time through the Admin Lobby');
      COMMIT;
   END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_3');
PROMPT Adding column ENABLED_FOR_LOGIN to language_code_tab

DECLARE  
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CODE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ENABLED_FOR_LOGIN', 'VARCHAR2(5)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE LANGUAGE_CODE_TAB
SET ENABLED_FOR_LOGIN = 'TRUE'
WHERE ENABLED_FOR_LOGIN IS NULL;


DECLARE  
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CODE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ENABLED_FOR_LOGIN', 'VARCHAR2(5)','N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_4');
PROMPT Creating sequence SERVER_LOG_ID_SEQ to get the log_id in server_log_tab.

DECLARE
   seq_name_   VARCHAR2(30) := 'SERVER_LOG_ID_SEQ';
   max_log_id_ NUMBER;
   log_id_     NUMBER;
   buffer_     NUMBER := 1000;  
   CURSOR server_log IS 
      SELECT nvl(MAX(log_id),0)
      FROM   server_log_tab;
   CURSOR last_seq IS 
      SELECT nvl(last_number,0)
      FROM user_sequences
      WHERE sequence_name = seq_name_;
BEGIN
   OPEN server_log;
   FETCH server_log INTO max_log_id_;
   CLOSE server_log;   
   IF Installation_SYS.Object_Exist(seq_name_,'SEQUENCE') THEN   
      OPEN last_seq;
      FETCH last_seq INTO log_id_;
      CLOSE last_seq;      
      IF max_log_id_ >= log_id_ THEN
         Installation_SYS.Remove_Sequence(seq_name_);
         Installation_SYS.Create_Sequence(seq_name_,'START WITH '||(max_log_id_ + buffer_)||' INCREMENT BY 1 ORDER');
      END IF;
   ELSE
      Installation_SYS.Create_Sequence(seq_name_,'START WITH '||(max_log_id_ + buffer_)||' INCREMENT BY 1 ORDER');  
   END IF;       
END;
/   

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_5');
PROMPT Deactivate duplicate standard scheduled jobs for cleanup of application messages

DECLARE
   schedule_method_id_ NUMBER;

   PROCEDURE Set_Installation_Id(schedule_name_ VARCHAR2) IS
   BEGIN
      Dbms_Output.Put_Line('.');
      Dbms_Output.Put_Line('Schedule name ''' || schedule_name_ || ''':');
      --
      -- Set INSTALLATION_ID = SCHEDULE_NAME on one scheduled job
      --
      FOR S IN (SELECT schedule_id, schedule_name
                  FROM batch_schedule_tab
                 WHERE schedule_method_id = schedule_method_id_
                   AND schedule_name = schedule_name_
                   AND installation_id = to_char(schedule_id)
                 ORDER BY active DESC, schedule_id)
      LOOP
         Dbms_Output.Put_Line('.   Setting INSTALLATION_ID on scheduled job ' || S.schedule_id);
         BEGIN
            UPDATE batch_schedule_tab
               SET installation_id = schedule_name
             WHERE schedule_id = S.schedule_id;
         EXCEPTION
            WHEN dup_val_on_index THEN
               Dbms_Output.Put_Line('.      0 rows updated. There is already another scheduled job with INSTALLATION_ID set.');
         END;
         EXIT;
      END LOOP;
      --
      -- Deactivate scheduled jobs not marked with INSTALLATION_ID
      --
      UPDATE batch_schedule_tab
         SET active = 'FALSE', next_execution_date = NULL, modified_date = SYSDATE
       WHERE schedule_method_id = schedule_method_id_
         AND schedule_name = schedule_name_
         AND installation_id = to_char(schedule_id)
         AND active = 'TRUE';
      Dbms_Output.Put_Line('.   Deactivated ' || SQL%rowcount || ' scheduled jobs not marked with INSTALLATION_ID');
   END Set_Installation_Id;

BEGIN
   --
   -- Fetch SCHEDULE_METHOD_ID for method APP_MESSAGE_PROCESSING_API.CLEANUP
   --
   BEGIN
      SELECT schedule_method_id
        INTO schedule_method_id_
        FROM batch_schedule_method_tab
       WHERE method_name = 'APP_MESSAGE_PROCESSING_API.CLEANUP';
      Dbms_Output.Put_Line('Updating schedules for method APP_MESSAGE_PROCESSING_API.CLEANUP (schedule_method_id_ = ' || schedule_method_id_ || ')');
   EXCEPTION
      WHEN no_data_found THEN
         Dbms_Output.Put_Line('Method APP_MESSAGE_PROCESSING_API.CLEANUP not found.');
         RETURN;
   END;

   Set_Installation_Id('Cleanup of Finished messages');
   Set_Installation_Id('Cleanup TRASHCAN queue');
   Set_Installation_Id('Cleanup NOTIFICATIONS queue');
END;
/

COMMIT
/

UPDATE batch_schedule_method_tab
SET method_name = UPPER(method_name)
WHERE method_name != UPPER(method_name);

UPDATE batch_schedule_method_tab
SET validation_method = UPPER(validation_method)
WHERE validation_method != UPPER(validation_method);

UPDATE batch_schedule_method_tab
SET description = 'Shrink Lob Segments stored in basic files'
WHERE description = 'Shrink Lob Segments';

COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_6');
PROMPT Modifying LANGUAGE_CODE_TAB to modify column LANG_CODE_RFC3066

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LANGUAGE_CODE_TAB';
BEGIN
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'LANG_CODE_RFC3066', 'VARCHAR2(12)');
      Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/ 

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_7');
PROMPT Add PRIORITY to existing message queues and Create configuration parameters for Simplified Routing

--------------------------------------------------------------------------------------------------------
---Add configuration parameter PRIORITY to existing message queues
--------------------------------------------------------------------------------------------------------
BEGIN
   insert into fndcn_config_param_tab
    (area_name, group_name, instance_name, ordinal, parameter_name,
     parameter_value, parameter_type, help_text, rowversion)
   select P.area_name, P.group_name, P.instance_name, max(P.ordinal) + 1, 'PRIORITY',
          NULL, 'TypeNumber', 'Queue priority', 1
     from fndcn_config_param_tab P
    where P.area_name  = 'Integration'
      and P.group_name = 'MessageQueues'
      and not exists (select null
                        from FNDCN_CONFIG_PARAM_TAB R
                       where R.area_name      = P.area_name
                         and R.group_name     = P.group_name
                         and R.instance_name  = P.instance_name
                         and R.parameter_name = 'PRIORITY')
    group by P.area_name, P.group_name, P.instance_name;

   Dbms_Output.Put_Line(sql%rowcount || ' rows created.');
END;
/

--------------------------------------------------------------------------------------------------------
--- Change help text for configuration parameter PRIORITY
--------------------------------------------------------------------------------------------------------
BEGIN
   update fndcn_config_param_tab
      set help_text = 'Message queue priority. 0-4: gradations of normal priority, 5-9: gradations of expedited priority.'
    where area_name = 'Integration'
      and group_name = 'MessageQueues'
      and parameter_name = 'PRIORITY'
      and help_text = 'Queue priority';

   Dbms_Output.Put_Line(sql%rowcount || ' rows updated.');
END;
/

--------------------------------------------------------------------------------------------------------
--- Create configuration parameters for Simplified Routing
--------------------------------------------------------------------------------------------------------
BEGIN
   insert into FNDCN_CONFIG_PARAM_INST_TAB
    (AREA_NAME, GROUP_NAME, INSTANCE_NAME, INSTANCE_TYPE, DESCRIPTION, STATIC_CONFIG, ROWVERSION)
   values
    ('Integration', 'Routing', 'INBOUND', 'SimplifiedRouting', 'Simplified Routing of Inbound Messages', 1, 1);
   Dbms_Output.Put_Line('1 row created.');
EXCEPTION
   WHEN dup_val_on_index THEN
      Dbms_Output.Put_Line('0 rows created.');
END;
/

BEGIN
   insert into FNDCN_CONFIG_PARAM_INST_TAB
    (AREA_NAME, GROUP_NAME, INSTANCE_NAME, INSTANCE_TYPE, DESCRIPTION, STATIC_CONFIG, ROWVERSION)
   values
    ('Integration', 'Routing', 'OUTBOUND', 'SimplifiedRouting', 'Simplified Routing of Outbound Messages', 1, 1);
   Dbms_Output.Put_Line('1 row created.');
EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
      Dbms_Output.Put_Line('0 rows created.');
END;
/

BEGIN
   insert into fndcn_config_param_tab
   (AREA_NAME, GROUP_NAME, INSTANCE_NAME, PARAMETER_NAME, ORDINAL, PARAMETER_VALUE, PARAMETER_TYPE,
    VALUE_LIST, HELP_TEXT, ROWVERSION)
   values
   ('Integration', 'Routing', 'INBOUND', 'ATTRIBUTE', 1, 'none', 'TypeEnum',
    'none MESSAGE_FUNCTION MESSAGE_TYPE RECEIVER SENDER',
    'Application Message attribute name for Simplified Routing',1);
   Dbms_Output.Put_Line('1 row created.');
EXCEPTION
   WHEN dup_val_on_index THEN
      Dbms_Output.Put_Line('0 rows created.');
END;
/

BEGIN
   insert into fndcn_config_param_tab
   (AREA_NAME, GROUP_NAME, INSTANCE_NAME, PARAMETER_NAME, ORDINAL, PARAMETER_VALUE, PARAMETER_TYPE,
    VALUE_LIST, HELP_TEXT, ROWVERSION)
   values
   ('Integration', 'Routing', 'OUTBOUND', 'ATTRIBUTE', 1, 'none', 'TypeEnum',
    'none MESSAGE_FUNCTION MESSAGE_TYPE RECEIVER SENDER',
    'Application Message attribute name for Simplified Routing',1);
   Dbms_Output.Put_Line('1 row created.');
EXCEPTION
   WHEN dup_val_on_index THEN
      Dbms_Output.Put_Line('0 rows created.');
END;
/

COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_8');
PROMPT Modifying LANGUAGE_FILE_EXPORT_TAB to modify column FILE_ID

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LANGUAGE_FILE_EXPORT_TAB';
BEGIN
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'FILE_ID', 'VARCHAR2(4000)');
      Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_10');
PROMPT CREATING IN-MEMORY OBJECTS

DECLARE
   table_name_ VARCHAR2(30) := 'IN_MEMORY_COMP_ADVISOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ESTIMATE_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TABLE_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SUBMITED_TIME', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FINISHED_TIME', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COMPRESSION_RATIO', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SIZE_ON_DISK', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COMPRESSION_TYPE', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/
      
DECLARE
   index_name_ VARCHAR2(30) := 'IN_MEMORY_COMP_ADVISOR_PK';
   table_name_ VARCHAR2(30) := 'IN_MEMORY_COMP_ADVISOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ESTIMATE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'IN_MEMORY_COMP_ADVISOR_RK';
   table_name_ VARCHAR2(30) := 'IN_MEMORY_COMP_ADVISOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/      
     
DECLARE
   sequence_name_ VARCHAR2(30) := 'IN_MEMORY_COMP_ADVISOR_ID_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_11');
PROMPT Creating DB Objects TO Support ENABLE/DISABLE IN-Memory Packages
      
DECLARE
   table_name_ VARCHAR2(30) := 'IN_MEMORY_PACKAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_NAME', 'VARCHAR2(64)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'IS_CUSTOM_PACKAGE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'IS_INFORMATION_SOURCE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/
  
DECLARE
   index_name_ VARCHAR2(30) := 'IN_MEMORY_PACKAGE_PK';
   table_name_ VARCHAR2(30) := 'IN_MEMORY_PACKAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/      

DECLARE
   index_name_ VARCHAR2(30) := 'IN_MEMORY_PACKAGE_RK';
   table_name_ VARCHAR2(30) := 'IN_MEMORY_PACKAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/      
      
DECLARE
   sequence_name_ VARCHAR2(30) := 'IN_MEMORY_PACKAGE_ID_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
/
      
DECLARE
   table_name_ VARCHAR2(30) := 'IN_MEMORY_TABLE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TABLE_NAME', 'VARCHAR2(32)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/    
   
DECLARE
   index_name_ VARCHAR2(30) := 'IN_MEMORY_TABLE_PK';
   table_name_ VARCHAR2(30) := 'IN_MEMORY_TABLE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'TABLE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/    
     
DECLARE
   index_name_ VARCHAR2(30) := 'IN_MEMORY_TABLE_RK';
   table_name_ VARCHAR2(30) := 'IN_MEMORY_TABLE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/      

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_12');
PROMPT Creating DB Objects of AppConfigPackage

DECLARE
   table_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'AUTHOR', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VERSION', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'IMPORTED_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VERSION_TIME_STAMP', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ORIGIN', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LAST_MODIFIED_DATE', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOCKED', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TEMPORARY_PACKAGE', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_PK';
   table_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_RK';
   table_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_13');
PROMPT Creating DB Objects of AppConfigPackagItem

DECLARE
   table_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_ITEM_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ITEM_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ITEM_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_ITEM_PK';
   table_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_ITEM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ITEM_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_ITEM_RK';
   table_name_ VARCHAR2(30) := 'APP_CONFIG_PACKAGE_ITEM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_14');
PROMPT Add Column named Description to Custom menu

DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOM_MENU_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOM_MENU_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE CUSTOM_MENU_TAB 
SET definition_modified_date = rowversion
WHERE definition_modified_date IS NULL;

COMMIT;


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOM_MENU_TAB';
BEGIN   
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_15');
PROMPT Add Column DEFINITION_MODIFIED_DATE to Conditional Field Action

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CONDITIONAL_FIELD_ACTION_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE CONDITIONAL_FIELD_ACTION_TAB 
SET definition_modified_date = rowversion
WHERE definition_modified_date IS NULL;

COMMIT;

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CONDITIONAL_FIELD_ACTION_TAB';
BEGIN   
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_16');
PROMPT Creating DB objects TO support Simplified Fonts implementation
     
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FONT_DEFINITION_TAB';
BEGIN
   Installation_SYS.Remove_Table(table_name_, TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FONT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FONT_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENCODING', 'VARCHAR2(20)', 'N');         
   Installation_SYS.Set_Table_Column(columns_, 'DEPLOYMENT', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LOCK_FONT', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/
      
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_PK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FONT_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_RK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
      
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FONT_DEFINITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FONT_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   column_ := Installation_SYS.Set_Column_Values('DATA', 'BLOB', 'Y', NULL, 'LOB (DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_DEFINITION_PK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_DEFINITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FONT_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_DEFINITION_RK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_DEFINITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
      
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FONT_STYLE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FONT_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STYLE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_STYLE', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/
      
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_STYLE_PK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_STYLE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FONT_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'STYLE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_STYLE_RK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_STYLE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
      
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FONT_CONFIG_XML_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   column_ := Installation_SYS.Set_Column_Values('DATA', 'BLOB', 'Y', NULL, 'LOB (DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/
  
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_CONFIG_XML_PK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_CONFIG_XML_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FONT_CONFIG_XML_RK';
   table_name_ VARCHAR2(30) := 'REPORT_FONT_CONFIG_XML_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_17');
PROMPT Db differences

DECLARE
   column_ Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Remove_View('BATCH_SCHEDULE_REPORT_METHOD', TRUE);
   Installation_SYS.Remove_View('MODULE_TRANSLATION_PUB', TRUE);
END;
/
      
DECLARE
   table_name_ VARCHAR2(30) := 'WINDOWS_CLIENT_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   column_ := Installation_SYS.Set_Column_Values('NAVIGATOR_XML', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/      

DECLARE
   table_name_ VARCHAR2(30) := 'FND_CODE_TEMPLATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   column_ := Installation_SYS.Set_Column_Values('TEMPLATE', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/
    
DECLARE
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   column_ := Installation_SYS.Set_Column_Values('ACTION_PARAMETERS', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/
      
DECLARE
   table_name_ VARCHAR2(30) := 'LANGUAGE_FILE_EXPORT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   column_ := Installation_SYS.Set_Column_Values('EXPORTED_FILE', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/
      
DECLARE
   table_name_ VARCHAR2(30) := 'FND_EVENT_PARAMETER_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILENAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'LANGUAGE_FILE_IMPORT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   column_ := Installation_SYS.Set_Column_Values('IMPORT_FILE', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/
  
DECLARE
   table_name_ VARCHAR2(30) := 'PDF_ARCHIVE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   column_ := Installation_SYS.Set_Column_Values('PDF', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/
    
DECLARE
   table_name_ VARCHAR2(30) := 'PRINT_JOB_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   column_ := Installation_SYS.Set_Column_Values('ROUTING_INFO', 'CLOB', 'N');
   Installation_SYS.Alter_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   object_name_  VARCHAR2(30) := 'MODULE_DB_PATCH_PK';
   tablespace_   VARCHAR2(30) := '&IFSAPP_INDEX';
BEGIN
   Installation_SYS.Move_Object(object_name_, tablespace_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_18');
PROMPT Presentation Objects Methods are not defined as in Dictionary

DECLARE
   rowid_ VARCHAR2(100);
   CURSOR get_duplicates IS
      SELECT po_id, UPPER(sec_object) sec_object, COUNT(*) cnt
      FROM pres_object_security_tab
      GROUP BY po_id, UPPER(sec_object)
      HAVING COUNT(*) > 1
      ORDER BY po_id, UPPER(sec_object);
   CURSOR get_rec (po_id_ VARCHAR2, sec_object_ VARCHAR2) IS
      SELECT ROWID
      FROM pres_object_security_tab
      WHERE po_id = po_id_
      AND UPPER(sec_object) = sec_object_
      ORDER BY sec_object;
BEGIN
   FOR rec_ IN get_duplicates LOOP
      OPEN get_rec (rec_.po_id, rec_.sec_object);
      FETCH get_rec INTO rowid_;
      CLOSE get_rec;
      DELETE 
      FROM pres_object_security_tab
      WHERE ROWID = rowid_;
   END LOOP;  
   UPDATE pres_object_security_tab p
   SET sec_object = UPPER(SUBSTR(p.sec_object, 1, INSTR(p.sec_object, '.') - 1))||INITCAP(SUBSTR(p.sec_object, INSTR(p.sec_object, '.')))
   WHERE p.sec_object_type = 'METHOD'
   AND sec_object != UPPER(SUBSTR(p.sec_object, 1, INSTR(p.sec_object, '.') - 1))||INITCAP(SUBSTR(p.sec_object, INSTR(p.sec_object, '.')));
END;
/

DECLARE
   rowid_ VARCHAR2(100);
   CURSOR get_duplicates IS
      SELECT po_id, UPPER(sec_object) sec_object, COUNT(*) cnt
      FROM pres_object_sec_change_tab
      GROUP BY po_id, UPPER(sec_object)
      HAVING COUNT(*) > 1
      ORDER BY po_id, UPPER(sec_object);
   CURSOR get_rec (po_id_ VARCHAR2, sec_object_ VARCHAR2) IS
      SELECT ROWID
      FROM pres_object_sec_change_tab
      WHERE po_id = po_id_
      AND UPPER(sec_object) = sec_object_
      ORDER BY sec_object;
BEGIN
   FOR rec_ IN get_duplicates LOOP
      OPEN get_rec (rec_.po_id, rec_.sec_object);
      FETCH get_rec INTO rowid_;
      CLOSE get_rec;
      DELETE 
      FROM pres_object_sec_change_tab
      WHERE ROWID = rowid_;
   END LOOP;  
   UPDATE pres_object_sec_change_tab p
   SET sec_object = UPPER(SUBSTR(p.sec_object, 1, INSTR(p.sec_object, '.') - 1))||INITCAP(SUBSTR(p.sec_object, INSTR(p.sec_object, '.')))
   WHERE p.sec_object_type = 'METHOD'
   AND sec_object != UPPER(SUBSTR(p.sec_object, 1, INSTR(p.sec_object, '.') - 1))||INITCAP(SUBSTR(p.sec_object, INSTR(p.sec_object, '.')));
END;
/

COMMIT;


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_19');
PROMPT Adding COLUMN VALIDITY_MODE to DICTIONARY_SYS_VIEW_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_VIEW_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('VALIDITY_MODE', 'VARCHAR2(60)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_20');
PROMPT Adding SHOW_IN_ORDER_REPORTS column to the REPORT_SYS_TAB

DECLARE
  column_     Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'REPORT_SYS_TAB';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', '125636')) THEN
      column_ := Installation_SYS.Set_Column_Values('SHOW_IN_ORDER_REPORTS', 'VARCHAR2(10)', 'N', '''TRUE''');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

      Installation_SYS.Register_Db_Patch('&MODULE', 125636, 'Ability to hide Operational Reports');
      COMMIT;
   END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_21');
PROMPT Adding SHOW_IN_ORDER_REPORTS column to the REPORT_SYS_TAB

BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', '125843')) THEN
      
      UPDATE LANGUAGE_FONT_MAPPING_TAB 
         SET mapping_font_name = 'Sazanami Gothic'
       WHERE UPPER(mapping_font_name) = 'GOTHIC';

      UPDATE REPORT_FONT_STYLE_TAB
         SET style = 'Bold'
       WHERE font_name='Sazanami Gothic' AND file_name = 'sazanami-gothicbd.ttf';

      UPDATE REPORT_FONT_STYLE_TAB
         SET style = 'Bold Italic'
       WHERE font_name='Sazanami Gothic' AND file_name = 'sazanami-gothicbdit.ttf';

      Installation_SYS.Register_Db_Patch('&MODULE', 125843, 'Font mapping does not work for Sazanami Gothic font');
      COMMIT;
      
   END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_22');
PROMPT Changing Gothic to Sazanami Gothic in the database

DECLARE  
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_SYS_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LAYER', 'VARCHAR2(100)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_23');
PROMPT Adding SELF_NOTIFY column to FND_OBJ_SUBSCRIPTION_TAB

DECLARE
  column_slef_notify_     Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB';
BEGIN
   column_slef_notify_ := Installation_SYS.Set_Column_Values('SELF_NOTIFY', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_slef_notify_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_24');
PROMPT Adding ONE_TIME column to FND_OBJ_SUBSCRIPTION_TAB

DECLARE
   column_one_time_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB';
BEGIN
	column_one_time_ := Installation_SYS.Set_Column_Values('ONE_TIME', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_one_time_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_25');
PROMPT Removing unsupported language code 'br'

BEGIN
   DELETE
     FROM   LANGUAGE_CODE_TAB
     WHERE  LANG_CODE = 'br';
     COMMIT;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_26');
PROMPT Adding CONDITION AND CONDITION_CLIENT columns to FND_OBJ_SUBSCRIP_COLUMN_TAB

DECLARE
  column_condition_            Installation_SYS.ColRec;
  column_condition_client_     Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_TAB';
BEGIN
   column_condition_ := Installation_SYS.Set_Column_Values('CONDITION', 'VARCHAR2(4000)', 'Y');
   column_condition_client_ := Installation_SYS.Set_Column_Values('CONDITION_CLIENT', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_condition_, TRUE);
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_condition_client_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_27');
PROMPT Adding Streams for Background Jobs Functionality

DECLARE
   table_name_ VARCHAR2(30) := 'BATCH_SCHEDULE_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
	Installation_SYS.Reset_Column_Table(columns_);
    Installation_SYS.Set_Table_Column(columns_,'STREAM_MSG_ON_COMPLETION', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'Y');
	Installation_SYS.Set_Table_Column(columns_,'STREAM_NOTES', 'VARCHAR2(2000)', 'Y');
    Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

DECLARE   
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_LOCAL_TAB'; 
   columns_    Installation_SYS.ColumnTabType;      
BEGIN
	Installation_SYS.Reset_Column_Table(columns_);
    Installation_SYS.Set_Table_Column(columns_,'STREAM_MSG_ON_COMPLETION', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'Y');
	Installation_SYS.Set_Table_Column(columns_,'STREAM_PARAMS', 'VARCHAR2(4000)', 'Y');
    Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_28');
PROMPT Adding COLUMN VALIDITY_MODE to DICTIONARY_SYS_VIEW_TAB

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_VIEW_COLUMN_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('LOOKUP', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_LOCAL_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ERROR_KEY_VALUE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSACTION_SYS_STATUS_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('KEY_VALUE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


DELETE FROM language_sys_tab
 WHERE path LIKE 'BatchScheduleMethod%'
   AND TYPE = 'Basic Data'
   /

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_29');
PROMPT Adding dictionary information AND authorization related TABLES

DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJECTION_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJECTION_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/



DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJECTION_GRANT_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJECTION_GRANT_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_GRANT_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_GRANT_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CUD_ALLOWED', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_GRANT_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_GRANT_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_GRANT_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_GRANT_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_30');
PROMPT Keep only area_name 'Integration' in tables FNDCN_CONFIG_PARAM_INST_TAB and FNDCN_CONFIG_PARAM_TAB
---------------------------------------------------------------------------------------------------------
DELETE fndcn_config_param_inst_tab WHERE area_name <> 'Integration';
DELETE fndcn_config_param_tab      WHERE area_name <> 'Integration';

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_31');
PROMPT Set type of DEFAULT queue to 'MessageQueue', if NULL after upgrade from Apps9
--------------------------------------------------------------------------------------------------------

UPDATE fndcn_config_param_inst_tab
   SET instance_type = 'MessageQueue'
 WHERE area_name  = 'Integration'
   AND group_name = 'MessageQueues'
   AND instance_name = 'DEFAULT'
   AND instance_type IS NULL
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_32');
PROMPT Set type of ERROR and TRASHCAN queues to 'DisabledQueue'
--------------------------------------------------------------------------------------------------------

UPDATE fndcn_config_param_inst_tab
   SET instance_type = 'DisabledQueue'
 WHERE area_name  = 'Integration'
   AND group_name = 'MessageQueues'
   AND instance_name IN ('ERROR' , 'TRASHCAN')
   AND instance_type <> 'DisabledQueue'
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_33');
PROMPT Add column BINARY_MODIFIED_DATE to FNDCN_CONFIG_PARAM_TAB
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('BINARY_MODIFIED_DATE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_34');
PROMPT Copy VALUE_LIST to BINARY_MODIFIED_DATE for binary ConfigParameters
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_  VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_TAB';
   column_name_ VARCHAR2(30) := 'VALUE_LIST';
   sql_         VARCHAR2(3000);
BEGIN
   IF Installation_SYS.Column_Exist(table_name_, column_name_) THEN
      Dbms_Output.Put_Line('Copying VALUE_LIST to BINARY_MODIFIED_DATE for binary parameters');
      sql_ := 'UPDATE ' || table_name_ || ' set BINARY_MODIFIED_DATE = ' || column_name_ ||
              ' WHERE area_name = ''Integration''
                  AND parameter_type = ''TypeBinary''
                  AND value_list IS NOT NULL
                  AND binary_modified_date IS NULL';
      EXECUTE IMMEDIATE sql_;
      Dbms_Output.Put_Line(SQL%ROWCOUNT || ' rows updated.');
   ELSE
      Dbms_Output.Put_Line('Column ' || table_name_ || '.' || column_name_ || ' does not exist.');
   END IF;
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_35');
PROMPT Create temporary table CONFIG_PARAM_DISTINCT_JMS_TAB (See AppMessageProcessing.storage)
--------------------------------------------------------------------------------------------------------
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONFIG_PARAM_DISTINCT_JMS_TAB';
   index_name_ VARCHAR2(30) := 'CONFIG_PARAM_DISTINCT_JMS_UIX';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME',     'VARCHAR2(50)',  'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME',  'VARCHAR2(50)',  'N');
   Installation_SYS.Set_Table_Column(columns_, 'JMS_METHOD',     'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'JMS_METHOD');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U');
END;
/

--------------------------------------------------------------------------------------------------------
-- PROMPT Add LU ConnectReaderQueue
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'READER_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_ID', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEQ_NO', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STATE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED', 'TIMESTAMP(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODIFIED', 'TIMESTAMP(6)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RETRY_COUNTER', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ERROR_MESSAGE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'READER_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_UIX';
   table_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SEQ_NO');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   sequence_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
-- PROMPT Add LU ConfigAreaDef
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_AREA_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DISPLAY_NAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_AREA_DEF_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_AREA_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_AREA_DEF_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_AREA_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
-- PROMPT Add LU ConfigGroupDef
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_GROUP_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DISPLAY_NAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_GROUP_DEF_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_GROUP_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_GROUP_DEF_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_GROUP_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
-- PROMPT Add LU ConfigInstanceTypeDef
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TYPE_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TYPE_DEF_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TYPE_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TYPE_DEF_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TYPE_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
-- PROMPT Add LU ConfigParameterDef
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_PARAMETER_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_TYPE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE_LIST', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'HELP_TEXT', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'WRITE_PROTECTED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PARAMETER_DEF_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_PARAMETER_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PARAMETER_DEF_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_PARAMETER_DEF_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
-- PROMPT Add LU ConfigParameterDetail
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_DET_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'KEY', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_DET_PK';
   table_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_DET_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'KEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_DET_RK';
   table_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_DET_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_DET_IX';
   table_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_DET_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'AREA_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'KEY');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_36');
PROMPT Remove Servers of type ConnectServer
--------------------------------------------------------------------------------------------------------
BEGIN
   FOR inst_ IN (SELECT area_name, group_name, instance_name, ROWID
                   FROM fndcn_config_param_inst_tab
                  WHERE area_name = 'Integration'
                    AND group_name = 'Servers'
                    AND instance_type = 'ConnectServer')
   LOOP
      DELETE fndcn_config_param_tab
       WHERE area_name     = inst_.area_name
         AND group_name    = inst_.group_name
         AND instance_name = inst_.instance_name;

      DELETE fndcn_config_param_inst_tab
       WHERE ROWID = inst_.ROWID;
      Dbms_Output.Put_Line('Removed Server ' || inst_.instance_name);
   END LOOP;
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_37');
PROMPT Upgrade configuration parameters for Connector readers and senders
--------------------------------------------------------------------------------------------------------
DECLARE
   SUBTYPE param_row IS fndcn_config_param_tab%ROWTYPE;

   merge_skipped_ NUMBER := 0;
   merge_created_ NUMBER := 0;

   renamed_   NUMBER := 0;
   removed_   NUMBER := 0;

   global_indent_ CONSTANT VARCHAR2(10) := '   ';
   new_line_      CONSTANT VARCHAR2(10) := chr(10);

   ---------
   -- Log --
   ---------

   PROCEDURE Log(indent_ NUMBER, line_ VARCHAR2) IS
   BEGIN
      IF indent_ > 0 THEN
         Dbms_Output.Put(lpad(' ', 3 * indent_));
      END IF;
      Dbms_Output.Put_Line(global_indent_ || line_);
   END Log;

   PROCEDURE Log(line_ VARCHAR2) IS
   BEGIN
      Log(0, line_);
   END Log;

   -----------
   -- Merge --
   -----------

   FUNCTION Get_Boolean_Value (
      group_name_     VARCHAR2,
      instance_name_  VARCHAR2,
      parameter_name_ VARCHAR2) RETURN BOOLEAN
   IS
      parameter_value_ VARCHAR2(4000);
   BEGIN
      SELECT nvl(lower(parameter_value), 'false')
        INTO parameter_value_
        FROM fndcn_config_param_tab
       WHERE area_name  = 'Integration'
         AND group_name = group_name_
         AND instance_name = instance_name_
         AND parameter_name = parameter_name_;
      RETURN parameter_value_ = 'true';
   EXCEPTION
      WHEN no_data_found THEN
         RETURN FALSE;
   END Get_Boolean_Value;

   FUNCTION Exists_Parameter (
      group_name_     VARCHAR2,
      instance_name_  VARCHAR2,
      parameter_name_ VARCHAR2) RETURN BOOLEAN IS
   BEGIN
      FOR param_ IN (SELECT null
                       FROM fndcn_config_param_tab
                      WHERE area_name  = 'Integration'
                        AND group_name = group_name_
                        AND instance_name = instance_name_
                        AND parameter_name = parameter_name_)
      LOOP
         RETURN TRUE;
      END LOOP;
      RETURN FALSE;
   END Exists_Parameter;

   FUNCTION Exists_Parameter_Def (
      group_name_    VARCHAR2,
      instance_type_ VARCHAR2,
      parameter_name_ VARCHAR2) RETURN BOOLEAN IS
   BEGIN
      FOR param_ IN (SELECT null
                       FROM config_parameter_def_tab
                      WHERE area_name  = 'Integration'
                        AND group_name = group_name_
                        AND instance_type = instance_type_
                        AND parameter_name = parameter_name_)
      LOOP
         RETURN TRUE;
      END LOOP;
      RETURN FALSE;
   END Exists_Parameter_Def;

   PROCEDURE Create_New_Parameter (
      group_name_      VARCHAR2,
      instance_name_   VARCHAR2,
      parameter_name_  VARCHAR2,
      parameter_value_ VARCHAR2)
   IS
      param_ param_row;
   BEGIN
      param_.area_name       := 'Integration';
      param_.group_name      := group_name_;
      param_.instance_name   := instance_name_;
      param_.parameter_name  := parameter_name_;
      param_.parameter_value := parameter_value_;
      param_.rowversion      := 1;
      INSERT INTO fndcn_config_param_tab VALUES param_;
      merge_created_ := merge_created_ + 1;
      Log(1, 'Created ' || instance_name_ || '.' || parameter_name_ || ' = ' || parameter_value_);
   END Create_New_Parameter;

   PROCEDURE Merge_Security_Protocol (
      group_name_ VARCHAR2,
      tls_param_  VARCHAR2,
      ssl_param_  VARCHAR2)
   IS
      tls_ BOOLEAN;
      ssl_ BOOLEAN;
      security_protocol_ VARCHAR2(10);
   BEGIN
      FOR inst_ IN (SELECT group_name, instance_name
                      FROM fndcn_config_param_inst_tab
                     WHERE area_name = 'Integration'
                       AND group_name = group_name_
                       AND instance_type = 'Mail')
      LOOP
         IF Exists_Parameter(inst_.group_name, inst_.instance_name, 'SECURITY_PROTOCOL') OR
            Exists_Parameter_Def(inst_.group_name, 'Mail', 'SECURITY_PROTOCOL')
         THEN
            merge_skipped_ := merge_skipped_ + 1;
            Log(1, 'Skipped ' || inst_.instance_name);
            CONTINUE;
         END IF;
         tls_ := Get_Boolean_Value(inst_.group_name, inst_.instance_name, tls_param_);
         ssl_ := Get_Boolean_Value(inst_.group_name, inst_.instance_name, ssl_param_);
         IF tls_ THEN
            security_protocol_ := 'TLS';
         ELSIF ssl_ THEN
            security_protocol_ := 'SSL';
         ELSE
            security_protocol_ := '<none>';
         END IF;
         Create_New_Parameter(inst_.group_name, inst_.instance_name, 'SECURITY_PROTOCOL', security_protocol_);
      END LOOP;
   END Merge_Security_Protocol;

   ------------
   -- Rename --
   ------------

   PROCEDURE Rename_Parameter (
      group_name_         VARCHAR2,
      instance_type_      VARCHAR2,
      old_parameter_name_ VARCHAR2,
      new_parameter_name_ VARCHAR2,
      new_value_prefix_   VARCHAR2 DEFAULT NULL)
   IS
      count_ NUMBER;
   BEGIN
      UPDATE fndcn_config_param_tab P
         SET parameter_name = new_parameter_name_, rowversion = rowversion + 1,
             parameter_value = CASE WHEN new_value_prefix_ IS NOT NULL AND parameter_value IS NOT NULL
                                    THEN new_value_prefix_ || parameter_value
                                    ELSE parameter_value
                               END
       WHERE P.area_name  = 'Integration'
         AND P.group_name = group_name_
         AND EXISTS (SELECT null
                       FROM fndcn_config_param_inst_tab I
                      WHERE I.area_name = P.area_name
                        AND I.group_name = P.group_name
                        AND I.instance_name = P.instance_name
                        AND I.instance_type LIKE instance_type_)
         AND P.parameter_name = old_parameter_name_;
      count_ := SQL%rowcount;
      renamed_ := renamed_ + count_;
      Log(1, rpad(old_parameter_name_ || ' -> ' || new_parameter_name_, 50) || count_);
   END Rename_Parameter;

   ------------
   -- Remove --
   ------------

   PROCEDURE Remove_Parameter(group_name_ VARCHAR2, instance_type_ VARCHAR2, parameter_name_ VARCHAR2) IS
      count_ NUMBER;
   BEGIN
      DELETE FROM fndcn_config_param_tab P
       WHERE P.area_name  = 'Integration'
         AND P.group_name = group_name_
         AND EXISTS (SELECT null
                       FROM fndcn_config_param_inst_tab I
                      WHERE I.area_name = P.area_name
                        AND I.group_name = P.group_name
                        AND I.instance_name = P.instance_name
                        AND I.instance_type LIKE instance_type_)
         AND P.parameter_name = parameter_name_;
      count_ := SQL%rowcount;
      removed_ := removed_ + count_;
      Log(1, rpad(parameter_name_, 30) || count_);
   END Remove_Parameter;

BEGIN
   -----------
   -- Merge --
   -----------
   Log('Merging Mail reader parameters USE_TLS_POP and POP3S into one Enum paramerter SECURITY_PROTOCOL');
   Merge_Security_Protocol('ConnectorReaders', 'USE_TLS_POP', 'POP3S');
   Log('Merging Mail sender parameters USE_TLS and USE_SSL into one Enum paramerter SECURITY_PROTOCOL');
   Merge_Security_Protocol('ConnectorSenders', 'USE_TLS', 'USE_SSL');
   Log('Created ' || merge_created_ || ' parameters.');
   Log('Skipped ' || merge_skipped_ || ' parameters.');
   Log('');

   ------------
   -- Rename --
   ------------
   Log('Renaming parameters in all readers');
   Rename_Parameter('ConnectorReaders', '%', 'RETRIES', 'MAX_RETRIES');

   Log('Renaming parameters in File readers');
   Rename_Parameter('ConnectorReaders', 'File', 'FILE_MASK'     , 'MESSAGE_SELECTOR');

   Log('Renaming parameters in Mail readers');
   Rename_Parameter('ConnectorReaders', 'Mail', 'MAILBOX_PASSWORD' , 'PASSWORD');
   Rename_Parameter('ConnectorReaders', 'Mail', 'MAILBOX_USER_NAME', 'USER');
   Rename_Parameter('ConnectorReaders', 'Mail', 'POP3_HOST'        , 'HOST');
   Rename_Parameter('ConnectorReaders', 'Mail', 'POP3_PORT'        , 'PORT');
   Rename_Parameter('ConnectorReaders', 'Mail', 'POP3_TIMEOUT'     , 'TIMEOUT');

   Log('Renaming parameters in Sftp readers');
   Rename_Parameter('ConnectorReaders', 'Sftp', 'SERVERAUTH_KNOWNHOSTS'    , 'KNOWNHOSTS_FILE');
   Rename_Parameter('ConnectorReaders', 'Sftp', 'USERAUTH_USERNAME'        , 'USER');
   Rename_Parameter('ConnectorReaders', 'Sftp', 'USERAUTH_PASSWORD'        , 'PASSWORD');
   Rename_Parameter('ConnectorReaders', 'Sftp', 'USERAUTH_IDPASSWORDPHRASE', 'PASS_PHRASE');
   Rename_Parameter('ConnectorReaders', 'Sftp', 'USERAUTH_IDFILE'          , 'PRVKEY_FILE');
   Rename_Parameter('ConnectorReaders', 'Sftp', 'IN_FILE_FILTER'           , 'MESSAGE_SELECTOR', 'regexp:');

   Log('Renaming parameters in Mail senders');
   Rename_Parameter('ConnectorSenders', 'Mail', 'SMTP_HOST'        , 'HOST');
   Rename_Parameter('ConnectorSenders', 'Mail', 'SMTP_PORT'        , 'PORT');
   Rename_Parameter('ConnectorSenders', 'Mail', 'USER_NAME'        , 'USER');
   Rename_Parameter('ConnectorSenders', 'Mail', 'SMTP_TIMEOUT'     , 'TIMEOUT');
   Rename_Parameter('ConnectorSenders', 'Mail', 'PERFORM_SMTP_AUTH', 'PERFORM_AUTH');

   Log('Renaming parameters in Sftp senders');
   Rename_Parameter('ConnectorSenders', 'Sftp', 'REMOTE_TMP_DIRECTORY'     , 'TEMP_DIRECTORY');
   Rename_Parameter('ConnectorSenders', 'Sftp', 'SERVERAUTH_KNOWNHOSTS'    , 'KNOWNHOSTS_FILE');
   Rename_Parameter('ConnectorSenders', 'Sftp', 'USERAUTH_IDFILE'          , 'PRVKEY_FILE');
   Rename_Parameter('ConnectorSenders', 'Sftp', 'USERAUTH_IDPASSWORDPHRASE', 'PASS_PHRASE');
   Rename_Parameter('ConnectorSenders', 'Sftp', 'USERAUTH_PASSWORD'        , 'PASSWORD');
   Rename_Parameter('ConnectorSenders', 'Sftp', 'USERAUTH_USERNAME'        , 'USER');

   Log('Renamed ' || renamed_ || ' parameters.');
   Log('');

   ------------
   -- Remove --
   ------------
   Log('Removing parameters from all readers');
   Remove_Parameter('ConnectorReaders', '%'   , 'DEBUG');
   Remove_Parameter('ConnectorReaders', '%'   , 'DEBUG_FILE');
   Remove_Parameter('ConnectorReaders', '%'   , 'DEBUG_LEVEL');

   Remove_Parameter('ConnectorReaders', '%'   , 'IN_ORDER');
   Remove_Parameter('ConnectorReaders', '%'   , 'JAR_FILE');

   Remove_Parameter('ConnectorReaders', '%'   , 'POLL_TIME');
   Remove_Parameter('ConnectorReaders', '%'   , 'MAILBOX_POLL_TIME');

   Remove_Parameter('ConnectorReaders', '%'   , 'RESPONSE');
   Remove_Parameter('ConnectorReaders', '%'   , 'RESPONSE_ADDRESS');
   Remove_Parameter('ConnectorReaders', '%'   , 'RESPONSE_DIRECTORY');
   Remove_Parameter('ConnectorReaders', '%'   , 'RESPONSE_FILENAME');
   Remove_Parameter('ConnectorReaders', '%'   , 'RESPONSE_FILENAME_EXT');
   Remove_Parameter('ConnectorReaders', '%'   , 'RESPONSE_QUEUE');

   Remove_Parameter('ConnectorReaders', '%'   , 'SUBJECT_MASK');
   Remove_Parameter('ConnectorReaders', '%'   , 'DISCONNECT_AND_POLL');

   Remove_Parameter('ConnectorReaders', '%'   , 'USE_SSL_SMTP');
   Remove_Parameter('ConnectorReaders', '%'   , 'USE_TLS_SMTP');

   Log('Removing parameters from File readers');
   Remove_Parameter('ConnectorReaders', 'File', 'SHOW_ALL_RESPONSES');
   Remove_Parameter('ConnectorReaders', 'File', 'USE_GUID');
   Remove_Parameter('ConnectorReaders', 'File', 'FILE_MASK');

   Log('Removing parameters from JMS readers');
   Remove_Parameter('ConnectorReaders', 'JMS' , 'PROVIDER_HOST_NAME');
   Remove_Parameter('ConnectorReaders', 'JMS' , 'PROVIDER_PORT');

   Log('Removing parameters from Sftp readers');
   Remove_Parameter('ConnectorReaders', 'Sftp' , 'LOCAL_TMP_DIRECTORY');
   Remove_Parameter('ConnectorReaders', 'Sftp' , 'REMOTE_TMP_DIRECTORY');

   Log('Removing parameters from Mail readers');
   Remove_Parameter('ConnectorReaders', 'Mail', 'SMTP_HOST');
   Remove_Parameter('ConnectorReaders', 'Mail', 'SMTP_PORT');
   Remove_Parameter('ConnectorReaders', 'Mail', 'SMTP_TIMEOUT');
   Remove_Parameter('ConnectorReaders', 'Mail', 'MAILBOX_ALIAS');
   Remove_Parameter('ConnectorReaders', 'Mail', 'POP3S');
   Remove_Parameter('ConnectorReaders', 'Mail', 'USE_TLS_POP');

   Log('Removing parameters from Sftp senders');
   Remove_Parameter('ConnectorSenders', 'Sftp', 'LOCAL_TMP_DIRECTORY');

   Log('Removing parameters from Mail senders');
   Remove_Parameter('ConnectorSenders', 'Mail', 'USE_SSL');
   Remove_Parameter('ConnectorSenders', 'Mail', 'USE_TLS');

   Log('Removed ' || removed_ || ' parameters.');
   Log('');

   -------------
   -- Summary --
   -------------
   Log('Merge:');
   Log(1, 'Created: ' || merge_created_);
   Log(1, 'Skipped: ' || merge_skipped_);

   Log('Rename:');
   Log(1, 'Renamed: ' || renamed_);

   Log('Remove:');
   Log(1, 'Removed: ' || removed_);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_38');
PROMPT Replace mail addresses with reader names in Routing Rules
--------------------------------------------------------------------------------------------------------

DECLARE
   count_ NUMBER;
BEGIN
   FOR rule_ IN (SELECT P.ROWID part_rowid, R.ROWID rule_rowid, R.description, P.search_path
                   FROM fndcn_condition_part_tab P, fndcn_route_condition_tab R
                  WHERE P.condition_id = R.condition_id
                    AND P.location = 'MAIL_LOCATION'
                    AND P.search_path IS NOT NULL
                    AND NOT EXISTS (SELECT NULL
                                      FROM fndcn_config_param_tab X
                                     WHERE X.area_name = 'Integration'
                                       AND X.group_name = 'ConnectorReaders'
                                       AND X.instance_name = P.search_path)
                 ORDER BY R.description, R.condition_id)
   LOOP
      Dbms_Output.Put_Line('Found routing rule [' || rule_.description || '] with mail address [' || rule_.search_path || ']. Searching for matching Mail readers.');
      count_ := 0;
      FOR param_ IN (SELECT instance_name
                       FROM fndcn_config_param_tab
                      WHERE area_name = 'Integration'
                        AND group_name = 'ConnectorReaders'
                        AND parameter_name = 'MAILBOX_ADDRESS'
                        AND parameter_value = rule_.search_path
                      ORDER BY instance_name)
      LOOP
         count_ := count_ + 1;
         IF count_ = 1 THEN
            Dbms_Output.Put_Line('   Found reader [' || param_.instance_name || ']. Replacing mail address with reader name.');
            UPDATE fndcn_condition_part_tab
               SET search_path = param_.instance_name
             WHERE ROWID = rule_.part_rowid;
         ELSE
            Dbms_Output.Put_Line('   WARNING! Duplicate reader [' || param_.instance_name || '] matching the mail address ignored.');
         END IF;
      END LOOP;
      IF count_ = 0 THEN
         Dbms_Output.Put_Line('   WARNING! No readers matching the mail address found. Nullifying the mail address. Disabling the rule.');
         UPDATE fndcn_condition_part_tab
            SET search_path = NULL
          WHERE ROWID = rule_.part_rowid;
         UPDATE fndcn_route_condition_tab
            SET rule_enabled = 0
          WHERE ROWID = rule_.rule_rowid;
      END IF;
   END LOOP;
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_39');
PROMPT Move Application Server Task Templates to Setup IFS Connect
--------------------------------------------------------------------------------------------------------
DECLARE
   global_indent_ CONSTANT VARCHAR2(10) := '   ';
   new_line_      CONSTANT VARCHAR2(10) := chr(10);

   validation_error_ EXCEPTION;
   PRAGMA EXCEPTION_INIT(validation_error_, -20000);

   total_new_inst_count_     NUMBER := 0;
   total_new_param_count_    NUMBER := 0;
   total_skip_param_count_   NUMBER := 0;
   total_new_detail_count_   NUMBER := 0;

   move_app_msg_count_ NUMBER := 0;
   skip_app_msg_count_ NUMBER := 0;

   new_inst_count_     NUMBER;
   new_param_count_    NUMBER;
   skip_param_count_   NUMBER;
   new_detail_count_   NUMBER;

   inst_ fndcn_config_param_inst_tab%ROWTYPE;

   instance_name_         VARCHAR2(50);
   instance_type_         VARCHAR2(100);
   interface_             VARCHAR2(4000);
   operation_             VARCHAR2(4000);
   master_parameter_name_ VARCHAR2(50);
   message_value_         BLOB;
   error_message_         VARCHAR2(4000);

   PROCEDURE Log(indent_ NUMBER, line_ VARCHAR2) IS
   BEGIN
      IF indent_ > 0 THEN
         Dbms_Output.Put(lpad(' ', 3 * indent_));
      END IF;
      Dbms_Output.Put_Line(global_indent_ || line_);
   END Log;

   PROCEDURE Log(line_ VARCHAR2) IS
   BEGIN
      Log(0, line_);
   END Log;

   PROCEDURE Validation_Error(error_msg_ VARCHAR2) IS
   BEGIN
      Raise_Application_Error(-20000, error_msg_);
   END Validation_Error;

   FUNCTION Generate_Instance_Name(subject_ VARCHAR2, id_ NUMBER) RETURN VARCHAR2 IS
      name_ VARCHAR2(2000) := subject_;
   BEGIN
      name_ := replace(name_, 'Processing Internet Transaction Services', 'Processing ITS');
      name_ := replace(upper(name_), ' ', '_');
      name_ := translate(name_, ':', '_');
      name_ := replace(name_, '__', '_');
      name_ := substr(name_, 1, 50);
      FOR x_ IN (SELECT NULL
                   FROM fndcn_config_param_inst_tab
                  WHERE area_name = 'Integration'
                    AND group_name = 'TaskTemplates'
                    AND instance_name = name_)
      LOOP
         RETURN substr(name_, 1, 50 - length(to_char(id_)) - 1) || '_' || id_;
      END LOOP;
      RETURN name_;
   END Generate_Instance_Name;

   FUNCTION Convert_Boolean_Value(value_ VARCHAR2) RETURN VARCHAR2 IS
   BEGIN
      IF value_ = '1' THEN
         RETURN 'true';
      ELSIF value_ = '0' THEN
         RETURN 'false';
      ELSE
         RETURN NULL;
      END IF;
   END Convert_Boolean_Value;

   PROCEDURE Split_Address_Data(address_data_ IN VARCHAR2, interface_ OUT VARCHAR2, operation_ OUT VARCHAR2) IS
      data_ VARCHAR2(4000) := trim(replace(address_data_, ':', ' '));
      pos_  NUMBER := instr(data_, ' ');
   BEGIN
      IF pos_ > 0 THEN
         interface_ := substr(data_, 1, pos_ - 1);
         operation_ := substr(data_, pos_ + 1);
      END IF;
   END Split_Address_Data;

   FUNCTION Exists_Parameter_Def (parameter_name_ VARCHAR2, parameter_value_ VARCHAR2) RETURN BOOLEAN IS
   BEGIN
      IF parameter_value_ IS NULL THEN
         RETURN TRUE;
      END IF;
      FOR param_ IN (SELECT null
                       FROM config_parameter_def_tab
                      WHERE area_name  = 'Integration'
                        AND group_name = 'TaskTemplates'
                        AND instance_type IN (instance_type_, '*')
                        AND parameter_name = parameter_name_
                        AND default_value = decode(parameter_type, 'TypeEnum', lower(parameter_value_), parameter_value_))
      LOOP
         RETURN TRUE;
      END LOOP;
      RETURN FALSE;
   END Exists_Parameter_Def;

   PROCEDURE New_Parameter (
      parameter_name_  VARCHAR2,
      parameter_value_ VARCHAR2)
   IS
      param_ fndcn_config_param_tab%ROWTYPE;
      param_desc_ VARCHAR2(1000) := instance_name_ || '.' || parameter_name_ || ' = ' || parameter_value_;
   BEGIN
      IF Exists_Parameter_Def(parameter_name_, parameter_value_) THEN
         skip_param_count_ := skip_param_count_ + 1;
         Log(1, 'Skipping parameter ' || param_desc_);
         RETURN;
      END IF;
      param_.area_name       := 'Integration';
      param_.group_name      := 'TaskTemplates';
      param_.instance_name   := instance_name_;
      param_.parameter_name  := parameter_name_;
      param_.parameter_value := parameter_value_;
      param_.rowversion      := 1;
      Log(1, 'Creating parameter ' || param_desc_);
      INSERT INTO fndcn_config_param_tab VALUES param_;
      new_param_count_ := new_param_count_ + 1;
   END New_Parameter;

   PROCEDURE New_Parameter_Master IS
      master_ fndcn_config_param_tab%ROWTYPE;
   BEGIN
      master_.area_name       := 'Integration';
      master_.group_name      := 'TaskTemplates';
      master_.instance_name   := instance_name_;
      master_.parameter_name  := master_parameter_name_;
      master_.parameter_value := '*';
      master_.rowversion      := 1;
      INSERT INTO fndcn_config_param_tab VALUES master_;
      Log(1, 'Created parameter master: ' || instance_name_ || '.' || master_parameter_name_ || ' = *');
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END New_Parameter_Master;

   PROCEDURE New_Parameter_Detail (
      key_   VARCHAR2,
      value_ VARCHAR2)
   IS
      detail_ fndcn_config_param_det_tab%ROWTYPE;
   BEGIN
      New_Parameter_Master;
      detail_.area_name       := 'Integration';
      detail_.group_name      := 'TaskTemplates';
      detail_.instance_name   := instance_name_;
      detail_.parameter_name  := master_parameter_name_;
      detail_.key             := key_;
      detail_.value           := value_;
      detail_.rowversion      := 1;
      Log(1, 'Creating parameter detail: ' || key_ || ', ' || value_);
      INSERT INTO fndcn_config_param_det_tab VALUES detail_;
      new_detail_count_ := new_detail_count_ + 1;
   END New_Parameter_Detail;

   FUNCTION Get_Node_Value(node_ Dbms_Xmldom.DOMNode) RETURN VARCHAR2 IS
   BEGIN
      RETURN Dbms_Xmldom.getNodeValue(Dbms_Xmldom.getFirstChild(node_));
   END Get_Node_Value;

   FUNCTION Get_Child_Node_Value(node_ Dbms_Xmldom.DOMNode, name_ VARCHAR2) RETURN VARCHAR2 IS
      elem_  Dbms_Xmldom.DOMElement := Dbms_Xmldom.makeElement(node_);
      child_ Dbms_Xmldom.DOMNode;
   BEGIN
      child_ := Dbms_Xmldom.Item(Dbms_Xmldom.GetChildrenByTagName(elem_, name_), 0);
      IF Dbms_Xmldom.IsNull(child_) THEN
         RETURN NULL;
      ELSE
         RETURN Get_Node_Value(child_);
      END IF;
   EXCEPTION
      WHEN Dbms_Xmldom.not_found_err THEN
         RETURN NULL;
   END Get_Child_Node_Value;

   PROCEDURE Parse_Xml_Body(blob_ BLOB) IS
      doc_           Dbms_Xmldom.DOMDocument;
      list_          Dbms_Xmldom.DOMNodeList;
      len_           NUMBER;
      node_          Dbms_Xmldom.DOMNode;
      name_          VARCHAR2(1000);
      nls_char_set_  VARCHAR2(50);
   BEGIN
      SELECT VALUE
         INTO nls_char_set_
         FROM nls_database_parameters
         WHERE parameter='NLS_CHARACTERSET';
      
      doc_  := Dbms_Xmldom.newDOMDocument(XmlType(blob_, nls_charset_id(nls_char_set_)));
      list_ := Dbms_Xmldom.getElementsByTagName(doc_, '*');
      len_  := Dbms_Xmldom.getLength(list_);
      FOR i IN 0 .. len_ - 1 LOOP
         node_ := Dbms_Xmldom.item(list_, i);
         name_ := Dbms_Xmldom.getNodeName(node_);
         IF instance_type_ = 'Connectivity' THEN
            IF name_ IN ('MEDIA_CODE', 'RECEIVER', 'MAX_MESSAGES', 'MAX_MESSAGE_LINES') THEN
               New_Parameter(name_, Get_Node_Value(node_));
            ELSIF name_ = 'CLASS_ID_CONDITION' THEN
               New_Parameter_Detail(Get_Child_Node_Value(node_, 'CLASS_ID'), Get_Child_Node_Value(node_, 'BIZAPI_NAME'));
            END IF;
         ELSIF instance_type_ = 'PrintAgent' THEN
            IF name_ = 'URL'  THEN
               New_Parameter('REPORT_FORMATTER_URL', Get_Node_Value(node_));
            ELSIF name_ = 'DEBUG_LEVEL' THEN
               New_Parameter(name_, lower(Get_Node_Value(node_))); -- normalize TypeEnum value
            ELSIF name_ = 'DEBUG' THEN
               New_Parameter(name_, Convert_Boolean_Value(Get_Node_Value(node_))); -- covert 1/0 to true/false
            ELSIF name_ IN ('DEFAULT_LANGUAGE', '', 'DEBUG_FILE') THEN
               New_Parameter(name_, Get_Node_Value(node_));
            ELSIF name_ = 'LOGICAL_PRINTER' THEN
               New_Parameter_Detail(Get_Child_Node_Value(node_, 'ID'), Get_Child_Node_Value(node_, 'PHYSICAL_PRINTER'));
            ELSIF name_ = 'LOCALE' THEN
               New_Parameter('PRINT_LOCALE', Get_Child_Node_Value(node_, 'LANGUAGE') || '-' || Get_Child_Node_Value(node_, 'COUNTRY'));  -- use variant?
            END IF;
         END IF;
      END LOOP;
   END Parse_Xml_Body;

   PROCEDURE Move (
      application_message_id_ NUMBER,
      subject_                VARCHAR2,
      message_function_       VARCHAR2,
      queue_                  VARCHAR2,
      execute_as_             VARCHAR2,
      locale_                 VARCHAR2) IS
   BEGIN
      Log('Moving application message [' || application_message_id_ ||'] "' || subject_ || '"');
      instance_name_ := Generate_Instance_Name(subject_, application_message_id_);
      instance_type_ := message_function_;

      inst_.area_name     := 'Integration';
      inst_.group_name    := 'TaskTemplates';
      inst_.instance_name := instance_name_;
      inst_.instance_type := instance_type_;
      inst_.description   := substr(subject_ || ' (' || application_message_id_ || ')', 1, 1000);
      inst_.static_config := 0;
      inst_.created_by    := USER;
      inst_.created_date  := SYSDATE;
      inst_.rowversion    := 1;
      inst_.rowkey        := NULL;

      Log(1, 'Creating instance [' || instance_name_ || '] of type [' || instance_type_ || ']');
      INSERT INTO fndcn_config_param_inst_tab VALUES inst_;
      new_inst_count_ := new_inst_count_ + 1;

      New_Parameter('QUEUE'     , queue_);
      New_Parameter('EXECUTE_AS', execute_as_); -- normalize TypeEnum value
      New_Parameter('LOCALE'    , locale_);

      master_parameter_name_ := CASE instance_type_ = 'Connectivity' WHEN TRUE THEN 'CLASSES' ELSE 'PRINTERS' END;

      -- receiver?

      --
      -- Retrieve parameters from XML body
      --
      message_value_ := NULL;
      FOR body_ IN (SELECT message_value
                      FROM fndcn_message_body_tab
                     WHERE application_message_id = application_message_id_
                       AND message_template IS NOT NULL)
      LOOP
         message_value_ := body_.message_value;
         Parse_Xml_Body(body_.message_value);
      END LOOP;
      IF message_value_ IS NULL THEN
         Validation_Error('Missing message body with not null message_template');
      END IF;
      --
      -- Retrieve INTERFACE and OPERATION from ADDRESS_DATA
      --
      interface_ := NULL;
      operation_ := NULL;
      FOR line_ IN (SELECT ROWID, address_data
                      FROM fndcn_address_label_tab
                     WHERE application_message_id = application_message_id_
                       AND seq_no = 0)
      LOOP
         Split_Address_Data(line_.address_data, interface_, operation_);
         IF instance_type_ = 'PrintAgent' THEN
            interface_ := lower(interface_); -- normalize TypeEnum value
         END IF;
         New_Parameter('INTERFACE', interface_);
         New_Parameter('OPERATION', operation_);
         UPDATE fndcn_address_label_tab
            SET address_data = 'Obsolete ' || address_data
         WHERE ROWID = line_.ROWID;
      END LOOP;
      IF interface_ IS NULL OR operation_ IS NULL THEN
         Validation_Error('Missing address line with seq_no = 0 and valid address_data');
      END IF;
   END Move;

BEGIN
   Log('Started moving Application Server Task Templates to Setup IFS Connect.');
   FOR am_ IN (SELECT ROWID, application_message_id, subject, message_function, queue, execute_as, locale
                 FROM fndcn_application_message_tab
                WHERE ((state = 'Suspended' AND TAG ='BATCH') OR (state = 'Cancelled' AND TAG ='FAILED_UPG_BATCH'))
                  AND queue NOT IN ('ERROR', 'TRASHCAN')
                  AND message_function IN ('Connectivity','PrintAgent')
               ORDER BY application_message_id)
   LOOP
      SAVEPOINT start_application_message;

      new_inst_count_     := 0;
      new_param_count_    := 0;
      skip_param_count_   := 0;
      new_detail_count_   := 0;

      BEGIN
         Move(am_.application_message_id, am_.subject, am_.message_function, am_.queue, am_.execute_as, am_.locale);

         Log(1, 'Setting state of application message [' || am_.application_message_id ||'] to Cancelled');

         UPDATE fndcn_application_message_tab
            SET state        = 'Cancelled',
                tag          = NULL,
                error_text   = 'Task template data moved to Setup IFS Connect instance [' || instance_name_ || ']',
                message_type = 'Obsolete ' || message_type
          WHERE ROWID = am_.ROWID;

          total_new_inst_count_   := total_new_inst_count_   + new_inst_count_;
          total_new_param_count_  := total_new_param_count_  + new_param_count_;
          total_skip_param_count_ := total_skip_param_count_ + skip_param_count_;
          total_new_detail_count_ := total_new_detail_count_ + new_detail_count_;

          move_app_msg_count_ := move_app_msg_count_ + 1;

      EXCEPTION
         WHEN validation_error_ THEN
            ROLlBACK TO start_application_message;

            error_message_ := SQLERRM;

            Log('WARNING!');
            Log('WARNING! Skipped application message [' || am_.application_message_id ||'] because of error: ' || error_message_);
            Log('WARNING! The application message state has been set to Cancelled.');
            Log('WARNING! You may re-run this script after correcting the cause of the error.');
            Log('WARNING!');

            UPDATE fndcn_application_message_tab
               SET state        = 'Cancelled',
                   tag          = 'FAILED_UPG_BATCH',
                   error_text   = error_message_,
                   message_type = 'Obsolete ' || message_type
             WHERE ROWID = am_.ROWID;

            skip_app_msg_count_ := skip_app_msg_count_ + 1;
      END;
   END LOOP;
   Log('Finished moving Application Server Task Templates to Setup IFS Connect.');
   Log(1, 'Created instances:            ' || total_new_inst_count_);
   Log(1, 'Created parameters:           ' || total_new_param_count_);
   Log(1, 'Skipped parameters:           ' || total_skip_param_count_);
   Log(1, 'Created parameter details:    ' || total_new_detail_count_);
   Log(1, 'Moved application messages:   ' || move_app_msg_count_);
   Log(1, 'Skipped application messages: ' || skip_app_msg_count_);
END;
/

-------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_40');
PROMPT Drop obsolete trigger App_Message_Template_Jms_TR on FNDCN_MESSAGE_BODY_TAB
--------------------------------------------------------------------------------------------------------
BEGIN
   Installation_SYS.Remove_Trigger('App_Message_Template_Jms_TR', TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_41');
PROMPT Drop obsolete view APP_MESSAGE_ACTIVE_TEMPLATE
--------------------------------------------------------------------------------------------------------
BEGIN
   Installation_SYS.Remove_View('APP_MESSAGE_ACTIVE_TEMPLATE', TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_42');
PROMPT Drop obsolete package  APP_MESSAGE_REPORTING_API
--------------------------------------------------------------------------------------------------------
BEGIN
   Installation_SYS.Remove_Package('APP_MESSAGE_REPORTING_API', TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_43');
PROMPT Drop obsolete index FNDCN_MESSAGE_BODY_TEMPLATE_IX
--------------------------------------------------------------------------------------------------------
BEGIN
   Installation_SYS.Remove_Indexes('FNDCN_MESSAGE_BODY_TAB', 'FNDCN_MESSAGE_BODY_TEMPLATE_IX', TRUE);
END;
/

COMMIT
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_44');
PROMPT Rename obsolete tables FNDCN_CONFIG_PARAM_AREA_TAB and FNDCN_CONFIG_PARAM_GROUP_TAB
--------------------------------------------------------------------------------------------------------
BEGIN
   Installation_SYS.Rename_Table('FNDCN_CONFIG_PARAM_AREA_TAB',  'FNDCN_CONFIG_PARAM_AREA_700',  TRUE);
   Installation_SYS.Rename_Table('FNDCN_CONFIG_PARAM_GROUP_TAB', 'FNDCN_CONFIG_PARAM_GROUP_700', TRUE);
END;
/

COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_45');
PROMPT Update connect string in PLSQLAP_ENVIRONMENT_TAB

UPDATE plsqlap_environment_tab
   SET value = REPLACE(value, '/fndext/soapgateway')
 WHERE name = 'CONN_STR'
   AND value <> REPLACE(value, '/fndext/soapgateway')
/

COMMIT
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_46');
PROMPT Recreating and starting JSF Admin JMS AQ queues
DECLARE
   --
   -- Recreating and starting JSF Admin JMS AQ queues
   --
   main_table_ CONSTANT VARCHAR2(100) := 'FND_ADMIN_MAIN_QUEUE_TAB';
   main_queue_ CONSTANT VARCHAR2(100) := 'FND_ADMIN_MAIN_QUEUE';

   int_table_  CONSTANT VARCHAR2(100) := 'FND_ADMIN_INT_QUEUE_TAB';
   int_queue_  CONSTANT VARCHAR2(100) := 'FND_ADMIN_INT_QUEUE';

   PROCEDURE Drop_Queue_Table (table_name_ VARCHAR2) IS
      no_table EXCEPTION;
      PRAGMA   EXCEPTION_INIT(no_table, -24002);
   BEGIN
      Dbms_Aqadm.Drop_Queue_Table(table_name_, true);
   EXCEPTION
      WHEN no_table THEN
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END;

   PROCEDURE Create_Queue_Table (table_name_ VARCHAR2) IS
   BEGIN
      Dbms_Aqadm.Create_Queue_Table
        (queue_table        => table_name_,                  -- max 24 characters
         storage_clause     => 'TABLESPACE &IFSAPP_DATA',    -- indexes will be also created in this tablespace
         queue_payload_type => 'SYS.AQ$_JMS_BYTES_MESSAGE',  -- corresponds to DataInputStream in java
         multiple_consumers => FALSE);                       -- FALSE for queues, TRUE for topics
   END Create_Queue_Table;

BEGIN
   Drop_Queue_Table(main_table_);
   Create_Queue_Table(main_table_);
   Dbms_Aqadm.Create_Queue
     (queue_name  => main_queue_,
      queue_table => main_table_);
   Dbms_Aqadm.Start_Queue (main_queue_);

   Drop_Queue_Table(int_table_);
   Create_Queue_Table(int_table_);
   Dbms_Aqadm.Create_Queue
     (queue_name  => int_queue_,
      queue_table => int_table_);
   Dbms_Aqadm.Start_Queue (int_queue_);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_47');
PROMPT Adding column Definition_Modified_Date to FndEvent
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE FND_EVENT_TAB 
SET definition_modified_date = rowversion
WHERE definition_modified_date IS NULL;

COMMIT;


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_TAB';
BEGIN   
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_48');
PROMPT Adding column Definition_Modified_Date to FndEventAction
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

UPDATE FND_EVENT_ACTION_TAB 
SET definition_modified_date = rowversion
WHERE definition_modified_date IS NULL;

COMMIT;


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
BEGIN   
   column_ := Installation_SYS.Set_Column_Values('DEFINITION_MODIFIED_DATE', 'DATE', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_49');
PROMPT Drop obsolete view MESSAGE_QUEUE_LOV
BEGIN
   Installation_SYS.Remove_View('MESSAGE_QUEUE_LOV', TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_50');
PROMPT INCREASING BUFFER SIZE OF CLIENT_URL

DECLARE   
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB'; 
   columns_    Installation_SYS.ColumnTabType;      
BEGIN
	Installation_SYS.Reset_Column_Table(columns_);
	Installation_SYS.Set_Table_Column(columns_,'CLIENT_URL', 'VARCHAR2(4000)');
    Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_51');
PROMPT INCREASING BUFFER SIZE OF URL,REFERENCE

DECLARE   
   table_name_ VARCHAR2(30) := 'FND_STREAM_TAB'; 
   columns_    Installation_SYS.ColumnTabType;      
BEGIN
	Installation_SYS.Reset_Column_Table(columns_);
	Installation_SYS.Set_Table_Column(columns_,'URL', 'VARCHAR2(4000)','Y');
	Installation_SYS.Set_Table_Column(columns_,'REFERENCE', 'VARCHAR2(4000)','Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


UPDATE fnd_user_tab
SET active = 'FALSE'
WHERE identity = 'IFSWEBCONFIG'
AND active = 'TRUE';

BEGIN
   EXECUTE IMMEDIATE 'ALTER USER IFSWEBCONFIG ACCOUNT LOCK';
EXCEPTION
   WHEN OTHERS THEN
      Dbms_Output.Put_Line('Error inactivating user IFSWEBCONFIG ' || SQLERRM);
END;
/

COMMIT;

DECLARE
   stmt_       VARCHAR2(4000);
   column_ Installation_SYS.ColRec; 
   CURSOR lob_columns IS
      SELECT a.table_name, a.column_name, a.data_type
      FROM user_tab_columns a 
      WHERE (a.table_name, a.column_name) IN (SELECT b.table_name, b.column_name 
                                            FROM USER_tab_columns b
                                            WHERE (b.table_name = 'FND_EVENT_ACTION_TAB'      AND b.column_name = 'ACTION_PARAMETERS')                                          
                                            OR (table_name = 'PLANT_BINARY_OBJECT_TAB'        AND column_name = 'BINARY_OBJECT')
                                            OR (table_name = 'DATA_CAPT_SESS_LINE_BLOB_TAB'   AND column_name = 'BLOB')
                                            OR (table_name = 'RCCP_LOAD_CONFIGURATION_TAB'    AND column_name = 'CONFIGURATION_URL')
                                            OR (table_name = 'LANGUAGE_FILE_EXPORT_TAB'       AND column_name = 'EXPORTED_FILE')
                                            OR (table_name = 'XLR_REPORT_UPG_UTILITY_TAB'     AND column_name = 'FILE_OBJECT')
                                            OR (table_name = 'LANGUAGE_FILE_IMPORT_TAB'       AND column_name = 'IMPORT_FILE')
                                            OR (table_name = 'CONFIG_SALES_RULE_LOGGER_TAB'   AND column_name = 'LOG_DATA')
                                            OR (table_name = 'XLR_META_DATA_FILE_ENTITY_TAB'  AND column_name = 'META_FILE')
                                            OR (table_name = 'WINDOWS_CLIENT_NAVIGATOR_TAB'   AND column_name = 'NAVIGATOR_XML')
                                            OR (table_name = 'PDF_ARCHIVE_TAB'                AND column_name = 'PDF')
                                            OR (table_name = 'USER_QUICK_REPORT_TAB'          AND column_name = 'QUERY')
                                            OR (table_name = 'EXCEL_REPORT_ARCHIVE_TAB'       AND column_name = 'REPORT_FILE')
                                            OR (table_name = 'XLR_BA_CLIENT_ARCHIVE_TAB'      AND column_name = 'REPORT_FILE')
                                            OR (table_name = 'PRINT_JOB_TAB'                  AND column_name = 'ROUTING_INFO')
                                            OR (table_name = 'USER_QUICK_REPORT_TAB'          AND column_name = 'SQL_EXPRESSION')
                                            OR (table_name = 'FND_CODE_TEMPLATE_TAB'          AND column_name = 'TEMPLATE')
                                            OR (table_name = 'XLR_TEMPLATE_FILE_TAB'          AND column_name = 'TEMPLATE_FILE')
                                            OR (table_name = 'XLR_LOG_TAB'                    AND column_name = 'TEXT')
                                            )
      AND data_type IN ('CLOB', 'BLOB')
      AND nullable = 'Y';        
BEGIN
   FOR rec_ IN lob_columns LOOP
      -- Add empty lob if NULL
      stmt_ := 'UPDATE '||rec_.table_name||' SET '||rec_.column_name||'='||
               CASE rec_.data_type
               WHEN 'CLOB' THEN
                  'empty_clob() '
               WHEN 'BLOB' THEN
                  'empty_blob() '
               END
               ||' WHERE '||rec_.column_name||' IS NULL';         
      EXECUTE IMMEDIATE stmt_;
      -- Set column to NOT NULLABLE
      column_.column_name   := rec_.column_name;
      column_.data_type     := rec_.data_type;
      column_.nullable      := 'N';
      Installation_SYS.Alter_Lob_Column (rec_.table_name, column_, TRUE);                     
   END LOOP;   
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_52');
PROMPT Add LU column SecCheckpointGate.UnrestrictedValidation
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'SEC_CHECKPOINT_GATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GATE_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTIVE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'UNRESTRICTED_VALIDATION', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_53');
PROMPT Changing the system parameter(CHECKPOINT_U_TIMEOUT) value
--------------------------------------------------------------------------------------------
DECLARE
BEGIN
   -- -------------------------------------------------------------------------------------
   -- If the value is -1 => ON
   -- If the value is ON => ON (Adding this to make this code block re-runnable without any harm.)
   -- All other cases    => OFF
   -- -------------------------------------------------------------------------------------
   UPDATE fnd_setting_tab
      SET value      = DECODE(value, '-1','ON', 'ON','ON', 'OFF'),
          domain     = 'ON^OFF^',
          value_type = 'FIXED STRING'
   WHERE parameter  = 'CHECKPOINT_U_TIMEOUT';

   COMMIT;

END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_54');
PROMPT Adding a Flag to track the availability of a column in replication obj def
--------------------------------------------------------------------------------------------
DECLARE
  column_     Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'REPLICATION_ATTR_DEF_TAB';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', '130920')) THEN
      column_ := Installation_SYS.Set_Column_Values('COLUMN_AVAILABLE', 'VARCHAR2(5)', 'Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

      Installation_SYS.Register_Db_Patch('&MODULE', 130920, 'Added a Flag to track the availability of a column');
      COMMIT;
   END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_55');
PROMPT Remove obsolete parameters in FND_LICENSE_TAB

DELETE FROM fnd_license_tab
   WHERE parameter in ('LICENSE_LIMIT','EXPIRATION_DATE','LICENSE_KEY')
/   

COMMIT
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_56');
PROMPT adding COLUMN CLOB_VALUE TO TABLE PLSQLAP_BUFFER_TMP
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'PLSQLAP_BUFFER_TMP';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('CLOB_VALUE', 'CLOB', 'Y', NULL);
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('BLOB_VALUE', 'BLOB', 'Y', NULL);
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/


--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_57');
PROMPT Create dummy version of IN_MESSAGE_LINE_PUB if not exists before
--------------------------------------------------------------------------------------------
DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
   IF NOT (Installation_SYS.View_Exist('IN_MESSAGE_LINE_PUB')) THEN
      DBMS_OUTPUT.Put_Line('Creating dummy view IN_MESSAGE_LINE_PUB...');
      stmt_ := 'CREATE VIEW IN_MESSAGE_LINE_PUB AS 
                SELECT 1 dummy 
                FROM DUAL';
      EXECUTE IMMEDIATE(stmt_);
   END IF;
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_58');
PROMPT Add VIEW_NAME column to FND_NOTE_BOOK_TAB
--------------------------------------------------------------------------------------------

DECLARE
  column_     Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'FND_NOTE_BOOK_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('VIEW_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/


DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('SYSTEM_DEFINED', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

UPDATE fnd_event_action_tab
SET system_defined = 'FALSE'
WHERE system_defined IS NULL
/

DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FND_EVENT_ACTION_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('SYSTEM_DEFINED', 'VARCHAR2(5)', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_59');
PROMPT create table FND_PROJ_GRANT_FILTER_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_GRANT_FILTER_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PERMISSION_SET_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILTER_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'GRANTED_FILTER_TYPE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_GRANT_FILTER_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_GRANT_FILTER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PERMISSION_SET_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'FILTER_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_GRANT_FILTER_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_GRANT_FILTER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_60');
PROMPT create table FND_NAVIGATOR_TAB, FND_NAVIGATOR_ENTRY_TAB, FND_NAVIGATOR_STRUCTURE_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LABEL', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PAGE_TYPE', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PAGE', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DYNAMIC_RECORDS', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FILTER', 'VARCHAR2(2048)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SORT_ORDER', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SELECTOR', 'VARCHAR2(225)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(225)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ENTRY_NAME', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LABEL', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTRY_TYPE', 'VARCHAR2(10)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTRY_COMMAND', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_ORIGIN', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION', 'VARCHAR2(225)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SELECTOR', 'VARCHAR2(225)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FILTER', 'VARCHAR2(2048)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(225)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ENTRY_NAME', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CHILD_ENTRY_NAME', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_ORIGIN', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_PK';
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_RK';
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_PK';
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ENTRY_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_RK';
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_PK';
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ENTRY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'CHILD_ENTRY_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_RK';
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


UPDATE batch_schedule_tab
   SET username = Sys_Context('USERENV', 'CURRENT_SCHEMA')
 WHERE username != Sys_Context('USERENV', 'CURRENT_SCHEMA')
   AND (schedule_id IN
       (SELECT synchronize_task_ref FROM search_domain_runtime_tab) OR
       schedule_id IN
       (SELECT optimize_task_ref FROM search_domain_runtime_tab) OR
       schedule_id IN
       (SELECT rebuild_task_ref FROM search_domain_runtime_tab) OR
       schedule_id IN
       (SELECT enable_task_ref FROM search_domain_runtime_tab))
/

COMMIT
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_61');
PROMPT Create table FNDCN_RESTRICTED_QUEUE_KEY_TAB
--------------------------------------------------------------------------------------------
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FNDCN_RESTRICTED_QUEUE_KEY_TAB';
   index_name_ VARCHAR2(30) := 'FNDCN_RESTRICTED_QUEUE_KEY_PK';
BEGIN
   Installation_SYS.Remove_Table(table_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_TYPE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_THREAD_NO', 'NUMBER', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_TYPE');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_THREAD_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_62');
PROMPT Add LU column ApplicationMessage.QueueThreadNo
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_THREAD_NO', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_63');
PROMPT Add LU column ConnectReaderQueue.MessageBody
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('MESSAGE_BODY', 'BLOB', 'Y', NULL, 'LOB (MESSAGE_BODY) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_64');
PROMPT Add LU column ConnectReaderQueue.MessageName
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_READER_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_NAME', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_65');
PROMPT Change type of existing transformers
--------------------------------------------------------------------------------------------

UPDATE fndcn_config_param_inst_tab I
   SET I.instance_type = 'XslTransformer'
 WHERE I.instance_type = 'Transformer'
   AND I.area_name = 'Integration'
   AND I.group_name = 'Transformers'
   AND NOT EXISTS (SELECT NULL
                     FROM fndcn_config_param_tab P
                    WHERE P.area_name = I.area_name
                      AND P.group_name = I.group_name
                      AND P.instance_name = I.instance_name
                      AND P.parameter_name = 'TRANSFORMER_TYPE'
                      AND LOWER(P.parameter_value) = 'java_class')
/

UPDATE fndcn_config_param_inst_tab I
   SET I.instance_type = 'JavaTransformer'
 WHERE I.instance_type = 'Transformer'
   AND I.area_name = 'Integration'
   AND I.group_name = 'Transformers'
   AND EXISTS (SELECT NULL
                 FROM fndcn_config_param_tab P
                WHERE P.area_name = I.area_name
                  AND P.group_name = I.group_name
                  AND P.instance_name = I.instance_name
                  AND P.parameter_name = 'TRANSFORMER_TYPE'
                  AND LOWER(P.parameter_value) = 'java_class')
/

COMMIT
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_66');
PROMPT Add LU column ConfigParameter.BinaryCustomized
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_CONFIG_PARAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'BINARY_CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_67');
PROMPT Add LU column RouteAddress.Customized
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_ROUTE_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

UPDATE fndcn_route_address_tab
   SET customized = 0
 WHERE customized is null;
/

COMMIT
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_68');
PROMPT Add LU column RouteCondition.Customized
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_ROUTE_CONDITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

UPDATE fndcn_route_condition_tab
   SET customized = 0
 WHERE customized is null;
/

COMMIT
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_69');
PROMPT Recreating SECURITY_SYS_REFRESH_USER_TAB IF created WITH ON COMMIT DELETE ROWS
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'SECURITY_SYS_REFRESH_USER_TAB';
   index_name_ VARCHAR2(30) := 'SECURITY_SYS_REFRESH_USER_UIX';
   columns_    Installation_SYS.ColumnTabType;  
   stmnt_      VARCHAR2(32000);
   duration_   VARCHAR2(15);
   flag_       NUMBER := 0;
   CURSOR table_dur_ IS
      SELECT duration 
      FROM user_tables
      WHERE table_name = table_name_;
BEGIN
   IF (Installation_SYS.Table_Exist ( table_name_ ) ) THEN
      OPEN table_dur_;
      FETCH table_dur_ INTO duration_;
      CLOSE table_dur_;
      IF duration_ = 'SYS$SESSION' THEN
         --table already exist with correct duration
         flag_ := 1;
      ELSE
         Installation_SYS.Remove_Table(table_name_, TRUE);         
      END IF;
   END IF;   
   IF flag_ = 0 THEN
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'IDENTITY', 'VARCHAR2(30)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'REQUEST_ID', 'VARCHAR2(100)', 'N');
      stmnt_ := 'CREATE GLOBAL TEMPORARY TABLE ' || table_name_ || ' ( ';
      stmnt_ := stmnt_ || Installation_SYS.Format_Columns (columns_, 'TABLE');
      stmnt_ := stmnt_ || ') ON COMMIT PRESERVE ROWS';
      --@ApproveDynamicStatement(2016-11-01,dobese)
      EXECUTE IMMEDIATE stmnt_;   
      
      --Create the index
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'IDENTITY');
      Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_70');
PROMPT Rename config parameter REPORT_FORMATTER_URL to DEBUG_URL
--------------------------------------------------------------------------------------------

UPDATE fndcn_config_param_tab A
   SET A.parameter_name = 'DEBUG_URL'
 WHERE A.parameter_name = 'REPORT_FORMATTER_URL'
   AND A.area_name = 'Integration'
   AND A.group_name = 'TaskTemplates'
   AND NOT EXISTS (SELECT NULL
                     FROM fndcn_config_param_tab B
                    WHERE B.area_name = A.area_name
                      AND B.group_name = A.group_name
                      AND B.instance_name = A.instance_name
                      AND B.parameter_name = 'DEBUG_URL')
/


--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_71');
PROMPT Add column PdfArchive.FileName
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'PDF_ARCHIVE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/



--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_72');
PROMPT Update the connection service name VirtMapPosition (in VRTMAP) to MapPosition (APPSRV) in ObjectConnection
--------------------------------------------------------------------------------------------

UPDATE object_connection_sys_tab
SET service_list = REPLACE(service_list, 'VirtMapPosition^', 'MapPosition^')
WHERE service_list LIKE '%VirtMapPosition^%'
/

COMMIT
/



exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_73');
PROMPT Removing Index LANGUAGE_ATTRIBUTE_IX3
BEGIN
   Installation_SYS.Remove_Indexes ('LANGUAGE_ATTRIBUTE_TAB', 'LANGUAGE_ATTRIBUTE_IX3', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_74');
PROMPT Adding LongProgText to LANGUAGE_ATTRIBUTE_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'LANGUAGE_ATTRIBUTE_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_,'LONG_PROG_TEXT', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_,'USAGE', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');   
   Installation_SYS.Set_Table_Column(columns_,'WORK_FLOW', 'VARCHAR2(20)', 'N', '''UNUSED''', keep_default_ => 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FIELD_DESC_OBSOLETE', 'VARCHAR2(1)', 'N', '''N''', keep_default_ => 'N');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_75');
PROMPT Adding LongText and LongStatus to LANGUAGE_TRANSLATION_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'LANGUAGE_TRANSLATION_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
    Installation_SYS.Reset_Column_Table(columns_);
    Installation_SYS.Set_Table_Column(columns_,'PROG_TEXT', 'VARCHAR2(2000)', 'Y');
    Installation_SYS.Set_Table_Column(columns_,'LONG_TEXT', 'VARCHAR2(4000)', 'Y');
    Installation_SYS.Set_Table_Column(columns_,'LONG_STATUS', 'VARCHAR2(1)', 'N', '''O''', keep_default_ => 'N');
    Installation_SYS.Set_Table_Column(columns_,'LONG_REJECT_STATUS', 'VARCHAR2(20)', 'Y');
    Installation_SYS.Set_Table_Column(columns_,'LONG_REJECT_INFORMATION', 'VARCHAR2(2000)', 'Y');
	Installation_SYS.Set_Table_Column(columns_,'REJECT_EXPORT', 'VARCHAR2(10)', 'Y');
    Installation_SYS.Set_Table_Column(columns_,'LONG_CASE_ID', 'VARCHAR2(50)', 'Y');
    Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/



--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_76');
PROMPT Update FndEventActions to new attachements format
--------------------------------------------------------------------------------------------

DECLARE
   CURSOR Get_Mail IS
      SELECT Action_Parameters PARAMETERS
        FROM Fnd_Event_Action_Tab t
       WHERE t.Fnd_Event_Action_Type = 'MAIL'
         AND action_parameters NOT LIKE '%ATTACHMENTS%'
         FOR UPDATE OF action_parameters;
   Parameters_ CLOB;
   Attach_     CLOB;

   new_line_            CONSTANT VARCHAR2(1) := CHR(10);
   head_marker_         CONSTANT VARCHAR2(1) := '!';
   segment_marker_      CONSTANT VARCHAR2(1) := '#';
   attribute_marker_    CONSTANT VARCHAR2(1) := '$';
   value_marker_        CONSTANT VARCHAR2(1) := '=';
   continuation_marker_ CONSTANT VARCHAR2(1) := '-';
   
   TYPE STRING_TABLE IS TABLE OF VARCHAR2(32000) INDEX BY BINARY_INTEGER;
   TYPE NUMBER_TABLE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
   
   PROCEDURE Tokenize ( string_       IN  CLOB,
                        delimiter_    IN  VARCHAR2,
                        output_table_ OUT STRING_TABLE,
                        token_count_  OUT NUMBER)
IS
   last_pos_         NUMBER;
   delimiter_count_  NUMBER;
   pos_              NUMBER;
   token_            VARCHAR2(32000);
   temp_string_      CLOB;
   delimiter_pos_    NUMBER_TABLE;

BEGIN

   token_count_      := 1;
   last_pos_         := 1;
   delimiter_count_  := 0;

   temp_string_ := string_ || delimiter_;

   LOOP
      pos_ := instr (temp_string_, delimiter_, 1, delimiter_count_ + 1);
      IF NOT pos_ = 0 THEN
         delimiter_count_ := delimiter_count_ + 1;
         delimiter_pos_ ( delimiter_count_ )  := pos_;
      ELSE
         EXIT;
      END IF;
   END LOOP;

   token_count_ := 0;
   FOR counter_ IN 1..delimiter_count_
   LOOP
      token_ := substr ( temp_string_, last_pos_, delimiter_pos_ ( counter_ ) - last_pos_ );
      last_pos_ := delimiter_pos_ ( counter_ ) + length(delimiter_);
      IF NOT token_ IS NULL THEN
         token_count_ := token_count_ + 1;
         output_table_ ( token_count_ ) := token_;
      END IF;
   END LOOP;
END Tokenize;
   
   FUNCTION Construct_Clob_Message(message_name_ IN VARCHAR2) RETURN CLOB IS
      FUNCTION Construct(message_name_ IN VARCHAR2) RETURN VARCHAR2 IS
      BEGIN
         RETURN head_marker_ || message_name_ || new_line_;
      END Construct;
   
   BEGIN
      RETURN to_clob(Construct(message_name_));
   END Construct_Clob_Message;

   PROCEDURE Add_Clob_Attribute(message_ IN OUT NOCOPY CLOB,
                                name_    IN VARCHAR2,
                                value_   IN CLOB) IS
   BEGIN
      message_ := message_ ||
                  to_clob(attribute_marker_ || name_ || value_marker_ ||
                          REPLACE(value_,
                                  new_line_,
                                  new_line_ || continuation_marker_) ||
                          new_line_);
   END Add_Clob_Attribute;

   FUNCTION Find_Clob_Attribute (
      message_       IN CLOB,
      name_          IN VARCHAR2,
      default_value_ IN CLOB) RETURN CLOB
   IS
      value_ CLOB;
      FUNCTION Find_Attribute___ (
         message_       IN  CLOB,
         name_          IN  VARCHAR2,
         value_         OUT CLOB ) RETURN BOOLEAN
      IS
         p1_  NUMBER;
         p2_  NUMBER;
         p3_  NUMBER;
         msg_ CLOB := replace(message_, chr(13));
      BEGIN
         p1_ := Dbms_Lob.Instr(msg_, new_line_||attribute_marker_||name_||value_marker_);
         IF p1_ >= 1 THEN
            p2_ := p1_+length(name_)+3;
            p3_ := Dbms_Lob.Instr(msg_, new_line_||attribute_marker_, p2_);
            IF p3_ = 0 THEN
               p3_ := Dbms_Lob.Getlength(msg_);
               IF Dbms_Lob.Substr(msg_, 1, p3_) = new_line_ THEN
                  p3_ := p3_ - 1;
               END IF;
            ELSE
               p3_ := p3_ - 1;
            END IF;
            IF p3_ > 0 THEN
               value_ := replace(rtrim(substr(msg_, p2_, p3_-p2_+1),new_line_),
                                 new_line_||continuation_marker_,
                                 new_line_);
               RETURN TRUE;
            END IF;
         END IF;
         RETURN FALSE;
      END Find_Attribute___;
   BEGIN
      IF Find_Attribute___(message_, name_, value_) THEN
         RETURN value_;
      ELSE
         RETURN default_value_;
      END IF;
   END Find_Clob_Attribute;

   PROCEDURE Set_Clob_Attribute(message_ IN OUT CLOB,
                                name_    IN VARCHAR2,
                                value_   IN CLOB) IS
      p1_ NUMBER;
      p2_ NUMBER;
      p3_ NUMBER;
   BEGIN
      p1_ := dbms_lob.instr(message_,
                            new_line_ || attribute_marker_ || name_ ||
                            value_marker_);
      IF p1_ > 1 THEN
         p2_ := p1_ + length(name_) + 3;
         p3_ := dbms_lob.instr(message_,
                               new_line_ || attribute_marker_,
                               p2_);
         IF p3_ = 0 THEN
            p3_ := length(message_);
            IF dbms_lob.substr(message_, offset => p3_, amount => 1) =
               new_line_ THEN
               p3_ := p3_ - 1;
            END IF;
         ELSE
            p3_ := p3_ - 1;
         END IF;
         IF p3_ > 0 THEN
            message_ := dbms_lob.substr(message_,
                                        offset   => 1,
                                        amount   => p2_ - 1) ||
                        REPLACE(value_,
                                new_line_,
                                new_line_ || continuation_marker_) ||
                        dbms_lob.substr(message_, offset => p3_ + 1);
            RETURN;
         END IF;
      END IF;
      Add_Clob_Attribute(message_, name_, value_);
   END Set_Clob_Attribute;

   FUNCTION Between_Clob(string_    IN CLOB,
                         start_in_  IN INTEGER,
                         end_in_    IN INTEGER,
                         inclusive_ IN BOOLEAN := TRUE) RETURN CLOB IS
      start_    INTEGER := start_in_;
      numchars_ INTEGER := Abs(end_in_) - Abs(start_in_) + 1;
   BEGIN
      IF (string_ IS NULL OR Nvl(start_in_, 0) = 0 OR
         (start_in_ < 0 AND end_in_ > 0) OR
         (start_in_ > 0 AND end_in_ < 0) OR
         (start_in_ < 0 AND end_in_ > start_in_) OR
         (start_in_ > 0 AND end_in_ < start_in_)) THEN
         -- replaced with above four lines. Abs(start_in_) > Abs(end_in_)
         RETURN NULL;
      ELSE
         IF start_ < 0 THEN
            start_ := end_in_;
         ELSE
            start_ := start_in_;
         END IF;
      
         IF NOT Nvl(inclusive_, FALSE) THEN
            start_    := start_ + 1;
            numchars_ := numchars_ - 2;
         END IF;
      
         IF (start_ > end_in_ OR numchars_ < 1) THEN
            RETURN(NULL);
         ELSE
            RETURN(Substr(string_, start_, numchars_));
         END IF;
      END IF;
   END Between_Clob;

   FUNCTION Fix_Attach___(Attach_ IN CLOB) RETURN CLOB IS
   
      FUNCTION Create_Filepath___(Filelist_ IN CLOB) RETURN CLOB IS
         Attach_Message_ CLOB;
         File_Message_   CLOB := Construct_Clob_Message('ATTACHMENTS');
         File_Arr_       String_Table;
         Count_          NUMBER;
      BEGIN
         --         Dbms_Output.Put_Line('Filepath');
         Tokenize(Filelist_, ',', File_Arr_, Count_);
         FOR i IN 1 .. Count_ LOOP
            Attach_Message_ := Construct_Clob_Message('FILE');
            Add_Clob_Attribute(Attach_Message_, 'FILENAME', File_Arr_(i));
            Add_Clob_Attribute(Attach_Message_, 'DESCRIPTION', File_Arr_(i));
            Add_Clob_Attribute(File_Message_,
                               'ATTACHMENT',
                               Attach_Message_);
         END LOOP;
         RETURN(File_Message_);
      END Create_Filepath___;
   
      FUNCTION Create_Text___(Text_ IN CLOB) RETURN CLOB IS
         Attach_Message_ CLOB;
         File_Message_   CLOB := Construct_Clob_Message('ATTACHMENTS');
      BEGIN
         --         Dbms_Output.Put_Line('Text');
         Attach_Message_ := Construct_Clob_Message('TEXT');
         Add_Clob_Attribute(Attach_Message_,
                            'FILENAME',
                            Between_Clob(Text_, 1, Instr(Text_, '=') - 1));
         Add_Clob_Attribute(Attach_Message_,
                            'TEXT',
                            Between_Clob(Text_,
                                         Instr(Text_, '=') + 1,
                                         Length(Text_)));
         Add_Clob_Attribute(Attach_Message_,
                            'DESCRIPTION',
                            Between_Clob(Text_, 1, Instr(Text_, '=') - 1));         
         Add_Clob_Attribute(File_Message_, 'ATTACHMENT', Attach_Message_);
         RETURN(File_Message_);
      END Create_Text___;
   
      FUNCTION Create_Pdffile___(File_ IN CLOB) RETURN CLOB IS
         Attach_Message_ CLOB;
         File_Message_   CLOB := Construct_Clob_Message('ATTACHMENTS');
      BEGIN
         --         Dbms_Output.Put_Line('File');
         Attach_Message_ := Construct_Clob_Message('FILE');
         Add_Clob_Attribute(Attach_Message_, 'FILENAME', File_);
         Add_Clob_Attribute(Attach_Message_, 'DESCRIPTION', File_);
         Add_Clob_Attribute(File_Message_, 'ATTACHMENT', Attach_Message_);
         RETURN(File_Message_);
      END Create_Pdffile___;
   
   BEGIN
      --      Dbms_Output.Put_Line(Attach_);
      IF (Attach_ IS NULL) THEN
         RETURN(NULL);
         --Dbms_Output.Put_Line('No attach');
      ELSIF (Instr(Upper(Attach_), '.IFM') > 0) THEN
         Dbms_Output.Put_Line('IFM');
         -- Set attach to null
         RETURN(NULL);
      ELSIF (Instr(Attach_, ',') > 0) THEN
         --         Dbms_Output.Put_Line('Filepath');
         RETURN(Create_Filepath___(Attach_));
      ELSIF (Instr(Attach_, '=') > 0) THEN
         --         Dbms_Output.Put_Line('File');
         RETURN(Create_Text___(Attach_));
      ELSIF (Instr(Upper(Attach_), 'PDF_FILE') > 0) THEN
         --         Dbms_Output.Put_Line('PDF-File');
         RETURN(Create_Pdffile___(Attach_));
      ELSE
         --         Dbms_Output.Put_Line('Special');
         RETURN(NULL);
      END IF;
      --      Dbms_Output.Put_Line('Attach: ' || Attach_);
   END Fix_Attach___;
BEGIN
   FOR Rec IN Get_Mail LOOP
      Parameters_ := Rec.Parameters;
      Attach_     := Find_Clob_Attribute(Parameters_, 'ATTACH', '');
      IF (Attach_ IS NOT NULL) THEN
         Dbms_Output.Put_Line('---------------------------------------------------------');
         Attach_ := Fix_Attach___(Attach_);
         Set_Clob_Attribute(Parameters_, 'ATTACH', Attach_);
         Dbms_Output.Put_Line(Parameters_);
         UPDATE fnd_event_action_tab
            SET Action_Parameters = parameters_
          WHERE CURRENT OF get_mail;
      END IF;
   END LOOP;
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_77');
PROMPT Add LU column MessageBody.FilePath
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_MESSAGE_BODY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'FILE_PATH', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'FND_EVENT_PARAMETER_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILENAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_78');
PROMPT Extend length of Server Log Category attributes
--------------------------------------------------------------------------------------------

DECLARE
	column_     Installation_SYS.ColRec;
	category_table_name_ VARCHAR2(30) 	:= 'server_log_category_tab';
	log_table_name_ VARCHAR2(30) 		:= 'server_log_tab';
BEGIN   
   column_ := Installation_SYS.Set_Column_Values('category_id', 'VARCHAR2(50)', 'N');
   Installation_SYS.Alter_Table_Column(category_table_name_, 'MODIFY', column_, TRUE);   
   Installation_SYS.Alter_Table_Column(log_table_name_, 'MODIFY', column_, TRUE);   
   column_ := Installation_SYS.Set_Column_Values('program', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Alter_Table_Column(log_table_name_, 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_79');
PROMPT Update Server Log Category Description

UPDATE server_log_category_tab SET DESCRIPTION='Log possible SQL injection attempts'
WHERE CATEGORY_ID='SQL Injections'
/
DELETE FROM server_log_category_tab 
WHERE category_id='Intrusions'
/

DELETE FROM server_log_category_tab 
WHERE category_id='Sessions'
/

COMMIT
/


--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_80');
PROMPT ADD view_comment to DICTIONARY_SYS_VIEW_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_VIEW_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_,'VIEW_COMMENT', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_81');
PROMPT ADD column_comment to DICTIONARY_SYS_VIEW_COLUMN_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_VIEW_COLUMN_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_,'COLUMN_COMMENT', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_82');
PROMPT ADD col_reference to REFERENCE_SYS_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'REFERENCE_SYS_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_,'COL_REFERENCE', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_83');
PROMPT Trim COLUMN description IN FND_USER_TAB
--------------------------------------------------------------------------------------------

BEGIN
   
   UPDATE FND_USER_TAB
   SET description = TRIM(description)
   WHERE LENGTH(TRIM(description)) >0  
   AND (description LIKE '% ' OR description LIKE ' %');

END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_84');
PROMPT CREATE COLUMN module IN FND_SETTING_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FND_SETTING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_85');
PROMPT UPDATE COLUMN module IN FND_SETTING_TAB
--------------------------------------------------------------------------------------------
DECLARE
   dummy_ NUMBER;
   CURSOR get_component IS
      SELECT 1
      FROM   module_tab
      WHERE  module = upper('VRTMAP')
      AND    version IS NOT NULL
      AND    version NOT IN ('?', '*');
   
   PROCEDURE Update_Module(parameter_ IN VARCHAR2, module_ IN VARCHAR2)
   IS   
   BEGIN
      UPDATE fnd_setting_tab
      SET module = module_
      WHERE parameter = parameter_
      AND module IS NULL;      
   END Update_Module;
BEGIN
   --Update for EMPSRV
   Update_Module('URL_PORTAL_BASE','EMPSRV');
   --Update for FNDBAS
   Update_Module('BATCH_PROCESSES','FNDBAS');
   Update_Module('BATCH_PROCESS_LOG','FNDBAS');
   Update_Module('KEEP_DEFJOBS','FNDBAS');
   Update_Module('KEEP_DEFJOBS_WARNING','FNDBAS');
   Update_Module('KEEP_DEFJOBS_ERROR','FNDBAS');
   Update_Module('KEEP_PRINTJOBS','FNDBAS');
   Update_Module('KEEP_BATCH_SCHEDULE','FNDBAS');
   Update_Module('KEEP_CHECKPOINT','FNDBAS');
   Update_Module('TRANSFER_TIMEOUT','FNDBAS');
   Update_Module('URL_APP_ONWEB','FNDBAS');
   Update_Module('URL_APP_SUPPORT','FNDBAS');
   Update_Module('URL_OPEN_IFS','FNDBAS');
   Update_Module('URL_HELP_BASE','FNDBAS');
   Update_Module('URL_TIPS_TRICKS','FNDBAS');
   Update_Module('DEFAULT_LANGUAGE','FNDBAS');
   Update_Module('BLOB_STORAGE','FNDBAS');
   Update_Module('EVENT_REG_DATETIME','FNDBAS');
   Update_Module('EVENT_REG_DATE','FNDBAS');
   Update_Module('EVENT_REG_TIME','FNDBAS');
   Update_Module('CON_INBOX','FNDBAS');
   Update_Module('CON_OUTBOX','FNDBAS');
   Update_Module('CON_IN_INTERVAL','FNDBAS');
   Update_Module('CON_OUT_INTERVAL','FNDBAS');
   Update_Module('CON_KEEP_INBOX','FNDBAS');
   Update_Module('CON_KEEP_OUTBOX','FNDBAS');
   Update_Module('KEEP_MSG_STAT','FNDBAS');
   Update_Module('IAL_USER','FNDBAS');
   Update_Module('IAL_REPLICATION','FNDBAS');
   Update_Module('IAL_TABLESPACE_DATA','FNDBAS');
   Update_Module('IAL_CREATE_EMPTY_TAB','FNDBAS');
   Update_Module('IAL_ERROR_OCCURENCE','FNDBAS');
   Update_Module('IAL_TABLESPACE_INDEX','FNDBAS');
   Update_Module('REPLICATE','FNDBAS');
   Update_Module('REPL_INTERVAL','FNDBAS');
   Update_Module('REPL_KEEP','FNDBAS');
   Update_Module('REPL_SND_WARN','FNDBAS');
   Update_Module('REPL_SND_INFO','FNDBAS');
   Update_Module('REPL_RCV_WARN','FNDBAS');
   Update_Module('REPL_RCV_INFO','FNDBAS');
   Update_Module('REPL_STATISTICS','FNDBAS');
   Update_Module('REPL_STAT_KEY_FORMAT','FNDBAS');
   Update_Module('TS_DEFAULT','FNDBAS');
   Update_Module('TS_TEMPORARY','FNDBAS');
   Update_Module('DEFAULT_PROFILE','FNDBAS');
   Update_Module('QUERY_HINTS','FNDBAS');
   Update_Module('IFS_CURR_PRECISION','FNDBAS');
   Update_Module('SEARCH_MATCH_CASE','FNDBAS');
   Update_Module('FNDMIG_TBLSPACE_DATA','FNDBAS');
   Update_Module('FNDMIG_TBLSPACE_IND','FNDBAS');
   Update_Module('FNDMIG_ALT_REPL_USR','FNDBAS');
   Update_Module('DATA_ARCHIVE','FNDBAS');
   Update_Module('DATA_ARCHIVE_STARTUP','FNDBAS');
   Update_Module('BATCH_SCHEDULE','FNDBAS');
   Update_Module('BATCH_SCHED_STARTUP','FNDBAS');
   Update_Module('REPDES_GRAPHICS','FNDBAS');
   Update_Module('REP_MAX_XML_SIZE','FNDBAS');
   Update_Module('REP_MAX_INT_XML_SIZE','FNDBAS');
   Update_Module('REP_EXT_RF_CS','FNDBAS');
   Update_Module('REP_RULE_LOG','FNDBAS');
   Update_Module('REP_RULE_LOG_AGE','FNDBAS');
   Update_Module('RD_AUTO_ROTATE','FNDBAS');
   Update_Module('SQL_ALIAS_ENCLOSER','FNDBAS');
   Update_Module('REP_ARCH_DIST_EMAIL','FNDBAS');
   Update_Module('REP_DEF_LOGI_PRNTR','FNDBAS');
   Update_Module('OVERWRITE_REP_LIFE','FNDBAS');
   Update_Module('REP_MESSAGE_QUEUE','FNDBAS');
   Update_Module('QR_DB_LINK','FNDBAS');
   Update_Module('REPDES_PDF_A','FNDBAS');
   Update_Module('REPORT_LIFETIME','FNDBAS');
   Update_Module('URL_EXT_SERVER','FNDBAS');
   Update_Module('REP_FO_PRINTING','FNDBAS');
   Update_Module('PLUGIN_PRINT_DIR','FNDBAS');
   Update_Module('DEFAULT_PAPER_FORMAT','FNDBAS');
   Update_Module('SHOW_ASGN_DEF_PRINT','FNDBAS');
   Update_Module('DEFAULT_FILEENCODING','FNDBAS');
   Update_Module('CHECKPOINT','FNDBAS');
   Update_Module('CHECKPOINT_U_TIMEOUT','FNDBAS');
   Update_Module('MAX_IDLE_TIME','FNDBAS');
   Update_Module('SQL_TRACE','FNDBAS');
   Update_Module('PROFILING','FNDBAS');
   Update_Module('PROFILING_DIR','FNDBAS');
   Update_Module('REMOTE_DEBUGGING','FNDBAS');
   Update_Module('APP_OWNER','FNDBAS');
   Update_Module('OBJ_CONN_DELETE','FNDBAS');
   Update_Module('PROXY_SERVER','FNDBAS');
   Update_Module('NO_PROXY_DOMAINS','FNDBAS');
   Update_Module('KEY_STRING_VALIDATE','FNDBAS');
   Update_Module('PRINT_COMPANY_LOGO','FNDBAS');
   Update_Module('LOBBY_DEFAULT_GRANT','FNDBAS');
   Update_Module('NOTIFY_BEFORE_DAYS','FNDBAS');
   Update_Module('KEEP_STREAMS_DAYS','FNDBAS');
   Update_Module('IM_COMP_LEVEL','FNDBAS');
   Update_Module('VALID_ILLEGAL_CHARS','FNDBAS');
   
   --Update for FNDCOB
   Update_Module('CUSTOM_FIELDS','FNDCOB');
   Update_Module('CF_TS_DEFAULT','FNDCOB');
   Update_Module('CF_TS_INDEX','FNDCOB');
   Update_Module('CF_TS_LOB','FNDCOB');
   Update_Module('INFO_CARDS','FNDCOB');
   Update_Module('CUSTOM_PAGES','FNDCOB');
   Update_Module('CONDITIONAL_FIELDS','FNDCOB');
   
   --Update for RCMINT
   Update_Module('RCM_CUSTOMER_ID','RCMINT');
   Update_Module('RCM_TOKEN','RCMINT');
   
   --Update for GISINT
   Update_Module('GISINT_ID_FIELD_NAME','GISINT');
   Update_Module('GISINT_GMTRY_SRV_URL','GISINT');
   Update_Module('GISINT_ALWAYS_PROXY','GISINT');
   
   --Update for BIINT
   Update_Module('REP_SERV_BASE_URL','BIINT');
   Update_Module('MS_REP_VIEW_FEATURE','BIINT');
   Update_Module('MS_REP_VIEW_TIMEOUT','BIINT');
   Update_Module('MS_SSRS_AUTH_TYPE','BIINT');
   Update_Module('SP_PP_URL','BIINT');
   Update_Module('SP_EXCEL_URL','BIINT');
   Update_Module('SP_EXCEL_VIEWER_URL','BIINT');
   
   
   -- Update for CRYSTL
   Update_Module('CR_SERVER_NAME','CRYSTL');
   Update_Module('CR_SERVER_PROTOCAL','CRYSTL');
   Update_Module('CR_SERVER_PORT','CRYSTL');
   Update_Module('CR_VIRTUAL_DIRECTORY','CRYSTL');
   Update_Module('CR_SECURED_REP_REQ','CRYSTL');   
   
   --Update for FNDMOB 
   OPEN  get_component;
   FETCH get_component INTO dummy_;
   IF (get_component%FOUND) THEN      
      Update_Module('BING_VRTMAP_KEY','VRTMAP');
   ELSE
      Update_Module('BING_VRTMAP_KEY','FNDMOB');
   END IF;
   CLOSE get_component;
   
   UPDATE fnd_setting_tab
   SET module = 'FNDMOB'
   WHERE category IN ('Touch Apps', 'Touch App Server', 'Mobile')
   AND module IS NULL;
   
   UPDATE fnd_setting_tab
   SET module = 'CUSTOM'
   WHERE module IS NULL;
   
END;
/

COMMIT;

--------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_86');
PROMPT Adding DISPLAY_NAME and COLUMN_PATH column to FND_OBJ_SUBSCRIP_COLUMN_TAB
--------------------------------------------------------------------------------


DECLARE
  column_display_name_     Installation_SYS.ColRec;
  column_column_path_      Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIP_COLUMN_TAB';
BEGIN
   column_display_name_ := Installation_SYS.Set_Column_Values('DISPLAY_NAME', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_display_name_, TRUE);
   
   column_column_path_ := Installation_SYS.Set_Column_Values('COLUMN_PATH', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_column_path_, TRUE);
END;
/


--------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_87');
PROMPT Adding Z_DATA AND ORIGINAL_SIZE column to XML_REPORT_DATA_TAB
--------------------------------------------------------------------------------
DECLARE
  column_display_name_     Installation_SYS.ColRec;
  column_                  Installation_SYS.ColRec;
  table_name_ VARCHAR2(30) := 'XML_REPORT_DATA_TAB';
BEGIN
   column_display_name_ := Installation_SYS.Set_Column_Values('ORIGINAL_SIZE', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_display_name_, TRUE);
   
   column_ := Installation_SYS.Set_Column_Values('Z_DATA', 'BLOB', 'Y', NULL, 'LOB (Z_DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

--------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_88');
PROMPT Adding CHECK_EXECUTING to BATCH_SCHEDULE_CHAIN_TAB
--------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'BATCH_SCHEDULE_CHAIN_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_,'CHECK_EXECUTING', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

BEGIN
   UPDATE BATCH_SCHEDULE_CHAIN_TAB 
   SET CHECK_EXECUTING = 'FALSE' 
   WHERE CHECK_EXECUTING IS NULL;
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'BATCH_SCHEDULE_CHAIN_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN   
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_,'CHECK_EXECUTING', 'VARCHAR2(5)', 'N');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_89');
PROMPT Update FndEventActions to new MAIL SENDER parameter
--------------------------------------------------------------------------------------------

DECLARE
   CURSOR Get_Mail IS
      SELECT Action_Parameters PARAMETERS
        FROM Fnd_Event_Action_Tab t
       WHERE t.Fnd_Event_Action_Type = 'MAIL'
         AND action_parameters NOT LIKE '%$SENDER=%'
         FOR UPDATE OF action_parameters;
   Parameters_ CLOB;
   Sender_     CLOB;

   new_line_            CONSTANT VARCHAR2(1) := CHR(10);
   head_marker_         CONSTANT VARCHAR2(1) := '!';
   segment_marker_      CONSTANT VARCHAR2(1) := '#';
   attribute_marker_    CONSTANT VARCHAR2(1) := '$';
   value_marker_        CONSTANT VARCHAR2(1) := '=';
   continuation_marker_ CONSTANT VARCHAR2(1) := '-';

   PROCEDURE Add_Clob_Attribute(message_ IN OUT NOCOPY CLOB,
                                name_    IN VARCHAR2,
                                value_   IN CLOB) IS
   BEGIN
      message_ := message_ || new_line_ ||
                  to_clob(attribute_marker_ || name_ || value_marker_ ||
                          REPLACE(value_,
                                  new_line_,
                                  new_line_ || continuation_marker_) ||
                          new_line_);
   END Add_Clob_Attribute;

   FUNCTION Find_Clob_Attribute (
      message_       IN CLOB,
      name_          IN VARCHAR2,
      default_value_ IN CLOB) RETURN CLOB
   IS
      value_ CLOB;
      FUNCTION Find_Attribute___ (
         message_       IN  CLOB,
         name_          IN  VARCHAR2,
         value_         OUT CLOB ) RETURN BOOLEAN
      IS
         p1_  NUMBER;
         p2_  NUMBER;
         p3_  NUMBER;
         msg_ CLOB := replace(message_, chr(13));
      BEGIN
         p1_ := Dbms_Lob.Instr(msg_, new_line_||attribute_marker_||name_||value_marker_);
         IF p1_ >= 1 THEN
            p2_ := p1_+length(name_)+3;
            p3_ := Dbms_Lob.Instr(msg_, new_line_||attribute_marker_, p2_);
            IF p3_ = 0 THEN
               p3_ := Dbms_Lob.Getlength(msg_);
               IF Dbms_Lob.Substr(msg_, 1, p3_) = new_line_ THEN
                  p3_ := p3_ - 1;
               END IF;
            ELSE
               p3_ := p3_ - 1;
            END IF;
            IF p3_ > 0 THEN
               value_ := replace(rtrim(substr(msg_, p2_, p3_-p2_+1),new_line_),
                                 new_line_||continuation_marker_,
                                 new_line_);
               RETURN TRUE;
            END IF;
         END IF;
         RETURN FALSE;
      END Find_Attribute___;
   BEGIN
      IF Find_Attribute___(message_, name_, value_) THEN
         RETURN value_;
      ELSE
         RETURN default_value_;
      END IF;
   END Find_Clob_Attribute;

   PROCEDURE Set_Clob_Attribute(message_ IN OUT CLOB,
                                name_    IN VARCHAR2,
                                value_   IN CLOB) IS
      p1_ NUMBER;
      p2_ NUMBER;
      p3_ NUMBER;
   BEGIN
      p1_ := dbms_lob.instr(message_,
                            new_line_ || attribute_marker_ || name_ ||
                            value_marker_);
      IF p1_ > 1 THEN
         p2_ := p1_ + length(name_) + 3;
         p3_ := dbms_lob.instr(message_,
                               new_line_ || attribute_marker_,
                               p2_);
         IF p3_ = 0 THEN
            p3_ := length(message_);
            IF dbms_lob.substr(message_, offset => p3_, amount => 1) =
               new_line_ THEN
               p3_ := p3_ - 1;
            END IF;
         ELSE
            p3_ := p3_ - 1;
         END IF;
         IF p3_ > 0 THEN
            message_ := dbms_lob.substr(message_,
                                        offset   => 1,
                                        amount   => p2_ - 1) ||
                        REPLACE(value_,
                                new_line_,
                                new_line_ || continuation_marker_) ||
                        dbms_lob.substr(message_, offset => p3_ + 1);
            RETURN;
         END IF;
      END IF;
      Add_Clob_Attribute(message_, name_, value_);
   END Set_Clob_Attribute;   

BEGIN
   FOR Rec IN Get_Mail LOOP
      Parameters_ := Rec.Parameters;
      Sender_     := Find_Clob_Attribute(Parameters_, 'SENDER', '');
      IF (Sender_ IS NULL) THEN
         --Dbms_Output.Put_Line('---------------------------------------------------------');
         
         Set_Clob_Attribute(Parameters_, 'SENDER', '');
         --Dbms_Output.Put_Line(Parameters_);
         UPDATE fnd_event_action_tab
            SET Action_Parameters = parameters_
         WHERE CURRENT OF get_mail;
      END IF;
   END LOOP;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_90');
PROMPT Adding QUEUE_ID column to BATCH_SCHEDULE_TAB

DECLARE
   column_    Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'BATCH_SCHEDULE_TAB';
BEGIN   
   column_ := Installation_SYS.Set_Column_Values('QUEUE_ID', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_91');
PROMPT Adding new COLUMNS TO FND_PROJECTION_TAB

DECLARE   
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_TAB'; 
   columns_    Installation_SYS.ColumnTabType;      
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CATEGORIES', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COMPONENT', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLSQL_PACKAGE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_92');
PROMPT repaired sticky notes data IN posting proposal TO be visible AFTER bugs 107217,107369 

DECLARE
   key_ref_       VARCHAR2(4000);
   note_id_       VARCHAR2(50);
   have_notes_    NUMBER:=0;  
   max_page_num_  NUMBER:=0; 
   next_page_num_ NUMBER:=0;
   CURSOR get_post_prop_head_notes IS 
      SELECT * 
      FROM   fnd_note_book_tab t 
      WHERE  t.lu_name = 'PostingProposalHead';
   
   CURSOR get_man_supp_notes(key_ref_ VARCHAR2)IS
      SELECT note_id 
      FROM   fnd_note_book_tab t 
      WHERE  t.lu_name = 'ManSuppInvoice'
      AND    t.key_ref = key_ref_;
      
   CURSOR get_max_note_page_num(note_id_ VARCHAR2) IS 
      SELECT max(t.page_no)
      FROM   fnd_note_page_tab t 
      WHERE  t.note_id = note_id_;
   
   CURSOR get_note_pages(note_id_ VARCHAR2) IS 
      SELECT * 
      FROM   fnd_note_page_tab 
      WHERE  note_id= note_id_;
   
BEGIN    
   FOR note_rec_ IN get_post_prop_head_notes LOOP
      note_id_ := null;
      max_page_num_ := 0;
      key_ref_ := substr(note_rec_.key_ref,0,LENGTH(note_rec_.key_ref)-14);
      OPEN get_man_supp_notes(key_ref_);
      FETCH get_man_supp_notes INTO note_id_;
      IF(get_man_supp_notes%FOUND) THEN
         OPEN get_max_note_page_num(note_id_);
         FETCH get_max_note_page_num INTO max_page_num_;
         CLOSE get_max_note_page_num;
         next_page_num_ := max_page_num_ +1;
         FOR old_note_page_rec_ IN get_note_pages(note_rec_.note_id) LOOP
            INSERT INTO fnd_note_page_tab 
               (note_id,
               page_no,
               text,
               created_by,
               created_date,
               modified_by,
               modified_date,
               rowversion)
            SELECT 
               note_id_,
               next_page_num_,
               old_note_page_rec_.text,
               old_note_page_rec_.created_by,
               old_note_page_rec_.created_date,
               old_note_page_rec_.modified_by,
               old_note_page_rec_.modified_date,
               sysdate
            FROM dual
            WHERE NOT EXISTS ( SELECT 1 
                               FROM   fnd_note_page_tab t 
                               WHERE  t.note_id =  note_id_ 
                               AND    (dbms_lob.compare(nvl(t.text,'Null'),nvl(old_note_page_rec_.text,'Null'))=0));              
            next_page_num_ := next_page_num_ +1;
         END LOOP;   
      ELSE         
         note_id_ := sys_guid();
         INSERT INTO fnd_note_book_tab 
            (note_id,
            pos_x,
            pos_y,
            height,
            width,
            lu_name,
            key_ref,
            pinned,
            rowversion)
         VALUES 
            (note_id_,
            note_rec_.pos_x,
            note_rec_.pos_y,
            note_rec_.height,
            note_rec_.width,
            'ManSuppInvoice',
            key_ref_,
            note_rec_.pinned,
            sysdate);

         FOR old_note_page_rec_ IN get_note_pages(note_rec_.note_id) LOOP
            INSERT INTO fnd_note_page_tab 
               (note_id,
               page_no,
               text,
               created_by,
               created_date,
               modified_by,
               modified_date,
               rowversion)
            VALUES
               (note_id_,
               old_note_page_rec_.page_no,
               old_note_page_rec_.text,
               old_note_page_rec_.created_by,
               old_note_page_rec_.created_date,
               old_note_page_rec_.modified_by,
               old_note_page_rec_.modified_date,
               sysdate);
         END LOOP;   
      END IF; 
      CLOSE get_man_supp_notes;        
   END LOOP;
END;                                                                 
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_93');
PROMPT Adding CLIENT_TYPE column TO COMPOSITE_PAGE_ELEMENT_TAB
--------------------------------------------------------------------------------------------
DECLARE
   column_client_type_  Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_ELEMENT_TAB';
BEGIN
   column_client_type_ := Installation_SYS.Set_Column_Values('CLIENT_TYPE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_client_type_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_94');
PROMPT Modifying COLUMN text_id$ on FNDRR_CLIENT_PROFILE_TAB
BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE FNDRR_CLIENT_PROFILE_TAB MODIFY text_id$ VARCHAR2(50)';
EXCEPTION
   WHEN OTHERS THEN
      Dbms_Output.Put_Line('Could not modify column text_id$ for FNDRR_CLIENT_PROFILE_TAB' || SQLERRM);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_95');
PROMPT Modifying INDEX FNDCN_APPLICATION_MESSAGE_IX_1

DECLARE
   index_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_IX_1';
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE_THREAD_NO');
   Installation_SYS.Set_Table_Column(columns_, 'STATE');
   Installation_SYS.Set_Table_Column(columns_, 'SEQ_NO');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_96');
PROMPT Adding CLIENT_TYPE column TO COMPOSITE_PAGE_TAB
--------------------------------------------------------------------------------------------
DECLARE
   column_client_type_  Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COMPOSITE_PAGE_TAB';
BEGIN
   column_client_type_ := Installation_SYS.Set_Column_Values('CLIENT_TYPE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_client_type_, TRUE);
END;
/
--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_97');
PROMPT Adding COMPONENT column TO COMPOSITE_PAGE_TAB,COMPOSITE_PAGE_ELEMENT_TAB AND COMPOSITE_PAGE_DATA_SOURCE_TAB
--------------------------------------------------------------------------------------------
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30);
BEGIN
   column_ := Installation_SYS.Set_Column_Values('COMPONENT', 'VARCHAR2(6)', 'Y');

   table_name_ := 'COMPOSITE_PAGE_TAB';
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   table_name_ := 'COMPOSITE_PAGE_ELEMENT_TAB';
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   table_name_ := 'COMPOSITE_PAGE_DATA_SOURCE_TAB';
   Installation_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_98');
PROMPT Drop obsolete package, view, index connected to LdapDomainConfig Entity and Rename obsolete table LDAP_DOMAIN_CONFIG_TAB
--------------------------------------------------------------------------------------------
BEGIN
	Installation_SYS.Remove_Package('LDAP_DOMAIN_CONFIG_API', TRUE);
	Installation_SYS.Remove_View('LDAP_DOMAIN_CONFIG', TRUE);
	Installation_SYS.Remove_Indexes('LDAP_DOMAIN_CONFIG_TAB', 'LDAP_DOMAIN_CONFIG_IX', TRUE);
	Installation_SYS.Rename_Table('LDAP_DOMAIN_CONFIG_TAB',  'LDAP_DOMAIN_CONFIG_700',  TRUE);
END;
/
--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_99');
PROMPT Drop obsolete package, view connected to LdapConfiguration Entity and Rename obsolete table LDAP_CONFIGURATION_TAB
--------------------------------------------------------------------------------------------
BEGIN
	Installation_SYS.Remove_Package('LDAP_CONFIGURATION_API', TRUE);
	Installation_SYS.Remove_View('LDAP_CONFIGURATION', TRUE);
	Installation_SYS.Rename_Table('LDAP_CONFIGURATION_TAB',  'LDAP_CONFIGURATION_700',  TRUE);
END;
/
--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_100');
PROMPT Drop obsolete package, view connected to LdapMapping Entity and Rename obsolete table LDAP_MAPPING_TAB
--------------------------------------------------------------------------------------------
BEGIN
	Installation_SYS.Remove_Package('LDAP_MAPPING_API', TRUE);
	Installation_SYS.Remove_View('LDAP_MAPPING', TRUE);
	Installation_SYS.Rename_Table('LDAP_MAPPING_TAB',  'LDAP_MAPPING_700',  TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_101');
PROMPT create table REPORT_FORMAT_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FORMAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_TITLE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LAYOUT_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LANG_CODE', 'VARCHAR2(4)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LANG_CODE_RFC3066', 'VARCHAR2(8)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRINTER_ID', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COPIES', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PAGES', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PAGE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PAGE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FORMAT_PK';
   table_name_ VARCHAR2(30) := 'REPORT_FORMAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FORMAT_RK';
   table_name_ VARCHAR2(30) := 'REPORT_FORMAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_102');
PROMPT create table REPORT_FORMAT_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FORMAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_TITLE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LAYOUT_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LANG_CODE', 'VARCHAR2(4)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LANG_CODE_RFC3066', 'VARCHAR2(8)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRINTER_ID', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COPIES', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PAGES', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FROM_PAGE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TO_PAGE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FORMAT_PK';
   table_name_ VARCHAR2(30) := 'REPORT_FORMAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_FORMAT_RK';
   table_name_ VARCHAR2(30) := 'REPORT_FORMAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-----------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_103');
PROMPT Making OrderSeq nullable IN FND_MONITOR_CATEGORY_TAB
-----------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FND_MONITOR_CATEGORY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ORDER_SEQ', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_104');
PROMPT Add column NAVIGATE_TO To  REPORT_FORMAT_TAB
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_FORMAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'NAVIGATE_TO', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_105');
PROMPT Add column CHAIN_LINK_NO to FNDCN_ROUTE_ADDRESS_REF_TAB
--------------------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_ROUTE_ADDRESS_REF_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('CHAIN_LINK_NO', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_106');
PROMPT Add columns CHAIN_LINK_NO and MAIN_ADDRESS to FNDCN_ADDRESS_LABEL_TAB
--------------------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_ADDRESS_LABEL_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'CHAIN_LINK_NO', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MAIN_ADDRESS', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_107');
PROMPT Updare existing Asynchronous Response Addresses to be secong chain link
--------------------------------------------------------------------------------------------
UPDATE FNDCN_ROUTE_ADDRESS_REF_TAB
   SET chain_link_no = decode(nvl(response,0), 0, 1, 2)
 WHERE chain_link_no IS NULL
/
COMMIT
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_108');
PROMPT Add column ROUTE_RULE_CANDIDATES to FNDCN_APPLICATION_MESSAGE_TAB
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROUTE_RULE_CANDIDATES', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_109');
PROMPT Add columns BASED_ON and BASED_ON_FILTER to DICTIONARY_SYS_TAB and increasing column sizes
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;   
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON_FILTER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_110');
PROMPT Removing Term Related Database Objects
--------------------------------------------------------------------------------------------
BEGIN
	--Term
	Installation_SYS.Remove_Package('TERM_API', TRUE);
	Installation_SYS.Remove_View('TERM', TRUE);
	Installation_SYS.Remove_Indexes('TERM_TAB', 'TERM_TAB_IX1', TRUE);
	Installation_SYS.Remove_Indexes('TERM_TAB', 'TERM_UK', TRUE);
	Installation_SYS.Rename_Table('TERM_TAB',  'TERM_700',  TRUE);
	--Term Domain
	Installation_SYS.Remove_Package('TERM_DOMAIN_API', TRUE);
	Installation_SYS.Remove_View('TERM_DOMAIN', TRUE);
	Installation_SYS.Rename_Table('TERM_DOMAIN_TAB',  'TERM_DOMAIN_700',  TRUE);
	--Term History
	Installation_SYS.Remove_Package('TERM_HISTORY_API', TRUE);
	Installation_SYS.Remove_View('TERM_HISTORY', TRUE);
	Installation_SYS.Remove_Constraints('TERM_HISTORY_TAB', 'TERM_HISTORY_PK', TRUE);
	Installation_SYS.Rename_Table('TERM_HISTORY_TAB',  'TERM_HISTORY_700',  TRUE);
	--Term Owner
	Installation_SYS.Remove_Package('TERM_OWNER_API', TRUE);
	Installation_SYS.Remove_View('TERM_OWNER', TRUE);
	Installation_SYS.Rename_Table('TERM_OWNER_TAB',  'TERM_OWNER_700',  TRUE);
	--Term Definition History
	Installation_SYS.Remove_Package('TERM_DEFINITION_HISTORY_API', TRUE);
	Installation_SYS.Remove_View('TERM_DEFINITION_HISTORY', TRUE);
	Installation_SYS.Rename_Table('TERM_DEFINITION_HISTORY_TAB',  'TERM_DEFINITION_HISTORY_700',  TRUE);
	--Term Alert Indicator
	Installation_SYS.Remove_Package('TERM_ALERT_INDICATOR_API', TRUE);
	Installation_SYS.Remove_View('TERM_ALERT_INDICATOR', TRUE);
	Installation_SYS.Rename_Table('TERM_ALERT_INDICATOR_TAB',  'TERM_ALERT_INDICATOR_700',  TRUE);
	--Term Translated Definition
	Installation_SYS.Remove_Package('TERM_TRANSLATED_DEFINITION_API', TRUE);
	Installation_SYS.Remove_View('TERM_TRANSLATED_DEFINITION', TRUE);
	Installation_SYS.Rename_Table('TERM_TRANSLATED_DEFINITION_TAB',  'TERM_TRANSLATED_DEFINITION_700',  TRUE);
	--Term Relation
	Installation_SYS.Remove_Package('TERM_RELATION_API', TRUE);
	Installation_SYS.Remove_View('TERM_RELATION', TRUE);
	Installation_SYS.Rename_Table('TERM_RELATION_TAB',  'TERM_RELATION_700',  TRUE);
	--Term Usage Definition
	Installation_SYS.Remove_Package('TERM_USAGE_DEFINITION_API', TRUE);
	Installation_SYS.Remove_View('TERM_USAGE_DEFINITION', TRUE);
	Installation_SYS.Remove_View('TERM_USAGE_GET_ALL_TEXTS', TRUE);
	Installation_SYS.Remove_View('TERM_FIELD_DESCRIPTION_TEMP', TRUE);
	Installation_SYS.Remove_View('TERM_FIELD_DESCRIPTION', TRUE);
	Installation_SYS.Remove_Indexes('TERM_USAGE_DEFINITION_TAB', 'TERM_USAGE_DEFINITION_IX1', TRUE);
	Installation_SYS.Remove_Indexes('TERM_USAGE_DEFINITION_TAB', 'TERM_USAGE_DEFINITION_IX2', TRUE);
	Installation_SYS.Remove_Indexes('TERM_USAGE_DEFINITION_TAB', 'TERM_USAGE_DEFINITION_UK', TRUE);
	Installation_SYS.Rename_Table('TERM_USAGE_DEFINITION_TAB',  'TERM_USAGE_DEFINITION_700',  TRUE);
	--Term Owner Module
	Installation_SYS.Remove_Package('TERM_OWNER_MODULE_API', TRUE);
	Installation_SYS.Remove_View('TERM_OWNER_MODULE', TRUE);
	Installation_SYS.Remove_Indexes('TERM_OWNER_MODULE_TAB', 'TERM_OWNER_MODULE_IX', TRUE);
	Installation_SYS.Remove_Constraints('TERM_OWNER_MODULE_TAB', 'TERM_OWNER_MODULE_PK', TRUE);
	Installation_SYS.Rename_Table('TERM_OWNER_MODULE_TAB',  'TERM_OWNER_MODULE_700',  TRUE);
	--Term Translated Name
	Installation_SYS.Remove_Package('TERM_TRANSLATED_NAME_API', TRUE);
	Installation_SYS.Remove_View('TERM_TRANSLATED_NAME', TRUE);
	Installation_SYS.Rename_Table('TERM_TRANSLATED_NAME_TAB',  'TERM_TRANSLATED_NAME_700',  TRUE);
	--Term Display Name
	Installation_SYS.Remove_Package('TERM_DISPLAY_NAME_API', TRUE);
	Installation_SYS.Remove_View('TERM_DISPLAY_NAME', TRUE);
	Installation_SYS.Remove_Indexes('TERM_DISPLAY_NAME_TAB', 'TERM_DISPLAY_NAME_IX1', TRUE);
	Installation_SYS.Remove_Indexes('TERM_DISPLAY_NAME_TAB', 'TERM_DISPLAY_NAME_IX2', TRUE);
	Installation_SYS.Rename_Table('TERM_DISPLAY_NAME_TAB',  'TERM_DISPLAY_NAME_700',  TRUE);
	--Term Stop List
	Installation_SYS.Remove_Package('TERM_STOP_LIST_API', TRUE);
	Installation_SYS.Remove_View('TERM_STOP_LIST', TRUE);
	Installation_SYS.Rename_Table('TERM_STOP_LIST_TAB',  'TERM_STOP_LIST_700',  TRUE);
	--Term Stop List
	Installation_SYS.Remove_Package('TERM_USAGE_IDENTIFIER_API', TRUE);
	Installation_SYS.Remove_View('TERM_USAGE_IDENTIFIER', TRUE);
	Installation_SYS.Rename_Table('TERM_USAGE_IDENTIFIER_TAB',  'TERM_USAGE_IDENTIFIER_700',  TRUE);
	--Remove Enum Packages
	Installation_SYS.Remove_Package('TERM_TRANSLATION_APPROVAL_API', TRUE);
	Installation_SYS.Remove_Package('TERM_TECHNICAL_TYPE_API', TRUE);
	Installation_SYS.Remove_Package('TERM_STOP_LIST_REASON_API', TRUE);
	Installation_SYS.Remove_Package('TERM_RELATION_TYPE_API', TRUE);
	Installation_SYS.Remove_Package('TERM_PROPOSAL_QUALITY_API', TRUE);
	Installation_SYS.Remove_Package('TERM_LOCALIZE_CONNECTION_EVENT_API', TRUE);
	Installation_SYS.Remove_Package('TERM_HISTORY_EVENT_API', TRUE);
	Installation_SYS.Remove_Package('TERM_DISPLAY_NAME_TYPE_API', TRUE);
	Installation_SYS.Remove_Package('TERM_DEFINITION_TYPE_API', TRUE);
	Installation_SYS.Remove_Package('TERM_DEF_HISTORY_EVENT_API', TRUE);
	Installation_SYS.Remove_Package('TERM_BINDING_MAIN_TYPE_API', TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_111');
PROMPT To remove the 'picTab' from existing tranlatable context paths
--------------------------------------------------------------------------------------------------------
BEGIN
   
   UPDATE language_context_tab l
   SET    l.path = REGEXP_REPLACE(l.path , '\.picTabs\.|\.picTab\.' , '.')
   WHERE  (l.path LIKE '%.picTab.%' OR l.path LIKE '%.picTabs.%')
   AND    l.main_type = 'RWC'
   AND    l.sub_type = 'Tab';
   
   COMMIT;
      
END;
/

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FND_MONITOR_ENTRY_TAB'; 
   columns_    Installation_SYS.ColumnTabType;     
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SYSTEM_DEFINED', 'VARCHAR2(5)', 'N', '''FALSE''');
   Installation_SYS.Set_Table_Column(columns_, 'DEF_LOWER_WARNING_LIMIT', 'NUMBER', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'DEF_UPPER_WARNING_LIMIT', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'FND_MONITOR_CATEGORY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ORDER_SEQ', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

BEGIN
   UPDATE FND_MONITOR_ENTRY_TAB t SET
   t.def_lower_warning_limit = t.lower_warning_limit,
   t.def_upper_warning_limit = t.upper_warning_limit;
   COMMIT;
END;
/

BEGIN
   DELETE FROM fnd_monitor_entry_tab t 
   WHERE t.entry_id IN ( 
      'PRINT_SERVER_CONFIG',
      'PRINT_SERVER_RUNNING',
      'USERS',
      'SESSIONS',
      'ALERT_LOG_ERRORS',
      'DBMS_JOB_TOTAL',
      'DBMS_JOB_BROKEN' 
   );
   COMMIT;
END;
/

BEGIN
   DELETE FROM fnd_monitor_category_tab t
   WHERE t.category_id IN(
      'EVENT_SERVERS',
      'PRINT_SERVERS'
   );
   COMMIT;
END;
/

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'QUICK_REPORT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DEFINITION_MODIFIED_DATE', 'DATE', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

BEGIN
   UPDATE QUICK_REPORT_TAB SET DEFINITION_MODIFIED_DATE = ROWVERSION WHERE DEFINITION_MODIFIED_DATE IS NULL;
   COMMIT;
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'QUICK_REPORT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DEFINITION_MODIFIED_DATE', 'DATE', 'N', 'SYSDATE');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'KIND', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REFERENCE', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILED', 'VARCHAR2(5)', 'N', '''FALSE''');
   Installation_SYS.Set_Table_Column(columns_, 'VERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('TEMPLATE', 'CLOB', 'Y', NULL, 'LOB (TEMPLATE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SCOPE_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DATA_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LINE_NO', 'NUMBER(10,0)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO', 'NUMBER(2,0)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REFERENCE', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VISIBILITY', 'VARCHAR2(10)', 'N', '''Public''');
   Installation_SYS.Set_Table_Column(columns_, 'DEPENDENCIES', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CONTENT', 'CLOB', 'N', NULL, 'LOB (CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_PK';
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_IX';
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT');
   Installation_SYS.Set_Table_Column(columns_, 'NAME');
   Installation_SYS.Set_Table_Column(columns_, 'KIND');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_PK';
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID');
   Installation_SYS.Set_Table_Column(columns_, 'SCOPE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'DATA_ID');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_112');
PROMPT Add column ENVELOPE_RESPONSE to FNDCN_ROUTE_ADDRESS_TAB
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_ROUTE_ADDRESS_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ENVELOPE_RESPONSE', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/


DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_ADDRESS_LABEL_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ENVELOPE_RESPONSE', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_113');
PROMPT CREATE TABLE DATABASE_ROWKEY_UPDATE_TAB
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'DATABASE_ROWKEY_UPDATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TABLE_NAME', 'VARCHAR2(128)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTIVE_WHERE_CLAUSE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASSIVE_WHERE_CLAUSE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STATE', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRIORITY', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'COMMENTS', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TOTAL_NUM_RECORDS', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECORDS_WITHOUT_ROWKEY', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TIME_STAMP', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_114');
PROMPT CREATE primary key DATABASE_ROWKEY_UPDATE_PK
--------------------------------------------------------------------------------------------------------

DECLARE
   index_name_ VARCHAR2(30) := 'DATABASE_ROWKEY_UPDATE_PK';
   table_name_ VARCHAR2(30) := 'DATABASE_ROWKEY_UPDATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TABLE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FND_KEYSTORE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'KEYSTORE_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'USER_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TYPE', 'VARCHAR2(15)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EXPIRE_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('PFX', 'BLOB', 'Y', NULL, 'LOB (PFX) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_KEYSTORE_PK';
   table_name_ VARCHAR2(30) := 'FND_KEYSTORE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'KEYSTORE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'USER_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'FND_KEYSTORE_RK';
   table_name_ VARCHAR2(30) := 'FND_KEYSTORE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_115');
PROMPT Create table FNDCN_READER_TIMERS_TAB
--------------------------------------------------------------------------------------------
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FNDCN_READER_TIMERS_TAB';
   index_name_ VARCHAR2(30) := 'FNDCN_READER_TIMERS_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'READER_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SERVER_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'READER_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_116');
PROMPT Modify table FUNC_AREA_SEC_CACHE_TAB
--------------------------------------------------------------------------------------------
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FUNC_AREA_SEC_CACHE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('OBJECT_TYPE', 'VARCHAR2(30)');   
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_117');
PROMPT Adding four new tables to support SOD for UXX
--------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- TABLE DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_ACTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENT_ACT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_ENTITY', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_ACTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_ENTITY', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ACTION_PK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_ACTION');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ACTION_RK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJECTION_PK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJECTION_RK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENT_ACT_PK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENT_ACT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_ENTITY');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_ACTION');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENT_ACT_RK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENT_ACT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENTITY_PK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_AREA_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_ENTITY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENTITY_RK';
   table_name_ VARCHAR2(30) := 'FUNC_AREA_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_118');
PROMPT MODIFYING FILE_NAME COLUMN LENGTH IN TABLE PDF_ARCHIVE_TAB
--------------------------------------------------------------------------------------------

DECLARE
   column_ Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('FILE_NAME', 'VARCHAR2(4000)');
   Installation_SYS.Alter_Table_Column('PDF_ARCHIVE_TAB', 'MODIFY', column_, TRUE);
   Installation_SYS.Register_Db_Patch('FNDBAS','139201','Maximum length of a file name in PDF_ARCHIVE_TAB');
   COMMIT;
END;
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_119');
PROMPT MODIFYING LOG_ID COLUMN TYPE IN TABLE REPORT_RULE_LOG_TAB
--------------------------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_LOG_TAB';
BEGIN
   IF NOT (Installation_SYS.Is_Db_Patch_Registered('&MODULE', '142233')) THEN
      --Remove old log entries
      EXECUTE IMMEDIATE 'TRUNCATE TABLE REPORT_RULE_LOG_TAB';
      COMMIT;
	  --Change type from VARCHAR to NUMBER
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'LOG_ID', 'NUMBER');
      Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
      Installation_SYS.Register_Db_Patch('&MODULE', 142233, 'Invalid Number Error when upgrading');
      COMMIT;
   END IF;
END;
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_120');
PROMPT Map old DEBUG_LEVEL for Print Agent Task Templates
--------------------------------------------------------------------------------------------

UPDATE fndcn_config_param_tab A
SET A.parameter_value = DECODE(parameter_value,'high',  'debug',
                                          'medium','info',
                                          'low',   'error',
                                          'error')
WHERE A.parameter_name = 'DEBUG_LEVEL'
AND   A.group_name = 'TaskTemplates'
AND   A.parameter_value IN ('high','medium','low');

COMMIT
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_121');
PROMPT MODIFYING PROPERTY_LIST COLUMN TYPE IN TABLE REPORT_RULE_ACTION_TAB
--------------------------------------------------------------------------------------------

DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_RULE_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
      --Add temp column
      column_ := Installation_SYS.Set_Column_Values('TEMP_PROPERTY_LIST', 'CLOB', 'N', NULL, 'LOB (TEMP_PROPERTY_LIST) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
      Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
      --Copy vlaues from old column to new
      EXECUTE IMMEDIATE 'UPDATE REPORT_RULE_ACTION_TAB SET TEMP_PROPERTY_LIST=PROPERTY_LIST';
      COMMIT;
      --Delete the old property_list column
      column_ := Installation_SYS.Set_Column_Values('PROPERTY_LIST');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_, TRUE);
      --Rename the temp_property_list column to new property_list column
      Installation_SYS.Rename_Column(table_name_, 'PROPERTY_LIST', 'TEMP_PROPERTY_LIST', TRUE);
      --Recreate
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_LIST');

      COMMIT;
END;
/

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_122');
PROMPT Adding missing S150 column to INFO_SERVICES_RPT.
--------------------------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INFO_SERVICES_RPT';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'S150', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
   COMMIT;
END;
/

--------------------------------------------------------------------------------------------
-- Remove Obsolete Rowkey Columns and pre load logic
--------------------------------------------------------------------------------------------
DECLARE
   table_name_ VARCHAR2(30);
   column_     Installation_SYS.ColRec;
BEGIN
   table_name_ := 'FNDRR_CLIENT_PROFILE_VALUE_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'HISTORY_LOG_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'HISTORY_LOG_ATTRIBUTE_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'LANGUAGE_FILE_EXPORT_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'LANGUAGE_FILE_IMPORT_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'LANGUAGE_TRANSLATION_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'REPLICATION_LOG_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'SERVER_LOG_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
END;
/

BEGIN
   IF Installation_SYS.Package_Exist('ROWKEY_PREPARE_API') THEN
      Installation_SYS.Remove_Package('ROWKEY_PREPARE_API', TRUE);
   END IF;
   IF Installation_SYS.Table_Exist('ROWKEY_PREPARE_TAB')
   AND Installation_SYS.Table_Exist('ROWKEY_PREPARE_700') = FALSE THEN
      Installation_SYS.Rename_Table('ROWKEY_PREPARE_TAB',  'ROWKEY_PREPARE_700',  TRUE);
   END IF;
END;
/



--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_123');
PROMPT Adding UPDATED_BY column to LANGUAGE_TRANSLATION_TAB
--------------------------------------------------------------------------------------------

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LANGUAGE_TRANSLATION_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'UPDATED_BY', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
   COMMIT;
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_124');
PROMPT Modify length of TABLE_NAME in IN_MEMORY_TABLE_TAB
DECLARE
   column_ Installation_SYS.ColRec;
BEGIN   
   column_ := Installation_SYS.Set_Column_Values('TABLE_NAME', 'VARCHAR2(130)');   
   Installation_SYS.Alter_Table_Column('IN_MEMORY_TABLE_TAB', 'M', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_125');
PROMPT Increase length of column NAME in table PLSQLAP_ENVIRONMENT_TAB
DECLARE
   column_  Installation_Sys.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('NAME', 'VARCHAR2(50)');
   Installation_Sys.Alter_Table_Column('PLSQLAP_ENVIRONMENT_TAB', 'MODIFY', column_, TRUE);
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_126');
PROMPT Grant IFSSYS missing connect through priviledge for users
--------------------------------------------------------------------------------------------

DECLARE
   CURSOR get_users IS
      SELECT oracle_user
        FROM fnd_user_tab f
       WHERE NOT EXISTS (SELECT 1 FROM proxy_users WHERE client = f.oracle_user);

   ifssys_  CONSTANT VARCHAR2(6) := 'IFSSYS';
   no_user  EXCEPTION;
   PRAGMA   EXCEPTION_INIT(no_user, -1918);

BEGIN
   FOR rec IN get_users LOOP
      BEGIN
         EXECUTE IMMEDIATE 'ALTER USER "'||rec.oracle_user||'"  GRANT CONNECT THROUGH '||ifssys_;
      EXCEPTION
         WHEN no_user THEN
            NULL;
      END;
   END LOOP;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_127');
PROMPT Increase length of column IPADDRESS in table SERVER_LOG_TAB
DECLARE
   column_  Installation_Sys.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('IPADDRESS', 'VARCHAR2(50)');
   Installation_Sys.Alter_Table_Column('SERVER_LOG_TAB', 'MODIFY', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_128');
PROMPT Remove Server Log category "Successful Authentications"
DECLARE
BEGIN
   DELETE FROM server_log_category_tab WHERE category_id = 'Successful Authentications';
   DELETE FROM server_log_tab WHERE category_id = 'Successful Authentications';
   COMMIT;
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_129');
PROMPT Modifying the ROWVERSION column type from DATE to TIMESTAMP in REMOTE_PRINTING_NODE_TAB
--------------------------------------------------------------------------------------------

DECLARE
   column_     Installation_SYS.ColRec;
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REMOTE_PRINTING_NODE_TAB';
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'TIMESTAMP(6)', 'N');
   Installation_Sys.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
   COMMIT;
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_130');
PROMPT Chanage the index table space of INFO_SERVICE_PK from IFSAPP_INDEX to IFSAPP_REPORT_DATA in INFO_SERVICES_RPT
--------------------------------------------------------------------------------------------

DECLARE
   index_name_ VARCHAR2(30) := 'INFO_SERVICES_PK';
BEGIN
   Installation_SYS.Move_Object(index_name_, '&IFSAPP_REPORT_INDEX', TRUE);
   COMMIT;
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'INFO_SERVICES_RPT_RK';
BEGIN
   Installation_SYS.Move_Object(index_name_, '&IFSAPP_REPORT_INDEX', TRUE);
   COMMIT;
END;
/

--------------------------------------------------------------------------------------------
exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Timestamp_131');
PROMPT Adding additional parameter to FND_SETTINGS_TAB
--------------------------------------------------------------------------------------------

DECLARE
   old_default_char_list_     VARCHAR2(10):='.&%_<>=;~';
   new_default_char_list_     VARCHAR2(13):='(..)&%_<>=;~';
   CURSOR get_values_ IS
      SELECT value
      FROM fnd_setting_tab
      WHERE parameter='KEY_STRING_VALIDATE';
BEGIN
   FOR rec_ in get_values_ LOOP
      --overwrite DOMAIN regardless of what it is
      UPDATE fnd_setting_tab
      SET domain = new_default_char_list_ || '^*^'
      WHERE parameter='KEY_STRING_VALIDATE';
      --update value ONLY if it is equal to the default character list
      IF rec_.value = old_default_char_list_ THEN
         UPDATE fnd_setting_tab
         SET value = REPLACE(value,'.','(..)')
         WHERE parameter='KEY_STRING_VALIDATE';
      ELSIF NOT (rec_.value = '*' OR rec_.value = new_default_char_list_) THEN
         Dbms_Output.Put_Line('Value is not set to default so value NOT updated.');
      END IF;
   END LOOP;
   COMMIT;
END;
/
-----------------------------------------------------------------------------------
-- Finish up
-----------------------------------------------------------------------------------

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','700.upg','Done');
