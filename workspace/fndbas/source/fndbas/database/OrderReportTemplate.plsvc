-----------------------------------------------------------------------------
--
--  Logical unit: OrderReportTemplate
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

const_lu_name_   CONSTANT VARCHAR2(20)  := 'BatchSchedule';

-- NOTE!
-- Max amount of parameters known being used in a Report is 29 (MC_CUST_OPEN_ITEM_REP)
-- Max parameters allowed (supported) is 30

FUNCTION Get_Parameter_Value_By_Seq___ (
   rec_ IN Virtual_Order_Report_Rec,
   seq_ IN NUMBER) RETURN VARCHAR2
IS
BEGIN
   CASE seq_
         WHEN 1 THEN RETURN rec_.parameter1;
         WHEN 2 THEN RETURN rec_.parameter2;
         WHEN 3 THEN RETURN rec_.parameter3;
         WHEN 4 THEN RETURN rec_.parameter4;
         WHEN 5 THEN RETURN rec_.parameter5;
         WHEN 6 THEN RETURN rec_.parameter6;
         WHEN 7 THEN RETURN rec_.parameter7;
         WHEN 8 THEN RETURN rec_.parameter8;
         WHEN 9 THEN RETURN rec_.parameter9;
         WHEN 10 THEN RETURN rec_.parameter10;
         WHEN 11 THEN RETURN rec_.parameter11;
         WHEN 12 THEN RETURN rec_.parameter12;
         WHEN 13 THEN RETURN rec_.parameter13;
         WHEN 14 THEN RETURN rec_.parameter14;
         WHEN 15 THEN RETURN rec_.parameter15;
         WHEN 16 THEN RETURN rec_.parameter16;
         WHEN 17 THEN RETURN rec_.parameter17;
         WHEN 18 THEN RETURN rec_.parameter18;
         WHEN 19 THEN RETURN rec_.parameter19;
         WHEN 20 THEN RETURN rec_.parameter20;
         WHEN 21 THEN RETURN rec_.parameter21;
         WHEN 22 THEN RETURN rec_.parameter22;
         WHEN 23 THEN RETURN rec_.parameter23;
         WHEN 24 THEN RETURN rec_.parameter24;
         WHEN 25 THEN RETURN rec_.parameter25;
         WHEN 26 THEN RETURN rec_.parameter26;
         WHEN 27 THEN RETURN rec_.parameter27;
         WHEN 28 THEN RETURN rec_.parameter28;
         WHEN 29 THEN RETURN rec_.parameter29;
         WHEN 30 THEN RETURN rec_.parameter30;
      END CASE;   
END Get_Parameter_Value_By_Seq___;
   
PROCEDURE Set_Parameter_Value_By_Seq___(
   rec_   IN OUT Virtual_Order_Report_Rec,
   seq_   IN NUMBER,
   value_ IN VARCHAR2)
IS
BEGIN
   IF (seq_ = 0) THEN
      RETURN;
   END IF;
   Trace___('Set_Parameter_Value_By_Seq___.' || seq_, value_);
   CASE seq_
      WHEN 1 THEN rec_.parameter1 := value_;
      WHEN 2 THEN rec_.parameter2 := value_;
      WHEN 3 THEN rec_.parameter3 := value_;
      WHEN 4 THEN rec_.parameter4 := value_;
      WHEN 5 THEN rec_.parameter5 := value_;
      WHEN 6 THEN rec_.parameter6 := value_;
      WHEN 7 THEN rec_.parameter7 := value_;
      WHEN 8 THEN rec_.parameter8 := value_;
      WHEN 9 THEN rec_.parameter9 := value_;
      WHEN 10 THEN rec_.parameter10 := value_;
      WHEN 11 THEN rec_.parameter11 := value_;
      WHEN 12 THEN rec_.parameter12 := value_;
      WHEN 13 THEN rec_.parameter13 := value_;
      WHEN 14 THEN rec_.parameter14 := value_;
      WHEN 15 THEN rec_.parameter15 := value_;
      WHEN 16 THEN rec_.parameter16 := value_;
      WHEN 17 THEN rec_.parameter17 := value_;
      WHEN 18 THEN rec_.parameter18 := value_;
      WHEN 19 THEN rec_.parameter19 := value_;
      WHEN 20 THEN rec_.parameter20 := value_;
      WHEN 21 THEN rec_.parameter21 := value_;
      WHEN 22 THEN rec_.parameter22 := value_;
      WHEN 23 THEN rec_.parameter23 := value_;
      WHEN 24 THEN rec_.parameter24 := value_;
      WHEN 25 THEN rec_.parameter25 := value_;
      WHEN 26 THEN rec_.parameter26 := value_;
      WHEN 27 THEN rec_.parameter27 := value_;
      WHEN 28 THEN rec_.parameter28 := value_;
      WHEN 29 THEN rec_.parameter29 := value_;
      WHEN 30 THEN rec_.parameter30 := value_;
   END CASE;
   Trace___('Set_Parameter_Value_By_Seq___ END');
END Set_Parameter_Value_By_Seq___;


PROCEDURE Unpack_Default_Values___(
   rec_ IN OUT Virtual_Order_Report_Rec,
   arguments_ IN VARCHAR2)
IS
   attr_table_ Aurena_Report_Metadata_SYS.report_col_def_table := Aurena_Report_Metadata_SYS.Get_Attribute_Mapping__(rec_.report_id);
   default_value_ VARCHAR2(500);
   is_def_arg_ BOOLEAN;
BEGIN
   Trace___('Unpack_Default_Values___.Args', rec_.args);

   FOR i IN 1 .. attr_table_.COUNT LOOP
      IF Report_SYS.Arg_Exist(attr_table_(i).column_name, arguments_) THEN
         is_def_arg_ := TRUE;
         default_value_ := Report_SYS.Get_Arg_Value(attr_table_(i).column_name, arguments_);
      ELSE
         is_def_arg_ := FALSE;
         default_value_ := Resolve_Default_Value___(attr_table_(i), rec_.global_company_id);         
      END IF;      
      IF (default_value_ IS NOT NULL) THEN
         Trace___(CASE is_def_arg_ WHEN TRUE THEN 'Defined' ELSE 'Default' END || ' Arg ' || attr_table_(i).column_name, default_value_);
         Set_Parameter_Value_By_Seq___(rec_, attr_table_(i).column_index, Encode___(default_value_, attr_table_(i).arg_definition));
      END IF;      
   END LOOP;   
   
END Unpack_Default_Values___;


PROCEDURE Unpack_Existing_Values___(
   rec_ IN OUT Virtual_Order_Report_Rec)
IS   
   sched_rep_ BATCH_SCHEDULE%ROWTYPE;
  
   CURSOR get_scheduled_report IS
      SELECT *
      FROM BATCH_SCHEDULE
      WHERE schedule_id = rec_.schedule_id;
         
   CURSOR get_param IS
      SELECT NAME, VALUE
      FROM  batch_schedule_par_tab
      WHERE schedule_id = rec_.schedule_id; 
BEGIN
   Trace___('Unpack_Existing_Values___');
   OPEN get_scheduled_report;
   FETCH get_scheduled_report INTO sched_rep_;
   CLOSE get_scheduled_report;
   
   rec_.next_execution_date := sched_rep_.next_execution_date;
   rec_.start_date := sched_rep_.start_date;
   rec_.stop_date := sched_rep_.stop_date;
   rec_.next_execution_date := sched_rep_.next_execution_date;
   rec_.execution_plan := sched_rep_.execution_plan;
   rec_.lang_code := sched_rep_.lang_code;
   rec_.schedule_name := sched_rep_.schedule_name;
   rec_.active := Str_To_Bool___(sched_rep_.active_db);
   rec_.stream_msg_on_completion := Str_To_Bool___(sched_rep_.stream_msg_on_completion_db);
   rec_.stream_notes := sched_rep_.stream_notes;
   
   -- Evaluate the Execution Plan...
   rec_.schedule_option      := Batch_Schedule_API.Get_Current_Schedule_Option(rec_.execution_plan);
   rec_.schedule_time        := Batch_Schedule_API.Get_Schedule_Time(rec_.execution_plan);
   rec_.schedule_datetime    := rec_.schedule_time;
   rec_.scheduled_days       := Batch_Schedule_API.Get_Scheduled_Days(rec_.execution_plan);
   rec_.scheduled_day_number := Batch_Schedule_API.Get_Scheduled_Day_Number(rec_.execution_plan);
   rec_.schedule_interval    := Batch_Schedule_API.Get_Schedule_Interval(rec_.execution_plan);
   
   FOR param_rec IN get_param LOOP
      CASE param_rec.name
         WHEN 'PARAMETER_ATTR' THEN
            Unpack_Parameter_Attr___(rec_, param_rec.value);
         WHEN 'REPORT_ATTR' THEN
            Unpack_Report_Attr___(rec_, param_rec.value);
         WHEN 'MESSAGE_ATTR' THEN
            Unpack_Message_Attr___(rec_, param_rec.value);
         WHEN 'ARCHIVING_ATTR' THEN
            Unpack_Archiving_Attr___(rec_, param_rec.value);
         WHEN 'DISTRIBUTION_LIST' THEN
            Unpack_Distribution_Attr___(rec_, param_rec.value);
         WHEN 'EXTERNAL_ARCHIVE_ATTR' THEN
            Unpack_External_Archive_Attr___(rec_, param_rec.value);
      END CASE;            
   END LOOP;
            
END Unpack_Existing_Values___;

PROCEDURE Unpack_Parameter_Attr___(
   rec_ IN OUT Virtual_Order_Report_Rec,
   param_attr_ IN VARCHAR2)
IS
   ptr_   NUMBER := NULL;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
   
   seq_        NUMBER;
   attr_table_ Aurena_Report_Metadata_SYS.report_col_def_table := Aurena_Report_Metadata_SYS.Get_Attribute_Mapping__(rec_.report_id);
BEGIN
   WHILE (Client_SYS.Get_Next_From_Attr(param_attr_, ptr_, name_, value_)) LOOP
      Trace___('Unpack_Parameter_Attr___.' || name_, value_);
      seq_ := Aurena_Report_Metadata_SYS.Find_Column_Index__(rec_.report_id, name_);
      Set_Parameter_Value_By_Seq___(rec_, seq_, Encode___(value_, attr_table_(seq_).arg_definition));
   END LOOP;         
END Unpack_Parameter_Attr___;

FUNCTION Pack_Report_Attr___ (
   virt_rec_ IN Virtual_Order_Report_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Add_To_Attr('REPORT_ID', virt_rec_.REPORT_ID, attr_);
   IF (virt_rec_.LAYOUT_NAME IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LAYOUT_NAME', virt_rec_.LAYOUT_NAME, attr_);
   END IF;
   IF (virt_rec_.REPORT_LANG_CODE IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LANG_CODE', virt_rec_.REPORT_LANG_CODE, attr_);
   END IF;
   Client_SYS.Add_To_Attr('SCHEDULE_ID', virt_rec_.SCHEDULE_ID, attr_);      
   RETURN attr_;   
END Pack_Report_Attr___;

FUNCTION Pack_Archiving_Attr___ (
   virt_rec_ IN Virtual_Order_Report_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
   pdf_archiving_ BOOLEAN;
BEGIN   
   IF (virt_rec_.REPORT_SEND_PDF) THEN
      pdf_archiving_ := TRUE;
   ELSE
      pdf_archiving_ := CASE virt_rec_.REPORT_SETTING WHEN 'PRINTER' THEN TRUE ELSE FALSE END;
   END IF;
      
   Client_SYS.Add_To_Attr('PDF_ARCHIVING', Bool_To_Str___(pdf_archiving_), attr_);   
   Client_SYS.Add_To_Attr('SEND_PDF', Bool_To_Str___(virt_rec_.REPORT_SEND_PDF), attr_);
   IF (virt_rec_.REPORT_SEND_PDF = TRUE) THEN
      Client_SYS.Add_To_Attr('SEND_PDF_TO', virt_rec_.REPORT_SEND_PDF_TO, attr_);
   END IF;   
   
   RETURN attr_;                
END Pack_Archiving_Attr___;

FUNCTION Pack_Ext_Archiving_Attr___ (
   virt_rec_ IN Virtual_Order_Report_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN   
   IF (virt_rec_.ARCHIVE_DOCUMENT = TRUE) THEN
      Client_SYS.Add_To_Attr('DOC_NO', virt_rec_.ARCHIVE_DOCUMENT_NO, attr_);
   END IF;   
   
   RETURN attr_;                
END Pack_Ext_Archiving_Attr___;

PROCEDURE Unpack_Report_Attr___(
   rec_ IN OUT Virtual_Order_Report_Rec,
   report_attr_ IN VARCHAR2)
IS
   ptr_   NUMBER := NULL;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   WHILE (Client_SYS.Get_Next_From_Attr(report_attr_, ptr_, name_, value_)) LOOP
      Trace___('Unpack_Report_Attr___.' || name_, value_);      
      CASE name_
         WHEN 'LAYOUT_NAME' THEN rec_.layout_name := value_;
         WHEN 'LANG_CODE' THEN rec_.report_lang_code := value_;
         ELSE NULL;         
      END CASE;
   END LOOP;         
END Unpack_Report_Attr___; 

PROCEDURE Unpack_Archiving_Attr___(
   rec_ IN OUT Virtual_Order_Report_Rec,
   archive_attr_ IN VARCHAR2)
IS
   ptr_   NUMBER := NULL;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   WHILE (Client_SYS.Get_Next_From_Attr(archive_attr_, ptr_, name_, value_)) LOOP
      Trace___('Unpack_Archiving_Attr___.' || name_, value_);
      CASE name_
         WHEN ('PDF_ARCHIVING') THEN
            Trace___('PDF_ARCHIVING', value_);
         WHEN ('SEND_PDF') THEN
            rec_.REPORT_SEND_PDF := Str_To_Bool___(value_);
            Trace___('SEND_PDF', value_);
         WHEN ('SEND_PDF_TO') THEN
            rec_.REPORT_SEND_PDF_TO := value_;
            Trace___('SEND_PDF_TO', value_);
      END CASE;
   END LOOP;
END Unpack_Archiving_Attr___;

PROCEDURE Unpack_Message_Attr___(
   rec_ IN OUT Virtual_Order_Report_Rec,
   message_attr_ IN VARCHAR2)
IS
   ptr_   NUMBER := NULL;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   WHILE (Client_SYS.Get_Next_From_Attr(message_attr_, ptr_, name_, value_)) LOOP
      Trace___('Unpack_Message_Attr___.' || name_, value_);
      CASE name_
         WHEN ('MESSAGE_TYPE') THEN
            rec_.REPORT_SETTING := value_;
            Trace___('MESSAGE_TYPE', value_);
         WHEN ('PRINTER_ID') THEN
            rec_.REPORT_PRINTER_ID := Unpack_Printer_Id___(value_);
            Trace___('PRINTER_ID', value_);
         WHEN ('SEND_EMAIL_TO') THEN
            rec_.REPORT_SEND_EMAIL_TO := value_;
            Trace___('SEND_EMAIL_TO', value_);
      END CASE;
   END LOOP;         
END Unpack_Message_Attr___;

FUNCTION Pack_Message_Attr___ (
   virt_rec_ IN Virtual_Order_Report_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Add_To_Attr('MESSAGE_TYPE', virt_rec_.REPORT_SETTING, attr_);
   CASE virt_rec_.REPORT_SETTING
   WHEN ('NONE') THEN
      NULL;
   WHEN ('PRINTER') THEN
      Trace___('MESSAGE_TYPE', Pack_Printer_Id___(virt_rec_.REPORT_PRINTER_ID));
      Client_SYS.Add_To_Attr('PRINTER_ID', Pack_Printer_Id___(virt_rec_.REPORT_PRINTER_ID), attr_);
   WHEN ('EMAIL') THEN
      Client_SYS.Add_To_Attr('SEND_EMAIL_TO', virt_rec_.REPORT_SEND_EMAIL_TO, attr_);
   END CASE;
   RETURN attr_;
END Pack_Message_Attr___;

FUNCTION Pack_Printer_Id___ (
   printer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   packed_printer_id_ VARCHAR2(1000);
   
   CURSOR cur_printer_id IS
      SELECT DESCRIPTION || ',SERVER,' || PRINTER_ID
      FROM LOGICAL_PRINTER
      WHERE  PRINTER_ID = printer_id_;
BEGIN
   IF printer_id_ IS NULL THEN
      RETURN '';
   END IF;
   
   OPEN cur_printer_id;
   FETCH cur_printer_id INTO packed_printer_id_;   
   CLOSE cur_printer_id;   
   RETURN packed_printer_id_;   
END Pack_Printer_Id___;

FUNCTION Unpack_Printer_Id___ (
   packed_printer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS   
BEGIN
   IF packed_printer_id_ IS NULL THEN
      RETURN '';
   END IF;
   RETURN SUBSTR(packed_printer_id_, instr(packed_printer_id_,',SERVER,',1) + 8);
END Unpack_Printer_Id___;

PROCEDURE Unpack_Distribution_Attr___(
   rec_ IN OUT Virtual_Order_Report_Rec,
   distr_attr_ IN VARCHAR2)
IS
   token_table_ Utility_SYS.STRING_TABLE;
   token_count_ NUMBER;   
   value_       VARCHAR2(100);
   
   users_       VARCHAR2(32000);
   groups_      VARCHAR2(32000);
   
   gdelim_      VARCHAR2(1);
   udelim_      VARCHAR2(1);   
BEGIN
   -- Example:
   -- FROM->  AHAGSE<FS>AKJOSE<FS>
   -- TO->    ["IDENTITY=AHAGSE^","IDENTITY=AKJOSE^"]
   Utility_SYS.Tokenize(distr_attr_, Client_SYS.field_separator_, token_table_, token_count_);
   FOR i IN 1 .. token_table_.COUNT LOOP
      value_ := token_table_(i);
      Trace___('Unpack_Distribution_Attr___. Value', value_);
      IF Distribution_Group_API.Exists(value_) THEN
         groups_ := groups_ || gdelim_ || '"' || 'GROUP_NAME' || '=' || value_ || '^"';
         gdelim_ := ',';
      ELSE
         users_ := users_ || udelim_ || '"' || 'IDENTITY' || '=' || value_ || '^"';
         udelim_ := ',';
      END IF;      
   END LOOP;
   
   IF length(udelim_) > 0 THEN
      users_ := '[' || users_ ||']';
      Trace___('Distribution Users', users_);
   END IF;
   IF length(gdelim_) > 0 THEN
      groups_ := '[' || groups_ ||']';
      Trace___('Distribution Groups', groups_);   
   END IF;

   rec_.distribution_users := users_;
   rec_.distribution_groups := groups_;         
END Unpack_Distribution_Attr___;

PROCEDURE Unpack_External_Archive_Attr___(
   rec_ IN OUT Virtual_Order_Report_Rec,
   external_attr_ IN VARCHAR2)
IS
   ptr_   NUMBER := NULL;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   WHILE (Client_SYS.Get_Next_From_Attr(external_attr_, ptr_, name_, value_)) LOOP
      Trace___('Unpack_External_Archive_Attr___.' || name_, value_);
      CASE name_
      WHEN ('DOC_NO') THEN
         rec_.ARCHIVE_DOCUMENT := TRUE;               
         rec_.ARCHIVE_DOCUMENT_NO := value_;
         Trace___('DOC_NO', value_);
      END CASE;
   END LOOP;         
END Unpack_External_Archive_Attr___;

FUNCTION Decode___(value_          IN VARCHAR2,
                   arg_definition_ IN VARCHAR2) RETURN VARCHAR2
IS
  enumeration_ VARCHAR2(200);
BEGIN
   enumeration_ := Client_SYS.Get_Key_Reference_Value(arg_definition_, 'ENUMERATE');
   IF (enumeration_ IS NOT NULL AND LENGTH(value_) > 3 AND SUBSTR(value_, 0, 3) = 'DB_') THEN
      -- Enumeration:
      -- Due legacy reasons, Operational/Scheduled Reports uses hardcoded DbValues/Identifiers, starting with 'DB_0', 'DB_1', 'DB_2' etc.... and must be transformed
      -- into their proper Client value using INDEXING. /Rakuse
      RETURN Domain_SYS.Get_Client_Value_(Dynamic_Reference_Metadata_API.Fetch_Enum_Client_Values_(enumeration_), TO_NUMBER(SUBSTR(value_, 4)));
   END IF;
   
   RETURN value_;
END Decode___;

FUNCTION Encode___(value_          IN VARCHAR2,
                   arg_definition_ IN VARCHAR2) RETURN VARCHAR2
IS
  enumeration_   VARCHAR2(200);
  client_values_ VARCHAR2(32000);
  client_value_  VARCHAR2(200);
BEGIN
   enumeration_ := Client_SYS.Get_Key_Reference_Value(arg_definition_, 'ENUMERATE');
   IF (enumeration_ IS NOT NULL) THEN
      -- Enumeration:
      -- Due legacy reasons, Scheduled Reports stores ClientValues, which must be transformed
      -- into temporary DbValues/Indentifiers using INDEXING.
      -- NOTE! This is a old and known limitation (bug), storing arguemnts using Client values as they can not be changed when using other languages. /Rakuse
      client_values_ := Dynamic_Reference_Metadata_API.Fetch_Enum_Client_Values_(enumeration_);      
      FOR i_ IN 0 .. 1000 LOOP
         client_value_ := Domain_SYS.Get_Client_Value_(client_values_, i_);
         EXIT WHEN client_value_ IS NULL;
         IF (client_value_ = value_) THEN
            RETURN 'DB_' || TO_CHAR(i_);
         END IF;         
      END LOOP;            
   END IF;
   
   RETURN value_;
END Encode___;


FUNCTION Create_Attr___(virt_rec_ IN Virtual_Order_Report_Rec) RETURN VARCHAR2
IS
   attr_       VARCHAR2(32000);  
   attr_table_ Aurena_Report_Metadata_SYS.report_col_def_table := Aurena_Report_Metadata_SYS.Get_Attribute_Mapping__(virt_rec_.report_id);
BEGIN
   Client_SYS.Clear_Attr(attr_);   
   FOR i IN 1 .. attr_table_.COUNT LOOP      
      Client_SYS.Add_To_Attr(attr_table_(i).column_name, Decode___(Get_Parameter_Value_By_Seq___(virt_rec_, attr_table_(i).column_index), attr_table_(i).arg_definition), attr_);      
   END LOOP;
   
   RETURN attr_;
END Create_Attr___;

@Override
PROCEDURE CRUD_Default___ (
   rec_ IN OUT Virtual_Order_Report_Rec )
IS
   info_       VARCHAR2(32000);
   objid_      VARCHAR2(100);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
BEGIN
   Trace___('CRUD_Default___!');
   super(rec_);
   
   Batch_Schedule_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');   
   attr_ := Client_SYS.Remove_Attr('EXECUTION_PLAN', attr_);
   attr_ := Client_SYS.Remove_Attr('NEXT_EXECUTION_DATE', attr_);

   Add_To_Rec_From_Attr___(attr_, rec_);
   
   IF (Client_SYS.Item_Exist('ACTIVE_DB', attr_)) THEN      
      rec_.active := Str_To_Bool___(Client_SYS.Get_Item_Value('ACTIVE_DB', attr_));
   END IF;
--   IF (Client_SYS.Item_Exist('CHECK_EXECUTING_DB', attr_)) THEN
--      rec_.check_executing := CASE Client_SYS.Get_Item_Value('CHECK_EXECUTING_DB', attr_) WHEN arg_const_TRUE_ THEN TRUE ELSE FALSE END;
--   END IF;
   IF (Client_SYS.Item_Exist('STREAM_MSG_ON_COMPLETION_DB', attr_)) THEN
      rec_.stream_msg_on_completion := Str_To_Bool___(Client_SYS.Get_Item_Value('STREAM_MSG_ON_COMPLETION_DB', attr_));
   END IF;

   rec_.schedule_option := 'DAILY';      
   rec_.scheduled_day_number := 1;
   rec_.schedule_datetime := sysdate;
   rec_.schedule_time := TO_DATE(rec_.schedule_datetime);      
   rec_.schedule_interval := '00:00';      
   
END CRUD_Default___;


@Override
PROCEDURE CRUD_Create___(
   rec_ IN Virtual_Order_Report_Rec )
IS
   rec_copy_ Virtual_Order_Report_Rec;
BEGIN
   Trace___('CRUD_Create___! REPORT_ID', rec_.report_id);   
   --Add pre-processing code here
   rec_copy_ := rec_;
   rec_copy_.schedule_name := 'Scheduled Report - ' || Report_Sys.Get_Report_Title(rec_.report_id);
   rec_copy_.is_custom := Aurena_Report_Metadata_SYS.Is_Custom_Defined__(rec_.report_id);
   rec_copy_.report_mode := Report_Definition_API.Get_Report_Mode(rec_.report_id);
   rec_copy_.report_title := Report_Definition_API.Get_Report_Title(rec_.report_id);
   
   IF (rec_.schedule_id IS NULL) THEN
      -- New record - Use default values.
      Unpack_Default_Values___(rec_copy_, rec_.args);
   ELSE
      -- Existing record, use its values.
      Unpack_Existing_Values___(rec_copy_);
      IF (rec_copy_.schedule_option != 'CUSTOM') THEN
         rec_copy_.execution_plan := NULL;
      END IF;
   END IF;
      
   super(rec_copy_);

   --Add post-processing code here
END CRUD_Create___;


@Override
PROCEDURE CRUD_Update___(
   old_ IN Virtual_Order_Report_Rec,
   new_ IN Virtual_Order_Report_Rec )
IS
   rec_copy_ Virtual_Order_Report_Rec;
   execution_plan_ VARCHAR2(1000);
BEGIN
   Trace___('CRUD_Update___! REPORT_ID', old_.report_id);   
   --Add pre-processing code here
   rec_copy_ := new_;   
   Parse_Execution_Plan__(execution_plan_, rec_copy_.next_execution_date, rec_copy_, true);
   
   super(old_, rec_copy_);
   --Add post-processing code here
END CRUD_Update___;

FUNCTION Resolve_Default_Value___ (
   col_def_rec_ IN Aurena_Report_Metadata_SYS.report_col_def_rec,
   global_company_id_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN   
   IF (col_def_rec_.column_query IS NULL) THEN
      RETURN '';
   END IF;
   
   IF (SUBSTR(col_def_rec_.column_value, 1, 1) = ':') THEN
      RETURN Get_Dynamic_Value___(SUBSTR(col_def_rec_.column_value, 2));
   END IF;
   
   -- If the Parameter for the report is COMPANY or COMPANY_ID and its default value is not available, use the current global Company.
   CASE col_def_rec_.column_name
      WHEN 'COMPANY' THEN
         Trace___('COMPANY (Assigned with global Company)', global_company_id_);
         RETURN global_company_id_;
      WHEN 'COMPANY_ID' THEN
         Trace___('COMPANY_ID (Assigned with global Company)', global_company_id_);
         RETURN global_company_id_;      
      ELSE RETURN col_def_rec_.column_value;
   END CASE;
   
EXCEPTION
   WHEN no_data_found THEN
      NULL;
END Resolve_Default_Value___;

FUNCTION Get_Dynamic_Value___ (
   procedure_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   stmt_  VARCHAR2(2000);
   value_ VARCHAR2(32000);
BEGIN
   Assert_SYS.Assert_Is_Procedure(procedure_);
   stmt_ := 'BEGIN '||procedure_||'(:value_); END;';
   @ApproveDynamicStatement(2019-07-15,rakuse)
   EXECUTE IMMEDIATE stmt_ USING OUT value_;
   RETURN (SUBSTR(value_, 1, 500));
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END Get_Dynamic_Value___;


@Override
PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT Virtual_Order_Report_Rec )
IS
   ptr_   NUMBER := NULL;
   name_  VARCHAR2(100);
   value_ VARCHAR2(1000);   
BEGIN
   Trace___('Add_To_Rec_From_Attr___.rec_.report_id', rec_.report_id);
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      Trace___(name_, value_);
      IF (name_ LIKE 'PARAM$%') THEN         
         -- Ex: PARAM$%COMPONENT is translated to PARAMETER1, which gets assigned with the value.
         Set_Parameter_Value_By_Seq___(rec_, Aurena_Report_Metadata_SYS.Find_Column_Index__(rec_.report_id, substr(name_,7,length(name_)-6)), value_);
      END IF;
   END LOOP;
   super(attr_, rec_);
END Add_To_Rec_From_Attr___;

FUNCTION Bool_To_Str___ (
	value_ IN BOOLEAN) RETURN VARCHAR2
IS
BEGIN
   RETURN CASE value_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END;
END Bool_To_Str___;

FUNCTION Str_To_Bool___ (
	value_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   RETURN CASE value_ WHEN 'TRUE' THEN TRUE ELSE FALSE END;
END Str_To_Bool___;

FUNCTION Order_Report___ (
   key_         IN Virtual_Order_Report_Key) RETURN Report_Result_Rec
IS
   virt_rec_           Virtual_Order_Report_Rec;
   report_attr_        VARCHAR2(2000);
   param_attr_         VARCHAR2(32000);
   dist_list_          VARCHAR2(2000);
   result_key_         NUMBER;
   schedule_job_id_    NUMBER;
   result_rec_         Report_Result_Rec;  
   rendering_completed_ BOOLEAN := TRUE;
BEGIN
   Trace___('Order_Report___');
   Prepare_Report_Common___(virt_rec_, report_attr_, param_attr_, dist_list_, key_);
   IF (virt_rec_.report_mode = 'EXCEL1.0') THEN
      -- Business Reports
$IF Component_Biserv_SYS.INSTALLED $THEN
      Xlr_Template_Util_API.Create_New_Report (result_key_, schedule_job_id_, report_attr_, param_attr_, dist_list_);
      rendering_completed_ := NVL(Xlr_Template_Util_API.Is_Running_In_Br_Container(result_key_), 'FALSE') = 'FALSE';
$ELSE
      NULL;
$END      
   ELSE
      -- Operational Reports
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, param_attr_, dist_list_);
   END IF;
   Trace___('ResultKey', result_key_);
   Trace___('ScheduleJobId', schedule_job_id_);
   result_rec_.schedule_job_id     := schedule_job_id_;
   result_rec_.result_key          := result_key_;
   result_rec_.rendering_completed := rendering_completed_;
   RETURN result_rec_;          
END Order_Report___;

FUNCTION Schedule_Report___ (
	key_ IN Virtual_Order_Report_Key) RETURN NUMBER
IS
   virt_rec_      Virtual_Order_Report_Rec;
   report_attr_   VARCHAR2(2000);
   param_attr_    VARCHAR2(32000);
   dist_list_     VARCHAR2(2000);
BEGIN
   Trace___('Schedule_Report___');
   Prepare_Report_Common___(virt_rec_, report_attr_, param_attr_, dist_list_, key_);
   Parse_Execution_Plan__(virt_rec_.execution_plan, virt_rec_.next_execution_date, virt_rec_);
   Schedule_Report_Header__(virt_rec_);
   
   Schedule_Report_Parameter___(virt_rec_.schedule_id, 'REPORT_ATTR', Pack_Report_Attr___(virt_rec_));
   IF (virt_rec_.is_custom != 'TRUE') THEN         
      Schedule_Report_Parameter___(virt_rec_.schedule_id, 'PARAMETER_ATTR', param_attr_);
   END IF;
   Schedule_Report_Parameter___(virt_rec_.schedule_id, 'MESSAGE_ATTR', Pack_Message_Attr___(virt_rec_));
   Schedule_Report_Parameter___(virt_rec_.schedule_id, 'ARCHIVING_ATTR', Pack_Archiving_Attr___(virt_rec_));
   Schedule_Report_Parameter___(virt_rec_.schedule_id, 'DISTRIBUTION_LIST', Fix_Separator___(dist_list_));
   Schedule_Report_Parameter___(virt_rec_.schedule_id, 'EXTERNAL_ARCHIVE_ATTR', Pack_Ext_Archiving_Attr___(virt_rec_));
   
   Trace___('ScheduleId', virt_rec_.schedule_id);      
   RETURN virt_rec_.schedule_id;
END Schedule_Report___;


PROCEDURE Prepare_Report_Common___ (
   virt_rec_ OUT Virtual_Order_Report_Rec,
   report_attr_ OUT VARCHAR2,
   param_attr_ OUT VARCHAR2,
   dist_list_ OUT VARCHAR2,
	key_ IN Virtual_Order_Report_Key)
IS
BEGIN
   virt_rec_ := Get_Record___(key_);
   Trace___('REPORT_ID', virt_rec_.report_id);
   Trace___('DISTRIBUTION_USERS', virt_rec_.distribution_users);
   Trace___('DISTRIBUTION_GROUPS', virt_rec_.distribution_groups);   
   
   -- REPORT ATTR
   Client_SYS.Add_To_Attr('REPORT_ID', virt_rec_.report_id, report_attr_);
   
   -- PARAM ATTR
   param_attr_ := Create_Attr___(virt_rec_);
   Trace_SYS.Attribute_String(param_attr_, 'param_attr_');
   Validate_Parameter_Attr___(virt_rec_.report_id, param_attr_);
   
   -- DIST ATTR
   dist_list_ := Fnd_Session_API.Get_Fnd_User();
   dist_list_ := Pack_Items___(virt_rec_.distribution_users, dist_list_);
   dist_list_ := Pack_Items___(virt_rec_.distribution_groups, dist_list_);
   Trace___('dist_list_', dist_list_);
   
END Prepare_Report_Common___;


PROCEDURE Schedule_Report_Header__ (
   virt_rec_ IN OUT Virtual_Order_Report_Rec)
IS
   installation_id_ VARCHAR2(100);
BEGIN
   IF (virt_rec_.schedule_id IS NULL) THEN
      Batch_SYS.New_Batch_Schedule (
         virt_rec_.schedule_id,           -- OUT
         virt_rec_.next_execution_date,   -- IN OUT
         virt_rec_.start_date,            -- IN OUT
         virt_rec_.stop_date,             -- IN
         virt_rec_.schedule_name,
         'ARCHIVE_API.CREATE_AND_PRINT_REPORT__',
         Bool_To_Str___(virt_rec_.active),
         virt_rec_.execution_plan,
         virt_rec_.lang_code,
         installation_id_,
         virt_rec_.report_id,
         NULL, --Bool_To_Str___(virt_rec_.check_executing),
         Bool_To_Str___(virt_rec_.stream_msg_on_completion),
         virt_rec_.stream_notes);
   ELSE
      Batch_SYS.Modify_Batch_Schedule (
         virt_rec_.next_execution_date,
         virt_rec_.start_date,            -- IN OUT
         virt_rec_.stop_date,             -- IN
         virt_rec_.schedule_id,
         virt_rec_.schedule_name,
         Bool_To_Str___(virt_rec_.active),
         virt_rec_.execution_plan,
         virt_rec_.lang_code,
         Bool_To_Str___(virt_rec_.stream_msg_on_completion),
         virt_rec_.stream_notes);
   END IF;   
END Schedule_Report_Header__;

PROCEDURE Parse_Execution_Plan__ (
   execution_plan_ OUT VARCHAR2,
   next_execution_date_ OUT DATE,
   virt_rec_ IN Virtual_Order_Report_Rec,
   silent_mode_ IN BOOLEAN DEFAULT FALSE)
IS   
   attr_       VARCHAR2(32000);
   start_date_ DATE;
BEGIN
   Add_To_Attr_From_Rec___(virt_rec_, attr_);
   Trace_SYS.Attribute_String(attr_);
      
   -- Evaluate the Execution Plan...
   Batch_Schedule_API.Parse_Execution_Plan__(virt_rec_.schedule_id, attr_);         
   execution_plan_ := Client_SYS.Get_Item_Value('EXECUTION_PLAN', attr_);   
   Trace_SYS.Field('EXECUTION_PLAN', execution_plan_);   
   start_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('START_DATE', attr_));
   
   -- ...followed by the Next Execution Date   
   next_execution_date_ := Batch_SYS.Get_Next_Exec_Time__(execution_plan_,
                                                          NULL,
                                                          start_date_,
                                                          Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('STOP_DATE', attr_)));
                                                          
   IF (next_execution_date_ IS NULL) THEN
      next_execution_date_ := Client_SYS.Attr_Value_To_Date(TO_CHAR(start_date_, 'YYYY-MM-DD') || '-' || TO_CHAR(SYSDATE, 'HH24:MI:SS'));
   END IF;

   Trace_SYS.Field('NEXT_EXECUTION_DATE', next_execution_date_);

EXCEPTION
   WHEN OTHERS THEN
      IF (NOT silent_mode_) THEN
         RAISE;
      END IF;
      execution_plan_ := NULL;
      next_execution_date_ := NULL;
END Parse_Execution_Plan__;

PROCEDURE Schedule_Report_Parameter___ (
   schedule_id_ IN NUMBER,
   name_        IN VARCHAR2,
   value_       IN VARCHAR2)
IS   
   param_rec_ batch_schedule_par_tab%ROWTYPE;   
   
   CURSOR get_param IS
      SELECT seq_no, rowkey
      FROM  batch_schedule_par_tab
      WHERE schedule_id = schedule_id_         
      AND   name = name_;
BEGIN
   Trace___('Schedule_Parameter___');
   OPEN  get_param;
   FETCH get_param INTO param_rec_.SEQ_NO, param_rec_.ROWKEY;
   CLOSE get_param;

   param_rec_.SCHEDULE_ID := schedule_id_;
   param_rec_.NAME        := name_;
   param_rec_.VALUE       := value_;     
   IF (param_rec_.SEQ_NO IS NULL) THEN
      Trace___('Create Param "' || name_ || '"', value_);
      Batch_Schedule_Par_API.New__(param_rec_);            
   ELSE
      Trace___('Update Param "' || name_ || '"', value_);
      Batch_Schedule_Par_API.Modify__(param_rec_);            
   END IF;
END Schedule_Report_Parameter___;


FUNCTION Resolve_Label___ (
   logical_unit_   IN VARCHAR2,
   report_id_    IN VARCHAR2,
   column_name_  IN VARCHAR2,
   column_query_ IN VARCHAR2) RETURN VARCHAR2
IS
   label_ VARCHAR2(200);
BEGIN
   label_ := NVL(Language_SYS.Translate_Report_Question_(logical_unit_, report_id_, column_name_, column_query_), column_query_);   
   IF (SUBSTR(label_,LENGTH(label_)) = ':') THEN
      RETURN SUBSTR(label_,1, LENGTH(label_)-1);
   END IF;
   RETURN label_;
END Resolve_Label___;


FUNCTION Pack_Items___(
   items_ IN VARCHAR2,
   list_  IN VARCHAR2) RETURN VARCHAR2
IS
   from_        NUMBER := 1;
   to_          NUMBER;
   value_       VARCHAR2(500);
   packed_list_ VARCHAR2(2000) := list_;
BEGIN
   IF items_ IS NULL THEN
      RETURN packed_list_;
   END IF;
   -- Example:
   -- FROM->  ["IDENTITY=AHAGSE^","IDENTITY=AKJOSE^"]
   -- TO->    AHAGSE<FS>AKJOSE<FS>
   WHILE (instr(items_,'=',from_)> 0) LOOP
      from_ := instr(items_,'=',from_);
      to_ := instr(items_,'^',from_);
      value_ := substr(items_,from_+1,to_-from_-1);
      from_ := to_;
      packed_list_ := packed_list_ || Client_SYS.field_separator_ || value_;
   END LOOP;   
   RETURN packed_list_;
END Pack_Items___;


PROCEDURE Validate_Parameter_Attr___ (
   report_id_ VARCHAR2,
   attr_ VARCHAR2)
IS   
   ptr_           NUMBER := NULL;
   name_          VARCHAR2(100);
   value_         VARCHAR2(1000);   
BEGIN
   Trace___('Validate_Parameter_Attr___');
   Check_Required___(report_id_, attr_);
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      Validate_Parameter___(report_id_, name_, value_);      
   END LOOP;   
END Validate_Parameter_Attr___;


PROCEDURE Check_Required___ (
   report_id_ IN VARCHAR2,  
   attr_      IN VARCHAR2)
IS   
   CURSOR required_cols IS
      SELECT column_name, column_title       -- INVESTIGATE: Use column_query instead of column_title?
      FROM REPORT_COLUMN_DEFINITION
      WHERE report_id = report_id_
      AND column_query is not null
      AND SUBSTR(column_qflags, 1,1) IN ('M');
BEGIN
   -- TEMP DISIABLED
--   RETURN;
   Trace___('Check_Required___');   
   FOR col IN required_cols LOOP
      IF (Client_SYS.Get_Item_Value(col.column_name, attr_) IS NULL) THEN
         Error_SYS.Appl_General(lu_name_, 'REQUIRED_VALUE_MISSING: Report Parameter '':P1'' must be specified.', 
         Resolve_Label___(Report_Definition_API.Get_Lu_Name(report_id_), report_id_, col.column_name, col.column_title));  -- INVESTIGATE: Use column_query instead of column_title?
      END IF;
   END LOOP;  
   
END Check_Required___;


PROCEDURE Validate_Parameter___ (
   report_id_   IN VARCHAR2,
   column_name_ IN VARCHAR2,
   value_       IN VARCHAR2)
IS
   validate_method_ VARCHAR2(32000);
   
   CURSOR get_validate_method IS
      SELECT validate_method
      FROM REPORT_COLUMN_DEFINITION
      WHERE report_id = report_id_
      AND column_name = column_name_;
BEGIN
   OPEN get_validate_method;
   FETCH get_validate_method INTO validate_method_;
   CLOSE get_validate_method;
   IF (validate_method_ IS NOT NULL) THEN 
      Trace___('Found validate method for "' || column_name_ || '" => ', validate_method_); 
      Assert_SYS.Assert_Is_Procedure(validate_method_);
      @ApproveDynamicStatement(2019-03-13,rakuse)
      EXECUTE IMMEDIATE 'BEGIN '||validate_method_||'(:value_); END;' USING IN value_;
   END IF;      
EXCEPTION
   WHEN no_data_found THEN
      NULL;
END Validate_Parameter___;

FUNCTION Validate_Custom_Execution_Plan___ (
	execution_plan_ IN VARCHAR2) RETURN DATE
IS
BEGIN
   Batch_SYS.Check_Batch_Sched_Cust_Expr__(execution_plan_);   
   RETURN Batch_SYS.Update_Exec_Time__(execution_plan_);
END Validate_Custom_Execution_Plan___;

FUNCTION Enumerate_Layout___(
   report_id_ IN VARCHAR2 ) RETURN Objid_Arr
IS
   arr_layouts_ Objid_Arr := Objid_Arr();
   
   list_ VARCHAR2(32000);
   start_pos_ NUMBER := 1;
   end_pos_ NUMBER;
   full_layout_ VARCHAR2(2000);
   objid_ ROWID;
   layout_name_ VARCHAR2(2000);
   
   CURSOR objidget(rpt_id_ IN VARCHAR2,layout_name_ IN VARCHAR2) IS
      SELECT objid
      FROM report_layout_definition 
      WHERE report_id = rpt_id_
      AND   layout_name LIKE layout_name_||'%';
   
BEGIN   
   Report_Layout_Definition_API.Enumerate_Layout(list_, report_id_); --droped the result key for the moment 
   IF list_ IS NULL THEN
      RETURN arr_layouts_;
   END IF;
   
   WHILE INSTR(list_,client_sys.record_separator_,start_pos_,1) > 0 LOOP            
      arr_layouts_.extend;
      end_pos_ :=  INSTR(list_,client_sys.record_separator_,start_pos_,1);
      full_layout_  := SUBSTR(list_,start_pos_,end_pos_);
      layout_name_ := SUBSTR(full_layout_,1,INSTR(full_layout_ ,client_sys.field_separator_,1,1)-1);
      OPEN objidget(report_id_,layout_name_);
      LOOP
         FETCH objidget INTO objid_;
         EXIT WHEN objidget%NOTFOUND;              
         arr_layouts_(arr_layouts_.last) := objid_;
      END LOOP;
      CLOSE objidget;
      start_pos_ := end_pos_ +1;           
   END LOOP;   
   
   RETURN arr_layouts_;
END Enumerate_Layout___;

FUNCTION Enumerate_Report_Languages___(
   report_id_ IN VARCHAR2 ) RETURN Objid_Arr
IS
   language_code_arr_ Objid_Arr := Objid_Arr();
   list_ VARCHAR2(4000);
   lang_code_long_ VARCHAR2(12);
   lang_code_short_ VARCHAR2(3);
   start_pos_ NUMBER ;
   end_pos_ NUMBER;
   objid_ ROWID;
   
   CURSOR langcodeobjids(lng_ IN VARCHAR2) IS  
      SELECT objid
      FROM LANGUAGE_CODE
      WHERE lang_code = lng_;   
BEGIN
   start_pos_ :=1;
   language_sys.enumerate_report_languages_(list_, report_id_);
   IF list_ IS NOT NULL THEN
      WHILE( INSTR(list_,client_sys.record_separator_,start_pos_,1) > 0) LOOP
         language_code_arr_.extend;
         end_pos_ := INSTR(list_,client_sys.record_separator_,start_pos_,1);        
         lang_code_long_ := SUBSTR(list_,start_pos_,(end_pos_-start_pos_));         
         lang_code_short_:= SUBSTR(lang_code_long_,1,INSTR(lang_code_long_,client_sys.field_separator_,1,1)-1);         
         OPEN langcodeobjids(lang_code_short_);
         LOOP
            FETCH langcodeobjids INTO  objid_;            
            EXIT WHEN langcodeobjids%NOTFOUND ;
            language_code_arr_(language_code_arr_.last) := objid_;
         END LOOP;
         CLOSE langcodeobjids;
         start_pos_ := end_pos_ +1;
      END LOOP;
   END IF;
   RETURN language_code_arr_;
  
END Enumerate_Report_Languages___;

--------------------------- REGISTRATION METHODS ----------------------------

PROCEDURE Get_DynamicParam_Info_ (
   parent_ IN     VARCHAR2,
   attr_   IN OUT VARCHAR2 )
IS
BEGIN
   attr_ := Aurena_Report_Metadata_SYS.Get_Arg_Definitions__(parent_);
END Get_DynamicParam_Info_;

--FUNCTION Get_Result_Key_Params___ (
--	result_key_ IN NUMBER) RETURN VARCHAR2
--IS
--   text_ VARCHAR2(32000);
--   
--   CURSOR get_params IS
--      SELECT parameter_name, parameter_value
--      FROM ARCHIVE_PARAMETER
--      WHERE result_key = result_key_;
--BEGIN
--   Trace___('Get_Result_Key_Params___. result_key_', result_key_);
--   FOR param IN get_params LOOP
--      Append_Param_Value___(text_, param.parameter_name, param.parameter_value);
--   END LOOP;
--   RETURN text_;
--END Get_Result_Key_Params___;

--FUNCTION Get_Scheduled_Params___ (
--	scheduled_id_ IN NUMBER) RETURN VARCHAR2
--IS
--   text_       VARCHAR2(32000);
--   param_attr_ VARCHAR2(32000);
--         
--   ptr_   NUMBER := NULL;
--   name_  VARCHAR2(30);
--   value_ VARCHAR2(2000);
--   
--   CURSOR get_param_attr IS
--      SELECT value
--      FROM BATCH_SCHEDULE_PAR
--      WHERE schedule_id = scheduled_id_
--      AND NAME = 'PARAMETER_ATTR'--;
--BEGIN
--   Trace___('Get_Scheduled_Params___. scheduled_id_', scheduled_id_);
--   OPEN get_param_attr;
--   FETCH get_param_attr INTO param_attr_;
--   CLOSE get_param_attr;
--   
--   WHILE (Client_SYS.Get_Next_From_Attr(param_attr_, ptr_, name_, value_)) LOOP
--      Append_Param_Value___(text_, name_, value_);
--   END LOOP;   
--   RETURN text_;
--END Get_Scheduled_Params___;


PROCEDURE Append_Param_Value___ (
   text_ IN OUT VARCHAR2,
	name_ IN VARCHAR2,
   value_ IN VARCHAR2)
IS
BEGIN
   text_ := text_ || '\r\n\r\n' || name_ || ' = ';
   IF (value_ IS NOT NULL) THEN
      text_ := text_ || '**' || value_ || '**';      
   END IF;
END Append_Param_Value___;

FUNCTION Fix_Separator___ (
   list_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   IF (SUBSTR(list_, LENGTH(list_)) = client_sys.field_separator_) THEN
      RETURN list_;
   ELSE
      RETURN list_ || Client_SYS.field_separator_;
   END IF;      
END Fix_Separator___;
 
--------------------------------- TRACE METHODS ----------------------------------

PROCEDURE Trace___ (
   name_ IN VARCHAR2,
   text_ IN VARCHAR2)
IS
BEGIN
   Trace_SYS.Field(name_, REPLACE(text_, '^', '-'));
END Trace___;


PROCEDURE Trace___ (
   text_ IN VARCHAR2)
IS
BEGIN
   Trace_SYS.Message(text_);
END Trace___;

FUNCTION Order_Report___ (
   report_attr_ IN VARCHAR2,
   parameter_values_ IN VARCHAR2,
   distrib_list_ IN VARCHAR2) RETURN NUMBER
IS
   dist_list_ VARCHAR2(500);
   report_id_ VARCHAR2(2000);   
BEGIN
   report_id_ := Client_SYS.Get_Item_Value('REPORT_ID', report_attr_);
   IF (NVL(Security_SYS.Is_Projection_Available_(Aurena_Report_Metadata_SYS.Get_Projection_Name__(report_id_)), 'FALSE') != 'TRUE') THEN   
      Error_SYS.System_General('REP_NOT_ALLOWED: You are not allowed to execute the Report. Provided Report ID is ":P1"', report_id_);
   END IF;
   dist_list_ := Fnd_Session_API.Get_Fnd_User();
   IF distrib_list_ IS NOT NULL THEN
      dist_list_ := dist_list_ || client_sys.field_separator_|| distrib_list_;  
   END IF;   
   RETURN Report_Format_API.Create_New_Report__(report_attr_, parameter_values_, dist_list_);  
END Order_Report___;

