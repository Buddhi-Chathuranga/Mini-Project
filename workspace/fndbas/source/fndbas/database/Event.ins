-----------------------------------------------------------------------------
--
--  Event Registration
--
--  IFS/Design Template Version 2.2
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  030127  HAAR  Moved all registration of events to a separate file (ToDo#4205).
--  030217  ROOD  Added event registrations for the previous subcomponents (ToDo#4205).
--  030509  HAAR  Added commit in script (ToDo#4261).
--  050614  NiWi  Added event 'Concurrent User Warning' (Bug50657).
--  051004  BaMa  Fixed the problem with patch 51098 when using other language than English. (Bug#52876)
--  051215  HAAR  Added event for Security Checkpoint (F1PR414).
--  091106  JHMASE Added columns in HISTORY_LOG_MODIFIED (Bug #87003)
--                 and moved event from HistoryLogAttribute to HistoryLog.
--  100304  SUBSLK Modified event PDF_REPORT_CREATED
--  130701  HAARSE Remove Event CU_WARNING (not used anymore).
--  140525  CHAALK Ability to change the attachment file name when emailing a report through PDF_REPORT_CREATED event (LCS Merge Bug# 116342)
--  170227  CHAALK  Patch Merge Bug ID 134113 Report Stream Notifications through events
--  181115  JAPASE  PACDATA-159: Cleanup AQ Exception Queues.
--  181203  CHAALK  Add 5 more event parameters to the PDF_REPORT_CREATED event (BugID#145665)  
-----------------------------------------------------------------------------
SET SERVEROUTPUT ON

PROMPT Register event DATA_ARCHIVE_EXECUTED
BEGIN
   Event_SYS.Enable_Event('DataArchiveUtil', 'DATA_ARCHIVE_EXECUTED', 'Data Archive executed',
   'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'||
   'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'||
   'LOG_ID/NUMBER^ARCHIVE_ID/STRING^ARCHIVE_DATE/DATETIME'||
   '^STATUS/STRING^TEXT/STRING^'||
   'PROCESSED/NUMBER^START_DATE/DATETIME^STOP_DATE/DATETIME^'||
   'PARAMETERS/STRING^ORDER_ID/NUMBER^EXEC_ID/STRING^');
END;
/

PROMPT Register event MONITOR_ENTRY_WARNING
BEGIN
  Event_SYS.Enable_Event( 'FndMonitorEntry', 'MONITOR_ENTRY_WARNING',
                          'An executed monitor entry has created a warning',
       'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'
    || 'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^ENTRY_ID/STRING^'
    || 'VALUE/NUMBER^DESCRIPTION/STRING^CATEGORY/STRING^'
    || 'CATEGORY_DESCRIPTION/STRING^SQL_STATEMENT/STRING^LOWER_WARNING_LIMIT/NUMBER^'
    || 'UPPER_WARNING_LIMIT/NUMBER^HELP_TEXT/STRING^DRILL_DOWN_STMT/STRING^');
END;
/

PROMPT Register event HISTORY_LOG_MODIFIED
BEGIN
   Event_SYS.Enable_Event('HistoryLog', 'HISTORY_LOG_MODIFIED', 'History log modified',
   'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'||
   'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'||
   'LOG_ID/STRING^COLUMN_NAME/STRING^OLD_VALUE/STRING^NEW_VALUE/STRING^'||
   'MODULE/STRING^LU_NAME/STRING^TABLE_NAME/STRING^KEYS/STRING^'||
   'HISTORY_TYPE/STRING^');
END;
/
PROMPT Disable old event HISTORY_LOG_MODIFIED
BEGIN
   Event_SYS.Disable_Event('HistoryLogAttribute', 'HISTORY_LOG_MODIFIED');
END;
/

PROMPT Register event BACKGROUND_JOB_IS_PROCESSED
BEGIN
   Event_SYS.Enable_Event('Transaction', 'BACKGROUND_JOB_IS_PROCESSED',
                          'Background job processed by batch handler',
   'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^USER_MAIL_ADDRESS/STRING^'||
   'USER_MOBILE_PHONE/STRING^JOB_ID/NUMBER^DESCRIPTION/STRING^QUEUE/STRING^'||
   'PROCEDURE_NAME/STRING^ARGUMENTS/STRING^STATE/STRING^POSTED_DATETIME/DATETIME^'||
   'EXECUTED_DATETIME/DATETIME^EXECUTED_DATE/DATE^EXECUTED_TIME/TIME^ERROR_TEXT/STRING^'||
   'PROGRESS_INFO/STRING^PROCESS_ID/NUMBER^STATUS_LINES/STRING^' );
END;
/

PROMPT Register event BACKGROUND_JOB_IN_PROGRESS
BEGIN
   Event_SYS.Enable_Event('Transaction', 'BACKGROUND_JOB_IN_PROGRESS',
                          'Background job in progress and partly ready',
   'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^USER_MAIL_ADDRESS/STRING^'||
   'USER_MOBILE_PHONE/STRING^JOB_ID/NUMBER^DESCRIPTION/STRING^QUEUE/STRING^'||
   'PROCEDURE_NAME/STRING^ARGUMENTS/STRING^POSTED_DATETIME/DATETIME^'||
   'PROGRESS_DATETIME/DATETIME^PROGRESS_INFO/STRING^PROCESS_ID/NUMBER^STATUS_LINES/STRING^' );
END;
/

PROMPT Disable old event FNDLOG_STATE_CHANGED
BEGIN
   Event_SYS.Disable_Event('FndLog', 'FNDLOG_STATE_CHANGED');
END;
/

PROMPT Register event PDF_REPORT_CREATED
BEGIN
   Event_SYS.Enable_Event('PrintJob', 'PDF_REPORT_CREATED',
                          'Creation of a report as pdf-file is completed',
   'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^USER_MAIL_ADDRESS/STRING^'||
   'USER_MOBILE_PHONE/STRING^RESULT_KEY/NUMBER^PDF_FILE/STRING^REPORT_TITLE/STRING^REPORT_TITLE_TRANS/STRING^REPORT_ID/STRING^PRINT_JOB_ID/NUMBER^STATUS/STRING^PRINTER_ID/STRING^PDF_PARAMETER_1/STRING^' ||
   'PDF_PARAMETER_2/STRING^PDF_PARAMETER_3/STRING^PDF_PARAMETER_4/STRING^PDF_PARAMETER_5/STRING^' ||
   'PDF_PARAMETER_6/STRING^PDF_PARAMETER_7/STRING^PDF_PARAMETER_8/STRING^PDF_PARAMETER_9/STRING^PDF_PARAMETER_10/STRING^' ||
   'PDF_PARAMETER_11/STRING^PDF_PARAMETER_12/STRING^PDF_PARAMETER_13/STRING^PDF_PARAMETER_14/STRING^PDF_PARAMETER_15/STRING^' ||
   'PDF_FILE_SENT_TO/STRING^REPLY_TO_USER/STRING^MAIL_SUBJECT/STRING^MAIL_TEXT/STRING^LAYOUT_NAME/STRING^' ||
   'LANGUAGE_CODE/STRING^NOTES/STRING^REPORT_PARAMETERS/STRING^REPORT_VARIABLES/STRING^PDF_FILE_NAME/STRING^');
END;
/

PROMPT Register event PDF_REPORT_ERROR
BEGIN
   Event_SYS.Enable_Event('PrintQueue', 'PDF_REPORT_ERROR',
                          'Creation of a report as pdf-file is failed',
   'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^USER_MAIL_ADDRESS/STRING^'||
   'USER_MOBILE_PHONE/STRING^RESULT_KEY/NUMBER^REPORT_TITLE/STRING^REPORT_TITLE_TRANS/STRING^REPORT_ID/STRING^PRINT_JOB_ID/NUMBER^STATUS/STRING^PRINTER_ID/STRING^PDF_PARAMETER_1/STRING^' ||
   'PDF_PARAMETER_2/STRING^PDF_PARAMETER_3/STRING^PDF_PARAMETER_4/STRING^PDF_PARAMETER_5/STRING^' ||
   'PDF_PARAMETER_6/STRING^PDF_PARAMETER_7/STRING^PDF_PARAMETER_8/STRING^PDF_PARAMETER_9/STRING^PDF_PARAMETER_10/STRING^' ||
   'PDF_PARAMETER_11/STRING^PDF_PARAMETER_12/STRING^PDF_PARAMETER_13/STRING^PDF_PARAMETER_14/STRING^PDF_PARAMETER_15/STRING^' ||   
   'REPLY_TO_USER/STRING^MAIL_SUBJECT/STRING^MAIL_TEXT/STRING^LAYOUT_NAME/STRING^' ||
   'LANGUAGE_CODE/STRING^NOTES/STRING^REPORT_PARAMETERS/STRING^REPORT_VARIABLES/STRING^');
END;
/

PROMPT Register event REPLICATION_ERROR
BEGIN
  Event_SYS.Enable_Event( 'ReplicationLog', 'REPLICATION_ERROR',
                          'Replication error registered',
       'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'
    || 'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'
    || 'REPLICATION_ERROR_TYPE/STRING^REPLICATION_OBJECT/STRING^'
    || 'REPLICATION_OPERATION/STRING^APPLICATION_ERROR/STRING^'
    || 'LOGICAL_UNIT/STRING^TABLE_NAME/STRING^COLUMN_NAME/STRING^'
    || 'MESSAGE_ID/STRING^MESSAGE_LINE/STRING^ERROR/STRING^'   );
END;
/

PROMPT Register event SECURITY_CHECKPOINT_SUCCESS
BEGIN
   Event_SYS.Enable_Event('Security', 'SECURITY_CHECKPOINT_SUCCESS',
                          'Security Checkpoint success',
        'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'
     || 'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'
     || 'DIRECTORY_IDENTITY/STRING^GATE_IDENTITY/STRING^GATE_MESSAGE/STRING^');
END;
/

PROMPT Register event SECURITY_CHECKPOINT_FAILURE
BEGIN
   Event_SYS.Enable_Event('Security', 'SECURITY_CHECKPOINT_FAILURE',
                          'Security Checkpoint failure',
        'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'
     || 'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'
     || 'DIRECTORY_IDENTITY/STRING^GATE_IDENTITY/STRING^GATE_MESSAGE/STRING^');
END;
/

PROMPT Register event MESSAGE_QUEUE_STOPPED
BEGIN
   Event_SYS.Enable_Event('AppMessageProcessing', 'MESSAGE_QUEUE_STOPPED',
                          'Application message queue has been stopped',
        'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'
     || 'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'
     || 'QUEUE/STRING^');
END;
/

PROMPT Register event MISSING_APPLICATION_MESSAGE
BEGIN
   Event_SYS.Enable_Event('AppMessageProcessing', 'MISSING_APPLICATION_MESSAGE',
                          'Application message row is missing in database',
        'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'
     || 'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'
     || 'APPLICATION_MESSAGE_ID/NUMBER^');
END;
/

PROMPT Register event CLEANUP_AQ_EXCEPTION_QUEUES
BEGIN
   Event_SYS.Enable_Event('AppMessageProcessing', 'CLEANUP_AQ_EXCEPTION_QUEUES',
                          'Cleanup AQ Exception Queues',
        'EVENT_DATETIME/DATETIME^USER_IDENTITY/STRING^USER_DESCRIPTION/STRING^'
     || 'USER_MAIL_ADDRESS/STRING^USER_MOBILE_PHONE/STRING^'
     || 'DELETED_ASYNCHRONOUS_MESSAGES/NUMBER^'
     || 'DELETED_SYNCHRONOUS_MESSAGES_MAIN/NUMBER^'
     || 'DELETED_SYNCHRONOUS_MESSAGES_INT/NUMBER^'
     || 'DELETED_SYNCHRONOUS_RESP_MESSAGES/NUMBER^'
     || 'DELETED_ADMIN_MESSAGES_MAIN/NUMBER^'
     || 'DELETED_ADMIN_MESSAGES_INT/NUMBER^');
END;
/

PROMPT Register event EVENT_ACTION_BPA_CHANGE
BEGIN
   Event_SYS.Enable_Event('FndEventAction', 'EVENT_ACTION_BPA_CHANGE',
                          'Event Action Bpa has been changed',
        'USER_IDENTITY/STRING^'
     || 'EVENT_ID/STRING^'
     || 'ACTION_NUMBER/NUMBER^'
     || 'ROWVERSION/DATE^'
     || 'ROWKEY/STRING^'
     || 'FND_EVENT_ACTION_TYPE/STRING^');
END;
/

COMMIT
/

PROMPT Register event EVENT_ACTION_BPA_CHANGE Validation Action
DECLARE
  attr_       VARCHAR(4000);
  eact_       VARCHAR(4000);
  eacv_       VARCHAR(4000);
  eap_        VARCHAR(4000);
  
  info_       VARCHAR(4000);
  objid_      VARCHAR(500);
  objversion_ VARCHAR(500);
  
  count_      NUMBER(10);
BEGIN
  
   SELECT COUNT(*) INTO count_
   FROM FND_EVENT_ACTION
   WHERE EVENT_LU_NAME = 'FndEventAction'
     AND EVENT_ID = 'EVENT_ACTION_BPA_CHANGE'
     AND FND_EVENT_ACTION_TYPE_DB = 'BPA';
   
   IF count_ < 1 THEN 
  
      client_sys.clear_attr(attr_);

      client_sys.Add_To_Attr('EVENT_LU_NAME','FndEventAction', attr_);
      client_sys.Add_To_Attr('EVENT_ID','EVENT_ACTION_BPA_CHANGE', attr_);
      client_sys.Add_To_Attr('ACTION_ENABLE','TRUE', attr_);
      client_sys.Add_To_Attr('FND_EVENT_ACTION_TYPE_DB','BPA', attr_);  
      client_sys.Add_To_Attr('DESCRIPTION','Validates all new BPA actions', attr_);
      client_sys.Add_To_Attr('SUBSCRIBABLE','FALSE', attr_);
      client_sys.Add_To_Attr('SYSTEM_DEFINED','FALSE', attr_);
      
      eact_ := Message_SYS.Construct('EVENT_ACTION_COND_TYPE' );
      Message_SYS.Add_Attribute(eact_, 'ACTION_NUMBER', '' );
      Message_SYS.Add_Attribute(eact_, 'EVENT_ID', '' );
      Message_SYS.Add_Attribute(eact_, 'FND_EVENT_ACTION_TYPE', '' );
      Message_SYS.Add_Attribute(eact_, 'ROWKEY', '' );
      Message_SYS.Add_Attribute(eact_, 'ROWVERSION', '' );
      Message_SYS.Add_Attribute(eact_, 'USER_IDENTITY', '' );
      
      client_sys.Add_To_Attr('CONDITION_TYPE',eact_, attr_);
      
      eacv_ := Message_SYS.Construct('EVENT_ACTION_COND_VALUE' );
      Message_SYS.Add_Attribute(eacv_, 'ACTION_NUMBER', '' );
      Message_SYS.Add_Attribute(eacv_, 'EVENT_ID', '' );
      Message_SYS.Add_Attribute(eacv_, 'FND_EVENT_ACTION_TYPE', '' );
      Message_SYS.Add_Attribute(eacv_, 'ROWKEY', '' );
      Message_SYS.Add_Attribute(eacv_, 'ROWVERSION', '' );
      Message_SYS.Add_Attribute(eacv_, 'USER_IDENTITY', '' );
      
      client_sys.Add_To_Attr('CONDITION_VALUE',eacv_, attr_);

      fnd_event_action_api.New__(info_,
                                objid_, 
                                objversion_,
                                attr_,
                                'DO');
      
      eap_ := Message_SYS.Construct('FNDSER.EVENT_ACTION_PARAM' );
      Message_SYS.Add_Attribute(eap_, 'BPA_KEY', 'EventActionModValidation' );
      Message_SYS.Add_Attribute(eap_, 'BPA_TYPE', 'VALIDATION' );
      Message_SYS.Add_Attribute(eap_, 'BPA_TIMING', 'AFTER' );

      fnd_event_action_api.Write_Action_Parameters__(objversion_, objid_, eap_);
   END IF;
END;
/

COMMIT
/

PROMPT Register event EVENT_ENABLE_CHANGE
BEGIN
   Event_SYS.Enable_Event('FndEvent', 'EVENT_ENABLE_CHANGE',
                          'Event Bpa has been changed',
        'USER_IDENTITY/STRING^'
     || 'EVENT_ID/STRING^'
     || 'ACTION_NUMBER/NUMBER^'
     || 'ROWVERSION/DATE^'
     || 'ROWKEY/STRING^'
     || 'FND_EVENT_ACTION_TYPE/STRING^');
END;
/

COMMIT
/

PROMPT Register event EVENT_ENABLE_CHANGE Validation Action
DECLARE
  attr_       VARCHAR(4000);
  eact_       VARCHAR(4000);
  eacv_       VARCHAR(4000);
  eap_        VARCHAR(4000);
  
  info_       VARCHAR(4000);
  objid_      VARCHAR(500);
  objversion_ VARCHAR(500);
  
  count_      NUMBER(10);
BEGIN
  
   SELECT COUNT(*) INTO count_
   FROM FND_EVENT_ACTION
   WHERE EVENT_LU_NAME = 'FndEvent'
     AND EVENT_ID = 'EVENT_ENABLE_CHANGE'
     AND FND_EVENT_ACTION_TYPE_DB = 'BPA';
   
   IF count_ < 1 THEN 
  
      client_sys.clear_attr(attr_);

      client_sys.Add_To_Attr('EVENT_LU_NAME','FndEvent', attr_);
      client_sys.Add_To_Attr('EVENT_ID','EVENT_ENABLE_CHANGE', attr_);
      client_sys.Add_To_Attr('ACTION_ENABLE','TRUE', attr_);
      client_sys.Add_To_Attr('FND_EVENT_ACTION_TYPE_DB','BPA', attr_);
      client_sys.Add_To_Attr('DESCRIPTION','Validates all new BPA events', attr_);
      client_sys.Add_To_Attr('SUBSCRIBABLE','FALSE', attr_);
      client_sys.Add_To_Attr('SYSTEM_DEFINED','FALSE', attr_);
      
      eact_ := Message_SYS.Construct('EVENT_ACTION_COND_TYPE' );
      Message_SYS.Add_Attribute(eact_, 'ACTION_NUMBER', '' );
      Message_SYS.Add_Attribute(eact_, 'EVENT_ID', '' );
      Message_SYS.Add_Attribute(eact_, 'FND_EVENT_ACTION_TYPE', '' );
      Message_SYS.Add_Attribute(eact_, 'ROWKEY', '' );
      Message_SYS.Add_Attribute(eact_, 'ROWVERSION', '' );
      Message_SYS.Add_Attribute(eact_, 'USER_IDENTITY', '' );
      
      client_sys.Add_To_Attr('CONDITION_TYPE',eact_, attr_);      
            
      eacv_ := Message_SYS.Construct('EVENT_COND_VALUE' );
      Message_SYS.Add_Attribute(eacv_, 'ACTION_NUMBER', '' );
      Message_SYS.Add_Attribute(eacv_, 'EVENT_ID', '' );
      Message_SYS.Add_Attribute(eacv_, 'FND_EVENT_ACTION_TYPE', '' );
      Message_SYS.Add_Attribute(eacv_, 'ROWKEY', '' );
      Message_SYS.Add_Attribute(eacv_, 'ROWVERSION', '' );
      Message_SYS.Add_Attribute(eacv_, 'USER_IDENTITY', '' );
      
      client_sys.Add_To_Attr('CONDITION_VALUE',eacv_, attr_);

      fnd_event_action_api.New__(info_,
                                objid_, 
                                objversion_,
                                attr_,
                                'DO');
      
      eap_ := Message_SYS.Construct('FNDSER.EVENT_PARAM' );
      Message_SYS.Add_Attribute(eap_, 'BPA_KEY', 'EventModValidation' );
      Message_SYS.Add_Attribute(eap_, 'BPA_TYPE', 'VALIDATION' );
      Message_SYS.Add_Attribute(eap_, 'BPA_TIMING', 'AFTER' );

      fnd_event_action_api.Write_Action_Parameters__(objversion_, objid_, eap_);
   END IF;
END;
/

COMMIT
/

PROMPT Register event PROJECTION_ACTION_BPA_CHANGE
BEGIN
   Event_SYS.Enable_Event('BpmnProjection', 'PROJECTION_ACTION_BPA_CHANGE',
                          'Projection Action Bpa has been changed',
         'USER_IDENTITY/STRING^'
         || 'EVENT_ID/STRING^'
         || 'PROJECTION_NAME/STRING^'
     || 'ACTION_NUMBER/NUMBER^'
     || 'ROWVERSION/DATE^'
     || 'ROWKEY/STRING^'
     || 'FND_EVENT_ACTION_TYPE/STRING^');
END;
/

COMMIT
/

PROMPT Register event PROJECTION_ACTION_BPA_CHANGE Validation Action
DECLARE
  attr_       VARCHAR(4000);
  eact_       VARCHAR(4000);
  eacv_       VARCHAR(4000);
  eap_        VARCHAR(4000);
  
  info_       VARCHAR(4000);
  objid_      VARCHAR(500);
  objversion_ VARCHAR(500);
  
  count_      NUMBER(10);
BEGIN
  
   SELECT COUNT(*) INTO count_
   FROM FND_EVENT_ACTION
   WHERE EVENT_LU_NAME = 'BpmnProjection'
     AND EVENT_ID = 'PROJECTION_ACTION_BPA_CHANGE'
     AND FND_EVENT_ACTION_TYPE_DB = 'BPA';
   
   IF count_ < 1 THEN 
  
      client_sys.clear_attr(attr_);

      client_sys.Add_To_Attr('EVENT_LU_NAME','BpmnProjection', attr_);
--      client_sys.Add_To_Attr('PROJECTION_NAME','FALSE', attr_);
      client_sys.Add_To_Attr('EVENT_ID','PROJECTION_ACTION_BPA_CHANGE', attr_);
      client_sys.Add_To_Attr('ACTION_ENABLE','TRUE', attr_);
      client_sys.Add_To_Attr('FND_EVENT_ACTION_TYPE_DB','BPA', attr_);  
      client_sys.Add_To_Attr('DESCRIPTION','Validates all new BPA actions', attr_);
      client_sys.Add_To_Attr('SUBSCRIBABLE','FALSE', attr_);
      client_sys.Add_To_Attr('SYSTEM_DEFINED','FALSE', attr_);
      
      eact_ := Message_SYS.Construct('EVENT_ACTION_COND_TYPE' );
  
      
      Message_SYS.Add_Attribute(eact_, 'ACTION_NUMBER', '' );
      Message_SYS.Add_Attribute(eact_, 'EVENT_ID', '' );
      Message_SYS.Add_Attribute(eact_, 'FND_EVENT_ACTION_TYPE', '' );
      Message_SYS.Add_Attribute(eact_, 'ROWKEY', '' );
      Message_SYS.Add_Attribute(eact_, 'ROWVERSION', '' );
      Message_SYS.Add_Attribute(eact_, 'USER_IDENTITY', '' );
      Message_SYS.Add_Attribute(eact_, 'PROJECTION_NAME', '' );
      Message_SYS.Add_Attribute(eact_, 'ACTION', '' );
      Message_SYS.Add_Attribute(eact_, 'ENTITY_SET_NAME', '' );
      Message_SYS.Add_Attribute(eact_, 'CALL_NAME', '' );
      Message_SYS.Add_Attribute(eact_, 'IS_READ_ENABLED', '' );
      Message_SYS.Add_Attribute(eact_, 'IS_CREATE_ENABLED', '' );
      Message_SYS.Add_Attribute(eact_, 'IS_UPDATE_ENABLED', '' );
      Message_SYS.Add_Attribute(eact_, 'IS_DELETE_ENABLED', '' );
      Message_SYS.Add_Attribute(eact_, 'WORKFLOW_EXECUTION', '' );
      Message_SYS.Add_Attribute(eact_, 'WORKFLOW_TIMING', '' );
      Message_SYS.Add_Attribute(eact_, 'IS_ENABLED', '' );

      client_sys.Add_To_Attr('CONDITION_TYPE',eact_, attr_);
      
      eacv_ := Message_SYS.Construct('EVENT_ACTION_COND_VALUE' );
      
      Message_SYS.Add_Attribute(eacv_, 'ACTION_NUMBER', '' );
      Message_SYS.Add_Attribute(eacv_, 'EVENT_ID', '' );
      Message_SYS.Add_Attribute(eacv_, 'FND_EVENT_ACTION_TYPE', '' );
      Message_SYS.Add_Attribute(eacv_, 'ROWKEY', '' );
      Message_SYS.Add_Attribute(eacv_, 'ROWVERSION', '' );
      Message_SYS.Add_Attribute(eacv_, 'USER_IDENTITY', '' );
      Message_SYS.Add_Attribute(eacv_, 'PROJECTION_NAME', '' );
      Message_SYS.Add_Attribute(eacv_, 'ACTION', '' );
      Message_SYS.Add_Attribute(eacv_, 'ENTITY_SET_NAME', '' );
      Message_SYS.Add_Attribute(eacv_, 'CALL_NAME', '' );
      Message_SYS.Add_Attribute(eacv_, 'IS_READ_ENABLED', '' );
      Message_SYS.Add_Attribute(eacv_, 'IS_CREATE_ENABLED', '' );
      Message_SYS.Add_Attribute(eacv_, 'IS_UPDATE_ENABLED', '' );
      Message_SYS.Add_Attribute(eacv_, 'IS_DELETE_ENABLED', '' );
      Message_SYS.Add_Attribute(eacv_, 'WORKFLOW_EXECUTION', '' );
      Message_SYS.Add_Attribute(eacv_, 'WORKFLOW_TIMING', '' );
      Message_SYS.Add_Attribute(eacv_, 'IS_ENABLED', '' );
      
      client_sys.Add_To_Attr('CONDITION_VALUE',eacv_, attr_);

      fnd_event_action_api.New__(info_,
                                objid_, 
                                objversion_,
                                attr_,
                                'DO');
      
      eap_ := Message_SYS.Construct('FNDSER.EVENT_ACTION_PARAM' );
      Message_SYS.Add_Attribute(eap_, 'BPA_KEY', 'ProjectionActionModValidation' );
      Message_SYS.Add_Attribute(eap_, 'BPA_TYPE', 'VALIDATION' );
      Message_SYS.Add_Attribute(eap_, 'BPA_TIMING', 'AFTER' );

      fnd_event_action_api.Write_Action_Parameters__(objversion_, objid_, eap_);
   END IF;
END;
/

COMMIT
/