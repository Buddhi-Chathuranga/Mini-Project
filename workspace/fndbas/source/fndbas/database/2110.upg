---------------------------------------------------------------------------------------------
--  Module : FNDBAS
--
--  Purpose: Upgrade database objects for IFS Base Functionality
--           from version 7.0.0 to 21.1.0
--
--  File   : 2110.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  210201   subblk  BR20R1-710, Added new columns to IAL_OBJECT_TAB
--  201202   RatSLK  PACZSECA-2256, Altered WEB_USER column AS mandatory IN FND_USER_TAB.
--  201124   AwWelk  SC2021R1-345, Updated DEMANDSERVER user in DEMAND component as a service user in FND_USER_TAB.
--  191203   CHDOLK  Created.
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
PROMPT START upgrading WITH 2110.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_0');

PROMPT Executing prerequisite ins scripts

DECLARE
   table_name_    VARCHAR2(30) := 'CONFIG_PARAMETER_DEF_TAB';
   skipped_       NUMBER := 0;
   created_       NUMBER := 0;
   
   PROCEDURE Ins (
      area_name_        IN VARCHAR2,
      group_name_       IN VARCHAR2,
      instance_type_    IN VARCHAR2,
      parameter_name_   IN VARCHAR2,
      default_value_    IN VARCHAR2,
      help_text_        IN VARCHAR2,      
      ordinal_          IN VARCHAR2,      
      parameter_type_   IN VARCHAR2,      
      value_list_       IN VARCHAR2,      
      write_protected_  IN VARCHAR2      
      )
   IS
      row_                  config_parameter_def_tab%ROWTYPE;
      current_rowid_        VARCHAR2(100);
      current_rowversion_   VARCHAR2(2000);
      current_rowkey_       VARCHAR2(2000);
   BEGIN
      row_.area_name         := area_name_;
      row_.group_name        := group_name_;
      row_.instance_type     := instance_type_;
      row_.parameter_name    := parameter_name_;
      row_.default_value     := default_value_;
      row_.help_text         := help_text_;
      row_.ordinal           := ordinal_;
      row_.parameter_type    := parameter_type_;
      row_.value_list        := value_list_;
      row_.write_protected   := write_protected_;
      row_.rowversion        := 1;
      
      INSERT INTO config_parameter_def_tab VALUES row_;
      created_ := created_ + 1;
   EXCEPTION
      WHEN dup_val_on_index THEN
         skipped_ := skipped_ + 1;
   END Ins;
   
BEGIN
   Dbms_Output.Put_Line('Inserting records to ' || table_name_ || ' table.');
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'ENABLED'               , default_value_ => 'false'                                  , help_text_ => 'Click to enable this reader'                                                                                                                                                                                        , ordinal_ => '1'   , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'EXECUTION_MODE'        , default_value_ => 'inparallel'                             , help_text_ => 'InOrder - execute sequentially in strict order of arrival, block on failure' || chr(10) || 'InSequence - execute sequentially, do not block on failure' || chr(10) || 'InParallel - execute parallely'              , ordinal_ => '2'   , parameter_type_ => 'TypeEnum'        , value_list_ => 'InOrder InSequence InParallel'                      , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'MESSAGE_SELECTOR'      , default_value_ => '*'                                      , help_text_ => 'Expression to filter messages. Use wildcards "*" and "?". Prefix with "regexp:" to use java regexp syntax.'                                                                                                         , ordinal_ => '3'   , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'MAX_RETRIES'           , default_value_ => '5'                                      , help_text_ => 'Specifies the max no of attempts to read/delete the request message from input location'                                                                                                                            , ordinal_ => '4'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'CREATE_RESPONSE'       , default_value_ => 'true'                                   , help_text_ => 'Click to generate response message'                                                                                                                                                                                 , ordinal_ => '5'   , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'LOG_LEVEL'             , default_value_ => 'warning'                                , help_text_ => 'Log level for Integration logging messages tagged with this reader name'                                                                                                                                            , ordinal_ => '6'   , parameter_type_ => 'TypeEnum'        , value_list_ => 'ERROR WARNING INFO TRACE DEBUG'                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'DEFAULT_ENCODING'      , default_value_ => 'UTF-8'                                  , help_text_ => 'Specify default encoding'                                                                                                                                                                                           , ordinal_ => '7'   , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => '*'                 , parameter_name_ => 'WORK_TIMEOUT'          , default_value_ => ''                                       , help_text_ => 'Connector reader work timeout in seconds'                                                                                                                                                                           , ordinal_ => '8'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'File'              , parameter_name_ => 'IN_DIRECTORY'          , default_value_ => '$FNDEXT_HOME/../filerep1/$INSTANCE/in'  , help_text_ => 'The root directory for this FileReader to read input files from.'                                                                                                                                                   , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'File'              , parameter_name_ => 'ARCHIVE_DIRECTORY'     , default_value_ => ''                                       , help_text_ => 'Directory to move to after processing. If empty, files are deleted.'                                                                                                                                                , ordinal_ => '102' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'File'              , parameter_name_ => 'IGNORE_IF_NOT_FOUND'   , default_value_ => 'true'                                   , help_text_ => 'Ignore files that are no longer exist in the IN directory.'                                                                                                                                                         , ordinal_ => '103' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'HOST'                  , default_value_ => ''                                       , help_text_ => 'The name of the host which runs the FTP service.'                                                                                                                                                                   , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'PORT'                  , default_value_ => '0'                                      , help_text_ => 'Port number the FTP service use. Default port is 21.'                                                                                                                                                               , ordinal_ => '102' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'USER'                  , default_value_ => ''                                       , help_text_ => 'Account name used for login on to the ftp server.'                                                                                                                                                                  , ordinal_ => '103' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'PASSWORD'              , default_value_ => ''                                       , help_text_ => 'The password of the user account.'                                                                                                                                                                                  , ordinal_ => '104' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'SECURITY_PROTOCOL'     , default_value_ => 'ssl'                                    , help_text_ => 'Choose protocol you want to use for FTPS or <none> for plain FTP'                                                                                                                                                   , ordinal_ => '105' , parameter_type_ => 'TypeEnum'        , value_list_ => '<none> SSL TLS'                                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'CONNECT_MODE'          , default_value_ => 'passive'                                , help_text_ => 'Specifies whether connection should be made in ACTIVE/PASSIVE mode.'                                                                                                                                                , ordinal_ => '106' , parameter_type_ => 'TypeEnum'        , value_list_ => 'PASSIVE ACTIVE'                                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'USE_EPS_WITH_IPV4'     , default_value_ => 'false'                                  , help_text_ => 'Click if you want to use EPSV with IPv4'                                                                                                                                                                            , ordinal_ => '107' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'IN_DIRECTORY'          , default_value_ => ''                                       , help_text_ => 'The root directory for this FTP_Reader to read input files from.'                                                                                                                                                   , ordinal_ => '108' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'ARCHIVE_DIRECTORY'     , default_value_ => ''                                       , help_text_ => 'Directory to move to after processing. If empty, files are deleted.'                                                                                                                                                , ordinal_ => '109' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Ftp'               , parameter_name_ => 'IGNORE_IF_NOT_FOUND'   , default_value_ => 'true'                                   , help_text_ => 'Ignore files that are no longer exist in the IN directory.'                                                                                                                                                         , ordinal_ => '110' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'JMS'               , parameter_name_ => 'IN_QUEUE'              , default_value_ => 'IfsConnectInQueue'                      , help_text_ => 'Queue or topic to read the incoming messages from'                                                                                                                                                                  , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'JMS'               , parameter_name_ => 'CONNECTION_FACTORY'    , default_value_ => 'IfsConnectConnectionFactory'            , help_text_ => 'Connection factory JNDI name'                                                                                                                                                                                       , ordinal_ => '102' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'HOST'                  , default_value_ => ''                                       , help_text_ => 'Contains the DNS entry to the POP3 host. It should be on the format subdomain.domain, for example somewhere.com'                                                                                                    , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'PORT'                  , default_value_ => '993'                                    , help_text_ => 'Contains the port number the POP3 service use. It''s common that the POP3 service uses port number 110.'                                                                                                            , ordinal_ => '102' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'USER'                  , default_value_ => ''                                       , help_text_ => 'Contains the username to the e-mail account that the application should use.'                                                                                                                                       , ordinal_ => '103' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'PASSWORD'              , default_value_ => ''                                       , help_text_ => 'Contains the password to the e-mail account that the application should use.'                                                                                                                                       , ordinal_ => '104' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'MAIL_PROTOCOL'         , default_value_ => 'imap'                                   , help_text_ => 'Choose protocol you want to use'                                                                                                                                                                                    , ordinal_ => '105' , parameter_type_ => 'TypeEnum'        , value_list_ => 'IMAP POP3'                                          , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'SECURITY_PROTOCOL'     , default_value_ => 'tls'                                    , help_text_ => 'Choose security protocol you want to use'                                                                                                                                                                           , ordinal_ => '106' , parameter_type_ => 'TypeEnum'        , value_list_ => '<none> SSL TLS'                                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'PARSE_BODY'            , default_value_ => 'false'                                  , help_text_ => 'True if the mail body has data that should be received  '                                                                                                                                                           , ordinal_ => '107' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Mail'              , parameter_name_ => 'TIMEOUT'               , default_value_ => '60'                                     , help_text_ => 'Contains the timeout value for the communication socket to the POP3 server. It should be a few seconds and the value is given in seconds.'                                                                          , ordinal_ => '108' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'HOST'                  , default_value_ => ''                                       , help_text_ => 'The name of the host which runs the SFTP service.'                                                                                                                                                                  , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PORT'                  , default_value_ => '0'                                      , help_text_ => 'Port number the SFTP service use. Default port is 22.'                                                                                                                                                              , ordinal_ => '102' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'IN_DIRECTORY'          , default_value_ => ''                                       , help_text_ => 'The root directory for this FTP_Reader to read input files from.'                                                                                                                                                   , ordinal_ => '103' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'ARCHIVE_DIRECTORY'     , default_value_ => ''                                       , help_text_ => 'Directory to move to after processing. If empty, files are deleted.'                                                                                                                                                , ordinal_ => '104' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'USERAUTH_METHOD'       , default_value_ => 'passwordauthentication'                 , help_text_ => 'Two types Password authentication and Identity file authentication.'                                                                                                                                                , ordinal_ => '105' , parameter_type_ => 'TypeEnum'        , value_list_ => 'PasswordAuthentication IdentityFileAuthentication'  , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'KNOWNHOSTS_FILE'       , default_value_ => ''                                       , help_text_ => 'File name containing known (authorized) server keys.'                                                                                                                                                               , ordinal_ => '108' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'USER'                  , default_value_ => ''                                       , help_text_ => 'User account name used for login on to the SFTP server.'                                                                                                                                                            , ordinal_ => '109' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PASSWORD'              , default_value_ => ''                                       , help_text_ => 'The password of the user account.'                                                                                                                                                                                  , ordinal_ => '111' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PRVKEY_FILE'           , default_value_ => ''                                       , help_text_ => 'Identity file for public key based authentication.'                                                                                                                                                                 , ordinal_ => '112' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PASS_PHRASE'           , default_value_ => ''                                       , help_text_ => 'The passphrase which unlocks the encrypted identity file.'                                                                                                                                                          , ordinal_ => '113' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorReaders' , instance_type_ => 'Sftp'              , parameter_name_ => 'IGNORE_IF_NOT_FOUND'   , default_value_ => 'true'                                   , help_text_ => 'Ignore files that are no longer exist in the IN directory.'                                                                                                                                                         , ordinal_ => '114' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => '*'                 , parameter_name_ => 'MAX_RETRIES'           , default_value_ => '10'                                     , help_text_ => 'Max number of send retries'                                                                                                                                                                                         , ordinal_ => '1'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => '*'                 , parameter_name_ => 'RETRY_INTERVAL'        , default_value_ => '10'                                     , help_text_ => 'Time in seconds between every send try'                                                                                                                                                                             , ordinal_ => '2'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => '*'                 , parameter_name_ => 'DEFAULT_INSTANCE'      , default_value_ => 'false'                                  , help_text_ => 'If there are several sender instances of the same type and instance name is not explicitly given in the address, the one marked here will be used'                                                                  , ordinal_ => '3'   , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => '*'                 , parameter_name_ => 'WORK_TIMEOUT'          , default_value_ => ''                                       , help_text_ => 'Connector sender work timeout in seconds'                                                                                                                                                                           , ordinal_ => '4'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'File'              , parameter_name_ => 'WRITE_MODE'            , default_value_ => 'create_new'                             , help_text_ => 'Overwrite existing file or create new one by adding GUID, if file already exists'                                                                                                                                   , ordinal_ => '101' , parameter_type_ => 'TypeEnum'        , value_list_ => 'OVERWRITE CREATE_NEW'                               , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'File'              , parameter_name_ => 'OUT_DIRECTORY'         , default_value_ => '$FNDEXT_HOME/../filerep1/$INSTANCE/out' , help_text_ => 'The root directory for this FileSender'                                                                                                                                                                             , ordinal_ => '102' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'File'              , parameter_name_ => 'WRITE_TO_DESTINATION'  , default_value_ => 'false'                                  , help_text_ => 'Write directly to destination (not to tmp folder)'                                                                                                                                                                  , ordinal_ => '104' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'File'              , parameter_name_ => 'CREATE_LOCK_FILE'      , default_value_ => 'false'                                  , help_text_ => 'Create lock file (<file name>.LOCK'                                                                                                                                                                                 , ordinal_ => '105' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'File'              , parameter_name_ => 'TEMP_DIRECTORY'        , default_value_ => ''                                       , help_text_ => 'The directory for this sender to write temporary files to.'                                                                                                                                                         , ordinal_ => '106' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'HOST'                  , default_value_ => ''                                       , help_text_ => 'The name of the host which runs the FTP service.'                                                                                                                                                                   , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'PORT'                  , default_value_ => '0'                                      , help_text_ => 'The port number the FTP service use. Default port is 21.'                                                                                                                                                           , ordinal_ => '102' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'USER'                  , default_value_ => ''                                       , help_text_ => 'The account name used for login on to the ftp server.'                                                                                                                                                              , ordinal_ => '103' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'PASSWORD'              , default_value_ => ''                                       , help_text_ => 'The password of the user account.'                                                                                                                                                                                  , ordinal_ => '104' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'SECURITY_PROTOCOL'     , default_value_ => 'tls'                                    , help_text_ => 'Choose protocol you want to use for FTPS or <none> for plain FTP'                                                                                                                                                   , ordinal_ => '105' , parameter_type_ => 'TypeEnum'        , value_list_ => '<none> SSL TLS'                                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'CONNECT_MODE'          , default_value_ => 'passive'                                , help_text_ => 'Specifies whether connection should be made in ACTIVE/PASSIVE mode.'                                                                                                                                                , ordinal_ => '106' , parameter_type_ => 'TypeEnum'        , value_list_ => 'PASSIVE ACTIVE'                                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'USE_EPS_WITH_IPV4'     , default_value_ => 'false'                                  , help_text_ => 'Click if you want to use EPSV with IPv4'                                                                                                                                                                            , ordinal_ => '107' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Ftp'               , parameter_name_ => 'TEMP_DIRECTORY'        , default_value_ => ''                                       , help_text_ => 'The directory for this sender to write temporary files to.'                                                                                                                                                         , ordinal_ => '109' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Http'              , parameter_name_ => 'ACCEPTED_CODES'        , default_value_ => ''                                       , help_text_ => 'List of HTTP Response Codes that should be accepted by this Sender'                                                                                                                                                 , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Http'              , parameter_name_ => 'DEFAULT_RESP_ENCODING' , default_value_ => 'UTF-8'                                  , help_text_ => 'Specify default encoding for response'                                                                                                                                                                              , ordinal_ => '102' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Http'              , parameter_name_ => 'TRACE_PATH'            , default_value_ => ''                                       , help_text_ => 'The directory to save the trace files'                                                                                                                                                                              , ordinal_ => '103' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'JMS'               , parameter_name_ => 'CONNECTION_FACTORY'    , default_value_ => 'IfsConnectConnectionFactory'            , help_text_ => 'Connection factory JNDI name'                                                                                                                                                                                       , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'JMS'               , parameter_name_ => 'SEND_TEXT_MESSAGE'     , default_value_ => 'false'                                  , help_text_ => 'Force to send Text Message. By default JMS Sender sends Bytes Message'                                                                                                                                              , ordinal_ => '102' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'HOST'                  , default_value_ => ''                                       , help_text_ => 'Contains the DNS entry to the SMTP host. It should be on the format subdomain.domain, for example somewhere.com'                                                                                                    , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'PORT'                  , default_value_ => '465'                                    , help_text_ => 'Contains the port number the SMTP service use. It''s common that the SMTP service uses port number 25'                                                                                                              , ordinal_ => '102' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'TIMEOUT'               , default_value_ => '60'                                     , help_text_ => 'Contains the timeout value for the communication socket to the SMTP server. It should be a few seconds and the value is given in seconds.'                                                                          , ordinal_ => '103' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'PERFORM_AUTH'          , default_value_ => 'true'                                   , help_text_ => 'Enable/disable amtp authentication'                                                                                                                                                                                 , ordinal_ => '104' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'USER'                  , default_value_ => ''                                       , help_text_ => 'User name to the e-mail account that this mail sender should use for authentication'                                                                                                                                , ordinal_ => '105' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'PASSWORD'              , default_value_ => ''                                       , help_text_ => 'Password for the given user account'                                                                                                                                                                                , ordinal_ => '106' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'DEFAULT_MAIL_SENDER'   , default_value_ => ''                                       , help_text_ => 'If the email address of the sender is not specified, From address will be the Default Mail Address'                                                                                                                 , ordinal_ => '107' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'OVERRIDE_MAIL_SENDER'  , default_value_ => 'false'                                  , help_text_ => 'If checked the Default Mail Sender will be always used as From address even if sender is already specified'                                                                                                         , ordinal_ => '108' , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'CONTENT_TYPE'          , default_value_ => 'text/plain'                             , help_text_ => 'Content Type of the email message to be sent.'                                                                                                                                                                      , ordinal_ => '109' , parameter_type_ => 'TypeEnum'        , value_list_ => 'text/plain text/html'                               , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Mail'              , parameter_name_ => 'SECURITY_PROTOCOL'     , default_value_ => 'tls'                                    , help_text_ => 'Choose security protocol you want to use'                                                                                                                                                                           , ordinal_ => '110' , parameter_type_ => 'TypeEnum'        , value_list_ => '<none> SSL TLS SMTP+STARTTLS'                       , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'HOST'                  , default_value_ => ''                                       , help_text_ => 'The name of the host which runs the FTP service.'                                                                                                                                                                   , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PORT'                  , default_value_ => '0'                                      , help_text_ => 'The port number the SFTP service use. Default port is 22.'                                                                                                                                                          , ordinal_ => '102' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'TEMP_DIRECTORY'        , default_value_ => ''                                       , help_text_ => 'The directory for this sender to write temporary files to.'                                                                                                                                                         , ordinal_ => '103' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'KNOWNHOSTS_FILE'       , default_value_ => ''                                       , help_text_ => 'File name containing known (authorized) public server keys.'                                                                                                                                                        , ordinal_ => '104' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'USER'                  , default_value_ => ''                                       , help_text_ => 'User account name used for login on to the SFTP server.'                                                                                                                                                            , ordinal_ => '105' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'USERAUTH_METHOD'       , default_value_ => 'passwordauthentication'                 , help_text_ => 'Two types Password authentication and Identity file authentication.'                                                                                                                                                , ordinal_ => '106' , parameter_type_ => 'TypeEnum'        , value_list_ => 'PasswordAuthentication IdentityFileAuthentication'  , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PASSWORD'              , default_value_ => ''                                       , help_text_ => 'The password of the user account.'                                                                                                                                                                                  , ordinal_ => '107' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PRVKEY_FILE'           , default_value_ => ''                                       , help_text_ => 'Identity file for public key based authentication.'                                                                                                                                                                 , ordinal_ => '108' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'Sftp'              , parameter_name_ => 'PASS_PHRASE'           , default_value_ => ''                                       , help_text_ => 'The passphrase which unlocks the encrypted identity file.'                                                                                                                                                          , ordinal_ => '109' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'REST'              , parameter_name_ => 'ACCEPTED_CODES'        , default_value_ => ''                                       , help_text_ => 'List of HTTP Response Codes that should be accepted by this Sender', ordinal_ => '101', parameter_type_ => 'TypeText' , value_list_ => '', write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'REST'              , parameter_name_ => 'DEFAULT_RESP_ENCODING' , default_value_ => 'UTF-8'                                  , help_text_ => 'Specify default encoding for response' , ordinal_ => '102' , parameter_type_ => 'TypeText' , value_list_ => '', write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'ConnectorSenders' , instance_type_ => 'REST'              , parameter_name_ => 'TRACE_PATH'            , default_value_ => ''                                       , help_text_ => 'The directory to save the trace files', ordinal_ => '103' , parameter_type_ => 'TypeText', value_list_ => '', write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Envelopes'        , instance_type_ => 'Envelope'          , parameter_name_ => 'ENVELOPE_FILE'         , default_value_ => ''                                       , help_text_ => 'XML Envelope definition file. Defines the look and the properties for a XML envelope.'                                                                                                                              , ordinal_ => '0'   , parameter_type_ => 'TypeBinary'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Envelopes'        , instance_type_ => 'Envelope'          , parameter_name_ => 'DESCRIPTION'           , default_value_ => ''                                       , help_text_ => 'A detailed description for this envelope.'                                                                                                                                                                          , ordinal_ => '1'   , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Envelopes'        , instance_type_ => 'Envelope'          , parameter_name_ => 'ROUTE_PARAMETERS'      , default_value_ => ''                                       , help_text_ => 'Specify a list of parameters as comma separated values which could be used when adding content based conditions to routing rules.'                                                                                  , ordinal_ => '2'   , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'MessageQueues'    , instance_type_ => 'MessageQueue'      , parameter_name_ => 'EXECUTION_MODE'        , default_value_ => 'inparallel'                             , help_text_ => 'InOrder - execute sequentially in strict order of arrival, block queue on failure' || chr(10) || 'InSequence - execute sequentially, do not block queue on failure' || chr(10) || 'InParallel - execute parallelly' , ordinal_ => '3'   , parameter_type_ => 'TypeEnum'        , value_list_ => 'InOrder InSequence InParallel'                      , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'MessageQueues'    , instance_type_ => 'MessageQueue'      , parameter_name_ => 'STOP_QUEUE'            , default_value_ => 'false'                                  , help_text_ => 'Tick in if you want to stop the queue temporarily'                                                                                                                                                                  , ordinal_ => '4'   , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'MessageQueues'    , instance_type_ => 'MessageQueue'      , parameter_name_ => 'LOG_LEVEL'             , default_value_ => 'warning'                                , help_text_ => 'Log level for Batch Processor logging messages tagged with this queue name'                                                                                                                                         , ordinal_ => '5'   , parameter_type_ => 'TypeEnum'        , value_list_ => 'ERROR WARNING INFO TRACE DEBUG'                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'MessageQueues'    , instance_type_ => 'MessageQueue'      , parameter_name_ => 'PRIORITY'              , default_value_ => ''                                       , help_text_ => 'Message queue priority. 0-4: gradations of normal priority, 5-9: gradations of expedited priority.'                                                                                                                 , ordinal_ => '6'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'MessageQueues'    , instance_type_ => 'MessageQueue'      , parameter_name_ => 'THREAD_COUNT'          , default_value_ => ''                                       , help_text_ => 'Number of parallel threads for InSequence queue'                                                                                                                                                                    , ordinal_ => '7'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Routing'          , instance_type_ => 'SimplifiedRouting' , parameter_name_ => 'ATTRIBUTE'             , default_value_ => 'none'                                   , help_text_ => 'Application Message attribute name for Simplified Routing'                                                                                                                                                          , ordinal_ => '1'   , parameter_type_ => 'TypeEnum'        , value_list_ => 'none MESSAGE_FUNCTION MESSAGE_TYPE RECEIVER SENDER' , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'USE_CACHE'             , default_value_ => 'false'                                  , help_text_ => 'Flag that enable the cache functionality in the connect framework (Routing cache and Transformer cache).'                                                                                                           , ordinal_ => '1'   , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'CBR_ON_ERROR'          , default_value_ => 'false'                                  , help_text_ => 'Content Based Routing on Error message at application error'                                                                                                                                                        , ordinal_ => '2'   , parameter_type_ => 'TypeBoolean'     , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'CBR_ON_ERROR_MAX_SIZE' , default_value_ => '10'                                     , help_text_ => 'Defines the max size of original message to attach to Error message. If actual message size is greater that here set size message will not be included (Kbyte)'                                                     , ordinal_ => '3'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'DEFAULT_WORK_TIMEOUT'  , default_value_ => '600'                                    , help_text_ => 'Default Connector sender, reader and BizAPI work timeout in seconds'                                                                                                                                                , ordinal_ => '4'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'BIZAPI_WORK_TIMEOUTS'  , default_value_ => ''                                       , help_text_ => 'BizApi or PL/SQL method work timeouts in seconds'                                                                                                                                                                   , ordinal_ => '5'   , parameter_type_ => 'TypeGrid'        , value_list_ => 'BizAPI or PL/SQL method,ALL_BIZAPIS;Timeout (in sec)',write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'BIZAPI_MAX_RETRIES'    , default_value_ => '10'                                     , help_text_ => 'Max number of send retries for BizAPI''s and PL/SQL methods'                                                                                                                                                        , ordinal_ => '6'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'BIZAPI_RETRY_INTERVAL' , default_value_ => '10'                                     , help_text_ => 'Time in seconds between every send try for BizAPI''s and PL/SQL methods'                                                                                                                                            , ordinal_ => '7'   , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Servers'          , instance_type_ => 'J2EEServer'        , parameter_name_ => 'PROPERTIES'            , default_value_ => ''                                       , help_text_ => 'Connect related ifs properties'                                                                                                                                                                                     , ordinal_ => '8'   , parameter_type_ => 'TypeGrid'        , value_list_ => 'Property name;Value'                                , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => '*'                 , parameter_name_ => 'QUEUE'                 , default_value_ => 'BATCH2'                                 , help_text_ => 'Message queue name'                                                                                                                                                                                                 , ordinal_ => '3'   , parameter_type_ => 'TypeDynamicEnum' , value_list_ => 'QUEUES'                                             , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => '*'                 , parameter_name_ => 'EXECUTE_AS'            , default_value_ => 'system'                                 , help_text_ => 'The task should be executed as either SYSTEM or INITIATOR. Default value is SYSTEM.'                                                                                                                                , ordinal_ => '4'   , parameter_type_ => 'TypeEnum'        , value_list_ => 'System Initiator'                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => '*'                 , parameter_name_ => 'LOCALE'                , default_value_ => 'en-US'                                  , help_text_ => 'Locale for the task execution'                                                                                                                                                                                      , ordinal_ => '5'   , parameter_type_ => 'TypeDynamicEnum' , value_list_ => 'LOCALES'                                            , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'Connectivity'      , parameter_name_ => 'MEDIA_CODE'            , default_value_ => 'INET_TRANS'                             , help_text_ => 'Code used to match the intended area of the connectivity messages. Only INET_TRANS is supported.'                                                                                                                   , ordinal_ => '101' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => '1' );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'Connectivity'      , parameter_name_ => 'RECEIVER'              , default_value_ => ''                                       , help_text_ => 'Recipient of the connectivity message'                                                                                                                                                                              , ordinal_ => '102' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'Connectivity'      , parameter_name_ => 'MAX_MESSAGES'          , default_value_ => ''                                       , help_text_ => 'Maximum number of connectivity messages processed in a single call'                                                                                                                                                 , ordinal_ => '103' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'Connectivity'      , parameter_name_ => 'MAX_MESSAGE_LINES'     , default_value_ => ''                                       , help_text_ => 'Maximum number of connectivity messages lines fetched in a query'                                                                                                                                                   , ordinal_ => '104' , parameter_type_ => 'TypeNumber'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'Connectivity'      , parameter_name_ => 'CLASSES'               , default_value_ => ''                                       , help_text_ => 'Class Id and the corresponding BizApi name'                                                                                                                                                                         , ordinal_ => '105' , parameter_type_ => 'TypeGrid'        , value_list_ => 'Class ID;BizAPI,OUTBOUND_BIZAPIS'                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'PRINT_LOCALE'          , default_value_ => 'en-US'                                  , help_text_ => 'Locale used by the print agent task'                                                                                                                                                                                , ordinal_ => '102' , parameter_type_ => 'TypeDynamicEnum' , value_list_ => 'JAVA_LOCALES'                                       , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'DEFAULT_LANGUAGE'      , default_value_ => 'en'                                     , help_text_ => 'Language used by the print agent task'                                                                                                                                                                              , ordinal_ => '103' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'PRINTERS'              , default_value_ => ''                                       , help_text_ => 'Logical printer id and the corresponding physical printer'                                                                                                                                                          , ordinal_ => '104' , parameter_type_ => 'TypeGrid'        , value_list_ => 'Logical Printer,LOGICAL_PRINTERS;Physical Printer'  , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'Debug Information'     , default_value_ => ''                                       , help_text_ => ''                                                                                                                                                                                                                   , ordinal_ => '105' , parameter_type_ => 'TypeLabel'       , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'DEBUG_LEVEL'           , default_value_ => 'ERROR'                                  , help_text_ => 'Level controlling the amount of debug information'                                                                                                                                                                  , ordinal_ => '107' , parameter_type_ => 'TypeEnum'        , value_list_ => 'ERROR WARNING INFO TRACE DEBUG'                     , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'REPORT_FORMATTER_NAME' , default_value_ => ''                                       , help_text_ => 'Name of Report Formatter to be used for Logging purposes'                                                                                                                                                           , ordinal_ => '108' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'DEBUG_URL'             , default_value_ => ''                                       , help_text_ => 'URL of the application server running external report formatter'                                                                                                                                                    , ordinal_ => '109' , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'TaskTemplates'    , instance_type_ => 'PrintAgent'        , parameter_name_ => 'DEBUG_PASSWORD'        , default_value_ => ''                                       , help_text_ => 'Password for connection to external report formatter'                                                                                                                                                               , ordinal_ => '110' , parameter_type_ => 'TypeHiddenText'  , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Transformers'     , instance_type_ => '*'                 , parameter_name_ => 'DESCRIPTION'           , default_value_ => ''                                       , help_text_ => 'A detailed description for this transformer.'                                                                                                                                                                       , ordinal_ => '0'   , parameter_type_ => 'TypeText'        , value_list_ => ''                                                   , write_protected_ => ''  );
   Ins( area_name_ => 'Integration' , group_name_ => 'Transformers'     , instance_type_ => '*'                 , parameter_name_ => 'TRANSFORMER_FILE'      , default_value_ => ''                                       , help_text_ => 'The transformer file. Either a xsl-file or a java-class.'                                                                                                                                                           , ordinal_ => '1'   , parameter_type_ => 'TypeBinary'      , value_list_ => ''                                                   , write_protected_ => ''  );
   Dbms_Output.Put_Line('Finished inserting records to ' || table_name_ || ' table.');
   Dbms_Output.Put_Line('Inserted ' || created_ || ' records.');
   Dbms_Output.Put_Line('Skipped '  || skipped_ || ' records.');
END;
/

---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------
EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_204');

PROMPT Making Oracle User non-mandatory

DECLARE
   table_name_ VARCHAR2(30) := 'FND_USER_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ORACLE_USER', 'VARCHAR2(30)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_1');

PROMPT Adding attributes Created and LastModified to fndUser
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_USER_TAB';
   new_column_     Installation_SYS.ColRec;
   new_column2_    Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column(new_column_);
   Installation_SYS.Reset_Column(new_column2_);
   
   new_column_ := Installation_SYS.Set_Column_Values('CREATED', 'DATE', 'N', default_value_ => 'SYSDATE', keep_default_ => 'N');
   new_column2_ := Installation_SYS.Set_Column_Values('LAST_MODIFIED', 'DATE', 'N', default_value_ => 'SYSDATE', keep_default_ => 'N');
   
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', new_column_, TRUE);
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', new_column2_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]

PROMPT ====================================================
PROMPT Create temporary table used for Connect Export
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_CONFIG_XML_TMP_TAB';
   index_name_ VARCHAR2(30) := 'CONNECT_CONFIG_XML_TMP_UIX';
   columns_ Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Remove_Table(table_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U');
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT ====================================================
PROMPT Create table for ConnectReader entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_READER_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLED', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'EXECUTION_MODE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_SELECTOR', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MAX_RETRIES', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATE_RESPONSE', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOG_LEVEL', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_ENCODING', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'WORK_TIMEOUT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'IN_DIRECTORY', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ARCHIVE_DIRECTORY', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'IGNORE_IF_NOT_FOUND', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'HOST', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PORT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_NAME', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASSWORD', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SECURITY_PROTOCOL', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONNECT_MODE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USE_EPS_WITH_IPV4', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USERAUTH_METHOD', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'KNOWNHOSTS_FILE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRVKEY_FILE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASS_PHRASE', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'IN_QUEUE', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONNECTION_FACTORY', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MAIL_PROTOCOL', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PARSE_BODY', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TIMEOUT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_TYPE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FACTORY_CLASS', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_LU_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('KNOWNHOSTS_CONTENT', 'BLOB', 'Y', NULL, 'LOB (KNOWNHOSTS_CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('PRVKEY_CONTENT', 'BLOB', 'Y', NULL, 'LOB (PRVKEY_CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_READER_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_READER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_READER_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_READER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT ====================================================
PROMPT Create table for ConnectSender entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_SENDER_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MAX_RETRIES', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RETRY_INTERVAL', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_INSTANCE', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'WORK_TIMEOUT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'WRITE_MODE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OUT_DIRECTORY', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'WRITE_TO_DESTINATION', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATE_LOCK_FILE', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TEMP_DIRECTORY', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FTP_SECURITY_PROTOCOL', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONNECT_MODE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USE_EPS_WITH_IPV4', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'HOST', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PORT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_NAME', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASSWORD', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'KNOWNHOSTS_FILE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USERAUTH_METHOD', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRVKEY_FILE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASS_PHRASE', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ACCEPTED_CODES', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_RESP_ENCODING', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TRACE_PATH', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONNECTION_FACTORY', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SEND_TEXT_MESSAGE', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TIMEOUT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PERFORM_AUTH', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_MAIL_SENDER', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OVERRIDE_MAIL_SENDER', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONTENT_TYPE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MAIL_SECURITY_PROTOCOL', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_TYPE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FACTORY_CLASS', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_LU_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('KNOWNHOSTS_CONTENT', 'BLOB', 'Y', NULL, 'LOB (KNOWNHOSTS_CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('PRVKEY_CONTENT', 'BLOB', 'Y', NULL, 'LOB (PRVKEY_CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_SENDER_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_SENDER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_SENDER_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_SENDER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT ====================================================
PROMPT Create table for ConnectServer entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_SERVER_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CBR_ON_ERROR', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CBR_ON_ERROR_MAX_SIZE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_WORK_TIMEOUT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLSQL_MAX_RETRIES', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLSQL_RETRY_INTERVAL', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_SERVER_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_SERVER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_SERVER_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_SERVER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT ====================================================
PROMPT Create table for ConnectSimpleRouting entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_SIMPLE_ROUTING_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ATTRIBUTE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_SIMPLE_ROUTING_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_SIMPLE_ROUTING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_SIMPLE_ROUTING_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_SIMPLE_ROUTING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT ====================================================
PROMPT Create table for ConnectTransformer entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_TRANSFORMER_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER_FILE', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('TRANS_FILE_CONTENT', 'BLOB', 'N', NULL, 'LOB (TRANS_FILE_CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_TRANSFORMER_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_TRANSFORMER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_TRANSFORMER_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_TRANSFORMER_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT ====================================================
PROMPT Create table for ConnectQueue entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STATIC_CONFIG', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLED', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'EXECUTION_MODE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STOP_QUEUE', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LOG_LEVEL', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRIORITY', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'THREAD_COUNT', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_QUEUE_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_QUEUE_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT ====================================================
PROMPT Create table for ConnectEnvelope entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_ENVELOPE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE_FILE', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROUTE_PARAMETERS', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('ENVELOPE_FILE_CONTENT', 'BLOB', 'N', NULL, 'LOB (ENVELOPE_FILE_CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_ENVELOPE_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_ENVELOPE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_ENVELOPE_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_ENVELOPE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ====================================================
PROMPT Create table for JsfLocale entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'JSF_LOCALE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOCALE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COUNTRY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LANGUAGE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VARIANT', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SCRIPT', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'JSF_LOCALE_PK';
   table_name_ VARCHAR2(30) := 'JSF_LOCALE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOCALE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'JSF_LOCALE_RK';
   table_name_ VARCHAR2(30) := 'JSF_LOCALE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ====================================================
PROMPT Create table for JsfEncoding entity
PROMPT ====================================================
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'JSF_ENCODING_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'JSF_ENCODING_PK';
   table_name_ VARCHAR2(30) := 'JSF_ENCODING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'JSF_ENCODING_RK';
   table_name_ VARCHAR2(30) := 'JSF_ENCODING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ====================================================
PROMPT Create table for ConnectPrintAgentTask entity
PROMPT ====================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_PRINT_AGENT_TASK_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'EXECUTE_AS', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOCALE', 'VARCHAR2(12)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRINT_LOCALE', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DEFAULT_LANGUAGE', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DEBUG_LEVEL', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_FORMATTER_NAME', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEBUG_URL', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEBUG_PASSWORD', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_PRINT_AGENT_TASK_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_PRINT_AGENT_TASK_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_PRINT_AGENT_TASK_RK';
   table_name_ VARCHAR2(30) := 'CONNECT_PRINT_AGENT_TASK_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add runtime entity ConfigInstance
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add runtime entity ConfigInstanceParam
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity PrinterMapping
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'PRINTER_MAPPING_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TEMPLATE_INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOGICAL_PRINTER_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PHYSICAL_PRINTER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'PRINTER_MAPPING_PK';
   table_name_ VARCHAR2(30) := 'PRINTER_MAPPING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TEMPLATE_INSTANCE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'LOGICAL_PRINTER_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'PRINTER_MAPPING_RK';
   table_name_ VARCHAR2(30) := 'PRINTER_MAPPING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

COMMIT
/


EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_2');

PROMPT ================================================================================================================
PROMPT  Create tables for entity ConfigInstance
PROMPT ================================================================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ================================================================================================================
PROMPT  Create tables for entity ConfigInstanceParam
PROMPT ================================================================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_INSTANCE_PARAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_3');

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingAddress
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSPORT_CONNECTOR', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_INSTANCE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENCODING', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ZIP', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE_RESPONSE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_LU_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'REST_ROOT_END_POINT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'AUTHENTICATION_METHOD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDITIONAL_HEADERS', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LOGIN', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASSWORD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'API_KEY', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_ID', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_SECRET', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TOKEN_ENDPOINT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROTECTED_RESOURCE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DIRECTORY', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OUTPUT_FILE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLSQL_METHOD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESTINATION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SOAP_ACTION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SEND_TO', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CC', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SUBJECT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ATTACHMENT_NAME', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TOKEN_ENDPOINT_PARAMETERS', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'REST_HTTP_METHOD', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingAddressRuntime
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSPORT_CONNECTOR', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_INSTANCE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_DATA', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_DATA_2', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OPTIONS', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENCODING', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ZIP', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE_RESPONSE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingRule
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DIRECTION', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROUTE_TYPE', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LOCATION_TYPE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'READER_INSTANCE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SELECTOR', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingRuleCondition
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEQ_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEARCH_PATH', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OP', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MATCH_QUERY_EXPR', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'SEQ_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingRuleAddress
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CHAIN_LINK_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MAIN_ADDRESS', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Updating duplicate keys in fndcn_route_address_tab
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   new_desc_ VARCHAR2(500);
BEGIN
   FOR X IN (SELECT * FROM (SELECT address_id,
                                   substr(description, 1, 490) description,
                                   ROW_NUMBER() OVER (PARTITION BY description ORDER BY address_id) dup_nr
                              FROM fndcn_route_address_tab)
              WHERE dup_nr > 1
             ORDER BY description, dup_nr)
   LOOP
      new_desc_ := X.description || ' (' || X.dup_nr || ')';
      Dbms_Output.Put_Line('Found duplicate: ');
      Dbms_Output.Put_Line('.   address_id:  ' || X.address_id);
      Dbms_Output.Put_Line('.   description: ' || new_desc_);
      UPDATE fndcn_route_address_tab
         SET description = new_desc_,
             rowversion = rowversion + 1
       WHERE address_id = X.address_id;
      Dbms_Output.Put_Line(SQL%ROWCOUNT || ' rows updated.');
      Dbms_Output.Put_Line('.');
   END LOOP;
END;
-- [END IFS COMPLETE BLOCK]
/
COMMIT
/

--------------------------------------------------------------------------------------------------------
PROMPT Updating duplicate keys in fndcn_route_condition_tab
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   new_desc_ VARCHAR2(500);
BEGIN
   FOR X IN (SELECT * FROM (SELECT condition_id,
                                   substr(description, 1, 490) description,
                                   ROW_NUMBER() OVER (PARTITION BY description ORDER BY condition_id) dup_nr
                              FROM fndcn_route_condition_tab)
              WHERE dup_nr > 1
             ORDER BY description, dup_nr)
   LOOP
      new_desc_ := X.description || ' (' || X.dup_nr || ')';
      Dbms_Output.Put_Line('Found duplicate: ');
      Dbms_Output.Put_Line('.   condition_id:  ' || X.condition_id);
      Dbms_Output.Put_Line('.   description:   ' || new_desc_);
      UPDATE fndcn_route_condition_tab
         SET description = new_desc_,
             rowversion = rowversion + 1
       WHERE condition_id = X.condition_id;
      Dbms_Output.Put_Line(SQL%ROWCOUNT || ' rows updated.');
      Dbms_Output.Put_Line('.');
   END LOOP;
END;
-- [END IFS COMPLETE BLOCK]
/
COMMIT
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_4');

--------------------------------------------------------------------------------------------------------
PROMPT Add entity BatchProcessorQueue
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_name_ VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'START WITH 1', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_SEQ_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLUSTER_NAME', 'VARCHAR2(4)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NODE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'METHOD', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EXECUTION_MODE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PRIORITY', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESTRICTED_QUEUE_THREAD_NO', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESTRICTED_QUEUE_CHECK', 'VARCHAR2(5)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESTRICTED_QUEUE_NAME', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESTRICTED_QUEUE_TYPE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'READER_MESSAGE_ID', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'JMS_QUEUE_NAME', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'JMS_DELIVERY_DELAY', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_GROUP', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADMIN_METHOD', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADMIN_VALUE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_PK';
   table_name_ VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_SEQ_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_IX';
   table_name_ VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_  VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_SENT_TAB';
   index_name_  VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_SENT_PK';
   index_name2_ VARCHAR2(30) := 'BATCH_PROCESSOR_QUEUE_SENT_IX';
   columns_     Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NODE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_SEQ_NO', 'NUMBER', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NODE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_SEQ_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE_SEQ_NO');
   Installation_SYS.Create_Index(table_name_, index_name2_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity ConnectNode
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CONNECT_NODE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NODE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLUSTER_NAME', 'VARCHAR2(4)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOCK_HANDLE', 'VARCHAR2(128)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INVOKE_LOCK_HANDLE', 'VARCHAR2(128)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_TIMESTAMP', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOAD_FACTOR', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CONNECT_NODE_PK';
   table_name_ VARCHAR2(30) := 'CONNECT_NODE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NODE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingAddress
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSPORT_CONNECTOR', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_INSTANCE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENCODING', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ZIP', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE_RESPONSE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_PLSQL_METHOD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'REST_ROOT_END_POINT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'AUTHENTICATION_METHOD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDITIONAL_HEADERS', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LOGIN', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASSWORD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'API_KEY', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_ID', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_SECRET', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TOKEN_ENDPOINT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROTECTED_RESOURCE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DIRECTORY', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OUTPUT_FILE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLSQL_METHOD', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESTINATION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SOAP_ACTION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SEND_TO', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CC', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SUBJECT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ATTACHMENT_NAME', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingRule
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DIRECTION', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROUTE_TYPE', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'QUEUE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LOCATION_TYPE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'READER_INSTANCE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SELECTOR', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingRuleAddress
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CHAIN_LINK_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MAIN_ADDRESS', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingRuleCondition
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEQ_NO', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SEARCH_PATH', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OP', 'VARCHAR2(25)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MATCH_QUERY_EXPR', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'RULE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'SEQ_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_CONDITION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity RoutingAddressRuntime
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSPORT_CONNECTOR', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_INSTANCE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_DATA', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_DATA_2', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OPTIONS', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENCODING', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ZIP', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE_RESPONSE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RUNTIME_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity CustomConnectorLibrary
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOM_CONNECTOR_LIBRARY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_INSTANCE_TYPE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   column_ := Installation_SYS.Set_Column_Values('JAR_FILE', 'BLOB', 'Y', NULL, 'LOB (JAR_FILE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOM_CONNECTOR_LIBRARY_PK';
   table_name_ VARCHAR2(30) := 'CUSTOM_CONNECTOR_LIBRARY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_INSTANCE_TYPE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOM_CONNECTOR_LIBRARY_RK';
   table_name_ VARCHAR2(30) := 'CUSTOM_CONNECTOR_LIBRARY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity PrinterMapping
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'PRINTER_MAPPING_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TEMPLATE_INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOGICAL_PRINTER_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PHYSICAL_PRINTER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'PRINTER_MAPPING_PK';
   table_name_ VARCHAR2(30) := 'PRINTER_MAPPING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TEMPLATE_INSTANCE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'LOGICAL_PRINTER_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'PRINTER_MAPPING_RK';
   table_name_ VARCHAR2(30) := 'PRINTER_MAPPING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Add entity JsfProperty
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'JSF_PROPERTY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_GROUP', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_NAME', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_VALUE', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_SOURCE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'TIMESTAMP(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STANDARD_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'JSF_PROPERTY_PK';
   table_name_ VARCHAR2(30) := 'JSF_PROPERTY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_GROUP');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'JSF_PROPERTY_RK';
   table_name_ VARCHAR2(30) := 'JSF_PROPERTY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'JSF_PROPERTY_DISTINCT_JMS_TAB';
   index_name_ VARCHAR2(30) := 'JSF_PROPERTY_DISTINCT_JMS_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_GROUP', 'VARCHAR2(20)',  'N');
   Installation_SYS.Set_Table_Column(columns_, 'JMS_METHOD',  'VARCHAR2(100)',  'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID', 'VARCHAR2(200)', 'N');
   Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_GROUP');
   Installation_SYS.Set_Table_Column(columns_, 'JMS_METHOD');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U');
END;
-- [END IFS COMPLETE BLOCK]
/


COMMIT
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_5');

PROMPT ====================================================
PROMPT Set default values for mandatory columns
PROMPT ====================================================

UPDATE connect_envelope_tab    SET customized = 0 WHERE customized IS NULL;
UPDATE connect_transformer_tab SET customized = 0 WHERE customized IS NULL;

PROMPT ====================================================
PROMPT Alter mandatory columns TO NOT NULL
PROMPT ====================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_ Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('CUSTOMIZED', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column('CONNECT_ENVELOPE_TAB', 'MOD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('CUSTOMIZED', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column('CONNECT_TRANSFORMER_TAB', 'MOD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ====================================================
PROMPT Create temporary table for joined source (old) data
PROMPT ====================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'OLD_CONNECT_CONFIG_TMP_TAB';
   index_name_ VARCHAR2(30) := 'OLD_CONNECT_CONFIG_TMP_UIX';
   columns_ Installation_SYS.ColumnTabType;
   column_  Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Remove_Table(table_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STATIC_CONFIG', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'BINARY_CUSTOMIZED', 'NUMBER', 'Y');
   Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('BINARY_VALUE', 'BLOB', 'Y', NULL);
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ================================================================
PROMPT Create temporary table for conversion of old enumeration VALUES
PROMPT ================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'OLD_CONNECT_ENUM_TMP_TAB';
   index_name_ VARCHAR2(30) := 'OLD_CONNECT_ENUM_TMP_UIX';
   columns_ Installation_SYS.ColumnTabType;
   column_  Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Remove_Table(table_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOWER_CASE_VALUE', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOWER_CASE_VALUE');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ==============================================================================
PROMPT Create PLSQL function Cdb_Log for logging
PROMPT ==============================================================================

CREATE OR REPLACE PROCEDURE Cdb_Log(line_ VARCHAR2) IS
BEGIN
   Dbms_Output.Put_Line(line_);
END Cdb_Log;
/

PROMPT ==============================================================================
PROMPT Create PLSQL function Convert_Boolean_Value that converts old boolean values
PROMPT ==============================================================================

CREATE OR REPLACE FUNCTION Convert_Boolean_Value (
   old_value_     IN VARCHAR2,
   default_value_ IN BOOLEAN,
   type_          IN VARCHAR2 DEFAULT NULL,
   type_list_     IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2
IS
   --
   -- Return null if type_ is not null and is not on type_list_ (not own attribute).
   -- Otherwise convert old value to new value and apply default_value_ if necessary.
   --
   value_ VARCHAR2(1000);
BEGIN
   IF type_ IS NOT NULL AND instr(',' || type_list_ || ',', ',' || type_ || ',' ) = 0 THEN
      RETURN NULL;
   END IF;
   RETURN upper(nvl(old_value_, CASE default_value_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END));
END Convert_Boolean_Value;
/

PROMPT ==============================================================================
PROMPT Create PLSQL function Convert_Enum_Value that converts old enumeration values
PROMPT ==============================================================================

CREATE OR REPLACE FUNCTION Convert_Enum_Value (
   old_value_     IN VARCHAR2,
   default_value_ IN VARCHAR2,
   type_          IN VARCHAR2 DEFAULT NULL,
   type_list_     IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2
IS
   --
   -- Return null if type_ is not null and is not on type_list_ (not own attribute).
   -- Otherwise convert old value to new value and apply default_value_ if necessary.
   --
   value_ VARCHAR2(1000);
BEGIN
   IF  type_ IS NOT NULL AND instr(',' || type_list_ || ',', ',' || type_ || ',' ) = 0 THEN
      RETURN NULL;
   END IF;
   SELECT nvl(value, default_value_)
     INTO value_
     FROM old_connect_enum_tmp_tab
    WHERE lower_case_value = lower(old_value_);
   --Cdb_Log('Converted enum value [' || old_value_ || '] to value [' || value_ || '] for type [' || type_ || ']');
   RETURN value_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Application_Error(-20105, 'Invalid enumeration value [' || old_value_ || '] not found in CONFIG_PARAMETER_DEF table' || '] for type [' || type_ || ']');
END Convert_Enum_Value;
/

PROMPT ================================================================
PROMPT Build enumeration conversion map in temporary table
PROMPT ================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   PROCEDURE Parse_Enum_Value_List(value_list_ IN VARCHAR2) IS
      --
      -- Parse CONFIG_PARAMETER_DEF.VALUE_LIST and update temporary table
      --
      text_  VARCHAR2(2000) := TRIM(value_list_);
      len_   INTEGER := length(text_);
      p1_    INTEGER := 1;
      p2_    INTEGER;
      value_ VARCHAR2(100);
   BEGIN
      WHILE p1_ <= len_ LOOP
         p2_ := instr(text_, ' ', p1_);
         IF p2_ = 0 THEN
            p2_ := len_ + 1;
         END IF;
         value_ := substr(text_, p1_, p2_ - p1_);
         BEGIN
            INSERT INTO old_connect_enum_tmp_tab(lower_case_value, value) VALUES (lower(value_), value_);
            Dbms_Output.Put_line('Added emum value [' || value_ || ']');
         EXCEPTION
            WHEN dup_val_on_index THEN
               NULL;
         END;
         p1_ := p2_ + 1;
      END LOOP;
   END;
BEGIN
   FOR x_ IN (SELECT DISTINCT value_list FROM config_parameter_def_tab WHERE parameter_type = 'TypeEnum') LOOP
      Parse_Enum_Value_List(x_.value_list);
   END LOOP;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ================================================================
PROMPT Copy source data to temporary TABLE
PROMPT ================================================================

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   INSERT INTO old_connect_config_tmp_tab
     (group_name, instance_name, description, static_config, instance_type, parameter_name, parameter_value, binary_value, binary_customized)
   WITH config_parameter_view AS -- exact copy of Apps10 view ConfigParameter from ConfigParameter.views)
     (SELECT I.area_name                                   area_name,
             I.group_name                                  group_name,
             I.instance_name                               instance_name,
             D.parameter_name                              parameter_name,
             D.ordinal                                     ordinal,
             nvl(P.parameter_value, D.default_value)       parameter_value,
             D.default_value                               default_value,
             decode(P.parameter_value, null, 0, 1)         value_modified,
             P.binary_value                                binary_value,
             P.binary_modified_date                        binary_modified_date,
             P.binary_customized                           binary_customized,
             D.parameter_type                              parameter_type,
             D.value_list                                  value_list,
             D.help_text                                   help_text,
             D.write_protected                             write_protected,
             I.instance_type                               instance_type,
             P.rowkey                                      objkey,
             P.rowversion                                  objversion,
             P.rowid                                       objid
      FROM   fndcn_config_param_inst_tab I, config_parameter_def_tab D, fndcn_config_param_tab P
      WHERE  D.area_name = I.area_name
      AND    D.group_name = I.group_name
      AND    D.instance_type in (I.instance_type, '*')
      AND    I.area_name = P.area_name(+)
      AND    I.group_name = P.group_name(+)
      AND    I.instance_name = P.instance_name(+)
      AND    D.parameter_name = P.parameter_name(+))
   SELECT I.group_name, I.instance_name, I.description, I.static_config, I.instance_type, P.parameter_name, P.parameter_value, P.binary_value, P.binary_customized
     FROM config_parameter_view P, fndcn_config_param_inst_tab I
    WHERE P.group_name = I.group_name AND P.instance_name = I.instance_name AND P.parameter_type <> 'TypeLabel';
   Dbms_Output.Put_Line('Copied ' || SQL%ROWCOUNT || ' rows from old config tables to temporary table');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT =================================================================
PROMPT Copy old readers to new Aurena entity ConnectReader
PROMPT =================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'ConnectorReaders';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;

   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'ENABLED'             AS enabled,
         'EXECUTION_MODE'      AS execution_mode,
         'MESSAGE_SELECTOR'    AS message_selector,
         'MAX_RETRIES'         AS max_retries,
         'CREATE_RESPONSE'     AS create_response,
         'LOG_LEVEL'           AS log_level,
         'DEFAULT_ENCODING'    AS default_encoding,
         'WORK_TIMEOUT'        AS work_timeout,
         'IN_DIRECTORY'        AS in_directory,
         'ARCHIVE_DIRECTORY'   AS archive_directory,
         'IGNORE_IF_NOT_FOUND' AS ignore_if_not_found,
         'HOST'                AS host,
         'PORT'                AS port,
         'USER'                AS user_name,            -- convert parameter name to column name
         'PASSWORD'            AS password,
         'SECURITY_PROTOCOL'   AS security_protocol,
         'CONNECT_MODE'        AS connect_mode,
         'USE_EPS_WITH_IPV4'   AS use_eps_with_ipv4,
         'USERAUTH_METHOD'     AS userauth_method,
         'KNOWNHOSTS_FILE'     AS knownhosts_file,
         'PRVKEY_FILE'         AS prvkey_file,
         'PASS_PHRASE'         AS pass_phrase,
         'IN_QUEUE'            AS in_queue,
         'CONNECTION_FACTORY'  AS connection_factory,
         'MAIL_PROTOCOL'       AS mail_protocol,
         'PARSE_BODY'          AS parse_body,
         'TIMEOUT'             AS timeout,
         'FACTORY_CLASS'       AS factory_class
      )
   );

   FUNCTION Convert_Auth_Method(value_ IN VARCHAR2) RETURN VARCHAR2 IS
   BEGIN
      RETURN CASE lower(value_) WHEN 'passwordauthentication' THEN 'PasswordAuth' WHEN 'identityfileauthentication' THEN 'IdentityFileAuth' END;
   END;

   PROCEDURE Clear_None_Base_Attributes(new_ IN OUT connect_reader_tab%ROWTYPE) IS
   BEGIN
      new_.in_directory        := NULL;
      new_.archive_directory   := NULL;
      new_.ignore_if_not_found := NULL;
      new_.host                := NULL;
      new_.port                := NULL;
      new_.user_name           := NULL;
      new_.password            := NULL;
      new_.security_protocol   := NULL;
      new_.connect_mode        := NULL;
      new_.use_eps_with_ipv4   := NULL;
      new_.userauth_method     := NULL;
      new_.knownhosts_file     := NULL;
      new_.prvkey_file         := NULL;
      new_.pass_phrase         := NULL;
      new_.in_queue            := NULL;
      new_.connection_factory  := NULL;
      new_.mail_protocol       := NULL;
      new_.parse_body          := NULL;
      new_.timeout             := NULL;
   END;

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_               connect_reader_tab%ROWTYPE;
         new_instance_type_ VARCHAR2(100);
         new_custom_type_   VARCHAR2(100);
         new_enabled_       VARCHAR2(10);
      BEGIN
         IF old_.instance_type LIKE 'Custom%' THEN
            new_instance_type_ := 'Custom';
            new_custom_type_   := ltrim(substr(old_.instance_type, 7, length(old_.instance_type) - 6), '-');
            new_enabled_       := 'FALSE';
            Cdb_Log('WARNING! Creating invalid Custom reader without attributes [' || old_.instance_name || ']');
         ELSE
            new_instance_type_ := old_.instance_type;
            new_enabled_       := upper(old_.enabled);
         END IF;

         new_.instance_name       := old_.instance_name;
         new_.description         := old_.description;
         new_.instance_type       := new_instance_type_;
         new_.enabled             := Convert_Boolean_Value(new_enabled_,         FALSE);
         new_.execution_mode      := Convert_Enum_Value   (old_.execution_mode,  'InParallel');
         new_.message_selector    := old_.message_selector;
         new_.max_retries         := old_.max_retries;
         new_.create_response     := Convert_Boolean_Value(old_.create_response, TRUE);
         new_.log_level           := Convert_Enum_Value   (old_.log_level,       'WARNING');
         new_.default_encoding    := old_.default_encoding;
         new_.work_timeout        := old_.work_timeout;
         new_.in_directory        := old_.in_directory;
         new_.archive_directory   := old_.archive_directory;
         new_.ignore_if_not_found := Convert_Boolean_Value(old_.ignore_if_not_found, TRUE,      new_instance_type_, 'File,Ftp,Sftp');
         new_.host                := old_.host;
         new_.port                := old_.port;
         new_.user_name           := old_.user_name;
         new_.password            := old_.password;
         new_.security_protocol   := Convert_Enum_Value   (old_.security_protocol,   '<none>',  new_instance_type_, 'Ftp,Mail');
         new_.connect_mode        := Convert_Enum_Value   (old_.connect_mode,        'PASSIVE', new_instance_type_, 'Ftp');  -- ACTIVE?
         new_.use_eps_with_ipv4   := Convert_Boolean_Value(old_.use_eps_with_ipv4,   FALSE,     new_instance_type_, 'Ftp');
         new_.userauth_method     := Convert_Auth_Method  (old_.userauth_method);
         new_.knownhosts_file     := old_.knownhosts_file;
         new_.prvkey_file         := old_.prvkey_file;
         new_.pass_phrase         := old_.pass_phrase;
         new_.in_queue            := old_.in_queue;
         new_.connection_factory  := old_.connection_factory;
         new_.mail_protocol       := Convert_Enum_Value   (old_.mail_protocol,       'POP3',    new_instance_type_, 'Mail'); --IMAP?
         new_.parse_body          := Convert_Boolean_Value(old_.parse_body,          FALSE ,    new_instance_type_, 'Mail');
         new_.timeout             := old_.timeout;
         new_.factory_class       := old_.factory_class;
         new_.custom_type         := new_custom_type_;
         new_.rowversion          := 1;

         IF new_.instance_type = 'Custom' THEN
            Clear_None_Base_Attributes(new_);
         END IF;

         INSERT INTO connect_reader_tab VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created reader (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped reader (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Cdb_Log('Created ' || created_  || ' readers.');
   Cdb_Log('Skipped ' || skipped_  || ' readers.');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ===================================================================
PROMPT Copy old senders to new Aurena entity ConnectSender
PROMPT ===================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'ConnectorSenders';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;

   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'MAX_RETRIES'           AS max_retries,
         'RETRY_INTERVAL'        AS retry_interval,
         'DEFAULT_INSTANCE'      AS default_instance,
         'WORK_TIMEOUT'          AS work_timeout,
         'WRITE_MODE'            AS write_mode,
         'OUT_DIRECTORY'         AS out_directory,
         'WRITE_TO_DESTINATION'  AS write_to_destination,
         'CREATE_LOCK_FILE'      AS create_lock_file,
         'TEMP_DIRECTORY'        AS temp_directory,
         'SECURITY_PROTOCOL'     AS security_protocol,
         'CONNECT_MODE'          AS connect_mode,
         'USE_EPS_WITH_IPV4'     AS use_eps_with_ipv4,
         'HOST'                  AS host,
         'PORT'                  AS port,
         'USER'                  AS user_name,
         'PASSWORD'              AS password,
         'KNOWNHOSTS_FILE'       AS knownhosts_file,
         'USERAUTH_METHOD'       AS userauth_method,
         'PRVKEY_FILE'           AS prvkey_file,
         'PASS_PHRASE'           AS pass_phrase,
         'ACCEPTED_CODES'        AS accepted_codes,
         'DEFAULT_RESP_ENCODING' AS default_resp_encoding,
         'TRACE_PATH'            AS trace_path,
         'CONNECTION_FACTORY'    AS connection_factory,
         'SEND_TEXT_MESSAGE'     AS send_text_message,
         'TIMEOUT'               AS timeout,
         'PERFORM_AUTH'          AS perform_auth,
         'DEFAULT_MAIL_SENDER'   AS default_mail_sender,
         'OVERRIDE_MAIL_SENDER'  AS override_mail_sender,
         'CONTENT_TYPE'          AS content_type,
         'FACTORY_CLASS'         AS factory_class
      )
   );

   FUNCTION Convert_Auth_Method(value_ IN VARCHAR2) RETURN VARCHAR2 IS
   BEGIN
      RETURN CASE lower(value_) WHEN 'passwordauthentication' THEN 'PasswordAuth' WHEN 'identityfileauthentication' THEN 'IdentityFileAuth' END;
   END;

   PROCEDURE Clear_None_Base_Attributes(new_ IN OUT connect_sender_tab%ROWTYPE) IS
   BEGIN
      new_.write_mode            := NULL;
      new_.out_directory         := NULL;
      new_.write_to_destination  := NULL;
      new_.create_lock_file      := NULL;
      new_.temp_directory        := NULL;
      new_.ftp_security_protocol := NULL;
      new_.mail_security_protocol:= NULL;
      new_.connect_mode          := NULL;
      new_.use_eps_with_ipv4     := NULL;
      new_.host                  := NULL;
      new_.port                  := NULL;
      new_.user_name             := NULL;
      new_.password              := NULL;
      new_.knownhosts_file       := NULL;
      new_.userauth_method       := NULL;
      new_.prvkey_file           := NULL;
      new_.pass_phrase           := NULL;
      new_.accepted_codes        := NULL;
      new_.default_resp_encoding := NULL;
      new_.trace_path            := NULL;
      new_.connection_factory    := NULL;
      new_.send_text_message     := NULL;
      new_.timeout               := NULL;
      new_.perform_auth          := NULL;
      new_.default_mail_sender   := NULL;
      new_.override_mail_sender  := NULL;
      new_.content_type          := NULL;
   END;

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_               connect_sender_tab%ROWTYPE;
         new_instance_type_ VARCHAR2(100);
         new_custom_type_   VARCHAR2(100);
      BEGIN
         IF old_.instance_type LIKE 'Custom%' THEN
            new_instance_type_ := 'Custom';
            new_custom_type_   := ltrim(substr(old_.instance_type, 7, length(old_.instance_type) - 6), '-');
            Cdb_Log('WARNING! Creating invalid Custom sender without attributes [' || old_.instance_name || ']');
         ELSE
            new_instance_type_ := old_.instance_type;
         END IF;

         new_.instance_name         := old_.instance_name;
         new_.description           := old_.description;
         new_.instance_type         := new_instance_type_;
         new_.max_retries           := old_.max_retries;
         new_.retry_interval        := old_.retry_interval;
         new_.default_instance      := Convert_Boolean_Value(old_.default_instance, FALSE);
         new_.work_timeout          := old_.work_timeout;
         new_.write_mode            := Convert_Enum_Value   (old_.write_mode,           'CREATE_NEW', new_instance_type_, 'File');
         new_.out_directory         := old_.out_directory;
         new_.write_to_destination  := Convert_Boolean_Value(old_.write_to_destination, FALSE,        new_instance_type_, 'File');
         new_.create_lock_file      := Convert_Boolean_Value(old_.create_lock_file,     FALSE,        new_instance_type_, 'File');
         new_.temp_directory        := old_.temp_directory;
         IF new_instance_type_ = 'Ftp' THEN
            new_.ftp_security_protocol := Convert_Enum_Value(old_.security_protocol,    '<none>',     new_instance_type_, 'Ftp');
         ELSIF new_instance_type_ = 'Mail' THEN
            new_.mail_security_protocol:= Convert_Enum_Value(old_.security_protocol,    '<none>',     new_instance_type_, 'Mail');
         END IF;
         new_.connect_mode          := Convert_Enum_Value   (old_.connect_mode,         'PASSIVE',    new_instance_type_, 'Ftp'); -- ACTIVE?
         new_.use_eps_with_ipv4     := Convert_Boolean_Value(old_.use_eps_with_ipv4,    FALSE,        new_instance_type_, 'Ftp');
         new_.host                  := old_.host;
         new_.port                  := old_.port;
         new_.user_name             := old_.user_name;
         new_.password              := old_.password;
         new_.knownhosts_file       := old_.knownhosts_file;
         new_.userauth_method       := Convert_Auth_Method(old_.userauth_method);
         new_.prvkey_file           := old_.prvkey_file;
         new_.pass_phrase           := old_.pass_phrase;
         new_.accepted_codes        := old_.accepted_codes;
         new_.default_resp_encoding := old_.default_resp_encoding;
         new_.trace_path            := old_.trace_path;
         new_.connection_factory    := old_.connection_factory;
         new_.send_text_message     := Convert_Boolean_Value(old_.send_text_message,    FALSE,        new_instance_type_, 'JMS');
         new_.timeout               := old_.timeout;
         new_.perform_auth          := Convert_Boolean_Value(old_.perform_auth,         TRUE,         new_instance_type_, 'Mail');
         new_.default_mail_sender   := old_.default_mail_sender;
         new_.override_mail_sender  := Convert_Boolean_Value(old_.override_mail_sender, FALSE,        new_instance_type_, 'Mail');
         new_.content_type          := Convert_Enum_Value   (old_.content_type,         'text/plain', new_instance_type_, 'Mail');
         new_.custom_type           := new_custom_type_;
         new_.factory_class         := old_.factory_class;
         new_.rowversion            := 1;

         IF new_.instance_type = 'Custom' THEN
            Clear_None_Base_Attributes(new_);
         END IF;

         INSERT INTO connect_sender_tab VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created sender (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped sender (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Cdb_Log('Created ' || created_  || ' senders.');
   Cdb_Log('Skipped ' || skipped_  || ' senders.');
END;
-- [END IFS COMPLETE BLOCK]
/
PROMPT ===================================================================
PROMPT Copy old envelopes to new Aurena entity ConnectEnvelope
PROMPT ===================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'Envelopes';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;

   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'ENVELOPE_FILE'    AS envelope_file,
         'ROUTE_PARAMETERS' AS route_parameters
      )
   );

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_               connect_envelope_tab%ROWTYPE;
         new_binary_value_  BLOB;
         new_customized_    NUMBER;
      BEGIN
         --
         -- There is at most one binary_value per instance.
         -- Fetch binary_value directly into corresponding BLOB in new record.
         --
         SELECT binary_value, binary_customized
           INTO new_binary_value_, new_customized_
           FROM old_connect_config_tmp_tab
          WHERE group_name     = group_name_
            AND instance_name  = old_.instance_name
            AND parameter_name = 'ENVELOPE_FILE';

         new_.instance_name         := old_.instance_name;
         new_.description           := old_.description;
         new_.envelope_file         := old_.envelope_file;
         new_.envelope_file_content := new_binary_value_;
         new_.customized            := nvl(new_customized_, 0);
         new_.route_parameters      := old_.route_parameters;
         new_.rowversion            := 1;
         INSERT INTO connect_envelope_tab VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created envelope (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped envelope (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Cdb_Log('Created ' || created_  || ' envelopes.');
   Cdb_Log('Skipped ' || skipped_  || ' envelopes.');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ===================================================================
PROMPT Copy old message queues to new Aurena entity ConnectQueue
PROMPT ===================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'MessageQueues';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;

   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'EXECUTION_MODE'      AS execution_mode,
         'STOP_QUEUE'          AS stop_queue,
         'LOG_LEVEL'           AS log_level,
         'PRIORITY'            AS priority,
         'THREAD_COUNT'        AS thread_count
      )
   );

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_         connect_queue_tab%ROWTYPE;
         new_enabled_ VARCHAR2(5) := CASE old_.instance_type = 'DisabledQueue' WHEN TRUE THEN 'FALSE' ELSE 'TRUE' END;
      BEGIN
         new_.instance_name  := old_.instance_name;
         new_.description    := old_.description;
         new_.static_config  := old_.static_config;
         new_.enabled        := new_enabled_;
         new_.execution_mode := CASE new_enabled_ WHEN 'TRUE' THEN Convert_Enum_Value   (old_.execution_mode, 'InParallel') ELSE NULL END;
         new_.stop_queue     := CASE new_enabled_ WHEN 'TRUE' THEN Convert_Boolean_Value(old_.stop_queue,     FALSE)        ELSE NULL END;
         new_.log_level      := CASE new_enabled_ WHEN 'TRUE' THEN Convert_Enum_Value   (old_.log_level,      'WARNING')    ELSE NULL END;
         new_.priority       := old_.priority;
         new_.thread_count   := old_.thread_count;
         new_.rowversion     := 1;
         INSERT INTO connect_queue_tab VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created queue (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped queue (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;

   -- ERROR and TRASHCAN queues do not have any parameters and have to be inserted explicitely
   BEGIN
      INSERT INTO connect_queue_tab (instance_name, description, static_config, enabled, rowversion)
      VALUES ('ERROR', 'Error Queue', '1', 'FALSE', 1);
      created_ := created_ + 1;
      Cdb_Log('Created queue (' || created_ || ') [ERROR]');
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO connect_queue_tab (instance_name, description, static_config, enabled, rowversion)
      VALUES ('TRASHCAN', 'Trashcan queue', '1', 'FALSE', 1);
      created_ := created_ + 1;
      Cdb_Log('Created queue (' || created_ || ') [TRASHCAN]');
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   Cdb_Log('Created ' || created_  || ' queues.');
   Cdb_Log('Skipped ' || skipped_  || ' queues.');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ===================================================================
PROMPT Copy old simple routings to new Aurena entity ConnectSimpleRouting
PROMPT ===================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'Routing';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;
   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'ATTRIBUTE' AS attribute
      )
   );

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_  connect_simple_routing_tab%ROWTYPE;
      BEGIN
         new_.instance_name := old_.instance_name;
         new_.description   := old_.description;
         new_.attribute     := Convert_Enum_Value(old_.attribute, '<none>');
         new_.rowversion    := 1;
         INSERT INTO connect_simple_routing_tab  VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created simple routing (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped simple routing (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Cdb_Log('Created ' || created_  || ' simple routings.');
   Cdb_Log('Skipped ' || skipped_  || ' simple routings.');
END;
-- [END IFS COMPLETE BLOCK]
/
PROMPT ===================================================================
PROMPT Copy old J2EE servers to new Aurena entity ConnectServer
PROMPT ===================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'Servers';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;

   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'CBR_ON_ERROR'          AS cbr_on_error,
         'CBR_ON_ERROR_MAX_SIZE' AS cbr_on_error_max_size,
         'DEFAULT_WORK_TIMEOUT'  AS default_work_timeout,
         'BIZAPI_MAX_RETRIES'    AS plsql_max_retries,
         'BIZAPI_RETRY_INTERVAL' AS plsql_retry_interval
      )
   );

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_  connect_server_tab%ROWTYPE;
      BEGIN
         new_.instance_name         := old_.instance_name;
         new_.description           := old_.description;
         new_.cbr_on_error_max_size := old_.cbr_on_error_max_size;
         new_.cbr_on_error          := Convert_Boolean_Value(old_.cbr_on_error, TRUE);
         new_.default_work_timeout  := old_.default_work_timeout;
         new_.plsql_max_retries     := old_.plsql_max_retries;
         new_.plsql_retry_interval  := old_.plsql_retry_interval;
         new_.rowversion            := 1;
         INSERT INTO connect_server_tab  VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created server (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped server (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Cdb_Log('Created ' || created_  || ' servers.');
   Cdb_Log('Skipped ' || skipped_  || ' servers.');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ===================================================================
PROMPT Copy old transformers to new Aurena entity ConnectTransformer
PROMPT ===================================================================

-- Note: Copy BINARY_VALUE for parameter TRANSFORMER_FILE to new entity column
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'Transformers';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;

   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'TRANSFORMER_FILE' AS transformer_file
      )
   );

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_               connect_transformer_tab%ROWTYPE;
         new_binary_value_  BLOB;
         new_customized_    NUMBER;
      BEGIN
         --
         -- There is at most one binary_value per instance.
         -- Fetch binary_value directly into corresponding BLOB in new record.
         --
         SELECT binary_value, binary_customized
           INTO new_binary_value_, new_customized_
           FROM old_connect_config_tmp_tab
          WHERE group_name     = group_name_
            AND instance_name  = old_.instance_name
            AND parameter_name = 'TRANSFORMER_FILE';

         new_.instance_name      := old_.instance_name;
         new_.description        := old_.description;
         new_.instance_type      := old_.instance_type;
         new_.transformer_file   := old_.transformer_file;
         new_.trans_file_content := new_binary_value_;
         new_.customized         := nvl(new_customized_, 0);
         new_.rowversion         := 1;
         INSERT INTO connect_transformer_tab VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created transformer (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped transformer (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Cdb_Log('Created ' || created_  || ' transformers.');
   Cdb_Log('Skipped ' || skipped_  || ' transformers.');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ===================================================================
PROMPT Copy old Print Agent task templates to new Aurena entity ConnectPrintAgentTask
PROMPT ===================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   group_name_ CONSTANT VARCHAR2(100) := 'TaskTemplates';
   created_    NUMBER := 0;
   skipped_    NUMBER := 0;

   --
   -- Convert config parameter rows to client entity columns
   --
   CURSOR Old_Config IS
   WITH old AS
   (
      SELECT instance_name, parameter_name, parameter_value, description, instance_type, static_config
        FROM old_connect_config_tmp_tab
       WHERE group_name = group_name_
         AND instance_type = 'PrintAgent'
   )
   SELECT * FROM old
   PIVOT
   (
      MIN(parameter_value)
      FOR parameter_name IN
      (
         --
         -- Map old parameter names to new Aurena entity column
         --
         'QUEUE'                 AS queue,
         'EXECUTE_AS'            AS execute_as,
         'LOCALE'                AS locale,
         'PRINT_LOCALE'          AS print_locale,
         'DEFAULT_LANGUAGE'      AS default_language,
         'DEBUG_LEVEL'           AS debug_level,
         'REPORT_FORMATTER_NAME' AS report_formatter_name,
         'DEBUG_URL'             AS debug_url,
         'DEBUG_PASSWORD'        AS debug_password
      )
   );

BEGIN
   FOR old_ IN Old_Config LOOP
      DECLARE
         new_ connect_print_agent_task_tab%ROWTYPE;
      BEGIN
         new_.instance_name         := old_.instance_name;
         new_.description           := old_.description;
         new_.queue                 := old_.queue;
         new_.execute_as            := Convert_Enum_Value(old_.execute_as, 'System');
         new_.locale                := old_.locale;
         new_.print_locale          := old_.print_locale;
         new_.default_language      := old_.default_language;
         new_.debug_level           := Convert_Enum_Value(old_.debug_level, 'WARNING');
         new_.report_formatter_name := old_.report_formatter_name;
         new_.debug_url             := old_.debug_url;
         new_.debug_password        := old_.debug_password;
         new_.rowversion            := 1;
         INSERT INTO connect_print_agent_task_tab VALUES new_;
         created_ := created_ + 1;
         Cdb_Log('Created task (' || created_ || ') [' || new_.instance_name || ']');
      EXCEPTION
         WHEN OTHERS THEN
            skipped_ := skipped_ + 1;
            Cdb_Log('Skipped task (' || skipped_ || ') [' || new_.instance_name || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Cdb_Log('Created ' || created_  || ' tasks.');
   Cdb_Log('Skipped ' || skipped_  || ' tasks.');
END;
-- [END IFS COMPLETE BLOCK]
/

COMMIT
/

PROMPT ====================================================
PROMPT Remove temporary TABLES
PROMPT ====================================================

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   Installation_SYS.Remove_Table('OLD_CONNECT_CONFIG_TMP_TAB', TRUE);
   Installation_SYS.Remove_Table('OLD_CONNECT_ENUM_TMP_TAB', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ====================================================
PROMPT Remove temporary functions
PROMPT ====================================================

DROP PROCEDURE Cdb_Log
/
DROP FUNCTION Convert_Enum_Value
/
DROP FUNCTION Convert_Boolean_Value
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_6');

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_IX_3';
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'STATE');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ======================================================================================
PROMPT Create temporary tables corresponding to runtime tables without ROWKEY and ROWVERSION
PROMPT Create types used in DML statements by synchronization procedures
PROMPT ======================================================================================

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   --
   -- Create temporary tables corresponding to runtime tables without ROWKEY and ROWVERSION
   --
   DECLARE
      PROCEDURE Execute(sql_ IN VARCHAR2) IS
      BEGIN
         --@ApproveDynamicStatement(2019-10-31,madrse)
         EXECUTE IMMEDIATE sql_;
      END Execute;

      PROCEDURE Create_Temporary_Table (
         tmp_table_name_ IN VARCHAR2,
         src_table_name_ IN VARCHAR2,
         pk_columns_     IN VARCHAR2) IS
      BEGIN
         Installation_SYS.Remove_Table(tmp_table_name_, TRUE);
         Dbms_Output.Put_Line('Creating temporary table ' || tmp_table_name_);
         Execute('CREATE GLOBAL TEMPORARY TABLE ' || tmp_table_name_ || ' ON COMMIT DELETE ROWS AS SELECT * FROM ' || src_table_name_ || ' WHERE 1 = 2');
         Execute('ALTER TABLE ' || tmp_table_name_ || ' DROP COLUMN rowkey');
         Execute('ALTER TABLE ' || tmp_table_name_ || ' DROP COLUMN rowversion');
         Execute('CREATE UNIQUE INDEX ' || REPLACE(tmp_table_name_, '_TAB', '_UIX') || ' ON ' || tmp_table_name_ || '(' || pk_columns_ || ')');
      END;
   BEGIN
      Create_Temporary_Table('CONFIG_INSTANCE_TMP_TAB'      , 'CONFIG_INSTANCE_TAB'        , 'GROUP_NAME, INSTANCE_NAME');
      Create_Temporary_Table('CONFIG_INSTANCE_PARAM_TMP_TAB', 'CONFIG_INSTANCE_PARAM_TAB'  , 'GROUP_NAME, INSTANCE_NAME, PARAMETER_NAME');
      Create_Temporary_Table('ROUTING_ADDRESS_RUN_TMP_TAB'  , 'ROUTING_ADDRESS_RUNTIME_TAB', 'ADDRESS_NAME' );
   END;

   --
   -- Create types used in DML statements by synchronization procedures
   --
   DECLARE
      columns_ Installation_SYS.ColumnTabType;
   BEGIN
      Installation_SYS.Remove_Type('CONNECT_RUNTIME_PARAM_TYPE', TRUE);
      Installation_SYS.Remove_Type('CONNECT_RUNTIME_PARAMS_TYPE', TRUE);
      Installation_SYS.Remove_Type('CONNECT_RUNTIME_ADDRESS_TYPE', TRUE);
      Installation_SYS.Remove_Type('CONNECT_RUNTIME_ADDRESSES_TYPE', TRUE);

      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'GROUP_NAME', 'VARCHAR2(20)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_NAME', 'VARCHAR2(50)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'INSTANCE_TYPE', 'VARCHAR2(50)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_NAME', 'VARCHAR2(50)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'PARAMETER_VALUE', 'VARCHAR2(4000)', 'Y');
      Installation_SYS.Create_Type('CONNECT_RUNTIME_PARAM_TYPE', columns_, TRUE);

      Installation_SYS.Create_Type('CONNECT_RUNTIME_PARAMS_TYPE', 'CONNECT_RUNTIME_PARAM_TYPE', TRUE);

      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(500)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'TRANSPORT_CONNECTOR', 'VARCHAR2(200)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'SENDER_INSTANCE', 'VARCHAR2(200)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_DATA', 'VARCHAR2(2000)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_DATA_2', 'VARCHAR2(2000)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'OPTIONS', 'VARCHAR2(2000)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE', 'VARCHAR2(100)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'ENCODING', 'VARCHAR2(50)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'SENDER', 'VARCHAR2(200)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'SENDER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'RECEIVER', 'VARCHAR2(2000)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'RECEIVER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'ZIP', 'NUMBER', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE_RESPONSE', 'NUMBER', 'Y');
      Installation_SYS.Create_Type('CONNECT_RUNTIME_ADDRESS_TYPE', columns_, TRUE);

      Installation_SYS.Create_Type('CONNECT_RUNTIME_ADDRESSES_TYPE', 'CONNECT_RUNTIME_ADDRESS_TYPE', TRUE);
   END;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ======================================================================================
PROMPT Modify entity RoutingAddress
PROMPT ======================================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSPORT_CONNECTOR', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_INSTANCE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENCODING', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SENDER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RECEIVER_ORGANIZATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'RESPONSE_TRANSFORMER', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ZIP', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENVELOPE_RESPONSE', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOMIZED', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_TYPE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_LU_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDITIONAL_HEADERS', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PASSWORD', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DIRECTORY', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OUTPUT_FILE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLSQL_METHOD', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_METHOD', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_RESOURCE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DESTINATION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SOAP_ACTION', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SEND_TO', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CC', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SUBJECT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ATTACHMENT_NAME', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'REST_ROOT_END_POINT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'AUTHENTICATION_METHOD', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'API_KEY', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_ID', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_SECRET', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TOKEN_ENDPOINT', 'VARCHAR2(500)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROTECTED_RESOURCE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_PK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ADDRESS_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_RK';
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_7');

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROUTE_RULE_SEQ', 'VARCHAR2(500)','Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

COMMIT
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_IX_3';
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROUTE_RULE_SEQ');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT ====================================================
PROMPT Set default values for mandatory columns
PROMPT ====================================================

UPDATE routing_rule_tab         SET enabled           = 0 WHERE enabled           IS NULL;
UPDATE routing_rule_tab         SET customized        = 0 WHERE customized        IS NULL;

UPDATE routing_rule_address_tab SET main_address      = 0 WHERE main_address      IS NULL;

UPDATE routing_address_tab      SET zip               = 0 WHERE zip               IS NULL;
UPDATE routing_address_tab      SET envelope_response = 0 WHERE envelope_response IS NULL;
UPDATE routing_address_tab      SET customized        = 0 WHERE customized        IS NULL;

PROMPT ====================================================
PROMPT Alter mandatory columns to NOT NULL
PROMPT ====================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_TAB';
   column_ Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ENABLED', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('CUSTOMIZED', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_RULE_ADDRESS_TAB';
   column_ Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('MAIN_ADDRESS', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ROUTING_ADDRESS_TAB';
   column_ Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ZIP', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('ENVELOPE_RESPONSE', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('CUSTOMIZED', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT =============================================================================
PROMPT Disable routing rules with BizAPI addresses
PROMPT =============================================================================

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   UPDATE fndcn_route_condition_tab R
      SET R.rule_enabled = 0
    WHERE R.rule_enabled = 1
      AND EXISTS
          (SELECT NULL
             FROM fndcn_route_address_ref_tab F, fndcn_route_address_tab A
            WHERE F.condition_id = R.condition_id
              AND A.address_id = F.address_ref
              AND A.transport_connector = 'BizAPI');
   Dbms_Output.Put_Line(SQL%rowcount||' Routing Rules with BizAPI addresses have been disabled');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT =============================================================================
PROMPT Transform old rows from FNDCN_ROUTE_ADDRESS_TAB to new entity RoutingAddrees
PROMPT =============================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   DEBUG_ON CONSTANT BOOLEAN := FALSE;

   FORMAT_TYPE   CONSTANT INTEGER  := Dbms_Crypto.DES_CBC_PKCS5;
   FORAMT_KEY    CONSTANT RAW(128) := Utl_Raw.Cast_To_Raw('Connect Key');
   FORMAT_VECTOR CONSTANT RAW(100) := Utl_Raw.Cast_To_Raw('Connect Vector');

   LF  CONSTANT VARCHAR2(1) := CHR(10);
   CR  CONSTANT VARCHAR2(1) := CHR(13);
   TAB CONSTANT VARCHAR2(1) := CHR(9);

   TYPE Parameter_Map IS TABLE OF VARCHAR2(2000) INDEX BY VARCHAR2(2000);

   -------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------

   PROCEDURE Log(msg_ IN VARCHAR2) IS
   BEGIN
      --Dbms_Output.Put_Line(msg_);
      --Dbms_Output.Put_Line(TRANSLATE(substr(msg_, 1, 2000), CR || LF, '!|'));
      Dbms_Output.Put_Line(TRANSLATE(msg_, CR || LF, '!|'));
   END Log;


   PROCEDURE Error(msg_ IN VARCHAR2) IS
   BEGIN
      Raise_Application_Error(-20105, msg_); -- Error_SYS.Appl_General
   END Error;


   PROCEDURE Debug(msg_ IN VARCHAR2) IS
   BEGIN
      IF DEBUG_ON THEN
         Log(msg_);
      END IF;
   END Debug;


   --
   -- Function copied from InsUtil.plsql
   --
   FUNCTION From_Base64 (txt_ IN VARCHAR2) RETURN VARCHAR2 IS
   BEGIN
      IF txt_ IS NULL THEN
         RETURN NULL;
      ELSE
         RETURN Utl_Raw.Cast_To_Varchar2(Utl_Encode.Base64_Decode(Utl_Raw.Cast_To_Raw(txt_)));
      END IF;
   END From_Base64;


   --
   -- Function copied from ConnectConfig.plsql
   --
   FUNCTION Encrypt_ (
      text_ IN VARCHAR2) RETURN VARCHAR2 IS
   BEGIN
      IF text_ IS NULL THEN
         RETURN NULL;
      ELSIF substr(text_, 1, 2) = '#' || TAB THEN
         --
         -- Text already encryped by old java encryption
         --
         RETURN text_;
      ELSIF substr(text_, 1, 2) = '^' || TAB THEN
         --
         -- Text already encryped by new PLSQL encryption
         --
         RETURN text_;
      ELSE
         --
         -- Encrypt using PLSQL encryption
         --
         RETURN '^' || TAB || Utl_Raw.Cast_To_Varchar2(
                              Utl_Encode.Base64_Encode(
                              Dbms_Crypto.Encrypt(Utl_Raw.Cast_To_Raw(text_), FORMAT_TYPE, FORAMT_KEY, FORMAT_VECTOR)));
      END IF;
   END Encrypt_;


   --
   -- Function copied from ConnectConfig.plsql
   --
   FUNCTION Cannonize_Options_ (
      options_ IN VARCHAR2) RETURN VARCHAR2
   IS
      buf_ VARCHAR2(2000);
   BEGIN
      IF options_ IS NULL THEN
         RETURN NULL;
      END IF;
      buf_ := REPLACE(options_, CR);
      buf_ := REGEXP_REPLACE(buf_, ' +', ' ');
      buf_ := REGEXP_REPLACE(buf_, LF || '+', LF);
      buf_ := LTRIM(buf_, LF);
      buf_ := RTRIM(buf_, LF);
      RETURN buf_;
   END Cannonize_Options_;


   FUNCTION Map_Rest_Auth_Method_To_Auth_Key(auth_method_ IN VARCHAR2) RETURN VARCHAR2 IS
   BEGIN
      CASE auth_method_
         WHEN 'OAuth2.0 Client Credentials' THEN RETURN 'ClientCredentials';
         WHEN 'OAuth2.0 ROPC'               THEN RETURN 'ROPC';
         ELSE                                    RETURN auth_method_;
      END CASE;
   END Map_Rest_Auth_Method_To_Auth_Key;


   --
   -- client_secret:Y2xpZW50LXNlY3JldA==
   -- client_id:client-id
   -- resource:
   --
   PROCEDURE Split_Authorization_Param (
      param_ IN     VARCHAR2,
      name_  IN OUT VARCHAR2,
      value_ IN OUT VARCHAR2)
   IS
      pos_  NUMBER;
   BEGIN
      IF param_ IS NULL THEN
         RETURN;
      END IF;
      pos_ := instr(param_, ':');
      IF pos_ = 0 THEN
         Error('Missing ":" in Authorization parameter [' || param_ || ']');
      END IF;
      name_  := substr(param_, 1, pos_ - 1);
      value_ := substr(param_, pos_ + 1);
   END Split_Authorization_Param;


   --
   -- Authorization=Basic dXNlcjpwYXNzd29yZA==
   --                     user_id:password
   --
   PROCEDURE Parse_Basic_Authorization (
      auth_value_ IN     VARCHAR2,
      login_      IN OUT VARCHAR2,
      password_   IN OUT VARCHAR2) IS
   BEGIN
      --Debug(''); --Parsing Basic Authorization [...'); -- || auth_value_ || ']');
      Split_Authorization_Param(From_Base64(auth_value_), login_, password_);
      password_ := Encrypt_(password_);
   END Parse_Basic_Authorization;


   --
   -- Parse ClientCredentials/Ropc authorization string into parameter map: name -> value
   --
   PROCEDURE Parse_Authorization_Value (
      auth_value_ IN     VARCHAR2,
      map_        IN OUT Parameter_Map)
   IS
      text_  VARCHAR2(2000) := auth_value_;
      len_   INTEGER := length(text_);
      p1_    INTEGER := 1;
      p2_    INTEGER;
      param_ VARCHAR2(2000);
      name_  VARCHAR2(2000);
      value_ VARCHAR2(2000);
   BEGIN
      WHILE p1_ <= len_ LOOP
         p2_ := instr(text_, ' ', p1_);
         IF p2_ = 0 THEN
            p2_ := len_ + 1;
         END IF;
         param_ := trim(substr(text_, p1_, p2_ - p1_));
         IF param_ IS NOT NULL THEN
            Split_Authorization_Param(param_, name_, value_);
            Debug('Parameter [' || name_ || '=' || value_ || ']');
            map_(name_) := value_;
         END IF;
         p1_ := p2_ + 1;
      END LOOP;
   END Parse_Authorization_Value;


   --
   -- Parse ClientCredentials Authorization string.
   --
   -- Authorization=ClientCredentials client_id:client-id client_secret:Y2xpZW50LXNlY3JldA== endpoint:token-endpoint resource:resource
   --                                 |                                        auth_value_                                           |

   --
   PROCEDURE Parse_ClientCredentials_Authorization (
      auth_value_     IN     VARCHAR2,
      client_id_      IN OUT VARCHAR2,
      client_secret_  IN OUT VARCHAR2,
      token_endpoint_ IN OUT VARCHAR2,
      resource_       IN OUT VARCHAR2)
   IS
      map_   Parameter_Map;
      name_  VARCHAR2(1000);
      value_ VARCHAR2(1000);
   BEGIN
      Debug('Parsing ClientCredentials Authorization [' || auth_value_ || ']');
      Parse_Authorization_Value(auth_value_, map_);
      name_ := map_.FIRST;
      WHILE name_ IS NOT NULL LOOP
         value_ := map_(name_);
         CASE name_
            WHEN 'client_id'     THEN client_id_      := value_;
            WHEN 'client_secret' THEN client_secret_  := Encrypt_(From_Base64(value_));
            WHEN 'endpoint'      THEN token_endpoint_ := value_;
            WHEN 'resource'      THEN resource_       := value_;
            ELSE
               Error('Unrecognized parameter [' || name_ || '] in ClientCredentials Authorization header [' || auth_value_ || ']');
         END CASE;
         name_ := map_.NEXT(name_);
      END LOOP;
   END Parse_ClientCredentials_Authorization;


   --
   -- Parse ROPC Authorization string.
   --
   -- Authorization=ROPC user_id:user-id password:cGFzc3dvcmQ= endpoint:token-endpoint
   --                    |                      auth_value_                          |

   --
   PROCEDURE Parse_Ropc_Authorization (
      auth_value_     IN     VARCHAR2,
      user_id_        IN OUT VARCHAR2,
      password_       IN OUT VARCHAR2,
      token_endpoint_ IN OUT VARCHAR2)
   IS
      map_   Parameter_Map;
      name_  VARCHAR2(1000);
      value_ VARCHAR2(1000);
   BEGIN
      Debug('Parsing ROPC Authorization [' || auth_value_ || ']');
      Parse_Authorization_Value(auth_value_, map_);
      name_ := map_.FIRST;
      WHILE name_ IS NOT NULL LOOP
         value_ := map_(name_);
         CASE name_
            WHEN 'user_id'  THEN user_id_        := value_;
            WHEN 'password' THEN password_       := Encrypt_(From_Base64(value_));
            WHEN 'endpoint' THEN token_endpoint_ := value_;
            ELSE
               Error('Unrecognized parameter [' || name_ || '] in ROPC Authorization header [' || auth_value_ || ']');
         END CASE;
         name_ := map_.NEXT(name_);
      END LOOP;
   END Parse_Ropc_Authorization;


   --
   -- Parse column OPTIONS into authorization string (auth_value_) and HTTP headers.
   --
   --   Authorization=Basic dXNlcjpwYXNzd29yZA==||||headers|
   --   Authorization=Bearer   api-key|||key1=value1|key2=value2||
   --   Authorization=Azure Shared Key  api-key||headers|
   --   Authorization=ClientCredentials client_id:client-id client_secret:Y2xpZW50LXNlY3JldA== endpoint:token-endpoint resource:resource|||||headers|
   --   Authorization=ROPC user_id:user-id password:cGFzc3dvcmQ= endpoint:token-endpoint|headers|
   --
   PROCEDURE Parse_Http_Options (
      options_    IN     VARCHAR2,
      auth_key_   IN     VARCHAR2,
      auth_value_ IN OUT VARCHAR2,
      headers_    IN OUT VARCHAR2)
   IS
      len_    INTEGER := length(options_);
      p1_     INTEGER := 1;
      p2_     INTEGER;
      option_ VARCHAR2(2000);
   BEGIN
      --Debug('Parsing HTTP options [' || options_ || ']');
      WHILE p1_ <= len_ LOOP
         p2_ := instr(options_, LF, p1_);
         IF p2_ = 0 THEN
            p2_ := len_ + 1;
         END IF;
         option_ := trim(substr(options_, p1_, p2_ - p1_));
         IF option_ IS NOT NULL THEN
            --('Option [' || option_ || ']');
            IF option_ LIKE 'Authorization=%' THEN
               IF option_ LIKE 'Authorization=' || auth_key_ || '%' THEN
                  auth_value_ := trim(substr(option_, length('Authorization=' || auth_key_) + 1));
               ELSE
                  Error('Invalid HTTP Options [' || options_ || '] for Authentication key [' || auth_key_ || ']');
               END IF;
            ELSE
               headers_ := CASE headers_ IS NULL WHEN TRUE THEN option_ ELSE headers_ || LF || option_ END;
            END IF;
         END IF;
         p1_ := p2_ + 1;
      END LOOP;
   END Parse_Http_Options;


   --
   -- Parse column OPTIONS for Mail transport connector.
   --
   --   FILE_NAME=attachment \n SUBJECT=subject
   --
   PROCEDURE Parse_Mail_Options (
      options_   IN     VARCHAR2,
      file_name_ IN OUT VARCHAR2,
      subject_   IN OUT VARCHAR2)
   IS
      len_    INTEGER := length(options_);
      p1_     INTEGER := 1;
      p2_     INTEGER;
      option_ VARCHAR2(2000);
   BEGIN
      --Debug('Parsing Mail options [' || options_ || ']');
      WHILE p1_ <= len_ LOOP
         p2_ := instr(options_, LF, p1_);
         IF p2_ = 0 THEN
            p2_ := len_ + 1;
         END IF;
         option_ := trim(substr(options_, p1_, p2_ - p1_));
         IF option_ IS NOT NULL THEN
            Debug('Option [' || option_ || ']');
            IF option_ LIKE 'FILE_NAME=%' THEN
               file_name_ := substr(option_, 11);
            ELSIF option_ LIKE 'SUBJECT=%' THEN
               subject_ := substr(option_, 9);
            ELSE
               Error('Invalid option [' || option_ || '] in Mail Options [' || options_ || ']');
            END IF;
         END IF;
         p1_ := p2_ + 1;
      END LOOP;
   END Parse_Mail_Options;


   PROCEDURE Copy_Routing_Address (
      old_   IN     fndcn_route_address_tab%ROWTYPE,
      new_   IN OUT routing_address_tab%ROWTYPE,
      label_ IN OUT VARCHAR2)
   IS
      auth_value_ VARCHAR2(2000);
      options_    VARCHAR2(2000) := Cannonize_Options_(old_.options);
   BEGIN
      IF old_.transport_connector NOT IN ('PL/SQL', 'BizAPI') AND old_.sender_instance IS NULL THEN
         Error('Missing sender_instance');
      END IF;
      --
      -- Base attributes, common to all Transport Connectors
      --
      new_.address_name          := old_.description;
      new_.transport_connector   := old_.transport_connector;
      new_.sender_instance       := old_.sender_instance;
      new_.envelope              := old_.envelope;
      new_.encoding              := old_.encoding;
      new_.sender                := old_.sender;
      new_.sender_organization   := old_.sender_organization;
      new_.receiver              := old_.receiver;
      new_.receiver_organization := old_.receiver_organization;
      new_.transformer           := old_.transformer;
      new_.response_transformer  := old_.response_transformer;
      new_.zip                   := nvl(old_.zip, 0);
      new_.envelope_response     := nvl(old_.envelope_response, 0);
      new_.customized            := nvl(old_.customized, 0);
      new_.rowversion            := 1;
      --
      -- Transport Connector specific attributes
      --
      CASE new_.transport_connector
         WHEN 'REST' THEN
            new_.rest_root_end_point   := old_.address_data;
            new_.authentication_method := old_.address_data_2;
            Parse_Http_Options(options_, Map_Rest_Auth_Method_To_Auth_Key(new_.authentication_method), auth_value_, new_.additional_headers);
            CASE new_.authentication_method
               WHEN 'None' THEN
                  NULL;
               WHEN 'Basic' THEN
                  Parse_Basic_Authorization(auth_value_, new_.user_id, new_.password);
               WHEN 'Bearer' THEN
                  new_.api_key := auth_value_;
               WHEN 'Azure Shared Key' THEN
                  new_.api_key := auth_value_;
               WHEN 'OAuth2.0 Client Credentials' THEN
                  Parse_ClientCredentials_Authorization(auth_value_, new_.client_id, new_.client_secret, new_.token_endpoint, new_.protected_resource);
               WHEN 'OAuth2.0 ROPC' THEN
                  Parse_Ropc_Authorization(auth_value_, new_.user_id, new_.password, new_.token_endpoint);
               ELSE
                  Error('Unexpected authentication method [' || new_.authentication_method || ']');
            END CASE;

         WHEN 'Ftp' THEN
            new_.directory   := old_.address_data_2;
            new_.output_file := old_.address_data;

         WHEN 'Sftp' THEN
            new_.directory   := old_.address_data_2;
            new_.output_file := old_.address_data;

         WHEN 'File' THEN
            new_.output_file := old_.address_data;

         WHEN 'PL/SQL' THEN
            new_.plsql_method := old_.address_data;

         WHEN 'JMS' THEN
            new_.destination := old_.address_data;

         WHEN 'Http' THEN
            new_.url         := old_.address_data;
            new_.soap_action := old_.address_data_2;
            Parse_Http_Options(options_, 'Basic', auth_value_, new_.additional_headers);
            Parse_Basic_Authorization(auth_value_, new_.user_id, new_.password);

         WHEN 'Mail' THEN
            new_.send_to := old_.address_data;
            new_.cc      := old_.address_data_2;
            Parse_Mail_Options(options_, new_.attachment_name, new_.subject);

         ELSE
            IF new_.transport_connector LIKE 'Custom%' THEN
               new_.custom_type := ltrim(substr(new_.transport_connector, 7, length(new_.transport_connector) - 6), '-');
               new_.transport_connector := 'Custom';
               label_ := 'WARNING! Created invalid Custom address of type ['||new_.custom_type||'] with empty CustomPlsqlMethod';
            ELSE
               Error('Unexpected transport connector [' || new_.transport_connector || ']');
            END IF;
      END CASE;
   END Copy_Routing_Address;

BEGIN
   DECLARE
      fetched_ NUMBER := 0;
      created_ NUMBER := 0;
      skipped_ NUMBER := 0;
   BEGIN
      FOR old_ IN (SELECT * FROM fndcn_route_address_tab ORDER BY description) LOOP
         DECLARE
            new_   routing_address_tab%ROWTYPE;
            label_ VARCHAR2(1000);
         BEGIN
            fetched_ := fetched_ + 1;
            Copy_Routing_Address(old_, new_, label_);
            INSERT INTO routing_address_tab VALUES new_;
            created_ := created_ + 1;
            IF label_ IS NULL THEN
               label_ := 'Created address';
            END IF;
            Log(label_ || ' [' || new_.address_name || ']');
         EXCEPTION
            WHEN OTHERS THEN
               skipped_ := skipped_ + 1;
               Log('WARNING! Skipped address [' || old_.description || '] because of error: ' || substr(SQLERRM, 1, 2000));
         END;
      END LOOP;
      Log('Created ' || created_  || ' addresses.');
      Log('Skipped ' || skipped_  || ' addresses.');
   END;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT =============================================================================
PROMPT Transform old routing rules to new Aurena entities
PROMPT =============================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   fetched_ NUMBER := 0;
   created_ NUMBER := 0;
   skipped_ NUMBER := 0;

   PROCEDURE Log(msg_ IN VARCHAR2) IS
   BEGIN
      Dbms_Output.Put_Line(msg_);
   END Log;
BEGIN
   FOR old_ IN (SELECT R.condition_id,
                       R.description,
                       R.direction,
                       R.route_type,
                       nvl(R.rule_enabled, 0) rule_enabled,
                       R.queue,
                       nvl(substr(L.location, 1, length(L.location)-9), substr(S.location, 1, length(S.location)-5)) location_type,
                       L.search_path location,
                       S.search_path selector,
                       R.customized
                  FROM fndcn_route_condition_tab R
                       LEFT OUTER JOIN fndcn_condition_part_tab L
                          ON L.condition_id = R.condition_id AND L.location LIKE '%_LOCATION'
                       LEFT OUTER JOIN fndcn_condition_part_tab S
                          ON S.condition_id = R.condition_id AND S.location LIKE '%_NAME'
                 ORDER BY description)
   LOOP
      fetched_ := fetched_ + 1;
      DECLARE
         new_ routing_rule_tab%ROWTYPE;
         condition_count_ NUMBER;
         address_count_   NUMBER;
      BEGIN
         new_.rule_name       := old_.description;
         new_.direction       := old_.direction;
         new_.route_type      := old_.route_type;
         new_.enabled         := old_.rule_enabled;
         new_.queue           := old_.queue;
         new_.location_type   := old_.location_type;
         new_.reader_instance := old_.location;
         new_.selector        := old_.selector;
         new_.customized      := nvl(old_.customized, 0);
         new_.rowversion      := 1;

         SAVEPOINT new_rule;

         INSERT INTO routing_rule_tab VALUES new_;
         created_ := created_ + 1;

         INSERT INTO routing_rule_condition_tab (rule_name, seq_no, search_path, op, match_query_expr, rowversion)
         SELECT old_.description, condition_part_id, search_path, op, match_query_expr, 1
           FROM fndcn_condition_part_tab
          WHERE condition_id = old_.condition_id
            AND location = 'CONTENT';
          condition_count_ := SQL%ROWCOUNT;

         INSERT INTO routing_rule_address_tab (rule_name, address_name, chain_link_no, main_address, rowversion)
         SELECT old_.description, A.description, nvl(F.chain_link_no,decode(nvl(F.response,0),0,1,2)), nvl(F.main_address, 0), 1
           FROM fndcn_route_address_ref_tab F, fndcn_route_address_tab A, routing_address_tab AA
          WHERE F.condition_id = old_.condition_id
            AND A.address_id = F.address_ref
            AND AA.address_name = A.description;
         address_count_ := SQL%ROWCOUNT;

         Log('Created rule [' || new_.rule_name || '] conditions [' || condition_count_ || '] address references [' || address_count_ || ']');
      EXCEPTION
         WHEN OTHERS THEN
            ROLLBACK TO new_rule;
            skipped_ := skipped_ + 1;
            Log('WARNING! Skipped rule [' || old_.description || '] because of error: ' || substr(SQLERRM, 1, 2000));
      END;
   END LOOP;
   Log('Created ' || created_  || ' routing rules.');
   Log('Skipped ' || skipped_  || ' routing rules.');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT =============================================================================
PROMPT Create tables for Report rule action properties 
PROMPT =============================================================================

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REP_RULE_ACT_PRPRTS_LOV_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REP_RUL_ACT_PRP_VAL_LOV_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'POSSIBLE_VALUE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT =============================================================================
PROMPT Update ApplicationMessage.RouteRuleSeq from old ConditionId to new RuleName
PROMPT =============================================================================

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   UPDATE fndcn_application_message_tab A
      SET route_rule_seq = (SELECT R.description
                              FROM fndcn_route_condition_tab R
                             WHERE R.condition_id = A.route_rule_seq)
    WHERE INSTR(route_rule_seq, ' ') = 0
      AND route_rule_seq <> (SELECT R.description
                               FROM fndcn_route_condition_tab R
                              WHERE R.condition_id = A.route_rule_seq);
   Dbms_Output.Put_Line(SQL%rowcount||' ApplicationMessage references to Routing Rule updated from ConditionId to RuleName');
END;
-- [END IFS COMPLETE BLOCK]
/

COMMIT
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_8');

--------------------------------------------------------------------------------------------------------
PROMPT Move printer definitions from PrintAgent task template to PrinterMapping entity
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   INSERT INTO printer_mapping_tab (template_instance_name, logical_printer_id, physical_printer, rowversion)
   SELECT D.instance_name, D.key, D.value, 1
     FROM fndcn_config_param_det_tab D, fndcn_config_param_inst_tab I
    WHERE D.area_name = 'Integration'
      AND D.group_name = 'TaskTemplates'
      AND D.parameter_name = 'PRINTERS'
      AND I.area_name = D.area_name
      AND I.group_name = D.group_name
      AND I.instance_name = D.instance_name
      AND I.instance_type = 'PrintAgent'
      AND NOT EXISTS (SELECT NULL
                        FROM printer_mapping_tab P
                       WHERE P.template_instance_name = D.instance_name
                         AND P.logical_printer_id = D.key);
   Dbms_Output.Put_Line(SQL%ROWCOUNT||' rows created in PRINTER_MAPPING_TAB');
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Move properties defined in J2EE_SERVER to JsfProperties entity
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   INSERT INTO jsf_property_tab
      (property_group, property_name, property_value, property_source, property_type, timestamp, rowversion)
   SELECT 'IFS', P.key, P.value, 'CUSTOM', 'STRING', systimestamp, 1
    FROM fndcn_config_param_det_tab P
   WHERE P.area_name = 'Integration'
     AND P.group_name = 'Servers'
     AND P.instance_name = 'J2EE_SERVER'
     AND P.parameter_name = 'PROPERTIES'
     AND NOT EXISTS (SELECT NULL
                       FROM jsf_property_tab J
                      WHERE J.property_group = 'IFS'
                        AND J.property_name = P.key);
   Dbms_Output.Put_Line(SQL%ROWCOUNT||' rows created in JSF_PROPERTY_TAB');
END;
-- [END IFS COMPLETE BLOCK]
/

--------------------------------------------------------------------------------------------------------
PROMPT Move PL/SQL methods AND internal operations timeouts defined in J2EE_SERVER to JsfProperties entity
--------------------------------------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   INSERT INTO jsf_property_tab
      (property_group, property_name, property_value, property_source, property_type, timestamp, rowversion)
   SELECT 'IFS',
          'ifs.workTimeout.'|| decode(instr(P.key,'.'), 0, P.key, upper(replace(P.key,' ')) ),
          P.value, 'CUSTOM', 'INTEGER', systimestamp, 1
     FROM fndcn_config_param_det_tab P
    WHERE P.area_name = 'Integration'
      AND P.group_name = 'Servers'
      AND P.instance_name = 'J2EE_SERVER'
      AND P.parameter_name in ('BIZAPI_WORK_TIMEOUTS', 'PLSQL_WORK_TIMEOUTS')
      AND (instr(P.key,'.') > 0 OR instr(P.key,':') > 0)
      AND NOT EXISTS (SELECT NULL
                        FROM jsf_property_tab J
                       WHERE J.property_group = 'IFS'
                       AND J.property_name = 'ifs.workTimeout.'|| decode(instr(P.key,'.'), 0, P.key, upper(replace(P.key,' ')) ) );
   Dbms_Output.Put_Line(SQL%ROWCOUNT||' rows created in JSF_PROPERTY_TAB');
END;
-- [END IFS COMPLETE BLOCK]
/

COMMIT
/
EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_9');

PROMPT Create table LOB_FILE_IMPORT_TAB


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'LOB_FILE_IMPORT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TASK_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_PATH', 'VARCHAR2(500)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_DATE', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROCESSED', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_BY', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Create_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('IMPORT_FILE_TEXT', 'CLOB', 'Y', NULL, 'LOB (IMPORT_FILE_TEXT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('IMPORT_FILE_BINARY', 'BLOB', 'Y', NULL, 'LOB (IMPORT_FILE_BINARY) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Create index on table LOB_FILE_IMPORT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'LOB_FILE_IMPORT_PK';
   table_name_ VARCHAR2(30) := 'LOB_FILE_IMPORT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','2110.upg','Timestamp_10');

PROMPT Increase column length in tables database_sys_oracle_index_tab and cleanup_temporary_data_tab

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'DATABASE_SYS_ORACLE_INDEX_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('INDEX_NAME', 'VARCHAR2(128)','N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CLEANUP_TEMPORARY_DATA_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('TABLE_NAME', 'VARCHAR2(128)','N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   column_ := Installation_SYS.Set_Column_Values('COLUMN_NAME', 'VARCHAR2(128)','N');
   Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

exec Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','2110.upg','Timestamp_11');

-- ***** BPA Start *****

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '200206_TEWF-28_Fndbas', 'Start');

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'BPA_ASYNC_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LU_KEY', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'BPA_KEY', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'BPA_TYPE', 'VARCHAR2(32)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'STATUS', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(120)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'RETRY_COUNT', 'NUMBER(5)', 'N', 0);
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('ATTR', 'CLOB', 'Y', NULL, 'LOB (ATTR) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-----------------------------------------------------------------------------
-------------------- INDEX DEFINITIONS --------------------------------------
-----------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_ASYNC_SYS_TAB_PK';
   table_name_ VARCHAR2(30) := 'BPA_ASYNC_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '200206_TEWF-28_Fndbas', 'Done');

-- ***** BPA End *****

-- ***** BPA Diagram Entity Start ******

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '20200406_TEWF-50_fndbas', 'Start');

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'BPA_DIAGRAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'VARCHAR2(60)', 'N', 'sys_guid()');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('FILE_DATA', 'BLOB', 'Y', NULL, 'LOB (FILE_DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_DIAGRAM_PK';
   table_name_ VARCHAR2(30) := 'BPA_DIAGRAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_DIAGRAM_RK';
   table_name_ VARCHAR2(30) := 'BPA_DIAGRAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '20200406_TEWF-50_fndbas', 'Done');
-- ***** BPA Diagram Entity End ******************


EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_12');

PROMPT Disable column rowkey for some tables

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30);
   column_     Installation_SYS.ColRec;
BEGIN
   table_name_ := 'FNDRR_CLIENT_PROFILE_VALUE_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'HISTORY_LOG_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'HISTORY_LOG_ATTRIBUTE_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'LANGUAGE_FILE_EXPORT_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'LANGUAGE_FILE_IMPORT_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'LANGUAGE_TRANSLATION_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'REPLICATION_LOG_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
   table_name_ := 'SERVER_LOG_TAB';
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY') THEN
      IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
         column_ := Installation_SYS.Set_Column_Values('ROWKEY_700');
         Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
      END IF;
      Installation_SYS.Rename_Column(table_name_, 'ROWKEY_700', 'ROWKEY');
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'ROWKEY_700') THEN
      column_ := Installation_SYS.Set_Column_Values('ROWKEY_700', 'VARCHAR2(50)','Y','$DEFAULT_NULL$');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_13');

PROMPT Adding column blob_value to plsqlap_environment_tab

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'PLSQLAP_ENVIRONMENT_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('BLOB_VALUE', 'BLOB', 'Y', NULL, 'LOB (BLOB_VALUE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_14');

PROMPT Adding COLUMNS TO  FND_PROJ_ENTITYSET_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'OPERATIONS_ALLOWED', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'FROM_VIEW', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USED_LU', 'VARCHAR2(128)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USAGE_TYPE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EXCLUDE_FROM_CONFIG', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_IX';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'USED_LU');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table FND_PROJ_ENTITYSET_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITYSET_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITYSET_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON_TYPE', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON', 'VARCHAR2(128)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENTITYSET_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENTITYSET_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITYSET_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table FND_PROJ_QUERY_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_QUERY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'QUERY_NAME', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FROM_VIEW', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USED_LU', 'VARCHAR2(128)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'USAGE_TYPE', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EXCLUDE_FROM_CONFIG', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_QUERY_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_QUERY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'QUERY_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_QUERY_IX';
   table_name_ VARCHAR2(30) := 'FND_PROJ_QUERY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'USED_LU');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'QUERY_NAME');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_15');

PROMPT Increase EXPR1 and EXPR2 column length from 400 to 4000 in REPORT_RULE_CONDITION_TAB.

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_   Installation_SYS.colRec;
	table_name_    VARCHAR2(30) := 'REPORT_RULE_CONDITION_TAB';
BEGIN 
   column_ := Installation_SYS.Set_Column_Values ('EXPR1', 'VARCHAR2(4000)');
   Installation_SYS.Alter_Table_Column (table_name_, 'M', column_, TRUE);
   
   column_ := Installation_SYS.Set_Column_Values ('EXPR2', 'VARCHAR2(4000)');
   Installation_SYS.Alter_Table_Column (table_name_, 'M', column_, TRUE);		
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_16');

PROMPT Changing ROWVERSION type to DATE in REMOTE_PRINTING_NODE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REMOTE_PRINTING_NODE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Installation_Sys.Alter_Table_Column(table_name_, 'MODIFY', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_17');

PROMPT Delete all obsolete QRP layouts from system

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   --Remove old qrp layout
   EXECUTE IMMEDIATE 'DELETE FROM REPORT_SYS_LAYOUT_TAB WHERE LAYOUT_TYPE = ''BUILDER''';
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_18');

PROMPT Adding column PARAMETERS to FNDCN_MESSAGE_BODY_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_MESSAGE_BODY_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('PARAMETERS', 'CLOB', 'Y', NULL, 'LOB (PARAMETERS) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_19');

PROMPT Converting column Long_Text to CLOB in table LANGUAGE_TRANSLATION_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_TRANSLATION_TAB';
BEGIN
   IF ( Installation_SYS.Get_Column_Type(table_name_, 'LONG_TEXT') = 'VARCHAR2' ) THEN
      -- rename old column
      Installation_SYS.Rename_Column(table_name_, 'LONG_TEXT_OLD', 'LONG_TEXT', TRUE);

      -- add new clob column
      column_ := Installation_SYS.Set_Column_Values('LONG_TEXT', 'CLOB', 'Y', NULL, 'LOB (LONG_TEXT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
      Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_TRANSLATION_TAB';
BEGIN
   IF ( Installation_SYS.Column_Exist(table_name_, 'LONG_TEXT_OLD' ) ) THEN
      -- move existing data to new column
      EXECUTE IMMEDIATE 'UPDATE LANGUAGE_TRANSLATION_TAB SET LONG_TEXT = LONG_TEXT_OLD';

      -- Drop old column
      column_ := Installation_SYS.Set_Column_Values('LONG_TEXT_OLD', 'VARCHAR(4000)', 'Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Converting column Long_Text to CLOB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_TRANSLATION_TAB';
BEGIN
   IF ( Installation_SYS.Get_Column_Type(table_name_, 'LONG_REJECT_INFORMATION') = 'VARCHAR2' ) THEN
      -- rename old column
      Installation_SYS.Rename_Column(table_name_, 'LONG_REJECT_INFORMATION_OLD', 'LONG_REJECT_INFORMATION', TRUE);

      -- add new clob column
      column_ := Installation_SYS.Set_Column_Values('LONG_REJECT_INFORMATION', 'CLOB', 'Y', NULL, 'LOB (LONG_REJECT_INFORMATION) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
      Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_     Installation_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'LANGUAGE_TRANSLATION_TAB';
BEGIN
   IF ( Installation_SYS.Column_Exist(table_name_, 'LONG_REJECT_INFORMATION_OLD' ) ) THEN
      -- move existing data to new column
      EXECUTE IMMEDIATE 'UPDATE LANGUAGE_TRANSLATION_TAB SET LONG_REJECT_INFORMATION = LONG_REJECT_INFORMATION_OLD';

      -- Drop old column
      column_ := Installation_SYS.Set_Column_Values('LONG_REJECT_INFORMATION_OLD', 'VARCHAR(4000)', 'Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_20');

PROMPT Set default language of database tasks impacted by bugfix 61340, from PROG to en 

UPDATE batch_schedule_tab
   SET lang_code = 'en'
 WHERE lang_code NOT IN (SELECT lang_code
                         FROM language_code_tab);
   
COMMIT;

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_21');

PROMPT Adding COLUMN DESCRIPTION, CHECKPOINT AND LEGACY_CHECKPOINTS COLUMNS TO FND_PROJ_ACTION_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CHECKPOINT', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LEGACY_CHECKPOINTS', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding COLUMN DESCRIPTION, CHECKPOINT AND LEGACY_CHECKPOINTS COLUMNS TO FND_PROJ_ENT_ACTION_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CHECKPOINT', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'LEGACY_CHECKPOINTS', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_22');

PROMPT  Increased the Execution_plan column length from 200 to 4000 on Batch_Schedule_Tab

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_   	  Installation_SYS.colRec;
   table_name_    VARCHAR2(30) := 'BATCH_SCHEDULE_TAB';
BEGIN 
    column_ := Installation_SYS.Set_Column_Values ('EXECUTION_PLAN', 'VARCHAR2(4000)');
    Installation_SYS.Alter_Table_Column (table_name_, 'M', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_23');

PROMPT Invalidate Query Hints of views changed through the Performance Project

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   CURSOR invalid_views_ IS
      SELECT view_name
      FROM query_hint_col_tab
      WHERE regexp_like(source, '[Tt]0\.')
      GROUP BY view_name;
BEGIN
   FOR inv_rec_ IN invalid_views_ LOOP
      BEGIN
         UPDATE query_hint_view_tab SET TIMESTAMP = TO_DATE('1999/09/09 9:09:09', 'YYYY/MM/DD HH:MI:SS')
         WHERE view_name = inv_rec_.view_name;
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;
   END LOOP;
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_24');

PROMPT Adding materialized view for schedulable methods

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   stmt_ VARCHAR2(32000);
BEGIN
   Installation_SYS.Remove_Materialized_View('Batch_Schedulable_Method_MV', TRUE);
   stmt_ := 'CREATE MATERIALIZED VIEW Batch_Schedulable_Method_MV
   BUILD DEFERRED
   USING NO INDEX
   REFRESH COMPLETE ON DEMAND
   EVALUATE USING CURRENT EDITION
   AS
   SELECT a.module       module,
          b.lu_name      lu_name,
          a.lu_prompt    lu_prompt,
          b.package_name package_name,
          b.method_name  method_name,
          c.name         module_name,
          b.rowid        objid
   FROM   dictionary_sys_tab        a,
          dictionary_sys_method_tab b,
          module_tab                c
   WHERE  b.lu_name = a.lu_name
   AND    a.module = c.module
   AND    b.package_name LIKE ''%_API''
   AND    b.method_name NOT IN (''Init'',
                                ''Exist'',
                                ''Exists'',
                                ''Get'',
                                ''Modify__'',
                                ''New__'',
                                ''Remove__'',
                                ''Lock__'',
                                ''Get_Objkey'',
                                ''Get_Key_By_Rowkey'',
                                ''Rowkey_Exist'',
                                ''Get_By_Rowkey'',
                                ''Get_Metadata_Version_'',
                                ''Get_Metadata_Content_'',
                                ''Crud_Update'',
                                ''Crud_Delete'',
                                ''Crud_Default'',
                                ''Crud_Create'',
                                ''Language_Refreshed'',
                                ''Exist_Db'',
                                ''Exists_Db'',
                                ''Verify_Metadata_Sql_Content_'',
                                ''Verify_Metadata_Plsql_Content_'',
                                ''Get_Metadata_Category_'',
                                ''Get_Metadata_Service_Group_'',
                                ''Enumerate'',
                                ''Encode'',
                                ''Decode'',
                                ''Enumerate_Db'',
                                ''Decode_List'',
                                ''Exist_List'',
                                ''Encode_List'',
                                ''Exists_List'',
                                ''Get_Client_Value'',
                                ''Get_Db_Value'',
                                ''Exist_List_Db'',
                                ''Exists_List_Db'',
                                ''Enumerate_Client_And_Db'',
                                ''Get_Description'',
                                ''Get_State'',
                                ''New'',
                                ''Finite_State_Events__'',
                                ''Finite_State_Decode__'',
                                ''Enumerate_Events__'',
                                ''Enumerate_States__'',
                                ''Finite_State_Encode__'',
                                ''Enumerate_States_Db__'',
                                ''Get_Objstate'',
                                ''Get_Objevents'',
                                ''Finite_State_Init_'',
                                ''Check_Exist'',
                                ''Ev_Set_Active'',
                                ''Ev_Set_Blocked'',
                                ''Ev_Set_Hidden'',
                                ''Set_Active__'',
                                ''Set_Blocked__'',
                                ''Set_Hidden__''
                                )
   AND NOT EXISTS (SELECT 1
           FROM   user_arguments e
           WHERE  (e.in_out IN (''OUT'', ''IN/OUT'') OR e.data_type = ''CLOB'' OR e.data_type = ''BLOB'')
           AND    e.package_name = UPPER(b.package_name)
           AND    e.object_name = UPPER(b.method_name))';
           
   --@ApproveDynamicStatement(2018-10-11,anjgse)
   EXECUTE IMMEDIATE stmt_;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   stmt_ VARCHAR2(32000);
BEGIN
   Installation_SYS.Remove_Materialized_View('Batch_Sche_Validate_Method_MV',TRUE);
   stmt_ := 'CREATE MATERIALIZED VIEW Batch_Sche_Validate_Method_MV
BUILD DEFERRED
USING NO INDEX
REFRESH COMPLETE ON DEMAND
EVALUATE USING CURRENT EDITION
AS
SELECT a.module       module,
       b.lu_name      lu_name,
       a.lu_prompt    lu_prompt,
       b.package_name package_name,
       b.method_name  method_name,
       c.name         module_name,
       b.rowid        objid
FROM   dictionary_sys_tab        a,
       dictionary_sys_method_tab b,
       module_tab                c
WHERE  b.lu_name = a.lu_name
AND    a.module = c.module
AND    b.package_name LIKE ''%_API''
AND    b.method_name NOT IN (''Init'',
                             ''Exist'',
                             ''Exists'',
                             ''Get'',
                             ''Modify__'',
                             ''New__'',
                             ''Remove__'',
                             ''Lock__'',
                             ''Get_Objkey'',
                             ''Get_Key_By_Rowkey'',
                             ''Rowkey_Exist'',
                             ''Get_By_Rowkey'',
                             ''Get_Metadata_Version_'',
                             ''Get_Metadata_Content_'',
                             ''Crud_Update'',
                             ''Crud_Delete'',
                             ''Crud_Default'',
                             ''Crud_Create'',
                             ''Language_Refreshed'',
                             ''Exist_Db'',
                             ''Exists_Db'',
                             ''Verify_Metadata_Sql_Content_'',
                             ''Verify_Metadata_Plsql_Content_'',
                             ''Get_Metadata_Category_'',
                             ''Get_Metadata_Service_Group_'',
                             ''Enumerate'',
                             ''Encode'',
                             ''Decode'',
                             ''Enumerate_Db'',
                             ''Decode_List'',
                             ''Exist_List'',
                             ''Encode_List'',
                             ''Exists_List'',
                             ''Get_Client_Value'',
                             ''Get_Db_Value'',
                             ''Exist_List_Db'',
                             ''Exists_List_Db'',
                             ''Enumerate_Client_And_Db'',
                             ''Get_Description'',
                             ''Get_State'',
                             ''New'',
                             ''Finite_State_Events__'',
                             ''Finite_State_Decode__'',
                             ''Enumerate_Events__'',
                             ''Enumerate_States__'',
                             ''Finite_State_Encode__'',
                             ''Enumerate_States_Db__'',
                             ''Get_Objstate'',
                             ''Get_Objevents'',
                             ''Finite_State_Init_'',
                             ''Check_Exist'',
                             ''Ev_Set_Active'',
                             ''Ev_Set_Blocked'',
                             ''Ev_Set_Hidden'',
                             ''Set_Active__'',
                             ''Set_Blocked__'',
                             ''Set_Hidden__''
                             )
AND NOT EXISTS (SELECT 1
        FROM   user_arguments e
        WHERE  (e.in_out IN (''OUT'', ''IN/OUT'') OR e.data_type = ''CLOB'' OR e.data_type = ''BLOB'' OR (e.in_out = ''IN'' AND e.data_type !=''VARCHAR2''))
        AND    e.package_name = UPPER(b.package_name)
        AND    e.object_name = UPPER(b.method_name))';
   
   EXECUTE IMMEDIATE stmt_;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_25');

PROMPT Chanage the data type of LogId column in Report_Rule_Log_tab from VARCHAR to NUMBER

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REPORT_RULE_LOG_TAB';
BEGIN
   IF ( Installation_SYS.Get_Column_Type(table_name_, 'LOG_ID') = 'VARCHAR2' ) THEN
      --Remove old log entries
      EXECUTE IMMEDIATE 'TRUNCATE TABLE REPORT_RULE_LOG_TAB';
      --Change type from VARCHAR to NUMBER
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'LOG_ID', 'NUMBER');
      Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_26');

PROMPT Set the max value of sequence  TRANSACTION_SYS_SEQ

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   seq_max_val_ NUMBER := 2147483647;
BEGIN
   IF transaction_sys_seq.NEXTVAL >= seq_max_val_ THEN
      EXECUTE IMMEDIATE 'ALTER SEQUENCE transaction_sys_seq RESTART START WITH 1';
      EXECUTE IMMEDIATE 'ALTER SEQUENCE transaction_sys_seq MAXVALUE '|| seq_max_val_||' CYCLE';
   ELSE
      EXECUTE IMMEDIATE 'ALTER SEQUENCE transaction_sys_seq MAXVALUE '|| seq_max_val_||' CYCLE';
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_27');

PROMPT If the WEB_USER is null set IDENTITY as the WEB_USER.

UPDATE fnd_user_tab
   SET web_user = identity
 WHERE web_user IS NULL;

COMMIT;

PROMPT Altering WEB_USER column AS mandatory IN FND_USER_TAB.

DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_USER_TAB';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'WEB_USER', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_28');

PROMPT Increasing length of NAME column in LANGUAGE_ATTRIBUTE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'LANGUAGE_ATTRIBUTE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF Installation_SYS.Column_Exist(table_name_, 'NAME') THEN
      column_ := Installation_SYS.Set_Column_Values('NAME', 'VARCHAR2(200)','N');
      Installation_SYS.Alter_Table_Column(table_name_, 'MOD', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_29');

PROMPT Add AQ queues for synchronous messages

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   PROCEDURE Drop_Queue_Table__ (table_name_ VARCHAR2) IS
      no_table EXCEPTION;
      PRAGMA   EXCEPTION_INIT(no_table, -24002);
   BEGIN
      Dbms_Aqadm.Drop_Queue_Table(table_name_, true);
   EXCEPTION
      WHEN no_table THEN
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END Drop_Queue_Table__;

   PROCEDURE Create_And_Start_Queue(queue_ VARCHAR2) IS
      queue_table_ VARCHAR2(100) := queue_||'_TAB';
   BEGIN
      Drop_Queue_Table__(queue_table_);

      Dbms_Aqadm.Create_Queue_Table
        (queue_table        => queue_table_,
         queue_payload_type => 'SYS.AQ$_JMS_BYTES_MESSAGE',
         storage_clause     => 'TABLESPACE &IFSAPP_DATA',
         multiple_consumers => FALSE);

      Dbms_Aqadm.Create_Queue
        (queue_name  => queue_,
         queue_table => queue_table_);
      Dbms_Aqadm.Start_Queue (queue_);
   END Create_And_Start_Queue;

BEGIN
   Create_And_Start_Queue('BATCH_PROC_QUEUE');
   Create_And_Start_Queue('BATCH_PROC_QUEUE_MAIN');
   Create_And_Start_Queue('BATCH_PROC_RESP_QUEUE');
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Add INVOKE_TIMEOUT column to the FNDCN_APPLICATION_MESSAGE_TAB TABLE

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FNDCN_APPLICATION_MESSAGE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('INVOKE_TIMEOUT', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Create table for entity ApplicationMessageStat

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'APPLICATION_MESSAGE_STAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STAT_TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'START_TIMESTAMP', 'TIMESTAMP(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STAT_CATEGORY', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'END_TIMESTAMP', 'TIMESTAMP(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'APPLICATION_MESSAGE_STAT_PK';
   table_name_ VARCHAR2(30) := 'APPLICATION_MESSAGE_STAT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'STAT_TYPE');
   Installation_SYS.Set_Table_Column(columns_, 'START_TIMESTAMP');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Create temporary tables for entity ApplicationMessageStat

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   --
   -- Temporary table for report input
   --
   DECLARE
      table_name_ VARCHAR2(30) := 'APP_MESSAGE_STAT_INPUT_TAB';
      index_name_ VARCHAR2(30) := 'APP_MESSAGE_STAT_INPUT_PK';
      columns_ Installation_SYS.ColumnTabType;
   BEGIN
      Installation_SYS.Remove_Table(table_name_, TRUE);
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID', 'NUMBER', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'START_DIFF'            , 'NUMBER', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'END_DIFF'              , 'NUMBER', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'DATABASE_SHIFT'        , 'NUMBER', 'Y');
      Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID');
      Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U');
   END;
   --
   -- Temporary table for report output
   --
   DECLARE
      table_name_ VARCHAR2(30) := 'APP_MESSAGE_STAT_REPORT_TAB';
      index_name_ VARCHAR2(30) := 'APP_MESSAGE_STAT_REPORT_PK';
      columns_ Installation_SYS.ColumnTabType;
   BEGIN
      Installation_SYS.Remove_Table(table_name_, TRUE);
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID', 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'CLUSTER_NAME'          , 'VARCHAR2(20)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'START_DIFF'            , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'END_DIFF'              , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'DATABASE_SHIFT'        , 'NUMBER'      , 'Y');

      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_AQ_START_TIME'  , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_AQ_END_TIME'    , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_AQ_TIME'        , 'NUMBER'      , 'N');

      Installation_SYS.Set_Table_Column(columns_, 'CREATE_AM_START_TIME'  , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'CREATE_AM_END_TIME'    , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'CREATE_AM_TIME'        , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'CREATE_AM_BEFORE'      , 'NUMBER'      , 'N');

      Installation_SYS.Set_Table_Column(columns_, 'FORWARD_MDB_START_TIME', 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'FORWARD_MDB_END_TIME'  , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'FORWARD_MDB_TIME'      , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'FORWARD_MDB_BEFORE'    , 'NUMBER'      , 'N');

      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_MDB_START_TIME' , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_MDB_END_TIME'   , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_MDB_TIME'       , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_MDB_BEFORE'     , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'INVOKE_MDB_AFTER'      , 'NUMBER'      , 'N');

      Installation_SYS.Set_Table_Column(columns_, 'PROCESS_START_TIME'    , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'PROCESS_END_TIME'      , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'PROCESS_TIME'          , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'PROCESS_BEFORE'        , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'PROCESS_AFTER'         , 'NUMBER'      , 'N');

      Installation_SYS.Set_Table_Column(columns_, 'SEND_START_TIME'       , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'SEND_END_TIME'         , 'TIMESTAMP(6)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'SEND_TIME'             , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'SEND_BEFORE'           , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'SEND_AFTER'            , 'NUMBER'      , 'N');

      Installation_SYS.Set_Table_Column(columns_, 'PRE_PROCESS_TIME'      , 'NUMBER'      , 'N');
      Installation_SYS.Set_Table_Column(columns_, 'POST_PROCESS_TIME'     , 'NUMBER'      , 'N');

      Installation_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'APPLICATION_MESSAGE_ID');
      Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U');
   END;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_30');

PROMPT Creating table FND_PROJECTION_USAGE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_NAME', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_LABEL', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJECTION_USAGE_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table FND_PROJ_ACTION_USAGE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_USAGE_TAB';
   column_    Installation_SYS.ColRec;
BEGIN
   IF (Installation_SYS.Table_Exist(table_name_)) THEN
      column_ := Installation_SYS.Set_Column_Values('PROJECTION');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_);
      column_ := Installation_SYS.Set_Column_Values('ACTION');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_NAME', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_LABEL', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_USAGE_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ACTION_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table FND_PROJ_ENT_ACTION_USAGE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_USAGE_TAB';
   column_    Installation_SYS.ColRec;
BEGIN
   IF (Installation_SYS.Table_Exist(table_name_)) THEN
      column_ := Installation_SYS.Set_Column_Values('PROJECTION');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_);
      column_ := Installation_SYS.Set_Column_Values('ACTION');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_);
      column_ := Installation_SYS.Set_Column_Values('ENTITY');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_NAME', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_LABEL', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_USAGE_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_ENT_ACTION_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating TABLE FND_PROJ_LOOKUP_USAGE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_LOOKUP_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LOOKUP_ATTRIBUTE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'USED_LU', 'VARCHAR2(128)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_LOOKUP_USAGE_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_LOOKUP_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'LOOKUP_ATTRIBUTE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_LOOKUP_USAGE_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_LOOKUP_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_LOOKUP_USAGE_IX';
   table_name_ VARCHAR2(30) := 'FND_PROJ_LOOKUP_USAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'USED_LU');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_31');

PROMPT Change the data type of Quick_Report_Id column in Quick_Report_Log_Tab from NUMBER to VARCHAR

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_    VARCHAR2(30) := 'QUICK_REPORT_LOG_TAB';
   index_name_    VARCHAR2(30);
   sequence_name_ VARCHAR2(30) := 'QUICK_REPORT_LOG_SEQ';
   columns_       Installation_SYS.ColumnTabType;
   column_        Installation_SYS.ColRec;
BEGIN
   IF (Installation_SYS.Table_Exist(table_name_)) THEN
      IF ( Installation_SYS.Get_Column_Type(table_name_, 'QUICK_REPORT_ID') = 'NUMBER' ) THEN
         --Remove old log entries
         EXECUTE IMMEDIATE 'TRUNCATE TABLE QUICK_REPORT_LOG_TAB';
         Installation_SYS.Reset_Column_Table(columns_);
         Installation_SYS.Set_Table_Column(columns_, 'QUICK_REPORT_ID', 'VARCHAR2(20)');
         Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
      END IF;
   ELSE
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'LOG_ID', 'NUMBER', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'EXECUTED', 'DATE', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'QUICK_REPORT_ID', 'VARCHAR2(20)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'USER_NAME', 'VARCHAR2(30)', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'EXECUTION_TIME', 'NUMBER', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'STATUS', 'VARCHAR2(30)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'NOTES', 'VARCHAR2(4000)', 'Y');
      Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
      Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
      Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

      index_name_ := 'QUICK_REPORT_LOG_PK';
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'LOG_ID');
      Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
	  
      index_name_ := 'QUICK_REPORT_LOG_RK';	  
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
      Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
   IF NOT (Installation_SYS.Sequence_Exist('QUICK_REPORT_LOG_SEQ')) THEN
      Installation_SYS.Create_Sequence(sequence_name_, 'START WITH 1', TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_32');

PROMPT Fix index table space and missing column inconsistencies in internal environments

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'INFO_SERVICES_RPT';
   index_name_ VARCHAR2(30);
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   index_name_ := 'INFO_SERVICES_PK';
   Installation_SYS.Move_Object(index_name_, '&IFSAPP_REPORT_INDEX', TRUE);
   
   index_name_ := 'INFO_SERVICES_RPT_RK';
   Installation_SYS.Move_Object(index_name_, '&IFSAPP_REPORT_INDEX', TRUE);

   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'S150', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_33');

PROMPT ADDING A COLUMN TO  DICTIONARY_SYS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2 (30) := 'DICTIONARY_SYS_TAB';   
   column_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(column_);
   Installation_SYS.Set_Table_Column(column_, 'BASE_PACKAGE', 'VARCHAR2(128)', 'Y');
   Installation_SYS.Alter_Table(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding new index to Dictionary_SYS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'DICTIONARY_SYS_IX';
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'TABLE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

UPDATE dictionary_sys_view_tab v
SET view_comment = ''
WHERE view_name IN
(SELECT table_name
 FROM User_Tab_Comments
 WHERE comments LIKE '%PACKAGE=%')
AND EXISTS
(SELECT 1
 FROM dictionary_sys_tab d
 WHERE d.lu_name = v.lu_name
 AND d.base_package IS NULL);

COMMIT;

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_34');

PROMPT Add ne table ADD_ONS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'ADD_ONS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REVISION', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('ADDON_FILE', 'BLOB', 'N', NULL, 'LOB (ADDON_FILE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ADD_ONS_PK';
   table_name_ VARCHAR2(30) := 'ADD_ONS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'ADD_ONS_RK';
   table_name_ VARCHAR2(30) := 'ADD_ONS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_35');

PROMPT Creating table FND_PROJ_CHECKPOINT_GATE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_GATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GATE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ACTIVE', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ALL_USERS_VALID', 'VARCHAR2(5)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_GATE_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_GATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GATE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_GATE_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_GATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table FND_PROJ_CHECKPOINT_LOG_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOG_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'GATE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TRANSACTION_DATE', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'USERNAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MESSAGE', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'USER_COMMENT', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOG_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_IX';
   table_name_ VARCHAR2(30) := 'FND_PROJ_CHECKPOINT_LOG_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'GATE_ID');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_36');

PROMPT Creating table DICTIONARY_SYS_METHOD_EXT_TAB

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   IF Installation_SYS.Column_Exist('DICTIONARY_SYS_METHOD_EXT_TAB', 'OVERLOAD') THEN
      EXECUTE IMMEDIATE 'UPDATE DICTIONARY_SYS_METHOD_EXT_TAB SET OVERLOAD = ''0'' WHERE OVERLOAD IS NULL';
   END IF;
END; 
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_       VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_TAB';
   columns_          Installation_SYS.ColumnTabType;
   column_           Installation_SYS.ColRec;
   index_pk_         VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_PK';
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'OBJECT_NAME', 'VARCHAR2(128)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROCEDURE_NAME', 'VARCHAR2(128)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'OVERLOAD', 'VARCHAR2(40)', 'N', default_value_ => '0', keep_default_ => 'N');
   Installation_SYS.Set_Table_Column(columns_, 'METHOD_TYPE', 'VARCHAR2(40)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_       VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_TAB';
   index_pk_         VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_PK';
   min_rowversion_   DATE;
BEGIN
   IF Installation_SYS.Index_Exist(index_pk_, table_name_) AND
      Installation_SYS.Get_Index_Columns(index_pk_) != 'OBJECT_NAME, PROCEDURE_NAME, OVERLOAD' THEN 
         
      UPDATE DICTIONARY_SYS_METHOD_EXT_TAB
         SET OVERLOAD = '0'
         WHERE OVERLOAD IS NULL;

      SELECT MIN(rowversion)
      INTO min_rowversion_
      FROM DICTIONARY_SYS_PACKAGE_TAB;

         -- Forcing a Dictionary Cache refresh
      UPDATE DICTIONARY_SYS_PACKAGE_TAB
      SET rowversion = (min_rowversion_ - 1);

      Installation_SYS.Remove_Indexes(table_name_, index_pk_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2 (30) := 'DICTIONARY_SYS_METHOD_EXT_TAB';   
   column_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(column_);
   Installation_SYS.Set_Table_Column(column_, 'OVERLOAD', 'VARCHAR2(40)', 'N');
   Installation_SYS.Alter_Table(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding PRIMARY KEY INDEX DICTIONARY_SYS_METHOD_EXT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_PK';
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'OBJECT_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PROCEDURE_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'OVERLOAD');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT DROP INDEX DICTIONARY_SYS_METHOD_EXT_IX_1 AND DICTIONARY_SYS_METHOD_EXT_IX_2

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_     Installation_SYS.ColRec;
   index_ix1_  VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_IX_1';
   index_ix2_  VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_IX_2';
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_METHOD_EXT_TAB';
BEGIN
   Installation_SYS.Remove_Indexes(table_name_, index_ix1_, TRUE);
   Installation_SYS.Remove_Indexes(table_name_, index_ix2_, TRUE);
   
   column_ := Installation_SYS.Set_Column_Values('OBJECT_ID', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
   
   column_ := Installation_SYS.Set_Column_Values('SUBPROGRAM_ID', 'NUMBER', 'N');
   Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_37');

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_TEMP_LOB_STORE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOB_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_BY_USER', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_BY_MODULE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_AT', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   column_ := Installation_SYS.Set_Column_Values('CLOB_DATA', 'CLOB', 'Y', NULL, 'LOB (CLOB_DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('BLOB_DATA', 'BLOB', 'Y', NULL, 'LOB (BLOB_DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_TEMP_LOB_STORE_PK';
   table_name_ VARCHAR2(30) := 'FND_TEMP_LOB_STORE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LOB_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_TEMP_LOB_STORE_RK';
   table_name_ VARCHAR2(30) := 'FND_TEMP_LOB_STORE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
   
PROMPT Adding COLUMN TO FND_PROJECTION_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CAPABILITY', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
      
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_SETTING_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CLIENT_READ_ONLY', 'VARCHAR2(5)', 'N', default_value_ => '''FALSE''', keep_default_ => 'N');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/ 
   
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_STREAM_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FOLLOW_UP_CREATED', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'REFERENCED_OBJKEY', 'VARCHAR2(50)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'WEB_URL', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_38');

PROMPT  Increase PATH column length from 500 to 900 in LANGUAGE_SYS_TAB.

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_   	  Installation_SYS.colRec;
   table_name_    VARCHAR2(30) := 'LANGUAGE_SYS_TAB';
BEGIN 
   column_ := Installation_SYS.Set_Column_Values ('PATH', 'VARCHAR2(900)');
   Installation_SYS.Alter_Table_Column (table_name_, 'M', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT  Increase PATH column length from 500 to 900 in LANGUAGE_CONTEXT_TAB.

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   column_   	  Installation_SYS.colRec;
   table_name_    VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
BEGIN 
   column_ := Installation_SYS.Set_Column_Values ('PATH', 'VARCHAR2(900)');
   Installation_SYS.Alter_Table_Column (table_name_, 'M', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding ORIGIN to LANGUAGE_CONTEXT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
   new_column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column(new_column_);
   new_column_ := Installation_SYS.Set_Column_Values('ORIGIN', 'VARCHAR2(900)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', new_column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding index  LANGUAGE_CONTEXT_IX6 to LANGUAGE_CONTEXT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_IX6';
   table_name_ VARCHAR2(30) := 'LANGUAGE_CONTEXT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ORIGIN');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding index  LANGUAGE_SYS_IX2 to LANGUAGE_SYS_TAB
   
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LANGUAGE_SYS_TAB';
   index_name_ VARCHAR2(30) := 'LANGUAGE_SYS_IX2';
BEGIN
      Installation_SYS.Reset_Column_Table(columns_);
      Installation_SYS.Set_Table_Column(columns_, 'MAIN_TYPE');
      Installation_SYS.Set_Table_Column(columns_, 'TYPE');
      Installation_SYS.Set_Table_Column(columns_, 'PATH');
      Installation_SYS.Set_Table_Column(columns_, 'LANG_CODE');
      Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_39');

PROMPT Adding COLUMN DOMAIN_ID TO QUICK_REPORT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'QUICK_REPORT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DOMAIN_ID', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CATEGORY_ID', 'NUMBER', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding table QUICK_REPORT_VARIABLES_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'QUICK_REPORT_VARIABLES_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding primary key QUICK_REPORT_VARIABLES_TAB_PK to QUICK_REPORT_VARIABLES_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'QUICK_REPORT_VARIABLES_TAB_PK';
   table_name_ VARCHAR2(30) := 'QUICK_REPORT_VARIABLES_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT adding record QUICK_REPORTS_PROJECTION_VERSION to QUICK_REPORT_VARIABLES_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
BEGIN
   INSERT INTO QUICK_REPORT_VARIABLES_TAB (NAME, VALUE) VALUES ('QUICK_REPORTS_PROJECTION_VERSION', TO_CHAR(SYSDATE, 'YYYY-MM-DD-HH24.MI.SS'));
   COMMIT;
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding DOMAIN_ID AND CATEGORY_ID COLUMNS TO REPORT_SYS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DOMAIN_ID', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CATEGORY_ID', 'NUMBER', 'Y');   
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_40');


PROMPT Adding REPORT_DOMAIN_TAB table

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_name_ VARCHAR2(30) := 'REPORT_DOMAIN_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_DOMAIN_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DOMAIN_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_DOMAIN_PK';
   table_name_ VARCHAR2(30) := 'REPORT_DOMAIN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'DOMAIN_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_DOMAIN_RK';
   table_name_ VARCHAR2(30) := 'REPORT_DOMAIN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_41');

PROMPT Adding REPORT_CATEGORY_TAB table

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_name_ VARCHAR2(30) := 'REPORT_CATEGORY_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_CATEGORY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CATEGORY_ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_CATEGORY_PK';
   table_name_ VARCHAR2(30) := 'REPORT_CATEGORY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CATEGORY_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_CATEGORY_RK';
   table_name_ VARCHAR2(30) := 'REPORT_CATEGORY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_42');

PROMPT Adding FND_ZIP_FILE_TEMP_TAB table

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_ZIP_FILE_TEMP_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ZIP_FILE_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FND_USER', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'N', 'SYSDATE');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('ZIP_FILE', 'BLOB', 'Y', NULL, 'LOB (ZIP_FILE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding FND_UNZIPPED_FILE_TEMP_TAB table

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_UNZIPPED_FILE_TEMP_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_ID', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FND_USER', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FILE_PATH', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'N', 'SYSDATE');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('FILE_CONTENT', 'CLOB', 'N', NULL, 'LOB (FILE_CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding FND_ZIP_FILE_TEMP_TAB indexes

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_ZIP_FILE_TEMP_PK';
   table_name_ VARCHAR2(30) := 'FND_ZIP_FILE_TEMP_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ZIP_FILE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_ZIP_FILE_TEMP_RK';
   table_name_ VARCHAR2(30) := 'FND_ZIP_FILE_TEMP_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating type  FND_ZIP_OBJECT_REC

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   object_name_ VARCHAR2(30) := 'FND_ZIP_OBJECT_REC';
   columns_     Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Set_Table_Column(columns_, 'FILE_PATH_', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONTENT_', 'BLOB', 'Y');
   Installation_SYS.Create_Or_Replace_Type(object_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating type  FND_ZIP_OBJECT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   collection_name_ VARCHAR2(30) := 'FND_ZIP_OBJECT_TAB';
BEGIN
   Installation_SYS.Create_Or_Replace_Type(collection_name_, 'FND_ZIP_OBJECT_REC', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating Java source FndZipUtilImpl

CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "FndZipUtilImpl" AS
import java.sql.*;
import java.io.*;
import java.util.zip.*;

public class FndZipUtilImpl{
   public static void zipFiles(java.sql.Blob zip, java.sql.Array fileObjArray) throws Exception{
      OutputStream os = zip.setBinaryStream(0);           
      BufferedOutputStream bos = new BufferedOutputStream(os);
      ZipOutputStream zos = new ZipOutputStream(bos);    
      String logMessage = null;
      Object[] fileArr = (Object[]) fileObjArray.getArray();  
      
      try{
         if(fileArr != null){
            for(Object fileObj : fileArr){
               if(fileObj instanceof Struct){
                  Struct fileStruct = (Struct) fileObj ;
                  Object[] file = fileStruct.getAttributes();

                  String filePath = (file[0] instanceof String ) ? (String) file[0] : null ;
                  Blob fileContent = (file[1] instanceof Blob ) ?  (Blob) file[1] : null ;
                  
                  if( filePath == null || fileContent == null ) {
                     logMessage = "File path or File content is not received!";
                  }else{
                     InputStream is = fileContent.getBinaryStream();
                     BufferedInputStream bis = new BufferedInputStream(is);
                     int bufSize = 1024;
                     byte []buf = new byte[bufSize];
                     zos.putNextEntry(new ZipEntry(filePath));
                     int bytesread;
                     while ((bytesread = bis.read(buf, 0, bufSize)) != -1) {
                        zos.write(buf, 0, bytesread);
                     }
                  }
               }else{
                  logMessage = "Input is inconsistent with the expected type : Struct";
               }                  
               zos.closeEntry();
               zos.flush();
            }
         }         
      }
      catch(Exception e){
         System.err.println(e.getMessage());
      }
      finally{
         System.out.println(logMessage);
         zos.close();   
      } 
   }        
}
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_43');

PROMPT Inserting Java implementation of plsql method in Fnd_Zip_Util_API

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   collection_name_ VARCHAR2(30) := 'FND_ZIP_UTIL_STRING_TABLE';
BEGIN
   Installation_SYS.Create_Or_Replace_Type(collection_name_, 'VARCHAR2(2000)', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   collection_name_ VARCHAR2(30) := 'FND_ZIP_UTIL_BLOB_TABLE';
BEGIN
   Installation_SYS.Create_Or_Replace_Type(collection_name_, 'BLOB', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "fndZipUtilJavaImpl" AS
import java.io.*;
import java.sql.*;
import java.util.zip.*;

public class fndZipUtilJavaImpl {
   public static void compressFiles(java.sql.Blob zip, java.sql.Array filenameSqlArray, java.sql.Array filecontentSqlArray) throws Exception {
      String[] filenames = (String[])filenameSqlArray.getArray();
      Blob[] filecontent = (Blob[])filecontentSqlArray.getArray();
      OutputStream os = zip.setBinaryStream(0);           
      BufferedOutputStream bos = new BufferedOutputStream(os);
      ZipOutputStream zos = new ZipOutputStream(bos);

      for (int i = 0; i < filenames.length; i++) {
         String filename = filenames[i];

         InputStream is = filecontent[i].getBinaryStream();
         BufferedInputStream bis = new BufferedInputStream(is);
         int bufsize = 1024;
         byte []buf = new byte[bufsize];
         zos.putNextEntry(new ZipEntry(filename));
         int bytesread;
         while ((bytesread = bis.read(buf, 0, bufsize)) != -1) {
            zos.write(buf, 0, bytesread);
         }
         zos.closeEntry();
      }
      zos.flush();
      zos.close();
   }      
}
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_44');

PROMPT Create table FND_USER_PIN_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_USER_PIN_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'USER_IDENTITY', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'HASHED_USER_PIN', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SALT', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_USER_PIN_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values ('USER_PIN');
   Installation_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_USER_PIN_PK';
   table_name_ VARCHAR2(30) := 'FND_USER_PIN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'USER_IDENTITY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_USER_PIN_RK';
   table_name_ VARCHAR2(30) := 'FND_USER_PIN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_45');

PROMPT Creating table FND_PROJ_VIRTUAL_ENTITY_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_VIRTUAL_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TABLE_NAME', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding PRIMARY KEY INDEX FND_PROJ_VIRTUAL_ENTITY_PK

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_VIRTUAL_ENTITY_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_VIRTUAL_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ENTITY_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding INDEX FND_PROJ_VIRTUAL_ENTITY_RK

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_VIRTUAL_ENTITY_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_VIRTUAL_ENTITY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_46');

PROMPT Add new tables REPORT_IMAGES_TAB, REPORT_LOGOS_TAB and REPORT_SIGNATURES_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_IMAGES_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'IMAGE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PREVENT_OVERWRITE', 'VARCHAR2(10)', 'Y');   
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('IMAGE', 'BLOB', 'N', NULL, 'LOB (IMAGE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_IMAGES_PK';
   table_name_ VARCHAR2(30) := 'REPORT_IMAGES_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID');
   Installation_SYS.Set_Table_Column(columns_, 'IMAGE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_IMAGES_RK';
   table_name_ VARCHAR2(30) := 'REPORT_IMAGES_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_LOGOS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'IMAGE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PREVENT_OVERWRITE', 'VARCHAR2(10)', 'Y');   
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('IMAGE', 'BLOB', 'N', NULL, 'LOB (IMAGE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_LOGOS_PK';
   table_name_ VARCHAR2(30) := 'REPORT_LOGOS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'IMAGE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_LOGOS_RK';
   table_name_ VARCHAR2(30) := 'REPORT_LOGOS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'REPORT_SIGNATURES_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'IMAGE_NAME', 'VARCHAR2(50)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PREVENT_OVERWRITE', 'VARCHAR2(10)', 'Y');   
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('IMAGE', 'BLOB', 'N', NULL, 'LOB (IMAGE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_SIGNATURES_PK';
   table_name_ VARCHAR2(30) := 'REPORT_SIGNATURES_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'IMAGE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REPORT_SIGNATURES_RK';
   table_name_ VARCHAR2(30) := 'REPORT_SIGNATURES_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_47');

PROMPT Adding CONFLICT_NAME TO FUNCTIONAL_AREA_CONFLICT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FUNCTIONAL_AREA_CONFLICT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CONFLICT_NAME', 'VARCHAR2(200)', 'Y', default_value_ => '''Please Update The Conflict Name''', keep_default_ => 'N');  
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_48');

PROMPT Adding table FND_USER_PIN_MONITOR_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_USER_PIN_MONITOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'USER_IDENTITY', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'FAILED_ATTEMPTS', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PIN_SUSPENDED', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_USER_PIN_MONITOR_PK';
   table_name_ VARCHAR2(30) := 'FND_USER_PIN_MONITOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'USER_IDENTITY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_USER_PIN_MONITOR_RK';
   table_name_ VARCHAR2(30) := 'FND_USER_PIN_MONITOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_49');

PROMPT Creating table CLIENT_PROFILE_NODE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'CLIENT_PROFILE_NODE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_SECTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DEPTH', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CHILD', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_SECTION', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_ENTRY', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_VALUE', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'MODIFIED_DATE', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding PRIMARY KEY INDEX CLIENT_PROFILE_NODE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CLIENT_PROFILE_NODE_PK';
   table_name_ VARCHAR2(30) := 'CLIENT_PROFILE_NODE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_SECTION');
   Installation_SYS.Set_Table_Column(columns_, 'PARENT');
   Installation_SYS.Set_Table_Column(columns_, 'DEPTH');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'CLIENT_PROFILE_NODE_RK';
   table_name_ VARCHAR2(30) := 'CLIENT_PROFILE_NODE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_50');

PROMPT Creating table FND_JAVA_IMPLEMENTATIONS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_JAVA_IMPLEMENTATIONS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CONTENT', 'BLOB', 'Y', NULL, 'LOB (CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_JAVA_IMPLEMENTATIONS_PK';
   table_name_ VARCHAR2(30) := 'FND_JAVA_IMPLEMENTATIONS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_JAVA_IMPLEMENTATIONS_RK';
   table_name_ VARCHAR2(30) := 'FND_JAVA_IMPLEMENTATIONS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','2110.upg', 'Timestamp_52');

PROMPT Creating table FND_BPA_GRANT_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_BPA_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'BPA_KEY', 'VARCHAR2(255)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BPA_GRANT_PK';
   table_name_ VARCHAR2(30) := 'FND_BPA_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'BPA_KEY');
   Installation_SYS.Set_Table_Column(columns_, 'ROLE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BPA_GRANT_RK';
   table_name_ VARCHAR2(30) := 'FND_BPA_GRANT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS','2110.upg', 'Timestamp_53');


PROMPT Creating table FND_JAVA_IMPL_LIBS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_JAVA_IMPL_LIBS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CONTENT', 'BLOB', 'Y', NULL, 'LOB (CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_JAVA_IMPL_LIBS_PK';
   table_name_ VARCHAR2(30) := 'FND_JAVA_IMPL_LIBS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_JAVA_IMPL_LIBS_RK';
   table_name_ VARCHAR2(30) := 'FND_JAVA_IMPL_LIBS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_53');
/

PROMPT Create tables for Report rule action properties 

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REP_RULE_ACT_PRPRTS_LOV_TAB_PK';
   table_name_ VARCHAR2(30) := 'REP_RULE_ACT_PRPRTS_LOV_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'REP_RUL_ACT_PRP_VAL_LOV_TAB_PK';
   table_name_ VARCHAR2(30) := 'REP_RUL_ACT_PRP_VAL_LOV_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ACTION_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'POSSIBLE_VALUE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table BPA_JAVA_DELEGATE_TAB, BPA_JAVA_DELEGATE_LIB_TAB, BPA_MODEL_STAGE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CONTENT', 'BLOB', 'Y', NULL, 'LOB (CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_LIB_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CONTENT', 'BLOB', 'Y', NULL, 'LOB (CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'BPA_MODEL_STAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STATE', 'VARCHAR2(6)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CONTENT', 'BLOB', 'Y', NULL, 'LOB (CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_PK';
   table_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_RK';
   table_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_LIB_PK';
   table_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_LIB_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_LIB_RK';
   table_name_ VARCHAR2(30) := 'BPA_JAVA_DELEGATE_LIB_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_MODEL_STAGE_PK';
   table_name_ VARCHAR2(30) := 'BPA_MODEL_STAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'FILE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_MODEL_STAGE_RK';
   table_name_ VARCHAR2(30) := 'BPA_MODEL_STAGE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_54');
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'BPA_SYSTEM_SETTINGS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'VARIABLE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_SYSTEM_SETTINGS_PK';
   table_name_ VARCHAR2(30) := 'BPA_SYSTEM_SETTINGS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'VARIABLE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'BPA_SYSTEM_SETTINGS_RK';
   table_name_ VARCHAR2(30) := 'BPA_SYSTEM_SETTINGS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_55');
/
-----------------------------------------------------------------------------
-------------------- FND_FAVORITE DEFINITIONS ---------------------------
-----------------------------------------------------------------------------
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_FAVORITE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ADDED', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'URL1', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'URL2', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONTEXT', 'VARCHAR2(10)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'TITLE', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'IS_PINNED', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('URL', 'CLOB', 'Y', NULL, 'LOB (URL) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('THUMBNAIL', 'BLOB', 'Y', NULL, 'LOB (THUMBNAIL) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_FAVORITE_PK';
   table_name_ VARCHAR2(30) := 'FND_FAVORITE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_FAVORITE_RK';
   table_name_ VARCHAR2(30) := 'FND_FAVORITE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_55');
/

-----------------------------------------------------------------------------
-------------------- FND_BOOKMARK DEFINITIONS -------------------------------
-----------------------------------------------------------------------------
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_BOOKMARK_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILE_ID', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ADDED', 'DATE', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONTEXT', 'VARCHAR2(10)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TITLE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'IS_PINNED', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ICON', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'EMPHASIS', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ORDINAL', 'NUMBER', 'Y'); 
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('URL', 'CLOB', 'N', NULL, 'LOB (URL) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);

   column_ := Installation_SYS.Set_Column_Values('THUMBNAIL', 'CLOB', 'Y', NULL, 'LOB (THUMBNAIL) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BOOKMARK_PK';
   table_name_ VARCHAR2(30) := 'FND_BOOKMARK_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BOOKMARK_RK';
   table_name_ VARCHAR2(30) := 'FND_BOOKMARK_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_name_ VARCHAR2(30) := 'FND_FAVORITE_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MAXVALUE 99999999999999 INCREMENT BY 1 START WITH 1 CYCLE NOCACHE', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_start_nr_ NUMBER(38):= 0;
   sequence_name_ VARCHAR2(30) := 'FND_BOOKMARK_SEQ';
BEGIN
   SELECT NVL(MAX(ID), 0) INTO sequence_start_nr_ FROM FND_BOOKMARK_TAB;
   sequence_start_nr_:= sequence_start_nr_ +1;
   Installation_SYS.Remove_Sequence(sequence_name_, TRUE);
   Installation_SYS.Create_Sequence(sequence_name_, 'MAXVALUE 99999999999999 INCREMENT BY 1 START WITH ' || sequence_start_nr_ ||' CYCLE NOCACHE', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_56');
/

-----------------------------------------------------------------------------
----------------------- REPORT METADATA -------------------------------------
-----------------------------------------------------------------------------
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'AURENA_REPORT_METADATA_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CUSTOM_PAGE', 'VARCHAR2(200)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'AURENA_REPORT_METADATA_MAP_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COLUMN_INDEX', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COLUMN_NAME', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COLUMN_QUERY', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COLUMN_VALUE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ARG_DEFINITION', 'VARCHAR2(2000)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'AURENA_REPORT_METADATA_PK';
   table_name_ VARCHAR2(30) := 'AURENA_REPORT_METADATA_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'AURENA_REPORT_METADATA_MAP_PK';
   table_name_ VARCHAR2(30) := 'AURENA_REPORT_METADATA_MAP_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'REPORT_ID');
   Installation_SYS.Set_Table_Column(columns_, 'COLUMN_INDEX');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_57');
/

-----------------------------------------------------------------------------
----------------------- FND_NAVIGATOR DEFINITIONS ---------------------------
-----------------------------------------------------------------------------

PROMPT Adding COLUMN layer_no TO fnd_navigator_entry_tab AND fnd_navigator_structure_tab
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Remove_Constraints(table_name_, 'FND_NAVIGATOR_ENTRY_PK', TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO', 'NUMBER(2,0)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Remove_Constraints(table_name_, 'FND_NAVIGATOR_STRUCTURE_PK', TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO', 'NUMBER(2,0)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   UPDATE fnd_navigator_entry_tab SET layer_no = 1 WHERE layer_no IS NULL;
   UPDATE fnd_navigator_structure_tab SET layer_no = 1 WHERE layer_no IS NULL;
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding COLUMN name TO fnd_navigator_tab
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding COLUMN entry_type TO fnd_navigator_tab
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ENTRY_TYPE', 'VARCHAR2(255)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding COLUMN context TO fnd_navigator_entry_tab
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CONTEXT', 'VARCHAR(100)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding COLUMN context TO fnd_navigator_tab
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CONTEXT', 'VARCHAR(100)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding COLUMN home_for_entity TO fnd_navigator_tab
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'HOME_FOR_ENTITY', 'VARCHAR(30)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding COLUMN home_for_entity TO fnd_navigator_entry_tab
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'HOME_FOR_ENTITY', 'VARCHAR(30)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Removing column PUBLISHED from FND_NAVIGATOR_ENTRY_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF Installation_SYS.Column_Exist(table_name_, 'PUBLISHED') THEN
      column_ := Installation_SYS.Set_Column_Values('PUBLISHED');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding new columns SCOPE_ID AND VISIBILITY to FND_NAVIGATOR_ENTRY_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF NOT Installation_SYS.Column_Exist(table_name_, 'SCOPE_ID') THEN
      column_ := Installation_SYS.Set_Column_Values('SCOPE_ID', 'VARCHAR2(100)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;
   IF NOT Installation_SYS.Column_Exist(table_name_, 'VISIBILITY') THEN
      column_ := Installation_SYS.Set_Column_Values('VISIBILITY', 'VARCHAR2(20)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Setting default values for columns SCOPE_ID and VISIBILITY in FND_NAVIGATOR_ENTRY_TAB
-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   UPDATE FND_NAVIGATOR_ENTRY_TAB
      SET SCOPE_ID = 'global'
    WHERE SCOPE_ID IS NULL;

   UPDATE FND_NAVIGATOR_ENTRY_TAB
      SET VISIBILITY = 'PUBLIC'
    WHERE VISIBILITY IS NULL;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding SCOPE_ID to FND_NAVIGATOR_ENTRY_PK
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_TAB';
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_ENTRY_PK';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Remove_Constraints(table_name_, index_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ENTRY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'SCOPE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Removing columns PUBLISHED AND CONFIG_STATE from FND_NAVIGATOR_STRUCTURE_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF Installation_SYS.Column_Exist(table_name_, 'PUBLISHED') THEN
      column_ := Installation_SYS.Set_Column_Values('PUBLISHED');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
   END IF;
   IF Installation_SYS.Column_Exist(table_name_, 'CONFIG_STATE') THEN
      column_ := Installation_SYS.Set_Column_Values('CONFIG_STATE');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding new columns SCOPE_ID, VISIBILITY AND HIDDEN to FND_NAVIGATOR_STRUCTURE_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF NOT Installation_SYS.Column_Exist(table_name_, 'SCOPE_ID') THEN
      column_ := Installation_SYS.Set_Column_Values('SCOPE_ID', 'VARCHAR2(100)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;
   IF NOT Installation_SYS.Column_Exist(table_name_, 'VISIBILITY') THEN
      column_ := Installation_SYS.Set_Column_Values('VISIBILITY', 'VARCHAR2(20)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;
   IF NOT Installation_SYS.Column_Exist(table_name_, 'HIDDEN') THEN
      column_ := Installation_SYS.Set_Column_Values('HIDDEN', 'VARCHAR2(5)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Setting default values for columns SCOPE_ID and VISIBILITY in FND_NAVIGATOR_STRUCTURE_TAB
-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   UPDATE FND_NAVIGATOR_STRUCTURE_TAB
      SET SCOPE_ID = 'global'
    WHERE SCOPE_ID IS NULL;

   UPDATE FND_NAVIGATOR_STRUCTURE_TAB
      SET VISIBILITY = 'PUBLIC'
    WHERE VISIBILITY IS NULL;
   
   UPDATE FND_NAVIGATOR_STRUCTURE_TAB
      SET HIDDEN = 'FALSE'
    WHERE HIDDEN IS NULL;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding SCOPE_ID to FND_NAVIGATOR_STRUCTURE_PK
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_TAB';
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_STRUCTURE_PK';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Remove_Constraints(table_name_, index_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PARENT_ENTRY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'CHILD_ENTRY_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'SCOPE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Removing column CONFIG_STATE from FND_NAVIGATOR_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF Installation_SYS.Column_Exist(table_name_, 'CONFIG_STATE') THEN
      column_ := Installation_SYS.Set_Column_Values('CONFIG_STATE');
      Installation_SYS.Alter_Table_Column(table_name_, 'DROP', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding new column SCOPE_ID to FND_NAVIGATOR_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF NOT Installation_SYS.Column_Exist(table_name_, 'SCOPE_ID') THEN
      column_ := Installation_SYS.Set_Column_Values('SCOPE_ID', 'VARCHAR2(100)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding column HIDDEN to FND_NAVIGATOR_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   IF NOT Installation_SYS.Column_Exist(table_name_, 'HIDDEN') THEN
      column_ := Installation_SYS.Set_Column_Values('HIDDEN', 'VARCHAR2(5)','Y');
      Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
   END IF;
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Setting default value for columns SCOPE_ID AND HIDDEN in FND_NAVIGATOR_TAB
-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   UPDATE FND_NAVIGATOR_TAB
      SET SCOPE_ID = 'global'
    WHERE SCOPE_ID IS NULL;
   
   UPDATE FND_NAVIGATOR_TAB
      SET HIDDEN = 'FALSE'
    WHERE HIDDEN IS NULL;
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding SCOPE_ID to FND_NAVIGATOR_PK
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_NAVIGATOR_TAB';
   index_name_ VARCHAR2(30) := 'FND_NAVIGATOR_PK';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Remove_Constraints(table_name_, index_name_, TRUE);
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Set_Table_Column(columns_, 'SCOPE_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding web_url TO FND_OBJ_SUBSCRIPTION_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_OBJ_SUBSCRIPTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);   
   Installation_SYS.Set_Table_Column(columns_, 'WEB_URL', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_57');
/


PROMPT Obsolete Prompt Attributes for Projection Context	

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   CURSOR get_rec IS
      SELECT t.context_id,
             t.obsolete,
             (SELECT COUNT(1)
                FROM language_context_tab
               WHERE PARENT = t.context_id
                 AND obsolete = 'N') child_count
        FROM language_context_tab t
       WHERE main_type = 'SVC'
         AND EXISTS (SELECT 1
                       FROM language_attribute_tab a
                      WHERE a.context_id = t.context_id
                        AND a.name = 'Prompt'
                        AND a.obsolete = 'N');       
       
   PROCEDURE Make_Obsolete (
      context_id_ IN NUMBER)
   IS
   BEGIN
      IF context_id_ > 0 THEN        
        -- First mark this context and all its attributes as obsolete
        UPDATE language_context_tab
           SET obsolete = 'Y',
               rowversion = SYSDATE
         WHERE context_id = context_id_
           AND layer = 'Core';
		   
        -- Make attribute obsolete     
        UPDATE language_attribute_tab
           SET obsolete = 'Y',
               rowversion = SYSDATE
         WHERE context_id = context_id_;
		 
        -- Remove property
        DELETE FROM language_property_tab
         WHERE context_id = context_id_;        
      END IF;
   END Make_Obsolete;
       
BEGIN
   FOR rec_ IN get_rec LOOP
      IF rec_.obsolete <> 'Y' THEN
         IF rec_.child_count = 0 THEN         
           Make_Obsolete(rec_.context_id);
         ELSE
           -- Make Attribute obsolete     
           UPDATE language_attribute_tab
              SET obsolete = 'Y',
                  rowversion = SYSDATE
            WHERE context_id = rec_.context_id;
         END IF;
      END IF;
   END LOOP;
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_58');
/

PROMPT Adding New Table: Delivery_Registration_Tab

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'DELIVERY_REGISTRATION_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DELIVERY_ID', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PRODUCT_VERSION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CREATED_TIME', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'BASELINE_DELIVERY_ID', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_59');

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'DELIVERY_REGISTRATION_PK';
   table_name_ VARCHAR2(30) := 'DELIVERY_REGISTRATION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_60');
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'DELIVERY_REGISTRATION_RK';
   table_name_ VARCHAR2(30) := 'DELIVERY_REGISTRATION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_61');
PROMPT CREATE SEQUENCE 'DELIVERY_REGISTRATION_SEQ'.
DECLARE
   sequence_name_ VARCHAR2(30) := 'DELIVERY_REGISTRATION_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1 START WITH 1 INCREMENT BY 1 NOCACHE ORDER', TRUE);
END;
/
EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_62');
PROMPT Migrating Delivery information from PRE-2021 IFS CLOUD.
BEGIN
   FOR delivery_reg_ IN (SELECT t.module, t.name, t.reg_date FROM Module_Tab t WHERE t.version = '*' AND t.name NOT IN 
   (SELECT DISTINCT delivery_Id FROM Delivery_Registration_Tab))
   LOOP
      INSERT INTO 
      Delivery_Registration_Tab(ID,Delivery_Id,Product_Version,Created_Time, Rowversion)
      VALUES(Delivery_Registration_SEQ.Nextval, delivery_reg_.name,'PRE-2021', delivery_reg_.reg_date, SYSDATE);
      DELETE FROM Module_Tab 
         WHERE Module = delivery_reg_.module;
      COMMIT;
   END LOOP;
END;
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_63');
/
-----------------------------------------------------------------------------
--------------------------- FND_MODEL DEFINITIONS ---------------------------
-----------------------------------------------------------------------------

PROMPT Adding columns to FND_MODEL_DESIGN_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'KIND', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REFERENCE', 'VARCHAR2(250)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PROFILED', 'VARCHAR2(5)', 'N', '''FALSE''');
   Installation_SYS.Set_Table_Column(columns_, 'VERSION', 'TIMESTAMP(6)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('TEMPLATE', 'CLOB', 'Y', NULL, 'LOB (TEMPLATE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_PK';
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_           VARCHAR2(30) := 'FND_MODEL_DESIGN_UX';
   obsolete_index_name_  VARCHAR2(30) := 'FND_MODEL_DESIGN_IX';
   table_name_           VARCHAR2(30) := 'FND_MODEL_DESIGN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   IF Installation_SYS.Index_Exist(obsolete_index_name_) THEN
      Installation_SYS.Remove_Indexes(table_name_, obsolete_index_name_, TRUE);
   END IF;
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'NAME');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT');
   Installation_SYS.Set_Table_Column(columns_, 'KIND');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding columns to FND_MODEL_DESIGN_DATA_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'SCOPE_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DATA_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ARTIFACT', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LINE_NO', 'NUMBER(10,0)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO', 'NUMBER(2,0)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'REFERENCE', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VISIBILITY', 'VARCHAR2(10)', 'N', '''Public''');
   Installation_SYS.Set_Table_Column(columns_, 'DEPENDENCIES', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SCHEMA_VERSION', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('CONTENT', 'CLOB', 'N', NULL, 'LOB (CONTENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_PK';
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID');
   Installation_SYS.Set_Table_Column(columns_, 'SCOPE_ID');
   Installation_SYS.Set_Table_Column(columns_, 'DATA_ID');
   Installation_SYS.Set_Table_Column(columns_, 'LAYER_NO');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_RK';
   table_name_ VARCHAR2(30) := 'FND_MODEL_DESIGN_DATA_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Adding columns to FND_MODEL_API_DOC_TAB
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_MODEL_API_DOC_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID', 'VARCHAR2(250)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VERSION', 'TIMESTAMP', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('TEMPLATE', 'CLOB', 'Y', NULL, 'LOB (TEMPLATE) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_MODEL_API_DOC_PK';
   table_name_ VARCHAR2(30) := 'FND_MODEL_API_DOC_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'MODEL_ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_64');
/

PROMPT Setting default values for columns FILE_NAME and FILE_DATE in REPORT_PDF_INSERT_TAB
-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   UPDATE REPORT_PDF_INSERT_TAB
   SET FILE_NAME = CONCAT(id,'.pdf'), FILE_DATE = rowversion
   WHERE FILE_NAME IS NULL;
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'METRIC', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'METHOD', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'COMPONENT', 'VARCHAR2(6)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_PK';
   table_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'METRIC');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_RK';
   table_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_RESULT_SEQ';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 1', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_RESULT_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'METRIC', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ID', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TAKEN_AT', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(4000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_RESULT_PK';
   table_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_RESULT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'METRIC');
   Installation_SYS.Set_Table_Column(columns_, 'ID');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_RESULT_RK';
   table_name_ VARCHAR2(30) := 'FND_LICENSE_METRIC_RESULT_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding API_CLASS AND DEPRECATED COLUMNS TO FND_PROJECTION_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJECTION_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'API_CLASS', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'DEPRECATED', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table FND_PROJ_LARGE_ATTR_SUPP_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_PROJ_LARGE_ATTR_SUPP_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ATTRIBUTE_SIZE_MODIFIED', 'VARCHAR2(5)', 'N', '''FALSE''');
   Installation_SYS.Set_Table_Column(columns_, 'CLOB_SIZE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'BLOB_SIZE', 'NUMBER', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_LARGE_ATTR_SUPP_PK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_LARGE_ATTR_SUPP_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROJECTION_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/


-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_PROJ_LARGE_ATTR_SUPP_RK';
   table_name_ VARCHAR2(30) := 'FND_PROJ_LARGE_ATTR_SUPP_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Add WEB_URL column to the TODO_ITEM_TAB TABLE

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'TODO_ITEM_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('WEB_URL', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

COMMIT
/

PROMPT Updating table OBJECT_CONNECTION_SYS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'OBJECT_CONNECTION_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'LU_ATTR', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'VIEW_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PACKAGE_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'METHOD_NAME', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'SERVICE_LIST', 'VARCHAR2(2000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'BASED_ON', 'VARCHAR2(30)', 'Y');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   column_ := Installation_SYS.Set_Column_Values('KEY_ATTR', 'CLOB', 'Y', NULL, 'LOB (KEY_ATTR) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'OBJECT_CONECTION_SYS_PK';
   table_name_ VARCHAR2(30) := 'OBJECT_CONNECTION_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating table OBJECT_CONNECTION_SERVICE_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'OBJECT_CONNECTION_SERVICE_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SERVICE_NAME', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CONNECTS_TO', 'VARCHAR2(20)', 'N');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'OBJECT_CONNECTION_SERVICE_PK';
   table_name_ VARCHAR2(30) := 'OBJECT_CONNECTION_SERVICE_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'SERVICE_NAME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Updating fnd_grant_role_tab from Oracle grants table

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   INSERT INTO fnd_grant_role_tab t
      (granted_role, role, rowversion)
      SELECT p.grantee, p.granted_role, sysdate -- grantee and the granted role
        FROM dba_role_privs p, fnd_role_tab r1, fnd_role_tab r2
       WHERE p.grantee = r2.role
         AND p.granted_role = r1.role
        AND (p.grantee, p.granted_role) NOT IN (
      SELECT p.granted_role, p.role -- the role granted and the granted role
        FROM fnd_grant_role_tab p, fnd_role_tab r1, fnd_role_tab r2
       WHERE p.role = r2.ROLE
       AND p.granted_role = r1.role);
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/


PROMPT Repairing booleans in Fnd_Role_TAB

BEGIN
  IF Installation_SYS.Table_Exist('Fnd_Role_TAB') THEN
    EXECUTE IMMEDIATE 'UPDATE Fnd_Role_TAB SET LIMITED_TASK_USER = ''TRUE'' WHERE LIMITED_TASK_USER = ''1''';
    EXECUTE IMMEDIATE 'UPDATE Fnd_Role_TAB SET LIMITED_TASK_USER = ''FALSE'' WHERE LIMITED_TASK_USER = ''0''';
    EXECUTE IMMEDIATE 'UPDATE Fnd_Role_TAB SET ADDITIONAL_TASK_USER = ''TRUE'' WHERE ADDITIONAL_TASK_USER = ''1''';
    EXECUTE IMMEDIATE 'UPDATE Fnd_Role_TAB SET ADDITIONAL_TASK_USER = ''FALSE'' WHERE ADDITIONAL_TASK_USER = ''0''';
    COMMIT;
  END IF;
END;
/

PROMPT Data repair, removing projection entity grants to read only entities

DELETE FROM fnd_proj_entity_grant_tab f
WHERE (f.role, f.projection, f.entity) IN (
  SELECT entity_grant.role, entity_grant.projection, entity_grant.entity
  FROM fnd_proj_entity_tab entity, fnd_proj_entity_grant_tab entity_grant
  WHERE entity.projection_name = entity_grant.projection
  AND entity.entity_name = entity_grant.entity
  AND entity.operations_allowed = 'R'
  AND cud_allowed = 'TRUE'
  AND (
     SELECT count(*)
     FROM fnd_proj_ent_action_tab entity_action
     WHERE entity_action.projection_name = entity.projection_name
     AND entity_action.entity_name = entity.entity_name
  ) = 0
);

/

UPDATE fnd_proj_entity_grant_tab f
SET f.cud_allowed = 'FALSE'
WHERE (f.role, f.projection, f.entity) IN (
  SELECT entity_grant.role, entity_grant.projection, entity_grant.entity
  FROM fnd_proj_entity_tab entity, fnd_proj_entity_grant_tab entity_grant
  WHERE entity.projection_name = entity_grant.projection
  AND entity.entity_name = entity_grant.entity
  AND entity.operations_allowed = 'R'
  AND cud_allowed = 'TRUE'
  AND (
     SELECT count(*)
     FROM fnd_proj_ent_action_tab entity_action
     WHERE entity_action.projection_name = entity.projection_name
     AND entity_action.entity_name = entity.entity_name
  ) > 0
);

/

-----------------------------------------------------------------------------
-------------------- FND_BRANDING DEFINITIONS -------------------------------
-----------------------------------------------------------------------------

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   sequence_name_ VARCHAR2(30) := 'BRANDING_ID';
BEGIN
   Installation_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 200000', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_BRANDING_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CODE', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'CONTEXT', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CONTEXT_EXPRESSION', 'VARCHAR2(1000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLE_B2_B', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ENABLE_B2_E', 'NUMBER', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'STATE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'NOTES', 'VARCHAR2(4000)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BRANDING_PK';
   table_name_ VARCHAR2(30) := 'FND_BRANDING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CODE');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BRANDING_RK';
   table_name_ VARCHAR2(30) := 'FND_BRANDING_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_BRANDING_PROPERTY_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CODE', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'THEME', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(1000)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BRANDING_PROPERTY_PK';
   table_name_ VARCHAR2(30) := 'FND_BRANDING_PROPERTY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'CODE');
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY');
   Installation_SYS.Set_Table_Column(columns_, 'THEME');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BRANDING_PROPERTY_RK';
   table_name_ VARCHAR2(30) := 'FND_BRANDING_PROPERTY_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   table_name_ VARCHAR2(30) := 'FND_BRANDING_TOKEN_TAB';
   columns_    Installation_SYS.ColumnTabType;
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY', 'VARCHAR2(30)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'TYPE', 'VARCHAR2(20)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CSS_PROPERTY', 'VARCHAR2(200)', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'CSS_OVERRIDE', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'PLATFORM', 'VARCHAR2(200)', 'Y');
   Installation_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Installation_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BRANDING_TOKEN_PK';
   table_name_ VARCHAR2(30) := 'FND_BRANDING_TOKEN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'PROPERTY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'FND_BRANDING_TOKEN_RK';
   table_name_ VARCHAR2(30) := 'FND_BRANDING_TOKEN_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Installation_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-----------------------------------------------------------------------------
-------------- PERFORMANCE INDEX FOR SOLUTION SETS --------------------------
-----------------------------------------------------------------------------

PROMPT Adding INDEX TO DICTIONARY_SYS_TAB

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   index_name_ VARCHAR2(30) := 'DICTIONARY_SYS_MODULE_IX';
   table_name_ VARCHAR2(30) := 'DICTIONARY_SYS_TAB';
   columns_    Installation_SYS.ColumnTabType;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'LU_NAME');
   Installation_SYS.Set_Table_Column(columns_, 'MODULE');
   Installation_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

-----------------------------------------------------------------------------
-------------------------------- IAL_OBJECT ---------------------------------
-----------------------------------------------------------------------------


PROMPT Add columns SELECT_STATEMENT AND INDEX_COLUMNS TO table IAL_OBJECT_TAB
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'IAL_OBJECT_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   Installation_SYS.Reset_Column_Table(columns_);
   Installation_SYS.Set_Table_Column(columns_, 'INDEX_COLUMNS', 'VARCHAR2(100)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Installation_SYS.Set_Column_Values('SELECT_STATEMENT', 'CLOB', 'Y', NULL, 'LOB (SELECT_STATEMENT) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

PROMPT UPDATE SELECT_STATEMENT OF EXISTING IAL_OBJECTS IN IAL_OBJECT_TAB USING ALL_VIEWS
BEGIN
   UPDATE ial_object_tab i
   SET    i.select_statement = (SELECT TO_LOB(a.text)
                                FROM   all_views a
                                WHERE  a.view_name = i.name || '_IAL'
                                AND    a.view_name LIKE '%\_IAL' ESCAPE '\'
                                AND    a.owner = '&IAL_OWNER')
   WHERE  select_statement IS NULL;

   UPDATE ial_object_tab 
   SET    select_statement = REGEXP_REPLACE(
                                            REGEXP_REPLACE(
                                                           REGEXP_REPLACE(select_statement, 
                                                                          '&APPLICATION_OWNER', CHR(38) || 'AO.', 1, 0, 'i'), 
                                                           '&IAL_OWNER', CHR(38) || 'IAL.', 1, 0, 'i'), 
                                                           '((WITH)(\s)+(READ)(\s)+(ONLY))', '', 1, 0, 'i');
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END;
/

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------
PROMPT Rename obsolete table ORACLE_ACCOUNT_TAB
--------------------------------------------------------------------------------------------------------
BEGIN
   Installation_SYS.Rename_Table('ORACLE_ACCOUNT_TAB',  'ORACLE_ACCOUNT_2110',  TRUE);
END;
/

--------------------------------------------------------------------------------------------------------
PROMPT Rename obsolete table FND_PROJ_COMPATIBILITY_TAB
--------------------------------------------------------------------------------------------------------
BEGIN
   Installation_SYS.Rename_Table('FND_PROJ_COMPATIBILITY_TAB', 'FND_PROJ_COMPATIBILITY_2110', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS AND PACKAGES -----------------------------
---------------------------------------------------------------------------------------------

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_101');

PROMPT ====================================================
PROMPT Remove obsolete entity packages and views
PROMPT ====================================================

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   Installation_SYS.Remove_Package('CONFIG_AREA_DEF_API',           TRUE);
   Installation_SYS.Remove_Package('CONFIG_GROUP_DEF_API',          TRUE);
   Installation_SYS.Remove_Package('CONFIG_INSTANCE_TYPE_DEF_API',  TRUE);
   Installation_SYS.Remove_Package('CONFIG_PARAMETER_DEF_API',      TRUE);
   Installation_SYS.Remove_Package('CONFIG_PARAMETER_AREA_API',     TRUE);
   Installation_SYS.Remove_Package('CONFIG_PARAMETER_GROUP_API',    TRUE);
   Installation_SYS.Remove_Package('CONFIG_PARAMETER_INSTANCE_API', TRUE);
   Installation_SYS.Remove_Package('CONFIG_PARAMETER_API',          TRUE);
   Installation_SYS.Remove_Package('CONFIG_PARAMETER_DETAIL_API',   TRUE);
   Installation_SYS.Remove_Package('MESSAGE_QUEUE_API',             TRUE);

   Installation_SYS.Remove_Package('ROUTE_ADDRESS_API',             TRUE);
   Installation_SYS.Remove_Package('ROUTE_CONDITION_API',           TRUE);
   Installation_SYS.Remove_Package('CONDITION_PART_API',            TRUE);
   Installation_SYS.Remove_Package('ROUTE_ADDRESS_REFERENCE_API',   TRUE);
   
   Installation_SYS.Remove_Package('CURRENT_ORACLE_USER_SYS',       TRUE);
   Installation_SYS.Remove_Package('PROXY_LOGIN_SYS',               TRUE);
   Installation_SYS.Remove_Package('ORACLE_ACCOUNT_API',            TRUE);
   Installation_SYS.Remove_Package('FND_PROJ_COMPATIBILITY_API',    TRUE);

   Installation_SYS.Remove_View('CONFIG_AREA_DEF',           TRUE);
   Installation_SYS.Remove_View('CONFIG_GROUP_DEF',          TRUE);
   Installation_SYS.Remove_View('CONFIG_INSTANCE_TYPE_DEF',  TRUE);
   Installation_SYS.Remove_View('CONFIG_PARAMETER_DEF',      TRUE);
   Installation_SYS.Remove_View('CONFIG_PARAMETER_AREA',     TRUE);
   Installation_SYS.Remove_View('CONFIG_PARAMETER_GROUP',    TRUE);
   Installation_SYS.Remove_View('CONFIG_PARAMETER_INSTANCE', TRUE);
   Installation_SYS.Remove_View('CONFIG_PARAMETER',          TRUE);
   Installation_SYS.Remove_View('CONFIG_PARAMETER_DETAIL',   TRUE);
   Installation_SYS.Remove_View('MESSAGE_QUEUE',             TRUE);

   Installation_SYS.Remove_View('ROUTE_ADDRESS',             TRUE);
   Installation_SYS.Remove_View('ROUTE_CONDITION',           TRUE);
   Installation_SYS.Remove_View('CONDITION_PART',            TRUE);
   Installation_SYS.Remove_View('ROUTE_ADDRESS_REFERENCE',   TRUE);

   Installation_SYS.Remove_View('FND_USER_ORALOV',           TRUE);
   Installation_SYS.Remove_View('ORACLE_ACCOUNT',            TRUE);
   Installation_SYS.Remove_View('ORACLE_ACCOUNT_TABLESPACE', TRUE);
   Installation_SYS.Remove_View('FND_PROJ_COMPATIBILITY',    TRUE);
   Installation_SYS.Remove_View('PROJECTION_EXPLORER',       TRUE);
   
   Installation_SYS.Remove_Package('DESIGN_SYS',             TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_102');

PROMPT Drop VIEW FND_PROJECTION_USAGE_REF

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   view_name_ VARCHAR2(30) := 'FND_PROJECTION_USAGE_REF';
BEGIN
   Installation_SYS.Remove_View(view_name_);
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_103');

PROMPT Clear obsolete contexts

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   CURSOR get_obsolete IS
      SELECT namespace context_name
      FROM   dba_context
      WHERE  schema = USER
      AND    package IN ('DOMAIN_SYS', 'CUSTOM_FIELDS_SYS')
      AND    namespace NOT IN ('DOMAIN_CTX', 'CUSTOMFIELDSSYS_CTX')
      AND    namespace NOT IN (SELECT REPLACE(SUBSTR(object_name, 1, LENGTH(object_name)-4), '_', '')||'_CTX'
                               FROM   user_procedures
                               WHERE  procedure_name = 'LANGUAGE_REFRESHED');
BEGIN
   FOR rec_ IN get_obsolete LOOP
      Installation_SYS.Remove_Context(rec_.context_name, TRUE);
   END LOOP;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_104');

PROMPT Dropping obsolete CPI packages

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   CURSOR get_packages IS
      SELECT DISTINCT object_name object_name
      FROM user_procedures
      WHERE object_name LIKE '%\_CPI' ESCAPE '\'
      AND procedure_name = 'GET_METADATA_VERSION_';
BEGIN
   FOR rec_ IN get_packages loop
      Installation_SYS.Remove_Package(rec_.object_name, TRUE);
   END LOOP;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_105');

PROMPT Removing obsolete records relate TO RWC AND MT translations

DELETE FROM LANGUAGE_TRANSLATION_TAB
      WHERE attribute_id IN ( SELECT la.attribute_id
                                FROM LANGUAGE_ATTRIBUTE_TAB la, LANGUAGE_CONTEXT_TAB lc
                               WHERE la.context_id = lc.context_id
                                 AND lc.main_type IN ('RWC', 'MT'));

DELETE FROM LANGUAGE_ATTRIBUTE_TAB
      WHERE context_id IN (SELECT context_id
                             FROM LANGUAGE_CONTEXT_TAB
                             WHERE main_type IN ('RWC', 'MT'));

DELETE FROM LANGUAGE_CONTEXT_TAB
   WHERE main_type IN ('RWC', 'MT');

COMMIT;
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_106');

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TRIGGERS ---------------------------------------
---------------------------------------------------------------------------------------------

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_201');

PROMPT ================================================================================================================
PROMPT Drop old Apps10 triggers. New IBS triggers will be created by App_Message_Processing_API.Post_Installation_Data
PROMPT ================================================================================================================

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   Installation_SYS.Remove_Trigger('Print_Job_TR');
   Installation_SYS.Remove_Trigger('Out_Message_TR');
   Installation_SYS.Remove_Trigger('Application_Message_Jms_TR');
   Installation_SYS.Remove_Trigger('Config_Parameter_Jms_TR');
   Installation_SYS.Remove_Trigger('Config_Parameter_Detail_Jms_TR');
   Installation_SYS.Remove_Trigger('Config_Param_Distinct_Jms_TR');
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_202');

PROMPT Drop obsolete triggers

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   CURSOR get_obsolete_triggers IS
      SELECT tr.trigger_name, tr.table_name
      FROM   user_triggers tr, user_tables ta
      WHERE  tr.table_name = ta.table_name
      AND    ta.iot_name IS NULL
      AND    (regexp_like(ta.table_name, '^.+_[[:digit:]]{3,4}$') OR UPPER(SUBSTR(ta.table_name, -4)) = '_OLD')
      AND    NOT EXISTS
      (SELECT 1
       FROM   user_dependencies d
       WHERE  d.type <> 'TRIGGER'
       AND    d.referenced_type = 'TABLE'
       AND    d.referenced_owner NOT IN ('SYS')
       AND    referenced_owner = tr.table_owner
       AND    referenced_name = tr.table_name);
BEGIN
   FOR rec_ IN get_obsolete_triggers LOOP
      Installation_SYS.Remove_Trigger(rec_.trigger_name, show_info_ => TRUE);
   END LOOP;
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_203');

PROMPT Security Checkpoint Auth Type Changing to PIN code

-- [IFS COMPLETE BLOCK DECLAREEND]
BEGIN  
	UPDATE 	FND_SETTING_TAB
	SET 	value = 'PIN'
	WHERE 	parameter = 'AUR_CHKPT_TYPE';
	
COMMIT;

END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_204');
PROMPT Removing URL_EXT_SERVER parameter
-- [IFS COMPLETE BLOCK DECLAREEND]
BEGIN
   DELETE FROM FND_SETTING_TAB
   WHERE PARAMETER = 'URL_EXT_SERVER';
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Adding a New column UserType to FND_USER_TAB and handling the data update.

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_USER_TAB';
BEGIN

   Installation_SYS.Reset_Column_Table(columns_);   
   Installation_SYS.Set_Table_Column(columns_, 'USER_TYPE', 'VARCHAR2(20)', 'Y');
   Installation_SYS.Alter_Table(table_name_, columns_, TRUE); 
	
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   
	--Updating System users
	UPDATE FND_USER_TAB
	SET user_type ='SYSTEM_USER'
	WHERE identity IN ('IFSADMIN','&APPLICATION_OWNER');
   
    --Updating Service users
	UPDATE FND_USER_TAB
	SET user_type ='SERVICE_USER'
	WHERE identity IN ('&IAL_OWNER', 'IFSCONNECT','IFSPRINT','IFSMONITORING','IFS_IOT_GATEWAY','IFSFNDMOTALLOFFLINE','IFSFNDMOTSERVER','IFSMAINTENGAPP','IFSSERVICEENGAPP','IFSSCHEDULING','SYNC_MASTER','IFSSCIM','IFS_TIMECLOCK','IFSREM','IFS_CRITERION','IFS_SCIM','IFS_FTLPLN','IFS_TIMCLO_SHOPFLOOR','IFSMOBILITY','IFSSYNC','IFSUSER');

   --Updating End users
	UPDATE FND_USER_TAB
	SET user_type ='END_USER'
	WHERE user_type IS NULL;
	
	COMMIT;
		
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   columns_    Installation_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FND_USER_TAB';
BEGIN
	
	Installation_SYS.Reset_Column_Table(columns_);   
	Installation_SYS.Set_Table_Column(columns_, 'USER_TYPE', 'VARCHAR2(20)', 'N');
	Installation_SYS.Alter_Table(table_name_, columns_, TRUE);
	
END;
-- [END IFS COMPLETE BLOCK]
/

EXEC Installation_SYS.Log_Detail_Time_Stamp('FNDBAS', '2110.upg', 'Timestamp_205');

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------

BEGIN
   Installation_SYS.Remove_Indexes('FND_USER_TAB', 'FND_USER_IX',       TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

PROMPT Upgrade statements IN FILE 2110.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
