-----------------------------------------------------------------------------
--
--  Logical unit: Dictionary
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

-------------------- COMMON COLUMN DEFINITIONS ------------------------------

-------------------- PUBLIC VIEW DEFINITIONS --------------------------------

VIEW Fnd_Tab_Comments IS
   Service = 'Dictionary'
   Prompt = 'Fnd Table Comments'
   Table_Name.Flags = 'KM--L'
   Table_Name.Datatype = 'STRING(30)'
   Table_Name.Prompt = 'Table Name'
   Table_Type.Flags = 'AM--L'
   Table_Type.Datatype = 'STRING(4)'
   Table_Type.Prompt = 'Table Type'
   Comments.Flags = 'A---L'
   Comments.Datatype = 'STRING(4000)'
   Comments.Prompt = 'Comments'
SELECT o.name     table_name,
       CAST('VIEW' AS VARCHAR2(4))     table_type,
       c.comment$ comments
FROM sys.obj$ o, sys.com$ c
WHERE o.owner# = (SELECT u.user# FROM sys.user$ u WHERE u.name = Fnd_Session_API.Get_App_Owner)
AND   o.type# = 4
AND   o.obj# = c.obj#(+)
AND   c.col#(+) IS NULL;

VIEW Fnd_Col_Comments IS
   Service = 'Dictionary'
   Prompt = 'Fnd Column Comments'
   Table_Name.Flags = 'KM--L'
   Table_Name.Datatype = 'STRING(30)'
   Table_Name.Prompt = 'Table Name'
   Column_Name.Flags = 'KM--L'
   Column_Name.Datatype = 'STRING(30)'
   Column_Name.Prompt = 'Column Name'
   Comments.Flags = 'A---L'
   Comments.Datatype = 'STRING(4000)'
   Comments.Prompt = 'Comments'
   Column_Id.Flags = 'A---L'
   Column_Id.Datatype = 'NUMBER'
   Column_Id.Prompt = 'Column Id'
SELECT o.name      table_name,
       c.name      column_name,
       co.comment$ comments,
       c.col#      column_id
FROM sys.obj$ o, sys.col$ c, sys.com$ co
WHERE o.owner# = (SELECT u.user# FROM sys.user$ u WHERE u.name = Fnd_Session_API.Get_App_Owner)
AND   o.type# = 4
AND   o.obj# = c.obj#
AND   c.obj# = co.obj#(+)
AND   c.intcol# = co.col#(+);

VIEW Dictionary_Sys_Lu IS
   Service = 'Dictionary'
   Prompt = 'Logical Units in Logical Unit Dictionary'
   Module.Flags = 'AM--L'
   Module.Datatype = 'STRING(30)'
   Module.Prompt = 'Module'
   Lu_Name.Flags = 'KM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Lu_Prompt.Flags = 'A----'
   Lu_Prompt.Datatype = 'STRING(200)'
   Lu_Prompt.Prompt = 'Logical Unit Prompt'
   Lu_Type.Flags = 'A----'
   Lu_Type.Datatype = 'STRING(1)'
   Lu_Type.Prompt = 'Logical Unit Type'
   Base_Table.Flags = 'A----'
   Base_Table.Datatype = 'STRING(30)'
   Base_Table.Prompt = 'Base Table'
   Base_View.Flags = 'A----'
   Base_View.Datatype = 'STRING(30)'
   Base_View.Prompt = 'Base View'
   Base_Package.Flags = 'A----'
   Base_Package.Datatype = 'STRING(30)'
   Base_Package.Prompt = 'Base Package'
   Enabled_Rowkey.Flags = 'A----'
   Enabled_Rowkey.Datatype = 'STRING(5)'
   Enabled_Rowkey.Prompt = 'rowkey enabled'
   Logical_Unit_Type.Flags = 'A----'
   Logical_Unit_Type.Datatype = 'STRING(30)'
   Logical_Unit_Type.Prompt = 'Type of Logical Unit'
   Custom_Fields.Flags = 'A----'
   Custom_Fields.Datatype = 'STRING(5)'
   Custom_Fields.Prompt = 'Custom Fields'
SELECT module                         module,
       lu_name                        lu_name,
       lu_prompt                      lu_prompt,
       lu_type                        lu_type,
       Dictionary_SYS.Get_Base_Table_Name(lu_name) base_table,
       Dictionary_SYS.Get_Base_View(lu_name) base_view,
       Dictionary_SYS.Get_Base_Package(lu_name) base_package,
       Database_SYS.Is_Rowkey_Enabled(lu_name) enabled_rowkey,
       Nvl(Dictionary_SYS.Get_Logical_Unit_Type(lu_name), 
       CASE lu_type
         WHEN 'L' THEN
            'Entity'
         WHEN 'S' THEN
            'Service'
         ELSE 
            'Unknown'
       END) logical_unit_type,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'CUSTOM_FIELD') custom_fields,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'INFO_CARD') info_cards,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'CUSTOM_LU') custom_lus,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'ENUMERATION') custom_enumerations,
       rowid                         objid
FROM   dictionary_sys_tab;

@SecurityCheck Component.ActiveRead(module)
VIEW Dictionary_Sys_Lu_Active IS
   Service = 'Dictionary'
   Prompt = 'Active Logical Units in Logical Unit Dictionary'
   Module.Flags = 'AM--L'
   Module.Datatype = 'STRING(30)'
   Module.Prompt = 'Module'
   Lu_Name.Flags = 'KM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Lu_Prompt.Flags = 'A----'
   Lu_Prompt.Datatype = 'STRING(200)'
   Lu_Prompt.Prompt = 'Logical Unit Prompt'
   Lu_Type.Flags = 'A----'
   Lu_Type.Datatype = 'STRING(1)'
   Lu_Type.Prompt = 'Logical Unit Type'
   Base_Table.Flags = 'A----'
   Base_Table.Datatype = 'STRING(30)'
   Base_Table.Prompt = 'Base Table'
   Base_View.Flags = 'A----'
   Base_View.Datatype = 'STRING(30)'
   Base_View.Prompt = 'Base View'
   Base_Package.Flags = 'A----'
   Base_Package.Datatype = 'STRING(30)'
   Base_Package.Prompt = 'Base Package'
   Enabled_Rowkey.Flags = 'A----'
   Enabled_Rowkey.Datatype = 'STRING(5)'
   Enabled_Rowkey.Prompt = 'rowkey enabled'
   Logical_Unit_Type.Flags = 'A----'
   Logical_Unit_Type.Datatype = 'STRING(30)'
   Logical_Unit_Type.Prompt = 'Type of Logical Unit'
   Custom_Fields.Flags = 'A----'
   Custom_Fields.Datatype = 'STRING(5)'
   Custom_Fields.Prompt = 'Custom Fields'
SELECT module                         module,
       lu_name                        lu_name,
       lu_prompt                      lu_prompt,
       lu_type                        lu_type,
       Dictionary_SYS.Get_Base_Table_Name(lu_name) base_table,
       Dictionary_SYS.Get_Base_View(lu_name) base_view,
       Dictionary_SYS.Get_Base_Package(lu_name) base_package,
       Database_SYS.Is_Rowkey_Enabled(lu_name) enabled_rowkey,
       Nvl(Dictionary_SYS.Get_Logical_Unit_Type(lu_name), 
       CASE lu_type
         WHEN 'L' THEN
            'Entity'
         WHEN 'S' THEN
            'Service'
         ELSE 
            'Unknown'
       END) logical_unit_type,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'CUSTOM_FIELD') custom_fields,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'INFO_CARD') info_cards,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'CUSTOM_LU') custom_lus,
       Dictionary_SYS.Has_Custom_Objects(lu_name, 'ENUMERATION') custom_enumerations,
       rowid                         objid
FROM   dictionary_sys_tab dictionary_tab;

VIEW Dictionary_Sys_View IS
   Service = 'Dictionary'
   Prompt = 'Views in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   View_Name.Flags = 'KM--L'
   View_Name.Datatype = 'STRING(30)'
   View_Name.Prompt = 'View Name'
   View_Type.Flags = 'A---L'
   View_Type.Datatype = 'STRING(1)'
   View_Type.Prompt = 'View Type'
   Type_Of_View.Flags = 'A---L'
   Type_Of_View.Datatype = 'STRING(15)'
   Type_Of_View.Prompt = 'View Type'
   View_Prompt.Flags = 'A---L'
   View_Prompt.Datatype = 'STRING(200)'
   View_Prompt.Prompt = 'View Prompt'
   View_Index.Flags = 'A----'
   View_Index.Datatype = 'NUMBER'
   View_Index.Prompt = 'View Index in this Logical Unit'
   Validity_Mode.Flags = 'A----'
   Validity_Mode.Datatype = 'STRING(60)'
   Validity_Mode.Prompt = 'Validity Mode'
   View_Comment.Flags = 'A----'
   View_Comment.Datatype = 'STRING(4000)'
   View_Comment.Prompt = 'View Comment'
   Row_Level_Security.Flags = 'A----'
   Row_Level_Security.Datatype = 'STRING(1000)'
   Row_Level_Security.Prompt = 'Row Level Security'
SELECT lu_name                        lu_name,
       view_name                      view_name,
       view_type                      view_type,
       CASE view_type
       WHEN 'B' THEN
          'Base'
       WHEN 'A' THEN
          'Alternative'
       WHEN 'R' THEN
          'Report'
       WHEN 'S' THEN
          'Server Only'
       ELSE
          'Unknown'
       END                            type_of_view,
       view_prompt                    view_prompt,
       view_index                     view_index,
       validity_mode                  validity_mode,
       view_comment                   view_comment,
       row_level_security             row_level_security,
       rowid                          objid
FROM   dictionary_sys_view_tab
WHERE  server_only = 'FALSE';

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_View_Active IS
   Service = 'Dictionary'
   Prompt = 'Active Views in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   View_Name.Flags = 'KM--L'
   View_Name.Datatype = 'STRING(30)'
   View_Name.Prompt = 'View Name'
   View_Type.Flags = 'A---L'
   View_Type.Datatype = 'STRING(1)'
   View_Type.Prompt = 'View Type'
   Type_Of_View.Flags = 'A---L'
   Type_Of_View.Datatype = 'STRING(15)'
   Type_Of_View.Prompt = 'View Type'
   View_Prompt.Flags = 'A---L'
   View_Prompt.Datatype = 'STRING(200)'
   View_Prompt.Prompt = 'View Prompt'
   View_Index.Flags = 'A----'
   View_Index.Datatype = 'NUMBER'
   View_Index.Prompt = 'View Index in this Logical Unit'
   Validity_Mode.Flags = 'A----'
   Validity_Mode.Datatype = 'STRING(60)'
   Validity_Mode.Prompt = 'Validity Mode'
   View_Comment.Flags = 'A----'
   View_Comment.Datatype = 'STRING(4000)'
   View_Comment.Prompt = 'View Comment'
   Row_Level_Security.Flags = 'A----'
   Row_Level_Security.Datatype = 'STRING(1000)'
   Row_Level_Security.Prompt = 'Row Level Security'
   server_only.Flags = 'A----'
   server_only.Datatype = 'STRING(5)'
   server_only.Prompt = 'Server Only'
SELECT lu_name                        lu_name,
       view_name                      view_name,
       view_type                      view_type,
       CASE view_type
       WHEN 'B' THEN
          'Base'
       WHEN 'A' THEN
          'Alternative'
       WHEN 'R' THEN
          'Report'
       WHEN 'S' THEN
          'Server Only'
       ELSE
          'Unknown'
       END                            type_of_view,
       view_prompt                    view_prompt,
       view_index                     view_index,
       validity_mode                  validity_mode,
       view_comment                   view_comment,
       row_level_security             row_level_security,
       server_only                    server_only,
       rowid                          objid
FROM   dictionary_sys_view_tab dictionary_tab;

VIEW Dictionary_Sys_View_Column IS
   Service = 'Dictionary'
   Prompt = 'View Columns in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   View_Name.Flags = 'PM--L'
   View_Name.Datatype = 'STRING(30)'
   View_Name.Prompt = 'View Name'
   Column_Name.Flags = 'KM--L'
   Column_Name.Datatype = 'STRING(30)'
   Column_Name.Prompt = 'Column Name'
   Column_Datatype.Flags = 'A----'
   Column_Datatype.Datatype = 'STRING(30)'
   Column_Datatype.Prompt = 'Column Datatype'
   Column_Prompt.Flags = 'A---L'
   Column_Prompt.Datatype = 'STRING(200)'
   Column_Prompt.Prompt = 'Column Prompt'
   Type_Flag.Flags = 'A----'
   Type_Flag.Datatype = 'STRING(1)'
   Type_Flag.Prompt = 'Attribute Type Flag'
   Required_Flag.Flags = 'A----'
   Required_Flag.Datatype = 'STRING(1)'
   Required_Flag.Prompt = 'Required Flag'
   Insert_Flag.Flags = 'A----'
   Insert_Flag.Datatype = 'STRING(1)'
   Insert_Flag.Prompt = 'Insert Flag'
   Update_Flag.Flags = 'A----'
   Update_Flag.Datatype = 'STRING(1)'
   Update_Flag.Prompt = 'Update Flag'
   Lov_Flag.Flags = 'A----'
   Lov_Flag.Datatype = 'STRING(1)'
   Lov_Flag.Prompt = 'List Of Value Flag'
   Column_Index.Flags = 'A----'
   Column_Index.Datatype = 'NUMBER'
   Column_Index.Prompt = 'Index For When Column Was Created'
   Column_Reference.Flags = 'A----'
   Column_Reference.Datatype = 'STRING(60)'
   Column_Reference.Prompt = 'Column Reference'
   Table_Column_Name.Flags = 'A----'
   Table_Column_Name.Datatype = 'STRING(30)'
   Table_Column_Name.Prompt = 'Name of table column'
   Enumeration.Flags = 'A----'
   Enumeration.Datatype = 'STRING(30)'
   Enumeration.Prompt = 'Enumeration LU'
   Lookup.Flags = 'A----'
   Lookup.Datatype = 'STRING(30)'
   Lookup.Prompt = 'Lookup LU'
   Column_Comment.Flags = 'A----'
   Column_Comment.Datatype = 'STRING(4000)'
   Column_Comment.Prompt = 'Column Comment'
   Row_Level_Security.Flags = 'A----'
   Row_Level_Security.Datatype = 'STRING(1000)'
   Row_Level_Security.Prompt = 'Row Level Security'
SELECT lu_name                        lu_name,
       view_name                      view_name,
       column_name                    column_name,
       column_datatype                column_datatype,
       column_prompt                  column_prompt,
       type_flag                      type_flag,
       required_flag                  required_flag,
       insert_flag                    insert_flag,
       update_flag                    update_flag,
       lov_flag                       lov_flag,
       column_index                   column_index,
       column_reference               column_reference,
       table_column_name              table_column_name,
       enumeration                    enumeration,
       lookup                         lookup,
       column_comment                 column_comment,
       row_level_security             row_level_security,
       rowid                          objid
FROM   dictionary_sys_view_column_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_View_Column_Act IS
   Service = 'Dictionary'
   Prompt = 'Active View Columns in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   View_Name.Flags = 'PM--L'
   View_Name.Datatype = 'STRING(30)'
   View_Name.Prompt = 'View Name'
   Column_Name.Flags = 'KM--L'
   Column_Name.Datatype = 'STRING(30)'
   Column_Name.Prompt = 'Column Name'
   Column_Datatype.Flags = 'A----'
   Column_Datatype.Datatype = 'STRING(30)'
   Column_Datatype.Prompt = 'Column Datatype'
   Column_Prompt.Flags = 'A---L'
   Column_Prompt.Datatype = 'STRING(200)'
   Column_Prompt.Prompt = 'Column Prompt'
   Type_Flag.Flags = 'A----'
   Type_Flag.Datatype = 'STRING(1)'
   Type_Flag.Prompt = 'Attribute Type Flag'
   Required_Flag.Flags = 'A----'
   Required_Flag.Datatype = 'STRING(1)'
   Required_Flag.Prompt = 'Required Flag'
   Insert_Flag.Flags = 'A----'
   Insert_Flag.Datatype = 'STRING(1)'
   Insert_Flag.Prompt = 'Insert Flag'
   Update_Flag.Flags = 'A----'
   Update_Flag.Datatype = 'STRING(1)'
   Update_Flag.Prompt = 'Update Flag'
   Lov_Flag.Flags = 'A----'
   Lov_Flag.Datatype = 'STRING(1)'
   Lov_Flag.Prompt = 'List Of Value Flag'
   Column_Index.Flags = 'A----'
   Column_Index.Datatype = 'NUMBER'
   Column_Index.Prompt = 'Index For When Column Was Created'
   Column_Reference.Flags = 'A----'
   Column_Reference.Datatype = 'STRING(60)'
   Column_Reference.Prompt = 'Column Reference'
   Table_Column_Name.Flags = 'A----'
   Table_Column_Name.Datatype = 'STRING(30)'
   Table_Column_Name.Prompt = 'Name of table column'
   Enumeration.Flags = 'A----'
   Enumeration.Datatype = 'STRING(30)'
   Enumeration.Prompt = 'Enumeration LU'
   Lookup.Flags = 'A----'
   Lookup.Datatype = 'STRING(30)'
   Lookup.Prompt = 'Lookup LU'
   Column_Comment.Flags = 'A----'
   Column_Comment.Datatype = 'STRING(4000)'
   Column_Comment.Prompt = 'Column Comment'
   Row_Level_Security.Flags = 'A----'
   Row_Level_Security.Datatype = 'STRING(1000)'
   Row_Level_Security.Prompt = 'Row Level Security'
SELECT lu_name                        lu_name,
       view_name                      view_name,
       column_name                    column_name,
       column_datatype                column_datatype,
       column_prompt                  column_prompt,
       type_flag                      type_flag,
       required_flag                  required_flag,
       insert_flag                    insert_flag,
       update_flag                    update_flag,
       lov_flag                       lov_flag,
       column_index                   column_index,
       column_reference               column_reference,
       table_column_name              table_column_name,
       enumeration                    enumeration,
       lookup                         lookup,
       column_comment                 column_comment,
       row_level_security             row_level_security,
       rowid                          objid
FROM   dictionary_sys_view_column_tab dictionary_tab;

VIEW Dictionary_Sys_Package IS
   Service = 'Dictionary'
   Prompt = 'Packages in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'KM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Package_Type.Flags = 'AM--L'
   Package_Type.Datatype = 'STRING(50)'
   Package_Type.Prompt = 'Package Type'
SELECT lu_name lu_name,
       package_name package_name,
       package_index package_index,
       package_type package_type,
       CASE package_type
       WHEN 'D' THEN
          'IID'
       WHEN 'N' THEN
          'Normal'
       WHEN 'S' THEN 
          'State'
       ELSE 
          'Unknown'
       END type_of_package,
       rowid objid
FROM dictionary_sys_package_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_Package_Active IS
   Service = 'Dictionary'
   Prompt = 'Active Packages in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'KM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Package_Type.Flags = 'AM--L'
   Package_Type.Datatype = 'STRING(50)'
   Package_Type.Prompt = 'Package Type'
SELECT lu_name lu_name,
       package_name package_name,
       package_index package_index,
       package_type package_type,
       CASE package_type
       WHEN 'D' THEN
          'IID'
       WHEN 'N' THEN
          'Normal'
       WHEN 'S' THEN 
          'State'
       ELSE 
          'Unknown'
       END type_of_package,
       rowid objid
FROM dictionary_sys_package_tab dictionary_tab;

VIEW Dictionary_Sys_Method IS
   Service = 'Dictionary'
   Prompt = 'Methods in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Method_Name.Flags = 'KM--L'
   Method_Name.Datatype = 'STRING(30)'
   Method_Name.Prompt = 'Method Name'
   Method_Type.Flags = 'A---L'
   Method_Type.Datatype = 'STRING(10)'
   Method_Type.Prompt = 'Method Type'
   Type_Of_Method.Flags = 'A---L'
   Type_Of_Method.Datatype = 'STRING(10)'
   Type_Of_Method.Prompt = 'Method Type'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       method_name                    method_name,
       method_type                    method_type,
       CASE method_type
       WHEN 'N' THEN
          'Normal'
       WHEN 'P' THEN
          'Pragma'
       ELSE
          'Unknown'
       END type_of_method,
       rowid                         objid
FROM   dictionary_sys_method_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_Method_Active IS
   Service = 'Dictionary'
   Prompt = 'Active Methods in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Method_Name.Flags = 'KM--L'
   Method_Name.Datatype = 'STRING(30)'
   Method_Name.Prompt = 'Method Name'
   Method_Type.Flags = 'A---L'
   Method_Type.Datatype = 'STRING(10)'
   Method_Type.Prompt = 'Method Type'
   Type_Of_Method.Flags = 'A---L'
   Type_Of_Method.Datatype = 'STRING(10)'
   Type_Of_Method.Prompt = 'Method Type'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       method_name                    method_name,
       method_type                    method_type,
       CASE method_type
       WHEN 'N' THEN
          'Normal'
       WHEN 'P' THEN
          'Pragma'
       ELSE
          'Unknown'
       END type_of_method,
       rowid                         objid
FROM   dictionary_sys_method_tab dictionary_tab;

@ServerOnlyAccess
VIEW Dictionary_Sys_Argument_Tab IS
SELECT d.lu_name          lu_name,
       d.package_name     package_name,
       u.object_name      method_name,
       u.argument_name    argument_name,
       NVL(u.overload, 0) overload,
       u.position         argument_index,
       u.data_type        argument_datatype,
       u.in_out           argument_type,
       u.type_name || NVL2(u.type_subname, '.', '') || u.type_subname complex_argument_type,
       SYSDATE            rowversion
FROM dictionary_sys_package_tab d, user_arguments u
WHERE d.package_name = u.package_name
AND u.data_level = 0
AND u.position > 0;

VIEW Dictionary_Sys_Argument IS
   Service = 'Dictionary'
   Prompt = 'Method Arguments in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Method_Name.Flags = 'KM--L'
   Method_Name.Datatype = 'STRING(30)'
   Method_Name.Prompt = 'Method Name'
   Argument_Name.Flags = 'AM--L'
   Argument_Name.Datatype = 'STRING(30)'
   Argument_Name.Prompt = 'Argument Name'
   Overload.Flags = 'AM---'
   Overload.Datatype = 'NUMBER'
   Overload.Prompt = 'Index for overloaded method where 0 means method is not overloaded'
   Argument_Index.Flags = 'AM---'
   Argument_Index.Datatype = 'NUMBER'
   Argument_Index.Prompt = 'Index for argument in method'
   Argument_Datatype.Flags = 'AM--L'
   Argument_Datatype.Datatype = 'STRING(30)'
   Argument_Datatype.Prompt = 'Argument Datatype'
   Argument_Type.Flags = 'A---L'
   Argument_Type.Datatype = 'STRING(9)'
   Argument_Type.Prompt = 'Argument Type (IN/OUT/IN OUT)'
   complex_argument_type.Flags =  'A---L'
   complex_argument_type.Datatype = 'STRING(60)'
   complex_argument_type.Prompt = 'Complex Argument Type'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       method_name                    method_name,
       argument_name                  argument_name,
       overload                       overload,
       argument_index                 argument_index,
       argument_datatype              argument_datatype,
       argument_type                  argument_type,
       complex_argument_type          complex_argument_type
FROM   dictionary_sys_argument_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_Argument_Active IS
   Service = 'Dictionary'
   Prompt = 'Active Method Arguments in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Method_Name.Flags = 'KM--L'
   Method_Name.Datatype = 'STRING(30)'
   Method_Name.Prompt = 'Method Name'
   Argument_Name.Flags = 'AM--L'
   Argument_Name.Datatype = 'STRING(30)'
   Argument_Name.Prompt = 'Argument Name'
   Overload.Flags = 'AM---'
   Overload.Datatype = 'NUMBER'
   Overload.Prompt = 'Index for overloaded method where 0 means method is not overloaded'
   Argument_Index.Flags = 'AM---'
   Argument_Index.Datatype = 'NUMBER'
   Argument_Index.Prompt = 'Index for argument in method'
   Argument_Datatype.Flags = 'AM--L'
   Argument_Datatype.Datatype = 'STRING(30)'
   Argument_Datatype.Prompt = 'Argument Datatype'
   Argument_Type.Flags = 'A---L'
   Argument_Type.Datatype = 'STRING(9)'
   Argument_Type.Prompt = 'Argument Type (IN/OUT/IN OUT)'
   complex_argument_type.Flags =  'A---L'
   complex_argument_type.Datatype = 'STRING(60)'
   complex_argument_type.Prompt = 'Complex Argument Type'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       method_name                    method_name,
       argument_name                  argument_name,
       overload                       overload,
       argument_index                 argument_index,
       argument_datatype              argument_datatype,
       argument_type                  argument_type,
       complex_argument_type          complex_argument_type
FROM   dictionary_sys_argument_tab dictionary_tab;

VIEW Dictionary_Sys_Domain IS
   Service = 'Dictionary'
   Prompt = 'Domain values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Db_Value.Flags = 'KM--L'
   Db_Value.Datatype = 'STRING(60)'
   Db_Value.Prompt = 'Database Value'
   Client_Value.Flags = 'AM--L'
   Client_Value.Datatype = 'STRING(120)'
   Client_Value.Prompt = 'Client Value'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       db_value                       db_value,
       client_value                   client_value,
       rowid                          objid
FROM   dictionary_sys_domain_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_Domain_Active IS
   Service = 'Dictionary'
   Prompt = 'Active Domain values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Db_Value.Flags = 'KM--L'
   Db_Value.Datatype = 'STRING(60)'
   Db_Value.Prompt = 'Database Value'
   Client_Value.Flags = 'AM--L'
   Client_Value.Datatype = 'STRING(120)'
   Client_Value.Prompt = 'Client Value'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       db_value                       db_value,
       client_value                   client_value,
       rowid                          objid
FROM   dictionary_sys_domain_tab dictionary_tab;

VIEW Dictionary_Sys_State IS
   Service = 'Dictionary'
   Prompt = 'State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Db_State.Flags = 'KM--L'
   Db_State.Datatype = 'STRING(60)'
   Db_State.Prompt = 'Database Value for State'
   Client_State.Flags = 'AM--L'
   Client_State.Datatype = 'STRING(120)'
   Client_State.Prompt = 'Client Value for State'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       db_state                       db_state,
       client_state                   client_state,
       rowid                          objid
FROM   dictionary_sys_state_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_State_Active IS
   Service = 'Dictionary'
   Prompt = 'Active State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Db_State.Flags = 'KM--L'
   Db_State.Datatype = 'STRING(60)'
   Db_State.Prompt = 'Database Value for State'
   Client_State.Flags = 'AM--L'
   Client_State.Datatype = 'STRING(120)'
   Client_State.Prompt = 'Client Value for State'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       db_state                       db_state,
       client_state                   client_state,
       rowid                          objid
FROM   dictionary_sys_state_tab dictionary_tab;

VIEW Dictionary_Sys_State_Event IS
   Service = 'Dictionary'
   Prompt = 'State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Event.Flags = 'KM--L'
   Event.Datatype = 'STRING(60)'
   Event.Prompt = 'Event in the state machine for the LU'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       event                          event,
       rowid                          objid
FROM   dictionary_sys_state_event_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_State_Event_Act IS
   Service = 'Dictionary'
   Prompt = 'Active State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Event.Flags = 'KM--L'
   Event.Datatype = 'STRING(60)'
   Event.Prompt = 'Event in the state machine for the LU'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       event                          event,
       rowid                          objid
FROM   dictionary_sys_state_event_tab dictionary_tab;

VIEW Dictionary_Sys_State_Trans IS
   Service = 'Dictionary'
   Prompt = 'State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   State.Flags = 'KM--L'
   State.Datatype = 'STRING(60)'
   State.Prompt = 'State in the state machine for the LU'
   Allowed_Event.Flags = 'KM--L'
   Allowed_Event.Datatype = 'STRING(60)'
   Allowed_Event.Prompt = 'Allowed event from the state'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       state                          state,
       allowed_event                  allowed_event,
       rowid                          objid
FROM   dictionary_sys_state_trans_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_State_Trans_Act IS
   Service = 'Dictionary'
   Prompt = 'Active State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   State.Flags = 'KM--L'
   State.Datatype = 'STRING(60)'
   State.Prompt = 'State in the state machine for the LU'
   Allowed_Event.Flags = 'KM--L'
   Allowed_Event.Datatype = 'STRING(60)'
   Allowed_Event.Prompt = 'Allowed event from the state'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       state                          state,
       allowed_event                  allowed_event,
       rowid                          objid
FROM   dictionary_sys_state_trans_tab dictionary_tab;

VIEW Dictionary_Sys_State_Mach IS
   Service = 'Dictionary'
   Prompt = 'State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Start_State.Flags = 'PM--L'
   Start_State.Datatype = 'STRING(60)'
   Start_State.Prompt = 'Start state in the state machine for the LU'
   End_State.Flags = 'PM--L'
   End_State.Datatype = 'STRING(60)'
   End_State.Prompt = 'End state in the state machine for the LU'
   Event.Flags = 'PM--L'
   Event.Datatype = 'STRING(60)'
   Event.Prompt = 'Event from the state'
   Updated.Flags = 'AM--L'
   Updated.Datatype = 'DATE'
   Updated.Prompt = 'Last updated'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       start_state                    start_state,
       end_state                      end_state,
       event                          event,
       updated                        updated,
       rowid                          objid
FROM   dictionary_sys_state_mach_tab;

@SecurityCheck LuComponent.ActiveRead(lu_name)
VIEW Dictionary_Sys_State_Mach_Act IS
   Service = 'Dictionary'
   Prompt = 'Active State values in Logical Unit Dictionary'
   Lu_Name.Flags = 'PM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
   Package_Name.Flags = 'PM--L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Start_State.Flags = 'PM--L'
   Start_State.Datatype = 'STRING(60)'
   Start_State.Prompt = 'Start state in the state machine for the LU'
   End_State.Flags = 'PM--L'
   End_State.Datatype = 'STRING(60)'
   End_State.Prompt = 'End state in the state machine for the LU'
   Event.Flags = 'PM--L'
   Event.Datatype = 'STRING(60)'
   Event.Prompt = 'Event from the state'
   Updated.Flags = 'AM--L'
   Updated.Datatype = 'DATE'
   Updated.Prompt = 'Last updated'
SELECT lu_name                        lu_name,
       package_name                   package_name,
       start_state                    start_state,
       end_state                      end_state,
       event                          event,
       updated                        updated,
       rowid                          objid
FROM   dictionary_sys_state_mach_tab dictionary_tab;

VIEW Dictionary_Sys_Tables IS
   Service = 'Dictionary'
   Prompt = 'All tables owned by IFS Application Owner'
SELECT owner                          owner,
       table_name                     table_name,
       tablespace_name                tablespace_name
FROM   dba_tables
WHERE  owner = Fnd_Session_API.Get_App_Owner;

VIEW Dictionary_Sys_Tables_Active IS
   Service = 'Dictionary'
   Prompt = 'All tables owned by IFS Application Owner in Active Modules'
SELECT DISTINCT
       v.owner                          owner,
       v.table_name                     table_name,
       v.tablespace_name                tablespace_name
FROM   Dictionary_Sys_Tables v, module_tab m, dictionary_sys_Tab d
WHERE  d.module = m.module
AND    v.table_name = d.table_name
AND    m.active = 'TRUE'
UNION ALL
SELECT v.owner                          owner,
       v.table_name                   table_name,
       v.tablespace_name                tablespace_name
FROM   Dictionary_Sys_Tables v
WHERE  NOT EXISTS 
(SELECT 1
 FROM  dictionary_sys_Tab d
 WHERE   v.table_name = d.table_name);

VIEW Dictionary_Sys_Tab_Columns IS
   Service = 'Dictionary'
   Prompt = 'All columns in tables owned by IFS Application Owner'
SELECT owner                          owner,
       table_name                     table_name,
       column_name                    column_name,
       column_id                      column_id,
       data_type                      data_type,
       nullable                       nullable,
       data_length                    data_length,
       data_precision                 data_precision,
       data_scale                     data_scale,
       char_length                    char_length,
       data_default                   data_default
FROM   dba_tab_columns
WHERE  owner = Fnd_Session_API.Get_App_Owner
  AND  table_name NOT LIKE 'BIN$%';

VIEW Dictionary_Sys_Tab_Columns_Act IS
   Service = 'Dictionary'
   Prompt = 'All columns in tables owned by IFS Application Owner in Active Modules'
SELECT v.owner                          owner,
       v.table_name                     table_name,
       v.column_name                    column_name,
       v.column_id                      column_id,
       v.data_type                      data_type,
       v.nullable                       nullable,
       v.data_length                    data_length,
       v.data_precision                 data_precision,
       v.data_scale                     data_scale,
       v.char_length                    char_length,
       v.data_default                   data_default
FROM   Dictionary_Sys_Tab_Columns v
WHERE  EXISTS 
(SELECT 1
 FROM module_tab m, dictionary_sys_Tab d
 WHERE d.module = m.module
 AND  v.table_name = d.table_name
 AND  m.active = 'TRUE')
UNION ALL
SELECT v.owner                          owner,
       v.table_name                     table_name,
       v.column_name                    column_name,
       v.column_id                      column_id,
       v.data_type                      data_type,
       v.nullable                       nullable,
       v.data_length                    data_length,
       v.data_precision                 data_precision,
       v.data_scale                     data_scale,
       v.char_length                    char_length,
       v.data_default                   data_default
FROM   Dictionary_Sys_Tab_Columns v
WHERE  NOT EXISTS 
(SELECT 1
 FROM  dictionary_sys_Tab d
 WHERE   v.table_name = d.table_name);


VIEW Dictionary_Sys_Indexes IS
   Service = 'Dictionary'
   Prompt = 'All indexes owned by IFS Application Owner'
SELECT owner                          owner,
       index_name                     index_name,
       table_name                     table_name,
       index_type                     index_type,
       uniqueness                     uniqueness,
       tablespace_name                tablespace_name,
       status                         status
FROM   dba_indexes
WHERE  owner = Fnd_Session_API.Get_App_Owner;

VIEW Dictionary_Sys_Indexes_Act IS
   Service = 'Dictionary'
   Prompt = 'All indexes owned by IFS Application Owner in Active Modules'
SELECT DISTINCT
       v.owner                          owner,
       v.index_name                     index_name,
       v.table_name                     table_name,
       v.index_type                     index_type,
       v.uniqueness                     uniqueness,
       v.tablespace_name                tablespace_name,
       v.status                         status
FROM   Dictionary_Sys_Indexes v, module_tab m, dictionary_sys_Tab d
WHERE  d.module = m.module
AND    v.table_name = d.table_name
AND    m.active = 'TRUE'
UNION ALL
SELECT v.owner                          owner,
       v.index_name                     index_name,
       v.table_name                     table_name,
       v.index_type                     index_type,
       v.uniqueness                     uniqueness,
       v.tablespace_name                tablespace_name,
       v.status                         status
FROM   Dictionary_Sys_Indexes v
WHERE  NOT EXISTS 
(SELECT 1
 FROM  dictionary_sys_Tab d
 WHERE   v.table_name = d.table_name);

VIEW Dictionary_Sys_Ind_Columns IS
   Service = 'Dictionary'
   Prompt = 'All columns in indexes owned by IFS Application Owner'
SELECT index_owner                    owner,
       index_name                     index_name,
       table_name                     table_name,
       column_name                    column_name,
       column_position                column_position,
       descend                        descend
FROM   dba_ind_columns
WHERE  index_owner = Fnd_Session_API.Get_App_Owner;

VIEW Dictionary_Sys_Ind_Columns_Act IS
   Service = 'Dictionary'
   Prompt = 'All columns in indexes owned by IFS Application Owner in Active Modules'
SELECT DISTINCT
       v.owner                          owner,
       v.index_name                     index_name,
       v.table_name                     table_name,
       v.column_name                    column_name,
       v.column_position                column_position,
       v.descend                        descend
FROM   Dictionary_Sys_Ind_Columns v, module_tab m, dictionary_sys_Tab d
WHERE  d.module = m.module
AND    v.table_name = d.table_name
AND    m.active = 'TRUE'
UNION ALL
SELECT v.owner                          owner,
       v.index_name                     index_name,
       v.table_name                     table_name,
       v.column_name                    column_name,
       v.column_position                column_position,
       v.descend                        descend
FROM   Dictionary_Sys_Ind_Columns v
WHERE  NOT EXISTS 
(SELECT 1
 FROM  dictionary_sys_Tab d
 WHERE   v.table_name = d.table_name);

VIEW Dictionary_Sys_Constraints IS
   Service = 'Dictionary'
   Prompt = 'All constraints owned by IFS Application Owner'
SELECT owner                          owner,
       constraint_name                constraint_name,
       constraint_type                constraint_type,
       table_name                     table_name,
       status                         status
FROM   dba_constraints
WHERE  owner = Fnd_Session_API.Get_App_Owner;

VIEW Dictionary_Sys_Constraints_Act IS
   Service = 'Dictionary'
   Prompt = 'All constraints owned by IFS Application Owner in Active Modules'
SELECT DISTINCT
       v.owner                          owner,
       v.constraint_name                constraint_name,
       v.constraint_type                constraint_type,
       v.table_name                     table_name,
       v.status                         status
FROM   Dictionary_Sys_Constraints v, module_tab m, dictionary_sys_Tab d
WHERE  d.module = m.module
AND    v.table_name = d.table_name
AND    m.active = 'TRUE'
UNION ALL
SELECT v.owner                          owner,
       v.constraint_name                constraint_name,
       v.constraint_type                constraint_type,
       v.table_name                     table_name,
       v.status                         status
FROM   Dictionary_Sys_Constraints v
WHERE  NOT EXISTS 
(SELECT 1
 FROM  dictionary_sys_Tab d
 WHERE   v.table_name = d.table_name);

VIEW Module_Lu_Lov IS
   Service = 'Dictionary'
   Prompt = 'Logical Units for Module'
   Module.Flags = 'PM--L'
   Module.Datatype = 'STRING(30)'
   Module.Prompt = 'Module'
   Lu_Name.Flags = 'KM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
SELECT module                         module,
       lu_name                        lu_name
FROM   dictionary_sys_tab;

VIEW Module_Lu_Lov_Active IS
   Service = 'Dictionary'
   Prompt = 'Logical Units for Active Module'
   Module.Flags = 'PM--L'
   Module.Datatype = 'STRING(30)'
   Module.Prompt = 'Module'
   Lu_Name.Flags = 'KM--L'
   Lu_Name.Datatype = 'STRING(30)'
   Lu_Name.Prompt = 'Logical Unit Name'
SELECT v.module                         module,
       v.lu_name                        lu_name
FROM   Module_Lu_Lov v, module_tab m
WHERE  v.module = m.module
AND    m.active = 'TRUE';

VIEW Dictionary_Sys_Method_Lov IS
   Service = 'Dictionary'
   Prompt = 'Dictionery Sys Method Lov'
   Package_Name.Flags = 'PMI-L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Method.Flags = 'KMIUL'
   Method.Datatype = 'STRING(100)'
   Method.Prompt = 'Method'
SELECT package_name    package_name,
       method_name     method
FROM   dictionary_sys_method_tab
ORDER BY package_name,method_name;

VIEW Dictionary_Sys_Method_Lov_Act IS
   Service = 'Dictionary'
   Prompt = 'Dictionery Sys Method Acive Lov'
   Package_Name.Flags = 'PMI-L'
   Package_Name.Datatype = 'STRING(30)'
   Package_Name.Prompt = 'Package Name'
   Method.Flags = 'KMIUL'
   Method.Datatype = 'STRING(100)'
   Method.Prompt = 'Method'
SELECT package_name package_name,
       method_name method
  FROM dictionary_sys_method_tab v, module_tab m, dictionary_sys_Tab d
WHERE  d.module = m.module
AND    v.lu_name = d.lu_name
AND    m.active = 'TRUE'
ORDER BY package_name,method_name;

VIEW Oracle_Rac_Instances IS
   Service = 'Dictionary'
   Prompt = 'Oracle RAC Instances'
   Inst_Id.Flags = 'A----'
   Inst_Id.Datatype = 'NUMBER'
   Inst_Id.Prompt = 'Instance ID'
SELECT inst_id   inst_id
FROM   SYS.GV_$INSTANCE;


VIEW Dictionary_Sys_Active IS
   Service = 'Dictionary'
   Prompt = 'Dictionary Sys Active Records'
SELECT d.module              module,
       d.lu_name             lu_name,
       d.lu_prompt           lu_prompt,
       d.lu_type             lu_type,
       d.table_name          table_name,
       d.refbase             refbase,
       d.objstate            objstate,
       d.objkey              objkey,
       d.based_on            based_on,
       d.based_on_filter     based_on_filter,
       d.base_package        base_package,
       d.objid               objid,
       d.objversion          objversion
FROM   dictionary_sys_tab d, module_tab m
WHERE  d.module = m.module
AND  m.active = 'TRUE';

-------------------- PRIVATE VIEW DEFINITIONS -------------------------------

