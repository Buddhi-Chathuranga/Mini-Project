-----------------------------------------------------------------------------
--
--  Logical unit: FndZipUtil
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------


layer Core;

-------------------- TABLE DEFINITIONS --------------------------------------


-------------------- OTHER DEFINITIONS --------------------------------------

COLLECTION FND_ZIP_UTIL_STRING_TABLE IS TABLE OF VARCHAR2(2000);

COLLECTION FND_ZIP_UTIL_BLOB_TABLE IS TABLE OF BLOB;

BEGIN
   @ApproveDynamicStatement(2020-02-18,Mabose)
   EXECUTE IMMEDIATE 
   'CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "fndZipUtilJavaImpl" AS
   import java.io.*;
   import java.sql.*;
   import java.util.zip.*;

   public class fndZipUtilJavaImpl {
      public static void compressFiles(java.sql.Blob zip, java.sql.Array filenameSqlArray, java.sql.Array filecontentSqlArray) throws Exception {
         String[] filenames = (String[])filenameSqlArray.getArray();
         Blob[] filecontent = (Blob[])filecontentSqlArray.getArray();
         OutputStream os = zip.setBinaryStream(0);           
         BufferedOutputStream bos = new BufferedOutputStream(os);
         ZipOutputStream zos = new ZipOutputStream(bos);

         for (int i = 0; i < filenames.length; i++) {
            String filename = filenames[i];

            InputStream is = filecontent[i].getBinaryStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int bufsize = 1024;
            byte []buf = new byte[bufsize];
            zos.putNextEntry(new ZipEntry(filename));
            int bytesread;
            while ((bytesread = bis.read(buf, 0, bufsize)) != -1) {
               zos.write(buf, 0, bytesread);
            }
            zos.closeEntry();
         }
         zos.flush();
         zos.close();
      }      
   }';
END;