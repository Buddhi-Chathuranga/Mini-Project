-----------------------------------------------------------------------------
--
--  Logical unit: InMemoryView
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

-------------------- PUBLIC VIEW DEFINITIONS --------------------------------


-------------------- PRIVATE VIEW DEFINITIONS -------------------------------

VIEW Fnd_Im_Segments IS
   Prompt = 'In-Memory Segments'
   owner.Flags = 'A---L'
   owner.Datatype = 'STRING(128)'
   segment_name.Flags = 'A---L'
   segment_name.Datatype = 'STRING(128)'
   partition_name.Flags = 'A---L'
   partition_name.Datatype = 'STRING(128)'
   segment_type.Flags = 'A---L'
   segment_type.Datatype = 'STRING(128)'
   tablespace_name.Flags = 'A---L'
   tablespace_name.Datatype = 'STRING(30)'
   inmemory_size.Flags = 'A---L'
   inmemory_size.Datatype = 'NUMBER'
   bytes.Flags = 'A---L'
   bytes.Datatype = 'NUMBER'
   bytes_not_populated.Flags = 'A---L'
   bytes_not_populated.Datatype = 'NUMBER'
   populate_status.Flags = 'A---L'
   populate_status.Datatype = 'STRING(9)'
   inmemory_priority.Flags = 'A---L'
   inmemory_priority.Datatype = 'STRING(8)'
   inmemory_distribute.Flags = 'A---L'
   inmemory_distribute.Datatype = 'STRING(15)'
   inmemory_duplicate.Flags = 'A---L'
   inmemory_duplicate.Datatype = 'STRING(13)'
   inmemory_compression.Flags = 'A---L'
   inmemory_compression.Datatype = 'STRING(17)'
   con_id.Flags = 'A---L'
   con_id.Datatype = 'NUMBER'
   SELECT
      owner                owner,
      segment_name         segment_name,
      partition_name       partition_name,
      segment_type         segment_type,
      tablespace_name      tablespace_name,
      inmemory_size        inmemory_size,
      bytes                bytes,
      bytes_not_populated  bytes_not_populated,
      populate_status      populate_status,
      inmemory_priority    inmemory_priority,
      inmemory_distribute  inmemory_distribute,
      inmemory_duplicate   inmemory_duplicate,
      inmemory_compression inmemory_compression,
      con_id               con_id
   FROM v$im_segments;
    
VIEW Fnd_Dba_Segments IS
   Prompt = 'DBA Segments'
   segment_name.Flags = 'A---L'
   segment_name.Datatype = 'STRING(128)'
   partition_name.Flags = 'A---L'
   partition_name.Datatype = 'STRING(128)'
   bytes.Flags = 'A---L'
   bytes.Datatype = 'NUMBER'

   SELECT
      segment_name         segment_name,
      partition_name       partition_name,
      bytes                bytes
   FROM dba_segments
   WHERE owner = Fnd_Session_API.Get_App_Owner
   AND segment_type = 'TABLE';

   
VIEW Fnd_Dba_Tables IS
   Prompt = 'Fnd In Memory Tables'
   table_name.Flags = 'A---L'
   table_name.Datatype = 'STRING(128)'
   inmemory.Flags = 'A---L'
   inmemory.Datatype = 'STRING(8)'
   num_rows.Flags = 'A---L'
   num_rows.Datatype = 'NUMBER'
   temporary.Flags = 'A---L'
   temporary.Datatype = 'STRING(1)'
   secondary.Flags = 'A---L'
   secondary.Datatype = 'STRING(1)'
   iot_type.Flags = 'A---L'
   iot_type.Datatype = 'STRING(12)'
   
   SELECT 
      table_name     table_name,
      inmemory       inmemory,
      num_rows       num_rows,
      temporary      temporary,
      secondary      secondary,
      iot_type       iot_type
   FROM dba_tables
   WHERE owner = Fnd_Session_API.Get_App_Owner
;

   
VIEW In_Memory_System_Parameters IS
   Prompt = 'List system parameters related with In-Memory area or the Oracle'
   Name.Flags = 'A---L'
   Name.Datatype = 'STRING(128)'
   Value.Flags = 'A---L'
   Value.Datatype = 'STRING(256)'
   
   SELECT in_memory_view_api.InMemory_Parameter_Transleter_(t.Name) Name, in_memory_view_api.InMemory_Parameter_Transleter_(t.Value) Value
      FROM  (SELECT v.description Name, v.display_value Value
             FROM v$parameter v
             WHERE v.name IN ('sga_target',
                              'inmemory_query',
                              'inmemory_max_populate_servers',
                              'optimizer_inmemory_aware',
                              'inmemory_size')
            UNION 
            SELECT Language_SYS.Translate_Constant('InMemoryPackage', 'IM_PKG: Compression Level') Name, Fnd_Setting_API.Get_Value('IM_COMP_LEVEL') Value
            FROM dual) t;

VIEW In_Memory_Usage_Precentage IS
   Prompt = 'InMemory Usage (%)'
   Name.Flags = 'A---L'
   Name.Datatype = 'STRING(128)'
   Value.Flags = 'A---L'
   Value.Datatype = 'STRING(256)'
   
   SELECT 
      CAST('InMemory Usage %' AS VARCHAR2(20)) Name,
      round(
         100 * 
         (SELECT (sum(inmemory_size)) / (1024 * 1024 * 1024) 
            FROM fnd_im_segments) / 
         (SELECT (v.value / (1024 * 1024 * 1024)) 
            FROM v$parameter v 
            WHERE v.name = 'inmemory_size'), 2) Value
   FROM dual;

   
VIEW In_Memory_Average_Comp_Ratio IS
   Prompt = 'Avarage InMemory Compression Ratio'
   AVG_COMP_RATIO.Flags = 'A---L'
   AVG_COMP_RATIO.Datatype = 'NUMBER'

   SELECT 
      round(sum(bytes)/sum(inmemory_size), 2) AVG_COMP_RATIO
   FROM fnd_im_segments;

   
VIEW Ifs_Imaps_Status IS
   Prompt = 'List all IFS preconfigured INAPs and loading status of them'
   Package_Name.Flags = 'A---L'
   Package_Name.Datatype = 'STRING(128)'
   Enabled.Flags = 'A---L'
   Enabled.Datatype = 'STRING(128)'
   Enabled_Db.Flags = 'A---L'
   Enabled_Db.Datatype = 'NUMBER'
   Package_Id.Flags = 'A---L'
   Package_Id.Datatype = 'NUMBER'
   Estimated_Space.Flags = 'A---L'
   Estimated_Space.Datatype = 'NUMBER'

   SELECT package_name, 
         (CASE t.enabled 
            WHEN 0 THEN Language_SYS.Translate_Constant('InMemoryPackage', 'IM_PKG: Disabled')
            ELSE Language_SYS.Translate_Constant('InMemoryPackage', 'IM_PKG: Enabled') END) enabled, 
         t.enabled enabled_db, 
         t.package_id package_id,
         in_memory_package_api.Estimated_Im_Size__(package_id) Estimated_Space
   FROM in_memory_package_tab t
   WHERE t.is_custom_package = 0;


   -- TODO: sould be able to remove this 
VIEW Available_InMemory_Space IS
   Prompt = 'In-Memory area info'
   Available_Space.Flags = 'A---L'
   Available_Space.Datatype = 'NUMBER'
   Used_Space.Flags = 'A---L'
   Used_Space.Datatype = 'NUMBER'
   Allocated_Space.Flags = 'A---L'
   Allocated_Space.Datatype = 'NUMBER'
   
   SELECT 
      Allocated_Space - Used_Space     Available_Space,
      Used_Space                       Used_Space, 
      Allocated_Space                  Allocated_Space
   FROM
      (SELECT 
         ROUND(NVL((SELECT v.value / (1024 * 1024)
            FROM v$parameter v
            WHERE v.name = 'inmemory_size'),0),0)           Allocated_Space,
         ROUND(NVL((SELECT (sum(inmemory_size)) / (1024 * 1024) 
            FROM fnd_im_segments), 0), 0)             Used_Space
      FROM dual);


VIEW In_Memory_Status IS
   Prompt = 'Return In-Memory status as a number to display in a STATE GAUGE in lobby elements'
   Value.Flags = 'A---L'
   Value.Datatype = 'NUMBER'
   
   SELECT 
   In_Memory_View_Api.In_Memory_Status_ Value 
   FROM dual;


VIEW Info_Src_loading_Progress IS
   Prompt = 'Return Loading Progress of in-memory enabled information sources'
   Source_Name.Flags = 'A---L'
   Source_Name.Datatype = 'STRING(64)'
   S_Size.Flags = 'A---L'
   S_Size.Datatype = 'NUMBER'
   Im_Size.Flags = 'A---L'
   IM_Size.Datatype = 'NUMBER'
   Load_Percentage.Flags = 'A---L'
   Load_Percentage.Datatype = 'NUMBER'
   
   -- using Xlr_Direct_Ref_Mviews we can find the main table related with infromation sources 
   -- and using xlr_mv_info_tab we can find wheather in-memory is enabled for that main table or not, 
   -- if im-enabled that means for the info source im is enabled 
   -- in case there is no 1:1 mapping we check wheather all the tables/MVs listed for a paticular information source are in-memory enabled
   -- (there is 1:1 mapping between main table and info source)
   
   SELECT
$IF Component_Biserv_SYS.INSTALLED $THEN
      source_name                       Source_Name,
      s_size                            S_Size,
      inmemory_size                     Im_Size,
      CASE s_size 
         WHEN 0 THEN 0 
         ELSE (s_size - s_not_pop_size)/s_size 
      END                               Load_Percentage
   FROM
   (
      SELECT 
         t.source_name, 
         sum(nvl(ims.bytes, 0))               s_size, 
         sum(nvl(ims.bytes_not_populated, 0)) s_not_pop_size, 
         sum(nvl(ims.inmemory_size, 0))       inmemory_size
      FROM  Xlr_Direct_Ref_Mviews t                                   -- get the main table (1 to 1 mapping from info source to main table, 1 violation found)
      JOIN  Xlr_Mv_Info_Tab it                                        -- find whether in-memory is enabled for main table
         ON t.materialized_view = it.mv_name
      LEFT OUTER JOIN Fnd_Im_Segments ims
         ON it.mv_name = ims.segment_name
      JOIN Xlr_Mv_Ref_Tab xmr
         ON xmr.source_name = t.source_name
      WHERE t.source_type LIKE 'FACT'
      AND it.inmemory = 1                                             -- if in-memory enabled from some information source
      AND (1 = ALL ( SELECT inmemory FROM Xlr_Mv_Ref_Tab xmrt WHERE xmrt.source_name = t.source_name ))
      GROUP BY t.source_name
   )  
$ELSE
      NULL                             Source_Name,
      NULL                             S_Size,
      NULL                             Im_Size,
      NULL                             Load_Percentage
   FROM dual
   WHERE 1=2
$END
;


VIEW In_Memory_Loading IS
   Prompt = 'Return Loading Progress of in-memory packages and information sources'
   Name.Flags = 'A---L'
   Name.Datatype = 'STRING(64)'
   Im_Size.Flags = 'A---L'
   Im_Size.Datatype = 'NUMBER'
   Load_Completion.Flags = 'A---L'
   Load_Completion.Datatype = 'NUMBER'
   
   SELECT 
      Name, 
      Im_Size, 
      Load_Completion
   FROM (
      SELECT 
         package_Name    Name, 
         actual_I_m_Size Im_Size, 
         Load_completion
      FROM In_Memory_Package p
      WHERE p.enabled = 1
   UNION
      SELECT 
         Source_name Name, 
         im_size, 
         Load_percentage Load_completion
      FROM Info_Src_loading_Progress );