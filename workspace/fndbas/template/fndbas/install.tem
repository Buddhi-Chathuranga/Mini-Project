----------------------------------------------------------------------------------------------------------------
--	File:  install.tem
--
--	Purpose: Template to install/upgrade database objects of Components.
--
--	  The template is meant as a starting point to create a script
--	  to install/upgrade the database objects. The template must be checked and
--   possibly edited before usage.
--   The file should be run as the application owner.
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  040527  HAAR  Added code for making installation logging possible.
--  040709  HAAR  Run logging with dynamic sql to avoid errors.
--  040910  ROOD  Changed order of refresh of caches to be the same as in clients (F1PR413).
--  040910  HAAR  Changed symbol logging to TRUE for project Edge. Should be set to
--                FALSE before release.
--  050523  HAAR  Changed to use Installation_SYS for granting of privileged users and roles (F1PR480).
--  051111  HAAR  Removed specific granting of Installation_SYS,
--                it can be granted as all other packages (F1PR483).
--  051129  STDA  Added PostInstallatinonObject and Data section.
--  051221  HAAR  Added code to PostInstallatinonObject and Data section.
--  060111  HAAR  Removed granting of FND_WEBCONFIG, moved to FNDWEB (F1PR480).
--  060306  STDA  Moved spool off from end of template to recompile section.
--  060505  HAAR  Added logging for Post Installation Object and Data (Bug#57767).
--  060511  HAAR  Splitted refresh of caches to before and after PostInstallationData section (Bug#57892).
--  060516  HAAR  Moved granting to IFSSYS and FND_PRINTSERVER to after PostInstallationData section (Bug#57892).
--  061218  HAAR  Added support for detailed logging (Bug#62280).
--  070112  HAAR  Added reinitialize of packages after refresh of caches (Bug#61829).
--  090924  HAAR  Added start of BIServices.tem (Bug#86128).
--  100129  HAAR  Changed so that Installation_SYS holds installation global instead of Dictionary_SYS (EACS-399).
--  100527  HAAR  Changed how to stop background jobs, since we have swithed to DBMS_SCHEDULER (EACS-750).
--  101018  StDa  Added bootstrap section
--  101018  MaBo  Added grant to IAL Owner
--  101101  MaBo  Removed a lot of spooling to diferent log files, only installtem.log remains.
--  101208  MaBo  EACS-1341 New method for compile all invalid objects
--  110518  LaBj  Added timestamps
--  111101  HAAR  Changed how to stop background jobs 
--  120124  MaBo  Only lowercase letters in filename
--  200910  chah  Added Delivery Registration Functionality.
-----------------------------------------------------------------------------------------------------------------

SPOOL _installtem.log
SET VERIFY OFF
SET FEEDBACK OFF
SET ARRAYSIZE 1
SET TRIMSPOOL ON
SET LINESIZE 140

-- [InstallTemTypeStart]

-- This section is generated by the CreateInstallTem process

-- [InstallTemTypeStop]

START define.tem

-- [DB FINAL]
--EXEC Install_Tem_SYS.Finalize_Installation;
-- [END DB FINAL]

--
-- Variables for logging during installation/upgrade
--
-- TRUE enables logging/FALSE disables logging
--
DEFINE LOGGING=TRUE
--
-- TRUE enables logging to table/FALSE enables logging to log file
--
DEFINE PERSISTENT=FALSE
--
-- TRUE enables logging of Database_SYS and Installation_SYS methods 
-- regardless of what parameter to method says.
-- If FALSE then parameter decides if logging occurs
--
DEFINE SHOW_INFO=FALSE

DEFINE log_path="%log_path%/"

DEFINE PLSQL_DEBUG=FALSE
DEFINE PLSQL_OPTIMIZE_LEVEL=2

SET SERVEROUTPUT ON
EXEC Install_Tem_SYS.Show_Debug_Status;

-- [IFS INSTALLER LOOP ; DBMETHOD=Install_Tem_SYS.Dbms_Scheduler_Enabled ; CONDITION=TRUE, ; PROMPT=Dbms_Scheduler must be enabled ; SILENT=ABORT ; ]
-- [IFS INSTALLER LOOP ; DBMETHOD=Install_Tem_SYS.Nls_Length_Semantic_Is_Char ; CONDITION=TRUE, ; PROMPT=Nls_Length_Semantic must be set to CHAR ; SILENT=ABORT ; ]
-- [IFS INSTALLER LOOP ; DBMETHOD=Install_Tem_SYS.Show_Jobs_Trgs_Other_Schema ; CONDITION=0, ; PROMPT=Number of running jobs and enabled triggers in other schema(s) ; SILENT=FALSE ; ]
-- [IFS INSTALLER LOOP ; DBMETHOD=Install_Tem_SYS.Disable_Show_Dbms_Jobs ; CONDITION=0, ; PROMPT=Waiting for running dbms job(s) to stop ; ]

EXEC Install_Tem_SYS.Installation_Support('PRE_INSTALLATION', NULL);

PROMPT
PROMPT Stop scheduler processes and background jobs

EXEC Install_Tem_SYS.Disable_Scheduler_Processes;

PROMPT
PROMPT Show running scheduler processes

SET SERVEROUTPUT ON

-- [IFS INSTALLER LOOP ; DBMETHOD=Install_Tem_SYS.Show_Scheduler_Processes ; CONDITION=0, ; PROMPT=Waiting for running job(s) to complete ; ]

EXEC Install_Tem_SYS.Set_Job_Queue_Processes(&JOB_QUEUE_PROCESSES);

-- [IFS INSTALLER LOOP ; DBMETHOD=Install_Tem_SYS.Background_Processing_On ; CONDITION=TRUE, ; PROMPT=Background processing must be enabled ; SILENT=ABORT ; ]

ALTER SESSION SET PLSQL_DEBUG=&PLSQL_DEBUG;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL=&PLSQL_OPTIMIZE_LEVEL;

SET SERVEROUTPUT OFF

-- [PreUpgradeSectionStart]

-- This section will be built with components which have preupgrade defined for actual upgrade version.

-- [PreUpgradeSectionStop]

-- [BootstrapSectionStart]

-- This section will be built with components which have a bootstrap section
-- Should only be used by Foundation1 components

-- [BootstrapSectionStop]

SET SERVEROUTPUT OFF

-- [DB GENERAL]
-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   Dbms_Application_Info.Set_Module('IFS Applications Installer', NULL);

   Installation_SYS.Log_Time_Stamp_Setup('&LOGGING', '&PERSISTENT');

   Installation_SYS.Set_Show_Info(&SHOW_INFO);

   Installation_SYS.Set_Installation_Mode(TRUE);

   Installation_SYS.Set_Log_Level(2, TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

ALTER SESSION SET PLSQL_DEBUG=&PLSQL_DEBUG;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL=&PLSQL_OPTIMIZE_LEVEL;
-- [END DB GENERAL]

EXEC Dbms_Application_Info.Set_Action('Main Thread');

SET SERVEROUTPUT ON

EXEC Installation_SYS.Set_Po_Snapshot_;

EXEC Installation_SYS.Set_Projection_Snapshot_;

-- [IGNORE IN MULTI INSTALL]

EXEC Installation_SYS.Set_User_Objects_Snapshot_;

-- [END IGNORE IN MULTI INSTALL]

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Component registration','Started');

SET SERVEROUTPUT OFF

-- The CompRegAndDep.sql is generated by the CreateInstallTem process
START CompRegAndDep.sql

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Component registration','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Component activation','Started');

SET SERVEROUTPUT OFF

-- The ActivateComponents.sql is generated by the CreateInstallTem process if not exists
START ActivateComponents.sql

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Component activation','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Set Obsolete Components','Started');

SET SERVEROUTPUT OFF

-- The ObsoleteComponents.sql is generated by the CreateInstallTem process if not exists
START ObsoleteComponents.sql

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Set Obsolete Components','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Installation_SYS.Create_Component_Package(FALSE)','Started');

EXEC Installation_SYS.Create_Component_Package(FALSE);

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Installation_SYS.Create_Component_Package(FALSE)','Finished');

PROMPT Disabling triggers
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling triggers','Started');

PROMPT Logging details are found in _triggers.log

SPOOL OFF

SPOOL _triggers.log

-- [NO DEPLOY LOGGING]
EXEC Install_Tem_SYS.Installation_Support('DISABLE_TRIGGERS', NULL);
-- [END NO DEPLOY LOGGING]

SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling triggers','Finished');

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Deploying fndbas component');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying fndbas component','Started');

SET SERVEROUTPUT OFF

SPOOL OFF

-- [ComponentSectionFndbasStart]

-- This section is generated by the CreateInstallTem process

-- [ComponentSectionFndbasStop]

SPOOL _installtem.log APPEND

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying fndbas component','Finished');

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Deploying base server interfaces in threads');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying base server interfaces for components','Started');

SET SERVEROUTPUT OFF

SPOOL OFF

-- [ComponentSectionBaseServerStart]

-- This section is generated by the CreateInstallTem process

-- [ComponentSectionBaseServerStop]

SPOOL _installtem.log APPEND

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying base server interfaces for components','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT
PROMPT Reinitialize packages

EXEC Dbms_Session.Modify_Package_State(Dbms_Session.Reinitialize);

SET SERVEROUTPUT OFF

BEGIN
   Installation_SYS.Log_Time_Stamp_Setup('&LOGGING', '&PERSISTENT');
   Installation_SYS.Set_Show_Info(&SHOW_INFO);
   Installation_SYS.Set_Installation_Mode(TRUE);
END;
/

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Installation_SYS.Create_Component_Package(TRUE)','Started');

EXEC Installation_SYS.Create_Component_Package(TRUE);

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Installation_SYS.Create_Component_Package(TRUE)','Finished');

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Deploying base server business logic for components in threads');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying base server business logic for components','Started');

SET SERVEROUTPUT OFF

SPOOL OFF

-- [ComponentSectionBusinessLogicStart]

-- This section is generated by the CreateInstallTem process

-- [ComponentSectionBusinessLogicStop]

SPOOL _installtem.log APPEND

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying base server business logic for components','Finished');

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Post Installation Views in threads');

PROMPT Executing Post_Installation_View Methods

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation View Methods','Started');

SPOOL OFF

SPOOL _execute_post_view.tem

-- [NO EXTENDED LOGGING]
-- [NO DEPLOY LOGGING]
EXEC Installation_SYS.List_Post_Installation_Mthds('POST_INSTALLATION_VIEW');
-- [END NO DEPLOY LOGGING]
-- [END NO EXTENDED LOGGING]

SPOOL OFF

SPOOL _execute_post_view.log

START &log_path._execute_post_view.tem

SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation View Methods','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Deploying client code in threads');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying client code for components','Started');

SET SERVEROUTPUT OFF

SPOOL OFF

-- [ComponentSectionClientStart]

-- This section is generated by the CreateInstallTem process

-- [ComponentSectionClientStop]

SPOOL _installtem.log APPEND

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Deploying client code for components','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT
PROMPT Reinitialize packages

EXEC Dbms_Session.Modify_Package_State(Dbms_Session.Reinitialize);

SET SERVEROUTPUT OFF

BEGIN
   Installation_SYS.Log_Time_Stamp_Setup('&LOGGING', '&PERSISTENT');
   Installation_SYS.Set_Show_Info(&SHOW_INFO);
   Installation_SYS.Set_Installation_Mode(TRUE);
END;
/

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Post Installation Objects in threads');

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Object Files','Started');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

SPOOL OFF

-- [PostInstallationObjectStart]

-- This section is generated by the CreateInstallTem process

-- [PostInstallationObjectStop]

SPOOL _installtem.log APPEND

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Object Files','Finished');

PROMPT Executing Post_Installation_Object Methods

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Object Methods','Started');

SPOOL OFF

SPOOL _execute_post_object.tem

-- [NO EXTENDED LOGGING]
-- [NO DEPLOY LOGGING]
EXEC Installation_SYS.List_Post_Installation_Mthds('POST_INSTALLATION_OBJECT');
-- [END NO DEPLOY LOGGING]
-- [END NO EXTENDED LOGGING]

SPOOL OFF


SPOOL _execute_post_object.log

START &log_path._execute_post_object.tem

SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Object Methods','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT
PROMPT Disabling triggers that have been created during installation process
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling triggers','Started');

PROMPT Logging details are found in _triggers.log

SPOOL OFF

SPOOL _triggers.log APPEND

-- [NO DEPLOY LOGGING]
EXEC Install_Tem_SYS.Installation_Support('DISABLE_TRIGGERS', NULL);
-- [END NO DEPLOY LOGGING]

SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling triggers','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Deploying biservices.tem in threads');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','biservices.tem','Started');

SPOOL OFF

START biservices.tem

EXEC Install_Tem_SYS.Installation_Support('BI_POST_INSTALLATION_OBJECT', NULL);

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','biservices.tem','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT
PROMPT Disabling scheduler processes that have been created during installation process
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling scheduler processes','Started');

EXEC Install_Tem_SYS.Disable_Scheduler_Processes;

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling scheduler processes','Finished');

EXEC Install_Tem_SYS.Installation_Support('COMPILE_BASE_PACKAGES', '&REMOVE_DEBUG_INFO');

EXEC Dbms_Application_Info.Set_Module('IFS Applications Installer', 'Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Enabling IFS Applications functionality');

PROMPT
PROMPT Enabling IFS Applications functionality
PROMPT
PROMPT Logging details are found in _enable_rowkey.log, in table database_rowkey_update_tab, and in _convert_lob.log


EXEC Installation_SYS.Log_Time_Stamp('install.tem','Enabling IFS Applications functionality','Started');

SPOOL OFF

SPOOL _enable_rowkey.SQL

-- [NO EXTENDED LOGGING]
-- [NO DEPLOY LOGGING]
EXEC Database_SYS.List_Rowkeys_To_Enable('&ENABLE_ROWKEY', '&ENABLE_ROWKEY_HOURS');
-- [END NO DEPLOY LOGGING]
-- [END NO EXTENDED LOGGING]

SPOOL OFF

SPOOL _convert_lob.SQL

-- [NO EXTENDED LOGGING]
-- [NO DEPLOY LOGGING]
EXEC Database_SYS.List_Lobs_To_Convert('&CONVERT_LOB');
-- [END NO DEPLOY LOGGING]
-- [END NO EXTENDED LOGGING]

SPOOL OFF

SPOOL _enable_rowkey.log

-- [NO DEPLOY LOGGING]
START &log_path._enable_rowkey.SQL
-- [END NO DEPLOY LOGGING]

SPOOL OFF

SPOOL _convert_lob.log

-- [NO DEPLOY LOGGING]
START &log_path._convert_lob.SQL
-- [END NO DEPLOY LOGGING]

SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Enabling IFS Applications functionality','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT
PROMPT Reinitialize packages

EXEC Dbms_Session.Modify_Package_State(Dbms_Session.Reinitialize);

SET SERVEROUTPUT OFF

BEGIN
   Installation_SYS.Log_Time_Stamp_Setup('&LOGGING', '&PERSISTENT');
   Installation_SYS.Set_Show_Info(&SHOW_INFO);
   Installation_SYS.Set_Installation_Mode(TRUE);
END;
/

SET SERVEROUTPUT ON

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT Remove_Inactive_Metadata
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Remove Inactive Metadata','Started');

EXEC Database_SYS.Remove_Inactive_Metadata_;

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Remove Inactive Metadata','Finished');

-- [IGNORE IN MULTI INSTALL]

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Refresh Database Objects');

PROMPT Refresh Database Objects
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refresh Database Objects','Started');

EXEC Install_Tem_SYS.Installation_Support('COMPILE_BASE_PACKAGES', '&REMOVE_DEBUG_INFO');

EXEC Installation_SYS.Set_Installation_Mode(TRUE);

EXEC Installation_SYS.Set_Log_Level(2, TRUE);

PROMPT
PROMPT Removing Debug Information
PROMPT
SET SERVEROUTPUT ON
EXEC Installation_SYS.Remove_Debug_Information('&REMOVE_DEBUG_INFO');

PROMPT
PROMPT Compiling Invalid Objects
PROMPT

SET SERVEROUTPUT ON

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

EXEC Database_SYS.Compile_All_Invalid_Objects;

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refresh Database Objects','Finished');

-- [END IGNORE IN MULTI INSTALL]

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Grant section');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Grant section','Started');
 
SPOOL OFF

-- [Thread SQL_COMMANDS]

-- [SQL_COMMAND GRANT_TO_IFSSYS]
SPOOL _grant_to_ifssys.log
DEFINE GRANTEE = IFSSYS

PROMPT Granting to &GRANTEE
BEGIN
   Installation_SYS.Log_Time_Stamp('install.tem','Granting to &GRANTEE','Started');
   Installation_SYS.Grant_Ifssys(TRUE);
   Installation_SYS.Log_Time_Stamp('install.tem','Granting to &GRANTEE','Finished');
END;
/
UNDEFINE GRANTEE
SPOOL OFF
-- [End SQL_COMMAND]


-- [SQL_COMMAND GRANT_TO_IAL_OWNER]
SPOOL _grant_to_ial_owner.log
DEFINE GRANTEE = &IAL_OWNER

PROMPT Granting to &GRANTEE
BEGIN
   Installation_SYS.Log_Time_Stamp('install.tem','Granting to &GRANTEE','Started');
   Database_SYS.Grant_All_Objects_Ial('&GRANTEE');
   Installation_SYS.Log_Time_Stamp('install.tem','Granting to &GRANTEE','Finished');
END;
/

UNDEFINE GRANTEE
SPOOL OFF
-- [End SQL_COMMAND]


-- [SQL_COMMAND GRANT_TO_IFSDBREADONLY]
SPOOL _grant_to_ifsdbreadonly.log
DEFINE GRANTEE = 'IFSDBREADONLY'
BEGIN
   Installation_SYS.Log_Time_Stamp('install.tem','Granting to &GRANTEE','Started');
   Database_SYS.Grant_All_Objects_Read_Only();
   Installation_SYS.Log_Time_Stamp('install.tem','Granting to &GRANTEE','Finished');
END;
/

UNDEFINE GRANTEE
SPOOL OFF
-- [End SQL_COMMAND]

-- [End thread]

SPOOL _installtem.log APPEND

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Grant section','Finished');

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Refreshing caches');

SET SERVEROUTPUT ON

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT Refreshing Dictionary_SYS
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Dictionary_SYS','Started');

EXEC Dictionary_SYS.Rebuild_Dictionary_Storage_(1, 'COMPUTE');
EXEC Dictionary_SYS.Refresh_Odata_Cache;

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Dictionary_SYS','Finished');

PROMPT Refreshing Custom Objects
PROMPT
PROMPT Logging details are found in _custom_objects.log

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Custom Objects','Started');

SPOOL OFF
SPOOL _custom_objects.log

EXEC Install_Tem_SYS.Installation_Support('REFRESH_CUSTOMOBJECTS', NULL);

SPOOL OFF
SPOOL _installtem.log APPEND

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Custom Objects','Finished');

PROMPT Refreshing Reference_SYS
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Reference_SYS','Started');

EXEC Reference_SYS.Refresh_Active_List__('COMPUTE');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Reference_SYS','Finished');

PROMPT Refreshing Object_Connection_SYS
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Object_Connection_SYS','Started');

EXEC Object_Connection_SYS.Apply_Default_Definitions__(TRUE);
EXEC Object_Connection_SYS.Refresh_Active_List__(5, 'PURGE');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Object_Connection_SYS','Finished');

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Post Installation Data in threads');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Data Files','Started');

SPOOL OFF

-- [PostInstallationDataStart] 

-- This section is generated by the CreateInstallTem process
-- Components that has scripts that grants to roles MUST do it in this section

-- [PostInstallationDataStop]

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Data Files','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Data Seq Files','Started');

-- [Thread SQL_COMMANDS]

-- [SQL_COMMAND POST_DATA_SEQ]

-- [PostInstallationDataSeqStart] 

-- This section is generated by the CreateInstallTem process

-- [PostInstallationDataSeqStop]

-- [End SQL_COMMAND]

-- [End thread]

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Data Seq Files','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT Executing Post_Installation_Data Methods

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Data Methods','Started');

SPOOL OFF

SPOOL _execute_post_data.tem

-- [NO EXTENDED LOGGING]
-- [NO DEPLOY LOGGING]
EXEC Installation_SYS.List_Post_Installation_Mthds('POST_INSTALLATION_DATA');
-- [END NO DEPLOY LOGGING]
-- [END NO EXTENDED LOGGING]

SPOOL OFF


SPOOL _execute_post_data.log

START &log_path._execute_post_data.tem

EXEC Install_Tem_SYS.Installation_Support('BI_POST_INSTALLATION_DATA', NULL);

SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post Installation Data Methods','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Security_SYS.Grant_Inherited_Pres_Objs','Started');

EXEC Security_SYS.Grant_Inherited_Pres_Objs;

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Security_SYS.Grant_Inherited_Pres_Objs','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Installation_SYS.Reset_Module_Delivery_Flags','Started');

EXEC Installation_SYS.Reset_Module_Delivery_Flags;

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Installation_SYS.Reset_Module_Delivery_Flags','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Version and Delivery Registration','Started');

-- the VersionRegistration.sql file will be fed with information from version.yaml file, unless it will be empty

START VersionRegistration.sql

-- the DeliveryRegistration.sql file will be fed when it is used to create deliveries, unless it will be empty

START DeliveryRegistration.sql

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Version and Delivery Registration','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Dropping obsolete components','Started');

PROMPT Logging details are found in _obsoletes.log

SPOOL OFF

SPOOL _obsoletes.log
-- [NO DEPLOY LOGGING]

-- [ComponentSectionDropStart]

-- This section is generated by the CreateInstallTem process

-- [ComponentSectionDropStop]

-- [END NO DEPLOY LOGGING]
SPOOL OFF

SET SERVEROUTPUT ON

SPOOL _installtem.log APPEND

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Dropping obsolete components','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Refreshing caches');

PROMPT Refreshing Security_SYS
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Security_SYS','Started');

EXEC Security_SYS.Refresh_Active_List__(3);
   
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Security_SYS','Finished');

PROMPT Refreshing Report_SYS
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Report_SYS','Started');

EXEC Report_SYS.Init_Reports_Metadata(mode_ => 'COMPUTE');
EXEC Quick_Report_API.Init_Reports_Metadata(mode_ => 'COMPUTE');
EXEC Report_SYS.Refresh_Active_List__(4);

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Refreshing Report_SYS','Finished');

SET SERVEROUTPUT ON

EXEC Fnd_Session_Util_Api.Set_Client_Id_(Install_Tem_SYS.bkg_client_id_);

PROMPT
PROMPT Disabling scheduler processes that have been created during installation process
EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling scheduler processes','Started');

EXEC Install_Tem_SYS.Disable_Scheduler_Processes;

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Disabling scheduler processes','Finished');

EXEC Dbms_Application_Info.Set_Action('Main Thread');
EXEC Dbms_Application_Info.Set_Client_Info('Finalize Installation');

PROMPT
PROMPT Enabling triggers

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Enabling triggers','Started');

PROMPT Logging details are found in _triggers.log

SPOOL OFF

SPOOL _triggers.log APPEND

-- [NO DEPLOY LOGGING]
EXEC Install_Tem_SYS.Installation_Support('ENABLE_TRIGGERS', NULL);
-- [END NO DEPLOY LOGGING]

SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Enabling triggers','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT
PROMPT Start scheduler processes and finalize installation

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Install_Tem_SYS.Finalize_Installation','Started');

EXEC Install_Tem_SYS.Installation_Support('COMPILE_BASE_PACKAGES', '&REMOVE_DEBUG_INFO');

-- [IGNORE IN MULTI INSTALL]

EXEC Installation_SYS.Remove_Debug_Information('&REMOVE_DEBUG_INFO');

EXEC Database_SYS.Compile_All_Invalid_Objects;

EXEC Database_SYS.Compile_Schema_('&IAL_OWNER', '&COMPILE_OTHER_SCHEMA', FALSE);

-- [END IGNORE IN MULTI INSTALL]

EXEC Install_Tem_SYS.Finalize_Installation('TRUE');

SET SERVEROUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Install_Tem_SYS.Finalize_Installation','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

-- [IGNORE IN MULTI INSTALL]

EXEC Database_SYS.Read_User_Objects_Snapshot_('&SHOW_NEW_INVALIDS');

-- [END IGNORE IN MULTI INSTALL]

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post_Installation_Activities','Started');

EXEC Install_Tem_SYS.Installation_Support('POST_INSTALLATION', NULL);

COMMIT
/

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Post_Installation_Activities','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Presentation Object Report','Started');

PROMPT Logging details are found in _pres_object_changes.log

SPOOL OFF

SPOOL _pres_object_changes.log

-- [NO DEPLOY LOGGING]
EXEC Pres_Object_Util_API.Read_Po_Snapshot_;
-- [END NO DEPLOY LOGGING]
                    
SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Presentation Object Report','Finished');

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Projection Grant Report','Started');

PROMPT Logging details are found in _projection_changes.log
                    
SPOOL OFF

SPOOL _projection_changes.log

-- [NO DEPLOY LOGGING]
EXEC Database_SYS.Read_Projection_Snapshot_;
-- [END NO DEPLOY LOGGING]
                    
SPOOL OFF

SPOOL _installtem.log APPEND

SET SERVEROUTPUT ON

EXEC Installation_SYS.Log_Time_Stamp('install.tem','Projection Grant Report','Finished');

EXEC Log_SYS.Set_Log_Level_(Log_SYS.warning_, TRUE);

PROMPT Disable installation logging
EXEC Installation_SYS.Log_Time_Stamp_Setup('FALSE', 'FALSE');

PROMPT Disable Show_Info 
EXEC Installation_SYS.Set_Show_Info(FALSE);

SET SERVEROUT OFF
SPOOL OFF
