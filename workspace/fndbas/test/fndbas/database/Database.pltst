-----------------------------------------------------------------------------
--
--  Logical unit: Database
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Foundation1;
UNITTEST "Is_Rowkey_Enabled__ should return true when rowkey is enabled" FOR
   FUNCTION Is_Rowkey_Enabled__ (
      lu_ IN     VARCHAR2 ) RETURN BOOLEAN;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Dictionary_SYS
   FUNCTION Get_Objkey_Info(lu_ IN     VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      RETURN 'GUID';
   END Get_Objkey_Info;

   @MockPackage Dictionary_SYS
   FUNCTION Get_Base_Table_Name(lu_ IN     VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      RETURN CASE lu_
      WHEN 'A' THEN 'A_TAB'
      WHEN 'B' THEN 'B_TAB'
      ELSE NULL END;
   END Get_Base_Table_Name;

   @MockPackage Installation_SYS
   FUNCTION Get_Column_Nullable(table_name_ IN     VARCHAR2,
      column_name_ IN     VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN CASE table_name_
      WHEN 'A_TAB' THEN 'N'
      WHEN 'B_TAB' THEN 'Y'
      ELSE NULL END;
   END Get_Column_Nullable;

IS
   --Insert your test variables here
   return_   BOOLEAN;
   expected_ BOOLEAN;
   return_str_ VARCHAR2(7);
   return_exp_ VARCHAR2(7);
BEGIN
   FOR
      | expected_ | lu_ |
      |   TRUE    | 'A' |
      |   FALSE   | 'B' |
      |   NULL    | 'C' |

   LOOP
      --Insert your test code here
      return_ := Is_Rowkey_Enabled__(lu_);
      IF return_ IS NULL THEN
         return_str_ := 'NULL';
      ELSIF return_ THEN
         return_str_ := 'TRUE';
      ELSIF NOT return_ THEN
         return_str_ := 'FALSE';
      ELSE
         return_str_ := 'UNKNOWN';
      END IF;
      IF expected_ IS NULL THEN
         return_exp_ := 'NULL';
      ELSIF expected_ THEN
         return_exp_ := 'TRUE';
      ELSIF NOT expected_ THEN
         return_exp_ := 'FALSE';
      ELSE
         return_exp_ := 'UNKNOWN';
      END IF;
      --Insert your assertions here
      ASSERT return_ = expected_ OR (return_ IS NULL AND expected_ IS NULL) MESSAGE 'Expected '||return_exp_||' but returned '||return_str_;
   END LOOP;
END UNITTEST;

UNITTEST "Is_Rowkey_Enabled_Table should return true when rowkey is enabled" FOR
   FUNCTION Is_Rowkey_Enabled_Table (
      table_name_ IN     VARCHAR2 ) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Database_SYS
   FUNCTION Column_Exist(table_name_  IN     VARCHAR2,
      column_name_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN TRUE;
   END Column_Exist;

   @MockPackage Installation_SYS
   FUNCTION Get_Column_On_Null(table_name_  IN     VARCHAR2,
      column_name_ IN     VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN CASE table_name_
      WHEN 'A_TAB' THEN 'YES'
      ELSE 'NO'
   END;
END Get_Column_On_Null;

@MockPackage Installation_SYS
FUNCTION Get_Column_Nullable(table_name_ IN     VARCHAR2,
   column_name_ IN     VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN CASE table_name_
   WHEN 'A_TAB' THEN 'N'
   WHEN 'B_TAB' THEN 'Y'
   ELSE NULL END;
END Get_Column_Nullable;
IS
--Insert your test variables here
return_   VARCHAR2(2000);
expected_ VARCHAR2(2000);
BEGIN
FOR
   | expected_ | table_name_ |
   | 'TRUE'    |  'A_TAB'    |
   | 'FALSE'   |  'B_TAB'    |
   |  NULL     |  'C_TAB'    |
LOOP
   --Insert your test code here
   return_ := Is_Rowkey_Enabled_Table(table_name_);
   --Insert your assertions here
   ASSERT return_ = expected_ OR (return_ IS NULL AND expected_ IS NULL) MESSAGE 'Expected '||expected_||' but returned '||return_;
END LOOP;
END UNITTEST;




