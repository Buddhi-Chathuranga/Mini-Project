-----------------------------------------------------------------------------
--
--  Logical unit: Client
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Foundation1;

UNITTEST "Add_To_Attr should ... when ..." FOR
   PROCEDURE Add_To_Attr (
      name_  IN     VARCHAR2,
      value_ IN     VARCHAR2,
      attr_  IN OUT VARCHAR2 );
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   expected_  VARCHAR2(2000);
BEGIN
   FOR
      | name_ | value_ | attr_  | expected_ |
      | 'A'   |  'A'   |  NULL  |  'AA'   |
      | 'A'   |  NULL  |  NULL  |   'A'   |
      | NULL  |  'A'   |  NULL  |   'A'   |
      | NULL  |  NULL  |  NULL  |   ''    |
      | 'B'   |  'B'   |  'AA'|   'AABB'    |
   LOOP
      --Insert your test code here
      Add_To_Attr(name_, value_, attr_);
      --Insert your assertions here
      ASSERT expected_ = attr_ MESSAGE 'Expected '||expected_||' but  was '||attr_;
   END LOOP;
END UNITTEST;

UNITTEST "Add_To_Attr numeric should ... when ..." FOR
   PROCEDURE Add_To_Attr (
      name_  IN     VARCHAR2,
      value_ IN     NUMBER,
      attr_  IN OUT VARCHAR2 );
USING

   --Insert your mock directives and mock return variables here
   @MockPackage Client_SYS
   PROCEDURE Add_To_Attr (
      name_  IN     VARCHAR2,
      value_ IN     VARCHAR2,
      attr_  IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      attr_ := attr_||name_||field_separator_||value_||record_separator_;
   END Add_To_Attr;
IS
   --Insert your test variables here
   expected_  VARCHAR2(2000);
BEGIN
   FOR
      | name_ | value_ | attr_  | expected_ |
      | 'A'   |  1     |  NULL  |  'A1'   |
      | 'A'   |  NULL  |  NULL  |   'A'   |
      | NULL  |  '1'   |  NULL  |   '1'   |
      | NULL  |  NULL  |  NULL  |   ''    |
      | 'B'   |  '2'   |  'AA'|   'AAB2'    |
      --      | 'A'   |  'A'   |  NULL  |  'ORA-06502: PL/SQL: numeric or value error: character to number conversion error'   |
   LOOP
      --Insert your test code here
      Client_SYS.Add_To_Attr(name_, to_char(value_), attr_);
      --Insert your assertions here
      ASSERT expected_ = attr_ MESSAGE 'Expected '||expected_||' but  was '||attr_;
   END LOOP;
END UNITTEST;

UNITTEST "Remove_Attr should return attr string with the passed attribute removed" FOR
   FUNCTION Remove_Attr (
      name_ IN     VARCHAR2,
      attr_ IN     VARCHAR2 ) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Client_SYS
   PROCEDURE Add_To_Attr (
      name_  IN     VARCHAR2,
      value_ IN     VARCHAR2,
      attr_  IN OUT VARCHAR2 )
   IS
   BEGIN
      attr_ := attr_||name_||field_separator_||value_||record_separator_;
   END Add_To_Attr;

   @MockPackage Client_SYS
   FUNCTION Get_Next_From_Attr (
      attr_  IN     VARCHAR2,
      ptr_   IN OUT NUMBER,
      name_  IN OUT VARCHAR2,
      value_ IN OUT VARCHAR2 ) RETURN BOOLEAN
   IS
      from_  NUMBER;
      to_    NUMBER;
      index_ NUMBER;
   BEGIN
      from_ := nvl(ptr_, 1);
      to_   := instr(attr_, '^', from_);
      IF (to_ > 0) THEN
         index_ := instr(attr_, '=', from_);
         name_  := substr(attr_, from_, index_-from_);
         value_ := substr(attr_, index_+1, to_-index_-1);
         ptr_   := to_+1;
         RETURN(TRUE);
      ELSE
         RETURN(FALSE);
      END IF;
   END Get_Next_From_Attr;
IS
   --Insert your test variables here
   in_attr_  VARCHAR2(2000);
   ptr_     NUMBER;
   id_      VARCHAR2(30);
   value_   VARCHAR2(32767);
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_      | name_ |  attr_            |
      | 'F1=A^'        | 'F2'  |  'F1=A^F2=B^'     |
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F2=B^F3=C^'|
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F2=*^F3=C^'|
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F2=+^F3=C^'|
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F2=$^F3=C^'|
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F2=?^F3=C^'|
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F2=[^F3=C^'|
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F2=]^F3=C^'|
      | NULL           | 'F2'  |  'F2=B^'          |
      | 'F1=A^F3=C^'   | 'F2'  |  'F1=A^F3=C^'     |
      | 'F2=B^'        | NULL  |  'F2=B^'          |
   LOOP
      --Convert input attr_ to correct format
      in_attr_ := attr_;
      attr_ := NULL;
      WHILE Get_Next_From_Attr(in_attr_, ptr_, id_, value_) LOOP
         Client_SYS.Add_To_Attr(id_, value_, attr_);
      END LOOP;
      ptr_ := 1;

      --Insert your test code here
      return_ := Remove_Attr(name_, attr_);

      --Convert return attr_ back to comparable format
      return_ := (REPLACE(REPLACE(return_, chr(30), '^'), chr(31), '='));

      --Insert your assertions here
      ASSERT return_ = expected_ OR (return_ IS NULL AND expected_ IS NULL)MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Test Get_Key_Ref_Info___" FOR
   PROCEDURE Get_Key_Ref_Info___ (
      key_ref_       OUT VARCHAR2,
      sql_column_    OUT VARCHAR2,
      view_       IN     VARCHAR2,
      for_table_  IN     BOOLEAN DEFAULT FALSE);
USING
   --Insert your mock directives and mock return variables here
   @MockTable dictionary_sys_view_column_act
   VALUES
      |  view_name | column_name | column_datatype | enumeration | table_column_name |type_flag |
      | 'TEST_VIEW'| 'NORMAL_COL'| 'TEXT'          | NULL        | NULL              | 'K'      |
      | 'TEST_VIEW_1'| 'NORMAL_COL_B'| 'TEXT'          | NULL        | NULL              | 'P'      |
      | 'TEST_VIEW_1'| 'NORMAL_COL_A'| 'TEXT'          | NULL        | NULL              | 'K'      |
      | 'TEST_VIEW_1'| 'NORMAL_COL_C'| 'TEXT'          | NULL        | NULL              | 'A'      |
      | 'TEST_VIEW_2'| 'NORMAL_COL_B'| 'TEXT'          | NULL        | NULL              | 'P'      |
      | 'TEST_VIEW_2'| 'ENUM_COL_A'| 'TEXT'          | 'TestEnum'  | NULL              | 'K'      |
      | 'TEST_VIEW_3'| 'DIFF_COL_B'| 'NUMBER'        | NULL        | 'DIFF_COL_B_TAB'  | 'P'      |
      | 'TEST_VIEW_3'| 'ENUM_COL_A'| 'TEXT'          | 'TestEnum'  | NULL              | 'K'      |
      | 'TEST_VIEW_4'| 'NORMAL_COL_A'| 'NUMBER'        | NULL        | 'DIFF_COL_B_TAB'  | 'P'      |
      | 'TEST_VIEW_4'| 'DATE_COL_A'| 'DATE'          | NULL        | NULL              | 'K'      |
      | 'TEST_VIEW_5'| 'NORMAL_COL_A'| 'NUMBER'        | NULL        | NULL              | 'P'      |
      | 'TEST_VIEW_5'| 'DATE_COL_A'| 'DATE'          | NULL        | 'DT'              | 'K'      |
      | 'TEST_VIEW_6'| 'ENUM_COL_A'| 'TEXT'          | 'TestEnum'  | NULL              | 'P'      |
      | 'TEST_VIEW_6'| 'DATE_COL_A'| 'DATE'          | NULL        | 'DT'              | 'K'      |
      | 'TEST_VIEW_6'| 'DIFF_COL_B'| 'TEXT'          | NULL        | 'DIFF_COL_B_TB'   | 'K'      |
      | 'TEST_VIEW_7'| 'ENUM_COL_A'| 'TEXT'          | 'TestEnum'  | 'TEST'            | 'P'      |
      | 'TEST_VIEW_7'| 'DATE_COL_A'| 'DATE'          | NULL        | 'DT'              | 'K'      |
      | 'TEST_VIEW_7'| 'DIFF_COL_B'| 'TEXT'          | NULL        | 'DIFF_COL_B_TB'   | 'K'      |

      END VALUES;

   IS
      --Insert your test variables here
      out_key_ref_  VARCHAR2(2000);
      out_sql_col_  VARCHAR2(2000);
      expected_key_ref_ VARCHAR2(32000);
      expected_sql_column_ VARCHAR2(32000);

      BEGIN
         FOR
            |view_ | for_table_ | expected_key_ref_ | expected_sql_column_|
            |'TEST_VIEW'   |    FALSE   | 'NORMAL_COL=^'    |'''NORMAL_COL=''||NORMAL_COL||''^'''|
            |'TEST_VIEW_1'   |    FALSE   | 'NORMAL_COL_A=^NORMAL_COL_B=^' |'''NORMAL_COL_A=''||NORMAL_COL_A||''^NORMAL_COL_B=''||NORMAL_COL_B||''^'''|
            |'TEST_VIEW_2'   |    FALSE   | 'ENUM_COL_A_DB=^NORMAL_COL_B=^' |'''ENUM_COL_A_DB=''||ENUM_COL_A_DB||''^NORMAL_COL_B=''||NORMAL_COL_B||''^'''|
            |'TEST_VIEW_2'   |    TRUE    | 'ENUM_COL_A_DB=^NORMAL_COL_B=^' |'''ENUM_COL_A_DB=''||ENUM_COL_A||''^NORMAL_COL_B=''||NORMAL_COL_B||''^'''|
            |'TEST_VIEW_3'   |    FALSE   | 'DIFF_COL_B=^ENUM_COL_A_DB=^' |'''DIFF_COL_B=''||DIFF_COL_B||''^ENUM_COL_A_DB=''||ENUM_COL_A_DB||''^'''|
            |'TEST_VIEW_3'   |    TRUE    | 'DIFF_COL_B=^ENUM_COL_A_DB=^' |'''DIFF_COL_B=''||DIFF_COL_B_TAB||''^ENUM_COL_A_DB=''||ENUM_COL_A||''^'''|
            |'TEST_VIEW_4'   |    FALSE   | 'DATE_COL_A=^NORMAL_COL_A=^' |'''DATE_COL_A=''||to_char(DATE_COL_A,''YYYY-MM-DD-HH24.MI.SS'')||''^NORMAL_COL_A=''||NORMAL_COL_A||''^'''|
            |'TEST_VIEW_4'   |    TRUE    | 'DATE_COL_A=^NORMAL_COL_A=^' |'''DATE_COL_A=''||to_char(DATE_COL_A,''YYYY-MM-DD-HH24.MI.SS'')||''^NORMAL_COL_A=''||DIFF_COL_B_TAB||''^'''|
            |'TEST_VIEW_5'   |    FALSE   | 'DATE_COL_A=^NORMAL_COL_A=^' |'''DATE_COL_A=''||to_char(DATE_COL_A,''YYYY-MM-DD-HH24.MI.SS'')||''^NORMAL_COL_A=''||NORMAL_COL_A||''^'''|
            |'TEST_VIEW_5'   |    TRUE    | 'DATE_COL_A=^NORMAL_COL_A=^' |'''DATE_COL_A=''||to_char(DT,''YYYY-MM-DD-HH24.MI.SS'')||''^NORMAL_COL_A=''||NORMAL_COL_A||''^'''|
            |'TEST_VIEW_6'   |    FALSE   | 'DATE_COL_A=^DIFF_COL_B=^ENUM_COL_A_DB=^' |'''DATE_COL_A=''||to_char(DATE_COL_A,''YYYY-MM-DD-HH24.MI.SS'')||''^DIFF_COL_B=''||DIFF_COL_B||''^ENUM_COL_A_DB=''||ENUM_COL_A_DB||''^'''|
            |'TEST_VIEW_6'   |    TRUE    | 'DATE_COL_A=^DIFF_COL_B=^ENUM_COL_A_DB=^' |'''DATE_COL_A=''||to_char(DT,''YYYY-MM-DD-HH24.MI.SS'')||''^DIFF_COL_B=''||DIFF_COL_B_TB||''^ENUM_COL_A_DB=''||ENUM_COL_A||''^'''|
            |'TEST_VIEW_7'   |    FALSE   | 'DATE_COL_A=^DIFF_COL_B=^ENUM_COL_A_DB=^' |'''DATE_COL_A=''||to_char(DATE_COL_A,''YYYY-MM-DD-HH24.MI.SS'')||''^DIFF_COL_B=''||DIFF_COL_B||''^ENUM_COL_A_DB=''||ENUM_COL_A_DB||''^'''|
            |'TEST_VIEW_7'   |    TRUE    | 'DATE_COL_A=^DIFF_COL_B=^ENUM_COL_A_DB=^' |'''DATE_COL_A=''||to_char(DT,''YYYY-MM-DD-HH24.MI.SS'')||''^DIFF_COL_B=''||DIFF_COL_B_TB||''^ENUM_COL_A_DB=''||TEST||''^'''|
         LOOP
            --Insert your test code here
            Get_Key_Ref_Info___(out_key_ref_, out_sql_col_, view_, for_table_);
            --Insert your assertions here
            ASSERT out_key_ref_ = expected_key_ref_    MESSAGE 'Expected KeyRef '||expected_key_ref_||' but  was '||out_key_ref_;
            ASSERT out_sql_col_ = expected_sql_column_ MESSAGE 'Expected SqlCol '||expected_sql_column_||' but  was '||out_sql_col_;
         END LOOP;
      END UNITTEST;

