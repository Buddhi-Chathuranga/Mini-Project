-----------------------------------------------------------------------------
--
--  Logical unit: QuickReport
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
UNITTEST "Validate_SQL_Expression___ should validate the sql expression when called" FOR
   FUNCTION Validate_SQL_Expression___ (
      validate_status_         OUT VARCHAR2,
      stmt_                 IN     CLOB,
      is_import_validation_ IN     BOOLEAN DEFAULT FALSE) RETURN VARCHAR2;
USING
   @MockPackage Fnd_Session_API
   FUNCTION Get_Language  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END Get_Language;

IS
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
   output_   VARCHAR2(2000);
   output1_  VARCHAR2(2000);
BEGIN
   FOR
      | expected_                                                          | output1_          | stmt_                     | is_import_validation_ |
      |'SQL Expression cannot be null for SQL Quick Reports.'              |   ''              |  ''                       | FALSE                 |
      |'The Select Statement syntax was validated successfully.'           |   'VALID'         |  'select * from fnd_user' | FALSE                 |
      |'Sql Expression must be a SELECT statement [slect * from fnd_user].'|   'INVALID'       |  'slect * from fnd_user'  | FALSE                 |
      |'The Select Statement syntax was validated successfully.'           |   'INVALID'       |  'select * from user1'    | FALSE                 |

   LOOP
      return_ := Validate_SQL_Expression___(output_, stmt_, is_import_validation_);

      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
      ASSERT validate_status_ = output1_ OR validate_status_ IS NULL MESSAGE 'Expected '||output1_||' but  was '||validate_status_;
   END LOOP;
END UNITTEST;


UNITTEST "Get_Query_Value___ should return query depending on qr_type" FOR
   FUNCTION Get_Query_Value___ (
      qr_type_ IN     VARCHAR2,
      query_   IN     CLOB) RETURN VARCHAR2;
USING
IS
   --Test variables
   return_   CLOB;
   expected_ CLOB;
BEGIN
   FOR
      | expected_ | qr_type_ | query_ |
      | 'Q1'      |  'QUERY' |  'Q1'  |
      | NULL      |  'ABC'   |  'Q2'  |
      | NULL      |  NULL    |  'Q3'  |
      | NULL      |  NULL    |  'Q4'  |
      | NULL      |  'QUERY' |  NULL  |
   LOOP
      --test code
      return_ := Get_Query_Value___(qr_type_, query_);
      --Assertions
      ASSERT NVL(return_, '--@@--') = NVL(expected_, '--@@--') MESSAGE 'Expected '|| expected_ ||' but returned '|| return_;
   END LOOP;
END UNITTEST;

-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------


