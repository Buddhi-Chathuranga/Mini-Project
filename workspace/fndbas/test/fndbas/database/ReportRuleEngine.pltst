-----------------------------------------------------------------------------
--
--  Logical unit: ReportRuleEngine
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;


-------------------- PUBLIC DECLARATIONS ------------------------------------


-----------------Execute report rules for print dialog-------------------------


-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
UNITTEST "get_TagAt___ Test" FOR
   FUNCTION get_TagAt___(
      start_index_ NUMBER,
      str_ VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_                                                             | start_index_ | str_                                                      |
      |   '[@PURCHASE_ORDER_PRINT_REP/PO_HEADERS/PO_HEADER/COMPANY]'          |  1           | '[@PURCHASE_ORDER_PRINT_REP/PO_HEADERS/PO_HEADER/COMPANY]'|
      |   '[@PURCHASE_ORDER_PRINT_REP/PO_HEADERS/'                            |  1           | '[@PURCHASE_ORDER_PRINT_REP/PO_HEADERS/'                  |
      |   '['                                                                 |  1           | '['                                                       |
   LOOP
      --Insert your test code here
      return_ := get_TagAt___(start_index_, str_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Next_tag_pos___ Test" FOR
   FUNCTION Next_tag_pos___(expression_ VARCHAR2) RETURN NUMBER;
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   return_   NUMBER;
   expected_ NUMBER;
   expression1_ VARCHAR2(32000) := '[@PURCHASE_ORDER_PRINT_REP/PO_HEADERS/PO_HEADER/COMPANY]';
   expression2_ VARCHAR2(32000) := '[#PURCHASE_ORDER_PRINT_REP]';
   expression3_ VARCHAR2(32000) := '[*PURCHASE_ORDER_PRINT_REP]';
BEGIN
   FOR
      | expected_ | expression_   |
      | 1         |  expression1_ |
      | 1         |  expression2_ |
      | 0         |  expression3_ |
   LOOP
      --Insert your test code here
      return_ := Next_tag_pos___(expression_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Evaluate_NextTag___ Test" FOR
   FUNCTION Evaluate_NextTag___(
      expression_ VARCHAR2,
      result_key_ NUMBER,
      formatter_properties_ VARCHAR2,
      rule_id_ NUMBER,
      next_pos_ NUMBER DEFAULT 1)RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @Mock
   FUNCTION get_TagAt___ (
      start_index_ NUMBER,
      str_ VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF SUBSTR(str_,start_index_,1) != '[' THEN
         RETURN NULL;
      ELSE
         RETURN str_;
      END IF;
   END get_TagAt___;

   @Mock
   FUNCTION Evaluate_XPath___(
      statement_in_ VARCHAR2,
      result_key_ NUMBER,
      formatter_properties_ IN     VARCHAR2,
      rule_id_ NUMBER) RETURN VARCHAR2
   IS
      tag1_ VARCHAR2(32000) := 'MTS/Batch';
   BEGIN
      RETURN tag1_;
   END Evaluate_XPath___;
IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
   expression1_ VARCHAR2(32000) := '[@PURCHASE_ORDER_PRINT_REP/PO_HEADERS/PO_HEADER/COMPANY]';
   formatter_properties1_ VARCHAR2(32000) := 'ReportIdPURCHASE_ORDER_PRINT_REPCurrentUserIFSAPPCurrentLanguageenResultKey19367ReportTitlePurchase Order';
BEGIN
   FOR
      | expected_  | expression_    | result_key_ | formatter_properties_   | rule_id_ | next_pos_ |
      | 'MTS/Batch'|  expression1_  |  19367      |  formatter_properties1_ |  30      |  1        |
   LOOP
      --Insert your test code here
      return_ := Evaluate_NextTag___(expression_, result_key_, formatter_properties_, rule_id_, next_pos_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Evaluate_MergedCondition___ Test" FOR
   FUNCTION Evaluate_MergedCondition___(
      merged_condition_in_ VARCHAR2) RETURN BOOLEAN;
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   return_   BOOLEAN;
   expected_ BOOLEAN;
   merged_condition_1_ VARCHAR2(32000) := '(1)';
   merged_condition_2_ VARCHAR2(32000) := '(0)';
   merged_condition_3_ VARCHAR2(32000) := '1';
   merged_condition_4_ VARCHAR2(32000) := '0';
BEGIN
   FOR
      | expected_ | merged_condition_in_ |
      |  TRUE     |  merged_condition_1_ |
      |  FALSE    |  merged_condition_2_ |
      |  TRUE     |  merged_condition_3_ |
      |  FALSE    |  merged_condition_4_ |
   LOOP
      --Insert your test code here
      return_ := Evaluate_MergedCondition___(merged_condition_in_);
      --Insert your assertions here
      ASSERT return_ = expected_;
   END LOOP;
END UNITTEST;

UNITTEST "Get_First_NVP___ Test" FOR
   PROCEDURE Get_First_NVP___(
      attr_        IN     VARCHAR2 ,
      first_name_     OUT VARCHAR2,
      first_value_    OUT VARCHAR2,
      rest_attr_      OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   output1_  VARCHAR2(2000);
   output2_  VARCHAR2(2000);
   output3_  VARCHAR2(2000);
   null_value_ VARCHAR2(100) := NULL;
BEGIN
   FOR
      | attr_                                                                                         | first_name_ | first_value_                    | rest_attr_                                                                        |
      | 'FromPage=4;LangCode=bp;PrinterId=PDF_PRINTER;ShowAllPrinters=YES;'                           |  'FromPage' |  '4'                            |  'LangCode=bp;PrinterId=PDF_PRINTER;ShowAllPrinters=YES;'                         |
      | 'FromPage=4;'                                                                                 |  'FromPage' |  '4'                            |  null_value_                                                                      |
      | 'FromPage'                                                                                    |  null_value_|  null_value_                    |  null_value_                                                                      |
      | 'LangCode=sv;LayoutFile=ModuleRep.rdl;LocaleCountry=SE;LocaleLanguage=ar;PrinterId=PRINTER1;' |  'LangCode' |  'sv'                           |  'LayoutFile=ModuleRep.rdl;LocaleCountry=SE;LocaleLanguage=ar;PrinterId=PRINTER1;'|
      | 'LayoutFile=PurchaseOrderPrintRepNew.rdl;'                                                    | 'LayoutFile'|  'PurchaseOrderPrintRepNew.rdl' |  null_value_                                                                      |
   LOOP
      --Insert your test code here
      Get_First_NVP___(attr_, output1_, output2_, output3_);
      --Insert your assertions here
      ASSERT (output1_ = first_name_ OR output3_ IS NULL);
      ASSERT (output2_ = first_value_ OR output3_ IS NULL);
      ASSERT (output3_ = rest_attr_ OR output3_ IS NULL);
   END LOOP;
END UNITTEST;

UNITTEST "Action_PreSelectProperty___ Test" FOR
   PROCEDURE Action_PreSelectProperty___(
      action_property_list_ IN     VARCHAR2,
      report_format_rec_    IN OUT REPORT_FORMAT_TAB%ROWTYPE);
USING
   --Insert your mock directives and mock return variables here
   @Mock
   PROCEDURE Get_First_NVP___( --get first name value pair
      attr_        IN     VARCHAR2 ,
      first_name_     OUT VARCHAR2,
      first_value_    OUT VARCHAR2,
      rest_attr_      OUT VARCHAR2)
   IS
      nvp_    VARCHAR2(100);
   BEGIN
      nvp_ := SUBSTR(attr_,1, (INSTR(attr_,';')-1));
      first_name_ := SUBSTR(nvp_,1,(INSTR(nvp_,'=')-1));
      first_value_ :=SUBSTR(nvp_,(INSTR(nvp_,'=')+1),(LENGTH(nvp_)-(INSTR(nvp_,'='))));
      IF LENGTH(attr_) != INSTR(attr_,';') THEN
         rest_attr_ := SUBSTR(attr_,(INSTR(attr_,';')+1),(LENGTH(attr_)-(INSTR(attr_,';'))));
      ELSE
         rest_attr_ :=NULL;
      END IF;
   END Get_First_NVP___;
IS
   --Insert your test variables here
   from_page_ NUMBER := 4;
   lang_code_ VARCHAR2(100) := 'bp';
   printer_id_ VARCHAR2(100) := 'PDF_PRINTER';
   pages_ VARCHAR2(100) := '4-0';
   output1_  REPORT_FORMAT_TAB%ROWTYPE;
   rec_ REPORT_FORMAT_TAB%ROWTYPE;
BEGIN
   rec_.result_key := 20983;
   rec_.report_id := 'CUSTOMER_ORDER_DELIV_NOTE_REP';
   FOR
      | action_property_list_                                                 | report_format_rec_ |
      | 'FromPage=4;LangCode=bp;PrinterId=PDF_PRINTER;ShowAllPrinters=YES;'   | rec_               |
   LOOP
      --Insert your test code here
      output1_ := report_format_rec_;
      Action_PreSelectProperty___(action_property_list_, output1_);
      --Insert your assertions here
      ASSERT output1_.from_page = from_page_;
      ASSERT output1_.lang_code = lang_code_;
      ASSERT output1_.printer_id = printer_id_;
      ASSERT output1_.pages = pages_;
   END LOOP;
END UNITTEST;

UNITTEST "Action_SetProperty___ Test" FOR
   PROCEDURE Action_SetProperty___(
      action_property_list_ IN     VARCHAR2,
      report_format_rec_    IN OUT REPORT_FORMAT_TAB%ROWTYPE,
      flag_field_           IN OUT VARCHAR2);
USING
   --Insert your mock directives and mock return variables here
   @Mock
   PROCEDURE Get_First_NVP___( --get first name value pair
      attr_        IN     VARCHAR2 ,
      first_name_     OUT VARCHAR2,
      first_value_    OUT VARCHAR2,
      rest_attr_      OUT VARCHAR2)
   IS
      nvp_    VARCHAR2(100);
   BEGIN
      nvp_ := SUBSTR(attr_,1, (INSTR(attr_,';')-1));
      first_name_ := SUBSTR(nvp_,1,(INSTR(nvp_,'=')-1));
      first_value_ :=SUBSTR(nvp_,(INSTR(nvp_,'=')+1),(LENGTH(nvp_)-(INSTR(nvp_,'='))));
      IF LENGTH(attr_) != INSTR(attr_,';') THEN
         rest_attr_ := SUBSTR(attr_,(INSTR(attr_,';')+1),(LENGTH(attr_)-(INSTR(attr_,';'))));
      ELSE
         rest_attr_ :=NULL;
      END IF;
   END Get_First_NVP___;
IS
   --Insert your test variables here
   layout_name_ VARCHAR2(200) := 'PurchaseOrderPrintRepNew.rdl';
   output1_  REPORT_FORMAT_TAB%ROWTYPE;
   output2_  VARCHAR2(2000);
   rec_ REPORT_FORMAT_TAB%ROWTYPE;
BEGIN
   rec_.result_key := 21022;
   rec_.report_id := 'PURCHASE_ORDER_PRINT_REP';
   FOR
      | action_property_list_                       | report_format_rec_ | flag_field_ |
      | 'LayoutFile=PurchaseOrderPrintRepNew.rdl;'  |  rec_              |  'A'        |
   LOOP
      --Insert your test code here
      output1_ := report_format_rec_;
      output2_ := flag_field_;
      Action_SetProperty___(action_property_list_, output1_, output2_);
      --Insert your assertions here
      ASSERT output1_.layout_name = layout_name_;
      ASSERT output2_ = 'ALayoutFile,';
   END LOOP;
END UNITTEST;

UNITTEST "Action_SetDefault___ Test" FOR
   PROCEDURE Action_SetDefault___(
      action_property_list_ IN     VARCHAR2,
      report_format_rec_    IN OUT REPORT_FORMAT_TAB%ROWTYPE);
USING
   --Insert your mock directives and mock return variables here
   @Mock
   PROCEDURE Get_First_NVP___( --get first name value pair
      attr_        IN     VARCHAR2 ,
      first_name_     OUT VARCHAR2,
      first_value_    OUT VARCHAR2,
      rest_attr_      OUT VARCHAR2)
   IS
      nvp_    VARCHAR2(100);
   BEGIN
      nvp_ := SUBSTR(attr_,1, (INSTR(attr_,';')-1));
      first_name_ := SUBSTR(nvp_,1,(INSTR(nvp_,'=')-1));
      first_value_ :=SUBSTR(nvp_,(INSTR(nvp_,'=')+1),(LENGTH(nvp_)-(INSTR(nvp_,'='))));
      IF LENGTH(attr_) != INSTR(attr_,';') THEN
         rest_attr_ := SUBSTR(attr_,(INSTR(attr_,';')+1),(LENGTH(attr_)-(INSTR(attr_,';'))));
      ELSE
         rest_attr_ :=NULL;
      END IF;
   END Get_First_NVP___;
IS
   --Insert your test variables here
   copies_ NUMBER := 3;
   lang_code_ VARCHAR2(100) := 'sv';
   layout_name_ VARCHAR2(100) := 'ModuleRep.rdl';
   printer_id_ VARCHAR2(100) := 'PRINTER1';
   lang_code_rfc3066_ VARCHAR2(100) := 'sv-GB';
   output1_  REPORT_FORMAT_TAB%ROWTYPE;
   rec_ REPORT_FORMAT_TAB%ROWTYPE;
BEGIN
   rec_.result_key := 21022;
   rec_.report_id := 'MODULE_REP';
   FOR
      | action_property_list_                                                                                  | report_format_rec_ |
      | 'Copies=3;LangCode=sv;LayoutFile=ModuleRep.rdl;LocaleCountry=GB;LocaleLanguage=sv;PrinterId=PRINTER1;' |  rec_              |
   LOOP
      --Insert your test code here
      output1_ := report_format_rec_;
      Action_SetDefault___(action_property_list_, output1_);
      --Insert your assertions here
      ASSERT output1_.copies = copies_;
      ASSERT output1_.lang_code = lang_code_;
      ASSERT output1_.layout_name = layout_name_;
      ASSERT output1_.printer_id = printer_id_;
      ASSERT output1_.lang_code_rfc3066 = lang_code_rfc3066_;
   END LOOP;
END UNITTEST;

