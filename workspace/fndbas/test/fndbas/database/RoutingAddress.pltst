-----------------------------------------------------------------------------
--
--  Logical unit: RoutingAddress
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  -------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------


-------------------- LU SPECIFIC PROTECTED METHODS --------------------------

UNITTEST "Format_None_Auth_Value_ should return changed None auth value when http method is given" FOR
   FUNCTION Format_None_Auth_Value_ (
      rest_http_method_ IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_                                        | rest_http_method_ |
      | ' authentication_mode:None http_method:GET'      |  'GET'            |
      | ' authentication_mode:None http_method:POST'     |  'POST'           |
      | ' authentication_mode:None http_method:PUT'      |  'PUT'            |
      | ' authentication_mode:None http_method:PATCH'    |  'PATCH'          |
      | ' authentication_mode:None http_method:DELETE'   |  'DELETE'         |
   LOOP
      --Insert your test code here
      return_ := Format_None_Auth_Value_(rest_http_method_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Format_Basic_Auth_Value_ return changed Basic auth value when http method is given" FOR
   FUNCTION Format_Basic_Auth_Value_ (
      user_id_          IN     VARCHAR2,
      password_         IN     VARCHAR2,
      rest_http_method_ IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Ins_Util_API
   FUNCTION To_Base64 (
      txt_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF txt_ = 'userid:password' THEN
         RETURN 'dXNlcmlkOnBhc3N3b3Jk' ;
      END IF;
      RETURN NULL;
   END To_Base64;

   @MockPackage Connect_Config_API
   FUNCTION Decrypt_ (
      text_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF text_ = 'cGFzc3dvcmQ=' THEN
         RETURN 'password';
      END IF;
      RETURN NULL;
   END Decrypt_;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_                                  |  user_id_   |     password_       | rest_http_method_ |
      | 'dXNlcmlkOnBhc3N3b3Jk http_method:GET'     |  'userid'   |  'cGFzc3dvcmQ='     |  'GET'            |
      | 'dXNlcmlkOnBhc3N3b3Jk http_method:POST'    |  'userid'   |  'cGFzc3dvcmQ='     |  'POST'           |
      | 'dXNlcmlkOnBhc3N3b3Jk http_method:PUT'     |  'userid'   |  'cGFzc3dvcmQ='     |  'PUT'            |
      | 'dXNlcmlkOnBhc3N3b3Jk http_method:PATCH'   |  'userid'   |  'cGFzc3dvcmQ='     |  'PATCH'          |
      | 'dXNlcmlkOnBhc3N3b3Jk http_method:DELETE'  |  'userid'   |  'cGFzc3dvcmQ='     |  'DELETE'         |
   LOOP
      --Insert your test code here
      return_ := Format_Basic_Auth_Value_(user_id_, password_, rest_http_method_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Format_Bearer_Auth_Value_ return changed Bearer auth value when http method is given" FOR
   FUNCTION Format_Bearer_Auth_Value_ (
      api_key_          IN     VARCHAR2,
      rest_http_method_ IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_                   |   api_key_    | rest_http_method_ |
      | 'apikey http_method:GET'    |  'apikey'     |  'GET'            |
      | 'apikey http_method:POST'   |  'apikey'     |  'POST'           |
      | 'apikey http_method:PUT'    |  'apikey'     |  'PUT'            |
      | 'apikey http_method:PATCH'  |  'apikey'     |  'PATCH'          |
      | 'apikey http_method:DELETE' |  'apikey'     |  'DELETE'         |
   LOOP
      --Insert your test code here
      return_ := Format_Bearer_Auth_Value_(api_key_, rest_http_method_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Format_Azure_Auth_Value_ return changed Azure auth value when http method is given" FOR
   FUNCTION Format_Azure_Auth_Value_ (
      api_key_          IN     VARCHAR2,
      rest_http_method_ IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_                   | api_key_ | rest_http_method_ |
      | 'apikey http_method:GET'    |  'apikey'|  'GET'            |
      | 'apikey http_method:POST'   |  'apikey'|  'POST'           |
      | 'apikey http_method:PUT'    |  'apikey'|  'PUT'            |
      | 'apikey http_method:PATCH'  |  'apikey'|  'PATCH'          |
      | 'apikey http_method:DELETE' |  'apikey'|  'DELETE'         |
   LOOP
      --Insert your test code here
      return_ := Format_Azure_Auth_Value_(api_key_, rest_http_method_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Format_Client_Auth_Value_ return changed Client Credentials auth value when http method is given" FOR
   FUNCTION Format_Client_Auth_Value_ (
      client_id_                 IN     VARCHAR2,
      client_secret_             IN     VARCHAR2,
      token_endpoint_            IN     VARCHAR2,
      protected_resource_        IN     VARCHAR2,
      token_endpoint_parameters_ IN     VARCHAR2,
      rest_http_method_          IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Ins_Util_API
   FUNCTION To_Base64 (
      txt_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF txt_ = 'clientsecret' THEN
         RETURN 'Y2xpZW50c2VjcmV0' ;
      END IF;
      RETURN NULL;
   END To_Base64;

   @MockPackage Connect_Config_API
   FUNCTION Decrypt_ (
      text_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF text_ = 'Y2xpZW50c2VjcmV0' THEN
         RETURN 'clientsecret';
      END IF;
      RETURN NULL;
   END Decrypt_;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      |                                         expected_                                                                                        | client_id_  | client_secret_      | token_endpoint_ | protected_resource_ | token_endpoint_parameters_ | rest_http_method_  |
      | 'client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A resource:resource endpoint_token_parameters:param=value http_method:GET'   |  'clientid' |  'Y2xpZW50c2VjcmV0' |  'A'            |  'resource'         |  'param=value'             |  'GET'             |
      | 'client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A resource:resource endpoint_token_parameters:param=value http_method:POST'  |  'clientid' |  'Y2xpZW50c2VjcmV0' |  'A'            |  'resource'         |  'param=value'             |  'POST'            |
      | 'client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A resource:resource endpoint_token_parameters:param=value http_method:PUT'   |  'clientid' |  'Y2xpZW50c2VjcmV0' |  'A'            |  'resource'         |  'param=value'             |  'PUT'             |
      | 'client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A resource:resource endpoint_token_parameters:param=value http_method:PATCH' |  'clientid' |  'Y2xpZW50c2VjcmV0' |  'A'            |  'resource'         |  'param=value'             |  'PATCH'           |
      | 'client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A resource:resource endpoint_token_parameters:param=value http_method:DELETE'|  'clientid' |  'Y2xpZW50c2VjcmV0' |  'A'            |  'resource'         |  'param=value'             |  'DELETE'          |
   LOOP
      --Insert your test code here
      return_ := Format_Client_Auth_Value_(client_id_, client_secret_, token_endpoint_, protected_resource_, token_endpoint_parameters_, rest_http_method_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Format_Ropc_Auth_Value_ return changed ROPC auth value when http method is given" FOR
   FUNCTION Format_Ropc_Auth_Value_ (
      user_id_                   IN     VARCHAR2,
      password_                  IN     VARCHAR2,
      token_endpoint_            IN     VARCHAR2,
      token_endpoint_parameters_ IN     VARCHAR2,
      rest_http_method_          IN     VARCHAR2,
      client_id_                 IN     VARCHAR2,
      client_secret_             IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Ins_Util_API
   FUNCTION To_Base64 (
      txt_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF txt_='password' THEN
         RETURN 'cGFzc3dvcmQ=';
      ELSE RETURN 'Y2xpZW50c2VjcmV0';
      END IF;
      RETURN NULL;
   END To_Base64;

   @MockPackage Connect_Config_API
   FUNCTION Decrypt_ (
      text_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF text_='cGFzc3dvcmQ=' THEN
         RETURN 'password';
      ELSE RETURN 'clientsecret';
      END IF;
      RETURN NULL;
   END Decrypt_;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      |                             expected_                                                                                                                           | user_id_ |   password_     | token_endpoint_ | token_endpoint_parameters_ | rest_http_method_ | client_id_ | client_secret_      |
      | 'user_id:userid password:cGFzc3dvcmQ= client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A endpoint_token_parameters:param=value http_method:GET'       |  'userid'|  'cGFzc3dvcmQ=' |  'A'            |  'param=value'             |  'GET'            |'clientid'  | 'Y2xpZW50c2VjcmV0'  |
      | 'user_id:userid password:cGFzc3dvcmQ= client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A endpoint_token_parameters:param=value http_method:POST'      |  'userid'|  'cGFzc3dvcmQ=' |  'A'            |  'param=value'             |  'POST'           |'clientid'  | 'Y2xpZW50c2VjcmV0'  |
      | 'user_id:userid password:cGFzc3dvcmQ= client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A endpoint_token_parameters:param=value http_method:PUT'       |  'userid'|  'cGFzc3dvcmQ=' |  'A'            |  'param=value'             |  'PUT'            |'clientid'  | 'Y2xpZW50c2VjcmV0'  |
      | 'user_id:userid password:cGFzc3dvcmQ= client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A endpoint_token_parameters:param=value http_method:PATCH'     |  'userid'|  'cGFzc3dvcmQ=' |  'A'            |  'param=value'             |  'PATCH'          |'clientid'  | 'Y2xpZW50c2VjcmV0'  |
      | 'user_id:userid password:cGFzc3dvcmQ= client_id:clientid client_secret:Y2xpZW50c2VjcmV0 endpoint:A endpoint_token_parameters:param=value http_method:DELETE'    |  'userid'|  'cGFzc3dvcmQ=' |  'A'            |  'param=value'             |  'DELETE'         |'clientid'  | 'Y2xpZW50c2VjcmV0'  |
   LOOP
      --Insert your test code here
      return_ := Format_Ropc_Auth_Value_(user_id_, password_, token_endpoint_, token_endpoint_parameters_, rest_http_method_, client_id_, client_secret_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

















