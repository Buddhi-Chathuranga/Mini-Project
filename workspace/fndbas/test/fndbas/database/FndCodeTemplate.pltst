-----------------------------------------------------------------------------
--
--  Logical unit: FndCodeTemplate
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------

UNITTEST "Test for Replace_Tag VARCHAR2 value" FOR
   PROCEDURE Replace_Tag (
      tag_   IN     VARCHAR2,
      value_ IN     VARCHAR2,
      code_  IN OUT CLOB );
USING
   --Insert your mock directives and mock return variables here
IS
   result_ VARCHAR2(32767);
   output1_  CLOB;
BEGIN
   FOR
      | tag_ | value_ | code_ | result_ |
      | 'TEST_TAG'  |  'Good'| 'This was a <<<TEST_TAG>>> day'                            | 'This was a Good day' |
      | 'TEST_TAG'  |  'Good'| 'This was a <<<TEST_TAG>>> <<<TEST_TAG>>> day'             | 'This was a Good Good day' |
      | 'TEST_TAG1' |  'Bad' | 'There was no tag called <<<TEST_TAG>>> in the code'       | 'There was no tag called <<<TEST_TAG>>> in the code' |
      | 'TEST_TAG'  |  'Tag' | '<<<TEST_TAG>>> was at the beginning'                      | 'Tag was at the beginning' |
      | 'TEST_TAG'  |  'End' | 'Tag was at the <<<TEST_TAG>>>'                            | 'Tag was at the End' |
      | 'TEST_TAG'  |  'Tag' | '<<<TEST_TAG>>> at the start, <<<TEST_TAG>>> at the middle and at the end <<<TEST_TAG>>>' | 'Tag at the start, Tag at the middle and at the end Tag' |
   LOOP
      --Insert your test code here
      output1_ := code_;
      Replace_Tag(tag_, value_, output1_);
      --Insert your assertions here
      ASSERT output1_ = result_ MESSAGE 'Expected ['||code_||'] but  was ['||output1_||']';
   END LOOP;
END UNITTEST;

UNITTEST "Test for Replace_Tag CLOB value" FOR
   PROCEDURE Replace_Tag (
      tag_   IN     VARCHAR2,
      value_ IN     CLOB,
      code_  IN OUT CLOB );
USING
   --Insert your mock directives and mock return variables here
IS
   result_  CLOB;
   output1_ CLOB;
BEGIN
   FOR
      | tag_ | value_ | code_ | result_ |
      | 'TEST_TAG'  |  'Good'| 'This was a <<<TEST_TAG>>> day'                            | 'This was a Good day' |
      | 'TEST_TAG1' |  'Bad' | 'There was no tag called <<<TEST_TAG>>> in the code'       | 'There was no tag called <<<TEST_TAG>>> in the code' |
      | 'TEST_TAG'  |  'Tag' | '<<<TEST_TAG>>> was at the beginning'                      | 'Tag was at the beginning' |
      | 'TEST_TAG'  |  'End' | 'Tag was at the <<<TEST_TAG>>>'                            | 'Tag was at the End' |
   LOOP
      --Insert your test code here
      output1_ := code_;
      Replace_Tag(tag_, value_, output1_);
      --Insert your assertions here
      ASSERT output1_ = result_ MESSAGE 'Expected ['||code_||'] but  was ['||output1_||']';
   END LOOP;
END UNITTEST;

UNITTEST "Test for Replace_Tag CLOB value 32K" FOR
   PROCEDURE Replace_Tag_Custom(
      tag_   IN     VARCHAR2,
      value_ IN     CLOB,
      code_  IN OUT CLOB );
USING
   --NOTE: Values are too long to print. so displaying test case name on error instead.
IS
   result_  CLOB;
   test_case_name_ VARCHAR2(32000);
   output1_  CLOB;
   pad1_ VARCHAR2(32767) := RPAD('A', 32767,'A');
   pad2_ VARCHAR2(32767) := RPAD('B', 32767,'B');
BEGIN
   FOR
      | tag_ | value_ | code_ | result_ | test_case_name_ |
      | 'TEST_TAG'  |  'Good'| 'This was a <<<TEST_TAG>>> <<<TEST_TAG>>> day'               | 'This was a Good Good day'                                                                  | 'Replace recurring tag'|
      | 'TEST_TAG'  |  to_clob(pad2_||'Good') | pad1_||'This was a <<<TEST_TAG>>> day'                       | to_clob(pad1_||'This was a ')|| to_clob(pad2_||'Good day')                                  | 'Tag in middle' |
      | 'TEST_TAG'  |  to_clob(pad2_||'Good') | pad1_||'This was a <<<TEST_TAG>>> <<<TEST_TAG>>> day'        | to_clob(pad1_||'This was a ')|| to_clob(pad2_||'Good')||' '||to_clob(pad2_||'Good')||' day' | 'Two Tag in middle' |
      | 'OTHER_TAG' |  to_clob(pad2_||'Good') | pad1_||'There was no tag called <<<TEST_TAG>>> in the code'  | pad1_||'There was no tag called <<<TEST_TAG>>> in the code'                                 | 'Tag not found' |
      | 'TEST_TAG'  |  to_clob(pad2_||'Tag')  | '<<<TEST_TAG>>> was at the beginning'||pad1_                 | to_clob(pad2_||'Tag was at the beginning')||pad1_                                           | 'Tag at begining' |
      | 'TEST_TAG'  |  to_clob(pad2_||'End')  | pad1_||'Tag was at the <<<TEST_TAG>>>'                       | to_clob(pad1_||'Tag was at the ')||to_clob(pad2_||'End')                                    | 'Tag at end'    |
      | 'TEST_TAG'  |  to_clob(pad2_||'Tag')  | '<<<TEST_TAG>>> at the start,'||pad1_||'<<<TEST_TAG>>> at the middle and at the end <<<TEST_TAG>>>'                       | to_clob(pad2_||'Tag')||' at the start,'||pad1_||to_clob(pad2_||'Tag')||' at the middle and at the end '|| to_clob(pad2_||'Tag')  | 'Tag at start,middle and end'    |
      LOOP
      --Insert your test code here
      output1_ := code_;
      Replace_Tag_Custom(tag_, value_, output1_);
      --Insert your assertions here
      ASSERT output1_ = result_ MESSAGE 'Expected result was not found for test case: '|| test_case_name_;
   END LOOP;
END UNITTEST;








-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------


