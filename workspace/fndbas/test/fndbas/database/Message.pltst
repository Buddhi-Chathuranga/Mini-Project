-----------------------------------------------------------------------------
--
--  Logical unit: Message
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Foundation1;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------

UNITTEST "Find_Attribute___ should ... when ... String" FOR
   FUNCTION Find_Attribute___ (
      message_       IN     VARCHAR2,
      name_          IN     VARCHAR2,
      default_value_ IN     VARCHAR2 ) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Message_SYS
   FUNCTION Construct (
      message_name_ IN     VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN head_marker_||message_name_||new_line_;
   END Construct;

   @MockPackage Message_SYS
   PROCEDURE Add_Attribute (
      message_ IN OUT VARCHAR2,
      name_    IN     VARCHAR2,
      value_   IN     VARCHAR2 )
   IS
   BEGIN
      IF (Instr(message_, head_marker_, 1, 1)<0 OR message_ IS NULL) THEN -- If no header exists in the messa then add an autogenerated header
         message_ := Concat(Construct(auto_head_name_), message_);
      END IF;
      message_ := message_          ||
      attribute_marker_ ||
      name_             ||
      value_marker_     ||
      replace(value_, new_line_, new_line_||continuation_marker_)||
      new_line_;
   END Add_Attribute;

IS
   --Insert your test variables here
   return_   BOOLEAN;
   expected_ VARCHAR2(2000);
   msg_ VARCHAR2(32000);
   value_ VARCHAR2(32000);
   long_string_ VARCHAR2(32000);
BEGIN
   msg_ := Message_SYS.Construct('TEST');
   Message_SYS.Add_Attribute(msg_, 'ANDERS', 'Anders' );
   Message_SYS.Add_Attribute(msg_, 'BENGT', 'Bengt' );
   Message_SYS.Add_Attribute(msg_, 'CHRISTER', 'Christer' );
   FOR i IN 1..30000 LOOP
      long_string_ := long_string_ || 'a';
   END LOOP;
   Message_SYS.Add_Attribute(msg_, 'LONG_STRING',  long_string_);
   Message_SYS.Add_Attribute(msg_, 'DAVID', 'David' );
   Message_SYS.Add_Attribute(msg_, 'ERIK', 'Erik' );
   Message_SYS.Add_Attribute(msg_, 'FREDRIK', 'Fredrik' );
   Message_SYS.Add_Attribute(msg_, 'GUNNAR', '' );
   Message_SYS.Add_Attribute(msg_, 'HARALD', 'Harald' );
   FOR
      | expected_ |name_     | default_value_ |
      | 'Anders'  | 'ANDERS' |'A'             |
      | 'David'   | 'DAVID'  |'A'             |
      | ''        | 'GUNNAR' |''              |
      | 'Harald'  | 'HARALD' |''              |
   LOOP
      --Insert your test code here
      value_ := default_value_;
      return_ := Find_Attribute___(msg_, name_, value_);
      --Insert your assertions here
      ASSERT Nvl(value_, '"NULL"') = Nvl(expected_, '"NULL"') MESSAGE 'Expected '||expected_||' but returned '||value_;
   END LOOP;
END UNITTEST;

UNITTEST "Find_Attribute___ should ... when ... CLOB" FOR
   FUNCTION Find_Attribute___ (
      message_       IN     CLOB,
      name_          IN     VARCHAR2,
      default_value_ IN     VARCHAR2 ) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Message_SYS
   FUNCTION Construct (
      message_name_ IN     VARCHAR2 ) RETURN CLOB
   IS
   BEGIN
      RETURN to_clob(head_marker_||message_name_||new_line_);
   END Construct;

   @MockPackage Message_SYS
   PROCEDURE Add_Attribute (
      message_ IN OUT CLOB,
      name_    IN     VARCHAR2,
      value_   IN     VARCHAR2 )
   IS
   BEGIN
      IF (Instr(message_, head_marker_, 1, 1)<0 OR message_ IS NULL OR message_ = empty_clob) THEN -- If no header exists in the messa then add an autogenerated header
         message_ := Concat(Construct(auto_head_name_), message_);
      END IF;
      message_ := message_          ||
      attribute_marker_ ||
      name_             ||
      value_marker_     ||
      replace(value_, new_line_, new_line_||continuation_marker_)||
      new_line_;
   END Add_Attribute;

IS
   --Insert your test variables here
   return_   BOOLEAN;
   expected_ VARCHAR2(2000);
   msg_ CLOB;
   value_ VARCHAR2(32000);
   long_string_ VARCHAR2(32000);
BEGIN
   msg_ := Message_SYS.Construct('TEST');
   Message_SYS.Add_Attribute(msg_, 'ANDERS', 'Anders' );
   Message_SYS.Add_Attribute(msg_, 'BENGT', 'Bengt' );
   Message_SYS.Add_Attribute(msg_, 'CHRISTER', 'Christer' );
   Message_SYS.Add_Attribute(msg_, 'DAVID', 'David' );

   FOR i IN 1..30000 LOOP
      long_string_ := long_string_ || 'a';
   END LOOP;
   Message_SYS.Add_Attribute(msg_, 'LONG_STRING',  long_string_);
   Message_SYS.Add_Attribute(msg_, 'LONG_STRING2',  long_string_);
   Message_SYS.Add_Attribute(msg_, 'ERIK', 'Erik' );
   Message_SYS.Add_Attribute(msg_, 'FREDRIK', 'Fredrik' );
   Message_SYS.Add_Attribute(msg_, 'GUNNAR', '' );

   Message_SYS.Add_Attribute(msg_, 'HARALD', 'Harald' );
   FOR
      | expected_ |name_     | default_value_ |
      | 'Anders'  | 'ANDERS' |      ''        |
      | 'David'   | 'DAVID'  |      ''        |
      | ''        | 'GUNNAR' |''              |
      | 'Harald'  | 'HARALD' |      ''        |
   LOOP
      --Insert your test code here
      value_ := default_value_;
      return_ := Find_Attribute___(msg_, name_, value_);
      --Insert your assertions here
      ASSERT Nvl(value_, '"NULL"') = Nvl(expected_, '"NULL"') MESSAGE 'Expected '||expected_||' but returned '||value_;
   END LOOP;
END UNITTEST;

