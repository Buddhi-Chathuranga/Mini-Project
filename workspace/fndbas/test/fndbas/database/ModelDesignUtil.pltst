-----------------------------------------------------------------------------
--
--  Logical unit: ModelDesignUtil
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  211101  odbalk   G2230420 - 100: Cannot import Application Configuration Package which includes Aurena Configurations , support validation details of size clob
-----------------------------------------------------------------------------

layer Foundation1;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PROTECTED METHODS --------------------------


-------------------- LU  NEW METHODS -------------------------------------

-- Use to construct ACP of required length
PROCEDURE Construct_Middle_Template(
   repeat_template_ IN     NUMBER,
   middle_template_    OUT CLOB)
IS
   template_ CLOB;
   counter_ NUMBER;
BEGIN
   counter_ :=1;
   template_ := to_clob('<DATA_ROW>
   <OBJKEY>80FC9477C443445DB6752331DC6D3CC7</OBJKEY>
   <SCOPE_ID>global</SCOPE_ID>
   <DATA_ID>group:CustomsInfoGroup</DATA_ID>
   <ARTIFACT>group</ARTIFACT>
   <NAME>CustomsInfoGroup</NAME>
   <LINE_NO>0</LINE_NO>
   <LAYER_NO>2</LAYER_NO>
   <VISIBILITY>Public</VISIBILITY>
   <REFERENCE/>
   <DEPENDENCIES/>
   <CONTENT>{quot;namequot;:quot;CustomsInfoGroupquot;,quot;labelquot;:quot;quot;,quot;entityquot;:quot;CustomsInfoquot;,quot;contentquot;:[{quot;elementTypequot;:quot;fieldquot;,quot;fieldquot;:{quot;namequot;:quot;CustomsIdquot;,quot;attributequot;:quot;CustomsIdquot;,quot;controlquot;:quot;fieldquot;,quot;entityquot;:quot;CustomsInfoquot;,quot;labelquot;:quot;[#[translatesys:Data Field:Customs.group.CustomsInfoGroup.groupcontent.field.CustomsId:CustomsId:WEB:Customs]#]quot;,quot;translationKeyquot;:quot;Customs.group.CustomsInfoGroup.groupcontent.field.CustomsIdquot;,quot;datatypequot;:quot;Textquot;,quot;arrayquot;:false,quot;maxlengthquot;:20,quot;formatquot;:quot;uppercasequot;,quot;editablequot;:{quot;==quot;:[{quot;varquot;:quot;record.etagquot;},null]},quot;requiredquot;:true}},{quot;elementTypequot;:quot;fieldquot;,quot;fieldquot;:{quot;namequot;:quot;Namequot;,quot;attributequot;:quot;Namequot;,quot;controlquot;:quot;fieldquot;,quot;entityquot;:quot;CustomsInfoquot;,quot;labelquot;:quot;[#[translatesys:Data Field:Customs.group.CustomsInfoGroup.groupcontent.field.Name:Name:WEB:Name]#]quot;,quot;translationKeyquot;:quot;Customs.group.CustomsInfoGroup.groupcontent.field.Namequot;,quot;datatypequot;:quot;Textquot;,quot;arrayquot;:false,quot;maxlengthquot;:100,quot;editablequot;:true,quot;requiredquot;:true}},{quot;elementTypequot;:quot;fieldquot;,quot;fieldquot;:{quot;namequot;:quot;AssociationNoRefquot;,quot;selectAttributesquot;:[quot;AssociationNoquot;],quot;attributequot;:quot;AssociationNoquot;,quot;controlquot;:quot;lookupquot;,quot;entityquot;:quot;CustomsInfoquot;,quot;labelquot;:quot;[#[translatesys:Data Field:Customs.group.CustomsInfoGroup.groupcontent.lookup.AssociationNoRef:AssociationNoRef:WEB:Association No]#]quot;,quot;translationKeyquot;:quot;Customs.group.CustomsInfoGroup.groupcontent.lookup.AssociationNoRefquot;,quot;datatypequot;:quot;Textquot;,quot;referencequot;:quot;AssociationNoRefquot;,quot;lovquot;:{quot;selectorquot;:quot;ReferenceAssociationInfoSelectorquot;,quot;advancedviewquot;:quot;AssociationInfoLovListquot;,quot;datasourceProjectionquot;:quot;CustomsHandlingquot;,quot;datasourceEntitySetquot;:quot;Reference_AssociationInfoquot;,quot;freeinputquot;:true},quot;updatequot;:{quot;datasourceProjectionquot;:quot;CustomsHandlingquot;,quot;datasourceEntitySetquot;:quot;Reference_AssociationInfoquot;,quot;datasourceAggregateRefsquot;:{quot;AssociationNoquot;:quot;${AssociationNo}quot;},quot;copyquot;:{quot;AssociationNoquot;:quot;AssociationNoquot;},quot;fetchquot;:{},quot;itemquot;:quot;AssociationNoRefquot;},quot;arrayquot;:false,quot;maxlengthquot;:50,quot;editablequot;:true,quot;requiredquot;:false,quot;freeinputquot;:true}}],quot;@[DIFF]PACKEDquot;:{quot;contentquot;:{quot;0quot;:{quot;fieldquot;:{quot;editablequot;:{quot;==quot;:{quot;0quot;:{quot;@[DIFF]IDquot;:quot;63e3577c6274b7d76bb3bca8dcb5628772fff3e4quot;}}}},quot;@[DIFF]IDquot;:quot;440812180aa69c540eccf3ae430043a031bcd112quot;},quot;1quot;:{quot;@[DIFF]IDquot;:quot;b2c74d4ce2210977c029756d50aacbe6e7813b18quot;},quot;2quot;:{quot;@[DIFF]IDquot;:quot;a3069511ff1a8ab4924b9b878dc4910b87c28eebquot;}}}}</CONTENT>
   </DATA_ROW>
   <DATA_ROW>
   <OBJKEY>A9C667E6F95C48CBA299B56C7DDE4146</OBJKEY>
   <SCOPE_ID>global</SCOPE_ID>
   <DATA_ID>page:Form</DATA_ID>
   <ARTIFACT>page</ARTIFACT>
   <NAME>Form</NAME>
   <LINE_NO>15</LINE_NO>
   <LAYER_NO>2</LAYER_NO>
   <VISIBILITY>Public</VISIBILITY>
   <REFERENCE/>
   <DEPENDENCIES/>
   <CONTENT>{quot;namequot;:quot;Formquot;,quot;labelquot;:quot;[#[translatesys:Form Window:[global].Customs.page.Form.$this:$this:CONFIGCLIENT:Customs test]#]quot;,quot;datasourceProjectionquot;:quot;CustomsHandlingquot;,quot;datasourceEntitySetquot;:quot;CustomsInfoSetquot;,quot;entityquot;:quot;CustomsInfoquot;,quot;contentquot;:[{quot;elementTypequot;:quot;selectorquot;,quot;isReferencequot;:true,quot;selectorquot;:quot;CustomsInfoSelectorquot;,quot;idquot;:quot;CustomsInfoSelectorquot;},{quot;elementTypequot;:quot;arrangequot;,quot;arrangequot;:[{quot;elementTypequot;:quot;groupquot;,quot;isReferencequot;:true,quot;groupquot;:quot;CustomsInfoGroupquot;,quot;idquot;:quot;CustomsInfoGroupquot;,quot;bindingquot;:{quot;bindnamequot;:quot;CustomsInfoSelectorquot;}},{quot;elementTypequot;:quot;groupquot;,quot;isReferencequot;:true,quot;groupquot;:quot;CustomsGeneralInfoGroupquot;,quot;idquot;:quot;CustomsGeneralInfoGroupquot;,quot;bindingquot;:{quot;bindnamequot;:quot;CustomsInfoSelectorquot;}}]},{quot;elementTypequot;:quot;listquot;,quot;isReferencequot;:true,quot;listquot;:quot;OurIdAtCustomsListquot;,quot;idquot;:quot;OurIdAtCustomsListquot;,quot;bindingquot;:{quot;bindnamequot;:quot;CustomsInfoSelectorquot;,quot;propertyquot;:quot;OurIdsquot;}}],quot;@[DIFF]PACKEDquot;:{quot;contentquot;:{quot;0quot;:{quot;@[DIFF]IDquot;:quot;8f2dea8f4a44a7ee427c11a755ae4d4c3099f462quot;},quot;1quot;:{quot;arrangequot;:{quot;0quot;:{quot;@[DIFF]IDquot;:quot;84d342ccd012f19b333ad82fa8483d0283023325quot;},quot;1quot;:{quot;@[DIFF]IDquot;:quot;f3bcfe56d9e5ea8263cf37c5047ddec49840e0a1quot;}},quot;@[DIFF]IDquot;:quot;012bb008d8de2052086ff1b0f11ec68b2ea03d9equot;},quot;2quot;:{quot;@[DIFF]IDquot;:quot;024769b555956efe213e3f75a66b6721cc436445quot;}}}}</CONTENT>
   </DATA_ROW>');
   WHILE  counter_<= repeat_template_
   LOOP
      middle_template_ := template_ || middle_template_;
      counter_ := counter_ +1;
   END LOOP;
END Construct_Middle_Template;


PROCEDURE Construct_ACP(
   repeat_template_ IN     NUMBER,
   test_acp_           OUT CLOB )
IS
   header_template_ CLOB;
   footer_template_ CLOB;
   middle_template_ CLOB;
   test_acp_xml_ CLOB;
BEGIN
   header_template_ := to_clob('<?xml version="1.0"?>
   <CUSTOM_OBJECT>
   <NAME>ClientMetadata.client:Customs</NAME>
   <TYPE>AURENA_PAGE_GROUP</TYPE>
   <DESCRIPTION>DESCRIPTION value</DESCRIPTION>
   <WEB_PAGE_BUNDLE>
   <MODEL_ID>ClientMetadata.client:Customs</MODEL_ID>
   <DESCRIPTION>This fragment contains code to handle common list for Communication Method in Party Types</DESCRIPTION>
   <ARTIFACT>client</ARTIFACT>
   <NAME>Customs</NAME>
   <KIND>ClientMetadata</KIND>
   <REFERENCE>ClientMetadata.projection:CustomsHandling</REFERENCE>
   <PROFILED>TRUE</PROFILED>
   <VERSION>2021-09-07-05.48.27</VERSION>
   <DATA>');
   footer_template_:=to_clob('</DATA>
   </WEB_PAGE_BUNDLE>
   </CUSTOM_OBJECT>');
   Construct_Middle_Template(repeat_template_,middle_template_ );
   test_acp_xml_ := header_template_ || middle_template_||footer_template_;
   test_acp_ := test_acp_xml_;
END Construct_ACP;

UNITTEST "Validate_Import should successfully output info_ when validation_details is on size varchar2 and clob" FOR
   PROCEDURE Validate_Import (
      info_                  OUT IFSAPP.App_Config_Util_API.AppConfigItemInfo2,
      dep_objects_        IN OUT NOCOPY IFSAPP.App_Config_Util_API.DeploymentObjectArray,
      in_xml_             IN     CLOB,
      version_time_stamp_ IN     DATE);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage App_Config_Util_API
   PROCEDURE Set_Validation_Result (
      validation_result_      IN OUT VARCHAR2,
      item_validation_result_ IN     VARCHAR2 )
   IS
   BEGIN
      NULL;
   END Set_Validation_Result;

   @MockPackage Fnd_Session_API
   FUNCTION Get_Language  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END Get_Language;

   @MockPackage App_Config_Package_API
   FUNCTION Get_Package_Imported_Date (
      configuration_id_ IN     VARCHAR2 )  RETURN  DATE
   IS
   BEGIN
      RETURN NULL;
   END Get_Package_Imported_Date;

   @MockPackage App_Config_Package_API
   PROCEDURE Get_Item_Package (
      package_id_            OUT VARCHAR2,
      name_                  OUT VARCHAR2,
      author_                OUT VARCHAR2,
      locked_                OUT VARCHAR2,
      version_time_stamp_    OUT DATE,
      configuration_id_   IN     VARCHAR2 )
   IS
   BEGIN
      NULL;
   END Get_Item_Package;

   @MockPackage App_Config_Util_API
   PROCEDURE Set_Validation_Completed (
      validation_result_ IN OUT VARCHAR2 )
   IS
   BEGIN
      NULL;
   END Set_Validation_Completed;

IS
   --Insert your test variables here
   output1_  IFSAPP.App_Config_Util_API.AppConfigItemInfo2;
   output2_  IFSAPP.App_Config_Util_API.DeploymentObjectArray;

   test_acp_ CLOB;
   repeat_template_ NUMBER;
   result_ VARCHAR2(50);

BEGIN
   FOR
      |repeat_template_|
      |200             |
      |10              |
   LOOP
      -- Mocking test data
      Construct_ACP(repeat_template_, test_acp_);
      info_.validation_result := IFSAPP.App_Config_Util_API.Status_Warning;
      dep_objects_(1).name := 'CLIENTMETADATA.CLIENT:CUSTOMS';
      dep_objects_(1).item_type := 'MEDIUM';
      in_xml_ := test_acp_;
      version_time_stamp_ := NULL;

      --Insert your test code here
      BEGIN
         output2_ := dep_objects_;
         Validate_Import(output1_, output2_, in_xml_, version_time_stamp_);
         result_ := 'Success';
      EXCEPTION
         WHEN OTHERS THEN
            result_ := 'Error';
      END;
      --Insert your assertions here
      ASSERT result_ = 'Success' MESSAGE 'Expected "Success" for ACP constructed with '||repeat_template_||' template iterations. But was '||result_;
   END LOOP;
END UNITTEST;


UNITTEST "Is_Artifact_Baseline_In_Sync should check if an artifact baseline is in sync with its based on artifact" FOR
   FUNCTION Is_Artifact_Baseline_In_Sync(
      model_id_      IN     VARCHAR2,
      scope_id_      IN     VARCHAR2,
      data_id_       IN     VARCHAR2,
      layer_no_      IN     NUMBER DEFAULT 2,
      based_on_hash_ IN     VARCHAR2 DEFAULT '')RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   test_comment_ VARCHAR2(1000);

   @MockTable fnd_model_design_data_tab
   VALUES
      | model_id                                       | scope_id | data_id                  | artifact | name                | line_no | layer_no |reference|visibility|dependencies| content     |rowkey|schema_version| content_hash                                |  based_on_content_hash                      |based_on_content | rowversion |
      | 'ClientMetadata.client:IsoCountries'           | 'SCOPE1' | 'page:List'              | 'page'   | 'List'              | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '7FF81D742D3F364EAE253EC640471094CEEAABDE'  | '45CC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'SCOPE1' | 'page:List'              | 'page'   | 'List'              | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '7FF81D742D3F364EAE253EC640471094CEEAABDE'  | '45CC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'global' | 'page:List'              | 'page'   | 'List'              | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '45CC0614244671859002F2993117F7BD79BCAF1B'  | 'WWCC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'global' | 'page:List'              | 'page'   | 'List'              | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '45CC0614244671859002F2993117F7BD79BCAF1B'  | 'WWCC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'global' | 'page:List'              | 'page'   | 'List'              | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'WWCC0614244671859002F2993117F7BD79BCAF1B'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:ManageMaintenanceOrder' | 'global' | 'group:EloGrp'           | 'group'  | 'EloGrp'            | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'FD8BB2D9D18908558E4D0DAC856E0A02DE83F8B0'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:ManageMaintenanceOrder' | 'SCOPE2' | 'group:EloGrp'           | 'group'  | 'EloGrp'            | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '1F4201CB4CCA816FD7C6FE7A7E0D76D11890AFD3'  | 'C102B2375EFBDA8E7EF291C8C821704BDDB3DC25'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:ManageMaintenanceOrder' | 'SCOPE2' | 'group:EloGrp'           | 'group'  | 'EloGrp'            | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '1F4201CB4CCA816FD7C6FE7A7E0D76D11890AFD3'  | 'C102B2375EFBDA8E7EF291C8C821704BDDB3DC25'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '10DCCA529359F36C92FBA4CE09395AE3E9470DD2'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'list:AddressTypeList'   | 'list'   | 'AddressTypeList'   | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '6E22ECCA5B3D1EDC2E917502FA6199FDFF9033XX'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'list:AddressTypeList'   | 'list'   | 'AddressTypeList'   | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'AA22ECCA5B3D1EDC2E917502FA6199FDFF90330D'  | '6E22ECCA5B3D1EDC2E917502FA6199FDFF90330D'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'list:AddressTypeList'   | 'list'   | 'AddressTypeList'   | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'AA22ECCA5B3D1EDC2E917502FA6199FDFF90330D'  | '6E22ECCA5B3D1EDC2E917502FA6199FDFF90330D'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'page:AddressInfo'       | 'page'   | 'AddressInfo'       | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '13E9E51588E0B44C4065A6D29B71C3B591AC3DC7'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'F1608B2E0962874D8D069969C454A8090D414965'  | '10DCCA529359F36C92FBA4CE09395AE3E9470DD2'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'F1608B2E0962874D8D069969C454A8090D414965'  | '10DCCA529359F36C92FBA4CE09395AE3E9470DD2'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'SCOPE1' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'ACF94C1DC07E1FD3AEF36A55C061CA83E0FF15AC'  | 'F1608B2E0962874D8D069969C454A8090D414965'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'SCOPE1' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'DB6E1873416D52AD020DB7D1E211BA833E6C3273'  | 'F1608B2E0962874D8D069969C454A8090D414965'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'SCOPE1' | 'page:AddressInfo'       | 'page'   | 'AddressInfo'       | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'XXE9E51588E0B44C4065A6D29B71C3B591AC3DC7'  | 'CE4A16B0554675918F0B6212BAEBFA08D24DB473'  |to_clob('')      | ''         |
   END VALUES;

   @Mock
   FUNCTION Try_Get_Data_Row_ (
      model_id_ IN     VARCHAR2,
      scope_id_ IN     VARCHAR2,
      data_id_  IN     VARCHAR2,
      layer_no_ IN     NUMBER,
      row_         OUT fnd_model_design_data_tab%ROWTYPE) RETURN BOOLEAN

   IS
   BEGIN
      IF (model_id_ IS NULL OR scope_id_ IS NULL OR data_id_ IS NULL OR layer_no_ IS NULL) THEN
         RETURN FALSE;
      END IF;
      IF model_id_ = 'ClientMetadata.client:IsoCountries' AND scope_id_ = 'SCOPE1' AND data_id_ = 'page:List' AND layer_no_ = 2 THEN
         row_.based_on_content_hash := '45CC0614244671859002F2993117F7BD79BCAF1B';
      ELSIF model_id_ = 'ClientMetadata.client:ManageMaintenanceOrder' AND scope_id_ = 'SCOPE2' AND data_id_ = 'group:EloGrp' AND layer_no_ = 2 THEN
         row_.based_on_content_hash := 'C102B2375EFBDA8E7EF291C8C821704BDDB3DC25';
      ELSIF model_id_ = 'ClientMetadata.client:IsoCountries' AND scope_id_ = 'global' AND data_id_ = 'group:non_existing' AND layer_no_ = 2 THEN
         row_.based_on_content_hash := NULL;
      ELSIF model_id_ = 'ClientMetadata.client:Customs' AND scope_id_ = 'SCOPE1' AND data_id_ = 'group:AddressGroup' AND layer_no_ = 90 THEN
         row_.based_on_content_hash := 'F1608B2E0962874D8D069969C454A8090D414965';
      ELSIF model_id_ = 'ClientMetadata.client:Customs' AND scope_id_ = 'SCOPE1' AND data_id_ = 'group:AddressGroup' AND layer_no_ = 2 THEN
         row_.based_on_content_hash := 'F1608B2E0962874D8D069969C454A8090D414965';
      ELSIF model_id_ = 'ClientMetadata.client:Customs' AND scope_id_ = 'global' AND data_id_ = 'group:AddressGroup' AND layer_no_ = 90 THEN
         row_.based_on_content_hash := '10DCCA529359F36C92FBA4CE09395AE3E9470DD2';
      ELSIF model_id_ = 'ClientMetadata.client:Customs' AND scope_id_ = 'global' AND data_id_ = 'list:AddressTypeList' AND layer_no_ = 2 THEN
         row_.based_on_content_hash := '6E22ECCA5B3D1EDC2E917502FA6199FDFF90330D';
      END IF;
      RETURN TRUE;
   END Try_Get_Data_Row_;

   @Mock
   FUNCTION Try_Get_Core_Data_Row_ (
      model_id_ IN     VARCHAR2,
      data_id_  IN     VARCHAR2,
      row_         OUT fnd_model_design_data_tab%ROWTYPE) RETURN BOOLEAN
   IS
   BEGIN
      IF model_id_ = 'ClientMetadata.client:ManageMaintenanceOrder' AND scope_id_ = 'SCOPE2' AND data_id_ = 'group:EloGrp' AND layer_no_ = 2 THEN
         row_.content_hash := 'FD8BB2D9D18908558E4D0DAC856E0A02DE83F8B0';
      ELSIF model_id_ = 'ClientMetadata.client:Customs' AND scope_id_ = 'global' AND data_id_ = 'list:AddressTypeList' AND layer_no_ = 2 THEN
         row_.content_hash := '6E22ECCA5B3D1EDC2E917502FA6199FDFF9033XX';
      END IF;
      RETURN TRUE;
   END Try_Get_Core_Data_Row_;

   @Mock
   FUNCTION Try_Get_Published_Data_Row_ (
      model_id_ IN     VARCHAR2,
      scope_id_ IN     VARCHAR2,
      data_id_  IN     VARCHAR2,
      row_         OUT fnd_model_design_data_tab%ROWTYPE) RETURN BOOLEAN
   IS
   BEGIN
      IF model_id_ = 'ClientMetadata.client:IsoCountries' AND data_id_ = 'page:List' AND layer_no_ = 2 THEN
         row_.content_hash := '45CC0614244671859002F2993117F7BD79BCAF1B';
      ELSIF model_id_ = 'ClientMetadata.client:Customs' AND data_id_ = 'group:AddressGroup' AND layer_no_ = 2 THEN
         row_.content_hash := 'F1608B2E0962874D8D069969C454A8090D414965';
      ELSIF model_id_ = 'ClientMetadata.client:ManageMaintenanceOrder' AND data_id_ = 'group:EloGrp' AND layer_no_ = 2 THEN
         RETURN FALSE;
      END IF;
      RETURN TRUE;
   END Try_Get_Published_Data_Row_;


IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | model_id_                                        | scope_id_   | data_id_               | layer_no_ | based_on_hash_                             | test_comment_                                                                                                          |
      | 'TRUE'    | 'ClientMetadata.client:IsoCountries'             | 'SCOPE1'    | 'page:List'            | 2         | NULL                                       | 'Custom scoped and published on top of global scoped published entire hiarachy is in sync'                             |
      | 'FALSE'   | 'ClientMetadata.client:ManageMaintenanceOrder'   | 'SCOPE2'    | 'group:EloGrp'         | 2         | NULL                                       | 'Custom scoped and published on top of core and core got an update later i.e. not in sync'                             |
      | 'FALSE'   | 'ClientMetadata.client:ManageMaintenanceOrder'   | 'SCOPE2'    | 'group:EloGrp'         | 2         | 'C102B2375EFBDA8E7EF291C8C821704BDDB3DC25' | 'Custom scoped and published on top of core and core got an update later i.e. not in sync with based on hash provided' |
      | 'TRUE'    | 'ClientMetadata.client:IsoCountries'             | 'global'    | 'group:non_existing'   | 2         | NULL                                       | 'Test with non existing data_id_ we return true in these cases'                                                        |
      | 'TRUE'    | 'ClientMetadata.client:Customs'                  | 'SCOPE1'    | 'group:AddressGroup'   | 90        | NULL                                       | 'Custom scoped and draft on top of core everything in sync'                                                            |
      | 'TRUE'    | 'ClientMetadata.client:Customs'                  | 'SCOPE1'    | 'group:AddressGroup'   | 2         | NULL                                       | 'Custom scoped and published on top of core everything in sync'                                                        |
      | 'TRUE'    | 'ClientMetadata.client:Customs'                  | 'SCOPE1'    | 'group:AddressGroup'   | 2         | 'F1608B2E0962874D8D069969C454A8090D414965' | 'Custom scoped and published on top of core and based on hash is provided and everything in sync'                      |
      | 'TRUE'    | 'ClientMetadata.client:Customs'                  | 'global'    | 'group:AddressGroup'   | 90        | NULL                                       | 'Draft global on top of core, everything is in sync - this also covers a special check (comparing against itself)'     |
      | 'FALSE'   | 'ClientMetadata.client:Customs'                  | 'global'    | 'list:AddressTypeList' | 2         | '6E22ECCA5B3D1EDC2E917502FA6199FDFF90330D' | 'Core chenged during an upgrade, configured and published core is not in sync'                                         |
      | 'FALSE'   | 'ClientMetadata.client:Customs'                  | 'global'    | 'list:AddressTypeList' | 2         | NULL                                       | 'Core chenged during an upgrade, configured and published core is not in sync, based on hash not provided'             |
      LOOP
      --Insert your test code here
      return_ := Is_Artifact_Baseline_In_Sync(model_id_, scope_id_, data_id_, layer_no_, based_on_hash_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_|| ' test comment: '||test_comment_;
   END LOOP;
END UNITTEST;




UNITTEST "Is_Baseline_In_Sync should check if all the sub artifacts are in sync and return false if atleast one is out of sync" FOR
   FUNCTION Is_Baseline_In_Sync(
      model_id_ IN     VARCHAR2,
      scope_id_ IN     VARCHAR2)RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   test_comment_ VARCHAR2(1000);
   @MockTable fnd_model_design_data_tab
   VALUES
      | model_id                                       | scope_id | data_id                  | artifact | name                | line_no | layer_no |reference|visibility|dependencies| content     |rowkey|schema_version| content_hash                                |  based_on_content_hash                      |based_on_content | rowversion |
      | 'ClientMetadata.client:IsoCountries'           | 'SCOPE1' | 'page:List'              | 'page'   | 'List'              | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '7FF81D742D3F364EAE253EC640471094CEEAABDE'  | '45CC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'SCOPE1' | 'page:List'              | 'page'   | 'List'              | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '7FF81D742D3F364EAE253EC640471094CEEAABDE'  | '45CC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'global' | 'page:List'              | 'page'   | 'List'              | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '45CC0614244671859002F2993117F7BD79BCAF1B'  | 'WWCC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'global' | 'page:List'              | 'page'   | 'List'              | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '45CC0614244671859002F2993117F7BD79BCAF1B'  | 'WWCC0614244671859002F2993117F7BD79BCAF1B'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:IsoCountries'           | 'global' | 'page:List'              | 'page'   | 'List'              | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'WWCC0614244671859002F2993117F7BD79BCAF1B'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:ManageMaintenanceOrder' | 'global' | 'group:EloGrp'           | 'group'  | 'EloGrp'            | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'FD8BB2D9D18908558E4D0DAC856E0A02DE83F8B0'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:ManageMaintenanceOrder' | 'SCOPE2' | 'group:EloGrp'           | 'group'  | 'EloGrp'            | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '1F4201CB4CCA816FD7C6FE7A7E0D76D11890AFD3'  | 'C102B2375EFBDA8E7EF291C8C821704BDDB3DC25'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:ManageMaintenanceOrder' | 'SCOPE2' | 'group:EloGrp'           | 'group'  | 'EloGrp'            | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '1F4201CB4CCA816FD7C6FE7A7E0D76D11890AFD3'  | 'C102B2375EFBDA8E7EF291C8C821704BDDB3DC25'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '10DCCA529359F36C92FBA4CE09395AE3E9470DD2'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'list:AddressTypeList'   | 'list'   | 'AddressTypeList'   | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '6E22ECCA5B3D1EDC2E917502FA6199FDFF90330D'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'page:AddressInfo'       | 'page'   | 'AddressInfo'       | 1       | 1        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | '13E9E51588E0B44C4065A6D29B71C3B591AC3DC7'  | ''                                          |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'F1608B2E0962874D8D069969C454A8090D414965'  | '10DCCA529359F36C92FBA4CE09395AE3E9470DD2'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'global' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'F1608B2E0962874D8D069969C454A8090D414965'  | '10DCCA529359F36C92FBA4CE09395AE3E9470DD2'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'SCOPE1' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 90       | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'ACF94C1DC07E1FD3AEF36A55C061CA83E0FF15AC'  | 'F1608B2E0962874D8D069969C454A8090D414965'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'SCOPE1' | 'group:AddressGroup'     | 'group'  | 'AddressGroup'      | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'DB6E1873416D52AD020DB7D1E211BA833E6C3273'  | 'F1608B2E0962874D8D069969C454A8090D414965'  |to_clob('')      | ''         |
      | 'ClientMetadata.client:Customs'                | 'SCOPE1' | 'page:AddressInfo'       | 'page'   | 'AddressInfo'       | 1       | 2        | ''      | 'Public' | ''         | to_clob('') | ''   | ''           | 'XXE9E51588E0B44C4065A6D29B71C3B591AC3DC7'  | 'CE4A16B0554675918F0B6212BAEBFA08D24DB473'  |to_clob('')      | ''         |
   END VALUES;

   @Mock
   FUNCTION Is_Artifact_Baseline_In_Sync (
      model_id_      IN     VARCHAR2,
      scope_id_      IN     VARCHAR2,
      data_id_       IN     VARCHAR2,
      layer_no_      IN     NUMBER DEFAULT 2,
      based_on_hash_ IN     VARCHAR2)RETURN VARCHAR2
   IS
   BEGIN
      IF model_id_ = 'ClientMetadata.client:Customs' AND scope_id_ = 'SCOPE1'  AND data_id_ = 'page:AddressInfo' AND layer_no_ = 2 THEN
         RETURN 'FALSE';
      END IF;
      RETURN 'TRUE';
   END Is_Artifact_Baseline_In_Sync;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | model_id_                             | scope_id_ | test_comment_                     |
      |  'TRUE'   | 'ClientMetadata.client:IsoCountries'  | 'SCOPE1'  | 'All sub artifacts are in sync'   |
      |  'FALSE'  | 'ClientMetadata.client:Customs'       | 'SCOPE1'  | 'Some artifacts are not in sync'  |
   LOOP
      --Insert your test code here
      return_ := Is_Baseline_In_Sync(model_id_, scope_id_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_|| ' test comment: '||test_comment_;
   END LOOP;
END UNITTEST;