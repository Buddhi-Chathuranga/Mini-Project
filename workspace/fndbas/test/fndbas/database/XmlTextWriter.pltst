-----------------------------------------------------------------------------
--
--  Logical unit: XmlTextWriter
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------

UNITTEST "Flush___ should append the xml_stream_ correctly and empty the write_buffer_ when called" FOR
   PROCEDURE Flush___ (
      xml_stream_ IN OUT NOCOPY CLOB);
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   output1_  CLOB;
   expected_ CLOB;
   len_      NUMBER;
BEGIN
   FOR

      | xml_stream_ | write_buffer_ |    expected_     |
      |   'strm1'   |  'buff1'      |    'strm1buff1'  |
      |   'strm2'   |  ''           |     'strm2'      |
   LOOP
      --Insert your test code here
      output1_ := xml_stream_;
      Flush___(output1_);
      len_ := NVL(LENGTH(write_buffer_),0);
      --Insert your assertions here
      ASSERT output1_ = expected_ AND len_ = 0 MESSAGE 'Expected '||expected_||' but was '||output1_;

   END LOOP;
END UNITTEST;


UNITTEST "Write___ should append the buffers correctly when buffer length approaches the max length of 32767 characters" FOR
   PROCEDURE Write___ (
      xml_stream_ IN OUT NOCOPY CLOB,
      append_     IN     VARCHAR2 );
USING
   --Insert your mock directives and mock return variables here
IS
   --Insert your test variables here
   output1_  CLOB;
   temp_      VARCHAR2(32767);
   len1_      NUMBER;
   len2_     NUMBER;

BEGIN
   FOR i_ IN 1..32766
   LOOP
      temp_ := temp_ || 'A';
   END LOOP;

   FOR
      | xml_stream_ |  append_  |write_buffer_ |
      |  'strm1'    |  'app1'   |   temp_      |
      |  'strm2'    |  'app2'   |  'buffer2'   |
   LOOP
      --Insert your test code here
      output1_ := xml_stream_;
      len2_    := LENGTH(write_buffer_);
      Write___(output1_, append_);
      len1_    := LENGTH(write_buffer_);
      --Insert your assertions here
      ASSERT len1_ = LENGTH(append_) OR len1_ = len2_ + LENGTH(append_) MESSAGE 'Expected '||LENGTH(append_)|| 'OR' || len2_ + LENGTH(append_)||' but was '||len1_;
   END LOOP;
END UNITTEST;



-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------


