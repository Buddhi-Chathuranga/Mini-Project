-----------------------------------------------------------------------------
--
--  Logical unit: AurenaPageDesigner
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210517  challk  TEAURENAFW-5532, Add capability to page designer to add Operational report support
-----------------------------------------------------------------------------

layer Core;
UNITTEST "Get_OperationalReports___ should return reports based on the report type" FOR
   FUNCTION Get_OperationalReports___(
      paramter_ IN     VARCHAR2) RETURN Ref_Data_Arr;
USING

   @MockTable report_definition
   VALUES
      | report_id             | report_title                       | report_mode |
      |'MRB_HEAD_REP'         |'Material Review Board Case'        |'PLSQL1.2'   |
      |'CFO_SALES_REP_REP'    |'Sales Structure Report'            |'EXCEL1.0'   |
      |'JOURNAL_REP'          |'Journal Report - Summary'          |'PLSQL1.2'   |
   END VALUES;

IS
   return_   Ref_Data_Arr;
   expected_ Ref_Data_Arr;

   -- To prepare expected outcomes
   rec_ Ref_Data_Rec;
   arr_operational_ Ref_Data_Arr := Ref_Data_Arr();
   arr_business_reporter_ Ref_Data_Arr := Ref_Data_Arr();

BEGIN
   -- Expected array element 1 for operational rpt
   rec_.value := 'MRB_HEAD_REP';
   rec_.label := 'Material Review Board Case';
   rec_.data :='MrbHeadRep';
   arr_operational_.extend;
   arr_operational_(1) := rec_;

   -- Expected array element 2 operational rpt
   rec_.value := 'JOURNAL_REP';
   rec_.label := 'Journal Report - Summary';
   rec_.data :='JournalRep';
   arr_operational_.extend;
   arr_operational_(2) := rec_;

   -- Expected array element 1 business rpt
   rec_.value := 'CFO_SALES_REP_REP';
   rec_.label := 'Sales Structure Report';
   rec_.data :='BRCfoSalesRepRep';
   arr_business_reporter_.extend;
   arr_business_reporter_(1) := rec_;

   FOR
      | expected_                | paramter_          |
      | arr_operational_         | 'OPERATIONAL'      |
      | arr_business_reporter_   | 'BUSINESS_REPORTER'|
   LOOP
      return_ := Get_OperationalReports___(paramter_);
      FOR counter_ IN 1 .. return_.COUNT LOOP
         ASSERT return_(counter_).data = expected_(counter_).data
         AND return_(counter_).label = expected_(counter_).label
         AND return_(counter_).value = expected_(counter_).value
         MESSAGE 'Expected '||expected_(counter_).data ||', '
         ||expected_(counter_).label ||', '||expected_(counter_).value
         ||' but returned '||return_(counter_).data||', '
         ||return_(counter_).label ||', '||return_(counter_).value;
      END LOOP;
   END LOOP;
END UNITTEST;


UNITTEST "Get_OperationalReportTypes___ should return available report types" FOR
   FUNCTION Get_OperationalReportTypes___ RETURN Ref_Data_Arr;
USING

   @MockTable report_definition
   VALUES
      | report_mode |
      |'PLSQL1.2'   |
      |'EXCEL1.1'   |
      |'EXCEL1.0'   |
      |'PLSQL1.1'   |
   END VALUES;

IS
   return_   Ref_Data_Arr;
   expected_ Ref_Data_Arr;

   -- To prepare expected outcomes
   rec_operational_ Ref_Data_Rec;
   arr_rep_types_ Ref_Data_Arr := Ref_Data_Arr();

BEGIN

   -- TODO: At the moment Get_OperationalReportTypes___ only returns OPERATIONAL type
   -- Change accordingly when support added for BUSINESS_REPORTER type
   arr_rep_types_.extend;
   rec_operational_.value := 'OPERATIONAL';
   rec_operational_.label := 'Operational';
   arr_rep_types_(1) := rec_operational_;

   -- arr_rep_types_.extend;
   -- rec_business_.value := 'BUSINESS_REPORTER';
   -- rec_business_.label := 'Business Reporter';
   -- arr_rep_types_(2) := rec_operational_;

   FOR
      | expected_ |
      | arr_rep_types_ |
   LOOP
      return_ := Get_OperationalReportTypes___;

      ASSERT return_(1).value = expected_(1).value
      AND return_(1).label = expected_(1).label
      MESSAGE 'Expected '|| expected_(1).value || ', '|| expected_(1).label
      ||' but returned '|| return_(1).value || ', '|| return_(1).label;
   END LOOP;
END UNITTEST;


UNITTEST "Get_InitContextAttributes___ should extract and return init context parameters using metadata" FOR
   FUNCTION Get_InitContextAttributes___(
      page_ IN     VARCHAR2)  RETURN Ref_Data_Arr;
USING
   -- From below test clobs, the algorithm is interested only in 'initcontext' and its content. I have decided to use two actual clobs found in our environments
   @MockTable fnd_model_design_data
   VALUES
      | content | model_id | data_id |
      | to_clob('{"name": "List","contextAttributes": [],
      "label": "[#[translatesys:Form Window:SalesContractActivities.page.List.$this:$this:WEB:Contract Item Activities]#]",
      "initcontext": {"parameters": {"RevSeq": {"datatype": "Number"}}},
      "initCommand": {"name": "initCommand","execute": [{"call": {"method": "set","args": {"name": "RevSeq"}},
      "assign": "viewstate.global.salesContractRevisionSequence"}]},
      "globals": {"salesContractRevisionSequence": {"type": "Number","default": 0}},
      "datasourceProjection": "SalesContractActivitiesHandling",
      "datasourceEntitySet": "SalesContractSet","entity": "SalesContract",
      "content": [{"elementType": "selector","isReference": true,"selector": "SalesContractCommonSelector","id": "SalesContractCommonSelector"},
      {"elementType": "list","isReference": true,"list": "ContractActivityList","id": "ContractActivityList","binding": {"property": "SalesContractActivities"}}]}')
      | 'ClientMetadata.client:SalesContractActivities' | 'page:List' |
      | to_clob('{"name": "List","contextAttributes": [],
      "label": "[#[translatesys:Form Window:AbcClasses.page.List.$this:$this:WEB:ABC Classes]#]",
      "datasourceProjection": "AbcClassesHandling","datasourceEntitySet": "AbcClasses","entity": "AbcClass",
      "content": [{"elementType": "list","isReference": true,"list": "InvABCCodesList","id": "InvABCCodesList"}]}')
      | 'ClientMetadata.client:AbcClasses' | 'page:List' |
   END VALUES;

IS
   -- test variables
   return_   Ref_Data_Arr;
   expected_ Ref_Data_Arr;

   -- To prepare expected outcomes
   rec_ Ref_Data_Rec;
   arr_ Ref_Data_Arr := Ref_Data_Arr();
   arr2_ Ref_Data_Arr := Ref_Data_Arr();

BEGIN

   arr_.extend;
   rec_.value := 'RevSeq';
   rec_.label := 'RevSeq';
   arr_(1) := rec_;

   FOR
      | expected_ | page_ |
      | arr_      | 'page/SalesContractActivities/List' |
      | arr2_     | 'page/AbcClasses/List' |
      | arr2_     | 'page/NonExisting/List' |
      | arr2_     | 'NonExisting' |
      | arr2_     | ''    |
   LOOP
      return_ := Get_InitContextAttributes___(page_);
      IF expected_.count = 0 THEN
         ASSERT (return_.count = 0)
         MESSAGE 'Expecting an empty array but return value is not empty';
      ELSE
         ASSERT return_(1).value = expected_(1).VALUE
         AND return_(1).label = expected_(1).label
         MESSAGE 'Expected '|| expected_(1).value || ', '|| expected_(1).label
         ||' but returned '|| return_(1).value || ', '|| return_(1).label;
      END IF;
   END LOOP;
END UNITTEST;
