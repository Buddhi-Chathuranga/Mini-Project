-----------------------------------------------------------------------------
--
--  Logical unit: PlsqlRestSender
--  Component:    FNDBAS
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;



-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------

FUNCTION Bool_To_Varchar___(
   boolean_ BOOLEAN) RETURN VARCHAR2
IS
BEGIN
   RETURN CASE boolean_ WHEN TRUE THEN 'TRUE' WHEN FALSE THEN 'FALSE' ELSE NULL END;
END Bool_To_Varchar___;

PROCEDURE Assert_Equals___(
   expected_str_   VARCHAR2,
   actual_str_     VARCHAR2
   )
IS
BEGIN
   ASSERT actual_str_ = expected_str_ MESSAGE 'Expected ' || expected_str_ || ' but  was ' || actual_str_;
END Assert_Equals___;

PROCEDURE Assert_Equals___(
   expected_clob_   CLOB,
   actual_clob_     CLOB
   )
IS
BEGIN
   ASSERT actual_clob_ = expected_clob_ MESSAGE 'Expected ' || expected_clob_ || ' but  was ' || actual_clob_;
END Assert_Equals___;

PROCEDURE Assert_Equals___(
   expected_bool_   BOOLEAN,
   actual_bool_     BOOLEAN
   )
IS
BEGIN
   ASSERT actual_bool_ = expected_bool_ MESSAGE 'Expected ' || Bool_To_Varchar___(expected_bool_) || ' but  was ' || Bool_To_Varchar___(actual_bool_);
END Assert_Equals___;

PROCEDURE Assert_Equals___(
   expected_num_   NUMBER,
   actual_num_     NUMBER
   )
IS
BEGIN
   ASSERT actual_num_ = expected_num_ MESSAGE 'Expected ' || expected_num_ || ' but  was ' || actual_num_;
END Assert_Equals___;

-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------

UNITTEST "Call_Rest_EndPoint_Json should pass proper values to Call_Rest_EndPoint___ when invoked" FOR
   PROCEDURE Call_Rest_EndPoint_Json (
      rest_service_        IN     VARCHAR2,
      json_                IN OUT CLOB,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      message_type_        IN     VARCHAR2 DEFAULT 'EVENT',
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL);
USING

   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @Mock
   PROCEDURE Call_Rest_EndPoint___ (
      msg_payload_doc_     IN OUT Document,
      msg_payload_rec_     IN OUT type_record_,
      xml_                 IN     CLOB      DEFAULT NULL,
      json_                IN OUT CLOB,
      message_id_          IN OUT NUMBER,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      message_type_        IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      subject_             IN     VARCHAR2,
      in_order_            IN     BOOLEAN,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE
      )
   IS
      exp_json_      CLOB := TO_CLOB('{"foo":"abcd"}');
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___(exp_json_      , json_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('GET'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('testUser'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('testSender'   , sender_);
      Assert_Equals___('testReceiver' , receiver_);
      Assert_Equals___('testMsgType'  , message_type_);
      Assert_Equals___('testSubject'  , subject_);
      Assert_Equals___(TRUE           , in_order_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      json_ := TO_CLOB('200 Success');
   END Call_Rest_EndPoint___;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

IS
   json_str_         VARCHAR2(200);
   expected_output_  CLOB;
BEGIN

   json_ := TO_CLOB('{"foo":"abcd"}');

   call_rest_endpoint_json(
   rest_service_        => 'RestService1',
   json_                => json_,
   url_params_          => NULL,
   callback_func_       => 'callbackFunc',
   http_method_         => 'GET',
   http_req_headers_    => 'sampleHeader',
   query_parameters_    => NULL,
   header_params_       => NULL,
   incld_resp_info_     => TRUE,
   fnd_user_            => 'testUser',
   key_ref_             => 'keyRef',
   sender_              => 'testSender',
   receiver_            => 'testReceiver',
   message_type_        => 'testMsgType',
   subject_             => 'testSubject',
   in_order_            => TRUE,
   fail_notify_         => TRUE,
   failed_callback_fun_ => 'failedCallbackFunc',
   accepted_res_codes_  => '200,201',
   auth_params_         => NULL);

   expected_output_ := TO_CLOB('200 Success');
   ASSERT json_ = expected_output_ MESSAGE 'Expected '||expected_output_||' but  was '||json_;

END UNITTEST;


UNITTEST "Call_Rest_EndPoint_Json should pass proper values to Call_Rest_EndPoint___ when invoked and message id returned" FOR
   PROCEDURE Call_Rest_EndPoint_Json (
      rest_service_        IN     VARCHAR2,
      json_                IN OUT CLOB,
      message_id_          IN OUT NUMBER,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      message_type_        IN     VARCHAR2 DEFAULT 'EVENT',
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL);
USING

   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @Mock
   PROCEDURE Call_Rest_EndPoint___ (
      msg_payload_doc_     IN OUT Document,
      msg_payload_rec_     IN OUT type_record_,
      xml_                 IN     CLOB      DEFAULT NULL,
      json_                IN OUT CLOB,
      message_id_          IN OUT NUMBER,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      message_type_        IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      subject_             IN     VARCHAR2,
      in_order_            IN     BOOLEAN,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE
      )
   IS
      exp_json_      CLOB := TO_CLOB('{"foo":"abcd"}');
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___(exp_json_      , json_);
      --Assert_Equals___(NULL           , message_id_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('GET'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('testUser'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('testSender'   , sender_);
      Assert_Equals___('testReceiver' , receiver_);
      Assert_Equals___('testMsgType'  , message_type_);
      Assert_Equals___('testSubject'  , subject_);
      Assert_Equals___(TRUE           , in_order_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      json_ := TO_CLOB('200 Success');
      message_id_ := 1234;
   END Call_Rest_EndPoint___;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

IS
   json_str_         VARCHAR2(200);
   expected_output_  CLOB;
   message_id_       NUMBER;
   expected_message_id_ NUMBER;
BEGIN

   json_ := TO_CLOB('{"foo":"abcd"}');

   call_rest_endpoint_json(
   rest_service_        => 'RestService1',
   json_                => json_,
   message_id_          => message_id_,
   url_params_          => NULL,
   callback_func_       => 'callbackFunc',
   http_method_         => 'GET',
   http_req_headers_    => 'sampleHeader',
   query_parameters_    => NULL,
   header_params_       => NULL,
   incld_resp_info_     => TRUE,
   fnd_user_            => 'testUser',
   key_ref_             => 'keyRef',
   sender_              => 'testSender',
   receiver_            => 'testReceiver',
   message_type_        => 'testMsgType',
   subject_             => 'testSubject',
   in_order_            => TRUE,
   fail_notify_         => TRUE,
   failed_callback_fun_ => 'failedCallbackFunc',
   accepted_res_codes_  => '200,201',
   auth_params_         => NULL);

   expected_output_ := TO_CLOB('200 Success');
   expected_message_id_ := 1234;

   ASSERT json_ = expected_output_ MESSAGE 'Expected '||expected_output_||' but  was '||json_;
   ASSERT message_id_ = expected_message_id_ MESSAGE 'Expected '||expected_message_id_||' but  was '||message_id_;

END UNITTEST;


UNITTEST "Call_Rest_EndPoint___ should pass proper values to Plsqlap_Server_API when invoked" FOR
   PROCEDURE Call_Rest_EndPoint___ (
      msg_payload_doc_     IN OUT Document,
      msg_payload_rec_     IN OUT type_record_,
      xml_                 IN     CLOB      DEFAULT NULL,
      json_                IN OUT CLOB,
      message_id_          IN OUT NUMBER,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      message_type_        IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      subject_             IN     VARCHAR2,
      in_order_            IN     BOOLEAN,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE);
USING
   --Insert your mock directives and mock return variables here
   DUMMY_DOC           CONSTANT VARCHAR2(10) := '__DUMMY__';

   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     BOOLEAN,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   FUNCTION Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     DATE,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      type_      IN     VARCHAR2 DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  IFSAPP.Plsqlap_Document_API.ELEMENT_ID
   IS
   BEGIN
      RETURN NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   PROCEDURE Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     VARCHAR2,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   FUNCTION Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     NUMBER,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      type_      IN     VARCHAR2 DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  IFSAPP.Plsqlap_Document_API.ELEMENT_ID
   IS
   BEGIN
      RETURN NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   PROCEDURE Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     NUMBER,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      type_      IN     VARCHAR2 DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   FUNCTION Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     BOOLEAN,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  IFSAPP.Plsqlap_Document_API.ELEMENT_ID
   IS
   BEGIN
      RETURN NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   FUNCTION Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     VARCHAR2,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  IFSAPP.Plsqlap_Document_API.ELEMENT_ID
   IS
   BEGIN
      RETURN NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   FUNCTION Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     CLOB,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  IFSAPP.Plsqlap_Document_API.ELEMENT_ID
   IS
   BEGIN
      RETURN NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   PROCEDURE Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     CLOB,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   FUNCTION Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     BLOB,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  IFSAPP.Plsqlap_Document_API.ELEMENT_ID
   IS
   BEGIN
      RETURN NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   PROCEDURE Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     BLOB,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END Add_Attribute;

   @MockPackage Plsqlap_Document_API
   PROCEDURE Add_Attribute (
      main_      IN OUT DOCUMENT,
      name_      IN     VARCHAR2,
      value_     IN     DATE,
      parent_id_ IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      type_      IN     VARCHAR2 DEFAULT NULL,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END Add_Attribute;

   @MockPackage Ins_Util_API
   FUNCTION To_Base64 (
      txt_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END To_Base64;

   @MockPackage Plsqlap_Document_API
   PROCEDURE To_Ifs_Xml (
      xml_           OUT CLOB,
      main_       IN     DOCUMENT,
      id_         IN     IFSAPP.Plsqlap_Document_API.ELEMENT_ID DEFAULT NULL,
      add_type_   IN     BOOLEAN DEFAULT FALSE,
      add_header_ IN     BOOLEAN DEFAULT FALSE,
      indent_     IN     NUMBER DEFAULT NULL,
      use_crlf_   IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      NULL;
   END To_Ifs_Xml;

   @MockPackage Plsqlap_Document_API
   FUNCTION Get_Document_Name (
      main_ IN     DOCUMENT )  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END Get_Document_Name;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      xml_                 IN OUT CLOB,
      message_id_          IN OUT NUMBER,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT NULL,
      message_type_        IN     VARCHAR2 DEFAULT NULL,
      message_function_    IN     VARCHAR2 DEFAULT NULL,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      external_message_id_ IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN DEFAULT FALSE,
      rest_                IN     BOOLEAN DEFAULT FALSE,
      parameters_          IN     CLOB DEFAULT NULL )
   IS
   BEGIN
      ASSERT FALSE MESSAGE '[Mock1] This method is not supposed to be invoked in this unit test';
   END Post_Outbound_Message;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      message_body_     IN OUT IFSAPP.PLSQLAP_DOCUMENT_API.DOCUMENT,
      sender_           IN     VARCHAR2 DEFAULT NULL,
      receiver_         IN     VARCHAR2 DEFAULT NULL,
      message_type_     IN     VARCHAR2 DEFAULT NULL,
      message_function_ IN     VARCHAR2 DEFAULT NULL,
      subject_          IN     VARCHAR2 DEFAULT NULL,
      in_order_         IN     BOOLEAN DEFAULT FALSE,
      rest_             IN     BOOLEAN DEFAULT FALSE,
      parameters_       IN     CLOB DEFAULT NULL )
   IS
   BEGIN
      ASSERT FALSE MESSAGE '[Mock2] This method is not supposed to be invoked in this unit test';
   END Post_Outbound_Message;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      xml_                 IN OUT CLOB,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT NULL,
      message_type_        IN     VARCHAR2 DEFAULT NULL,
      message_function_    IN     VARCHAR2 DEFAULT NULL,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      external_message_id_ IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN DEFAULT FALSE,
      rest_                IN     BOOLEAN DEFAULT FALSE,
      parameters_          IN     CLOB DEFAULT NULL )
   IS
   BEGIN
      Assert_Equals___(TO_CLOB('<abc>test</abc>'), xml_);
      Assert_Equals___('testSender'  , sender_);
      Assert_Equals___('testReceiver', receiver_);
      Assert_Equals___('msgType'     , message_type_);
      Assert_Equals___('restService' , message_function_);
      Assert_Equals___('testSubject' , subject_);
      Assert_Equals___(TRUE, in_order_);
      Assert_Equals___(TRUE, rest_);
   END Post_Outbound_Message;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      message_body_     IN OUT IFSAPP.PLSQLAP_DOCUMENT_API.DOCUMENT,
      message_id_       IN OUT NUMBER,
      sender_           IN     VARCHAR2 DEFAULT NULL,
      receiver_         IN     VARCHAR2 DEFAULT NULL,
      message_type_     IN     VARCHAR2 DEFAULT NULL,
      message_function_ IN     VARCHAR2 DEFAULT NULL,
      subject_          IN     VARCHAR2 DEFAULT NULL,
      in_order_         IN     BOOLEAN DEFAULT FALSE,
      rest_             IN     BOOLEAN DEFAULT FALSE,
      parameters_       IN     CLOB DEFAULT NULL )
   IS
   BEGIN
      ASSERT FALSE MESSAGE '[Mock4] This method is not supposed to be invoked in this unit test';
   END Post_Outbound_Message;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      message_body_     IN OUT TYPE_RECORD_,
      sender_           IN     VARCHAR2 DEFAULT NULL,
      receiver_         IN     VARCHAR2 DEFAULT NULL,
      message_type_     IN     VARCHAR2 DEFAULT NULL,
      message_function_ IN     VARCHAR2 DEFAULT NULL,
      subject_          IN     VARCHAR2 DEFAULT NULL,
      in_order_         IN     BOOLEAN DEFAULT FALSE,
      rest_             IN     BOOLEAN DEFAULT FALSE,
      parameters_       IN     CLOB DEFAULT NULL )
   IS
   BEGIN
      ASSERT FALSE MESSAGE '[Mock5] This method is not supposed to be invoked in this unit test';
   END Post_Outbound_Message;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      message_body_     IN OUT TYPE_RECORD_,
      message_id_       IN OUT NUMBER,
      sender_           IN     VARCHAR2 DEFAULT NULL,
      receiver_         IN     VARCHAR2 DEFAULT NULL,
      message_type_     IN     VARCHAR2 DEFAULT NULL,
      message_function_ IN     VARCHAR2 DEFAULT NULL,
      subject_          IN     VARCHAR2 DEFAULT NULL,
      in_order_         IN     BOOLEAN DEFAULT FALSE,
      rest_             IN     BOOLEAN DEFAULT FALSE,
      parameters_       IN     CLOB DEFAULT NULL )
   IS
   BEGIN
      ASSERT FALSE MESSAGE '[Mock6] This method is not supposed to be invoked in this unit test';
   END Post_Outbound_Message;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      json_                IN OUT CLOB,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT NULL,
      message_type_        IN     VARCHAR2 DEFAULT NULL,
      message_function_    IN     VARCHAR2 DEFAULT NULL,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      external_message_id_ IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN DEFAULT FALSE,
      parameters_          IN     CLOB DEFAULT NULL,
      rest_                IN     BOOLEAN DEFAULT FALSE,
      is_json_             IN     BOOLEAN )
   IS
   BEGIN
      ASSERT FALSE MESSAGE '[Mock7] This method is not supposed to be invoked in this unit test';
   END Post_Outbound_Message;

   @MockPackage Plsqlap_Server_API
   PROCEDURE Post_Outbound_Message (
      json_                IN OUT CLOB,
      message_id_          IN OUT NUMBER,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT NULL,
      message_type_        IN     VARCHAR2 DEFAULT NULL,
      message_function_    IN     VARCHAR2 DEFAULT NULL,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      external_message_id_ IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN DEFAULT FALSE,
      parameters_          IN     CLOB DEFAULT NULL,
      rest_                IN     BOOLEAN DEFAULT FALSE,
      is_json_             IN     BOOLEAN )
   IS
   BEGIN

      Assert_Equals___(TO_CLOB('{"foo":"abcd"}'), json_);
      Assert_Equals___(-1 , NVL(message_id_, -1));
      Assert_Equals___('testSender'  , sender_);
      Assert_Equals___('testReceiver', receiver_);
      Assert_Equals___('msgType'     , message_type_);
      Assert_Equals___('restService' , message_function_);
      Assert_Equals___('testSubject' , subject_);
      Assert_Equals___(TRUE, in_order_);
      Assert_Equals___(TRUE, rest_);
      Assert_Equals___(TRUE, is_json_);
   END Post_Outbound_Message;

IS
   --Insert your test variables here
   json1_    CLOB;
   xml1_    CLOB;
BEGIN
   json1_ := TO_CLOB('{"foo":"abcd"}');
   xml1_ := TO_CLOB('<abc>test</abc>');
   FOR
      | msg_payload_doc_ | msg_payload_rec_ | xml_  | json_  |message_id_ | rest_service_ | url_params_     | callback_func_ | http_method_ | http_req_headers_ | query_parameters_ | header_params_ | incld_resp_info_ | fnd_user_   | key_ref_     | sender_        | message_type_ | blob_info_   | receiver_       | subject_        | in_order_ | fail_notify_ | failed_callback_fun_ | accepted_res_codes_ | auth_params_        | is_json_ |
      | NULL             | NULL             | NULL  | json1_ | NULL       |'restService'  | 'testUrlParam'  |  'testCBFunc'  |  'GET'       |  'testHeader'     | NULL              | NULL           | FALSE            |  'testUser' | 'testKeyRef' | 'testSender'   | 'msgType'     | 'bloabInfo'  | 'testReceiver'  | 'testSubject'   |   TRUE    |     FALSE    |  'failedCallbackFunc'|  '200,201'          | 'testAuthParams'    |   TRUE   |
      | NULL             | NULL             | xml1_ | NULL   | NULL       |'restService'  | 'testUrlParam'  |  'testCBFunc'  |  'GET'       |  'testHeader'     | NULL              | NULL           | FALSE            |  'testUser' | 'testKeyRef' | 'testSender'   | 'msgType'     | 'bloabInfo'  | 'testReceiver'  | 'testSubject'   |   TRUE    |     FALSE    |  'failedCallbackFunc'|  '200,201'          | 'testAuthParams'    |   FALSE  |
   LOOP
      --Insert your test code here
      Call_Rest_EndPoint___(msg_payload_doc_, msg_payload_rec_, xml_, json1_, message_id_, rest_service_, url_params_, callback_func_, http_method_, http_req_headers_, query_parameters_, header_params_, incld_resp_info_, fnd_user_, key_ref_, sender_, message_type_, blob_info_, receiver_, subject_, in_order_, fail_notify_, failed_callback_fun_, accepted_res_codes_, auth_params_, is_json_);
      --Insert your assertions here
   END LOOP;
END UNITTEST;


UNITTEST "Call_Rest_EndPoint_Json_Sync should pass proper values to Call_Rest_EndPoint___ when invoked" FOR
   PROCEDURE Call_Rest_EndPoint_Json_Sync (
      rest_service_        IN     VARCHAR2,
      json_                IN OUT CLOB,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      message_type_        IN     VARCHAR2 DEFAULT 'EVENT',
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.TYPE_NAME_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )  RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN OUT Document,
      msg_payload_rec_     IN OUT type_record_,
      xml_                 IN OUT CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE)
   IS
      exp_json_    CLOB  := TO_CLOB('{"foo":"abcd"}');
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___(exp_json_      , json_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('GET'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('testUser'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('testSender'   , sender_);
      Assert_Equals___('testReceiver' , receiver_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      json_ := TO_CLOB('200 Success');
   END Call_Rest_EndPoint_Sync___;

IS
   --Insert your test variables here
   expected_output_  CLOB;
BEGIN
   --Insert your test code here
   json_ := TO_CLOB('{"foo":"abcd"}');

   Call_Rest_EndPoint_Json_Sync(
   rest_service_        => 'RestService1',
   json_                => json_,
   url_params_          => NULL,
   callback_func_       => 'callbackFunc',
   http_method_         => 'GET',
   http_req_headers_    => 'sampleHeader',
   query_parameters_    => NULL,
   header_params_       => NULL,
   incld_resp_info_     => TRUE,
   fnd_user_            => 'testUser',
   key_ref_             => 'keyRef',
   sender_              => 'testSender',
   receiver_            => 'testReceiver',
   message_type_        => 'testMsgType',
   subject_             => 'testSubject',
   in_order_            => TRUE,
   fail_notify_         => TRUE,
   failed_callback_fun_ => 'failedCallbackFunc',
   accepted_res_codes_  => '200,201',
   auth_params_         => NULL);

   --Insert your assertions here
   expected_output_ := TO_CLOB('200 Success');
   ASSERT json_ = expected_output_ MESSAGE 'Expected '||expected_output_||' but  was '||json_;
END UNITTEST;

UNITTEST "Call_Rest_EP_Empty_Body_Sync should return response when there is empty request body" FOR
   PROCEDURE Call_Rest_EP_Empty_Body_Sync (
      xml_                    OUT CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     type_record_ DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     type_record_ DEFAULT NULL,
      header_params_       IN     type_record_ DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     type_record_ DEFAULT NULL);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.TYPE_NAME_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )  RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @MockPackage Plsqlap_Record_API
   PROCEDURE To_Xml (
      xml_       OUT CLOB,
      record_ IN     TYPE_RECORD_,
      rest_   IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      NULL;
   END To_Xml;

   @MockPackage Plsqlap_Record_API
   FUNCTION To_Xml (
      record_ IN     TYPE_RECORD_ )  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END To_Xml;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN OUT Document,
      msg_payload_rec_     IN OUT type_record_,
      xml_                 IN OUT CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___('TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada' , blob_info_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      xml_ := TO_CLOB('<Result>Tested OK</Result>');

   END Call_Rest_EndPoint_Sync___;

IS
   output1_  CLOB;
BEGIN
   xml_ := TO_CLOB('<Result>Tested OK</Result>');
   Call_Rest_EP_Empty_Body_Sync(output1_, 'RestService1', NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada', 'TEST_SENDER', 'TEST_RECEIVER', NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201',NULL );
   ASSERT output1_ = xml_ MESSAGE 'Expected '||xml_||' but  was '||output1_;
END UNITTEST;

UNITTEST "Call_Rest_EP_Empty_Body_Sync2 should return response when there is empty request body" FOR
   PROCEDURE Call_Rest_EP_Empty_Body_Sync2 (
      xml_                    OUT CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.TYPE_NAME_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )  RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN OUT Document,
      msg_payload_rec_     IN OUT type_record_,
      xml_                 IN OUT CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___('TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada' , blob_info_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      xml_ := TO_CLOB('<Result>Tested OK</Result>');

   END Call_Rest_EndPoint_Sync___;

IS
   output1_  CLOB;
BEGIN
   xml_ := TO_CLOB('<Result>Tested OK</Result>');
   Call_Rest_EP_Empty_Body_Sync2(output1_, 'RestService1', NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada', 'TEST_SENDER', 'TEST_RECEIVER', NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201',NULL);
   ASSERT output1_ = xml_ MESSAGE 'Expected '||xml_||' but  was '||output1_;
END UNITTEST;

UNITTEST "Call_Rest_EndPoint should return binary response when using typr record" FOR
   PROCEDURE Call_Rest_EndPoint (
      rest_service_        IN     VARCHAR2,
      message_payload_     IN     type_record_,
      url_params_          IN     type_record_ DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     type_record_ DEFAULT NULL,
      header_params_       IN     type_record_ DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      message_type_        IN     VARCHAR2 DEFAULT 'EVENT',
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2  DEFAULT NULL,
      auth_params_         IN     type_record_ DEFAULT NULL,
      binary_response_        OUT BLOB);
USING
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @MockPackage Plsqlap_Record_API
   PROCEDURE To_Xml (
      xml_       OUT CLOB,
      record_ IN     TYPE_RECORD_,
      rest_   IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      NULL;
   END To_Xml;

   @MockPackage Plsqlap_Record_API
   FUNCTION To_Xml (
      record_ IN     TYPE_RECORD_ )  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END To_Xml;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN     Document,
      msg_payload_rec_     IN     type_record_,
      xml_                 IN     CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE,
      binary_response_        OUT BLOB)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      binary_response_ := TO_BLOB(utl_raw.cast_to_raw ('Tested Ok'));

   END Call_Rest_EndPoint_Sync___;

IS
   output1_  BLOB;
BEGIN
   Call_Rest_EndPoint('RestService1',NULL, NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_SENDER', NULL, 'TEST_RECEIVER', NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201', NULL, output1_);
   ASSERT utl_raw.cast_to_varchar2(output1_) = 'Tested Ok' MESSAGE 'Expected Tested Ok but  was '||utl_raw.cast_to_varchar2(output1_);
END UNITTEST;

UNITTEST "Call_Rest_EndPoint should return binary response when using type document" FOR
   PROCEDURE Call_Rest_EndPoint (
      rest_service_        IN     VARCHAR2,
      message_payload_     IN     Document,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      message_type_        IN     VARCHAR2 DEFAULT 'EVENT',
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL,
      binary_response_        OUT BLOB);
USING
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN     Document,
      msg_payload_rec_     IN     type_record_,
      xml_                 IN     CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE,
      binary_response_        OUT BLOB)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      binary_response_ := TO_BLOB(utl_raw.cast_to_raw ('Tested Ok'));

   END Call_Rest_EndPoint_Sync___;

IS
   output1_  BLOB;
BEGIN
   Call_Rest_EndPoint('RestService1', NULL, NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_SENDER', NULL, 'TEST_RECEIVER', NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201', NULL, output1_);
   ASSERT utl_raw.cast_to_varchar2(output1_) = 'Tested Ok' MESSAGE 'Expected Tested Ok but  was '||utl_raw.cast_to_varchar2(output1_);
END UNITTEST;

UNITTEST "Call_Rest_EndPoint1 should return binary response when sending CLOB in request body with type record" FOR
   PROCEDURE Call_Rest_EndPoint1 (
      rest_service_        IN     VARCHAR2,
      xml_                 IN     CLOB,
      url_params_          IN     type_record_ DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     type_record_ DEFAULT NULL,
      header_params_       IN     type_record_ DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      message_type_        IN     VARCHAR2 DEFAULT 'CONNECT',
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     type_record_ DEFAULT NULL,
      binary_response_        OUT BLOB);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @MockPackage Plsqlap_Record_API
   PROCEDURE To_Xml (
      xml_       OUT CLOB,
      record_ IN     TYPE_RECORD_,
      rest_   IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      NULL;
   END To_Xml;

   @MockPackage Plsqlap_Record_API
   FUNCTION To_Xml (
      record_ IN     TYPE_RECORD_ )  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END To_Xml;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN     Document,
      msg_payload_rec_     IN     type_record_,
      xml_                 IN     CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE,
      binary_response_        OUT BLOB)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      binary_response_ := TO_BLOB(utl_raw.cast_to_raw ('Tested Ok'));

   END Call_Rest_EndPoint_Sync___;

IS
   --Insert your test variables here
   output1_  BLOB;
BEGIN
   --Insert your test code here
   Call_Rest_EndPoint1('RestService1', NULL, NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_SENDER', 'TEST_RECEIVER', NULL, NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201', NULL, output1_);
   --Insert your assertions here
   ASSERT utl_raw.cast_to_varchar2(output1_) = 'Tested Ok' MESSAGE 'Expected Tested Ok but  was '||utl_raw.cast_to_varchar2(output1_);
END UNITTEST;

UNITTEST "Call_Rest_EndPoint3 should return binary response when sending CLOB in the request body with type document" FOR
   PROCEDURE Call_Rest_EndPoint3 (
      rest_service_        IN     VARCHAR2,
      xml_                 IN     CLOB,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      message_type_        IN     VARCHAR2 DEFAULT 'CONNECT',
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL,
      binary_response_        OUT BLOB);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN     Document,
      msg_payload_rec_     IN     type_record_,
      xml_                 IN     CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE,
      binary_response_        OUT BLOB)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      binary_response_ := TO_BLOB(utl_raw.cast_to_raw ('Tested Ok'));

   END Call_Rest_EndPoint_Sync___;
IS
   --Insert your test variables here
   output1_  BLOB;
BEGIN
   --Insert your test code here
   Call_Rest_EndPoint3('RestService1', NULL, NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_SENDER', 'TEST_RECEIVER', NULL, NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201', NULL, output1_);
   --Insert your assertions here
   ASSERT utl_raw.cast_to_varchar2(output1_) = 'Tested Ok' MESSAGE 'Expected Tested Ok but  was '||utl_raw.cast_to_varchar2(output1_);
END UNITTEST;

UNITTEST "Call_Rest_EndPoint_Json_Sync should return binary response when sending json in request body" FOR
   PROCEDURE Call_Rest_EndPoint_Json_Sync (
      rest_service_        IN     VARCHAR2,
      json_                IN     CLOB,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      message_type_        IN     VARCHAR2 DEFAULT 'EVENT',
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL,
      binary_response_        OUT BLOB);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN     Document,
      msg_payload_rec_     IN     type_record_,
      xml_                 IN     CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE,
      binary_response_        OUT BLOB)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      binary_response_ := TO_BLOB(utl_raw.cast_to_raw ('Tested Ok'));

   END Call_Rest_EndPoint_Sync___;

IS
   --Insert your test variables here
   output1_  BLOB;
BEGIN
   --Insert your test code here
   Call_Rest_EndPoint_Json_Sync('RestService1', NULL, NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_SENDER', 'TEST_RECEIVER', NULL, NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201', NULL, output1_);
   --Insert your assertions here
   ASSERT utl_raw.cast_to_varchar2(output1_) = 'Tested Ok' MESSAGE 'Expected Tested Ok but  was '||utl_raw.cast_to_varchar2(output1_);
END UNITTEST;

UNITTEST "Call_Rest_EP_Empty_Body_Sync should return binary response when there is empty body in the request with type record" FOR
   PROCEDURE Call_Rest_EP_Empty_Body_Sync (
      response_               OUT BLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     type_record_ DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     type_record_ DEFAULT NULL,
      header_params_       IN     type_record_ DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     type_record_ DEFAULT NULL);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @MockPackage Plsqlap_Record_API
   PROCEDURE To_Xml (
      xml_       OUT CLOB,
      record_ IN     TYPE_RECORD_,
      rest_   IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      NULL;
   END To_Xml;

   @MockPackage Plsqlap_Record_API
   FUNCTION To_Xml (
      record_ IN     TYPE_RECORD_ )  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END To_Xml;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN     Document,
      msg_payload_rec_     IN     type_record_,
      xml_                 IN     CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE,
      binary_response_        OUT BLOB)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___('TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada' , blob_info_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      binary_response_ := TO_BLOB(utl_raw.cast_to_raw ('Tested Ok'));

   END Call_Rest_EndPoint_Sync___;

IS
   --Insert your test variables here
   output1_  BLOB;
BEGIN
   --Insert your test code here
   Call_Rest_EP_Empty_Body_Sync(output1_, 'RestService1', NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada', 'TEST_SENDER', 'TEST_RECEIVER', NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201', NULL);
   --Insert your assertions here
   ASSERT utl_raw.cast_to_varchar2(output1_) = 'Tested Ok' MESSAGE 'Expected Tested Ok but  was '||utl_raw.cast_to_varchar2(output1_);
END UNITTEST;


UNITTEST "Call_Rest_EP_Empty_Body_Sync2 should return binary response when there is empty body in the request body with type document" FOR
   PROCEDURE Call_Rest_EP_Empty_Body_Sync2 (
      response_               OUT BLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     Document DEFAULT NULL,
      callback_func_       IN     VARCHAR2 DEFAULT NULL,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2 DEFAULT NULL,
      query_parameters_    IN     Document DEFAULT NULL,
      header_params_       IN     Document DEFAULT NULL,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2 DEFAULT NULL,
      key_ref_             IN     VARCHAR2 DEFAULT NULL,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      sender_              IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2 DEFAULT default_recevier_,
      subject_             IN     VARCHAR2 DEFAULT NULL,
      in_order_            IN     BOOLEAN  DEFAULT FALSE,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     Document DEFAULT NULL);
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Plsqlap_Document_API
   FUNCTION New_Document (
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )  RETURN  DOCUMENT
   IS
   BEGIN
      RETURN NULL;
   END New_Document;

   @MockPackage Plsqlap_Document_API
   PROCEDURE New_Document (
      main_         OUT DOCUMENT,
      name_      IN     VARCHAR2,
      array_     IN     BOOLEAN DEFAULT FALSE,
      namespace_ IN     VARCHAR2 DEFAULT NULL )
   IS
   BEGIN
      NULL;
   END New_Document;

   @MockPackage Plsqlap_Record_API
   FUNCTION New_Record (
      name_   IN     IFSAPP.PLSQLAP_Record_API.type_name_,
      status_ IN     IFSAPP.PLSQLAP_Record_API.TYPE_STATUS_ DEFAULT IFSAPP.PLSQLAP_Record_API.NEW_RECORD_ )
      RETURN  IFSAPP.PLSQLAP_Record_API.TYPE_RECORD_
   IS
   BEGIN
      RETURN NULL;
   END New_Record;

   @Mock
   PROCEDURE Call_Rest_EndPoint_Sync___(
      msg_payload_doc_     IN     Document,
      msg_payload_rec_     IN     type_record_,
      xml_                 IN     CLOB,
      rest_service_        IN     VARCHAR2,
      url_params_          IN     CLOB,
      callback_func_       IN     VARCHAR2,
      http_method_         IN     VARCHAR2,
      http_req_headers_    IN     VARCHAR2,
      query_parameters_    IN     CLOB,
      header_params_       IN     CLOB,
      incld_resp_info_     IN     BOOLEAN DEFAULT NULL,
      fnd_user_            IN     VARCHAR2,
      key_ref_             IN     VARCHAR2,
      sender_              IN     VARCHAR2,
      blob_info_           IN     VARCHAR2 DEFAULT NULL,
      receiver_            IN     VARCHAR2,
      fail_notify_         IN     BOOLEAN  DEFAULT FALSE,
      failed_callback_fun_ IN     VARCHAR2 DEFAULT NULL,
      accepted_res_codes_  IN     VARCHAR2 DEFAULT NULL,
      auth_params_         IN     VARCHAR2 DEFAULT NULL,
      is_json_             IN     BOOLEAN  DEFAULT FALSE,
      binary_response_        OUT BLOB)
   IS
   BEGIN
      Assert_Equals___('RestService1' , rest_service_);
      Assert_Equals___('callbackFunc' , callback_func_);
      Assert_Equals___('POST'          , http_method_);
      Assert_Equals___('sampleHeader' , http_req_headers_);
      Assert_Equals___(TRUE           , incld_resp_info_);
      Assert_Equals___('TESTUSER'     , fnd_user_);
      Assert_Equals___('keyRef'       , key_ref_);
      Assert_Equals___('TEST_SENDER'   , sender_);
      Assert_Equals___('TEST_RECEIVER' , receiver_);
      Assert_Equals___('TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada' , blob_info_);
      Assert_Equals___(TRUE           , fail_notify_);
      Assert_Equals___('200,201'      , accepted_res_codes_);
      Assert_Equals___('failedCallbackFunc' , failed_callback_fun_);

      binary_response_ := TO_BLOB(utl_raw.cast_to_raw ('Tested Ok'));

   END Call_Rest_EndPoint_Sync___;
IS
   --Insert your test variables here
   output1_  BLOB;
BEGIN
   --Insert your test code here
   Call_Rest_EP_Empty_Body_Sync2(output1_, 'RestService1', NULL, 'callbackFunc', 'POST', 'sampleHeader', NULL, NULL, TRUE, 'TESTUSER', 'keyRef', 'TEST_STORAGE_TAB, BOLB_COLUMN, ROWKEY, dasdasdsadsadsadsadsada', 'TEST_SENDER', 'TEST_RECEIVER', NULL, TRUE, TRUE, 'failedCallbackFunc', '200,201', NULL);
   --Insert your assertions here
   ASSERT utl_raw.cast_to_varchar2(output1_) = 'Tested Ok' MESSAGE 'Expected Tested Ok but  was '||utl_raw.cast_to_varchar2(output1_);
END UNITTEST;













