client ScheduledDatabaseTaskChainsHandling;
component FNDBAS;
layer Core;
include fragment ScheduledTasksAndChains;

-------------------------------- MAIN PAGES ---------------------------------
navigator {
   @DynamicComponentDependency FNDADM
   entry NewDatabaseTaskChainScheduleAssistantEntrySM parent FndadmNavigator.ScheduledTasksFolderSM at index 260 {
      label = "New Database Task Chain Schedule";
      assistant NewDatabaseTaskChainScheduleAssistant;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskChainScheduleDetailSM parent FndadmNavigator.ScheduledTasksFolderSM at index 270 {
      label = "Database Task Chain Schedule";
      page DatabaseTaskChainScheduleDetail;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskChainSchedulesOverviewSM parent FndadmNavigator.ScheduledTasksFolderSM at index 280 {
      label = "Database Task Chain Schedules";
      page DatabaseTaskChainSchedulesOverview;
   }
   @DynamicComponentDependency FNDADM
   entry NewDatabaseTaskChainScheduleAssistantEntryMA parent FndadmNavigator.ScheduledTasksFolderMA at index 260 {
      label = "New Database Task Chain Schedule";
      assistant NewDatabaseTaskChainScheduleAssistant;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskChainScheduleDetailMA parent FndadmNavigator.ScheduledTasksFolderMA at index 270 {
      label = "Database Task Chain Schedule";
      page DatabaseTaskChainScheduleDetail;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskChainSchedulesOverviewMA parent FndadmNavigator.ScheduledTasksFolderMA at index 280 {
      label = "Database Task Chain Schedules";
      page DatabaseTaskChainSchedulesOverview;
   }
}

page DatabaseTaskChainSchedulesOverview using ScheduleDatabaseTaskChains {
   label = "Database Task Chain Schedules";
   list ScheduledDatabaseTaskChainList;
   command New;
}

page DatabaseTaskChainScheduleDetail using ScheduleDatabaseTaskChains {
   label = "Database Task Chain Schedule";
   crudactions {
      new {
         enabled = [false];
      }
   }
   editmode = MultiField;
   selector ScheduledDatabaseTaskChainSelector;
   group ScheduledDatabaseTaskChainsMainGroup bind ScheduledDatabaseTaskChainSelector;
   arrange {
      group SchedulingParametersGroup;
      group SchedulingStartAndStopDateGroup;
   }
   arrange {
      group ScheduledDatabaseTaskChainsStreamsGroup bind ScheduledDatabaseTaskChainSelector;
      group ScheduledTasksAdvancedOpGroup;
   }
   arrange {
      list ChainStepList(ChainStepsArray) bind ScheduledDatabaseTaskChainSelector;
      list BatchScheduleChainParamList(ParametersArray) bind ChainStepList;
   }
   command Run {
      enabled = [Active = true];
   }
   command New;
}

---------------------------------- DIALOGS ----------------------------------

--------------------------------- COMMANDS ----------------------------------
command New {
   label = "New";
   execute {
      navigate "assistant/ScheduledDatabaseTaskChainsHandling/NewDatabaseTaskChainScheduleAssistant";
   }
}

command ViewSchedule for ScheduledDatabaseTask {
   label = "View Schedule";
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate DatabaseTaskChainScheduleDetail(ScheduleId);
   }
}

command Run for ScheduledDatabaseTask {
   label = "Run";
   enabled = [Active = true];

   execute {
      confirm("Schedule ${ScheduleId} - ${ScheduleName} will be run now as background job. Do you want to continue?") {
         when OK {
            call RunSchedule();
            success("The background job for ${ScheduleName} has been posted");
         }
      }
   }
}
----------------------------- VISUAL COMPONENTS -----------------------------
@Override
selector ScheduledDatabaseTaskChainSelector for ScheduledDatabaseTask {
   label = "Schedule - ${ScheduleName}";

   field ScheduleName;
   field ScheduleId {
      label = "Schedule ID";
   }
   field Active;
   field NextExecutionDate {
      label = "Next Execution";
      visible = [Active = true];
   }
}

selector DatabaseTasksChainSelector for BatchScheduleChain {
   field Description
      {
      label = "Task Chain";
   }
   field ScheduleMethodId
      {
      label = "ID";
   }
}

selector BatchQueueNameSelector for BatchQueue {
   label = "Queue ID";
   field Description {
      label = "Name";
   }
   field QueueId {
      label = "ID";
   }
}

group ScheduledDatabaseTaskChainsMainGroup for ScheduledDatabaseTask {
   label = "General";
   field ScheduleName {
      label = "Name";
   }
   lov ScheduleChainIdRef with DatabaseTasksChainSelector {
      label = "Database Task Chain";
      hidekey = [true];
      editable = [ETAG = null];
      description = ScheduleChainIdRef.Description;
   }
   lov BatchQueueRef with BatchQueueNameSelector {
      label = "Batch Queue";
      hidekey = [true];
      description = BatchQueueRef.Description;
   }
   field Active;
   field Username {
      contactwidget {
         enabled = [true];
         source = User;
      }
   }
   field NextExecutionDate {
      label = "Next Execution";
      editable = [false];
   }
   field Executions {
      label = "Number of Times Executed";
   }
}
list DatabaseTaskChainsList for BatchScheduleChain {
   preselect = [false];
   crudactions {
      new {
         enabled = [false];
      }
   }
   field ScheduleMethodId {
      label = "ID";
      size = Small;
   }
   field Description {
      label = "Name";
      size = Large;
   }
   field Module
      {
      label = "Component";
   }
   field CheckExecuting {
      label = "Check Executing";
      columnvisible = [False];
   }
}

group ScheduledDatabaseTaskChainsMainAssistGroup for NewScheduledTaskChainVirtual {
   label = "General";
   field ScheduleName;
   lov ScheduleChainIdRef with DatabaseTasksChainSelector {
      label = "Database Task Chain";
      hidekey = [true];
      description = ScheduleChainIdRef.Description;
      required = [true];
      advancedview DatabaseTaskChainsList;

   }
   lov BatchQueueRef with BatchQueueNameSelector {
      label = "Batch Queue";
      hidekey = [true];
      description = BatchQueueRef.Description;
   }
}

group ScheduledTasksAssistantAdvOpGroup for NewScheduledTaskChainVirtual {
   label = "Options";
   field Active;
   field CheckExecuting {
      label = "Check Executing";
   }
   lov LanguageCodeRef with LanguageSelector {
      label = "Language";
      hidekey = [true];
      description = LanguageCodeRef.Description;
   }
}

group ScheduledTasksStartAndStopDateGroup for NewScheduledTaskChainVirtual {
   label = "Time Interval";
   field StartDate {
      validate command {
         execute {
            if [StartDate < Today] {
               error("Start Date should be in the future");
            }
         }
      }
   }
   field StopDate {
      validate command {
         execute {
            if [StopDate != null and StopDate < StartDate] {
               error("Stop Date should be after the Start Date");
            }
         }
      }
   }
}

group ScheduledDatabaseTaskChainsStreamsGroup for ScheduledDatabaseTask {
   label = "Streams";
   field StreamMsgOnCompletion {
      label = "Send Stream Notification";
      required = [true];
   }
   field StreamNotes {
      label = "Message";
      visible = [StreamMsgOnCompletion = true];
      multiline = true;
   }
}

list ChainStepList for QueryChainSteps {
   preselect = [false];
   label = "Steps";
   multiselect = [false];

   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field StepNo {
      label = "Step Number";
   }
   field ChainScheduleMethodIdRef.Description {
      label = "Database Task";
      size = Large;
   }
}

list ChainStepAssitList for NewScheduledTaskChainStepVirtual {
   label = "Steps";
   preselect = [false];
   multiselect = [false];

   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field StepNo {
      label = "Step Number";
   }
   field Description {
      label = "Database Task";
      size = Large;
   }
}

list BatchScheduleChainParamList for BatchScheduleChainPar {
   label = "Parameters";
   preselect = [false];
  // editmode = SingleCellEdit;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field Name
      {
      editable = [false];
      size = Large;
   }
   field Value {
      required = [Mandatory = true];
   }
   field Mandatory {
      label = "Required";
      editable = [false];
   }
}

list BatchScheduleChainAssitParamList for NewScheduledTaskChainMethodParVirtual {
   label = "Parameters";
   preselect = [false];
   editmode = SingleCellEdit;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field Name
      {
      editable = [false];
      size = Large;
   }
   field UserValue {
      required = [Mandatory = true];
   }
   field Mandatory {
      label = "Required";
      editable = [false];
   }
}

list ScheduledDatabaseTaskChainList  for ScheduledDatabaseTask {
   label = "Database Task Chain Schedules";
   preselect = [false];
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   field ScheduleId;
   field ScheduleName {
      size = Large;
   }
   field BatchQueueRef.Description {
      label = "Batch Queue";
   }
   field Active {
      size = Small;
   }
   field NextExecutionDate {
      label = "Next Execution";
   }
   field StartDate;
   field StopDate;
   field Executions {
      size = Small;
   }
   field ExecutionPlan;
   field Username {
      contactwidget {
         enabled = [true];
         source = User;
      }
   }
   field LanguageCodeRef.Description {
      label = "Language";
   }
   field ModifiedDate;
   fieldranking ScheduleName, Active, BatchQueueRef.Description, NextExecutionDate, StartDate, StopDate, Executions, ExecutionPlan, Username, LangCode, ModifiedDate;
   command ViewSchedule;
   command Run;
}

assistant NewDatabaseTaskChainScheduleAssistant using NewScheduledTaskChainVirtuals {
   label = "New Database Task Chain Schedule";
   setup Init {
      variable ScheduleMethodIdParam {
         type = Number;
      }
      execute {
         set ScheduleMethodId = ScheduleMethodIdParam;
      }
   }
   steps {
      step {
         label = "Set Name, Database Task Chain and Batch Queue";
         group ScheduledDatabaseTaskChainsMainAssistGroup;
         next command {
            enabled = [ScheduleMethodId != null and ScheduleName != null];
            execute {
               call AddParamToSchedule(ScheduleMethodId);
            }
         }
      }
      step {
         label = "Set Parameters";
         list ChainStepAssitList(ChainStepsAssistArray);
         list BatchScheduleChainAssitParamList(Parameters) bind ChainStepAssitList;
         next command {
            enabled = [EnableParamNext = "TRUE"];
         }
      }
      step {
         label = "Set Schedule";
         group SchedulingParametersGroup;
         group ScheduledTasksStartAndStopDateGroup;
         next command {
            enabled = [StartDate >= Today and(StopDate = null or StopDate >= StartDate)];
         }
      }
      step {
         label = "Set Options and Streams";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledDatabaseTaskChainsStreamsGroup;
      }
      final step {
         description = "Schedule was successfully created";
      }
      cancelled step {
         description = "New Database Task Chain Schedule was cancelled";
      }
   }
   finish command {
      variable NewScheduleId;
      enabled = [component.NewDatabaseTaskChainScheduleAssistant.ActiveStep > 2];
      execute {
         call CreateTaskChainSchedule() into NewScheduleId;
         navigate "page/ScheduledDatabaseTaskChainsHandling/DatabaseTaskChainScheduleDetail?$filter=ScheduleId eq ${NewScheduleId}";
         success("Schedule was successfully created");
      }
   }
}
