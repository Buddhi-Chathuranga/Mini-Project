fragment ScheduledTasksCommon;
component FNDBAS;
layer Core;
description "Common logic used by Scheduled Task Assistants";

----------------------------- CLIENT FRAGMENTS ------------------------------

---------------------------------- GROUPS -----------------------------------

group ExecuteOptionGroup for TaskVirtual {
   label = "Start Option";
   radiogroup TaskOption {
      label = "Start Option";
      showlabel = false;
   }
}

group SchedulingParametersGroup for TaskVirtual {
   label = "Schedule";

   field ScheduleName {
      label = "Name";
      size = FullWidth;
   }

   radiogroup ScheduleOption {
      label = "Options";

   }
   field ScheduleTime {
      label = "Time";
      visible = [ScheduleOption in("Daily", "Weekly", "Monthly")];
      required = [true];
   }
   field ScheduledDayNumber {
      label = "Day";
      visible = [ScheduleOption = "Monthly"];
      required = [true];
   }
   field ScheduledDays {
      label = "Select days";
      visible = [ScheduleOption = "Weekly"];
      required = [true];
   }
   field ScheduleDatetime {
      label = "Date And Time";
      visible = [ScheduleOption = "Date"];
      required = [true];
   }
   field ExecutionPlan {
      label = "Custom Expression";
      visible = [ScheduleOption = "Custom"];
      required = [true];
      validate command {
         variable Validation {
            type = Timestamp;
         }

         execute {
            call ValidateCustomExecutionPlan(ExecutionPlan) into Validation {
               when FAIL {
                  error("Entered Custom Expression is invalid, not resulting in a date");

               }
               when SUCCESS {
                  info("Estimated start ${Validation}");
               }
            }
         }
      }
   }
   field ScheduleInterval {
      label = "Every (HH:MM)";
      visible = [ScheduleOption = "Interval"];
      required = [true];
   }
}

group SchedulingStartAndStopDateGroup for TaskVirtual {
   label = "Date Interval";
   field StartDate {
      validate command {
         execute {
            if [StartDate < Today] {
               error("Start Date should be in the future");
            }
         }
      }
   }
   field StopDate {
      label = "End Date";
      validate command {
         execute {
            if [StopDate < StartDate] {
               error("End Date should be after the Start Date");
            }
         }
      }
   }
}

group ScheduledTasksAssistantAdvOpGroup for TaskVirtual {
   label = "Options";
   field Active {
      label = "Set as Active";
   }
   field CheckExecuting {
      label = "Check Executing";
   }
   lov AssistantLangCodeRef with LanguageSelector {
      label = "Language Code";
      description = AssistantLangCodeRef.Description;
      hidekey = [true];
   }
}

group ScheduledTasksAssistantStreamsGroup for TaskVirtual {
   label = "Streams";
   field StreamMsgOnCompletion {
      label = "Send Stream Notification";
      required = [true];
   }
   field StreamNotes {
      label = "Message";
      visible = [StreamMsgOnCompletion = true];
      multiline = true;
   }
}

--------------------------------- SELECTORS----------------------------------

selector LanguageSelector for LanguageCode {
   field LangCode;
   field Description;
}

----------------------------------- LISTS -----------------------------------

@Overtake Core
list LanguageCodeLovList for LanguageCode {
   label = "";
   static LangCode;
   static Description;
   static LangCodeRfc3066 {
      label = "Lang Code Rfc3066";
   }
   static Status;
   static NlsTerritory;
   static Installed {
      label = "Installed";
   }
   static EnabledForLogin;
}

--------------------------------- COMMANDS ----------------------------------

command NavigateToScheduledTask {
   label = "Go to Scheduled Task";
   execute {
      navigate "page/ScheduledDatabaseTasksHandling/DatabaseTaskScheduleDetails?$filter=ScheduleId eq ${ScheduleId}";
   }
}

command NavigateToBackgroundJobs {
   label = "Go to Background Jobs";
   execute {
      navigate "page/BackgroundJobsHandling/BackgroundJobsOverview?$filter=Description eq '${ScheduleName}'";
   }
}

command NavigateBack {
   label = "Go Back";
   execute {
      navigate back;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset TaskVirtuals for TaskVirtual;
entityset BatchSchedules for BatchSchedule;

------------------------------- ENUMERATIONS --------------------------------

enumeration TaskOptions {
   value = "Now" {
      label = "Start now";
   }
   value = "Schedule" {
      label = "Schedule";
   }
}

enumeration TaskOptionsExtended {
   value = "Now" {
      label = "Start now";
   }
   value = "Background" {
      label = "Run in background";
   }
   value = "Schedule" {
      label = "Schedule";
   }
}

enumeration TaskOptionsAsync {
   value = "Background" {
      label = "Run in background";
   }
   value = "Schedule" {
      label = "Schedule";
   }
}

--------------------------------- FUNCTIONS ---------------------------------

function GetParameters Structure(ParametersStructure);

function ValidateCustomExecutionPlan Timestamp {
   parameter ExecutionPlan Text;
}

-------------------------------- STRUCTURES----------------------------------

structure ScheduledTaskStructure {
   attribute ScheduleId Number;
   attribute ScheduledDate Date;
   attribute ScheduledTime Time;
}

structure ParametersStructure {
   attribute ScheduleMethodId Number;
   attribute Description Text;
}

--------------------------------- VIRTUALS ----------------------------------

virtual TaskVirtual using BatchSchedule {
   attribute NextExecutionDate Timestamp;
   attribute StartDate Date;
   attribute StopDate Date;
   attribute Today Date {
      editable = [false];
      fetch = "TRUNC(sysdate)";
   }
   attribute ModifiedDate Timestamp;

   attribute TaskOption Enumeration(TaskOptions) {
      default = "'Now'";
      required = [true];
   }

   attribute ScheduleTime Time;

   attribute ScheduledDayNumber Integer;
   attribute ScheduledDays Enumeration(DaysOfWeek)
      {
      multiselect = [true];
   }

   attribute ScheduleDatetime Timestamp;
   attribute ScheduleInterval Text;
   attribute ScheduleOption Enumeration(ScheduleOption);

   attribute Result Text;

   reference AssistantLangCodeRef(LangCode) to LanguageCode(LangCode);

   action ExecuteTask;
   action ScheduleTask Structure(ScheduledTaskStructure);

   action CleanupTaskVirtual;
}
