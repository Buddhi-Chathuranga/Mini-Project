projection AppearanceConfiguration;
component FNDBAS;
layer Core;
description "Appearance Configuration";
category Users, ExternalB2B;
include fragment AppearanceConfigAcpHandling;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset Brandings for FndBranding;

entityset Resources for FndBrandingResource;

entityset ImageResources for FndBrandingResource {
   where = "type_db = 'IMAGE'";
}

entityset FontResources for FndBrandingResource {
   where = "type_db = 'FONT'";
}

entityset MapResourceVirtualSet for MapResourceVirtual;
entityset UploadResourceVirtualSet for UploadResourceVirtual;

------------------------------ ENTITY DETAILS -------------------------------


@Override
entity FndBrandingPropertyDefault using FndBrandingProperty {

   where = "theme_db = 'default'";

   attribute Value Text {
      required = [false];
   }
   reference PropertyRef(Property) to FndBrandingToken(Property);
   reference BrandingRef(Code) to FndBranding(Code);
}

@Override
entity FndBrandingPropertyDark using FndBrandingProperty {

   where = "theme_db = 'working-late'";

   attribute Value Text {
      required = [false];
   }
   reference PropertyRef(Property) to FndBrandingToken(Property);
   reference BrandingRef(Code) to FndBranding(Code);
}

@Override
entity FndBranding {

   where = "code > 0";

   attribute DuplicateCheck Text {
      fetch = "'None'";
   }
   attribute Acp Text {
      fetch = "App_Config_Package_API.Get_Item_Package_Name(Fnd_Branding_API.Get_Objkey(code))";
   }

   array PropertiesDefault(Code) to FndBrandingPropertyDefault(Code);
   array PropertiesDark(Code) to FndBrandingPropertyDark(Code);
}

@Override
entity FndBrandingResource {
   attribute FileName Text;
   attribute DateModified Timestamp;

   attribute ImageMimeType Text {
      fetch = "'image/jpeg'";
   }

   attribute FileData Stream {
      fileinfo {
         filename FileName;
         mimetype ImageMimeType;
      }
   }
}

------------------------------- ENUMERATIONS --------------------------------

enumeration ResourceTypeEnum {
   value = "Resource" {
      identifier = "Resource";
      label = "Resource";
   }
   value = "Custom" {
      identifier = "Custom";
      label = "Custom URL";
   }
}

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action CopyDefaultProperties {
   initialcheck implementation;
   ludependencies = FndBrandingProperty;
   parameter Code Text;
}

action CopyDefaultProperty {
   initialcheck implementation;
   ludependencies = FndBrandingProperty;
   parameter Code Text;
   parameter Property Text;
}

action Unpublish {
   initialcheck none;
   ludependencies = FndBranding;
   parameter Code Text;
}

action Publish {
   initialcheck none;
   ludependencies = FndBranding;
   parameter Code Text;
}

action SetResource {
   initialcheck none;
   ludependencies = FndBranding, FndBrandingProperty;
   parameter Code Text;
   parameter Property Text;
   parameter Theme Text;
   parameter FileName Text;
   parameter DateModified Text;
}

action SetUrl {
   initialcheck none;
   ludependencies = FndBranding, FndBrandingProperty;
   parameter Code Text;
   parameter Property Text;
   parameter Theme Text;
   parameter CustomUrl Text;
}

action InsertTestData {
   initialcheck none;
}

action RemoveTestData {
   initialcheck none;
}
--------------------------------- FUNCTIONS ---------------------------------

function GetProperties List<Entity(FndBrandingProperty)> {
   initialcheck none;
   parameter Code Number;
   basedon Properties;
   where = "Code = :Code";
}

function CheckResourceMapped Boolean {
   initialcheck none;
   parameter FileName Text;
}

function GetAllBrandingPropertyLists List<Structure(BrandingPropertyList)> {
}

function GetAllBrandingPropertyListsAlt List<Structure(BrandingPropertyList)> {
}

function GetAllBrandings List<Structure(BrandingList)> {
}

function GetTokens List<Entity(FndBrandingToken)> {
   initialcheck none;
   ludependencies = FndBranding, FndBrandingProperty;
   parameter Code Text;
   parameter Theme Enumeration(FndBrandingThemeType);
}

function FilesWithSameNameExists Boolean {
   parameter FileNames Text;
}

function FilesWithSameNameExistsDb Text {
   parameter FileNames Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure BrandingPropertyList {
   attribute Code Text;
   attribute Property Text;
   attribute Theme Text;
   attribute Value Text;
   attribute Type Text;
   attribute CssProperty Text;
   attribute CssOverride Text;
   attribute DateModified Text;
}

structure BrandingList {
   attribute Code Text;
   attribute Name Text;
   attribute Context Text;
   attribute State Text;
}

structure ResourceFileVirtualKeyStruct {
   attribute Objkey Text;
}

--------------------------------- VIRTUALS ----------------------------------

virtual MapResourceVirtual {
   attribute ResourceType Enumeration(ResourceTypeEnum) {
      default = "'RESOURCE'";
      required = [true];
   }

   // Need to check if the translations for Theme work fine without this. So keeping this here for time being
   // attribute ThemeDesc Enumeration(FndBrandingThemeType);

   attribute CustomUrl Text;
   attribute FileName Text;
   attribute DateModified Text;
}

virtual ResourceFileVirtual {
   attribute FileType Text;
   attribute FileName Text;
   attribute FileData Stream {
      fileinfo {
         filename FileName;
      }
   }
   attribute UploadCount Number;
}

virtual UploadResourceVirtual {
   array ResourceFiles() to ResourceFileVirtual();

   action CreateFileRecord Structure(ResourceFileVirtualKeyStruct);

   action ClearResourceFileVirtual {
      initialcheck none;
      ludependencies = ResourceFileVirtual, UploadResourceVirtual;
   }
   action SetFileInfo {
      parameter FileNames Text;
      ludependencies = ResourceFileVirtual, FndBrandingResource;
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
