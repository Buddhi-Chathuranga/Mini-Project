<?xml version="1.0" encoding="UTF-8"?>
<TEST xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:ifsworld-com:schemas:test_test">
   <NAME>Validate</NAME>
   <COMPONENT>FNDBAS</COMPONENT>
   <SET_UPS>
      <COMMAND>
         <PLSQL_BLOCK>BEGIN
   NULL;
END;</PLSQL_BLOCK>
      </COMMAND>
   </SET_UPS>
   <TEST_CASES>
      <TEST_CASE>
         <NAME>StringBothNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ VARCHAR2(50):= NULL;
   new_value_ VARCHAR2(50):= NULL;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 0</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>StringBothSame</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ VARCHAR2(50):= &apos;Test&apos;;
   new_value_ VARCHAR2(50):= &apos;Test&apos;;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 0</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>StringDiff</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ VARCHAR2(50):= &apos;Test&apos;;
   new_value_ VARCHAR2(50):= &apos;Test2&apos;;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>StringOldNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ VARCHAR2(50):= NULL;
   new_value_ VARCHAR2(50):= &apos;TEST&apos;;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>StringNewNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ VARCHAR2(50):= &apos;TEST&apos;;
   new_value_ VARCHAR2(50):= NULL;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>DateBothNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ DATE := NULL;
   new_value_ DATE := NULL;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 0</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>DateBothSame</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ DATE := SYSDATE;
   new_value_ DATE := SYSDATE;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 0</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>DateDiff</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ DATE := SYSDATE;
   new_value_ DATE := SYSDATE+1;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>DateOldNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ DATE := NULL;
   new_value_ DATE := SYSDATE;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>DateNewNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ DATE := SYSDATE;
   new_value_ DATE := NULL;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>NumberBothNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ NUMBER := NULL;
   new_value_ NUMBER := NULL;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 0</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>NumberBothSame</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ NUMBER := 1;
   new_value_ NUMBER := 1;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 0</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>NumberDiff</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ NUMBER := 1;
   new_value_ NUMBER := 2;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>NumberOldNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ NUMBER := NULL;
   new_value_ NUMBER := 1;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>NumberNewNull</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ NUMBER := 1;
   new_value_ NUMBER := NULL;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>Chr1First</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ VARCHAR2(50):= chr(1);
   new_value_ VARCHAR2(50):= &apos;&apos;;
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
      <TEST_CASE>
         <NAME>Chr1Last</NAME>
         <PLSQL_BLOCK>DECLARE
   old_value_ VARCHAR2(50):= &apos;&apos;;
   new_value_ VARCHAR2(50):= chr(1);
   result_ BOOLEAN;
BEGIN
   -- This should return TRUE, since the value is considered to be changed
   result_ := VALIDATE_SYS.Is_Changed(old_value_,new_value_);
   -- Convert false/true/null to 0/1/null
   Dbms_Output.Put_Line(&apos;Return value: &apos; || sys.diutil.bool_to_int(result_));
END;</PLSQL_BLOCK>
         <TEST_RUNS>
            <TEST_RUN>
               <TEST_RUN_TYPE>RUN</TEST_RUN_TYPE>
               <EXPECTED_RESULTS>
                  <EXPECTED_RESULT>
                     <TEXT>Return value: 1</TEXT>
                  </EXPECTED_RESULT>
               </EXPECTED_RESULTS>
            </TEST_RUN>
         </TEST_RUNS>
      </TEST_CASE>
   </TEST_CASES>
</TEST>
