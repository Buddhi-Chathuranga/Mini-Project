client ReportArchive;
component FNDBAS;
layer Core;

--------------------------------- NAVIGATOR ---------------------------------
navigator {
   entry ReportArchive parent SqlQuickReports.ReportingTopNode at index 3 {
      label = "Report Archive";
      page ReportArchive;
   }
   entry PrintManager parent SqlQuickReports.ReportingTopNode at index 3 {
      label = "Print Manager";
      page PrintManager;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page ReportArchive using ArchiveSet {

   label = "Report Archive";
   list  ReportArchiveList;

}

page PrintManager using PrintJobSet {
   label = "Print Manager";
   list PrintJobList;

}

page ReportArchiveDocuments using PdfArchiveSet {

   label = "Report Archive Documents";
   list ReportArchiveDocumentList;

}


--------------------------------- COMMANDS ----------------------------------

command ShowDocuments {
   label = "Show Document(s)";
   visible = [ReportMode != "EXCEL1.0"];
   variable Id;
   execute {
      call MultipleDocuments(ResultKey) into Id;
      if[Id = "TRUE"] {
         navigate "page/ReportArchive/ReportArchiveDocuments?$filter=ResultKey eq ${ResultKey}";
      }
      else {
         if[Id = "FALSE"] {
            alert("PDF not found");
         }
         else {

            download "ArchiveDocumentSet(ResultKey=$[ResultKey],Id='${Id}')/Pdf";
         }

      }
   }
}

command ShowBusinessReport {
   label = "Show BR Report";

   visible = [ReportMode = "EXCEL1.0"];

   execute {
      download "BusinessReporterOrderReport.svc/ExcelReportArchiveSet(ReportId='${ReportId}',ResultKey=$[ResultKey])/ReportFile";
   }

}


command BulkFormatOutput {

   label = "Print";
   visible = [ReportMode != "EXCEL1.0"];
   mode = SelectedRecords;

   bulkexecute {
      printdialog ResultKey;

   }
}

command ShowSingleDocument {

   label = "Show Document";

   execute {
      download "ArchiveDocumentSet(ResultKey=$[ResultKey],Id=$[Id])/Pdf";
   }
}

command Print {

   label = "Print";
   mode = SelectedRecords;
   variable ResultKey;

   execute {
      call GetResultKey(PrintJobId) into ResultKey;
      printdialog ResultKey;
   }
}

command GetXml for PrintJob {
   label = "Save XML Data";
   mode = SingleRecord;

   variable Objkey Text;

   execute {
      call GetFullXml(PrintJobId) into Objkey {
         when SUCCESS {
            download FileData from XmlVirtualset(Objkey);
         }


      }


   }
}

command Restart for PrintJob {
   label = "Restart";
   mode = SingleRecord;
   visible = [Status != "Complete"];


   execute {
      call Restart(PrintJobId);
      exit OK;

   }

}

command ChangeExpireDateCommand for Archive {
   label = "Change Expire Date";
   mode = SingleRecord;
   variable NewExpDate {
      type = Date;
   }
   execute {
      dialog ChangeExpDateDialog(ExpireDate) into(NewExpDate);
      if[NewExpDate != null] {
         call ChangeExpDate(NewExpDate);
      }
   }
}

command ForwardCommand for Archive {
   label = "Forward";
   mode = SingleRecord;
   execute {
      assistant ForwardAssistant(ResultKey) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }

   }
}

----------------------------- VISUAL COMPONENTS -----------------------------
list ReportArchiveList for Archive {
   label = "Archive";
   orderby = ResultKey desc;
   preselect = [false];
   multiselect = [true];


   static ResultKey;
   static ReportTitle;
   static Printed;
   static ExecTime;
   static ExpireDate;
   static Sender;
   static Notes;
   static ScheduleName;
   static ScheduleExecutions;
   static Owner;

   command ShowDocuments;
   command ChangeExpireDateCommand;
   command ShowBusinessReport;
   command BulkFormatOutput;
   command ForwardCommand;
}
list ReportArchiveDocumentList for PdfArchive {
   label = "Report Archive Document List";
   orderby = ResultKey desc;
   preselect = [false];
   static ResultKey;
   static ReportTitle;
   static LangCode;
   static PrintJobId;
   static PdfSize;
   static FileName;
   static Notes;
   static Id;
   command ShowSingleDocument;
}
list PrintJobList for PrintJob {
   orderby = PrintJobId desc;
   field PrintJobId;
   field Status;
   field ReportTitle;
   field PrinterId;
   field UserName;
   field CreatedTime;
   field ExpireDate;
   field ScheduleName;
   field ScheduleId;
   field ScheduleExecutions;
   field Message;

   command Print;
   command GetXml;
   command Restart;
}

list UserGroupList for UserGroupVirtual {
   multiselect = [true];
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field Identity;
   field Description;
}

list SelectedUserGroupList for UserGroupVirtual {
   defaultfilter = [IsSelected = true];
   multiselect = [false];
   preselect = [false];
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field Identity;
   field Description;
}

list DistributionGroupList for DistributionGroupVirtual {
   multiselect = [true];
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field GroupName;
   field Description;
}

list SelectedDistributionGroupList for DistributionGroupVirtual {
   defaultfilter = [IsSelected = true];
   multiselect = [false];
   preselect = [false];
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field GroupName;
   field Description;
}

group ChangeExpDate for ChangeExpDateStructure {
   field ExpireDate;
}


dialog ChangeExpDateDialog for ChangeExpDateStructure {
   label = "Change Expire Date";
   input(ExpireDate);
   output(ExpireDate);

   group ChangeExpDate;
   command Ok;
   command Cancel;
}

--------------------------------- ASSISTANT ---------------------------------

assistant ForwardAssistant using ForwardAssistantVirtuals {
   label = "Forward";
   savemode = OnLostFocus;
   input(ResultKey);
   output(ResultKey);
   init command {
      execute {
         set Action = "INIT";
      }
   }
   steps {
      step {
         label = "Select User Groups and Distribution Groups";
         description = "Select the User Groups and Description Groups";
         list UserGroupList(UserGroupArray);
         list DistributionGroupList(DistributionGroupArray);
         enter command {
            execute {
               set Action = "INIT";
            }
         }
         next command {
            enabled = [component.UserGroupList.SelectionCount > 0 or component.DistributionGroupList.SelectionCount > 0];
            execute {
               call UpdateSelectedUserGroupList(component.UserGroupList.Selection);
               call UpdateSelectedDistributionGroupList(component.DistributionGroupList.Selection);

            }
         }
      }
      step {
         label = "Select Forward Option";
         list SelectedUserGroupList(UserGroupArray);
         list SelectedDistributionGroupList(DistributionGroupArray);
         enter command {
            execute {
               set Action = "DONE";
            }
         }
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      label = "Forward";
      enabled = [Action = "DONE" and(component.UserGroupList.SelectionCount > 0 or component.DistributionGroupList.SelectionCount > 0)];
      execute {
         call ForwardArchive(ResultKey, component.UserGroupList.Selection, component.DistributionGroupList.Selection);
      }
   }
   cancel command {
      execute {
         info("Forward operation was cancelled by the user");
         exit CANCEL;
      }
   }
}
