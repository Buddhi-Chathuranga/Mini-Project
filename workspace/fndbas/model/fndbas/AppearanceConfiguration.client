client AppearanceConfiguration;
component FNDBAS;
layer Core;
description "Appearance Configuration";
include fragment AppearanceConfigAcpHandling;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

page AppearanceConfiguration using Brandings {

   label = "Appearance Configuration";
   selector BrandingSelector;

   markdowntext {
      text = "
Use hex value for colors:
-	Color: #ffffff

For Fonts and Images use **Select Resource**, or link to resources hosted on a secure server  using the following format:
-  Image or logo: `https://example.com/image.png` (Supported formats: png, jpg)
-	Font: `https://example.com/font.woff2` (Supported formats: woff, woff2, ttf, otf)

To preview, use the **Appearance Designer** in the user menu. To publish, go to the **Appearance Context Mapping** page.
";
   }

   group BrandGroup;

// Ignoring the appType for now..
// group BusinessGroup;

   tabs {
      tab {
         label = "Light";
         list PropertyDefaultList(PropertiesDefault);
      }
      tab {
         label = "Dark";
         list PropertyDarkList(PropertiesDark);
      }
   }

   command NavigateToConfigCommand;

   commandgroup PackageCommandgroup {
      commandgroup PackageCommandgrp {
         label = "Application Configuration Package";
         command AddToAcpCommand;
         command RemoveFromAcpCommand;
         command ViewAcpCommand;
         command ViewAllAcpsCommand;
      }
   }

   command NavigateToResourcesCommand;
   global ActivePotential Text = "test";

}

page Resources using Resources {
   label = "Appearance Configuration Resources";

   list ImageResourcesList using ImageResources;
   list FontResourcesList using FontResources;

   command NavigateBackCommand;
}

page AppearanceContextMapping using Brandings {
   label = "Appearance Context Mapping";

   markdowntext {
      text = "Custom contexts are mapped using the Context expression
- Attributes: [ COMPANY, USER, USERGROUP, WAGECLASS, LEDGER ]
- Operators: [ =, !=, AND, OR, ( ) ]
- Values are case sensitive. Values with spaces or special characters must be enclosed with quotation marks. Note: user identifier must be uppercase.
- Example: (COMPANY = 'Aaa Bbb' OR COMPANY = Cccc) AND USER != ALAIN

To preview, use the Appearance Designer in the user menu.

To publish: Only 1 published appearance can be set for each context. Unpublish any conflicts first
";
   }
   list BrandingList using Brandings;
}

--------------------------------- COMMANDS ----------------------------------

command CopyDefaultToDarkCommand for FndBrandingPropertyDefault {
   label = "Copy Light Properties";
   mode = Global;
   execute {
      call CopyDefaultProperties(Code);
   }
}

command CopySingleToDarkCommand for FndBrandingPropertyDark {
   label = "Copy ${Property} from Light";
   mode = SingleRecord;
   execute {
      call CopyDefaultProperty(Code, Property);
   }
}

command UnpublishCommand for FndBranding {
   label = "Unpublish";
   mode = SelectedRecords;
   enabled = [(State = "Published")];

   execute {
      call Unpublish(Code);
   }
}

command PublishCommand for FndBranding {
   label = "Publish";
   mode = SelectedRecords;
   enabled = [(State = "Unpublished")];

   execute {
      call Publish(Code);
   }
}

command NavigateToConfigCommand for FndBranding {
   label = "Context Mapping";
   mode = Global;

   execute {
      navigate {
         page AppearanceContextMapping;
      }
   }
}

command AddToAcpCommand for FndBranding {
   label = "Add to Package";
   mode = SingleRecord;
   enabled = [Acp = null];

   variable CallResult;
   variable AcpId;
   variable NewAcpName;
   variable NewAcpDesc;

   execute {
      dialog AddtoAcpDlg(AcpId, NewAcpName, NewAcpDesc) into(AcpId, NewAcpName, NewAcpDesc) {
         when OK {
            call AddToPackage(Code, "APPEARANCE_CONFIG", AcpId, NewAcpName, NewAcpDesc) into CallResult;
            info("${CallResult}");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command AddMultiToAcpCommand for FndBranding {
   label = "Add To Package";

   enabled = [count(Acp) = 1 and Acp = null];

   mode = SelectedRecords;

   variable CallResult;
   variable Codes;
   variable AcpId;
   variable NewAcpName;
   variable NewAcpDesc;

   bulkexecute {
      dialog AddtoAcpDlg(AcpId, NewAcpName, NewAcpDesc) into(AcpId, NewAcpName, NewAcpDesc) {
         when OK {
            stringify(records, Code, JSON) into Codes;
            call AddMultiToPackage(Codes, "APPEARANCE_CONFIG", AcpId, NewAcpName, NewAcpDesc) into CallResult;
            info("${CallResult}");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command RemoveFromAcpCommand for FndBranding {
   label = "Remove from Package";
   enabled = [Acp != null];
   mode = SelectedRecords;
   variable CallResult;

   execute {
      messagebox("Question", question, "Do you want to remove this from the Configuration Package?") {
         when YES {
            call RemoveFromPackage(Code) into CallResult;
            info("${CallResult}");
         }
         when NO {
            exit;
         }
      }
   }
}

command RemoveMultiFromAcpCommand for FndBranding {
   label = "Remove from Package";

   mode = SelectedRecords;
   variable CallResult;
   variable Codes;

   enabled = [Acp != null];

   bulkexecute {
      stringify(records, Code, JSON) into Codes;
      messagebox("Question", question, "Do you want to remove these from the Configuration Package?") {
         when YES {
            call RemoveMultiFromPackage(Codes) into CallResult;
            info("${CallResult}");
         }
         when NO {
            exit;
         }
      }
   }
}

command ViewAcpCommand {
   mode = SingleRecord;
   label = "View Package (${Acp})";
   enabled = [Acp != null];
   execute {
      navigate "page/AppConfigPackageHandling/ApplicationConfigurationPackagePage?$filter=Name eq '${Acp}'";
   }
}

command ViewAllAcpsCommand {
   mode = Global;
   label = "View Application Packages";
   execute {
      navigate "page/AppConfigPackageHandling/ApplicationConfigurationPackagePage";
   }
}

command NavigateToResourcesCommand {
   mode = Global;
   label = "Resources";
   execute {
      navigate Resources;
   }
}

command BulkNavigateToMainCommand for FndBranding {
   label = "Appearance Configuration";
   mode = SelectedRecords;
   enabled = [component.BrandingList.SelectionCount > 0];

   bulkexecute {
      bulknavigate AppearanceConfiguration(Code);
   }
}

command NavigateToMainCommand for FndBranding {
   label = "Appearance Configuration";
   mode = Global;
   enabled = [component.BrandingList.SelectionCount = 0];

   execute {
      navigate AppearanceConfiguration;
   }
}

command NavigateBackCommand for FndBranding {
   label = "Appearance Configuration";
   mode = Global;
   execute {
      navigate AppearanceConfiguration;
   }
}

command UploadImageCommand for FndBrandingResource {
   label = "Upload";
   mode = Global;
   execute {
      assistant UploadFileAssistant("Image") {
         when CANCEL {
            exit CANCEL;
         }
         when OK {
            refresh;
         }
      }
   }
}

command UploadFontCommand for FndBrandingResource {
   label = "Upload";
   mode = Global;
   execute {
      assistant UploadFileAssistant("Font") {
         when CANCEL {
            exit CANCEL;
         }
         when OK {
            refresh;
         }
      }
   }
}

command UploadResourceCommand for UploadResourceVirtual {
   label = "Upload";
   mode = Global;
   enabled = [component.UploadQueue.Count > 0 and component.UploadQueue.InvalidFileList = ""];

   variable ResourceFileKey {
      type = Structure(ResourceFileVirtualKeyStruct);
   }

   variable FilesWithSameName {
      type = Boolean;
   }

   variable FilesWithSameNameDb {
      type = Text;
   }

   execute {
      set FileNames = component.UploadQueue.FileList;
      call FilesWithSameNameExists(FileNames) into FilesWithSameName;
      call FilesWithSameNameExistsDb(FileNames) into FilesWithSameNameDb;

      if [FilesWithSameName = true] {
         alert("Files cannot have the same name.");
      }
      else {
         if [FilesWithSameNameDb != null] {
            confirm("Resource(s) named ${FilesWithSameNameDb} already exist. Replace?") {
               when OK {
                  call ClearResourceFileVirtual();
                  upload "UploadResourceVirtualSet(Objkey=$[Objkey])/ResourceFiles(Objkey=$[ResourceFileKey.Objkey])/FileData"
                     {
                     call CreateFileRecord() into ResourceFileKey;
                  }
                  call SetFileInfo(FileNames);
                  exit OK;
               }
               when CANCEL {
                  exit;
               }
            }
         }
         else {
            call ClearResourceFileVirtual();
            upload "UploadResourceVirtualSet(Objkey=$[Objkey])/ResourceFiles(Objkey=$[ResourceFileKey.Objkey])/FileData"
               {
               call CreateFileRecord() into ResourceFileKey;
            }
            call SetFileInfo(FileNames);
            exit OK;
         }
      }
   }
}

command MapResourceToPropertyCommand {
   label = "Select resource for property";
   enabled = [PropertyRef.Type = "Font" or PropertyRef.Type = "Image"];
   execute {
      assistant MapResourceToPropertyAssistant(Code, Property, Theme, PropertyRef.Type) {
         when CANCEL {
            exit;
         }
      }
   }
}

command DownloadAgentCommand for FndBrandingResource {
   label = "Download";
   mode = SelectedRecords;

   variable VarAgentEnabled Text;
   variable VarLocalCheckOutPath Text;

   execute {
      agentenabled into VarAgentEnabled;
      if [VarAgentEnabled = "TRUE"] {
         set VarDocumentUrl = "Resources(FileName='${FileName}')/FileData";
         agentcall GetLocalFolder("Documents") into VarLocalCheckOutPath;
         set VarFullFilename = "${VarLocalCheckOutPath}\\AppearanceConfig\\${FileName}";

         agentcall Download(VarDocumentUrl, VarFullFilename, "TRUE", "TRUE") {
            when FAIL {
               error("Something went wrong when downloading using the IFS Aurena Agent. Error message: ${error.Message}");
               exit;
            }
         }
         info("Resource files downloading to ${VarLocalCheckOutPath}\\AppearanceConfig.");
      }
      else {
         if [component.ImageResourcesList.SelectionCount > 1 or component.FontResourcesList.SelectionCount > 1] {
            info("IFS Aurena Agent needs to be installed to download multiple resource files.");
         }
         else {
            download "Resources(FileName=$[FileName])/FileData";
         }

      }
   }
}

command ConfirmDeleteCommand for FndBrandingResource {
   variable Mapped Boolean;
   variable FileNames Text;

   bulkexecute {
      stringify(records, FileName) into FileNames;

      if [DeleteCount > 0] {
         call CheckResourceMapped(FileNames) into Mapped;

         if [Mapped = true] {
            confirm("Resource(s) are being used. Delete anyway?") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}

command OpenMapResourcesCommand for FndBrandingProperty {
   variable PropertyRef Text;

   bulkexecute {
      set PropertyRef = Record.PropertyRef;
      set Type = PropertyRef.Type;

      if [CreateCount = 1 and Record.Value = "NOT-SET" and(Type = "Font" or Type = "Image")] {
         assistant MapNewResourceToPropertyAssistant(Record.Code, Record.Property, Record.Theme, Type) {
            when CANCEL {
               exit;
            }
         }
      }
   }
}


--------------------------------- SELECTORS ---------------------------------

selector BrandingSelector for FndBranding {
   field Name;
   field Code {
      label = "Appearance ID";
   }
   badge Context {
      emphasis Info = [Context = "Global"];
      emphasis Normal = [Context = "Custom"];
   }
   badge State {
      showlabel = false;
      emphasis Ok = [State = "Published"];
      emphasis StateChanged = [State = "Unpublished"];
   }
}

selector TokenSelector for FndBrandingToken {
   field Property;
   field Description;
}

---------------------------------- GROUPS -----------------------------------

group BrandGroup for FndBranding {
   label = "";

   field Code {
      editable = [false];
      label = "Appearance ID";
      size = Small;

   }
   field Name {
      size = Medium;
   }
   field Description {
      size = Medium;
   }
   badge Context {
      editable = [State = "Unpublished"];
      emphasis Info = [Context = "Global"];
      emphasis Normal = [Context = "Custom"];
      size = Small;
   }
   badge State {
      label = "Status";
      editable = [false];
      emphasis Ok = [State = "Published"];
      emphasis StateChanged = [State = "Unpublished"];
      size = Small;
      icon = "edit-alt";
   }
   field Notes {
      multiline = true;
      size = Small;
   }
}

group BusinessGroup for FndBranding {
   label = "Business";

   field EnableB2E {
      label = "Enable on B2E";
   }
   field EnableB2B {
      label = "Enable on B2B";
   }
}

----------------------------------- LISTS -----------------------------------

list BrandingList for FndBranding {

   label = "Branding Context Mapping";
   crudactions {
      new {
         enabled = [false];
      }
      duplicate {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field Code {
      size = Small;
      label = "Appearance ID";
   }
   field Name {
      size = Medium;
   }
   field Description {
      columnvisible = [false];
      size = Large;
   }
   badge Context {

      size = Small;
      editable = [false];
      emphasis Info = [Context = "Global"];
      emphasis Normal = [Context = "Custom"];
   }
   field ContextExpression {
      size = Medium;
      editable = [Context = "Custom"];
      size = Medium;
   }

   badge State {
      size = Small;
      label = "Status";
      editable = [false];
      emphasis Ok = [State = "Published"];
      emphasis StateChanged = [State = "Unpublished"];
      icon = "edit-alt";
   }

   field Notes {
      size = Small;
      multiline = true;
   }

   command UnpublishCommand;
   command PublishCommand;
   command BulkNavigateToMainCommand;
   command NavigateToMainCommand;

   commandgroup PackageCommandgroup {
      commandgroup PackageCommandgrp {
         label = "Application Configuration Package";
         command AddMultiToAcpCommand;
         command RemoveMultiFromAcpCommand;
         command ViewAcpCommand;
         command ViewAllAcpsCommand;
      }
   }
}

list PropertyDefaultList for FndBrandingPropertyDefault {
   editmode = SingleCellEdit;
   multiselect = [true];
   crudactions {
      after command OpenMapResourcesCommand;
   }

   fieldset PropertyFieldSet;
   command MapResourceToPropertyCommand;
}

list PropertyDarkList for FndBrandingPropertyDark {
   editmode = SingleCellEdit;
   multiselect = [true];
   crudactions {
      after command OpenMapResourcesCommand;
   }

   fieldset PropertyFieldSet;
   command CopyDefaultToDarkCommand;
   command CopySingleToDarkCommand;
   command MapResourceToPropertyCommand;
}

fieldset PropertyFieldSet {
   lov PropertyRef with TokenSelector using GetTokens(Code, Theme) {
      label = "Property";
      search = Property, Description;
      editable = [ETag = null];
      advancedview PropertyLovsList;
   }
   field PropertyRef.Description {
      size = Large;

      label = "Description";
   }
   field Value {
      size = Large;
   }
}

list PropertyLovsList for FndBrandingToken {
   label = "Property";

   field Property;
   field Description {
      size = Large;
   }
   field Type;
}

list ImageResourcesList for FndBrandingResource {
   label = "Image Resources";
   initialview = CardView;
   card ImageResourceCard;
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }

      duplicate {
         enabled = [false];
      }
      before command ConfirmDeleteCommand;
   }
   field FileName;
   field DateModified {
      format = longtime;
   }
   imagefield {
      imagedata FileData;
      label = "Preview";
   }

   command UploadImageCommand;
   command DownloadAgentCommand;
}

list SelectImageResourcesList for FndBrandingResource {
   multiselect = [false];
   label = "Image Resources";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      duplicate {
         enabled = [false];
      }
   }
   field FileName;
   field DateModified {
      format = longtime;
   }
   imagefield {
      imagedata FileData;
      label = "Preview";
   }
   command NavigateToResourcesCommand;
}


list FontResourcesList for FndBrandingResource {
   label = "Font Resources";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }

      duplicate {
         enabled = [false];
      }
      before command ConfirmDeleteCommand;
   }
   field FileName;
   field DateModified {
      format = longtime;
   }
   command UploadFontCommand;
   command DownloadAgentCommand;
}

list SelectFontResourcesList for FndBrandingResource {
   multiselect = [false];
   label = "Font Resources";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      duplicate {
         enabled = [false];
      }
   }
   field FileName;
   field DateModified {
      format = longtime;
   }
   command NavigateToResourcesCommand;
}

---------------------------------- DIALOGS ----------------------------------

group ResourceTypeGroup for MapResourceVirtual {
   radiogroup ResourceType {
      showlabel = false;
   }
}

assistant MapResourceToPropertyAssistant using MapResourceVirtualSet {
   label = "Select resource for ${Property} (${Theme} Theme)";
   input(Code, Property, Theme, Type);

//   Need to check if the translations for Theme work fine without this. So keeping this here for time being
//   init command {
//      execute {
//         set ThemeDesc = Theme;
//      }
//   }

   singlestep {
      label = "Resources";
      list SelectImageResourcesList using ImageResources {
         visible = [Type = "Image"];
      }
      list SelectFontResourcesList using FontResources {
         visible = [Type = "Font"];
      }
   }

   command Ok {
      enabled = [selection.SelectImageResourcesList.FileName != null or selection.SelectFontResourcesList.FileName != null];
      execute {
         set FileName = "";
         set DateModified = "";

         if [Type = "Image"] {
            set FileName = "${selection.SelectImageResourcesList.FileName}";
            set DateModified = "${selection.SelectImageResourcesList.DateModified}";
         }
         if [Type = "Font"] {
            set FileName = "${selection.SelectFontResourcesList.FileName}";
            set DateModified = "${selection.SelectFontResourcesList.DateModified}";
         }
         call SetResource(Code, Property, Theme, FileName, DateModified);
      }
   }

   command Cancel {
      execute {
         exit CANCEL;
      }
   }
}


assistant MapNewResourceToPropertyAssistant using MapResourceVirtualSet {
   label = "Select resource for ${Property} (${Theme} Theme)";
   input(Code, Property, Theme, Type);

//   Need to check if the translations for Theme work fine without this. So keeping this here for time being
//   init command {
//      execute {
//         set ThemeDesc = Theme;
//      }
//   }

   singlestep {
      label = "Resources";

      group ResourceTypeGroup {
         label = "Resource Type";
      }

      group {
         label = "Custom URL";

         visible = [ResourceType = "Custom"];
         field CustomUrl {
            showlabel = false;
         }
      }

      list SelectImageResourcesList using ImageResources {
         visible = [Type = "Image" and ResourceType = "Resource"];
      }

      list SelectFontResourcesList using FontResources {
         visible = [Type = "Font" and ResourceType = "Resource"];
      }
   }

   command Ok {
      enabled = [((ResourceType = "Custom") and(CustomUrl != null)) or((ResourceType = "Resource") and(selection.SelectImageResourcesList.FileName != null or selection.SelectFontResourcesList.FileName != null))];
      execute {
         set FileName = "";
         set DateModified = "";

         if [Type = "Image"] {
            set FileName = "${selection.SelectImageResourcesList.FileName}";
            set DateModified = "${selection.SelectImageResourcesList.DateModified}";
         }
         if [Type = "Font"] {
            set FileName = "${selection.SelectFontResourcesList.FileName}";
            set DateModified = "${selection.SelectFontResourcesList.DateModified}";
         }

         if [ResourceType = "Custom"] {
            call SetUrl(Code, Property, Theme, CustomUrl);
         }
         if [ResourceType = "Resource"] {
            call SetResource(Code, Property, Theme, FileName, DateModified);
         }
      }
   }

   command Cancel {
      execute {
         exit CANCEL;
      }
   }
}

assistant UploadFileAssistant using UploadResourceVirtualSet {
   label = "Upload Resources";
   savemode = OnLostFocus;
   input(Type);

   singlestep {
      fileselector {

         multifile = [true];
         init command {
            execute {
               if [Type = "Image"] {
                  set component.UploadQueue.AcceptedExtensions = ".jpg,.png,.jpeg";
               }
               if [Type = "Font"] {
                  set component.UploadQueue.AcceptedExtensions = ".ttf,.otf,.woff,.woff2";
               }
            }
         }
         onfileselect {
            execute {
               set FileName = component.UploadQueue.FileList;
            }
         }
         label = "Browse";
      }
   }

   command UploadResourceCommand;
   command Cancel {
      execute {
         exit CANCEL;
      }
   }
}

-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------

card ImageResourceCard for FndBrandingResource {
   label = "${FileName}";
   field DateModified;
   imagefield {
      imagedata FileData;
      size = Large;
      label = "";
   }
}
