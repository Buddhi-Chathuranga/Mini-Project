fragment ScheduledReportOptions;
component FNDBAS;
layer Core;
description "Assistant to be opened opened locally, providing all Scheduling Options (arguments) for a report";

----------------------------- CLIENT FRAGMENTS ------------------------------

assistant ScheduledReportOptions using VirtualOrderReports {
   label = "Schedule Report - ${ReportTitle}";
   savemode = OnLostFocus;
   input(ReportId, ShowDistribution);
   output(ScheduleOptions, ReportAttr, ArchivingAttr, MessageAttr, DistributionAttr, ScheduleName, NextExecutionDate);

   steps {
      step Schedule {
         enabled = [true];
         group ScheduledNameGroup;
         markdowntext {
            visible = [NextExecutionDate != null];
            text = "Next execution time is estimated to: **${NextExecutionDate}**";
         }
         group ScheduledParametersGroup;
         group ScheduledReportStartAndStopDateGroup;
         next command {
            enabled = [condition.ScheduleCondition];
         }
      }

      step ScheduleOptions {
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
         next command {
            enabled = [condition.ScheduleOptionsCondition];
         }
      }

      step Distribution {
         visible = [ShowDistribution];
         enabled = [ShowDistribution];
         group DistributionGroup;
         next command {
            enabled = [condition.DistributionCondition];
         }
      }
      step Settings {
         group ScheduledReportSettingsGroup;
         group ScheduledReportSettings2Group;
         group ScheduledReportArchiveSettingsGroup;
      }

      final step {

      }
   }
   finish command {
      enabled = [condition.ScheduleCondition and condition.ScheduleOptionsCondition and condition.DistributionCondition];
      variable ReportSetting Structure(PackedAttributes);
      execute {
         call PackAttrs() into ReportSetting;
         set ScheduleOptions = ReportSetting.ScheduleOptions;
         set ReportAttr = ReportSetting.ReportAttr;
         set ArchivingAttr = ReportSetting.ArchivingAttr;
         set MessageAttr = ReportSetting.MessageAttr;
         if [ShowDistribution] {
            set DistributionAttr = ReportSetting.DistributionAttr;
         }
         exit OK;
      }
   }

   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

-------------------------------- CONDITIONS ---------------------------------

condition ScheduleCondition =(ScheduleName != null and StartDate != null) and
((ScheduleOption = "Daily" and ScheduleTime != null) or
(ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
(ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
(ScheduleOption = "Date" and ScheduleDatetime != null) or
(ScheduleOption = "Interval" and ScheduleInterval != null) or
(ScheduleOption = "Custom" and ExecutionPlan != null));

condition ScheduleOptionsCondition = true;
condition DistributionCondition = true;

--------------------------------- COMMANDS ----------------------------------

command NavigateToScheduleCommand {
   visible = [ScheduleId != null];
   label = "Show in Scheduled Reports";
   execute {
      if [ScheduleId != null] {
         navigate "page/ScheduledReports/List?$filter=ScheduleId eq ${ScheduleId}";
      }
   }
}

---------------------------------- GROUPS -----------------------------------

group DistributionGroup for VirtualOrderReport {
   label = "";
   itempicker DistributionUsers using DistUserSet {
      label = "Distribution Users";
      compactmode = [false];
      enableordering = [true];
      displayvalue = Identity;
   }
   itempicker DistributionGroups using DistGroupSet {
      label = "Distribution Groups";
      compactmode = [false];
      enableordering = [true];
      displayvalue = GroupName;
   }
}

group ScheduledNameGroup for VirtualOrderReport {
   label = "Schedule Name";

   field ScheduleName {
      showlabel = false;
      size = FullWidth;
   }
}

group ScheduledParametersGroup for VirtualOrderReport {
   label = "Recurrence Pattern";
   radiogroup ScheduleOption;
   field ScheduleTime {
      visible = [ScheduleOption in("Daily", "Weekly", "Monthly")];
      required = [true];
   }
   field ScheduledDayNumber {
      visible = [ScheduleOption = "Monthly"];
      required = [true];
   }
   field ScheduledDays {
      visible = [ScheduleOption = "Weekly"];
      required = [true];
   }
   field ScheduleDatetime {
      visible = [ScheduleOption = "Date"];
      required = [true];
   }

   field ExecutionPlan {
      visible = [ScheduleOption = "Custom"];
      required = [true];
      validate command {
         variable Validation Timestamp;

         execute {
            call ValidateCustomExecutionPlan(ExecutionPlan) into Validation {
               when FAIL {
                  error("Entered Custom Expression is invalid, not resulting in a date");
               }
               when SUCCESS {
                  info("Estimated start ${Validation}");
               }
            }
         }
      }
   }
   field ScheduleInterval {
      visible = [ScheduleOption = "Interval"];
      required = [true];
   }
}

group ScheduledReportStartAndStopDateGroup for VirtualOrderReport {
   label = "Range of Recurrence";
   field StartDate;
   field StopDate;
}

group ScheduledTasksAssistantAdvOpGroup for VirtualOrderReport {
   label = "Options";
   field Active;
   lov AssistantLangCodeRef with LanguageSelector {
      description = AssistantLangCodeRef.Description;
      hidekey = [true];
   }
}

group ScheduledTasksAssistantStreamsGroup for VirtualOrderReport {
   label = "Streams";
   field StreamMsgOnCompletion;
   field StreamNotes {
      visible = [StreamMsgOnCompletion = true];
      multiline = true;
   }
}

group ScheduledReportSettingsGroup for VirtualOrderReport {
   label = "Report";
   lov LayoutNameRef with ReportLayoutSelector using EnumerateLayout(ReportId) {
      label = "Layout";
      description = LayoutNameRef.Layout;
      hidekey = [true];
      size = Large;
   }

   lov ReportLangCodeRef with LanguageSelector using EnumerateReportLanguages(ExternalId) {
      label = "Language";
      description = "${ReportLangCodeRef.Description} (${ReportLangCodeRef.LangCode})";
      hidekey = [true];
   }
}

group ScheduledReportSettings2Group for VirtualOrderReport {
   label = "When scheduled report is finished";
   radiogroup ReportSetting {
      showlabel = false;
   }
   lov PrinterIdRef with LogicalPrinterSelector {
      label = "Printer";
      hidekey = [true];
      visible = [ReportSetting = "PRINTER"];
      description = PrinterIdRef.Description;
      size = Large;
   }
   field ReportSendEmailTo {
      label = "Address";
      visible = [ReportSetting = "EMAIL"];
      size = Large;
   }
}

group ScheduledReportArchiveSettingsGroup for VirtualOrderReport {
   label = "Report Archive";
   field ReportSendPdf {
      label = "E-Mail to";
   }
   field ReportSendPdfTo {
      size = Large;
      label = "Address";
      visible = [ReportSendPdf = true];
   }
}

--------------------------------- SELECTORS ---------------------------------

@Override
selector ReportLayoutSelector for ReportLayoutDefinition {
   label = "Layout Selector";
   field LayoutName {
      label = "Layout Name";
   }
}

selector LanguageSelector for LanguageCode {
   field LangCode {
      label = "Language";
   }
   field Description;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

-------------------------------- ENTITISETS ---------------------------------

entityset VirtualOrderReports for VirtualOrderReport {
   context Company(GlobalCompanyId);
}

entityset DistUserSet for DistributionUsersQuery;
entityset DistGroupSet for DistributionGroupQuery;

--------------------------------- ENTITIES  ----------------------------------

@Override
virtual VirtualOrderReport {
   crud = Create, Update;
   attribute Args Text;
   attribute GlobalCompanyId Text;

   attribute ReportId Text;
   attribute ReportTitle Text {
      fetch = "Report_Definition_Api.Get_Report_Title(report_id)";
   }
   attribute ResultKey Number;

   --------- Distribution ---------
   attribute DistributionUsers Text;
   attribute DistributionGroups Text;

   ----------- Schedule -----------
   attribute ScheduleId Number;
   attribute Executions Number {
      fetch = "Batch_Schedule_API.Get_Executions(schedule_id)";
   }
   attribute ScheduleName Text {
      label = "Name";
      required = [true];
   }
   attribute ScheduleOption Enumeration(ScheduleOption) {
      label = "Options";
   }
   attribute ScheduleTime Time {
      label = "Time";
   }
   attribute ScheduledDays Enumeration(DaysOfWeek) {
      label = "Select days";
      multiselect = [true];
   }
   attribute ScheduledDayNumber Integer {
      label = "Day";
   }
   attribute ScheduleDatetime Timestamp {
      label = "Date And Time";
   }
   attribute ScheduleInterval Text {
      label = "Every (HH:MM)";
   }
   attribute ExecutionPlan Text {
      label = "Custom Expression";
   }
   attribute NextExecutionDate Timestamp;

   attribute StartDate Date {
      required = [true];
   }
   attribute StopDate Date {
      label = "End Date";
   }

   ------ Schedule Options -------
   attribute Active Boolean("TRUE", "FALSE") {
      label = "Set as Active";
      required = [true];
      default = "TRUE";
   }
   attribute LangCode Text;
   attribute StreamMsgOnCompletion Boolean("TRUE", "FALSE") {
      label = "Send Stream Notification";
      required = [true];
      default = "TRUE";
   }
   attribute StreamNotes Text {
      label = "Message";
      maxlength = 2000;
   }

   ---- Report Settings ----------
   attribute LayoutName Text;
   attribute ReportLangCode Text;
   attribute ReportSetting Enumeration(ReportSettings) {
      required = [true];
      default = "'NONE'";
   }
   attribute ReportPrinterId Text;
   attribute ReportSendEmailTo Text;

   attribute ReportSendPdf Boolean("TRUE", "FALSE") {
      required = [true];
      default = "FALSE";
   }
   attribute ReportSendPdfTo Text;

   reference AssistantLangCodeRef(LangCode) to LanguageCode(LangCode) {
      label = "Language Code";
   }
   reference LayoutNameRef(ReportId, LayoutName) to ReportLayoutDefinition(ReportId, LayoutName);
   reference ReportLangCodeRef(ReportLangCode) to LanguageCode(LangCode);
   reference PrinterIdRef(ReportPrinterId) to LogicalPrinter(PrinterId);

   attribute ShowDistribution Boolean;

   attribute ScheduleOptions Text;
   attribute ReportAttr Text;
   attribute ArchivingAttr Text;
   attribute MessageAttr Text;
   attribute DistributionAttr Text;

   function PackAttrs Structure(PackedAttributes);
}

---------------------------------- QUERIES ----------------------------------

query DistributionUsersQuery {
   from = "FND_USER";
   keys = Identity;
   lu = FndUser;
   attribute Identity Text;
   attribute Description Text;
}

query DistributionGroupQuery {
   from = "DISTRIBUTION_GROUP";
   keys = GroupName;
   lu = DistributionGroup;
   attribute GroupName Text;
   attribute Description Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function ValidateCustomExecutionPlan Timestamp {
   parameter ExecutionPlan Text;
}

function EnumerateLayout List < Entity(ReportLayoutDefinition) > {
   parameter ReportId Text;
}

function EnumerateReportLanguages List < Entity(LanguageCode) > {
   parameter ReportId Text;
}

------------------------------- ENUMERATIONS --------------------------------

enumeration ReportSettings {
   value = "NONE" {
      label = "Do nothing";
   }
   value = "PRINTER" {
      label = "Print using";
   }
   value = "EMAIL" {
      label = "E-Mail to";
   }
}

-------------------------------- STRUCTURES ---------------------------------

structure PackedAttributes {
   attribute ScheduleOptions Text;
   attribute ReportAttr Text;
   attribute ArchivingAttr Text;
   attribute MessageAttr Text;
   attribute DistributionAttr Text;
}
