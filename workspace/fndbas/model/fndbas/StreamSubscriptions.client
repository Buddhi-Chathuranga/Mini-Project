client StreamSubscriptions;
component FNDBAS;
layer Core;

navigator {

   entry StreamNotifications parent UserTasks.MyAdministration at index 2 {
      label = "Notifications";
      page Notifications;
   }

   entry SubscriptionDetail parent UserTasks.MyAdministration at index 30 {
      label = "Subscription";
      page SubscriptionDetail;
   }

   entry SubscriptionOverview parent UserTasks.MyAdministration at index 31 {
      label = "Subscriptions";
      page Subscriptions;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Notifications using FndStreamMessages {
   list NotificationsList;

   commandgroup CleanUp {
      command DeleteNotVisibleNotifications;
      command DeleteReadNotifications;
      command DeleteOlderNotifications;
   }
}

page Subscriptions using Subscriptions {
   list SubscriptionsList {
      details = SubscriptionDetail(SubscriptionId);

   }
}

page SubscriptionDetail using Subscriptions {
   label = "Subscription";

   crudactions {
      edit {
         enabled = [false];
      }
   }
   selector SubscriptionSelector;
   group SubscriptionHeaderGrp;
   list SubsciptionColumnList(SubcriptionColumns);

   command EditSubscriptionDialog;
   command NavigateToSubscribedPage;
}

page SubscriptionDialog using SubscriptionVirtualSet {
   command OpenSubscriptionDialog {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

command DeleteNotVisibleNotifications for FndStream {
   label = "Delete all Not Visible";

   execute {
      call DeleteNotifications("HIDDEN");
   }
}

command DeleteReadNotifications for FndStream {
   label = "Delete all Read";

   execute {
      call DeleteNotifications("READ");
   }
}

command DeleteOlderNotifications for FndStream {
   label = "Delete Older than 30 Days";

   execute {
      call DeleteNotifications("OLD");
   }
}

command EditSubscriptionDialog for FndObjSubscription {
   label = "Edit Subscription";
   execute {
      assistant SubscriptionDialog(LuName, KeyRef, "", SubscriptionId) {
         when OK {
            exit;
         }
      }
   }
}

command NavigateToSubscribedPage for FndObjSubscription {
   label = "Go To Subscribed Page";

   execute {
      if [WebUrl = null] {
         alert("Legacy Subscription, no go to information is available.");
      }
      else {
         navigate "${WebUrl}";
      }
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

list NotificationsList for FndStream {
   preselect = [false];
   multiselect = [false];

   crudactions {
      new {
         enabled = [false];
      }
      duplicate {
         enabled = [false];
      }
   }

   static FromUser {
      label = "From";
   }

   static Header {
      label = "Header";
   }

   static Message {
      label = "Message";
   }

   static Notes {
      label = "Notes";
   }

   static StreamType {
      label = "Stream Type";
   }

   static WebUrl {
      label = "web url";
   }

   field Read {
      label = "Read";
      falselabel = "Unread";
      truelabel = "Read";
   }

   field Visible {
      label = "Visible";
      falselabel = "Invisible";
      truelabel = "Visible";
   }

   static CreatedDate {
      label = "Created Date";
   }
}

list SubscriptionsList for FndObjSubscription {
   preselect = [false];
   multiselect = [false];

   static SubscriptionHeader {
      label = "Subscription Header";
      size = Large;
   }
   static ExpiryDate {
      label = "Expiry Date";
   }
   static SendEmail {
      label = "Send Email";
   }
   static SelfNotify {
      label = "Notify My Changes";
   }
   static OneTime {
      label = "Notify Me Once";
   }
   static Notes {
      label = "Notes";
      multiline = true;
      size = Large;
   }

   command EditSubscriptionDialog;
   command NavigateToSubscribedPage;
}

list SubsciptionColumnList for FndObjSubscripColumn {
   label = "Subscription Fields";

   static DisplayName {
      label = "Field";
   }
   static ConditionClient {
      label = "Condition (Legacy)";
      size = Large;
   }
}

group SubscriptionHeaderGrp for FndObjSubscription {
   label = "Subscription";

   static SubscriptionHeader {
      label = "Subscription Header";
   }
   static ExpiryDate {
      label = "Expiry Date";
   }
   static SendEmail {
      label = "Send Email";
   }
   static SelfNotify {
      label = "Notify My Changes";
   }
   static OneTime {
      label = "Notify Me Once";
   }
   static Notes {
      label = "Notes";
      multiline = true;
   }
}

selector SubscriptionSelector for FndObjSubscription {
   label = "${SubscriptionHeader}";
   static SubscriptionHeader;
}

---------------------------- SUBSCRIPTION DIALOG ----------------------------

// This command is called from within the client: getCommand('SubscriptionDialog_OpenSubscriptionDialog');)
command OpenSubscriptionDialog for SubscriptionVirtual {
   label = "Edit Subscription";
   variable PageUrl Text;
   execute {
      set PageUrl = "page/${pageinfo.client}/${pageinfo.name}";
      if [parent.keyref = null] {
         assistant SubscriptionDialog(luname, keyref, PageUrl, "", ColumnData) {
            when OK {
               exit;
            }
         }
      }
      else {
         assistant SubscriptionDialog(luname, keyref, PageUrl, "", ColumnData, parent.keyref) {
            when OK {
               exit;
            }
         }
      }
   }
}

assistant SubscriptionDialog using SubscriptionVirtualSet {
   label = "Subscription";
   savemode = OnLostFocus;
   input(LuName, KeyRef, PageUrl, SubscriptionId, ColumnData, ParentKeyRef);

   // Use one step instead of singleStep because need to fill subscription columns in an enter command
   steps {
      step {
         group SubscriptionDialogGroup;
         list SubscriptionColumns(ColumnArray);
         group SubscriptionDialogNotes;

         enter command {
            execute {
               call FillSubscriptionColumns(Objkey);
            }
         }
         // Update used for existing subscriptions
         command Update;
         command Unsubscribe;
         command Cancel2;
      }
      final step {
      }
      cancelled step {
      }
   }
   // Finish (OK) used for new subscriptions
   finish command {
      label = "OK";
      visible = [SubscriptionId = null and SysDate < ExpiryDate];

      execute {
         call SaveSubscription(Objkey, ParentKeyRef);
      }
   }
   //Cancel visible false because we want Cancel to appear after Unsubscribe
   cancel command {
      visible = [false];
   }
}

command Update {
   enabled = [SubscriptionId != null and SysDate < ExpiryDate];
   execute {
      call SaveSubscription(Objkey, ParentKeyRef);
   }
}
command Unsubscribe {
   enabled = [SubscriptionId != null];
   execute {
      call RemoveSubscription(SubscriptionId);
   }
}
command Cancel2 {
   label = "Cancel";
   mode = Global;
   enabled = [true];
   execute {
      exit "Cancel";
   }
}
command SelectAll for SubscriptionVirtual {
   mode = Global;

   execute {
      call SelectAllFields(Objkey);
   }
}
command SelectNone for SubscriptionVirtual {
   mode = Global;

   execute {
      call SelectNoFields(Objkey);
   }
}

group SubscriptionDialogGroup for SubscriptionVirtual {
   label = "Notify Me";

   field OneTime {
      label = "Notify Me Once";
   }
   field ExpiryDate {
      visible = [OneTime = false];
   }
   field SendEmail;
   field SelfNotify {
      label = "Notify My Changes";
   }
}

group SubscriptionDialogNotes for SubscriptionVirtual {
   label = "Notes";
   field Notes {
      label = "";
      multiline = true;
   }
}

list SubscriptionColumns for SubscriptionColumnVirtual {
   label = "When selected fields are changed";
   multiselect = [false];
   disable = Create, Delete;
   editmode = SingleCellEdit;
   orderby = DisplayName;

   static DisplayName {
      label = "Field";
   }
   field Selected {
      editable = [parent.ColumnData != null];
   }

   command SelectAll {
      enabled = [ColumnData != null];
   }
   command SelectNone {
      enabled = [ColumnData != null];
   }
}
