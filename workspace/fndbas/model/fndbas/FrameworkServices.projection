projection FrameworkServices;
component FNDBAS;
layer Core;
description "Exposes Framework Services as a Projection";
category Users, ExternalB2B;

include fragment CustomBrandingService;
include fragment ClientHomepageService;

----------------------------- MAIN ENTRY POINTS -----------------------------

@DynamicComponentDependency ENTERP
entityset CurrentUserImage for UserImageData;
entityset ReadOnlyProjectionSet for ReadOnlyProjection;

------------------------------ ENTITY DETAILS -------------------------------

//This should be improved in the future
//Currently we can't pass BLOB as action parameters so this the way to update the person image
@Override
@DynamicComponentDependency ENTERP
entity UserImageData using BinaryObjectDataBlock {
   crud = Read, Update;
   use attributes = Data;
   attribute Data Stream;
   where = "blob_id IN (SELECT PICTURE_ID
                        FROM PERSON_INFO_ALL
                        WHERE user_id = Fnd_Session_API.Get_Fnd_User)";
}

structure UserInfo {
   attribute UserId Text;
   attribute DirectoryId Text;
   attribute Name Text;
   attribute SmtpEmail Text;
   attribute MobilePhone Text;
   attribute Email Text;
   attribute PersonId Text;
   attribute Picture Binary;
   attribute PictureEtag Text;
   attribute WorkPhone Text;
   attribute MobileNo Text;
   attribute PreferredLanguage Text;
   attribute FallbackLanguage Text;
}

structure PublicPersonInfo {
   attribute Name Text;
   attribute Picture Binary;
   attribute Email Text;
   attribute WorkPhone Text;
   attribute MobileNo Text;
   attribute PictureEtag Text;
   attribute UserId Text;
   attribute JobTitle Text;
}

structure FndUserInfo {
   attribute UserId Text;
   attribute DirectoryId Text;
   attribute Name Text;
   attribute Email Text;
   attribute MobileNo Text;
   attribute PictureEtag Text;
}

structure DebugInfo {
   attribute EntityName Text;
   attribute FromView Text;
}

function GetDebugDetails List<Structure(DebugInfo)> {
   parameter ProjectionName Text;
}

function GetCurrentUserInformation Structure(UserInfo);
function GetCurrentUserId Text;
function GetCurrentUserPicture Binary;
function GetCurrentUserPictureStream Stream;
function GetCurrentUserName Text;

function GetUserName Text {
   parameter UserId Text;
}

function GetUserPicture Binary {
   parameter UserId Text;
}

function GetUserPictureStream Stream {
   parameter UserId Text;
}
function GetPersonPicture Binary {
   parameter PersonId Text;
}
function GetPersonPictureStream Stream {
   parameter PersonId Text;
}
function GetPersonInformation Structure(PublicPersonInfo) {
   parameter PersonId Text;
}
function GetFndUserInformation Structure(FndUserInfo) {
   parameter UserId Text;
}

---------------------------- OBJECT CONNECTIONS -----------------------------

function GetObjConServices List<Structure(ObjConService)> {
   parameter Category Text;
}

structure ObjConService {
   attribute Service Text;
   attribute Description Text;
   attribute ModelName Text;
}

function GetAttachmentCount List<Structure(ServiceCount)> {
   parameter LuName Text;
   parameter KeyRef Text;
   parameter Services List<Text>;
}

structure ServiceCount {
   attribute Service Text;
   attribute Count Number;
}

// TODO: To be removed! /Rakuse
structure ObjConnServiceList {
   attribute LuName Text;
   attribute ServiceList Text;
}

// TODO: To be removed! /Rakuse
function GetObjectConnectionServiceList List<Structure(ObjConnServiceList)>;

function GetKeyReference Text {
   parameter LuName Text;
   parameter ObjId Text;
}

// TODO: To be removed! /Rakuse
structure AttachmentCount {
   attribute DocumentCount Integer;
   attribute MediaCount Integer;
   attribute ObjectConnectionCount Text;
}

// TODO: To be removed! /Rakuse
function GetAttachmentCount Structure(AttachmentCount) {
   parameter LuName Text;
   parameter KeyRef Text;
   parameter Documents Boolean;
   parameter Media Boolean;
   parameter ObjectConnections Text;
}

structure PersonPictureInfo {
   attribute PictureId Text;
   attribute SeqId Text;
}

//TODO: This should in the future return the BinaryObjectDataBlock object related to the Current User
action InitMyPicture Structure(PersonPictureInfo) {
   initialcheck implementation;
   parameter ImageName Text;
}

structure SystemParameterList {
   attribute Parameter Text;
   attribute Value Text;
}

function GetSystemParameterList List<Structure(SystemParameterList)>;

function GetSystemParameter Text {
   parameter ParameterKey Text;
}

function IsProjectionAvailable Boolean {
   parameter Projection Text;
}

structure ContextSubstitutionVariableList {
   attribute Name Text;
   attribute DataType Text;
   attribute Value Text;
}

function GetCSVList List<Structure(ContextSubstitutionVariableList)>;

query ReadOnlyProjection {
   from = "read_only_projection";
   keys = Projection;
   attribute Projection Text;
}

function GetApplicationName Text;