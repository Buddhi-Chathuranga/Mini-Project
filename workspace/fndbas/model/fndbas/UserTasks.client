client UserTasks;
component FNDBAS;
layer Core;


navigator {
   entry MyAdministration  toplevel at index 0 {
      label = "My Administration";
      entry MyToDoItems;
   }

   entry MyToDoItems {
      label = "My Tasks";
      page MyToDoItems;
   }

}

-------------------------------- MAIN PAGES ---------------------------------
page MyToDoItems using MyTodoItem {
   label = "My Tasks";
   list MytodoList;
}
--------------------------------- COMMANDS ----------------------------------

command EditTaskDetailsCommand {
   label = "Task";
   mode = SingleRecord;
   execute {
      dialog TaskDetailsDialog(ItemId, Title, ItemMessage, Priority, DueDate, Flag, UrltoResource) {
         when CANCEL {
            exit;
         }
      }
   }
}

command OpenTasksDialog {
   label = "Task";
   mode = SelectedRecords;
   variable PageUrl Text;
   variable KeyRef Text;
   variable Title Text;
   variable UrlStringForRecords Text;

-- Bulk execution for array of records
   bulkexecute {
      set PageUrl = "page/${pageinfo.client}/${pageinfo.name}";
      set Title = "${pageinfo.client} (${Count} Records)";
      set BusinessObj = "${pageinfo.client}";
      -- stringfying the keyrefs from records array
      stringify(records, keyref, JSON) into UrlStringForRecords;
      -- calling the new task create assistant with stringfied keyrefs as an argument
      assistant NewCreateTaskAssistant(Title, PageUrl, ItemId, UrlStringForRecords, BusinessObj) {
         when CANCEL {
            exit;
         }
      }
   }

}

command ClearMyToDoFlagCommand {
   label = "Clear Flag";
   execute {
      call ClearMyTodoFlag("${ItemId}");

   }
}

command RedFlagCommand {
   label = "Red";
   execute {
      call SetMyTodoFlag("${ItemId}", "RedFlag");
   }

}
command BlueFlagCommand {
   label = "Blue";
   execute {
      call SetMyTodoFlag("${ItemId}", "BlueFlag");
   }

}
command YellowFlagCommand {
   label = "Yellow";
   execute {
      call SetMyTodoFlag("${ItemId}", "YellowFlag");
   }

}
command GreenFlagCommand {
   label = "Green";
   execute {
      call SetMyTodoFlag("${ItemId}", "GreenFlag");
   }
}

command CompleteTask {
   label = "Complete Task";
   mode = SelectedRecords;
   visible = [Completed != true];
   execute {
      call CompleteTask("${ItemId}");
   }
}

command PriorityHigh {
   label = "High";
   visible = [Priority != "High"];
   execute {
      call SetPriority("${ItemId}", "High");
   }
}

command PriorityNormal {
   label = "Normal";
   visible = [Priority != "Normal"];
   execute {
      call SetPriority("${ItemId}", "Normal");
   }
}

command PriorityLow {
   label = "Low";
   visible = [Priority != "Low"];
   execute {
      call SetPriority("${ItemId}", "Low");
   }
}

command MarkAsRead {
   label = "Mark as Read";
   mode = SelectedRecords;
   visible = [Read != 1];
   execute {
      call MarkAsRead("${ItemId}");
   }
}

command MarkAsUnread {
   label = "Mark as Unread";
   mode = SelectedRecords;
   visible = [Read != 0];
   execute {
      call MarkAsUnread("${ItemId}");
   }
}

command NavigateToPage {
   execute {
      navigate "${UrltoResource}";
      call MarkAsRead(ItemId);
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

----------------------------------- LISTS -----------------------------------

list MytodoList for MyTodo {
   label = "Tasks";
   initialview = CardView;
   card MyTasksCard;
   crudactions {
      new {
         assistant = NewCreateTaskAssistant;
      }
   }
   badge Completed {
      label = "Completed";
      size = Small;
      emphasis Stateobsolete = [Completed = true];
      emphasis Info = [Completed = false];
      style = TextOnly;
   }
   badge Priority {
      label = "Priority";
      editable = [false];
      size = Small;
      emphasis Alert = [Priority = "High"];
      emphasis Neutral = [Priority = "Low"];
      emphasis Stateobsolete = [Priority = "Normal"];
      style = TextOnly;
   }
   static Title {
      label = "Title";
      size = Large;
   }
   @DynamicComponentDependency ENTERP
   static PersonName {
      contactwidget {
         enabled = [true];
         source = Person;
         key = SentBy;

      }
      label = "From";
      size = Small;
   }
   static DateReceived {
      label = "Received";
   }
   field DueDate {
      label = "Due By";
      editable = [true];
   }
   badge Flag {
      label = "Flag";
      icon = "flag";
      emphasis Info = [Flag = "BlueFlag"];
      emphasis Ok = [Flag = "GreenFlag"];
      emphasis Alert = [Flag = "RedFlag"];
      emphasis Warning = [Flag = "YellowFlag"];
      emphasis Stateobsolete = [Flag = null];
      style = IconOnly;
   }
   field Read {
      label = "Read";
      falselabel = "Unread";
      truelabel = "Read";
      emphasis Stateobsolete = [Read = true];
      emphasis Info = [Read = false];
   }
   badge ItemType {
      label = "Type";
      editable = [false];
      emphasis Stateobsolete = [ItemType = "Alert"];
      emphasis Info = [ItemType = "Draft"];
      emphasis Info = [ItemType = "Selection"];
      emphasis Normal = [ItemType = "WORKFLOW"];
      style = IconAndText;
      size = Small;
   }
   static ItemMessage {
      label = "Notes";
      size = Large;
      multiline = true;
   }
   fieldranking  Title, PersonName, DateReceived;
   commandgroup TaskEditCmdGroup {
      command NavigateToPage {
         icon = "popup";
         visible = [UrltoResource != null];
         style = IconOnly;
      }
      command EditTaskDetailsCommand;
      command CompleteTask;
   }

   commandgroup QuickAttributeSetCmdGroup {
      commandgroup SetPriorityCmdGroup {
         label = "Set Priority";
         commandgroup PriorityGroupHolderCmdGroup {
           -- label = "Set Priority";

            command PriorityHigh {
               mode = SelectedRecords;
            }
            command PriorityNormal {
               mode = SelectedRecords;
            }
            command PriorityLow {
               mode = SelectedRecords;
            }
         }
      }
      commandgroup SetFlagCmdGroup {
         label = "Flag";
         commandgroup FlagGroupHolderCmdGroup {
            command RedFlagCommand {
               mode = SelectedRecords;
            }
            command BlueFlagCommand {
               mode = SelectedRecords;
            }
            command YellowFlagCommand {
               mode = SelectedRecords;
            }
            command GreenFlagCommand {
               mode = SelectedRecords;
            }
         }
         commandgroup FlagCearGroupCmdGroup {
            command ClearMyToDoFlagCommand {
               mode = SelectedRecords;
            }
         }
      }
   }
   commandgroup MarksAsReadUnreadCmdGroup {
      command MarkAsRead;
      command MarkAsUnread;
   }
}
---------------------------------- GROUPS -----------------------------------

group CreateTaskGroup for TodoItem {
   field Title {
      label = "Title";
      size = FullWidth;
      multiline = true;
   }
   field Priority {
      size = Medium;
   }
   field Flag {
      size = Medium;
      type = Enumeration(TodoFlag);
      editable = [true];
   }
   field DueDate {
      label = "Due Date";
      type = Timestamp;
      editable = [true];
   }
   field ItemMessage {
      label = "Notes";
      size = FullWidth;
      multiline = true;
   }
   field WebUrl {
      label = "Url";
      visible = [WebUrl != null];
      size = FullWidth;
      multiline = true;
      editable = [false];
   }
}

---------------------------------- DIALOGS ----------------------------------

dialog TaskDetailsDialog for ViewEditTaskStructure {
   label = "Task";
   input(ItemId, Title, ItemMessage, Priority, DueDate, Flag, WebUrl);
   group CreateTaskGroup;
   command Ok {
      label = "Ok";
      execute {
         call ModifyMyTask("${ItemId}", "${Title}", "${ItemMessage}", "${Priority}", "${Flag}", DueDate);
         exit OK;
      }
   }
   command Cancel;
   command NavigateToPage {
      icon = "popup";
      visible = [WebUrl != Null];
      style = IconOnly;
      execute {
         navigate "${WebUrl}";
         call MarkAsRead(ItemId);
      }
   }
}

----------------------------------- CARDS -----------------------------------
card MyTasksCard for MyTodo {
   label = "${Title}";
   @DynamicComponentDependency ENTERP
   static PersonName {
      contactwidget {
         enabled = [true];
         source = Person;
         key = SentBy;
      }
      label = "From";
      size = Small;

   }
   badge Priority {
      label = "Priority";
      editable = [false];
      emphasis Alert = [Priority = "High"];
      emphasis Neutral = [Priority = "Low"];
      emphasis Stateobsolete = [Priority = "Normal"];
      style = TextOnly;
      size = Small;
   }
   static DateReceived {
      label = "Received";
      size = Small;
   }
   field DueDate {
      label = "Due By";
      size = Small;
   }
   badge Flag {
      label = "Flag";
      icon = "flag";
      emphasis Info = [Flag = "BlueFlag"];
      emphasis Ok = [Flag = "GreenFlag"];
      emphasis Alert = [Flag = "RedFlag"];
      emphasis Warning = [Flag = "YellowFlag"];
      emphasis Stateobsolete = [Flag = null];
      style = IconOnly;
      size = Small;
   }
   field Read {
      label = "Read";
      falselabel = "Unread";
      truelabel = "Read";
      size = Small;
      emphasis Stateobsolete = [Read = true];
      emphasis Info = [Read = false];
   }
   badge ItemType {
      label = "Type";
      editable = [false];
      emphasis Stateobsolete = [ItemType = "Alert"];
      emphasis Info = [ItemType = "Draft"];
      emphasis Info = [ItemType = "Selection"];
      emphasis Normal = [ItemType = "WORKFLOW"];
      style = IconAndText;
      size = Small;
   }
   badge Completed {
      label = "Completed";
      size = Small;
      emphasis Stateobsolete = [Completed = true];
      emphasis Info = [Completed = false];
      style = TextOnly;
   }
   static ItemMessage {
      label = "Notes";
      size = FullWidth;
      multiline = true;
   }
}
--------------------------------- SELECTORS ---------------------------------
//@Override
//selector TasksSelector for MyTodo {
//   static Title;
//}

-------------------------------- ASSISTANTS ---------------------------------

assistant NewCreateTaskAssistant using TodoItemVirtualSet {
   label = "Task";
   input(Title, PageUrl, ItemId, KeyRef, BusinessObj);
   singlestep {
      group CreateTaskGroup;
   }
   command Ok {
      execute {
         -- calling createnewbasictask method to create a new basic task with keyref of the array of records
         call CreateNewBasicTask("", "${Title}", "${ItemMessage}", "${Priority}", BusinessObj, PageUrl, KeyRef, "${Flag}", DueDate);
         success("Task Created");
         exit OK;
      }
   }
   command OpenTasksDialog {
      visible = [false];
   }
   command Cancel {
      execute {
         exit OK;
      }
   }
}
