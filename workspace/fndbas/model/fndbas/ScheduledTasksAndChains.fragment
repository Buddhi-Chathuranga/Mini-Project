fragment ScheduledTasksAndChains;
component FNDBAS;
layer Core;
description "Put some useful description here ...";

----------------------------- CLIENT FRAGMENTS ------------------------------

group SchedulingParametersGroup for ScheduledDatabaseTask {
   label = "Schedule";
   radiogroup ScheduleOption {
      label = "Options";
      validate command {
         execute {
            if [ScheduleOption = "Custom"] {
               set ExecutionPlan = "";
            }
         }
      }
   }
   field ScheduleTime {
      visible = [ScheduleOption in("Daily", "Weekly", "Monthly")];
      label = "Time";
   }
   field ScheduledDayNumber {
      visible = [ScheduleOption = "Monthly"];
      label = "Day Number";
   }
   field ScheduledDays {
      visible = [ScheduleOption = "Weekly"];
      label = "Weekdays";
   }
   field ScheduleDatetime {
      visible = [ScheduleOption = "Date"];
      label = "Date And Time";
   }
   field ExecutionPlan {
      label = "Custom Expression";
      visible = [ScheduleOption = "Custom"];
   }
   field ScheduleInterval {
      visible = [ScheduleOption = "Interval"];
      label = "Interval (HH:MM)";
   }
}

group SchedulingStartAndStopDateGroup for ScheduledDatabaseTask {
   label = "Time Interval";
   field StartDate {
      validate command {
         execute {
            if [StartDate < Today] {
               error("Start Date should be in the future");
            }
         }
      }
   }
   field StopDate {
      validate command {
         execute {
            if [StopDate != null and StopDate < StartDate] {
               error("Stop Date should be after the Start Date");
            }
         }
      }
   }
}

selector LanguageSelector for LanguageCode {
   field LangCode;
   field Description;
}

group ScheduledTasksAdvancedOpGroup for ScheduledDatabaseTask {
   label = "Options";
   field CheckExecuting {
      label = "Check Executing";
   }
   lov LanguageCodeRef with LanguageSelector {
      label = "Language";
      hidekey = [true];
      description = LanguageCodeRef.Description;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
@Override
entity ScheduledDatabaseTask using BatchSchedule {
   attribute ScheduleId Number {
      editable = [false];
   }
   attribute BatchScheduleType Text {
      required = [false];
   }
   // Fix the data datatypes that were wrong in the model
   attribute NextExecutionDate Timestamp;
   attribute StartDate Date;
   attribute StopDate Date;
   attribute ModifiedDate Timestamp;
   attribute ScheduleTime Time {
      editable = [true];
      fetch = "Batch_Schedule_API.Get_Schedule_Time(execution_plan)";
   }
   attribute ScheduleOption Enumeration(ScheduleOption) {
      editable = [true];
      fetch = "Batch_Schedule_API.Get_Current_Schedule_Option(execution_plan)";
   }
   attribute ScheduledDays Enumeration(DaysOfWeek) {
      editable = [true];
      fetch = "Batch_Schedule_API.Get_Scheduled_Days(execution_plan)";
      multiselect = [true];
   }
   attribute ScheduledDayNumber Number {
      editable = [true];
      fetch = "Batch_Schedule_API.Get_Scheduled_Day_Number(execution_plan)";
   }
   attribute ScheduleDatetime Timestamp {
      editable = [true];
      fetch = "Batch_Schedule_API.Get_Schedule_Time(execution_plan)";
   }
   attribute ScheduleInterval Text {
      editable = [true];
      fetch = "Batch_Schedule_API.Get_Schedule_Interval(execution_plan)";
   }

   attribute Today Date {
      editable = [false];
      fetch = "TRUNC(sysdate)";
   }

   array BatchSchParamArray(ScheduleId) to BatchSchedulePar(ScheduleId);
   reference LanguageCodeRef(LangCode) to LanguageCode(LangCode);
   reference ScheduleMethodIdRef(ScheduleMethodId) to BatchScheduleMethod(ScheduleMethodId);

   reference BatchQueueRef(QueueId) to BatchQueue(QueueId);

}