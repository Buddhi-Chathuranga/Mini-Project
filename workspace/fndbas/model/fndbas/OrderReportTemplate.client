client OrderReportTemplate;
component FNDBAS;
layer Core;
projection OrderReportTemplate;

-------------------------------- ASSISTANTS ---------------------------------

assistant OrderReport using VirtualOrderReports {
   label = "Order Report - ${ReportTitle}";
   savemode = OnLostFocus;


--      set Args = "COMPONENT=${Component};VERSION=${Version};";
--      navigate "assistant/ModuleRep/OrderReport?$action=InitWithArguments{Arguments:$[Args]}";

   -- 1. CRUD_Default___/Prepare_Insert__
   -- 2.
   setup InitWithArguments {
      variable Arguments;

      execute {
         set Args = Arguments;
      }

   }
   -- 3.
   init command {
      execute {
         set ReportId = "$CLONED_ID$";
      }
   }

   steps {
      step Parameters {
         enabled = [true];
         markdowntext {
            visible = [IsCustom = "TRUE"];
            text = "The parameters for this Report can not be defined using the Report Order assistant!";
         }
         group DynamicReportParameters;
         next command {
            enabled = [condition.ParametersCondition];
         }
      }

      step Distribution {
         enabled = [true];
         group DistributionGroup;
      }

      final step {

         markdowntext {
            visible = [ResultKey = null];
            text = "Report **${ReportTitle}** will be executed shortly through Business Reporter Execution Server. A background job assigned with ID **${ScheduleJobId}** successfully created.";
         }
         markdowntext {
            visible = [not RenderingCompleted];
            text = "Report **${ReportTitle}** is taking more time than expected and currently executing in the background . Once completed, a notification will be posted. The report will be available in the Report Archive with the Result Key **${ResultKey}**.";
         }
         markdowntext {
            visible = [ScheduleJobId = null and RenderingCompleted];
            text = "Report **${ReportTitle}** assigned with the Result Key **${ResultKey}** successfully created and archived.";
         }
         command PrintReportCommand;
         command ShowBusinessReporterReportCommand;
         command ShowInReportArchiveCommand;
         command NavigateToBresBackgroundJobCommand;
      }
   }
   finish command {
      enabled = [IsCustom = "FALSE" and condition.ParametersCondition and condition.DistributionCondition];
      variable Result {
         type = ReportResult;
      }
      execute {
         call OrderReport() into Result;
         set ResultKey = Result.ResultKey;
         set ScheduleJobId = Result.ScheduleJobId;
         set RenderingCompleted = Result.RenderingCompleted;
         //call GetResultKeyParams(ResultKey) into DebugUsedParams;
         if [ResultKey = null and ScheduleJobId = null] {
            exit CANCEL;
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
}

assistant ScheduleReport using VirtualOrderReports {
   label = "Schedule Report - ${ReportTitle}";
   savemode = OnLostFocus;

--      set Args = "COMPONENT=${Component};VERSION=${Version};";
--      navigate "assistant/ModuleRep/OrderReport?$action=InitWithArguments{Arguments:$[Args]}";

   -- 1. CRUD_Default___/Prepare_Insert__
   -- 2.
   setup InitWithArguments {
      variable Arguments;
      variable ScheduleIdPar Number;
      execute {
         set Args = Arguments;
         set ScheduleId = ScheduleIdPar;
      }
   }

   -- 3.
   init command {
      execute {
         set ReportId = "$CLONED_ID$";
      }
   }


   steps {
      step Parameters {
         enabled = [true];
         markdowntext {
            visible = [IsCustom = "TRUE"];
            --text = "The parameters for this Report can not be defined using the Schedule Report assistant! (IsCustom = **${IsCustom}**)";
            text = "The parameters for this Report can not be defined using the Schedule Report assistant!";
         }
         group DynamicReportParameters;
         next command {
            enabled = [condition.ParametersCondition];
         }
      }

      step Schedule {
         enabled = [true];
         group ScheduledNameGroup;
         markdowntext {
            visible = [Executions != null];
            text = "This schedule has been executed ${Executions} times.";
         }
         markdowntext {
            visible = [Executions = null];
            text = "This schedule has never been executed.";
         }
         markdowntext {
            visible = [NextExecutionDate != null];
            text = "Next execution time is estimated to: **${NextExecutionDate}**";
         }
         group ScheduledParametersGroup;
         group ScheduledReportStartAndStopDateGroup;
         next command {
            enabled = [condition.ScheduleCondition];
         }
      }

      step ScheduleOptions {
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }

      step Distribution {
         enabled = [condition.DistributionCondition];
         group DistributionGroup;
      }
      step Settings {
         group ScheduledReportSettingsGroup;
         group ScheduledReportSettings2Group;
         group ScheduledReportArchiveSettingsGroup;
         next command {
            enabled = [condition.SettingsCondition];
         }
      }

      final step {
         markdowntext {
            text = "Report **${ReportTitle}** assigned with the Schedule Id **${ScheduleId}** successfully scheduled.";
//
//Parameters:
//
//${DebugUsedParams}";
         }
         command NavigateToScheduleCommand;
      }
   }
   finish command {
      enabled = [(IsCustom = "FALSE" or(IsCustom = "TRUE" and ScheduleId != null)) and condition.ParametersCondition and condition.DistributionCondition and condition.ScheduleCondition
      and condition.ScheduleOptionsCondition and condition.SettingsCondition];
      execute {
         call ScheduleReport() into ScheduleId;
         //call GetScheduledParams(ScheduleId) into DebugUsedParams;
         if [ScheduleId = null] {
            exit CANCEL;
         }
      }
   }

   cancel command {
      execute {
         navigate back;
      }
   }
}

-------------------------------- CONDITIONS ---------------------------------

-- $CLONED_CONDITION$ is replaced with a proper condition, so all "required" attributes are set as mandatory in the client.
condition ParametersCondition = "$CLONED_CONDITION$";
condition DistributionCondition = true;

condition ScheduleCondition = (ScheduleName != null) and
((ScheduleOption = "Daily" and ScheduleTime != null) or
(ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
(ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
(ScheduleOption = "Date" and ScheduleDatetime != null) or
(ScheduleOption = "Interval" and ScheduleInterval != null) or
(ScheduleOption = "Custom" and ExecutionPlan != null));

condition ScheduleOptionsCondition = true;
condition SettingsCondition = true;

--------------------------------- COMMANDS ----------------------------------
command PrintReportCommand {

   label = "Print Report";
   visible = [ReportMode != "EXCEL1.0"];
   execute {
      if [ReportId = "$CLONED_ID$" and ResultKey != null] {
         printdialog ResultKey;
      }
   }
}

command ShowInReportArchiveCommand {

   label = "Show in Report Archive";
   visible = [ScheduleJobId = null and RenderingCompleted];
   execute {
      if [ReportId = "$CLONED_ID$" and ScheduleJobId = null and RenderingCompleted] {
         navigate "page/ReportArchive/ReportArchive?$filter=ResultKey eq ${ResultKey}";
      }
   }
}

command ShowBusinessReporterReportCommand {
   label = "Show BR Report";
   visible = [ReportMode = "EXCEL1.0" and ScheduleJobId = null and RenderingCompleted];
   execute {
      if [ReportId = "$CLONED_ID$" and ScheduleJobId = null and RenderingCompleted] {
         download "BusinessReporterOrderReport.svc/ExcelReportArchiveSet(ReportId='${ReportId}',ResultKey=$[ResultKey])/ReportFile";
      }
   }
}
command NavigateToBresBackgroundJobCommand {

   label = "Show in Background Jobs";
   visible = [ReportMode = "EXCEL1.0" and ResultKey = null];
   execute {
      if [ReportId = "$CLONED_ID$" and ReportMode = "EXCEL1.0" and ResultKey = null] {
         navigate "page/BackgroundJobsHandling/BackgroundJobsOverview?$filter=JobId eq ${ScheduleJobId}";
      }
   }
}
command NavigateToScheduleCommand {

   label = "Show in Scheduled Reports";
   execute {
      if [ReportId = "$CLONED_ID$" and ScheduleId != null] {
         navigate "page/ScheduledReports/List?$filter=ScheduleId eq ${ScheduleId}";
      }
   }
}

------------------------ GROUPS FOR REPORT ORDERING -------------------------

group DynamicReportParameters for VirtualOrderReport {
   label = "Report Parameters";
   // Specific Report Parameters
   // will be dynamically created differently for each report id
   field DynamicParam;

   // For debugging only
//   field Parameter1;
//   field Parameter2;
//   field Parameter3;
//   field Parameter4;
//   field Parameter5;
//   field Parameter6;
//   field Parameter7;
//   field Parameter8;
//   field Parameter9;
//   field Parameter10;
//   field Parameter11;
//   field Parameter12;
//   field Parameter13;
//   field Parameter14;
//   field Parameter15;
//   field Parameter16;
//   field Parameter17;
//   field Parameter18;
//   field Parameter19;
//   field Parameter20;
//   field Parameter21;
//   field Parameter22;
//   field Parameter23;
//   field Parameter24;
//   field Parameter25;
//   field Parameter26;
//   field Parameter27;
//   field Parameter28;
//   field Parameter29;
//   field Parameter30;
}
group DebugInfo for VirtualOrderReport {
   field ReportId {
      visible = [true];
   }
   field ResultKey;
}

group DistributionGroup for VirtualOrderReport {
   label = "";
   itempicker DistributionUsers using DistUserSet {
      label = "Distribution Users";
      compactmode = [false];
      enableordering = [true];
      displayvalue = Identity;
   }
   itempicker DistributionGroups using DistGroupSet {
      label = "Distribution Groups";
      compactmode = [false];
      enableordering = [true];
      displayvalue = GroupName;
   }
}

group ScheduledNameGroup for VirtualOrderReport {
   label = "Schedule Name";

   field ScheduleName {
      showlabel = false;
      size = FullWidth;
   }
}

group ScheduledParametersGroup for VirtualOrderReport {
   label = "Recurrence Pattern";

   radiogroup ScheduleOption;
   field ScheduleTime {
      visible = [ScheduleOption in("Daily", "Weekly", "Monthly")];
      required = [true];
   }
   field ScheduledDayNumber {
      visible = [ScheduleOption = "Monthly"];
      required = [true];
   }
   field ScheduledDays {
      visible = [ScheduleOption = "Weekly"];
      required = [true];
   }
   field ScheduleDatetime {
      visible = [ScheduleOption = "Date"];
      required = [true];
   }

   field ExecutionPlan {
      visible = [ScheduleOption = "Custom"];
      required = [true];
      validate command {
         variable Validation Timestamp;
         execute {
            call ValidateCustomExecutionPlan(ExecutionPlan) into Validation {
               when FAIL {
                  error("Entered Custom Expression is invalid, not resulting in a date");
               }
               when SUCCESS {
                  info("${Validation}", "Estimated Start");
               }
            }
         }
      }
   }
   field ScheduleInterval {
      visible = [ScheduleOption = "Interval"];
      required = [true];
   }
}

group ScheduledReportStartAndStopDateGroup for VirtualOrderReport {
   label = "Range of Recurrence";
   field StartDate;
   field StopDate;
}

group ScheduledTasksAssistantAdvOpGroup for VirtualOrderReport {
   label = "Options";
   field Active;
   lov AssistantLangCodeRef with LanguageSelector {
      description = AssistantLangCodeRef.Description;
      hidekey = [true];
   }
}

group ScheduledTasksAssistantStreamsGroup for VirtualOrderReport {
   label = "Streams";
   field StreamMsgOnCompletion;
   field StreamNotes {
      visible = [StreamMsgOnCompletion = true];
      multiline = true;
   }
}

-------------------- GROUPS FOR REPORT DEFINITION UPDATE --------------------

//group ReportControl for VirtualOrderReport {
//   //NOTE: At least one reference needs to be specified in order to get the
//   //      generated parameteter to work property, else metadata will be corrupt.
//   //      Remove DummyReportIdRef when another reference is defined
//   field DummyReportIdRef {
//      label = "Report id to update";
//      visible = [true];
//   }
//}

group ScheduledReportSettingsGroup for VirtualOrderReport {
   label = "Report";
   lov LayoutNameRef with ReportLayoutSelector using EnumerateLayout(ReportId) {
      label = "Layout";
      description = LayoutNameRef.LayoutName;
      hidekey = [true];
      size = Large;
   }

   lov ReportLangCodeRef with LanguageSelector using EnumerateReportLanguages(ExternalId) {
      label = "Language";
      description = "${ReportLangCodeRef.Description} (${ReportLangCodeRef.LangCode})";
      hidekey = [true];
   }
}

group ScheduledReportSettings2Group for VirtualOrderReport {
   label = "When scheduled report is finished";
   radiogroup ReportSetting {
      showlabel = false;
   }
   lov PrinterIdRef with LogicalPrinterSelector {
      label = "Printer";
      hidekey = [true];
      visible = [ReportSetting = "PRINTER"];
      description = PrinterIdRef.Description;
      size = Large;
   }
   field ReportSendEmailTo {
      label = "Address";
      visible = [ReportSetting = "EMAIL"];
      size = Large;
   }
}

group ScheduledReportArchiveSettingsGroup for VirtualOrderReport {
   label = "Report Archive";
   field ReportSendPdf {
      label = "E-Mail to";
   }
   field ReportSendPdfTo {
      size = Large;
      label = "Address";
      visible = [ReportSendPdf = true];
   }
   field ArchiveDocument {
      visible = [ReportMode = "EXCEL1.0"];
   }
   field ArchiveDocumentNo {
      visible = [ReportMode = "EXCEL1.0" and ArchiveDocument = true];
      size = Large;
   }
}

--------------------------------- SELECTORS----------------------------------

@Override
selector ReportLayoutSelector for ReportLayoutDefinition {
   field LayoutName {
      label = "Layout Name";
   }
}

selector LanguageSelector for LanguageCode {
   field LangCode {
      label = "Language";
   }
   field Description;
}
