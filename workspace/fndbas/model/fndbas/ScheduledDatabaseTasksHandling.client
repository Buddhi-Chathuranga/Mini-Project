client ScheduledDatabaseTasksHandling;
component FNDBAS;
layer Core;
include fragment ScheduledTasksAndChains;
include fragment ComponentSelector;

-------------------------------- MAIN PAGES ---------------------------------
navigator {
   @DynamicComponentDependency FNDADM
   entry NewDatabaseTaskScheduleAssistantEntrySM parent FndadmNavigator.ScheduledTasksFolderSM at index 210 {
      label = "New Database Task Schedule";
      assistant NewScheduledTaskAssistant;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskScheduleDetailsSM parent FndadmNavigator.ScheduledTasksFolderSM at index 220 {
      label = "Database Task Schedule";
      page DatabaseTaskScheduleDetails;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskSchedulesSM parent FndadmNavigator.ScheduledTasksFolderSM at index 230 {
      label = "Database Task Schedules";
      page DatabaseTaskSchedules;
   }
   @DynamicComponentDependency FNDADM
   entry NewDatabaseTaskScheduleAssistantEntryMA parent FndadmNavigator.ScheduledTasksFolderMA at index 210 {
      label = "New Database Task Schedule";
      assistant NewScheduledTaskAssistant;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskScheduleDetailsMA parent FndadmNavigator.ScheduledTasksFolderMA at index 220 {
      label = "Database Task Schedule";
      page DatabaseTaskScheduleDetails;
   }
   @DynamicComponentDependency FNDADM
   entry DatabaseTaskSchedulesMA parent FndadmNavigator.ScheduledTasksFolderMA at index 230 {
      label = "Database Task Schedules";
      page DatabaseTaskSchedules;
   }
}

page DatabaseTaskSchedules using ScheduledDatabaseTasks {
   label = "Database Task Schedules";
   list ScheduledDatabaseTasksList;
   command New;
}

page DatabaseTaskScheduleDetails using ScheduledDatabaseTasks {
   label = "Database Task Schedule";
   crudactions {
      new {
         enabled = [false];
      }
   }
   editmode = MultiField;
   selector ScheduledDatabaseTasksSelector;
   group ScheduledDatabaseTasksMainGroup bind ScheduledDatabaseTasksSelector;
   group SchedulingParametersGroup;
   arrange {
      group SchedulingStartAndStopDateGroup;
      group ScheduledTasksAdvancedOpGroup bind ScheduledDatabaseTasksSelector;
   }
   arrange {
      list BatchSchParamList(BatchSchParamArray) bind ScheduledDatabaseTasksSelector;
      group ScheduledTasksStreamSuppGroup bind ScheduledDatabaseTasksSelector;
   }
   command Run {
      enabled = [Active = true];
   }
   command New;
   command ViewBackgroundJobs;
}

--------------------------------- COMMANDS ----------------------------------
command New {
   label = "New";
   execute {
      navigate "assistant/ScheduledDatabaseTasksHandling/NewScheduledTaskAssistant";
   }
}

command ViewSchedule {
   label = "View Schedule";
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate DatabaseTaskScheduleDetails(ScheduleId);
   }
}

command Run for ScheduledDatabaseTask {
   label = "Run";
   execute {
      confirm("Schedule '${ScheduleId} - ${ScheduleName}' will be run as a background job. Do you want to continue?") {
         when OK {
            call RunBatchSchedule();
            success("The background job for ${ScheduleName} has been posted");
         }
      }
   }
}

command ViewBackgroundJobs for ScheduledDatabaseTask {
   label = "View Background Jobs";
   execute {
      navigate "page/BackgroundJobsHandling/BackgroundJobsOverview?$filter=ScheduleId eq $[ScheduleId]";
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

selector ScheduledDatabaseTasksSelector for ScheduledDatabaseTask {
   label = "Schedule - ${ScheduleName}";
   field ScheduleName;
   field ScheduleId {
      label = "Schedule ID";
   }
   field Active;
   field NextExecutionDate {
      label = "Next Execution";
      visible = [Active != false];
   }
}

selector DatabaseTasksSelector for BatchScheduleGrantedMethod {
   field Description
      {
      label = "Database Task";
   }
   field MethodName
      {
      label = "Method";
   }
}

group ScheduledDatabaseTasksMainGroup for ScheduledDatabaseTask {
   label = "General";
   field ScheduleName {
      label = "Name";
   }
   lov ScheduleMethodIdRef with DatabaseTasksSelector {
      label = "Database Task";
      hidekey = [true];
      editable = [ETAG = null];
      description = ScheduleMethodIdRef.Description;
   }
   field Active;
   field Username {
      contactwidget {
         enabled = [true];
         source = User;
      }
   }
   field NextExecutionDate {
      label = "Next Execution";
      editable = [false];
   }
   // Show/update execution plan through the scheduling controls instead
   // field ExecutionPlan;
   field Executions {
      label = "Number of Times Executed";
   }
}

group AssistantScheduleTaskGroup for NewScheduledTaskVirtual {
   label = "General";
   field ScheduleName;
   lov ScheduleMethodIdAstRef with DatabaseTasksSelector {
      label = "Database Task";
      hidekey = [true];
      description = ScheduleMethodIdAstRef.Description;
      required = [true];
      advancedview DatabaseTaskList;
      search = Description, MethodName;

   }
}

group ScheduledTasksStreamSuppGroup for ScheduledDatabaseTask {
   label = "Streams";
   field StreamMsgOnCompletion {
      label = "Send Stream Notification";
      required = [true];
   }
   field StreamNotes {
      label = "Message";
      visible = [StreamMsgOnCompletion = true];
      multiline = true;
   }
}

list ScheduledDatabaseTasksList for ScheduledDatabaseTask {
   preselect = [false];
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   field ScheduleId;
   field ScheduleName {
      label = "Name";
      size = Large;
   }
   field ScheduleMethodIdRef.Description {
      label = "Database Task";
      size = Large;
   }
   field Active;
   field NextExecutionDate {
      label = "Next Execution";
   }
   field StartDate;
   field Executions;
   field ExecutionPlan;
   field Username {
      contactwidget {
         enabled = [true];
         source = User;
      }
   }
   field LanguageCodeRef.Description {
      label = "Language";
   }
   field ScheduleMethodIdRef.MethodName
      {
      label = "Method";
   }
   field ModifiedDate;
   field ScheduleMethodIdRef.Module {
      label = "Component";
   }
   fieldranking ScheduleName, Active, ScheduleMethodIdRef.Description, NextExecutionDate, StartDate, StopDate, Executions, ExecutionPlan, Username, LanguageCodeRef.Description, ScheduleMethodIdRef.Module, ModifiedDate;
   command ViewSchedule;
   command Run {
      enabled = [Active = true];
   }
}

list BatchSchParamList for BatchSchedulePar {
   preselect = [false];
   label = "Parameters";
   field Name {
      editable = [false];
      size = Large;
   }
   field Value {
      label = "Value";
      required = [Mandatory = true];
   }
   field Mandatory {
      label = "Required";
      editable = [false];
   }
}

list BatchSchMethodParamList for NewScheduledTaskMethodParVirtual {
   preselect = [false];
   label = "Parameters";
   editmode = SingleCellEdit;
   field Name {
      editable = [false];
      size = Large;
   }
   field UserValue {
      label = "Value";
      required = [Mandatory = true];
   }
   field Mandatory {
      label = "Required";
      editable = [false];
   }
}

group ScheduledTasksAssistantAdvOpGroup for NewScheduledTaskVirtual {
   label = "Settings";
   field Active {
      label = "Set as Active";
   }
   field CheckExecuting {
      label = "Check Executing";
   }
   lov AssistantLangCodeRef with LanguageSelector {
      label = "Language";
      description = AssistantLangCodeRef.Description;
      hidekey = [true];
   }
}

group ScheduledTasksAssistantStreamsGroup for NewScheduledTaskVirtual {
   label = "Streams";
   field StreamMsgOnCompletion {
      label = "Send Stream Notification";
      required = [true];
   }
   field StreamNotes {
      label = "Message";
      visible = [StreamMsgOnCompletion = true];
      multiline = true;
   }
}

assistant NewScheduledTaskAssistant using NewScheduledTaskVirtuals {
   label = "New Database Task Schedule";
   setup Init {
      variable BackNavigateParam;
      variable ScheduleMethodIdParam {
         type = Number;
      }
      variable ScheduleNameParam;
      execute {
         set BackNavigate = BackNavigateParam;
         set ScheduleMethodId = ScheduleMethodIdParam;
         set ScheduleName = ScheduleNameParam;
      }
   }
   steps {
      step {
         label = "Set Name and Database Task";
         group AssistantScheduleTaskGroup;
         next command {
            enabled = [ScheduleMethodId != null and ScheduleName != null];
            execute {
               call AddParamToSchedule(ScheduleMethodId);
            }
         }
      }
      step {
         label = "Set Parameters";
         enabled = [ScheduleMethodIdAstRef.ArgumentType != "NoParameter"];

         list BatchSchMethodParamList(MethodParam) {
            preselect = [true];
         }
         next command {
            enabled = [EnableParamNext = "TRUE"];
         }
      }
      step {
         label = "Set Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
         next command {
            enabled = [StartDate >= Today and(StopDate = null or StopDate >= StartDate)];
         }
      }
      step {
         label = "Set Options and Streams";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "Schedule was successfully created";
      }
      cancelled step {
         description = "New Database Task Schedule was cancelled";
      }
   }
   finish command {
      variable NewScheduleId;
      enabled = [component.NewScheduledTaskAssistant.ActiveStep > 2];
      execute {
         call CreateTaskSchedule() into NewScheduleId;
         if [BackNavigate = null] {
            navigate "page/ScheduledDatabaseTasksHandling/DatabaseTaskScheduleDetails?$filter=ScheduleId eq ${NewScheduleId}";
         }
         else {
            navigate back;
         }
         success("Schedule was successfully created");
      }
   }
}
list DatabaseTaskList for BatchScheduleMethod {
   label = "Database Task";
   preselect = [false];

   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }

   field ScheduleMethodId {
      label = "ID";
      size = Small;
   }
   field Description {
      label = "Database Task";
      size = Large;
   }
   field MethodName
      {
      label = "Method";
      size = Large;
   }
   lov ComponentRef with ComponentSelector {
      label = "Component";
      editable = [false];
      description = ComponentRef.Name;
   }
   field ArgumentType
      {
      label = "Type of Arguments";
      editable = [false];
      columnvisible = [False];
   }
   field ValidationMethod {
      editable = [false];
      columnvisible = [false];
   }
   field SingleExecution {
      label = "Single Schedule";
      columnvisible = [false];
   }
   field CheckExecuting {
      label = "Check Executing";
      columnvisible = [false];
   }
   field CheckDay {
      columnvisible = [false];
      label = "Check Same Day Execution";
   }

   fieldranking Description, MethodName, ModuleRef, ScheduleMethodId;
}