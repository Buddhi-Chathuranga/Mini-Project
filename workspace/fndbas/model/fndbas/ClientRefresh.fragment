fragment ClientRefresh;
component FNDBAS;
layer Core;
description "Fragment for programmatic data source refreshing in client.";

--------------------------------- FRAGMENTS ---------------------------------


----------------------------- CLIENT FRAGMENTS ------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------
// Use this structure to programmatically invoke ludendencies in the client.
//
// Basic usage:
// Create a function that returns a list of this structure, for example
//
//   function GetChangedDatasources List<Structure(RefreshStructure)>;
//
// You can add parameters if you want.
//
// Attributes
//    Entity: Name of entity to refresh.
//    Criteria: Expression that identifies a record. Format is same as for a Keyref.
//    Refresh: What to refresh, only support now is the name of the array to refresh.
//
// Then in a command in the client do this:
//
// execute {
//    refresh using GetChangedDatasources();
// }
//

// Example Projection
// @Override
// entity TstProject {
//    array ItemArray(ProjectId) to TstProjectItem(ProjectId);
// }
//
//
// Example: Basic ludependencies
// Refresh all entitysets that depends on entity TstProject
// This results in the same refresh as saving a TstProject record.
//
// Have the function return this record as the only item in an array
//   {
//      Entity: 'TstProject',
//      Criteria: null,
//      Refresh: null
//   }
//

// Example: ludependencies modifies
// Refresh the array ItemArray entityset on a the project record the ProjectId = 'PROJ1'
// This results in the same as doing an action on a TstProjectItem with the following declaration
//    ledependencies modifies TstProject[ProjectId='${ProjectId}']/ItemArray;
//
// Have the function return this record as the only item in an array
//   {
//      Entity: 'TstProject',
//      Criteria: 'PROJECT_ID=PROJ1^',
//      Refresh: 'ItemArray'
//   }
//




structure RefreshStructure {
   attribute Entity Text {
      required = [true];
   }
   attribute Criteria Text;
   attribute Refresh Text;
}