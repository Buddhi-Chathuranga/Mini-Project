fragment LobbyPresentationObjectGrants;
component FNDBAS;
layer Core;
description "Handle Lobby Presentation Grants";

--------------------------------- FRAGMENTS ---------------------------------


----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- MAIN PAGES ---------------------------------


--------------------------------- COMMANDS ----------------------------------

command RevokePresObject for PresObjectGrant {
   mode = SelectedRecords;
   label = "Revoke";
   bulkexecute {
      bulkcall RevokePresObject();
   }
}

command GrantPresObject for FndRole {
   mode = SelectedRecords;
   label = "Grant";
   bulkexecute {
      bulkcall GrantPresObject(PoId);
   }
}

command RegrantPresObject for PresObjectGrant {
   mode = SelectedRecords;
   label = "Regrant";
   bulkexecute {
      bulkcall RegrantPresObject();
   }
}

command RefreshSecurityCache {
   mode = Global;
   execute {
      call RefreshSecurityCache();
   }
}

command ShowDetails {
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/PermissionSetHandling/PermissionSet?$filter=Role eq $[Role]";
   }
}

command ShowUserDetails {
   mode = SelectedRecords;
   label = "Show Details";
   bulkexecute {
      bulknavigate "page/UserHandling/UserDetail?$filter=Identity eq $[Identity]";
   }
}

--------------------------------- SELECTORS ---------------------------------


---------------------------------- GROUPS -----------------------------------


----------------------------------- LISTS -----------------------------------

list GrantedPermissionSetList for PresObjectGrant {
   label = "Permission Sets granted for '${parent.Description}'";
   field RoleRef;
   field RoleRef.Description {
      size = Medium;
   }

   command RegrantPresObject;
   command RevokePresObject;
   command ShowDetails;
}

list NotGrantedPermissionSetList for FndRole {
   label = "Permission Sets not granted for '${parent.Description}'";
   field Role;
   field Description {
      size = Large;
   }
   field PoId {
      columnvisible = [false];
   }
   command GrantPresObject;
   command ShowDetails;
}

list GrantedUserList for FndUser {
   label = "Users granted for '${parent.Description}'";
   field Identity {
      size = Medium;
   }
   field Description;
   badge Active;
   command ShowUserDetails;
}

---------------------------------- DIALOGS ----------------------------------


-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset FndRoles for FndRole;
entityset FndUsers for FndUser;

------------------------------ ENTITY DETAILS -------------------------------


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------

query PresObjectGrant {
   from = "pres_object_grant";
   lu = PresObjectGrant;
   keys = PoId, Role;
   attribute PoId Text;
   attribute Role Text;
   reference RoleRef(Role) to FndRole(Role) {
      label = "Role";
   }

   action RegrantPresObject;
   action RevokePresObject;
}

query FndRole {
   from = "fnd_role";
   lu = FndRole;
   keys = Role;
   attribute Role Text;
   attribute Description Text;
   attribute PoId Text {
      fetch = "''";
   }

   action GrantPresObject {
      parameter PoId Text;
      ludependencies = PresObjectGrant;
   }
}

query FndUser {
   from = "fnd_user";
   lu = FndUser;
   keys = Identity;
   attribute Identity Text;
   attribute Description Text;
   attribute Active Boolean("TRUE", "FALSE");
}

---------------------------------- ACTIONS ----------------------------------

action RefreshSecurityCache {
   initialcheck none;
   ludependencies = PresObjectGrant, FndRole, FndUser;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetNotGrantedPermissionList List < Entity(FndRole) > {
   parameter PoId Text;
   basedon FndRoles;
   ludependencies = PresObjectGrant;
   where = "Pres_Object_Util_API.Get_Grant_Info(:PoId, role) = 'REVOKED'";
   alterattribute PoId {
      fetch = ":PoId";
   }
}

function GetGrantedUsersList List < Entity(FndUser) > {
   parameter PoId Text;
   basedon FndUsers;
   where = "Security_Sys.Is_Pres_Object_Granted_User(:PoId, identity, 'FALSE') = 'TRUE'";
}

