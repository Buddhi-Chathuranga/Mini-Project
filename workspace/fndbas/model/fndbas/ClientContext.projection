projection ClientContext;
component FNDBAS;
layer Core;
description "Projection to support the Aurena Client with Context information";
category Users, ExternalB2B;

----------------------------- MAIN ENTRY POINTS -----------------------------


@DynamicComponentDependency ACCRUL
entityset CompanyContexts for CompanyContext;

@DynamicComponentDependency WRKSCH
entityset WageClassContexts for WageClassContext {
   context Company(CompanyId);
}

@DynamicComponentDependency INTLED
entityset LedgerContexts for LedgerContext {
   context Company(Company);
}

@DynamicComponentDependency MPCCOM
entityset SiteContexts for SiteContext;

------------------------------ ENTITY DETAILS -------------------------------

@Override
@DynamicComponentDependency ACCRUL
entity CompanyContext using Company {
   crud = Read;
   use attributes = Name;
   where = "EXISTS (SELECT 1 FROM user_finance_auth_pub WHERE company.company = company)";

   //Generic Attributes that have to exists for each context type
   attribute Id Text {
      fetch = "company";
   }
   attribute Description Text {
      fetch = "name";
   }
   attribute DefaultContext Text {
      fetch = "DECODE(User_Finance_API.Get_Default_Company_Func, company ,'TRUE', 'FALSE')";
   }

   //Wage Class Default
   @DynamicComponentDependency WRKSCH
   attribute WageClass Text {
      fetch = "Work_Sched_Assign_API.Get_Wage_Class(company, User_Access_API.Get_User_Emp_No(company), trunc(SYSDATE))";
   }
   //Ledger Default
   @DynamicComponentDependency INTLED
   attribute Ledger Text {
      fetch = "Internal_Ledger_User_API.Get_Default_Ledger(company, Fnd_Session_API.Get_Fnd_User)";
   }
   //Site Default
   @DynamicComponentDependency MPCCOM
   attribute Site Text {
      fetch = "User_Allowed_Site_API.Get_Default_Site()";
   }

   //Specific Attributes for Company
   //Code Parts A-T Name
   attribute CodeAName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'A')";
   }
   attribute CodeBName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'B')";
   }
   attribute CodeCName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'C')";
   }
   attribute CodeDName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'D')";
   }
   attribute CodeEName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'E')";
   }
   attribute CodeFName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'F')";
   }
   attribute CodeGName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'G')";
   }
   attribute CodeHName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'H')";
   }
   attribute CodeIName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'I')";
   }
   attribute CodeJName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'J')";
   }
   attribute CodeKName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'K')";
   }
   attribute CodeLName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'L')";
   }
   attribute CodeMName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'M')";
   }
   attribute CodeNName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'N')";
   }
   attribute CodeOName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'O')";
   }
   attribute CodePName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'P')";
   }
   attribute CodeQName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'Q')";
   }
   attribute CodeRName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'R')";
   }
   attribute CodeSName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'S')";
   }
   attribute CodeTName Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(company, 'T')";
   }

   //Code Parts B-T Used
   attribute CodeBUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'B')";
   }
   attribute CodeCUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'C')";
   }
   attribute CodeDUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'D')";
   }
   attribute CodeEUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'E')";
   }
   attribute CodeFUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'F')";
   }
   attribute CodeGUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'G')";
   }
   attribute CodeHUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'H')";
   }
   attribute CodeIUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'I')";
   }
   attribute CodeJUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'J')";
   }
   attribute CodeKUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'K')";
   }
   attribute CodeLUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'L')";
   }
   attribute CodeMUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'M')";
   }
   attribute CodeNUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'N')";
   }
   attribute CodeOUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'O')";
   }
   attribute CodePUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'P')";
   }
   attribute CodeQUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'Q')";
   }
   attribute CodeRUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'R')";
   }
   attribute CodeSUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'S')";
   }
   attribute CodeTUsed Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_Used_Db(company, 'T')";
   }
   //Fixed Asset Code Part
   attribute FACodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Codepart_Function_Db(company, 'FAACC')";
   }
   //Project Accounting Code Part
   attribute ProjCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Codepart_Function_Db(company, 'PRACC')";
   }
   //Master company
   attribute Master Text {
      fetch = "Company_API.Get_Master_Company_Db(company)";
   }
   //Accounting Currency
   attribute AccCurr Text {
      fetch = "Company_Finance_API.Get_Currency_Code(company)";
   }
   //Parallel Currency
   attribute ParCurr Text {
      fetch = "Company_Finance_API.Get_Parallel_Acc_Currency(company)";
   }
   //Parallel Currency Base
   attribute ParCurrBase Text {
      fetch = "Company_Finance_API.Get_Parallel_Base_Db(company)";
   }

}

@Override
@DynamicComponentDependency WRKSCH
entity WageClassContext using WageClass {
   crud = Read;
   use attributes = WageClassName;
   //where = Company security already included in WageClass base view

   //Generic Attributes that have to exists for each context type
   attribute Id Text {
      fetch = "wage_class";
   }
   attribute Description Text {
      fetch = "wage_class_name";
   }
   attribute DefaultContext Text {
      fetch = "DECODE(Work_Sched_Assign_API.Get_Wage_Class(company_id,
                                                           User_Access_API.Get_User_Emp_No(company_id),
                                                           trunc(SYSDATE)),
                      wage_class, 'TRUE', 'FALSE')";
   }
}

@Override
@DynamicComponentDependency INTLED
entity LedgerContext using InternalLedger {
   crud = Read;
   use attributes = Description;
   where = "EXISTS (SELECT 1 FROM internal_ledger_user_auth_pub WHERE internal_ledger.company = company AND internal_ledger.ledger_id = ledger_id)";

   //Generic Attributes that have to exists for each context type
   attribute Id Text {
      fetch = "ledger_id";
   }
   attribute Description Text {
      fetch = "description";
   }
   attribute DefaultContext Text {
      fetch = "DECODE(Internal_Ledger_User_API.Get_Default_Ledger(company, Fnd_Session_API.Get_Fnd_User), ledger_id, 'TRUE', 'FALSE')";
   }
   //Specific Attributes for Ledger
   //Code Parts B-J Used
   attribute ILCodeBUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'B')";
   }
   attribute ILCodeCUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'C')";
   }
   attribute ILCodeDUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'D')";
   }
   attribute ILCodeEUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'E')";
   }
   attribute ILCodeFUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'F')";
   }
   attribute ILCodeGUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'G')";
   }
   attribute ILCodeHUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'H')";
   }
   attribute ILCodeIUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'I')";
   }
   attribute ILCodeJUsed Text {
      fetch = "Internal_Code_Parts_API.Get_Code_Part_Used_In_Il(company, ledger_id, 'J')";
   }
}

@Override
@DynamicComponentDependency MPCCOM
entity SiteContext using Site {
   crud = Read;
   use attributes = Description;
   where = "EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE site.contract = site)";

   //Generic Attributes that have to exists for each context type
   attribute Id Text {
      fetch = "contract";
   }
   attribute Description Text {
      fetch = "description";
   }

   attribute DefaultContext Text {
      fetch = "DECODE(User_Allowed_Site_API.Get_Default_Site(), contract, 'TRUE', 'FALSE')";
   }

   attribute Company Text {
      fetch = "company";
   }
}
