projection OperationalReports;
component FNDBAS;
layer Core;
description "Operational Reports";
category Users, ExternalB2B;
include fragment ActiveComponentSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ArchiveSet for Archive;
entityset LanguageCodeSet for LanguageCode;

entityset ReportOverviewSet for ReportsOverview;

query ReportsOverview {
   from = "(SELECT rd.report_id, rd.report_title as report_name, rd.lu_name, CASE WHEN rd.report_mode LIKE 'EXCEL%' THEN 'BUSINESS_REPORTER' ELSE 'OPERATIONAL' END as report_type, rd.domain_id as domain_id, rd.domain_description as domain, rd.category_id as category_id, rd.category_description as category, rd.module, 'TRUE' as Schedulable FROM REPORT_DEFINITION rd WHERE rd.show_in_order_reports = 'TRUE' AND Security_SYS.Is_Projection_Available_(Aurena_Report_Metadata_SYS.Get_Projection_Name__(rd.report_id)) = 'TRUE' union SELECT  TO_CHAR(qr.quick_report_id), qr.description, NULL, qr.qr_type_db, qr.domain_id, qr.domain_description, qr.category_id, qr.category_description, NULL, 'FALSE' FROM QUICK_REPORT qr)";
   lu = none;
   keys = ReportId;

   attribute ReportId Text;
   attribute ReportName Text;
   --attribute LuName Text;
   attribute ReportType Enumeration(ReportTypeEnum) {
      required = [false];

   }
   attribute DomainId Number;
   --attribute Domain Text;
   attribute CategoryId Number;
   --attribute Category Text;
   attribute Module Text;
   attribute Schedulable Boolean;
   -- Both Client and Projection Names are the same
   attribute ClientName Text {
      fetch = "Aurena_Report_Metadata_SYS.Get_Projection_Name__(report_id, report_type)";
   }
   attribute CustomPage Text {
      fetch = "Aurena_Report_Metadata_SYS.Get_Custom_Page__(report_id)";
   }

   reference ComponentRef(Module) to ActiveComponent(Module) {
      label = "Component";
   }
   reference DomainIdRef(DomainId) to ReportDomain(DomainId) {
      label = "Domain";
   }
   reference CategoryRef(CategoryId) to ReportCategory(CategoryId) {
      label = "Category";
   }
   --action InitializeTemplate;
}

------------------------------- ENUMERATIONS --------------------------------

enumeration ReportTypeEnum {
   value = "OPERATIONAL" {
      label = "Operational";
   }
   value = "BUSINESS_REPORTER" {
      label = "Business Reporter";
   }
   value = "MS_REPORT" {
      label = "MS Report";
   }
   value = "SQL" {
      label = "SQL Statement";
   }
   value = "QUERY" {
      label = "Query Builder";
   }
   value = "CR" {
      label = "Crystal Reports";
   }
   value = "DASHBOARD" {
      label = "Dashboard";
   }
   value = "WEB_REPORT" {
      label = "Web Report";
   }
}

--------------------------------- STRUCTURE ---------------------------------

structure ReportParameter {
   attribute ParamName          Text;
   attribute TranslatedName     Text;
   attribute ParamValue         Text;
   attribute DataType           Text;
   attribute Flags              Text;
   attribute Status             Text;
   attribute Reference          Text;
   attribute Enumerate          Text;
   attribute Valid              Text;
}

structure LogicalPrinter {
   attribute PrinterId   Text;
   attribute Description Text;
}

structure ReportLayout {
   attribute LayoutId      Text;
   attribute Description   Text;
}

function GetReportParameters List<Structure(ReportParameter)> {
   parameter ReportId Text;
}

function GetReportLayouts List<Text> {
   parameter ReportId Text;
}

function  EnumerateLogicalPrinter List<Structure(LogicalPrinter)>;

function  EnumerateLayout List<Structure(ReportLayout)> {
   parameter ReportId Text;
}

function GetReportTitle Text {
   parameter ReportId Text;
}

function GetQuickReportFileName Text {
   parameter ReportId Text;
}

action CreateNewReport Number {
   initialcheck implementation;
   parameter ReportAttr Text;
   parameter ParameterValues Text;
   parameter DistribList Text;
}
