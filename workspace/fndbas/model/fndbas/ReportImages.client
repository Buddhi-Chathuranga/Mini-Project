--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  191127  subblk  TSMI-68, Created.
--  290923  mabalk  DUXZREP-340, Module List in Report Image Import Assistant shows Deliveries as modules.
-----------------------------------------------------------------------------
client ReportImages;
component FNDBAS;
layer Core;
projection ReportImagesHandling;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   @DynamicComponentDependency FNDADM
   entry NavEntryReportImages parent FndadmNavigator.OperationalReportingFolder at index 1500 {
      label = "Report Images";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form {
   label = "Report Images";
   tabs {
      tab {
         label = "Images";
         list ImageList using ReportImageSet;
      }
      tab {
         label = "Logos";
         list LogoList using ReportLogoSet;
      }
      tab {
         label = "Signatures";
         list SignatureList using ReportSignatureSet;
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------
assistant ImportAssistant using VrtImportFiles {
   label = "Import File";
   savemode = OnLostFocus;
   input(ImageType);
   steps {
      step {
         label = "Select File";
         description = "Please select the file to be imported";
         fileselector {
            enabled = [true];
            multifile = [false];
            init command {
               execute {
                  set component.UploadQueue.AcceptedExtensions = ".JPG,.PNG,.JPEG,.GIF";
               }
            }
            onfileselect {
               execute {
                  set ImageName = component.UploadQueue.FileList;
               }
            }
            label = "Browse";
         }
         group ImageDataGroup;
      }
      final step {

      }
   }

   finish command {
      enabled = [(not component.UploadQueue.IsEmpty and component.UploadQueue.InvalidFileList = "" and ImageName != null and Module != null and ReportId != null and ImageType = "IMAGE") or
      (not component.UploadQueue.IsEmpty and component.UploadQueue.InvalidFileList = "" and ImageName != null and(ImageType = "SIGN" or ImageType = "LOGO"))];
      label = "Import";
      execute {
         call CheckFile(ImageName, ImageType, ReportId) into FileStatus;
         set Overwrite = 0;
         if [FileStatus = 1] {
            confirm("File ${ImageName} already exists. Overwrite?") {
               when OK {
                  set Overwrite = 1;
                  upload "VrtImportFiles(Objkey=$[Objkey])/FileData";
                  call OverwriteFile(Objkey);
               }
               when CANCEL {
                  exit OK;
               }
            }
         }
         if [Overwrite = 0] {
            upload "VrtImportFiles(Objkey=$[Objkey])/FileData";
            call UploadFile(Objkey);
         }
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}
--------------------------------- COMMANDS ----------------------------------
command AddImageCommand for ReportImages {
   label = "Import Image";
   mode = Global;
   execute {
      assistant ImportAssistant("IMAGE") {
         when YES {
            success("Image uploaded");
         }
      }
   }
}

command AddLogoCommand for ReportLogos {
   label = "Import Logo";
   mode = Global;
   execute {
      assistant ImportAssistant("LOGO") {
         when YES {
            success("Logo uploaded");
         }
      }
   }
}

command AddSignatureCommand for ReportSignatures {
   label = "Import Signature";
   mode = Global;
   execute {
      assistant ImportAssistant("SIGN") {
         when YES {
            success("Signature uploaded");
         }
      }
   }
}

command ExportImageCommand for ReportImages {
   mode = SelectedRecords;
   label = "Export Image(s)";
   execute {
      download FileData from ReportImageSet(ReportId, ImageName);
   }
}

command ExportLogoCommand for ReportLogos {
   mode = SelectedRecords;
   label = "Export Logo(s)";
   execute {
      download FileData from ReportLogoSet(ImageName);
   }
}

command ExportSignatureCommand for ReportSignatures {
   mode = SelectedRecords;
   label = "Export Signature(s)";
   execute {
      download FileData from ReportSignatureSet(ImageName);
   }
}

command PreventOverwriteImageCommand for ReportImages {
   mode = SelectedRecords;
   label = "Prevent Overwrite";
   enabled = [PreventOverwrite = false];
   bulkexecute {
      bulkcall PreventOverwriteImage();
   }
}

command AllowOverwriteImageCommand for ReportImages {
   mode = SelectedRecords;
   label = "Allow Overwrite";
   enabled = [PreventOverwrite = true];
   bulkexecute {
      bulkcall EnableOverwriteImage();
   }
}

command PreventOverwriteLogoCommand for ReportLogos {
   mode = SelectedRecords;
   label = "Prevent Overwrite";
   enabled = [PreventOverwrite = false];
   bulkexecute {
      bulkcall PreventOverwriteLogo();
   }
}

command AllowOverwriteLogoCommand for ReportLogos {
   mode = SelectedRecords;
   label = "Allow Overwrite";
   enabled = [PreventOverwrite = true];
   bulkexecute {
      bulkcall EnableOverwriteLogo();
   }
}

command PreventOverwriteSignatureCommand for ReportSignatures {
   mode = SelectedRecords;
   label = "Prevent Overwrite";
   enabled = [PreventOverwrite = false];
   bulkexecute {
      bulkcall PreventOverwriteSignature();
   }
}

command AllowOverwriteSignatureCommand for ReportSignatures {
   mode = SelectedRecords;
   label = "Allow Overwrite";
   enabled = [PreventOverwrite = true];
   bulkexecute {
      bulkcall EnableOverwriteSignature();
   }
}

command DeleteImageCommand for ReportImages {
   label = "Delete";
   icon = "delete";
   style = IconOnly;

   execute {
      confirm("Please confirm that you wish to delete this record") {
         when OK {
            call DeleteImage();
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command DeleteLogoCommand for ReportLogos {
   label = "Delete";
   icon = "delete";
   style = IconOnly;
   execute {
      confirm("Please confirm that you wish to delete this record") {
         when OK {
            call DeleteLogo();
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command DeleteSignCommand for ReportSignatures {
   label = "Delete";
   icon = "delete";
   style = IconOnly;
   execute {
      confirm("Please confirm that you wish to delete this record") {
         when OK {
            call DeleteSign();
         }
         when CANCEL {
            exit;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
selector ReportSelector for ReportDefinition {
   label = "${ReportTitle}";
   field ReportTitle;
   field ReportId;
}

@Override
selector ModuleSelector for Module {
   orderby = Module asc;
}
---------------------------------- GROUPS -----------------------------------
group ImageDataGroup for VrtImportFile {
   field ImageName;
   lov ModuleRef with ModuleSelector using ModuleSet {
      label = "Module";
      description = ModuleRef.Name;
      visible = [ImageType = "IMAGE"];
      required = [ImageType = "IMAGE"];
   }
   lov ReportIdRef with ReportSelector {
      label = "Report";
      description = ReportIdRef.ReportTitle;
      visible = [ImageType = "IMAGE"];
      required = [ImageType = "IMAGE"];
      size = Large;
   }
   field PreventOverwrite;
}
----------------------------------- LISTS -----------------------------------
list ImageList for ReportImages {
   card ImageCard;

   lov ModuleRef with ModuleSelector {
      label = "Module";
      description = ModuleRef.Name;
      editable = [false];
   }
   lov ReportIdRef with ReportSelector {
      label = "Report";
      description = ReportIdRef.ReportTitle;
      size = Large;
   }
   field ImageName {
      size = Large;
   }
   field DateImported {
      editable = [false];
   }
   field PreventOverwrite;
   command AddImageCommand;
   command ExportImageCommand;
   command PreventOverwriteImageCommand;
   command AllowOverwriteImageCommand;
}

list LogoList for ReportLogos {
   card LogoCard;

   field ImageName {
      size = Large;
   }
   field DateImported {
      editable = [false];
   }
   field PreventOverwrite;
   command AddLogoCommand;
   command ExportLogoCommand;
   command PreventOverwriteLogoCommand;
   command AllowOverwriteLogoCommand;
}

list SignatureList for ReportSignatures {
   card SignatureCard;

   field ImageName {
      size = Large;
   }
   field DateImported {
      editable = [false];
   }
   field PreventOverwrite;
   command AddSignatureCommand;
   command ExportSignatureCommand;
   command PreventOverwriteSignatureCommand;
   command AllowOverwriteSignatureCommand;
}

----------------------------------- CARDS -----------------------------------
card ImageCard for ReportImages {
   label = "${ImageName}";
   imagefield {
      imagedata Image;
      size = Small;
   }
   lov ModuleRef with ModuleSelector {
      label = "Module";
      description = ModuleRef.Name;
   }
   lov ReportIdRef with ReportSelector {
      label = "Report";
      description = ReportIdRef.ReportTitle;
   }
   field DateImported;
   field PreventOverwrite;
   command DeleteImageCommand;
}

card LogoCard for ReportLogos {
   label = "${ImageName}";
   imagefield {
      imagedata Image;
      size = Small;
   }
   field DateImported;
   field PreventOverwrite;
   command DeleteLogoCommand;
}

card SignatureCard for ReportSignatures {
   label = "${ImageName}";
   imagefield {
      imagedata Image;
      size = Small;
   }
   field DateImported;
   field PreventOverwrite;
   command DeleteSignCommand;
}

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
