client Keystores;
component FNDBAS;
layer Core;
projection KeystoresHandling;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   @DynamicComponentDependency FNDADM
   entry KeystoresNavEntry parent FndAdmSecurityNavigator.SecurityFolder at index 13 {
      label = "Keystores";
      page List;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page List using KeystoreSet {
   label = "Keystores";
   list Keystores;
}


--------------------------------- COMMANDS ----------------------------------
command ImportUserCertificateCommand for Keystore {
   label = "Import User Certificate";
   mode = Global;
   execute {
      assistant ImportUserCertificateAssistant("USER", "", "", "")
         {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }

   }
}
command ImportKeystoreFileCommand for Keystore {
   label = "Import Keystore File";
   mode = Global;
   execute {
      assistant ImportUserCertificateAssistant("KEYSTORE", "", "*", "")
         {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }

   }
}
command UpdateKeystoreCommand for Keystore {
   label = "Update Keystore";
   execute {
      assistant ImportUserCertificateAssistant("BOTH", KeystoreId, UserName, Description)
         {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }

   }
}

command Ok for KeystoreVirtual {
   enabled = [(UserName != null or KeystoreId != null) and(not component.UploadQueue.IsEmpty or GenerateSelfSignedCert) or OldDescription != Description];
   variable VarSuccess Text;

   execute {
      upload "KeystoreVirtualSet(Objkey=$[Objkey])/FileData";
      if[Password = null] {
         call IsPasswordProtected(Objkey, FileName) into ShowPassword;
         if[ShowPassword = "true"] {
            info("This file is password protected. Please also provide the password.");

         }
         else {
            call ImportKeystore(Objkey) into VarSuccess;
         }
      }
      else {
         call ImportKeystore(Objkey) into VarSuccess;
      }
      if[VarSuccess = "true"] {
         exit OK;
      }
   }
}
--------------------------------- SELECTORS ---------------------------------


---------------------------------- GROUPS -----------------------------------
group KeystoreGroup for KeystoreVirtual {
   label = "Keystore";
   field FndUserRef {
      label = "User";
      visible = [Type != "KEYSTORE" and UserName != "*"];

   }
   field KeystoreId {
      visible = [Type != "USER" and UserName = "*"];

   }
   field Description {
      multiline = true;
   }
}

group CertificateFileGroup for KeystoreVirtual {
   label = "Certificate File";
   field GenerateSelfSignedCert {
      label = "Generate Self-Signed Certificate";
   }

}

group BrowseFileGroup for KeystoreVirtual {
   label = "";
   visible = [not component.UploadQueue.IsEmpty];

   field FileName {
      editable = [false];
      size = Large;

   }
   field Password {
      format = password;

   }
}
----------------------------------- LISTS -----------------------------------
list Keystores for Keystore {

   multiselect = [false];
   field KeystoreId {
      label = "Keystore ID";
   }
   field UserName;
   field Description;
   field Type;
   field ExpireDate;
   field FileName {
      size = Large;

   }

   command ImportUserCertificateCommand;
   command ImportKeystoreFileCommand;
   command UpdateKeystoreCommand;
}

-------------------------------- ASSISTANTS ---------------------------------
assistant ImportUserCertificateAssistant using KeystoreVirtualSet {
   label = "";
   input(Type, KeystoreId, UserName, Description);
   init command {
      execute {
         set OldDescription = Description;
      }
   }
   singlestep {
      group KeystoreGroup;

      group CertificateFileGroup;
      fileselector {
         multifile = [false];
         enabled = [not GenerateSelfSignedCert];

         init command {
            execute {
               set component.UploadQueue.AcceptedExtensions = ".pfx,.p12,.cer,.crt,.cert,.pem,.key";
            }
         }
         onfileselect {

            execute {
               if[component.UploadQueue.Count = 1] {
                  set FileName = component.UploadQueue.FileList;
               }
            }
         }
         label = "Browse...";
      }
      group BrowseFileGroup;

   }
   command Ok;
   command Cancel;
}


-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------
