projection AddressLayout;
component FNDBAS;
layer Core;
description "Address Presentation";
category Users, ExternalB2B;

----------------------------- MAIN ENTRY POINTS -----------------------------
@DynamicComponentDependency ENTERP
entityset AddressPresentations for AddressPresentation;

@DynamicComponentDependency ENTERP
function ListHiddenAttributes Text {
   parameter CountryCode Text;
}

@DynamicComponentDependency ENTERP
function FilterState List<Entity(StateCodeLov)> {
   parameter CountryCode Text {
      required = [false];
   }
   where = "country = :CountryCode OR :CountryCode IS NULL";
}

@DynamicComponentDependency ENTERP
function FilterCounty List<Entity(CountyCodeLov)> {
   parameter CountryCode Text {
      required = [false];
   }
   parameter State Text {
      required = [false];
   }
   where = "(country = :CountryCode OR :CountryCode IS NULL) AND
            (state_code = :State OR state_name = :State OR :State IS NULL OR :State = '*')";
}

@DynamicComponentDependency ENTERP
function FilterCity List<Entity(CityCodeLov)> {
   parameter CountryCode Text {
      required = [false];
   }
   parameter State Text {
      required = [false];
   }
   parameter County Text {
      required = [false];
   }
   where = "(country = :CountryCode OR :CountryCode IS NULL) AND
            (state_code = :State OR state_name = :State OR :State IS NULL OR :State = '*') AND
            (county_code = :County OR county_name = :County OR :County IS NULL OR :County = '*')";
}

@DynamicComponentDependency ENTERP
function FilterZipCode List<Entity(ZipCodeLov)> {
   parameter CountryCode Text {
      required = [false];
   }
   parameter State Text {
      required = [false];
   }
   parameter County Text {
      required = [false];
   }
   parameter City Text {
      required = [false];
   }
   where = "(country = :CountryCode OR :CountryCode IS NULL) AND
            (state_code = :State OR state_name = :State OR :State IS NULL OR :State = '*') AND
            (county_code = :County OR county_name = :County OR :County IS NULL OR :County = '*') AND
            (city_code = :City OR city_name = :City OR :City IS NULL OR :City = '*')";
}

------------------------------ ENTITY DETAILS -------------------------------

@Override
@DynamicComponentDependency ENTERP
entity AddressPresentation {
   crud = Read;
   use attributes = DefaultDisplayLayout, DisplayLayout;
}

@Override
@DynamicComponentDependency APPSRV
entity IsoCountry {
   use attributes = Description, FullName;
}

structure AddressDialogStruct {
   attribute Address1 Text {
      label = "Address 1";
   }
   attribute Address2 Text {
      label = "Address 2";
   }
   attribute Address3 Text {
      label = "Address 3";
   }
   attribute Address4 Text {
      label = "Address 4";
   }
   attribute Address5 Text {
      label = "Address 5";
   }
   attribute Address6 Text {
      label = "Address 6";
   }
   attribute City Text;
   attribute County Text;
   attribute State Text;
   attribute ZipCode Text;
   attribute CountryCode Text;
   attribute Country Text;

   @DynamicComponentDependency APPSRV
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      copy Description to Country;
   }

   // Temporary hack while waiting for a proper solution - TEUXX-15075 (Free text field with suggestions values from a reference)
   // The references below should only be used for generating metadata. The actual value that should be fetched will be handled within client-fw
   attribute Dummy Text;
   @DynamicComponentDependency ENTERP
   reference StateRef(Dummy) to StateCodeLov(StateCode) {
      label = "State";
      copy StateCode to State;
   }
   @DynamicComponentDependency ENTERP
   reference CountyRef(Dummy) to CountyCodeLov(CountyCode) {
      label = "County";
      copy StateCode to State;
      copy CountyCode to County;
   }
   @DynamicComponentDependency ENTERP
   reference CityRef(Dummy) to CityCodeLov(CityCode) {
      label = "City";
      copy StateCode to State;
      copy CountyCode to County;
      copy CityCode to City;
   }
   @DynamicComponentDependency ENTERP
   reference ZipCodeRef(Dummy) to ZipCodeLov(ZipCode) {
      label = "Zip Code";
      copy StateCode to State;
      copy CountyCode to County;
      copy CityCode to City;
      copy ZipCode to ZipCode;
   }

   @DynamicComponentDependency ENTERP
   reference PresentationStyleRef(CountryCode) to EnterpAddressCountry(CountryCode);
}

@Override
@DynamicComponentDependency ENTERP
query StateCodeLov {
   from = "state_code_lov";
   keys = Country, StateCode;
   attribute Country Text;
   attribute StateCode Text;
   attribute StateName Text;
}

@DynamicComponentDependency ENTERP
query CountyCodeLov {
   from = "county_code1_lov";
   keys = Country, StateCode, CountyCode;
   attribute Country Text;
   attribute StateCode Text;
   attribute StateName Text;
   attribute CountyCode Text;
   attribute CountyName Text;
}

@DynamicComponentDependency ENTERP
query CityCodeLov {
   from = "city_code1_lov";
   keys = Country, StateCode, CountyCode, CityCode;
   attribute Country Text;
   attribute StateCode Text;
   attribute StateName Text;
   attribute CountyCode Text;
   attribute CountyName Text;
   attribute CityCode Text;
   attribute CityName Text;
}

@DynamicComponentDependency ENTERP
query ZipCodeLov {
   from = "zip_code1_lov";
   keys = Country, StateCode, CountyCode, CityCode, ZipCode;
   attribute Country Text;
   attribute StateCode Text;
   attribute StateName Text;
   attribute CountyCode Text;
   attribute CountyName Text;
   attribute CityCode Text;
   attribute CityName Text;
   attribute ZipCode Text;
}