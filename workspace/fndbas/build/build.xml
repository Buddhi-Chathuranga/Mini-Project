<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Server" default="build" basedir=".">
   <!-- Top build script -->
   <fail message="Please build using Ant 1.8.2 or higher.">
      <condition><not><antversion atleast="1.8.2"/></not></condition>
   </fail>

   <property file="private.build.properties"/>
   <property file="build.properties"/>

   <condition property="compile">
       <not><isset property="delivery"/></not>
   </condition>
    <!-- Condition to check if delivery needs compiling -->
   <condition property="compile">
      <resourcecount when="greater" count="0">
         <fileset dir="${delivery}/source" excludes="*/database/ */projection/ */replication/ */client/ */framework/database/ */framework/ee-fw/" erroronmissingdir="false"/>
      </resourcecount>
   </condition>
   <available property="compile" file="${delivery}/solutionset.yaml"/>   
   <available property="compile" file="${delivery}/build"/>
   <available property="compile" file="${delivery}/installer"/>
   <available property="compile" file="${delivery}/ifsinstaller"/>  

   <!-- ============================================================== -->
   <!--  Tasks                                                         -->
   <!-- ============================================================== -->

   <taskdef resource="net/sf/antcontrib/antlib.xml"/>

   <!-- ============================================================== -->
   <!--  Targets                                                       -->
   <!-- ============================================================== -->

   <!-- ============================================================== -->
   <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
   <!-- ***** Main Targets ***** -->
   <!-- The only targets called from _ant_compile.cmd are: build (default) and clean-build -->

   <target name="build" if="compile"> 
      <antcall target="do-build"/> 
   </target> 
   <target name="do-build" depends="-declare,-init,-setup,-pre-compile,-compile,-post-compile,-copy-to-delivery,-clean-temp">
   </target> 

   <target name="clean" depends="-clean-all"/>

   <target name="clean-build" depends="clean,build"/>

   <!-- ***** Help Targets ***** -->

   <target name="-declare">
      <if>
         <available file="../../fndbas/model/fndbas" type="dir"/>
         <then>
            <echo message="Development Build..."/>
            <property name="development"       value="TRUE"/>
            <property name="server-home"       value="../../../server"/>
            <property name="build.root"        value="${basedir}/../.."/>
            <property name="dev.root"          value="../../"/>
			<property name="unzipped.codegenjar.location" value="build_home/build/IfsBuildTasks/developer.studio.libs"/>
			<property name="local.codegenjarzip.location" value="${dev.root}/../build/local.developer.studio.libs"/>
			<property name="my.developer.studio.libs" value="${local.codegenjarzip.location}/${unzipped.codegenjar.location}"/>
         </then>
         <else>
            <echo message="Installation Build..."/>
            <property name="development"       value="FALSE"/>
            <property name="dev.root"          value="./"/>
            <property name="build.root"        value="${basedir}/.."/>
            <property name="server-home"       value="${build.root}/server"/>
			<property name="my.developer.studio.libs" value="${developer.studio.libs}"/>
         </else>
      </if>
	  <!-- ws.build ? check -->
      <property name="ws.build"               location="${dev.root}/../build/classes"/>
      <property name="j2ee.deploy"            value="${server-home}/apps"/>
      <property name="fndbas.src"             value="../source/fndbas"/>
      <property name="tmp.dir"                value="${dev.root}/temp"/>
   </target>

   <target name="-clean-all" depends="-declare">
      <!--echo>Clean All</echo-->
      <if>
         <equals arg1="${development}" arg2="FALSE" />
         <then>
             <parallel>
               <delete includeemptydirs="true" quiet="true">
                  <fileset dir="${basedir}/../build/framework"/>
               </delete>
               <delete dir="${tmp.dir}"/> <!-- in case it wasn't cleaned properly in the prior run -->
			   <!--
               <delete dir="${server-home}/apps"/>
			   -->
            </parallel>
         </then>
      </if>
      <property name="compile" value="true"/>
   </target>

   <target name="-setup" depends="-declare">
		<if>
			<equals arg1="${development}" arg2="TRUE" />
			<then>
				<echo>Unpacking Code generation zip for Developer Studio</echo>
				<unzip src="${build.root}/fndbas/source/fndbas/zip/ifs-code-generator.zip" dest="${local.codegenjarzip.location}">
					<patternset>
						<include name="**/*.jar"/>
					</patternset>
				</unzip>
			</then>
		</if>

	   <taskdef name="createVersionFile" classname="ifs.dev.buildtasks.apps10.CreateVersionFileTask">
		  <classpath>
			 <fileset dir="${my.developer.studio.libs}">
				<include name="ifs-dev-buildtasks.jar"/>
			 </fileset>
		  </classpath>
	   </taskdef>

	   <taskdef name="createBuildHomeIndex" classname="ifs.dev.buildtasks.apps10.CreateBuildHomeIndex">
		  <classpath>
			 <fileset dir="${my.developer.studio.libs}">
				<include name="ifs-dev-buildtasks.jar"/>
			 </fileset>
		  </classpath>
	   </taskdef>
	   
   </target>

   <target name="-init" depends="-declare">
      <!-- Create a timestamp property-->
      <tstamp>
        <format property="delivery.time" pattern="yyyy-MM-dd_kkmmssSSS"
                offset="-1" unit="second"/>
      </tstamp>
      <pathconvert property="build.home">
         <path path="${basedir}/.."/>
      </pathconvert>

      <path id="classpath">
         <pathelement location="${ws.build}"/>
      </path>

       <delete dir="${tmp.dir}"/>
      <mkdir dir="${tmp.dir}"/>
	  
	  <!-- Copy solutionset.yaml to ifsinstaller, always -->
	  <copy file="${build.home}/solutionset.yaml" todir="${build.home}/ifsinstaller" failonerror="false"/>	  
   </target>

   <target name="-compile">
      <mkdir dir="${ws.build}"/>
   </target>

   <target name="create-build-home-index" depends="-declare,-setup">
      <echo>Indexing relevant files located in build home for Developer Studio</echo>
      <property name="bh.index.name" value="build_home_index"/>
      <delete dir="${tmp.dir}/${bh.index.name}"/>
      <mkdir  dir="${tmp.dir}/${bh.index.name}"/>
      <createBuildHomeIndex buildHome="${build.root}" outputDir="${tmp.dir}/${bh.index.name}"/>
      <zip destfile="${build.root}/${bh.index.name}.zip"  basedir="${tmp.dir}/${bh.index.name}"/>
      <!-- cleanup -->
      <delete dir="${tmp.dir}/${bh.index.name}"/>
   </target>

   <target name="-pre-compile">
      <!-- fndbas framework -->
      <subant target="pre-compile" inheritall="true">
         <property name="development" value="${development}"/>
         <property name="dev.root"    value="${dev.root}"/>
         <fileset dir="${fndbas.src}" includes="build.xml"/>
      </subant>
   </target>

   <target name="-post-compile"><!-- description="post compile"-->
      <!-- fndbas framework -->
      <subant target="post-compile">
         <property name="development"     value="${development}"/>
         <property name="dev.root"        value="${dev.root}"/>
         <fileset dir="${fndbas.src}"     includes="build.xml"/>
      </subant>
   </target>


   <target name="-copy-to-delivery" if="delivery">
      <echo>*** Copying files changed after: ${delivery.time}</echo>
      <echo>*** from ${build.home}</echo>

	  <!-- installer - - >
	  <copy todir="${delivery}" overwrite="true" preservelastmodified="true" failonerror="true">
		<fileset dir="${build.home}" includes="installer/**">
		   <and>
			  <type type="file"/>
			  <date datetime="${delivery.time}" pattern="yyyy-MM-dd_kkmmssSSS" when="after"/>
		   </and>
		</fileset>
	  </copy -->

	  <!-- ifsinstaller -->
	  <copy todir="${delivery}" overwrite="true" preservelastmodified="true" failonerror="true">
		<fileset dir="${build.home}" includes="ifsinstaller/**">
		   <and>
			  <type type="file"/>
			  <date datetime="${delivery.time}" pattern="yyyy-MM-dd_kkmmssSSS" when="after"/>
		   </and>
		</fileset>
	  </copy>	  

   </target>

   <target name="-clean-temp">
      <delete dir="${tmp.dir}"/>
   </target>

</project>
