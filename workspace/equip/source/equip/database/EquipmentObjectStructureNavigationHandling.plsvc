-----------------------------------------------------------------------------
--
--  Logical unit: EquipmentObjectStructureNavigationHandling
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
-- ----------  ------  ---------------------------------------------------------
-- 2019-05-17  SHEPLK  SAUXXW4-18433, Handle simple tree navigation from other pages to Equipment object navigator
-- 2021-05-04  LASSLK  AM21R2-1339, Modified the Get_Navigation_Url___ 
-- 2021-05-07  RUANLK  AM21R2-1293, Modified the Get_Navigation_Url___
-----------------------------------------------------------------------------

layer Core;

----

FUNCTION Get_Default_Values_For_Page_Filter___ RETURN Nav_Page_Filter_Structure_Rec
IS
   page_filter_values_ Nav_Page_Filter_Structure_Rec;
BEGIN
	page_filter_values_.mch_code              := NULL;
   page_filter_values_.contract              := NULL;
   page_filter_values_.equipment_object_seq  := NULL;
   page_filter_values_.structure_in_tree     := 'F';
   
   RETURN page_filter_values_;
END Get_Default_Values_For_Page_Filter___;

/*
FUNCTION Get_Equipment_Objects_Filtered___(
   mch_code_          IN VARCHAR2,
   contract_          IN VARCHAR2,
   structure_in_tree_ IN VARCHAR2) RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr();

   CURSOR get_function_objects IS
      SELECT eq_object.*
        FROM equipment_object_uiv eq_object
       WHERE eq_object.sup_mch_code = mch_code_
         AND eq_object.sup_contract = contract_;

   CURSOR get_location_objects IS
      SELECT eq_object.*
        FROM equipment_object_uiv eq_object
       WHERE eq_object.location_mch_code = mch_code_
         AND eq_object.location_contract = contract_;

   CURSOR get_from_objects IS
      SELECT eq_object.*
        FROM equipment_object_uiv eq_object
       WHERE eq_object.from_mch_code = mch_code_
         AND eq_object.from_contract = contract_;

   CURSOR get_to_objects IS
      SELECT eq_object.*
        FROM equipment_object_uiv eq_object
       WHERE eq_object.to_mch_code = mch_code_
         AND eq_object.to_contract = contract_;

   CURSOR get_process_objects IS
      SELECT eq_object.*
        FROM equipment_object_uiv eq_object
       WHERE eq_object.process_mch_code = mch_code_
         AND eq_object.process_contract = contract_;

   CURSOR get_pipe_objects IS
      SELECT eq_object.*
        FROM equipment_object_uiv eq_object
       WHERE eq_object.pipe_mch_code = mch_code_
         AND eq_object.pipe_contract = contract_;

   CURSOR get_circuit_objects IS
      SELECT eq_object.*
        FROM equipment_object_uiv eq_object
       WHERE eq_object.circuit_mch_code = mch_code_
         AND eq_object.circuit_contract = contract_;
BEGIN

   IF structure_in_tree_ = 'L' THEN
      FOR rec_ IN get_location_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'R' THEN
   
      FOR rec_ IN get_from_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'T' THEN
   
      FOR rec_ IN get_to_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   
   ELSIF structure_in_tree_ = 'P' THEN
   
      FOR rec_ IN get_process_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   
   ELSIF structure_in_tree_ = 'S' THEN
   
      FOR rec_ IN get_pipe_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   
   ELSIF structure_in_tree_ = 'E' THEN
   
      FOR rec_ IN get_circuit_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSE
   
      FOR rec_ IN get_function_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;

   RETURN base_collection_;
END Get_Equipment_Objects_Filtered___;
*/

FUNCTION Get_Navigation_Url___ (
   equipment_object_seq_   IN NUMBER,
   navigating_form_        IN VARCHAR2,
   type_of_obj_            IN VARCHAR2,
   structure_in_tree_      IN VARCHAR2 ) RETURN CLOB
IS
   first_iter_     NUMBER;
   navigation_url_ VARCHAR2(32000);
   page_           VARCHAR2(200);
   inv_url_        EXCEPTION;
   objkey_         VARCHAR2(50);
   
   CURSOR get_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       WHERE functional_object_seq = equipment_object_seq_;
   
   CURSOR get_location_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       WHERE location_object_seq = equipment_object_seq_;
   
   CURSOR get_from_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       WHERE from_object_seq = equipment_object_seq_;
   
   CURSOR get_to_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       WHERE to_object_seq = equipment_object_seq_;
   
   CURSOR get_process_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       WHERE process_object_seq = equipment_object_seq_;
   
   CURSOR get_pipe_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       WHERE pipe_object_seq = equipment_object_seq_;
   
   CURSOR get_circuit_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       WHERE circuit_object_seq = equipment_object_seq_;
   
   CURSOR get_all_pipe_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       START WITH pipe_object_seq = equipment_object_seq_
      CONNECT BY PRIOR equipment_object_seq = pipe_object_seq;
   
   CURSOR get_all_function_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       START WITH functional_object_seq = equipment_object_seq_
      CONNECT BY PRIOR equipment_object_seq = functional_object_seq;
   
   CURSOR get_all_location_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       START WITH location_object_seq = equipment_object_seq_
      CONNECT BY PRIOR equipment_object_seq = location_object_seq;
   
   CURSOR get_all_from_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       START WITH from_object_seq = equipment_object_seq_
      CONNECT BY PRIOR equipment_object_seq = from_object_seq;
   
   CURSOR get_all_to_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       START WITH to_object_seq = equipment_object_seq_
      CONNECT BY PRIOR equipment_object_seq = to_object_seq;
   
   CURSOR get_all_process_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       START WITH process_object_seq = equipment_object_seq_
      CONNECT BY PRIOR equipment_object_seq = process_object_seq;
   
   CURSOR get_all_circuit_obj IS
      SELECT equipment_object_seq
        FROM EQUIPMENT_OBJECT_UIV
       START WITH circuit_object_seq = equipment_object_seq_
      CONNECT BY PRIOR equipment_object_seq = circuit_object_seq;
   
   $IF Component_Pm_SYS.INSTALLED $THEN
      CURSOR get_all_function_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            and ((equipment_object_seq = equipment_object_seq_) or
                ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                     FROM Equipment_All_Object_UIV
                    START WITH functional_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR equipment_object_seq = functional_object_seq)));
      
      CURSOR get_all_location_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            and ((equipment_object_seq = equipment_object_seq_) or
                ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                     FROM Equipment_All_Object_UIV
                    START WITH location_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR equipment_object_seq = location_object_seq)));
      
      CURSOR get_all_from_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            and ((equipment_object_seq = equipment_object_seq_) or
                ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                     FROM Equipment_All_Object_UIV
                    START WITH from_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR equipment_object_seq = from_object_seq)));
      
      CURSOR get_all_to_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            and ((equipment_object_seq = equipment_object_seq_) or
                ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                     FROM Equipment_All_Object_UIV
                    START WITH to_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR equipment_object_seq = to_object_seq)));
      
      CURSOR get_all_process_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            and ((equipment_object_seq = equipment_object_seq_) or
                ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                     FROM Equipment_All_Object_UIV
                    START WITH process_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR equipment_object_seq = process_object_seq)));
      
      CURSOR get_all_pipe_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            and ((equipment_object_seq = equipment_object_seq_) or
                ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                     FROM Equipment_All_Object_UIV
                    START WITH pipe_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR equipment_object_seq = pipe_object_seq)));
      
      CURSOR get_all_circuit_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            and ((equipment_object_seq = equipment_object_seq_) or
                ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                     FROM Equipment_All_Object_UIV
                    START WITH circuit_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR equipment_object_seq = circuit_object_seq)));
      
      CURSOR get_std_pm IS
         SELECT pm.pm_no, pm.pm_revision
           FROM Pm_Action_UIV pm
          WHERE objstate IN ('Active', 'Preliminary')
            AND (equipment_object_seq = equipment_object_seq_);
      
      CURSOR get_maint_plan IS
         SELECT  
         DISTINCT pm.pm_no, pm.pm_revision
           FROM PM_ACTION_CAL_PLAN pm
          WHERE equipment_object_seq = equipment_object_seq_;
      
   $END
   $IF Component_Wo_SYS.INSTALLED $THEN
      CURSOR get_active_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE equipment_object_seq = equipment_object_seq_;
      
      CURSOR get_all_active_function_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                    FROM EQUIPMENT_OBJECT_UIV
                   START WITH equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR equipment_object_seq = functional_object_seq));
      
      CURSOR get_all_active_location_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                    FROM EQUIPMENT_OBJECT_UIV
                   START WITH equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR equipment_object_seq = location_object_seq));
      
      CURSOR get_all_active_from_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                    FROM EQUIPMENT_OBJECT_UIV
                   START WITH equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR equipment_object_seq = from_object_seq));
      
      CURSOR get_all_active_to_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                    FROM EQUIPMENT_OBJECT_UIV
                   START WITH equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR equipment_object_seq = to_object_seq));
      
      CURSOR get_all_active_process_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                    FROM EQUIPMENT_OBJECT_UIV
                   START WITH equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR equipment_object_seq = process_object_seq));
      
      CURSOR get_all_active_pipe_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                    FROM EQUIPMENT_OBJECT_UIV
                   START WITH equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR equipment_object_seq = pipe_object_seq));
      
      CURSOR get_all_active_circuit_wo IS
         SELECT wo.wo_no
           FROM ACTIVE_SEPARATE_OVERVIEW wo
          WHERE ((equipment_object_seq) IN
                (SELECT equipment_object_seq
                    FROM EQUIPMENT_OBJECT_UIV
                    START WITH equipment_object_seq = equipment_object_seq_
                    CONNECT BY PRIOR equipment_object_seq = circuit_object_seq));
      
      CURSOR get_all_hist_wo IS
         SELECT wo.wo_no
           FROM HISTORICAL_SEPARATE_OVERVIEW wo
          WHERE equipment_object_seq = equipment_object_seq_ ;
      
      CURSOR get_active_work_task IS
         SELECT jt.task_seq
         FROM JT_TASK_UIV jt
         WHERE jt.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND jt.actual_obj_conn_rowkey IN (SELECT e.objkey FROM equipment_object_uiv e WHERE e.equipment_object_seq = equipment_object_seq_)
         AND jt.objstate NOT IN ('FINISHED', 'CANCELLED');
         
      CURSOR get_all_active_function_work_task IS
         SELECT t.task_seq
        FROM Jt_Task_Uiv t
       WHERE t.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND t.objstate NOT IN ('FINISHED', 'CANCELLED')
         AND (t.duplicate_type_db = 'MASTER' OR t.duplicate_type_db IS NULL)
         AND t.actual_obj_conn_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                 CONNECT BY PRIOR e.equipment_object_seq = e.functional_object_seq);
      
      CURSOR get_all_active_location_work_task IS
         SELECT t.task_seq
        FROM Jt_Task_Uiv t
       WHERE t.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND t.objstate NOT IN ('FINISHED', 'CANCELLED')
         AND (t.duplicate_type_db = 'MASTER' OR t.duplicate_type_db IS NULL)
         AND t.actual_obj_conn_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                   START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.location_object_seq);
      
      CURSOR get_all_active_from_work_task IS
         SELECT t.task_seq
        FROM Jt_Task_Uiv t
       WHERE t.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND t.objstate NOT IN ('FINISHED', 'CANCELLED')
         AND (t.duplicate_type_db = 'MASTER' OR t.duplicate_type_db IS NULL)
         AND t.actual_obj_conn_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                   START WITH e.equipment_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR e.equipment_object_seq = e.from_object_seq);
      
      CURSOR get_all_active_to_work_task IS
         SELECT t.task_seq
        FROM Jt_Task_Uiv t
       WHERE t.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND t.objstate NOT IN ('FINISHED', 'CANCELLED')
         AND (t.duplicate_type_db = 'MASTER' OR t.duplicate_type_db IS NULL)
         AND t.actual_obj_conn_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                   START WITH e.equipment_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR e.equipment_object_seq = e.to_object_seq);
      
      CURSOR get_all_active_pipe_work_task IS
         SELECT t.task_seq
        FROM Jt_Task_Uiv t
       WHERE t.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND t.objstate NOT IN ('FINISHED', 'CANCELLED')
         AND (t.duplicate_type_db = 'MASTER' OR t.duplicate_type_db IS NULL)
         AND t.actual_obj_conn_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                   START WITH e.equipment_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR e.equipment_object_seq = e.pipe_object_seq);
      
      CURSOR get_all_active_process_work_task IS
         SELECT t.task_seq
        FROM Jt_Task_Uiv t
       WHERE t.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND t.objstate NOT IN ('FINISHED', 'CANCELLED')
         AND (t.duplicate_type_db = 'MASTER' OR t.duplicate_type_db IS NULL)
         AND t.actual_obj_conn_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                   START WITH e.equipment_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR e.equipment_object_seq = e.process_object_seq);
      
      CURSOR get_all_active_circuit_work_task IS
         SELECT t.task_seq
        FROM Jt_Task_Uiv t
       WHERE t.actual_obj_conn_lu_name_db = 'EquipmentObject'
         AND t.objstate NOT IN ('FINISHED', 'CANCELLED')
         AND (t.duplicate_type_db = 'MASTER' OR t.duplicate_type_db IS NULL)
         AND t.actual_obj_conn_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                   START WITH e.equipment_object_seq = equipment_object_seq_
                   CONNECT BY PRIOR e.equipment_object_seq = e.circuit_object_seq);
      
      CURSOR get_all_hist_work_task(objkey_ VARCHAR2) IS
         SELECT jt.task_seq
           FROM JT_TASK_LIGHT_UIV jt
          WHERE (actual_obj_conn_rowkey = objkey_ AND
                objstate IN ('FINISHED', 'CANCELLED'));
                
      CURSOR get_active_work_task_step IS
         SELECT jt.task_step_seq
           FROM JT_TASK_STEP_UIV jt
           WHERE (jt.object_connection_rowkey) = (SELECT e.objkey 
                                                  FROM equipment_object_uiv e 
                                                  WHERE e.equipment_object_seq = equipment_object_seq_)
           AND jt.objstate IN ('NOTDONE');
                
      CURSOR get_all_active_function_work_task_step IS
         SELECT t.task_step_seq
        FROM JT_TASK_STEP_UIV t
       WHERE t.object_connection_lu_name_db = 'EquipmentObject'
         AND t.objstate IN('NOTDONE')
         AND t.object_connection_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.functional_object_seq);
                        
      CURSOR get_all_active_location_work_task_step IS
         SELECT t.task_step_seq
        FROM JT_TASK_STEP_UIV t
       WHERE t.object_connection_lu_name_db = 'EquipmentObject'
         AND t.objstate IN ('NOTDONE')
         AND t.object_connection_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.location_object_seq);
                         
      CURSOR get_all_active_from_work_task_step IS
         SELECT t.task_step_seq
        FROM JT_TASK_STEP_UIV t
       WHERE t.object_connection_lu_name_db = 'EquipmentObject'
         AND t.objstate IN ('NOTDONE')
         AND t.object_connection_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.from_object_seq);
                         
      CURSOR get_all_active_to_work_task_step IS
         SELECT t.task_step_seq
        FROM JT_TASK_STEP_UIV t
       WHERE t.object_connection_lu_name_db = 'EquipmentObject'
         AND t.objstate IN ('NOTDONE')
         AND t.object_connection_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.to_object_seq);
                         
      CURSOR get_all_active_pipe_work_task_step IS
         SELECT t.task_step_seq
        FROM JT_TASK_STEP_UIV t
       WHERE t.object_connection_lu_name_db = 'EquipmentObject'
         AND t.objstate IN ('NOTDONE')
         AND t.object_connection_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.pipe_object_seq);
                         
      CURSOR get_all_active_process_work_task_step IS
         SELECT t.task_step_seq
        FROM JT_TASK_STEP_UIV t
       WHERE t.object_connection_lu_name_db = 'EquipmentObject'
         AND t.objstate IN ('NOTDONE')
         AND t.object_connection_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.process_object_seq);
                         
      CURSOR get_all_active_circuit_work_task_step IS
         SELECT t.task_step_seq
        FROM JT_TASK_STEP_UIV t
       WHERE t.object_connection_lu_name_db = 'EquipmentObject'
         AND t.objstate IN ('NOTDONE')
         AND t.object_connection_rowkey IN
             (SELECT e.objkey
                FROM equipment_object_uiv e
                  START WITH e.equipment_object_seq = equipment_object_seq_
                  CONNECT BY PRIOR e.equipment_object_seq = e.circuit_object_seq);
                         
      CURSOR get_all_hist_work_task_step IS
         SELECT jt.task_step_seq
           FROM JT_TASK_STEP_UIV jt
           WHERE (jt.object_connection_rowkey) = (SELECT e.objkey 
                                                  FROM equipment_object_uiv e 
                                                  WHERE e.equipment_object_seq = equipment_object_seq_)
           AND jt.objstate IN ('DONE', 'CANCELLED');           
   $END
   $IF Component_Pcmsci_SYS.INSTALLED $THEN
      CURSOR get_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS (SELECT 1
                           FROM PSC_SRV_LINE_OBJECTS t
                          WHERE t.contract_id = cp.contract_id
                            AND t.line_no = cp.line_no
                            AND t.equipment_object_seq = equipment_object_seq_))
          ORDER BY contract_id, line_no;
      
      CURSOR get_all_function_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS
                 (SELECT 1
                    FROM PSC_SRV_LINE_OBJECTS t
                   WHERE t.contract_id = cp.CONTRACT_ID
                     AND t.line_no = cp.LINE_NO
                     AND (t.equipment_object_seq) IN
                         (SELECT equipment_object_seq
                            FROM Equipment_All_Object_Uiv
                            START WITH equipment_object_seq = equipment_object_seq_
                            CONNECT BY PRIOR equipment_object_seq = functional_object_seq)))
          ORDER BY contract_id, line_no;
      
      CURSOR get_all_location_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS
                 (SELECT 1
                    FROM PSC_SRV_LINE_OBJECTS t
                   WHERE t.contract_id = cp.CONTRACT_ID
                     AND t.line_no = cp.LINE_NO
                     AND (t.equipment_object_seq) IN
                         (SELECT equipment_object_seq
                            FROM Equipment_All_Object_Uiv
                            START WITH equipment_object_seq = equipment_object_seq_
                            CONNECT BY PRIOR equipment_object_seq = location_object_seq)))
          ORDER BY contract_id, line_no;
      
      CURSOR get_all_from_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS
                 (SELECT 1
                    FROM PSC_SRV_LINE_OBJECTS t
                   WHERE t.contract_id = cp.CONTRACT_ID
                     AND t.line_no = cp.LINE_NO
                     AND (t.equipment_object_seq) IN
                         (SELECT equipment_object_seq
                            FROM Equipment_All_Object_Uiv
                            START WITH equipment_object_seq = equipment_object_seq_
                            CONNECT BY PRIOR equipment_object_seq = from_object_seq)))
          ORDER BY contract_id, line_no;
      
      CURSOR get_all_to_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS
                 (SELECT 1
                    FROM PSC_SRV_LINE_OBJECTS t
                   WHERE t.contract_id = cp.CONTRACT_ID
                     AND t.line_no = cp.LINE_NO
                     AND (t.equipment_object_seq) IN
                         (SELECT equipment_object_seq
                            FROM Equipment_All_Object_Uiv
                            START WITH equipment_object_seq = equipment_object_seq_
                            CONNECT BY PRIOR equipment_object_seq = to_object_seq)))
          ORDER BY contract_id, line_no;
      
      CURSOR get_all_process_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS
                 (SELECT 1
                    FROM PSC_SRV_LINE_OBJECTS t
                   WHERE t.contract_id = cp.CONTRACT_ID
                     AND t.line_no = cp.LINE_NO
                     AND (t.equipment_object_seq) IN
                         (SELECT equipment_object_seq
                            FROM Equipment_All_Object_Uiv
                            START WITH equipment_object_seq = equipment_object_seq_
                            CONNECT BY PRIOR equipment_object_seq = process_object_seq)))
          ORDER BY contract_id, line_no;
      
      CURSOR get_all_pipe_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS
                 (SELECT 1
                    FROM PSC_SRV_LINE_OBJECTS t
                   WHERE t.contract_id = cp.CONTRACT_ID
                     AND t.line_no = cp.LINE_NO
                     AND (t.equipment_object_seq) IN
                         (SELECT equipment_object_seq
                            FROM Equipment_All_Object_Uiv
                            START WITH equipment_object_seq = equipment_object_seq_
                            CONNECT BY PRIOR equipment_object_seq = pipe_object_seq)))
          ORDER BY contract_id, line_no;
      
      CURSOR get_all_circuit_service_lines IS
         SELECT cp.contract_id, cp.line_no
           FROM PSC_CONTR_PRODUCT_UIV cp
          WHERE connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
            AND (EXISTS
                 (SELECT 1
                    FROM PSC_SRV_LINE_OBJECTS t
                   WHERE t.contract_id = cp.CONTRACT_ID
                     AND t.line_no = cp.LINE_NO
                     AND (t.equipment_object_seq) IN
                         (SELECT equipment_object_seq
                            FROM Equipment_All_Object_Uiv
                            START WITH equipment_object_seq = equipment_object_seq_
                            CONNECT BY PRIOR equipment_object_seq = circuit_object_seq)))
          ORDER BY contract_id, line_no;
                            
   $END
BEGIN
   first_iter_ := 0;
   IF navigating_form_ = '1EquipmentObject' THEN
      navigation_url_ := 'page/EquipmentAllObjects/List?$filter=';
      page_ := 'Objects';
      IF structure_in_tree_ = 'L' THEN
         FOR rec_ IN get_location_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      ELSIF structure_in_tree_ = 'R' THEN
         FOR rec_ IN get_from_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      ELSIF structure_in_tree_ = 'T' THEN
         FOR rec_ IN get_to_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
         
      ELSIF structure_in_tree_ = 'P' THEN
         FOR rec_ IN get_process_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
         
      ELSIF structure_in_tree_ = 'S' THEN
         FOR rec_ IN get_pipe_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
         
      ELSIF structure_in_tree_ = 'E' THEN
         FOR rec_ IN get_circuit_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      ELSE
         FOR rec_ IN get_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      END IF;
   END IF;
   IF navigating_form_ = '2EquipmentObject' THEN
      navigation_url_ := 'page/EquipmentAllObjects/List?$filter='; 
      page_ := 'Objects';
      IF structure_in_tree_ = 'L' THEN
         FOR rec_ IN get_all_location_obj LOOP
            
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
            
         END LOOP;
         
         
      ELSIF structure_in_tree_ = 'R' THEN
         FOR rec_ IN get_all_from_obj LOOP
            
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
            
         END LOOP;
      ELSIF structure_in_tree_ = 'T' THEN
         FOR rec_ IN get_all_to_obj LOOP
            
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
            
         END LOOP;
         
      ELSIF structure_in_tree_ = 'P' THEN
         FOR rec_ IN get_all_process_obj LOOP
            
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
            
         END LOOP;
         
      ELSIF structure_in_tree_ = 'S' THEN
         FOR rec_ IN get_all_pipe_obj LOOP
            
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
            
         END LOOP;
         
      ELSIF structure_in_tree_ = 'E' THEN
         FOR rec_ IN get_all_circuit_obj LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
            
         END LOOP;
      ELSE
         FOR rec_ IN get_all_function_obj LOOP
            
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            ELSE
               navigation_url_ := navigation_url_ || ' or ( EquipmentObjectSeq eq ' ||
                               rec_.equipment_object_seq || ' )';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
            
         END LOOP;
      END IF;
   END IF;   
   IF navigating_form_ = '2PmAction' THEN
      $IF Component_Pm_SYS.INSTALLED $THEN
         IF type_of_obj_ = 'Single' THEN
            navigation_url_ := 'page/PmActions/List?$filter=';
            page_ := 'PM Actions';
            FOR rec_ IN get_std_pm LOOP
               IF first_iter_ = 0 THEN
                  navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
               ELSE
                  navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
               END IF;
               first_iter_ := 1;
               IF (LENGTH(navigation_url_)> 30000) THEN
                  RAISE inv_url_;
               END IF;
            END LOOP;
         ELSE
            navigation_url_ := 'page/PmActions/List?$filter=';
            page_ := 'PM Actions';
            IF structure_in_tree_ = 'L' THEN
               FOR rec_ IN get_all_location_pm LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || 'PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'R' THEN
               FOR rec_ IN get_all_from_pm LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            ELSIF structure_in_tree_ = 'T' THEN
               FOR rec_ IN get_all_to_pm LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'P' THEN
               FOR rec_ IN get_all_process_pm LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'S' THEN
               FOR rec_ IN get_all_pipe_pm LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'E' THEN
               FOR rec_ IN get_all_circuit_pm LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSE
               FOR rec_ IN get_all_function_pm LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            END IF;
            
         END IF;
      $ELSE
         navigation_url_ := '';
      $END
   END IF;
   IF navigating_form_ = '3PmAction' THEN
      $IF Component_Pm_SYS.INSTALLED $THEN
         navigation_url_ := 'page/MaintenancePlanAnalysis/List?$filter=';
         page_ := 'Maintenance Plan Analysis';
         FOR rec_ IN get_maint_plan LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
            ELSE
               navigation_url_ := navigation_url_ || ' or ' || '(' || ' PmNo eq ' ||
                                     rec_.pm_no || ' and PmRevision eq ''' ||
                                     rec_.pm_revision || '''' || ')';
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      $ELSE
         navigation_url_ := '';
      $END
   END IF;
   IF navigating_form_ = '5WorkOrder' THEN
      IF type_of_obj_ = 'Single' THEN
         $IF Component_Wo_SYS.INSTALLED $THEN
            navigation_url_ := 'page/ActiveWorkOrders/List?$filter=';
            page_ := 'Active Work Orders';
            FOR rec_ IN get_active_wo LOOP
               IF first_iter_ = 0 THEN
                  navigation_url_ := navigation_url_ || ' WoNo eq ' ||
                                     rec_.wo_no;
               ELSE
                  navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                     rec_.wo_no;
               END IF;
               first_iter_ := 1;
               IF (LENGTH(navigation_url_)> 30000) THEN
                  RAISE inv_url_;
               END IF;
            END LOOP;
         $ELSE
            navigation_url_ := '';
         $END
      ELSE
         $IF Component_Wo_SYS.INSTALLED $THEN
            navigation_url_ := 'page/ActiveWorkOrders/List?$filter=';
            page_ := 'Active Work Orders';
            IF structure_in_tree_ = 'L' THEN
               FOR rec_ IN get_all_active_location_wo LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' WoNo eq ' ||
                                        rec_.wo_no;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                        rec_.wo_no;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'R' THEN
               FOR rec_ IN get_all_active_from_wo LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || 'WoNo eq ' ||
                                        rec_.wo_no;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                        rec_.wo_no;
                  END IF;
                  first_iter_ := 1;
               END LOOP;
            ELSIF structure_in_tree_ = 'T' THEN
               FOR rec_ IN get_all_active_to_wo LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' WoNo eq ' ||
                                        rec_.wo_no;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                        rec_.wo_no;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'P' THEN
               FOR rec_ IN get_all_active_process_wo LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' WoNo eq ' ||
                                        rec_.wo_no;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                        rec_.wo_no;
                  END IF;
                  first_iter_ := 1;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'S' THEN
               FOR rec_ IN get_all_active_pipe_wo LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' WoNo eq ' ||
                                        rec_.wo_no;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                        rec_.wo_no;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'E' THEN
               FOR rec_ IN get_all_active_circuit_wo LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' WoNo eq ' ||
                                        rec_.wo_no;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                        rec_.wo_no;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSE
               FOR rec_ IN get_all_active_function_wo LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' WoNo eq ' ||
                                        rec_.wo_no;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                        rec_.wo_no;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            END IF;
            
         $ELSE
            navigation_url_ := '';
         $END
      END IF;
   END IF;
   IF navigating_form_ = '6WorkOrder' THEN
      $IF Component_Wo_SYS.INSTALLED $THEN
         navigation_url_ := 'page/HistoricalWorkOrders/List?$filter=';
         page_ := 'Historical Work Orders';
         FOR rec_ IN get_all_hist_wo LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || ' WoNo eq ' || rec_.wo_no;
            ELSE
               navigation_url_ := navigation_url_ || ' or WoNo eq ' ||
                                  rec_.wo_no;
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      $ELSE
         navigation_url_ := '';
      $END
   END IF;
   IF navigating_form_ = '7JtTask' THEN
      $IF Component_Wo_SYS.INSTALLED $THEN
         navigation_url_ := 'page/WorkTasks/List?$filter=';
         page_ := 'Work Tasks';
         FOR rec_ IN get_active_work_task LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                  rec_.task_seq;
            ELSE
               navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                  rec_.task_seq;
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      $ELSE
         navigation_url_ := '';
      $END
   END IF;
   IF navigating_form_ = '8JtTask' THEN
      IF type_of_obj_ = 'Single' THEN
         $IF Component_Wo_SYS.INSTALLED $THEN
            navigation_url_ := 'page/WorkTasks/List?$filter=';
            page_ := 'Work Tasks';
            FOR rec_ IN get_active_work_task LOOP
               IF first_iter_ = 0 THEN
                  navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                     rec_.task_seq;
               ELSE
                  navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                     rec_.task_seq;
               END IF;
               first_iter_ := 1;
               IF (LENGTH(navigation_url_)> 30000) THEN
                  RAISE inv_url_;
               END IF;
            END LOOP;
         $ELSE
            navigation_url_ := '';
         $END
      ELSE
         $IF Component_Wo_SYS.INSTALLED $THEN
            navigation_url_ := 'page/WorkTasks/List?$filter=';
            page_ := 'Work Tasks';
            IF structure_in_tree_ = 'L' THEN
               FOR rec_ IN get_all_active_location_work_task LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                        rec_.task_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                        rec_.task_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'R' THEN
               FOR rec_ IN get_all_active_from_work_task LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                        rec_.task_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                        rec_.task_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            ELSIF structure_in_tree_ = 'T' THEN
               FOR rec_ IN get_all_active_to_work_task LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                        rec_.task_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                        rec_.task_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'P' THEN
               FOR rec_ IN get_all_active_process_work_task LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                        rec_.task_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                        rec_.task_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'S' THEN
               FOR rec_ IN get_all_active_pipe_work_task LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                        rec_.task_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                        rec_.task_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'E' THEN
               FOR rec_ IN get_all_active_circuit_work_task LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                        rec_.task_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                        rec_.task_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSE
               FOR rec_ IN get_all_active_function_work_task LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                        rec_.task_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                        rec_.task_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            END IF;
            
         $ELSE
            navigation_url_ := '';
         $END
      END IF;
   END IF;
   IF navigating_form_ = '90JtTask' THEN
      $IF Component_Wo_SYS.INSTALLED $THEN
         navigation_url_ := 'page/WorkTasks/List?$filter=';
         page_ := 'Work Tasks';
         objkey_ := Equipment_Object_Api.Get_Objkey(equipment_object_seq_);
         FOR rec_ IN get_all_hist_work_task(objkey_) LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || ' TaskSeq eq ' ||
                                  rec_.task_seq;
            ELSE
               navigation_url_ := navigation_url_ || ' or TaskSeq eq ' ||
                                  rec_.task_seq;
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      $ELSE
         navigation_url_ := '';
      $END
   END IF;
   IF navigating_form_ = '92WorkOrder' THEN
      IF type_of_obj_ = 'Single' THEN
         $IF Component_Pcmsci_SYS.INSTALLED $THEN
            navigation_url_ := 'page/EquipmentObjectNavigator/PscServicesList?$filter=';
            page_ := 'Service Lines';
            FOR rec_ IN get_service_lines LOOP
               IF first_iter_ = 0 THEN 
                  navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
               ELSE
                  navigation_url_ := navigation_url_ || ' or ' || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
               END IF;
               first_iter_ := 1;
               IF (LENGTH(navigation_url_)> 30000) THEN
                  RAISE inv_url_;
               END IF;
            END LOOP;
         $ELSE
            navigation_url_ := '';
         $END
      ELSE
         $IF Component_Pcmsci_SYS.INSTALLED $THEN
            navigation_url_ := 'page/EquipmentObjectNavigator/PscServicesList?$filter=';
            page_ := 'Service Lines';
            IF structure_in_tree_ = 'L' THEN
               FOR rec_ IN get_all_location_service_lines LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'R' THEN
               FOR rec_ IN get_all_from_service_lines LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' ||' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            ELSIF structure_in_tree_ = 'T' THEN
               FOR rec_ IN get_all_to_service_lines LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'P' THEN
               FOR rec_ IN get_all_process_service_lines LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'S' THEN
               FOR rec_ IN get_all_pipe_service_lines LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'E' THEN
               FOR rec_ IN get_all_circuit_service_lines LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;    
            ELSE
               FOR rec_ IN get_all_function_service_lines LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')' ;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or ' || '(' || ' ContractId eq ''' ||
                               rec_.contract_id || '''' || ' and LineNo eq ' ||
                                     rec_.line_no || ')';
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            END IF;
            
         $ELSE
            navigation_url_ := '';
         $END
      END IF;
   END IF;
   IF navigating_form_ = '93JtTaskStep' THEN
      IF type_of_obj_ = 'Single' THEN
         $IF Component_Wo_SYS.INSTALLED $THEN
            navigation_url_ := 'page/WorkTaskSteps/List?$filter=';
            page_ := 'Work Task Steps';
            FOR rec_ IN get_active_work_task_step LOOP
               IF first_iter_ = 0 THEN
                  navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                     rec_.task_step_seq;
               ELSE
                  navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                     rec_.task_step_seq;
               END IF;
               first_iter_ := 1;
               IF (LENGTH(navigation_url_)> 30000) THEN
                  RAISE inv_url_;
               END IF;
            END LOOP;
         $ELSE
            navigation_url_ := '';
         $END
      ELSE
         $IF Component_Wo_SYS.INSTALLED $THEN
            navigation_url_ := 'page/WorkTaskSteps/List?$filter=';
            page_ := 'Work Task Steps';
            IF structure_in_tree_ = 'L' THEN
               FOR rec_ IN get_all_active_location_work_task_step LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'R' THEN
               FOR rec_ IN get_all_active_from_work_task_step LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            ELSIF structure_in_tree_ = 'T' THEN
               FOR rec_ IN get_all_active_to_work_task_step LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'P' THEN
               FOR rec_ IN get_all_active_process_work_task_step LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'S' THEN
               FOR rec_ IN get_all_active_pipe_work_task_step LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSIF structure_in_tree_ = 'E' THEN
               FOR rec_ IN get_all_active_circuit_work_task_step LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
               
            ELSE
               FOR rec_ IN get_all_active_function_work_task_step LOOP
                  IF first_iter_ = 0 THEN
                     navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  ELSE
                     navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                        rec_.task_step_seq;
                  END IF;
                  first_iter_ := 1;
                  IF (LENGTH(navigation_url_)> 30000) THEN
                     RAISE inv_url_;
                  END IF;
               END LOOP;
            END IF;
            
         $ELSE
            navigation_url_ := '';
         $END
      END IF;
   END IF;
   IF navigating_form_ = '94JtTaskStep' THEN
      $IF Component_Wo_SYS.INSTALLED $THEN
         navigation_url_ := 'page/WorkTaskSteps/List?$filter=';
         page_ := 'Work Task Steps';
         FOR rec_ IN get_all_hist_work_task_step LOOP
            IF first_iter_ = 0 THEN
               navigation_url_ := navigation_url_ || ' TaskStepSeq eq ' ||
                                  rec_.task_step_seq;
            ELSE
               navigation_url_ := navigation_url_ || ' or TaskStepSeq eq ' ||
                                  rec_.task_step_seq;
            END IF;
            first_iter_ := 1;
            IF (LENGTH(navigation_url_)> 30000) THEN
               RAISE inv_url_;
            END IF;
         END LOOP;
      $ELSE
         navigation_url_ := '';
      $END
   END IF;
   RETURN navigation_url_;
EXCEPTION 
   WHEN inv_url_ THEN
      IF type_of_obj_ = 'Single' THEN
         Error_SYS.Appl_General(lu_name_, 'EXCCEDTYPESINGLE: Query exceeds the character limit, try from the :P1 page.', page_);
      ELSE
         Error_SYS.Appl_General(lu_name_, 'EXCCEDTYPESTRUCT: Query exceeds the character limit, try from a lower level of the object structure.'); 
      END IF;     
END Get_Navigation_Url___;



FUNCTION Get_Object_Image___(
   equipment_object_seq_   IN NUMBER ) RETURN BLOB
IS 
BEGIN
   RETURN Media_Library_API.Get_Default_Media(Media_Library_API.Get_Library_Id_From_Ref('EquipmentObject', equipment_object_seq_));
END Get_Object_Image___;

/*
@DynamicComponentDependency PCMSCI
FUNCTION Get_Service_Lines_Filtered___(
   mch_code_ IN VARCHAR2,
   contract_ IN VARCHAR2) RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr();

   CURSOR get_service_lines IS
      SELECT srv_lines.*
        FROM psc_contr_product_uiv srv_lines
       WHERE srv_lines.connection_type_db IN
             ('EQUIPMENT', 'CATEGORY', 'PART')
         AND (EXISTS (SELECT 1
                        FROM psc_srv_line_objects obj_lines
                       WHERE obj_lines.contract_id = srv_lines.contract_id
                         AND obj_lines.line_no = srv_lines.line_no
                         AND obj_lines.mch_code = mch_code_
                         AND obj_lines.mch_contract = contract_))
       order by contract_id, line_no;
BEGIN
   FOR rec_ IN get_service_lines LOOP
      base_collection_.extend;
      base_collection_(base_collection_.last) := rec_.objid;
   END LOOP;

   RETURN base_collection_;
END Get_Service_Lines_Filtered___;
*/

/*
@DynamicComponentDependency PCMSCI
FUNCTION Get_All_Service_Lines_Filtered___(
   mch_code_ IN VARCHAR2, 
   contract_ IN VARCHAR2, 
   structure_in_tree_ IN VARCHAR2) RETURN Objid_Arr 
IS 
   base_collection_ Objid_Arr := Objid_Arr();
CURSOR get_function_service_lines IS
   SELECT srv_lines.*
     FROM psc_contr_product_uiv srv_lines
    where srv_lines.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      and (EXISTS (SELECT 1
                     FROM psc_srv_line_objects obj_lines
                    WHERE obj_lines.contract_id = srv_lines.contract_id
                      AND obj_lines.line_no = srv_lines.line_no
                      AND (obj_lines.mch_code, obj_lines.mch_contract) IN
                          (SELECT mch_code, contract
                             FROM equipment_object_uiv
                            START WITH sup_mch_code = mch_code_
                                   AND sup_contract = contract_
                           CONNECT BY PRIOR mch_code = sup_mch_code
                                  AND PRIOR contract = sup_contract)))
    order by contract_id, line_no;

CURSOR get_location_service_lines IS
   SELECT srv_lines.*
     FROM psc_contr_product_uiv srv_lines
    where srv_lines.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      and (EXISTS
           (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = srv_lines.contract_id
               AND obj_lines.line_no = srv_lines.line_no
               AND (obj_lines.mch_code, obj_lines.mch_contract) IN
                   (SELECT mch_code, contract
                      FROM equipment_all_object_uiv
                     START WITH location_mch_code = mch_code_
                            AND location_contract = contract_
                    CONNECT BY PRIOR mch_code = location_mch_code
                           AND PRIOR contract = location_contract)))
    order by contract_id, line_no;

CURSOR get_from_service_lines IS
   SELECT srv_lines.*
     FROM psc_contr_product_uiv srv_lines
    where srv_lines.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      and (EXISTS
           (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = srv_lines.contract_id
               AND obj_lines.line_no = srv_lines.line_no
               AND (obj_lines.mch_code, obj_lines.mch_contract) IN
                   (SELECT mch_code, contract
                      FROM equipment_all_object_uiv
                     START WITH from_mch_code = mch_code_
                            AND from_contract = contract_
                    CONNECT BY PRIOR mch_code = from_mch_code
                           AND PRIOR contract = from_contract)))
    order by contract_id, line_no;

CURSOR get_to_service_lines IS
   SELECT srv_lines.*
     FROM psc_contr_product_uiv srv_lines
    where srv_lines.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      and (EXISTS (SELECT 1
                     FROM psc_srv_line_objects obj_lines
                    WHERE obj_lines.contract_id = srv_lines.contract_id
                      AND obj_lines.line_no = srv_lines.line_no
                      AND (obj_lines.mch_code, obj_lines.mch_contract) IN
                          (SELECT mch_code, contract
                             FROM equipment_all_object_uiv
                            START WITH to_mch_code = mch_code_
                                   AND to_contract = contract_
                           CONNECT BY PRIOR mch_code = to_mch_code
                                  AND PRIOR contract = to_contract)))
    order by contract_id, line_no;

CURSOR get_process_service_lines IS
   SELECT srv_lines.*
     FROM psc_contr_product_uiv srv_lines
    where srv_lines.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      and (EXISTS
           (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = srv_lines.contract_id
               AND obj_lines.line_no = srv_lines.line_no
               AND (obj_lines.mch_code, obj_lines.mch_contract) IN
                   (SELECT mch_code, contract
                      FROM equipment_all_object_uiv
                     START WITH process_mch_code = mch_code_
                            AND process_contract = contract_
                    CONNECT BY PRIOR mch_code = process_mch_code
                           AND PRIOR contract = process_contract)))
    order by contract_id, line_no;

CURSOR get_pipe_service_lines IS
   SELECT srv_lines.*
     FROM psc_contr_product_uiv srv_lines
    where srv_lines.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      and (EXISTS
           (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = srv_lines.contract_id
               AND obj_lines.line_no = srv_lines.line_no
               AND (obj_lines.mch_code, obj_lines.mch_contract) IN
                   (SELECT mch_code, contract
                      FROM equipment_all_object_uiv
                     START WITH pipe_mch_code = mch_code_
                            AND pipe_contract = contract_
                    CONNECT BY PRIOR mch_code = pipe_mch_code
                           AND PRIOR contract = pipe_contract)))
    order by contract_id, line_no;

CURSOR get_circuit_service_lines IS
   SELECT srv_lines.*
     FROM psc_contr_product_uiv srv_lines
    where srv_lines.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      and (EXISTS
           (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = srv_lines.contract_id
               AND obj_lines.line_no = srv_lines.line_no
               AND (obj_lines.mch_code, obj_lines.mch_contract) IN
                   (SELECT mch_code, contract
                      FROM equipment_all_object_uiv
                     START WITH circuit_mch_code = mch_code_
                            AND circuit_contract = contract_
                    CONNECT BY PRIOR mch_code = circuit_mch_code
                           AND PRIOR contract = circuit_contract)))
    order by contract_id, line_no;
BEGIN
   IF structure_in_tree_ = 'L' THEN 
     FOR rec_ IN get_location_service_lines LOOP
       base_collection_.extend; 
       base_collection_(base_collection_.last) := rec_.objid; 
   END LOOP; 

   ELSIF structure_in_tree_ = 'R' THEN 
     FOR rec_ IN get_from_service_lines LOOP 
       base_collection_.extend; 
       base_collection_(base_collection_.last) := rec_.objid; 
   END LOOP; 
   ELSIF structure_in_tree_ = 'T' THEN 
     FOR rec_ IN get_to_service_lines LOOP 
       base_collection_.extend; 
       base_collection_(base_collection_.last) := rec_.objid; 
     END LOOP;

   ELSIF structure_in_tree_ = 'P' THEN 
     FOR rec_ IN get_process_service_lines LOOP 
       base_collection_.extend; 
       base_collection_(base_collection_.last) := rec_.objid; 
     END LOOP;

   ELSIF structure_in_tree_ = 'S' THEN 
     FOR rec_ IN get_pipe_service_lines LOOP 
       base_collection_.extend; 
       base_collection_(base_collection_.last) := rec_.objid; 
     END LOOP;

   ELSIF structure_in_tree_ = 'E' THEN 
     FOR rec_ IN get_circuit_service_lines LOOP 
       base_collection_.extend; 
       base_collection_(base_collection_.last) := rec_.objid; 
       END LOOP;

   ELSE 
     FOR rec_ IN get_function_service_lines LOOP 
     base_collection_.extend; 
     base_collection_(base_collection_.last) := rec_.objid; 
     END LOOP;
   END IF;

  RETURN base_collection_; 

END Get_All_Service_Lines_Filtered___;
*/

/*
@DynamicComponentDependency PM
FUNCTION Get_Pm_Actions_Structure_Filtered___ (
	mch_code_ IN VARCHAR2,
	contract_ IN VARCHAR2,
   structure_in_tree_ IN VARCHAR2) RETURN Objid_Arr
IS
 base_collection_ Objid_Arr := Objid_Arr();

   CURSOR get_function_lines IS
      SELECT pm.*
      FROM pm_action_uiv pm
      WHERE pm.objstate IN ('Active', 'Preliminary')
         AND ((MCH_CODE, MCH_CODE_CONTRACT) IN
       (SELECT MCH_CODE, CONTRACT
           FROM EQUIPMENT_ALL_OBJECT_UIV
          START WITH sup_mch_code = mch_code_
                 AND sup_contract = contract_
         CONNECT BY PRIOR MCH_CODE = sup_mch_code
                AND PRIOR CONTRACT = sup_contract));

                   CURSOR get_location_lines IS
      SELECT pm.*
      FROM pm_action_uiv pm
      WHERE pm.objstate IN ('Active', 'Preliminary')
         AND ((MCH_CODE, MCH_CODE_CONTRACT) IN
       (SELECT MCH_CODE, CONTRACT
           FROM EQUIPMENT_ALL_OBJECT_UIV
                     START WITH location_mch_code = mch_code_
                            AND location_contract = contract_
                    CONNECT BY PRIOR mch_code = location_mch_code
                           AND PRIOR contract = location_contract));

                   CURSOR get_from_lines IS
      SELECT pm.*
      FROM pm_action_uiv pm
      WHERE pm.objstate IN ('Active', 'Preliminary')
         AND ((MCH_CODE, MCH_CODE_CONTRACT) IN
       (SELECT MCH_CODE, CONTRACT
           FROM EQUIPMENT_ALL_OBJECT_UIV
                     START WITH from_mch_code = mch_code_
                            AND from_contract = contract_
                    CONNECT BY PRIOR mch_code = from_mch_code
                           AND PRIOR contract = from_contract));

                   CURSOR get_to_lines IS
      SELECT pm.*
      FROM pm_action_uiv pm
      WHERE pm.objstate IN ('Active', 'Preliminary')
         AND ((MCH_CODE, MCH_CODE_CONTRACT) IN
       (SELECT MCH_CODE, CONTRACT
           FROM EQUIPMENT_ALL_OBJECT_UIV
                            START WITH to_mch_code = mch_code_
                                   AND to_contract = contract_
                           CONNECT BY PRIOR mch_code = to_mch_code
                                  AND PRIOR contract = to_contract));
                
                   CURSOR get_process_lines IS
      SELECT pm.*
      FROM pm_action_uiv pm
      WHERE pm.objstate IN ('Active', 'Preliminary')
         AND ((MCH_CODE, MCH_CODE_CONTRACT) IN
       (SELECT MCH_CODE, CONTRACT
           FROM EQUIPMENT_ALL_OBJECT_UIV
                     START WITH process_mch_code = mch_code_
                            AND process_contract = contract_
                    CONNECT BY PRIOR mch_code = process_mch_code
                           AND PRIOR contract = process_contract));
                
                   CURSOR get_pipe_lines IS
      SELECT pm.*
      FROM pm_action_uiv pm
      WHERE pm.objstate IN ('Active', 'Preliminary')
         AND ((MCH_CODE, MCH_CODE_CONTRACT) IN
       (SELECT MCH_CODE, CONTRACT
           FROM EQUIPMENT_ALL_OBJECT_UIV
                     START WITH pipe_mch_code = mch_code_
                            AND pipe_contract = contract_
                    CONNECT BY PRIOR mch_code = pipe_mch_code
                           AND PRIOR contract = pipe_contract));
                
                   CURSOR get_circuit_lines IS
      SELECT pm.*
      FROM pm_action_uiv pm
      WHERE pm.objstate IN ('Active', 'Preliminary')
         AND ((MCH_CODE, MCH_CODE_CONTRACT) IN
       (SELECT MCH_CODE, CONTRACT
           FROM EQUIPMENT_ALL_OBJECT_UIV
                     START WITH circuit_mch_code = mch_code_
                            AND circuit_contract = contract_
                    CONNECT BY PRIOR mch_code = circuit_mch_code
                           AND PRIOR contract = circuit_contract));
BEGIN

IF structure_in_tree_ = 'L' THEN 
  FOR rec_ IN get_location_lines LOOP
    base_collection_.extend; 
    base_collection_(base_collection_.last) := rec_.objid; 
END LOOP; 

ELSIF structure_in_tree_ = 'R' THEN 
  FOR rec_ IN get_from_lines LOOP 
    base_collection_.extend; 
    base_collection_(base_collection_.last) := rec_.objid; 
END LOOP; 
ELSIF structure_in_tree_ = 'T' THEN 
  FOR rec_ IN get_to_lines LOOP 
    base_collection_.extend; 
    base_collection_(base_collection_.last) := rec_.objid; 
  END LOOP;

ELSIF structure_in_tree_ = 'P' THEN 
  FOR rec_ IN get_process_lines LOOP 
    base_collection_.extend; 
    base_collection_(base_collection_.last) := rec_.objid; 
  END LOOP;

ELSIF structure_in_tree_ = 'S' THEN 
  FOR rec_ IN get_pipe_lines LOOP 
    base_collection_.extend; 
    base_collection_(base_collection_.last) := rec_.objid; 
  END LOOP;

ELSIF structure_in_tree_ = 'E' THEN 
  FOR rec_ IN get_circuit_lines LOOP 
    base_collection_.extend; 
    base_collection_(base_collection_.last) := rec_.objid; 
    END LOOP;

ELSE 
  FOR rec_ IN get_function_lines LOOP 
  base_collection_.extend; 
  base_collection_(base_collection_.last) := rec_.objid; 
  END LOOP;
END IF;

RETURN base_collection_; 

END Get_Pm_Actions_Structure_Filtered___;
*/

/*
@DynamicComponentDependency PM
FUNCTION Get_Maint_Plan_Filtered___ (
	mch_code_ IN VARCHAR2,
	contract_ IN VARCHAR2) RETURN Objid_Arr
IS
base_collection_ Objid_Arr := Objid_Arr();

   CURSOR get_pm_action_lines IS
      SELECT pm.*
      FROM pm_action_cal_plan pm
      WHERE (mch_code = mch_code_ AND contract = contract_)
      order by planned_date;
BEGIN
   FOR rec_ IN get_pm_action_lines LOOP
      base_collection_.extend;
      base_collection_(base_collection_.last) := rec_.objid;
   END LOOP;

   RETURN base_collection_;
END Get_Maint_Plan_Filtered___;
*/

/*
FUNCTION Get_All_Child_Equipment_Objects___(
   mch_code_          IN VARCHAR2,
   contract_          IN VARCHAR2,
   structure_in_tree_ IN VARCHAR2) RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr();

   CURSOR get_location_objects IS
      SELECT *
        FROM equipment_object_uiv
       START WITH location_mch_code = mch_code_
              AND location_contract = contract_
      CONNECT BY PRIOR mch_code = location_mch_code
             AND PRIOR contract = location_contract
       ORDER BY mch_code;

   CURSOR get_from_objects IS
      SELECT *
        FROM equipment_object_uiv
       START WITH from_mch_code = mch_code_
              AND from_contract = contract_
      CONNECT BY PRIOR mch_code = from_mch_code
             AND PRIOR contract = from_contract
       ORDER BY mch_code;

   CURSOR get_to_objects IS
      SELECT *
        FROM equipment_object_uiv
       START WITH to_mch_code = mch_code_
              AND to_contract = contract_
      CONNECT BY PRIOR mch_code = to_mch_code
             AND PRIOR contract = to_contract
       ORDER BY mch_code;

   CURSOR get_process_objects IS
      SELECT *
        FROM equipment_object_uiv
       START WITH process_mch_code = mch_code_
              AND process_contract = contract_
      CONNECT BY PRIOR mch_code = process_mch_code
             AND PRIOR contract = process_contract
       ORDER BY mch_code;

   CURSOR get_pipe_objects IS
      SELECT *
        FROM equipment_object_uiv
       START WITH pipe_mch_code = mch_code_
              AND pipe_contract = contract_
      CONNECT BY PRIOR mch_code = pipe_mch_code
             AND PRIOR contract = pipe_contract
       ORDER BY mch_code;

   CURSOR get_circuit_objects IS
      SELECT *
        FROM equipment_object_uiv
       START WITH circuit_mch_code = mch_code_
              AND circuit_contract = contract_
      CONNECT BY PRIOR mch_code = circuit_mch_code
             AND PRIOR contract = circuit_contract
       ORDER BY mch_code;

   CURSOR get_sup_objects IS
      SELECT *
        FROM equipment_object_uiv
       START WITH sup_mch_code = mch_code_
              AND sup_contract = contract_
      CONNECT BY PRIOR mch_code = sup_mch_code
             AND PRIOR contract = sup_contract
       ORDER BY mch_code;

BEGIN
   IF structure_in_tree_ = 'L' THEN
      FOR rec_ IN get_location_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'R' THEN
      FOR rec_ IN get_from_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'T' THEN
      FOR rec_ IN get_to_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'P' THEN
      FOR rec_ IN get_process_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'S' THEN
      FOR rec_ IN get_pipe_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'E' THEN
      FOR rec_ IN get_circuit_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSE
      FOR rec_ IN get_sup_objects LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;

   RETURN base_collection_;
END Get_All_Child_Equipment_Objects___;
*/

@DynamicComponentDependency WO
FUNCTION Get_All_Active_Work_Tasks_Filtered___(
   structure_in_tree_    IN VARCHAR2,
   equipment_object_seq_ IN NUMBER ) RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr();
   
   CURSOR get_location_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                           FROM equipment_object_uiv
                                                                           START WITH equipment_object_seq = equipment_object_seq_
                                                                           CONNECT BY PRIOR equipment_object_seq = location_object_seq);
   
   CURSOR get_from_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                           FROM equipment_object_uiv
                                                                           START WITH equipment_object_seq = equipment_object_seq_
                                                                           CONNECT BY PRIOR equipment_object_seq = from_object_seq);
   
   
   CURSOR get_to_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                           FROM equipment_object_uiv
                                                                           START WITH equipment_object_seq = equipment_object_seq_
                                                                           CONNECT BY PRIOR equipment_object_seq = to_object_seq);
   
   CURSOR get_process_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                           FROM equipment_object_uiv
                                                                           START WITH equipment_object_seq = equipment_object_seq_
                                                                           CONNECT BY PRIOR equipment_object_seq = process_object_seq);
   
   CURSOR get_pipe_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                           FROM equipment_object_uiv
                                                                           START WITH equipment_object_seq = equipment_object_seq_
                                                                           CONNECT BY PRIOR equipment_object_seq = pipe_object_seq);
   
   CURSOR get_circuit_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                           FROM equipment_object_uiv
                                                                           START WITH equipment_object_seq = equipment_object_seq_
                                                                           CONNECT BY PRIOR equipment_object_seq = circuit_object_seq);
   
   CURSOR get_sup_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                           FROM equipment_object_uiv
                                                                           START WITH equipment_object_seq = equipment_object_seq_
                                                                           CONNECT BY PRIOR equipment_object_seq = functional_object_seq);
BEGIN
   
   IF structure_in_tree_ = 'L' THEN
      FOR rec_ IN get_location_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'R' THEN
      FOR rec_ IN get_from_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'T' THEN
      FOR rec_ IN get_to_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'P' THEN
      FOR rec_ IN get_process_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'S' THEN
      FOR rec_ IN get_pipe_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'E' THEN
      FOR rec_ IN get_circuit_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSE
      
      FOR rec_ IN get_sup_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;
   
   RETURN base_collection_;
END Get_All_Active_Work_Tasks_Filtered___;

@DynamicComponentDependency WO
FUNCTION Get_All_Active_Work_Task_Steps_Filtered___ (
   structure_in_tree_    IN VARCHAR2,
   equipment_object_seq_ IN NUMBER ) RETURN Objid_Arr
IS
	base_collection_ Objid_Arr := Objid_Arr();
  
   CURSOR get_location_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
       WHERE objstate = 'NOTDONE'
          AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = location_object_seq);

   CURSOR get_from_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
       WHERE objstate = 'NOTDONE'
          AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = from_object_seq);


   CURSOR get_to_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
       WHERE objstate = 'NOTDONE'
          AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = to_object_seq);

   CURSOR get_process_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
       WHERE objstate = 'NOTDONE'
          AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = process_object_seq);

   CURSOR get_pipe_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
       WHERE objstate = 'NOTDONE'
          AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = pipe_object_seq);

   CURSOR get_circuit_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
       WHERE objstate = 'NOTDONE'
          AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = circuit_object_seq);

   CURSOR get_sup_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
       WHERE objstate = 'NOTDONE'
          AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = functional_object_seq);
BEGIN       
   IF structure_in_tree_ = 'L' THEN
      FOR rec_ IN get_location_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'R' THEN
      FOR rec_ IN get_from_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'T' THEN
      FOR rec_ IN get_to_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'P' THEN
      FOR rec_ IN get_process_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'S' THEN
      FOR rec_ IN get_pipe_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'E' THEN
      FOR rec_ IN get_circuit_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSE      
      FOR rec_ IN get_sup_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;

   RETURN base_collection_;
END Get_All_Active_Work_Task_Steps_Filtered___;

@DynamicComponentDependency WO
FUNCTION Get_All_Active_Work_Task_Steps_Pm_Filtered___ (
   structure_in_tree_    IN VARCHAR2,
   equipment_object_seq_ IN NUMBER ) RETURN Objid_Arr
IS
base_collection_ Objid_Arr := Objid_Arr();
  
   CURSOR get_location_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
        WHERE objstate = 'NOTDONE'
        AND source_connection_lu_name_db = 'PmAction'
        AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = location_object_seq);

   CURSOR get_from_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
        WHERE objstate = 'NOTDONE'
        AND source_connection_lu_name_db = 'PmAction'
        AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = from_object_seq);


   CURSOR get_to_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
        WHERE objstate = 'NOTDONE'
        AND source_connection_lu_name_db = 'PmAction'
        AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = to_object_seq);

   CURSOR get_process_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
        WHERE objstate = 'NOTDONE'
        AND source_connection_lu_name_db = 'PmAction'
        AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = process_object_seq);

   CURSOR get_pipe_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
        WHERE objstate = 'NOTDONE'
        AND source_connection_lu_name_db = 'PmAction'
        AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = pipe_object_seq);

   CURSOR get_circuit_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
        WHERE objstate = 'NOTDONE'
        AND source_connection_lu_name_db = 'PmAction'
        AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = circuit_object_seq);

   CURSOR get_sup_work_task_steps IS
      SELECT objid
        FROM jt_task_step_uiv
        WHERE objstate = 'NOTDONE'
        AND source_connection_lu_name_db = 'PmAction'
        AND (OBJECT_CONNECTION_LU_NAME_DB, OBJECT_CONNECTION_ROWKEY) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = functional_object_seq);
BEGIN       
   IF structure_in_tree_ = 'L' THEN
      FOR rec_ IN get_location_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'R' THEN
      FOR rec_ IN get_from_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'T' THEN
      FOR rec_ IN get_to_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'P' THEN
      FOR rec_ IN get_process_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'S' THEN
      FOR rec_ IN get_pipe_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'E' THEN
      FOR rec_ IN get_circuit_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSE      
      FOR rec_ IN get_sup_work_task_steps LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;

   RETURN base_collection_;
END Get_All_Active_Work_Task_Steps_Pm_Filtered___;

@DynamicComponentDependency WO
FUNCTION Get_All_P_M_Active_Work_Tasks_Filtered___ (
   structure_in_tree_ IN VARCHAR2,
   equipment_object_seq_ IN NUMBER ) RETURN Objid_Arr
IS
	base_collection_ Objid_Arr := Objid_Arr();
  
   CURSOR get_location_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND source_connection_lu_name_db = 'PmAction'
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = location_object_seq);

   CURSOR get_from_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND source_connection_lu_name_db = 'PmAction'
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = from_object_seq);


   CURSOR get_to_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND source_connection_lu_name_db = 'PmAction'
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = to_object_seq);

   CURSOR get_process_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND source_connection_lu_name_db = 'PmAction'
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = process_object_seq);

   CURSOR get_pipe_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND source_connection_lu_name_db = 'PmAction'
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = pipe_object_seq);

   CURSOR get_circuit_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND source_connection_lu_name_db = 'PmAction'
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = circuit_object_seq);

   CURSOR get_sup_work_tasks IS
      SELECT objid
        FROM jt_task_uiv
       WHERE objstate NOT IN('FINISHED', 'CANCELLED')
          AND source_connection_lu_name_db = 'PmAction'
          AND (actual_obj_conn_lu_name_db, actual_obj_conn_rowkey) IN (SELECT 'EquipmentObject', objkey
                                                                          FROM equipment_object_uiv
                                                                          START WITH equipment_object_seq = equipment_object_seq_
                                                                          CONNECT BY PRIOR equipment_object_seq = functional_object_seq);
BEGIN
   
   IF structure_in_tree_ = 'L' THEN
      FOR rec_ IN get_location_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'R' THEN
      FOR rec_ IN get_from_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'T' THEN
      FOR rec_ IN get_to_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'P' THEN
      FOR rec_ IN get_process_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'S' THEN
      FOR rec_ IN get_pipe_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSIF structure_in_tree_ = 'E' THEN
      FOR rec_ IN get_circuit_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   ELSE
      
      FOR rec_ IN get_sup_work_tasks LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;

   RETURN base_collection_;
END Get_All_P_M_Active_Work_Tasks_Filtered___;

