---------------------------------------------------------------------------------------------
--  Module : EQUIP
--
--  Purpose: Upgrade database objects for IFS/Equipment
--           from version 21.2.0 to 22.1.0
--
--  File   : 2210.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  210917   BDT     Created (by Build and Deployment Team).
--  220106   DMALLK  AM21R2-3233, Added cluster_id to equipment_object_tab.
--  220112   TGUNLK  AM21R2-3586, Added reported_task, created_by, created_date to equip_obj_down_time_task_tab.
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_1');
PROMPT START upgrading WITH 2210.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

-- ***** Equipment_Object_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_2');
PROMPT Adding object parent columns to equipment_object_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Constraint_columns('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_PK') != 'EQUIPMENT_OBJECT_SEQ') THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'LOCATION_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'FROM_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'TO_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'PROCESS_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'PIPE_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CIRCUIT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_3');
PROMPT Changing contraint equipment_object_pk in equipment_object_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PK';
   max_rownum_ NUMBER :=0;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN
      UPDATE EQUIPMENT_OBJECT_TAB SET EQUIPMENT_OBJECT_SEQ = ROWNUM;
      COMMIT;
      
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
      
      Database_SYS.Remove_Constraints(table_name_, index_name_);
      
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_4');
PROMPT Adding contraint equipment_object_bk in equipment_object_tab.
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_BK';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'MCH_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_5');
PROMPT Updating functional_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT contract, mch_code, equipment_object_seq
      FROM equipment_object_tab;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
      UPDATE equipment_object_tab
      SET functional_object_seq = obj_rec_tab_(i_).equipment_object_seq
      WHERE sup_mch_code = obj_rec_tab_(i_).mch_code
      AND sup_contract =  obj_rec_tab_(i_).contract;
      
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_6');
PROMPT Updating location_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT contract, mch_code, equipment_object_seq
      FROM equipment_object_tab;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
      UPDATE equipment_object_tab 
      SET location_object_seq = obj_rec_tab_(i_).equipment_object_seq
      WHERE location_mch_code = obj_rec_tab_(i_).mch_code
      AND location_contract =  obj_rec_tab_(i_).contract;
      
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_7');
PROMPT Updating from_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT contract, mch_code, equipment_object_seq
      FROM equipment_object_tab;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
      UPDATE equipment_object_tab
      SET from_object_seq = obj_rec_tab_(i_).equipment_object_seq
      WHERE from_mch_code = obj_rec_tab_(i_).mch_code
      AND from_contract =  obj_rec_tab_(i_).contract;
      
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_8');
PROMPT Updating to_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT contract, mch_code, equipment_object_seq
      FROM equipment_object_tab;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
      UPDATE equipment_object_tab
      SET to_object_seq = obj_rec_tab_(i_).equipment_object_seq
      WHERE to_mch_code = obj_rec_tab_(i_).mch_code
      AND to_contract =  obj_rec_tab_(i_).contract;
      
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_9');
PROMPT Updating process_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT contract, mch_code, equipment_object_seq
      FROM equipment_object_tab;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
      UPDATE equipment_object_tab
      SET process_object_seq = obj_rec_tab_(i_).equipment_object_seq
      WHERE process_mch_code = obj_rec_tab_(i_).mch_code
      AND process_contract =  obj_rec_tab_(i_).contract;
      
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_10');
PROMPT Updating pipe_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT contract, mch_code, equipment_object_seq
      FROM equipment_object_tab;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
      UPDATE equipment_object_tab
      SET pipe_object_seq = obj_rec_tab_(i_).equipment_object_seq
      WHERE pipe_mch_code = obj_rec_tab_(i_).mch_code
      AND pipe_contract =  obj_rec_tab_(i_).contract;
      
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_11');
PROMPT Updating circuit_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT contract, mch_code, equipment_object_seq
      FROM equipment_object_tab;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
      UPDATE equipment_object_tab
      SET circuit_object_seq = obj_rec_tab_(i_).equipment_object_seq
      WHERE circuit_mch_code = obj_rec_tab_(i_).mch_code
      AND circuit_contract =  obj_rec_tab_(i_).contract;
      
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_12');
PROMPT Modify sequence EQUIPMENT_OBJECT_SEQ
DECLARE
   sequence_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_SEQ';
   stmt_   VARCHAR2(2000);
   next_id_         NUMBER;
   CURSOR get_next_id IS
      SELECT NVL(MAX(ROWNUM), 0) + 1 
      FROM   EQUIPMENT_OBJECT_TAB;
BEGIN
   OPEN get_next_id;
   FETCH get_next_id INTO next_id_;
   CLOSE get_next_id;

   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH ' || next_id_ || ' NOCACHE ORDER', TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_13');
PROMPT Modify INDEX EQUIPMENT_OBJECT_IX1
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_IX1';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'FUNCTIONAL_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_14');
PROMPT Modify INDEX EQUIPMENT_OBJECT_IX1
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_IX10';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_OBJECT_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_15');
PROMPT Modify INDEX EQUIPMENT_OBJECT_IX11
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_IX11';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'FROM_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_16');
PROMPT Modify INDEX EQUIPMENT_OBJECT_IX12
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_IX12';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TO_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_17');
PROMPT Modify INDEX EQUIPMENT_OBJECT_IX13
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_IX13';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PIPE_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_18');
PROMPT Modify INDEX EQUIPMENT_OBJECT_IX14
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_IX14';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_19');
PROMPT Modify INDEX EQUIPMENT_OBJECT_IX15
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_IX15';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CIRCUIT_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_20');
PROMPT ADD COLUMNS cluster_id TO equipment_object_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CLUSTER_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/
-- ***** Equipment_Object_Tab End *****


-- ***** Equipment_Object_Conn_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_21');
PROMPT Adding columns equipment_object_seq and  consist_equ_object_seq to equipment_object_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_CONN_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ') AND Database_SYS.Column_Exist(table_name_, 'CONSIST_EQU_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONSIST_EQU_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_22');
PROMPT Updating equipment_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_conn_tab equ_conn
      WHERE equ_obj.mch_code = equ_conn.mch_code
      AND equ_obj.contract = equ_conn.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_CONN_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
            UPDATE equipment_object_conn_tab
            SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
            WHERE mch_code = obj_rec_tab_(i_).mch_code
            AND contract =  obj_rec_tab_(i_).contract;

         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_23');
PROMPT Updating consist_equ_object_seq in equipment_object_conn_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_conn_tab equ_conn
      WHERE equ_obj.mch_code = equ_conn.mch_code_consist
      AND equ_obj.contract = equ_conn.contract_consist;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_CONN_TAB', 'CONSIST_EQU_OBJECT_SEQ') = 'Y') THEN
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
            UPDATE equipment_object_conn_tab
            SET consist_equ_object_seq = obj_rec_tab_(i_).equipment_object_seq
            WHERE mch_code_consist = obj_rec_tab_(i_).mch_code
            AND contract_consist =  obj_rec_tab_(i_).contract;

         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_24');
PROMPT Alterting constraint equipment_object_conn_pk in equipment_object_conn_tab.
DECLARE
   table_name_  VARCHAR2(30) := 'EQUIPMENT_OBJECT_CONN_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_CONN_PK';
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_CONN_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y' AND Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_CONN_TAB', 'CONSIST_EQU_OBJECT_SEQ') = 'Y') THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Set_Table_Column(columns_, 'CONSIST_EQU_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);

      Database_SYS.Remove_Constraints(table_name_, index_name_);

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
      Database_SYS.Set_Table_Column(columns_, 'CONSIST_EQU_OBJECT_SEQ');
      Database_SYS.Set_Table_Column(columns_, 'CONNECTION_TYPE');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_25');
PROMPT Altering columns mch_code, contract, mch_code_consist, contract_consist as nullable in equipment_object_conn_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_CONN_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT') = 'N'
   AND Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE_CONSIST') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT_CONSIST') = 'N') THEN 
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE_CONSIST', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT_CONSIST', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);     
  END IF;
END;
/

-- ***** Equipment_Object_Conn_Tab End *****


-- ***** Object_Supplier_Warranty_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_26');
PROMPT Adding column equipment_object_seq to object_supplier_warranty_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'OBJECT_SUPPLIER_WARRANTY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_27');
PROMPT Updating equipment_object_seq in object_supplier_warranty_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, object_supplier_warranty_tab obj_sup_war
      WHERE equ_obj.mch_code = obj_sup_war.mch_code
      AND equ_obj.contract = obj_sup_war.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('OBJECT_SUPPLIER_WARRANTY_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE object_supplier_warranty_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_28');
PROMPT Alterting constraint object_supplier_warranty_pk in object_supplier_warranty_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'OBJECT_SUPPLIER_WARRANTY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   index_name_ VARCHAR2(30) := 'OBJECT_SUPPLIER_WARRANTY_PK';
BEGIN
IF (Database_SYS.Get_Column_Nullable(table_name_, 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Remove_Constraints(table_name_, index_name_);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_29');
PROMPT Altering columns mch_code, contract as nullable in equipment_object_conn_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'OBJECT_SUPPLIER_WARRANTY_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT') = 'N') THEN 
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);     
  END IF;
END;
/

-- ***** Object_Supplier_Warranty_Tab End *****


-- ***** Equipment_Tw_Settings_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_30');
PROMPT Adding column equipment_object_seq to equipment_tw_settings_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_TW_SETTINGS_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_31');
PROMPT Updating equipment_object_seq in equipment_tw_settings_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_tw_settings_tab equ_tw_set
      WHERE equ_obj.mch_code = equ_tw_set.mch_code
      AND equ_obj.contract = equ_tw_set.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_TW_SETTINGS_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_tw_settings_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

-- ***** Equipment_Tw_Settings_Tab End *****


-- ***** Equipment_Structure_Cost_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_32');
PROMPT Adding columns equipment_object_seq, sup_equ_object_seq to equipment_structure_cost_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ') AND Database_SYS.Column_Exist(table_name_, 'SUP_EQU_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'SUP_EQU_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_33');
PROMPT Updating equipment_object_seq in equipment_structure_cost_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_structure_cost_tab equ_cost
      WHERE equ_obj.mch_code = equ_cost.mch_code
      AND equ_obj.contract = equ_cost.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_STRUCTURE_COST_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_structure_cost_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_34');
PROMPT Updating sup_equ_object_seq in equipment_structure_cost_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_structure_cost_tab equ_cost
      WHERE equ_obj.mch_code = equ_cost.sup_mch_code
      AND equ_obj.contract = equ_cost.sup_contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_STRUCTURE_COST_TAB', 'SUP_EQU_OBJECT_SEQ') = 'Y') THEN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_structure_cost_tab
         SET sup_equ_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE sup_mch_code = obj_rec_tab_(i_).mch_code
         AND sup_contract = obj_rec_tab_(i_).contract;
         
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_35');
PROMPT Altering columns mch_code, contract as nullable and equipment_object_seq an not nullable in equipment_object_conn_tab. 
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
  IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
  END IF; 
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_36');
PROMPT Modify INDEX EQUIPMENT_STRUCTURE_COST_IX1
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_IX1';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_37');
PROMPT Modify INDEX EQUIPMENT_STRUCTURE_COST_IX2
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_IX2';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SUP_EQU_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Equipment_Structure_Cost_Tab End *****


-- ***** Equipment_Object_Test_Pnt_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_38');
PROMPT Adding columns equipment_object_seq to equipment_object_test_pnt_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_39');
PROMPT Updating equipment_object_seq in equipment_object_test_pnt_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_test_pnt_tab equ_test_point
      WHERE equ_obj.mch_code = equ_test_point.mch_code
      AND equ_obj.contract = equ_test_point.contract;
BEGIN
   OPEN get_objects;
   LOOP
      FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
      FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_object_test_pnt_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
      COMMIT;
      EXIT WHEN get_objects%NOTFOUND;
   END LOOP;
   CLOSE get_objects;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_40');
PROMPT Modify INDEX EQUIPMENT_OBJECT_TEST_PNT_IX1
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_IX1';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'TEST_POINT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Equipment_Object_Test_Pnt_Tab End *****


-- ***** Equipment_Object_Spare_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_41');
PROMPT Adding columns equipment_object_seq to equipment_object_spare_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_SPARE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_42');
PROMPT Updating equipment_object_seq in equipment_object_spare_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_spare_tab equ_spare
      WHERE equ_obj.mch_code = equ_spare.mch_code
      AND equ_obj.contract = equ_spare.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_SPARE_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_object_spare_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_43');
PROMPT Altering columns mch_code as nullable and equipment_object_seq an not nullable in equipment_object_spare_tab. 
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_SPARE_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
  IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);    
  END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_44');
PROMPT Modify INDEX EQUIPMENT_OBJECT_SPARE_IX1
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_SPARE_IX1';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_SPARE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Equipment_Object_Spare_Tab End *****


-- ***** Equipment_Object_Party_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_45');
PROMPT Adding columns equipment_object_seq to equipment_object_party_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARTY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_46');
PROMPT Updating equipment_object_seq in equipment_object_party_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_party_tab equ_party
      WHERE equ_obj.mch_code = equ_party.mch_code
      AND equ_obj.contract = equ_party.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_PARTY_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_object_party_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_47');
PROMPT Altering constraints equipment_object_party_rk and equipment_object_party_pk in equipment_object_party_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARTY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARTY_PK';
BEGIN
   IF (Database_SYS.Get_Column_Nullable(table_name_, 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
      
      Database_SYS.Remove_Constraints(table_name_, index_name_);
      
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
      Database_SYS.Set_Table_Column(columns_, 'IDENTITY');
      Database_SYS.Set_Table_Column(columns_, 'PARTY_TYPE');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_48');
PROMPT Altering columns mch_code, contract  as nullable in equipment_object_party_tab. 
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARTY_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
  IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT') = 'N') THEN   

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);    
  END IF;
END;
/

-- ***** Equipment_Object_Party_Tab End *****


-- ***** Equipment_Object_Param_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_49');
PROMPT Adding columns equipment_object_seq to equipment_object_param_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_50');
PROMPT Updating equipment_object_seq in equipment_object_param_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_param_tab equ_param
      WHERE equ_obj.mch_code = equ_param.mch_code
      AND equ_obj.contract = equ_param.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_PARAM_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_object_param_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

-- ***** Equipment_Object_Param_Tab End *****


-- ***** Equipment_Object_Meas_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_51');
PROMPT Adding columns equipment_object_seq to equipment_object_meas_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_52');
PROMPT Updating equipment_object_seq in equipment_object_meas_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_meas_tab equ_mes
      WHERE equ_obj.mch_code = equ_mes.mch_code
      AND equ_obj.contract = equ_mes.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_MEAS_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_object_meas_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_53');
PROMPT Set mch_code nullable in equipment_object_meas_tab
DECLARE
   table_name_    VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N') THEN   
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);     
  END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_54');
PROMPT Modify INDEX EQUIPMENT_OBJECT_MEAS_IX1
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_IX1';
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Index_Exist(index_name_)) THEN
      Database_SYS.Remove_Indexes(table_name_,index_name_);
   END IF;
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'TEST_POINT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Equipment_Object_Meas_Tab End *****


-- ***** Equipment_Object_Journal_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_55');
PROMPT Adding columns equipment_object_seq to equipment_object_journal_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_56');
PROMPT Updating equipment_object_seq in equipment_object_journal_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, equipment_object_journal_tab equ_jour
      WHERE equ_obj.mch_code = equ_jour.mch_code
      AND equ_obj.contract = equ_jour.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('EQUIPMENT_OBJECT_JOURNAL_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE equipment_object_journal_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_57');
PROMPT Altering constraints equipment_object_journal_rk and equipment_object_journal_pk in equipment_object_party_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_PK';
   rk_index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_RK';
BEGIN
   IF (Database_SYS.Get_Column_Nullable(table_name_, 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
      
      Database_SYS.Remove_Constraints(table_name_, index_name_);
      
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
      Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_58');
PROMPT Altering columns mch_code, contract  as nullable in equipment_object_journal_tab. 
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
  IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT') = 'N') THEN   

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);    
  END IF;
END;
/

-- ***** Equipment_Object_Journal_Tab End *****

-- ***** Object_Cust_Warranty_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_59');
PROMPT Adding columns equipment_object_seq to object_cust_warranty_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'OBJECT_CUST_WARRANTY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_60');
PROMPT Updating equipment_object_seq in object_cust_warranty_tab.
DECLARE
   TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                            mch_code               equipment_object_tab.mch_code%type,
                            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );
   
   TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
   obj_rec_tab_          obj_rec_tab_type;
   bulk_limit_           CONSTANT NUMBER := 10000;
   
   CURSOR get_objects IS
      SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
      FROM equipment_object_tab equ_obj, object_cust_warranty_tab equ_obj_cust_war
      WHERE equ_obj.mch_code = equ_obj_cust_war.mch_code
      AND equ_obj.contract = equ_obj_cust_war.contract;
BEGIN
   IF (Database_SYS.Get_Column_Nullable('OBJECT_CUST_WARRANTY_TAB', 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      OPEN get_objects;
      LOOP
         FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
         FORALL i_ IN 1..obj_rec_tab_.count
         UPDATE object_cust_warranty_tab
         SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
         WHERE mch_code = obj_rec_tab_(i_).mch_code
         AND contract = obj_rec_tab_(i_).contract;
         
         COMMIT;
         EXIT WHEN get_objects%NOTFOUND;
      END LOOP;
      CLOSE get_objects;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_61');
PROMPT Altering constraints equipment_object_party_rk and equipment_object_party_pk in object_cust_warranty_tab.
DECLARE
   table_name_    VARCHAR2(30) := 'OBJECT_CUST_WARRANTY_TAB';
   columns_       Database_SYS.ColumnTabType;
   column_        Database_SYS.ColRec;
   index_name_    VARCHAR2(30) := 'OBJECT_CUST_WARRANTY_PK';
BEGIN
   IF (Database_SYS.Get_Column_Nullable(table_name_, 'EQUIPMENT_OBJECT_SEQ') = 'Y') THEN   
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
      
      Database_SYS.Remove_Constraints(table_name_, index_name_);
      
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
      Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_62');
PROMPT Altering columns mch_code, contract  as nullable in object_supplier_warranty_tab. 
DECLARE
   table_name_ VARCHAR2(30) := 'OBJECT_CUST_WARRANTY_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
  IF (Database_SYS.Get_Column_Nullable(table_name_, 'MCH_CODE') = 'N' AND Database_SYS.Get_Column_Nullable(table_name_, 'CONTRACT') = 'N') THEN   
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);     
  END IF;
END;
/

-- ***** Object_Cust_Warranty_Tab End *****

-- ****EQUIP_OBJ_DOWNTIME_TAB Start****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_63');
PROMPT Adding new Table EQUIP_OBJ_DOWNTIME_TAB  EQUIP_OBJ_DOWNTIME_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DOWNTIME_SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DOWNTIME', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UPTIME', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

-- ****EQUIP_OBJ_DOWNTIME_TAB End****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_64');
PROMPT Adding contraint EQUIP_OBJ_DOWNTIME_PK in EQUIP_OBJ_DOWNTIME_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_PK';
   table_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'DOWNTIME_SEQ');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_65');
PROMPT Adding contraint EQUIP_OBJ_DOWNTIME_RK in EQUIP_OBJ_DOWNTIME_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_RK';
   table_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ****EQUIP_OBJ_DOWNTIME_TASK_TAB Start****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_66');
PROMPT Adding new Table EQUIP_OBJ_DOWNTIME_TASK_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TASK_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DOWNTIME_SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TASK_SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REPORTED_TASK', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_BY', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

-- ****EQUIP_OBJ_DOWNTIME_TASK_TAB End****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_67');
PROMPT Adding contraint EQUIP_OBJ_DOWNTIME_TASK_PK in EQUIP_OBJ_DOWNTIME_TASK_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TASK_PK';
   table_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TASK_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'DOWNTIME_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'TASK_SEQ');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_68');
PROMPT Adding contraint EQUIP_OBJ_DOWNTIME_TASK_RK in EQUIP_OBJ_DOWNTIME_TASK_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TASK_RK';
   table_name_ VARCHAR2(30) := 'EQUIP_OBJ_DOWNTIME_TASK_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_69');
PROMPT Adding SEQUENCE DOWNTIME_SEQ
DECLARE
   sequence_name_ VARCHAR2(30) := 'DOWNTIME_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 1  ORDER', TRUE);
END;
/

-- The same update is there in both TOOLEQ upg and EQUIP upg to resolve dynamic component dependecy issues
-- ***** RESOURCE_TOOL_EQUIP_TAB Start ***** 
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Timestamp_70');
PROMPT UPDATE equipment_object_seq IN resource_tool_equip_tab
BEGIN
   IF Database_SYS.Column_Exist('RESOURCE_TOOL_EQUIP_TAB', 'EQUIPMENT_OBJECT_SEQ') THEN
         DECLARE
            TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
            mch_code               equipment_object_tab.mch_code%type,
            equipment_object_seq   equipment_object_tab.equipment_object_seq%type );

         TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
         obj_rec_tab_          obj_rec_tab_type;
         bulk_limit_           CONSTANT NUMBER := 10000;

         CURSOR get_objects IS
            SELECT equ_tab.contract contract, equ_tab.mch_code mch_code, equ_tab.equipment_object_seq equipment_object_seq
            FROM equipment_object_tab equ_tab, resource_tool_equip_tab res_tool_obj
            WHERE equ_tab.mch_code = res_tool_obj.mch_code
            AND equ_tab.contract = res_tool_obj.mch_code_contract
            AND res_tool_obj.equipment_object_seq IS NULL;
         BEGIN
            OPEN get_objects;
            LOOP
               FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
               FORALL i_ IN 1..obj_rec_tab_.count
               UPDATE resource_tool_equip_tab
               SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
               WHERE mch_code= obj_rec_tab_(i_).mch_code
               AND mch_code_contract = obj_rec_tab_(i_).contract;

               COMMIT;
               EXIT WHEN get_objects%NOTFOUND;
            END LOOP;
            CLOSE get_objects;
         END;
   END IF;
END;
/
-- ***** RESOURCE_TOOL_EQUIP_TAB End *****
--  ---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','2210.upg','Done');
PROMPT Upgrade statements IN FILE 2210.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
