-----------------------------------------------------------------------------
--
--  Logical unit: SerialMaintenanceAwareHandling
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  180831  SHEPLK  SAUXXW4-1637, tbwMakeMaintenanceAware - Added CRUD_Update___()
-----------------------------------------------------------------------------

layer Core;

--

--PROCEDURE CRUD_Update___ (
--   etag_ IN OUT VARCHAR2,
--   key_  IN OUT Part_Serial_Catalog_Key,
--   attr_ IN OUT VARCHAR2,
--   info_    OUT VARCHAR2,
--   action_ IN VARCHAR2 )
--IS
--   state_ VARCHAR2(30) := 'FALSE';
--   del_to_int_cust_ VARCHAR2(5);
--   move_facility_ VARCHAR2(5) := 'FALSE';
--   contract_ VARCHAR2(5);
--   objid_         VARCHAR2(100);
--   objversion_    VARCHAR2(2000);
--   newattr_ VARCHAR2(2000);
--BEGIN
--   --Should never save to database.
--   contract_ := Client_SYS.Get_Item_Value('ALTERNATE_CONTRACT', attr_);
--   move_facility_ := Client_SYS.Get_Item_Value('MOVE_FACILITY', attr_);
--
--   IF action_ = 'DO' THEN
--      IF (Client_SYS.Get_Item_Value('MAINTENANCE_AWARE', attr_) = 'TRUE') THEN 
--         Equipment_Serial_API.Create_Maintenance_Aware(key_.part_no, key_.serial_no, contract_, NULL, move_facility_);
--         --Get_Objid_Objversion___(objid_,objversion_,key_);
--         --etag_ := Get_Etag___(objid_,objversion_);
--      END IF;
--   END IF;
--END CRUD_Update___;


FUNCTION Delivered_To_Internal_Customer___ (
   part_no_   IN VARCHAR2,
   serial_no_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Part_Serial_Catalog_API.Delivered_To_Internal_Customer(part_no_, serial_no_);
END Delivered_To_Internal_Customer___;


@Override
PROCEDURE CRUD_Create___(
   rec_ IN Serial_Parts_Virtual_Rec )
IS
   CURSOR check_any_issued(part_no_ IN VARCHAR2, serial_no_ IN VARCHAR2) IS
   SELECT count(*)
   FROM part_serial_catalog P
   WHERE part_no_ = P.part_no AND serial_no_ = P.serial_no
   AND P.objstate = 'Issued'
   AND Part_Serial_Catalog_API.Delivered_To_Internal_Customer(P.part_no,P.serial_no) = 'FALSE'
   AND (P.part_no, P.serial_no)  not in (select E.part_no, E.serial_no from Equipment_serial E);
   
   CURSOR get_serials(part_no_ IN VARCHAR2, serial_no_ IN VARCHAR2) IS
   SELECT *
   FROM part_serial_catalog P
   WHERE part_no_ = P.part_no AND serial_no_ = P.serial_no
   AND (P.part_no, P.serial_no)  not in (select E.part_no, E.serial_no from Equipment_serial E);
   
   serial_rec_ Serial_Maint_Aware_Part_List_Virtual_Rec;
   site_ VARCHAR2(5);
   issued_count_ NUMBER := 0;
   rec_new_ Serial_Parts_Virtual_Rec;
   part_issue_count_      NUMBER;
   part_issue_list_       Utility_SYS.STRING_TABLE;
   index_                 NUMBER := 1;
   part_no_               part_serial_catalog_tab.part_no%TYPE;
   serial_no_             part_serial_catalog_tab.serial_no%TYPE;
BEGIN
   Utility_SYS.Tokenize(rec_.Part_No_List, ';', part_issue_list_, part_issue_count_);
   LOOP
      EXIT WHEN index_ > part_issue_count_;
      part_no_ := Client_SYS.Get_Key_Reference_Value(part_issue_list_(index_), 'PART_NO');
      serial_no_ := Client_SYS.Get_Key_Reference_Value(part_issue_list_(index_), 'SERIAL_NO');

      OPEN check_any_issued(part_no_, serial_no_);
      FETCH check_any_issued INTO issued_count_;
      CLOSE check_any_issued;
      
      IF (index_ = 1) THEN
          rec_new_ := rec_;
         IF issued_count_ > 0 THEN 
            rec_new_.Issued_Exist := 'Y';
            rec_new_.Place_All_Serial_In_Fac := TRUE;
         else  
            rec_new_.Issued_Exist := 'N';      
         END IF; 
         super(rec_new_);
      END IF;
      site_ := USER_ALLOWED_SITE_API.Get_Default_Site;  
      FOR partrec_ IN get_serials(part_no_, serial_no_) LOOP
         serial_rec_.part_no := partrec_.part_no;
         serial_rec_.serial_no := partrec_.serial_no;
         serial_rec_.Objstate := partrec_.objstate;
         serial_rec_.objkey := sys_guid();      
         serial_rec_.parent_objkey := rec_new_.objkey;
         serial_rec_.Part_No_List := rec_new_.Part_No_List;
         serial_rec_.site := site_;
         serial_rec_.Deliverd_To_Internal_Customer := Part_Serial_Catalog_API.Delivered_To_Internal_Customer(partrec_.part_no,partrec_.serial_no);
         IF (serial_rec_.Deliverd_To_Internal_Customer = 'FALSE' AND partrec_.objstate = 'Issued') THEN
            serial_rec_.Place_Serial_In_Facility := TRUE;
         ELSE
            serial_rec_.Place_Serial_In_Facility := FALSE;
         END IF;

         CRUD_Create___(serial_rec_);      
         serial_rec_ := NULL;
      END LOOP;
      
      index_ := index_ + 1;
   END LOOP;
END CRUD_Create___;

PROCEDURE Finish___ (
   key_ IN Serial_Parts_Virtual_Key ) 
IS
   rec_ Serial_Parts_Virtual_Rec; 
BEGIN
   rec_ := Get_Record___(key_);
   FOR objects_ IN Get_Maint_Aware_List_Array___(key_) LOOP

      IF ((rec_.Place_All_Serial_In_Fac = TRUE) AND (objects_.objstate = 'Issued')) THEN
         objects_.Place_Serial_In_Facility := 'TRUE';
      END IF;         

      Equipment_Serial_API.Create_Maintenance_Aware(objects_.Part_No,objects_.serial_no,objects_.site, objects_.Object_Id,objects_.Place_Serial_In_Facility);
   END LOOP;
END Finish___;

PROCEDURE Select_All_In_List___ (
   objkey_ IN VARCHAR2 ) 
IS
   key_  Serial_Parts_Virtual_Key;
   old_ Serial_Maint_Aware_Part_List_Virtual_Rec;
   new_ Serial_Maint_Aware_Part_List_Virtual_Rec;
   parentkey_ Serial_Maint_Aware_Part_List_Virtual_Key;
BEGIN
   Trace_SYS.Message('objkey_.....'||objkey_);
   
   key_.objkey := objkey_;
   FOR serial_rec_ IN Get_Maint_Aware_List_Array___(key_) LOOP
   Trace_SYS.Message('Deliverd_To_Internal_Customer.....'||serial_rec_.Deliverd_To_Internal_Customer);      
      IF (serial_rec_.Deliverd_To_Internal_Customer = 'FALSE' AND serial_rec_.objstate = 'Issued'
          AND (serial_rec_.site IS NULL OR (serial_rec_.site IS NOT NULL AND User_Allowed_Site_API.Is_Authorized(serial_rec_.site) = 1))) THEN
         parentkey_.objkey  := serial_rec_.objkey;
         old_ :=  Get_Record___(parentkey_);
         new_ := old_;
         new_.Place_Serial_In_Facility := TRUE;   
         IF ( old_.Place_Serial_In_Facility != new_.Place_Serial_In_Facility ) THEN
             Trace_SYS.Message('new_.objkey'||new_.objkey);              
            CRUD_Update___(old_,new_ );            
         END IF;
      END IF;
         
   END LOOP;
END Select_All_In_List___;
