-----------------------------------------------------------------------------
--
--  Fragment:     EquipmentObjectList
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181019  SHEPLK  SAUXXW4-1592  Added Get_Contract___ for dlgNewFunctionalObject
--  181024  BAKALK  SAUXXW4-10496 Added some functions/procedures for supporting commands on the fragment
--  181026  CLEKLK  SAUXXW4-10497, Added Get_Type_Designation_Values___
--  181101  BAKALK  SAUXXW4-10564, Added Validate_Sup_Mch_Code___
--  190402  LoPrlk  SAUXXW4-13050, Functionality was altered to use plain LOVs instead of lov switches to fetch code parts.
--  200722  CLEKLK  AMXTEND-700, Added CRUD_Create___ and Get_Part_Description___
--  210203  CLEKLK  AM2020R1-7085, Modified Set_Structure_In_Operation_Functional___,Set_Sturucture_Outof_Operation_Functional___,Set_Structure_Scrapped_Functional___,
--  211001  JIHALK  AMZEAX-697, Added Get_Item_Class_Id___ Function.
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Equipment_Object_List_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   part_no_       VARCHAR2(25);
   serial_track_  VARCHAR2(20);
BEGIN
   part_no_       := Client_SYS.Get_Item_Value('PART_NO', attr_);
   serial_track_  := Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no_);
   
   super(etag_, key_, attr_, info_, action_);
   
   IF serial_track_ != 'TRUE' THEN
      Client_SYS.Add_Warning(lu_name_, 'NOSERIALTR: Part no :P1 is not serial tracked "At Receipt and Issue". It will not be possible to move the serial object to the inventory.', part_no_);
   END IF;
   
   Client_SYS.Merge_Info(info_);
   info_ := Client_SYS.Get_All_Info;
END;

@Override
PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Equipment_Object_Spare_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   contract_         Equipment_Object_Tab.contract%TYPE;
   equip_obj_seq_    Equipment_Object_Tab.equipment_object_seq%TYPE;
BEGIN
   equip_obj_seq_ :=Client_SYS.Get_Item_Value('EQUIPMENT_OBJECT_SEQ',attr_ );
   contract_ := Equipment_Object_API.Get_Contract(equip_obj_seq_);
   Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);  
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;

@Override
PROCEDURE CRUD_Default___ (
   rec_  IN OUT Equipment_Object_List_Rec )
IS
   company_          VARCHAR2(20);
BEGIN
   super(rec_);
   company_ := Site_API.Get_Company(rec_.contract);
   rec_.cost_center_code_part  := Accounting_Code_Parts_API.Get_Code_Part_For_Logical(company_, 'CostCenter');
   rec_.object_code_part       := Accounting_Code_Parts_API.Get_Code_Part_For_Logical(company_, 'Object');
END CRUD_Default___;

FUNCTION Get_User_Default_Contract___ RETURN VARCHAR2
IS
BEGIN
   RETURN User_Default_API.Get_Contract;
END Get_User_Default_Contract___;
--
FUNCTION Get_Func_Mch_Name___(
   contract_ IN VARCHAR2,
   mch_code_  IN VARCHAR2 ) RETURN VARCHAR2
IS 
BEGIN
   RETURN Equipment_Functional_API.Get_Mch_Name(contract_, mch_code_);
END Get_Func_Mch_Name___;
--
FUNCTION Get_Part_Description___(
   part_no_ IN VARCHAR2) RETURN VARCHAR2
IS 
BEGIN
   RETURN Part_Catalog_API.Get_Description(part_no_);
END Get_Part_Description___;

FUNCTION Get_Mch_Type___ (
  type_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN TYPE_DESIGNATION_API.Get_Mch_Type(type_);
END Get_Mch_Type___;
--
--PROCEDURE Set_In_Operation___(
--   key_ IN Equipment_Object_List_Key)   
--IS
--BEGIN
--   Equipment_Object_API.Set_In_Operation(key_.contract, key_.mch_code);
--END Set_In_Operation___;
--
--PROCEDURE Set_Outof_Operation___(
--   key_ IN Equipment_Object_List_Key)   
--IS
--BEGIN
--   Equipment_Object_API.Set_Out_Of_Operation(key_.contract, key_.mch_code);
--END Set_Outof_Operation___;
--
--PROCEDURE Set_Status_Scrapped___ (
--   key_ IN Equipment_Object_List_Key ) 
--IS
--BEGIN
--   Equipment_Object_API.Set_Scrapped(key_.contract, key_.mch_code);
--END Set_Status_Scrapped___;
--
--PROCEDURE Set_Structure_In_Operation___ (
--   key_ IN Equipment_Object_List_Key,
--   info$_ OUT VARCHAR2 )
--IS
--     
--BEGIN
--   Equipment_Object_API.Set_Structure_In_Operation(key_.contract, key_.mch_code);
--    IF Equipment_Object_API.Exist_Warning(key_.contract, key_.mch_code) = 'TRUE' THEN
--      Client_SYS.Add_Info(lu_name_, 'EQPOBJSTR: Some objects of the structure :P1 were not changed due to their operational condition.', key_.mch_code);
--      info$_ := Client_SYS.Get_All_Info(32000); 
--   END IF;
--     
--END Set_Structure_In_Operation___;
--
--PROCEDURE Set_Sturucture_Outof_Operation___ (
--   key_ IN Equipment_Object_List_Key,
--   scrapped_and_has_structure_ IN VARCHAR2,
--   do_structure_               IN VARCHAR2 ) 
--    
--IS
--   rec_ EQUIPMENT_OBJECT_UIV%ROWTYPE;
--   
--   CURSOR equipment_object IS
--   SELECT * 
   --FROM EQUIPMENT_OBJECT_UIV
   --WHERE contract = key_.contract
   --AND   mch_code = key_.mch_code--;
-- 
--   
--   
--BEGIN
--   OPEN equipment_object;
--   FETCH equipment_object INTO rec_;
--   
--   IF equipment_object%FOUND  THEN
--      IF scrapped_and_has_structure_ = 'TRUE' THEN
--         IF  do_structure_ = 'TRUE' THEN 
--            IF rec_.obj_level IS  NOT  NULL then
--                  Equipment_Functional_API.Set_Structure_Out_Of_Operation(key_.contract, key_.mch_code);
--            ELSE
--                  Equipment_Serial_API.Set_Structure_Out_Of_Operation(key_.contract, key_.mch_code);
--            END IF;
--          ELSE
--              IF  (rec_.obj_level IS  NOT  NULL ) then
--                 Equipment_Functional_API.Set_Out_Of_Operation(key_.contract, key_.mch_code);
--              ELSE
--                  Equipment_Serial_API.Set_Out_Of_Operation(key_.contract, key_.mch_code);
--              END IF;
--         END IF;   
--      ELSE
--          IF rec_.obj_level IS NOT NULL THEN
--             Equipment_Functional_API.Set_Structure_Out_Of_Operation(key_.contract, key_.mch_code);
--          ELSE
--               Equipment_Serial_API.Set_Structure_Out_Of_Operation(key_.contract, key_.mch_code);
--          END IF;
--      END IF;
--   
--   END IF;
--   CLOSE equipment_object;
--   
--END Set_Sturucture_Outof_Operation___;
--
--
FUNCTION Check_Scrapped_And_Has_Structure___(
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   
   rec_ EQUIPMENT_OBJECT_UIV%ROWTYPE;
   
   CURSOR equipment_object IS
   SELECT * 
   FROM EQUIPMENT_OBJECT_UIV
   WHERE contract = contract_
   AND   mch_code = mch_code_;
   
BEGIN
   OPEN equipment_object;
   FETCH equipment_object INTO rec_;
   IF equipment_object%FOUND 
      AND  (rec_.operational_status_db = 'SCRAPPED'
      AND rec_.has_structure_db = 'TRUE') THEN 
      CLOSE equipment_object;
      RETURN 'TRUE';
   ELSE
      CLOSE equipment_object;
      RETURN 'FALSE';
   END IF;
END Check_Scrapped_And_Has_Structure___;
--
--PROCEDURE Set_Structure_Scrapped___ (
--   key_ IN Equipment_Object_List_Key ) 
--IS
--   
--BEGIN
--   Equipment_Object_API.Set_Structure_Scrapped(key_.contract, key_.mch_code);
--END Set_Structure_Scrapped___;
--
FUNCTION Get_Type_Designation_Values___(
   type_ IN VARCHAR2 ) RETURN Type_Des_Values_Rec
IS
   rec_ Type_Des_Values_Rec;
BEGIN
   rec_.mch_type := TYPE_DESIGNATION_API.Get_Mch_Type(type_);
   rec_.item_class := EQUIPMENT_OBJ_TYPE_API.Get_Item_Class_Id(rec_.mch_type);
   RETURN rec_;
END Get_Type_Designation_Values___;
--
FUNCTION Validate_Sup_Mch_Code___ (
   sup_contract_ IN VARCHAR2,
   sup_mch_code_ IN VARCHAR2 ) RETURN Validate_Sup_Mch_Code_Return_Rec
IS
   CURSOR equip_obj_rec_ IS
   SELECT * FROM  equipment_object_tab t
   WHERE contract = sup_contract_
   AND   mch_code = sup_mch_code_;
   
   CURSOR serial_state_cur_(part_no_   VARCHAR2,
                            serial_no_ VARCHAR2) IS
   SELECT rowstate 
   FROM PART_SERIAL_CATALOG_TAB t
   WHERE part_no = part_no_
   AND  serial_no = serial_no_;
   
   
  ret_   Validate_Sup_Mch_Code_Return_Rec;
  --obj_level_ Equipment_Object_tab.obj_level%TYPE;
  rec_       Equipment_Object_tab%ROWTYPE;
  
BEGIN
   OPEN equip_obj_rec_;
   FETCH equip_obj_rec_ INTO rec_;
    
    
   IF (equip_obj_rec_%FOUND AND rec_.obj_level IS NULL) THEN
      ret_.cost_center  := rec_.cost_center;
      ret_.mch_loc      := rec_.mch_loc;
      ret_.mch_pos      := rec_.mch_pos;
      ret_.object_no    := rec_.object_no;
      ret_.location_id  := rec_.location_id;
      
      OPEN serial_state_cur_(rec_.part_no,rec_.mch_serial_no);
      FETCH serial_state_cur_ INTO ret_.serial_state;
      CLOSE serial_state_cur_;
      
      
   ELSE
      ret_.cost_center  := '';
      ret_.mch_loc      := '';
      ret_.mch_pos      := '';
      ret_.object_no    := '';
      ret_.location_id  := '';
   END IF;
   CLOSE equip_obj_rec_;
    
    RETURN ret_;
    
END Validate_Sup_Mch_Code___;

--PROCEDURE Validate_Part_No___ (
--   part_no_ IN VARCHAR2 ) 
--IS
--   
--BEGIN
--   RETURN 
--END Validate_Part_No___;

PROCEDURE Equip_Object_Validate_Part_No___ (
   part_no_ IN VARCHAR2 ) 
IS
   
BEGIN
   
   IF part_catalog_api.get_serial_tracking_code_db(part_no_) = 'NOT SERIAL TRACKING' THEN
      Error_SYS.Appl_General(lu_name_,'P1: Part no is not serial tracked At Receipt and Issue. It will not be possible to move the serial object to the inventory. Still want to save this record?',part_no_);  
   END IF;
  
END Equip_Object_Validate_Part_No___;
--
FUNCTION Get_Logical_Code_Part_Values___(
   contract_ IN VARCHAR2) RETURN Logical_Code_Part_Values_Rec
IS
   rec_              Logical_Code_Part_Values_Rec;
   object_no_        VARCHAR2(20);
   object_view_name_ VARCHAR2(30);
   hide_object_      VARCHAR2(20);
   cc_part_name_     VARCHAR2(20);
   cc_view_name_     VARCHAR2(30);
   hide_cost_center_ VARCHAR2(10);
   company_          VARCHAR2(20);
BEGIN
   Equipment_Object_API.Get_Code_Part_For_Objct_Values(contract_,
                                                       object_no_,
                                                       object_view_name_,
                                                       hide_object_);
   Equipment_Object_API.Get_Code_Part_Cost_Center_Val(contract_,
                                                      cc_part_name_,
                                                      cc_view_name_,
                                                      hide_cost_center_);
   company_ := Site_API.Get_Company(contract_);
   
   rec_.fetch_cost_center      := cc_part_name_;
   rec_.cost_center_code_part  := Accounting_Code_Parts_API.Get_Code_Part_For_Logical(company_, 'CostCenter');
   rec_.hide_cost_center       := hide_cost_center_;
   rec_.fetch_object_no        := object_no_;
   rec_.object_code_part       := Accounting_Code_Parts_API.Get_Code_Part_For_Logical(company_, 'Object');
   rec_.hide_object_no         := hide_object_;
   
   RETURN rec_;
END Get_Logical_Code_Part_Values___;

PROCEDURE Delete_Object___(
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
   info_ VARCHAR2(2000);
BEGIN
   Equipment_Object_API.Delete__(info_, contract_, mch_code_, 'DO');
END Delete_Object___;

PROCEDURE Set_In_Operation_Serial___(
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
   Equipment_Serial_API.Set_In_Operation(contract_, mch_code_);
END Set_In_Operation_Serial___;

PROCEDURE Set_Outof_Operation_Serial___(
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
   Equipment_Serial_API.Set_Out_Of_Operation(contract_, mch_code_);
END Set_Outof_Operation_Serial___;

PROCEDURE Set_Status_Scrapped_Serial___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 ) 
IS
BEGIN
   Equipment_Serial_API.Set_Scrapped(contract_,mch_code_);
END Set_Status_Scrapped_Serial___;


PROCEDURE Set_In_Operation_Functional___(
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
   Equipment_Functional_API.Set_In_Operation(contract_, mch_code_);
END Set_In_Operation_Functional___;

PROCEDURE Set_Outof_Operation_Functional___(
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
   Equipment_Functional_API.Set_Out_Of_Operation(contract_, mch_code_);
END Set_Outof_Operation_Functional___;

PROCEDURE Set_Status_Scrapped_Functional___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 ) 
IS
BEGIN
   Equipment_Functional_API.Set_Scrapped(contract_,mch_code_);
END Set_Status_Scrapped_Functional___;

PROCEDURE Set_Structure_In_Operation_Serial___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2,
   info$_ OUT VARCHAR2 )
IS
     
BEGIN
   Equipment_Serial_API.Set_Structure_In_Operation(contract_,mch_code_);
    IF Equipment_Object_API.Exist_Warning(contract_,mch_code_) = 'TRUE' THEN
      Client_SYS.Add_Info(lu_name_, 'EQPOBJSTR: Some objects of the structure :P1 were not changed due to their operational condition.', mch_code_);
      info$_ := Client_SYS.Get_All_Info(32000); 
   END IF;
     
END Set_Structure_In_Operation_Serial___;

PROCEDURE Set_Structure_In_Operation_Functional___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2,
   structure_type_             IN VARCHAR2,
   info$_ OUT VARCHAR2 )
IS
     
BEGIN
   Equipment_Functional_API.Set_Structure_In_Operation(contract_,mch_code_, NULL, structure_type_ );
    IF Equipment_Object_API.Exist_Warning(contract_,mch_code_) = 'TRUE' THEN
      Client_SYS.Add_Info(lu_name_, 'EQPOBJSTR: Some objects of the structure :P1 were not changed due to their operational condition.', mch_code_);
      info$_ := Client_SYS.Get_All_Info(32000); 
   END IF;
     
END Set_Structure_In_Operation_Functional___;


PROCEDURE Set_Sturucture_Outof_Operation_Functional___(
   contract_                   IN VARCHAR2,
   mch_code_                   IN VARCHAR2,
   structure_type_             IN VARCHAR2)
IS   
BEGIN
   Equipment_Functional_API.Set_Structure_Out_Of_Operation( contract_, mch_code_, NULL, structure_type_ );
END Set_Sturucture_Outof_Operation_Functional___;


PROCEDURE Set_Sturucture_Outof_Operation_Serial___(
   contract_                   IN VARCHAR2,
   mch_code_                   IN VARCHAR2)

IS   
BEGIN
   
   Equipment_Serial_API.Set_Structure_Out_Of_Operation( contract_, mch_code_);
END Set_Sturucture_Outof_Operation_Serial___;

PROCEDURE Set_Structure_Scrapped_Serial___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 ) 
IS
   
BEGIN
   Equipment_Object_API.Set_Structure_Scrapped(contract_, mch_code_);
END Set_Structure_Scrapped_Serial___;

PROCEDURE Set_Structure_Operational___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
   Equipment_Serial_API.Set_Structure_Operational(contract_, mch_code_);
END Set_Structure_Operational___;

PROCEDURE Set_Structure_Non_Operational___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
   Equipment_Serial_API.Set_Structure_Non_Operational(contract_, mch_code_);
END Set_Structure_Non_Operational___;

PROCEDURE Set_Structure_Scrapped_Functional___ (
   contract_       IN VARCHAR2,
   mch_code_       IN VARCHAR2,
   structure_type_ IN VARCHAR2)
IS
   
BEGIN
   Equipment_Object_API.Set_Structure_Scrapped(contract_, mch_code_, structure_type_ );
END Set_Structure_Scrapped_Functional___;

PROCEDURE Set_In_Operative___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
     Equipment_Serial_API.Set_Operational(contract_, mch_code_);
END Set_In_Operative___;

PROCEDURE Set_Non_Operative___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 )   
IS
BEGIN
  Equipment_Serial_API.Set_Non_Operational(contract_, mch_code_);
END Set_Non_Operative___;

FUNCTION Get_Item_Class_Id___ (
   mch_code_ IN VARCHAR2,
   contract_ IN VARCHAR2,
   mch_type_ IN VARCHAR2) RETURN VARCHAR2
IS
   old_mch_type_   VARCHAR2(32000);
   old_item_class_ VARCHAR2(32000);
   new_item_class_ VARCHAR2(32000);
   
BEGIN
	old_mch_type_     := Equipment_Object_API.Get_Mch_Type(contract_, mch_code_);
   old_item_class_   := Equipment_Object_API.Get_Item_Class_Id(contract_, mch_code_);
   new_item_class_   := Equipment_Obj_Type_API.Get_Item_Class_Id(old_mch_type_);
   
   IF((new_item_class_ = old_item_class_) OR (new_item_class_ IS NULL AND old_item_class_ IS NULL))THEN
      new_item_class_ := Equipment_Obj_Type_API.Get_Item_Class_Id(mch_type_);
   ELSE 
      new_item_class_ := old_item_class_;
   END IF;
 
  RETURN new_item_class_;
  
END Get_Item_Class_Id___;

