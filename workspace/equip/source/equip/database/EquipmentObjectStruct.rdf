-----------------------------------------------------------------------------
--
--  Logical unit: EquipmentObjectStructRep
--
--  Report:       EquipmentObjectStruct
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
--  
--  -----------------------------------------------------------------------------
--
--  Date    Sign  History
--  ------  ----  ---------------------------------------------------------------
--  181004  LoPrlk Bug: 144535, Altered the report method to fetch the Company Name and Logo.
--  150409  Harplk RUBY-311, Created the file by removing the code from MaintenanceObjectDet.
---------------------------------------------------------------------------------
define MODULE   = EQUIP
define LU       = EquipmentObject
define PKG      = EQUIPMENT_OBJECT_STRUCT_RPI

define TABLE    = EQUIPMENT_RPT
define VIEW_RPV  = EQUIPMENT_RPV

define REP_VIEW = EQUIPMENT_OBJECT_STRUCT_REP

-- Definition of columns in EQUIPMENT_RPT

define contract                = S1
define mch_code                = S2
define mch_name                = S3
define type                    = S4
define vendor_no               = S5
define vendor_name             = S6
define vendor_no               = S7
DEFINE mch_loc                 = S8
define vendor_name             = S9
define location_mch_code       = S10
define location_contract       = S11
define from_mch_code           = S12
define from_contract           = S13
define to_mch_code             = S14
define to_contract             = S15
define process_mch_code        = S16
define process_contract        = S17
define pipe_mch_code           = S18
define pipe_contract           = S19
define circuit_mch_code        = S20
define circuit_contract        = S21
define location_description    = S22
define from_description        = S23
define to_description          = S24
define process_description     = S25
define pipe_description        = S26
define circuit_description     = S27

set feedback off
set verify off

PROMPT Creating reports for LU EquipmentObject
-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- Report:     Equipment Object Structure
-- Type:       PLSQL1.1
-- Objects:    TABLE  = INFO_SERVICES_RPT
--             VIEW   = EQUIPMENT_OBJECT_STRUCT_REP
--             METHOD = EQUIPMENT_OBJECT_STRUCT_RPI.Execute_Report
-----------------------------------------------------------------------------

PROMPT Creating report view &REP_VIEW

CREATE OR REPLACE VIEW &REP_VIEW
AS
SELECT RESULT_KEY                       RESULT_KEY,
       ROW_NO                           ROW_NO,
       substr(&CONTRACT,1,5)            CONTRACT,
       substr(&MCH_CODE,1,100)          MCH_CODE,
       substr(&MCH_NAME,1,200)          MCH_NAME,
       substr(&TYPE,1,30)               TYPE,
       substr(&VENDOR_NO,1,20)          VENDOR_NO,
       substr(&VENDOR_NAME,1,100)       VENDOR_NAME,
       substr(&MCH_LOC,1,10)            MCH_LOC,       
       substr(&LOCATION_MCH_CODE,1,100) LOCATION_MCH_CODE,
       substr(&LOCATION_CONTRACT,1,5)   LOCATION_CONTRACT,       
       substr(&FROM_MCH_CODE,1,100)     FROM_MCH_CODE,
       substr(&FROM_CONTRACT,1,5)       FROM_CONTRACT,
       substr(&TO_MCH_CODE,1,100)       TO_MCH_CODE,
       substr(&TO_CONTRACT,1,5)         TO_CONTRACT,
       substr(&PROCESS_MCH_CODE,1,100)  PROCESS_MCH_CODE,
       substr(&PROCESS_CONTRACT,1,5)    PROCESS_CONTRACT,
       substr(&PIPE_MCH_CODE,1,100)     PIPE_MCH_CODE,
       substr(&PIPE_CONTRACT,1,5)       PIPE_CONTRACT,
       substr(&CIRCUIT_MCH_CODE,1,100)  CIRCUIT_MCH_CODE,
       substr(&CIRCUIT_CONTRACT,1,5)    CIRCUIT_CONTRACT,
       Equipment_Object_API.Get_Mch_Name(&LOCATION_CONTRACT, &LOCATION_MCH_CODE )   LOCATION_DESCRIPTION,
       Equipment_Object_API.Get_Mch_Name(&FROM_CONTRACT, &FROM_MCH_CODE)   FROM_DESCRIPTION,
       Equipment_Object_API.Get_Mch_Name(&TO_CONTRACT, &TO_MCH_CODE) TO_DESCRIPTION,
       Equipment_Object_API.Get_Mch_Name(&PROCESS_CONTRACT, &PROCESS_MCH_CODE)   PROCESS_DESCRIPTION,
       Equipment_Object_API.Get_Mch_Name(&PIPE_CONTRACT, &PIPE_MCH_CODE)   PIPE_DESCRIPTION,
       Equipment_Object_API.Get_Mch_Name(&CIRCUIT_CONTRACT, &CIRCUIT_MCH_CODE)   CIRCUIT_DESCRIPTION       
FROM   &VIEW_RPV
WITH   read only;

COMMENT ON TABLE &REP_VIEW IS
   'MODULE=&MODULE^LU=&LU^';

COMMENT ON COLUMN &REP_VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &REP_VIEW..ROW_NO IS
   'FLAGS=M----^';
COMMENT ON COLUMN &REP_VIEW..CONTRACT IS
   'FLAGS=A----^PROMPT=Site^TITLE=Site^QUERY=Site:^DATATYPE=STRING(5)/UPPERCASE^ITEM_NAME=iContract^
   ^QFLAGS=MCSBL^QVALUE=%^REF=USER_ALLOWED_SITE_LOV^STATUS=Enter the site for the current object to show information on^';
COMMENT ON COLUMN &REP_VIEW..MCH_CODE IS
   'FLAGS=A----^PROMPT=Object ID^TITLE=Object ID^QUERY=Object ID:^DATATYPE=STRING(100)/UPPERCASE^ITEM_NAME=iMchCode^
   ^QFLAGS=MASBL^QVALUE=%^REF=MAINTENANCE_OBJECT(CONTRACT)^STATUS=Enter the object ID of the current object to show structure for^';
COMMENT ON COLUMN &REP_VIEW..MCH_NAME IS
   'FLAGS=A----^PROMPT=Description^TITLE=Description^DATATYPE=STRING(200)^ITEM_NAME=iMchName^';
COMMENT ON COLUMN &REP_VIEW..TYPE IS
   'FLAGS=A----^PROMPT=Type Designation^TITLE=Type Designation^DATATYPE=STRING(30)^ITEM_NAME=iType^';
COMMENT ON COLUMN &REP_VIEW..VENDOR_NO IS
   'FLAGS=A----^PROMPT=Supplier No^TITLE=Supplier^DATATYPE=STRING(20)^ITEM_NAME=iVendorNo^';
COMMENT ON COLUMN &REP_VIEW..VENDOR_NAME IS
   'FLAGS=A----^PROMPT=Supplier Name^TITLE=Supplier Name^DATATYPE=STRING(100)^ITEM_NAME=iVendorName^';
COMMENT ON COLUMN &REP_VIEW..MCH_LOC IS
'FLAGS=A----^PROMPT=Room^TITLE=Room^DATATYPE=STRING(10)^ITEM_NAME=iMchLoc^';
COMMENT ON COLUMN &REP_VIEW..LOCATION_MCH_CODE
   IS 'FLAGS=A----^PROMPT=Location^DATATYPE=STRING(100)^TITLE=Location^ITEM_NAME=iLocCode^';
COMMENT ON COLUMN &REP_VIEW..LOCATION_CONTRACT
   IS 'FLAGS=A----^PROMPT=Location Site^DATATYPE=STRING(5)^TITLE=Location Contract^ITEM_NAME=iLocContract^';
COMMENT ON COLUMN &REP_VIEW..FROM_MCH_CODE
   IS 'FLAGS=A----^PROMPT=From^DATATYPE=STRING(100)^TITLE=From^ITEM_NAME=iFrom^';
COMMENT ON COLUMN &REP_VIEW..FROM_CONTRACT
   IS 'FLAGS=A----^PROMPT=From Site^DATATYPE=STRING(5)^TITLE=From Contract^ITEM_NAME=iFromContract^';
COMMENT ON COLUMN &REP_VIEW..TO_MCH_CODE
   IS 'FLAGS=A----^PROMPT=To^DATATYPE=STRING(100)^TITLE=To^ITEM_NAME=iTo^';
COMMENT ON COLUMN &REP_VIEW..TO_CONTRACT
   IS 'FLAGS=A----^PROMPT=To Site^DATATYPE=STRING(5)^TITLE=To Contract^ITEM_NAME=iToContract^';
COMMENT ON COLUMN &REP_VIEW..PROCESS_MCH_CODE
   IS 'FLAGS=A----^PROMPT=Process^DATATYPE=STRING(100)^TITLE=Process^ITEM_NAME=iProcess^';
COMMENT ON COLUMN &REP_VIEW..PROCESS_CONTRACT
   IS 'FLAGS=A----^PROMPT=Process Site^DATATYPE=STRING(5)^TITLE=Process Contract^ITEM_NAME=iProcessContract^';
COMMENT ON COLUMN &REP_VIEW..PIPE_MCH_CODE
   IS 'FLAGS=A----^PROMPT=Pipe System^DATATYPE=STRING(100)^TITLE=Pipe System^ITEM_NAME=iPipe^';
COMMENT ON COLUMN &REP_VIEW..PIPE_CONTRACT
   IS 'FLAGS=A----^PROMPT=Pipe Site^DATATYPE=STRING(5)^TITLE=Pipe Contract^ITEM_NAME=iPipeContract^';
COMMENT ON COLUMN &REP_VIEW..CIRCUIT_MCH_CODE
   IS 'FLAGS=A----^PROMPT=Electrical^DATATYPE=STRING(100)^TITLE=Electrical^ITEM_NAME=iCircuit^';
COMMENT ON COLUMN &REP_VIEW..CIRCUIT_CONTRACT
   IS 'FLAGS=A----^PROMPT=Electrical Site^DATATYPE=STRING(5)^TITLE=Circuit Contract^ITEM_NAME=iCircuitContract^';
COMMENT ON COLUMN &REP_VIEW..LOCATION_DESCRIPTION 
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Location Descr^ITEM_NAME=iLocationDescr^';
COMMENT ON COLUMN &REP_VIEW..FROM_DESCRIPTION 
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=From Descr^ITEM_NAME=iFromDescr^';
COMMENT ON COLUMN &REP_VIEW..TO_DESCRIPTION 
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=To Descr^ITEM_NAME=iToDescr^';
COMMENT ON COLUMN &REP_VIEW..PROCESS_DESCRIPTION 
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Process Descr^ITEM_NAME=iProcessDescr^';
COMMENT ON COLUMN &REP_VIEW..PIPE_DESCRIPTION 
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Pipe Descr^ITEM_NAME=iPipeDescr^';
COMMENT ON COLUMN &REP_VIEW..CIRCUIT_DESCRIPTION 
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Circuit Descr^ITEM_NAME=iCircuitDescr^';
-----------------------------------------------------------------------------


BEGIN
   Report_Sys.Define_Report_('&REP_VIEW', '&MODULE', '&LU', 'Equipment Object Structure', '&TABLE', 'EQUIPMENT_OBJECT_STRUCT_RPI.Execute_Report', 30,'','','','PLSQL1.2','TRUE','Maintenance','Equipment Administration');
   Report_SYS.Refresh_('&REP_VIEW');
END; 
/

-----------------------------------------------------------------------------
-- REPORT TEXTS
-----------------------------------------------------------------------------

BEGIN 
   Report_SYS.Define_Report_Text_('&REP_VIEW', 'txObjectStrucHeader', 'Object Structure for Object - ');
   Report_SYS.Define_Report_Text_('&REP_VIEW', 'TXOBJECTINFOR', 'Object Information');
END; 
/
COMMIT
/


-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

  

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   contract_      VARCHAR2(100);
   mch_code_      VARCHAR2(200);
   row_count_     NUMBER;
   vendor_name_   VARCHAR2(100);
   result_key_    NUMBER;
   archive_notes_ VARCHAR2(200);
   do_xml_        BOOLEAN := Report_SYS.Should_Generate_Xml('&REP_VIEW');
	do_rs_         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&REP_VIEW');
	xml_           CLOB;
   package_name_  VARCHAR2(100) := 'EQUIPMENT_OBJECT_STRUCT_REP';
   location_desc_ VARCHAR2(2000);
   from_desc_     VARCHAR2(2000);
   to_desc_       VARCHAR2(2000);
   process_desc_  VARCHAR2(2000);
   pipe_desc_     VARCHAR2(2000);
   circuit_desc_  VARCHAR2(2000);
   
   logotype_             VARCHAR2(100);
   company_name_         VARCHAR2(100);
   company_              VARCHAR2(20);

   -- Cursor used when an initial object_id has been supplied.
   -- The specified object_id will be used as the root node for
   -- the object structure.

   CURSOR sub_objects IS
      SELECT lpad(' ', (level-1)*5)||a.mch_code mch_code,
             a.contract,
             a.mch_name,
             a.type,
             nvl(a.vendor_no, b.supplier_no) vendor_no,
             a.mch_loc,
             a.location_mch_code,
             a.location_contract,
             a.from_mch_code,
             a.from_contract,
             a.to_mch_code,
             a.to_contract,
             a.process_mch_code,
             a.process_contract,
             a.pipe_mch_code,
             a.pipe_contract,
             a.circuit_mch_code,
             a.circuit_contract
      FROM   equipment_object a, part_serial_catalog b 
      WHERE  a.part_no=b.part_no(+)
      AND    a.serial_no = b.serial_no(+)
      AND    a.contract LIKE contract_
      CONNECT BY PRIOR a.mch_code = a.sup_mch_code
      START WITH (mch_code_ LIKE a.sup_mch_code);
     
   -- Cursor used when no object_id has been supplied.
   -- The entire object structure will be retrieved.

   CURSOR all_objects IS
      SELECT lpad(' ', (level-1)*5)||a.mch_code mch_code,
             a.contract,
             a.mch_name,
             type,
             nvl(a.vendor_no, b.supplier_no) vendor_no,
             a.mch_loc,
             a.location_mch_code,
             a.location_contract,
             a.from_mch_code,
             a.from_contract,
             a.to_mch_code,
             a.to_contract,
             a.process_mch_code,
             a.process_contract,
             a.pipe_mch_code,
             a.pipe_contract,
             a.circuit_mch_code,
             a.circuit_contract
      FROM   equipment_object a, part_serial_catalog b
      WHERE  a.part_no=b.part_no(+)
      AND    a.serial_no = b.serial_no(+)
      AND    a.contract IN ( select contract from user_allowed_site_lov ) 
      AND    a.contract LIKE contract_
      CONNECT BY PRIOR a.mch_code = a.sup_mch_code
      START WITH a.sup_mch_code IS NULL;

   --  Cursor used when an initial object_id has been supplied and contract is not supplied 
     
   CURSOR all_sites IS
      SELECT lpad(' ', (level-1)*5)||a.mch_code mch_code,
             a.contract,
             a.mch_name,
             a.type,
             nvl(a.vendor_no, b.supplier_no) vendor_no,
             a.mch_loc,
             a.location_mch_code,
             a.location_contract,
             a.from_mch_code,
             a.from_contract,
             a.to_mch_code,
             a.to_contract,
             a.process_mch_code,
             a.process_contract,
             a.pipe_mch_code,
             a.pipe_contract,
             a.circuit_mch_code,
             a.circuit_contract
      FROM   equipment_object a, part_serial_catalog b
      WHERE  a.part_no=b.part_no(+)
      AND    a.serial_no = b.serial_no(+)
      CONNECT BY PRIOR a.mch_code = a.sup_mch_code AND PRIOR a.contract = a.sup_contract
      START WITH (a.mch_code LIKE mch_code_);
BEGIN
   -- Initialize
   IF (do_xml_) THEN
		Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&REP_VIEW',package_name_);
	END IF;
	General_SYS.Init_Method(lu_name_, '&PKG', 'Report_Structure');   
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   row_count_  := 0;

   contract_   := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   mch_code_   := Client_SYS.Get_Item_Value('MCH_CODE', parameter_attr_);
   
   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'SITE: Site') || ': ';
   archive_notes_ := archive_notes_ || contract_ || ', ';
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'OBJECTID: Object ID') || ': ';
   archive_notes_ := archive_notes_ || mch_code_;
   Archive_API.Set_Notes(archive_notes_);   
   -- Check if an object id was supplied
   IF (do_xml_) THEN
			Xml_Record_Writer_SYS.Start_Element(xml_, 'OBJ_STRUCTS');
	END IF;
   IF ( mch_code_ = '%' ) THEN
     	FOR object IN all_objects LOOP
         vendor_name_   := Supplier_Info_API.Get_Name( object.vendor_no );
         location_desc_ := Equipment_Object_API.Get_Mch_Name(object.location_contract, object.location_mch_code );
         from_desc_     := Equipment_Object_API.Get_Mch_Name(object.from_contract, object.from_mch_code);
         to_desc_       := Equipment_Object_API.Get_Mch_Name(object.to_contract, object.to_mch_code);
         process_desc_  := Equipment_Object_API.Get_Mch_Name(object.process_contract, object.process_mch_code);
         pipe_desc_     := Equipment_Object_API.Get_Mch_Name(object.pipe_contract, object.pipe_mch_code);
         circuit_desc_  := Equipment_Object_API.Get_Mch_Name(object.circuit_contract, object.circuit_mch_code);
      	IF (do_xml_) THEN
				Xml_Record_Writer_SYS.Start_Element(xml_, 'OBJ_STRUCT');
				Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT',object.contract);
				Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_CODE',object.mch_code);
				Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_NAME',object.mch_name);
				Xml_Record_Writer_SYS.Add_Element(xml_,'TYPE',object.type);
				Xml_Record_Writer_SYS.Add_Element(xml_,'VENDOR_NO',object.vendor_no);
				Xml_Record_Writer_SYS.Add_Element(xml_,'VENDOR_NAME',object.vendor_no);
				Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_LOC',object.mch_loc);      
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_MCH_CODE', object.location_mch_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_CONTRACT', object.location_contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_MCH_CODE', object.from_mch_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_CONTRACT', object.from_contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_MCH_CODE', object.to_mch_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_CONTRACT', object.to_contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_MCH_CODE', object.process_mch_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_CONTRACT', object.process_contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_MCH_CODE', object.pipe_mch_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_CONTRACT', object.pipe_contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_MCH_CODE', object.circuit_mch_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_CONTRACT', object.circuit_contract);            
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_DESCRIPTION', location_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_DESCRIPTION', from_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_DESCRIPTION', to_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_DESCRIPTION', process_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_DESCRIPTION', pipe_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_DESCRIPTION', circuit_desc_);
         END IF;			
			IF (do_xml_) THEN
				Xml_Record_Writer_SYS.End_Element(xml_, 'OBJ_STRUCT');
         END IF;
         IF (do_rs_) THEN
         	INSERT INTO &TABLE ( RESULT_KEY, ROW_NO, PARENT_ROW_NO,
            	&CONTRACT,
            	&MCH_CODE,
            	&MCH_NAME,
            	&TYPE,
            	&VENDOR_NO,
            	&VENDOR_NAME,
               &MCH_LOC,
               &LOCATION_MCH_CODE,
               &LOCATION_CONTRACT,
               &FROM_MCH_CODE,
               &FROM_CONTRACT,
               &TO_MCH_CODE,
               &TO_CONTRACT,
               &PROCESS_MCH_CODE,
               &PROCESS_CONTRACT,
               &PIPE_MCH_CODE,
               &PIPE_CONTRACT,
               &CIRCUIT_MCH_CODE,
               &CIRCUIT_CONTRACT,
               &LOCATION_DESCRIPTION,
               &FROM_DESCRIPTION,
               &TO_DESCRIPTION,
               &PROCESS_DESCRIPTION,
               &PIPE_DESCRIPTION,
               &CIRCUIT_DESCRIPTION)
         	VALUES ( result_key_, row_count_, 0,
            	object.contract,
            	object.mch_code,
            	object.mch_name,
            	object.type,
            	object.vendor_no,
            	vendor_name_,
               object.mch_loc,
               object.location_mch_code,
               object.location_contract,
               object.from_mch_code,
               object.from_contract,
               object.to_mch_code,
               object.to_contract,
               object.process_mch_code,
               object.process_contract,
               object.pipe_mch_code,
               object.pipe_contract,
               object.circuit_mch_code,
               object.circuit_contract,
               location_desc_,
               from_desc_,
               to_desc_,
               process_desc_,
               pipe_desc_,
               circuit_desc_);
         	row_count_ := row_count_ + 1;
         END IF;
      END LOOP;
   ELSE
      IF ( mch_code_ IS NOT NULL AND contract_ IS NULL) THEN
         FOR object IN all_sites LOOP
            vendor_name_ := Supplier_Info_API.Get_Name( object.vendor_no );
            location_desc_ := Equipment_Object_API.Get_Mch_Name(object.location_contract, object.location_mch_code );
            from_desc_     := Equipment_Object_API.Get_Mch_Name(object.from_contract, object.from_mch_code);
            to_desc_       := Equipment_Object_API.Get_Mch_Name(object.to_contract, object.to_mch_code);
            process_desc_  := Equipment_Object_API.Get_Mch_Name(object.process_contract, object.process_mch_code);
            pipe_desc_     := Equipment_Object_API.Get_Mch_Name(object.pipe_contract, object.pipe_mch_code);
            circuit_desc_  := Equipment_Object_API.Get_Mch_Name(object.circuit_contract, object.circuit_mch_code);
         	IF (do_xml_) THEN
					Xml_Record_Writer_SYS.Start_Element(xml_, 'OBJ_STRUCT');
					Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT',object.contract);
					Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_CODE',object.mch_code);
					Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_NAME',object.mch_name);
					Xml_Record_Writer_SYS.Add_Element(xml_,'TYPE',object.type);
					Xml_Record_Writer_SYS.Add_Element(xml_,'VENDOR_NO',object.vendor_no);
					Xml_Record_Writer_SYS.Add_Element(xml_,'VENDOR_NAME',object.vendor_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_LOC',object.mch_loc);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_MCH_CODE', object.location_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_CONTRACT', object.location_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_MCH_CODE', object.from_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_CONTRACT', object.from_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_MCH_CODE', object.to_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_CONTRACT', object.to_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_MCH_CODE', object.process_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_CONTRACT', object.process_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_MCH_CODE', object.pipe_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_CONTRACT', object.pipe_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_MCH_CODE', object.circuit_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_CONTRACT', object.circuit_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_DESCRIPTION', location_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_DESCRIPTION', from_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_DESCRIPTION', to_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_DESCRIPTION', process_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_DESCRIPTION', pipe_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_DESCRIPTION', circuit_desc_);
				END IF;
				IF (do_xml_) THEN
					Xml_Record_Writer_SYS.End_Element(xml_, 'OBJ_STRUCT');
				END IF;				
				IF (do_rs_) THEN
         		INSERT INTO &TABLE (RESULT_KEY, ROW_NO, PARENT_ROW_NO,
            		&CONTRACT,
            		&MCH_CODE,
            		&MCH_NAME,
            		&TYPE,
            		&VENDOR_NO,
            		&VENDOR_NAME,
                  &MCH_LOC,
                  &LOCATION_MCH_CODE,
                  &LOCATION_CONTRACT,
                  &FROM_MCH_CODE,
                  &FROM_CONTRACT,
                  &TO_MCH_CODE,
                  &TO_CONTRACT,
                  &PROCESS_MCH_CODE,
                  &PROCESS_CONTRACT,
                  &PIPE_MCH_CODE,
                  &PIPE_CONTRACT,
                  &CIRCUIT_MCH_CODE,
                  &CIRCUIT_CONTRACT,
                  &LOCATION_DESCRIPTION,
                  &FROM_DESCRIPTION,
                  &TO_DESCRIPTION,
                  &PROCESS_DESCRIPTION,
                  &PIPE_DESCRIPTION,
                  &CIRCUIT_DESCRIPTION )
         		VALUES (result_key_, row_count_, 0,
            		object.contract,
            		object.mch_code,
            		object.mch_name,
            		object.type,
            		object.vendor_no,
            		vendor_name_,
                  object.mch_loc,
                  object.location_mch_code,
                  object.location_contract,
                  object.from_mch_code,
                  object.from_contract,
                  object.to_mch_code,
                  object.to_contract,
                  object.process_mch_code,
                  object.process_contract,
                  object.pipe_mch_code,
                  object.pipe_contract,
                  object.circuit_mch_code,
                  object.circuit_contract,
                  location_desc_,
                  from_desc_,
                  to_desc_,
                  process_desc_,
                  pipe_desc_,
                  circuit_desc_ );
         		row_count_ := row_count_ + 1;
         	END IF;
         END LOOP;
   	 ELSE
      FOR object IN sub_objects LOOP
         vendor_name_ := Supplier_Info_API.Get_Name( object.vendor_no );
         location_desc_ := Equipment_Object_API.Get_Mch_Name(object.location_contract, object.location_mch_code );
         from_desc_     := Equipment_Object_API.Get_Mch_Name(object.from_contract, object.from_mch_code);
         to_desc_       := Equipment_Object_API.Get_Mch_Name(object.to_contract, object.to_mch_code);
         process_desc_  := Equipment_Object_API.Get_Mch_Name(object.process_contract, object.process_mch_code);
         pipe_desc_     := Equipment_Object_API.Get_Mch_Name(object.pipe_contract, object.pipe_mch_code);
         circuit_desc_  := Equipment_Object_API.Get_Mch_Name(object.circuit_contract, object.circuit_mch_code);
      		IF (do_xml_) THEN
					Xml_Record_Writer_SYS.Start_Element(xml_, 'OBJ_STRUCT');
					Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT',object.contract);
					Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_CODE',object.mch_code);
					Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_NAME',object.mch_name);
					Xml_Record_Writer_SYS.Add_Element(xml_,'TYPE',object.type);
					Xml_Record_Writer_SYS.Add_Element(xml_,'VENDOR_NO',object.vendor_no);
					Xml_Record_Writer_SYS.Add_Element(xml_,'VENDOR_NAME',object.vendor_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'MCH_LOC',object.mch_loc);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_MCH_CODE', object.location_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_CONTRACT', object.location_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_MCH_CODE', object.from_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_CONTRACT', object.from_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_MCH_CODE', object.to_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_CONTRACT', object.to_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_MCH_CODE', object.process_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_CONTRACT', object.process_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_MCH_CODE', object.pipe_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_CONTRACT', object.pipe_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_MCH_CODE', object.circuit_mch_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_CONTRACT', object.circuit_contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_DESCRIPTION', location_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_DESCRIPTION', from_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_DESCRIPTION', to_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_DESCRIPTION', process_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PIPE_DESCRIPTION', pipe_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CIRCUIT_DESCRIPTION', circuit_desc_);
				END IF;
				IF (do_xml_) THEN
					Xml_Record_Writer_SYS.End_Element(xml_, 'OBJ_STRUCT');
				END IF;				
      		IF (do_rs_) THEN
         		INSERT INTO &TABLE (RESULT_KEY, ROW_NO, PARENT_ROW_NO,
            		&CONTRACT,
            		&MCH_CODE,
            		&MCH_NAME,
            		&TYPE,
            		&VENDOR_NO,
           	 		&VENDOR_NAME,
                  &MCH_LOC,
                  &LOCATION_MCH_CODE,
                  &LOCATION_CONTRACT,
                  &FROM_MCH_CODE,
                  &FROM_CONTRACT,
                  &TO_MCH_CODE,
                  &TO_CONTRACT,
                  &PROCESS_MCH_CODE,
                  &PROCESS_CONTRACT,
                  &PIPE_MCH_CODE,
                  &PIPE_CONTRACT,
                  &CIRCUIT_MCH_CODE,
                  &CIRCUIT_CONTRACT,
                  &LOCATION_DESCRIPTION,
                  &FROM_DESCRIPTION,
                  &TO_DESCRIPTION,
                  &PROCESS_DESCRIPTION,
                  &PIPE_DESCRIPTION,
                  &CIRCUIT_DESCRIPTION )
         		VALUES (result_key_, row_count_, 0,
            		object.contract,
            		object.mch_code,
            		object.mch_name,
            		object.type,
            		object.vendor_no,
            		vendor_name_,
                  object.mch_loc,
                  object.location_mch_code,
                  object.location_contract,
                  object.from_mch_code,
                  object.from_contract,
                  object.to_mch_code,
                  object.to_contract,
                  object.process_mch_code,
                  object.process_contract,
                  object.pipe_mch_code,
                  object.pipe_contract,
                  object.circuit_mch_code,
                  object.circuit_contract,
                  location_desc_,
                  from_desc_,
                  to_desc_,
                  process_desc_,
                  pipe_desc_,
                  circuit_desc_ );
         		row_count_ := row_count_ + 1;
         	END IF;
         END LOOP;
   	END IF;
   END IF;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'OBJ_STRUCTS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&REP_VIEW');
   END IF;
   
   IF contract_ IS NOT NULL AND contract_ != '%' THEN
      company_      := Site_API.Get_Company(contract_);
      company_name_ := Company_API.Get_Name(company_);
      logotype_     := Company_API.Get_Logotype(company_);
      
      IF (logotype_ IS NOT NULL) THEN
         Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
         Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
      END IF;
   END IF;
   
   IF (do_xml_) THEN
	   Report_SYS.Finish_Xml_Report('&REP_VIEW',result_key_,xml_);
	END IF;
END Execute_Report;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

--UNDEFINE AMOUNT

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE REP_VIEW
UNDEFINE CONTRACT
UNDEFINE MCH_CODE
UNDEFINE MCH_NAME
UNDEFINE TYPE   
UNDEFINE VENDOR_NO      
UNDEFINE VENDOR_NAME    
UNDEFINE MCH_LOC      
UNDEFINE LOCATION_MCH_CODE       
UNDEFINE LOCATION_CONTRACT       
UNDEFINE FROM_MCH_CODE           
UNDEFINE FROM_CONTRACT          
UNDEFINE TO_MCH_CODE             
UNDEFINE TO_CONTRACT            
UNDEFINE PROCESS_MCH_CODE        
UNDEFINE PROCESS_CONTRACT        
UNDEFINE PIPE_MCH_CODE           
UNDEFINE PIPE_CONTRACT           
UNDEFINE CIRCUIT_MCH_CODE        
UNDEFINE CIRCUIT_CONTRACT 
UNDEFINE LOCATION_DESCRIPTION
UNDEFINE FROM_DESCRIPTION
UNDEFINE TO_DESCRIPTION
UNDEFINE PROCESS_DESCRIPTION
UNDEFINE PIPE_DESCRIPTION
UNDEFINE CIRCUIT_DESCRIPTION