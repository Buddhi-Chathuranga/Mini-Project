-----------------------------------------------------------------------------
--
--  Logical unit: MeasurementsForObjectHandling
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-- 2018-10-18  AMNALK   SAUXXW4-1271, Created.
-- 2018-10-23  TAJALK   SAUXXW4-1266, Added methods
-- 2022-01-11  KrRaLK   AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID 
--                      and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Mark_Flip_Incorrect___ (
   values_seq_ IN NUMBER ) 
IS
   
BEGIN
   IF (User_Allowed_Site_API.Is_Authorized(Equipment_Object_Meas_API.Get_Contract(values_seq_)) = 1) THEN
      Equipment_Object_Meas_API.Mark_Flip_Incorrect(values_seq_);
   END IF;
END Mark_Flip_Incorrect___;

FUNCTION Get_Site_Date___(
   contract_ IN VARCHAR2 )  RETURN DATE
IS
   
BEGIN
   RETURN Maintenance_Site_Utility_API.Get_Site_Date(contract_);
END Get_Site_Date___;

FUNCTION Get_Default_Remark___ RETURN VARCHAR2
IS
   
BEGIN
   RETURN Language_SYS.Translate_Constant('EquipmentObjectParam', 'EQUIPDEFAULTREMARK: Created by ') || Fnd_Session_API.Get_Fnd_User();
END Get_Default_Remark___;

FUNCTION Is_Reg_Date_Exists___(
   test_point_sq_  IN NUMBER,
   parameter_code_ IN VARCHAR2,
   new_reg_date_   IN DATE )  RETURN NUMBER
IS
BEGIN
   RETURN Equipment_Object_Meas_API.Is_Reg_Date_Exists(test_point_sq_, parameter_code_, new_reg_date_);  
END Is_Reg_Date_Exists___;

FUNCTION Get_Prev_Meter_Id_By_Date___(
   new_reg_date_   IN DATE,
   test_point_sq_  IN NUMBER,
   parameter_code_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   
BEGIN
   RETURN EQUIPMENT_OBJECT_MEAS_API.Get_Prev_Meter_Id_By_Date(new_reg_date_, test_point_sq_, parameter_code_);
END Get_Prev_Meter_Id_By_Date___;


@Override
PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Equipment_Object_Meas_Group_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS     

   equip_obj_meas_record_ Equip_Object_Meas_Group%ROWTYPE;
   CURSOR get_record IS
      SELECT *
      FROM Equip_Object_Meas_Group
      WHERE test_pnt_seq = key_.test_pnt_seq
      AND parameter_code = key_.parameter_code;

BEGIN   
   IF FALSE THEN
      super(etag_, key_, attr_, info_, action_);
   END IF;
   
   OPEN get_record;
   FETCH get_record INTO equip_obj_meas_record_;
   CLOSE get_record;    
   
   
   --Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: Sending value [:P1]', sysdate||Client_SYS.Get_Item_Value('NEW_REG_DATE', attr_));
   --EQUIPMENT_OBJECT_MEAS_API.Modify__(info_, objid_, objversion_, attr_, action_);
   Equipment_Object_Meas_API.New(contract_ => equip_obj_meas_record_.contract, 
                                 mch_code_ => equip_obj_meas_record_.mch_code, 
                                 test_point_id_ => equip_obj_meas_record_.test_point_id, 
                                 parameter_code_ => equip_obj_meas_record_.parameter_code, 
                                 test_sequence_id_ => equip_obj_meas_record_.test_sequence_id,
                                 measured_value_ => Client_SYS.Get_Item_Value('NEW_RECORDED_VALUE', attr_),
                                 reg_date_ => Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('NEW_REG_DATE', attr_)),
                                 remark_ => NVL(Client_SYS.Get_Item_Value('REMARK', attr_), equip_obj_meas_record_.remark),
                                 test_pnt_seq_ => equip_obj_meas_record_.test_pnt_seq,
                                 resource_seq_ => equip_obj_meas_record_.resource_seq,
                                 measurement_note_ => Client_SYS.Get_Item_Value('MEASUREMENT_NOTE', attr_),
                                 meter_id_ => equip_obj_meas_record_.meter_id);
      etag_ := Get_Etag___(equip_obj_meas_record_.objid, equip_obj_meas_record_.objversion);
END CRUD_Update___;

FUNCTION Get_Parameter_Type___(
   parameter_code_  IN VARCHAR2 )  RETURN VARCHAR2
IS
BEGIN
   RETURN Measurement_Parameter_API.Get_Measurement_Param_Type_Db(parameter_code_);
END Get_Parameter_Type___;

FUNCTION Has_Prev_Preliminary_Records___(
   test_print_sq_   IN NUMBER,
   parameter_code_  IN VARCHAR2,
   reg_date_ IN DATE )  RETURN BOOLEAN
IS
   return_ NUMBER;
BEGIN
   return_ := Equipment_Object_Meas_API.Prev_Preliminary_Records_Exist(test_print_sq_, parameter_code_, reg_date_);
   IF return_ = 1 THEN
      RETURN FALSE;
   END IF;
   RETURN TRUE;
END Has_Prev_Preliminary_Records___;

FUNCTION Get_Input_Data___ (
	test_pnt_seq_ IN NUMBER,
	parameter_code_ IN VARCHAR2) RETURN Change_Meter_Structure_Rec
IS
   ret_ Change_Meter_Structure_Rec;
   
   CURSOR get_data IS
     SELECT contract, mch_code, parameter_code, test_point_id, test_pnt_seq, resource_seq, values_seq, current_date
     FROM   equip_object_meas_group t
     WHERE  t.test_pnt_seq = test_pnt_seq_
     AND    t.parameter_code = parameter_code_
     AND    Equipment_Object_Param_Api.Get_Blocked_For_Use_Db(t.test_pnt_seq, t.parameter_code) = 'FALSE';
BEGIN
   FOR rec_ IN get_data LOOP
      ret_.contract := rec_.contract;
      ret_.mch_code := rec_.mch_code; 
      ret_.object_description := NVL(Equipment_Object_API.Get_Mch_Name(rec_.contract, rec_.mch_code), Resource_Util_API.Get_Resource_Description(rec_.resource_seq));
      ret_.parameter_code := rec_.parameter_code;
      ret_.parameter_description := Measurement_Parameter_API.Get_Description(rec_.parameter_code);
      ret_.test_point_id := rec_.test_point_id;
      ret_.unit := Equipment_Object_Param_API.Get_Unit(rec_.test_pnt_seq, rec_.parameter_code);
      ret_.test_pnt_seq := rec_.test_pnt_seq;
      ret_.tool_eq_seq := rec_.resource_seq;
      ret_.meter_id := null;
      ret_.value_seq := rec_.values_seq;
      ret_.reg_date := rec_.current_date;
   END LOOP;
   
   RETURN ret_;
END Get_Input_Data___;
