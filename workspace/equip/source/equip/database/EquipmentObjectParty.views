-----------------------------------------------------------------------------
--
--  Logical unit: EquipmentObjectParty
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  150729  RoJalk  ORA-757, Replaced the usages of Supplier_Info_Tab with supplier_info_public.
--  140904  MAWILK  PRSA-2706, Merged Orbit changes.
--  140926  SHAFLK  PRSA-3704, Replaced user allowed site checks with an annotation.
--  141001  ILSOLK  PRSA-4075, Modified EQUIPMENT_OBJECT_PARTY2 view to improve performance[Merged bug 118602].
--  150125  japelk  PRSA-6819, changed the column EQUIPMENT_OBJECT_PARTY2 .
--  150410  NEKOLK  121966 ,Added sup_mch_code and sup_contract to the view EQUIPMENT_OBJECT_PARTY2.
--  160127  ILSOLK  STRSA-1793, Added Customer_Object_Addr_Lov.
--  160303  ILSOLK  STRSA-2635, Removed EQUIPMENT_OBJECT_PARTY2.
--  160614  DIHELK  STRLOC-76, Added new address fields.
--  160818  RUMELK  APPUXX-2945, Added CUST_OBJECT_ADDRESS_CONTRACT view to be used in Service Request in UXX.
--  161107  JAROLK  STRSA-14609, Modified Cust_Object_Address_Contract and Customer_Object_Address Views.
--  161108  JAROLK  STRSA-14490, Modified Equipment_Object_Party3, Customer_Object_Addr_Lov, Customer_Object_Addr_Lov1, Cust_Object_Address_Contract, Customer_Object_Address Views.
--  170214  CLEKLK  STRSA-9547, Modified Customer_Object_Addr_Lov.
--  171128  CHSLLK  STRSA-31367, Modified Customer_Object_Addr_Lov1 to enable contract column for lovs.
--  180618  NIFRSE  Bug 142021, Modified the LOV flags for Location_Id and Address_Info_Id in Customer_Object_Addr_Lov and Customer_Object_Addr_Lov1.
--  190409  TAJALK  Bug 147697, Modified view CUSTOMER_OBJECT_ADDR_LOV2
--  200616  CLEKLK  Bug 154313, Modified column Mch_Name
--  210707  SIPELK  SM21R2-27, Added Equipment_Object_Party_Pub view.
--  220111  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID 
--                  and Site as a unique constraint), so inlined the views to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------

layer Core;

-------------------- COMMON COLUMN DEFINITIONS ------------------------------

COLUMN Description IS
   Flags      = 'A---L'
   Datatype   = 'STRING(50)'
   Prompt     = 'Description';

COLUMN Object_Level IS
   Flags      = 'A---L'
   Datatype   = 'STRING(30)'
   Prompt     = 'Object Level';

COLUMN Mch_Type IS
   Flags      = 'A---L'
   Datatype   = 'STRING(20)/UPPERCASE'
   Prompt     = 'Object Type';

COLUMN Category_Id IS
   Flags      = 'A---L'
   Datatype   = 'STRING(10)/UPPERCASE'
   Prompt     = 'Category';

COLUMN Def_Address IS
   Flags      = 'K---L'
   Datatype   = 'STRING(20)'
   Prompt     = 'Def Address';

COLUMN Address_Id IS
   Flags      = 'K---L'
   Datatype   = 'STRING(50)/UPPERCASE'
   Prompt     = 'Address Id';

COLUMN Address1 IS
   Flags      = 'A---L'
   Datatype   = 'STRING(35)'
   Prompt     = 'Address1';

COLUMN Address2 IS
   Flags      = 'A---L'
   Datatype   = 'STRING(35)'
   Prompt     = 'Address2';

COLUMN Zip_Code IS
   Flags      = 'A---L'
   Datatype   = 'STRING(35)'
   Prompt     = 'Zip_Code';

COLUMN City IS
   Flags      = 'A---L'
   Datatype   = 'STRING(35)'
   Prompt     = 'City';

COLUMN State IS
   Flags      = 'A---L'
   Datatype   = 'STRING(35)'
   Prompt     = 'State';

COLUMN Country IS
   Flags      = 'A---L'
   Datatype   = 'STRING(35)'
   Prompt     = 'Country';

COLUMN Country_Code IS
   Flags      = 'A---L'
   Datatype   = 'STRING(2)/UPPERCASE'
   Prompt     = 'Country Code';

COLUMN Address3 IS
   Flags      = 'A---L'
   Datatype   = 'STRING(100)'
   Prompt     = 'Address3';

COLUMN Address4 IS
   Flags      = 'A---L'
   Datatype   = 'STRING(100)'
   Prompt     = 'Address4';

COLUMN Address5 IS
   Flags      = 'A---L'
   Datatype   = 'STRING(100)'
   Prompt     = 'Address5';

COLUMN Address6 IS
   Flags      = 'A---L'
   Datatype   = 'STRING(100)'
   Prompt     = 'Address6';

COLUMN Party_Id IS
   Flags      = 'KMI-L'
   Datatype   = 'STRING(20)/UPPERCASE'
   Prompt     = 'Party Id';

COLUMN Creation_Date IS
   Flags      = 'A-I--'
   Datatype   = 'DATE/DATE'
   Prompt     = 'Creation Date';

COLUMN Association_No IS
   Flags      = 'A-IUL'
   Datatype   = 'STRING(50)'
   Prompt     = 'Association No';

COLUMN Party IS
   Flags      = 'A-IU-'
   Datatype   = 'STRING(20)/UPPERCASE'
   Prompt     = 'Party';

COLUMN Default_Domain IS
   Flags      = 'AMIU-'
   Datatype   = 'BOOLEAN'
   Prompt     = 'Default Domain';

COLUMN Default_Language IS
   Flags      = 'A-IU-'
   Datatype   = 'STRING(200)'
   Prompt     = 'Default Language'
   Ref        = 'IsoLanguage';

COLUMN Country IS
   Flags      = 'A-IU-'
   Datatype   = 'STRING(200)'
   Prompt     = 'Country'
   Ref        = 'IsoCountry';

COLUMN Mch_Name IS
   Flags      = 'A---L'
   Datatype   = 'STRING(200)'
   Prompt     = 'Object Desiption';

COLUMN Has_Structure IS
   Flags      = 'A----'
   Datatype   = 'STRING(10)'
   Prompt     = 'Has Structure';

COLUMN Sup_Mch_Code IS
   Flags      = 'A-IU-'
   Datatype   = 'STRING(100)/UPPERCASE'
   Prompt     = 'Superior Object ID'
   Ref        = 'EquipmentObject(sup_contract)';

COLUMN Sup_Contract IS
   Flags      = 'A-IU-'
   Datatype   = 'STRING(5)/UPPERCASE'
   Prompt     = 'Sup Contract'
   Ref        = 'Site';

-------------------- PUBLIC VIEW DEFINITIONS --------------------------------


-------------------- PRIVATE VIEW DEFINITIONS -------------------------------
@Overtake base
VIEW Equipment_Object_Party IS
   Prompt     = 'Equipment Object Party'
   Table      = 'EQUIPMENT_OBJECT_PARTY_TAB'
   Objversion = 'to_char(rowversion)'
SELECT
       equipment_object_seq           equipment_object_seq,
       identity                       identity,
       Object_Party_Type_API.Decode(party_type)               party_type,
       party_type                     party_type_db,
       NULL                           name,
       delivery_address               delivery_address,
       Equipment_Object_API.Get_Contract(equipment_object_seq) contract,                    
       Equipment_Object_API.Get_Mch_Code(equipment_object_seq) mch_code,
       rowkey                         objkey,
       to_char(rowversion)            objversion,
       rowid                          objid
FROM   equipment_object_party_tab;

VIEW Equipment_Object_Party_Pub AS
SELECT
       equ_party.equipment_object_seq equipment_object_seq,
       equ_obj.contract                       contract,
       equ_obj.mch_code                       mch_code,
       equ_party.identity                       identity,
       Object_Party_Type_API.Decode(equ_party.party_type) party_type,
       equ_party.party_type                     party_type_db,
       NULL                           name,
       equ_party.delivery_address               delivery_address,
       equ_party.rowkey                         objkey,
       to_char(equ_party.rowversion)            objversion,
       equ_party.rowid                          objid
FROM   equipment_object_party_tab equ_party, equipment_object_tab equ_obj
WHERE equ_party.equipment_object_seq = equ_obj.equipment_object_seq;

@DbViewRowLevelSecurity CustomImplemented
VIEW Equipment_Object_Party3 IS
   Prompt = 'Equipment Object Party'
   Contract.Flags = 'P---L'
   Mch_Code.Flags = 'K---L'
   Mch_Code.Prompt = 'Object Id'
   Identity.Flags = 'K----'
   Address_Id.Flags = 'K----'
   Address1.Flags = 'A----'
   Address1.Prompt = 'Address 1'
   Address2.Flags = 'A----'
   Address2.Datatype = 'STRING(2000)'
   Address2.Prompt = 'Address 2'
   Zip_Code.Flags = 'A----'
   Zip_Code.Datatype = 'STRING(2000)'
   Zip_Code.Prompt = 'Address 3'
   City.Flags = 'A----'
   City.Datatype = 'STRING(2000)'
   City.Prompt = 'Address 4'
   State.Flags = 'A----'
   State.Datatype = 'STRING(2000)'
   State.Prompt = 'Address 5'
   Country.Flags = 'A----'
   Country.Datatype = 'STRING(2000)'
   Country.Prompt = 'Address 6'
   Address3.Flags = 'A----'
   Address3.Datatype = 'STRING(2000)'
   Address3.Prompt = 'Address 8'
   Address4.Flags = 'A----'
   Address4.Datatype = 'STRING(2000)'
   Address4.Prompt = 'Address 9'
   Address5.Flags = 'A----'
   Address5.Datatype = 'STRING(2000)'
   Address5.Prompt = 'Address 10'
   Address6.Flags = 'A----'
   Address6.Datatype = 'STRING(2000)'
   Address6.Prompt = 'Address 11'
SELECT DISTINCT
eop.equipment_object_seq equipment_object_seq,
       equ_obj.contract               contract,
       equ_obj.mch_code               mch_code,
       eop.identity               identity,
       tca.address_id             address_id,     
       CUSTOMER_INFO_ADDRESS_API.Get_Address1(eop.identity,tca.address_id) address1,
       CUSTOMER_INFO_ADDRESS_API.Get_Address2(eop.identity,tca.address_id) address2,
       CUSTOMER_INFO_ADDRESS_API.Get_Address3(eop.identity,tca.address_id) address3,
       CUSTOMER_INFO_ADDRESS_API.Get_Address4(eop.identity,tca.address_id) address4,
       CUSTOMER_INFO_ADDRESS_API.Get_Address5(eop.identity,tca.address_id) address5,
       CUSTOMER_INFO_ADDRESS_API.Get_Address6(eop.identity,tca.address_id) address6,
       CUSTOMER_INFO_ADDRESS_API.Get_Zip_Code(eop.identity,tca.address_id) zip_code,
       CUSTOMER_INFO_ADDRESS_API.Get_City(eop.identity,tca.address_id)     city,
       CUSTOMER_INFO_ADDRESS_API.Get_State(eop.identity,tca.address_id)    state,
       CUSTOMER_INFO_ADDRESS_API.Get_Country(eop.identity,tca.address_id)  country,
       eop.objid                  objid,
       eop.objversion             objversion
FROM EQUIPMENT_OBJECT_PARTY eop,CUSTOMER_INFO_ADDRESS_TYPE tca, equipment_object_tab equ_obj
WHERE eop.equipment_object_seq = equ_obj.equipment_object_seq
AND eop.identity             = tca.customer_id (+)
AND tca.address_type_code_db = 'VISIT'
AND eop.party_type_db        = 'CUSTOMER'
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE equ_obj.contract = site);

VIEW Equipment_Object_Party4 IS
   Prompt = 'Customer Info'
   Name.Flags = 'A---L'
   Party_Type.Flags = 'AMIUL'
   Party_Type.Ref = 'PartyType'
   Party_Type_Db.Flags = 'AMIUL'
   Party_Type_Db.Prompt = 'Party Type Db'
SELECT supplier_id                    party_id,
       name                           name,
       creation_date                  creation_date,
       association_no                 association_no,
       party                          party,
       default_domain                 default_domain,
       default_language               default_language,
       default_language_db            default_language_db,
       country                        country,
       country_db                     country_db,
       Object_Party_Type_API.Get_Client_Value(2) party_type,
       Object_Party_Type_API.Get_Db_Value(2) party_type_db
FROM   supplier_info_public
UNION ALL
SELECT customer_id                    party_id,
       name                           name,
       creation_date                  creation_date,
       association_no                 association_no,
       party                          party,
       default_domain                 default_domain,
       default_language               default_language,
       default_language_db            default_language_db,
       country                        country,
       country_db                     country_db,
       party_type                     party_type,
       party_type_db                  party_type_db
FROM   customer_info_custcategory_pub
UNION ALL
SELECT manufacturer_id                party_id,
       name                           name,
       creation_date                  creation_date,
       association_no                 association_no,
       party                          party,
       default_domain                 default_domain,
       Iso_Language_API.Decode(default_language) default_language,
       default_language               default_language_db,
       Iso_Country_API.Decode(country) country,
       country                        country_db,
       Party_Type_API.Decode(party_type) party_type,
       party_type                     party_type_db
FROM   manufacturer_info_tab
UNION ALL
SELECT owner_id                       party_id,
       name                           name,
       creation_date                  creation_date,
       association_no                 association_no,
       party                          party,
       default_domain                 default_domain,
       Iso_Language_API.Decode(default_language) default_language,
       default_language               default_language_db,
       Iso_Country_API.Decode(country) country,
       country                        country_db,
       Party_Type_API.Decode(party_type) party_type,
       party_type                     party_type_db
FROM   owner_info_tab
UNION ALL
SELECT supplier_id                     party_id,
       name                            name,
       creation_date                   creation_date,
       association_no                  association_no,
       party                           party,
       default_domain                  default_domain,
       default_language                default_language,
       default_language_db             default_language_db,
       country                         country,
       country_db                      country_db,
       party_type                      party_type,
       party_type_db                   party_type_db
FROM   supplier_info_public;

@DbViewRowLevelSecurity CustomImplemented
VIEW Equipment_Obj_Cust_No_Scrapped IS
   Prompt = 'Equipment Object Party'
   Identity.Flags = 'P----'
   Identity.Prompt = 'Customer'
   Mch_Code.Flags = 'K---L'
   Contract.Flags = 'A---L'
SELECT equ_party.identity                   identity,
equ_party.equipment_object_seq equipment_object_seq,
       equ_obj.mch_code                   mch_code,
       equ_obj.contract                   contract,
       Equipment_Object_API.Get_Mch_Name(equ_party.equipment_object_seq) mch_name,
       equ_party.rowkey                    objkey
FROM   equipment_object_party_tab equ_party, equipment_object_tab equ_obj
WHERE equ_party.equipment_object_seq = equ_obj.equipment_object_seq
AND (EQUIPMENT_OBJECT_API.Get_Operational_Status_Db(equ_obj.equipment_object_seq) NOT IN ('SCRAPPED')
OR     EQUIPMENT_OBJECT_API.Get_Operational_Status_Db(equ_obj.equipment_object_seq) IS NULL)
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE equ_obj.contract = site);

@DbViewRowLevelSecurity CustomImplemented
VIEW Equipment_Object_Party_Uiv IS
   Prompt = 'Equipment Object Party'
   Identity.Ref = 'PartyTypeIdentity'
   Party_Type.Flags = 'KMIUL'
   Delivery_Address.Flag = 'A-IUL'
   Delivery_Address.Datatype = 'STRING(50)'
SELECT equ_party.equipment_object_seq equipment_object_seq,
       equ_obj.contract                  contract,
       equ_obj.mch_code                 mch_code,
       equ_party.identity                   identity,
       EQUIPMENT_OBJECT_PARTY_API.Decode_Obj_Party_Type(equ_party.party_type)
                                  party_type,
       equ_party.party_type          party_type_db,
       CASE
          WHEN equ_party.party_type = 'CUSTOMER' THEN
             Customer_Info_API.Get_Name(equ_party.identity)
          WHEN equ_party.party_type = 'SUPPLIER' THEN
             Supplier_Info_API.Get_Name(equ_party.identity)
          WHEN equ_party.party_type = 'CONTRACTOR' THEN
             Supplier_Info_API.Get_Name(equ_party.identity)
          WHEN equ_party.party_type = 'MANUFACTURER' THEN
             Manufacturer_Info_API.Get_Name(equ_party.identity)
          WHEN equ_party.party_type = 'OWNER' THEN
             Owner_Info_API.Get_Name(equ_party.identity)
          ELSE NULL
       END                        name,
       equ_party.delivery_address                delivery_address,
       equ_party.rowid                     objid,
       TO_CHAR(equ_party.rowversion)                objversion,
       equ_party.rowkey                    objkey
FROM   equipment_object_party_tab equ_party, equipment_object_tab equ_obj
WHERE equ_party.equipment_object_seq = equ_obj.equipment_object_seq
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE equ_obj.contract = site);

VIEW Customer_Object_Addr_Lov IS
   Prompt = 'Object Address for Customer'
   Mch_Code.Flags = 'K-I--'
   sup_mch_code.Flags = 'A----' 
   sup_contract.Flags = 'A----'
   location_id.Flags = 'A---L'
   location_id.DataType = 'STRING(30)'
   location_description.Flags = 'A----'
   location_description.DataType = 'STRING(200)'
   location_description.Prompt = 'Description'
   party_type.Flags = 'A----'
   identity.Flags = 'A----'
   primary_address.Flags = 'A----'
   primary_address.DataType = 'STRING(5)'
   Address_Id.Flags = 'A----'
   Address1.Flags = 'A----'
   Address2.Flags = 'A----'
   Zip_Code.Flags = 'A----'
   City.Flags = 'A----'
   State.Flags = 'A----'
   county.Flags = 'A----'
   county.DataType = 'STRING(35)'
   Country.Flags = 'A----'
   Country_Code.Flags = 'A----'
   Country_Code.Prompt = 'Country Code'
   Address3.Flags = 'A----'
   Address4.Flags = 'A----'
   Address5.Flags = 'A----'
   Address6.Flags = 'A----'
   Address_Info_Id.Flags = 'A---L'
   Address_Info_Id.Prompt = 'Address Info ID'
   Address_Info_Id.DataType = 'NUMBER'
   operational_status.Flags   = 'A----'
   operational_status.DataType = 'STRING(200)'
   operational_status_db.Flags   = 'A----'
   operational_status_db.DataType = 'STRING(20)'
SELECT
      moa.mch_code                      mch_code,
      moa.mch_name                      mch_name,
      moa.mch_code_contract             mch_code_contract,
      eop.equipment_object_seq equipment_object_seq,  
      moa.obj_level                     obj_level,
      moa.sup_mch_code                  sup_mch_code,
      moa.sup_contract                  sup_contract,
      moa.latest_transaction            latest_transaction,
      moa.operational_status            operational_status,
      moa.operational_status_db         operational_status_db,
      moa.location_id                   location_id,
      moa.location_description          location_description,      
      CASE
          WHEN eop.party_type_db is not null  THEN
             eop.party_type_db          
          ELSE 
             moa.party_type
      END                               party_type,
      CASE
          WHEN eop.identity is not null  THEN
             eop.identity          
          ELSE 
             moa.identity
      END                               identity,
      moa.has_visit_add                 has_visit_add,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.address_id)          address_id,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.primary_address)     primary_address,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.address1)            address1,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.address2)            address2,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.address3)            address3,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.address4)            address4,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.address5)            address5,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.address6)            address6,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.zip_code)            zip_code,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.city)                city,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.state)               state,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.country)             country,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.country_code)        country_code,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.county)              county,
      moa.address_info_id               address_info_id,
      moa.connection_type               connection_type,
      moa.category_id                   category_id,
      moa.serial_no                     serial_no,
      moa.part_no                       part_no,
      moa.mch_type                      mch_type,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.valid_from)          valid_from,
      DECODE(moa.has_visit_add, 'FALSE', NULL, moa.valid_to)            valid_to,
      moa.objid                         objid,
      moa.objversion                    objversion
FROM  Maintenance_Object_Addr_Lov  moa ,EQUIPMENT_OBJECT_PARTY eop 
WHERE eop.contract = moa.mch_code_contract
AND   eop.mch_code = moa.mch_code
AND   eop.party_type_db = 'CUSTOMER'
AND   (moa.party_type = 'CUSTOMER' or moa.party_type IS NULL )
AND   (eop.identity = moa.identity OR (eop.identity IS NULL OR moa.identity IS NULL)) 
AND   ((moa.operational_status_db IS NOT NULL AND moa.operational_status_db != 'SCRAPPED')
        OR
        (moa.operational_status_db IS NULL AND EXISTS (SELECT 1
                                                    FROM part_serial_catalog_pub
                                                    WHERE part_no = moa.part_no
                                                    AND serial_no = moa.serial_no
                                                    AND operational_status != 'SCRAPPED')));


VIEW Customer_Object_Addr_Lov2 IS
   Prompt = 'Object Address for Customer'
   Mch_Code.Flags = 'K-I-L'
   Contract.Flags = 'PMI-L'
   Location_Id.Flags = 'A---L'
   Address_Info_Id.Flags = 'A---L'
SELECT
      eop.equipment_object_seq equipment_object_seq,
      eqo.mch_code                      mch_code,
      eqo.mch_name                      mch_name,
      eqo.contract                      mch_code_contract,
      eqo.contract                      contract,
      eqo.obj_level                     obj_level,
      Equipment_Object_API.Get_Mch_Code(eqo.functional_object_seq)                  sup_mch_code,
      Equipment_Object_API.Get_Contract(eqo.functional_object_seq)                  sup_contract,
      p.latest_transaction              latest_transaction,
      Serial_Operational_Status_API.Decode(NVL(eqo.operational_status, p.operational_status))            operational_status,
      NVL(eqo.operational_status, p.operational_status)                                                  operational_status_db,
      eqo.location_id                   location_id,
      Location_API.Get_Name(eqo.location_id) location_description,      
      eop.party_type                    party_type,
      NULL                              loc_party_type,
      eop.identity                      identity,
      NULL                              address_id,
      NULL                              primary_address,
      NULL                              address1,
      NULL                              address2,
      NULL                              zip_code,
      NULL                              city,
      NULL                              state,
      NULL                              county,
      NULL                              country,
      NULL                              country_code,
      NULL                              address3,
      NULL                              address4,
      NULL                              address5,
      NULL                              address6,
      to_date(NULL)                     valid_from,
      to_date(NULL)                     valid_to,
      NULL                              contact,
      NULL                              phone_no,
      NULL                              e_mail,
      DECODE(eqo.is_category_object, 'TRUE', 'CATEGORY', 'EQUIPMENT') connection_type,
      eqo.category_id                   category_id,
      eqo.mch_serial_no                 serial_no,
      eqo.part_no                       part_no,
      eqo.mch_type                      mch_type,
      to_number(NULL)                   address_info_id,
      'FALSE'                           has_visit_add,
      eqo.rowid                         objid,
      to_char(eqo.rowversion)           objversion,
      eqo.rowkey                        objkey
FROM  equipment_object_tab eqo, part_serial_catalog_pub p, EQUIPMENT_OBJECT_PARTY_TAB eop
WHERE (eqo.location_id IS NULL OR 1 NOT IN (SELECT 1 FROM Location_Party_Address_Tab a 
                                             WHERE a.location_id = eqo.location_id
                                             --AND eop.identity = a.identity
                                             AND a.visit_address = 'TRUE'))
AND   eqo.part_no             = p.part_no(+)
AND   eqo.mch_serial_no       = p.serial_no(+)
AND   eop.equipment_object_seq = eqo.equipment_object_seq
AND   eop.party_type = 'CUSTOMER'
AND   NVL(eqo.operational_status, p.operational_status) IS NOT NULL AND NVL(eqo.operational_status, p.operational_status) != 'SCRAPPED'
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE eqo.contract = site)
UNION ALL
SELECT
      eop.equipment_object_seq equipment_object_seq,
      eqo.mch_code                      mch_code,
      eqo.mch_name                      mch_name,
      eqo.contract                      mch_code_contract,
      eqo.contract                      contract,
      eqo.obj_level                     obj_level,
      Equipment_Object_API.Get_Mch_Code(eqo.functional_object_seq)                  sup_mch_code,
      Equipment_Object_API.Get_Contract(eqo.functional_object_seq)                  sup_contract,
      p.latest_transaction              latest_transaction,
      --NULL              latest_transaction,
      Serial_Operational_Status_API.Decode(NVL(eqo.operational_status, p.operational_status))            operational_status,
      NVL(eqo.operational_status, p.operational_status)     operational_status_db,
      --Serial_Operational_Status_API.Decode(eqo.operational_status) operational_status,
      --eqo.operational_status                                      operational_status_db,
      eqo.location_id                   location_id,
      Location_API.Get_Name(eqo.location_id) location_description,      
      lpa.party_type                    party_type,
      Location_Party_Type_API.Decode(lpa.party_type) loc_party_type,
      eop.identity                      identity,
      lpa.address_id                    address_id,
      lpa.primary_address               primary_address,
      lpa.address1                      address1,
      lpa.address2                      address2,
      lpa.zip_code                      zip_code,
      lpa.city                          city,
      lpa.state                         state,
      lpa.county                        county,
      Iso_Country_API.Decode(lpa.country_code) country,
      lpa.country_code                  country_code,
      lpa.address3                      address3,
      lpa.address4                      address4,
      lpa.address5                      address5,
      lpa.address6                      address6,
      lpa.valid_from                    valid_from,
      lpa.valid_to                      valid_to,
      lpa.contact                       contact,
      lpa.phone_no                      phone_no,
      lpa.e_mail                        e_mail,
      DECODE(eqo.is_category_object, 'TRUE', 'CATEGORY', 'EQUIPMENT') connection_type,
      eqo.category_id                   category_id,
      eqo.mch_serial_no                 serial_no,
      eqo.part_no                       part_no,
      eqo.mch_type                      mch_type,
      lpa.address_info_id               address_info_id,
      'TRUE'                            has_visit_add,
      eqo.rowid                         objid,
      to_char(eqo.rowversion)           objversion,
      eqo.rowkey                        objkey
FROM  equipment_object_tab eqo, Location_Party_Address_Tab lpa, EQUIPMENT_OBJECT_PARTY_TAB EOP, part_serial_catalog_pub p
WHERE eqo.location_id         = lpa.location_id
AND   lpa.visit_address       = 'TRUE'
AND   lpa.location_specific_address = 'TRUE' 
AND   eqo.part_no             = p.part_no(+)
AND   eqo.mch_serial_no       = p.serial_no(+)
AND   eqo.equipment_object_seq = eop.equipment_object_seq 
AND   eop.party_type = 'CUSTOMER'
AND   ( (lpa.party_type = 'CUSTOMER' AND eop.identity = lpa.identity) OR (lpa.party_type = 'COMPANY'))
--AND   eop.identity = lpa.identity
AND   NVL(eqo.operational_status, p.operational_status) IS NOT NULL AND NVL(eqo.operational_status, p.operational_status) != 'SCRAPPED'
UNION ALL
SELECT
      eop.equipment_object_seq equipment_object_seq,
      eqo.mch_code                      mch_code,
      eqo.mch_name                      mch_name,
      eqo.contract                      mch_code_contract,
      eqo.contract                      contract,
      eqo.obj_level                     obj_level,
      Equipment_Object_API.Get_Mch_Code(eqo.functional_object_seq)                  sup_mch_code,
      Equipment_Object_API.Get_Contract(eqo.functional_object_seq)                  sup_contract,
      p.latest_transaction              latest_transaction,
      Serial_Operational_Status_API.Decode(NVL(eqo.operational_status, p.operational_status))            operational_status,
      NVL(eqo.operational_status, p.operational_status)                                                  operational_status_db,
      eqo.location_id                   location_id,
      Location_API.Get_Name(eqo.location_id) location_description,      
      lpa.party_type                    party_type,
      Location_Party_Type_API.Decode(lpa.party_type) loc_party_type,
      eop.identity                      identity,
      lpa.address_id                    address_id,
      lpa.primary_address               primary_address,
      c.address1                        address1,
      c.address2                        address2,
      c.zip_code                        zip_code,
      c.city                            city,
      c.state                           state,
      c.county                          county,
      Iso_Country_API.Decode(c.country) country,
      c.country                         country_code,
      c.address3                        address3,
      c.address4                        address4,
      c.address5                        address5,
      c.address6                        address6,
      c.valid_from                      valid_from,
      c.valid_to                        valid_to,
      lpa.contact                       contact,
      lpa.phone_no                      phone_no,
      lpa.e_mail                        e_mail,
      DECODE(eqo.is_category_object, 'TRUE', 'CATEGORY', 'EQUIPMENT') connection_type,
      eqo.category_id                   category_id,
      eqo.mch_serial_no                 serial_no,
      eqo.part_no                       part_no,
      eqo.mch_type                      mch_type,
      lpa.address_info_id               address_info_id,
      Location_Party_Address_API.Has_Visit_Add_For_Location(eqo.location_id, lpa.address_info_id)   has_visit_add,
      eqo.rowid                         objid,
      to_char(eqo.rowversion)           objversion,
      eqo.rowkey                        objkey
FROM  equipment_object_tab eqo, Location_Party_Address_Tab lpa, part_serial_catalog_pub p, Customer_Info_Address_Tab c, EQUIPMENT_OBJECT_PARTY_TAB EOP
WHERE eqo.location_id         = lpa.location_id
AND   lpa.visit_address       = 'TRUE'
AND   lpa.location_specific_address = 'FALSE' 
AND   lpa.party_type = 'CUSTOMER'
AND   eqo.part_no             = p.part_no(+)
AND   eqo.mch_serial_no       = p.serial_no(+)
AND   lpa.identity            = c.customer_id
AND   lpa.address_id          = c.address_id
AND   eop.equipment_object_seq = eqo.equipment_object_seq
AND   eop.party_type = 'CUSTOMER'
AND   eop.identity = lpa.identity
AND   NVL(eqo.operational_status, p.operational_status) IS NOT NULL AND NVL(eqo.operational_status, p.operational_status) != 'SCRAPPED'
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE eqo.contract = site)
UNION ALL
SELECT
      eqo.equipment_object_seq equipment_object_seq,
      eqo.mch_code                      mch_code,
      eqo.mch_name                      mch_name,
      eqo.contract                      mch_code_contract,
      eqo.contract                      contract,
      eqo.obj_level                     obj_level,
      Equipment_Object_API.Get_Mch_Code(eqo.functional_object_seq)                  sup_mch_code,
      Equipment_Object_API.Get_Contract(eqo.functional_object_seq)                  sup_contract,
      p.latest_transaction              latest_transaction,
      --NULL              latest_transaction,
      Serial_Operational_Status_API.Decode(NVL(eqo.operational_status, p.operational_status))            operational_status,
      NVL(eqo.operational_status, p.operational_status)     operational_status_db,
      --Serial_Operational_Status_API.Decode(eqo.operational_status) operational_status,
      --eqo.operational_status                                      operational_status_db,
      eqo.location_id                   location_id,
      Location_API.Get_Name(eqo.location_id) location_description,      
      lpa.party_type                    party_type,
      Location_Party_Type_API.Decode(lpa.party_type) loc_party_type,
      lpa.identity                      identity,
      lpa.address_id                    address_id,
      lpa.primary_address               primary_address,
      lpa.address1                      address1,
      lpa.address2                      address2,
      lpa.zip_code                      zip_code,
      lpa.city                          city,
      lpa.state                         state,
      lpa.county                        county,
      Iso_Country_API.Decode(lpa.country_code) country,
      lpa.country_code                  country_code,
      lpa.address3                      address3,
      lpa.address4                      address4,
      lpa.address5                      address5,
      lpa.address6                      address6,
      lpa.valid_from                    valid_from,
      lpa.valid_to                      valid_to,
      lpa.contact                       contact,
      lpa.phone_no                      phone_no,
      lpa.e_mail                        e_mail,
      DECODE(eqo.is_category_object, 'TRUE', 'CATEGORY', 'EQUIPMENT') connection_type,
      eqo.category_id                   category_id,
      eqo.mch_serial_no                 serial_no,
      eqo.part_no                       part_no,
      eqo.mch_type                      mch_type,
      lpa.address_info_id               address_info_id,
      'TRUE'                            has_visit_add,
      eqo.rowid                         objid,
      to_char(eqo.rowversion)           objversion,
      eqo.rowkey                        objkey
FROM  equipment_object_tab eqo, Location_Party_Address_Tab lpa, part_serial_catalog_pub p
WHERE (1 NOT IN (SELECT 1 FROM EQUIPMENT_OBJECT_PARTY_TAB EOP
                                             WHERE eop.equipment_object_seq = eqo.equipment_object_seq and eop.party_type = 'CUSTOMER'))
AND eqo.location_id         = lpa.location_id
AND   lpa.visit_address       = 'TRUE'
AND   lpa.location_specific_address = 'TRUE' 
AND   lpa.party_type = 'CUSTOMER' 
AND   eqo.part_no             = p.part_no(+)
AND   eqo.mch_serial_no       = p.serial_no(+)
AND   NVL(eqo.operational_status, p.operational_status) IS NOT NULL AND NVL(eqo.operational_status, p.operational_status) != 'SCRAPPED'
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE eqo.contract = site)
UNION ALL
SELECT
      eqo.equipment_object_seq equipment_object_seq,
      eqo.mch_code                      mch_code,
      eqo.mch_name                      mch_name,
      eqo.contract                      mch_code_contract,
      eqo.contract                      contract,
      eqo.obj_level                     obj_level,
      Equipment_Object_API.Get_Mch_Code(eqo.functional_object_seq)                  sup_mch_code,
      Equipment_Object_API.Get_Contract(eqo.functional_object_seq)                  sup_contract,
      p.latest_transaction              latest_transaction,
      Serial_Operational_Status_API.Decode(NVL(eqo.operational_status, p.operational_status))            operational_status,
      NVL(eqo.operational_status, p.operational_status)                                                  operational_status_db,
      eqo.location_id                   location_id,
      Location_API.Get_Name(eqo.location_id) location_description,      
      lpa.party_type                    party_type,
      Location_Party_Type_API.Decode(lpa.party_type) loc_party_type,
      lpa.identity                      identity,
      lpa.address_id                    address_id,
      lpa.primary_address               primary_address,
      c.address1                        address1,
      c.address2                        address2,
      c.zip_code                        zip_code,
      c.city                            city,
      c.state                           state,
      c.county                          county,
      Iso_Country_API.Decode(c.country) country,
      c.country                         country_code,
      c.address3                        address3,
      c.address4                        address4,
      c.address5                        address5,
      c.address6                        address6,
      c.valid_from                      valid_from,
      c.valid_to                        valid_to,
      lpa.contact                       contact,
      lpa.phone_no                      phone_no,
      lpa.e_mail                        e_mail,
      DECODE(eqo.is_category_object, 'TRUE', 'CATEGORY', 'EQUIPMENT') connection_type,
      eqo.category_id                   category_id,
      eqo.mch_serial_no                 serial_no,
      eqo.part_no                       part_no,
      eqo.mch_type                      mch_type,
      lpa.address_info_id               address_info_id,
      Location_Party_Address_API.Has_Visit_Add_For_Location(eqo.location_id, lpa.address_info_id)   has_visit_add,
      eqo.rowid                         objid,
      to_char(eqo.rowversion)           objversion,
      eqo.rowkey                        objkey
FROM  equipment_object_tab eqo, Location_Party_Address_Tab lpa, part_serial_catalog_pub p, Customer_Info_Address_Tab c
WHERE (1 NOT IN (SELECT 1 FROM EQUIPMENT_OBJECT_PARTY_TAB EOP
                                             WHERE eop.equipment_object_seq = eqo.equipment_object_seq and eop.party_type = 'CUSTOMER'))
AND  eqo.location_id         = lpa.location_id
AND   lpa.visit_address       = 'TRUE'
AND   lpa.location_specific_address = 'FALSE' 
AND   lpa.party_type = 'CUSTOMER'
AND   eqo.part_no             = p.part_no(+)
AND   eqo.mch_serial_no       = p.serial_no(+)
AND   lpa.identity            = c.customer_id
AND   lpa.address_id          = c.address_id
AND   NVL(eqo.operational_status, p.operational_status) IS NOT NULL AND NVL(eqo.operational_status, p.operational_status) != 'SCRAPPED'
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE eqo.contract = site)
UNION ALL
SELECT
      eqo.equipment_object_seq equipment_object_seq,
      eqo.mch_code                      mch_code,
      eqo.mch_name                      mch_name,
      eqo.contract                      mch_code_contract,
      eqo.contract                      contract,
      eqo.obj_level                     obj_level,
      Equipment_Object_API.Get_Mch_Code(eqo.functional_object_seq)                  sup_mch_code,
      Equipment_Object_API.Get_Contract(eqo.functional_object_seq)                  sup_contract,
      p.latest_transaction              latest_transaction,
      --NULL              latest_transaction,
      Serial_Operational_Status_API.Decode(NVL(eqo.operational_status, p.operational_status))            operational_status,
      NVL(eqo.operational_status, p.operational_status)     operational_status_db,
      --Serial_Operational_Status_API.Decode(eqo.operational_status) operational_status,
      --eqo.operational_status                                      operational_status_db,
      eqo.location_id                   location_id,
      Location_API.Get_Name(eqo.location_id) location_description,      
      lpa.party_type                    party_type,
      Location_Party_Type_API.Decode(lpa.party_type) loc_party_type,
      lpa.identity                      identity,
      NULL                              address_id,
      NULL                              primary_address,
      NULL                              address1,
      NULL                              address2,
      NULL                              zip_code,
      NULL                              city,
      NULL                              state,
      NULL                              county,
      NULL                              country,
      NULL                              country_code,
      NULL                              address3,
      NULL                              address4,
      NULL                              address5,
      NULL                              address6,
      to_date(NULL)                     valid_from,
      to_date(NULL)                     valid_to,
      NULL                              contact,
      NULL                              phone_no,
      NULL                              e_mail,
      DECODE(eqo.is_category_object, 'TRUE', 'CATEGORY', 'EQUIPMENT') connection_type,
      eqo.category_id                   category_id,
      eqo.mch_serial_no                 serial_no,
      eqo.part_no                       part_no,
      eqo.mch_type                      mch_type,
      lpa.address_info_id               address_info_id,
      'FALSE'                            has_visit_add,
      eqo.rowid                         objid,
      to_char(eqo.rowversion)           objversion,
      eqo.rowkey                        objkey
FROM  equipment_object_tab eqo, Location_Party_Address_Tab lpa, part_serial_catalog_pub p
WHERE (1 NOT IN (SELECT 1 FROM EQUIPMENT_OBJECT_PARTY_TAB EOP
                                             WHERE eop.equipment_object_seq = eqo.equipment_object_seq and eop.party_type = 'CUSTOMER') 
                                              )
AND 1 NOT IN (SELECT 1 FROM Location_Party_Address_Tab lpa 
                                             WHERE lpa.location_id = eqo.location_id                                             
                                             AND lpa.visit_address = 'TRUE')                                              
AND  eqo.location_id         = lpa.location_id
AND   lpa.delivery_address       = 'TRUE'
AND   lpa.location_specific_address = 'FALSE' 
AND   lpa.party_type = 'CUSTOMER'
AND   eqo.part_no             = p.part_no(+)
AND   eqo.mch_serial_no       = p.serial_no(+)
AND   NVL(eqo.operational_status, p.operational_status) IS NOT NULL AND NVL(eqo.operational_status, p.operational_status) != 'SCRAPPED'
AND  EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE eqo.contract = site)
WITH   READ ONLY;

   
VIEW Customer_Object_Addr_Lov1 IS
   Prompt = 'Object Address for Customer'
   Mch_Code.Flags = 'K-I-L'
   Contract.Flags = 'PMI-L'
   Location_Id.Flags = 'A---L'
   Location_Id.DataType = 'STRING(30)'
   Address_Info_Id.Flags = 'A---L'
   Address_Info_Id.DataType = 'NUMBER'
SELECT
      mch_code                      mch_code,
      mch_name                      mch_name,
      mch_code_contract             mch_code_contract,
      mch_code_contract             contract,
      obj_level                     obj_level,
      sup_mch_code                  sup_mch_code,
      sup_contract                  sup_contract,
      latest_transaction            latest_transaction,
      operational_status            operational_status,
      operational_status_db         operational_status_db,
      location_id                   location_id,
      location_description          location_description,      
      party_type                    party_type,
      party_type                    party_type_db,
      identity                      identity,
      address_id                    address_id,
      primary_address               primary_address,
      address1                      address1,
      address2                      address2,
      zip_code                      zip_code,
      city                          city,
      state                         state,
      county                        county,
      country                       country,
      country_code                  country_code,
      address3                      address3,
      address4                      address4,
      address5                     address5,
      address6                     address6,
      address_info_id               address_info_id,
      connection_type               connection_type,
      category_id                   category_id,
      serial_no                     serial_no,
      part_no                       part_no,
      mch_type                      mch_type,
      valid_from                    valid_from,
      valid_to                      valid_to,
      objid                         objid,
      objversion                    objversion
FROM  Customer_Object_Addr_Lov2;
