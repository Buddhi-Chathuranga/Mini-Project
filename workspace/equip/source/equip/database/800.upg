---------------------------------------------------------------------------------------------
--  Module : EQUIP
--
--  Purpose: Upgrade database objects for IFS/Equipment Administration
--           from version 7.1.0 to 8.0.0
--
--  File   : 800.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  151030   SamGLK  STRSA-762, Created.
--  151119   safalk  STRSA-987, Merged 150619_122990_EQUIP.cdb 
--  151203   akdelk	STRSA-873, Adding NEW COLUMN LOCATION_ID TO EQUIPMENT_OBJECT_TAB
--  160120   NRatLK  RPT-691,   Added new columns related to PM Programs in EQUIPMENT_OBJECT_TAB. 
--	 160210	 DUHELK  MATP-1553, Adding new column safe_access_code to equipment_object_tab and update null values.
--  161006   priklk  STRSA-13421, modified Safe_Access_Code default value to align with the model.
--  161020   serolk  STRSA-10072,Added new columns to Equipment_Object_Tab.
--  161125   JAROLK  STRSA-14609, Remove view CUSTOMER_OBJECT_ADDR_LOV2.
--  170220   chanlk  STRSA-12924, Handle tool Eq in Equipment measurement.
--  170823   chanlk  STRSA-28515, Alter index equipment_object_ix10
--  170829   japelk  Added new column ROWSTATE to table EQUIPMENT_OBJ_TYPE_TAB as part of Data Validity changes.
--  170830   sawalk  Added new column ROWSTATE to table EQUIPMENT_OBJ_CONN_TYPE_TAB as part of Data Validity changes.
--                   Added new column ROWSTATE to table EQUIPMENT_OBJ_CATEGORY_TAB as part of Data Validity changes.
--                   Added new column ROWSTATE to table EQUIPMENT_OBJ_GROUP_TAB as part of Data Validity changes.
--  170831   sawalk  Added new column ROWSTATE to table EQUIPMENT_OBJECT_LEVEL_TAB as part of Data Validity changes.
--  170831   japelk  Added new column ROWSTATE to table TYPE_DESIGNATION_TAB as part of Data Validity changes.
--  181215   KrRaLK  Added GroupingCriteria, LocationID and MchType to EQUIPMENT_TW_SETTINGS_TAB.
--  190828   KrRaLK  Added CRITICALITY, ITEM_CLASS, GROUP_ID, CATEGORY_ID and MANUFACTURER_NO to EQUIPMENT_TW_SETTINGS_TAB.
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_1');
PROMPT Start upgrading with 800.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--  
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--  
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--  
--  Don't forget UPPER/lower case !
--  
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--  
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--  
--  Remember ordinary coding standard rules !
--  
--  Don't drop any Table/Column !
--  
--  Don't forget performance when updating large table !
--  
--  No unnecessary blank lines or comments !
--  
--  If possible, use pure SQL commands
--  
--  If possible, try to group several updates together in one statement.
--    
--  Timestamps will be added automatically at the end of the project.
--  
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--  
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
--------------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ----------------------
---------------------------------------------------------------------------------------------

-- ***** EQUIPMENT_OBJECT_MEAS_TAB Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_2');
PROMPT ADD COLUMN RESOURCE_SEQ TO TABLE EQUIPMENT_OBJECT_MEAS_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESOURCE_SEQ', 'NUMBER', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/
-- ***** EQUIPMENT_OBJECT_MEAS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** Equipment_Object_Party_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_3');
PROMPT Adding column DELIVERY_ADDRESS INTO EQUIPMENT_OBJECT_PARTY_TAB
DECLARE
   columns_             Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_ADDRESS', 'VARCHAR2(50)', 'Y'); 
   Database_SYS.Alter_Table('EQUIPMENT_OBJECT_PARTY_TAB', columns_, TRUE);      
END;
/
-- ***** Equipment_Object_Party_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Equipment_Object_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_4');
PROMPT Adding NEW COLUMNS TO EQUIPMENT_OBJECT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SAFE_ACCESS_CODE', 'VARCHAR2(20)', 'Y', default_value_=> '''NOT_REQUIRED''', keep_default_=>'N');
   Database_SYS.Set_Table_Column(columns_, 'APPLIED_PM_PROGRAM_ID', 'VARCHAR2(100)', 'Y'); 
   Database_SYS.Set_Table_Column(columns_, 'APPLIED_PM_PROGRAM_REV', 'VARCHAR2(6)', 'Y'); 
   Database_SYS.Set_Table_Column(columns_, 'APPLIED_DATE', 'DATE', 'Y'); 
   Database_SYS.Set_Table_Column(columns_, 'PM_PROG_APPLICATION_STATUS', 'VARCHAR2(5)', 'Y', default_value_=> '''FALSE''', keep_default_=>'N'); 
   Database_SYS.Set_Table_Column(columns_, 'NOT_APPLICABLE_REASON', 'VARCHAR2(2000)', 'Y'); 
   Database_SYS.Set_Table_Column(columns_, 'NOT_APPLICABLE_SET_USER', 'VARCHAR2(20)', 'Y'); 
   Database_SYS.Set_Table_Column(columns_, 'NOT_APPLICABLE_SET_DATE', 'DATE', 'Y'); 
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_5');
PROMPT ADD COLUMN PROCESS_CLASS_ID TO TABLE EQUIPMENT_OBJECT_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_CLASS_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_6');
PROMPT Create INDEX EQUIPMENT_OBJECT_IX9

DECLARE
   columns_      Database_SYS.ColumnTabType;
   index_name_    VARCHAR2(50) := 'EQUIPMENT_OBJECT_IX9';
BEGIN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'PROCESS_CLASS_ID');
      Database_SYS.Set_Table_Column(columns_, 'ITEM_CLASS_ID');   
      Database_SYS.Create_Index ('EQUIPMENT_OBJECT_TAB', index_name_, columns_, 'N', '&IFSAPP_INDEX',  NULL, TRUE);
END;
/

--if the indexes are already created in Apps 9, need to move the indexes to correct tablespace
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_7');
PROMPT MOVE TABLESPACE OF INDEXES EQUIPMENT_OBJECT_IX10, EQUIPMENT_OBJECT_IX11, EQUIPMENT_OBJECT_IX12, EQUIPMENT_OBJECT_IX13, EQUIPMENT_OBJECT_IX14, EQUIPMENT_OBJECT_IX15
BEGIN   

   IF (Database_SYS.Index_Exist('EQUIPMENT_OBJECT_IX10')) THEN
      Database_SYS.Move_Object('EQUIPMENT_OBJECT_IX10','&IFSAPP_INDEX',TRUE);
   END IF;
   
   IF (Database_SYS.Index_Exist('EQUIPMENT_OBJECT_IX11')) THEN
      Database_SYS.Move_Object('EQUIPMENT_OBJECT_IX11','&IFSAPP_INDEX',TRUE);
   END IF;
   
   IF (Database_SYS.Index_Exist('EQUIPMENT_OBJECT_IX12')) THEN
      Database_SYS.Move_Object('EQUIPMENT_OBJECT_IX12','&IFSAPP_INDEX',TRUE);
   END IF;
   
   IF (Database_SYS.Index_Exist('EQUIPMENT_OBJECT_IX13')) THEN
      Database_SYS.Move_Object('EQUIPMENT_OBJECT_IX13','&IFSAPP_INDEX',TRUE);
   END IF;
   
   IF (Database_SYS.Index_Exist('EQUIPMENT_OBJECT_IX14')) THEN
      Database_SYS.Move_Object('EQUIPMENT_OBJECT_IX14','&IFSAPP_INDEX',TRUE);
   END IF;
   
   IF (Database_SYS.Index_Exist('EQUIPMENT_OBJECT_IX15')) THEN
      Database_SYS.Move_Object('EQUIPMENT_OBJECT_IX15','&IFSAPP_INDEX',TRUE);
   END IF;
   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_8');
PROMPT Create indexes in EQUIPMENT_OBJECT_TAB
DECLARE
   columns_       Database_SYS.ColumnTabType;
BEGIN
    
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'LOCATION_MCH_CODE');
      Database_SYS.Set_Table_Column(columns_, 'LOCATION_CONTRACT');
      Database_SYS.Set_Table_Column(columns_, 'LOCATION_ID');
      Database_SYS.Create_Index('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_IX10', columns_, 'N', '&IFSAPP_INDEX', replace_ => TRUE);
      
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'FROM_MCH_CODE');
      Database_SYS.Set_Table_Column(columns_, 'FROM_CONTRACT');
      Database_SYS.Create_Index('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_IX11', columns_, 'N', '&IFSAPP_INDEX', replace_ => TRUE);
      
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'TO_MCH_CODE');
      Database_SYS.Set_Table_Column(columns_, 'TO_CONTRACT');
      Database_SYS.Create_Index('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_IX12', columns_, 'N', '&IFSAPP_INDEX', replace_ => TRUE);
      
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'PIPE_MCH_CODE');
      Database_SYS.Set_Table_Column(columns_, 'PIPE_CONTRACT');
      Database_SYS.Create_Index('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_IX13', columns_, 'N', '&IFSAPP_INDEX', replace_ => TRUE);
      
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'PROCESS_MCH_CODE');
      Database_SYS.Set_Table_Column(columns_, 'PROCESS_CONTRACT');
      Database_SYS.Create_Index('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_IX14', columns_, 'N', '&IFSAPP_INDEX', replace_ => TRUE);
      
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'CIRCUIT_MCH_CODE');
      Database_SYS.Set_Table_Column(columns_, 'CIRCUIT_CONTRACT');
      Database_SYS.Create_Index('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_IX15', columns_, 'N', '&IFSAPP_INDEX', replace_ => TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_9');
PROMPT NOT Allowed null values for EQUIPMENT_OBJECT_TAB rowtype
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;   
BEGIN        
   Database_SYS.Reset_Column_Table(columns_);   
   Database_SYS.Set_Table_Column(columns_, 'ROWTYPE', 'VARCHAR2(30)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);      
END;
/
-- ***** Equipment_Object_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Equipment_Object_Test_Pnt_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_10');
PROMPT Adding RESOURCE_SEQ TO EQUIPMENT_OBJECT_TEST_PNT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);        
   Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RESOURCE_SEQ', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

BEGIN
   UPDATE EQUIPMENT_OBJECT_TEST_PNT_TAB 
   SET mch_code = NULL
   WHERE lu_name = 'ToolEquipment' ;
   COMMIT;
END;
/

-- ***** Equipment_Object_Test_Pnt_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Equipment_Object_Param_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_11');
PROMPT Adding RESOURCE_SEQ TO EQUIPMENT_OBJECT_PARAM_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);        
   column_ := Database_SYS.Set_Column_Values('RESOURCE_SEQ', 'NUMBER', 'Y');      
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** Equipment_Object_Param_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Equipment_Structure_Cost_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_12');
PROMPT Adding SOURCE_REF1..4 TO EQUIPMENT_STRUCTURE_COST_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4', 'VARCHAR2(50)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

BEGIN
   IF Database_SYS.Column_Exist('EQUIPMENT_STRUCTURE_COST_TAB', 'ORDER_NO') THEN
      EXECUTE IMMEDIATE 'UPDATE EQUIPMENT_STRUCTURE_COST_TAB SET SOURCE_REF1 = ORDER_NO     WHERE SOURCE_REF1 IS NULL AND ORDER_NO IS NOT NULL';
   END IF;
   IF Database_SYS.Column_Exist('EQUIPMENT_STRUCTURE_COST_TAB', 'LINE_NO') THEN
      EXECUTE IMMEDIATE 'UPDATE EQUIPMENT_STRUCTURE_COST_TAB SET SOURCE_REF2 = LINE_NO      WHERE SOURCE_REF2 IS NULL AND LINE_NO IS NOT NULL';
   END IF;
   IF Database_SYS.Column_Exist('EQUIPMENT_STRUCTURE_COST_TAB', 'REL_NO') THEN
      EXECUTE IMMEDIATE 'UPDATE EQUIPMENT_STRUCTURE_COST_TAB SET SOURCE_REF3 = REL_NO       WHERE SOURCE_REF3 IS NULL AND REL_NO IS NOT NULL';
   END IF;
   IF Database_SYS.Column_Exist('EQUIPMENT_STRUCTURE_COST_TAB', 'LINE_ITEM_NO') THEN
      EXECUTE IMMEDIATE 'UPDATE EQUIPMENT_STRUCTURE_COST_TAB SET SOURCE_REF4 = LINE_ITEM_NO WHERE SOURCE_REF4 IS NULL AND ORDER_NO IS NOT NULL';
   END IF;
   COMMIT;
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_13');
PROMPT Create new index EQUIPMENT_STRUCTURE_COST_IX3
DECLARE
   columns_      Database_SYS.ColumnTabType;
   table_name_   VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_TAB';
   index_name_   VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_IX3';
BEGIN
      -- Create indexe for EQUIPMENT_STRUCTURE_COST_TAB.
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_ , 'SOURCE_REF1');
      Database_SYS.Set_Table_Column(columns_ , 'SOURCE_REF2');
      Database_SYS.Create_Index ( table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/
-- ***** Equipment_Structure_Cost_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Equipment_Obj_Type_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_14');
PROMPT Add column ROWSTATE to table EQUIPMENT_OBJ_TYPE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_TYPE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);   
   Database_SYS.Reset_Column_Table(columns_);     
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_15');
PROMPT Set default value for new column ROWSTATE in table EQUIPMENT_OBJ_TYPE_TAB
DECLARE
BEGIN
   UPDATE   equipment_obj_type_tab
      SET   rowstate = 'Active'
      WHERE rowstate IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_16');
PROMPT Set new column ROWSTATE to mandatory in table EQUIPMENT_OBJ_TYPE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_TYPE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

-- ***** Equipment_Obj_Type_Tab End *****

---------------------------------------------------------------------------------------------
-- ***** Equipment_Obj_Conn_Type_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_17');
PROMPT Add column ROWSTATE to table EQUIPMENT_OBJ_CONN_TYPE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_CONN_TYPE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);   
   Database_SYS.Reset_Column_Table(columns_);     
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_18');
PROMPT Set default value for new column ROWSTATE in table EQUIPMENT_OBJ_CONN_TYPE_TAB
DECLARE
BEGIN
   UPDATE   equipment_obj_conn_type_tab
      SET   rowstate = 'Active'
      WHERE rowstate IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_19');
PROMPT Set new column ROWSTATE to mandatory in table EQUIPMENT_OBJ_CONN_TYPE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_CONN_TYPE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

-- ***** Equipment_Obj_Conn_Type_Tab End *****

---------------------------------------------------------------------------------------------
-- ***** Equipment_Obj_Category_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_20');
PROMPT Add column ROWSTATE to table EQUIPMENT_OBJ_CATEGORY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_CATEGORY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);   
   Database_SYS.Reset_Column_Table(columns_);     
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_21');
PROMPT Set default value for new column ROWSTATE in table EQUIPMENT_OBJ_CATEGORY_TAB
DECLARE
BEGIN
   UPDATE   equipment_obj_category_tab
      SET   rowstate = 'Active'
      WHERE rowstate IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_22');
PROMPT Set new column ROWSTATE to mandatory in table EQUIPMENT_OBJ_CATEGORY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_CATEGORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

-- ***** Equipment_Obj_Category_Tab End *****
---------------------------------------------------------------------------------------------

-- ***** Equipment_Obj_Group_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_23');
PROMPT Add column ROWSTATE to table EQUIPMENT_OBJ_GROUP_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);   
   Database_SYS.Reset_Column_Table(columns_);     
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_24');
PROMPT Set default value for new column ROWSTATE in table EQUIPMENT_OBJ_GROUP_TAB
DECLARE
BEGIN
   UPDATE   equipment_obj_group_tab
      SET   rowstate = 'Active'
      WHERE rowstate IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_25');
PROMPT Set new column ROWSTATE to mandatory in table EQUIPMENT_OBJ_GROUP_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

-- ***** Equipment_Obj_Group_Tab End *****
---------------------------------------------------------------------------------------------

-- ***** Equipment_Object_Level_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_26');
PROMPT Add column ROWSTATE to table EQUIPMENT_OBJECT_LEVEL_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_LEVEL_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);   
   Database_SYS.Reset_Column_Table(columns_);     
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_27');
PROMPT Set default value for new column ROWSTATE in table EQUIPMENT_OBJECT_LEVEL_TAB
DECLARE
BEGIN
   UPDATE   equipment_object_level_tab
      SET   rowstate = 'Active'
      WHERE rowstate IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_28');
PROMPT Set new column ROWSTATE to mandatory in table EQUIPMENT_OBJECT_LEVEL_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_LEVEL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_29');
PROMPT Set default value for new OBJECT LEVEL TO be used IN project deliverables light transfer
DECLARE
BEGIN
   Insert into EQUIPMENT_OBJECT_LEVEL_TAB (obj_level, rowstate, rowversion, level_seq, individual_aware, create_pm, create_wo) values ('PRJDEL','Active', 1, 97, '2','TRUE','TRUE');
END;
/
-- ***** Equipment_Object_Level_Tab End *****
--  ---------------------------------------------------------------------------------------------

-- ***** Equipment_Criticality_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_30');
PROMPT Add column ROWSTATE to table EQUIPMENT_CRITICALITY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_CRITICALITY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);   
   Database_SYS.Reset_Column_Table(columns_);     
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_31');
PROMPT Set default value for new column ROWSTATE in table EQUIPMENT_CRITICALITY_TAB
DECLARE
BEGIN
   UPDATE   equipment_criticality_tab
      SET   rowstate = 'Active'
      WHERE rowstate IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_32');
PROMPT Set new column ROWSTATE to mandatory in table EQUIPMENT_CRITICALITY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_CRITICALITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

-- ***** Equipment_Criticality_Tab End *****

--  ---------------------------------------------------------------------------------------------

-- ***** Type_Designation_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_33');
PROMPT Add column ROWSTATE to table TYPE_DESIGNATION_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'TYPE_DESIGNATION_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);   
   Database_SYS.Reset_Column_Table(columns_);     
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_34');
PROMPT Set default value for new column ROWSTATE in table TYPE_DESIGNATION_TAB
DECLARE
BEGIN
   UPDATE   type_designation_tab
      SET   rowstate = 'Active'
      WHERE rowstate IS NULL;
   COMMIT;
END;
/


EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_35');
PROMPT Set new column ROWSTATE to mandatory in table TYPE_DESIGNATION_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'TYPE_DESIGNATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

-- ***** Type_Designation_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Equipment_Tw_Settings_Tab Start *****

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_36');
PROMPT Added GroupingCriteria, LocationID and MchType to EQUIPMENT_TW_SETTINGS_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_TW_SETTINGS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'GROUPING_CRITERIA', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MCH_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DISP_WO_TASK_NODE', 'NUMBER(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DISP_PM_PLAN_NODE', 'NUMBER(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DISP_SC_NODE', 'NUMBER(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DISP_CONN_OBJS_NODE', 'NUMBER(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HIDE_EMPTY_GRUP', 'NUMBER(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HIDE_OBJS_WITHOUT_GRUP', 'NUMBER(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CRITICALITY', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_CLASS', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'GROUP_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATEGORY_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUFACTURER_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);	
END;
/

PROMPT Update GROUPING_CRITERIA column TO NOT NULL in EQUIPMENT_TW_SETTINGS_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'EQUIPMENT_TW_SETTINGS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   
   UPDATE EQUIPMENT_TW_SETTINGS_TAB
      SET GROUPING_CRITERIA = 'DEFAULT'
      WHERE GROUPING_CRITERIA IS NULL;
   
   UPDATE EQUIPMENT_TW_SETTINGS_TAB
      SET GROUPING_CRITERIA = 'SITE'
      WHERE GROUPING_CRITERIA = 'DEFAULT'
      AND SITE IS NOT NULL;
   
   UPDATE EQUIPMENT_TW_SETTINGS_TAB
      SET DISP_WO_TASK_NODE     = 0,
          DISP_PM_PLAN_NODE     = 0,
          DISP_SC_NODE          = 0,
          DISP_CONN_OBJS_NODE   = 0,
          HIDE_EMPTY_GRUP        = 0,
          HIDE_OBJS_WITHOUT_GRUP = 0
    WHERE DISP_WO_TASK_NODE IS NULL
      AND DISP_PM_PLAN_NODE IS NULL
      AND DISP_SC_NODE IS NULL
      AND DISP_CONN_OBJS_NODE IS NULL
      AND HIDE_EMPTY_GRUP IS NULL
      AND HIDE_OBJS_WITHOUT_GRUP IS NULL;
   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_,  'GROUPING_CRITERIA', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DISP_WO_TASK_NODE', 'NUMBER(1)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DISP_PM_PLAN_NODE', 'NUMBER(1)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DISP_SC_NODE', 'NUMBER(1)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DISP_CONN_OBJS_NODE', 'NUMBER(1)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HIDE_EMPTY_GRUP', 'NUMBER(1)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HIDE_OBJS_WITHOUT_GRUP', 'NUMBER(1)', 'N');   
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   COMMIT;
END;
/

-- ***** Equipment_Tw_Settings_Tab End *****

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_37');
PROMPT Rename obsolete tables
BEGIN
   IF (Database_Sys.Table_Exist('EQUIPMENT_OBJECT_ADDRESS_TAB')) THEN
      Database_SYS.Rename_Table('EQUIPMENT_OBJECT_ADDRESS_TAB', 'EQUIPMENT_OBJECT_ADDRESS_800');    
   END IF;
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_38');
PROMPT Remove Obsolete Packages
BEGIN   
   Database_SYS.Remove_Package('EQUIPMENT_OBJECT_ADDRESS_API', TRUE);
END;   
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_39');
PROMPT Drop obsolete views 
BEGIN
   IF Database_SYS.View_Exist('EQUIPMENT_FUNCTIONAL_UNDEF') THEN
      Database_SYS.Remove_View('EQUIPMENT_FUNCTIONAL_UNDEF', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_PARTY2') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_PARTY2', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDRESS_UIV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDRESS_UIV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('MAINTENANCE_OBJECT_ADDRESS_LOV') THEN
      Database_SYS.Remove_View('MAINTENANCE_OBJECT_ADDRESS_LOV', TRUE);      
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDR1_LOV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDR1_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDR2_LOV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDR2_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDR3_LOV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDR3_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDR4_LOV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDR4_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDR5_LOV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDR5_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDR6_LOV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDR6_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDR7_LOV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDR7_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('MAINTENANCE_OBJECT_ADDR_LOV1') THEN
      Database_SYS.Remove_View('MAINTENANCE_OBJECT_ADDR_LOV1', TRUE);
   END IF; 
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_ADDRESS') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_ADDRESS', TRUE);
   END IF;   
   IF Database_SYS.View_Exist('CUSTOMER_OBJECT_ADDR_LOV2') THEN
      Database_SYS.Remove_View('CUSTOMER_OBJECT_ADDR_LOV2',TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_SPARE_SDV') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_SPARE_SDV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_PARTY6') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_PARTY6', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_OBJECT_PARTY5') THEN
      Database_SYS.Remove_View('EQUIPMENT_OBJECT_PARTY5', TRUE);
   END IF;
   IF Database_SYS.View_Exist('CUST_OBJECT_ADDRESS_CONTRACT') THEN
      Database_SYS.Remove_View('CUST_OBJECT_ADDRESS_CONTRACT', TRUE);
   END IF;
   IF Database_SYS.View_Exist('CUSTOMER_OBJECT_ADDRESS') THEN
      Database_SYS.Remove_View('CUSTOMER_OBJECT_ADDRESS', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIPMENT_STRUCTURE_COST_SUM') THEN
      Database_SYS.Remove_View('EQUIPMENT_STRUCTURE_COST_SUM', TRUE);
   END IF;
   IF Database_SYS.View_Exist('EQUIP_CRITICAL_CRITERIA_VALUE') THEN
      Database_SYS.Remove_View('EQUIP_CRITICAL_CRITERIA_VALUE', TRUE);
   END IF;
   IF Database_SYS.View_Exist('SITE_LOV') THEN
      Database_SYS.Remove_View('SITE_LOV', TRUE);
   END IF;
   IF Database_SYS.View_Exist('UNKNOWN_LOV') THEN
      Database_SYS.Remove_View('UNKNOWN_LOV', TRUE);
   END IF;
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_40');
PROMPT RENAME INDEXES AND constraints
BEGIN 
   Database_SYS.Rename_Constraint('EQUIPMENT_CRITICALITY_TAB', 'XPKEQUIPMENT_CRITICALITY_TAB', 'EQUIPMENT_CRITICALITY_PK', TRUE);
END;
/

---------------------------------------------------------------------------------------------

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Timestamp_41');
PROMPT Upgrade statements in file 800.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','800.upg','Done');

