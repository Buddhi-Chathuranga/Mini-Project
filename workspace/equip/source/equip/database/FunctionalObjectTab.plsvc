-----------------------------------------------------------------------------
--
--  Fragment:     FunctionalObjectTab
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  240619  SHEPLK  Created, To connect this to EON
--  210105  DEEKLK  AM2020R1-7134, moved Get_Mch_Name___() to fragment MoveFunctionalObjectDialog.
--  220111  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID 
--                  and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Default___ (
   rec_ IN OUT Equipment_Functional_Rec )
IS
   object_no_           VARCHAR2(20);
   object_view_name_    VARCHAR2(30);
   hide_object_         VARCHAR2(20);
   cc_part_name_        VARCHAR2(20);
   cc_view_name_        VARCHAR2(30);
   hide_cost_center_    VARCHAR2(10);
   company_             VARCHAR2(20);
BEGIN
   super(rec_);
   Equipment_Object_API.Get_Code_Part_For_Objct_Values(rec_.contract, object_no_, object_view_name_, hide_object_);
   Equipment_Object_API.Get_Code_Part_Cost_Center_Val(rec_.contract, cc_part_name_, cc_view_name_, hide_cost_center_);
   company_ := Site_API.Get_Company(rec_.contract);
   rec_.Fetch_Cost_Center := cc_part_name_;
   rec_.cost_center_code_part := Accounting_Code_Parts_API.Get_Code_Part_For_Logical(company_, 'CostCenter');
   rec_.Hide_Cost_Center := hide_cost_center_;
   rec_.Fetch_Object_No := object_no_;
   rec_.object_code_part := Accounting_Code_Parts_API.Get_Code_Part_For_Logical(company_, 'Object');
   rec_.Hide_Object_No := hide_object_;
   rec_.Objts_Cst_Center_View := cc_view_name_;
   rec_.Objts_Object_No_View := object_view_name_; 
END CRUD_Default___;

PROCEDURE Set_In_Operation___ (
key_ IN Equipment_Functional_Key )   
IS
BEGIN
   Equipment_Functional_API.Set_In_Operation(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
END Set_In_Operation___;

PROCEDURE Set_Structure_In_Operation___ (
key_ IN Equipment_Functional_Key )   
IS
BEGIN
   Equipment_Functional_API.Set_Structure_In_Operation(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
END Set_Structure_In_Operation___;

PROCEDURE Set_Out_Of_Operation___ (
key_ IN Equipment_Functional_Key )   
IS
BEGIN
   Equipment_Functional_API.Set_Out_Of_Operation(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
END Set_Out_Of_Operation___;

PROCEDURE Set_Structure_Out_Of_Operation___ (
key_ IN Equipment_Functional_Key)   
IS
BEGIN
   Equipment_Functional_API.Set_Structure_Out_Of_Operation(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
END Set_Structure_Out_Of_Operation___;

PROCEDURE Set_Scrapped___ (
key_ IN Equipment_Functional_Key )   
IS
BEGIN
   Equipment_Functional_API.Set_Scrapped(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
END Set_Scrapped___;

PROCEDURE Set_Structure_Scrapped___ (
key_ IN Equipment_Functional_Key )   
IS
BEGIN
   Equipment_Functional_API.Set_Structure_Scrapped(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
END Set_Structure_Scrapped___;

FUNCTION Get_Exist_Warning___ (
   contract_ IN VARCHAR2,
   mch_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Equipment_Object_API.Exist_Warning(contract_, mch_code_);
END Get_Exist_Warning___;

FUNCTION Get_Exist_Warning___ (
	selection_ IN VARCHAR2) RETURN VARCHAR2
IS
   contract_      VARCHAR2(200);
   mch_code_      VARCHAR2(200);
   warning_       VARCHAR2(6);
   rec_list_       Utility_SYS.STRING_TABLE;
   count_ NUMBER;
BEGIN
   Utility_SYS.Tokenize(selection_,';',rec_list_, count_);
   FOR i_ IN rec_list_.FIRST..rec_list_.LAST LOOP
      contract_ := Client_SYS.Get_Key_Reference_Value(rec_list_(i_), 'CONTRACT');
      mch_code_ := Client_SYS.Get_Key_Reference_Value(rec_list_(i_), 'MCH_CODE');
      warning_ := Equipment_Object_API.Exist_Warning(contract_, mch_code_);
      IF (warning_ = 'TRUE') THEN
         --EXIT;
         RETURN mch_code_;
      END IF;
   END LOOP;
   RETURN '';
	
END Get_Exist_Warning___;

FUNCTION Has_Mch_Type_Tech_Spec___(
   mch_type_ IN VARCHAR2 ) RETURN VARCHAR2
IS   
BEGIN
   RETURN EQUIPMENT_OBJ_TYPE_Api.Has_Technical_Spec_No(mch_type_);
END Has_Mch_Type_Tech_Spec___;

FUNCTION Get_Company_Val___(
   contract_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Site_API.Get_Company(contract_);
END Get_Company_Val___;

FUNCTION Exist_Reference___ (
	mch_code_ IN VARCHAR2,
	contract_ IN VARCHAR2) RETURN Requirement_Struct_Rec
IS
   ret_           Requirement_Struct_Rec;
   key_value_     VARCHAR2(32000);
   key_value_new_ VARCHAR2(32000);
BEGIN
	key_value_ := Client_SYS.Get_Key_Reference ('EquipmentObject', 'EQUIPMENT_OBJECT_SEQ', Equipment_Object_API.Get_Equipment_Object_Seq(contract_, mch_code_));
   ret_.req_exist :=  Technical_Object_Reference_API.Exist_Reference_('EquipmentObject', key_value_ );
   ret_.prev_mch_type :=  Equipment_Object_API.Get_Mch_Type(contract_, mch_code_);
   key_value_new_ := CLIENT_SYS.Get_Key_Reference ('EquipmentObjType', 'MCH_TYPE', mch_code_);
   ret_.req_exist_new :=  Technical_Object_Reference_API.Exist_Reference_('EquipmentObjType', key_value_new_ );
   
   RETURN ret_;
END Exist_Reference___;

PROCEDURE Spread_Safe_Access_Code___ (
   key_ IN Equipment_Functional_Key)
IS
   info_msg_   VARCHAR2(32000);
BEGIN
   Equipment_Object_API.Spread_Safe_Access_code(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
   Equipment_Object_API.Get_Resched_Req_Warning(info_msg_, Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq), 'SAFEACCESS');  
END Spread_Safe_Access_Code___;

PROCEDURE Set_Location_Structure___ (
   key_         IN Equipment_Functional_Key,
   location_id_ IN VARCHAR2)
IS
BEGIN
	Equipment_Object_API.Set_Location_Structure(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq), location_id_);
END Set_Location_Structure___;

PROCEDURE Reset_Location_Structure___ (
   key_ IN Equipment_Functional_Key)
IS
BEGIN
   Equipment_Object_API.Reset_Location_Structure(Equipment_Object_API.Get_Contract(key_.equipment_object_seq), Equipment_Object_API.Get_Mch_Code(key_.equipment_object_seq));
END Reset_Location_Structure___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Equipment_Functional_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
BEGIN
   Equipment_Object_Util_API.Add_Parent_Seq_To_Attr(attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT NOCOPY VARCHAR2,
   key_    IN OUT NOCOPY Equipment_Functional_Key,
   attr_   IN OUT NOCOPY VARCHAR2,
   info_      OUT VARCHAR2,
   action_ IN     VARCHAR2 )
IS
BEGIN
   Equipment_Object_Util_API.Add_Parent_Seq_To_Attr(attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;