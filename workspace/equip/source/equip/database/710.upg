-------------------------------------------------------------------------------
--
--  Filename      : 710.upg
--
--  Module        : EQUIP
--
--  Purpose       : Upgrade Equipment module database objects from version 7.0.0 to 7.1.0 
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  180801  KrRaLK  Bug 142911, Updated measured values in Equipment_Object_Meas_Tab.
--  170816  HARULK  STRSA-28719, Fix upgrade error. Added Timestamp_74
--  170308  KANILK  STRSA-20734, Merged Bug 134646, Added '/' to end of block Timestamp_6.
--  150603  HARULK  Bug 122900, Modified block Timestamp_57, Timestamp_55
--  150508  VISRLK  Bug 122462, Modified Block Timestamp_79
--  150114  SHAFLK  PRSA-6411, Added new index to EQUIPMENT_OBJECT_MEAS_TAB and EQUIPMENT_OBJECT_TEST_PNT_TAB.
--  150114  KrRaLK  PRSA-5780, Added column blocked_for_use to EQUIPMENT_OBJECT_PARAM_TAB
--  141020  MADGLK  PRSA-4459, Added new columns CONTACT PHONE_NO E_MAIL to EQUIPMENT_OBJECT_ADDRESS_TAB
--  141014  NIFRSE  PRSA-4589, Add column POSITION_TYPE to table EQUIPMENT_OBJ_TYPE_TAB.
--  140915  NIFRSE  PRSA-4097, Move SFM from EQUIP to MSCOM.
--  140904  SAFALK  Merged changes from 140904_PRSA-3665_EQUIP.cdb.
--  140904  MAWILK  PRSA-2712, Orbit Merge. Added LOCATION_ID TO EQUIPMENT_OBJECT_ADDRESS_TAB.
--  140818  NILASE  Renamed nonstandard indexes in table EQUIPMENT_CRITICALITY_TAB.
--  140428  HASTSE  Making the column rowversion as NOT NULL in tables EQUIPMENT_OBJECT_MEAS_TAB and EQUIPMENT_OBJECT_TEST_PNT_TAB
--  140314  japelk  Merge of bug 115294 (Timestamp_44,Timestamp_45).
--  131206  CLHASE  PBSA-1822, Align EQUIPMENT_SPARE_STRUCTURE_TAB columns with model. 
--  131206  MAWILK  PBSA-1817, Set ROWVERSION to NOT NULL in EQUIPMENT_OBJECT_SPARE_TAB..
--  131202  CLHASE  PBSA-1826, Set WARRANTY_SOURCE to VARCHAR2(20) and VALID_FOR_CUSTOMER to NOT NULL in OBJECT_SUPPLIER_WARRANTY_TAB.
--  131202  CLHASE  PBSA-1825, Set WARRANTY_SOURCE to VARCHAR2(20) in OBJECT_CUST_WARRANTY_TAB.
--  131126  NEKOLK  PBSA-1820, Set ROWVERSION to NOT NULL TYPE_DESIGNATION_TAB. 
--  131126  NEKOLK  PBSA-1820, Set ROWVERSION to NOT NULL in EQUIPMENT_OBJ_GROUP_TAB
--  131126  NEKOLK  PBSA-1820, Set ROWVERSION to NOT NULL in EQUIPMENT_OBJ_TYPE_TAB. 
--  131129  CLHASE  PBSA-1813, Set ROWVERSION to NOT NULL and set INDIVIDUAL_AWARE to VARCHAR2(20) in EQUIPMENT_OBJECT_LEVEL_TAB.
--  131126  NEKOLK  PBSA-1808, Set ROWVERSION to NOT NULL in EQUIPMENT_OBJ_CONN_TYPE_TAB.
--  131126  MAWILK  PBSA-1805, Set ROWVERSION to NOT NULL in EQUIPMENT_CRITICALITY_TAB.
--  130517  MITKLK  All EQUIP db changes related to UEE delivery.
--  130314  KrRaLK  Bug 108918, Modified to fetch relevant data from Equipment_Object_Tab and Part_Serial_catalog_Tab instead of Equipment_All_Object. 
--  130920  MAWILK  BLACK-792, Created.
--  120925  KrRaLK  Bug 105633, Added column ALLOW_WO_MAT_SITE to Equipment_Object_Spare_Tab. To implement 
--                  the functionality, it should be possible to enter material lines form spare parts   
--                  in user-allowed sites when they belongs to site other than material order site.
--  121212  SHAFLK  Bug 107335, Added new column ORDER_CONTRACT to the EQUIPMENT_STRUCTURE_COST_TAB. 
--  121126  SHAFLK  Bug 106838, Added new columns to the EQUIPMENT_OBJECT_TAB in order to support other structures and modified data for serial objects. 
--  120807  KrRaLK  Bug 104660, Updated Equipment_Structure_Cost_Tab. Please note that this is the data relevant to the  issue raised in 
--                  the above bug/task(G1167950-100). Update cost/cost from structure in the Equipment Structure for time reporting when
--                  AUTO_AUTH_SIGN set to TRUE.
-------------------------------------------------------------------------------

SET SERVEROUTPUT ON

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_1');
PROMPT Rename nonstandard indexes in EQUIPMENT_CRITICALITY_TAB
BEGIN
   Database_SYS.Rename_Index('XPKEQUIPMENT_CRITICALITY_TAB','EQUIPMENT_CRITICALITY_PK',TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_2');
PROMPT Rename search domain indexes in EQUIPMENT_OBJECT_TAB
BEGIN
   Database_SYS.Rename_Index('equipment_object_ctix','equipment_object_sx1',TRUE);
END;
/

-----------------------------------------------------------------------------
------------------ CREATE NEW TABLES, SEQUENCES AND INDEXES -----------------
-----------------------------------------------------------------------------
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_3');
PROMPT Create table EQUIPMENT_OBJECT_JOURNAL_TAB 

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NOTE', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_BY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'JOURNAL_TEXT', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'JOURNAL_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NEW_VALUE', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OLD_VALUE', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MODIFY_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MODIFIED_BY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EVENT_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_4');
PROMPT Create indexes EQUIPMENT_OBJECT_JOURNAL_PK and EQUIPMENT_OBJECT_JOURNAL_RK

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_TAB';
   index_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_PK';
   rkidx_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_JOURNAL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'MCH_CODE');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


-----------------------------------------------------------------------------
----------------------- MODIFY TABLES AND INDEXES ---------------------------
----------------------------------------------------------------------------- 
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_5');
PROMPT Adding new COLUMNS INTO EQUIPMENT_OBJECT_TAB

DECLARE
   columns_          Database_SYS.ColumnTabType;
   table_name_       VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_Sys.Set_Table_Column(columns_,'LOCATION_MCH_CODE', 'VARCHAR2(100)', 'Y');
   Database_Sys.Set_Table_Column(columns_,'LOCATION_CONTRACT', 'VARCHAR2(5)',   'Y');
   Database_Sys.Set_Table_Column(columns_,'FROM_MCH_CODE',     'VARCHAR2(100)', 'Y');
   Database_Sys.Set_Table_Column(columns_,'FROM_CONTRACT',     'VARCHAR2(5)',   'Y');
   Database_Sys.Set_Table_Column(columns_,'TO_MCH_CODE',       'VARCHAR2(100)', 'Y');
   Database_Sys.Set_Table_Column(columns_,'TO_CONTRACT',       'VARCHAR2(5)',   'Y');
   Database_Sys.Set_Table_Column(columns_,'PROCESS_MCH_CODE',  'VARCHAR2(100)', 'Y');
   Database_Sys.Set_Table_Column(columns_,'PROCESS_CONTRACT',  'VARCHAR2(5)',   'Y');
   Database_Sys.Set_Table_Column(columns_,'PIPE_MCH_CODE',     'VARCHAR2(100)', 'Y');
   Database_Sys.Set_Table_Column(columns_,'PIPE_CONTRACT',     'VARCHAR2(5)',   'Y');
   Database_Sys.Set_Table_Column(columns_,'CIRCUIT_MCH_CODE',  'VARCHAR2(100)', 'Y');
   Database_Sys.Set_Table_Column(columns_,'CIRCUIT_CONTRACT',  'VARCHAR2(5)',   'Y');
   Database_Sys.Set_Table_Column(columns_,'ITEM_CLASS_ID',     'VARCHAR2(10)',  'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_6');
PROMPT Modifying structure data for serial objects
	
BEGIN
   UPDATE equipment_object_tab
      SET location_mch_code = sup_mch_code,
          from_mch_code = sup_mch_code,
          to_mch_code = sup_mch_code,
          process_mch_code = sup_mch_code,
          pipe_mch_code = sup_mch_code,
          circuit_mch_code = sup_mch_code,
          location_contract = sup_contract,
          from_contract = sup_contract,
          to_contract = sup_contract,
          process_contract = sup_contract,
          pipe_contract = sup_contract,
          circuit_contract = sup_contract
    WHERE obj_level IS NULL
      AND sup_mch_code IS NOT NULL;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_7');
PROMPT Adding new COLUMN INTO EQUIPMENT_STRUCTURE_COST_TAB

DECLARE
   columns_          Database_SYS.ColumnTabType;
   table_name_       VARCHAR2(30) := 'EQUIPMENT_STRUCTURE_COST_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_Sys.Set_Table_Column(columns_,'ORDER_CONTRACT', 'VARCHAR2(5)',     'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_8');
PROMPT Add ALLOW_WO_MAT_SITE to Equipment_Object_Spare_Tab
DECLARE
   columns_          Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'ALLOW_WO_MAT_SITE', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table ( 'Equipment_Object_Spare_Tab', columns_ );
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_9');
PROMPT Adding column ITEM_CLASS_ID to EQUIPMENT_OBJ_TYPE_TAB.
DECLARE
   column_           Database_SYS.ColRec;
   column_name_      VARCHAR2(30) := 'ITEM_CLASS_ID';
BEGIN
   column_ := Database_SYS.Set_Column_Values(column_name_, 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('EQUIPMENT_OBJ_TYPE_TAB', 'A', column_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_10');
PROMPT Adding new COLUMNS CAL_START_DATE AND METER_FLIP_VALUE to the EQUIPMENT_OBJECT_PARAM_TAB

DECLARE
   columns_          Database_SYS.ColumnTabType;
   table_name_       VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CAL_START_DATE', 'DATE', '');
   Database_SYS.Set_Table_Column(columns_, 'METER_FLIP_VALUE', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE );
END;
/
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_11');
PROMPT Adding,modifying columns TO EQUIPMENT_OBJECT_MEAS_TAB
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'MEASUREMENT_TYPE',           'VARCHAR2(30)',   'Y' );
   Database_SYS.Set_Table_Column ( columns_, 'MEASUREMENT_NOTE',           'VARCHAR2(2000)', 'Y' );
   Database_SYS.Set_Table_Column ( columns_, 'RECORDED_VALUE',             'NUMBER',         'Y' );
   Database_SYS.Set_Table_Column ( columns_, 'METER_ID',                   'VARCHAR2(30)',   'Y' );
   Database_SYS.Set_Table_Column ( columns_, 'REMARK',                     'VARCHAR2(200)',  'Y' );
   Database_SYS.Set_Table_Column ( columns_, 'MEASURED_VALUE',             'NUMBER',         'Y' );
   Database_SYS.Alter_Table ( table_name_, columns_, TRUE );   
END;
/
 
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_12');
PROMPT Update existing records of coloumn measurement_type     
DECLARE
BEGIN
   UPDATE EQUIPMENT_OBJECT_MEAS_TAB
      SET measurement_type = 'RecordedReading',
          recorded_value = measured_value
   WHERE measurement_type IS NULL;
END;
/
COMMIT;

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_13');
PROMPT Marking the column measurement_type as NOT NULL  
DECLARE
   columns_        Database_SYS.ColumnTabType;
   table_name_     VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_,'MEASUREMENT_TYPE','VARCHAR2(30)','N');
   Database_SYS.Alter_Table (table_name_, columns_);   
END;
/
COMMIT;

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_14');
PROMPT Set default values for ROWVERSION in EQUIPMENT_CRITICALITY_TAB
BEGIN
   UPDATE EQUIPMENT_CRITICALITY_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_15');
PROMPT MODIFY ROWVERSION IN EQUIPMENT_CRITICALITY_TAB

DECLARE
   columns_             Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table('EQUIPMENT_CRITICALITY_TAB', columns_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_16');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJ_CATEGORY_TAB
BEGIN
   UPDATE EQUIPMENT_OBJ_CATEGORY_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_17');
PROMPT MODIFY ROWVERSION IN EQUIPMENT_OBJ_CATEGORY_TAB

DECLARE
   columns_             Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table('EQUIPMENT_OBJ_CATEGORY_TAB', columns_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_18');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJ_CONN_TYPE_TAB
BEGIN
   UPDATE EQUIPMENT_OBJ_CONN_TYPE_tab
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_19');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJ_CONN_TYPE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_CONN_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONNECTION_TYPE', 'VARCHAR2(20)', 'N'); 
   Database_SYS.Set_Table_Column(columns_, 'DESCR', 'VARCHAR2(40)', 'N');      
   Database_SYS.Alter_Table(table_name_, columns_);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_20');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJECT_CONN_TAB
BEGIN
   UPDATE EQUIPMENT_OBJECT_CONN_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_21');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJECT_CONN_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_CONN_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONNECTION_TYPE', 'VARCHAR2(20)', 'N'); 
   Database_SYS.Alter_Table(table_name_, columns_);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_22');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJECT_TAB
BEGIN
   UPDATE EQUIPMENT_OBJECT_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_23');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJECT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAIN_POS', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_24');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJECT_LEVEL_TAB
BEGIN
   UPDATE EQUIPMENT_OBJECT_LEVEL_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_25');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJECT_LEVEL_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_LEVEL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_26');
PROMPT Set INDIVIDUAL_AWARE to VARCHAR2(20) in EQUIPMENT_OBJECT_LEVEL_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_LEVEL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INDIVIDUAL_AWARE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INDIVIDUAL_AWARE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_27');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJ_TYPE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_28');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJ_TYPE_TAB
BEGIN
   UPDATE EQUIPMENT_OBJ_TYPE_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_29');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJ_GROUP_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJ_GROUP_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_30');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJ_GROUP_TAB
BEGIN
   UPDATE EQUIPMENT_OBJ_GROUP_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_31');
PROMPT Set default values for ROWVERSION in TYPE_DESIGNATION_TAB
BEGIN
   UPDATE TYPE_DESIGNATION_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_32');
PROMPT Set ROWVERSION to NOT NULL in TYPE_DESIGNATION_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TYPE_DESIGNATION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_33');
PROMPT Set WARRANTY_SOURCE to VARCHAR2(20) in OBJECT_CUST_WARRANTY_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'OBJECT_CUST_WARRANTY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'WARRANTY_SOURCE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'WARRANTY_SOURCE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_34');
PROMPT Set WARRANTY_SOURCE to VARCHAR2(20) in OBJECT_SUPPLIER_WARRANTY_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'OBJECT_SUPPLIER_WARRANTY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'WARRANTY_SOURCE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'WARRANTY_SOURCE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_35');
PROMPT Set default values for VALID_FOR_CUSTOMER in OBJECT_SUPPLIER_WARRANTY_TAB
BEGIN
   UPDATE OBJECT_SUPPLIER_WARRANTY_TAB
      SET VALID_FOR_CUSTOMER = 'N'
      WHERE VALID_FOR_CUSTOMER IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_36');
PROMPT Set VALID_FOR_CUSTOMER to NOT NULL in OBJECT_SUPPLIER_WARRANTY_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'OBJECT_SUPPLIER_WARRANTY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'VALID_FOR_CUSTOMER', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_37');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJECT_PARAM_TAB
BEGIN
   UPDATE EQUIPMENT_OBJECT_PARAM_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_38');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJECT_PARAM_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_39');
PROMPT Set default values for ROWVERSION in EQUIPMENT_OBJECT_SPARE_TAB
BEGIN
   UPDATE EQUIPMENT_OBJECT_SPARE_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_40');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_OBJECT_SPARE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_SPARE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table(table_name_, columns_);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_41');
PROMPT Set default values for PART_OWNERSHIP in EQUIPMENT_SPARE_STRUCTURE_TAB
BEGIN
   UPDATE EQUIPMENT_SPARE_STRUCTURE_TAB
      SET PART_OWNERSHIP = 'COMPANY OWNED'
      WHERE PART_OWNERSHIP IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_42');
PROMPT Set PART_OWNERSHIP to NOT NULL in EQUIPMENT_SPARE_STRUCTURE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_SPARE_STRUCTURE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_OWNERSHIP', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_43');
PROMPT Set default values for ROWVERSION in EQUIPMENT_SPARE_STRUCTURE_TAB
BEGIN
   UPDATE EQUIPMENT_SPARE_STRUCTURE_TAB
      SET ROWVERSION = 1
      WHERE ROWVERSION IS NULL;
   COMMIT;    
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_44');
PROMPT Set ROWVERSION to NOT NULL in EQUIPMENT_SPARE_STRUCTURE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_SPARE_STRUCTURE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_45');
PROMPT Set DRAWING_NO to VARCHAR2(16) in EQUIPMENT_SPARE_STRUCTURE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_SPARE_STRUCTURE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DRAWING_NO', 'VARCHAR2(16)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   Database_SYS.Reset_Column_Table(columns_);   
END;
/

-----------------------------------------------------------------------------
---------------------------- MODIFY DATA ------------------------------------
-----------------------------------------------------------------------------
EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_46');
PROMPT Modifying structure data for serial objects
	
BEGIN
   UPDATE equipment_object_tab
   SET location_mch_code = sup_mch_code,
       from_mch_code = sup_mch_code,
       to_mch_code = sup_mch_code,
       process_mch_code = sup_mch_code,
       pipe_mch_code = sup_mch_code,
       circuit_mch_code = sup_mch_code,
       location_contract = sup_contract,
       from_contract = sup_contract,
       to_contract = sup_contract,
       process_contract = sup_contract,
       pipe_contract = sup_contract,
       circuit_contract = sup_contract
   WHERE obj_level IS NULL
   AND sup_mch_code IS NOT NULL;
   COMMIT;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_47');
PROMPT Updating COST IN Equipment_Structure_Cost_Tab

DECLARE
   stmt_ VARCHAR2(32000);
BEGIN
   IF (Database_SYS.Table_Exist ('Work_Order_Coding_Tab') AND Database_SYS.Table_Exist ('Equipment_Structure_Cost_Tab') AND 
       Database_SYS.Table_Exist ('Equipment_Object_Tab') AND Database_SYS.Table_Exist ('Part_Serial_catalog_Tab')) THEN
      stmt_ := 'DECLARE
                   current_mch_contract_ VARCHAR2(30);
                   current_mch_code_     VARCHAR2(300);
                   current_sup_contract_ VARCHAR2(30);
                   current_sup_mch_code_ VARCHAR2(300);
                   seq_no_               NUMBER;
              
                   CURSOR get_line IS
                   SELECT esc.seq_no   seq_no,
                   woc.amount   amount,
                   esc.contract contract,
                   esc.mch_code mch_code,
                   woc.wo_no    wo_no,
                   woc.row_no   row_no
                   FROM Work_Order_Coding_Tab woc, Equipment_Structure_Cost_Tab esc
                   WHERE woc.cost_type = ''P''
                   AND woc.accnt_type = ''C''
                   AND woc.book_status = ''A''
                   AND woc.wo_no = esc.order_no
                   AND woc.row_no = esc.line_no
                   AND woc.contract = esc.contract
                   AND woc.mch_code = esc.mch_code
                   AND woc.cre_date = esc.cre_date
                   AND woc.cost_type = esc.equipment_obj_cost_type
                   AND woc.amount != 0
                   AND esc.cost = 0
                   AND esc.cost_from_structure IS NULL;
                     
                   CURSOR get_parent_objects(contract_ VARCHAR2, mch_code_ VARCHAR2) IS
                   SELECT eo.contract contract, eo.mch_code mch_code, eo.sup_contract sup_contract, eo.sup_mch_code sup_mch_code
                   FROM Equipment_Object_Tab eo, Part_Serial_catalog_Tab psc
                   WHERE eo.part_no = psc.part_no(+)
                   AND eo.mch_serial_no = psc.serial_no(+)
                   AND nvl(psc.rowstate,''InFacility'') IN (''InFacility'', ''InRepairWorkshop'', ''Contained'',''InInventory'')
                   AND eo.contract = contract_
                   AND eo.mch_code = mch_code_;
              
                   CURSOR get_seqno_for_parent_objects(contract_ VARCHAR2,
                                                       mch_code_ VARCHAR2,
                                                       wo_no_    VARCHAR2,
                                                       row_no_   VARCHAR2) IS
                   SELECT seq_no
                   FROM Equipment_Structure_Cost_Tab
                   WHERE cost_from_structure = 0
                   AND cost IS NULL
                   AND contract = contract_
                   AND mch_code = mch_code_
                   AND order_no = wo_no_
                   AND line_no = row_no_;
                BEGIN
                   FOR rec_ IN get_line LOOP
                      EXIT WHEN get_line%NOTFOUND;
                         
                      UPDATE Equipment_Structure_Cost_Tab uesc
                      SET uesc.cost = rec_.amount
                      WHERE uesc.seq_no = rec_.seq_no;
                      current_mch_contract_ := rec_.contract;
                      current_mch_code_     := rec_.mch_code;
                      
                      LOOP
                         OPEN get_parent_objects(current_mch_contract_, current_mch_code_);
                         FETCH get_parent_objects
                         INTO current_mch_contract_, current_mch_code_, current_sup_contract_, current_sup_mch_code_;
                         EXIT WHEN get_parent_objects%NOTFOUND;
                         
                         OPEN get_seqno_for_parent_objects(current_sup_contract_, current_sup_mch_code_, rec_.wo_no, rec_.row_no);
                         FETCH get_seqno_for_parent_objects
                         INTO seq_no_;
                            
                         UPDATE Equipment_Structure_Cost_Tab usc
                         SET usc.cost_from_structure = rec_.amount
                         WHERE usc.seq_no = seq_no_;
                         current_mch_contract_ := current_sup_contract_;
                         current_mch_code_     := current_sup_mch_code_;
                         CLOSE get_parent_objects;
                         CLOSE get_seqno_for_parent_objects;
                      END LOOP;
                      CLOSE get_parent_objects;
                   END LOOP;
                END;'; 
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_48');
PROMPT Update existing records of coloumn ordered_value IN EQUIPMENT_OBJECT_MEAS_TAB
DECLARE 
   CURSOR get_reg_meas IS
     SELECT measured_value,values_seq
     FROM EQUIPMENT_OBJECT_MEAS_TAB
     WHERE measured_value IS NOT NULL;
BEGIN
   FOR obj_meas_rec_ IN get_reg_meas LOOP
     UPDATE EQUIPMENT_OBJECT_MEAS_TAB t
        SET  t.recorded_value = obj_meas_rec_.measured_value
     WHERE t.values_seq = obj_meas_rec_.values_seq;
   END LOOP;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_49');
PROMPT Create index to EQUIPMENT_OBJECT_IX6

DECLARE
   columns_      Database_SYS.ColumnTabType;
   index_name_    VARCHAR2(50) := 'EQUIPMENT_OBJECT_IX6';
BEGIN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
      Database_SYS.Set_Table_Column(columns_, 'MCH_CODE');   
      Database_SYS.Set_Table_Column(columns_, 'MCH_NAME');
      Database_SYS.Create_Index ('EQUIPMENT_OBJECT_TAB', index_name_, columns_, 'N', '&IFSAPP_INDEX',  NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_50');
PROMPT Create index to EQUIPMENT_OBJECT_IX7

DECLARE
   columns_       Database_SYS.ColumnTabType;
   index_name_    VARCHAR2(50) := 'EQUIPMENT_OBJECT_IX7';
BEGIN
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'MCH_NAME');
      Database_SYS.Create_Index ('EQUIPMENT_OBJECT_TAB', index_name_, columns_, 'N', '&IFSAPP_INDEX',  NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_51');
PROMPT Create index to EQUIPMENT_OBJECT_IX8

DECLARE
   columns_       Database_SYS.ColumnTabType;
   index_name_    VARCHAR2(50) := 'EQUIPMENT_OBJECT_IX8';
BEGIN
      Database_SYS.Reset_Column_Table(columns_);   
      Database_SYS.Set_Table_Column(columns_, 'OPERATIONAL_STATUS');
      Database_SYS.Create_Index ('EQUIPMENT_OBJECT_TAB', index_name_, columns_, 'N', '&IFSAPP_INDEX',  NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_52');
PROMPT Marking the column rowversion as NOT NULL  
DECLARE
   columns_        Database_SYS.ColumnTabType;
   table_name_     VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_,'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table (table_name_, columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_53');
PROMPT Marking the column rowversion as NOT NULL  
DECLARE
   columns_        Database_SYS.ColumnTabType;
   table_name_     VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_,'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Alter_Table (table_name_, columns_);   
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_54');
PROMPT Adding COLUMN lu_name TO EQUIPMENT_OBJECT_TEST_PNT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_55');
PROMPT UPDATE data IN equipment_object_test_pnt_tab
BEGIN 
   UPDATE equipment_object_test_pnt_tab t
   SET t.lu_name = 'EquipmentObject'
   WHERE t.lu_name IS NULL;  
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_56');
PROMPT Adding COLUMN lu_name TO Equipment_Object_Param_Tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'Equipment_Object_Param_Tab';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_57');
PROMPT UPDATE data IN Equipment_Object_Param_Tab
BEGIN 
   UPDATE Equipment_Object_Param_Tab t
   SET t.lu_name = 'EquipmentObject'
   WHERE t.lu_name IS NULL;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_58');
PROMPT making lu_name COLUMN NOT NULL 
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_59');
PROMPT making lu_name COLUMN NOT NULL
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'Equipment_Object_Param_Tab';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_60');
PROMPT Adding new COLUMNS TO EQUIPMENT_OBJECT_TEST_PNT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   IF (NOT Database_SYS.Column_Exist(table_name_, 'TEST_PNT_SEQ')) THEN
      Database_SYS.Set_Table_Column(columns_, 'TEST_PNT_SEQ', 'NUMBER', 'Y');
   END IF;
   Database_SYS.Set_Table_Column(columns_, 'TOOL_EQUIPMENT_SEQ', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_61');
PROMPT CREATE SEQUENCE TEST_PNT_SEQ
BEGIN
   Database_SYS.Create_Sequence('TEST_PNT_SEQ',
                                'MINVALUE 2 START WITH 2 INCREMENT BY 1');
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_62');
PROMPT UPDATE testpoint SEQUENCE 
DECLARE
   CURSOR get_rec IS
      SELECT * FROM equipment_object_test_pnt_tab ;
BEGIN 
   FOR rec_ IN get_rec LOOP 
      IF(rec_.test_pnt_seq IS NULL) THEN 
         UPDATE equipment_object_test_pnt_tab
         SET test_pnt_seq = TEST_PNT_SEQ.nextval
         WHERE mch_code = rec_.mch_code
         AND contract = rec_.contract
         AND test_point_id = rec_.test_point_id ;        
      END IF;      
   END LOOP;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_63');
PROMPT Changing PRIMARY keys IN EQUIPMENT_OBJECT_TEST_PNT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TEST_PNT_SEQ', 'NUMBER', 'N');   
   Database_SYS.Create_Constraint(table_name_, 'EQUIPMENT_OBJECT_TEST_PNT_PK',  columns_,  'P', '&IFSAPP_INDEX', replace_ => TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_64');
PROMPT Making Contract COLUMN nullable IN EQUIPMENT_OBJECT_TEST_PNT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_TEST_PNT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');   
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_65');
PROMPT Adding new COLUMNS TO EQUIPMENT_OBJECT_PARAM_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   IF (NOT Database_SYS.Column_Exist(table_name_, 'TEST_PNT_SEQ')) THEN
      Database_SYS.Set_Table_Column(columns_, 'TEST_PNT_SEQ', 'NUMBER', 'Y');
   END IF;
   Database_SYS.Set_Table_Column(columns_, 'TOOL_EQUIPMENT_SEQ', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_66');
PROMPT INSERT data TO Testpoint tab
DECLARE
   temp_                       NUMBER;
   CURSOR get_rec IS
      SELECT * FROM equipment_object_param_tab ;
   
   CURSOR get_testpoint_rec(contract_ IN VARCHAR2, mch_code_ IN VARCHAR2, test_point_id_ IN VARCHAR2) IS 
      SELECT 1 FROM equipment_object_test_pnt_tab
      WHERE contract = contract_
      AND   mch_code = mch_code_
      AND   test_point_id = test_point_id_;
BEGIN 
   FOR rec_ IN get_rec LOOP 
      IF(rec_.test_pnt_seq IS NULL AND rec_.test_point_id = '*') THEN 
         OPEN get_testpoint_rec(rec_.contract, rec_.mch_code, rec_.test_point_id);
         FETCH get_testpoint_rec INTO temp_;
         IF (NOT get_testpoint_rec%FOUND) THEN
            INSERT INTO equipment_object_test_pnt_tab (
               test_pnt_seq,
               contract,
               mch_code,               
               test_point_id,
               descr,
               location,
               lu_name,
               tool_equipment_seq,
               rowversion)
            VALUES(
               TEST_PNT_SEQ.nextval,
               rec_.contract,
               rec_.mch_code,               
               rec_.test_point_id,
               'Default Testpoint',
               '',
               'EquipmentObject',
               NULL,
               1);               
         END IF; 
         CLOSE  get_testpoint_rec;        
      END IF;      
   END LOOP;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_67');
PROMPT UPDATE testpoint SEQUENCE 
DECLARE
   CURSOR get_rec IS
      SELECT * FROM equipment_object_param_tab ;
BEGIN 
   FOR rec_ IN get_rec LOOP 
      IF(rec_.test_pnt_seq IS NULL) THEN 
         UPDATE equipment_object_param_tab
         SET test_pnt_seq = (SELECT test_pnt_seq FROM
                           equipment_object_test_pnt_tab
                           WHERE mch_code = rec_.mch_code
                           AND contract = rec_.contract
                           AND test_point_id = rec_.test_point_id)
         WHERE mch_code = rec_.mch_code
               AND contract = rec_.contract
               AND test_point_id = rec_.test_point_id ;
                 
      END IF;      
   END LOOP;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_68');
PROMPT Changing PRIMARY keys IN EQUIPMENT_OBJECT_PARAM_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TEST_PNT_SEQ', 'NUMBER', 'N');
Database_SYS.Set_Table_Column(columns_, 'PARAMETER_CODE', 'VARCHAR2(5)', 'N');   
   Database_SYS.Create_Constraint(table_name_, 'EQUIPMENT_OBJECT_PARAM_PK',  columns_,  'P', '&IFSAPP_INDEX', replace_ => TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_69');
PROMPT Making Contract COLUMN nullable IN EQUIPMENT_OBJECT_PARAM_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LU_NAME', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MCH_CODE', 'VARCHAR2(100)', 'Y');   
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_70');
PROMPT Adding new COLUMNS TO EQUIPMENT_OBJECT_MEAS_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);   
   Database_SYS.Set_Table_Column(columns_, 'TEST_PNT_SEQ', 'NUMBER', 'Y');   
   Database_SYS.Set_Table_Column(columns_, 'TOOL_EQUIPMENT_SEQ', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');    
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_71');
PROMPT create index EQUIPMENT_OBJECT_MEAS_IX1 ON EQUIPMENT_OBJECT_MEAS_TAB  
DECLARE
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'MCH_CODE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'TEST_POINT_ID');
   Database_SYS.Create_Index('EQUIPMENT_OBJECT_MEAS_TAB', 'EQUIPMENT_OBJECT_MEAS_IX1', columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_72');
PROMPT create INDEX EQUIPMENT_OBJECT_TEST_PNT_IX1 ON EQUIPMENT_OBJECT_TEST_PNT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'MCH_CODE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'TEST_POINT_ID');
   Database_SYS.Create_Index('EQUIPMENT_OBJECT_TEST_PNT_TAB', 'EQUIPMENT_OBJECT_TEST_PNT_IX1', columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_73');
PROMPT UPDATE testpoint SEQUENCE  
BEGIN 
   UPDATE equipment_object_meas_tab m
         SET m.test_pnt_seq = (SELECT test_pnt_seq FROM
                           equipment_object_test_pnt_tab t
                           WHERE t.mch_code = m.mch_code
                           AND t.contract = m.contract
                           AND t.test_point_id = m.test_point_id)
         WHERE m.test_pnt_seq IS null ;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_74');
PROMPT UPDATE TEST_PNT_SEQ TO 0 IN EQUIPMENT_OBJECT_MEAS_TAB WHERE TEST_PNT_SEQ VALUE IS NULL
DECLARE   
BEGIN
   UPDATE equipment_object_meas_tab m
   SET m.test_pnt_seq = 0
   WHERE m.test_point_id NOT IN ( SELECT t.test_point_id FROM
                                 equipment_object_test_pnt_tab t 
                                 WHERE t.mch_code = m.mch_code
                                 AND t.contract = m.contract);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_75');
PROMPT Making test_pnt_seq COLUMN NOT null IN EQUIPMENT_OBJECT_MEAS_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_MEAS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TEST_PNT_SEQ', 'NUMBER', 'N');   
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_76');
PROMPT Adding LOCATION_ID TO EQUIPMENT_OBJECT_ADDRESS_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_ADDRESS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTACT', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PHONE_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'E_MAIL', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_77');
PROMPT Adding column POSITION_TYPE to EQUIPMENT_OBJ_TYPE_TAB.
DECLARE
   column_           Database_SYS.ColRec;
   column_name_      VARCHAR2(30) := 'POSITION_TYPE';
BEGIN
   column_ := Database_SYS.Set_Column_Values(column_name_, 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('EQUIPMENT_OBJ_TYPE_TAB', 'A', column_);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_78');
PROMPT UPDATE column Position_Type WITH DEFAULT value on table Equipment_Obj_Type_TAB
BEGIN
   IF (Database_SYS.Table_Exist('EQUIPMENT_OBJECT_POSITION_TAB')) THEN
      EXECUTE IMMEDIATE 'UPDATE EQUIPMENT_OBJ_TYPE_TAB SET POSITION_TYPE = MCH_TYPE WHERE MCH_TYPE IN (SELECT MCH_TYPE FROM EQUIPMENT_OBJECT_POSITION_TAB) AND POSITION_TYPE IS NULL';
   ELSIF (Database_SYS.Table_Exist('EQUIPMENT_OBJECT_POSITION_100')) THEN
      EXECUTE IMMEDIATE 'UPDATE EQUIPMENT_OBJ_TYPE_TAB SET POSITION_TYPE = MCH_TYPE WHERE MCH_TYPE IN (SELECT MCH_TYPE FROM EQUIPMENT_OBJECT_POSITION_100) AND POSITION_TYPE IS NULL';
   END IF;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_79');
PROMPT Adding COLUMN blocked_for_use TO EQUIPMENT_OBJECT_PARAM_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'BLOCKED_FOR_USE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_80');
PROMPT UPDATE blocked_for_use IN EQUIPMENT_OBJECT_PARAM_TAB
BEGIN
   UPDATE EQUIPMENT_OBJECT_PARAM_TAB a
   SET a.blocked_for_use = 'FALSE'
   WHERE a.blocked_for_use IS NULL;
END;
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Timestamp_81');
PROMPT making blocked_for_use COLUMN NOT NULL 
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EQUIPMENT_OBJECT_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'BLOCKED_FOR_USE', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

COMMIT;

-----------------------------------------------------------------------------
----------------------- DROP OBSOLETE OBJECTS -------------------------------
-----------------------------------------------------------------------------

BEGIN
   -- Obsolete packages
   Database_SYS.Remove_Package ('EQUIPMENT_ALL_OBJECT_API',TRUE);   
   Database_SYS.Remove_Package ('MAINTENANCE_OBJECT_API',TRUE);
   -- Moved packages to PERISO
   Database_SYS.Remove_Package ('DELIMITATION_API',TRUE);
   Database_SYS.Remove_Package ('DELIMITATION_LINE_API',TRUE);
   Database_SYS.Remove_Package ('DELIMITATION_UTILITY_API',TRUE);
   Database_SYS.Remove_Package ('EQUIPMENT_OBJECT_POSITION_API',TRUE);
   Database_SYS.Remove_Package ('EST_DELIMITATION_LINE_API',TRUE);
   Database_SYS.Remove_Package ('REEST_DELIMITATION_LINE_API',TRUE);
   COMMIT;     	
END; 
/

EXEC Database_SYS.Log_Detail_Time_Stamp('EQUIP','710.upg','Done');

