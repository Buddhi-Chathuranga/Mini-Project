-------------------------------------------------------------------------------------------- 
-- Export file for Task EQUIPMENT_TW_SETTINGS_API.CLEANUP_TW_SETTINGS.
-- 
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  100506  NIFRSE  Export file for task EQUIPMENT_TW_SETTINGS_API.CLEANUP_TW_SETTINGS.
--  100713  CHODLK  Bug 91834, Wrong user on converted scheduled tasks added log_user to PROCEDURE Upgrade_Background_Job___
-------------------------------------------------------------------------------------------- 

SET SERVEROUTPUT ON 

PROMPT Register Batch Schedule Method "EQUIPMENT_TW_SETTINGS_API.CLEANUP_TW_SETTINGS"
DECLARE
   schedule_method_id_ NUMBER          := NULL;
   seq_no_             NUMBER          := NULL;
   info_msg_           VARCHAR2(32000) := NULL;
BEGIN
-- Construct Main Message
   info_msg_    := Message_SYS.Construct('');
   Message_SYS.Add_Attribute(info_msg_, 'METHOD_NAME', 'EQUIPMENT_TW_SETTINGS_API.CLEANUP_TW_SETTINGS');
   Message_SYS.Add_Attribute(info_msg_, 'DESCRIPTION', 'Cleanup Equipment Tw Settings');
   Message_SYS.Add_Attribute(info_msg_, 'MODULE', 'EQUIP');
   Message_SYS.Add_Attribute(info_msg_, 'SINGLE_EXECUTION_DB', 'TRUE');
   Message_SYS.Add_Attribute(info_msg_, 'ARGUMENT_TYPE_DB', 'NONE');
   Message_SYS.Add_Attribute(info_msg_, 'VALIDATION_METHOD', '');
   Message_SYS.Add_Attribute(info_msg_, 'CHECK_EXECUTING_DB', 'FALSE');
   Message_SYS.Add_Attribute(info_msg_, 'CHECK_DAY_DB', 'FALSE');
-- Register Batch Schedule Method
   Batch_SYS.Register_Batch_Schedule_Method(schedule_method_id_, info_msg_);
-- Adding parameters
END;
/

-------------------------------------------------------------------------------------------- 
-- Export file for Task EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__.
-- 
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  041209  IFSAPP  Export file for task EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__.
--  041209  NIFRSE  Added upgrade script of old background jobs.
-------------------------------------------------------------------------------------------- 

PROMPT Register Batch Schedule Method "EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__"
DECLARE
   schedule_method_id_ NUMBER          := NULL;
   seq_no_             NUMBER          := NULL;
   info_msg_           VARCHAR2(32000) := NULL;
BEGIN
-- Construct Main Message
   info_msg_    := Message_SYS.Construct('');
   Message_SYS.Add_Attribute(info_msg_, 'METHOD_NAME', 'EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__');
   Message_SYS.Add_Attribute(info_msg_, 'DESCRIPTION', 'Check Warranty Expiration Shell');
   Message_SYS.Add_Attribute(info_msg_, 'MODULE', 'EQUIP');
   Message_SYS.Add_Attribute(info_msg_, 'SINGLE_EXECUTION_DB', 'FALSE');
   Message_SYS.Add_Attribute(info_msg_, 'ARGUMENT_TYPE_DB', 'PARAMETER');
-- Register Batch Schedule Method
   Batch_SYS.Register_Batch_Schedule_Method(schedule_method_id_, info_msg_);
-- Adding parameters
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'DAYS_AHEAD_', '30','TRUE');
END;
/

-------------------------------------------------------------------------------------------- 
-- Export file for Task EQUIPMENT_OBJECT_UTIL_API.CHECK_WARRANTIES.
-- 
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  041209  IFSAPP  Export file for task EQUIPMENT_OBJECT_UTIL_API.CHECK_WARRANTIES.
-------------------------------------------------------------------------------------------- 

PROMPT Register Batch Schedule Method "EQUIPMENT_OBJECT_UTIL_API.CHECK_WARRANTIES"
DECLARE
   schedule_method_id_ NUMBER          := NULL;
   seq_no_             NUMBER          := NULL;
   info_msg_           VARCHAR2(32000) := NULL;
BEGIN
-- Construct Main Message
   info_msg_    := Message_SYS.Construct('');
   Message_SYS.Add_Attribute(info_msg_, 'METHOD_NAME', 'EQUIPMENT_OBJECT_UTIL_API.CHECK_WARRANTIES');
   Message_SYS.Add_Attribute(info_msg_, 'DESCRIPTION', 'Check Warranties');
   Message_SYS.Add_Attribute(info_msg_, 'MODULE', 'EQUIP');
   Message_SYS.Add_Attribute(info_msg_, 'SINGLE_EXECUTION_DB', 'FALSE');
   Message_SYS.Add_Attribute(info_msg_, 'ARGUMENT_TYPE_DB', 'NONE');
-- Register Batch Schedule Method
   Batch_SYS.Register_Batch_Schedule_Method(schedule_method_id_, info_msg_);
-- Adding parameters
END;
/

------------------------------------------------------------------------------------------
--  (Upgraded from background jobs)
------------------------------------------------------------------------------------------
DECLARE
   PROCEDURE Upgrade_Background_Job (
      method_name_ IN VARCHAR2,
      schedule_name_  IN VARCHAR2)
   IS
      parameters_          VARCHAR2(4000);
      execution_plan_      VARCHAR2(4000);
      param_start_         NUMBER;
      param_stop_          NUMBER;
      next_execution_date_ DATE;
      start_date_          DATE := sysdate;

      seq_no_              NUMBER;
      schedule_id_         NUMBER;
      ptr_                 NUMBER;      
      n_param_             NUMBER;
      value_               VARCHAR2(2000);
      day_                 VARCHAR2(50);
      time_                VARCHAR2(50);

      CURSOR get_jobs IS
         SELECT what, interval ,next_date, log_user
         FROM   user_jobs
         WHERE  UPPER(what) like '%'||method_name_||'%';
   BEGIN
      FOR rec IN get_jobs LOOP
        execution_plan_ := rec.interval;
        param_start_ := instr(execution_plan_, '(');
        param_stop_  := instr(execution_plan_, ')');
        execution_plan_ := substr(execution_plan_, param_start_ + 2, param_stop_ - param_start_- 3);
        IF execution_plan_ = 'NULL' THEN
           day_ := To_char(rec.next_date, 'YYYY-MM-DD');
           time_ := To_char(rec.next_date, 'HH24:MI');
           execution_plan_ := 'ON '||day_ ||' AT ' ||time_;
        END IF;

        next_execution_date_ := NULL;
        Batch_SYS.New_Batch_Schedule(schedule_id_, next_execution_date_, start_date_, NULL, schedule_name_, method_name_, 'TRUE', execution_plan_);
        UPDATE batch_schedule_tab SET username = rec.log_user WHERE schedule_id = schedule_id_;
        
        parameters_ := trim(rec.what);
        param_start_ := instr(parameters_, '(',1,2);
        param_stop_  := instr(parameters_, ')',param_start_);
        parameters_  := trim(substr(parameters_, param_start_ + 1, param_stop_ - param_start_- 1));
        IF (param_start_ > 0) THEN -- Parameters exist
           n_param_ := 0;
           ptr_ := 0;
           WHILE (length(parameters_) > 0) LOOP
             n_param_ := n_param_ + 1;
             ptr_ := instr(parameters_,',');
             IF ptr_ > 0 THEN
                value_ := trim(substr(parameters_,1, ptr_-1));
                parameters_ := trim(substr(parameters_, ptr_+1));
             ELSE
                value_ := parameters_;
                parameters_ := NULL;
             END IF;
 
             IF method_name_ = 'EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__' THEN
               IF n_param_ = 1 THEN
                  Batch_SYS.New_Batch_Schedule_Param(seq_no_, schedule_id_, 'DAYS_AHEAD_', value_);
               END IF;
             END IF;
           END LOOP;
        END IF;
      END LOOP;
   END Upgrade_Background_Job;
   
   PROCEDURE Remove_Server_Process (
      method_name_ IN VARCHAR2 )
   IS
      job_   NUMBER;
      CURSOR get_job IS
         SELECT job
         FROM   user_jobs
         WHERE  UPPER(what) like '%'||method_name_||'%';
   BEGIN
      OPEN  get_job;
      FETCH get_job into job_;
      CLOSE get_job;
      dbms_job.remove(job_);
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END Remove_Server_Process;

   PROCEDURE New_Batch_Schedule___ (
      method_name_     IN VARCHAR2,
      schedule_name_   IN VARCHAR2,
      execution_plan_  IN VARCHAR2)
   IS
      schedule_method_id_  NUMBER;
      schedule_id_         NUMBER;
      seq_no_              NUMBER;
      next_execution_date_ DATE;
      start_date_          DATE := sysdate;
      count_                        NUMBER;
      CURSOR get_method_hits IS
         SELECT count(*)
         FROM   BATCH_SCHEDULE_PUB
         WHERE  schedule_method_id = Batch_Schedule_Method_API.Get_Schedule_Method_Id(method_name_);
      CURSOR get_method IS
         SELECT name, value
         FROM   BATCH_SCHEDULE_METHOD_PAR_PUB
         WHERE  schedule_method_id = Batch_Schedule_Method_API.Get_Schedule_Method_Id(method_name_);
   BEGIN
      OPEN get_method_hits;
      FETCH get_method_hits INTO count_;
      CLOSE get_method_hits;
      next_execution_date_ := NULL;

      IF (count_ = 0) THEN
         Batch_SYS.New_Batch_Schedule(schedule_id_, 
                                      next_execution_date_, 
                                      start_date_, 
                                      NULL, 
                                      schedule_name_, 
                                      method_name_, 
                                      'TRUE', 
                                      execution_plan_);
                                 
         -- Add default values
         FOR rec IN get_method LOOP
            Batch_SYS.New_Batch_Schedule_Param(seq_no_, schedule_id_, rec.name, rec.value);
         END LOOP;
         
      END IF;
      
   EXCEPTION
      WHEN others THEN
         NULL;
   END New_Batch_Schedule___;

BEGIN
   ------------------------------------------------------------------------------------------
   -- Upgrading Background Jobs to Scheduled Tasks
   ------------------------------------------------------------------------------------------
   
   Upgrade_Background_Job('EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__', 'Check Warranty Expiration Shell');
   Remove_Server_Process('EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__');
   New_Batch_Schedule___('EQUIPMENT_OBJECT_API.CHECK_WARR_EXP_SHELL__', 'Check Warranty Expiration Shell', 'DAILY AT 18:00');

   Upgrade_Background_Job('EQUIPMENT_OBJECT_UTIL_API.CHECK_WARRANTIES', 'Check Warranties');
   Remove_Server_Process('EQUIPMENT_OBJECT_UTIL_API.CHECK_WARRANTIES');
   New_Batch_Schedule___('EQUIPMENT_OBJECT_UTIL_API.CHECK_WARRANTIES', 'Check Warranties', 'WEEKLY ON FRI AT 18:00');

   New_Batch_Schedule___('EQUIPMENT_TW_SETTINGS_API.CLEANUP_TW_SETTINGS', 'Cleanup Equipment Tw Settings', 'DAILY AT 01:00');
END;
/
