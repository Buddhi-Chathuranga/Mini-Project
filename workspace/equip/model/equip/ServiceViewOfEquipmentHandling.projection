--------------------------------------------------------------------------------------
-- Date       Sign   History
-- ---------- ------ -----------------------------------------------------------------
-- 2021-06-30 KrRaLK AM21R2-1682, Created.
-- 210914     SIPELK SM21R2-2585 - Fixed "DependencyMissing" static code ananlysis issues
--------------------------------------------------------------------------------------
projection ServiceViewOfEquipmentHandling;
component EQUIP;
layer Core;
description "View Graphical Presentations for Service View of Equipment";
category Users;


--------------------------------- FRAGMENTS ---------------------------------
include fragment MaintenanceObjectSelector;

include fragment EquipmentObjectList;
include fragment EquipmentAllObjectLovSelector;
include fragment FunctionalObjectTab;
include fragment SerialObjectTab;
@DynamicComponentDependency PM
include fragment PmForObjectStucturePmActionMaintenancePlan;
include fragment ObjectWarrantyList;
include fragment EquipObjCostPerYearList;
@DynamicComponentDependency METINV
include fragment MeteringInvoicingList;
@DynamicComponentDependency WO
include fragment WorkTask;
@DynamicComponentDependency WO
include fragment ReportActionTakenDialog;
@DynamicComponentDependency WO
include fragment OnHoldCauseDialog;
@DynamicComponentDependency WO
include fragment WorkTaskSteps;
include fragment MediaLibraryAttachment;
include fragment EquipmentFunctionalLovSelector;
include fragment EquipmentObjectTestPntLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CompanySiteSet for CompanySite;
entityset LocationSet for Location;
entityset EquipmentObjTypeSet for EquipmentObjType;
@DynamicComponentDependency PM
entityset PmActionSet for PmAction;
@DynamicComponentDependency PM
entityset PmActionUtilitySet for PmActionPlanUtility;
@DynamicComponentDependency PCMSCI
entityset SrvObjServiceLinesSet for SrvPscContrProduct;
@DynamicComponentDependency REQMGT
@DynamicComponentDependency RECSRV
entityset ServiceObjectServiceSet for ServiceObjectServiceEntity;
@DynamicComponentDependency WO
entityset ServiceReqTaskSet for ServiceReqTask;
@DynamicComponentDependency RECSRV
entityset PlannedSrvRequestScopeSet for PlannedSrvRequestScope;
@DynamicComponentDependency REQMGT
entityset ManualSrvRequestScopeSet for ManualSrvRequestScope;
entityset ServiceObjectCountEntitySet for ServiceObjectCountEntity;
entityset ServiceObjectWoCountEntitySet for ServiceObjectWoCountEntity;


------------------------------ ENTITY DETAILS -------------------------------
@Override
@DynamicComponentDependency RECSRV
entity PlannedSrvRequestScope using RecProgramScopeSchedule {
   supportwarnings = [true];
   crud = Read;
   attribute EquipmentObjectSeq Number;
   attribute GenDate Timestamp;
   attribute RecPackageId Text {
      fetch = "Recurring_Service_Program_API.Get_Rec_Package_Id(rec_program_id,rec_program_revision)";
   }
   attribute ItemId Text {
      fetch = "Recurring_Service_Scope_API.Get_Item_Id(rec_program_id,rec_program_revision,rec_scope_id)";
   }
   attribute ItemRevision Text {
      fetch = "Recurring_Service_Scope_API.Get_Item_Revision(rec_program_id,rec_program_revision,rec_scope_id)";
   }
   attribute MchCode Text {
      fetch = "Jt_Object_Conn_Utility_API.Get_Object_Id('EquipmentObject', Recurring_Service_Scope_API.Get_Obj_Conn_Rowkey(rec_program_id , rec_program_revision,rec_scope_id))";
   }
   attribute MchCodeContract Text {
      fetch = "Jt_Object_Conn_Utility_API.Get_Object_Site('EquipmentObject', Recurring_Service_Scope_API.Get_Obj_Conn_Rowkey(rec_program_id , rec_program_revision,rec_scope_id))";
   }
   attribute ContractId Text {
      fetch = "Recurring_Service_Scope_API.Get_Contract_Id(rec_program_id,rec_program_revision,rec_scope_id)";
   }
   attribute LineNo Number {
      fetch = "Recurring_Service_Scope_API.Get_Line_No(rec_program_id,rec_program_revision,rec_scope_id)";
   }
   attribute TriggerSeq Number {
      fetch = "Recurring_Program_Schedule_API.Get_Rec_Trigger_Seq(rec_program_id,rec_program_revision,prog_sch_seq_no)";
   }
   attribute TriggerValue Number {
      fetch = "Recurring_Program_Schedule_API.Get_Trigger_Value(rec_program_id,rec_program_revision,prog_sch_seq_no)";
   }
   attribute MeasurementRegDate Timestamp {
      fetch = "Recurring_Program_Schedule_API.Get_Measurement_Reg_Date(rec_program_id,rec_program_revision,prog_sch_seq_no)";
   }
   attribute MeterValue Number {
      fetch = "Recurring_Program_Schedule_API.Get_Meter_Value(rec_program_id,rec_program_revision,prog_sch_seq_no)";
   }
   @DynamicComponentDependency REQMGT
   attribute RequestId Number {
      label = "Request";
      fetch = "Srv_Request_Scope_API.Get_Req_Id(srv_request_scope_id)";
   }
   @DynamicComponentDependency REQMGT
   attribute RequestStatus Text {
      fetch = "Srv_Request_API.Get_Objstate(Srv_Request_Scope_API.Get_Req_Id(srv_request_scope_id))";
   }
   @DynamicComponentDependency REQMGT
   attribute GenerationDate Timestamp {
      fetch = "Srv_Request_API.Get_Created(Srv_Request_Scope_API.Get_Req_Id(srv_request_scope_id))";
      label = "Request Generated";
   }
   @DynamicComponentDependency REQMGT
   attribute RequestCompleted  Timestamp {
      fetch = "Srv_Request_API.Get_Completion_Date(Srv_Request_Scope_API.Get_Req_Id(srv_request_scope_id))";
   }
   attribute UnitCode Text {
      label = "UoM";
      fetch = "Equipment_Object_Param_API.Get_Unit(Recurring_Service_Trigger_API.Get_Test_Pnt_Seq(rec_program_id,rec_program_revision,Recurring_Program_Schedule_API.Get_Rec_Trigger_Seq(rec_program_id,rec_program_revision, prog_sch_seq_no)), Recurring_Service_Trigger_API.Get_Parameter_Code(rec_program_id, rec_program_revision, Recurring_Program_Schedule_API.Get_Rec_Trigger_Seq(rec_program_id , rec_program_revision, prog_sch_seq_no)))";
   }
   attribute TestPntSeq Number {
      fetch = "Recurring_Service_Trigger_API.Get_Test_Pnt_Seq(rec_program_id, rec_program_revision,Recurring_Program_Schedule_API.Get_Rec_Trigger_Seq(rec_program_id,rec_program_revision,prog_sch_seq_no))";
   }
   attribute TestPointId Text {
      fetch = "Equipment_Object_Test_Pnt_API.Get_Test_Point_Id(Recurring_Service_Trigger_API.Get_Test_Pnt_Seq(rec_program_id, rec_program_revision, Recurring_Program_Schedule_API.Get_Rec_Trigger_Seq(rec_program_id,rec_program_revision,prog_sch_seq_no)))";
   }
   attribute ParameterCode Text {
      fetch = "Recurring_Service_Trigger_API.Get_Parameter_Code(rec_program_id, rec_program_revision,Recurring_Program_Schedule_API.Get_Rec_Trigger_Seq(rec_program_id,rec_program_revision,prog_sch_seq_no))";
   }
   reference MchCodeRef(MchCodeContract, MchCode) to EquipmentObject(Contract, MchCode) {
      label = "Service Object";
      copy EquipmentObjectSeq to EquipmentObjectSeq;
   }
   reference MchCodeContractRef(MchCodeContract) to UserAllowedSiteLov(Contract) {
      label = "Service Object Site";
   }
   reference ItemIdRef(ItemRevision, ItemId) to ServiceCatalog(Revision, ItemId) {
      label = "Service";
   }
   reference ProgramRef(RecProgramRevision, RecProgramId) to RecurringServiceProgram(RecProgramRevision, RecProgramId) {
      label = "Program";
   }
   reference ProgramScheduleRef(RecProgramRevision, RecProgramId, ProgSchSeqNo) to RecurringProgramSchedule(RecProgramRevision, RecProgramId, ProgSchSeqNo) {
      label = "Program Schedule";
   }
   reference RecTriggerSeqRef(RecProgramId, RecProgramRevision, TriggerSeq) to RecurringServiceTrigger(RecProgramId, RecProgramRevision, RecTriggerSeq) {
      label = "Trigger Line No";
   }
   reference  RecPackageRef(RecPackageId) to RecurringServicePackage(RecPackageId) {
      label = "Package";
   }
   reference TestPointIdRef(TestPointId) to EquipmentObjectTestPntLov(TestPointId) {
      label = "Test Point";
   }
   reference TestPointIdDescRef(TestPntSeq, TestPointId) to EquipmentObjectTestPntLov(TestPntSeq, TestPointId) {
      label = "Test Point ID";
   }
   reference ParameterCodeRef(TestPntSeq, ParameterCode) to EquipmentObjectParam(TestPntSeq, ParameterCode) {
      label = "Parameter";
   }
}

@Override
@DynamicComponentDependency REQMGT
entity ManualSrvRequestScope using SrvRequestScope {
   from = "SRV_REQUEST_SCOPE_ALL";
   crud = Read;

   attribute SrvRequestScopeId Number {
      label = "Request Scope ID";
   }
   attribute ReqId Text {
      label = "Request";
   }
   attribute ReqGenDate Date {
      fetch = "Srv_Request_API.Get_Reg_Date(REQ_ID)";
      label = "Request Generated";
   }
   attribute ItemId Text {
      label = "Service";
   }
   attribute ContractId Text {
      label = "Contract";
   }
   attribute LineNo Number {
      label = "Contract Line";
   }
   attribute PriceRuleId Text {
      label = "Price Rule";
   }
   attribute PriceRuleSource Text {
      label = "Price Rule Source";
   }

   attribute SlaOrderNo Number {
      label = "SLA Order";
   }

   attribute ActualObjConnLuNameDb Text;
   attribute ActualObjectId Text;
   attribute ActualObjectSite Text;

   @DynamicComponentDependency SERCAT
   reference ServiceItemRef(ItemId) to ServiceCatalog(ItemId) {
      label = "Service";
   }
   reference SlaOrderRef(SlaOrderNo) to SlaOrder(SlaOrderNo);

   @DynamicComponentDependency REQMGT
   reference SrvReqIdRef(ReqId) to SrvRequest(ReqId) {
      label = "Request";
   }

}

@Override
@DynamicComponentDependency WO
entity ServiceReqTask using JtTask {
   from = "JT_TASK_LIGHT_UIV";
   crud = Read;

   @DynamicComponentDependency REQMGT
   attribute ReqId Text {
      fetch = "Srv_Request_Scope_API.Get_Req_Id(Srv_Request_Scope_Id)";
      label = "Request";
   }
   @DynamicComponentDependency REQMGT
   attribute SrvReqState Text {
      fetch = "srv_request_scope_api.Get_Objstate(Srv_Request_Scope_Id)";
      label = "Request Status";
   }
   attribute TaskSeq Number {
      label = "Work Task";
   }
   attribute SrvRequestScopeId Number {
      label = "Request Scope ID";
   }
   @DynamicComponentDependency REQMGT
   attribute ItemId Text {
      fetch = "Srv_Request_Scope_API.Get_Item_Id(Srv_Request_Scope_Id)";
   }
   attribute ActualObjConnLuNameDb Text;
   attribute ActualObjectId Text;
   attribute ActualObjectSite Text;
   attribute OrganizationSite Text;
   attribute OrganizationId Text {
      label = "Maint. Org";
   }
   attribute Description Text;

   reference TaskSeqRef(TaskSeq) to JtTaskLov(TaskSeq) {
      label = "Work Task";
   }
   @DynamicComponentDependency REQMGT
   reference ServiceItemRef(ItemId) to ServiceCatalog(ItemId) {
      copy Revision to Revision;

   }
   @DynamicComponentDependency REQMGT
   reference SrvReqIdRef(ReqId) to SrvRequest(ReqId) {
      label = "Request";
   }

   @DynamicComponentDependency METINV
   reference OrganizationIdRef(OrganizationSite, OrganizationId) to OrgCodeAllowedSiteLov(Contract, OrgCode) {
      label = "Maint. Org";
   }
}

@Override
@DynamicComponentDependency SRVCON
entity ScServiceContract {
   where = "source_type_db = 'REQUEST'";
   attribute CustomerId Text {
      label = "Customer ID";
   }
}

@Override
@DynamicComponentDependency PCMSCI
@DynamicComponentDependency SRVCON
entity SrvPscContrProduct using  PscContrProduct {
   crud = Read;
   where = "CONTRACT_ID IN (SELECT CONTRACT_ID FROM SC_SERVICE_CONTRACT)and (connection_type_db = 'REQUEST')";
   attribute CustomerId Text {
      fetch = "SC_SERVICE_CONTRACT_API.Get_Customer_Id(CONTRACT_ID)";
      editable = [false];
   }
   attribute Contract Text {
      label = "Contract";
      maxlength = 8;
      editable = [false];
   }
   attribute CustomerName Text {
      fetch = "CUSTOMER_INFO_API.Get_Name(SC_SERVICE_CONTRACT_API.Get_Customer_Id(CONTRACT_ID))";
      label = "Contract Customer";
      editable = [false];
   }
   attribute ContractName Text {
      label = "Contract Description";
      editable = [false];
   }
   attribute LineNo Number {
      label = "Contract Line";
      maxlength = 10;
      editable = [false];
   }
   attribute Description Text {
      label = "Line Description";
      editable = [false];
   }
   attribute DateFrom Date {
      label = "Line Valid From";
      editable = [false];
   }
   attribute ExpiryDate Date {
      label = "Line Valid To";
      editable = [false];
   }
   attribute RequestSlaTempId Text {
      label = "SLA Template";
      editable = [false];
   }
   attribute PriceRuleId Text {
      label = "Price Rule";
      editable = [false];
   }


   reference ContractIdRef(ContractId) to ScServiceContract(ContractId) {
      label = "Contract ID";
   }
   reference CustomerIdRef(CustomerId) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Customer ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference LineNoRef(ContractId, LineNo) to PscContrProduct(ContractId, LineNo) {
      label = "Line No";
   }
}

@Override
entity ServiceObjectCountEntity using EquipmentObject {
   crud = Read;
   from = "Service_Object_Counts";
   keys = EquipmentObjectSeq, ConnectedLu;

   attribute EquipmentObjectSeq Number;
   attribute ObjCount Text {
      fetch = "OBJ_COUNT";
   }
   attribute OneObjCount Number {
      fetch = "ONE_OBJ_COUNT";
   }
   attribute AllCount Number {
      fetch = "ALL_COUNT";
   }
   attribute DisplayText Text {
      fetch = "DISPLAY_TEXT";
   }
   attribute ConnectedLu Text;
}
@Override
entity ServiceObjectWoCountEntity using EquipmentObject {
   crud = Read;
   from = "Service_Object_Work_Counts";
   keys = EquipmentObjectSeq, ConnectedLu;

   attribute EquipmentObjectSeq Number;
   attribute ObjCount Text {
      fetch = "OBJ_COUNT";
   }
   attribute OneObjCount Number {
      fetch = "ONE_OBJ_COUNT";
   }
   attribute AllCount Number {
      fetch = "ALL_COUNT";
   }
   attribute DisplayText Text {
      fetch = "DISPLAY_TEXT";
   }
   attribute ConnectedLu Text;
}

@Override
@DynamicComponentDependency REQMGT
@DynamicComponentDependency RECSRV
entity ServiceObjectServiceEntity using EquipmentObject {
   crud = Read;
   from = "Service_Object_Service_View";
   keys = MchCode, MchCodeContract;

   attribute EquipmentObjectSeq Number;
   attribute MchCode Text {
      fetch = "MCH_CODE";
   }
   attribute MchCodeContract Text {
      fetch = "MCH_CODE_CONTRACT";
   }
//   attribute ConnectedLu Text {
   //   fetch = "CONNECTED_LU";
  // }
   attribute Program Text {
      fetch = "PROGRAM";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
   }
   attribute Request Text {
      fetch = "REQUEST";
   }
   attribute RequestStatus Text {
      fetch = "REQUEST_STATUS";
   }
}

---------------------------------- QUERIES ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function GetDefaultValuesForPageFilter Structure(NavPageFilterStructure);
function GetEquipObjectsChildFiltered List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   ludependencies = EquipmentObjectList;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "(:StructureInTree = 'F' AND functional_object_seq = :EquipmentObjectSeq)";
}
function GetEquipmentObjectsFiltered List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   ludependencies = EquipmentObjectList;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "(:StructureInTree = 'F' AND functional_object_seq = :EquipmentObjectSeq)";
}
function GetNavigationUrl LongText {
   parameter EquipmentObjectSeq Number;
   parameter NavigatingForm Text;
   parameter TypeOfObj Text;
}
function  GetObjectImage Stream {
   parameter EquipmentObjectSeq Number;
}
@DynamicComponentDependency PCMSCI
function GetServiceLinesFiltered List<Entity(SrvPscContrProduct)> {
   basedon SrvObjServiceLinesSet;
   ludependencies = SrvPscContrProduct;
   parameter EquipmentObjectSeq Number;
   where = " (EXISTS (SELECT 1 FROM psc_srv_line_objects obj_lines
                     WHERE contract_id = psc_contr_product.contract_id
                        AND line_no = psc_contr_product.line_no
                        AND obj_lines.equipment_object_seq = :EquipmentObjectSeq))";
}

function GetAllFChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((mch_code, contract) IN
   (SELECT mch_code, contract
   FROM equipment_object_uiv
   START WITH functional_object_seq = :EquipmentObjectSeq
   CONNECT BY PRIOR equipment_object_seq = functional_object_seq))";
}

function GetPmSummary List<Entity(ServiceObjectCountEntity)> {
   basedon ServiceObjectCountEntitySet;
   parameter EquipmentObjectSeq Number;
   where = "equipment_object_seq = :EquipmentObjectSeq ";
}

function GetWoSummary List<Entity(ServiceObjectWoCountEntity)> {
   basedon ServiceObjectWoCountEntitySet;
   parameter EquipmentObjectSeq Number;
   where = "equipment_object_seq = :EquipmentObjectSeq  ";
}

@DynamicComponentDependency RECSRV
function GetPlannedServiceList List<Entity(PlannedSrvRequestScope)> {
   basedon PlannedSrvRequestScopeSet;
   parameter Contract Text;
   parameter MchCode Text;
   where = "Jt_Object_Conn_Utility_API.Get_Object_Site('EquipmentObject', Recurring_Service_Scope_API.Get_Obj_Conn_Rowkey(rec_program_id , rec_program_revision,rec_scope_id)) = :Contract AND Jt_Object_Conn_Utility_API.Get_Object_Id('EquipmentObject', Recurring_Service_Scope_API.Get_Obj_Conn_Rowkey(rec_program_id , rec_program_revision,rec_scope_id)) = :MchCode  ";
}

@DynamicComponentDependency REQMGT
function GetManualServiceList List<Entity(ManualSrvRequestScope)> {
   basedon ManualSrvRequestScopeSet;
   parameter Contract Text;
   parameter MchCode Text;
   where = "(REQ_ID IN (SELECT REQ_ID FROM SRV_REQUEST WHERE SOURCE_DB = 'MANUAL')) AND ACTUAL_OBJ_CONN_LU_NAME_DB = 'EquipmentObject' AND ACTUAL_OBJECT_SITE = :Contract AND ACTUAL_OBJECT_ID = :MchCode  ";
}

@DynamicComponentDependency WO
function GetServiceWorkTaskList List<Entity(ServiceReqTask)> {
   basedon ServiceReqTaskSet;
   parameter Contract Text;
   parameter MchCode Text;
   where = "SRV_REQ_ID IS NOT NULL AND ACTUAL_OBJ_CONN_LU_NAME_DB = 'EquipmentObject' AND ACTUAL_OBJECT_SITE = :Contract AND ACTUAL_OBJECT_ID = :MchCode  ";
}

@DynamicComponentDependency WO
function GetHistoricalWorkTaskStepsFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter LuName Text;
   parameter Objkey Text;
   where = "OBJECT_CONNECTION_LU_NAME_DB = :LuName
 	      AND OBJECT_CONNECTION_ROWKEY = :Objkey
         AND OBJSTATE IN ('CANCELLED', 'DONE')";
}

action ValidateChildObjects {
   initialcheck none;
   ludependencies = EquipmentObjectList;
}

-------------------------------- STRUCTURES ---------------------------------
structure NavPageFilterStructure {
   attribute EquipmentObjectSeq Number;
   attribute MchCode Text;
   attribute Contract Text;
   attribute StructureInTree Text;
}

structure TreeFilterStructure {
   attribute StructureInTree Enumeration(StructureTypes.StructureTypeF) {
      required = [true];
   }
   attribute MchCodeList Text;
   attribute MchCodeContractList Text;
}
virtual EquipChildTabSelection {
   attribute VisibleAllChildObject Boolean("TRUE", "FALSE") {
      label = "All Child Objects";
      editable = [true];
      required = [true];
   }
}

virtual MoreInfoTabSelection {
   attribute VisibleSpareParts Boolean("TRUE", "FALSE") {
      label = "Spare Parts";
      editable = [true];
      required = [true];
   }
   attribute VisibleTestPoints Boolean("TRUE", "FALSE") {
      label = "Testpoints/ Parameters";
      editable = [true];
      required = [true];
   }
   attribute VisibleJournal Boolean("TRUE", "FALSE") {
      label = "Journal";
      editable = [true];
      required = [true];
   }
   attribute VisibleRequirements Boolean("TRUE", "FALSE") {
      label = "Requirements/ Technical Data";
      editable = [true];
      required = [true];
   }

}