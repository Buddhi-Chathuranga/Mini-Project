-----------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2018-10-12  TAJALK  SAUXXW4-1242 dlgMeterReadAdjustWiz - Manage Preliminary Reading generated from MTG 1.31
--  2018-10-17  TAJALK  SAUXXW4-1264 frmMeterReadAdjustWiz2 - Added Client Code
--  2018-10-18  TAJALK  SAUXXW4-1265 frmMeterReadAdjustWiz3 - Added Client Code
--  2018-10-19  TAJALK  SAUXXW4-1266 frmMeterReadAdjustWiz4 - Added Client Code
--  2018-10-22  TAJALK  SAUXXW4-1267 frmMeterReadAdjustWiz5 - Added Client Code
--  2018-10-23  TAJALK  SAUXXW4-1268 frmMeterReadAdjustWiz6 - Added Client Code
--  2018-11-07  TAJALK  SAUXXW4-10917 - Fixed reported issues
--  2018-11-07  TAJALK  SAUXXW4-10935 - Fixed reported issues
-----------------------------------------------------------------------------
client ManagePreliminaryReading;
component EQUIP;
layer Core;
projection ManagePreliminaryReadingHandling;

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant MeterReadAdjustWizAssistant using MeterReads {
   label = "Manage Preliminary Reading";
   setup SetupSourceInfo {
      variable VarValuesSeq {
         type = Number;
      }
      variable VarContract;
      variable VarMchCode;
      variable VarParameterCode;
      variable VarTestpointId;
      variable VarRegDate {
         type = Timestamp;
      }
      variable VarTestPntSeq {
         type = Number;
      }

      execute {
         set SeqVal = VarValuesSeq;
         set Site = "${VarContract}";
         set ObjectId = "${VarMchCode}";
         set ParameterCode = "${VarParameterCode}";
         set TestPointId = "${VarTestpointId}";
         set ReadDate = VarRegDate;
         set TestPrintSeq = VarTestPntSeq;
      }
   }
   init command {
      variable ObjDefStructureVar {
         type = ObjDefStructure;
      }
      execute {
         call FetchObjectValues(Site, ObjectId, ParameterCode, TestPrintSeq, SeqVal, ReadDate) into ObjDefStructureVar;

         set ObjectDescription = ObjDefStructureVar.ObjectDescription;
         set ParameterDescription = ObjDefStructureVar.ParameterDescription;
         set Unit = ObjDefStructureVar.Unit;
         set CurrentReading = ObjDefStructureVar.CurrentReading;
         set PrevRead = ObjDefStructureVar.PrevRead;
         set FlipValue = ObjDefStructureVar.FlipValue;
         set HasFlipValue = ObjDefStructureVar.HasFlipValue;
         set HasNextRecRead = ObjDefStructureVar.HasNextRecRead;
         set LastRecordedValue = ObjDefStructureVar.LastRecordedValue;
         set SelectedRead = ObjDefStructureVar.CurrentReading;
         set TestSequenceId = ObjDefStructureVar.TestSequenceId;
         set TotalValue = ObjDefStructureVar.TotalValue;
         set PrevDate = ObjDefStructureVar.PrevDate;
         set MeterIdOld = ObjDefStructureVar.MeterIdOld;
         set MeterIdRequired = ObjDefStructureVar.MeterIdRequired;
         set AverageDate = ObjDefStructureVar.AverageDate;
         set MeasurementNote = ObjDefStructureVar.MeasurementNote;
         set EndValueExt = ObjDefStructureVar.PrevRead;
         set SelectReason = "ReadingIncorrect";
         set CorrectReadUnknown = false;
         set ValidRegisteredDate = ReadDate;
         set MeterFlipValue = FlipValue;
         set StartValueExt = 0;
      }
   }

   steps {
      step {
         // Step: Step1
         label = "Manage Preliminary Reading";
         group Object_InformationGroup;
         group Meter_InformationGroup;
         markdowntext {
            text = "The Selected Reading (${CurrentReading}) has failed validation.";
         }
         markdowntext {
            text = "This indicates that either the meter has 'rolled over', the meter has been changed, or that the reading is incorrect.";
         }
         markdowntext {
            text = "Please select the reason.";
         }
         group SelectReason_InformationGroup;
         next command {
            enabled = [not(SelectReason = null)];
         }
      }
      step {
         // Step: Step2
         label = "Set Roll-over Value";
         enabled = [(SelectReason = "MeterRolledOver") and(FlipValue = null or FlipValue > CurrentReading) and HasNextRecRead = 0 and HasFlipValue = "FALSE"];
         markdowntext {
            text = "No stored value exists for the meter roll-over/flip value";
         }
         markdowntext {
            text = "Please enter a roll-over value. This is the value at which the meter will restart from zero.";
         }
         markdowntext {
            text = "(E.g. maximum value a meter can record is 99 999. Next reading will be zero. Roll-over value will be set as 100 000)";
         }
         markdowntext {
            text = "The value will be stored for the meter.";
         }
         group MeterReadAdjust_InformationGroup;
         next command {
            enabled = [MeterFlipValue != null and MeterFlipValue >= LastRecordedValue];
            execute {
               call GetProposedTotal() into ProposedTotalValue;
            }
         }
      }
      step {
         // Step: Step3
         label = "Check Roll-over Value";
         enabled = [(SelectReason = "MeterRolledOver") and(FlipValue = null or FlipValue > CurrentReading) and HasNextRecRead = 0 and HasFlipValue = "TRUE"];
         markdowntext {
            text = "The meter has a registered roll-over value. This is the value at which the meter will restart from zero.";
         }
         markdowntext {
            text = "(E.g. maximum value a meter can record is 99 999. Next reading will be zero. Roll-over value will be set as 100 000)";
         }
         markdowntext {
            text = "Please confirm this value, or change if it is incorrect.";
         }
         markdowntext {
            text = "The value will be stored for the meter.";
         }
         group MeterReadAdjust_InformationGroup;
         next command {
            enabled = [MeterFlipValue != null and MeterFlipValue >= LastRecordedValue];
            execute {
               call GetProposedTotal() into ProposedTotalValue;
            }
         }
      }
      step {
         // Step: Step4
         enabled = [(SelectReason = "ReadingIncorrect")];
         label = "Incorrect Reading";
         markdowntext {
            text = "Please enter a correct measurement:";
         }
         group InvalidMeasurement_InformationGroup;
         group CorrectedMeasurement_InformationGroup;
         next command {
            enabled = [false];
         }
      }
      step {
         // Step: Step5
         label = "Input New Reading";
         enabled = [SelectReason = "MeterRolledOver" and MeterFlipValue != null and MeterFlipValue >= LastRecordedValue];
         group PreviousRading_InformationGroup;
         group MeterRollOver_InformationGroup;
         group SelectedRading_InformationGroup;
         next command {
            enabled = [false];
         }
      }
      step {
         // Step: Step6
         label = "Report Meter Change";
         enabled = [(SelectReason = "MeterChanged")];
         markdowntext {
            visible = [FlipValue > 0];
            text = "Meter has been changed. Previous meter was set to roll over at (${FlipValue}).";
         }
         markdowntext {
            visible = [FlipValue = null or FlipValue = 0];
            text = "Meter has been changed.";
         }
         group New_InformationGroup;
         group Old_InformationGroup;
         next command {
            enabled = [false];
         }
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [(component.MeterReadAdjustWizAssistant.ActiveStep = 4
      and((CorrectReadUnknown = false and ValidValue != null and ValidRegisteredDate != null) or CorrectReadUnknown = true))
      or(component.MeterReadAdjustWizAssistant.ActiveStep = 5 and MeterFlipValue != null)
      or(component.MeterReadAdjustWizAssistant.ActiveStep = 6
      and((StartReadUnknown = false and StartValue != null) or StartReadUnknown = true)
      and((ChangeDateUnknown = false and MeterChangeDate != null) or ChangeDateUnknown = true)
      and((EndReadingUnknown = false and EndValue != null) or EndReadingUnknown = true))];
      execute {
         if[component.MeterReadAdjustWizAssistant.ActiveStep = 4] {
            call CorrectReadings();
            success("Corrected Reading updated successfully");
         }
         if[component.MeterReadAdjustWizAssistant.ActiveStep = 5] {

            call HandleMeterFlips();
            success("New Reading updated successfully");
         }
         if[component.MeterReadAdjustWizAssistant.ActiveStep = 6] {
            call ChangeMeter();
            success("Meter changed successfully");
         }
         navigate back;
      }
   }
   cancel command {
      execute {
         confirm("Assistant will be cancelled. Do you want to continue?") {
            when OK {
               navigate back;
            }
         }
      }
   }
   restart command {
      label = "Manage Preliminary Reading";
      visible = [true];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
--Step 1:
group Object_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Object Information";
   field Site {
      size = Small;
   }
   field ObjectId {
      size = Medium;
   }
   field ObjectDescription {
      size = Large;
   }
}

group Meter_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Meter Reading Information";
   field ParameterCode {
      size = Small;
   }
   field ParameterDescription;
   field TestPointId {
      size = Small;
   }
   field Unit {
      size = Small;
   }
   field SelectedRead {
      size = Small;
   }
   field PrevRead {
      size = Small;
   }
}

group SelectReason_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Reason";
   field SelectReason {
      required = [true];
   }
}

--Step 2/3:
group MeterReadAdjust_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Meter Roll-over value";
   field MeterFlipValue;
}

--Step 4:
group InvalidMeasurement_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Invalid Measurement";
   field CurrentReading;
   field ReadDate {
      format = longtime;
   }
}

group CorrectedMeasurement_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Corrected Measurement";
   field CorrectReadUnknown {
      label = "Correct Reading Unknown";
      size = FullWidth;
   }
   field ValidValue {
      visible = [not CorrectReadUnknown];
   }
   field ValidRegisteredDate {
      visible = [not CorrectReadUnknown];
      format = longtime;
   }
   field MeasurementNote {
      visible = [not CorrectReadUnknown];
      multiline = true;
   }
}

--Step 5:
group PreviousRading_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Previous Reading";
   field PrevRead {
      label = "Recorded Value";
   }
   field TotalValue;
   field PrevDate {
      label = "Registered Date";
      format = longtime;
   }
}

group MeterRollOver_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Meter Roll-over Value";
   field MeterFlipValue {
      editable = [false];
      showlabel = false;
   }
}
group SelectedRading_InformationGroup for MeterReadAdjustWizVirtual {
   label = "Selected Reading";
   field CurrentReading {
      editable = [false];
      label = "Recorded Value";
   }
   field ProposedTotalValue {
      label = "Total Value";
   }
   field ReadDate {
      format = longtime;
   }
}

-- Step 6:
group New_InformationGroup for MeterReadAdjustWizVirtual {
   label = "New";
   field StartReadUnknown {
      label = "Start Reading Unknown";
   }
   field StartValue {
      visible = [not StartReadUnknown];
      validate command {
         execute {
            if[StartValue > SelectedRead] {
               alert("Start Value should be lesser than or equal to Selected Value.");
            }
         }
      }
   }
   field StartValueExt {
      visible = [StartReadUnknown];
   }
   field ChangeDateUnknown {
      label = "Meter Change Date Unknown";
   }
   field MeterChangeDate {
      format = longtime;
      visible = [not ChangeDateUnknown];
      validate command {
         execute {
            if[MeterChangeDate != null and PrevDate < MeterChangeDate and MeterChangeDate < ReadDate] {
            }
            else {
               alert("The meter change date has to be a date in between the date for the latest reading and the selected reading.");
            }
         }
      }
   }
   field SelectedRead {
      label = "Recorded Value";
   }
   field ReadDate {
      label = "Selected Registration Date";
      format = longtime;
   }
   field MeterIdNew {
      required = [MeterIdRequired = "M"];
      validate command {
         execute {
            if[MeterIdRequired = "M" and MeterIdNew = null] {
               alert("This parameter requires a Meter ID - please enter the ID.");
            }
         }
      }
   }
   field MeterRollOverValue {
      validate command {
         execute {
            if[SelectedRead > MeterRollOverValue] {
               alert("Roll over Value should be higher than the Selected Value.");
            }
         }
      }
   }
   field MeasurementNote {
      multiline = true;
   }
}

group Old_InformationGroup for MeterReadAdjustWizVirtual {
   label = "From Old";
   field EndReadingUnknown {
      size = Small;
   }
   field EndValue {
      visible = [not EndReadingUnknown];
      validate command {
         execute {
            if[EndValue != null and EndValue < PrevRead] {
               alert("End Value should be equal or higher than Previous Recorded Value.");
            }
         }
      }
   }
   field EndValueExt {
      visible = [EndReadingUnknown];
   }
   field MeterIdOld;
}

----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------

