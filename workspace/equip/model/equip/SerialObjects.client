--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-08-28  SSILLK  SAUXXW4-1303,  Converted MTG Version: 1.26. Implementation for  Enterprise Explorer Source:tbwSerialObject - Serial Objects
-- 2018-10-30  TAJALK  SAUXXW4-10715, Removed logic
-- 2018-11-20  TAJALK  SAUXXW4-10987, Corrected a small issue
-- 2019-03-27  LoPrlk  SAUXXW4-13052, Restructured the code that includes Cost Center and Object to remove large LOV switch.
-- 2020-01-01  LASSLK  SAXTEND-1244,  Implement LOV Filtering
-- 2020-10-22  LASSLK  AM2020R1-6659,Modified dlgCopyFunctionalObject and DlgCopySerialObject
--------------------------------------------------------------------------------------
client SerialObjects;
component EQUIP;
layer Core;
projection SerialObjectsHandling;
include fragment UserAllowedSiteLovSelector;
include fragment EquipmentAllObjectUivSelector;
include fragment AccountingCodepartESelector;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment CopySerialObjectDialog;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment BoexpTwSettings;
include fragment EquipmentAllObjectPerfQuery;
include fragment MoveToInventoryDialog;
include fragment OrgCodeAllowedSiteLovSelector;
include fragment MoveSerialObjectDialog;

warningsenabled = EquipmentSerial;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ServSerialObjectNavEntry parent EquipNavigator.ServEquipmentSerialObject at index 1 {
      label = "Serial Objects";
      page List;
   }
   entry MaintSerialObjectNavEntry parent EquipNavigator.MaintEquipmentSerialObject at index 1 {
      label = "Serial Objects";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using EquipmentSerialSet {
   label = "Serial Objects";
   startupmode = search;
   list SerialObjectList {
      details = "page/SerialObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ObjectNavigatorCommand for EquipmentSerial {
   label = "Equipment Object Navigator";
   enabled = [true];
   mode = SelectedRecords;
   --variable VarTreeViewId Number;

   bulkexecute {
      --call GetDefTreeView() into VarTreeViewId;
      --navigate "tree/EquipmentObjectNavigator/EquipObjectNavigatorTree?$filter=TreeViewId eq $[VarTreeViewId]&treefilter=MchCodeList:$[MchCode],MchCodeContractList:$[Contract]";
      bulknavigate "tree/EquipmentObjectStructureNavigation/EquipObjectStructureTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
@DynamicComponentDependency SERCAT
command ServiceObjectCommand for EquipmentSerial {
   label = "Service Object 360";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "tree/ServiceViewOfEquipment/SeviceViewOfEquipTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command MakeMaintenanceAwareCommand for EquipmentSerial {
   label = "Make Maintenance Aware";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/SerialMaintenanceAware/List";
   }
}
command StructureCommand for EquipmentSerial {
   label = "Structure";
   mode = SelectedRecords;

   enabled = [ReturnInFacilityOrWorkshop = "TRUE"];

   bulkexecute {
      bulknavigate "page/ObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";

   }
}
command ConnectionsCommand for EquipmentSerial {
   label = "Connections";
   mode = SelectedRecords;
   enabled = [ReturnInFacilityOrWorkshop = "TRUE"];
   bulkexecute {
      bulknavigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command OperationalStatusInOperationCommand for EquipmentSerial {
   label = "In Operation";
   mode = SelectedRecords;
   enabled = [OperStatus = "TRUE"];
   bulkexecute {
      bulkcall SetInOperation();
   }
}
command OperationalStatusOutofOperationCommand for EquipmentSerial {
   label = "Out of Operation";
   mode = SelectedRecords;
   enabled = [OutOfOperation = "TRUE"];
   bulkexecute {
      bulkcall SetOutOfOperation();
   }
}
command OperationalStatusScrappedCommand for EquipmentSerial {
   label = "Scrapped";
   mode = SelectedRecords;
   enabled = [Scrapped = "TRUE"];
   bulkexecute {
      bulkcall SetScrapped();
   }
}

command OperationalStatusInOperationStructureCommand for EquipmentSerial {
   label = "Set Struture In Operation";
   mode = SelectedRecords;
   enabled = [OperStatus = "TRUE"];
   bulkexecute {
      bulkcall SetStructureInOperation();
   }
}
command OperationalStatusOutofOperationStructureCommand for EquipmentSerial {
   label = "Set Struture Out of Operation";
   mode = SelectedRecords;
   enabled = [OutOfOperation = "TRUE"];
   bulkexecute {
      if [IsScrapped = "TRUE" and HasStructure = "TRUE"] {
         confirm("Do you want to change the operational status of all the child objects?") {
            when OK {
               bulkcall SetStructureOutOfOperation();
            }
            when CANCEL {
               call SetOutOfOperation();
            }
         }
      }
      else {
         bulkcall SetStructureOutOfOperation();
      }
   }
}
command OperationalStatusScrappedtructureCommand for EquipmentSerial {
   label = "Set Struture Scrapped";
   mode = SelectedRecords;
   enabled = [Scrapped = "TRUE"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall SetStructureScrapped();
   }
}

command OperationalConditionSetOperationalCommand for EquipmentSerial {
   label = "Set Operational";
   mode = SelectedRecords;
   enabled = [SetOper = "TRUE"];
   bulkexecute {
      bulkcall SetInOperative();
   }
}
command OperationalConditionSetNonOperationalCommand for EquipmentSerial {
   label = "Set Non Operational";
   mode = SelectedRecords;
   enabled = [SetNonOper = "TRUE"];
   bulkexecute {
      bulkcall  SetNonOperative();
   }
}
command OperationalConditionSetOperationalStrucCommand for EquipmentSerial {
   label = "Set Structure Operational";
   mode = SelectedRecords;
   enabled = [SetOper = "TRUE"];
   bulkexecute {
      bulkcall SetStructureOperational();
   }
}
command OperationalConditionSetNonOperationalStrucCommand for EquipmentSerial {
   label = "Set Structure Non Operational";
   mode = SelectedRecords;
   enabled = [SetNonOper = "TRUE"];
   bulkexecute {
      bulkcall  SetStructureNonOperational();
   }
}
command MoveSerialObjectCommand for EquipmentSerial {
   label = "Move Serial Object";
   enabled = [MchCode != null and Contract != null and IsScrapped != "TRUE" and ReturnInFacility = "TRUE"];

   execute {
      call GetSupMchName(SupContract, SupMchCode)into SupMchName;

      dialog DlgMoveIndividual(MchCode, MchName, Contract, EquipmentObjectSeq, SupMchCode, SupContract, Company, SupMchName) {
         when OK {

            success("Done");
            refresh;

         }

         when CANCEL {
            exit;
         }

      }

   }
}
command CopySerialObjectCommand for EquipmentSerial {
   label = "Copy Serial Object";
   enabled = [MchCode != null and Contract != null and ReturnInFacilityOrWorkshop = "TRUE"];
   variable PartNo;
   variable Contract;
   variable DestContract;
   variable MchCode;
   variable MchName;
   variable PartRev;
   variable SupMchCode;
   variable SupContract;
   variable DfDestSupMchCodeName;
   variable IsSerial;
   variable VarFormName Text;

   execute {
      call GetAssistantMchName(SupContract, SupMchCode)into DfDestSupMchCodeName;
      set VarFormName = "SerialObjs";
      dialog DlgCopySerialObject(PartNo, Contract, Contract, MchCode, MchName, PartRev, SupMchCode, SupContract, DfDestSupMchCodeName, VarFormName, AppliedPmProgramId) into
      (Contract2, MchCode, DestContract, DestMchCode, SerialNo, PartNo, PartRev, SupMchCode, SparePart, TechData, Parameter, TestPnt, Document, Pm, Party, SupContract, IsSerial, CopySerialReturn) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command MoveToInventoryCommand for EquipmentSerial {
   label = "Move To Inventory";
   enabled = [MchCode != null and SupMchCode != null and IsSerialTracked = "SERIAL TRACKING"];
   variable WoContractVar;
   variable WoMaintOrgVar;
   variable WoDirectiveVar;
   variable WoNoVar;
   execute {
      call GetDefContract() into WoContractVar;
      dialog DlgMoveToInventory(MchCode, Contract, WoContractVar)
      into(MchCode, Contract, WoNoVar, WoContractVar, WoMaintOrgVar, WoDirectiveVar)
         {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
@DynamicComponentDependency PCMSCI
command ServiceContractsforObjectCommand for EquipmentSerial {
   label = "Service Contracts";
   mode = SelectedRecords;
   enabled = [ObjExist = "TRUE"];
   bulkexecute {
      bulknavigate "page/ServiceContractsForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command PMforObjectStructureCommand for EquipmentSerial {
   label = "PM for Object Structure";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null];
   bulkexecute {
      bulknavigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ActiveWorkOrdersCommand for EquipmentSerial {
   label = "Active Work Orders";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null];
   bulkexecute {
      bulknavigate "page/ObjectWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command HistoricalWorkOrdersCommand for EquipmentSerial {
   label = "Historical Work Orders";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null];
   bulkexecute {
      bulknavigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdTasksCommand for EquipmentSerial {
   label = "Work Tasks";
   enabled = [MchCode != null];
   bulkexecute {
      bulknavigate "page/WorkTasks/List?$filter=ReportedObjConnLuNameDb  eq $[LuName] and ReportedObjConnRowkey eq $[Objkey]";
   }
}
command PartSerialCommand for EquipmentSerial {
   label = "Part Serial";
   mode = SelectedRecords;
   enabled = [PartNo != null and SerialNo != null];
   bulkexecute {
      bulknavigate "page/PartSerial/Form?$filter=PartNo eq $[PartNo] and SerialNo eq $[SerialNo]";
   }
}
command ValidateSave for EquipmentSerial {
   bulkexecute {

      if [IsSerialTr != "TRUE" and PartNo != null] {
         inquire("Part no ${PartNo} is not serial tracked 'At Receipt and Issue'. It will not be possible to move the serial object to the inventory. Still want to save this record?") {
            when YES {
               new();
            }
            when NO {
               exit;
            }
         }
      }
      if [UpdateCount > 0] {

         ifany [(Requirements = true) and(OldMchType != MchType) and(MchType != null) and(MchTypeHasTechReference = "FALSE")] {
            inquire("Do you want to remove Technical Data along with the replacement of the Object Type?") {
               when YES {
                  bulkset RemoveRequirements = "TRUE";
               }
               when NO {
                  bulkset RemoveRequirements = "FALSE";
               }
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
         else {
            ifany [(Requirements = true) and(OldMchType != MchType) and(MchType != null) and(MchTypeHasTechReference = "TRUE")] {
               inquire("Do you want to replace Technical Data along with the replacement of the Object Type?") {
                  when YES {
                     bulkset RemoveRequirements = "TRUE";
                  }
                  when NO {
                     bulkset RemoveRequirements = "FALSE";
                  }
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
            else {
               ifany [(Requirements = true) and(OldMchType != MchType) and(MchType = null)] {
                  inquire("Do you want to remove Technical Data along with the deletion of the Object Type?") {
                     when YES {
                        bulkset RemoveRequirements = "TRUE";
                     }
                     when NO {
                        bulkset RemoveRequirements = "FALSE";
                     }
                     when CANCEL {
                        exit CANCEL;
                     }
                  }
               }
               else {
                  ifany [(Requirements = true) and(OldType != Type) and(OldType != null) and(Type != null)] {
                     inquire("Do you want to replace Technical Data along with the replacement of the Type Designation?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }

               }
            }
         }

      }
   }
}

command CmdOperationalGroupsCommand for EquipmentSerial {
   label = "Set Op. Mode Groups to Structure";
   mode = SingleRecord;

   enabled = [ChildObjects != "0"];
   execute {
      @DynamicComponentDependency OPPLAN
      assistant OperationalGroupsAssistant(Contract, MchCode) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CmdSafeAccessCodeCommand for EquipmentSerial {
   label = "Set Safe Access Code to Structure";
   mode = SingleRecord;
   enabled = [ChildObjects != "0"];
   execute {
      call SpreadSafeAccessCode();
      success("Safe Access Code successfully inherited to child objects.");
   }
}

command MaintenanceHistoryCommand for EquipmentSerial {
   label = "Maintenance History";
   execute {
      navigate "page/MaintenanceHistoryForObject/MaintenanceHistoryPage?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceEquipmentObjTypeSelector for EquipmentObjType {
   badge  Objstate {
      label = "Validity";
      visible = [false];

   }
}

@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list SerialObjectList for EquipmentSerial {
   card SerialObjectCard;
   initialview = CardView;

   crudactions {
      before command ValidateSave;

   }
   field MchCode {
      size = Medium;
   }
   field MchName {
      size = Large;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Medium;
      validate command {
         variable FetchCompany;

         execute {

            call GetContractDescription(Contract) into ObjectSiteDesc;
            set SupContract = Contract;
            if[Contract != null] {
               call GetCompany(Contract) into FetchCompany;
            }
            else {
               call GetCompany(FetchContract) into FetchCompany;

            }
            set Compnay = FetchCompany;
         }

      }
      description = ObjectSiteDesc;
   }

   lov PartNoRef with ReferencePartCatalogSelector {
      search = PartNo, Description;
      validate command {
         execute {
            if[PartNo != null] {
               call GetMchDescription(PartNo) into MchName;
               call GetIsSerialTr(PartNo)into IsSerialTr;
            }
            else {
               set MchName = null;
            }
         }

      }
   }
   field SerialNo {
      size = Small;
   }
   badge OperationalStatus {
      style = TextOnly;
      size = Medium;
      emphasis StatePlanned = [OperationalStatus = "PlannedForOperation"];
      emphasis StateStopped = [OperationalStatus = "OutOfOperation"];
      emphasis StateObsolete = [OperationalStatus = "Scrapped"];
      emphasis Complementary9 = [OperationalStatus = "InOperation"];
      emphasis Off = [OperationalStatus = "NotApplicable"];
      emphasis StatePreliminary = [OperationalStatus = "Designed"];
      emphasis StateChanged = [OperationalStatus = "Renamed"];
   }
   lov  MchTypeRef with ReferenceEquipmentObjTypeSelector using GetActiveMchType {
      size = Medium;
      description = MchTypeRef.Description;
      validate command {
         variable TempMchType;

         execute {
            call HasMchTypeTechSpec(MchType) into MchTypeHasTechReference;
            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchType;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }

            }
         }
      }

   }
//   field EquipmentObjTypeRef.Description {
//      size = Small;
//      label = "Object Type Description";
//   }
   lov TypeRef  with  TypeDesignationSelector  using GetTypeDesignations(MchType) {
      search = Type, Description;
      size = Small;
      description = TypeRef.Description;
      validate command
         {
         variable Resultrec {
            type = TypeDesValues;
         }
         execute {
            if [Type != null] {
               call GetTypeDesignationValues(Type) into Resultrec;
               set MchType = Resultrec.MchType;
               if [Resultrec.ItemClass != null] {
                  set ItemClassId = Resultrec.ItemClass;

               }
            }
         }
      }
   }
   lov ProcessClassIdRef with ReferenceProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      size = Medium;
      description = ProcessClassIdRef.ProcessClassDesc;
   }

   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Medium;
      description = ItemClassIdRef.ItemClassDesc;


   }

   lov LocationIdRef with ReferenceLocationSelector {
      search = LocationId, Name;
      size = Medium;
      description = LocationIdRef.Name;


   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Medium;
      description = GroupIdRef.Description;

   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Small;

   }
   field Requirements {
      label = "Has Technical Data";
      type = Boolean;
      columnvisible = [false];


   }

   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [FuncObjectSeqSaved = null];

   }
   lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
      search = MchCode, MchName;
      size = Small;

      editable = [FuncObjectSeqSaved = null];
      validate command {
         variable ValidateSupMchCodeReturn
            {
            type = Structure(ValidateSupMchCodeReturn);
         }
         execute {

            call ValidateSupMchCode(SupContract, SupMchCode) into ValidateSupMchCodeReturn;
            set MchLoc = ValidateSupMchCodeReturn.MchLoc;
            set MchPos = ValidateSupMchCodeReturn.MchPos;
            set CostCenter = ValidateSupMchCodeReturn.CostCenter;
            set ObjectNo = ValidateSupMchCodeReturn.ObjectNo;
         }
      }
   }
   field EquipmentObjectRef.MchName {
      size = Small;

      label = "Belongs To Object Desc.";
   }
   field MchLoc {
      size = Small;

   }
   field MchPos {
      size = Small;

   }
   field CategoryIdRef {
      size = Small;

   }

   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      label = "Cost Ctr";
      description = CostCenterCodePartRef.Description;
      validate command {
         execute {
            call GetCompany(Contract) into Company;
            set Temp = Company;
         }
      }
   }

   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      label = "Asset";
      description = ObjectCodePartRef.Description;
      validate command {
         execute {
            call GetCompany(Contract) into Company;
         }
      }
   }

   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      contactwidget {
         enabled = [true];
         source = Supplier;
      }

      size = Medium;
      label = "Supplier";
      description = SupplierInfoRef.Name;
   }
   lov PartManufacturerRef with ReferencePartManufacturerSelector {
      size = Medium;
      validate command {
         execute {
            call GetManufacturerDescription(ManufacturerNo) into ManufacturerName;
         }
      }
      description = ManufacturerName;

   }

   field PartRev {
      size = Small;
      label = "Serial Revision";

   }
   field PurchPrice {
      format = decimal;

   }
   field PurchDate;
   field ProductionDate;
   field ManufacturedDate;

   field Ownership {
      size = Small;
   }
   // Column 'OwnershipDb' (colsOwnershipDb) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   field Owner {
      size = Small;
      editable = [(Ownership = "CustomerOwned" or Ownership = "SupplierLoaned" or Ownership = "SupplierRented") and(Record.Owner != OwnerVal or OwnerVal = null)];
      lovswitch {
         when[Ownership = "CustomerOwned"] {
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               preview = CustomerInfoCustcategoryPubCard;
            }
         }
         when[Ownership = "SupplierLoaned" or Ownership = "SupplierRented"] {
            lov SupplierInfoRef with SupplierInfoSelector;
         }
      }
   }
   field CustomerInfoRef.Name {
      size = Small;
      label = "Owner Name";
   }
   field SerialState {
      size = Small;

      //! TODO: Equivalent APF control handles a validate message. If necessary, handle it inside following block.
      // validate command
      // {
      //    execute
      //    {
      //    }
      // }
   }
   field LatestTransaction {
      size = Small;
   }
   field SupplierWarranty {
      size = Small;
      required = [true];

   }
   field CustomerWarranty {
      size = Small;
      required = [true];
   }
   badge OperationalCondition {
      size = Small;
      style = TextOnly;
      emphasis Complementary1 = [OperationalCondition = "Operational"];
      emphasis Complementary2 = [OperationalCondition = "NonOperational"];
      emphasis Complementary3 = [OperationalCondition = "NotApplicable"];
   }
   field SafeAccessCode {
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field AppliedPmProgramIdRef {
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field PmProgramRef.Description {
      size = Small;
      label = "PM Program Description";
   }
   field AppliedPmProgramRev {
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field Status {
      size = Small;
   }
   field AppliedDate;
   @DynamicComponentDependency PCMSTD
   field PmProgramRef.DateModified {
      label = "Date Modified";
   }
   field PmProgApplicationStatus {
      size = Small;
      required = [true];

   }
   field NotApplicableReason {
      size = Small;
   }
   field NotApplicableSetUser {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field NotApplicableSetDate;

   // Column 'SetOper' (colActSetOper) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.

   // fieldranking MchCode, MchName, PartNoRef, ContractRef, ObjectSiteDesc, OperationalStatus, SerialNo, MchTypeRef, EquipmentObjTypeRef.Description, SafeAccessCode;

   command ObjectNavigatorCommand;
   @DynamicComponentDependency SERCAT
   command ServiceObjectCommand;

   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command StructureCommand;
         command ConnectionsCommand;
         command CmdOperationalGroupsCommand;
         command CmdSafeAccessCodeCommand;
      }
   }
   command MakeMaintenanceAwareCommand;
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupStatus1CmdGroup {
         label = "Operational Status";
         command OperationalStatusInOperationCommand;
         command OperationalStatusOutofOperationCommand;
         command OperationalStatusScrappedCommand;
         commandgroup CommandGroupStatus2CmdGroup {
            label = "Status for Structure";
            command OperationalStatusInOperationStructureCommand;
            command OperationalStatusOutofOperationStructureCommand;
            command OperationalStatusScrappedtructureCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalCommand;
         command OperationalConditionSetNonOperationalCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup5CmdGroup {

      commandgroup MoveCopy {
         label = "Move/Copy";
         command MoveSerialObjectCommand;
         command CopySerialObjectCommand;
         command MoveToInventoryCommand;
      }
   }

   commandgroup CommandGroup6CmdGroup {

      @DynamicComponentDependency PCMSCI
      command ServiceContractsforObjectCommand;
   }

   commandgroup CommandGroup7CmdGroup {
      commandgroup MaintenanceInformation {
         label = "Maintenance Information";
         command PMforObjectStructureCommand;
         command ActiveWorkOrdersCommand;
         command HistoricalWorkOrdersCommand;
         command CmdTasksCommand;
      }

   }
   command MaintenanceHistoryCommand;
   command PartSerialCommand;
}

----------------------------------- CARDS -----------------------------------
card SerialObjectCard for EquipmentSerial {
   label = "${MchCode} - ${MchName}";

   imageviewer ObjectImageViewer;

   badge OperationalStatus {
      label = "";
      style = TextOnly;
      size = Medium;
      visible = [OperationalStatus = "OutOfOperation" or OperationalStatus = "Scrapped"];
      emphasis StatePlanned = [OperationalStatus = "PlannedForOperation"];
      emphasis StateStopped = [OperationalStatus = "OutOfOperation"];
      emphasis StateObsolete = [OperationalStatus = "Scrapped"];
      emphasis Complementary9 = [OperationalStatus = "InOperation"];
      emphasis Off = [OperationalStatus = "NotApplicable"];
      emphasis StatePreliminary = [OperationalStatus = "Designed"];
      emphasis StateChanged = [OperationalStatus = "Renamed"];
   }
   field SerialNo {
      size = Small;
   }
   lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
      size = Large;
      label = "Belongs To";
      visible = [SupMchCodeRef != null];
      description = SupMchCodePerfRef.MchName;
   }
   lov  MchTypeRef with ReferenceEquipmentObjTypeSelector {
      size = Large;
      label = "Type";
      visible = [MchTypeRef != null];
      description = MchTypeRef.Description;
   }
}
---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
imageviewer ObjectImageViewer for EquipmentSerial {
   label = "Serial Object Image";
   collapsed = [false];
   scale = original;
   height = large;
   media {
      enabled = [true];
   }
}
--------------------------------- CHECKLIST ---------------------------------

