--------------------------------------------------------------------------------------
-- Date       Sign   History
-- ---------- ------ -----------------------------------------------------------------
-- 2019-05-17 SHEPLK SAUXXW4-18433, Handle simple tree navigation from other pages to Equipment object navigator
-- 2020-11-18 CLEKLK AMZEAX-329, Added GetEquipObjectsChildFiltered
-- 2021-02-09 puvelk AM2020R1-7414, Removed function PartManufactureFilter
-- 2021-05-04 LASSLK AM21R2-1339, Modified the function GetNavigationUrl
-- 2021-05-05 RUANLK AM21R2-1297, Added GetPMWorkTasksFiltered for PM filter option for Work task ta
-- 2021-05-20 RUSSLK AM2020R1-7787, Split GetAllChildEquipmentObjects() to 7 different functions to improve performance.
-- 210914     SIPELK SM21R2-2585 - Fixed "DependencyMissing" static code ananlysis issues
--------------------------------------------------------------------------------------
projection EquipmentObjectStructureNavigationHandling;
component EQUIP;
layer Core;
description "Manage Graphical Presentations for Equipment Object Structures";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
include fragment MaintenanceObjectSelector;

--include fragment EquipmentSummary;
include fragment EquipmentObjectList;
--include fragment EquipmentAllObjectUivSelector;
include fragment EquipmentAllObjectLovSelector;
include fragment FunctionalObjectTab;
include fragment SerialObjectTab;
@DynamicComponentDependency PCMSCI
include fragment ServiceLinesList;
@DynamicComponentDependency PM
include fragment PmForObjectStucturePmActionMaintenancePlan;
include fragment ObjectWarrantyList;
include fragment EquipObjCostPerYearList;
@DynamicComponentDependency METINV
include fragment MeteringInvoicingList;
@DynamicComponentDependency WO
include fragment WorkTask;
@DynamicComponentDependency WO
include fragment ReportActionTakenDialog;
@DynamicComponentDependency WO
include fragment OnHoldCauseDialog;
@DynamicComponentDependency WO
include fragment WorkTaskSteps;
include fragment MediaLibraryAttachment;
include fragment EquipmentFunctionalLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

--entityset EquipmentObjectSet for EquipmentObject;
entityset CompanySiteSet for CompanySite;
entityset LocationSet for Location;
entityset EquipmentObjTypeSet for EquipmentObjType;
@DynamicComponentDependency PM
entityset PmActionSet for PmAction;
@DynamicComponentDependency PM
entityset PmActionUtilitySet for PmActionPlanUtility;

------------------------------ ENTITY DETAILS -------------------------------

--------------------------------- FUNCTIONS ---------------------------------
--function GetDefaultValuesForTreeFilter Structure(TreeFilterStructure);

function GetDefaultValuesForPageFilter Structure(NavPageFilterStructure);
function GetEquipObjectsChildFiltered List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   ludependencies = EquipmentObjectList;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "(:StructureInTree = 'F' AND functional_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'L' AND location_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'R' AND from_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'T' AND to_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'P' AND process_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'S' AND pipe_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'E' AND circuit_object_seq = :EquipmentObjectSeq)";
}
function GetEquipmentObjectsFiltered List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   ludependencies = EquipmentObjectList;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "(:StructureInTree = 'F' AND functional_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'L' AND location_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'R' AND from_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'T' AND to_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'P' AND process_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'S' AND pipe_object_seq = :EquipmentObjectSeq)
   OR (:StructureInTree = 'E' AND circuit_object_seq = :EquipmentObjectSeq)";
}
function GetNavigationUrl LongText {
   parameter EquipmentObjectSeq Number;
   parameter NavigatingForm Text;
   parameter TypeOfObj Text;
   parameter StructureInTree Text;
}
function  GetObjectImage Stream {
   parameter EquipmentObjectSeq Number;
}
@DynamicComponentDependency PCMSCI
function GetServiceLinesFiltered List<Entity(PscContrProduct)> {
   basedon ServiceLinesSet;
   ludependencies = PscContrProduct;
   parameter EquipmentObjectSeq Number;
   where = "(connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART'))
            AND (EXISTS (SELECT 1 FROM psc_srv_line_objects obj_lines
                           WHERE contract_id = psc_contr_product_uiv.contract_id
                              AND line_no = psc_contr_product_uiv.line_no
                              AND obj_lines.equipment_object_seq = :EquipmentObjectSeq))";
}
@DynamicComponentDependency PCMSCI
function GetAllServiceLinesFiltered List<Entity(PscContrProduct)> {
   basedon ServiceLinesSet;
   ludependencies = PscContrProduct;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "(:StructureInTree = 'F' AND psc_contr_product_uiv.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
         AND (EXISTS (SELECT 1
                     FROM psc_srv_line_objects obj_lines
                    WHERE obj_lines.contract_id = psc_contr_product_uiv.contract_id
                      AND obj_lines.line_no = psc_contr_product_uiv.line_no
                      AND (obj_lines.equipment_object_seq) IN
                          (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH functional_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = functional_object_seq))))

   OR (:StructureInTree = 'L' AND psc_contr_product_uiv.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
         AND (EXISTS (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = psc_contr_product_uiv.contract_id
               AND obj_lines.line_no = psc_contr_product_uiv.line_no
               AND (obj_lines.equipment_object_seq) IN
                   (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH location_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = location_object_seq))))

   OR (:StructureInTree = 'R' AND psc_contr_product_uiv.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
         AND (EXISTS (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = psc_contr_product_uiv.contract_id
               AND obj_lines.line_no = psc_contr_product_uiv.line_no
               AND (obj_lines.equipment_object_seq) IN
                   (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH from_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = from_object_seq))))

   OR (:StructureInTree = 'T' AND psc_contr_product_uiv.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      AND (EXISTS (SELECT 1
                     FROM psc_srv_line_objects obj_lines
                    WHERE obj_lines.contract_id = psc_contr_product_uiv.contract_id
                      AND obj_lines.line_no = psc_contr_product_uiv.line_no
                      AND (obj_lines.equipment_object_seq) IN
                          (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH to_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = to_object_seq))))

   OR (:StructureInTree = 'P' AND psc_contr_product_uiv.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      AND (EXISTS (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = psc_contr_product_uiv.contract_id
               AND obj_lines.line_no = psc_contr_product_uiv.line_no
               AND (obj_lines.equipment_object_seq) IN
                   (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH process_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = process_object_seq))))

   OR (:StructureInTree = 'S' AND psc_contr_product_uiv.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      AND (EXISTS (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = psc_contr_product_uiv.contract_id
               AND obj_lines.line_no = psc_contr_product_uiv.line_no
               AND (obj_lines.equipment_object_seq) IN
                   (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH pipe_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = pipe_object_seq))))

   OR (:StructureInTree = 'E' AND psc_contr_product_uiv.connection_type_db IN ('EQUIPMENT', 'CATEGORY', 'PART')
      AND (EXISTS (SELECT 1
              FROM psc_srv_line_objects obj_lines
             WHERE obj_lines.contract_id = psc_contr_product_uiv.contract_id
               AND obj_lines.line_no = psc_contr_product_uiv.line_no
               AND (obj_lines.equipment_object_seq) IN
                   (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH circuit_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = circuit_object_seq))))";
}
@DynamicComponentDependency PM
function GetPmActionsStructureFiltered List<Entity(PmAction)> {
   basedon PmActionSet;
   ludependencies = PmAction;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "(objstate IN ('Active', 'Preliminary') AND :StructureInTree = 'F' AND ((equipment_object_seq)
   IN (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH functional_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = functional_object_seq)))

   OR (objstate IN ('Active', 'Preliminary') AND :StructureInTree = 'L' AND ((equipment_object_seq)
   IN (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH location_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = location_object_seq)))

   OR (objstate IN ('Active', 'Preliminary') AND :StructureInTree = 'R' AND ((equipment_object_seq)
   IN (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH from_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = from_object_seq)))

   OR (objstate IN ('Active', 'Preliminary') AND :StructureInTree = 'T' AND ((equipment_object_seq)
   IN (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH to_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = to_object_seq)))

   OR (objstate IN ('Active', 'Preliminary') AND :StructureInTree = 'P' AND ((equipment_object_seq)
   IN (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH process_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = process_object_seq)))

   OR (objstate IN ('Active', 'Preliminary') AND :StructureInTree = 'S' AND ((equipment_object_seq)
   IN (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH pipe_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = pipe_object_seq)))

   OR (objstate IN ('Active', 'Preliminary') AND :StructureInTree = 'E' AND ((equipment_object_seq)
   IN (SELECT equipment_object_seq
                             FROM equipment_object_uiv
                            START WITH circuit_object_seq = :EquipmentObjectSeq
                           CONNECT BY PRIOR equipment_object_seq = circuit_object_seq)))";
}
@DynamicComponentDependency PM
function GetMaintPlanFiltered List<Entity(PmActionPlanUtility)> {
   basedon PmActionUtilitySet;
   ludependencies = PmActionPlanUtility;
   parameter EquipmentObjectSeq Number;
   where = "equipment_object_seq = :EquipmentObjectSeq";
}

function GetAllFChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((equipment_object_seq) IN
   (SELECT equipment_object_seq
      FROM equipment_object_uiv
      START WITH functional_object_seq = :EquipmentObjectSeq
      CONNECT BY PRIOR equipment_object_seq = functional_object_seq))";
}

function GetAllLChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((equipment_object_seq) IN
   (SELECT equipment_object_seq
      FROM equipment_object_uiv
      START WITH location_object_seq = :EquipmentObjectSeq
      CONNECT BY PRIOR equipment_object_seq = location_object_seq))";
}

function GetAllRChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((equipment_object_seq) IN
   (SELECT equipment_object_seq
      FROM equipment_object_uiv
      START WITH from_object_seq = :EquipmentObjectSeq
      CONNECT BY PRIOR equipment_object_seq = from_object_seq))";
}

function GetAllTChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((equipment_object_seq) IN
   (SELECT equipment_object_seq
      FROM equipment_object_uiv
      START WITH to_object_seq = :EquipmentObjectSeq
      CONNECT BY PRIOR equipment_object_seq = to_object_seq))";
}

function GetAllPChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((equipment_object_seq) IN
   (SELECT equipment_object_seq
      FROM equipment_object_uiv
      START WITH process_object_seq = :EquipmentObjectSeq
      CONNECT BY PRIOR equipment_object_seq = process_object_seq))";
}

function GetAllSChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((equipment_object_seq) IN
   (SELECT equipment_object_seq
      FROM equipment_object_uiv
      START WITH pipe_object_seq = :EquipmentObjectSeq
      CONNECT BY PRIOR equipment_object_seq = pipe_object_seq))";
}

function GetAllEChildEquipmentObjects List<Entity(EquipmentObjectList)> {
   basedon EquipmentObjectListSet;
   parameter EquipmentObjectSeq Number;
   where = "((equipment_object_seq) IN
   (SELECT equipment_object_seq
      FROM equipment_object_uiv
      START WITH circuit_object_seq = :EquipmentObjectSeq
      CONNECT BY PRIOR equipment_object_seq = circuit_object_seq))";
}

function GetPmSummary List<Entity(ObjectCountsPmEntity)> {
   basedon ObjectCountsPmEntitySet;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq AND (TREE_STRUCTURE = :StructureInTree OR TREE_STRUCTURE = 'AllType') ";
}

function GetWoSummary List<Entity(ObjectCountsWoEntity)> {
   basedon ObjectCountsWoEntitySet;
   parameter EquipmentObjectSeq Number;
   parameter StructureInTree Text;
   where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq AND CONNECTED_LU != '2EquipmentObject' AND (TREE_STRUCTURE = :StructureInTree OR TREE_STRUCTURE = 'AllType') ";
}
@DynamicComponentDependency WO
function GetActiveWorkTasksFiltered List<Entity(JtTask)> {
   basedon JtTaskSet;
   ludependencies = JtTask;
   parameter LuName Text;
   parameter Objkey Text;
   where = "Actual_Obj_Conn_Lu_Name_Db = :LuName
 	      AND Actual_Obj_Conn_Rowkey = :Objkey
         AND OBJSTATE NOT IN ('FINISHED', 'CANCELLED')";
}
@DynamicComponentDependency WO
function GetAllActiveWorkTasksFiltered List<Entity(JtTask)> {
   basedon JtTaskSet;
   ludependencies = JtTask;
   parameter StructureInTree Text;
   parameter EquipmentObjectSeq Number;
}
@DynamicComponentDependency WO
function GetHistoricalWorkTasksFiltered List<Entity(JtTask)> {
   basedon JtTaskSet;
   ludependencies = JtTask;
   parameter LuName Text;
   parameter Objkey Text;
   where = "Actual_Obj_Conn_Lu_Name_Db = :LuName
 	      AND Actual_Obj_Conn_Rowkey = :Objkey
         AND OBJSTATE IN ('FINISHED', 'CANCELLED')";
}
@DynamicComponentDependency WO
function GetHistoricalPMWorkTasksFiltered List<Entity(JtTask)> {
   basedon JtTaskSet;
   ludependencies = JtTask;
   parameter LuName Text;
   parameter Objkey Text;
   where = "Actual_Obj_Conn_Lu_Name_Db = :LuName
         AND Actual_Obj_Conn_Rowkey = :Objkey
         AND OBJSTATE IN ('FINISHED', 'CANCELLED')
         AND Source_Connection_lu_name_Db = 'PmAction'";
}
@DynamicComponentDependency WO
function GetAllPMActiveWorkTasksFiltered List<Entity(JtTask)> {
   basedon JtTaskSet;
   ludependencies = JtTask;
   parameter StructureInTree Text;
   parameter EquipmentObjectSeq Number;
}

@DynamicComponentDependency WO
function GetPMActiveWorkTasksFiltered List<Entity(JtTask)> {
   basedon JtTaskSet;
   ludependencies = JtTask;
   parameter LuName Text;
   parameter Objkey Text;
   where = "Actual_Obj_Conn_Lu_Name_Db = :LuName
      AND Actual_Obj_Conn_Rowkey = :Objkey
         AND OBJSTATE NOT IN ('FINISHED', 'CANCELLED')
         AND Source_Connection_lu_name_Db = 'PmAction'";
}

@DynamicComponentDependency WO
function GetActiveWorkTaskStepsFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter LuName Text;
   parameter Objkey Text;
   where = "OBJECT_CONNECTION_LU_NAME_DB = :LuName
   AND OBJECT_CONNECTION_ROWKEY = :Objkey
   AND OBJSTATE = 'NOTDONE'";
}

@DynamicComponentDependency WO
function GetActiveWorkTaskStepsPmFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter LuName Text;
   parameter Objkey Text;
   where = "OBJECT_CONNECTION_LU_NAME_DB = :LuName
   AND OBJECT_CONNECTION_ROWKEY = :Objkey
   AND OBJSTATE = 'NOTDONE'
   AND source_connection_lu_name_db = 'PmAction'";
}

@DynamicComponentDependency WO
function GetAllActiveWorkTaskStepsFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter StructureInTree Text;
   parameter EquipmentObjectSeq Number;
}

@DynamicComponentDependency WO
function GetAllActiveWorkTaskStepsPmFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter StructureInTree Text;
   parameter EquipmentObjectSeq Number;
}

@DynamicComponentDependency WO
function GetHistoricalWorkTaskStepsFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter LuName Text;
   parameter Objkey Text;
   where = "OBJECT_CONNECTION_LU_NAME_DB = :LuName
 	      AND OBJECT_CONNECTION_ROWKEY = :Objkey
         AND OBJSTATE IN ('CANCELLED', 'DONE')";
}

@DynamicComponentDependency WO
function GetHistoricalWorkTaskStepsPmFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter LuName Text;
   parameter Objkey Text;
   where = "OBJECT_CONNECTION_LU_NAME_DB = :LuName
 	      AND OBJECT_CONNECTION_ROWKEY = :Objkey
         AND OBJSTATE IN ('CANCELLED', 'DONE')
         AND source_connection_lu_name_db = 'PmAction'";
}
-------------------------------- STRUCTURES ---------------------------------
structure NavPageFilterStructure {
   attribute EquipmentObjectSeq Number;
   attribute MchCode Text;
   attribute Contract Text;
   attribute StructureInTree Text;
}

structure TreeFilterStructure {
   attribute StructureInTree Enumeration(StructureTypes) {
      required = [true];
   }
   attribute MchCodeList Text;
   attribute MchCodeContractList Text;
}