-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181016  DMALLK  SAUXXW4-4863 SelectPartNoAssistant fragment is created.
-----------------------------------------------------------------------------
fragment SelectPartNoAssistant;
component EQUIP;
layer Core;
description "Assistant for Seclect Part Number";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant SelectPartNoAssistant using ParentPartSet {
   label = "Select Part Number";
   input(SpareId, SpareContract, OpenViaWizard);
   output(SearchString);

   setup Initialize {
      variable VarOpenViaWizard {
         type = Text;
      }
      execute {
         // FLAG OpenViaWizard should be TRUE when dialog is open on top a wizard and FALSE when opening on top of a page to support multiple populate.
         set OpenViaWizard = VarOpenViaWizard;
      }
   }


   steps {
      step {
         list PartStructureList(SparePartNoStructureArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [(OpenViaWizard = "FALSE" and component.PartStructureList.SelectionCount > 0) or(OpenViaWizard = "TRUE" and component.PartStructureList.SelectionCount = 1)];

      execute {
         if [OpenViaWizard] {
            set SearchString = component.PartStructureList.Selection;
         }
         if [OpenViaWizard = "FALSE"] {
            call GetReturnSearchString(component.PartStructureList.Selection) into SearchString;
         }
         exit OK;
      }
   }
}

----------------------------------- LISTS -----------------------------------

list PartStructureList for NewEquipmentSpareStructure {
   field SpareId {
      size = Medium;
   }
   field SpareDescription {
      size = Large;
   }
   field SpareContract {
      size = Small;
   }
   @DynamicComponentDependency INVENT
   field InventoryPart {
      size = Medium;
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------


----------------------------- MAIN ENTRY POINTS -----------------------------

entityset EquipmentSpareStructureSet for EquipmentSpareStructure;
entityset ParentPartSet for SelectPartNoVirtual;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity NewEquipmentSpareStructure using EquipmentSpareStructure {
   from = "equipment_spare_structure";
   keys = SpareContract, SpareId, ComponentSpareId, ComponentSpareContract, SpareSeq {
      where = "SPARE_CONTRACT = :SpareContract and SPARE_ID = :SpareId and COMPONENT_SPARE_ID = :ComponentSpareId and COMPONENT_SPARE_CONTRACT = :ComponentSpareContract";
   }
   crud = Read;

   attribute SpareContract Text {
      fetch = "SPARE_CONTRACT";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }

   attribute SpareId Text {
      fetch = "SPARE_ID";
      label = "Part No";
      maxlength = 25;
      required = [true];
      format = uppercase;
   }
   attribute SpareDescription Text {
      fetch = "MAINTENANCE_SPARE_API.Get_Description(SPARE_CONTRACT, SPARE_ID)";
      label = "Description";
      maxlength = 2000;
      editable = [ETag = null];
   }
   attribute ComponentSpareId Text {
      fetch = "Equipment_Spare_Structure_API.Get_Component_Spare_Id(SPARE_SEQ , SPARE_CONTRACT , SPARE_ID , COMPONENT_SPARE_ID , COMPONENT_SPARE_CONTRACT)";
      fetch = "COMPONENT_SPARE_ID";
      label = "Component Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }

   attribute ComponentSpareContract Text {
      fetch = "COMPONENT_SPARE_CONTRACT";
      label = "Component Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
//   attribute SpareSeq Text {
//      fetch = "SPARE_SEQ";
//   }
   @DynamicComponentDependency INVENT
   attribute InventoryPart Enumeration(InventoryFlag) {
      fetch = "SUBSTR(Maintenance_Spare_API.Get_Inventory_Flag(SPARE_CONTRACT,SPARE_ID),1,200)";
      label = "Inventory Part";
      editable = [false];
   }

   attribute OpenViaWizard Text;

   @DynamicComponentDependency INVENT
   reference InventoryPartRef(SpareContract, ComponentSpareId) to InventoryPart(Contract, PartNo);
   @DynamicComponentDependency INVENT
   reference ComponentSpareIdRef(SpareContract, ComponentSpareId) to InventoryPartWoLov(Contract, PartNo) {
      label = "Component Part No";
   }
}

--------------------------------- FUNCTIONS ---------------------------------

function GetReturnSearchString Text {
   parameter KeyList Text;
}

--------------------------------- VIRTUALS ----------------------------------

virtual SelectPartNoVirtual {
   attribute PartNo Text;
   attribute Contract Text;
   attribute SpareId Text;
   attribute SpareContract Text;
   attribute ComponentSpareId Text;
   attribute ComponentSpareContract Text;

   attribute SearchString Text;
   array SparePartNoStructureArray(SpareId, SpareContract) to NewEquipmentSpareStructure(ComponentSpareId, ComponentSpareContract);
}

------------------------------- ENUMERATIONS --------------------------------
//@Override
//@DynamicComponentDependency INVENT
//enumeration InventoryFlag {
//   enumerationtype = Standard;
//   exec = "Inventory_Flag_API";
//   value = "Inventory Part" {
//      identifier = "InventoryPart";
//      label = "Inventory Part";
//   }
//   value = "Non Inventory Part" {
//      identifier = "NonInventoryPart";
//      label = "Non Inventory Part";
//   }
//}
