--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-08-28  SSILLK  SAUXXW4-1303, Converted MTG Version: 1.30. Implementation for  Enterprise Explorer Source:frmObjectStructure - Object Structure
-- 2018-10-18  CLEKLK  SAUXXW4-1248, Added EquipmentObjectConn and ObjectConnVirtual.
-- 2021-01-05  DEEKLK  AM2020R1-7134, moved GetMchName() to fragment MoveFunctionalObjectDialog.
--------------------------------------------------------------------------------------
projection ObjectStructureHandling;
component EQUIP;
layer Core;
description "Manage Equipment Object Structures.";
category Users;
include fragment AccountingCodepartBSelector;
include fragment CompanyHavingSiteSelector;
include fragment EquipmentAllObjectUivSelector;
include fragment EquipmentObjectUivSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CopySerialObjectDialog;
include fragment CopyFunctionalObjectDialog;
include fragment MoveFunctionalObjectDialog;
include fragment MoveSerialObjectDialog;
include fragment EquipmentAllObjectLov1Selector;
include fragment EmployeeLovSelector;
include fragment EquipObjectLocationLovSelector;
include fragment EquipmentFunctionalLovSelector;
include fragment EquipmentFunctionalUivSelector;
include fragment EquipmentAllObjectLovSelector;
include fragment EquipmentAllObjectPerfQuery;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjectSet for EquipmentObject;
entityset ChileEquipmentObjectSet for ChildEquipmentObject;
entityset ObjectConnSet for ObjectConnVirtual;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObject {
   supportwarnings = [true];
   crud = Read, Update;
   from = "equipment_all_object_uiv";
   ludependencies = EquipmentObject;

   keys = MchCode, Contract {
      where = "MCH_CODE = :MchCode and CONTRACT = :Contract";
   }
   use attributes = MchName, ObjLevel, OperationalStatus, SupContract, SupMchCode, OperationalStatusDb, CircuitMchCode, FromMchCode, PipeMchCode, ProcessMchCode, ToMchCode, LocationMchCode, CircuitContract, FromContract, LocationContract, PipeContract, ProcessContract, ToContract, IsCategoryObject;
   attribute MchName Text {
      required = [true];
      editable = [ETag = null];
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute ObjLevel Text {
      editable = [false];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      fetch = "operational_status_db";
      editable = [true];
   }
   attribute OperationalStatusDb Text {
      maxlength = 200;
      editable = [false];
   }
   attribute Company Text {
      fetch = "company";
      label = "(Untitled)";
      maxlength = 20;
      // searchable = false;
      format = uppercase;
   }
   attribute CostCenter Text {
      fetch = "cost_center";
      label = "Cost Center";
      maxlength = 10;
   }
   attribute Criticality Text {
      fetch = "criticality";
      label = "Criticality";
      maxlength = 10;
   }
   attribute GroupId Text {
      fetch = "group_id";
      label = "Group ID";
      maxlength = 10;
      format = uppercase;
   }
   attribute HasStructure Enumeration(TranslateBoolean) {
      fetch = "has_structure_db";
      label = "Structure";
      editable = [false];
   }
   attribute HasConnection Enumeration(TranslateBoolean) {
      fetch = "has_connection_db";
      label = "Connected";
      editable = [false];
   }
   attribute MchType Text {
      fetch = "mch_type";
      label = "Object Type";
      maxlength = 20;
      format = uppercase;
   }
   attribute MchLoc Text {
      fetch = "mch_loc";
      label = "Room";
      maxlength = 10;
      format = uppercase;
   }
   attribute MchPos Text {
      fetch = "mch_pos";
      label = "Position";
      maxlength = 15;
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      format = uppercase;
   }
   attribute Type Text {
      fetch = "type";
      label = "Type Designation";
      maxlength = 30;
      format = uppercase;
   }
   attribute GrpInOperationStatus Text {
      fetch = "Equipment_Object_API.Activate_In_Operation(CONTRACT,MCH_CODE)";
      label = "Oper Status";
      maxlength = 100;
      editable = [false];
   }
   attribute GrpOutOfOperationStatus Text {
      fetch = "Equipment_Object_API.Activate_Out_Of_Operation(CONTRACT,MCH_CODE)";
      label = "Out of Operation";
      maxlength = 100;
      editable = [false];
   }
   attribute GrpScrappedStatus Text {
      fetch = "Equipment_Object_API.Activate_Scrapped(CONTRACT,MCH_CODE)";
      label = "Scrapped";
      maxlength = 100;
      editable = [false];
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentAllObjectLov(Contract, MchCode) {
      label = "Object ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ObjLevelRef(ObjLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "Object Level";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract);
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentObjectUiv(Contract, MchCode);
   reference CircuitMchCodeRef(CircuitContract, CircuitMchCode) to EquipmentAllObjectUiv(Contract, MchCode);
   reference FromMchCodeRef(FromContract, FromMchCode) to EquipmentAllObjectUiv(Contract, MchCode);
   reference PipeMchCodeRef(PipeContract, PipeMchCode) to EquipmentAllObjectUiv(Contract, MchCode);
   reference ProcessMchCodeRef(ProcessContract, ProcessMchCode) to EquipmentAllObjectUiv(Contract, MchCode);
   reference ToMchCodeRef(ToContract, ToMchCode) to EquipmentAllObjectUiv(Contract, MchCode);
   reference LocationMchCodeRef(LocationContract, LocationMchCode) to EquipmentAllObjectUiv(Contract, MchCode);
   reference CircuitContractRef(CircuitContract) to CompanyHavingSite(Company);
   reference FromContractRef(FromContract) to CompanyHavingSite(Company);
   reference LocationContractRef(LocationContract) to CompanyHavingSite(Company);
   reference PipeContractRef(PipeContract) to CompanyHavingSite(Company);
   reference ProcessContractRef(ProcessContract) to CompanyHavingSite(Company);
   reference ToContractRef(ToContract) to CompanyHavingSite(Company);

   action SetInOperation {
      ludependencies = EquipmentObject;
   }

   action SetOutOfOperation {
      ludependencies = EquipmentObject;
   }

   action SetScrapped {
      ludependencies = EquipmentObject;
   }

}


@Override
entity ChildEquipmentObject using EquipmentObject {
   supportwarnings = [true];
   crud = Create, Read, Update, Delete;
   from = "equipment_all_object_uiv";
   exec = "EQUIPMENT_OBJECT_API";
   keys = Contract, MchCode {
      where = "MCH_CODE = :MchCode and CONTRACT = :Contract";
   }
   use attributes = SupContract, SupMchCode, HasStructure, HasConnection, ObjLevel, OperationalStatus, PartNo, SerialNo, MchName, MchType, Type, GroupId, Criticality, CostCenter, MchLoc, MchPos, Company, ToMchCode, ToContract, ProcessMchCode, ProcessContract, PipeMchCode, PipeContract, CircuitMchCode, CircuitContract, FromMchCode, FromContract, LocationContract, LocationMchCode, PartRev;
   attribute SupContract Text {
      fetch = "sup_contract";
      label = "Belongs to Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute SupMchCode Text {
      fetch = "sup_mch_code";
      label = "Object ID";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute HasStructure Boolean("TRUE", "FALSE") {
      fetch = "has_structure_db";
      label = "Structure";
      editable = [false];
   }

   attribute HasConnection Boolean("TRUE", "FALSE") {
      fetch = "has_connection_db";
      label = "Connected";
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Object Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute MchCode Text {
      fetch = "mch_code";
      label = "Object ID";
      maxlength = 100;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ObjLevel Text {
      fetch = "obj_level";
      label = "Object Level";
      maxlength = 30;
      editable = [ETag = null];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      fetch = "operational_status_db";
      label = "Operational Status";
      editable = [false];
   }

   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      format = uppercase;
   }
   attribute MchName Text {
      fetch = "mch_name";
      label = "Object Description";
      maxlength = 200;
      editable = [ETag = null];
   }
   attribute MchType Text {
      fetch = "mch_type";
      label = "Object Type";
      maxlength = 20;
      format = uppercase;
   }
   attribute Type Text {
      fetch = "type";
      label = "Type Designation";
      maxlength = 30;
      format = uppercase;
   }
   attribute GroupId Text {
      fetch = "group_id";
      label = "Group ID";
      maxlength = 10;
      format = uppercase;
   }
   attribute Criticality Text {
      fetch = "criticality";
      label = "Criticality";
      maxlength = 10;
   }
   attribute CostCenter Text {
      fetch = "cost_center";
      label = "Cost Center";
      maxlength = 10;
   }
   attribute MchLoc Text {
      fetch = "mch_loc";
      label = "Room";
      maxlength = 10;
      format = uppercase;
   }
   attribute MchPos Text {
      fetch = "mch_pos";
      label = "Position";
      maxlength = 15;
      format = uppercase;
   }
   attribute Company Text {
      fetch = "company";
      default = "Site_API.Get_Company( :Contract)";

      maxlength = 20;
      // searchable = false;
      format = uppercase;
   }
   attribute Company1 Text {
      fetch = "Site_API.Get_Company(CONTRACT)";
   }
   attribute ToMchCode Text {
      fetch = "to_mch_code";
      label = "To Object";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute ToContract Text {
      fetch = "to_contract";
      label = "To Object Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute ProcessMchCode Text {
      fetch = "process_mch_code";
      label = "Process Object";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute ProcessContract Text {
      fetch = "process_contract";
      label = "Process Object Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute PipeMchCode Text {
      fetch = "pipe_mch_code";
      label = "Pipe System";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute PipeContract Text {
      fetch = "pipe_contract";
      label = "Pipe System Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute CircuitMchCode Text {
      fetch = "circuit_mch_code";
      label = "Electrical";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute CircuitContract Text {
      fetch = "circuit_contract";
      label = "Electrical Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute FromMchCode Text {
      fetch = "from_mch_code";
      label = "From Object";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute FromContract Text {
      fetch = "from_contract";
      label = "From Object Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute LocationContract Text {
      fetch = "location_contract";
      label = "Locational Parent Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute LocationMchCode Text {
      fetch = "location_mch_code";
      label = "Locational Parent";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute PartRev Text {
      fetch = "part_rev";
      label = "(Untitled)";
      maxlength = 6;
      // searchable = false;
   }
   attribute InOperationStatus Text {
      fetch = "Equipment_Object_API.Activate_In_Operation(CONTRACT,MCH_CODE)";
      label = "Oper Status";
      maxlength = 100;
      editable = [false];
   }
   attribute OutOfOperationStatus Text {
      fetch = "Equipment_Object_API.Activate_Out_Of_Operation(CONTRACT,MCH_CODE)";
      label = "Out of Operation";
      maxlength = 100;
      editable = [false];
   }
   attribute ScrappedStatus Text {
      fetch = "Equipment_Object_API.Activate_Scrapped(CONTRACT,MCH_CODE)";
      label = "Scrapped";
      maxlength = 100;
      editable = [false];
   }
   attribute StructureObjLevel Text {
      fetch = "Equipment_Object_API.Get_Obj_Level(CONTRACT,MCH_CODE)";
   }
//   attribute SelectedStructureDb Text {
//      fetch = "Structure_Types_API.Encode(StructureType)";
//
   //   }

   attribute FetchCostCenterView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT, 'CostCenter')";
   }
   attribute ConnectionCount Number {
      fetch = "Equipment_Object_Conn_API.Get_Connection_Count(CONTRACT,MCH_CODE)";
   }
   attribute IsScrapped Text {

      fetch = "Equipment_Object_API.Is_Scrapped(CONTRACT, MCH_CODE)";
   }
   attribute IsSerialTr Text {
      fetch = "PART_CATALOG_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
   }
   attribute ReturnInFacility Text {
      fetch = "Equipment_Serial_API.Is_InFacility(PART_NO, SERIAL_NO)";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentObjectUiv(Contract, MchCode) {
      label = "Object ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Object Site";
   }
   reference ObjLevelRef(ObjLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "Object Level";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";
   }
   reference TypeRef(Type) to TypeDesignation(Type) {
      label = "Type Designation";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference CriticalityRef(Criticality) to EquipmentCriticality(Criticality) {
      label = "Criticality";
   }
   reference CostCenterRef(Company, CostCenter) to AccountingCodepartB(Company, CostCenter) {
      label = "Cost Center";
   }
   reference ToMchCodeRef(ToContract, ToMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "To Object";
   }
   reference ToContractRef(ToContract) to CompanyHavingSite(Company) {
      label = "To Object Site";
   }
   reference ProcessMchCodeRef(ProcessContract, ProcessMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Process Object";
   }
   reference ProcessContractRef(ProcessContract) to CompanyHavingSite(Company) {
      label = "Process Object Site";
   }
   reference PipeMchCodeRef(PipeContract, PipeMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Pipe System";
   }
   reference PipeContractRef(PipeContract) to CompanyHavingSite(Company) {
      label = "Pipe System Site";
   }
   reference CircuitMchCodeRef(CircuitContract, CircuitMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Electrical";
   }
   reference CircuitContractRef(CircuitContract) to CompanyHavingSite(Company) {
      label = "Electrical Site";
   }
   reference FromMchCodeRef(FromContract, FromMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "From Object";
   }
   reference FromContractRef(FromContract) to CompanyHavingSite(Company) {
      label = "From Object Site";
   }
   reference LocationContractRef(LocationContract) to CompanyHavingSite(Company) {
      label = "Locational Parent Site";
   }
   reference LocationMchCodeRef(LocationContract, LocationMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Locational Parent";
   }
   reference CodeARef(Company, CostCenter) to Account(Company, Account) {
      label = "Code A";
   }
   reference CodeBRef(Company, CostCenter) to CodeB(Company, CodeB) {
      label = "Code B";
   }
   reference CodeCRef(Company, CostCenter) to CodeC(Company, CodeC) {
      label = "Code C";
   }
   reference CodeDRef(Company, CostCenter) to CodeD(Company, CodeD) {
      label = "Code D";
   }
   reference CodeERef(Company, CostCenter) to CodeE(Company, CodeE) {
      label = "Code E";
   }
   reference CodeFRef(Company, CostCenter) to CodeF(Company, CodeF) {
      label = "Code F";
   }
   reference CodeGRef(Company, CostCenter) to CodeG(Company, CodeG) {
      label = "Code G";
   }
   reference CodeHRef(Company, CostCenter) to CodeH(Company, CodeH) {
      label = "Code H";
   }
   reference CodeIRef(Company, CostCenter) to CodeI(Company, CodeI) {
      label = "Code I";
   }
   reference CodeJRef(Company, CostCenter) to CodeJ(Company, CodeJ) {
      label = "Code J";
   }

   action SetInOperation {
      ludependencies = EquipmentObject;
   }

   action SetOutOfOperation {
      ludependencies = EquipmentObject;
   }

   action SetScrapped {
      ludependencies = EquipmentObject;
   }

}

@Override
entity EquipmentObjectConn {
   crud = Read;
   from = "equipment_object_conn";
   exec = "EQUIPMENT_OBJECT_CONN_API";

   attribute ContractConsist Text {
      fetch = "contract_consist";
      label = "Connected Object Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute MchCodeConsist Text {
      fetch = "mch_code_consist";
      label = "Connected Object ID";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute ConnectionType Text {
      fetch = "connection_type";
      label = "Connection Type";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   reference EquipmentObjectRef(ContractConsist, MchCodeConsist) to EquipmentAllObjectPerf(Contract, MchCode);
   reference EquipmentObjConnTypeRef(ConnectionType) to EquipmentObjConnType(ConnectionType);
   reference ContractConsistRef(ContractConsist) to UserAllowedSiteLov(Contract) {
      label = "Connected Site";
      where = "EQUIPMENT_OBJECT_API.Get_Operational_Status_Db(CONTRACT_CONSIST, MCH_CODE_CONSIST) != SCRAPPED";
   }
   reference MchCodeConsistRef(ContractConsist, MchCodeConsist) to EquipmentAllObjectLov(Contract, MchCode) {
      label = "Connected Object ID";
   }
   reference ConnectionTypeRef(ConnectionType) to EquipmentObjConnType(ConnectionType) {
      label = "Connection Type";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Object ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetSearchString Text {
   parameter KeyList Text;
}
function GetCompanyId Text {
   parameter Contract Text;
}
function GetObjectDescription Text {
   parameter PartNo Text;
}
function OperationalFunctionStatus List<Entity(ChildEquipmentObject)> {
   parameter MchCode Text;
   parameter Contract Text;

   basedon ChileEquipmentObjectSet;
   where = "SUP_MCH_CODE = :MchCode and SUP_CONTRACT = :Contract";

}
function OperationalLocationStatus List<Entity(ChildEquipmentObject)> {
   parameter MchCode Text;
   parameter Contract Text;
   basedon ChileEquipmentObjectSet;
   where = "LOCATION_MCH_CODE = :MchCode and LOCATION_CONTRACT = :Contract";

}

function OperationalFromStatus List<Entity(ChildEquipmentObject)> {
   parameter MchCode Text;
   parameter Contract Text;
   basedon ChileEquipmentObjectSet;
   where = "FROM_MCH_CODE = :MchCode and FROM_CONTRACT = :Contract";
}

function OperationalProcessStatus List<Entity(ChildEquipmentObject)> {
   parameter MchCode Text;
   parameter Contract Text;
   basedon ChileEquipmentObjectSet;
   where = "PROCESS_MCH_CODE = :MchCode and PROCESS_CONTRACT = :Contract";

}

function OperationalToStatus List<Entity(ChildEquipmentObject)> {
   parameter MchCode Text;
   parameter Contract Text;
   basedon ChileEquipmentObjectSet;
   where = "TO_MCH_CODE = :MchCode and TO_CONTRACT = :Contract";
}

function OperationalElectricalStatus List<Entity(ChildEquipmentObject)> {
   parameter MchCode Text;
   parameter Contract Text;
   basedon ChileEquipmentObjectSet;
   where = "CIRCUIT_MCH_CODE = :MchCode and CIRCUIT_CONTRACT = :Contract";
}

function OperationalPipeSystemStatus List<Entity(ChildEquipmentObject)> {
   parameter MchCode Text;
   parameter Contract Text;
   basedon ChileEquipmentObjectSet;
   where = "PIPE_MCH_CODE = :MchCode and PIPE_CONTRACT = :Contract";
}

function GetType List<Entity(TypeDesignation)> {
   parameter MchType Text;
   where = "MCH_TYPE = :MchType AND OBJSTATE = 'Active'";
}

function GetActiveObjectLevel List<Entity(EquipmentObjectLevel)> {
   where = "OBJSTATE = 'Active'";
}
function GetActiveMchType List<Entity(EquipmentObjType)> {
   where = "OBJSTATE = 'Active'";
}

function GetActiveTypeDesignation List<Entity(TypeDesignation)> {
   where = "OBJSTATE = 'Active'";
}

function GetActiveCriticality List<Entity(EquipmentCriticality)> {
   where = "OBJSTATE = 'Active'";
}



function GetCostCenterAcc List<Entity(Account)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeB List<Entity(CodeB)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeC List<Entity(CodeC)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeD List<Entity(CodeD)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeE List<Entity(CodeE)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeF List<Entity(CodeF)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeG List<Entity(CodeG)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeH List<Entity(CodeH)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeI List<Entity(CodeI)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeJ List<Entity(CodeJ)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterView Text {
   parameter Contract Text;
}

function GetParentData Structure(GetParentDetailReturn) {
   parameter SupContract Text;
   parameter SupMchCode Text;
}

function GetMchType Text {
   parameter Type Text;
}
function GetIsSerialTr Text {
   parameter PartNo Text;
}
function GetConnectedObjString Text {
   parameter MchCode Text;
   parameter Contract Text;
}

function GetDefaultPipeValue Structure(ObjectStructureNextLevelStruct) {
   parameter ObjectLevel Text;

}
function GetDefaultLocationValue Structure(ObjectStructureNextLevelStruct) {
   parameter ObjectLevel Text;

}
function GetDefaultFunctionValue Structure(ObjectStructureNextLevelStruct) {
   parameter ObjectLevel Text;

}
function GetDefaultFromValue Structure(ObjectStructureNextLevelStruct) {
   parameter ObjectLevel Text;

}
function GetDefaultToValue Structure(ObjectStructureNextLevelStruct) {
   parameter ObjectLevel Text;

}
function GetDefaultProcessValue Structure(ObjectStructureNextLevelStruct) {
   parameter ObjectLevel Text;

}
function GetDefaultElectricalValue Structure(ObjectStructureNextLevelStruct) {
   parameter ObjectLevel Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ObjectStructureNextLevelStruct {
   attribute PageType Text;
   attribute ObjectLevelValidation Text;

}
structure GetParentDetailReturn {
   attribute GroupId Text;
   attribute CostCenter Text;
   attribute MchLoc Text;
   attribute MchPos Text;
}

--------------------------------- VIRTUALS ----------------------------------
virtual ObjectConnVirtual {
   attribute MchCode Text {
      label = "Select the connected object to follow in the table below";
      maxlength = 100;
      format = uppercase;
   }
   attribute Contract Text {
      maxlength = 5;
      format = uppercase;
   }
   attribute SearchString Text;
   array ObjectConnArray(MchCode, Contract) to EquipmentObjectConn(MchCode, Contract);
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


