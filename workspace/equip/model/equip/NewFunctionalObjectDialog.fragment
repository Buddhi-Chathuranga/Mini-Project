-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181017  SHEPLK  SAUXXW4-1592 dlgNewFunctionalObject - New Functional Object generated from MTG 1.31
--  181019  SHEPLK  SAUXXW4-1583 dlgCreateFunctionalObject - New Functional Object
--  200106  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  210708  RUSSLK  AM21R2-2103, Removed EquipmentObjectLevel selector,Introduced ObjLevelSelector and Added EquipmentObjectLevel Entity.
-----------------------------------------------------------------------------
fragment NewFunctionalObjectDialog;
component EQUIP;
layer Core;
description "Create New Functional object";

----------------------------- CLIENT FRAGMENTS ------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog DlgNewFunctionalObject for StructDlgNewFunctionalObject {
   label = "New Functional Object Connected to ${MchCode} ${Contract} ${MchName}";
   input(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, NewContract, MakeSupMchCodeVisible);
   output(MchCode, Contract, MchName, NewMchCode, NewContract, NewMchName, GroupId, MchType, Type, ObjectLevel, SerialsAllowed, CostCenter, MchLoc, MchPos);
   group NewFunctionalObject;

   commandgroup ButtonCommandGroup {

      command Ok {
         enabled = [NewMchCode != null and NewContract != null and NewMchName != null and ObjectLevel != null];
      }
      command Cancel;
   }
}

---------------------------------- GROUPS -----------------------------------
group NewFunctionalObject for StructDlgNewFunctionalObject {
   label = "New Functional Object";
   field NewMchCode {
      size = Large;
      label = "Object ID";
   }
   lov NewContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Large;
      label = "Site";
   }
   field NewMchName {
      size = Large;
      label = "Description";
   }
   lov GroupIdRef with EquipmentObjGroup using GetActiveGroupIdForFunc {
      search = GroupId, Description;
      size = Large;
      label = "Group ID";
   }
   lov MchTypeRef with EquipmentObjType using GetActiveMchTypeForFunc {
      search = MchType, Description;
      size = Large;
      label = "Object Type";
   }
   lov TypeRef with TypeDesignation using GetActiveTypeDesignationForFunc {
      search = Type, Description;
      size = Large;
      label = "Type Designation";
      validate command {
         variable SMchType;
         execute {
            if [Type != null and MchType != null] {
               call GetMchType(Type) into SMchType;
               if [SMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }
            }
            if [Type != null and MchType = null] {
               call GetMchType(Type) into MchType;
            }
         }
      }
   }
   lov ObjectLevelRef with ObjLevelSelector using GetActiveObjLevel {
      size = Large;
      label = "Object Level";
      search = ObjLevelToSearch, LevelSeq;
      validate command {
         variable CheckSerialsAllowed;
         variable CheckSerialsAllowed1;
         execute {
            call GetIndividualAware(ObjectLevelToSearch) into CheckSerialsAllowed;
            call GetClientValue() into CheckSerialsAllowed1;
            if [CheckSerialsAllowed = CheckSerialsAllowed1] {
               set SerialsAllowed = true;
            }
            if [CheckSerialsAllowed != CheckSerialsAllowed1] {
               set SerialsAllowed = false;
            }
            if [ObjectLevelToSearch = null] {
               set SerialsAllowed = false;
            }
         }
      }
   }
   field MakeSupMchCodeVisible {
      visible = [false];
   }
   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Large;
      label = "Belongs to Site";
      visible = [MakeSupMchCodeVisible = 1];
   }
   lov SupMchCodeRef with ReferenceEquipmentFunctionalSelector {
      search = MchCode, MchName;
      size = Large;
      label = "Belongs to Object ID";
      visible = [MakeSupMchCodeVisible = 1];
      validate command {
         execute {
            if [SupMchCode = null] {
               set SupMchName = null;

            }
            else {
               set SupMchName = SupMchCodeRef.MchName;
            }
         }
      }
   }
   field SupMchName {
      size = Large;
      label = "Object Description";
      visible = [MakeSupMchCodeVisible = 1];
   }
   field SerialsAllowed {
      size = Large;
      label = "Serials Allowed";
      required = [true];
      editable = [false];
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector EquipmentObjGroup for EquipmentObjGroup {
   static GroupId;
   static Description;
   static UnitCode;
   static NomRuntime;
   static Objstate;
}

@Override
selector TypeDesignation for TypeDesignation {
   static Type;
   static Description;
   static MchType;
   static Objstate;
}

@Override
selector EquipmentObjType for EquipmentObjType {
   static MchType;
   static InMchType;
   static Description;
   static ItemClassId;
   static PositionType;
   static Objstate;
}

selector ObjLevelSelector for EquipmentObjectLevel {
   label = "";
   static ObjLevelToSearch;
   static LevelSeq;
   static IndividualAware;
   static CreatePm;
   static CreateWo;
   static Objstate;
}
--------------------------- PROJECTION FRAGMENTS ----------------------------
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObjectLevel {
   crud = Read;
   //This ObjLevelToSearch is used by ObjLevelSelector to search Object level without case matching.
   attribute ObjLevelToSearch Text {
      fetch = "Obj_Level";
      label = "Object Level";
   }
}

-------------------------------- STRUCTURES ---------------------------------
structure StructDlgNewFunctionalObject {
   // PPJ.Runtime.Windows.SalGroupBox 'gbNew_Object' is skipped from being processed. Please check and do the needful.
   attribute MchCode Text {
      label = "Object ID";
      maxlength = 100;
      format = uppercase;
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute MchName Text {
      label = "Description";
      maxlength = 200;
   }
   attribute NewMchCode Text {
      label = "Object ID";
      maxlength = 100;
      format = uppercase;
   }
   attribute NewContract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute NewMchName Text {
      label = "Description";
      maxlength = 200;
   }
   attribute GroupId Text {
      label = "Group ID";
      maxlength = 10;
      format = uppercase;
      fetch = "Equipment_Object_API.Get_Group_Id(Contract, MchCode)";
   }
   attribute MchType Text {
      label = "Object Type";
      maxlength = 20;
      format = uppercase;
   }
   attribute Type Text {
      label = "Type Designation";
      maxlength = 30;
      format = uppercase;
   }
   attribute ObjectLevel Text {
      label = "Object Level";
      maxlength = 30;
   }
   attribute SupContract Text {
      label = "Belongs to Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute SupMchCode Text {
      label = "Belongs to Object ID";
      maxlength = 100;
      format = uppercase;
   }
   attribute SupMchName Text {
      label = "Object Description";
      maxlength = 200;
   }
   attribute SerialsAllowed Boolean("TRUE", "FALSE") {
      label = "Serials Allowed";
      required = [true];
   }
   attribute MakeSupMchCodeVisible Number;

   attribute CostCenter Text {

      fetch = "Equipment_Object_API.Get_Cost_Center(Contract, MchCode)";
   }
   attribute MchLoc Text {
      fetch = "Equipment_Object_API.Get_Mch_Loc(Contract, MchCode)";
   }
   attribute MchPos Text {
      fetch = "Equipment_Object_API.Get_Mch_Pos(Contract, MchCode)";
   }
   reference NewContractRef(NewContract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";
   }
   reference TypeRef(MchType, Type) to TypeDesignation(MchType, Type) {
      label = "Type Designation";
   }
   reference ObjectLevelRef(ObjectLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "Object Level";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Belongs to Object ID";
   }
}

---------------------------------- ACTIONS ----------------------------------
action NewFunctionalObject {
   initialcheck implementation;
   ludependencies = EquipmentFunctional, EquipmentObject;
   parameter MchCode Text;
   parameter Contract Text;
   parameter MchName Text;
   parameter ObjLevel Text;
   parameter MchType Text;
   parameter GroupId Text;
   parameter Type Text;
   parameter SupContract Text;
   parameter SupMchCode Text;
   parameter CostCenter Text;
   parameter MchLoc Text;
   parameter MchPos Text;
   parameter StructureType Text;
   parameter Owner Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetIndividualAware Text {
   parameter ObjLevel Text;
}
function GetClientValue Text {
}
function GetActiveGroupIdForFunc List < Entity(EquipmentObjGroup) > {
   where = "OBJSTATE in ('Active')";
}
function GetActiveMchTypeForFunc List < Entity(EquipmentObjType) > {
   where = "OBJSTATE in ('Active')";
}
function GetActiveTypeDesignationForFunc List < Entity(TypeDesignation) > {
   where = "OBJSTATE in ('Active')";
}
function GetActiveObjLevel List < Entity(EquipmentObjectLevel) > {
   where = "OBJSTATE in ('Active')";
}
