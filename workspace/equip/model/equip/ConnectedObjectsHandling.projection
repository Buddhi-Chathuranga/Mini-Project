--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-08-06  SSILLK  SAUXXW4-1269, Converted MTG Version: 1.24. Implementation for Enterprise Explorer Sources frmObjectConn - Connected Objects
-- 2022-01-11  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                     and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
--------------------------------------------------------------------------------------
projection ConnectedObjectsHandling;
component EQUIP;
layer Core;
description "Manage Equipment Object Connections";
category Users;
include fragment EquipmentAllObjectUivSelector;
include fragment EquipmentAllObjectLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment EquipmentAllObjectPerfQuery;

----------------------------- MAIN ENTRY POINTS -----------------------------


------------------------------ ENTITY DETAILS -------------------------------


---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.24
// Enterprise Explorer Source: frmObjectConn
// Language: PROG
// WARNING: Due to not being able to locate and use resources from the 'en-US' Satellite Assembly, Labels may be incorrectly defined as being based on their corresponding PROG definitions.

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjectSet for EquipmentObject;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObject {
 --  from = "equipment_all_object_uiv";
   keys = MchCode, Contract {
      where = "MCH_CODE = :MchCode and CONTRACT = :Contract";
   }
   supportwarnings = [true];
   attribute MchCode Text {
      editable = [false];
   }
   attribute MchName Text {
      required = [true];
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute OperationalStatus Text {
      maxlength = 20;
   }
   attribute OperationalStatusDb Text {
      maxlength = 200;
      editable = [false];
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   array ObjConnArray(EquipmentObjectSeq) to EquipmentObjectConn(EquipmentObjectSeq);
}
@Override
entity EquipmentObjectConn {
   crud = Create, Read, Delete;
   keys = ConsistEquObjectSeq, ConnectionType, EquipmentObjectSeq {
      where = "Consist_Equ_Object_Seq = :ConsistEquObjectSeq and connection_type = :ConnectionType and equipment_object_seq = :EquipmentObjectSeq";
   }

   attribute Contract Text {
      label = "Site";
      // searchable = false;
   }
   attribute ContractConsist Text {
      fetch = "CONTRACT_CONSIST";
      label = "Site";
      maxlength = 5;
      // searchable = false;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute OperationalStatus Text {
      fetch = "EQUIPMENT_OBJECT_API.Get_Operational_Status(CONTRACT_CONSIST, MCH_CODE_CONSIST)";
      label = "Operational Status";
      maxlength = 2000;
      editable = [false];
   }

   reference EquipmentObjectRef(ContractConsist, MchCodeConsist) to EquipmentObject(Contract, MchCode);
   reference EquipmentObjConnTypeRef(ConnectionType) to EquipmentObjConnType(ConnectionType);
   reference ContractConsistRef(ContractConsist) to UserAllowedSiteLov(Contract) {
      label = "Connected Site";
      where = "EQUIPMENT_OBJECT_API.Get_Operational_Status_Db(CONTRACT_CONSIST, MCH_CODE_CONSIST) != SCRAPPED";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference MchCodeConsistRef(ContractConsist, MchCodeConsist) to EquipmentAllObjectLov(Contract, MchCode) {
      label = "Connected Object ID";
      copy EquipmentObjectSeq to ConsistEquObjectSeq;
   }
   reference MchCodeConsistPerfRef(ContractConsist, MchCodeConsist) to EquipmentAllObjectPerf(Contract, MchCode);
   reference ConnectionTypeRef(ConnectionType) to EquipmentObjConnType(ConnectionType) {
      label = "Connection Type";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Object ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function GetObjectLevel Text {
   parameter Contract Text;
   parameter MchCode Text;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


