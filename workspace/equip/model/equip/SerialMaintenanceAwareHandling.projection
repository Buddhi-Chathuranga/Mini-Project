-------------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  211101  NEKOLK  AM21R2-2960 : EQUIP redesign PARTCA changes : alternate_id obsolete work .
--  180830  SHEPLK  SAUXXW4-1637, tbwMakeMaintenanceAware - Serial Maintenance Aware - Created using MTG 1.26
-----------------------------------------------------------------------------
projection SerialMaintenanceAwareHandling;
component EQUIP;
layer Core;
description "Set Serial objects to be Maintenance Aware";
category Users;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------


------------------------------ ENTITY DETAILS -------------------------------


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartSerialCatalogSet for PartSerialCatalog;
entityset SerialPartsVirtualSet for SerialPartsVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartSerialCatalog {
   crud = Read;
   where = "OBJSTATE != 'InFacility' AND   OBJSTATE != 'InRepairWorkshop' AND  OBJSTATE != 'Contained' AND  OBJSTATE != 'Unlocated'";

   supportwarnings = [true];
   attribute SerialNo Text {
      format = uppercase;
   }
   attribute MaintenanceAware Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Object_API.Check_Serial_Exist(part_no, serial_no)";
      label = "Maintenance Aware";
      required = [true];
   }
   attribute DefaultSite Text {
      fetch = "User_Default_API.Get_Contract";
   }
   attribute SerialExist Text {
      fetch = "Equipment_Object_API.Check_Serial_Exist(part_no, serial_no)";
   }
   attribute MoveFacility Text {
      //fetch = "Equipment_Object_API.Check_Serial_Exist(part_no, serial_no)";
      fetch = "NULL";
   }
   attribute DeliveredToInternalCustomer Text {
      fetch = "Part_Serial_Catalog_API.Delivered_To_Internal_Customer(part_no, serial_no)";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query SerialPartList {
   from = "PART_SERIAL_CATALOG";
   lu = PartSerialCatalog;
   attribute PartNo Text;
   attribute SerialNo Text;
   attribute Site Text {
      fetch = "User_Default_API.Get_Contract";
      label = "Object Site";
   }
   attribute ObjectId Text {
      fetch = "NULL";
   }
   attribute Objstate Enumeration(PartSerialCatalogState);


}
---------------------------------- ACTIONS ----------------------------------
action SelectAllInList {
   initialcheck implementation;
   ludependencies = SerialMaintAwarePartListVirtual;

   parameter Objkey Text;

}

--------------------------------- FUNCTIONS ---------------------------------
function DeliveredToInternalCustomer Text {
   parameter PartNo Text;
   parameter SerialNo Text;
}



-------------------------------- STRUCTURES ---------------------------------
structure PartDetails {
   attribute PartNo Text;
   attribute SerialNo Text;
}

--------------------------------- VIRTUALS ----------------------------------
//For the Assistant
virtual  SerialPartsVirtual {
   attribute PartNo Text;
   attribute SerialNo Text;
   attribute PartNoList Text;
   attribute PlaceAllSerialInFac Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute IssuedExist Text;
   array MaintAwareListArray(PartNoList) to SerialMaintAwarePartListVirtual(PartNoList);
   action Finish {
      ludependencies = PartSerialCatalog;

   }

}


//For the list inside assistant
virtual SerialMaintAwarePartListVirtual {
   crud = Update, Read;
   attribute PartNoList Text;
   attribute PartNo Text;
   attribute SerialNo Text;
   attribute Site Text;
   attribute ObjectId Text;
   attribute Objstate Text;
   attribute DeliverdToInternalCustomer Text;
   attribute PlaceSerialInFacility Boolean("TRUE", "FALSE") {
      required = [true];

   }


   reference SiteRef(Site) to UserAllowedSiteLov(Contract);
}



--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

