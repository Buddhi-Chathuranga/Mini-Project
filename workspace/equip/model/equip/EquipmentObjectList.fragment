 --------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-09-13  KrRaLK  SAUXXW4-9706, Created EquipmentObjectList fragment.
-- 2018-10-17  SHEPLK  SAUXXW4-1592, Added CreateFunctionalObjectCommand.
-- 2018-10-24  ISHHLK  SAUXXW4-1247, Added NewSerialObjectCommand.
-- 2018-10-24  BAKALK  SAUXXW4-10496,Added/Implemented commands mentioned in Task
-- 2018-10-26  CLEKLK  SAUXXW4-10497, Added commands.
-- 2018-11-01  BAKALK  SAUXXW4-10564, Added some base validations
-- 2018-11-11  BAKALK  SAUXXW4-10564, Condition on Object Information got back afer Framework fixed Multiselect Expression issue ( TEUXX-14914)
-- 2018-12-20  CLEKLK  SAUXXW4-11278, Corrected the issues in implementation-2
-- 2018-12-31  DITALK  SAUXXW4-11279, Corrected  issues in EquipmentObjectList fragment.
-- 2019-04-02  LoPrlk  SAUXXW4-13050, Functionality was altered to use plain LOVs instead of lov switches to fetch code parts.
-- 2020-01-03  LASSLK  SAXTEND-1244,  Implement LOV Filtering
-- 2020-06-30  DEEKLK  AMXTEND-439 Added arrays RowDataArray, ArraySupplierWarranty and ArrayCustomerWarranty to EquipmentObjectList
-- 2020-07-22  CLEKLK  AMXTEND-700, modified validate command of PartNoRef added GetPartDescription
-- 2020-07-24  CLEKLK  AMXTEND-371, Modofied EquipmentObjectList entity
-- 2020-08-12  CLEKLK  AMZEAX-225,changed entity EquipmentObjectParam to EquipObjectParamList.
-- 2020-10-22  LASSLK  AM2020R1-6659, Modified dlgCopyFunctionalObject and DlgCopySerialObject
-- 2021-01-04  LASSLK  AM2020R1-7246, Added CriticalAnalysisResultsArray and CmStdId attribute to entity EquipmentObjectList
-- 2021-02-03  CLEKLK  AM2020R1-7085, Added sepearte commands for "Status for Structure" option
-- 2021-05-05  RUANLK  AM21R2-1297, Added PM filter option for Work task tab
-- 2021-05-19  RUSSLK  AM2020R1-7787, Modified EquipmentObjectfieldset to improve performane.
-- 2021-06-25  SHAGLK  AM21R2-1493, Added new attribute ToolEquipment
-- 2021-07-08  RUSSLK  AM21R2-2103,Introduced EquipmentObjLevelSelector and Added EquipmentObjectLevel Entity.
-- 2021-07-15  RUSSLK  AMZEAX-648, Moved GbNotesGroup,SerialNotesGroup from FunctionalObjectTab,SerialObjectTab fragments to EquipmentObjectList fragment.
-- 2021-07-17  SHAGLK  AM21R2-2063, Added seperate commands for "New Functional Object" command for each structure type.
-- 2021-09-21  HRATLK  AM21R2-2783, Added RetrospectiveWorkReportingEAMCommand and RetrospectiveWorkReportingSMCommand commands.
-- 2021-10-01  JIHALK  AMZEAX-697, Added GetItemClassId Function.
--------------------------------------------------------------------------------------

fragment EquipmentObjectList;
component EQUIP;
layer Core;
description "Use to view information on entered objects, or to enter information on a new object in the equipment structure.";

include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;

include fragment OrgCodeAllowedSiteLovSelector;
include fragment NewSerialObjectDialog;
include fragment MoveSerialObjectDialog;
include fragment EquipmentAllObjectLov1Selector;
include fragment EmployeeLovSelector;
include fragment CopySerialObjectDialog;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment EquipObjectLocationLovSelector;
include fragment EquipmentObjectUivSelector;
include fragment EquipmentAllObjectUivSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- MAIN PAGES ---------------------------------
page EquipmentSummaryForm using EquipmentObjectListSet {
   group ObjectInfoSummaryGroup;
   group ObjectGeneralGroup;
   group LocationandPositionGroup;
   group PartInfoGroup;
}
--------------------------------- COMMANDS ----------------------------------
-- Equipment Object Navigator / Onjects
command ObjectNavigatorCommand for EquipmentObjectList {
   label = "Equipment Object Navigator";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "tree/EquipmentObjectStructureNavigation/EquipObjectStructureTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
-- Service Object 360 Navigator / Onjects
@DynamicComponentDependency SERCAT
command ServiceNavigatorCommand for EquipmentObjectList {
   label = "Service Object 360";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "tree/ServiceViewOfEquipment/SeviceViewOfEquipTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
-- Object Information / Objects
command EquipObjectInformationCommand for EquipmentObjectList {
   label = "Object Information";
   icon = "popup";
   style = IconOnly;
   enabled = [count(*, ObjLevel = null) = 0 or count(*, ObjLevel != null) = 0];
   mode = SelectedRecords;
   bulkexecute {
      ifall[ObjLevel != null] {
         //functional
         bulknavigate "page/FunctionalObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
      }
      else {
         //serial
         bulknavigate "page/SerialObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
      }
   }
}
-- Structure / Objects
command StructureCommand for EquipmentObjectList {
   label = "Structure";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/ObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }


}

-- Connection / Objects=
command ConnectionsCommand for EquipmentObjectList {
   label = "Connections";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command OperationalStatusInOperationEquipmentObjectCommand for EquipmentObjectList {
   label = "In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call SetInOperationSerial(Contract, MchCode);
      }
      else {
         call SetInOperationFunctional(Contract, MchCode);
      }
   }
}
command OperationalStatusOutofOperationEquipmentObjectCommand for EquipmentObjectList {
   label = "Out of Operation";
   enabled = [OutOfOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetOutofOperationSerial(Contract, MchCode);
      }
      else {
         call  SetOutofOperationFunctional(Contract, MchCode);
      }
   }
}

command OperationalStatusScrappedEquipmentObjectCommand for EquipmentObjectList {
   label = "Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStatusScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStatusScrappedFunctional(Contract, MchCode);
      }
   }
}
command OperationalStatusStructureInOperationEquipmentObjectSCommand for EquipmentObjectList {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode, "S");
      }
   }
}
command OperationalStatusStructureInOperationEquipmentObjectECommand for EquipmentObjectList {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode, "E");
      }
   }
}
command OperationalStatusStructureInOperationEquipmentObjectPCommand for EquipmentObjectList {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode, "P");
      }
   }
}

command OperationalStatusStructureInOperationEquipmentObjectTCommand for EquipmentObjectList {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode, "T");
      }
   }
}
command OperationalStatusStructureInOperationEquipmentObjectRCommand for EquipmentObjectList {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode, "R");
      }
   }
}
command OperationalStatusStructureInOperationEquipmentObjectLCommand for EquipmentObjectList {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode, "L");
      }
   }
}
command OperationalStatusStructureInOperationEquipmentObjectCommand for EquipmentObjectList {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode, "F");
      }
   }
}

command OperationalStatusStructureOutofOperationEquipmentObjectCommand for EquipmentObjectList {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode, "F");
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode, "F");
         }
      }
   }
}
command OperationalStatusStructureOutofOperationEquipmentObjectLCommand for EquipmentObjectList {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode, "L");
               }
               exit;
            }
            when CANCEL {

               if[ObjLevel = null] {
                  call  SetOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode, "L");
         }
      }
   }
}
command OperationalStatusStructureOutofOperationEquipmentObjectRCommand for EquipmentObjectList {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode, "R");
               }
               exit;
            }
            when CANCEL {

               if[ObjLevel = null] {
                  call  SetOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode, "R");
         }
      }
   }
}
command OperationalStatusStructureOutofOperationEquipmentObjectTCommand for EquipmentObjectList {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode, "T");
               }
               exit;
            }
            when CANCEL {

               if[ObjLevel = null] {
                  call  SetOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode, "T");
         }
      }
   }
}
command OperationalStatusStructureOutofOperationEquipmentObjectPCommand for EquipmentObjectList {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode, "P");
               }
               exit;
            }
            when CANCEL {

               if[ObjLevel = null] {
                  call  SetOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode, "P");
         }
      }
   }
}
command OperationalStatusStructureOutofOperationEquipmentObjectSCommand for EquipmentObjectList {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode, "S");
               }
               exit;
            }
            when CANCEL {

               if[ObjLevel = null] {
                  call  SetOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode, "S");
         }
      }
   }
}
command OperationalStatusStructureOutofOperationEquipmentObjectECommand for EquipmentObjectList {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode, "E");
               }
               exit;
            }
            when CANCEL {

               if[ObjLevel = null] {
                  call  SetOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode, "E");
         }
      }
   }
}
command OperationalStatusStructureStrappedEquipmentObjectCommand for EquipmentObjectList {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode, "F");
      }
   }
}

command OperationalStatusStructureScrappedEquipmentObjectLCommand for EquipmentObjectList {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode, "L");
      }
   }
}
command OperationalStatusStructureScrappedEquipmentObjectRCommand for EquipmentObjectList {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode, "R");
      }
   }
}
command OperationalStatusStructureScrappedEquipmentObjectTCommand for EquipmentObjectList {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode, "T");
      }
   }
}
command OperationalStatusStructureScrappedEquipmentObjectPCommand for EquipmentObjectList {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode, "P");
      }
   }
}
command OperationalStatusStructureScrappedEquipmentObjectSCommand for EquipmentObjectList {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode, "S");
      }
   }
}
command OperationalStatusStructureScrappedEquipmentObjectECommand for EquipmentObjectList {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode, "E");
      }
   }
}

command OperationalConditionSetOperationalEquipmentObjectCommand for EquipmentObjectList {
   label = "Set Operational";
   enabled = [SetOperational = "TRUE" and ObjLevel = null];
   execute {
      call SetInOperative(Contract, MchCode);
   }
}
command OperationalConditionSetNonOperationalEquipmentObjectCommand for EquipmentObjectList {
   label = "Set Non Operational";
   enabled = [SetNonOperational = "TRUE" and ObjLevel = null];
   execute {
      call  SetNonOperative(Contract, MchCode);
   }
}
command OperationalConditionSetOperationalStrucCommand for EquipmentObjectList {
   label = "Set Structure Operational";
   enabled = [SetOperational = "TRUE" and ObjLevel = null];
   execute {
      call SetStructureOperational(Contract, MchCode);
   }
}
command OperationalConditionSetNonOperationalStrucCommand for EquipmentObjectList {
   label = "Set Structure Non Operational";
   enabled = [SetNonOperational = "TRUE" and ObjLevel = null];
   execute {
      call  SetStructureNonOperational(Contract, MchCode);
   }
}
command DeleteObjectCommand for EquipmentObjectList {
   label = "Delete Object";
   enabled = [MchCode != null];
   execute {
      call  DeleteObject(Contract, MchCode);
   }
}
command CreateFunctionalObjectCommand for EquipmentObjectList {
   label = "New Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, "F", NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateFunctionalObjectLCommand for EquipmentObjectList {
   label = "New Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, "L", NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateFunctionalObjectRCommand for EquipmentObjectList {
   label = "New Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, "R", NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateFunctionalObjectTCommand for EquipmentObjectList {
   label = "New Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, "T", NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateFunctionalObjectPCommand for EquipmentObjectList {
   label = "New Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, "P", NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateFunctionalObjectSCommand for EquipmentObjectList {
   label = "New Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, "S", NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateFunctionalObjectECommand for EquipmentObjectList {
   label = "New Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, "E", NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateSerialObjectCommand for EquipmentObjectList {
   label = "New Serial Object";
   enabled = [MchCode != null and IsCategoryObj != "TRUE" and(OperationalStatusDb != "SCRAPPED" and OperationalStatusDb != "NOT_APPLICABLE") and((ObjLevel != null and(IndividualAware = IndividualAwareClientValue) or ObjLevel = null))];
   variable DfNewMchCodeVar;
   variable DfNewContract;
   variable DfNewPartNo;
   variable DfType;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMchType;
   variable SerialTrackRcptText;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }

   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog CreateSerialObjectDialog(MchCode, Contract, DfNewPartNo, DfSerialNo, GroupId, DfMchTypeRef, DfTypeRef, DfMakeSupMchCodeVisible, MchName)
      into(DfNewMchCodeVar, DfNewContract, DfNewPartNo, DfSerialNo, GroupId, DfMchType, DfType, DfSupContract, DfSupMchCode, DfSupMchName, DfCostCenter, DfMchLoc, DfMchPos, DfOwnership, DfOwner) {
         when OK {
            call GetSerialTrackRcpt(DfNewPartNo) into SerialTrackRcptText;
            if[SerialTrackRcptText = "FALSE"] {
               confirm("Part no ${DfNewPartNo} is not serial tracked. It will not be possible to move the serial object to the inventory. Still want to save this record?.") {
                  when OK {
                     call NewSerialObject(DfNewContract, DfNewMchCodeVar, DfNewPartNo, DfSerialNo, DfMchType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, DfOwner, DfOwnership);
                     refresh;
                  }
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
            if[SerialTrackRcptText = "TRUE"] {
               call NewSerialObject(DfNewContract, DfNewMchCodeVar, DfNewPartNo, DfSerialNo, DfMchType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, DfOwner, DfOwnership);
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CopyObjectCommand for EquipmentObjectList {
   label = "Copy Object";
   enabled = [(ObjLevel = null and MchCode != null and Contract != null and ReturnInFacilityOrWorkshop = "TRUE") or(ObjLevel != null and MchCode != null and Contract != null)];
   variable PartNo;
   variable Contract;
   variable DestContract;
   variable MchCode;
   variable MchName;
   variable PartRev;
   variable SupMchCode;
   variable SupContract;
   variable DfDestSupMchCodeName;
   variable IsSerial;
   variable NewContractVar;
   variable NewMchCodeVar;
   variable NewMchNameVar;
   variable ParentContract;
   variable ParentMchCode;
   variable ParentMchName;
   variable CbSpareParts;
   variable CbRequirements;
   variable CbParameters;
   variable CbTestPoints;
   variable CbDocuments;
   variable CbPm;
   variable CbParties;
   variable VarFormName Text;
   execute {
      if [ObjLevel = null] {
         call GetAssistantMchName(SupContract, SupMchCode)into DfDestSupMchCodeName;
         set VarFormName = "ObjectList";
         dialog DlgCopySerialObject(PartNo, Contract, Contract, MchCode, MchName, PartRev, SupMchCode, SupContract, DfDestSupMchCodeName, VarFormName, AppliedPmProgramId) into
         (Contract2, MchCode, DestContract, DestMchCode, SerialNo, PartNo, PartRev, SupMchCode, SparePart, TechData, Parameter, TestPnt, Document, Pm, Party, SupContract, IsSerial, CopySerialReturn) {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }
         }
      }
      else {
         call GetFuncMchName(ParentContract, ParentMchCode) into ParentMchName;
         dialog DlgCopyFunctionalObj(Contract, MchCode, MchName, SupContract, SupMchCode, ParentMchName, AppliedPmProgramId)
         into(NewContractVar, NewMchCodeVar, NewMchNameVar, ParentContract, ParentMchCode, ParentMchName, CbSpareParts, CbRequirements, CbParameters, CbTestPoints, CbDocuments, CbPm, CbParties) {
            when OK {
               call CopyFunctionalObject(NewContractVar, NewMchCodeVar, NewMchNameVar, Contract, MchCode, ParentContract, ParentMchCode, CbSpareParts, CbRequirements, CbParameters, CbTestPoints, CbDocuments, CbPm, CbParties);
               info("The Functional object is now copied.");
               navigate "page/FunctionalObject/Form?$filter=MchCode eq $[NewMchCodeVar] and Contract eq $[NewContractVar]";
            }
            when CANCEL {
               exit CANCEL;
            }
         }
      }
   }
}
command PMforObjectStructureCommand for EquipmentObjectList {
   label = "PM for Object Structure";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null and CreatePm = "TRUE" or  ObjLevel = null];
   bulkexecute {
      bulknavigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ActiveWorkOrdersCommand for EquipmentObjectList {
   label = "Active Work Orders";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null and CreateWo = "TRUE" or ObjLevel = null];
   bulkexecute {
      bulknavigate "page/ActiveWorkOrders/List?$filter=MchCode eq $[MchCode] and MchCodeContract eq $[Contract]";
   }
}
command HistoricalWorkOrdersCommand for EquipmentObjectList {
   label = "Historical Work Orders";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null and CreateWo = "TRUE" or ObjLevel = null];
   bulkexecute {
      bulknavigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdTasksCommand for EquipmentObjectList {
   label = "Work Tasks";
   enabled = [MchCode != null and Contract != null and CreateWo = "TRUE" or ObjLevel = null];
   execute {
      navigate "page/WorkTasks/List?$filter=ReportedObjectId eq $[MchCode] and ReportedObjectSite eq $[Contract]";
   }
}
@DynamicComponentDependency PCMSCI
command ServiceContractsforObjectCommand for EquipmentObjectList {
   label = "Service Contracts for Object";
   mode = SelectedRecords;
   enabled = [ObjExist = "TRUE"];
   bulkexecute {
      bulknavigate "page/ServiceContractsForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command PartSerialCommand for EquipmentObjectList {
   label = "Part Serial";
   mode = SelectedRecords;
   enabled = [ObjLevel = null and PartNo != null and SerialNo != null];
   bulkexecute {
      bulknavigate "page/PartSerial/Form?$filter=PartNo eq $[PartNo] and SerialNo eq $[SerialNo]";
   }
}
command ValidateSave for EquipmentObjectList {
   bulkexecute {
      if [UpdateCount > 0] {
         ifany [(Requirements = true) and(OldMchType != MchType) and(MchType != null) and(MchTypeHasTechReference = "FALSE")] {
            ifany [ObjLevel = null] {
               inquire("Do you want to remove Technical Data along with the replacement of the Object Type?") {
                  when YES {
                     bulkset RemoveRequirements = "TRUE";
                  }
                  when NO {
                     bulkset RemoveRequirements = "FALSE";
                  }
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
            else {
               inquire("Do you want to remove Requirements along with the replacement of the Object Type?") {
                  when YES {
                     bulkset RemoveRequirements = "TRUE";
                  }
                  when NO {
                     bulkset RemoveRequirements = "FALSE";
                  }
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
         }
         else {
            ifany [(Requirements = true) and(OldMchType != MchType) and(MchType != null) and(MchTypeHasTechReference = "TRUE")] {
               ifany [ObjLevel = null] {
                  inquire("Do you want to replace Technical Data along with the replacement of the Object Type?") {
                     when YES {
                        bulkset RemoveRequirements = "TRUE";
                     }
                     when NO {
                        bulkset RemoveRequirements = "FALSE";
                     }
                     when CANCEL {
                        exit CANCEL;
                     }
                  }
               }
               else {
                  inquire("Do you want to replace Requirements along with the replacement of the Object Type?") {
                     when YES {
                        bulkset RemoveRequirements = "TRUE";
                     }
                     when NO {
                        bulkset RemoveRequirements = "FALSE";
                     }
                     when CANCEL {
                        exit CANCEL;
                     }
                  }
               }
            }
            else {
               ifany [(Requirements = true) and(OldMchType != MchType) and(MchType = null)] {
                  ifany [ObjLevel = null] {
                     inquire("Do you want to remove Technical Data along with the deletion of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
                  else {
                     inquire("Do you want to remove Requirements along with the deletion of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
               }
               else {
                  ifany [(Requirements = true) and(OldType != Type) and(OldType != null) and(Type != null)] {
                     ifany [ObjLevel = null] {
                        inquire("Do you want to replace Technical Data along with the replacement of the Type Designation?") {
                           when YES {
                              bulkset RemoveRequirements = "TRUE";
                           }
                           when NO {
                              bulkset RemoveRequirements = "FALSE";
                           }
                           when CANCEL {
                              exit CANCEL;
                           }
                        }
                     }
                     else {
                        inquire("Do you want to replace Requirements along with the replacement of the Type Designation?") {
                           when YES {
                              bulkset RemoveRequirements = "TRUE";
                           }
                           when NO {
                              bulkset RemoveRequirements = "FALSE";
                           }
                           when CANCEL {
                              exit CANCEL;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }
}

@DynamicComponentDependency WO
command CreateRepaireWorkOrderCommand for EquipmentObjectList {
   label = "New Repair Work Order";
   enabled = [IsSerialReserved = "FALSE" and   ObjLevel = null];
   execute {
      navigate  "assistant/CreateRepairWorkOrderAssistant/RepairWizardAssistant?$action=SetTaskAttr{MchCodeContractNew:$[Contract], MchCodeNew:$[MchCode], ReportedByNew:$[CreatedBy], ContractNew: $[DefaultSite], RegDateNew: $[RegDate], PartNoNew: $[PartNo], SerialNoNew: $[SerialNo]}";
   }
}
command FaultReportCommand for EquipmentObjectList {
   label = "New Fault Report";
   enabled = [MchCode != null and SerialScrapped = "FALSE" or FunctionalScrapped = "FALSE" and CreateWo = "TRUE" or ObjLevel = null];
   variable WOSite Text;


   execute {

      call GetUserDefaultContract() into WOSite;
      navigate "assistant/CreateFaultReportAssistant/FaultReportWizardAssistant?$action=SetTaskAttrForSteps{ ReportedByNew: $[CreatedBy], ContractNew: $[WOSite], RegDateNew: $[RegDate], ReportMchCode: $[MchCode], MchCodeContractNew: $[Contract]} ";
   }
}
command ServiceRequestCommand for EquipmentObjectList {
   label = "New Service Request";
   enabled = [MchCode != null and SerialScrapped = "FALSE" or FunctionalScrapped = "FALSE" and CreateWo = "TRUE" or ObjLevel = null];
   execute {
      --navigate "page/ServiceRequestWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract] ";
      navigate "assistant/CreateServiceRequest/CreateServiceRequestAssistant?$action=SetAttrForService{ObjectSiteNew: $[Contract], ReportMchCode: $[MchCode], ReportedByNew: $[CreatedBy]}";
   }
}
@DynamicComponentDependency WO
command RetrospectiveWorkReportingEAMCommand for EquipmentObjectList {
   label = "Create Retrospective Work Reporting EAM";
   mode = SingleRecord;
   enabled = [MchCode != null and SerialScrapped = "FALSE" or FunctionalScrapped = "FALSE" and CreateWo = "TRUE" or ObjLevel = null];
   variable WOSite Text;
   execute {
      call GetUserDefaultContract() into WOSite;
      navigate  "assistant/RetroWorkRep/RetroWorkRepAssistant?$action=SetCommonAttr{NewActualObjectId: $[MchCode], NewActualObjectSite: $[Contract], NewOrganizationSite: $[WOSite], RetroCommand: 'RetroEAMCommand'} ";
   }
}
@DynamicComponentDependency WO
command RetrospectiveWorkReportingSMCommand for EquipmentObjectList {
   label = "Create Retrospective Work Reporting SM";
   mode = SingleRecord;
   enabled = [MchCode != null and SerialScrapped = "FALSE" or FunctionalScrapped = "FALSE" and CreateWo = "TRUE" or ObjLevel = null];
   variable WOSite Text;
   execute {
      call GetUserDefaultContract() into WOSite;
      navigate  "assistant/RetroWorkRep/RetroWorkRepAssistant?$action=SetCommonAttr{NewActualObjectId: $[MchCode], NewActualObjectSite: $[Contract], NewOrganizationSite: $[WOSite], RetroCommand: 'RetroSMCommand'} ";
   }
}
--------------------------------- SELECTORS ---------------------------------
group TabWorkOrderSelectionGroup for EquipWorkSelection {
   label = "";
   field VisibleActiveWorkTasks {
      size = Small;
      validate command {
         execute {
            if [VisibleActiveWorkTasks = true] {
               set VisibleAllActiveWorkTasks = false;
               set VisibleHistoricalWorkTasks = false;
               set VisiblePMWorkTasks = false;
            }
         }
      }
   }
   field VisibleAllActiveWorkTasks {
      size = Small;
      validate command {
         execute {
            if [VisibleAllActiveWorkTasks = true] {
               set VisibleActiveWorkTasks = false;
               set VisibleHistoricalWorkTasks = false;
               set VisiblePMWorkTasks = false;
            }
         }
      }
   }
   field VisibleHistoricalWorkTasks {
      size = Small;
      validate command {
         execute {
            if [VisibleHistoricalWorkTasks = true] {
               set VisibleAllActiveWorkTasks = false;
               set VisibleActiveWorkTasks = false;
               set VisiblePMWorkTasks = false;
            }
         }
      }
   }
   field VisiblePMWorkTasks {
      size = Small;
      validate command {
         execute {
            if [VisiblePMWorkTasks = true] {
               set VisibleAllActiveWorkTasks = false;
               set VisibleActiveWorkTasks = false;
               set VisibleHistoricalWorkTasks = false;
            }
         }
      }
   }
}
group TabWorkTaskSelectionGroup for EquipWorkSelection {
   label = "";
   field VisibleActiveWorkTaskSteps;
   field VisibleAllActiveWorkTaskSteps;
   field VisibleHistoricalWorkTaskSteps;
   field VisibleOnlyPmWorkTaskSteps;
}
@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}
@Override
selector ReferenceAccountingCodePartValueSelector for AccountingCodePartValue {
   static CodePartValue {
      label = "${FetchCostCenter}";
   }
   static MasterComCodePartValue {
      visible = [false];
   }
}
selector EquipmentObjLevelSelector for EquipmentObjectLevel {
   label = "";
   static ObjLevelToSearch;
   static LevelSeq;
   static IndividualAware;
   static CreatePm;
   static CreateWo;
   badge Objstate;
}

---------------------------------- GROUPS -----------------------------------

group ObjectInfoSummaryGroup for EquipmentObjectList {
   label = "";
   field MchCode {
      size = Medium;
   }
   field MchName {
      size = Medium;

   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov ObjLevelRef with EquipmentObjLevelSelector {
      search = ObjLevel, LevelSeq;
      size = Small;
   }
   badge OperationalStatus {
      style = TextOnly;
      size = Small;
      emphasis Complementary1 = [OperationalStatus = "In Operation"];
      emphasis Complementary2 = [OperationalStatus = "Out of Operation"];
      emphasis Complementary3 = [OperationalStatus = "Scrapped"];
   }
//   badge DesignStatus {
//      style = TextOnly;
//      size = Small;
//      emphasis Complementary1 = [OperationalStatus = "PlannedForScrap"];
//      emphasis Complementary2 = [OperationalStatus = "ReDesign"];
//      emphasis Complementary3 = [OperationalStatus = "Completed"];
//      emphasis Complementary4 = [OperationalStatus = "UnderDesign"];
//   }
   field OperationalCondition {
      size = Small;
      visible = [ObjLevel = null];
   }
}

group ObjectGeneralGroup for EquipmentObjectList {
   label = "General";
   field OldSupMchCode {
      visible = [false];
   }
   field SupMchCode {
      size = Medium;
   }
   field SupContract {
      size = Small;
   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Small;
   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Medium;
      description = CriticalityRef.Description;
   }
   field ProductionDate {
      size = Small;
      editable = [ObjLevel != null];
   }
   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Medium;
      description = ItemClassIdRef.ItemClassDesc;
   }
//   field ProcessClassIdRef {
//      size = Small;
//   }
   lov CategoryIdRef with ReferenceEquipmentObjCategorySelector {
      search = CategoryId, Description;
      size = Small;
      visible = [ObjLevel != null];
   }
}
group LocationandPositionGroup for EquipmentObjectList {
   label = "Position and Location";
   collapsed = [true];
   field MchLoc {
      label = "Room";
      size = Small;
   }
   field MchPos {
      label = "Position";
      size = Small;
   }
   lov LocationCardRef with ReferenceEquipObjectLocationLovSelector {
      search = LocationId, Name;
      label = "Location";
      size = Medium;
      preview = EquipObjectLocationLovCard1;
      description = LocationIdRef.Name;
   }
   field EquipmentMainPosition {
      size = Small;
      visible = [ObjLevel != null];
   }
   field IsGeographicObject {
      size = Small;
      visible = [ObjLevel != null];
   }
}

group PartInfoGroup for EquipmentObjectList {
   label = "Part Information";
   collapsed = [true];
   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      size = Medium;
      label = "Supplier";
      description = SupplierInfoRef.Name;
   }
   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilter(PartNo) {
               search = ManufacturerNo, Name;
               description = ManufacturerNoRef.Name;
            }
         }
         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufacturerId, Name;
               description = ManufacturerNoRef.Name;
            }
         }
      }
   }
   field ManufacturedDate {
      size = Small;
      editable = [ObjLevel != null];
   }
   field Ownership {
      size = Small;
      visible = [ObjLevel = null];
   }
   field Owner {
      size = Small;
      visible = [ObjLevel = null];
      editable = [(Ownership = "CustomerOwned" or Ownership = "SupplierLoaned" or Ownership = "SupplierRented") and(Owner != OwnerVal or OwnerVal = null)];
      lovswitch {
         when[Ownership = "CustomerOwned"] {
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               preview = CustomerInfoCustcategoryPubCard;
            }
         }
         when[Ownership = "SupplierLoaned" or Ownership = "SupplierRented"] {
            lov SupplierInfoRef with SupplierInfoSelector {
               search = SupplierId, Name;

            }
         }
      }
   }
}

group GbCode_Part_InfoGroup for EquipmentObjectList {

   label = "Code Part Info";
   collapsed = [true];
   field OldCostCenter {
      visible = [false];
   }
   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchCostCenter}";
      size = Medium;
      searchable = false;
      visible = [HideCostCenter = "TRUE"];
      description = CostCenterCodePartRef.Description;
   }
   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchObjectNo}";
      searchable = false;
      visible = [HideObjectNo != null];
      size = Medium;
      description = ObjectCodePartRef.Description;
   }
}

group TypeDesGroup for EquipmentObjectList {
   label = "Type Designation Has ";
   collapsed = [true];
   field Requirements3Functional {
      size = Small;
      visible = [ObjLevel != null];
      required = [true];
   }

   field Requirements3Serial {
      size = Small;
      visible = [ObjLevel = null];
      required = [true];
   }

   field Documents3Functional {
      size = Small;
      visible = [ObjLevel != null];
      required = [true];
   }
   field Documents3Serial {
      size = Small;
      visible = [ObjLevel = null];
      required = [true];
   }
}

group ObjectHasGroup for EquipmentObjectList {
   label = "Object Has";

   field Requirements2Functional {
      size = Small;
      visible = [ObjLevel != null];
   }
   field Requirements2Serial {
      size = Small;
      visible = [ObjLevel = null];
   }
   field Documents2Functional {
      size = Small;
      visible = [ObjLevel != null];
   }
   field Documents2Serial {
      size = Small;
      visible = [ObjLevel = null];
   }
   field SpareParts {
      size = Small;
   }
   field Warranty {
      size = Small;
   }
   field HasConnection {
      size = Small;
   }
   field TestPoints {
      size = Small;
   }
   field Parties {
      size = Small;
   }
   field Notes {
      size = Small;
   }
   field ToolEquipment {
      size = Small;
   }
}
group TabWorkSelectionGroup for EquipWorkSelection {
   label = "";
   field VisibleServiceLines {
      size = Small;
      validate command {
         execute {
            if [VisibleServiceLines = true] {
               set VisibleAllServiceLines = false;
            }
         }
      }
   }
   field VisibleAllServiceLines {
      size = Small;
      validate command {
         execute {
            if [VisibleAllServiceLines = true] {
               set VisibleServiceLines = false;
            }
         }
      }
   }

}
group TabPmSelectionGroup for EquipWorkSelection {
   label = "";
   field VisiblePmActions {
      size = Small;
      validate command {
         execute {
            if [VisiblePmActions = true] {
               set VisibleMaintPlan = false;
            }
         }
      }
   }
   field VisibleMaintPlan {
      size = Small;
      validate command {
         execute {
            if [VisibleMaintPlan = true] {
               set VisiblePmActions = false;
            }
         }
      }
   }
}
group SafeAccessGroup for EquipmentObjectList {
   label = "";
   field SafeAccessCode {
      required = [true];
   }
}
group GbNotesGroup for EquipmentObjectList {
   label = "Free Notes";
   collapsed = [true];
   field Note {
      size = Large;
      multiline = true;
      showlabel = false;
   }
}
group SerialNotesGroup for EquipmentObjectList {
   label = "Free Notes";
   collapsed = [true];
   field Note {
      size = Large;
      multiline = true;
      showlabel = false;
   }
}
----------------------------------- CARDS -----------------------------------

card EquipObjectLocationLovCard1 for EquipObjectLocationLov {
   label = "${Name}";
   field LocationId;
   markdowntext {
      visible = [true];
      text =
      "---------  ----------
      ${Address1} ${Address2}
      ${ZipCode} ${City}
      ${CountryCode} ${County}";
   }
}

----------------------------------- LISTS -----------------------------------
fieldset EquipmentObjectfieldset for EquipmentObjectList {

   field MchCode {
      size = Medium;
      editable = [ETag = null];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      editable = [Etag = null];

      size = Medium;
      validate command {
         variable Resultrec {
            type = LogicalCodePartValues;
         }
         execute {
            call GetLogicalCodePartValues(Contract) into Resultrec;
            set CostCenterCodePart = Resultrec.CostCenterCodePart;
            set ObjectCodePart = Resultrec.ObjectCodePart;
         }
      }
   }
   lov ObjLevelRef with EquipmentObjLevelSelector {
      search = ObjLevelToSearch, LevelSeq;
      size = Small;
	   editable = [ETag = null];
      required = [false];
   }
   field OperationalStatus {
      size = Small;
   }
   lov PartNoRef with ReferencePartCatalogSelector {
      search = PartNo, Description;
      size = Small;

      validate command {
         execute {
            call GetPartDescription(PartNo) into MchName;
            if[MchCode = null and SerialNo != null and PartNo != null]
               {
               set MchCode = "${PartNo}-${SerialNo}";
            }
         }
      }
   }
   field MchName {
      size = Small;
   }
   field SerialNo {
      size = Small;
      validate command {
         execute {
            if[MchCode = null and SerialNo != null and PartNo != null]
               {
               set MchCode = "${PartNo}-${SerialNo}";
            }
         }
      }
   }
   field PartRev {
      size = Small;
      editable = [ObjLevel = null];
   }
   lov MchTypeRef with ReferenceEquipmentObjTypeSelector {
      search = MchType, Description;
      size = Small;
      description = MchTypeDescription;
      validate command {
         variable TempMchTypeVar;
         execute {
            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchTypeVar;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }
            }
         }
      }
   }
   lov TypeRef with TypeDesignationSelector using GetTypeDesignations(MchType) {
      search = Type, Description;
      size = Small;
      description = TypeDescription;
      validate command {
	     variable Resultrec {
            type = TypeDesValues;
         }
         execute {
            if [Type != null] {
               call GetTypeDesignationValues(Type) into Resultrec;
               set MchType = Resultrec.MchType;
               if [Resultrec.ItemClass != null] {
                  set ItemClassId = Resultrec.ItemClass;
               }
            }
         }
      }
   }
   lov ProcessClassIdRef with ReferenceProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      size = Small;
   }
   field ProcessClassDesc {
      size = Small;
   }
   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Small;
   }
   field ItemClassDesc {
      size = Small;
   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Small;
   }
   field GroupIdDesc {
      size = Small;
   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Small;
   }
   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [SupMchCodeSaved = null];
   }
   lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector using FunctionalObjectFilter(Contract, MchCode) {
      search = MchCode, MchName;
      size = Small;
      editable = [SupMchCodeSaved = null];
      validate command {

         variable ValidateSupMchCodeReturn
            {
            type = Structure(ValidateSupMchCodeReturn);
         }
         execute {
            if [SupMchCode != null] {
               call ValidateSupMchCode(SupContract, SupMchCode) into ValidateSupMchCodeReturn;
            //room
               set MchLoc = ValidateSupMchCodeReturn.MchLoc;
            //Position
               set MchPos = ValidateSupMchCodeReturn.MchPos;
            //Cost Center
               set CostCenter = ValidateSupMchCodeReturn.CostCenter;
            //Asset
               set ObjectNo = ValidateSupMchCodeReturn.ObjectNo;
            //Location Id
               if [LocationId = null] {
                  set LocationId = ValidateSupMchCodeReturn.LocationId;
               }
               if [ValidateSupMchCodeReturn.SerialState != null] {
                  if [ValidateSupMchCodeReturn.SerialState = "InInventory"] {
                     error("Belongs To object value cannot be updated for objects with the current position 'In Inventory'");
                  }
                  if [ValidateSupMchCodeReturn.SerialState = "InRepairWorkshop"] {
                     error("Belongs To object value cannot be updated for objects with the current position 'In Repair workshop'");
                  }
//                  if [ValidateSupMchCodeReturn.SerialState = "InFacility"] {
//   }
               }
//               Serial tatus
//               --------------------
//               Contained
//               InFacility
//               InInventory
//               InRepairWorkshop
//               Issued
//               ReturnedToSupplier
//               UnderTransportation
//               Unlocated
            }
            else {
             //room
               set MchLoc = "";
            //Position
               set MchPos = "";
            //Cost Center
               set CostCenter = "";
            //Asset
               set ObjectNo = "";

            }

         }
      }
   }
   lov LocationIdRef with ReferenceLocationSelector {
      search = LocationId, Name;
      size = Small;
   }
   field LocationName {
      size = Small;
   }
   lov LocationContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [ObjLevel != null];

   }
   lov LocationMchCodeRef with ReferenceEquipmentFunctionalSelector {
      search = MchCode, MchName;
      size = Small;
      editable = [ObjLevel != null];
   }
   field LocationMchCodePerfRef.MchName {
      size = Small;
      label = "Locational Parent Description";
   }
   lov FromContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [ObjLevel != null];
   }
   lov FromMchCodeRef with ReferenceEquipmentFunctionalSelector {
      search = MchCode, MchName;
      size = Small;
      editable = [ObjLevel != null];

   }
   field FromMchCodePerfRef.MchName {
      size = Small;
      label = "From Object Description";

   }
//   field EquipmentObject2Ref.MchName {
//      size = Small;
//      label = "From Object Description";
//   }
   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [ObjLevel != null];
   }
   field ToMchCodeRef {
      editable = [ObjLevel != null];
      size = Small;
   }
   field ToMchCodePerfRef.MchName {
      size = Small;
      label = "To Object Description";
   }
//   field EquipmentObject3Ref.MchName {
//      size = Small;
//      label = "To Object Description";
//   }
   lov ProcessContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [ObjLevel != null];

   }
   lov ProcessMchCodeRef with ReferenceEquipmentFunctionalSelector {
      search = MchCode, MchName;
      size = Small;
      editable = [ObjLevel != null];
   }
   field ProcessMchCodePerfRef.MchName {
      size = Small;
      label = "Process Object Description";
   }
//   field EquipmentObject4Ref.MchName {
//      size = Small;
//      label = "Process Object Description";
//   }
   lov PipeContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [ObjLevel != null];
   }
   field PipeMchCodeRef {
      size = Small;
      editable = [ObjLevel != null];
   }
   field PipeMchCodePerfRef.MchName {
      size = Small;
      label = "Pipe System Description";
   }
//   field EquipmentObject5Ref.MchName {
//      size = Small;
//      label = "Pipe System Description";
//   }
   lov CircuitContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [ObjLevel != null];
   }
   lov CircuitMchCodeRef with ReferenceEquipmentFunctionalSelector {
      search = MchCode, MchName;
      size = Small;
      editable = [ObjLevel != null];
   }
   field CircuitMchCodePerfRef.MchName {
      size = Small;
      label = "Electrical Description";
   }
//   field EquipmentObject6Ref.MchName {
//      size = Small;
//      label = "Electrical Description";
//   }
   field MchLoc {
      size = Small;
   }
   field MchPos {
      size = Small;
   }
   field CategoryIdRef {
      size = Small;
   }
   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "Cost Center";
   }
   lov VendorNoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      size = Small;
   }
   field SupplierInfoRef.Name {
      size = Small;
      label = "Supplier Name";
   }
   field ManufacturerNo {
      size = Small;
	  lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilter(PartNo) {
               search = ManufactureNo, Name;
               description = ManufacturerNoRef.Name;
            }
         }
         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufacturerId, Name;
               description = ManufacturerNoRef.Name;
            }
         }
      }
   }
   field ManufacturerInfoRef.Name {
      size = Small;
      label = "Manufacturer Name";
   }
   field EquipmentMainPosition {
      size = Small;
      editable = [ObjLevel != null];
   }
   field PurchPrice;
   field PurchDate {
      editable = [PurchaseTempDate = null];
   }
   field ProductionDate;
   field ManufacturedDate;
   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      size = Small;
   }
   field Note {
      size = Small;
      multiline = true;
   }
   field HasStructure {
      size = Small;
   }
   field HasConnection {
      size = Small;
   }

   field SupplierWarranty {
      size = Small;
   }
   field CustomerWarranty {
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   lov AppliedPmProgramIdRef with ReferencePmProgramSelector {
      search = PmProgramRev, Description;
      size = Small;
   }
   field AppliedPmProgramRev {
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field Status {
      size = Small;
   }
   field AppliedDate;
   @DynamicComponentDependency PCMSTD
   field PmProgramRef.DateModified {
      label = "Date Modified";
   }
   field PmProgApplicationStatus {
      size = Small;
   }
   field NotApplicableReason {
      size = Small;
   }
   field NotApplicableSetUser {
      size = Small;
   }
   field NotApplicableSetDate;
   @DynamicComponentDependency PCMSTD
   field PmProgramRef.Description {
      size = Small;
      label = "PM Program Description";
   }
}

@DynamicComponentDependency OPPLAN
list ObjectOperModeGroupList for ObjectOperModeGroup {
   label = "Operational Mode Groups";
   lov OperModeGroupIdRef with ReferenceOperationalModeGroupSelector {
      search = OperModeGroupId, Description;
      description = OperModeGroupIdRef.Description;
   }
   field Inherited {
      size = Small;
   }
}
@DynamicComponentDependency OPPLAN
list GroupConnectedModeList for OperModeGroupConnect {
   label = "Operational Modes";
   field OperModeIdRef {
      size = Small;
   }
   field OperModeIdRef.Description {
      label = "Operational Mode Description";
   }
   field OperModeGroupId;
}

@Override
list EquipmentObjectsList for EquipmentObjectList {
   crudactions {
      duplicate {
         enabled = [false];

      }

   }

   fieldset EquipmentObjectfieldset;
   commandgroup CommandGroupCmdGroup {
      command EquipObjectInformationCommand;

   }
   command ObjectNavigatorCommand;
   @DynamicComponentDependency SERCAT
   command ServiceNavigatorCommand;
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command StructureCommand;
         command ConnectionsCommand;
      }
   }
   commandgroup OperationalStatusCommandGroup {
      commandgroup CommandGroup2CmdGroup {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectCommand;
            command OperationalStatusStructureStrappedEquipmentObjectCommand;
         }
      }
   }
   commandgroup CommandGroup4CmdGroup {

      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
   }
   commandgroup CommandGroup5CmdGroup {
      commandgroup CommandGroupMoveCopy {
         label = "Move/Copy";
         --command MoveFunctionalObjectCommand;
         --command MoveSerialObjectCommand;
         command CopyObjectCommand;
      }
   }
   commandgroup CommandGroup6CmdGroup {
      commandgroup CommandGroupMaintenanceInformation {
         label = "Maintenance Information";
         command PMforObjectStructureCommand;
         command ActiveWorkOrdersCommand;
         command HistoricalWorkOrdersCommand;
         command CmdTasksCommand;
      }
   }
   commandgroup CommandGroup7CmdGroup {

      @DynamicComponentDependency PCMSCI
      command ServiceContractsforObjectCommand;

   }
   command PartSerialCommand;
}

list EquipmentObjectAllList for EquipmentObjectList {
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   fieldset EquipmentObjectfieldset;
   commandgroup CommandGroupCmdGroup {
      command EquipObjectInformationCommand;

   }
   command ObjectNavigatorCommand;
   @DynamicComponentDependency SERCAT
   command ServiceNavigatorCommand;
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command StructureCommand;
         command ConnectionsCommand;
      }
   }
   commandgroup OperationalStatusCommandGroup {
      commandgroup CommandGroup2CmdGroup {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectCommand;
            command OperationalStatusStructureStrappedEquipmentObjectCommand;
         }
      }
   }
   commandgroup CommandGroup4CmdGroup {

      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
   }
   commandgroup CommandGroup5CmdGroup {
      commandgroup CommandGroupMoveCopy {
         label = "Move/Copy";
         --command MoveFunctionalObjectCommand;
         --command MoveSerialObjectCommand;
         command CopyObjectCommand;
      }
   }
   commandgroup CommandGroup6CmdGroup {
      commandgroup CommandGroupMaintenanceInformation {
         label = "Maintenance Information";
         command PMforObjectStructureCommand;
         command ActiveWorkOrdersCommand;
         command HistoricalWorkOrdersCommand;
         command CmdTasksCommand;
      }
   }
   commandgroup CommandGroup7CmdGroup {
      @DynamicComponentDependency PCMSCI
      command ServiceContractsforObjectCommand;

   }
   command PartSerialCommand;
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjectListSet for EquipmentObjectList;
entityset ObjectCountsPmEntitySet for ObjectCountsPmEntity;
entityset ObjectCountsWoEntitySet for ObjectCountsWoEntity;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObjectList using EquipmentObject {
   crud = StateChange, Create, Read, Update, Delete;
   ludependencies = TypeDesignation, TechnicalObjectReference, EquipmentFunctional, EquipmentSerial;
   from = "equipment_object_uiv";
   keys = EquipmentObjectSeq {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq";
   }
   supportwarnings = [true];
   use attributes = Contract, MchCode, ObjLevel, OperationalStatus, PartNo, MchName, SerialNo, PartRev, MchType, Type, ProcessClassId, ItemClassId, GroupId, Criticality, SupContract, SupMchCode, LocationId, LocationContract, LocationMchCode, FromContract, FromMchCode, ToContract, ToMchCode, ProcessContract, ProcessMchCode, PipeContract, PipeMchCode, CircuitContract, CircuitMchCode, MchLoc, MchPos, CategoryId, CostCenter, VendorNo, ManufacturerNo, EquipmentMainPosition, PurchPrice, PurchDate, ProductionDate, ManufacturedDate, ObjectNo, Note, HasStructure, HasConnection, WarrExp, MchDoc, Info, Data, AppliedPmProgramId, AppliedPmProgramRev, AppliedDate, PmProgApplicationStatus, NotApplicableReason, NotApplicableSetUser, NotApplicableSetDate, OperationalStatusDb, OperationalCondition, SafeAccessCode, FunctionalObjectSeq, LocationObjectSeq, FromObjectSeq, ToObjectSeq, ProcessObjectSeq, PipeObjectSeq, CircuitObjectSeq;
   attribute ObjLevel Text {
      editable = [ETag = null];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      fetch = "operational_status_db";
   }
   attribute MchName Text {
      label = "Object Description";
      required = [true];
      editable = [ETag = null];
   }
   attribute SerialNo Text {
      label = "Serial No";
   }
   attribute ProcessClassId Text {
      label = "Process Class";
   }
   attribute ItemClassId Text {
      format = uppercase;
   }
   attribute LocationContract Text {
      label = "Locational Parent Site";
   }
   attribute FromContract Text {
      label = "From Object Site";
   }
   attribute ToContract Text {
      label = "To Object Site";
   }
   attribute ProcessContract Text {
      label = "Process Object Site";
   }
   attribute PipeContract Text {
      label = "Pipe System Site";
   }
   attribute CircuitContract Text {
      label = "Electrical Site";
   }
   attribute CircuitMchCode Text {
      label = "Electrical";
   }
   attribute VendorNo Text {
      label = "Supplier";
   }
   attribute EquipmentMainPosition Enumeration(EquipmentMainPosition) {
      label = "Equipment Main Position";
   }
   attribute PurchPrice Number {
      label = "Acquisition Cost";
      format = ifscurrency;
   }
   attribute ProductionDate Date {
      label = "Installation Date";
      editable = [ETag = null];
   }
   attribute ManufacturedDate Date {
      label = "Manuf Date";
      editable = [ETag = null];
   }
   attribute ObjectNo Text {
      label = "Asset";
   }
   attribute HasStructure Enumeration(TranslateBoolean) {
      fetch = "has_structure_db";
   }
   attribute HasConnection Enumeration(TranslateBoolean) {
      fetch = "has_connection_db";
      label = "Connections";
   }
   attribute Company Text {
      fetch = "SUBSTR(Site_API.Get_Company(contract), 1, 20)";
   }
   attribute Data Text {
      label = "Technical Data";
   }
   attribute SupplierWarranty Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_API.Has_Warranty(EQUIPMENT_OBJECT_SEQ)";
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_API.Has_Customer_Warranty(EQUIPMENT_OBJECT_SEQ)";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute InOperation Text {
      fetch = "Equipment_Object_API.Activate_In_Operation(CONTRACT, MCH_CODE)";
      label = "In Operation";
      maxlength = 100;
      editable = [false];
   }
   attribute OutOfOperation Text {
      fetch = "Equipment_Object_API.Activate_Out_Of_Operation(CONTRACT, MCH_CODE)";
      label = "Out of Operation";
      maxlength = 2000;
      editable = [false];
   }
   attribute Scrapped Text {
      fetch = "Equipment_Object_API.Activate_Scrapped(CONTRACT, MCH_CODE)";
      label = "Scrapped";
      maxlength = 2000;
      editable = [false];
   }
   //serial object check

   attribute Serial_Scrapped Text {
      fetch = "Equipment_Serial_API.Activate_Scrapped(CONTRACT,MCH_CODE)";
      label = "Scrapped";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }

   attribute Serial_OperStatus Text {
      fetch = "Equipment_Serial_API.Activate_In_Operation(CONTRACT,MCH_CODE)";
      label = "Oper Status";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute Serial_OutOfOperation Text {
      fetch = "Equipment_Serial_API.Activate_Out_Of_Operation(CONTRACT,MCH_CODE)";
      label = "Out of Operation";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }

   @DynamicComponentDependency PCMSCI
   attribute ObjExist Text {
      fetch = "Psc_Contr_Product_Scope_API.Object_Exist_In_Srv_Line(mch_code,contract)";
      label = "ObjExist";
      maxlength = 100;
      editable = [false];
   }
   attribute CurrentLocation Text {
      fetch = "Equipment_Serial_API.Infacility_Or_Workshop(part_no, serial_no)";
      label = "Current Location";
      maxlength = 100;
      editable = [false];
   }
   attribute AppliedPmProgramId Text {
      label = "PM Program ID";
      editable = [false];
   }
   attribute AppliedPmProgramRev Text {
      label = "PM Program Revision";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute Status Text {
      fetch = "Pm_Program_API.Get_Status(applied_pm_program_id,applied_pm_program_rev)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute SupMchCodeSaved Text {
      label = "Belongs to Object Saved";
      fetch = "SUP_MCH_CODE";
      editable = [false];
   }
   attribute AppliedDate Date {
      editable = [false];
   }
   attribute PmProgApplicationStatus Boolean("TRUE", "FALSE") {
      label = "N/A for PM Programs";
      editable = [false];
   }
   attribute NotApplicableReason Text {
      label = "N/A Set Reason";
      editable = [false];
   }
   attribute NotApplicableSetUser Text {
      label = "N/A Set By";
      editable = [false];
   }
   attribute NotApplicableSetDate Date {
      label = "N/A Set Date";
      editable = [false];
   }
   attribute OperationalStatusDb Text {
      maxlength = 200;
      editable = [false];
   }
   attribute IsSerialTracked Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(PART_NO)";
   }
   attribute IsCategoryObj Text {
      fetch = "EQUIPMENT_FUNCTIONAL_API.Get_Is_Category_Object(CONTRACT,MCH_CODE)";
   }
   attribute IndividualAware Text {
      fetch = "Equipment_Object_Level_API.Get_Individual_Aware(OBJ_LEVEL)";
   }
   attribute PurchaseTempDate Date {
      fetch = "PURCH_DATE";
   }
   attribute IndividualAwareClientValue Text {
      fetch = "Individual_Aware_API.Get_Client_Value(1)";
   }
   attribute CostCenterCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'CostCenter')";
   }
   attribute ObjectCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'Object')";
   }
   attribute MchTypeHasTechReference Text {
      fetch = "EQUIPMENT_OBJ_TYPE_Api.Has_Technical_Spec_No(MCH_TYPE)";
      updatable = [false];
      insertable = [false];
   }
   attribute OldMchType Text {
      fetch = "MCH_TYPE";
      insertable = [false];
      updatable = [false];
   }
   attribute Objtype Text {
      fetch = "OBJTYPE";
      insertable = [false];
      updatable = [false];
   }
   attribute IsScrapped Text {
      fetch = "Equipment_Object_API.Is_Scrapped(contract, mch_code)";
   }
   attribute ReturnInFacility Text {
      fetch = "Equipment_Serial_API.Is_InFacility(part_no, serial_no)";
   }
   attribute ReturnInFacilityOrWorkshop Text {
      fetch = "Equipment_Serial_API.Infacility_Or_Workshop(part_no, serial_no)";
   }
   attribute SetOperational Text {
      fetch = "Equipment_Serial_API.Activate_Set_Operational(CONTRACT,MCH_CODE)";
   }
   attribute SetNonOperational Text {
      fetch = "Equipment_Serial_API.Activate_Set_Non_Operational(CONTRACT,MCH_CODE)";
   }
   @DynamicComponentDependency PLADES
   attribute DesignStatus Text {
      fetch = "Plant_Object_API.Get_Design_Status_Equip_Obj(CONTRACT, MCH_CODE)";
      label = "Design Status";
      editable = [false];
   }
   attribute OperationalCondition Text {
      editable = [false];
      fetch = "Equipment_Serial_API.Get_Operational_Condition(CONTRACT, MCH_CODE)";
   }
   attribute Owner Text {
      maxlength = 30;
      format = uppercase;
   }
   attribute Ownership Text {
      fetch = "Part_Serial_Catalog_API.Get_Part_Ownership(PART_NO, SERIAL_NO)";
      editable = [false];
   }
   attribute OldSupMchCode Text {
      fetch = "SUP_MCH_CODE";
      insertable = [false];
      updatable = [false];
   }
   attribute IsGeographicObject Boolean("TRUE", "FALSE") {
      label = "Geographical Object";
      editable = [true];
      required = [true];
   }
   attribute FetchCostCenter Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute FetchCostCenterView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'CostCenter')";
   }
   attribute HideCostCenter Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute FetchObjectNo Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'Object')";
   }
   attribute FetchObjectNoView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'Object')";
   }
   attribute HideObjectNo Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'Object')";
   }
   attribute ObjtsCstCenterView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(NULL,'CostCenter')";
   }
   attribute ObjtsObjectNoView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(NULL,'Object')";
   }
   attribute Requirements3Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Requirements('TypeDesignation','FALSE', CONTRACT, MCH_CODE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Documents3Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Documents('TypeDesignation', 'FALSE',CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute Requirements3Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Technical_Data('TypeDesignation','FALSE', CONTRACT, MCH_CODE)";
      label = "Technical Data";
      editable = [false];
   }
   attribute Documents3Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Documents('TypeDesignation', 'FALSE', CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute Requirements2Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Requirements('EquipmentObject','TRUE',CONTRACT, MCH_CODE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Requirements2Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Technical_Data('EquipmentObject','TRUE', CONTRACT, MCH_CODE)";
      label = "Technical Data";
      editable = [false];
   }
   attribute SpareParts Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_SPARE_API.Has_Spare_Part(CONTRACT, MCH_CODE)";
      label = "Spare Parts";
      editable = [false];
   }
   attribute Warranty Boolean("TRUE", "FALSE") {
      fetch = "substr(EQUIPMENT_OBJECT_API.Has_Any_Warranty(CONTRACT,MCH_CODE),1,5)";
      label = "Warranty";
      editable = [false];
   }
   attribute Documents2Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Documents('EquipmentObject','TRUE', CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute Documents2Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Documents('EquipmentObject', 'TRUE', CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute TestPoints Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_TEST_PNT_API.Has_Test_Point(CONTRACT, MCH_CODE)";
      label = "Test Points";
      editable = [false];
   }
   attribute Parties Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_PARTY_API.Has_Party(CONTRACT, MCH_CODE)";
      label = "Parties";
      editable = [false];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Notes(CONTRACT,MCH_CODE)";
      label = "Notes";
      editable = [false];
   }
   attribute ToolEquipment Boolean("TRUE", "FALSE") {
      fetch = "RESOURCE_TOOL_EQUIP_API.Has_Equipment(CONTRACT,MCH_CODE)";
      label = "Tool/Equipment";
      editable = [false];
   }
   attribute OldCostCenter Text {
      fetch = "COST_CENTER";
      insertable = [false];
      updatable = [false];
   }
   attribute FunctionalScrapped Text {
      fetch = "Equipment_Functional_API.Is_Scrapped( CONTRACT, MCH_CODE)";
   }
   attribute CreatedBy Text {
      fetch = "Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User)";
   }
   attribute DefaultSite Text {
      fetch = "USER_ALLOWED_SITE_API.Get_Default_Site()";
   }
   attribute RegDate Timestamp {
      fetch = "Maintenance_Site_Utility_Api.Get_Site_Date(USER_ALLOWED_SITE_API.Get_Default_Site())";
   }
   @DynamicComponentDependency WO
   attribute IsSerialReserved Text {
      fetch = "Maint_Material_Req_Line_API.Is_Serial_Reserved(part_no, serial_no)";
   }
   attribute LuName Text {
      fetch = "'EquipmentObject'";
   }
   attribute KeyRef Text {
      fetch = "Client_SYS.Get_Key_Reference('EquipmentObject', 'EQUIPMENT_OBJECT_SEQ', equipment_object_seq)";
   }
   attribute SelectionParameters Enumeration(SelectionAttribTypeEnum) {
      fetch = "'Both'";
      insertable = [false];
      updatable = [false];
   }
   attribute SafeAccessCode Enumeration(SafeAccessCode) {
      label = "Safe Access";
      required = [true];
   }
   attribute F Text {
      fetch = "'F'";
   }
   attribute L Text {
      fetch = "'L'";

   }
   attribute R Text {
      fetch = "'R'";
   }

   attribute T Text {
      fetch = "'T'";
   }

   attribute P Text {
      fetch = "'P'";
   }

   attribute S Text {
      fetch = "'S'";
   }

   attribute E Text {
      fetch = "'E'";
   }
   attribute CmStdId Text {
      label = "Cm Standard ID";
      fetch = "CM_CLASS_API.Get_Cm_Std_Id(process_class_id, item_class_id)";
   }
   attribute Objkey Text {
      fetch = "objkey";
   }
   attribute MchTypeDescription Text {
      label = "Object Type Description";
      fetch = "Equipment_Obj_Type_API.Get_Description(mch_type)";
   }
   attribute TypeDescription Text {
      label = "Type Designation Description";
      fetch = "Type_Designation_API.Get_Description(type)";
   }
   attribute ProcessClassDesc Text {
      label = "Process Class Name";
      fetch = "Process_Class_API.Get_Process_Class_Desc(process_class_id)";
   }
   attribute ItemClassDesc Text {
      label = "Item Class Name";
      fetch = "Item_Class_API.Get_Item_Class_Desc(item_class_id)";
   }
   attribute GroupIdDesc Text {
      label = "Group Description";
      fetch = "Equipment_Obj_Group_API.Get_Description(group_id)";
   }
   attribute LocationName Text {
      label = "Location Description";
      fetch = "Location_API.Get_Name(location_id)";
   }
   attribute CreateWo Text {
 	 	      fetch = "Equipment_Object_Level_API.Get_Create_Wo(OBJ_LEVEL)";
   }
   attribute CreatePm Text {
 	 	      fetch = "Equipment_Object_Level_API.Get_Create_Pm(OBJ_LEVEL)";
   }
   reference ProcessClassRef(ProcessClassId) to ProcessClass(ProcessClassId);
   reference ItemClassIdRef(ItemClassId) to ItemClass(ItemClassId);
   reference LocationRef(LocationId) to Location(LocationId);
   reference SupplierInfoRef(VendorNo) to SupplierInfo(SupplierId);
   reference ManufacturerInfoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId);
   reference EquipmentFunctionalRef(Contract, MchCode) to EquipmentFunctional(Contract, MchCode);
   @DynamicComponentDependency PCMSTD
   reference PmProgramRef(AppliedPmProgramId, AppliedPmProgramRev) to PmProgram(PmProgramId, PmProgramRev);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Object Site";
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentAllObjectLov(Contract, MchCode) {
      label = "Object ID";
      copy EquipmentObjectSeq to EquipmentObjectSeq;
   }
   reference ObjLevelRef(ObjLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "Object Level";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference TypeRef(Type) to TypeDesignation(Type) {
      label = "Type Designation";
   }
   reference ProcessClassIdRef(ProcessClassId) to ProcessClass(ProcessClassId) {
      label = "Process Class";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference OwnerRef(Owner) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Owner";
   }
   reference CriticalityRef(Criticality) to EquipmentCriticality(Criticality) {
      label = "Criticality";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentObject(Contract, MchCode) {
      label = "Belongs to Object ID";
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference LocationIdRef(LocationId) to Location(LocationId) {
      label = "Location ID";
   }
   reference LocationContractRef(LocationContract) to UserAllowedSiteLov(Contract) {
      label = "Locational Parent Site";
   }
   reference LocationMchCodeRef(LocationContract, LocationMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Locational Parent";
      copy EquipmentObjectSeq to LocationObjectSeq;
   }
   reference LocationMchCodePerfRef(LocationContract, LocationMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to LocationObjectSeq;

   }
   reference FromContractRef(FromContract) to UserAllowedSiteLov(Contract) {
      label = "From Object Site";
   }
   reference FromMchCodeRef(FromContract, FromMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "From Object";
      copy EquipmentObjectSeq to FromObjectSeq;
   }
   reference FromMchCodePerfRef(FromContract, FromMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to FromObjectSeq;
   }
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Object Site";
   }
   reference ToMchCodeRef(ToContract, ToMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "To Object";
      copy EquipmentObjectSeq to ToObjectSeq;
   }
   reference ToMchCodePerfRef(ToContract, ToMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to ToObjectSeq;
   }
   reference ProcessContractRef(ProcessContract) to UserAllowedSiteLov(Contract) {
      label = "Process Object Site";
   }
   reference ProcessMchCodeRef(ProcessContract, ProcessMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Process Object";
      copy EquipmentObjectSeq to ProcessObjectSeq;
   }
   reference ProcessMchCodePerfRef(ProcessContract, ProcessMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to ProcessObjectSeq;
   }
   reference PipeContractRef(PipeContract) to UserAllowedSiteLov(Contract) {
      label = "Pipe System Site";
   }
   reference PipeMchCodeRef(PipeContract, PipeMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Pipe System";
      copy EquipmentObjectSeq to PipeObjectSeq;
   }
   reference PipeMchCodePerfRef(PipeContract, PipeMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to PipeObjectSeq;
   }
   reference CircuitContractRef(CircuitContract) to UserAllowedSiteLov(Contract) {
      label = "Electrical Site";
   }
   reference CircuitMchCodeRef(CircuitContract, CircuitMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Electrical";
      copy EquipmentObjectSeq to CircuitObjectSeq;
   }
   reference CircuitMchCodePerfRef(CircuitContract, CircuitMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to CircuitObjectSeq;
   }
   reference CategoryIdRef(CategoryId) to EquipmentObjCategory(CategoryId) {
      label = "Category";
   }
   reference CostCenterCodePartRef(Company, CostCenterCodePart, CostCenter) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference ObjectCodePartRef(Company, ObjectCodePart, ObjectNo) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference VendorNoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
   reference ManufacturerNoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId) {
      label = "Manufacturer";
   }
   reference ObjectNoRef(Company, ObjectNo) to CodeE(Company, CodeE) {
      label = "Asset";
   }
   @DynamicComponentDependency PCMSTD
   reference AppliedPmProgramIdRef(AppliedPmProgramId) to PmProgram(PmProgramId) {
      label = "PM Program ID";
   }

   reference PartManufacturerRef(PartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Part Manufacturer";
   }
   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";
      copy ItemClassId to ItemClassId;
   }

   array EquipmentObjectSparePartArray(EquipmentObjectSeq) to EquipmentObjectSpare(EquipmentObjectSeq);
   array TestPointsarray(EquipmentObjectSeq, LuName) to EquipmentObjectTestPnt(EquipmentObjectSeq, LuName);
   array TypeDesignationArray(Type) to TypeDesignation(Type);
   array EquipmentObjectJournalArray(EquipmentObjectSeq) to EquipmentObjectJournal(EquipmentObjectSeq);
   array EquipmentObjectPartyArray(EquipmentObjectSeq) to EquipmentObjectParty(EquipmentObjectSeq);
   array TechnicalObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
   array RowDataArray(Contract, MchCode) to RowDataRowsQuery(Contract, MchCode);
   array ArraySupplierWarranty(EquipmentObjectSeq) to ObjectSupplierWarranty(EquipmentObjectSeq);
   array ArrayCustomerWarranty(EquipmentObjectSeq) to ObjectCustWarranty(EquipmentObjectSeq);

   array EquipmentSerialArray(EquipmentObjectSeq) to EquipmentSerial(EquipmentObjectSeq);
   array EquipmentFunctionalArray(EquipmentObjectSeq) to EquipmentFunctional(EquipmentObjectSeq);

   @DynamicComponentDependency PM
   array ObjectPmArray(EquipmentObjectSeq, MchCode) to PmAction(EquipmentObjectSeq, MchCode);
   @DynamicComponentDependency METINV
   array MeterReadingArray(Contract, MchCode) to EquipObjectParamList(Contract, MchCode);

   @DynamicComponentDependency OPPLAN
   array OperationalModeGroupsArray(EquipmentObjectSeq) to ObjectOperModeGroup(EquipmentObjectSeq);
   reference LocationCardRef(LocationId) to EquipObjectLocationLov(LocationId);
   array CriticalAnalysisResultsArray(ProcessClassId, ItemClassId, CmStdId) to CriticalAnalysisResult(ProcessClassId, ItemClassId, CmStdId);
}

@Override
entity ObjectCountsPmEntity using EquipmentObject {
   crud = Read;
   from = "Object_Counts";
   keys = EquipmentObjectSeq, ConnectedLu, TreeStructure;

   attribute ObjCount Text {
      fetch = "OBJ_COUNT";
   }
   attribute OneObjCount Number {
      fetch = "ONE_OBJ_COUNT";
   }
   attribute AllCount Number {
      fetch = "ALL_COUNT";
   }
   attribute DisplayText Text {
      fetch = "DISPLAY_TEXT";
   }
   attribute ConnectedLu Text;
   attribute TreeStructure Text;
}
@Override
entity ObjectCountsWoEntity using EquipmentObject {
   crud = Read;
   from = "Object_Counts_View2";
   keys = EquipmentObjectSeq, ConnectedLu, TreeStructure;

   attribute ObjCount Text {
      fetch = "OBJ_COUNT";
   }
   attribute OneObjCount Number {
      fetch = "ONE_OBJ_COUNT";
   }
   attribute AllCount Number {
      fetch = "ALL_COUNT";
   }
   attribute DisplayText Text {
      fetch = "DISPLAY_TEXT";
   }
   attribute ConnectedLu Text;
   attribute TreeStructure Text;
}

@Override
@DynamicComponentDependency OPPLAN
entity ObjectOperModeGroup {
   crud = Read, Create, Delete;
   keys = EquipmentObjectSeq, OperModeGroupId {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq  AND OPER_MODE_GROUP_ID = :OperModeGroupId";
   }
   attribute Inherited Boolean("TRUE", "FALSE") {
      label = "Inherited from Parent";
      editable = [false];
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
   array OperationalModesArray() to OperModeGroupConnect() {
      where = "(:child.OperModeGroupId IN (select oper_mode_group_id FROM OBJECT_OPER_MODE_GROUP a WHERE a.equipment_object_seq = :parent.EquipmentObjectSeq))";
   }
}
@Override
@DynamicComponentDependency OPPLAN
entity OperModeGroupConnect {
   crud = Read;
   ludependencies = ObjectOperModeGroup;

   keys = OperModeId, OperModeGroupId;
   attribute OperModeGroupId Text {
      editable = [false];
   }
   reference OperModeIdRef(OperModeId) to OperationalMode(OperModeId) {
      label = "Operational Mode";
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
}
@Override
entity EquipmentObjectLevel {
   crud = Read;
   //This ObjLevelToSearch is used by ObjLevelSelector to search Object level without case matching.
   attribute ObjLevelToSearch Text {
      fetch = "Obj_Level";
      label = "Object Level";

   }
}
---------------------------------- ACTIONS ----------------------------------
action ValidateSupMchCode  Structure(ValidateSupMchCodeReturn) {
   initialcheck UserAllowedSite(SupContract);
   parameter SupContract Text;
   parameter SupMchCode Text;
}
action EquipObjectValidatePartNo {
   initialcheck none;
   parameter PartNo Text;
}

action DeleteObject {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentObjectList, EquipmentSerial, EquipmentFunctional;
   parameter Contract Text;
   parameter MchCode Text;
}
action SetInOperative {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract Text;
   parameter MchCode Text;
}
action SetNonOperative {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract Text;
   parameter MchCode Text;
}
action SetInOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetOutofOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStatusScrappedSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetInOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetOutofOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStatusScrappedFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}

action SetStructureInOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   supportwarnings = [true];
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStructureOperational {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}

action SetStructureNonOperational {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStuructureOutofOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract Text;
   parameter MchCode  Text;
}
action SetStructureScrappedSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStructureInOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObjectList;
   supportwarnings = [true];
   parameter Contract  Text;
   parameter MchCode  Text;
   parameter StructureType Text;
}
action SetStuructureOutofOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObjectList;
   parameter Contract Text;
   parameter MchCode  Text;
   parameter StructureType Text;
}
action SetStructureScrappedFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObjectList;
   parameter Contract  Text;
   parameter MchCode  Text;
   parameter StructureType Text;
}


--------------------------------- FUNCTIONS ---------------------------------
function GetUserDefaultContract Text {
}
function GetMchType Text {
   parameter Type Text;
}
function GetFuncMchName Text {
   parameter Contract Text;
   parameter MchCode Text;
}
function GetPartDescription Text {
   parameter PartNo Text;
}
function CheckScrappedAndHasStructure Text {
   parameter Contract Text;
   parameter MchCode Text;
}
//function GetTypeDesignations List < Entity(TypeDesignation) > {
//   parameter MchType Text;
//   where = "mch_type LIKE nvl(:MchType,mch_type) ";
//}
function GetTypeDesignationValues Structure(TypeDesValues) {
   parameter Type Text;
}
function PartManufactureFilter List < Entity(PartManufacturer) > {
   parameter PartNo Text;
   where = "PART_NO = :PartNo";
}
function FunctionalObjectFilter List < Entity(EquipmentObjectList) > {
   parameter Contract Text;
   parameter MchCode Text;
   where = "OBJTYPE ='EquipmentFunctional'";
}
function GetLogicalCodePartValues Structure(LogicalCodePartValues) {
   parameter Contract Text;
}

function GetTypeDesignations List < Entity(TypeDesignation) > {
   parameter MchType Text;
   where = "mch_type LIKE :MchType||'%' ";
}

function GetCostCenterAcc List < Entity(Account) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeB List < Entity(CodeB) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeC List < Entity(CodeC) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeD List < Entity(CodeD) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeE List < Entity(CodeE) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeF List < Entity(CodeF) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeG List < Entity(CodeG) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeH List < Entity(CodeH) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeI List < Entity(CodeI) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeJ List < Entity(CodeJ) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetItemClassId Text {
   parameter MchCode Text;
   parameter Contract Text;
   parameter MchType Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure TypeDesValues {
   attribute MchType Text;
   attribute ItemClass Text;
}
structure ValidateSupMchCodeReturn {
   attribute CostCenter Text;
   attribute MchLoc Text;
   attribute MchPos Text;
   attribute ObjectNo Text;
   attribute LocationId Text;
   attribute SerialState Text;
}
structure LogicalCodePartValues {
   attribute FetchCostCenter Text;
   attribute CostCenterCodePart  Text;
   attribute HideCostCenter   Text;
   attribute FetchObjectNo  Text;
   attribute ObjectCodePart   Text;
   attribute HideObjectNo    Text;
}
--------------------------------- VIRTUALS ----------------------------------

virtual EquipWorkSelection {
   attribute VisibleServiceLines Boolean("TRUE", "FALSE") {
      label = "Service Lines";
      editable = [true];
      required = [true];
   }
   attribute VisibleAllServiceLines Boolean("TRUE", "FALSE") {
      label = "All Service Lines";
      editable = [true];
      required = [true];
   }
   attribute VisiblePmActions Boolean("TRUE", "FALSE") {
      label = "PM Actions";
      editable = [true];
      required = [true];
   }
   attribute VisibleMaintPlan Boolean("TRUE", "FALSE") {
      label = "Maintenance Plan";
      editable = [true];
      required = [true];
   }
   attribute VisibleActiveWorkTasks Boolean("TRUE", "FALSE") {
      label = "Active Work Tasks";
      editable = [true];
      required = [true];
   }
   attribute VisibleAllActiveWorkTasks Boolean("TRUE", "FALSE") {
      label = "All Active Work Tasks";
      editable = [true];
      required = [true];
   }
   attribute VisibleHistoricalWorkTasks Boolean("TRUE", "FALSE") {
      label = "Historical Work Tasks";
      editable = [true];
      required = [true];
   }
   attribute VisibleActiveWorkTaskSteps Boolean("TRUE", "FALSE") {
      label = "Active Work Task Steps";
      editable = [true];
      required = [true];
   }
   attribute VisibleAllActiveWorkTaskSteps Boolean("TRUE", "FALSE") {
      label = "All Active Work Task Steps";
      editable = [true];
      required = [true];
   }
   attribute VisibleHistoricalWorkTaskSteps Boolean("TRUE", "FALSE") {
      label = "Historical Work Task Steps";
      editable = [true];
      required = [true];
   }
   attribute VisibleOnlyPmWorkTaskSteps Boolean("TRUE", "FALSE") {
      label = "Only PM Work Task Steps";
      editable = [true];
      required = [true];
   }
   attribute VisiblePMWorkTasks Boolean("TRUE", "FALSE") {
      label = "Only PM Work Tasks";
      editable = [true];
      required = [true];
   }
}

--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------