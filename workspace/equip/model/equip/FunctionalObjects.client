-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  190327  LoPrlk  SAUXXW4-13052, Replaced the fields Cost Center and Object containing LOV switches with normal lov fields.
--  180717  CLEKLK  SAUXXW4-1287, MTG Version: 1.19, Enterprise Explorer Source: tbwFunctionalObject
--  200102  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  210105  DEEKLK  AM2020R1-7134, Moved command definition OpenDlgMoveFunctional to fragment MoveFunctionalObjectDialog.
-----------------------------------------------------------------------------
client FunctionalObjects;
component EQUIP;
layer Core;
projection  FunctionalObjectHandling;

include fragment AccountingCodepartESelector;
include fragment UserAllowedSiteLovSelector;
include fragment MoveFunctionalObjectDialog;
include fragment CopyFunctionalObjectDialog;
include fragment EquipmentFunctionalLovSelector;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment BoexpTwSettings;
include fragment EquipmentFunctionalPerfQuery;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry ServFunctionalObjectNavEntry parent EquipNavigator.ServEquipmentFunctionalObject at index 2 {
      label = "Functional Objects";
      page List;
   }
   entry MaintFunctionalObjectNavEntry parent EquipNavigator.MaintEquipmentFunctionalObject at index 2 {
      label = "Functional Objects";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using EquipmentFunctionalSet {
   label = "Functional Objects";
   startupmode = search;
   list FunctionalObjectList {
      details = "page/FunctionalObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ObjectNavigatorCommand for EquipmentFunctional {
   label = "Equipment Object Navigator";
   enabled = [true];
   mode = SelectedRecords;
   --variable VarTreeViewId Number;

   bulkexecute {
      --call GetDefTreeView() into VarTreeViewId;
      --navigate "tree/EquipmentObjectNavigator/EquipObjectNavigatorTree?$filter=TreeViewId eq $[VarTreeViewId]&treefilter=MchCodeList:$[MchCode],MchCodeContractList:$[Contract]";

      bulknavigate "tree/EquipmentObjectStructureNavigation/EquipObjectStructureTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

@DynamicComponentDependency SERCAT
command ServiceObjectCommand for EquipmentFunctional {
   label = "Service Object 360";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "tree/ServiceViewOfEquipment/SeviceViewOfEquipTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}


command StructureCommand for EquipmentFunctional {
   label = "Structure";
   enabled = [IsCategoryObject = "FALSE"];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/ObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command ConnectionsCommand for EquipmentFunctional {
   label = "Connected Objects";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command CmdOperationalGroupsCommand for EquipmentFunctional {
   label = "Set Op. Mode Groups to Structure";
   mode = SingleRecord;

   enabled = [ChildObjects != "0"];
   execute {
      @DynamicComponentDependency OPPLAN
      assistant OperationalGroupsAssistant(Contract, MchCode) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CmdSafeAccessCodeCommand for EquipmentFunctional {
   label = "Set Safe Access Code to Structure";
   enabled = [ChildObjects != "0"];
   mode = SingleRecord;
   execute {
      call SpreadSafeAccessCode();
      success("Safe Access Code successfully inherited to child objects.");
   }
}

command OperationalStatusInOperationCommand for EquipmentFunctional {
   label = "In Operation";
   mode = SelectedRecords;
   enabled = [PlanStatus = "TRUE" or OutOperStatus = "TRUE"];
   bulkexecute {
      bulkcall SetInOperation();
   }
}

command OperationalStatusOutofOperationCommand for EquipmentFunctional {
   label = "Out of Operation";
   mode = SelectedRecords;
   enabled = [InOperStatus = "TRUE" or Scrapped = "TRUE"];
   bulkexecute {
      bulkcall SetOutOfOperation();
   }
}

command OperationalStatusScrappedCommand for EquipmentFunctional {
   label = "Scrapped";
   mode = SelectedRecords;
   enabled = [OutOperStatus = "TRUE"];
   bulkexecute {
      bulkcall SetScrapped();
   }
}

command OperationalStatusInOperationforStructureCommand for EquipmentFunctional {
   label = "Set Structure In Operation";
   variable WarningMchCode Text;
   mode = SelectedRecords;
   enabled = [PlanStatus = "TRUE" or OutOperStatus = "TRUE"];
   bulkexecute {
      set WarningMchCode = "";
      bulkcall SetStructureInOperation();
      call GetExistWarning(Selection) into WarningMchCode;
      if[WarningMchCode != null] {
         info("Some objects of the structure ${WarningMchCode} were not changed due to their operational condition.");
      }
   }
}
command OperationalStatusOutOfOperationforStructureCommand for EquipmentFunctional {
   label = "Set Structure Out of Operation";
   mode = SelectedRecords;
   enabled = [InOperStatus = "TRUE" or Scrapped = "TRUE"];
   bulkexecute {
      if [Scrapped = "TRUE" and HasStructure = "TRUE"] {
         confirm("Do you want to change the operational status of all the child objects?") {
            when OK {
               bulkcall SetStructureOutOfOperation();
            }
            when CANCEL {
               call SetOutOfOperation();
            }
         }
      }
      else {
         bulkcall SetStructureOutOfOperation();
      }
   }
}

command OperationalStatusScrappedforStructureCommand for EquipmentFunctional {
   label = "Set Structure Scrapped";
   mode = SelectedRecords;
   enabled = [OutOperStatus];
   bulkexecute {
      bulkcall SetStructureScrapped();
   }
}

@DynamicComponentDependency PCMSCI
command ServiceContractsforObjectCommand for EquipmentFunctional {
   label = "Service Contracts";
   mode = SelectedRecords;
   enabled = [ObjExist = "TRUE"];
   bulkexecute {
      bulknavigate "page/ServiceContractsForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command CopyFunctionalObjectCommand for EquipmentFunctional {
   label = "Copy Functional Object";
   enabled = [MchCode != null and Contract != null];
   variable NewContract;
   variable NewMchCode;
   variable NewMchName;
   variable ParentContract;
   variable ParentMchCode;
   variable SupMchName;
   variable CbSpareParts;
   variable CbRequirements;
   variable CbParameters;
   variable CbTestPoints;
   variable CbDocuments;
   variable CbPm;
   variable CbParties;

   execute {
      call GetMchName(SupContract, SupMchCode) into SupMchName;
      dialog DlgCopyFunctionalObj(Contract, MchCode, MchName, SupContract, SupMchCode, ParentMchName, AppliedPmProgramId)
      into(NewContract, NewMchCode, NewMchName, ParentContract, ParentMchCode, ParentMchName, CbSpareParts, CbRequirements, CbParameters, CbTestPoints, CbDocuments, CbPm, CbParties) {
         when OK {
            info("The Functional object is now copied.");
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command PMforObjectStructureCommand for EquipmentFunctional {
   label = "PM for Object Structure";
   mode = SelectedRecords;
   enabled = [CreatePm = "TRUE"];
   execute {
      navigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command ActiveWorkOrdersCommand for EquipmentFunctional {
   label = "Active Work Orders";
   enabled = [CreateWo = "TRUE"];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/ObjectWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command HistoricalWorkOrdersCommand for EquipmentFunctional {
   label = "Historical Work Orders";
   enabled = [CreateWo = "TRUE"];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command CmdTasksCommand for EquipmentFunctional {
   label = "Work Tasks";
   mode = SelectedRecords;
   enabled = [CreateWo = "TRUE"];
   bulkexecute {
      bulknavigate "page/WorkTasks/List?$filter=ReportedObjConnLuNameDb  eq $[LuName] and ReportedObjConnRowkey eq $[Objkey]";
   }
}

command ValidateRequirements for EquipmentFunctional {

   bulkexecute {


      if [UpdateCount > 0] {



         ifany [(Requirements2 = true) and(OldMchType != MchType) and(MchType != null) and(MchTypeHasTechReference = "FALSE")] {
            inquire("Do you want to remove Requirements along with the replacement of the Object Type?") {
               when YES {
                  bulkset RemoveRequirements = "TRUE";
               }
               when NO {
                  bulkset RemoveRequirements = "FALSE";
               }
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
         else {
            ifany [(Requirements2 = true) and(OldMchType != MchType) and(MchType != null) and(MchTypeHasTechReference = "TRUE")] {
               inquire("Do you want to replace Requirements along with the replacement of the Object Type?") {
                  when YES {
                     bulkset RemoveRequirements = "TRUE";
                  }
                  when NO {
                     bulkset RemoveRequirements = "FALSE";
                  }
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
            else {
               ifany [(Requirements2 = true) and(OldMchType != MchType) and(MchType = null)] {
                  inquire("Do you want to remove Requirements along with the deletion of the Object Type?") {
                     when YES {
                        bulkset RemoveRequirements = "TRUE";
                     }
                     when NO {
                        bulkset RemoveRequirements = "FALSE";
                     }
                     when CANCEL {
                        exit CANCEL;
                     }
                  }
               }
               else {
                  ifany [(Requirements2 = true) and(OldType != Type) and(OldType != null) and(Type != null)] {
                     inquire("Do you want to replace Requirements along with the replacement of the Type Designation?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }

               }

            }

         }

      }
   }

}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceEquipmentFunctionalObjectUivSelector for EquipmentFunctionalUiv {
   field Contract;
   field MchCode;
   field MchName;
   field MchLoc;
   field GroupId;
   field CategoryId;
}

@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}
---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------
list FunctionalObjectList for EquipmentFunctional {
   card FunctionalObjectCard;
   initialview = CardView;

   crudactions {
      before command ValidateRequirements;
   }

   field MchCode {
      size = Large;
   }
   field MchName {
      label = "Object Description";
      size = Large;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Medium;
      label = "Object Site";
      description = ContractRef.ContractDesc;
   }
   lov ObjLevelRef with ReferenceEquipmentObjectLevelSelector {
      size = Medium;
      editable = [ETag = null];
      required = [true];
   }
   badge OperationalStatus {
      style = TextOnly;
      size = Medium;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }


   lov  MchTypeRef with ReferenceEquipmentObjTypeSelector {
      search = MchType, Description;
      size = Large;
      description = MchTypeRef.Description;
      validate command {
         variable TempMchType;

         execute {
            call HasMchTypeTechSpec(MchType) into MchTypeHasTechReference;

            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchType;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }

            }
         }
      }
   }

   field MchTypeHasTechReference {
      columnexclude = [true];

   }


   lov TypeRef with TypeDesignationSelector using GetTypeDesignations(MchType) {
      search = Type, Description;
      size = Medium;
      description = TypeRef.Description;

      validate command
         {
         variable Resultrec {
            type = TypeDesValues;
         }
         execute {
            if [Type != null] {
               call GetTypeDesignationValues(Type) into Resultrec;
               set MchType = Resultrec.MchType;
               if [Resultrec.ItemClass != null] {
                  set ItemClassId = Resultrec.ItemClass;

               }
            }
         }
      }
   }
   lov ProcessClassRef with ReferenceProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      size = Medium;
      description = ProcessClassRef.ProcessClassDesc;
   }
   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Large;
      description = ItemClassRef.ItemClassDesc;
   }
   lov LocationRef with ReferenceLocationSelector {
      search = LocationId, Name;
      size = Large;
      label = "Location ID";
      description = LocationRef.Name;
   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Medium;
      description = GroupIdRef.Description;
   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Small;
   }

   field Requirements2 {
      label = "Has Requirements";
      type = Boolean;
      //visible = [false];
   }

   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContarctDesc;
      size = Medium;
      editable = [SupMchCodeSaved = null];
   }
   lov SupMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      editable = [SupMchCodeSaved = null];
      label = "Belongs to Object ID";
      description = SupMchCodePerfRef.MchName;
   }

   lov LocationContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContarctDesc;
      size = Medium;
   }
   lov LocationMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      description = LocationMchCodePerfRef.MchName;
   }
   lov FromContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContarctDesc;
      size = Small;

   }
   lov FromMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      description = FromMchCodePerfRef.MchName;
   }
   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContarctDesc;
      size = Small;

   }
   lov ToMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      description = ToMchCodePerfRef.MchName;
   }
   lov ProcessContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContarctDesc;
      size = Small;

   }
   lov ProcessMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      description = ProcessMchCodePerfRef.MchName;
   }
   lov PipeContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContarctDesc;

      size = Small;
   }
   lov PipeMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;

      description = PipeMchCodePerfRef.MchName;
   }
   lov CircuitContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContarctDesc;
      size = Small;
   }
   lov CircuitMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;

      size = Large;
      description = CircuitMchCodePerfRef.MchName;
   }
   field MchLoc {
      size = Medium;
   }
   field MchPos {
      size = Medium;
   }
   lov CategoryIdRef with ReferenceEquipmentObjCategorySelector {
      search = CategoryId, Description;
      size = Medium;
   }
   field Company {
      columnexclude = [true];
   }

   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      size = Medium;
      label = "Cost Center";
      description = CostCenterCodePartRef.Description;
   }

   lov PartNoRef with ReferencePartCatalogSelector using GetPartNos {
      search = PartNo, Description;
      size = Medium;
   }

   field SerialNo;

   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }

      size = Medium;
      description = SupplierInfoRef.Name;
   }

   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilter(PartNo) {
               search = ManufacturerNo, Name;
               description = ManufacturerNoRef.Name;

            }

         }

         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufactureId, Name;

               description = ManufacturerNoRef.Name;
            }
         }
      }
   }

   field EquipmentMainPosition {
      size = Small;
   }
   field PurchPrice;
   field PurchDate {
      editable = [PurchDate = null];
   }
   field ProductionDate;

   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      size = Small;
      label = "Object";
      description = ObjectCodePartRef.Description;
      validate command {
         execute {
            call GetCompany(Contract) into Company;
         }
      }
   }

   field IsCategoryObject {
      size = Small;
      label = "Category Object";
   }
   field IsGeographicObject {
      size = Small;
   }
   // Column 'WarrExp' (colWarrExp) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   field SupplierWarranty {
      size = Small;
   }
   field CustomerWarranty {
      size = Small;
   }
   field Note {
      size = Large;
      multiline = true;
   }
   @DynamicComponentDependency PLADES
   badge DesignStatus {
      style = TextOnly;
      emphasis Complementary1 = [DesignStatus = "PlannedForScrap"];
      emphasis Complementary2 = [DesignStatus = "ReDesign"];
      emphasis Complementary3 = [DesignStatus = "Completed"];
      emphasis Complementary4 = [DesignStatus = "UnderDesign"];
   }
   field SafeAccessCode {
      size = Medium;
      label = "Safe Access";

   }
   @DynamicComponentDependency PCMSTD
   lov AppliedPmProgramIdRef with ReferencePmProgramSelector {
      search = PmProgramRev, Description;
      size = Medium;
   }
   @DynamicComponentDependency PCMSTD
   field PmProgramRef.Description {
      size = Large;
      label = "PM Program Description";
   }
   field AppliedPmProgramRev {
      size = Medium;
      label = "PM Program Revision";
   }
   @DynamicComponentDependency PCMSTD
   field PMProgramStatus {
      size = Medium;
      label = "Status";
   }
   field AppliedDate {
      label = "Applied Date";
   }
   @DynamicComponentDependency PCMSTD
   field PmProgramRef.DateModified {
      label = "Date Modified";
   }
   field PmProgApplicationStatus {
      size = Small;
      label = "N/A for PM Program";
      editable = [false];
   }
   field NotApplicableReason {
      size = Large;
      editable = [false];
      label = "N/A Set Reason";
   }
   field NotApplicableSetUser {
      size = Small;
      editable = [false];
      label = "N/A Set By";
   }
   field NotApplicableSetDate {
      editable = [false];
      label = "N/A Set Date";
   }

   commandgroup CommandGroup2CmdGroup {
      command ObjectNavigatorCommand;
   }
   @DynamicComponentDependency SERCAT
   command ServiceObjectCommand;
   commandgroup CommandGroup21CmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command StructureCommand;
         command ConnectionsCommand;
         command CmdOperationalGroupsCommand;
         command CmdSafeAccessCodeCommand;
      }
   }
   commandgroup CommandGroup3CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationCommand;
         command OperationalStatusOutofOperationCommand;
         command OperationalStatusScrappedCommand;
         commandgroup CommandGroupStatusforStructure {
            label = "Status for Structure";
            command OperationalStatusInOperationforStructureCommand;
            command OperationalStatusOutOfOperationforStructureCommand;
            command OperationalStatusScrappedforStructureCommand;
         }
      }
   }

   commandgroup CommandGroup7CmdGroup {
      commandgroup CommandGroupMaintenanceInformation {
         label = "Maintenance Information";
         command PMforObjectStructureCommand;
         command ActiveWorkOrdersCommand;
         command CmdTasksCommand;
         command HistoricalWorkOrdersCommand;
      }
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupMoveCopy {
         label = "Move/Copy";
         command OpenDlgMoveFunctional;
         command CopyFunctionalObjectCommand;
      }
   }

   commandgroup CommandGroup5CmdGroup {

      @DynamicComponentDependency PCMSCI
      command ServiceContractsforObjectCommand;
   }


}

----------------------------------- CARDS -----------------------------------
card FunctionalObjectCard for EquipmentFunctional {
   label = "${MchCode} - ${MchName}";

   imageviewer ObjectImageViewer;

   badge OperationalStatus {
      style = TextOnly;
      size = Medium;
      label = "";
      visible = [OperationalStatusDb = "OUT_OF_OPERATION" or OperationalStatusDb = "SCRAPPED"];
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   lov SupMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      label = "Belongs To";
      visible = [SupMchCodeRef != null];
      description = SupMchCodePerfRef.MchName;
   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Medium;
      description = GroupIdRef.Description;
      visible = [GroupIdRef != null];
      label = "Group";
   }
   lov  MchTypeRef with ReferenceEquipmentObjTypeSelector {
      search = MchType, Description;
      size = Large;
      label = "Type";
      description = MchTypeRef.Description;
      visible = [MchTypeRef != null];
   }
}

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

------------------------------- SEARCHCONTEXT -------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
imageviewer ObjectImageViewer for EquipmentFunctional {
   label = "Functional Object Image";
   collapsed = [false];
   scale = original;
   height = large;
   media {
      enabled = [true];
   }
}