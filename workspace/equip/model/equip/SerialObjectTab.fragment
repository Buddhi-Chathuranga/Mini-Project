-----------------------------------------------------------------------------
--
--  Fragment:     SerialObjectTab
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  280619  SHEPLK  Created, To connect this to EON.
--  200106  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  200608  LASSLK  AMZEAX-142,Modify the command CostDetailsCommand
--  201022  LASSLK  AM2020R1-6659,Modified dlgCopyFunctionalObject and DlgCopySerialObject
--  210715  RUSSLK  AMZEAX-648,Moved SerialNotesGroup to EquipmentObjectList fragment.
--  210917   LASSLK  AM21R2-2778, Modified use attributes in entity EquipmentSerial.
--  211001  JIHALK  AMZEAX-697, Modidfied FunctionalObjectGroup MchTypeRef LOV.
-----------------------------------------------------------------------------
fragment SerialObjectTab;
component EQUIP;
layer Core;
description "To enter, change, view, or delete the information on a serial object";

include fragment CustomerInfoCustcategoryPubSelector;
include fragment AccountingCodepartESelector;
include fragment EquipmentAllObjectUivSelector;
include fragment UserAllowedSiteLovSelector;
include fragment EquipmentObjectSparePartsList;
@DynamicComponentDependency ORDER
include fragment CustAddressShipLovSelector;
include fragment PersonInfoLovSelector;
@DynamicComponentDependency INVENT
include fragment InventoryPartWoLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLovSelector;
include fragment EquipmentObjectParty4Selector;
include fragment EquipmentObjectPartyList;
include fragment EquipmentObjectUivSelector;
include fragment EquipObjectLocationLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment EquipmentSerialUivSelector;
include fragment MaintenanceObjectSelector;
include fragment AccountingCodepartBSelector;
include fragment CopySerialObjectDialog;
include fragment MoveSerialObjectDialog;
include fragment NewSerialObjectDialog;

include fragment EmployeeLovSelector;
include fragment EquipmentAllObjectLov1Selector;
include fragment TestPointParameters;
include fragment ResourceEquipmentSiteConnSelector;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment BoexpTwSettings;
include fragment MoveToInventoryDialog;

----------------------------- CLIENT FRAGMENTS ------------------------------

---------------------------------- GROUPS -----------------------------------

group SerialObjectGroup for EquipmentSerial {
   label = "General";
   lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
      search = MchCode, MchName;
      preview = MaintenanceObjectCard;
      label = "Belongs to Object";
      size = Medium;
      editable = [SupMchCodeSaved = null];
      validate command {
         variable ValidateSupMchCodeReturn
            {
            type = Structure(ValidateSupMchCodeReturn);
         }
         execute {

            call ValidateSupMchCode(SupContract, SupMchCode) into ValidateSupMchCodeReturn;
            set MchLoc = ValidateSupMchCodeReturn.MchLoc;
            set MchPos = ValidateSupMchCodeReturn.MchPos;
            set CostCenter = ValidateSupMchCodeReturn.CostCenter;
            set ObjectNo = ValidateSupMchCodeReturn.ObjectNo;
            set LocationId = ValidateSupMchCodeReturn.LocationId;
         }
      }
   }
   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      preview = UserAllowedSiteLovCard;
      size = Small;
      editable = [SupMchCodeSaved = null];
   }
   lov TypeRef with ReferenceTypeDesignationSelector {
      search = Type, Description;
      size = Medium;
      --description = TypeRef.Description;
      validate command
         {
         variable Resultrec {
            type = TypeDesValues;
         }

         execute {
            if [Type != null] {
               call GetTypeDesignationValues(Type) into Resultrec;
               set MchType = Resultrec.MchType;
               if [Resultrec.ItemClass != null] {
                  set ItemClassId = Resultrec.ItemClass;
               }
            }
         }
      }
   }
   lov MchTypeRef with EquipmentObjTypeSelector {
      search = MchType, Description;
      size = Small;

      description = MchTypeRef.Description;

      validate command {
         variable TempMchType;
         variable GetItemClass;

         execute {
            call HasMchTypeTechSpec(MchType) into MchTypeHasTechReference;
            call GetItemClassId(MchCode, Contract, MchType) into GetItemClass;
            set ItemClassId = GetItemClass;
            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchType;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }
            }
         }
      }
   }
   field OldMchType {
      visible = [false];
   }
   field OldType {
      visible = [false];
   }
   field OldCostCenter {
      visible = [false];
   }
   field OldSupMchCode {
      visible = [false];
   }
   field CategoryIdRef {
      size = Small;
   }
   field GroupIdRef {
      size = Small;
   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Medium;
      description = CriticalityRef.Description;
   }

   field ProductionDate;
   field SerialState {
      size = Medium;
   }
   field LatestTransaction {
      size = Large;
   }

   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Medium;
      description = ItemClassIdRef.ItemClassDesc;
   }
   lov ProcessClassRef with ReferenceProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      label = "Process Class";
      description = ProcessClassRef.ProcessClassDesc;
   }
}
group SerialPartInfoGroup for EquipmentSerial {
   label = "Part Information";
   lov PartNoRef with ReferencePartCatalogSelector using GetPartNosForSerial {
      search = PartNo, Description;
      size = Medium;
   }
   field SerialNo {
      size = Small;
   }
//   field MchSerialNo;
   field PartRev {
      size = Small;
   }
   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      size = Medium;
      label = "Supplier";
      description = SupplierInfoRef.Name;
   }
   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilterForSerial(PartNo) {
               search = ManufacturerNo, Name;
               description = PartManufacturerRef.Name;
            }
         }

         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufacturerId, Name;
               description = ManufacturerNoRef.Name;
            }
         }
      }
   }
   field ManufacturedDate {
      label = "Manufacture Date";
   }

   field Ownership {
      size = Small;
   }
   field Owner {
      size = Small;
      editable = [(Ownership = "CustomerOwned" or Ownership = "SupplierLoaned" or Ownership = "SupplierRented") and(Owner != original.Owner or original.Owner = null)];
      lovswitch {
         when[Ownership = "CustomerOwned"] {
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               preview = CustomerInfoCustcategoryPubCard;
            }
         }
         when[Ownership = "SupplierLoaned" or Ownership = "SupplierRented"] {
            lov SupplierInfoRef with ReferenceSupplierInfoSelector {
               search = SupplierId, Name;
            }
         }
      }
   }
}
group SerialCodePartInfoGroup for EquipmentSerial {
   label = "Code Part Info";
   collapsed = [true];

   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchCostCenter}";
      size = Medium;
      visible = [HideCostCenter = "TRUE"];
      description = CostCenterCodePartRef.Description;
   }

   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchObjectNo}";
      visible = [HideObjectNo != null];
      size = Medium;
      description = ObjectCodePartRef.Description;
   }

}

group SerialTypeDesGroup for EquipmentSerial {
   label = "Type Designation Has ";
   collapsed = [true];
   field Requirements2 {
      size = Small;
      label = "Technical Data";
   }
   field Documents2 {
      size = Small;
   }
}


group SerialPmProgramGroup for EquipmentSerial {
   collapsed = [true];
   label = "PM Program";

   @DynamicComponentDependency PCMSTD
   lov AppliedPmProgramIdRef with ReferencePmProgramSelector {
      search = PmProgramRev, Description;
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field AppliedPmProgramDescription {
      size = Medium;
      editable = [false];
   }
   field AppliedPmProgramRev {
      size = Small;
      label = "Revision";
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   badge Status {
      style = TextOnly;
      size = Small;
      emphasis StatePreliminary = [Status = "Preliminary"];
      emphasis StateActive = [Status = "Active"];
      emphasis StateObsolete = [Status = "Obsolete"];
   }
   field AppliedDate {
      size = Medium;
   }
   @DynamicComponentDependency PCMSTD
   field DateModified {
      size = Small;
   }
   field PmProgApplicationStatus {
      size = Small;
      required = [true];
   }
   field NotApplicableReason {
      editable = [false];
   }
   field NotApplicableSetDate {
      size = Small;
      editable = [false];
   }
   field NotApplicableSetUser {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
}
--------------------------------- SINGLETON ---------------------------------
singleton SerialObjectGeneralSingleton for EquipmentSerial {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         visible = [false];
      }
      delete {
         enabled = [false];
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command ConnectedObjectsCommand;
         command CmdOperationalGroupsCommand;
         command CmdSafeAccessCodeCommand;
      }
   }
   command MakeMaintenanceAwareCommand;
   command CmdMeasForObjCommand;
   command ObjectWarrantyCommand;

   commandgroup CommandGroup4CmdGroup {
      commandgroup MoveCopy {
         label = "Move/Copy";
         command MoveSerialObjectCommand;
         command CopySerialObjectCommand;
         command MoveToInventoryCommand;
      }
   }

   commandgroup CommandGroup3CmdGroup {
      commandgroup SetResetLocationtoStructure {
         label = "Set/Reset Location to Structure";
         command CmdSetLocationCommand;
         command CmdResetLocationCommand;
      }
   }
   command CostDetailsCommand;

   commandgroup CommandGroup7CmdGroup {
      command SerialObjectHistoryCommand;
      command MaintenanceHistoryCommand;
      command PartSerialCommand;
   }
   command CriticalityAnalysis;
   command MeteringInvoicingCommand;

   commandgroup CommandGroup6CmdGroup {
      @DynamicComponentDependency PCMSCI
      command ServiceContractsforObjectCommand;
   }
//   commandgroup CommandGroup7CmdGroup {
//      commandgroup MaintenanceInformation {
//         label = "Maintenance Information";
//         command PMforObjectStructureCommand;
//         command ActiveWorkOrdersCommand;
//         command HistoricalWorkOrdersCommand;
//         command CmdTasksCommand;
//      }
//   }
   @DynamicComponentDependency SVCSCH
   commandgroup CommandGroup8CmdGroup {
      command SerialObjectSchedulingDetailCommand;
   }
}
--------------------------------- COMMANDS ----------------------------------
command CmdSafeAccessCodeCommand for EquipmentSerial {
   label = "Set Safe Access Code to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      call SpreadSafeAccessCode();
      success("Safe Access Code successfully inherited to child objects.");
   }
}
command CmdOperationalGroupsCommand for EquipmentSerial {
   label = "Set Op. Mode Groups to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      @DynamicComponentDependency OPPLAN
      assistant OperationalGroupsAssistant(EquipmentObjectSeq) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command CmdMeasForObjCommand for EquipmentSerial {
   label = "Measurements for Object";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/MeasurementsForObject/Form?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
command ConnectedObjectsCommand for EquipmentSerial {
   label = "Connected Objects";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdResetLocationCommand for EquipmentSerial {
   label = "Reset Location for Structure";
   enabled = [MchCode != null];
   execute {
      confirm("Do you want to clear location for the object structure?") {
         when OK {
            call ResetLocationStructure();
         }
      }
   }
}
command CmdSetLocationCommand for EquipmentSerial {
   label = "Set Location to Structure";
   enabled = [LocationId != null];
   execute {
      confirm("Do you want to set location ${LocationId} to object structure?") {
         when OK {
            call SetLocationStructure(LocationId);
         }
      }
   }
}
command CostDetailsCommand for EquipmentSerial {
   label = "Object Cost/Year";
   enabled = [ETag != null];
   execute {
      navigate "page/EquipObjCostPerYear/EquipObjCostPerYearForm?$filter=Contract eq $[Contract] and MchCode eq $[MchCode]";
   }
}
command ObjectWarrantyCommand for EquipmentSerial {
   label = "Warranty";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ObjectWarranty/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CriticalityAnalysis for EquipmentSerial {
   label = "Criticality Analysis";
   enabled = [ProcessClassId != null and ItemClassId != null and CmStdId != null];
   execute {
      navigate "page/CriticalityMatrixAnalysis/Form?$filter=ProcessClassId eq $[ProcessClassId] and ItemClassId eq $[ItemClassId]";
   }
}
command MakeMaintenanceAwareCommand for EquipmentSerial {
   label = "Make Maintenance Aware";
   enabled = [true];
   execute {
      navigate "page/SerialMaintenanceAware/List";
   }
}
command OperationalStatusInOperationCommand for EquipmentSerial {
   label = "In Operation";
   enabled = [OperStatus = "TRUE"];
   execute {
      call SetInOperation();
   }
}
command OperationalStatusOutofOperationCommand for EquipmentSerial {
   label = "Out of Operation";
   enabled = [OutOfOperation = "TRUE"];
   execute {
      call SetOutOfOperation();
   }
}
command OperationalStatusScrappedCommand for EquipmentSerial {
   label = "Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      call SetScrapped();
   }
}

command OperationalStatusInOperationStructureCommand for EquipmentSerial {
   label = "Set Struture In Operation";
   variable WarningTexts;
   enabled = [OperStatus = "TRUE"];
   execute {
      call SetStructureInOperation();
      call GetExistWarning(Contract, MchCode) into WarningTexts;

      if[WarningTexts = "TRUE"] {
         info("Some objects of the structure ${MchCode} were not changed due to their operational condition.");
      }
   }
}
command OperationalStatusOutofOperationStructureCommand for EquipmentSerial {
   label = "Set Struture Out of Operation";
   enabled = [OutOfOperation = "TRUE"];

   execute {
      if [IsScrapped = "TRUE" and HasStructure = "TRUE"] {
         confirm("Do you want to change the operational status of all the child objects?") {
            when OK {
               call SetStructureOutOfOperation();
            }
            when CANCEL {
               call SetOutOfOperation();
            }
         }
      }
      else {
         call SetStructureOutOfOperation();
      }
   }
}
command OperationalStatusScrappedtructureCommand for EquipmentSerial {
   label = "Set Struture Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      call SetStructureScrapped();
   }
}
command MoveSerialObjectCommand for EquipmentSerial {
   label = "Move Serial Object";
   enabled = [MchCode != null and Contract != null  and IsScrapped != "TRUE" and ReturnInFacility = "TRUE"];

   execute {
      call GetSupMchName(SupContract, SupMchCode)into SupMchName;

      dialog DlgMoveIndividual(MchCode, MchName, Contract, EquipmentObjectSeq, SupMchCode, SupContract, Company, SupMchName) {
         when OK {

            success("Done");
            refresh;

         }

         when CANCEL {
            exit;
         }

      }

   }
}
command CopySerialObjectCommand for EquipmentSerial {
   label = "Copy Serial Object";
   enabled = [MchCode != null and Contract != null and ReturnInFacilityOrWorkshop = "TRUE"];
   variable PartNo;
   variable Contract;
   variable DestContract;
   variable MchCode;
   variable MchName;
   variable PartRev;
   variable SupMchCode;
   variable SupContract;
   variable DfDestSupMchCodeName;
   variable IsSerial;
   variable VarFormName Text;
   execute {
      call GetAssistantMchName(SupContract, SupMchCode)into DfDestSupMchCodeName;
      set VarFormName = "SerialObj";
      dialog DlgCopySerialObject(PartNo, Contract, Contract, MchCode, MchName, PartRev, SupMchCode, SupContract, DfDestSupMchCodeName, VarFormName, AppliedPmProgramId) into
      (Contract2, MchCode, DestContract, DestMchCode, SerialNo, PartNo, PartRev, SupMchCode, SparePart, TechData, Parameter, TestPnt, Document, Pm, Party, SupContract, IsSerial, CopySerialReturn) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command SerialObjectHistoryCommand for EquipmentSerial {
   label = "Serial Object History";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/SerialObjectHistory/List?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
@DynamicComponentDependency PCMSCI
command ServiceContractsforObjectCommand for EquipmentSerial {
   label = "Service Contracts";
   enabled = [ObjExist = "TRUE"];
   execute {
      navigate "page/ServiceContractsForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command PMforObjectStructureCommand for EquipmentSerial {
   label = "PM for Object Structure";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ActiveWorkOrdersCommand for EquipmentSerial {
   label = "Active Work Orders";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ObjectWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command HistoricalWorkOrdersCommand for EquipmentSerial {
   label = "Historical Work Orders";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdTasksCommand for EquipmentSerial {
   label = "Work Tasks";
   enabled = [MchCode != null];
   execute {
      navigate "page/WorkTasks/List?$filter=ReportedObjectId eq $[MchCode] and ReportedObjectSite eq $[Contract]";
   }
}
command PartSerialCommand for EquipmentSerial {
   label = "Part Serial";
   enabled = [PartNo != null and SerialNo != null];
   execute {
      navigate "page/PartSerial/Form?$filter=PartNo eq $[PartNo] and SerialNo eq $[SerialNo]";
   }
}

@DynamicComponentDependency SVCSCH
command SerialObjectSchedulingDetailCommand for EquipmentSerial {
   label = "Scheduling Details";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/SvcschSerialObjectSchedulingDetail/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command MeteringInvoicingCommand for EquipmentSerial
   {
   label = "Metering Invoicing";

   execute {
      navigate  "page/MeteringInvoicing/Form?$filter=MchCode eq $[MchCode]";
   }
}

command MoveToInventoryCommand for EquipmentSerial {
   label = "Move To Inventory";
   enabled = [MchCode != null and SupMchCode != null and IsSerialTracked = "SERIAL TRACKING"];
   variable WoContractVar;
   variable WoMaintOrgVar;
   variable WoDirectiveVar;
   variable WoNoVar;
   execute {
      call GetDefContract() into WoContractVar;
      dialog DlgMoveToInventory(MchCode, Contract, WoContractVar)
      into(MchCode, Contract, WoNoVar, WoContractVar, WoMaintOrgVar, WoDirectiveVar)
         {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command MaintenanceHistoryCommand for EquipmentSerial {
   label = "Maintenance History";
   execute {
      navigate "page/MaintenanceHistoryForObject/MaintenanceHistoryPage?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector SupplierInfoSelector for SupplierInfo {
   label = "${SupplierId}";
   static SupplierId {
      label = "Supplier ID";
   }
   static Name;
}

@Override
selector ReferenceManufacturerInfoSelector for ManufacturerInfo {
   label = "";
   static ManufacturerId {
      label = "Manufacturer ID";
   }
   static Name;
   static AssociationNo;
}

@Override
selector EquipmentSerialSelector for EquipmentSerial {
   label = "${MchCode} - ${MchName} - ${Contract}";
   static MchCode;
   static MchName;
   static Contract;
}
@Override
selector ReferenceEquipmentSerialUivSelector for EquipmentSerial {
   field Contract;
   field MchCode;
   field MchName;
   field MchLoc;
}
@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}

@Override
selector PartCatalogSelector for PartCatalog {
   static PartNo;
   static Description;
   static SerialTrackingCode;
}

@Override
selector ReferenceSupplierInfoSelector for SupplierInfo {
   static SupplierId {
      label = "Supplier ID";
   }
   static Name;
   static AssociationNo {
      visible = [false];
   }
   static SuppliersOwnId {
      visible = [false];
   }
   static CorporateForm {
      visible = [false];
   }
}

@Override
selector ReferenceEquipmentAllObjectUivSelector for EquipmentAllObjectUiv {
   static Contract;
   static MchCode;
   static MchName;
   static EquipmentMainPosition {
      visible = [false];
   }
   static ObjLevel;
   static OperationalStatus;
}

@Override
selector ReferenceItemClassSelector for ItemClass {
   static ItemClassId;
   static ItemClassDesc {
      label = "Item Class Name";
   }
   static ParentItemClassId {
      visible = [false];
   }
   static Notes {
      visible = [false];
   }
   badge Objstate;
}

@Override
selector ReferenceProcessClassSelector for ProcessClass {
   static ProcessClassId;
   static ProcessClassDesc {
      label = "Description";
   }
   static ParentProcessClassId {
      visible = [false];
   }
   static Notes {
      visible = [false];
   }
   badge Objstate;
}

@Override
selector ReferenceAccountingCodePartValueSelector for AccountingCodePartValue {
   static CodePartValue {
      label = "${FetchCostCenter}";
   }
   static MasterComCodePartValue {
      visible = [false];
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentSerialSet for EquipmentSerial;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentSerial {
   from = "equipment_serial_uiv";
   ludependencies = TypeDesignation, TechnicalObjectReference, EquipmentObject;
   keys = EquipmentObjectSeq {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq";
   }
   supportwarnings = [true];
   use attributes = MchCode, Contract, MchName, OperationalStatus, OperationalCondition, SupMchCode, SupContract, Type, MchType, PartNo, CategoryId, SerialNo, PartRev, GroupId, ManufacturedDate, MchLoc, MchPos, ProductionDate, LocationId, ItemClassId, Criticality, ManufacturerNo, VendorNo, SerialState, LatestTransaction, Ownership, Owner, CostCenter, ObjectNo, MchCodeKeyValue, KeyRef, LuName, Company, AppliedPmProgramId, AppliedPmProgramRev, AppliedDate, PmProgApplicationStatus, NotApplicableReason, NotApplicableSetDate, NotApplicableSetUser, ProcessClassId;
   luname = "'EquipmentObject'";

   attribute MchName Text {
      label = "Object Description";
      editable = [ETag = null];
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute ObjectSiteDesc Text {
      fetch = "SITE_API.Get_Description(CONTRACT)";
      label = "Object Site Desc.";
      maxlength = 20;
      editable = [false];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      fetch = "OPERATIONAL_STATUS_DB";
      editable = [false];
   }
   attribute SupMchCode Text {
      label = "Belongs to Object";
   }
   attribute PartRev Text {
      label = "Serial Rev";
   }
   attribute KeyRef Text {
      fetch = "key_ref";
      insertable = [false];
      updatable = [false];
   }
   attribute DfSuppWarranty Text {
      fetch = "Equipment_Object_API.Has_Warranty__(contract,mch_code)";
      maxlength = 5;
      // searchable = false;
      editable = [false];
   }
   attribute DfCustWarranty Text {
      fetch = "Object_Cust_Warranty_API.Has_Warranty(equipment_object_seq, sysdate)";
      maxlength = 5;
      // searchable = false;
      editable = [false];
   }
   attribute ProcessClassId Text {
      label = "Process Class";
      format = uppercase;
   }
   attribute ItemClassId Text {
      label = "Item Class";
      format = uppercase;
   }
   attribute ManufacturerName Text {
      fetch = "Equipment_Manufacturer_API.Get_description(MANUFACTURER_NO)";
      label = "Manufacturer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute PurchPrice Number {
      label = "Acquisition Cost";
      format = ifscurrency;
   }
   attribute ProductionDate Date {
      label = "Installation Date";
      editable = [ETag = null];
   }
   attribute ManufacturedDate Date {
      label = "Manuf Date";
      editable = [ETag = null];
   }
   attribute ObjectNo Text {
      label = "Asset";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(Contract)";
   }
   attribute Owner Text {
      maxlength = 30;
      format = uppercase;
   }
   attribute OwnerVal Text {
      fetch = "OWNER";
   }
   attribute SerialState Text {
      label = "Current Position";
      maxlength = 253;
   }
   attribute Note Text {
      editable = [true];
   }
   attribute SupplierWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_WARRANTY(CONTRACT, MCH_CODE)";
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_CUSTOMER_WARRANTY(CONTRACT, MCH_CODE)";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute Info Text {
      label = "Information";
      // searchable = false;
   }
   attribute Data Text {
      label = "Technical Data";
      // searchable = false;
   }
   attribute Requirements2 Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No('TypeDesignation', TYPE_KEY_VALUE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Documents2 Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('TypeDesignation',TYPE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }
   attribute Untitled Text {
      fetch = "Equipment_Object_API.Do_Exist( CONTRACT, MCH_CODE)";
      label = "(Untitled)";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute OperStatus Text {
      fetch = "Equipment_Serial_API.Activate_In_Operation(CONTRACT,MCH_CODE)";
      label = "Oper Status";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute OutOfOperation Text {
      fetch = "Equipment_Serial_API.Activate_Out_Of_Operation(CONTRACT,MCH_CODE)";
      label = "Out of Operation";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute Scrapped Text {
      fetch = "Equipment_Serial_API.Activate_Scrapped(CONTRACT,MCH_CODE)";
      label = "Scrapped";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute HasStructure Text {
      fetch = "Equipment_Object_API.Has_Structure(CONTRACT, MCH_CODE)";
   }
   attribute IsScrapped Text {

      fetch = "Equipment_Object_API.Is_Scrapped(CONTRACT, MCH_CODE)";
   }
   attribute ChildObjects Text {
      fetch = "Equipment_Object_API.Get_Child_Objects(MCH_CODE, CONTRACT)";
   }
   attribute FetchContract Text {
      fetch = "User_Default_API.Get_Contract";
   }
   attribute SerialNo Text {
      fetch = "serial_no";
   }
   attribute  InRep Text {
      fetch = "PART_SERIAL_CATALOG_API.Is_In_Repair_Workshop(PART_NO,SERIAL_NO)";
   }
   attribute PurchDate Date {
      label = "Purchase Date ";
   }

   attribute OperationalCondition Enumeration(SerialOperationalCond) {
      fetch = "OPERATIONAL_CONDITION_DB";
   }
//   attribute SafeAccessCode Enumeration(SafeAccessCode) {
//      label = "Safe Access";
//      required = [true];
//   }
   attribute SetNonOper Text {
      fetch = "Equipment_Serial_API.Activate_Set_Non_Operational(CONTRACT,MCH_CODE)";
      label = "Set Non Oper";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute AppliedPmProgramId Text {
      label = "PM Program ID";
      editable = [false];
   }
   attribute AppliedPmProgramRev Text {
      label = "PM Program Revision";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute AppliedPmProgramDescription Text {
      editable = [false];
      label = "Description";
      fetch = "Pm_Program_API.Get_Description(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
   }
   @DynamicComponentDependency PCMSTD
   attribute DateModified Date {
      fetch = "Pm_Program_API.Get_Date_Modified(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      editable = [false];
      label = "Date Modified";
   }
   @DynamicComponentDependency PCMSTD
   attribute Status Text {
      fetch = "Pm_Program_API.Get_Status(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute AppliedDate Date {
      editable = [false];
   }
   attribute PmProgApplicationStatus Boolean("TRUE", "FALSE") {
      label = "N/A for PM Programs";
      editable = [false];
   }
   attribute NotApplicableReason Text {
      label = "N/A Set Reason";
      editable = [false];
   }
   attribute NotApplicableSetUser Text {
      label = "N/A Set By";
      editable = [false];
   }
   attribute NotApplicableSetDate Date {
      label = "N/A Set Date";
      editable = [false];
   }
   attribute SetOper Text {
      fetch = "Equipment_Serial_API.Activate_Set_Operational(CONTRACT,MCH_CODE)";
      label = "Set Oper";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute SupMchCodeSaved Text {
      fetch = "SUP_MCH_CODE";
      editable = [false];
   }
   attribute Requirements Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No(LU_NAME, KEY_REF)";
      label = "Requirements";
      editable = [false];
   }
   attribute SpareParts Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_SPARE_API.Has_Spare_Part(CONTRACT, MCH_CODE)";
      label = "Spare Parts";
      editable = [false];
   }
   attribute Warranty Boolean("TRUE", "FALSE") {
      fetch = "substr(EQUIPMENT_OBJECT_API.Has_Any_Warranty(CONTRACT,MCH_CODE),1,5)";
      label = "Warranty";
      editable = [false];
   }
   attribute Documents Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('EquipmentObject',MCH_CODE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }
   attribute Connections Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_CONN_API.Has_Connection(CONTRACT, MCH_CODE)";
      label = "Connections";
      editable = [false];
   }
   attribute TestPoints Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_TEST_PNT_API.Has_Test_Point(CONTRACT, MCH_CODE)";
      label = "Test Points";
      editable = [false];
   }
   attribute Parties Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_PARTY_API.Has_Party(CONTRACT, MCH_CODE)";
      label = "Parties";
      editable = [false];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Notes(CONTRACT,MCH_CODE)";
      label = "Notes";
      editable = [false];
   }
   attribute FetchCostCenter Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT, 'CostCenter')";
   }
   attribute CostCenterCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'CostCenter')";
   }
   attribute HideCostCenter Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT, 'CostCenter')";
   }
   attribute FetchObjectNo Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'Object')";
   }
   attribute ObjectCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'Object')";
   }
   attribute HideObjectNo Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'Object')";
   }
   attribute IsSerialTracked Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(PART_NO)";
   }
   @DynamicComponentDependency PCMSCI
   attribute ObjExist Text {
      fetch = "Psc_Contr_Product_Scope_API.Object_Exist_In_Srv_Line(MCH_CODE, CONTRACT)";
   }
   attribute OldMchType Text {
      fetch = "MCH_TYPE";
      insertable = [false];
      updatable = [false];
   }
   attribute OldSupMchCode Text {
      fetch = "SUP_MCH_CODE";
      insertable = [false];
      updatable = [false];
   }
   attribute RemoveRequirements Text {
      fetch = "NULL";
      updatable = [true];
      editable = [true];
   }
   attribute OldType Text {
      fetch = "TYPE";
      insertable = [false];
      updatable = [false];
   }
   attribute MchTypeHasTechReference Text {
      fetch = "EQUIPMENT_OBJ_TYPE_Api.Has_Technical_Spec_No(MCH_TYPE)";
      updatable = [false];
      insertable = [false];
   }
   attribute OldCostCenter Text {
      fetch = "COST_CENTER";
      insertable = [false];
      updatable = [false];
   }
   attribute ReturnInFacility Text {
      fetch = "Equipment_Serial_API.Is_InFacility(PART_NO, SERIAL_NO)";
   }
   attribute ReturnInFacilityOrWorkshop Text {
      fetch = "Equipment_Serial_API.Infacility_Or_Workshop(PART_NO, SERIAL_NO)";
   }
   attribute IsSerialTr Text {
      fetch = "PART_CATALOG_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
   }

   attribute CmStdId Text {
      fetch = "CM_CLASS_API.Get_Cm_Std_Id(PROCESS_CLASS_ID, ITEM_CLASS_ID)";
      insertable = [false];
      updatable = [false];
   }
   attribute ExistWarning Text {
      fetch = "Equipment_Object_API.Exist_Warning(CONTRACT, MCH_CODE)";
   }
   attribute LuName Text {
      fetch = "lu_name";
      insertable = [false];
      updatable = [false];
   }

   attribute SelectionParameters Enumeration(SelectionAttribTypeEnum) {
      fetch = "'Both'";
      insertable = [false];
      updatable = [false];
   }
   attribute TechnicalSpecNo Number {
      fetch = "Technical_Object_Reference_API.Get_Technical_Spec_No(lu_name, key_ref)";
      insertable = [false];
      updatable = [false];
   }

   reference EquipmentObjTypeRef(MchType) to EquipmentObjType(MchType);
   reference EquipmentCriticalityRef(Criticality) to EquipmentCriticality(Criticality);
   reference ProcessClassRef(ProcessClassId) to ProcessClass(ProcessClassId);
   reference ItemClassRef(ItemClassId) to ItemClass(ItemClassId);
   reference LocationRef(LocationId) to Location(LocationId);
   reference LocationCardRef(LocationId) to EquipObjectLocationLov(LocationId);
   reference EquipmentObjGroupRef(GroupId) to EquipmentObjGroup(GroupId);
   reference EquipmentObjectRef(SupContract, SupMchCode) to EquipmentObject(Contract, MchCode) {
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference SiteRef(Contract) to Site(Contract);
   reference SupplierInfoRef(VendorNo) to SupplierInfo(SupplierId);
   reference CustomerInfoRef(Owner) to CustomerInfo(CustomerId);
   @DynamicComponentDependency PCMSTD
   reference PmProgramRef(AppliedPmProgramId, AppliedPmProgramRev) to PmProgram(PmProgramId, PmProgramRev);
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Object Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";
      copy ItemClassId to ItemClassId;
   }
   reference TypeRef(MchType, Type) to TypeDesignation(MchType, Type) {
      label = "Type Designation";
   }
   reference ProcessClassIdRef(ProcessClassId) to ProcessClass(ProcessClassId) {
      label = "Process Class";
   }
   reference ItemClassIdRef(ItemClassId) to ItemClass(ItemClassId) {
      label = "Item Class";
   }
   reference LocationIdRef(LocationId) to Location(LocationId) {
      label = "Location ID";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference CriticalityRef(Criticality) to EquipmentCriticality(Criticality) {
      label = "Criticality";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Belongs to Object ID";
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference CategoryIdRef(CategoryId) to EquipmentObjCategory(CategoryId) {
      label = "Category";
   }
   reference CostCenterRef(Company, CostCenter) to CodeB(Company, CodeB) {
      label = "Cost Center";
   }
   reference VendorNoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
   reference PartManufacturerRef(PartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Manufacturer";
   }
   reference ManufacturerNoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId) {
      label = "Manufacturer";
   }
   reference ObjectNoRef(Company, ObjectNo) to AccountingCodepartE(Company, CodeE) {
      label = "Asset";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference OwnerRef(Owner) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Owner";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   //!TODO: Key definitions does not match, investigate and correct
   @DynamicComponentDependency PCMSTD
   reference AppliedPmProgramIdRef(AppliedPmProgramId) to PmProgram(PmProgramId) {
      label = "PM Program ID";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference CostCenterCodePartRef(Company, CostCenterCodePart, CostCenter) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference ObjectCodePartRef(Company, ObjectCodePart, ObjectNo) to AccountingCodePartValue(Company, CodePart, CodePartValue);

   array EquipmentObjectPartyArray(EquipmentObjectSeq) to EquipmentObjectParty(EquipmentObjectSeq);
   array EquipmentObjectSparePartArray(EquipmentObjectSeq) to EquipmentObjectSpare(EquipmentObjectSeq);
//   @DynamicComponentDependency OPPLAN
//   array OperationalModeGroupsArray(MchCode, Contract) to ObjectOperModeGroup(MchCode, Contract);
   array TestPointsarray(MchCode, Contract, LuName) to EquipmentObjectTestPnt(MchCode, Contract, LuName);
   array TechnicalObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
   array TypeDesignationArray(Type) to TypeDesignation(Type);

   action SpreadSafeAccessCode;

   action SetLocationStructure {
      ludependencies = EquipmentSerial;
      parameter LocationId Text;
   }

   action ResetLocationStructure {
      ludependencies = EquipmentSerial;
   }

   action SetInOperation {
      ludependencies = EquipmentSerial;
   }

   action SetOutOfOperation {
      ludependencies = EquipmentSerial;
   }

   action SetScrapped {
      ludependencies = EquipmentSerial;
   }

   action SetStructureInOperation {
      ludependencies = EquipmentSerial;
      supportwarnings = [true];
   }

   action SetStructureOutOfOperation {
      ludependencies = EquipmentSerial;
   }

   action SetStructureScrapped {
      ludependencies = EquipmentSerial;
   }

   action SetInOperative {
      ludependencies = EquipmentSerial;
   }

   action SetNonOperative {
      ludependencies = EquipmentSerial;
   }
   action SetStructureOperational {
      ludependencies = EquipmentSerial;
   }

   action SetStructureNonOperational {
      ludependencies = EquipmentSerial;
   }
}

---------------------------------- ACTIONS ----------------------------------

//action ValidateSupMchCode  Structure(ValidateSupMchCodeReturn) {
//   initialcheck UserAllowedSite(SupContract);
//   parameter SupContract Text;
//   parameter SupMchCode Text;
//}

//structure ValidateSupMchCodeReturn {
//   attribute CostCenter Text;
//   attribute MchLoc Text;
//   attribute MchPos Text;
//   attribute ObjectNo Text;
//   attribute LocationId Text;
//
//}

   --------------------------------- FUNCTIONS ---------------------------------
function GetDefContract Text {
}
function GetPartNosForSerial List < Entity(PartCatalog) > {
   where = "PART_NO NOT IN (SELECT PART_NO
                         FROM PURCHASE_PART
                        WHERE EXTERNAL_RESOURCE_DB = 'TRUE')";
}
function GetSupMchCode List < Entity(EquipmentAllObjectUiv) > {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function GetTypeDesignationsForSerial List < Entity(TypeDesignation) > {
   parameter MchType Text;
   where = "mch_type LIKE nvl(:MchType,mch_type) ";
}
//function HasMchTypeTechSpec Text {
//   parameter MchType Text;
//}
//function GetExistWarning Text {
//   parameter Contract Text;
//   parameter MchCode Text;
//}
//function InFacilityOrRepairWorkshop Boolean {
//   parameter PartNo Text;
//   parameter SerialNo Text;
//}
//function GetMchDescription Text {
//   parameter PartNo Text;
//}
//function GetCompany Text {
//   parameter Contract Text;
//}
//function GetMchType Text {
//   parameter Type Text;
//}
//function GetLogicalCodePartValues Structure(LogicalCodePartValues) {
//   parameter Contract Text;
//}
//function GetOldData Structure(GetOldInfo) {
//   parameter Contract Text;
//   parameter MchCode Text;
//}

//structure TypeDesValues {
//   attribute MchType Text;
//   attribute ItemClass Text;
//}
//function GetTypeDesignationValues Structure(TypeDesValues) {
//   parameter Type Text;
//}
function PartManufactureFilterForSerial List < Entity(PartManufacturer) > {
   parameter PartNo Text;
   where = "PART_NO = :PartNo";
}
//function GetSerialTracked Text {
//   parameter PartNo Text;
//}
function GetCostCenterAccForSerial List < Entity(Account) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeBForSerial List < Entity(CodeB) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeCForSerial List < Entity(CodeC) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeDForSerial List < Entity(CodeD) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeEForSerial List < Entity(CodeE) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeFForSerial List < Entity(CodeF) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeGForSerial List < Entity(CodeG) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeHForSerial List < Entity(CodeH) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeIForSerial List < Entity(CodeI) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeJForSerial List < Entity(CodeJ) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetActiveMchType List < Entity(EquipmentObjType) > {
   where = " OBJSTATE = 'Active'";
}
//function GetIsSerialTr Text {
//   parameter PartNo Text;
//}
//function InOperativeWarning Text {
//   parameter Contract Text;
//   parameter MchCode Text;
//}