-----------------------------------------------------------------------------
--
--  Fragment:     FunctionalObjectTab
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  240619  SHEPLK  Created, To connect this to EON
--  200106  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  210104  LASSLK  AM2020R1-7246, Added group CriticalAnalysisGroup,list CriticalAnalysisResultList and attribute VisibleCriticalityAnalysis in EquipTabSelection virtual
--  210105  DEEKLK  AM2020R1-7134, moved GetMchName() to fragment MoveFunctionalObjectDialog.
--  210715  RUSSLK  AMZEAX-648,Moved GbNotesGroup to EquipmentObjectList fragment.
--  210917  LASSLK  AM21R2-2778, Modified use attributes in entity EquipmentFunctional.
--  211001  JIHALK  AMZEAX-697, Modidfied FunctionalObjectGroup MchTypeRef LOV.
--  220111  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                  and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------
fragment FunctionalObjectTab;
component EQUIP;
layer Core;
description "To enter, change, view, or delete the information on a functional object";

include fragment AccountingCodepartESelector;
include fragment EquipObjectLocationLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment EquipmentFunctionalLovSelector;
include fragment EquipmentFunctionalUivSelector;
include fragment MoveFunctionalObjectDialog;
include fragment CopyFunctionalObjectDialog;
include fragment NewFunctionalObjectDialog;
include fragment EquipmentObjectPartyList;
include fragment EquipmentObjectUivSelector;
include fragment EquipmentObjectParty4Selector;
@DynamicComponentDependency ORDER
include fragment CustAddressShipLovSelector;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment PersonInfoLovSelector;
@DynamicComponentDependency INVENT
include fragment InventoryPartWoLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLovSelector;
include fragment EquipmentObjectSparePartsList;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment TestPointParameters;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment ResourceEquipmentSiteConnSelector;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment BoexpTwSettings;
include fragment EquipmentFunctionalPerfQuery;
----------------------------- CLIENT FRAGMENTS ------------------------------
warningsenabled = EquipmentObjectSpare;

page Form using EquipmentFunctionalSet {
   label = "Functional Object";

   group TabTypeSelectionGroup;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CmdSafeAccessCodeCommand for EquipmentFunctional {
   label = "Set Safe Access Code to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      call SpreadSafeAccessCode();
      success("Safe Access Code successfully inherited to child objects.");
   }
}
command CmdOperationalGroupsCommand for EquipmentFunctional {
   label = "Set Op. Mode Groups to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      @DynamicComponentDependency OPPLAN
      assistant OperationalGroupsAssistant(EquipmentObjectSeq) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command CmdMeasForObjCommand for EquipmentFunctional {
   label = "Measurements for Object";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/MeasurementsForObject/Form?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
command ConnectedObjectsCommand for EquipmentFunctional {
   label = "Connected Objects";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdResetLocationCommand for EquipmentFunctional {
   label = "Reset Location for Structure";
   enabled = [MchCode != null];
   execute {
      confirm("Do you want to clear location for the object structure?") {
         when OK {
            call ResetLocationStructure();
         }
      }
   }
}
command CmdSetLocationCommand for EquipmentFunctional {
   label = "Set Location to Structure";
   enabled = [LocationId != null];
   execute {
      confirm("Do you want to set location ${LocationId} to object structure?") {
         when OK {
            call SetLocationStructure(LocationId);
         }
      }
   }
}
command CostDetailsCommand for EquipmentFunctional {
   label = "Object Cost/Year";
   enabled = [ETag != null];
   execute {
      navigate "page/EquipObjCostPerYear/EquipObjCostPerYearForm?$filter=Contract eq $[Contract] and MchCode eq $[MchCode]";
   }
}
command ObjectWarrantyCommand for EquipmentFunctional {
   label = "Warranty";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ObjectWarranty/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command StructureCommand for EquipmentFunctional {
   label = "Structure";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

@DynamicComponentDependency PLADES
command DesignObjectInformationCommand for EquipmentFunctional {
   label = "Design Object";
   enabled = [DesignStatus != null and MchCode != null];
   execute {
      navigate "page/DesignObject/Form?$filter=Keya eq $[MchCode] and Site eq $[Contract]";
   }
}
command CopyFunctionalObjectCommand for EquipmentFunctional {
   label = "Copy Functional Object";
   enabled = [MchCode != null and Contract != null];
   variable NewContract;
   variable NewMchCode;
   variable NewMchName;
   variable ParentContract;
   variable ParentMchCode;
   variable ParentMchName;

   variable CbSpareParts;
   variable CbRequirements;
   variable CbParameters;
   variable CbTestPoints;
   variable CbDocuments;
   variable CbPm;
   variable CbParties;

   execute {
      call GetMchName(ParentContract, ParentMchCode) into ParentMchName;
      dialog DlgCopyFunctionalObj(Contract, MchCode, MchName, SupContract, SupMchCode, ParentMchName, AppliedPmProgramId)
      into(NewContract, NewMchCode, NewMchName, ParentContract, ParentMchCode, ParentMchName, CbSpareParts, CbRequirements, CbParameters, CbTestPoints, CbDocuments, CbPm, CbParties) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command PMforObjectStructureCommand for EquipmentFunctional {
   label = "PM for Object Structure";
   enabled = [true];
   execute {
      navigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ActiveWorkOrdersCommand for EquipmentFunctional {
   label = "Active Work Orders";
   enabled = [true];
   execute {
      navigate "page/ObjectWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command HistoricalWorkOrdersCommand for EquipmentFunctional {
   label = "Historical Work Orders";
   enabled = [true];
   execute {
      navigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdTasksCommand for EquipmentFunctional {
   label = "Work Tasks";
   enabled = [true];
   execute {
      navigate "page/WorkTasks/List?$filter=ReportedObjectId eq $[MchCode] and ReportedObjectSite eq $[Contract]";
   }
}

--------------------------------- SELECTORS ---------------------------------
selector EquipmentObjTypesSelector for EquipmentObjType {
   label = "${MchType} - ${Description}";
   static MchType;
   static Description;
   badge Objstate;
}

@Override
selector EquipmentFunctionalSelector for EquipmentFunctional {
   label = "${MchCode} - ${MchName}";
   static MchCode;
   static MchName;
   static Contract;
   static ObjLevel;
   badge OperationalStatus {
      style = TextOnly;
      size = Medium;
      showlabel = false;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
}

@Override
selector ReferenceEquipmentFunctionalObjectUivSelector for EquipmentFunctionalUiv {
   field Contract;
   field MchCode;
   field MchName;
   field MchLoc;
   field GroupId;
   field CategoryId;
}

@Override
selector ProcessClassSelector for ProcessClass {
   field ProcessClassId;
   field ProcessClassDesc;
   field ParentProcessClassId;
   field Notes;
   field Objstate;

}

@Override
selector ReferenceAccountSelector for Account {
   label = "";

   static Account;
   static Description {
      label = "Account Description";
   }
   static TaxHandlingValue {
      label = "Tax Handling";
   }
   static TaxFlag {
      label = "Tax Account";
   }
   static ArchivingTransValue {
      label = "Archiving Options";
   }
   static TaxCodeMandatory {
      label = "Tax Code Mandatory in Voucher Entry";
   }
}

@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}


@Override
selector ReferenceAccountingCodePartValueSelector for AccountingCodePartValue {
   static CodePartValue {
      label = "${FetchCostCenter}";
   }
   static MasterComCodePartValue {
      visible = [false];
   }
}


---------------------------------- GROUPS -----------------------------------
group TabTypeSelectionGroup for EquipTabSelection {
   label = "";
   field VisibleTypeDesignation {
      size = Small;
      validate command {
         execute {
            if [VisibleTypeDesignation = true] {
               set VisibleSpareParts = false;
               set VisibleTestPoints = false;
               set VisibleJournal = false;
               set VisibleParties = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleSpareParts {
      size = Small;
      validate command {
         execute {
            if [VisibleSpareParts = true] {
               set VisibleTypeDesignation = false;
               set VisibleTestPoints = false;
               set VisibleJournal = false;
               set VisibleParties = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleTestPoints {
      size = Small;
      validate command {
         execute {
            if [VisibleTestPoints = true] {
               set VisibleTypeDesignation = false;
               set VisibleSpareParts = false;
               set VisibleJournal = false;
               set VisibleParties = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleJournal {
      size = Small;
      visible = [ObjLevel != null];
      validate command {
         execute {
            if [VisibleJournal = true] {
               set VisibleTypeDesignation = false;
               set VisibleSpareParts = false;
               set VisibleTestPoints = false;
               set VisibleParties = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleParties {
      size = Small;
      validate command {
         execute {
            if [VisibleParties = true] {
               set VisibleTypeDesignation = false;
               set VisibleSpareParts = false;
               set VisibleTestPoints = false;
               set VisibleJournal = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleRequirements {
      size = Small;
      validate command {
         execute {
            if [VisibleRequirements = true] {
               set VisibleTypeDesignation = false;
               set VisibleSpareParts = false;
               set VisibleTestPoints = false;
               set VisibleJournal = false;
               set VisibleParties = false;
            }
         }
      }
   }
   field VisibleWarranty {
      size = Small;
   }
   field VisibleCost {
      size = Small;
   }
   field VisibleMeteringInvoice {
      size = Small;
   }
   field VisibleOpModes {
      size = Small;
   }
   field VisibleCriticalityAnalysis {
      size = Small;
   }
}

group FunctionalObjectGroup for EquipmentFunctional {
   label = "General";
   lov SupMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      editable = [SupMchCodeSaved = null];

   }

   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [SupMchCodeSaved = null];

   }
   lov TypeRef with TypeDesignationSelector using GetTypeDesignationsForFunc(MchType) {
      search = Type, Description;
      size = Medium;
      description = TypeRef.Description;

      validate command {
         variable Resultrec {
            type = TypeDesValues;
         }

         execute {
            if [Type != null] {
               call GetTypeDesignationValues(Type) into Resultrec;
               set MchType = Resultrec.MchType;
               if [Resultrec.ItemClass != null] {
                  set ItemClassId = Resultrec.ItemClass;

               }
            }
         }
      }
   }
   lov MchTypeRef with EquipmentObjTypesSelector {
      search = MchType, Description;
      size = Small;
      description = MchTypeRef.Description;
      validate command {
         variable TempMchType;
         variable GetItemClass;

         execute {
            call HasMchTypeTechSpec(MchType) into MchTypeHasTechReference;
            call GetItemClassId(MchCode, Contract, MchType) into GetItemClass;
            set ItemClassId = GetItemClass;
            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchType;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }

            }
         }
      }
   }
   field OldMchType {
      visible = [false];
   }
   field OldType {
      visible = [false];
   }
   lov CategoryIdRef with ReferenceEquipmentObjCategorySelector {
      search = CategoryId, Description;
      size = Small;
   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Small;
   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Medium;
      description = CriticalityRef.Description;
   }
   field ProductionDate {
      size = Small;
   }
   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Medium;
      description = ItemClassIdRef.ItemClassDesc;
   }
   lov ProcessClassRef with ProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      size = Medium;
      description = ProcessClassRef.ProcessClassDesc;
   }
   field IsCategoryObject {
      size = Small;
//      label = "Category Object";
   }
}

group FunctionalObjectHasGroup for EquipmentFunctional {
   label = "Functional Object Has";

   field Requirements2 {
      size = Small;
   }
   field SpareParts {
      size = Small;
   }
   field Warranty {
      size = Small;
   }
   field Documents2 {
      size = Small;
   }
   field Connections {
      size = Small;
   }
   field TestPoints {
      size = Small;
   }
   field Parties {
      size = Small;
   }
   field Notes {
      size = Small;
   }
}

group TypeDesignationGroup for TypeDesignation {
   label = "Type Designation";

   field Type {
      size = Medium;
   }
   field Description {
      size = Large;
   }
}

group AttributeTypeGroup for EquipmentFunctional {
   label = "Attribute Type - ${SelectionParameters}";

   radiogroup SelectionParameters {
      showlabel = false;
      size = FullWidth;


   }
}

//group SafeAccessGroup for EquipmentFunctional {
//   label = "";
//   field SafeAccessCode {
//      required = [true];
//   }
//}

group GbStructuresGroup for EquipmentFunctional {
   collapsed = [true];
   label = "Structures";

   lov LocationContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov LocationMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = LocationMchCodePerfRef.MchName;
   }
   lov FromContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov FromMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = FromMchCodePerfRef.MchName;
   }
   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov ToMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = ToMchCodePerfRef.MchName;
   }
   lov ProcessContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov ProcessMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = ProcessMchCodePerfRef.MchName;
   }
   lov PipeContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov PipeMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = PipeMchCodePerfRef.MchName;
   }
   lov CircuitContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov CircuitMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = CircuitMchCodePerfRef.MchName;
   }
}
group GbPmProgramGroup for EquipmentFunctional {
   collapsed = [true];
   label = "PM Program";
   @DynamicComponentDependency PCMSTD
   lov AppliedPmProgramIdRef with ReferencePmProgramSelector {
      search = PmProgramRev, Description;
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field AppliedPmProgramDescription {
      size = Medium;
      editable = [false];
   }
   field AppliedPmProgramRev {
      size = Small;
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   badge Status {
      style = TextOnly;
      size = Small;
      emphasis StatePreliminary = [Status = "Preliminary"];
      emphasis StateActive = [Status = "Active"];
      emphasis StateObsolete = [Status = "Obsolete"];
   }
   field AppliedDate {
      size = Medium;
   }
   @DynamicComponentDependency PCMSTD
   field DateModified {
      size = Small;
   }
   field PmProgApplicationStatus {
      size = Small;
      required = [true];
   }
   field NotApplicableReason {
      editable = [false];
   }
   field NotApplicableSetDate {
      size = Small;
      editable = [false];
   }
   field NotApplicableSetUser {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
         key = Authorizer;
      }
   }
}
group CriticalAnalysisGroup for CmClass {
   label = "Criticality Analysis";

   lov ProcessClassIdRef with ReferenceProcessClassSelector {
      description = ProcessClassIdRef.ProcessClassDesc;
      size = Medium;
   }
   lov CmStdIdRef with ReferenceCmStandardSelector {
      description = CmStdIdRef.Description;
      editable = [false];

   }
}

----------------------------------- LISTS -----------------------------------
list ObjectJournalList for EquipmentObjectJournal {
   label = "";
   orderby = LineNo desc;
   field LineNo {
      editable = [false];
      size = Small;
   }
   field JournalDate {
      editable = [false];
      size = Medium;
   }
   badge EventType {
      style = TextOnly;
      size = Small;
      emphasis Complementary1 = [EventType = "Modified"];
      emphasis Complementary2 = [EventType = "Move"];
      emphasis Complementary3 = [EventType = "Status Change"];
      emphasis Complementary4 = [EventType = "Created"];
      emphasis Complementary5 = [EventType = "Modified"];
   }
   field OldValue {
      editable = [false];
      size = Small;
   }
   field NewValue {
      editable = [false];
      size = Small;
   }
   field JournalText {
      editable = [false];
      size = Medium;
   }
   field Note {
      size = Large;
      multiline = true;
   }
   field CreatedBy {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field ModifyDate;
   field ModifiedBy {
      size = Small;

      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
}
//@DynamicComponentDependency OPPLAN
//list ObjectOperModeGroupList for ObjectOperModeGroup {
//   label = "Operational Mode Groups";
//   lov OperModeGroupIdRef with ReferenceOperationalModeGroupSelector {
//      description = OperModeGroupIdRef.Description;
//   }
//   field Inherited {
//      size = Small;
//   }
//}
//@DynamicComponentDependency OPPLAN
//list GroupConnectedModeList for OperModeGroupConnect {
//   label = "Operational Modes";
//   field OperModeIdRef {
//      size = Small;
//   }
//   field OperModeIdRef.Description {
//      label = "Operational Mode Description";
//   }
//   field OperModeGroupId;
//}


@Override
list AccountingCodePartValueLovList for AccountingCodePartValue {
   static MasterComCodePartValue {
      columnvisible = [false];
   }
}
list CriticalAnalysisResultList for CriticalAnalysisResult {
   label = "Criticality Matrix Risk Categories";
   crudactions {
      new {

         enabled = [false];
      }

      edit {
         enabled = [false];

      }
   }
   lov CmRiskCatIdRef with ReferenceCmRiskCategorySelector {
      label = "CM Risk Category";
      size = Medium;
      description = CmRiskCatIdRef.Description;
   }
   field CmCriticality {
      size = Small;
      label = "CM Criticality";
   }
   lov CmSeverityIdRef with ReferenceCmSeveritySelector {
      label = "CM Severity";
      description = CmSeverityIdRef.Description;
      size = Medium;
   }
   field CmSeverityIdRef.SeverityRating {
      size = Small;
      label = "Severity Rating";
   }
   lov CmProbabilityIdRef with ReferenceCmProbabilitySelector {
      label = "CM Probability";
      description = CmProbabilityIdRef.Description;
      size = Medium;
   }
   field CmProbabilityIdRef.ProbabilityRating {
      size = Small;
      label = "Probability Rating";
   }
   field RcmReference {
      size = Small;
      label = "RCM Reference";
   }
   field RcmLocked {
      label = "RCM Locked";
      size = Small;


   }
}


----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

-------------------------------- SINGLETONS ---------------------------------

singleton TypeDesignationSingleton for TypeDesignation {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
}

singleton TypeDesTechnicalObjRefSingleton for TechnicalObjectReference {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   command TechSpecChangeStatusCommand;
   command TechSpecRefreshAttributesCommand;
}
singleton FunctionalObjectGeneralSingleton for EquipmentFunctional {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         visible = [false];
      }
      delete {
         enabled = [false];
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command ConnectedObjectsCommand;
         command StructureCommand;
         command CmdOperationalGroupsCommand;
         command CmdSafeAccessCodeCommand;
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command CmdMeasForObjCommand;
   }
   command ObjectWarrantyCommand;
   commandgroup CommandGroup4CmdGroup {
      commandgroup MoveCopy {
         label = "Move/Copy";
         command OpenDlgMoveFunctional;
         command CopyFunctionalObjectCommand;
      }
   }
   commandgroup CommandGroup3CmdGroup {
      commandgroup SetResetLocationtoStructure {
         label = "Set/Reset Location to Structure";
         command CmdSetLocationCommand;
         command CmdResetLocationCommand;
      }
   }
   command CostDetailsCommand;
   @DynamicComponentDependency PLADES
   command DesignObjectInformationCommand;



//   commandgroup CommandGroup5CmdGroup {
//      commandgroup MaintenanceInformation {
//         label = "Maintenance Information";
//         command PMforObjectStructureCommand;
//         command ActiveWorkOrdersCommand;
//         command CmdTasksCommand;
//         command HistoricalWorkOrdersCommand;
//      }
//   }

}
----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------



--------------------------- PROJECTION FRAGMENTS ----------------------------
entityset EquipmentFunctionalSet for EquipmentFunctional;
entityset EquipmentObjectJournalSet for EquipmentObjectJournal;
entityset TypeDesignationSet for TypeDesignation;

@Override
entity EquipmentFunctional {
   from = "equipment_functional_uiv";
   ludependencies = TypeDesignation, TechnicalObjectReference, EquipmentObject;
   keys = EquipmentObjectSeq {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq";
   }
   supportwarnings = [true];
   use attributes = MchCode, Contract, ObjLevel, OperationalStatus, PartNo, MchName, SerialNo, PartRev, MchType, Type, ProcessClassId, ItemClassId, GroupId, Criticality, SupContract, SupMchCode, LocationId, LocationContract, LocationMchCode, FromContract, FromMchCode, ToContract, ToMchCode, ProcessContract, ProcessMchCode, PipeContract, PipeMchCode, CircuitContract, CircuitMchCode, MchLoc, MchPos, CategoryId, CostCenter, VendorNo, ManufacturerNo, EquipmentMainPosition, PurchPrice, PurchDate, ProductionDate, ManufacturedDate, ObjectNo, Note, HasStructure, HasConnection, WarrExp, MchDoc, Info, Data, AppliedPmProgramId, AppliedPmProgramRev, AppliedDate, PmProgApplicationStatus, NotApplicableReason, NotApplicableSetUser, NotApplicableSetDate, OperationalStatusDb, OperationalCondition, SafeAccessCode;
   luname = "'EquipmentObject'";

   attribute MchCode Text {
      required = [true];
   }
   attribute MchName Text {
      required = [true];
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute Company Text {
      label = "Company";
      fetch = "Site_API.Get_Company(CONTRACT)";
   }
   attribute ObjectSiteDesc Text {
      fetch = "SITE_API.Get_Description(CONTRACT)";
      label = "Object Site Desc.";
      maxlength = 20;
      editable = [false];
   }
   attribute ObjLevel Text {
      required = [true];
      editable = [ETag = null];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      editable = [false];
   }
   attribute OperationalStatusDb Text {
      editable = [false];
      fetch = "OPERATIONAL_STATUS_DB";

   }
   @DynamicComponentDependency PLADES
   attribute DesignStatus Text {
      fetch = "Plant_Object_API.Get_Design_Status_Equip_Obj(CONTRACT, MCH_CODE)";
      label = "Design Status";
      editable = [false];
   }
   attribute SupMchCode Text {
      label = "Belongs to Object";
   }
   attribute SupMchCodeSaved Text {
      label = "Belongs to Object Saved";
      fetch = "SUP_MCH_CODE";
      editable = [false];
   }

   attribute SupContract Text {
      label = "Belongs to Site";
   }
   attribute SerialNo Text {
      label = "Serial No";
   }
   attribute EquipmentMainPosition Enumeration(EquipmentMainPosition) {
      label = "Main Position";
   }
   attribute ManufacturedDate Date {
      label = "Mfg Date";
   }
   attribute ProductionDate Date {
      label = "Installation Date";
   }
   attribute ItemClassId Text {
      label = "Item Class";
      format = uppercase;
   }

   attribute ManufacturerName Text {
      fetch = "Equipment_Manufacturer_API.Get_Description(MANUFACTURER_NO)";
      label = "Manufacturer Name";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute ObjectNo Text {
      label = "Asset";
   }
   attribute Requirements2 Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No(LU_NAME, KEY_REF)";
      label = "Requirements";
      editable = [false];
   }
   attribute SpareParts Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_SPARE_API.Has_Spare_Part(CONTRACT, MCH_CODE)";
      label = "Spare Parts";
      editable = [false];
   }
   attribute Warranty Boolean("TRUE", "FALSE") {
      fetch = "substr(EQUIPMENT_OBJECT_API.Has_Any_Warranty(CONTRACT,MCH_CODE),1,5)";
      label = "Warranty";
      editable = [false];
   }
   attribute Documents2 Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('EquipmentObject',MCH_CODE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }
   attribute Connections Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_CONN_API.Has_Connection(CONTRACT, MCH_CODE)";
      label = "Connections";
      editable = [false];
   }
   attribute TestPoints Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_TEST_PNT_API.Has_Test_Point(CONTRACT, MCH_CODE)";
      label = "Test Points";
      editable = [false];
   }
   attribute Parties Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_PARTY_API.Has_Party(CONTRACT, MCH_CODE)";
      label = "Parties";
      editable = [false];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Notes(CONTRACT,MCH_CODE)";
      label = "Notes";
      editable = [false];
   }
   attribute Requirements3 Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No('TypeDesignation', TYPE_KEY_VALUE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Documents3 Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('TypeDesignation',TYPE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }

   attribute IsCategoryObject Boolean("TRUE", "FALSE") {
      editable = [false];
   }
   attribute IsGeographicObject Boolean("TRUE", "FALSE") {
      label = "Geographical Object";
      editable = [true];
      required = [true];

   }

   attribute SupplierWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_WARRANTY(CONTRACT, MCH_CODE)";
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_CUSTOMER_WARRANTY(CONTRACT, MCH_CODE)";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute LocationalParentDescription Text {
      label = "Description";
      fetch = "Equipment_Object_API.Get_Mch_Name(LOCATION_CONTRACT, LOCATION_MCH_CODE)";
   }
   attribute LocationContract Text {
      label = "Locational Object Site";
   }
   attribute LocationMchCode Text {
      label = "Locational Object";
   }
   attribute FromMchCode Text {
      label = "From Object";
   }
   attribute FromObjectDescription Text {
      label = "Description";
      fetch = "Equipment_Object_API.Get_Mch_Name(FROM_CONTRACT, FROM_MCH_CODE)";
   }
   attribute FromContract Text {
      label = "From Object Site";
      maxlength = 100;
   }
   attribute ToMchCode Text {
      label = "To Object";
   }
   attribute ToObjectDescription Text {
      label = "Description";
      fetch = "Equipment_Object_API.Get_Mch_Name(TO_CONTRACT, TO_MCH_CODE)";
   }
   attribute ToContract Text {
      label = "To Object Site";
      maxlength = 100;
   }
   attribute ProcessMchCode Text {
      label = "Process Object";
   }
   attribute ProcessMchCodeDescription Text {
      label = "Description";
      fetch = "Equipment_Object_API.Get_Mch_Name(PROCESS_CONTRACT, PROCESS_MCH_CODE)";
   }
   attribute ProcessContract Text {
      label = "Process Object Site";
      maxlength = 100;
   }
   attribute PipeMchCode Text {
      label = "Pipe System";
   }
   attribute PipeSystemDescription Text {
      label = "Description";
      fetch = "Equipment_Object_API.Get_Mch_Name(PIPE_CONTRACT, PIPE_MCH_CODE)";
   }
   attribute PipeContract Text {
      label = "Pipe System Site";
      maxlength = 100;
   }
   attribute CircuitMchCode Text {
      label = "Electrical System";
   }
   attribute ElectricalDescription Text {
      label = "Description";
      fetch = "Equipment_Object_API.Get_Mch_Name(CIRCUIT_CONTRACT, CIRCUIT_MCH_CODE)";
   }
   attribute CircuitContract Text {
      label = "Electrical System Site";
      maxlength = 100;
   }

   attribute CostCenter Text;

   attribute AppliedPmProgramId Text {
      label = "PM Program ID";
      editable = [false];
   }
   attribute AppliedPmProgramRev Text {
      label = "Revision";
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute AppliedPmProgramDescription Text {
      editable = [false];
      label = "Description";
      fetch = "Pm_Program_API.Get_Description(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
   }
   @DynamicComponentDependency PCMSTD
   attribute PMProgramStatus Text {
      fetch = "Pm_Program_API.Get_Status(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute AppliedDate Date {
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute Status Text {
      fetch = "Pm_Program_API.Get_Status(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProcessClassId Text {
      format = uppercase;
   }
   @DynamicComponentDependency PCMSTD
   attribute DateModified Date {
      fetch = "Pm_Program_API.Get_Date_Modified(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      editable = [false];
      label = "Date Modified";
   }
   attribute PmProgApplicationStatus Boolean("TRUE", "FALSE") {
      required = [true];
      editable = [false];
      label = "N/A for PM Programs";
   }
   attribute NotApplicableReason Text {
      editable = [false];
      label = "N/A Set Reason";
   }
   attribute NotApplicableSetDate Date {
      editable = [false];
      label = "N/A Set Date";
   }
   attribute NotApplicableSetUser Text {
      editable = [false];
      label = "N/A Set By";
   }

   attribute ChildObjects Text {
      fetch = "Equipment_Object_API.Get_Child_Objects(MCH_CODE, CONTRACT)";
   }
   attribute PlanStatus Text {
      fetch = "Equipment_Functional_API.Is_Planned_For_Operation(CONTRACT, MCH_CODE)";
   }
   attribute OutOperStatus Text {
      fetch = "Equipment_Functional_API.Is_Out_Of_Operation(CONTRACT, MCH_CODE)";
   }
   attribute InOperStatus Text {
      fetch = "Equipment_Functional_API.Is_In_Operation(CONTRACT, MCH_CODE)";
   }
   attribute Scrapped Text {
      fetch = "Equipment_Functional_API.Is_Scrapped(CONTRACT, MCH_CODE)";
   }
   attribute HasStructure Text {
      fetch = "Equipment_Object_API.Has_Structure(CONTRACT, MCH_CODE)";
   }
   @DynamicComponentDependency PCMSCI
   attribute ObjExist Text {
      fetch = "Psc_Contr_Product_Scope_API.Object_Exist_In_Srv_Line(MCH_CODE, CONTRACT)";
   }
   attribute Note Text {
      editable = [true];
   }
   attribute FetchCostCenter Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute CostCenterCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'CostCenter')";
   }
   attribute HideCostCenter Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute FetchObjectNo Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'Object')";
   }
   attribute HideObjectNo Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'Object')";
   }
   attribute ObjtsCstCenterView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'CostCenter')";
   }
   attribute ObjtsObjectNoView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'Object')";
   }
   attribute ObjectCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'Object')";
   }
   attribute RemoveRequirements Text {
      fetch = "NULL";
      updatable = [true];
      editable = [true];

   }
   attribute OldMchType Text {
      fetch = "MCH_TYPE";
      insertable = [false];
      updatable = [false];


   }
   attribute OldType Text {
      fetch = "TYPE";
      insertable = [false];
      updatable = [false];

   }
   attribute MchTypeHasTechReference Text {
      fetch = "EQUIPMENT_OBJ_TYPE_Api.Has_Technical_Spec_No(mch_type)";
      updatable = [false];
      insertable = [false];

   }
   attribute LuName Text {
      fetch = "lu_name";
      insertable = [false];
      updatable = [false];
   }
   attribute CmStdId Text {
      fetch = "CM_CLASS_API.Get_Cm_Std_Id(process_class_id, item_class_id)";
      insertable = [false];
      updatable = [false];
   }

   attribute KeyRef Text {
      fetch = "key_ref";
      insertable = [false];
      updatable = [false];

   }

   attribute SelectionParameters Enumeration(SelectionAttribTypeEnum) {
      fetch = "'Both'";
      insertable = [false];
      updatable = [false];
   }
   attribute TechnicalSpecNo Number {
      fetch = "Technical_Object_Reference_API.Get_Technical_Spec_No(lu_name, key_ref)";
      insertable = [false];
      updatable = [false];
   }

//   attribute SafeAccessCode Enumeration(SafeAccessCode) {
//      label = "Safe Access";
//      required = [true];
//   }
   reference ItemClassRef(ItemClassId) to ItemClass(ItemClassId);
   reference EquipmentCriticalityRef(Criticality) to EquipmentCriticality(Criticality);
   reference LocationRef(LocationId) to Location(LocationId);
   reference LocationCardRef(LocationId) to EquipObjectLocationLov(LocationId);
   @DynamicComponentDependency PCMSTD
   reference PmProgramRef(AppliedPmProgramId, AppliedPmProgramRev) to PmProgram(PmProgramId, PmProgramRev);
   reference ProcessClassRef(ProcessClassId) to ProcessClass(ProcessClassId) {
      label = "Process Class";
   }
   //reference EquipmentFunctionalRef(Contract, MchCode) to EquipmentFunctional(Contract, MchCode);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ObjLevelRef(ObjLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "Object Level";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Belongs to Object";
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference TypeRef(Type) to TypeDesignation(Type) {
      label = "Type Designation";
      copy MchType to MchType;

   }
   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";
      copy ItemClassId to ItemClassId;

   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference CategoryIdRef(CategoryId) to EquipmentObjCategory(CategoryId) {
      label = "Category";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference LocationIdRef(LocationId) to Location(LocationId) {
      label = "Location ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ItemClassIdRef(ItemClassId) to ItemClass(ItemClassId) {
      label = "Item Class";
   }
   reference CriticalityRef(Criticality) to EquipmentCriticality(Criticality) {
      label = "Criticality";
   }
   reference ManufacturerNoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId) {
      label = "Manufacturer";
   }
   reference PartManufacturerRef(PartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Part Manufacturer";
   }
   reference SupplierInfoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
//   reference CostCenterRef(Company, CostCenter) to AccountingCodepartB(Company, CostCenter);
   reference ObjectNoRef(Company, ObjectNo) to AccountingCodepartE(Company, CodeE) {
      label = "Object";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference LocationMchCodeRef(LocationContract, LocationMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Locational Object";
      copy EquipmentObjectSeq to LocationObjectSeq;
   }
   reference LocationMchCodePerfRef(LocationContract, LocationMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to LocationObjectSeq;
   }
   reference LocationContractRef(LocationContract) to UserAllowedSiteLov(Contract) {
      label = "Locational Object Site";
   }

   reference FromMchCodeRef(FromContract, FromMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "From Object";
      copy EquipmentObjectSeq to FromObjectSeq;
   }
   reference FromMchCodePerfRef(FromContract, FromMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to FromObjectSeq;
   }
   reference FromContractRef(FromContract) to UserAllowedSiteLov(Contract) {
      label = "From Object Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ToMchCodeRef(ToContract, ToMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "To Object";
      copy EquipmentObjectSeq to ToObjectSeq;
   }
   reference ToMchCodePerfRef(ToContract, ToMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to ToObjectSeq;
   }
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Object Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ProcessMchCodeRef(ProcessContract, ProcessMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Process Object";
      copy EquipmentObjectSeq to ProcessObjectSeq;
   }
   reference ProcessMchCodePerfRef(ProcessContract, ProcessMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to ProcessObjectSeq;
   }
   reference ProcessContractRef(ProcessContract) to UserAllowedSiteLov(Contract) {
      label = "Process Object Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PipeMchCodeRef(PipeContract, PipeMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Pipe System";
      copy EquipmentObjectSeq to PipeObjectSeq;
   }
   reference PipeMchCodePerfRef(PipeContract, PipeMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to PipeObjectSeq;
   }
   reference PipeContractRef(PipeContract) to UserAllowedSiteLov(Contract) {
      label = "Pipe System Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference CircuitMchCodeRef(CircuitContract, CircuitMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Electrical System";
      copy EquipmentObjectSeq to CircuitObjectSeq;
   }
   reference CircuitMchCodePerfRef(CircuitContract, CircuitMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to CircuitObjectSeq;
   }
   reference CircuitContractRef(CircuitContract) to UserAllowedSiteLov(Contract) {
      label = "Electrical System Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   //!TODO: Key definitions do not match, investigate and correct
   @DynamicComponentDependency PCMSTD
   reference AppliedPmProgramIdRef(AppliedPmProgramId) to PmProgram(PmProgramId) {
      label = "PM Program ID";
   }
   reference CostCenterCodePartRef(Company, CostCenterCodePart, CostCenter) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference ObjectCodePartRef(Company, ObjectCodePart, ObjectNo) to AccountingCodePartValue(Company, CodePart, CodePartValue);

   --array EquipmentObjectJournalArray(MchCode, Contract) to EquipmentObjectJournal(MchCode, Contract);
   --array EquipmentObjectPartyArray(MchCode, Contract) to EquipmentObjectParty(MchCode, Contract);
   --array EquipmentObjectSparePartArray(MchCode, Contract) to EquipmentObjectSpare(MchCode, Contract);
//   @DynamicComponentDependency OPPLAN
//   array OperationalModeGroupsArray(MchCode, Contract) to ObjectOperModeGroup(MchCode, Contract);
   --array TestPointsarray(MchCode, Contract, LuName) to EquipmentObjectTestPnt(MchCode, Contract, LuName);
   --array TechnicalObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
   array TypeDesignationArray(Type) to TypeDesignation(Type);

   action SpreadSafeAccessCode;

   action SetLocationStructure {
      ludependencies = EquipmentFunctional;
      parameter LocationId Text;
   }

   action ResetLocationStructure {
      ludependencies = EquipmentFunctional;
   }
   action SetInOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetOutOfOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetScrapped {
      ludependencies = EquipmentFunctional;
   }
   action SetStructureInOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetStructureOutOfOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetStructureScrapped {
      ludependencies = EquipmentFunctional;
   }

}

@Override
entity EquipmentObjectJournal {
   crud = Read, Update;
   keys = EquipmentObjectSeq, LineNo {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq and LINE_NO = :LineNo";
   }
   supportwarnings = [true];
   attribute MchCode Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute LineNo Text {
      required = [true];
   }
   attribute Note Text {
      editable = [true];
   }
   attribute ModifyDate Timestamp {
      editable = [false];
   }
   attribute ModifiedBy Text {
      editable = [false];
   }
   attribute EventType Enumeration(FuncObjEvtType) {
      editable = [false];
   }
}

//@Override
//@DynamicComponentDependency OPPLAN
//entity ObjectOperModeGroup {
//   crud = Read, Create, Delete;
//
//   attribute Inherited Boolean("TRUE", "FALSE") {
//      label = "Inherited from Parent";
//      editable = [false];
//   }
//   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
//      label = "Operational Mode Group";
//   }
//   array OperationalModesArray() to OperModeGroupConnect() {
//      where = "(:child.OperModeGroupId IN (select oper_mode_group_id FROM OBJECT_OPER_MODE_GROUP a WHERE a.contract = :parent.Contract AND a.mch_code = :parent.MchCode))";
//   }
//}

//@Override
//@DynamicComponentDependency OPPLAN
//entity OperModeGroupConnect {
//   crud = Read;
//   ludependencies = ObjectOperModeGroup;
//
//   keys = OperModeId, OperModeGroupId;
//   attribute OperModeGroupId Text {
//      editable = [false];
//   }
//   reference OperModeIdRef(OperModeId) to OperationalMode(OperModeId) {
//      label = "Operational Mode";
//   }
//   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
//      label = "Operational Mode Group";
//   }
//}

@Override
entity TypeDesignation {
   crud = Read;
   ludependencies = EquipmentFunctional;

   from = "type_designation";
   exec = "TYPE_DESIGNATION_API";
   keys = Type {
      where = "TYPE = :Type";
   }
   supportwarnings = [true];
   use attributes = Description, KeyRef, LuName;
   attribute Type Text {
      fetch = "type";
      label = "Type Designation";
      maxlength = 100;
      required = [true];
      editable = [false];
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 60;
      editable = [false];
   }
   attribute MchType Text {
      fetch = "mch_type";
      label = "Object Type";
      maxlength = 20;
      editable = [false];
   }
   attribute KeyRef Text {
      fetch = "key_ref";
      label = "Key Ref";
      maxlength = 600;
      editable = [false];
   }
   attribute LuName Text {
      fetch = "lu_name";
      label = "LU Name";
      maxlength = 30;
      editable = [false];
   }
   attribute TechnicalSpecNo Number {
      fetch = "Technical_Object_Reference_API.Get_Technical_Spec_No(lu_name, key_ref)";
      insertable = [false];
      updatable = [false];
   }
   array TypeDesObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
}
@Override
entity CmClass {
   attribute ProcessClassId Text {
      label = "Process Class";
   }
   attribute ItemClassId Text {
      label = "Item Class";
   }
   attribute CmStdId Text {
      label = "Cm Standard ";

   }
   reference ProcessClassIdRef(ProcessClassId) to ProcessClass(ProcessClassId) {
      label = "Process Class ";
   }
   reference CmStdIdRef(CmStdId) to CmStandard(CmStdId) {
      label = "CM Standard";
   }
   array CriticalAnalysisResultsArray(ProcessClassId, ItemClassId, CmStdId) to CriticalAnalysisResult(ProcessClassId, ItemClassId, CmStdId);
}
@Override
entity CriticalAnalysisResult {
   attribute ProcessClassId Text {
      label = "Process Class";
   }
   attribute ItemClassId Text {
      label = "Item Class";
   }
   attribute CmStdId Text {
      label = "CM Standard";
   }
   attribute CmRiskCatId Text {
      label = "CM Risk Category";
   }
   attribute CmSeverityId Text {
      label = "CM Severity";
   }
   attribute CmProbabilityId Text {
      label = "CM Probability";
   }
   attribute CmCriticality Number {
      fetch = "Cm_Probability_API.Get_Probability_Rating(Cm_Std_Id,Cm_Risk_Cat_Id,Cm_Probability_Id) * Cm_Severity_API.Get_Severity_Rating(Cm_Std_Id,Cm_Risk_Cat_Id,Cm_Severity_Id )";
   }
   attribute  RcmLocked Boolean("TRUE", "FALSE");


   reference CmStdIdRef(ProcessClassId, ItemClassId, CmStdId) to CmClass(ProcessClassId, ItemClassId, CmStdId) {
      label = "CM Standard";
   }
   reference CmRiskCatIdRef(CmStdId, CmRiskCatId) to CmRiskCategory(CmStdId, CmRiskCatId) {
      label = "CM Risk Category";
   }
   reference CmSeverityIdRef(CmStdId, CmRiskCatId, CmSeverityId) to CmSeverity(CmStdId, CmRiskCatId, CmSeverityId) {
      label = "CM Severity ";
   }
   reference CmProbabilityIdRef(CmStdId, CmRiskCatId, CmProbabilityId) to CmProbability(CmStdId, CmRiskCatId, CmProbabilityId) {
      label = "CM Probability ";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetExistWarning Text {
   parameter Contract Text;
   parameter MchCode Text;
}
function GetExistWarning Text {
   parameter Selection Text;
}
function GetTypeDesignationsForFunc List < Entity(TypeDesignation) > {
   parameter MchType Text;
   where = "mch_type LIKE nvl(:MchType,mch_type) ";
}

//@DynamicComponentDependency PURCH
function GetPartNos List < Entity(PartCatalog) > {
   where = "PART_NO NOT IN (SELECT PART_NO
                         FROM PURCHASE_PART
                        WHERE EXTERNAL_RESOURCE_DB = 'TRUE')";

}

function PartManufactureFilterForFunc List < Entity(PartManufacturer) > {
   parameter PartNo Text;
   where = "PART_NO = :PartNo";
}

function HasMchTypeTechSpec Text {
   parameter MchType Text;
}
function GetCostCenterAccForFunc List < Entity(Account) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeBForFunc List < Entity(CodeB) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeCForFunc List < Entity(CodeC) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeDForFunc List < Entity(CodeD) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeEForFunc List < Entity(CodeE) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeFForFunc List < Entity(CodeF) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeGForFunc List < Entity(CodeG) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeHForFunc List < Entity(CodeH) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeIForFunc List < Entity(CodeI) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeJForFunc List < Entity(CodeJ) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCompanyVal Text {
   parameter Contract Text;
}
function ExistReference Structure(RequirementStruct) {
   parameter MchCode Text;
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure RequirementStruct {
   attribute ReqExist Text;
   attribute ReqExistNew Text;
   attribute PrevMchType Text;

}

--------------------------------- VIRTUALS ----------------------------------
virtual EquipTabSelection {
   attribute VisibleTypeDesignation Boolean("TRUE", "FALSE") {
      label = "Type Designation";
      editable = [true];
      required = [true];
   }
   attribute VisibleSpareParts Boolean("TRUE", "FALSE") {
      label = "Spare Parts";
      editable = [true];
      required = [true];
   }
   attribute VisibleTestPoints Boolean("TRUE", "FALSE") {
      label = "Testpoints/ Parameters";
      editable = [true];
      required = [true];
   }
   attribute VisibleJournal Boolean("TRUE", "FALSE") {
      label = "Journal";
      editable = [true];
      required = [true];
   }
   attribute VisibleParties Boolean("TRUE", "FALSE") {
      label = "Parties";
      editable = [true];
      required = [true];
   }
   attribute VisibleRequirements Boolean("TRUE", "FALSE") {
      label = "Requirements/ Technical Data";
      editable = [true];
      required = [true];
   }
   attribute VisibleWarranty Boolean("TRUE", "FALSE") {
      label = "Warranty";
      editable = [true];
      required = [true];
   }
   attribute VisibleCost Boolean("TRUE", "FALSE") {
      label = "Cost/Year";
      editable = [true];
      required = [true];
   }
   attribute VisibleMeteringInvoice Boolean("TRUE", "FALSE") {
      label = "Metering Invoice";
      editable = [true];
      required = [true];
   }
   attribute VisibleOpModes Boolean("TRUE", "FALSE") {
      label = "MPB Scheduling";
      editable = [true];
      required = [true];
   }
   attribute VisibleCriticalityAnalysis Boolean("TRUE", "FALSE") {
      label = "Criticality Analysis ";
      required = [true];
   }

}

--------------------------------- SUMMARIES ---------------------------------