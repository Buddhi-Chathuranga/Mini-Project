--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-10-23  SHEPLK  SAUXXW4-10600, Added common detail page for functional & serial objects.
-- 2022-01-11  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                     and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
--------------------------------------------------------------------------------------
fragment EquipmentSummary;
component EQUIP;
layer Core;
description "This is an overview form for functional objects and serial objects";

include fragment OrgCodeAllowedSiteLovSelector;
include fragment NewSerialObjectDialog;
include fragment MoveSerialObjectDialog;
include fragment EquipmentAllObjectLov1Selector;
include fragment EmployeeLovSelector;
include fragment CopySerialObjectDialog;
include fragment MoveToInventoryDialog;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- MAIN PAGES ---------------------------------
page EquipmentSummaryForm using EquipmentObjectSummarySet {
   group ObjectInfoSummaryGroup;
   group ObjectGeneralGroup;
   group LocationandPositionGroup;
   group PartInfoGroup;
}

---------------------------------- GROUPS -----------------------------------
group ObjectInfoSummaryGroup for EquipmentObject {
   label = "";
   field MchCode {
      size = Medium;
   }
   field MchName {
      size = Medium;

   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov ObjLevelRef with ReferenceEquipmentObjectLevelSelector {
      size = Small;
   }
   badge OperationalStatus {
      style = TextOnly;
      size = Small;
      emphasis Complementary1 = [OperationalStatus = "In Operation"];
      emphasis Complementary2 = [OperationalStatus = "Out of Operation"];
      emphasis Complementary3 = [OperationalStatus = "Scrapped"];
   }
//   badge DesignStatus {
//      style = TextOnly;
//      size = Small;
//      emphasis Complementary1 = [OperationalStatus = "PlannedForScrap"];
//      emphasis Complementary2 = [OperationalStatus = "ReDesign"];
//      emphasis Complementary3 = [OperationalStatus = "Completed"];
//      emphasis Complementary4 = [OperationalStatus = "UnderDesign"];
//   }
   field OperationalCondition {
      size = Small;
      visible = [ObjLevel = null];
   }
}

group ObjectGeneralGroup for EquipmentObject {
   label = "General";
   field OldSupMchCode {
      visible = [false];
   }
   field SupMchCode {
      size = Medium;
   }
   field SupContract {
      size = Small;
   }
   field GroupIdRef {
      size = Small;
   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      size = Medium;
      description = CriticalityRef.Description;
   }
   field ProductionDate {
      size = Small;
      editable = [ObjLevel != null];
   }
   lov ItemClassIdRef with ReferenceItemClassSelector {
      size = Medium;
      description = ItemClassIdRef.ItemClassDesc;
   }
//   field ProcessClassIdRef {
//      size = Small;
//   }
   field CategoryIdRef {
      size = Small;
      visible = [ObjLevel != null];
   }
}
group LocationandPositionGroup for EquipmentObject {
   label = "Position and Location";
   collapsed = [true];
   field MchLoc {
      label = "Room";
      size = Small;
   }
   field MchPos {
      label = "Position";
      size = Small;
   }
   lov LocationCardRef with ReferenceEquipObjectLocationLovSelector {
      label = "Location";
      size = Medium;
      preview = EquipObjectLocationLovCard1;
      description = LocationIdRef.Name;
   }
   field EquipmentMainPosition {
      size = Small;
      visible = [ObjLevel != null];
   }
   field IsGeographicObject {
      size = Small;
      visible = [ObjLevel != null];
   }
}

group PartInfoGroup for EquipmentObject {
   label = "Part Information";
   collapsed = [true];
   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      size = Medium;
      label = "Supplier";
      description = SupplierInfoRef.Name;
   }
   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilter(PartNo) {
               description = ManufacturerNoRef.Name;
            }
         }
         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               description = ManufacturerNoRef.Name;
            }
         }
      }
   }
   field ManufacturedDate {
      size = Small;
      editable = [ObjLevel != null];
   }
   field Ownership {
      size = Small;
      visible = [ObjLevel = null];
   }
   field Owner {
      size = Small;
      visible = [ObjLevel = null];
      editable = [(Ownership = "CustomerOwned" or Ownership = "SupplierLoaned" or Ownership = "SupplierRented") and(Owner != OwnerVal or OwnerVal = null)];
      lovswitch {
         when[Ownership = "CustomerOwned"] {
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               preview = CustomerInfoCustcategoryPubCard;
            }
         }
         when[Ownership = "SupplierLoaned" or Ownership = "SupplierRented"] {
            lov SupplierInfoRef with SupplierInfoSelector;
         }
      }
   }
}

group GbCode_Part_InfoGroup for EquipmentObject {

   label = "Code Part Info";
   collapsed = [true];
   field OldCostCenter {
      visible = [false];
   }
   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      label = "${FetchCostCenter}";
      size = Medium;
      searchable = false;
      visible = [HideCostCenter = "TRUE"];
      description = CostCenterCodePartRef.Description;
   }
   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      label = "${FetchObjectNo}";
      searchable = false;
      visible = [HideObjectNo != null];
      size = Medium;
      description = ObjectCodePartRef.Description;
   }
}

group TypeDesGroup for EquipmentObject {
   label = "Type Designation Has ";
   collapsed = [true];
   field Requirements3Functional {
      size = Small;
      visible = [ObjLevel != null];
      required = [true];
   }

   field Requirements3Serial {
      size = Small;
      visible = [ObjLevel = null];
      required = [true];
   }

   field Documents3Functional {
      size = Small;
      visible = [ObjLevel != null];
      required = [true];
   }
   field Documents3Serial {
      size = Small;
      visible = [ObjLevel = null];
      required = [true];
   }
}

group ObjectHasGroup for EquipmentObject {
   label = "Object Has";

   field Requirements2Functional {
      size = Small;
      visible = [ObjLevel != null];
   }
   field Requirements2Serial {
      size = Small;
      visible = [ObjLevel = null];
   }
   field Documents2Functional {
      size = Small;
      visible = [ObjLevel != null];
   }
   field Documents2Serial {
      size = Small;
      visible = [ObjLevel = null];
   }
   field SpareParts {
      size = Small;
   }
   field Warranty {
      size = Small;
   }
   field Connections {
      size = Small;
   }
   field TestPoints {
      size = Small;
   }
   field Parties {
      size = Small;
   }
   field Notes {
      size = Small;
   }
}
group TabWorkSelectionGroup for EquipWorkSelection {
   label = "";
   field VisibleServiceLines {
      size = Small;
      validate command {
         execute {
            if [VisibleServiceLines = true] {
               set VisibleAllServiceLines = false;
            }
         }
      }
   }
   field VisibleAllServiceLines {
      size = Small;
      validate command {
         execute {
            if [VisibleAllServiceLines = true] {
               set VisibleServiceLines = false;
            }
         }
      }
   }

}
group TabPmSelectionGroup for EquipWorkSelection {
   label = "";
   field VisiblePmActions {
      size = Small;
      validate command {
         execute {
            if [VisiblePmActions = true] {
               set VisibleMaintPlan = false;
            }
         }
      }
   }
   field VisibleMaintPlan {
      size = Small;
      validate command {
         execute {
            if [VisibleMaintPlan = true] {
               set VisiblePmActions = false;
            }
         }
      }
   }
}
group TabWorkOrderSelectionGroup for EquipWorkSelection {
   label = "";
   field VisibleActiveWorkTasks {
      size = Small;
      validate command {
         execute {
            if [VisibleActiveWorkTasks = true] {
               set VisibleAllActiveWorkTasks = false;
               set VisibleHistoricalWorkTasks = false;
            }
         }
      }
   }
   field VisibleAllActiveWorkTasks {
      size = Small;
      validate command {
         execute {
            if [VisibleAllActiveWorkTasks = true] {
               set VisibleActiveWorkTasks = false;
               set VisibleHistoricalWorkTasks = false;
            }
         }
      }
   }
   field VisibleHistoricalWorkTasks {
      size = Small;
      validate command {
         execute {
            if [VisibleHistoricalWorkTasks = true] {
               set VisibleAllActiveWorkTasks = false;
               set VisibleActiveWorkTasks = false;
            }
         }
      }
   }
}
group SafeAccessGroup for EquipmentObject {
   label = "";
   field SafeAccessCode {
      required = [true];
   }
}

----------------------------------- LISTS -----------------------------------
@DynamicComponentDependency OPPLAN
list ObjectOperModeGroupList for ObjectOperModeGroup {
   label = "Operational Mode Groups";
   lov OperModeGroupIdRef with ReferenceOperationalModeGroupSelector {
      description = OperModeGroupIdRef.Description;
   }
   field Inherited {
      size = Small;
   }
}
@DynamicComponentDependency OPPLAN
list GroupConnectedModeList for OperModeGroupConnect {
   label = "Operational Modes";
   field OperModeIdRef {
      size = Small;
   }
   field OperModeIdRef.Description {
      label = "Operational Mode Description";
   }
   field OperModeGroupId;
}
----------------------------------- CARDS -----------------------------------

card EquipObjectLocationLovCard1 for EquipObjectLocationLov {
   label = "${Name}";
   field LocationId;
   markdowntext {
      visible = [true];
      text =
      "---------  ----------
      ${Address1} ${Address2}
      ${ZipCode} ${City}
      ${CountryCode} ${County}";
   }
}

--------------------------------- COMMANDS ----------------------------------
command OperationalStatusInOperationEquipmentObjectCommand for EquipmentObject {
   label = "In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call SetInOperationSerial(Contract, MchCode);
      }
      else {
         call SetInOperationFunctional(Contract, MchCode);
      }
   }
}
command OperationalStatusOutofOperationEquipmentObjectCommand for EquipmentObject {
   label = "Out of Operation";
   enabled = [OutOfOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetOutofOperationSerial(Contract, MchCode);
      }
      else {
         call  SetOutofOperationFunctional(Contract, MchCode);
      }
   }
}

command OperationalStatusScrappedEquipmentObjectCommand for EquipmentObject {
   label = "Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStatusScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStatusScrappedFunctional(Contract, MchCode);
      }
   }
}
command OperationalStatusStructureInOperationEquipmentObjectCommand for EquipmentObject {
   label = "Structure In Operation";
   enabled = [InOperation = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureInOperationSerial(Contract, MchCode);
      }
      else {
         call  SetStructureInOperationFunctional(Contract, MchCode);
      }
   }
}

command OperationalStatusStructureOutofOperationEquipmentObjectCommand for EquipmentObject {
   label = "Structure Out of Operation";
   variable PromptMsg;
   variable HasStructure;

   enabled = [OutOfOperation = "TRUE"];
   execute {
      call CheckScrappedAndHasStructure(Contract, MchCode) into HasStructure;
      if[HasStructure = "TRUE"] {
         set PromptMsg = "Do you want to change the operational status of all the child objects?";
         confirm("${PromptMsg}") {
            when OK {
               if[ObjLevel = null] {
                  call  SetStuructureOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetStuructureOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
            when CANCEL {

               if[ObjLevel = null] {
                  call  SetOutofOperationSerial(Contract, MchCode);
               }
               else {
                  call  SetOutofOperationFunctional(Contract, MchCode);
               }
               exit;
            }
         }
      }
      else {
         if[ObjLevel = null] {
            call  SetStuructureOutofOperationSerial(Contract, MchCode);
         }
         else {
            call  SetStuructureOutofOperationFunctional(Contract, MchCode);
         }
      }
   }
}
command OperationalStatusStructureStrappedEquipmentObjectCommand for EquipmentObject {
   label = "Structure Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      if[ObjLevel = null] {
         call  SetStructureScrappedSerial(Contract, MchCode);
      }
      else {
         call  SetStructureScrappedFunctional(Contract, MchCode);
      }
   }
}

command OperationalConditionSetOperationalEquipmentObjectCommand for EquipmentObject {
   label = "Set Operational";
   enabled = [SetOperational = "TRUE" and ObjLevel = null];
   execute {
      call SetInOperative(Contract, MchCode);
   }
}
command OperationalConditionSetNonOperationalEquipmentObjectCommand for EquipmentObject {
   label = "Set Non Operational";
   enabled = [SetNonOperational = "TRUE" and ObjLevel = null];
   execute {
      call  SetNonOperative(Contract, MchCode);
   }
}
command OperationalConditionSetOperationalStrucCommand for EquipmentObject {
   label = "Set Structure Operational";
   enabled = [SetOperational = "TRUE" and ObjLevel = null];
   execute {
      call SetStructureOperational(Contract, MchCode);
   }
}
command OperationalConditionSetNonOperationalStrucCommand for EquipmentObject {
   label = "Set Structure Non Operational";
   enabled = [SetNonOperational = "TRUE" and ObjLevel = null];
   execute {
      call  SetStructureNonOperational(Contract, MchCode);
   }
}
command DeleteObjectCommand for EquipmentObject {
   label = "Delete Object";
   enabled = [MchCode != null];
   execute {
      call  DeleteObject(Contract, MchCode);
   }
}
command CreateFunctionalObjectCommand for EquipmentObject {
   label = "Create Functional Object";
   enabled = [MchCode != null and ObjLevel != null and OperationalStatusDb != "SCRAPPED" and IsCategoryObj = "FALSE"];
   variable DfNewMchCode;
   variable DfNewContract;
   variable DfNewMchName;
   variable DfObjectType;
   variable DfType;
   variable DfObjLevel;
   variable DfSeialsAllowed;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }
   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog DlgNewFunctionalObject(MchCode, Contract, MchName, GroupId, CostCenter, MchLoc, MchPos, DfNewContract, DfMakeSupMchCodeVisible)
      into(MchCode, Contract, MchName, DfNewMchCode, DfNewContract, DfNewMchName, GroupId, DfObjectType, DfType, DfObjLevel, DfSeialsAllowed, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call NewFunctionalObject(DfNewMchCode, DfNewContract, DfNewMchName, DfObjLevel, DfObjectType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, NULL, NULL);
            refresh;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateSerialObjectCommand for EquipmentObject {
   label = "Create Serial Object";
   enabled = [MchCode != null and IsCategoryObj != "TRUE" and(OperationalStatusDb != "SCRAPPED" and OperationalStatusDb != "NOT_APPLICABLE") and((ObjLevel != null and(IndividualAware = IndividualAwareClientValue) or ObjLevel = null))];
   variable DfNewMchCodeVar;
   variable DfNewContract;
   variable DfNewPartNo;
   variable DfType;
   variable DfCostCenter;
   variable DfMchLoc;
   variable DfMchPos;
   variable DfMchType;
   variable SerialTrackRcptText;
   variable DfMakeSupMchCodeVisible {
      type = Number;
   }

   execute {
      set DfMakeSupMchCodeVisible = 0;
      call GetUserDefaultContract() into DfNewContract;
      dialog CreateSerialObjectDialog(MchCode, Contract, DfNewPartNo, DfSerialNo, GroupId, DfMchTypeRef, DfTypeRef, DfMakeSupMchCodeVisible, MchName)
      into(DfNewMchCodeVar, DfNewContract, DfNewPartNo, DfSerialNo, GroupId, DfMchType, DfType, DfSupContract, DfSupMchCode, DfSupMchName, DfCostCenter, DfMchLoc, DfMchPos) {
         when OK {
            call GetSerialTrackRcpt(DfNewPartNo) into SerialTrackRcptText;
            if[SerialTrackRcptText = "FALSE"] {
               confirm("Part no ${DfNewPartNo} is not serial tracked. It will not be possible to move the serial object to the inventory. Still want to save this record?.") {
                  when OK {
                     call NewSerialObject(DfNewContract, DfNewMchCodeVar, DfNewPartNo, DfSerialNo, DfMchType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, NULL, NULL);
                     refresh;
                  }
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
            if[SerialTrackRcptText = "TRUE"] {
               call NewSerialObject(DfNewContract, DfNewMchCodeVar, DfNewPartNo, DfSerialNo, DfMchType, GroupId, DfType, Contract, MchCode, DfCostCenter, DfMchLoc, DfMchPos, NULL, NULL);
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command MoveToInventoryCommand for EquipmentObject {
   label = "Move To Inventory";
   enabled = [ObjLevel = null and MchCode != null and SupMchCode != null and IsSerialTracked = "SERIAL TRACKING"];
   variable WoContractVar;
   variable WoMaintOrgVar;
   variable WoDirectiveVar;
   variable WoNoVar;
   execute {
      call GetDefContract() into WoContractVar;
      dialog DlgMoveToInventory(MchCode, Contract, WoContractVar)
      into(MchCode, Contract, WoNoVar, WoContractVar, WoMaintOrgVar, WoDirectiveVar)
         {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
@DynamicComponentDependency WO
command CreateRepaireWorkOrderCommand for EquipmentObject {
   label = "Create Repair Work Order";
   enabled = [IsSerialReserved = "FALSE" and   ObjLevel = null];
   execute {
      navigate  "assistant/CreateRepairWorkOrderAssistant/RepairWizardAssistant?$action=SetTaskAttr{MchCodeContractNew:$[Contract], MchCodeNew:$[MchCode], ReportedByNew:$[CreatedBy], ContractNew: $[DefaultSite], RegDateNew: $[RegDate], PartNoNew: $[PartNo], SerialNoNew: $[SerialNo]}";
   }
}
command FaultReportCommand for EquipmentObject {
   label = "Create Fault Report";
   enabled = [MchCode != null and SerialScrapped = "FALSE" or FunctionalScrapped = "FALSE"];
   execute {
      navigate "assistant/CreateFaultReportAssistant/FaultReportWizardAssistant?$action=SetTaskAttrForSteps{ ReportedByNew: $[CreatedBy], ContractNew: $[Contract], RegDateNew: $[RegDate], ReportMchCode: $[MchCode], MchCodeContractNew: $[Contract]} ";
   }
}
command ServiceRequestCommand for EquipmentObject {
   label = "Create Service Request";
   enabled = [MchCode != null and SerialScrapped = "FALSE" or FunctionalScrapped = "FALSE"];
   execute {
      --navigate "page/ServiceRequestWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract] ";
      navigate "assistant/CreateServiceRequest/CreateServiceRequestAssistant?$action=SetAttrForService{ObjectSiteNew: $[Contract], ReportMchCode: $[MchCode], ReportedByNew: $[CreatedBy]}";
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}
@Override
selector ReferenceAccountingCodePartValueSelector for AccountingCodePartValue {
   static CodePartValue {
      label = "${FetchCostCenter}";
   }
   static MasterComCodePartValue {
      visible = [false];
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjectSummarySet for EquipmentObject;
entityset ObjectCountsPmEntitySet for ObjectCountsPmEntity;
entityset ObjectCountsWoEntitySet for ObjectCountsWoEntity;

@Override
entity EquipmentObject {
   crud = StateChange, Create, Read, Update, Delete;
   ludependencies = TypeDesignation, TechnicalObjectReference, EquipmentFunctional, EquipmentSerial;
   //from = "equipment_object_uiv";
   where = "EXISTS (SELECT 1 FROM user_allowed_site_pub object_site WHERE contract = object_site.site)";

//   keys = MchCode, Contract {
//      where = "MCH_CODE = :MchCode and CONTRACT = :Contract AND EXISTS (SELECT 1 FROM user_allowed_site_pub object_site WHERE contract = object_site.site)";
//   }
   supportwarnings = [true];
   //use attributes = MchName, ObjLevel, OperationalStatus, Type, PartNo, SerialNo, MchType, CategoryId, OperationalStatusDb;
   attribute MchName Text;
   attribute SupContract Text {
      label = "Belongs to Site";
      editable = [false];
   }
   attribute SupMchCode Text {
      label = "Belongs to Object";
      editable = [false];
   }
   attribute SupMchCodeSaved Text {
      label = "Belongs to Object Saved";
      fetch = "SUP_MCH_CODE";
      editable = [true];
   }
   attribute ObjLevel Text {
      editable = [false];
   }
   attribute GroupId Text;
   attribute Type Text {
      maxlength = 100;
   }
   attribute SetOperational Text {
      fetch = "Equipment_Serial_API.Activate_Set_Operational(CONTRACT,MCH_CODE)";
   }
   attribute SetNonOperational Text {
      fetch = "Equipment_Serial_API.Activate_Set_Non_Operational(CONTRACT,MCH_CODE)";
   }

   attribute PartNo Text {
      editable = [false];
   }
   attribute SerialNo Text {
      label = "Serial No";
      fetch = "serial_no";
      editable = [false];
   }
   attribute MchType Text;
   attribute CategoryId Text;
   attribute OperationalStatusDb Text {
      fetch = "operational_status_db";
      editable = [false];
   }
   @DynamicComponentDependency PLADES
   attribute DesignStatus Text {
      fetch = "Plant_Object_API.Get_Design_Status_Equip_Obj(CONTRACT, MCH_CODE)";
      label = "Design Status";
      editable = [false];
   }
   attribute MchLoc Text;
   attribute MchPos Text;
   attribute ManufacturerNo Text;
   attribute EquipmentMainPosition Enumeration(EquipmentMainPosition) {
      label = "Main Position";
   }
   attribute Objtype Text {
      fetch = "objtype";
      editable = [false];
   }
   attribute OperationalCondition Text {
      editable = [false];
      fetch = "Equipment_Serial_API.Get_Operational_Condition(CONTRACT, MCH_CODE)";
   }
   attribute Criticality Text;
   attribute ProductionDate Date {
      label = "Installation Date";
   }
   attribute ItemClassId Text {
      label = "Item Class";
   }
   attribute LocationId Text;
   attribute ProcessClassId Text {
      editable = [false];
      label = "Process Class";
   }
   attribute ManufacturedDate Date {
      label = "Mfg Date";
   }
   attribute Owner Text {
      maxlength = 30;
      format = uppercase;
   }
   attribute Ownership Text {
      fetch = "Part_Serial_Catalog_API.Get_Part_Ownership(PART_NO, SERIAL_NO)";
      editable = [false];
   }
   attribute IsSerialTracked Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(PART_NO)";
   }
   attribute IsCategoryObj Text {
      fetch = "EQUIPMENT_FUNCTIONAL_API.Get_Is_Category_Object(CONTRACT,MCH_CODE)";
   }
   attribute IsScrapped Text {
      fetch = "Equipment_Object_API.Is_Scrapped(contract, mch_code)";
   }
   attribute VendorNo Text;
   attribute CostCenter Text;
   attribute ObjectNo Text {
      label = "Asset";
   }
   attribute OldSupMchCode Text {
      fetch = "SUP_MCH_CODE";
      insertable = [false];
      updatable = [false];
   }
   attribute Company Text {
      label = "Company";
      fetch = "Site_API.Get_Company(CONTRACT)";
   }
   attribute IndividualAware Text {
      fetch = "Equipment_Object_Level_API.Get_Individual_Aware(OBJ_LEVEL)";
   }

   attribute IndividualAwareClientValue Text {
      fetch = "Individual_Aware_API.Get_Client_Value(1)";
   }
   attribute IsGeographicObject Boolean("TRUE", "FALSE") {
      label = "Geographical Object";
      editable = [true];
      required = [true];
   }
   attribute FetchCostCenter Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute FetchCostCenterView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'CostCenter')";
   }
   attribute HideCostCenter Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute FetchObjectNo Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'Object')";
   }
   attribute FetchObjectNoView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'Object')";
   }
   attribute HideObjectNo Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'Object')";
   }
   attribute ObjtsCstCenterView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(NULL,'CostCenter')";
   }
   attribute ObjtsObjectNoView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(NULL,'Object')";
   }
   attribute Requirements3Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Requirements('TypeDesignation','FALSE', CONTRACT, MCH_CODE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Documents3Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Documents('TypeDesignation', 'FALSE',CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute Requirements3Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Technical_Data('TypeDesignation','FALSE', CONTRACT, MCH_CODE)";
      label = "Technical Data";
      editable = [false];
   }
   attribute Documents3Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Documents('TypeDesignation', 'FALSE', CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute Requirements2Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Requirements('EquipmentObject','TRUE',CONTRACT, MCH_CODE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Requirements2Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Technical_Data('EquipmentObject','TRUE', CONTRACT, MCH_CODE)";
      label = "Technical Data";
      editable = [false];
   }
   attribute SpareParts Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_SPARE_API.Has_Spare_Part(CONTRACT, MCH_CODE)";
      label = "Spare Parts";
      editable = [false];
   }
   attribute Warranty Boolean("TRUE", "FALSE") {
      fetch = "substr(EQUIPMENT_OBJECT_API.Has_Any_Warranty(CONTRACT,MCH_CODE),1,5)";
      label = "Warranty";
      editable = [false];
   }
   attribute Documents2Functional Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Functional_Api.Get_Documents('EquipmentObject','TRUE', CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute Documents2Serial Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Serial_Api.Get_Documents('EquipmentObject', 'TRUE', CONTRACT, MCH_CODE)";
      label = "Documents";
      editable = [false];
   }
   attribute Connections Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_CONN_API.Has_Connection(CONTRACT, MCH_CODE)";
      label = "Connections";
      editable = [false];
   }
   attribute TestPoints Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_TEST_PNT_API.Has_Test_Point(CONTRACT, MCH_CODE)";
      label = "Test Points";
      editable = [false];
   }
   attribute Parties Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_PARTY_API.Has_Party(CONTRACT, MCH_CODE)";
      label = "Parties";
      editable = [false];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Notes(CONTRACT,MCH_CODE)";
      label = "Notes";
      editable = [false];
   }
   attribute OldCostCenter Text {
      fetch = "COST_CENTER";
      insertable = [false];
      updatable = [false];
   }

   attribute InOperation Text {
      fetch = "Equipment_Object_API.Activate_In_Operation(CONTRACT, MCH_CODE)";
      label = "In Operation";
      maxlength = 100;
      editable = [false];
   }
   attribute OutOfOperation Text {
      fetch = "Equipment_Object_API.Activate_Out_Of_Operation(CONTRACT, MCH_CODE)";
      label = "Out of Operation";
      maxlength = 2000;
      editable = [false];
   }
   attribute Scrapped Text {
      fetch = "Equipment_Object_API.Activate_Scrapped(CONTRACT, MCH_CODE)";
      label = "Scrapped";
      maxlength = 2000;
      editable = [false];
   }
   attribute HasStructure Enumeration(TranslateBoolean) {
      fetch = "Equipment_Object_API.Has_Structure( CONTRACT, MCH_CODE)";
   }
   attribute SerialScrapped Text {
      fetch = "Equipment_Object_API.Is_Scrapped( CONTRACT, MCH_CODE)";
   }
   attribute FunctionalScrapped Text {
      fetch = "Equipment_Functional_API.Is_Scrapped( CONTRACT, MCH_CODE)";
   }

   attribute SerialSupMchCode Text {
      fetch = "Equipment_Serial_API.Get_Sup_Mch_Code( CONTRACT, MCH_CODE)";
   }
   attribute SerialTracked Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(Equipment_Object_API.Get_Part_No(CONTRACT, MCH_CODE))";
   }
   attribute CreatedBy Text {
      fetch = "Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User)";
   }
   attribute DefaultSite Text {
      fetch = "USER_ALLOWED_SITE_API.Get_Default_Site()";
   }
   attribute RegDate Timestamp {
      fetch = "Maintenance_Site_Utility_Api.Get_Site_Date(USER_ALLOWED_SITE_API.Get_Default_Site())";
   }
   @DynamicComponentDependency WO
   attribute IsSerialReserved Text {
      fetch = "Maint_Material_Req_Line_API.Is_Serial_Reserved(Equipment_Object_API.Get_Part_No(CONTRACT, MCH_CODE), Equipment_Object_API.Get_Serial_No( CONTRACT, MCH_CODE))";
   }
   attribute ObjCount Text {
      fetch = "Equipment_Object_API.Get_Obj_Count(EQUIPMENT_OBJECT_SEQ)";
   }
   attribute OneObjCount Number {
      fetch = "0";
   }
   attribute AllCount Number {
      fetch = "0";
   }
   attribute DisplayText Text {
      fetch = "contract";
   }
   attribute ConnectedLu Text {
      fetch = "contract";
   }
   attribute LuName Text {
      fetch = "'EquipmentObject'";
   }
//   attribute TreeStructure Text {
//      fetch = "contract";
//   }
   attribute KeyRef Text {
      fetch = "Client_SYS.Get_Key_Reference('EquipmentObject', 'EQUIPMENT_OBJECT_SEQ', equipment_object_seq)";
   }
   attribute SelectionParameters Enumeration(SelectionAttribTypeEnum) {
      fetch = "'Both'";
      insertable = [false];
      updatable = [false];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      fetch = "operational_status_db";
      editable = [false];
   }
   attribute SafeAccessCode Enumeration(SafeAccessCode) {
      label = "Safe Access";
      required = [true];
   }
   @DynamicComponentDependency PCMSCI
   attribute ObjExist Text {
      fetch = "Psc_Contr_Product_Scope_API.Object_Exist_In_Srv_Line(mch_code,contract)";
      label = "ObjExist";
      maxlength = 100;
      editable = [false];
   }
   attribute F Text {
      fetch = "'F'";
   }
   attribute L Text {
      fetch = "'L'";

   }
   attribute R Text {
      fetch = "'R'";
   }

   attribute T Text {
      fetch = "'T'";
   }

   attribute P Text {
      fetch = "'P'";
   }

   attribute S Text {
      fetch = "'S'";
   }

   attribute E Text {
      fetch = "'E'";
   }
   attribute ReturnInFacility Text {
      fetch = "Equipment_Serial_API.Is_InFacility(part_no, serial_no)";
   }
   attribute ReturnInFacilityOrWorkshop Text {
      fetch = "Equipment_Serial_API.Infacility_Or_Workshop(part_no, serial_no)";
   }
   attribute CostCenterCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'CostCenter')";
   }
   attribute ObjectCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'Object')";
   }
   reference LocationRef(LocationId) to Location(LocationId);
   reference ProcessClassRef(ProcessClassId) to ProcessClass(ProcessClassId);
   reference ItemClassIdRef(ItemClassId) to ItemClass(ItemClassId) {
      label = "Item Class";
   }
   reference ItemClassRef(ItemClassId) to ItemClass(ItemClassId);
   reference PartManufacturerRef(PartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Part Manufacturer";
   }
   reference ManufacturerNoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId) {
      label = "Manufacturer";
   }
   reference LocationIdRef(LocationId) to Location(LocationId) {
      label = "Location ID";
   }
   reference MchCodeRef(Contract, MchCode) to MaintenanceObject(Contract, MchCode) {
      label = "Object ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentObject(Contract, MchCode) {
      label = "Belongs to Object";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
   }
//   reference ProcessClassIdRef(ProcessClassId) to ProcessClass(ProcessClassId) {
//      label = "Process Class";
//   }
   reference ObjLevelRef(ObjLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "Object Level";
   }
   reference OwnerRef(Owner) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Owner";
   }
   reference CriticalityRef(Criticality) to EquipmentCriticality(Criticality) {
      label = "Criticality";
   }
   reference TypeRef(Type) to TypeDesignation(Type) {
      label = "Type Designation";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference CategoryIdRef(CategoryId) to EquipmentObjCategory(CategoryId) {
      label = "Category";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference LocationCardRef(LocationId) to EquipObjectLocationLov(LocationId);
   reference SupplierInfoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
   reference CostCenterCodePartRef(Company, CostCenterCodePart, CostCenter) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference ObjectCodePartRef(Company, ObjectCodePart, ObjectNo) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";
      copy ItemClassId to ItemClassId;
   }
   --array ObjCountPmArray(Contract, MchCode) to ObjectCountsPmEntity(Contract, MchCode);
   --array ObjCountWoArray(Contract, MchCode) to ObjectCountsWoEntity(Contract, MchCode);

   array EquipmentObjectSparePartArray(MchCode, Contract) to EquipmentObjectSpare(MchCode, Contract);
   array TestPointsarray(MchCode, Contract, LuName) to EquipmentObjectTestPnt(MchCode, Contract, LuName);
   array TypeDesignationArray(Type) to TypeDesignation(Type);
   array EquipmentObjectJournalArray(MchCode, Contract) to EquipmentObjectJournal(MchCode, Contract);
   array EquipmentObjectPartyArray(MchCode, Contract) to EquipmentObjectParty(MchCode, Contract);
   array TechnicalObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);

   array EquipmentSerialArray(MchCode, Contract) to EquipmentSerial(MchCode, Contract);
   array EquipmentFunctionalArray(MchCode, Contract) to EquipmentFunctional(MchCode, Contract);

   @DynamicComponentDependency PM
   array ObjectPmArray(MchCode, Contract) to PmAction(MchCode, MchCodeContract);

   array MeterReadingArray(Contract, MchCode) to EquipmentObjectParam(Contract, MchCode);

   @DynamicComponentDependency OPPLAN
   array OperationalModeGroupsArray(MchCode, Contract) to ObjectOperModeGroup(MchCode, Contract);
}

@Override
entity ObjectCountsPmEntity using EquipmentObject {
   crud = Read;
   from = "Object_Counts";
   keys = MchCode, Contract, ConnectedLu, TreeStructure;

   attribute ObjCount Text {
      fetch = "OBJ_COUNT";
   }
   attribute OneObjCount Number {
      fetch = "ONE_OBJ_COUNT";
   }
   attribute AllCount Number {
      fetch = "ALL_COUNT";
   }
   attribute DisplayText Text {
      fetch = "DISPLAY_TEXT";
   }
   attribute ConnectedLu Text;
   attribute TreeStructure Text;
}
@Override
entity ObjectCountsWoEntity using EquipmentObject {
   crud = Read;
   from = "Object_Counts_View2";
   keys = MchCode, Contract, ConnectedLu, TreeStructure;

   attribute ObjCount Text {
      fetch = "OBJ_COUNT";
   }
   attribute OneObjCount Number {
      fetch = "ONE_OBJ_COUNT";
   }
   attribute AllCount Number {
      fetch = "ALL_COUNT";
   }
   attribute DisplayText Text {
      fetch = "DISPLAY_TEXT";
   }
   attribute ConnectedLu Text;
   attribute TreeStructure Text;
}

@Override
@DynamicComponentDependency OPPLAN
entity ObjectOperModeGroup {
   crud = Read, Create, Delete;

   attribute Inherited Boolean("TRUE", "FALSE") {
      label = "Inherited from Parent";
      editable = [false];
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
   array OperationalModesArray() to OperModeGroupConnect() {
      where = "(:child.OperModeGroupId IN (select oper_mode_group_id FROM OBJECT_OPER_MODE_GROUP a WHERE a.contract = :parent.Contract AND a.mch_code = :parent.MchCode))";
   }
}
@Override
@DynamicComponentDependency OPPLAN
entity OperModeGroupConnect {
   crud = Read;
   ludependencies = ObjectOperModeGroup;

   keys = OperModeId, OperModeGroupId;
   attribute OperModeGroupId Text {
      editable = [false];
   }
   reference OperModeIdRef(OperModeId) to OperationalMode(OperModeId) {
      label = "Operational Mode";
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
}
--------------------------------- FUNCTIONS ---------------------------------
action DeleteObject {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentObject, EquipmentSerial, EquipmentFunctional;
   parameter Contract Text;
   parameter MchCode Text;
}
action SetInOperative {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract Text;
   parameter MchCode Text;
}
action SetNonOperative {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract Text;
   parameter MchCode Text;
}
action SetInOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetOutofOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStatusScrappedSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetInOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetOutofOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStatusScrappedFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}

action SetStructureInOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   supportwarnings = [true];
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStructureOperational {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}

action SetStructureNonOperational {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStuructureOutofOperationSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract Text;
   parameter MchCode  Text;
}
action SetStructureScrappedSerial {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStructureInOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObject;
   supportwarnings = [true];
   parameter Contract  Text;
   parameter MchCode  Text;
}
action SetStuructureOutofOperationFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObject;
   parameter Contract Text;
   parameter MchCode  Text;
}
action SetStructureScrappedFunctional {
   initialcheck UserAllowedSite(Contract);
   ludependencies = EquipmentFunctional, EquipmentObject;
   parameter Contract  Text;
   parameter MchCode  Text;
}

function GetTypeDesignations List < Entity(TypeDesignation) > {
   parameter MchType Text;
   where = "mch_type LIKE :MchType||'%' ";
}

function GetCostCenterAcc List < Entity(Account) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeB List < Entity(CodeB) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeC List < Entity(CodeC) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeD List < Entity(CodeD) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeE List < Entity(CodeE) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeF List < Entity(CodeF) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeG List < Entity(CodeG) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeH List < Entity(CodeH) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeI List < Entity(CodeI) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeJ List < Entity(CodeJ) > {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetDefContract Text {
}
-------------------------------- STRUCTURES ---------------------------------

---------------------------------- VIRTUAL ----------------------------------
virtual EquipWorkSelection {
   attribute VisibleServiceLines Boolean("TRUE", "FALSE") {
      label = "Service Lines";
      editable = [true];
      required = [true];
   }
   attribute VisibleAllServiceLines Boolean("TRUE", "FALSE") {
      label = "All Service Lines";
      editable = [true];
      required = [true];
   }
   attribute VisiblePmActions Boolean("TRUE", "FALSE") {
      label = "PM Actions";
      editable = [true];
      required = [true];
   }
   attribute VisibleMaintPlan Boolean("TRUE", "FALSE") {
      label = "Maintenance Plan";
      editable = [true];
      required = [true];
   }
   attribute VisibleActiveWorkTasks Boolean("TRUE", "FALSE") {
      label = "Active Work Tasks";
      editable = [true];
      required = [true];
   }
   attribute VisibleAllActiveWorkTasks Boolean("TRUE", "FALSE") {
      label = "All Active Work Tasks";
      editable = [true];
      required = [true];
   }
   attribute VisibleHistoricalWorkTasks Boolean("TRUE", "FALSE") {
      label = "Historical Work Tasks";
      editable = [true];
      required = [true];
   }
}
