-----------------------------------------------------------------------------
--
--  Fragment:     MoveFunctionalObject
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  180717  SHEPLK  SAUXXW4-1589 dlgMoveFunctional - Move Functional Object.
--  200106  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  210105  DEEKLK  AM2020R1-7134, Modified DlgMoveFunctionalObj and Added command OpenDlgMoveFunctional, actions CheckAllSitesIgnoreObjLevelVld() & GetMchName().

-----------------------------------------------------------------------------
fragment MoveFunctionalObjectDialog;
component EQUIP;
layer Core;
description "Move Functional Object";
----------------------------- CLIENT FRAGMENTS ------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog DlgMoveFunctionalObj for StructDlgMoveFunctional {
   label = "Move Functional Object - ${MchCode} - ${MchName}";

   input(Contract, MchCode, MchName, ObjLevel, Company, SupContract, SupMchCode, SupMchName, ToContract, ToCompany, CbInheritCostCenter) {
      command CheckAllSiteIgnoreObjVldCommand;
   }
   output(Contract, MchCode, CbInheritCostCenter, SupContract, SupMchCode, ToContract, ToMchCode, CbRemoveDocConn, DfComment, NewObjLevel);

   group BelongsToObjectGroup;
   group NewParentObjectGroup;
   group ObjectLevelsGroup;
   group MoveOptionsGroup;

   commandgroup ButtonCommandGroup {
      command Ok {
         enabled = [ToContract != null and ToMchCode != null and((AllSitesIgnoreObjLvlVld = "TRUE" and NewObjLevel != null) or AllSitesIgnoreObjLvlVld = "FALSE")];
      }
      command Cancel;
   }

}

---------------------------------- GROUPS -----------------------------------
group BelongsToObjectGroup for StructDlgMoveFunctional {
   label = "Current Parent Object - ${SupMchCode} - ${SupMchName}";
   collapsed = [true];
   field SupContract {
      size = Large;
   }
   lov SupMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
   }
   field SupMchName {
      size = Large;
   }
   field SupMchCodeRef.ObjLevel {
      size = Large;
   }

}

group NewParentObjectGroup for StructDlgMoveFunctional {
   label = "New Parent Object";
   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Large;
      required = [true];
      validate command {
         execute {
            call GetCompany(ToContract) into ToCompany;
            if [Company = ToCompany] {
               set CbInheritCostCenter = true;
            }
            else {
               set CbInheritCostCenter = false;

            }
            call CheckAllSitesIgnoreObjLevelVld(ToContract, Contract, MchCode) into AllSitesIgnoreObjLvlVld;
            if [AllSitesIgnoreObjLvlVld = "FALSE"] {
               set NewObjLevel = null;
            }
         }
      }
   }
   lov ToMchCodeDlgRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      required = [true];
      format = uppercase;
      validate command {
         execute {
            if [ToMchCode != null] {
               call GetCompany(ToContract) into ToCompany;
               if [Company = ToCompany] {
                  set CbInheritCostCenter = true;
               }
               else {
                  set CbInheritCostCenter = false;
               }
            }
         }
      }
   }
   field ToMchCodeDlgRef.MchName {
      size = Large;
   }
   field ToMchCodeDlgRef.ObjLevel {
      size = Large;
   }

}

group ObjectLevelsGroup for StructDlgMoveFunctional {
   label = "Change Object Level";
   field ObjLevel {
      size = Large;
   }
   lov NewObjLevelRef with  ReferenceEquipmentObjectLevelSelector {
      search = ObjLevel, LevelSeq;
      size = Large;
      editable = [AllSitesIgnoreObjLvlVld = "TRUE"];
      required = [true];
   }

}

group MoveOptionsGroup for StructDlgMoveFunctional {
   label = "Move Options";
   field Company {
      visible = [false];
   }
   field ToCompany {
      visible = [false];
   }
   field CbRemoveDocConn {
      required = [true];
      size = Large;
   }
   field CbInheritCostCenter {
      required = [true];
      size = Medium;
      editable = [Company = ToCompany];
   }
   field DfComment {
      size = Large;
   }

}

--------------------------------- COMMANDS ----------------------------------
command CheckAllSiteIgnoreObjVldCommand for StructDlgMoveFunctional {
   execute {
      call CheckAllSitesIgnoreObjLevelVld(ToContract, Contract, MchCode) into AllSitesIgnoreObjLvlVld;
   }

}

command OpenDlgMoveFunctional for EquipmentFunctional {
   label = "Move Functional Object";
   enabled = [MchCode != null and Contract != null and SupContract != null and OperationalStatus != "SCRAPPED" and ObjLevel != null];
   variable ToSite;
   variable ToMchCodeVal;
   variable Comment;
   variable RemoveDocConn;
   variable InheritCostCtr {
      type = Boolean;
   }
   variable SupMchName;
   variable ToCompany;
   variable NewObjLevel;

   execute {
      call GetCompany(SupContract) into ToCompany;
      if [ToCompany = Company] {
         set InheritCostCtr = true;
      }
      else {
         set InheritCostCtr = false;
      }
      call GetMchName(SupContract, SupMchCode) into SupMchName;
      dialog DlgMoveFunctionalObj(Contract, MchCode, MchName, ObjLevel, Company, SupContract, SupMchCode, SupMchName, Contract, ToCompany, InheritCostCtr)
      into(Contract, MchCode, InheritCostCtr, SupContract, SupMchCode, ToSite, ToMchCodeVal, RemoveDocConn, Comment, NewObjLevel) {
         when OK {
            call MoveFuncObj(Contract, MchCode, MchName, "CHECK", InheritCostCtr, SupContract, SupMchCode, ToSite, ToMchCodeVal, RemoveDocConn, Comment, NewObjLevel);
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }

}
--------------------------- PROJECTION FRAGMENTS ----------------------------

-------------------------------- STRUCTURES ---------------------------------
structure StructDlgMoveFunctional {
   attribute MchCode Text;
   attribute MchName Text;
   attribute Contract Text;
   attribute SupContract Text {
      label = "Belongs to Site";
      editable = [false];
      format = uppercase;
   }
   attribute SupMchCode Text {
      label = "Belongs to Object ID";
      editable = [false];
      format = uppercase;
   }
   attribute SupMchName Text {
      label = "Description";
      editable = [false];
   }
   attribute ToContract Text;
   attribute ToMchCode Text;
   attribute ObjLevel Text {
      label = "Current Object Level";
      editable = [false];
   }
   attribute NewObjLevel Text {
      label = "New Object Level";
   }
   attribute Company Text;
   attribute ToCompany Text;

   attribute CbRemoveDocConn Boolean("TRUE", "FALSE") {
      label = "Remove document connections";
      required = [true];
   }
   attribute CbInheritCostCenter Boolean("TRUE", "FALSE") {
      label = "Inherit cost center from new parent";
      default = "TRUE";
      required = [true];
   }
   attribute DfComment Text {
      label = "Comment";
   }
   attribute AllSitesIgnoreObjLvlVld Text;
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Site";
   }
   reference ToMchCodeDlgRef(ToContract, ToMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "To Object ID";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Belongs to Object ID";
   }
   reference NewObjLevelRef(NewObjLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "New Object Level";
   }

}
---------------------------------- ACTIONS ----------------------------------

action MoveFuncObj {
   initialcheck implementation;
   ludependencies = EquipmentFunctional, EquipmentObject;
   parameter Contract Text;
   parameter MchCode  Text;
   parameter MchName  Text;
   parameter Action   Text;
   parameter Inherit Boolean;
   parameter FromContract Text;
   parameter FromMch Text;
   parameter ToContract Text;
   parameter ToMch  Text;
   parameter RemoveDocStr Boolean;
   parameter Comment  Text;
   parameter NewObjLevel Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetCompany Text {
   parameter Contract Text;
}

function CheckAllSitesIgnoreObjLevelVld Text {
   parameter ToContract Text;
   parameter Contract Text;
   parameter MchCode Text;
}

function GetMchName Text {
   parameter SupContract Text;
   parameter SupMchCode Text;
}