-----------------------------------------------------------------------------
-- Date        Sign      History
-- ----------  ------   -----------------------------------------------------
-- 2018-08-24  CLEKLK   SAUXXW4-1279, MTG Version: 1.26,Enterprise Explorer Source: frmSparePartIncludedIn
-- 2018-08-28  CLEKLK   SAUXXW4-3354, MTG Version: 1.27, Enterprise Explorer Source: tbwInWoSpare
-- 2018-10-09  SHEPLK   SAUXXW4-1636, MTG Version: 1.29, Enterprise Explorer Source: tbwInSerialObject
-- 2018-10-10  DHWELK   SAUXXW4-1288, MTG Version: 1.31, Enterprise Explorer Source: tbwInDetachedPartList - In Detached Part List
-----------------------------------------------------------------------------

projection PartIncludedInAnalysisHandling;
component EQUIP;
layer Core;
description "View Instances where Spare Parts are Included in";
category Users;

include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency INVENT
include fragment InventoryPartWoLovSelector;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment ReplacePartAssistant;
include fragment EquipmentAllObjectUivSelector;
include fragment EquipInvPurPartSelector;
include fragment EquipmentAllObjectPerfQuery;

----------------------------- MAIN ENTRY POINTS -----------------------------

@DynamicComponentDependency PCMSTD
entityset TaskTemplateSpareSet for TaskTemplateSpare;
entityset EquipmentPartQuerySet for EquipmentPartQuery;
@DynamicComponentDependency PM
entityset PmActionSparePartSet for PmActionSparePart;
@DynamicComponentDependency WO
entityset MaintMaterialReqLineSet for MaintMaterialReqLine;
entityset EquipmentSerials for EquipmentSerial;
entityset EquipmentSpareStructureSet for EquipmentSpareStructure;

------------------------------ ENTITY DETAILS -------------------------------

@Override
@DynamicComponentDependency PCMSTD
entity TaskTemplateSpare {
   crud = Read;
   from = "task_template_site_spare";
   keys = TaskTemplateId, TaskTemplateRev, TaskTemplateSpareSeq {
      where = "TASK_TEMPLATE_ID = :TaskTemplateId and TASK_TEMPLATE_REV = :TaskTemplateRev and TASK_TEMPLATE_SPARE_SEQ = :TaskTemplateSpareSeq";
   }
   attribute TaskTemplateId Text;

   attribute Status Text {
      fetch = "Task_Template_API.Get_Status(TASK_TEMPLATE_ID,TASK_TEMPLATE_REV)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute TaskTemplateSpareSeq Number {
      label = "Task Template Spare Sequence";
      maxlength = 100;
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute SpareContract Text {
      editable = [false];
   }
   attribute Unit Text {
      fetch = "TASK_TEMP_SPARE_UTILITY_API.Get_Unit_Meas(SPARE_CONTRACT,PART_NO)";
      label = "Unit";
      maxlength = 2000;
      editable = [false];
   }
   attribute PlannedQty Number {
      maxlength = 100;
   }
   attribute DimensionQlty Text {
      fetch = "INVENTORY_PART_API.Get_Dim_Quality(SPARE_CONTRACT,PART_NO)";
   }
   attribute TypeDesignation Text {
      fetch = "INVENTORY_PART_API.Get_Type_Designation(SPARE_CONTRACT,PART_NO)";
   }

   reference TaskTemplateRef(TaskTemplateRev, TaskTemplateId) to TaskTemplate(TaskTemplateRev, TaskTemplateId);
   reference InventoryPartRef(SpareContract, PartNo) to InventoryPart(Contract, PartNo);
   reference TaskTemplateRevRef(TaskTemplateId, TaskTemplateRev) to TaskTemplate(TaskTemplateId, TaskTemplateRev) {
      label = "Task Template Revision";
   }
   reference PartNoRef(SpareContract, PartNo) to InventoryPartWoLov(Contract, PartNo) {
      label = "Part No";
   }
   reference SpareContractRef(SpareContract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference UnitRef(Unit) to IsoUnit(UnitCode) {
      label = "Unit";
   }
}

@Override
entity EquipmentObjectSpare {
   crud = Read;
   keys = MchSpareSeq, Contract {
      where = "MCH_SPARE_SEQ = :MchSpareSeq and Contract = :Contract";
   }
   attribute SpareContract Text {
      label = "Site";
   }
   attribute Qty Number {
      editable = [false];
   }
   attribute MchPart Text {
      editable = [false];
   }
   attribute DrawingNo Text {
      editable = [false];
   }
   attribute DrawingPos Text {
      editable = [false];
   }
   attribute Note Text {
      editable = [false];
   }
   attribute SpareId Text {
      editable = [false];
   }
   reference EquipmentObjectRef(Contract, MchCode) to EquipmentObject(Contract, MchCode);
   reference EquipmentObjectPerfRef(Contract, MchCode) to EquipmentAllObjectPerf(Contract, MchCode);
   reference SpareContractRef(SpareContract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}

@Override
@DynamicComponentDependency PM
entity PmActionSparePart {
   crud = Read;
   attribute Contract Text {
      editable = [false];
   }
   attribute PmSpareSeq Number {
      label = "Spare Seq";
      maxlength = 6;
      // searchable = false;
   }
   attribute State Text {
      fetch = "PM_ACTION_API.Get_Status(PM_NO,PM_REVISION)";
      label = "State";
      maxlength = 4000;
      editable = [false];
   }
   attribute SpareContract Text {
      label = "Site";
      // searchable = false;
   }
   attribute QtyPlan Number {
      required = [true];
   }
   attribute QuantityOnHand Text {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Inventory_Quantity(contract_           => SPARE_CONTRACT,
                                                                                                                    part_no_            => PART_NO,
                                                                                                                    configuration_id_   => NULL,
                                                                                                                    qty_type_           => 'ONHAND',
                                                                                                                    ownership_type1_db_ => PART_OWNERSHIP_API.Encode(PART_OWNERSHIP),
                                                                                                                    ownership_type2_db_ => DECODE(PART_OWNERSHIP_API.Encode(PART_OWNERSHIP), 'COMPANY OWNED', 'CONSIGNMENT', NULL),
                                                                                                                    owning_customer_no_ => OWNER,
                                                                                                                    location_type1_db_  => 'PICKING',
                                                                                                                    location_type2_db_  => 'F',
                                                                                                                    location_type3_db_  => 'SHIPMENT',
                                                                                                                    location_type4_db_  => 'MANUFACTURING',
                                                                                                                    include_standard_   => 'TRUE',
                                                                                                                    include_project_    => 'FALSE',
                                                                                                                    activity_seq_       => 0,
                                                                                                                    condition_code_     => CONDITION_CODE)";
      label = "Quantity on Hand";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute Unit Text {
      fetch = "Purchase_Part_Supplier_API.Get_Unit_Meas(SPARE_CONTRACT,PART_NO)";
      label = "Unit";
      maxlength = 2000;
      editable = [false];
   }
   attribute TaskTemplateID Text {
      fetch = "PM_ACTION_JOB_API.Get_Std_Job_Id(PM_NO,PM_REVISION,PM_ACTION_ROLE_API.Get_Job_Id(PM_NO,PM_REVISION,OPERATION_NO))";
      label = "Task Template ID";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   attribute TaskTemplateRevision Text {
      fetch = "PM_ACTION_JOB_API.Get_Std_Job_Revision(PM_NO,PM_REVISION,PM_ACTION_ROLE_API.Get_Job_Id(PM_NO,PM_REVISION,OPERATION_NO))";
      label = "Task Template Revision";
      maxlength = 2000;
      editable = [false];
   }
   attribute TaskTemplateSite Text {
      fetch = "PM_ACTION_JOB_API.Get_Std_Job_Contract(PM_NO,PM_REVISION,PM_ACTION_ROLE_API.Get_Job_Id(PM_NO,PM_REVISION,OPERATION_NO))";
      label = "Task Template Site";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute Definition Text {
      fetch = "Task_Template_API.Get_Definition(PM_ACTION_JOB_API.Get_Std_Job_Id(PM_NO,PM_REVISION,PM_ACTION_ROLE_API.Get_Job_Id(PM_NO,PM_REVISION,OPERATION_NO)),PM_ACTION_JOB_API.Get_Std_Job_Revision(PM_NO,PM_REVISION,PM_ACTION_ROLE_API.Get_Job_Id(PM_NO,PM_REVISION,OPERATION_NO)))";
      label = "Definition";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute TaskTemplateStatus Text {
      fetch = "Task_Template_API.Get_Status(PM_ACTION_JOB_API.Get_Std_Job_Id(PM_NO,PM_REVISION,PM_ACTION_ROLE_API.Get_Job_Id(PM_NO,PM_REVISION,OPERATION_NO)),PM_ACTION_JOB_API.Get_Std_Job_Revision(PM_NO,PM_REVISION,PM_ACTION_ROLE_API.Get_Job_Id(PM_NO,PM_REVISION,OPERATION_NO)))";
      label = "Task Template Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperationNo Number {
      label = "Work List No";
      editable = [false];
   }
   attribute Owner Text {
      format = uppercase;
   }
   @DynamicComponentDependency PURCH
   reference PurchasePartRef(SpareContract, PartNo) to PurchasePart(Contract, PartNo);
   reference InventoryPartRef(SpareContract, PartNo) to InventoryPart(Contract, PartNo);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
//   //!TODO: Key definitions do not match, investigate and correct
   reference OperationNoRef(PmNo, PmRevision, OperationNo) to PmActionRole(PmNo, PmRevision, RowNo) {
      label = "Work List No";
   }
   reference OwnerRef(Owner) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Owner";
   }
}

@Override
@DynamicComponentDependency WO
entity MaintMaterialReqLine {
   crud = Read;
   attribute MaintMaterialOrderNo Number {
      label = "Mat Req Order No";
      editable = [false];
   }
   attribute RequisitionSite Text {
      fetch = "Maint_Material_Requisition_API.Get_Req_Site(maint_material_order_no)";
      label = "Requisition Site";
      maxlength = 40;
      editable = [false];
   }
   attribute WoNo Number {
      label = "WO No";
      editable = [false];
   }
   attribute LineItemNo Number {
      label = "Line No";
   }
   attribute PartNo Text {
      // searchable = false;
      editable = [false];
   }
   attribute SpareContract Text {
      label = "Site";
      // searchable = false;
      editable = [false];
   }
   attribute PlanQty Number {
      label = "Quantity Required";
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute Unit Text {
      fetch = "Purchase_Part_Supplier_API.Get_Unit_Meas(spare_contract, part_no)";
      label = "Unit";
      maxlength = 2000;
      editable = [false];
   }
   attribute State  Text {
      fetch = "Maint_Material_Requisition_API.Get_State(maint_material_order_no)";
   }

   reference WorkOrderRef(WoNo) to WorkOrder(WoNo);
   reference MaintMaterialRequisitionRef(MaintMaterialOrderNo) to MaintMaterialRequisition(MaintMaterialOrderNo);
   reference InventoryPartRef(SpareContract, PartNo) to InventoryPart(Contract, PartNo);
}

@Override
entity EquipmentSerial {
   crud = Read;
   from = "equipment_serial_uiv";
   exec = "EQUIPMENT_SERIAL_API";
   keys = MchCode, Contract {
      where = "MCH_CODE = :MchCode and CONTRACT = :Contract";
   }
   attribute MchCode Text {
      editable = [false];
   }
   attribute MchName Text {
      label = "Object Description";
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      editable = [false];
      fetch = "OPERATIONAL_STATUS_DB";
   }
   attribute OperationalCondition Enumeration(SerialOperationalCond) {
      editable = [false];
      fetch = "OPERATIONAL_CONDITION_DB";
   }
   attribute SerialState Text {
      label = "Current Position";
      editable = [false];
   }
   attribute LatestTransaction Text {
      editable = [false];
   }
   attribute SupContract Text {
      editable = [false];
   }
   attribute SupMchCode Text {
      label = "Belongs to Object";
      editable = [false];
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentSerial(Contract, MchCode) {
      label = "Object ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Belongs to Object";
   }
   @DynamicComponentDependency PM
   array SerialObjectArray(PartNo, Contract) to PmActionSparePart(PartNo, SpareContract);
}

@Override
entity EquipmentSpareStructure {
   crud = Read;
   attribute SpareId Text {
      label = "Part No";
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "Maintenance_Spare_API.Get_Description(spare_contract,spare_id)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SpareContract Text {
      label = "Site";
      editable = [false];
   }
   attribute InventoryPart Text {
      fetch = "Maintenance_Spare_API.Get_Inventory_Flag(spare_contract,spare_id)";
      label = "Inventory Part";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency INVENT
   attribute QuantityOnHand Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand(spare_contract,spare_id,null)";
      label = "Quantity On Hand";
      editable = [false];
   }
   attribute UnitOfMeasure Text {
      fetch = "Maintenance_Spare_API.Get_Unit_Meas(spare_contract,spare_id)";
      label = "Unit of Measure";
      maxlength = 2000;
      editable = [ETag != null];
   }
   attribute Qty Number {
      editable = [false];
   }
   attribute MchPart Text {
      editable = [false];
   }
   attribute DrawingNo Text {
      editable = [false];
   }
   attribute DrawingPos Text {
      editable = [false];
   }
   attribute Note Text {
      editable = [false];
   }
   attribute ComponentSpareId Text {
      label = "Comp Spare Id";
      editable = [false];
   }
   @DynamicComponentDependency INVENT
   attribute DimQuality Text {
      fetch = "Inventory_Part_API.Get_Dim_Quality(SPARE_CONTRACT, SPARE_ID)";
   }
   @DynamicComponentDependency INVENT
   attribute TypeDesignation Text {
      fetch = "Inventory_Part_API.Get_Type_Designation(SPARE_CONTRACT, SPARE_ID)";

   }





   @DynamicComponentDependency INVENT
   reference InventoryPartRef(SpareContract, SpareId) to InventoryPart(Contract, PartNo);
   reference SpareIdRef(SpareId) to EquipInvPurPart(SpareContract) {
      label = "Part No";
   }
   reference SpareContractRef(SpareContract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

}

// This overriden is to avoid some build errors in Equipment-(Service & Asset) sales part
@Override
entity IsoUnit {
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

query EquipmentPartQuery {
   from = "PARTS_FOR_EQUIPMENT";
   keys = PartNo, Contract {
      where = "PART_NO = :PartNo and CONTRACT = :Contract";
   }
   attribute PartNo Text {
      maxlength = 100;
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute Description Text {
      label = "Description";
   }
   attribute MaintDescription Text {
      label = "Description";
   }
   @DynamicComponentDependency INVENT
   attribute TypeDesignation Text {
      fetch = "INVENTORY_PART_API.Get_Type_Designation(Contract,PART_NO)";
   }
   @DynamicComponentDependency INVENT
   attribute DimQuality Text {
      fetch = "INVENTORY_PART_API.Get_Dim_Quality(Contract,PART_NO)";
   }
   @DynamicComponentDependency PCMSTD
   array TaskTemplateSpareArray(Contract, PartNo) to TaskTemplateSpare(SpareContract, PartNo);
   array EquipmentObjectSpareArray(PartNo, Contract) to EquipmentObjectSpare(SpareId, SpareContract);
   @DynamicComponentDependency PM
   array PmActionArray(PartNo, Contract) to PmActionSparePart(PartNo, SpareContract);
   @DynamicComponentDependency WO
   array MaintMReqLineArray(PartNo, Contract) to MaintMaterialReqLine(PartNo, SpareContract);
   array SerialObjectArray(PartNo, Contract) to EquipmentSerial(PartNo, Contract);
   array DetachedSparePartListArray(PartNo, Contract) to EquipmentSpareStructure(ComponentSpareId, SpareContract);

}

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
