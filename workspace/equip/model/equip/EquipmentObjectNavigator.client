--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-04-10  CLEKLK  SAUXXW$-16480, Corrected calls to assistants
-- 2018-09-13  KrRaLK  SAUXXW4-9706, Created Tree control for Equipment Object Navigator.
-- 2018-10-17  SHEPLK  SAUXXW4-1592, Added NewFunctionalObjectDialog fragment for dlgNewFunctionalObject.
-- 2018-10-23  SHEPLK  SAUXXW4-10600, Added EquipmentSummary fragment for equipment objcet common detail page.
-- 2018-10-23  ISHHLK  SAUXXW4-1247, Added NewSerialObjectDialog fragment for dlgNewSerialObject.
-- 2018-10-24  BAKALK  SAUXXW4-10496,Removed OperationalStatusStatusforStructureCommand from group
-- 2018-10-25  SHEPLK  SAUXXW4-1591, Added MoveToInventoryDialog fragment for dlgMoveToInventory.
-- 2018-01-29  SSILLK  SAUXXW4-12597,Tree Navigator - Remaining Issues
-- 2020-06-30  DEEKLK  AMXTEND-439, Added PurchInformationGroup and changed PurchInfoGroup to PurchInformationGroup.
-- 2020-07-22  CLEKLK  AMXTEND-700, Added the warningsenabled for EquipmentObjectList
-- 2020-12-03  CLEKLK AM2020R1-6958, Added TechObjectReferenceEquipSingleton and changed TechnicalObjectReferenceSingleton to TechObjectReferenceEquipSingleton
-- 2021-01-04  LASSLK AM2020R1-7246, Added group CriticalAnalysisGroup, list CriticalAnalysisResultList
-- 2021-02-03  CLEKLK AM2020R1-7085, Added sepearte commands for "Status for Structure" option
-- 2021-05-04  LASSLK AM21R2-1339, Modified the Commands DetailsCommandPm,DetailsCommandPmAll,DetailsCommandWo,DetailsCommandWoAll
-- 2021-05-20  RUSSLK AM2020R1-7787, Split GetAllEquipmentObjectFiltered() to 7 different functions to improve performance.
-- 2021-09-21  HRATLK AM21R2-2783, Added RetrospectiveWorkReportingEAMCommand and RetrospectiveWorkReportingSMCommand commands.
-- 2021-10-06  RUSSLK AM21R2-2643, Added EquipmentFunctionalArray to the FunctionalObjectGeneralSingleton and  EquipmentSerialArray to the SerialObjectGeneralSingleton.
-- 2021-10-25  RUSSLK AM21R2-2534, Split GetParentEquipObjWithoutLoc(),GetParentEquipObjWithoutObjtype(),GetParentEquipObjWithoutCriticality(),
--                                 GetParentEquipObjWithoutItemClass(),GetParentEquipObjWithoutGroupId(),GetParentEquipObjWithoutCategory(),GetParentEquipObjWithoutManufacturer(),GetParentEquipObjects()
--                                 to 7 different functions.
--------------------------------------------------------------------------------------
client EquipmentObjectNavigator;
component EQUIP;
layer Core;

projection EquipmentObjectNavigatorHandling;

include fragment UserAllowedSiteLovSelector;
include fragment MaintenanceObjectSelector;
include fragment EquipmentObjectList;
include fragment FunctionalObjectTab;
include fragment SerialObjectTab;
@DynamicComponentDependency PCMSCI
include fragment ServiceLinesList;
@DynamicComponentDependency PM
include fragment PmForObjectStucturePmActionMaintenancePlan;
include fragment ObjectWarrantyList;
include fragment EquipObjCostPerYearList;
@DynamicComponentDependency METINV
include fragment MeteringInvoicingList;

include fragment BoexpTwSettings;
include fragment EquipmentTwSettings;
@DynamicComponentDependency WO
include fragment WorkTask;
include fragment MediaLibraryAttachment;
include fragment EquipmentFunctionalLovSelector;

warningsenabled = EquipmentObject, EquipmentObjectList;


----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ServEquipmentObjectNavigatorNavEntry parent EquipNavigator.ServEquipmentObject at index 1 {
      label = "Explore Equipment Objects";
      tree EquipObjectNavigatorTree;
   }
   entry MaintEquipmentObjectNavigatorNavEntry parent EquipNavigator.MaintEquipmentObject at index 1 {
      label = "Explore Equipment Objects";
      tree EquipObjectNavigatorTree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page EquipmentObjectPageF using EquipmentObjectListSet {
   label = "Equipment Object";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;

   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "F");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "F");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetChildEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, "F", EquipObjectNavigatorPageFilter.EquipmentObjectSeq)
            {
            copyoncruddefault(EquipmentObjectSeq) to(FunctionalObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllFEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];
         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         group ObjectConnGroup {
            visible = [VisibleWarranty = true];
         }
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group CostDetailsGroup {
            visible = [VisibleCost = true];
         }
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectCommand;
            command OperationalStatusStructureStrappedEquipmentObjectCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command OperationalConditionSetOperationalEquipmentObjectCommand;
      command OperationalConditionSetNonOperationalEquipmentObjectCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}

page EquipmentObjectPageL using EquipmentObjectListSet {
   label = "Equipment Object";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;

   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "L");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "L");
         }
      }
      tab {
         label = "Objects";

         list EquipmentObjectsList using GetChildEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, "L", EquipObjectNavigatorPageFilter.EquipmentObjectSeq)
            {
            copyoncruddefault(EquipmentObjectSeq) to(LocationObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllLEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton;
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];
         singleton SerialObjectGeneralSingleton;
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         group ObjectConnGroup {
            visible = [VisibleWarranty = true];
         }
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group CostDetailsGroup {
            visible = [VisibleCost = true];
         }
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectLCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectLCommand;
            command OperationalStatusStructureScrappedEquipmentObjectLCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command OperationalConditionSetOperationalEquipmentObjectCommand;
      command OperationalConditionSetNonOperationalEquipmentObjectCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}

page EquipmentObjectPageR using EquipmentObjectListSet {
   label = "Equipment Object";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;

   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "R");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "R");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetChildEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, "R", EquipObjectNavigatorPageFilter.EquipmentObjectSeq)
            {
            copyoncruddefault(EquipmentObjectSeq) to(FromObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllREquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton;
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];
         singleton SerialObjectGeneralSingleton;
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         group ObjectConnGroup {
            visible = [VisibleWarranty = true];
         }
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group CostDetailsGroup {
            visible = [VisibleCost = true];
         }
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectRCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectRCommand;
            command OperationalStatusStructureScrappedEquipmentObjectRCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command OperationalConditionSetOperationalEquipmentObjectCommand;
      command OperationalConditionSetNonOperationalEquipmentObjectCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}

page EquipmentObjectPageT using EquipmentObjectListSet {
   label = "Equipment Object";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;

   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "T");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "T");
         }
      }
      tab {
         label = "Objects";

         list EquipmentObjectsList using GetChildEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, "T", EquipObjectNavigatorPageFilter.EquipmentObjectSeq)
            {
            copyoncruddefault(EquipmentObjectSeq) to(ToObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllTEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton;
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];
         singleton SerialObjectGeneralSingleton;
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         group ObjectConnGroup {
            visible = [VisibleWarranty = true];
         }
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group CostDetailsGroup {
            visible = [VisibleCost = true];
         }
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectTCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectTCommand;
            command OperationalStatusStructureScrappedEquipmentObjectTCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command OperationalConditionSetOperationalEquipmentObjectCommand;
      command OperationalConditionSetNonOperationalEquipmentObjectCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}

page EquipmentObjectPageP using EquipmentObjectListSet {
   label = "Equipment Object";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;

   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "P");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "P");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetChildEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, "P", EquipObjectNavigatorPageFilter.EquipmentObjectSeq)
            {
            copyoncruddefault(EquipmentObjectSeq) to(ProcessObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllPEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton;
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];
         singleton SerialObjectGeneralSingleton;
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         group ObjectConnGroup {
            visible = [VisibleWarranty = true];
         }
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group CostDetailsGroup {
            visible = [VisibleCost = true];
         }
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectPCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectPCommand;
            command OperationalStatusStructureScrappedEquipmentObjectPCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command OperationalConditionSetOperationalEquipmentObjectCommand;
      command OperationalConditionSetNonOperationalEquipmentObjectCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}

page EquipmentObjectPageS using EquipmentObjectListSet {
   label = "Equipment Object";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;

   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "S");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "S");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetChildEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, "S", EquipObjectNavigatorPageFilter.EquipmentObjectSeq)
            {
            copyoncruddefault(EquipmentObjectSeq) to(PipeObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllSEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton;
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];
         singleton SerialObjectGeneralSingleton;
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         group ObjectConnGroup {
            visible = [VisibleWarranty = true];
         }
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group CostDetailsGroup {
            visible = [VisibleCost = true];
         }
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectSCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectSCommand;
            command OperationalStatusStructureScrappedEquipmentObjectSCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command OperationalConditionSetOperationalEquipmentObjectCommand;
      command OperationalConditionSetNonOperationalEquipmentObjectCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}

page EquipmentObjectPageE using EquipmentObjectListSet {
   label = "Equipment Object";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;

   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "E");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "E");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetChildEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, "E", EquipObjectNavigatorPageFilter.EquipmentObjectSeq)
            {
            copyoncruddefault(EquipmentObjectSeq) to(CircuitObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllEEquipmentObjectFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton;
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];
         singleton SerialObjectGeneralSingleton;
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         group ObjectConnGroup {
            visible = [VisibleWarranty = true];
         }
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group CostDetailsGroup {
            visible = [VisibleCost = true];
         }
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectECommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectECommand;
            command OperationalStatusStructureScrappedEquipmentObjectECommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      command OperationalConditionSetOperationalEquipmentObjectCommand;
      command OperationalConditionSetNonOperationalEquipmentObjectCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}


page TreeViewPage using BoexpTwSettingsSet {
   label = "Explore Equipment Objects";

   crudactions {
      edit {
         enabled = [SessionUser = Owner];

      }
      delete {
         enabled = [SessionUser = Owner];
      }

   }
   editmode = Default;

   selector BoexpTwSettingsSelector;
   arrange {
      group BoexpTwSettingsGroup;
      group BoexpTwSettingsAccessGroup;
   }
   tabs {
      tab {
         label = "View Configuration";
         singleton EquipmentTwSettingsSingleton(EquipmentTwSettingsArray);
         arrange {
            group EquipmentTwTreeSettingsGroup bind EquipmentTwSettingsSingleton;
            arrange {
               group EquipmentTwOpStateGroup bind EquipmentTwSettingsSingleton;
               group EquipmentTwDesignStateGroup bind EquipmentTwSettingsSingleton;
            }
         }
         arrange {
            group EquipmentTwGrouping bind EquipmentTwSettingsSingleton;
            group EquipmentTwPresentationGroup bind EquipmentTwSettingsSingleton;
         }

      }
   }

   command CreateTreeViewCommand;
}

page EquipmentObjectSiteListPage using EquipmentObjectListSet {
   label = "Objects for Site";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector CompanySiteSelector;

   list EquipmentObjectAllList using GetChildEquipObjUnderSite(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.Contract);
}

page EquipmentObjectLocationListPage using EquipmentObjectListSet {
   label = "Objects for Location";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector LocationSelector;

   list EquipmentObjectAllList using GetChildEquipObjUnderLoc(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.LocationId);
}

page EquipmentObjectCriticalityListPage using EquipmentObjectListSet {
   label = "Objects for Object Criticality";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentCriticalitySelector;

   list EquipmentObjectAllList using GetChildEquipObjForCriticality(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.Criticality);
}

page EquipmentObjectItemClassListPage using ItemClassSet {
   label = "Objects for Item Class";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector ItemClassSelector;

   list EquipmentObjectAllList using GetChildEquipObjForItemClass(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.ItemClassId);
}

page EquipmentObjectGroupIdListPage using EquipmentObjGroupSet {
   label = "Objects for Group ID";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjGroupSelector;

   list EquipmentObjectAllList using GetChildEquipObjForGroupId(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.GroupId);
}

page EquipmentObjectCategoryListPage using EquipmentObjCategorySet {
   label = "Objects for Category";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjCategorySelector;

   list EquipmentObjectAllList using GetChildEquipObjForCategory(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.CategoryId);
}

page EquipmentObjectManufacturerListPage using ManufacturerInfoSet {
   label = "Objects for Manufacturer";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector ManufacturerInfoSelector;

   list EquipmentObjectAllList using GetChildEquipObjForManufacturer(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.ManufacturerId);
}

page EquipmentObjectObjTypeListPage using EquipmentObjectListSet {
   label = "Objects for Object Type";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjTypeSelector;

   list EquipmentObjectAllList using GetChildEquipObjForObjType(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.MchType);
}

@DynamicComponentDependency WO
page WorkOrderWorkTasksPage using ActiveSeparateEquipSet {
   label = "Work Tasks";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector ActiveSeparateSelector;
   group EquipObjWoGroup;
   tabs {
      tab {
         label = "Active Work Tasks";
         list WoExeWorkTaskList using GetActiveWorkTasksFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "All Active Work Tasks";
         list WoExeWorkTaskList using GetAllActiveWorkTasksFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Historical Work Tasks";
         list WoExeWorkTaskList using GetHistoricalWorkTasksFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq) {
            copyoncruddefault(EquipmentObjectSeq) to(EquipmentObjectSeq);
         }
      }
   }
}

@DynamicComponentDependency PCMSCI
page ServiceLines using  PscContrProductScopeEquipSet {
   label = "Service Lines";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }


   selector PscContrProductScopeSelector;

   group EquipObjServiceLinesGroup;

   tabs {
      tab {
         label = "Service Lines";
         list PscServicesList using GetServiceLinesFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
         //list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq);
      }
      tab {
         label = "All Service Lines";
         list PscServicesList using GetAllServiceLinesFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.StructureInTree, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
         //list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq);
      }
   }
}

@DynamicComponentDependency PM
page PmActionsEquip using  PmActionEquipSet {
   label = "PM Actions";

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }


   selector PmActionSelector;

   group EquipObjPmActionGroup;

   tabs {
      tab {
         label = "PM Actions";
         list PmObjectList using GetPmActionsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq) {
            label = "Selected Object";
         }
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipObjectNavigatorPageFilter.TreeViewId, EquipObjectNavigatorPageFilter.EquipmentObjectSeq, EquipObjectNavigatorPageFilter.StructureInTree) {
            label = "Object Structure";
           // details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
         }
      }
      tab {
         label = "Maintenance Plan";
         list PmPlanList using GetMaintPlanFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq) {
            label = "Maintenance Plan";
         }
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command DetailsCommandPm for ObjectCountsPmEntity {
   label = "Go to level ${DisplayText}";
   icon = "caret-right";
   style = IconOnly;
   enabled = [OneObjCount != 0];
   variable TypeOfObj Text;
   variable NavigateUrlVar LongText;
   execute {
      set TypeOfObj = "Single";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}
command DetailsCommandPmAll for ObjectCountsPmEntity {
   label = "Go to Structure ${DisplayText}s";
   icon = "chevron-right";
   style = IconOnly;
   enabled = [AllCount != 0];
   variable TypeOfObj Text;
   variable NavigateUrlVar LongText;
   execute {
      set TypeOfObj = "Structure";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}

command DetailsCommandWo for ObjectCountsWoEntity {
   label = "Go to level ${DisplayText}";
   icon = "caret-right";
   style = IconOnly;
   enabled = [OneObjCount != 0];
   variable TypeOfObj Text;
   variable NavigateUrlVar LongText;
   execute {
      set TypeOfObj = "Single";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}
command DetailsCommandWoAll for ObjectCountsWoEntity {
   label = "Go to Structure ${DisplayText}";
   icon = "chevron-right";
   style = IconOnly;
   enabled = [AllCount != 0];
   variable TypeOfObj Text;
   variable NavigateUrlVar LongText;
   execute {
      set TypeOfObj = "Structure";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}

command CreateTreeViewCommand for BoexpTwSettings {
   label = "New View";

   execute {
      assistant CreateTreeViewAssistant {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

------------------------------- IMAGE VIEWERS -------------------------------
imageviewer ObjectImageViewer for EquipmentObjectList {
   label = "Equipment Object Image";
   collapsed = [false];
   scale = original;
   height = auto;
}

--------------------------------- SELECTORS ---------------------------------

@Override
@DynamicComponentDependency WO
selector ActiveSeparateSelector for ActiveSeparateEquip {
   label = "${WoNo}";
   static WoNo;
   //static Description;
   static MchCode;
   static MchCodeContract;
}

@Override
@DynamicComponentDependency PM
selector PmActionSelector for PmActionEquip {
   label = "";
   static PmNo;
   //static Description;
   static PmRevision;
}

@Override
@DynamicComponentDependency PCMSCI
selector PscContrProductScopeSelector for PscContrProductScopeEquip {
   label = "";
   static ContractId;
   //static Description;
   static LineNo;
   static ScopeSeq;
}

@Override
selector EquipmentObjectSelector for EquipmentObjectList {
   label = "${MchCode} - ${MchName} - ${Contract} - ${OperationalStatus}";
   static EquipmentObjectSeq {
      visible = [false];
      searchable = false;
   }
   static MchCode;
   static MchName;
   static Contract;
   badge OperationalStatus {
      emphasis Complementary5 = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
   }
}

@Override
selector CompanySiteSelector for CompanySite {
   label = "${Contract} - ${Description}";
   static Contract;
   static Description;
}

@Override
selector LocationSelector for Location {
   label = "${LocationId} - ${Name}";
   static LocationId;
   static Name;
}

@Override
selector EquipmentCriticalitySelector for EquipmentCriticality {
   label = "${Criticality} - ${Description}";
   static Criticality;
   static Description;
}

@Override
selector ItemClassSelector for ItemClass {
   label = "${ItemClassId} - ${ItemClassDesc}";
   static ItemClassId;
   static ItemClassDesc;
}

@Override
selector EquipmentObjGroupSelector for EquipmentObjGroup {
   label = "${GroupId} - ${Description}";
   static GroupId;
   static Description;
}

@Override
selector EquipmentObjCategorySelector for EquipmentObjCategory {
   label = "${CategoryId} - ${Description}";
   static CategoryId;
   static Description;
}

@Override
selector ManufacturerInfoSelector for ManufacturerInfo {
   label = "${ManufacturerId} - ${Name}";
   static ManufacturerId;
   static Name;
}

@Override
selector EquipmentObjTypeSelector for EquipmentObjType {
   label = "${MchType} - ${Description}";
   static MchType;
   static Description;
}

@Override
selector EquipmentObjectMeasSelector for EquipmentObjectMeas {
   label = "${MchCode}";
   static MchCode;
   static Contract;
}

@Override
selector ReferenceEquipmentFunctionalObjectUivSelector for EquipmentFunctionalUiv {
   field Contract;
   field MchCode;
   field MchName;
   field MchLoc;
   field GroupId;
   field CategoryId;
}

---------------------------------- GROUPS -----------------------------------
@DynamicComponentDependency WO
group EquipObjWoGroup for ActiveSeparateEquip {
   label = "";

   field MchCode {
      //preview = MaintenanceObjectCard;
      size = Small;
   }
   field MchName {
      size = Large;
      editable = [ObjLevel != null];
   }
   field MchCodeContract {
      size = Small;

   }
   field ObjLevel {
      size = Small;
      visible = [ObjLevel != null];
   }
   badge OperationalStatus {
      size = Small;
      style = TextOnly;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   field PartNo {
      size = Small;
      editable = [ObjLevel != null];
   }
   field SerialNo {
      size = Small;
      editable = [ObjLevel != null];
   }
   field Type {
      size = Medium;
   }
   field MchType {
      size = Small;
   }
   field CategoryId {
      size = Small;
   }
   // Column 'OperationalStatusDb' (dfsOperationalStatusDb) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
}

@DynamicComponentDependency PCMSCI
group EquipObjServiceLinesGroup for PscContrProductScopeEquip {
   label = "";

   field MchCode {
      //preview = MaintenanceObjectCard;
      size = Small;
   }
   field MchName {
      size = Large;
      editable = [ObjLevel != null];
   }
   field MchContract {
      size = Small;

   }
   field ObjLevel {
      size = Small;
      visible = [ObjLevel != null];
   }
   badge OperationalStatus {
      size = Small;
      style = TextOnly;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   field PartNo {
      size = Small;
      editable = [ObjLevel != null];
   }
   field SerialNo {
      size = Small;
      editable = [ObjLevel != null];
   }
   field Type {
      size = Medium;
   }
   field MchType {
      size = Small;
   }
   field CategoryId {
      size = Small;
   }
   // Column 'OperationalStatusDb' (dfsOperationalStatusDb) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
}

@DynamicComponentDependency PM
group EquipObjPmActionGroup for PmActionEquip {
   label = "";

   field MchCode {
      //preview = MaintenanceObjectCard;
      size = Small;
   }
   field MchName {
      size = Large;
      editable = [ObjLevel != null];
   }
   field MchCodeContract {
      size = Small;

   }
   field ObjLevel {
      size = Small;
      visible = [ObjLevel != null];
   }
   badge OperationalStatus {
      size = Small;
      style = TextOnly;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   field PartNo {
      size = Small;
      editable = [ObjLevel != null];
   }
   field SerialNo {
      size = Small;
      editable = [ObjLevel != null];
   }
   field Type {
      size = Medium;
   }
   field MchType {
      size = Small;
   }
   field CategoryId {
      size = Small;
   }
   // Column 'OperationalStatusDb' (dfsOperationalStatusDb) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
}

group EquipObjStructureGroup for EquipmentObjectList {
   label = "";
   lov MchCodeRef with ReferenceMaintenanceObjectSelector {
      search = MchCode, MchName;
      preview = MaintenanceObjectCard;
      editable = [Etag = null];
      size = Small;
   }
   field MchName {
      size = Large;
      editable = [ObjLevel != null];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      editable = [Etag = null];
      size = Small;
      validate command {
         variable Resultrec {
            type = LogicalCodePartValues;
         }
         execute {
            call GetLogicalCodePartValues(Contract) into Resultrec;
            set FetchCostCenter = Resultrec.FetchCostCenter;
            set FetchCostCenterView = Resultrec.FetchCostCenterView;
            set HideCostCenter = Resultrec.HideCostCenter;
            set FetchObjectNo = Resultrec.FetchObjectNo;
            set FetchObjectNoView = Resultrec.FetchObjectNoView;
            set HideObjectNo = Resultrec.HideObjectNo;
            error("FetchCostCenter = ${FetchCostCenter} , HideCostCenter = ${HideCostCenter}");
            if[Contract != null] {
               call GetCompValue(Contract) into Company;
            }
         }
      }
   }
   field ObjLevelRef {
      size = Small;
      visible = [ObjLevel != null];
   }
   badge OperationalStatus {
      size = Small;
      style = TextOnly;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   field PartNoRef {
      size = Small;
      editable = [ObjLevel != null];
   }
   field SerialNo {
      size = Small;
      editable = [ObjLevel != null];
   }
   lov TypeRef with TypeDesignationSelector using GetTypeDesignationsOfEquip(MchType) {
      search = Type, Description;
      size = Medium;
      description = TypeRef.Description;
   }
   lov MchTypeRef with EquipmentObjTypeSelector {
      search = MchType, Description;
      size = Small;
      description = MchTypeRef.Description;
   }
   field CategoryIdRef {
      size = Small;
   }
   // Column 'OperationalStatusDb' (dfsOperationalStatusDb) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
}


group PurchInformationGroup for EquipmentObjectList clone PurchInfoGroup {

}
----------------------------------- LISTS -----------------------------------
list SummaryListPm for ObjectCountsPmEntity {
   label = "";
   card ObjUsedInPm;
}
list SummaryListWo for ObjectCountsWoEntity {
   label = "";
   card ObjUsedInWo;
}
----------------------------------- CARDS -----------------------------------
card ObjUsedInPm for ObjectCountsPmEntity {
   label = "${DisplayText}";
   markdowntext {
      text = "# ${ObjCount}";
   }
   command DetailsCommandPm;
   command DetailsCommandPmAll;
}
card ObjUsedInWo for ObjectCountsWoEntity {
   label = "${DisplayText}";
   markdowntext {
      text = "# ${ObjCount}";
   }
   command DetailsCommandWo;
   command DetailsCommandWoAll;
}

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

-------------------------------- SINGLETONS ---------------------------------

singleton EquipmentTwSettingsSingleton for EquipmentTwSettings {
   crudactions {
      new {
         enabled = [SessionUser = Owner];
      }
      edit {
         enabled = [SessionUser = Owner];
      }
      delete {
         enabled = [SessionUser = Owner];
      }
   }
}
------------------------------- SEARCHCONTEXT -------------------------------

//searchcontext EquipObjectNavigatorTreeFilter for TreeFilterStructure {
//   label = "Select Structure Type";
//   field StructureInTree {
//      showlabel = false;
//      size = Large;
//      visible = [false];
//   }
//   field MchCodeList {
//      visible = [false];
//   }
//   field MchCodeContractList {
//      visible = [false];
//   }
//}

searchcontext EquipObjectNavigatorPageFilter for NavPageFilterStructure {
   label = "";
   field TreeViewId {
      visible = [false];
   }
   field MchCode {
      visible = [false];
   }
   field Contract {
      visible = [false];
   }
   field ChildContract {
      visible = [false];
   }
   field LocationId {
      visible = [false];
   }
   field MchType {
      visible = [false];
   }
   field Criticality {
      visible = [false];
   }
   field ItemClassId {
      visible = [false];
   }
   field GroupId {
      visible = [false];
   }
   field CategoryId {
      visible = [false];
   }
   field ManufacturerId {
      visible = [false];
   }
   field StructureInTree {
      visible = [false];
   }
   field EquipmentObjectSeq {
      visible = [false];
   }
}

----------------------------------- TREES -----------------------------------
tree EquipObjectNavigatorTree using BoexpTwSettingsSet {
   label = "Explore Equipment Objects";

   navicontexts {
      context Function {
         label = "Function";
      }
      context Location {
         label = "Location";
      }
      context From {
         label = "From";
      }
      context To {
         label = "To";
      }
      context Process {
         label = "Process";
      }
      context Pipe {
         label = "Pipe System";
      }
      context Electrical {
         label = "Electrical";
      }
   }
   selector BoexpTwSettingsSelector;

   rootnode BoexpTwSettingsNode {
      label = "${TreeViewName}";
      navigate {
         page TreeViewPage {
            filter(TreeViewId, TreeViewId);
         }
      }
      iconset {
         icon "navigator-tree";
      }
      connections {
         node EquipmentObjectNode using GetEquipmentObjectFiltered(TreeViewId);
         node EquipmentObjectSiteGroupNode using GetSiteFiltered(TreeViewId);
         node EquipmentObjectLocationGroupNode using GetLocationFiltered(TreeViewId);
         node EquipmentObjectObjTypeGroupNode using GetObjTypeFiltered(TreeViewId);
         node EquipmentObjectCriticalityGroupNode using GetCriticalityFiltered(TreeViewId);
         node EquipmentObjectItemClassGroupNode using GetItemClassFiltered(TreeViewId);
         node EquipmentObjectGroupIdGroupNode using GetGroupIdFiltered(TreeViewId);
         node EquipmentObjectCategoryGroupNode using GetCategoryFiltered(TreeViewId);
         node EquipmentObjectManufacturerGroupNode using GetManufacturerFiltered(TreeViewId);

         node EquipmentObjectNodeL using GetEquipmentObjectFiltered(TreeViewId);
         node EquipmentObjectSiteGroupNodeL using GetSiteFiltered(TreeViewId);
         node EquipmentObjectLocationGroupNodeL using GetLocationFiltered(TreeViewId);
         node EquipmentObjectObjTypeGroupNodeL using GetObjTypeFiltered(TreeViewId);
         node EquipmentObjectCriticalityGroupNodeL using GetCriticalityFiltered(TreeViewId);
         node EquipmentObjectItemClassGroupNodeL using GetItemClassFiltered(TreeViewId);
         node EquipmentObjectGroupIdGroupNodeL using GetGroupIdFiltered(TreeViewId);
         node EquipmentObjectCategoryGroupNodeL using GetCategoryFiltered(TreeViewId);
         node EquipmentObjectManufacturerGroupNodeL using GetManufacturerFiltered(TreeViewId);

         node EquipmentObjectNodeR using GetEquipmentObjectFiltered(TreeViewId);
         node EquipmentObjectSiteGroupNodeR using GetSiteFiltered(TreeViewId);
         node EquipmentObjectLocationGroupNodeR using GetLocationFiltered(TreeViewId);
         node EquipmentObjectObjTypeGroupNodeR using GetObjTypeFiltered(TreeViewId);
         node EquipmentObjectCriticalityGroupNodeR using GetCriticalityFiltered(TreeViewId);
         node EquipmentObjectItemClassGroupNodeR using GetItemClassFiltered(TreeViewId);
         node EquipmentObjectGroupIdGroupNodeR using GetGroupIdFiltered(TreeViewId);
         node EquipmentObjectCategoryGroupNodeR using GetCategoryFiltered(TreeViewId);
         node EquipmentObjectManufacturerGroupNodeR using GetManufacturerFiltered(TreeViewId);

         node EquipmentObjectNodeT using GetEquipmentObjectFiltered(TreeViewId);
         node EquipmentObjectSiteGroupNodeT using GetSiteFiltered(TreeViewId);
         node EquipmentObjectLocationGroupNodeT using GetLocationFiltered(TreeViewId);
         node EquipmentObjectObjTypeGroupNodeT using GetObjTypeFiltered(TreeViewId);
         node EquipmentObjectCriticalityGroupNodeT using GetCriticalityFiltered(TreeViewId);
         node EquipmentObjectItemClassGroupNodeT using GetItemClassFiltered(TreeViewId);
         node EquipmentObjectGroupIdGroupNodeT using GetGroupIdFiltered(TreeViewId);
         node EquipmentObjectCategoryGroupNodeT using GetCategoryFiltered(TreeViewId);
         node EquipmentObjectManufacturerGroupNodeT using GetManufacturerFiltered(TreeViewId);

         node EquipmentObjectNodeP using GetEquipmentObjectFiltered(TreeViewId);
         node EquipmentObjectSiteGroupNodeP using GetSiteFiltered(TreeViewId);
         node EquipmentObjectLocationGroupNodeP using GetLocationFiltered(TreeViewId);
         node EquipmentObjectObjTypeGroupNodeP using GetObjTypeFiltered(TreeViewId);
         node EquipmentObjectCriticalityGroupNodeP using GetCriticalityFiltered(TreeViewId);
         node EquipmentObjectItemClassGroupNodeP using GetItemClassFiltered(TreeViewId);
         node EquipmentObjectGroupIdGroupNodeP using GetGroupIdFiltered(TreeViewId);
         node EquipmentObjectCategoryGroupNodeP using GetCategoryFiltered(TreeViewId);
         node EquipmentObjectManufacturerGroupNodeP using GetManufacturerFiltered(TreeViewId);

         node EquipmentObjectNodeS using GetEquipmentObjectFiltered(TreeViewId);
         node EquipmentObjectSiteGroupNodeS using GetSiteFiltered(TreeViewId);
         node EquipmentObjectLocationGroupNodeS using GetLocationFiltered(TreeViewId);
         node EquipmentObjectObjTypeGroupNodeS using GetObjTypeFiltered(TreeViewId);
         node EquipmentObjectCriticalityGroupNodeS using GetCriticalityFiltered(TreeViewId);
         node EquipmentObjectItemClassGroupNodeS using GetItemClassFiltered(TreeViewId);
         node EquipmentObjectGroupIdGroupNodeS using GetGroupIdFiltered(TreeViewId);
         node EquipmentObjectCategoryGroupNodeS using GetCategoryFiltered(TreeViewId);
         node EquipmentObjectManufacturerGroupNodeS using GetManufacturerFiltered(TreeViewId);

         node EquipmentObjectNodeE using GetEquipmentObjectFiltered(TreeViewId);
         node EquipmentObjectSiteGroupNodeE using GetSiteFiltered(TreeViewId);
         node EquipmentObjectLocationGroupNodeE using GetLocationFiltered(TreeViewId);
         node EquipmentObjectObjTypeGroupNodeE using GetObjTypeFiltered(TreeViewId);
         node EquipmentObjectCriticalityGroupNodeE using GetCriticalityFiltered(TreeViewId);
         node EquipmentObjectItemClassGroupNodeE using GetItemClassFiltered(TreeViewId);
         node EquipmentObjectGroupIdGroupNodeE using GetGroupIdFiltered(TreeViewId);
         node EquipmentObjectCategoryGroupNodeE using GetCategoryFiltered(TreeViewId);
         node EquipmentObjectManufacturerGroupNodeE using GetManufacturerFiltered(TreeViewId);

         node ChildEquObjWithOutLocationNode using GetFParentEquipObjWithoutLoc(TreeViewId, "T");
         node ChildEquObjWithOutObjTypeNode using GetFParentEquipObjWithoutObjtype(TreeViewId, "T");
         node ChildEquObjWithOutCriticalityNode using GetFParentEquipObjWithoutCriticality(TreeViewId, "T");
         node ChildEquObjWithOutItemClassNode using GetFParentEquipObjWithoutItemClass(TreeViewId, "T");
         node ChildEquObjWithOutGroupIdNode using GetFParentEquipObjWithoutGroupId(TreeViewId, "T");
         node ChildEquObjWithOutCategoryNode using GetFParentEquipObjWithoutCategory(TreeViewId, "T");
         node ChildEquObjWithOutManufacturerNode using GetFParentEquipObjWithoutManufacturer(TreeViewId, "T");
         node ChildEquipmentObjectNode using GetFParentEquipObjects(TreeViewId);

         node ChildEquObjWithOutLocationNodeL using GetLParentEquipObjWithoutLoc(TreeViewId, "T");
         node ChildEquObjWithOutObjTypeNodeL using GetLParentEquipObjWithoutObjtype(TreeViewId, "T");
         node ChildEquObjWithOutCriticalityNodeL using GetLParentEquipObjWithoutCriticality(TreeViewId, "T");
         node ChildEquObjWithOutItemClassNodeL using GetLParentEquipObjWithoutItemClass(TreeViewId, "T");
         node ChildEquObjWithOutGroupIdNodeL using GetLParentEquipObjWithoutGroupId(TreeViewId, "T");
         node ChildEquObjWithOutCategoryNodeL using GetLParentEquipObjWithoutCategory(TreeViewId, "T");
         node ChildEquObjWithOutManufacturerNodeL using GetLParentEquipObjWithoutManufacturer(TreeViewId, "T");
         node ChildEquipmentObjectNodeL using GetLParentEquipObjects(TreeViewId);

         node ChildEquObjWithOutLocationNodeR using GetRParentEquipObjWithoutLoc(TreeViewId, "T");
         node ChildEquObjWithOutObjTypeNodeR using GetRParentEquipObjWithoutObjtype(TreeViewId, "T");
         node ChildEquObjWithOutCriticalityNodeR using GetRParentEquipObjWithoutCriticality(TreeViewId, "T");
         node ChildEquObjWithOutItemClassNodeR using GetRParentEquipObjWithoutItemClass(TreeViewId, "T");
         node ChildEquObjWithOutGroupIdNodeR using GetRParentEquipObjWithoutGroupId(TreeViewId, "T");
         node ChildEquObjWithOutCategoryNodeR using GetRParentEquipObjWithoutCategory(TreeViewId, "T");
         node ChildEquObjWithOutManufacturerNodeR using GetRParentEquipObjWithoutManufacturer(TreeViewId, "T");
         node ChildEquipmentObjectNodeR using GetRParentEquipObjects(TreeViewId);

         node ChildEquObjWithOutLocationNodeT using GetTParentEquipObjWithoutLoc(TreeViewId, "T");
         node ChildEquObjWithOutObjTypeNodeT using GetTParentEquipObjWithoutObjtype(TreeViewId, "T");
         node ChildEquObjWithOutCriticalityNodeT using GetTParentEquipObjWithoutCriticality(TreeViewId, "T");
         node ChildEquObjWithOutItemClassNodeT using GetTParentEquipObjWithoutItemClass(TreeViewId, "T");
         node ChildEquObjWithOutGroupIdNodeT using GetTParentEquipObjWithoutGroupId(TreeViewId, "T");
         node ChildEquObjWithOutCategoryNodeT using GetTParentEquipObjWithoutCategory(TreeViewId, "T");
         node ChildEquObjWithOutManufacturerNodeT using GetTParentEquipObjWithoutManufacturer(TreeViewId, "T");
         node ChildEquipmentObjectNodeT using GetTParentEquipObjects(TreeViewId);

         node ChildEquObjWithOutLocationNodeP using GetPParentEquipObjWithoutLoc(TreeViewId, "T");
         node ChildEquObjWithOutObjTypeNodeP using GetPParentEquipObjWithoutObjtype(TreeViewId, "T");
         node ChildEquObjWithOutCriticalityNodeP using GetPParentEquipObjWithoutCriticality(TreeViewId, "T");
         node ChildEquObjWithOutItemClassNodeP using GetPParentEquipObjWithoutItemClass(TreeViewId, "T");
         node ChildEquObjWithOutGroupIdNodeP using GetPParentEquipObjWithoutGroupId(TreeViewId, "T");
         node ChildEquObjWithOutCategoryNodeP using GetPParentEquipObjWithoutCategory(TreeViewId, "T");
         node ChildEquObjWithOutManufacturerNodeP using GetPParentEquipObjWithoutManufacturer(TreeViewId, "T");
         node ChildEquipmentObjectNodeP using GetPParentEquipObjects(TreeViewId);

         node ChildEquObjWithOutLocationNodeS using GetSParentEquipObjWithoutLoc(TreeViewId, "T");
         node ChildEquObjWithOutObjTypeNodeS using GetSParentEquipObjWithoutObjtype(TreeViewId, "T");
         node ChildEquObjWithOutCriticalityNodeS using GetSParentEquipObjWithoutCriticality(TreeViewId, "T");
         node ChildEquObjWithOutItemClassNodeS using GetSParentEquipObjWithoutItemClass(TreeViewId, "T");
         node ChildEquObjWithOutGroupIdNodeS using GetSParentEquipObjWithoutGroupId(TreeViewId, "T");
         node ChildEquObjWithOutCategoryNodeS using GetSParentEquipObjWithoutCategory(TreeViewId, "T");
         node ChildEquObjWithOutManufacturerNodeS using GetSParentEquipObjWithoutManufacturer(TreeViewId, "T");
         node ChildEquipmentObjectNodeS using GetSParentEquipObjects(TreeViewId);

         node ChildEquObjWithOutLocationNodeE using GetEParentEquipObjWithoutLoc(TreeViewId, "T");
         node ChildEquObjWithOutObjTypeNodeE using GetEParentEquipObjWithoutObjtype(TreeViewId, "T");
         node ChildEquObjWithOutCriticalityNodeE using GetEParentEquipObjWithoutCriticality(TreeViewId, "T");
         node ChildEquObjWithOutItemClassNodeE using GetEParentEquipObjWithoutItemClass(TreeViewId, "T");
         node ChildEquObjWithOutGroupIdNodeE using GetEParentEquipObjWithoutGroupId(TreeViewId, "T");
         node ChildEquObjWithOutCategoryNodeE using GetEParentEquipObjWithoutCategory(TreeViewId, "T");
         node ChildEquObjWithOutManufacturerNodeE using GetEParentEquipObjWithoutManufacturer(TreeViewId, "T");
         node ChildEquipmentObjectNodeE using GetEParentEquipObjects(TreeViewId);

      }

   }

   node EquipmentObjectSiteGroupNode for CompanySite {
      label = "${Contract} - ${Description}";
      visible = [Function];
      navigate {
         page EquipmentObjectSiteListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);


            filter(Contract, Contract);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjUnderSite(root.TreeViewId, "F", Contract);

      }
   }
   node EquipmentObjectLocationGroupNode for Location {
      label = "${LocationId} - ${Name}";
      visible = [Function];
      navigate {
         page EquipmentObjectLocationListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(LocationId, EquipObjectNavigatorPageFilter.LocationId);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(LocationId, LocationId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjUnderLoc(root.TreeViewId, "F", LocationId);
      }
   }
   node EquipmentObjectObjTypeGroupNode for EquipmentObjType {
      label = "${MchType} - ${Description}";
      visible = [Function];
      navigate {
         page EquipmentObjectObjTypeListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchType, EquipObjectNavigatorPageFilter.MchType);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchType, MchType);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjForObjType(root.TreeViewId, "F", MchType);
      }
   }

   node EquipmentObjectCriticalityGroupNode for EquipmentCriticality {
      label = "${Criticality} - ${Description}";
      visible = [Function];
      navigate {
         page EquipmentObjectCriticalityListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Criticality, EquipObjectNavigatorPageFilter.Criticality);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(Criticality, Criticality);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjForCriticality(root.TreeViewId, "F", Criticality);
      }
   }

   node EquipmentObjectItemClassGroupNode for ItemClass {
      label = "${ItemClassId} - ${ItemClassDesc}";
      visible = [Function];
      navigate {
         page EquipmentObjectItemClassListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ItemClassId, EquipObjectNavigatorPageFilter.ItemClassId);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ItemClassId, ItemClassId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjForItemClass(root.TreeViewId, "F", ItemClassId);
      }
   }

   node EquipmentObjectGroupIdGroupNode for EquipmentObjGroup {
      label = "${GroupId} - ${Description}";
      visible = [Function];
      navigate {
         page EquipmentObjectGroupIdListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(GroupId, EquipObjectNavigatorPageFilter.GroupId);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(GroupId, GroupId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjForGroupId(root.TreeViewId, "F", GroupId);
      }
   }

   node EquipmentObjectCategoryGroupNode for EquipmentObjCategory {
      label = "${CategoryId} - ${Description}";
      visible = [Function];
      navigate {
         page EquipmentObjectCategoryListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(CategoryId, EquipObjectNavigatorPageFilter.CategoryId);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(CategoryId, CategoryId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjForCategory(root.TreeViewId, "F", CategoryId);
      }
   }

   node EquipmentObjectManufacturerGroupNode for ManufacturerInfo {
      label = "${ManufacturerId} - ${Name}";
      visible = [Function];
      navigate {
         page EquipmentObjectManufacturerListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ManufacturerId, EquipObjectNavigatorPageFilter.ManufacturerId);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ManufacturerId, ManufacturerId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjForManufacturer(root.TreeViewId, "F", ManufacturerId);
      }
   }

   node EquipmentObjectNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      orderby = MchCode;

      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         @DynamicComponentDependency WO
         node WorkOrderGroupNode using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNode using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNode using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNode using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node EquipmentObjectSiteGroupNode using GetUniqueSiteUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node EquipmentObjectLocationGroupNode using GetUniqueLocationUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node EquipmentObjectObjTypeGroupNode using GetUniqueObjTypeUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node EquipmentObjectCriticalityGroupNode using GetUniqueCriticalityUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node EquipmentObjectItemClassGroupNode using GetUniqueItemClassUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node EquipmentObjectGroupIdGroupNode using GetUniqueGroupIdUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node EquipmentObjectCategoryGroupNode using GetUniqueCategoryUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node EquipmentObjectManufacturerGroupNode using GetUniqueManufacturerUnderObject(root.TreeViewId, "F", EquipmentObjectSeq);
         node ChildEquipmentObjectNode using GetDefaultObjectsFiltered(root.TreeViewId, "F", EquipmentObjectSeq);

         node ChildEquObjWithOutLocationNode using GetFParentEquipObjWithoutLoc(root.TreeViewId, "C");
         node ChildEquObjWithOutObjTypeNode using GetFParentEquipObjWithoutObjtype(root.TreeViewId, "C");
         node ChildEquObjWithOutCriticalityNode using GetFParentEquipObjWithoutCriticality(root.TreeViewId, "C");
         node ChildEquObjWithOutItemClassNode using GetFParentEquipObjWithoutItemClass(root.TreeViewId, "C");
         node ChildEquObjWithOutGroupIdNode using GetFParentEquipObjWithoutGroupId(root.TreeViewId, "C");
         node ChildEquObjWithOutCategoryNode using GetFParentEquipObjWithoutCategory(root.TreeViewId, "C");
         node ChildEquObjWithOutManufacturerNode using GetFParentEquipObjWithoutManufacturer(root.TreeViewId, "C");

      }
   }

   --** L

   node EquipmentObjectSiteGroupNodeL for CompanySite {
      label = "${Contract} - ${Description}";
      visible = [Location];
      navigate {
         page EquipmentObjectSiteListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);


            filter(Contract, Contract);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipObjUnderSite(root.TreeViewId, "L", Contract);

      }
   }
   node EquipmentObjectLocationGroupNodeL for Location {
      label = "${LocationId} - ${Name}";
      visible = [Location];
      navigate {
         page EquipmentObjectLocationListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(LocationId, EquipObjectNavigatorPageFilter.LocationId);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(LocationId, LocationId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipObjUnderLoc(root.TreeViewId, "L", LocationId);
      }
   }
   node EquipmentObjectObjTypeGroupNodeL for EquipmentObjType {
      label = "${MchType} - ${Description}";
      visible = [Location];
      navigate {
         page EquipmentObjectObjTypeListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchType, EquipObjectNavigatorPageFilter.MchType);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchType, MchType);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipObjForObjType(root.TreeViewId, "L", MchType);
      }
   }
   node EquipmentObjectCriticalityGroupNodeL for EquipmentCriticality {
      label = "${Criticality} - ${Description}";
      visible = [Location];
      navigate {
         page EquipmentObjectCriticalityListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Criticality, EquipObjectNavigatorPageFilter.Criticality);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(Criticality, Criticality);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipObjForCriticality(root.TreeViewId, "L", Criticality);
      }
   }

   node EquipmentObjectItemClassGroupNodeL for ItemClass {
      label = "${ItemClassId} - ${ItemClassDesc}";
      visible = [Location];
      navigate {
         page EquipmentObjectItemClassListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ItemClassId, EquipObjectNavigatorPageFilter.ItemClassId);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ItemClassId, ItemClassId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipObjForItemClass(root.TreeViewId, "L", ItemClassId);
      }
   }

   node EquipmentObjectGroupIdGroupNodeL for EquipmentObjGroup {
      label = "${GroupId} - ${Description}";
      visible = [Location];
      navigate {
         page EquipmentObjectGroupIdListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(GroupId, EquipObjectNavigatorPageFilter.GroupId);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(GroupId, GroupId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipObjForGroupId(root.TreeViewId, "L", GroupId);
      }
   }

   node EquipmentObjectCategoryGroupNodeL for EquipmentObjCategory {
      label = "${CategoryId} - ${Description}";
      visible = [Location];
      navigate {
         page EquipmentObjectCategoryListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(CategoryId, EquipObjectNavigatorPageFilter.CategoryId);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(CategoryId, CategoryId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipObjForCategory(root.TreeViewId, "L", CategoryId);
      }
   }

   node EquipmentObjectManufacturerGroupNodeL for ManufacturerInfo {
      label = "${ManufacturerId} - ${Name}";
      visible = [Location];
      navigate {
         page EquipmentObjectManufacturerListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ManufacturerId, EquipObjectNavigatorPageFilter.ManufacturerId);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ManufacturerId, ManufacturerId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipObjForManufacturer(root.TreeViewId, "L", ManufacturerId);
      }
   }

   node EquipmentObjectNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         @DynamicComponentDependency WO
         node WorkOrderGroupNodeL using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeL using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeL using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeL using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node EquipmentObjectSiteGroupNodeL using GetUniqueSiteUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node EquipmentObjectLocationGroupNodeL using GetUniqueLocationUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node EquipmentObjectObjTypeGroupNodeL using GetUniqueObjTypeUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node EquipmentObjectCriticalityGroupNodeL using GetUniqueCriticalityUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node EquipmentObjectItemClassGroupNodeL using GetUniqueItemClassUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node EquipmentObjectGroupIdGroupNodeL using GetUniqueGroupIdUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node EquipmentObjectCategoryGroupNodeL using GetUniqueCategoryUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node EquipmentObjectManufacturerGroupNodeL using GetUniqueManufacturerUnderObject(root.TreeViewId, "L", EquipmentObjectSeq);
         node ChildEquipmentObjectNodeL using GetDefaultObjectsFiltered(root.TreeViewId, "L", EquipmentObjectSeq);

         node ChildEquObjWithOutLocationNodeL using GetLParentEquipObjWithoutLoc(root.TreeViewId, "C");
         node ChildEquObjWithOutObjTypeNodeL using GetLParentEquipObjWithoutObjtype(root.TreeViewId, "C");
         node ChildEquObjWithOutCriticalityNodeL using GetLParentEquipObjWithoutCriticality(root.TreeViewId, "C");
         node ChildEquObjWithOutItemClassNodeL using GetLParentEquipObjWithoutItemClass(root.TreeViewId, "C");
         node ChildEquObjWithOutGroupIdNodeL using GetLParentEquipObjWithoutGroupId(root.TreeViewId, "C");
         node ChildEquObjWithOutCategoryNodeL using GetLParentEquipObjWithoutCategory(root.TreeViewId, "C");
         node ChildEquObjWithOutManufacturerNodeL using GetLParentEquipObjWithoutManufacturer(root.TreeViewId, "C");
      }
   }

   -- ** R

   node EquipmentObjectSiteGroupNodeR for CompanySite {
      label = "${Contract} - ${Description}";
      visible = [From];
      navigate {
         page EquipmentObjectSiteListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);


            filter(Contract, Contract);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjUnderSite(root.TreeViewId, "R", Contract);
      }
   }
   node EquipmentObjectLocationGroupNodeR for Location {
      label = "${LocationId} - ${Name}";
      visible = [From];
      navigate {
         page EquipmentObjectLocationListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(LocationId, EquipObjectNavigatorPageFilter.LocationId);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(LocationId, LocationId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjUnderLoc(root.TreeViewId, "R", LocationId);
      }
   }
   node EquipmentObjectObjTypeGroupNodeR for EquipmentObjType {
      label = "${MchType} - ${Description}";
      visible = [From];
      navigate {
         page EquipmentObjectObjTypeListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchType, EquipObjectNavigatorPageFilter.MchType);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchType, MchType);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjForObjType(root.TreeViewId, "R", MchType);
      }
   }
   node EquipmentObjectCriticalityGroupNodeR for EquipmentCriticality {
      label = "${Criticality} - ${Description}";
      visible = [From];
      navigate {
         page EquipmentObjectCriticalityListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Criticality, EquipObjectNavigatorPageFilter.Criticality);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(Criticality, Criticality);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjForCriticality(root.TreeViewId, "R", Criticality);
      }
   }

   node EquipmentObjectItemClassGroupNodeR for ItemClass {
      label = "${ItemClassId} - ${ItemClassDesc}";
      visible = [From];
      navigate {
         page EquipmentObjectItemClassListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ItemClassId, EquipObjectNavigatorPageFilter.ItemClassId);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ItemClassId, ItemClassId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjForItemClass(root.TreeViewId, "R", ItemClassId);
      }
   }

   node EquipmentObjectGroupIdGroupNodeR for EquipmentObjGroup {
      label = "${GroupId} - ${Description}";
      visible = [From];
      navigate {
         page EquipmentObjectGroupIdListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(GroupId, EquipObjectNavigatorPageFilter.GroupId);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(GroupId, GroupId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjForGroupId(root.TreeViewId, "R", GroupId);
      }
   }

   node EquipmentObjectCategoryGroupNodeR for EquipmentObjCategory {
      label = "${CategoryId} - ${Description}";
      visible = [From];
      navigate {
         page EquipmentObjectCategoryListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(CategoryId, EquipObjectNavigatorPageFilter.CategoryId);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(CategoryId, CategoryId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjForCategory(root.TreeViewId, "R", CategoryId);
      }
   }

   node EquipmentObjectManufacturerGroupNodeR for ManufacturerInfo {
      label = "${ManufacturerId} - ${Name}";
      visible = [From];
      navigate {
         page EquipmentObjectManufacturerListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ManufacturerId, EquipObjectNavigatorPageFilter.ManufacturerId);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ManufacturerId, ManufacturerId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipObjForManufacturer(root.TreeViewId, "R", ManufacturerId);
      }
   }

   node EquipmentObjectNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         @DynamicComponentDependency WO
         node WorkOrderGroupNodeR using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeR using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeR using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeR using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node EquipmentObjectSiteGroupNodeR using GetUniqueSiteUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node EquipmentObjectLocationGroupNodeR using GetUniqueLocationUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node EquipmentObjectObjTypeGroupNodeR using GetUniqueObjTypeUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node EquipmentObjectCriticalityGroupNodeR using GetUniqueCriticalityUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node EquipmentObjectItemClassGroupNodeR using GetUniqueItemClassUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node EquipmentObjectGroupIdGroupNodeR using GetUniqueGroupIdUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node EquipmentObjectCategoryGroupNodeR using GetUniqueCategoryUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node EquipmentObjectManufacturerGroupNodeR using GetUniqueManufacturerUnderObject(root.TreeViewId, "R", EquipmentObjectSeq);
         node ChildEquipmentObjectNodeR using GetDefaultObjectsFiltered(root.TreeViewId, "R", EquipmentObjectSeq);

         node ChildEquObjWithOutLocationNodeR using GetRParentEquipObjWithoutLoc(root.TreeViewId, "C");
         node ChildEquObjWithOutObjTypeNodeR using GetRParentEquipObjWithoutObjtype(root.TreeViewId, "C");
         node ChildEquObjWithOutCriticalityNodeR using GetRParentEquipObjWithoutCriticality(root.TreeViewId, "C");
         node ChildEquObjWithOutItemClassNodeR using GetRParentEquipObjWithoutItemClass(root.TreeViewId, "C");
         node ChildEquObjWithOutGroupIdNodeR using GetRParentEquipObjWithoutGroupId(root.TreeViewId, "C");
         node ChildEquObjWithOutCategoryNodeR using GetRParentEquipObjWithoutCategory(root.TreeViewId, "C");
         node ChildEquObjWithOutManufacturerNodeR using GetRParentEquipObjWithoutManufacturer(root.TreeViewId, "C");
      }
   }

      -- ** T

   node EquipmentObjectSiteGroupNodeT for CompanySite {
      label = "${Contract} - ${Description}";
      visible = [To];
      navigate {
         page EquipmentObjectSiteListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);


            filter(Contract, Contract);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjUnderSite(root.TreeViewId, "T", Contract);

      }
   }
   node EquipmentObjectLocationGroupNodeT for Location {
      label = "${LocationId} - ${Name}";
      visible = [To];
      navigate {
         page EquipmentObjectLocationListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(LocationId, EquipObjectNavigatorPageFilter.LocationId);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(LocationId, LocationId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjUnderLoc(root.TreeViewId, "T", LocationId);
      }
   }
   node EquipmentObjectObjTypeGroupNodeT for EquipmentObjType {
      label = "${MchType} - ${Description}";
      visible = [To];
      navigate {
         page EquipmentObjectObjTypeListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchType, EquipObjectNavigatorPageFilter.MchType);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchType, MchType);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjForObjType(root.TreeViewId, "T", MchType);
      }
   }
   node EquipmentObjectCriticalityGroupNodeT for EquipmentCriticality {
      label = "${Criticality} - ${Description}";
      visible = [To];
      navigate {
         page EquipmentObjectCriticalityListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Criticality, EquipObjectNavigatorPageFilter.Criticality);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(Criticality, Criticality);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjForCriticality(root.TreeViewId, "T", Criticality);
      }
   }

   node EquipmentObjectItemClassGroupNodeT for ItemClass {
      label = "${ItemClassId} - ${ItemClassDesc}";
      visible = [To];
      navigate {
         page EquipmentObjectItemClassListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ItemClassId, EquipObjectNavigatorPageFilter.ItemClassId);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ItemClassId, ItemClassId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjForItemClass(root.TreeViewId, "T", ItemClassId);
      }
   }

   node EquipmentObjectGroupIdGroupNodeT for EquipmentObjGroup {
      label = "${GroupId} - ${Description}";
      visible = [To];
      navigate {
         page EquipmentObjectGroupIdListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(GroupId, EquipObjectNavigatorPageFilter.GroupId);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(GroupId, GroupId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjForGroupId(root.TreeViewId, "T", GroupId);
      }
   }

   node EquipmentObjectCategoryGroupNodeT for EquipmentObjCategory {
      label = "${CategoryId} - ${Description}";
      visible = [To];
      navigate {
         page EquipmentObjectCategoryListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(CategoryId, EquipObjectNavigatorPageFilter.CategoryId);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(CategoryId, CategoryId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjForCategory(root.TreeViewId, "T", CategoryId);
      }
   }

   node EquipmentObjectManufacturerGroupNodeT for ManufacturerInfo {
      label = "${ManufacturerId} - ${Name}";
      visible = [To];
      navigate {
         page EquipmentObjectManufacturerListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ManufacturerId, EquipObjectNavigatorPageFilter.ManufacturerId);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ManufacturerId, ManufacturerId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipObjForManufacturer(root.TreeViewId, "T", ManufacturerId);
      }
   }

   node EquipmentObjectNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         @DynamicComponentDependency WO
         node WorkOrderGroupNodeT using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeT using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeT using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeT using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node EquipmentObjectSiteGroupNodeT using GetUniqueSiteUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node EquipmentObjectLocationGroupNodeT using GetUniqueLocationUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node EquipmentObjectObjTypeGroupNodeT using GetUniqueObjTypeUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node EquipmentObjectCriticalityGroupNodeT using GetUniqueCriticalityUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node EquipmentObjectItemClassGroupNodeT using GetUniqueItemClassUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node EquipmentObjectGroupIdGroupNodeT using GetUniqueGroupIdUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node EquipmentObjectCategoryGroupNodeT using GetUniqueCategoryUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node EquipmentObjectManufacturerGroupNodeT using GetUniqueManufacturerUnderObject(root.TreeViewId, "T", EquipmentObjectSeq);
         node ChildEquipmentObjectNodeT using GetDefaultObjectsFiltered(root.TreeViewId, "T", EquipmentObjectSeq);


         node ChildEquObjWithOutLocationNodeT using GetTParentEquipObjWithoutLoc(root.TreeViewId, "C");
         node ChildEquObjWithOutObjTypeNodeT using GetTParentEquipObjWithoutObjtype(root.TreeViewId, "C");
         node ChildEquObjWithOutCriticalityNodeT using GetTParentEquipObjWithoutCriticality(root.TreeViewId, "C");
         node ChildEquObjWithOutItemClassNodeT using GetTParentEquipObjWithoutItemClass(root.TreeViewId, "C");
         node ChildEquObjWithOutGroupIdNodeT using GetTParentEquipObjWithoutGroupId(root.TreeViewId, "C");
         node ChildEquObjWithOutCategoryNodeT using GetTParentEquipObjWithoutCategory(root.TreeViewId, "C");
         node ChildEquObjWithOutManufacturerNodeT using GetTParentEquipObjWithoutManufacturer(root.TreeViewId, "C");
      }
   }

      -- ** P

   node EquipmentObjectSiteGroupNodeP for CompanySite {
      label = "${Contract} - ${Description}";
      visible = [Process];
      navigate {
         page EquipmentObjectSiteListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);


            filter(Contract, Contract);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjUnderSite(root.TreeViewId, "P", Contract);

      }
   }
   node EquipmentObjectLocationGroupNodeP for Location {
      label = "${LocationId} - ${Name}";
      visible = [Process];
      navigate {
         page EquipmentObjectLocationListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(LocationId, EquipObjectNavigatorPageFilter.LocationId);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(LocationId, LocationId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjUnderLoc(root.TreeViewId, "P", LocationId);
      }
   }
   node EquipmentObjectObjTypeGroupNodeP for EquipmentObjType {
      label = "${MchType} - ${Description}";
      visible = [Process];
      navigate {
         page EquipmentObjectObjTypeListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchType, EquipObjectNavigatorPageFilter.MchType);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchType, MchType);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjForObjType(root.TreeViewId, "P", MchType);
      }
   }
   node EquipmentObjectCriticalityGroupNodeP for EquipmentCriticality {
      label = "${Criticality} - ${Description}";
      visible = [Process];
      navigate {
         page EquipmentObjectCriticalityListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Criticality, EquipObjectNavigatorPageFilter.Criticality);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(Criticality, Criticality);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjForCriticality(root.TreeViewId, "P", Criticality);
      }
   }

   node EquipmentObjectItemClassGroupNodeP for ItemClass {
      label = "${ItemClassId} - ${ItemClassDesc}";
      visible = [Process];
      navigate {
         page EquipmentObjectItemClassListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ItemClassId, EquipObjectNavigatorPageFilter.ItemClassId);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ItemClassId, ItemClassId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjForItemClass(root.TreeViewId, "P", ItemClassId);
      }
   }

   node EquipmentObjectGroupIdGroupNodeP for EquipmentObjGroup {
      label = "${GroupId} - ${Description}";
      visible = [Process];
      navigate {
         page EquipmentObjectGroupIdListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(GroupId, EquipObjectNavigatorPageFilter.GroupId);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(GroupId, GroupId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjForGroupId(root.TreeViewId, "P", GroupId);
      }
   }

   node EquipmentObjectCategoryGroupNodeP for EquipmentObjCategory {
      label = "${CategoryId} - ${Description}";
      visible = [Process];
      navigate {
         page EquipmentObjectCategoryListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(CategoryId, EquipObjectNavigatorPageFilter.CategoryId);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(CategoryId, CategoryId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjForCategory(root.TreeViewId, "P", CategoryId);
      }
   }

   node EquipmentObjectManufacturerGroupNodeP for ManufacturerInfo {
      label = "${ManufacturerId} - ${Name}";
      visible = [Process];
      navigate {
         page EquipmentObjectManufacturerListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ManufacturerId, EquipObjectNavigatorPageFilter.ManufacturerId);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ManufacturerId, ManufacturerId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipObjForManufacturer(root.TreeViewId, "P", ManufacturerId);
      }
   }


   node EquipmentObjectNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageP {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         @DynamicComponentDependency WO
         node WorkOrderGroupNodeP using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeP using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeP using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeP using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node EquipmentObjectSiteGroupNodeP using GetUniqueSiteUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node EquipmentObjectLocationGroupNodeP using GetUniqueLocationUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node EquipmentObjectObjTypeGroupNodeP using GetUniqueObjTypeUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node EquipmentObjectCriticalityGroupNodeP using GetUniqueCriticalityUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node EquipmentObjectItemClassGroupNodeP using GetUniqueItemClassUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node EquipmentObjectGroupIdGroupNodeP using GetUniqueGroupIdUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node EquipmentObjectCategoryGroupNodeP using GetUniqueCategoryUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node EquipmentObjectManufacturerGroupNodeP using GetUniqueManufacturerUnderObject(root.TreeViewId, "P", EquipmentObjectSeq);
         node ChildEquipmentObjectNodeP using GetDefaultObjectsFiltered(root.TreeViewId, "P", EquipmentObjectSeq);

         node ChildEquObjWithOutLocationNodeP using GetPParentEquipObjWithoutLoc(root.TreeViewId, "C");
         node ChildEquObjWithOutObjTypeNodeP using GetPParentEquipObjWithoutObjtype(root.TreeViewId, "C");
         node ChildEquObjWithOutCriticalityNodeP using GetPParentEquipObjWithoutCriticality(root.TreeViewId, "C");
         node ChildEquObjWithOutItemClassNodeP using GetPParentEquipObjWithoutItemClass(root.TreeViewId, "C");
         node ChildEquObjWithOutGroupIdNodeP using GetPParentEquipObjWithoutGroupId(root.TreeViewId, "C");
         node ChildEquObjWithOutCategoryNodeP using GetPParentEquipObjWithoutCategory(root.TreeViewId, "C");
         node ChildEquObjWithOutManufacturerNodeP using GetPParentEquipObjWithoutManufacturer(root.TreeViewId, "C");
      }
   }

      -- ** S

   node EquipmentObjectSiteGroupNodeS for CompanySite {
      label = "${Contract} - ${Description}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectSiteListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);


            filter(Contract, Contract);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjUnderSite(root.TreeViewId, "S", Contract);

      }
   }
   node EquipmentObjectLocationGroupNodeS for Location {
      label = "${LocationId} - ${Name}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectLocationListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(LocationId, EquipObjectNavigatorPageFilter.LocationId);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(LocationId, LocationId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjUnderLoc(root.TreeViewId, "S", LocationId);
      }
   }
   node EquipmentObjectObjTypeGroupNodeS for EquipmentObjType {
      label = "${MchType} - ${Description}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectObjTypeListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchType, EquipObjectNavigatorPageFilter.MchType);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchType, MchType);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjForObjType(root.TreeViewId, "S", MchType);
      }
   }
   node EquipmentObjectCriticalityGroupNodeS for EquipmentCriticality {
      label = "${Criticality} - ${Description}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectCriticalityListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Criticality, EquipObjectNavigatorPageFilter.Criticality);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(Criticality, Criticality);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjForCriticality(root.TreeViewId, "S", Criticality);
      }
   }

   node EquipmentObjectItemClassGroupNodeS for ItemClass {
      label = "${ItemClassId} - ${ItemClassDesc}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectItemClassListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ItemClassId, EquipObjectNavigatorPageFilter.ItemClassId);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ItemClassId, ItemClassId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjForItemClass(root.TreeViewId, "S", ItemClassId);
      }
   }

   node EquipmentObjectGroupIdGroupNodeS for EquipmentObjGroup {
      label = "${GroupId} - ${Description}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectGroupIdListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(GroupId, EquipObjectNavigatorPageFilter.GroupId);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(GroupId, GroupId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjForGroupId(root.TreeViewId, "S", GroupId);
      }
   }

   node EquipmentObjectCategoryGroupNodeS for EquipmentObjCategory {
      label = "${CategoryId} - ${Description}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectCategoryListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(CategoryId, EquipObjectNavigatorPageFilter.CategoryId);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(CategoryId, CategoryId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjForCategory(root.TreeViewId, "S", CategoryId);
      }
   }

   node EquipmentObjectManufacturerGroupNodeS for ManufacturerInfo {
      label = "${ManufacturerId} - ${Name}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectManufacturerListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ManufacturerId, EquipObjectNavigatorPageFilter.ManufacturerId);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ManufacturerId, ManufacturerId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipObjForManufacturer(root.TreeViewId, "S", ManufacturerId);
      }
   }


   node EquipmentObjectNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageS {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         @DynamicComponentDependency WO
         node WorkOrderGroupNodeS using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeS using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeS using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeS using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node EquipmentObjectSiteGroupNodeS using GetUniqueSiteUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node EquipmentObjectLocationGroupNodeS using GetUniqueLocationUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node EquipmentObjectObjTypeGroupNodeS using GetUniqueObjTypeUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node EquipmentObjectCriticalityGroupNodeS using GetUniqueCriticalityUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node EquipmentObjectItemClassGroupNodeS using GetUniqueItemClassUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node EquipmentObjectGroupIdGroupNodeS using GetUniqueGroupIdUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node EquipmentObjectCategoryGroupNodeS using GetUniqueCategoryUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node EquipmentObjectManufacturerGroupNodeS using GetUniqueManufacturerUnderObject(root.TreeViewId, "S", EquipmentObjectSeq);
         node ChildEquipmentObjectNodeS using GetDefaultObjectsFiltered(root.TreeViewId, "S", EquipmentObjectSeq);

         node ChildEquObjWithOutLocationNodeS using GetSParentEquipObjWithoutLoc(root.TreeViewId, "C");
         node ChildEquObjWithOutObjTypeNodeS using GetSParentEquipObjWithoutObjtype(root.TreeViewId, "C");
         node ChildEquObjWithOutCriticalityNodeS using GetSParentEquipObjWithoutCriticality(root.TreeViewId, "C");
         node ChildEquObjWithOutItemClassNodeS using GetSParentEquipObjWithoutItemClass(root.TreeViewId, "C");
         node ChildEquObjWithOutGroupIdNodeS using GetSParentEquipObjWithoutGroupId(root.TreeViewId, "C");
         node ChildEquObjWithOutCategoryNodeS using GetSParentEquipObjWithoutCategory(root.TreeViewId, "C");
         node ChildEquObjWithOutManufacturerNodeS using GetSParentEquipObjWithoutManufacturer(root.TreeViewId, "C");
      }
   }

      -- ** E

   node EquipmentObjectSiteGroupNodeE for CompanySite {
      label = "${Contract} - ${Description}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectSiteListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);


            filter(Contract, Contract);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjUnderSite(root.TreeViewId, "E", Contract);

      }
   }
   node EquipmentObjectLocationGroupNodeE for Location {
      label = "${LocationId} - ${Name}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectLocationListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(LocationId, EquipObjectNavigatorPageFilter.LocationId);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(LocationId, LocationId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjUnderLoc(root.TreeViewId, "E", LocationId);
      }
   }
   node EquipmentObjectObjTypeGroupNodeE for EquipmentObjType {
      label = "${MchType} - ${Description}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectObjTypeListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchType, EquipObjectNavigatorPageFilter.MchType);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchType, MchType);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjForObjType(root.TreeViewId, "E", MchType);
      }
   }
   node EquipmentObjectCriticalityGroupNodeE for EquipmentCriticality {
      label = "${Criticality} - ${Description}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectCriticalityListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(Criticality, EquipObjectNavigatorPageFilter.Criticality);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(Criticality, Criticality);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjForCriticality(root.TreeViewId, "E", Criticality);
      }
   }

   node EquipmentObjectItemClassGroupNodeE for ItemClass {
      label = "${ItemClassId} - ${ItemClassDesc}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectItemClassListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ItemClassId, EquipObjectNavigatorPageFilter.ItemClassId);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ItemClassId, ItemClassId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjForItemClass(root.TreeViewId, "E", ItemClassId);
      }
   }

   node EquipmentObjectGroupIdGroupNodeE for EquipmentObjGroup {
      label = "${GroupId} - ${Description}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectGroupIdListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(GroupId, EquipObjectNavigatorPageFilter.GroupId);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(GroupId, GroupId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjForGroupId(root.TreeViewId, "E", GroupId);
      }
   }

   node EquipmentObjectCategoryGroupNodeE for EquipmentObjCategory {
      label = "${CategoryId} - ${Description}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectCategoryListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(CategoryId, EquipObjectNavigatorPageFilter.CategoryId);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(CategoryId, CategoryId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjForCategory(root.TreeViewId, "E", CategoryId);
      }
   }

   node EquipmentObjectManufacturerGroupNodeE for ManufacturerInfo {
      label = "${ManufacturerId} - ${Name}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectManufacturerListPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(ManufacturerId, EquipObjectNavigatorPageFilter.ManufacturerId);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(ManufacturerId, ManufacturerId);
         }
      }
      iconset {
         icon "grid-view-alt";
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipObjForManufacturer(root.TreeViewId, "E", ManufacturerId);
      }
   }
   node EquipmentObjectNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageE {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         @DynamicComponentDependency WO
         node WorkOrderGroupNodeE using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeE using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeE using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeE using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node EquipmentObjectSiteGroupNodeE using GetUniqueSiteUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node EquipmentObjectLocationGroupNodeE using GetUniqueLocationUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node EquipmentObjectObjTypeGroupNodeE using GetUniqueObjTypeUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node EquipmentObjectCriticalityGroupNodeE using GetUniqueCriticalityUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node EquipmentObjectItemClassGroupNodeE using GetUniqueItemClassUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node EquipmentObjectGroupIdGroupNodeE using GetUniqueGroupIdUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node EquipmentObjectCategoryGroupNodeE using GetUniqueCategoryUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node EquipmentObjectManufacturerGroupNodeE using GetUniqueManufacturerUnderObject(root.TreeViewId, "E", EquipmentObjectSeq);
         node ChildEquipmentObjectNodeE using GetDefaultObjectsFiltered(root.TreeViewId, "E", EquipmentObjectSeq);

         node ChildEquObjWithOutLocationNodeE using GetEParentEquipObjWithoutLoc(root.TreeViewId, "C");
         node ChildEquObjWithOutObjTypeNodeE using GetEParentEquipObjWithoutObjtype(root.TreeViewId, "C");
         node ChildEquObjWithOutCriticalityNodeE using GetEParentEquipObjWithoutCriticality(root.TreeViewId, "C");
         node ChildEquObjWithOutItemClassNodeE using GetEParentEquipObjWithoutItemClass(root.TreeViewId, "C");
         node ChildEquObjWithOutGroupIdNodeE using GetEParentEquipObjWithoutGroupId(root.TreeViewId, "C");
         node ChildEquObjWithOutCategoryNodeE using GetEParentEquipObjWithoutCategory(root.TreeViewId, "C");
         node ChildEquObjWithOutManufacturerNodeE using GetEParentEquipObjWithoutManufacturer(root.TreeViewId, "C");
      }
   }

   node ChildEquipmentObjectNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {

         @DynamicComponentDependency WO
         node WorkOrderGroupNode using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNode using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNode using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNode using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }

   node ChildEquipmentObjectNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {

         @DynamicComponentDependency WO
         node WorkOrderGroupNodeL using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeL using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeL using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeL using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node ChildEquipmentObjectNodeL using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }

   node ChildEquipmentObjectNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {

         @DynamicComponentDependency WO
         node WorkOrderGroupNodeR using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeR using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeR using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeR using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node ChildEquipmentObjectNodeR using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }

   node ChildEquipmentObjectNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {

         @DynamicComponentDependency WO
         node WorkOrderGroupNodeT using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeT using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeT using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeT using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node ChildEquipmentObjectNodeT using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }

   node ChildEquipmentObjectNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageP {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {

         @DynamicComponentDependency WO
         node WorkOrderGroupNodeP using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeP using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeP using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeP using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node ChildEquipmentObjectNodeP using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }

   node ChildEquipmentObjectNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageS {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {

         @DynamicComponentDependency WO
         node WorkOrderGroupNodeS using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeS using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeS using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeS using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node ChildEquipmentObjectNodeS using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }

   node ChildEquipmentObjectNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageE {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {

         @DynamicComponentDependency WO
         node WorkOrderGroupNodeE using GetWorkOrderInfoFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PM
         node PmInfoGroupNodeE using GetPmInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         @DynamicComponentDependency PCMSCI
         node ServiceInfoGroupNodeE using GetServiceInfoGroupFiltered(root.TreeViewId, EquipmentObjectSeq);
         node ConnectedObjectGroupNodeE using GetConnectedObjectGroupFiltered(root.TreeViewId, EquipmentObjectSeq);

         node ChildEquipmentObjectNodeE using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutLocationNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutObjTypeNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCriticalityNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutItemClassNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutGroupIdNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCategoryNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutManufacturerNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Function];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "F", EquipmentObjectSeq);
      }
   }
   --
   node ChildEquObjWithOutLocationNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutObjTypeNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeL using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCriticalityNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutItemClassNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutGroupIdNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCategoryNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutManufacturerNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Location];
      navigate {
         page EquipmentObjectPageL {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "L", EquipmentObjectSeq);
      }
   }


   --
   node ChildEquObjWithOutLocationNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutObjTypeNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeR using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCriticalityNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutItemClassNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutGroupIdNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCategoryNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutManufacturerNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [From];
      navigate {
         page EquipmentObjectPageR {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "R", EquipmentObjectSeq);
      }
   }


   --
   node ChildEquObjWithOutLocationNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutObjTypeNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeT using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCriticalityNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutItemClassNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutGroupIdNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCategoryNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutManufacturerNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [To];
      navigate {
         page EquipmentObjectPageT {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "T", EquipmentObjectSeq);
      }
   }


   --
   node ChildEquObjWithOutLocationNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      navigate {
         page EquipmentObjectPageP {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutObjTypeNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      navigate {
         page EquipmentObjectPageP {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeP using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCriticalityNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      navigate {
         page EquipmentObjectPageP {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutItemClassNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutGroupIdNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      navigate {
         page EquipmentObjectPageP {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCategoryNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutManufacturerNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Process];
      navigate {
         page EquipmentObjectPageP {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "P", EquipmentObjectSeq);
      }
   }


   --
   node ChildEquObjWithOutLocationNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectPageS {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutObjTypeNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectPageS {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeS using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCriticalityNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectPageS {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutItemClassNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutGroupIdNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectPageS {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCategoryNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutManufacturerNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Pipe];
      navigate {
         page EquipmentObjectPageS {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "S", EquipmentObjectSeq);
      }
   }
   --
   node ChildEquObjWithOutLocationNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectPageE {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutObjTypeNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectPageE {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeE using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCriticalityNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectPageE {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutItemClassNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutGroupIdNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectPageE {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutCategoryNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectPageF {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   node ChildEquObjWithOutManufacturerNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [Electrical];
      navigate {
         page EquipmentObjectPageE {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetChildEquipmentObjectFiltered(root.TreeViewId, "E", EquipmentObjectSeq);
      }
   }

   @DynamicComponentDependency WO
   node WorkOrderGroupNode for ActiveSeparateEquip {
      label = "Work Tasks";
      visible = [Function];
      navigate {
         page WorkOrderWorkTasksPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency WO
   node WorkOrderGroupNodeL for ActiveSeparateEquip {
      label = "Work Tasks";
      visible = [Location];
      navigate {
         page WorkOrderWorkTasksPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency WO
   node WorkOrderGroupNodeR for ActiveSeparateEquip {
      label = "Work Tasks";
      visible = [From];
      navigate {
         page WorkOrderWorkTasksPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency WO
   node WorkOrderGroupNodeT for ActiveSeparateEquip {
      label = "Work Tasks";
      visible = [To];
      navigate {
         page WorkOrderWorkTasksPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency WO
   node WorkOrderGroupNodeP for ActiveSeparateEquip {
      label = "Work Tasks";
      visible = [Process];
      navigate {
         page WorkOrderWorkTasksPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency WO
   node WorkOrderGroupNodeS for ActiveSeparateEquip {
      label = "Work Tasks";
      visible = [Pipe];
      navigate {
         page WorkOrderWorkTasksPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency WO
   node WorkOrderGroupNodeE for ActiveSeparateEquip {
      label = "Work Tasks";
      visible = [Electrical];
      navigate {
         page WorkOrderWorkTasksPage {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PM
   node PmInfoGroupNode for PmAction {
      label = "PM Actions/Plans";
      visible = [Function];
      navigate {

         page PmActionsEquip {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PCMSCI
   node ServiceInfoGroupNode for PscContrProductScope {
      label = "Service Contracts";
      visible = [Function];
      navigate {
         page ServiceLines {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchContract, MchContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   node ConnectedObjectGroupNode for EquipmentObjectList {
      label = "Connected Objects";
      visible = [Function];
      navigate {
         page ConnectedObjects.Form {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   --

   @DynamicComponentDependency PM
   node PmInfoGroupNodeL for PmAction {
      label = "PM Actions/Plans";
      visible = [Location];
      navigate {

         page PmActionsEquip {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PCMSCI
   node ServiceInfoGroupNodeL for PscContrProductScope {
      label = "Service Contracts";
      visible = [Location];
      navigate {
         page ServiceLines {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchContract, MchContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   node ConnectedObjectGroupNodeL for EquipmentObjectList {
      label = "Connected Objects";
      visible = [Location];
      navigate {
         page ConnectedObjects.Form {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   --

   @DynamicComponentDependency PM
   node PmInfoGroupNodeR for PmAction {
      label = "PM Actions/Plans";
      visible = [From];
      navigate {

         page PmActionsEquip {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PCMSCI
   node ServiceInfoGroupNodeR for PscContrProductScope {
      label = "Service Contracts";
      visible = [From];
      navigate {
         page ServiceLines {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchContract, MchContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   node ConnectedObjectGroupNodeR for EquipmentObjectList {
      label = "Connected Objects";
      visible = [From];
      navigate {
         page ConnectedObjects.Form {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   --

   @DynamicComponentDependency PM
   node PmInfoGroupNodeT for PmAction {
      label = "PM Actions/Plans";
      visible = [To];
      navigate {

         page PmActionsEquip {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PCMSCI
   node ServiceInfoGroupNodeT for PscContrProductScope {
      label = "Service Contracts";
      visible = [To];
      navigate {
         page ServiceLines {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchContract, MchContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   node ConnectedObjectGroupNodeT for EquipmentObjectList {
      label = "Connected Objects";
      visible = [To];
      navigate {
         page ConnectedObjects.Form {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   --

   @DynamicComponentDependency PM
   node PmInfoGroupNodeP for PmAction {
      label = "PM Actions/Plans";
      visible = [Process];
      navigate {

         page PmActionsEquip {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PCMSCI
   node ServiceInfoGroupNodeP for PscContrProductScope {
      label = "Service Contracts";
      visible = [Process];
      navigate {
         page ServiceLines {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchContract, MchContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   node ConnectedObjectGroupNodeP for EquipmentObjectList {
      label = "Connected Objects";
      visible = [Process];
      navigate {
         page ConnectedObjects.Form {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   --

   @DynamicComponentDependency PM
   node PmInfoGroupNodeS for PmAction {
      label = "PM Actions/Plans";
      visible = [Pipe];
      navigate {

         page PmActionsEquip {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PCMSCI
   node ServiceInfoGroupNodeS for PscContrProductScope {
      label = "Service Contracts";
      visible = [Pipe];
      navigate {
         page ServiceLines {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchContract, MchContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   node ConnectedObjectGroupNodeS for EquipmentObjectList {
      label = "Connected Objects";
      visible = [Pipe];
      navigate {
         page ConnectedObjects.Form {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   --

   @DynamicComponentDependency PM
   node PmInfoGroupNodeE for PmAction {
      label = "PM Actions/Plans";
      visible = [Electrical];
      navigate {

         page PmActionsEquip {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchCodeContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchCodeContract, MchCodeContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   @DynamicComponentDependency PCMSCI
   node ServiceInfoGroupNodeE for PscContrProductScope {
      label = "Service Contracts";
      visible = [Electrical];
      navigate {
         page ServiceLines {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(MchContract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(MchContract, MchContract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }

   node ConnectedObjectGroupNodeE for EquipmentObjectList {
      label = "Connected Objects";
      visible = [Electrical];
      navigate {
         page ConnectedObjects.Form {
            searchcontext(root.TreeViewId, EquipObjectNavigatorPageFilter.TreeViewId);
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
         }
      }
      iconset {
         icon "circle-solid-small";
      }
   }
}
---------------------------------- PLUGINS ----------------------------------

-------------------------------- SINGLETONS ---------------------------------

singleton TechObjectReferenceEquipSingleton for TechnicalObjectReference {
   crudactions {
      new {
         enabled = [parent.VisibleRequirements != false and parent.VisibleRequirements != null];
      }
      delete {
         enabled = [parent.VisibleRequirements != false and parent.VisibleRequirements != null];
      }
      edit {
         enabled = [parent.VisibleRequirements != false and parent.VisibleRequirements != null];
      }
   }
   command TechSpecChangeStatusCommand {
      visible = [TechnicalClass != "" and parent.VisibleRequirements != false and parent.VisibleRequirements != null];
   }
   command TechSpecRefreshAttributesCommand {
      visible = [TechnicalClass != "" and parent.VisibleRequirements != false and parent.VisibleRequirements != null];
   }
}