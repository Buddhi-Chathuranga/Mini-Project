-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  180830  SHEPLK  SAUXXW4-1637, tbwMakeMaintenanceAware - Serial Maintenance Aware - Created using MTG 1.26
--  200101  LASSLK  SAXTEND-1244,  Implement LOV Filtering
--  211101  NEKOLK  AM21R2-2960 : EQUIP redesign PARTCA changes : alternate_id obsolete work .
-----------------------------------------------------------------------------
client SerialMaintenanceAware;
component EQUIP;
layer Core;
projection SerialMaintenanceAwareHandling;
include fragment UserAllowedSiteLovSelector;


-------------------------------- MAIN PAGES ---------------------------------


--------------------------------- COMMANDS ----------------------------------


----------------------------- VISUAL COMPONENTS -----------------------------


----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry MakeServiceAwareNavEntry parent EquipNavigator.ServEquipmentSerialObject at index 400 {
      label = "Serial Maintenance Aware";
      page List;
   }
   entry MakeMaintenanceAwareNavEntry parent EquipNavigator.MaintEquipmentSerialObject at index 400 {
      label = "Serial Maintenance Aware";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using PartSerialCatalogSet {
   label = "Serial Maintenance Aware";
   list MakeMaintenanceAwareList;
}

-------------------------------- ASSISTANTS ---------------------------------

assistant MakeMaintenanceAwareAssistant using SerialPartsVirtualSet {
   label = "Make Maintenance Aware";
   setup InitData {
      variable Selection;
      execute {
         set PartNoList = Selection;
      }
   }

   steps {
      step {
         markdowntext {
            text = "This will make the selected serial(s) maintenance aware. Choose where the new object(s) should be available. The default site is automatically displayed.";
         }
         group MaintenanceAwareHeader;
         list SerialParsList(MaintAwareListArray);


      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      execute {
         call Finish();
         navigate back;
      }
   }
   cancel command {
      execute {
         navigate back;

      }

   }
   restart command {
      visible = [false];
   }
}


--------------------------------- COMMANDS ----------------------------------
command MakeMaintenanceAwareCommand for PartSerialCatalog {
   label = "Make Maintenance Aware";
   enabled = [count(*, MaintenanceAware = false) > 0];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "assistant/SerialMaintenanceAware/MakeMaintenanceAwareAssistant?$action=InitData{Selection: $[Selection]}";
   }
}

command BeforeCrudUpdate for PartSerialCatalog {
   bulkexecute {
      ifany [Record.Objstate = "Issued"] {
         inquire("Do you want to place the serial in Facility?") {
            when YES {
               bulkset MoveFacility = "TRUE";
            }
            when NO {
               bulkset MoveFacility = "FALSE";
            }

         }
      }

   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group MaintenanceAwareHeader for SerialPartsVirtual {
   label = "Place in Facility";
   visible = [IssuedExist = "Y"];

   field PartNoList {
      visible = [false];

   }
   field PlaceAllSerialInFac {
      label = "Place All Issued Serials in Facility";
      validate command {
         execute {
            if [PlaceAllSerialInFac = true] {
               call SelectAllInList(Objkey);
            }



         }

      }


   }



}

----------------------------------- LISTS -----------------------------------

list MakeMaintenanceAwareList for PartSerialCatalog {
   crudactions {
      before command BeforeCrudUpdate;
   }

   lov PartNoRef with ReferencePartCatalogSelector {
      search = PartNo, Description;
      size = Medium;
      editable = [false];
   }
   field SerialNo {
      size = Medium;
      editable = [false];
   }
   field DefaultSite {
      columnvisible = [false];
      searchable = false;
   }
   field SerialExist {
      columnvisible = [false];
      searchable = false;
   }
   field MoveFacility {
      columnvisible = [false];
      searchable = false;
   }
   badge Objstate {
      size = Medium;
      style = TextOnly;
      editable = [false];
      label = "Current Position";
      emphasis Complementary1 = [Objstate = "UnderTransportation"];
      emphasis Complementary2 = [Objstate = "Issued"];
      emphasis Complementary3 = [Objstate = "InInventory"];
      emphasis Complementary4 = [Objstate = "ReturnedToSupplier"];
   }
   field MaintenanceAware {
      size = Medium;
      required = [true];
      editable = [SerialExist = "FALSE"];
   }

   commandgroup CommandGroupCmdGroup {

      command MakeMaintenanceAwareCommand;
   }
}

list SerialParsList for SerialMaintAwarePartListVirtual {
   label = "Objects for Maintenance Aware";
   editmode = SingleCellEdit;


   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [true];
      }

   }

   field PartNo {
      size = Medium;
      editable = [false];
   }
   field SerialNo {
      size = Medium;
      editable = [false];
   }

   badge Objstate {
      size = Medium;
      style = TextOnly;
      editable = [false];
      label = "Current Position";
      emphasis Complementary1 = [Objstate = "UnderTransportation"];
      emphasis Complementary2 = [Objstate = "Issued"];
      emphasis Complementary3 = [Objstate = "InInventory"];
      emphasis Complementary4 = [Objstate = "ReturnedToSupplier"];
   }


   lov SiteRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Medium;
      label = "Site";
      format = uppercase;

   }
   field ObjectId {
      format = uppercase;
   }
   field PlaceSerialInFacility {
      type = Boolean;
      editable = [(DeliverdToInternalCustomer = "FALSE") and(Objstate = "Issued") and(parent.PlaceAllSerialInFac = false)];

   }

}


----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------


