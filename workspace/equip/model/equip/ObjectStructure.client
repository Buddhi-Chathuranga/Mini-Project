--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-08-28  SSILLK  SAUXXW4-1303, Converted MTG Version: 1.30. Implementation for  Enterprise Explorer Source:frmObjectStructure - Object Structure
-- 2018-10-18  CLEKLK  SAUXXW4-1248, Added ObjectConnAssistant and ObjectConnList, Edited FollowConnectionNewWindowCommand
-- 2020-01-02  LASSLK  SAXTEND-1244, Implement LOV Filtering
-- 2021-01-05  DEEKLK  AM2020R1-7134, Moved command definition OpenDlgMoveFunctional to fragment MoveFunctionalObjectDialog.
--------------------------------------------------------------------------------------
client ObjectStructure;
component EQUIP;
layer Core;
projection ObjectStructureHandling;
include fragment EquipmentAllObjectLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment AccountingCodepartBSelector;
include fragment EquipmentFunctionalLovSelector;
include fragment EquipmentFunctionalUivSelector;
include fragment CopySerialObjectDialog;
include fragment CopyFunctionalObjectDialog;
include fragment MoveFunctionalObjectDialog;
include fragment MoveSerialObjectDialog;
include fragment EquipmentAllObjectLov1Selector;
include fragment EmployeeLovSelector;
include fragment EquipObjectLocationLovSelector;
include fragment EquipmentAllObjectPerfQuery;

warningsenabled = EquipmentObject;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ServObjectStructureNavEntry parent EquipNavigator.ServEquipmentObject at index 300 {
      label = "Object Structure";
      page Form selector EquipmentObjectSelector;
      entry Function;
      entry Locaton;
      entry From;
      entry To;
      entry Process;
      entry PipeSystem;
      entry Electrical;
   }
   entry MaintObjectStructureNavEntry parent EquipNavigator.MaintEquipmentObject at index 300 {
      label = "Object Structure";
      page Form selector EquipmentObjectSelector;
      entry Function;
      entry Locaton;
      entry From;
      entry To;
      entry Process;
      entry PipeSystem;
      entry Electrical;
   }
   entry Function {
      label = "Function";
      page FunctionForm selector EquipmentObjectSelector;
   }
   entry Locaton {
      label = "Location";
      page LocationForm selector EquipmentObjectSelector;

   }
   entry From {
      label = "From";
      page FromForm selector EquipmentObjectSelector;

   }
   entry To {
      label = "To";
      page ToForm selector EquipmentObjectSelector;

   }
   entry Process {
      label = "Process";
      page ProcessForm selector EquipmentObjectSelector;

   }
   entry PipeSystem {
      label = "PipeSystem";
      page PipeSystemForm selector EquipmentObjectSelector;

   }
   entry Electrical {
      label = "Electrical";
      page ElectricalForm selector EquipmentObjectSelector;

   }
}
singleton EquipmentObjectSingleton for EquipmentObject {
   crudactions {
      new {
         enabled = [false];

      }
      edit {
         enabled = [false];
      }


   }
}
-------------------------------- MAIN PAGES ---------------------------------
page Form using EquipmentObjectSet {
   label = "Object Structure for Object";
//   searchcontext PageSearchContext {
//      defaults = GetDefaultPage();
//   }
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;
}

page LocationForm using EquipmentObjectSet {
   label = "Object Structure for Object";
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   list ObjectStructureList  using OperationalLocationStatus(MchCode, Contract) {
      copyoncruddefault(MchCode, Contract) to(LocationMchCode, LocationContract);
      searchcontext ObjectStructureNextLevelFilter {
         defaults = GetDefaultLocationValue(ObjLevel);
      }
   }
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;

}
page ProcessForm using EquipmentObjectSet {
   label = "Object Structure for Object";
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   list ObjectStructureList  using OperationalProcessStatus(MchCode, Contract) {
      copyoncruddefault(MchCode, Contract) to(ProcessMchCode, ProcessContract);
      searchcontext ObjectStructureNextLevelFilter {
         defaults = GetDefaultProcessValue(ObjLevel);
      }
   }
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;

}
page FunctionForm using EquipmentObjectSet {
   label = "Object Structure for Object";
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   list ObjectStructureList  using OperationalFunctionStatus(MchCode, Contract) {
      copyoncruddefault(MchCode, Contract) to(SupMchCode, SupContract);
      searchcontext ObjectStructureNextLevelFilter {
         defaults = GetDefaultFunctionValue(ObjLevel);
      }
   }
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;

}
page FromForm using EquipmentObjectSet {
   label = "Object Structure for Object";
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   list ObjectStructureList  using OperationalFromStatus(MchCode, Contract) {
      copyoncruddefault(MchCode, Contract) to(FromMchCode, FromContract);
      searchcontext ObjectStructureNextLevelFilter {
         defaults = GetDefaultFromValue(ObjLevel);
      }
   }
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;
}
page ToForm using EquipmentObjectSet {
   label = "Object Structure for Object";
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   list ObjectStructureList  using OperationalToStatus(MchCode, Contract) {
      copyoncruddefault(MchCode, Contract) to(ToMchCode, ToContract);
      searchcontext ObjectStructureNextLevelFilter {
         defaults = GetDefaultToValue(ObjLevel);
      }
   }
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;

}
page PipeSystemForm using EquipmentObjectSet {
   label = "Object Structure for Object";
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   list ObjectStructureList  using OperationalPipeSystemStatus(MchCode, Contract) {
      copyoncruddefault(MchCode, Contract) to(PipeMchCode, PipeContract);
      searchcontext ObjectStructureNextLevelFilter {
         defaults = GetDefaultPipeValue(ObjLevel);
      }
   }
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;
}
page ElectricalForm using EquipmentObjectSet {
   label = "Object Structure for Object";
   selector EquipmentObjectSelector;
   group ObjectStructureGroup;
   list ObjectStructureList  using OperationalElectricalStatus(MchCode, Contract) {
      copyoncruddefault(MchCode, Contract) to(CircuitMchCode, CircuitContract);
      searchcontext ObjectStructureNextLevelFilter {
         defaults = GetDefaultElectricalValue(ObjLevel);
      }
   }
   command PreviousLevelCommand2;
   command OperationalStatusInOperationCommand;
   command OperationalStatusOutofOperationCommand;
   command OperationalStatusScrappedCommand;
}

-------------------------------- ASSISTANTS ---------------------------------
assistant ObjectConnAssistant using ObjectConnSet {

   label = "Connected Objects for - ${MchCode}";
   input(Contract, MchCode);
   output(SearchString);
   steps {
      step {
         markdowntext {
            text = "Select the connected object to follow in the table below";
         }
         list ObjectConnList(ObjectConnArray);
      }
      final step {
      }
   }
   finish command {
      enabled = [component.ObjectConnList.SelectionCount > 0];
      execute {
         call GetSearchString(component.ObjectConnList.Selection) into SearchString;
         exit OK;
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
   restart command {
      visible = [false];
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceEquipmentFunctionalObjectUivSelector for EquipmentFunctionalUiv {
   field Contract;
   field MchCode;
   field MchName;
   field MchLoc;
   field GroupId;
   field CategoryId;
}
--------------------------------- COMMANDS ----------------------------------
command NextLevelCommand for ChildEquipmentObject {
   label = "Next Level";
   mode = SelectedRecords;
   enabled = [MchCode != null];
   bulkexecute {
      bulknavigate "page/ObjectStructure/${searchcontext.ObjectStructureNextLevelFilter.PageType}?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command PreviousLevelCommand2 for EquipmentObject {
   label = "Previous Level";
   enabled = [SupMchCode != null];
   execute {
      navigate "page/ObjectStructure/Form?$filter=MchCode eq $[SupMchCode] and Contract eq $[SupContract]";
   }
}
command OperationalStatusInOperationCommand for EquipmentObject {
   label = "In Operation";
   enabled = [GrpInOperationStatus = "TRUE"];
   execute {
      call SetInOperation();
   }
}
command OperationalStatusOutofOperationCommand for EquipmentObject {
   label = "Out of Operation";
   enabled = [GrpOutOfOperationStatus = "TRUE"];
   execute {
      call SetOutOfOperation();
   }
}
command OperationalStatusScrappedCommand for EquipmentObject {
   label = "Scrapped";
   enabled = [GrpScrappedStatus = "TRUE"];
   execute {
      call SetScrapped();
   }
}
command OperationalStatusInOperationCommand2 for ChildEquipmentObject {
   label = "In Operation";
   mode = SelectedRecords;
   enabled = [InOperationStatus = "TRUE"];
   bulkexecute {
      bulkcall SetInOperation();
   }
}
command OperationalStatusOutofOperationCommand2 for ChildEquipmentObject {
   label = "Out of Operation";
   mode = SelectedRecords;
   enabled = [OutOfOperationStatus = "TRUE"];
   bulkexecute {
      bulkcall SetOutOfOperation();
   }
}
command OperationalStatusScrappedCommand2 for ChildEquipmentObject {
   label = "Scrapped";
   mode = SelectedRecords;
   enabled = [ScrappedStatus = "TRUE"];
   bulkexecute {
      bulkcall SetScrapped();
   }
}
command ObjectInformationCommand for ChildEquipmentObject {
   label = "Object Information";
   mode = SelectedRecords;
   enabled = [ObjLevel != null];
   //need to fix the condiotion
   bulkexecute {

      bulknavigate "page/FunctionalObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ObjectInformationCommand2 for ChildEquipmentObject {
   label = "Object Information";
   mode = SelectedRecords;
   enabled = [ObjLevel = null];
   //need to fix the condiotion
   bulkexecute {
      bulknavigate "page/SerialObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command OpenDlgMoveFunctionalCommand for ChildEquipmentObject clone OpenDlgMoveFunctional {
}
command MoveSerialObjectCommand for ChildEquipmentObject {
   label = "Move Serial Object";
   enabled = [MchCode != null and Contract != null and SupMchCode != null and  SupContract != null and IsScrapped != "TRUE" and ReturnInFacility = "TRUE" and  ObjLevel = null];

   execute {
      call GetSupMchName(SupContract, SupMchCode)into SupMchName;
      dialog DlgMoveIndividual(MchCode, MchName, Contract, SupMchCode, SupContract, Company, SupMchName, Contract) {

         when OK {
            success("Done");

         }

         when CANCEL {
            exit;
         }

      }

   }
}
command CopyObjectCommand for ChildEquipmentObject {
   label = "Copy Object";
   enabled = [MchCode != null and Contract != null];


   variable PartNo;
   variable Contract;
   variable DestContract;
   variable MchCode;
   variable MchName;
   variable PartRev;
   variable SupMchCode;
   variable SupContract;
   variable DfDestSupMchCodeName;
   variable IsSerial;
   variable NewContract;
   variable NewMchCode;
   variable NewMchName;
   variable ParentContract;
   variable ParentMchCode;
   variable ParentMchName;
   variable CbSpareParts;
   variable CbRequirements;
   variable CbParameters;
   variable CbTestPoints;
   variable CbDocuments;
   variable CbPm;
   variable CbParties;
   variable VarFormName Text;

   execute {
      if [ObjLevel = null] {
         set VarFormName = "ObjStruc";
         call GetAssistantMchName(SupContract, SupMchCode)into DfDestSupMchCodeName;
         dialog DlgCopySerialObject(PartNo, Contract, Contract, MchCode, MchName, PartRev, SupMchCode, SupContract, DfDestSupMchCodeName, "${VarFormName}", AppliedPmProgramId) into
         (Contract2, MchCode, DestContract, DestMchCode, SerialNo, PartNo, PartRev, SupMchCode, SparePart, TechData, Parameter, TestPnt, Document, Pm, Party, SupContract, IsSerial, CopySerialReturn) {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }

         }
      }
      if [ObjLevel != null] {

         call GetMchName(ParentContract, ParentMchCode) into ParentMchName;
         dialog DlgCopyFunctionalObj(Contract, MchCode, MchName, SupContract, SupMchCode, ParentMchName, AppliedPmProgramId)
         into(NewContract, NewMchCode, NewMchName, ParentContract, ParentMchCode, ParentMchName, CbSpareParts, CbRequirements, CbParameters, CbTestPoints, CbDocuments, CbPm, CbParties) {
            when OK {
               info("The Functional object is now copied.");
               navigate "page/FunctionalObject/Form?$filter=MchCode eq $[NewMchCode] and Contract eq $[NewContract]";
            }
            when CANCEL {
               exit CANCEL;
            }
         }
      }
   }


}
command FollowConnectionNewWindowCommand for EquipmentObject {
   label = "Follow Connection";
   variable SearchString;
   mode = SingleRecord;
   enabled = [ConnectionCount > 1];
   execute {

      assistant ObjectConnAssistant(Contract, MchCode) into(SearchString) {
         when OK {
            navigate  "page/ObjectStructure/Form?$filter=${SearchString}";
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command FollowConnectionNewWindowCommand for ChildEquipmentObject {
   label = "Follow Connection";
   variable SearchString;
   mode = SingleRecord;
   enabled = [ConnectionCount > 0];
   execute {
      if [ConnectionCount = 1] {
         call GetConnectedObjString(MchCode, Contract) into SearchString;
         navigate  "page/ObjectStructure/Form?$filter=${SearchString}";
      }
      if[ConnectionCount > 1] {
         assistant ObjectConnAssistant(Contract, MchCode) into(SearchString) {
            when OK {
               navigate  "page/ObjectStructure/Form?$filter=${SearchString}";
            }
            when CANCEL {
               exit;
            }
         }
      }
   }
}
command ConnectedObjectsCommand for ChildEquipmentObject {
   label = "Connected Objects";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command PMforObjectStructureCommand for ChildEquipmentObject {
   label = "PM for Object Structure";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ActiveWorkOrdersCommand for ChildEquipmentObject {
   label = "Active Work Orders";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null];
   bulkexecute {
      bulknavigate "page/ActiveWorkOrders/List?$filter=MchCode eq $[MchCode] and MchCodeContract eq $[Contract]";
   }
}
command WorkOrderHistoryCommand for ChildEquipmentObject {
   label = "Work Order History";
   mode = SelectedRecords;
   enabled = [MchCode != null and Contract != null];
   bulkexecute {
      bulknavigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

//command ValidateSave for ChildEquipmentObject {
//   bulkexecute {
//
//      ifall [IsSerialTr != "TRUE" and PartNo != null] {
//         inquire("Part no ${PartNo} is not serial tracked 'At Receipt and Issue'. It will not be possible to move the serial object to the inventory. Still want to save this record?") {
//            when YES {
//               new();
//            }
//            when NO {
//               exit;
//            }
//         }
//      }
//   }
//}
--------------------------------- SELECTORS ---------------------------------
@Override
selector EquipmentObjectSelector for EquipmentObject {
   label = "${MchCode} - ${MchName}";
   static MchCode;
   static MchName;
   static Contract;
   static ObjLevel;
}
@Override
selector ReferencePartCatalogSelector for PartCatalog {
   label = "";
   static PartNo;
   static Description;
   static LanguageDescription {
      visible = [false];

   }
   static UnitCode;
   static SerialTrackingCode;

   static LotTrackingCode {
      visible = [false];

   }
}
---------------------------------- GROUPS -----------------------------------
group ObjectStructureGroup for EquipmentObject {
   label = "Parent Object Information";

   lov MchCodeRef with ReferenceEquipmentAllObjectLovSelector {
      search = MchCode, MchName;
      preview = EquipmentAllObjectLovCard;
      size = Small;
      editable = [false];

   }
   field MchName {
      size = Small;
      editable = [false];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      preview = UserAllowedSiteLovCard;
      size = Small;
      editable = [false];
   }
   lov ObjLevelRef with ReferenceEquipmentObjectLevelSelector {
      search = ObjLevel, LevelSeq;
      size = Small;
      editable = [false];
   }
   field OperationalStatus {
      size = Small;
      editable = [false];

   }

//    CommandGroup4CmdGroup {
//      label = "Command Group 4";
//      command MoveSerialObjectCommand;
//      command CopyObjectCommand;
//   }
//
   commandgroup CommandGroupCmdGroup {

      command FollowConnectionNewWindowCommand;
//      command ConnectedObjectsCommand;
   }
//
//   commandgroup CommandGroup6CmdGroup {
//      label = "Command Group 6";
//      command PMforObjectStructureCommand;
//      command ActiveWorkOrdersCommand;
//      command WorkOrderHistoryCommand;
   //   }

}


----------------------------------- LISTS -----------------------------------

list ObjectConnList for EquipmentObjectConn {
   label = " ";
   field ContractConsist {
      size = Large;
   }
   field MchCodeConsist {
      size = Large;
   }
   field EquipmentObjectRef.MchName {
      size = Large;
      label = "Object Description";
   }
   field ConnectionType {
      size = Large;
   }
   field EquipmentObjConnTypeRef.Description {
      size = Large;
      label = "Connection Type Description";
   }
   // fieldranking ContractConsist, MchCodeConsist, EquipmentObjectRef.MchName, ConnectionType, EquipmentObjConnTypeRef.Description;
}
list ObjectStructureList for ChildEquipmentObject {
   label = "Object Structure";


   orderby = MchCode;

   crudactions {
      new {
         enabled = [searchcontext.ObjectStructureNextLevelFilter.ObjectLevelValidation = "TRUE"];

      }
      duplicate {
         enabled = [false];

      }
   }

   // Column 'SupContract' (tblObjectStructure_colSupContract) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   // Column 'SupMchCode' (tblObjectStructure_colSupMchCode) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   field  HasStructure {
      size = Small;
      truelabel = "Yes";
      falselabel = "No";

   }
   field  HasConnection {
      size = Small;
      truelabel = "Yes";
      falselabel = "No";
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;

      validate command {
         variable GetParentDetailReturn {

            type = Structure(GetParentDetailReturn);
         }

         execute {
            call GetCostCenterView(Contract) into FetchCostCenterView;

            if[Contract != null] {
               call GetCompanyId(Contract) into Company;
            }

            if[Contract = SupContract and SupMchCode != null] {
               call GetParentData(SupContract, SupMchCode) into GetParentDetailReturn;
               set GroupId = GetParentDetailReturn.GroupId;
               set MchPos = GetParentDetailReturn.MchPos;
               set MchLoc = GetParentDetailReturn.MchLoc;
               set CostCenter = GetParentDetailReturn.CostCenter;

            }
            else {
               set GroupId = "";
               set MchPos = "";
               set MchLoc = "";
               set CostCenter = "";
            }

         }
      }
   }
   field MchCode {
      size = Small;
      //! TODO: Equivalent APF control, tblObjectStructure_colMchCode, handles a PM_DataItemValidate message in colMchCode_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)
      validate command {
         variable GetParentDetailReturn {

            type = Structure(GetParentDetailReturn);
         }
         execute {
            if[SupMchCode != null  and SupContract = Contract] {
               call GetParentData(SupContract, SupMchCode) into GetParentDetailReturn;
               set GroupId = GetParentDetailReturn.GroupId;
               set MchPos = GetParentDetailReturn.MchPos;
               set MchLoc = GetParentDetailReturn.MchLoc;
               set CostCenter = GetParentDetailReturn.CostCenter;

            }
            else {
               set GroupId = "";
               set MchPos = "";
               set MchLoc = "";
               set CostCenter = "";
            }

         }
      }
   }
   lov ObjLevelRef  with  ReferenceEquipmentObjectLevelSelector  using GetActiveObjectLevel {
      search = ObjLevel, LevelSeq;
      size = Small;

   }
   field OperationalStatus {
      size = Small;
   }
   lov PartNoRef with ReferencePartCatalogSelector {
      search = PartNo, Description;
      size = Small;
      //! TODO: Equivalent APF control, tblObjectStructure_colPartNo, handles a PM_DataItemValidate message in colPartNo_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)
      validate command {
         execute {
            if[PartNo != null] {
               call GetIsSerialTr(PartNo)into IsSerialTr;

               if [IsSerialTr != "TRUE"] {
                  inquire("Part no ${PartNo} is not serial tracked 'At Receipt and Issue'. It will not be possible to move the serial object to the inventory. Still want to save this record?") {
                     when YES {
                        if[ObjLevel = null and PartNo != null and  SerialNo != null] {
                           call GetObjectDescription(PartNo) into  MchName;

                        }
                     }
                     when NO {
                        set PartNo = "";

                        exit;
                     }


                  }
               }


            }


         }
      }

   }
   field SerialNo {
      size = Small;
      required = [ObjLevel = null];

   }
   field MchName {
      size = Small;
      required = [true];

   }
   lov  MchTypeRef with ReferenceEquipmentObjTypeSelector using GetActiveMchType {
      search = MchType, Description;
      size = Small;

      validate command {
         variable TempMchType;

         execute {
            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchType;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }
            }
         }
      }
   }
   field Type {
      size = Small;
      columnvisible = [false];

      lovswitch {
         when[MchType = null] {
            lov TypeRef with ReferenceTypeDesignationSelector using GetActiveTypeDesignation {
               search = Type, Description;

            }
         }
         when[MchType != null] {
            lov TypeRef with ReferenceTypeDesignationSelector using GetType(MchType) {
               search = Type, Description;
            }
         }
      }

      validate command {
         execute {

            set  MchType = TypeRef.MchType;
         }
      }


   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;

      size = Small;
      columnvisible = [false];
   }
   lov CriticalityRef  with ReferenceEquipmentCriticalitySelector using GetActiveCriticality {
      search = Criticality, Description;
      size = Small;
      columnvisible = [false];

   }

   field CostCenter {
      label = "CostCenter";

      lovswitch {

         when[FetchCostCenterView = "ACCOUNT"] {
            lov CodeARef with ReferenceAccountSelector using GetCostCenterAcc(Company) {
               search = Account, Description;
               description = CodeARef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_B"] {
            lov CodeBRef with ReferenceCodeBSelector using GetCostCenterCodeB(Company) {
               search = CodeB, Description;
               description = CodeBRef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_C"] {
            lov CodeCRef with ReferenceCodeCSelector using GetCostCenterCodeC(Company) {
               description = CodeCRef.Description;
               label = "Code C";
            }
         }
         when[FetchCostCenterView = "CODE_D"] {
            lov CodeDRef with ReferenceCodeDSelector using GetCostCenterCodeD(Company) {
               search = CodeD, Description;
               description = CodeDRef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_E"] {
            lov CodeERef with ReferenceCodeESelector using GetCostCenterCodeE(Company) {
               search = CodeE, Description;
               description = CodeERef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_F"] {
            lov CodeFRef with ReferenceCodeFSelector using GetCostCenterCodeF(Company) {
               search = CodeF, Description;
               description = CodeFRef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_G"] {
            lov CodeGRef with ReferenceCodeGSelector using GetCostCenterCodeG(Company) {
               search = CodeG, Description;
               description = CodeGRef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_H"] {
            lov CodeHRef with ReferenceCodeHSelector using GetCostCenterCodeH(Company) {
               search = CodeI, Description;
               description = CodeHRef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_I"] {
            lov CodeIRef with ReferenceCodeISelector using GetCostCenterCodeI(Company) {
               search = CodeI, Description;

               description = CodeIRef.Description;
            }
         }
         when[FetchCostCenterView = "CODE_J"] {
            lov CodeJRef with ReferenceCodeJSelector using GetCostCenterCodeJ(Company) {
               search = CodeJ, Description;
               description = CodeJRef.Description;
            }

         }

      }
   }
   field MchLoc {
      size = Small;
      columnvisible = [false];
   }
   field MchPos {
      size = Small;
      columnvisible = [false];
   }


   commandgroup CommandGroupCmdGroup {

      command NextLevelCommand;
      //command PreviousLevelCommand;
   }
   commandgroup CommandGroup2CmdGroup {
      label = "Operational Status";
      command OperationalStatusInOperationCommand2;
      command OperationalStatusOutofOperationCommand2;
      command OperationalStatusScrappedCommand2;

   }
   commandgroup CommandGroup3CmdGroup {

      command ObjectInformationCommand;
      command ObjectInformationCommand2;
   }

   commandgroup   CommandGroup4CmdGroup {
      commandgroup CommandGroupMoveCopy {
         label = "Move/Copy";
         command MoveSerialObjectCommand;
         command OpenDlgMoveFunctionalCommand;
         command CopyObjectCommand;
      }
   }

   commandgroup CommandGroup5CmdGroup {

      command FollowConnectionNewWindowCommand;
      command ConnectedObjectsCommand;
   }

   commandgroup CommandGroup6CmdGroup {

      commandgroup CommandGroupMaintenanceInformation {
         label = "Maintenance Information";
         command PMforObjectStructureCommand;
         command ActiveWorkOrdersCommand;
         command WorkOrderHistoryCommand;
      }
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


------------------------------- SEARCHCONTEXT -------------------------------
searchcontext ObjectStructureNextLevelFilter for ObjectStructureNextLevelStruct {
   label = " ";

   field PageType {
      visible = [false];

   }
   field ObjectLevelValidation {
      visible = [false];

   }
}
--------------------------------- CHECKLIST ---------------------------------
