--------------------------------------------------------------------------------------
-- Date       Sign   History
-- ---------- ------ -----------------------------------------------------------------
-- 2019-05-17 SHEPLK SAUXXW4-18433, Handle simple tree navigation from other pages to Equipment object navigator
-- 2019-01-02 LASSLK SAXTEND-1244, Implement LOV Filtering
-- 2020-06-30 DEEKLK AMXTEND-439, Added PurchInformationGroup and changed PurchInfoGroup to PurchInformationGroup
-- 2020-11-23 CLEKLK AMZEAX-329, Modified filteration GetEquipmentObjectsFiltered for child nodes to GetEquipObjectsChildFiltered
-- 2020-12-03 CLEKLK AM2020R1-6958, Added TechObjectReferenceEquipSingleton and changed TechnicalObjectReferenceSingleton to TechObjectReferenceEquipSingleton
-- 2021-01-04 LASSLK AM2020R1-7246, Added group CriticalAnalysisGroup, list CriticalAnalysisResultList
-- 2021-02-03 CLEKLK AM2020R1-7085, Added sepearte commands for "Status for Structure" option
-- 2021-05-04 LASSLK AM21R2-1339, Modified the Commands DetailsCommandPm,DetailsCommandPmAll,DetailsCommandWo,DetailsCommandWoAll
-- 2021-05-05 RUANLK AM21R2-1297, Added PM filter option for Work task tab
-- 2021-05-20 RUSSLK AM2020R1-7787, Split GetAllEquipmentObjectFiltered() to 7 different functions to improve performance.
-- 2021-07-05 RUSSLK AM21R2-2105, Set searchable property as false for few fields in EquipmentObjectSelector Selector.
-- 2021-07-17  SHAGLK  AM21R2-2063, Added seperate commands for "New Functional Object" command for each structure type.
-- 2021-09-21 HRATLK AM21R2-2783, Added RetrospectiveWorkReportingEAMCommand and RetrospectiveWorkReportingSMCommand commands.

--------------------------------------------------------------------------------------
client EquipmentObjectStructureNavigation;
component EQUIP;
layer Core;
projection EquipmentObjectStructureNavigationHandling;

--------------------------------- FRAGMENTS ---------------------------------
include fragment UserAllowedSiteLovSelector;
include fragment MaintenanceObjectSelector;
--include fragment CustomerInfoCustcategoryPubSelector;
--include fragment EquipObjectLocationLovSelector;
--include fragment EquipmentSummary;
--include fragment EquipmentAllObjectUivSelector;
include fragment EquipmentAllObjectLovSelector;
include fragment EquipmentObjectList;
include fragment FunctionalObjectTab;
include fragment SerialObjectTab;
@DynamicComponentDependency PCMSCI
include fragment ServiceLinesList;
@DynamicComponentDependency PM
include fragment PmForObjectStucturePmActionMaintenancePlan;
include fragment ObjectWarrantyList;
include fragment EquipObjCostPerYearList;
@DynamicComponentDependency METINV
include fragment MeteringInvoicingList;
@DynamicComponentDependency WO
include fragment WorkTask;
@DynamicComponentDependency WO
include fragment ReportActionTakenDialog;
@DynamicComponentDependency WO
include fragment OnHoldCauseDialog;
@DynamicComponentDependency WO
include fragment WorkTaskSteps;
include fragment MediaLibraryAttachment;
include fragment EquipmentFunctionalLovSelector;

warningsenabled = EquipmentObjectList;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ServEquipmentStructureNavigatorNavEntry parent EquipNavigator.ServEquipmentObject at index 100 {
      label = "Equipment Object Navigator";
      tree EquipObjectStructureTree;
   }
   entry EquipmentStructureNavigatorNavEntry parent EquipNavigator.MaintEquipmentObject at index 100 {
      label = "Equipment Object Navigator";
      tree EquipObjectStructureTree;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page EquipmentObjectPageF using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "F");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "F");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "F")
            {
            copyoncruddefault(EquipmentObjectSeq) to(FunctionalObjectSeq);
               --copyoncruddefault(EquipmentObjectSeq) to(SupMchCode, SupContract);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllFChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];

         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
      tab {
         label = "Preventive Maintenance";
         group TabPmSelectionGroup;
         @DynamicComponentDependency PM
         list PmObjectList(ObjectPmArray) {
            label = "Selected Object";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipmentObjectSeq, "F") {
            label = "Object Structure";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmPlanList using GetMaintPlanFiltered(EquipmentObjectSeq) {
            label = "Maintenance Plan";
            visible = [VisibleMaintPlan = true];
         }
      }
      tab {
         label = "Service Lines";
         group TabWorkSelectionGroup;
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "Service Lines";
            visible = [VisibleServiceLines = true];
         }
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq, "F") {
            label = "All Service Lines";
            visible = [VisibleAllServiceLines = true];
         }
      }
      tab {
         label = "Work Tasks";
         group TabWorkOrderSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetPMActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllActiveWorkTasksFiltered("F", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllPMActiveWorkTasksFiltered("F", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalPMWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks = true];
         }
      }
      tab {
         label = "Work Task Steps";
         group TabWorkTaskSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsFiltered("F", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsPmFiltered("F", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectCommand;
            command OperationalStatusStructureStrappedEquipmentObjectCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalEquipmentObjectCommand;
         command OperationalConditionSetNonOperationalEquipmentObjectCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingSMCommand;
         @DynamicComponentDependency WO
         command RetrospectiveWorkReportingEAMCommand;
      }
   }
}

page EquipmentObjectPageL using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "L");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "L");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "L")
            {
            copyoncruddefault(EquipmentObjectSeq) to(LocationObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllLChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];

         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
      tab {
         label = "Preventive Maintenance";
         group TabPmSelectionGroup;
         @DynamicComponentDependency PM
         list PmObjectList(ObjectPmArray) {
            label = "Selected Object";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipmentObjectSeq, "L") {
            label = "Object Structure";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmPlanList using GetMaintPlanFiltered(EquipmentObjectSeq) {
            label = "Maintenance Plan";
            visible = [VisibleMaintPlan = true];
         }
      }
      tab {
         label = "Service Lines";
         group TabWorkSelectionGroup;
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "Service Lines";
            visible = [VisibleServiceLines = true];
         }
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq, "L") {
            label = "All Service Lines";
            visible = [VisibleAllServiceLines = true];
         }
      }
      tab {
         label = "Work Tasks";
         group TabWorkOrderSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetPMActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllActiveWorkTasksFiltered("L", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllPMActiveWorkTasksFiltered("L", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalPMWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks = true];
         }
      }
      tab {
         label = "Work Task Steps";
         group TabWorkTaskSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsFiltered("L", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsPmFiltered("L", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectLCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectLCommand;
            command OperationalStatusStructureScrappedEquipmentObjectLCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalEquipmentObjectCommand;
         command OperationalConditionSetNonOperationalEquipmentObjectCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectLCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
      }
   }
}

page EquipmentObjectPageR using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "R");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "R");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "R")
            {
            copyoncruddefault(EquipmentObjectSeq) to(FromObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllRChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];

         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
      tab {
         label = "Preventive Maintenance";
         group TabPmSelectionGroup;
         @DynamicComponentDependency PM
         list PmObjectList(ObjectPmArray) {
            label = "Selected Object";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipmentObjectSeq, "R") {
            label = "Object Structure";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmPlanList using GetMaintPlanFiltered(EquipmentObjectSeq) {
            label = "Maintenance Plan";
            visible = [VisibleMaintPlan = true];
         }
      }
      tab {
         label = "Service Lines";
         group TabWorkSelectionGroup;
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "Service Lines";
            visible = [VisibleServiceLines = true];
         }
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq, "R") {
            label = "All Service Lines";
            visible = [VisibleAllServiceLines = true];
         }
      }
      tab {
         label = "Work Tasks";
         group TabWorkOrderSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetPMActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllActiveWorkTasksFiltered("R", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllPMActiveWorkTasksFiltered("R", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalPMWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks = true];
         }
      }
      tab {
         label = "Work Task Steps";
         group TabWorkTaskSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsFiltered("R", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsPmFiltered("R", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectRCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectRCommand;
            command OperationalStatusStructureScrappedEquipmentObjectRCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalEquipmentObjectCommand;
         command OperationalConditionSetNonOperationalEquipmentObjectCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectRCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
      }
   }
}

page EquipmentObjectPageT using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "T");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "T");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "T")
            {
            copyoncruddefault(EquipmentObjectSeq) to(ToObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllTChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];

         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
      tab {
         label = "Preventive Maintenance";
         group TabPmSelectionGroup;
         @DynamicComponentDependency PM
         list PmObjectList(ObjectPmArray) {
            label = "Selected Object";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipmentObjectSeq, "T") {
            label = "Object Structure";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmPlanList using GetMaintPlanFiltered(EquipmentObjectSeq) {
            label = "Maintenance Plan";
            visible = [VisibleMaintPlan = true];
         }
      }
      tab {
         label = "Service Lines";
         group TabWorkSelectionGroup;
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "Service Lines";
            visible = [VisibleServiceLines = true];
         }
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq, "T") {
            label = "All Service Lines";
            visible = [VisibleAllServiceLines = true];
         }
      }
      tab {
         label = "Work Tasks";
         group TabWorkOrderSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetPMActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllActiveWorkTasksFiltered("T", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllPMActiveWorkTasksFiltered("T", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalPMWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks = true];
         }
      }
      tab {
         label = "Work Task Steps";
         group TabWorkTaskSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsFiltered("T", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsPmFiltered("T", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectTCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectTCommand;
            command OperationalStatusStructureScrappedEquipmentObjectTCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalEquipmentObjectCommand;
         command OperationalConditionSetNonOperationalEquipmentObjectCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectTCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
      }
   }
}

page EquipmentObjectPageP using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "P");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "P");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "P")
            {
            copyoncruddefault(EquipmentObjectSeq) to(ProcessObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllPChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];

         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
      tab {
         label = "Preventive Maintenance";
         group TabPmSelectionGroup;
         @DynamicComponentDependency PM
         list PmObjectList(ObjectPmArray) {
            label = "Selected Object";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipmentObjectSeq, "P") {
            label = "Object Structure";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmPlanList using GetMaintPlanFiltered(EquipmentObjectSeq) {
            label = "Maintenance Plan";
            visible = [VisibleMaintPlan = true];
         }
      }
      tab {
         label = "Service Lines";
         group TabWorkSelectionGroup;
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "Service Lines";
            visible = [VisibleServiceLines = true];
         }
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq, "P") {
            label = "All Service Lines";
            visible = [VisibleAllServiceLines = true];
         }
      }
      tab {
         label = "Work Tasks";
         group TabWorkOrderSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetPMActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllActiveWorkTasksFiltered("P", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllPMActiveWorkTasksFiltered("P", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalPMWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks = true];
         }
      }
      tab {
         label = "Work Task Steps";
         group TabWorkTaskSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsFiltered("P", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsPmFiltered("P", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectPCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectPCommand;
            command OperationalStatusStructureScrappedEquipmentObjectPCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalEquipmentObjectCommand;
         command OperationalConditionSetNonOperationalEquipmentObjectCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectPCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
      }
   }
}

page EquipmentObjectPageS using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "S");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "S");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "S")
            {
            copyoncruddefault(EquipmentObjectSeq) to(PipeObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllSChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];

         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
      tab {
         label = "Preventive Maintenance";
         group TabPmSelectionGroup;
         @DynamicComponentDependency PM
         list PmObjectList(ObjectPmArray) {
            label = "Selected Object";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipmentObjectSeq, "S") {
            label = "Object Structure";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmPlanList using GetMaintPlanFiltered(EquipmentObjectSeq) {
            label = "Maintenance Plan";
            visible = [VisibleMaintPlan = true];
         }
      }
      tab {
         label = "Service Lines";
         group TabWorkSelectionGroup;
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "Service Lines";
            visible = [VisibleServiceLines = true];
         }
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq, "S") {
            label = "All Service Lines";
            visible = [VisibleAllServiceLines = true];
         }
      }
      tab {
         label = "Work Tasks";
         group TabWorkOrderSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetPMActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllActiveWorkTasksFiltered("S", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllPMActiveWorkTasksFiltered("S", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalPMWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks = true];
         }
      }
      tab {
         label = "Work Task Steps";
         group TabWorkTaskSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsFiltered("S", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsPmFiltered("S", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectSCommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectSCommand;
            command OperationalStatusStructureScrappedEquipmentObjectSCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalEquipmentObjectCommand;
         command OperationalConditionSetNonOperationalEquipmentObjectCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectSCommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
      }
   }
}

page EquipmentObjectPageE using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "E");
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "E");
         }
      }
      tab {
         label = "Objects";
         list EquipmentObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "E")
            {
            copyoncruddefault(EquipmentObjectSeq) to(CircuitObjectSeq);
         }
      }
      tab {

         label = "All Objects";
         list EquipmentObjectAllList using GetAllEChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
      }
      tab {
         label = "Functional Object";
         visible = [ObjLevel != null];
         singleton FunctionalObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {
            group FunctionalObjectGroup bind FunctionalObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup;
            group TypeDesGroup;
         }
         group ObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Serial Object";
         visible = [ObjLevel = null];

         singleton SerialObjectGeneralSingleton(EquipmentSerialArray);
         arrange {
            group SerialObjectGroup bind SerialObjectGeneralSingleton;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group SerialPartInfoGroup;
         arrange {
            group SerialCodePartInfoGroup;
            group SerialTypeDesGroup;
         }
         group ObjectHasGroup;
         group SerialNotesGroup;
         group SerialPmProgramGroup;
      }
      tab {
         label = "More Information";
         group TabTypeSelectionGroup;
         -- ********************** Type Designation *********************
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton {
            visible = [VisibleTypeDesignation = true];
         }
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton {
               visible = [VisibleTypeDesignation = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleTypeDesignation = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [VisibleTypeDesignation = true and SelectionParameters = "Both"];
         }

         -- ********************** Spare Parts *********************
         list ObjectSparePartsList(EquipmentObjectSparePartArray) {
            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list TestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ObjectParametersList(ParametersArray) bind TestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Parties **************************
         list ObjectPartyList(EquipmentObjectPartyArray) {
            visible = [VisibleParties = true];
            label = "Parties";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
         -- ********************** Warranty *********************
         list SupplierWarrantyList(ArraySupplierWarranty) {
            visible = [VisibleWarranty = true];
         }
         list CustomerWarrantyList(ArrayCustomerWarranty) {
            visible = [VisibleWarranty = true];
         }
         -- ********************** Cost/Year *********************
         group PurchInformationGroup {
            visible = [VisibleCost = true];
         }
         list RowDataList(RowDataArray) {
            visible = [VisibleCost = true];
         }
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList {
            visible = [VisibleCost = true];
         }
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList {
               visible = [VisibleCost = true];
            }
         }
         -- ********************* Metering invoice ***************
         @DynamicComponentDependency METINV
         list MeterReadingList(MeterReadingArray) {
            visible = [VisibleMeteringInvoice = true];
         }
         @DynamicComponentDependency METINV
         list MeteringObjectLineList(MeteringObjectLineArray) bind MeterReadingList {
            visible = [VisibleMeteringInvoice = true];
         }
         -- ********************* Operational Modes **************
         group SafeAccessGroup {
            visible = [VisibleOpModes = true];
         }
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray) {
               visible = [VisibleOpModes = true];
            }
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList {
               visible = [VisibleOpModes = true];
            }
         }
           -- ********************* Critical Analysis **************
         group CriticalAnalysisGroup {
            visible = [VisibleCriticalityAnalysis = true];
         }
         list CriticalAnalysisResultList(CriticalAnalysisResultsArray) {
            visible = [VisibleCriticalityAnalysis = true];
         }

      }
      tab {
         label = "Preventive Maintenance";
         group TabPmSelectionGroup;
         @DynamicComponentDependency PM
         list PmObjectList(ObjectPmArray) {
            label = "Selected Object";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmObjectStructureList using GetPmActionsStructureFiltered(EquipmentObjectSeq, "E") {
            label = "Object Structure";
            details = "page/PmAction/Form?$filter=PmNo eq $[PmNo] and PmRevision eq $[PmRevision]";
            visible = [VisiblePmActions = true];
         }
         @DynamicComponentDependency PM
         list PmPlanList using GetMaintPlanFiltered(EquipmentObjectSeq) {
            label = "Maintenance Plan";
            visible = [VisibleMaintPlan = true];
         }
      }
      tab {
         label = "Service Lines";
         group TabWorkSelectionGroup;
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "Service Lines";
            visible = [VisibleServiceLines = true];
         }
         @DynamicComponentDependency PCMSCI
         list PscServicesList using GetAllServiceLinesFiltered(EquipmentObjectSeq, "E") {
            label = "All Service Lines";
            visible = [VisibleAllServiceLines = true];
         }
      }
      tab {
         label = "Work Tasks";
         group TabWorkOrderSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskList using GetPMActiveWorkTasksFiltered(LuName, Objkey) {
            label = "Active Work Tasks";
            visible = [VisibleActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllActiveWorkTasksFiltered("E", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskList using GetAllPMActiveWorkTasksFiltered("E", EquipmentObjectSeq) {
            label = "All Active Work Tasks";
            visible = [VisibleAllActiveWorkTasks = true and VisiblePMWorkTasks = true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskList using GetHistoricalPMWorkTasksFiltered(LuName, Objkey) {
            label = "Historical Work Tasks";
            visible = [VisibleHistoricalWorkTasks = true and VisiblePMWorkTasks = true];
         }
      }
      tab {
         label = "Work Task Steps";
         group TabWorkTaskSelectionGroup;
         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectWorkTaskStepList using GetActiveWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Active Work Task Steps";
            visible = [VisibleActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsFiltered("E", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectAllWorkTaskStepList using GetAllActiveWorkTaskStepsPmFiltered("E", EquipmentObjectSeq) {
            label = "All Active Work Task Steps";
            visible = [VisibleAllActiveWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }

         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps != true];
         }
         @DynamicComponentDependency WO
         list EquipmentObjectHistWorkTaskStepList using GetHistoricalWorkTaskStepsPmFiltered(LuName, Objkey) {
            label = "Historical Work Task Steps";
            visible = [VisibleHistoricalWorkTaskSteps = true and VisibleOnlyPmWorkTaskSteps = true];
         }
      }
   }
   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationEquipmentObjectCommand;
         command OperationalStatusOutofOperationEquipmentObjectCommand;
         command OperationalStatusScrappedEquipmentObjectCommand;
         commandgroup StructureCommandGroup {
            label = "Status for Structure";
            command OperationalStatusStructureInOperationEquipmentObjectECommand;
            command OperationalStatusStructureOutofOperationEquipmentObjectECommand;
            command OperationalStatusStructureScrappedEquipmentObjectECommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalEquipmentObjectCommand;
         command OperationalConditionSetNonOperationalEquipmentObjectCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      command CreateFunctionalObjectECommand;
      command CreateSerialObjectCommand;
      command DeleteObjectCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      commandgroup CommandGroupCreateWork {
         label = "Register Work";
         command FaultReportCommand;
         command ServiceRequestCommand;
         @DynamicComponentDependency WO
         command CreateRepaireWorkOrderCommand;
      }
   }
}
----------------------------------- TREES -----------------------------------
tree EquipObjectStructureTree using EquipmentObjectListSet {
   label = "Equipment Object Navigator";
   navicontexts {
      context F {
         label = "Function";
      }
      context L {
         label = "Location";
      }
      context R {
         label = "From";
      }
      context T {
         label = "To";
      }
      context P {
         label = "Process";
      }
      context S {
         label = "Pipe System";
      }
      context E {
         label = "Electrical";
      }
   }
   selector EquipmentObjectSelector;

   rootnode EquipmentObjectStructureNode {
      label = "${MchCode} - ${MchName}";
      navigate {
         when L page EquipmentObjectPageL {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
         when R page EquipmentObjectPageR {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
         when T page EquipmentObjectPageT {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
         when P page EquipmentObjectPageP {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
         when S page EquipmentObjectPageS {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
         when E page EquipmentObjectPageE {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
         default page EquipmentObjectPageF {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "F");
         node ChildEquipmentObjectNodeL using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "L");
         node ChildEquipmentObjectNodeR using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "R");
         node ChildEquipmentObjectNodeT using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "T");
         node ChildEquipmentObjectNodeP using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "P");
         node ChildEquipmentObjectNodeS using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "S");
         node ChildEquipmentObjectNodeE using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "E");



      }

   }

   node ChildEquipmentObjectNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [F];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageF {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "F");

      }
   }

   node ChildEquipmentObjectNodeL for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [L];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageL {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeL using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "L");

      }
   }

   node ChildEquipmentObjectNodeR for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [R];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageR {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.R, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeR using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "R");

      }
   }

   node ChildEquipmentObjectNodeT for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [T];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageT {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.T, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeT using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "T");

      }
   }

   node ChildEquipmentObjectNodeP for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [P];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageP {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.P, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeP using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "P");

      }
   }

   node ChildEquipmentObjectNodeS for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [S];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageS {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.S, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeS using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "S");

      }
   }

   node ChildEquipmentObjectNodeE for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [E];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageE {
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.E, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNodeE using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "E");

      }
   }
}

------------------------------- SEARCHCONTEXT -------------------------------
searchcontext EquipObjectNavigatorPageFilter for NavPageFilterStructure {
   label = "";
   field EquipmentObjectSeq {
      visible = [false];
   }
   field StructureInTree {
      visible = [false];
   }
}
--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector EquipmentObjectSelector for EquipmentObjectList {
   label = "${MchCode} - ${MchName} - ${Contract} - ${OperationalStatus}";
   static MchCode;
   static MchName;
   static Contract;
   static EquipmentObjectSeq;
   badge OperationalStatus {
      emphasis Complementary5 = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
   }
   static F {
      visible = [false];
      searchable = false;
   }
   static L {
      visible = [false];
      searchable = false;
   }
   static R {
      visible = [false];
      searchable = false;
   }
   static T {
      visible = [false];
      searchable = false;
   }
   static P {
      visible = [false];
      searchable = false;
   }
   static S {
      visible = [false];
      searchable = false;
   }
   static E {
      visible = [false];
      searchable = false;
   }
}

@Override
selector CompanySiteSelector for CompanySite {
   label = "${Contract} - ${Description}";
   static Contract;
   static Description;
}

@Override
selector LocationSelector for Location {
   label = "${LocationId} - ${Name}";
   static LocationId;
   static Name;
}

@Override
selector EquipmentObjTypeSelector for EquipmentObjType {
   label = "${MchType} - ${Description}";
   static MchType;
   static Description;
}


---------------------------------- GROUPS -----------------------------------
group EquipObjStructureGroup for EquipmentObjectList {
   label = "";
   field LuName {
      visible = [false];
   }
   field KeyRef {
      visible = [false];
   }
   lov MchCodeRef with ReferenceMaintenanceObjectSelector {
      search = MchCode, MchName;
      editable = [ETag = null];

      preview = MaintenanceObjectCard;
      size = Medium;
   }
   field MchName {
      size = Medium;
      editable = [ObjLevel != null];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      editable = [Etag = null];
      size = Small;
   }
   field ObjLevelRef {
      size = Small;
      visible = [ObjLevel != null];
   }
   badge OperationalStatus {
      size = Small;
      style = TextOnly;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   @DynamicComponentDependency PLADES
   badge DesignStatus {
      style = TextOnly;
      size = Small;
      visible = [ObjLevel != null];
      emphasis Complementary1 = [OperationalStatus = "PlannedForScrap"];
      emphasis Complementary2 = [OperationalStatus = "ReDesign"];
      emphasis Complementary3 = [OperationalStatus = "Completed"];
      emphasis Complementary4 = [OperationalStatus = "UnderDesign"];
   }
   badge OperationalCondition {
      style = TextOnly;
      size = Small;
      visible = [ObjLevel = null];
      emphasis Complementary1 = [OperationalStatus = "Operational"];
      emphasis Complementary2 = [OperationalStatus = "Non Operational"];
      emphasis Complementary3 = [OperationalStatus = "Non Applicable"];
   }
}

group PurchInformationGroup for EquipmentObjectList clone PurchInfoGroup {

}
----------------------------------- LISTS -----------------------------------
list SummaryListPm for ObjectCountsPmEntity {
   label = "";
   card ObjUsedInPm;
}
list SummaryListWo for ObjectCountsWoEntity {
   label = "";
   card ObjUsedInWo;
}
----------------------------------- CARDS -----------------------------------
card ObjUsedInPm for ObjectCountsPmEntity {
   label = "${DisplayText}";
   markdowntext {
      text = "# ${ObjCount}";
   }
   command DetailsCommandPm;
   command DetailsCommandPmAll;
}
card ObjUsedInWo for ObjectCountsWoEntity {
   label = "${DisplayText}";
   markdowntext {
      text = "# ${ObjCount}";
   }
   command DetailsCommandWo;
   command DetailsCommandWoAll;
}
--------------------------------- COMMANDS ----------------------------------
command DetailsCommandPm for ObjectCountsPmEntity {
   label = "Go to level ${DisplayText}s";
   icon = "caret-right";
   style = IconOnly;
   enabled = [OneObjCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Single";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}
command DetailsCommandPmAll for ObjectCountsPmEntity {
   label = "Go to Structure ${DisplayText}s";
   icon = "chevron-right";
   style = IconOnly;
   enabled = [AllCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Structure";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}

command DetailsCommandWo for ObjectCountsWoEntity {
   label = "Go to level ${DisplayText}";
   icon = "caret-right";
   style = IconOnly;
   enabled = [OneObjCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Single";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}
command DetailsCommandWoAll for ObjectCountsWoEntity {
   label = "Go to Structure ${DisplayText}";
   icon = "chevron-right";
   style = IconOnly;
   enabled = [AllCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Structure";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj, TreeStructure) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}

------------------------------- IMAGE VIEWERS -------------------------------
imageviewer ObjectImageViewer for EquipmentObjectList {
   label = "Equipment Object Image";
   collapsed = [false];
   scale = original;
   height = auto;
}
----------------------------- VISUAL COMPONENTS -----------------------------

-------------------------------- SINGLETONS ---------------------------------

singleton TechObjectReferenceEquipSingleton for TechnicalObjectReference {
   crudactions {
      new {
         enabled = [parent.VisibleRequirements != false and parent.VisibleRequirements != null];
      }
      delete {
         enabled = [parent.VisibleRequirements != false and parent.VisibleRequirements != null];
      }
      edit {
         enabled = [parent.VisibleRequirements != false and parent.VisibleRequirements != null];
      }
   }
   command TechSpecChangeStatusCommand {
      visible = [TechnicalClass != "" and parent.VisibleRequirements != false and parent.VisibleRequirements != null];
   }
   command TechSpecRefreshAttributesCommand {
      visible = [TechnicalClass != "" and parent.VisibleRequirements != false and parent.VisibleRequirements != null];
   }
}