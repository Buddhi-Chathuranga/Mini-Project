-----------------------------------------------------------------------------
-- Date    Sign    History
-- ------  ------  -----------------------------------------------------
-- 190330  SHEPLK  SAUXXW4-14599, Added Set Structure 'Non Operational' and Set Structure 'Operational' commands
-- 190327  LoPrlk  SAUXXW4-13052, Restructured the code that includes Cost Center and Object to remove large LOV switch.
-- 181201  HMANLK  SAUXXW4-711, Implemented Metering Invoicing Command.
-- 181016  LoPrlk  SAUXXW4-1343, Added the command CriticalityAnalysis.
-- 181010  JADASE  SAUXXW4-64, Added Operational Modes
-- 180903  CLEKLK  SAUXXW4-1278,Created file, MTG Version: 1.27, Enterprise Explorer Source: frmSerialObject,Language: en-US
-- 200101  LASSLK  SAXTEND-1244,  Implement LOV Filtering
-- 200228  LASSLK  SAZM-5002,Added the filterlabel property for CostCenterCodePartRef,ObjectCodePartRef
-- 201022  LASSLK  AM2020R1-6659, Modified dlgCopyFunctionalObject and DlgCopySerialObject
-- 210625  SHAGLK  AM21R2-1493, Modified SupMchCode field and implementing filtering
-- 220106  DmAlLK  AM21R2-3233, Added ClusterId.
-----------------------------------------------------------------------------

client SerialObject;
component EQUIP;
layer Core;
projection SerialObjectsHandling;

include fragment UserAllowedSiteLovSelector;
include fragment CustomerInfoCustcategoryPubSelector;
//include fragment CustAddressShipLovSelector;
//include fragment PersonInfoLovSelector;
//include fragment InventoryPartWoLovSelector;
//include fragment PurchasePartLovSelector;
include fragment EquipmentObjectSparePartsList;
include fragment EquipmentObjectParty4Selector;
include fragment EquipmentObjectPartyList;
//include fragment EquipmentObjectUivSelector;
include fragment EquipObjectLocationLovSelector;
//include fragment PurchasePartSupplierLovSelector;
include fragment EquipmentSerialUivSelector;
include fragment MaintenanceObjectSelector;
include fragment AccountingCodepartBSelector;
include fragment CopySerialObjectDialog;
include fragment MoveSerialObjectDialog;
include fragment EmployeeLovSelector;
include fragment EquipmentAllObjectLov1Selector;
include fragment TestPointParameters;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment BoexpTwSettings;
include fragment MediaLibraryAttachment;
include fragment MoveToInventoryDialog;
include fragment OrgCodeAllowedSiteLovSelector;

warningsenabled = EquipmentSerial;


----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ServSerialObjectNavEntry parent EquipNavigator.ServEquipmentSerialObject at index 1 {
      label = "Serial Object";
      page Form;
   }
   entry MaintSerialObjectNavEntry parent EquipNavigator.MaintEquipmentSerialObject at index 1 {
      label = "Serial Object";
      page Form home EquipmentSerial;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using EquipmentSerialSet {
   label = "Serial Object";
   startupmode = search;
   crudactions {
      before command ValidateSave;
   }
//   editmode = MultiField;
   selector EquipmentSerialSelector;
   group SerialObjectInfoGroup;

   tabs {
      tab {
         label = "General";
         arrange {
            group SerialObjectGroup;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCodePartInfoGroup;
            group TypeDesGroup;
         }
         group FunctionalObjectHasGroup;
         group GbNotesGroup;
         group GbPmProgramGroup;
      }
      tab {
         label = "Type Designation";

         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton;
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton;
            group AttributeTypeSerialGroup;
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {

            visible = [SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [SelectionParameters = "Both"];
         }
      }
      tab {
         label = "Spare Parts";
         list ObjectSparePartsList(EquipmentObjectSparePartArray);
      }
      tab {
         label = "Testpoints/Parameters";
         list TestPointsList(TestPointsarray);
         list ObjectParametersList(ParametersArray) bind TestPointsList;
      }

      tab {
         label = "Parties";
         list ObjectPartyList(EquipmentObjectPartyArray);
      }
      tab {
         label = "Technical Data";

         singleton TechnicalObjectReferenceSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechnicalObjectReferenceSingleton;
            group AttributeTypeSerialGroup;
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechnicalObjectReferenceSingleton {
            visible = [SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechnicalObjectReferenceSingleton {

            visible = [SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechnicalObjectReferenceSingleton {
            visible = [SelectionParameters = "Both"];
         }
      }
      tab {

         label = "MPB Scheduling";
         group SafeAccessGroup;
         @DynamicComponentDependency WOPS
         group DwpSchedulingGroup;
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray);
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList;
         }
      }
   }
   command ObjectNavigatorCommand;
   @DynamicComponentDependency SERCAT
   command ServiceObjectCommand;


   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupStatus1CmdGroup {
         label = "Operational Status";
         command OperationalStatusInOperationCommand;
         command OperationalStatusOutofOperationCommand;
         command OperationalStatusScrappedCommand;
         commandgroup CommandGroupStatus2CmdGroup {
            label = "Status for Structure";
            command OperationalStatusInOperationStructureCommand;
            command OperationalStatusOutofOperationStructureCommand;
            command OperationalStatusScrappedtructureCommand;
         }
      }
   }
   commandgroup CommandGroup3CmdGroup {
      commandgroup CommandGroupCondition1CmdGroup {
         label = "Operational Condition";
         command OperationalConditionSetOperationalCommand;
         command OperationalConditionSetNonOperationalCommand;
         commandgroup CommandGroupCondition2CmdGroup {
            label = "Operational Condition for Structure";
            command OperationalConditionSetOperationalStrucCommand;
            command OperationalConditionSetNonOperationalStrucCommand;
         }
      }
   }
   commandgroup CommandGroupCmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command ConnectedObjectsCommand;
         command CmdOperationalGroupsCommand;
         command CmdSafeAccessCodeCommand;
      }
   }
   command MakeMaintenanceAwareCommand;
   command CmdMeasForObjCommand;
   command ObjectWarrantyCommand;

   commandgroup CommandGroup4CmdGroup {
      commandgroup MoveCopy {
         label = "Move/Copy";
         command MoveSerialObjectCommand;
         command CopySerialObjectCommand;
         command MoveToInventoryCommand;
      }
   }
   commandgroup CommandGroup5CmdGroup {
      commandgroup SetResetLocationtoStructure {
         label = "Set/Reset Location to Structure";
         command CmdSetLocationCommand;
         command CmdResetLocationCommand;
      }
   }
   command CostDetailsCommand;
   commandgroup CommandGroup7CmdGroup {
      command SerialObjectHistoryCommand;
      command MaintenanceHistoryCommand;
      command PartSerialCommand;
   }

   command CriticalityAnalysis;
   command MeteringInvoicingCommand;

   commandgroup CommandGroup8CmdGroup {

      @DynamicComponentDependency PCMSCI
      command ServiceContractsforObjectCommand;
   }

   @DynamicComponentDependency SVCSCH
   commandgroup CommandGroup11CmdGroup {
      command SerialObjectSchedulingDetailCommand;
   }
   commandgroup CommandGroup9CmdGroup {
      commandgroup MaintenanceInformation {
         label = "Maintenance Information";
         command PMforObjectStructureCommand;
         command ActiveWorkOrdersCommand;
         command HistoricalWorkOrdersCommand;
         command CmdTasksCommand;
      }
   }
}
--------------------------------- COMMANDS ----------------------------------
command ObjectNavigatorCommand for EquipmentSerial {
   label = "Equipment Object Navigator";
   enabled = [MchCode != null and Contract != null];
   --variable VarTreeViewId Number;
   execute {
      --call GetDefTreeView() into VarTreeViewId;
      --navigate "tree/EquipmentObjectNavigator/EquipObjectNavigatorTree?$filter=TreeViewId eq $[VarTreeViewId]&treefilter=MchCodeList:$[MchCode],MchCodeContractList:$[Contract]";
      navigate "tree/EquipmentObjectStructureNavigation/EquipObjectStructureTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

@DynamicComponentDependency SERCAT
command ServiceObjectCommand for EquipmentSerial {
   label = "Service Object 360";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "tree/ServiceViewOfEquipment/SeviceViewOfEquipTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}


command ValidateSave for EquipmentSerial {
   variable VarOldMchType;
   variable VarNewMchType;
   variable VarOldType;
   variable VarNewType;
   variable VarMchTypeHasTechReference;
   variable VarOldCostCenter;
   variable VarNewCostCenter;
   variable VarOldSupMchCode;
   variable VarNewSupMchCode;

   execute {

      set VarOldMchType = OldMchType;
      set VarNewMchType = MchType;
      set ObjectHasRequirements = Requirements;
      set VarOldType = OldType;
      set VarNewType = Type;
      set VarNewCostCenter = CostCenter;
      set VarOldCostCenter = OldCostCenter;
      set VarOldSupMchCode = OldSupMchCode;
      set VarNewSupMchCode = SupMchCode;
      set VarMchTypeHasTechReference = MchTypeHasTechReference;

      if [CrudOperation = "update"] {
         if [(VarNewSupMchCode != null and(VarOldSupMchCode != VarNewSupMchCode)) and VarOldCostCenter != null and VarOldCostCenter != VarNewCostCenter] {
            alert("Existing cost center is updated.");
         }
         if [ObjectHasRequirements] {
            if [(VarOldMchType != VarNewMchType)] {

               if [VarNewMchType != null] {
                  if [VarMchTypeHasTechReference = "FALSE"] {
                     inquire("Do you want to remove Technical Data along with the replacement of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
                  else {
                     inquire("Do you want to replace Technical Data along with the replacement of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
               }
               else {
                  if [VarOldMchType != null] {
                     inquire("Do you want to remove Technical Data along with the deletion of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
               }
            }

            else {
               if [VarOldType != VarNewType] {
                  if [VarNewType != null] {
                     if [VarOldType != null] {
                        inquire("Do you want to replace Technical Data along with the replacement of the Type Designation?") {
                           when YES {
                              bulkset RemoveRequirements = "TRUE";
                           }
                           when NO {
                              bulkset RemoveRequirements = "FALSE";
                           }
                           when CANCEL {
                              exit CANCEL;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }
}

command CostDetailsCommand for EquipmentSerial {
   label = "Object Cost/Year";
   enabled = [ETag != null];
   execute {
      navigate "page/EquipObjCostPerYear/EquipObjCostPerYearForm?$filter=Contract eq $[Contract] and MchCode eq $[MchCode]";
   }
}
command CriticalityAnalysis for EquipmentSerial {
   label = "Criticality Analysis";
   enabled = [ProcessClassId != null and ItemClassId != null and CmStdId != null];
   execute {
      navigate "page/CriticalityMatrixAnalysis/Form?$filter=ProcessClassId eq $[ProcessClassId] and ItemClassId eq $[ItemClassId]";
   }
}
command ObjectWarrantyCommand for EquipmentSerial {
   label = "Warranty";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ObjectWarranty/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ConnectedObjectsCommand for EquipmentSerial {
   label = "Connected Objects";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command MakeMaintenanceAwareCommand for EquipmentSerial {
   label = "Make Maintenance Aware";
   enabled = [true];
   execute {
      navigate "page/SerialMaintenanceAware/List";
   }
}
command CmdMeasForObjCommand for EquipmentSerial {
   label = "Measurements for Object";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/MeasurementsForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

command CmdOperationalGroupsCommand for EquipmentSerial {
   label = "Set Op. Mode Groups to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      @DynamicComponentDependency OPPLAN
      assistant OperationalGroupsAssistant(EquipmentObjectSeq) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CmdSafeAccessCodeCommand for EquipmentSerial {
   label = "Set Safe Access Code to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      call SpreadSafeAccessCode();
      success("Safe Access Code successfully inherited to child objects.");
   }
}

command OperationalStatusInOperationCommand for EquipmentSerial {
   label = "In Operation";
   enabled = [OperStatus = "TRUE"];
   execute {
      call SetInOperation();
   }
}
command OperationalStatusOutofOperationCommand for EquipmentSerial {
   label = "Out of Operation";
   enabled = [OutOfOperation = "TRUE"];
   execute {
      call SetOutOfOperation();
   }
}
command OperationalStatusScrappedCommand for EquipmentSerial {
   label = "Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      call SetScrapped();
   }
}

command OperationalStatusInOperationStructureCommand for EquipmentSerial {
   label = "Set Struture In Operation";
   variable WarningTexts;
   enabled = [OperStatus = "TRUE"];
   execute {
      call SetStructureInOperation();
      call GetExistWarning(Contract, MchCode) into WarningTexts;

      if[WarningTexts = "TRUE"] {
         info("Some objects of the structure ${MchCode} were not changed due to their operational condition.");
      }
   }
}
command OperationalStatusOutofOperationStructureCommand for EquipmentSerial {
   label = "Set Struture Out of Operation";
   enabled = [OutOfOperation = "TRUE"];

   execute {
      if [IsScrapped = "TRUE" and HasStructure = "TRUE"] {
         confirm("Do you want to change the operational status of all the child objects?") {
            when OK {
               call SetStructureOutOfOperation();
            }
            when CANCEL {
               call SetOutOfOperation();
            }
         }
      }
      else {
         call SetStructureOutOfOperation();
      }
   }
}
command OperationalStatusScrappedtructureCommand for EquipmentSerial {
   label = "Set Struture Scrapped";
   enabled = [Scrapped = "TRUE"];
   execute {
      call SetStructureScrapped();
   }
}

command OperationalConditionSetOperationalCommand for EquipmentSerial {
   label = "Set Operational";
   enabled = [SetOper = "TRUE"];
   execute {
      call SetInOperative();
   }
}
command OperationalConditionSetNonOperationalCommand for EquipmentSerial {
   label = "Set Non Operational";
   enabled = [SetNonOper = "TRUE"];
   execute {
      call  SetNonOperative();
   }
}
command OperationalConditionSetOperationalStrucCommand for EquipmentSerial {
   label = "Set Structure Operational";
   enabled = [SetOper = "TRUE"];
   execute {
      call SetStructureOperational();
   }
}
command OperationalConditionSetNonOperationalStrucCommand for EquipmentSerial {
   label = "Set Structure Non Operational";
   enabled = [SetNonOper = "TRUE"];
   execute {
      call  SetStructureNonOperational();
   }
}
command CmdSetLocationCommand for EquipmentSerial {
   label = "Set Location to Structure";
   enabled = [LocationId != null];
   execute {
      confirm("Do you want to set location ${LocationId} to object structure?") {
         when OK {
            call SetLocationStructure(LocationId);
         }
      }
   }
}
command CmdResetLocationCommand for EquipmentSerial {
   label = "Reset Location for Structure";
   enabled = [MchCode != null];
   execute {
      confirm("Do you want to clear location for the object structure?") {
         when OK {
            call ResetLocationStructure();
         }
      }
   }
}
//command MoveSerialObjectCommand for EquipmentSerial {
//   label = "Move Serial Object";
//   enabled = [MchCode != null and Contract != null and SupMchCode != null and  SupContract != null and IsScrapped != "TRUE" and ReturnInFacility = "TRUE"];
//
//   execute {
//      call GetSupMchName(SupContract, SupMchCode)into SupMchName;
//
//      dialog DlgMoveIndividual(MchCode, MchName, Contract, SupMchCode, SupContract, Company, SupMchName) {
//         when OK {
//
//            success("Done");
//            refresh;
//
//         }
//
//         when CANCEL {
//            exit;
//         }
//
//      }
//
//   }
//}
command MoveSerialObjectCommand for EquipmentSerial {
   label = "Move Serial Object";
   enabled = [MchCode != null and Contract != null and IsScrapped != "TRUE" and ReturnInFacility = "TRUE"];

   execute {
      call GetSupMchName(SupContract, SupMchCode)into SupMchName;

      dialog DlgMoveIndividual(MchCode, MchName, Contract, EquipmentObjectSeq, SupMchCode, SupContract, Company, SupMchName) {
         when OK {

            success("Done");
            refresh;

         }

         when CANCEL {
            exit;
         }

      }

   }
}
command CopySerialObjectCommand for EquipmentSerial {
   label = "Copy Serial Object";
   enabled = [MchCode != null and Contract != null and ReturnInFacilityOrWorkshop = "TRUE"];
   variable PartNo;
   variable Contract;
   variable DestContract;
   variable MchCode;
   variable MchName;
   variable PartRev;
   variable SupMchCode;
   variable SupContract;
   variable DfDestSupMchCodeName;
   variable IsSerial;
   variable VarFormName Text;
   execute {
      call GetAssistantMchName(SupContract, SupMchCode)into DfDestSupMchCodeName;
      set VarFormName = "SerialObj";
      dialog DlgCopySerialObject(PartNo, Contract, Contract, MchCode, MchName, PartRev, SupMchCode, SupContract, DfDestSupMchCodeName, VarFormName, AppliedPmProgramId) into
      (Contract2, MchCode, DestContract, DestMchCode, SerialNo, PartNo, PartRev, SupMchCode, SparePart, TechData, Parameter, TestPnt, Document, Pm, Party, SupContract, IsSerial, CopySerialReturn) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command SerialObjectHistoryCommand for EquipmentSerial {
   label = "Serial Object History";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/SerialObjectHistory/List?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
@DynamicComponentDependency PCMSCI
command ServiceContractsforObjectCommand for EquipmentSerial {
   label = "Service Contracts";
   enabled = [ObjExist = "TRUE"];
   execute {
      navigate "page/ServiceContractsForObject/Form?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
command PMforObjectStructureCommand for EquipmentSerial {
   label = "PM for Object Structure";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ActiveWorkOrdersCommand for EquipmentSerial {
   label = "Active Work Orders";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ObjectWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command HistoricalWorkOrdersCommand for EquipmentSerial {
   label = "Historical Work Orders";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdTasksCommand for EquipmentSerial {
   label = "Work Tasks";
   enabled = [MchCode != null];
   execute {
      navigate "page/WorkTasks/List?$filter=ReportedObjConnLuNameDb  eq $[LuName] and ReportedObjConnRowkey eq $[Objkey]";
   }
}
command PartSerialCommand for EquipmentSerial {
   label = "Part Serial";
   enabled = [PartNo != null and SerialNo != null];
   execute {
      navigate "page/PartSerial/Form?$filter=PartNo eq $[PartNo] and SerialNo eq $[SerialNo]";
   }
}

@DynamicComponentDependency SVCSCH
command SerialObjectSchedulingDetailCommand for EquipmentSerial {
   label = "Scheduling Details";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/SvcschSerialObjectSchedulingDetail/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command MeteringInvoicingCommand for EquipmentSerial
   {
   label = "Metering Invoicing";

   execute {
      navigate  "page/MeteringInvoicing/Form?$filter=MchCode eq $[MchCode]";
   }
}
command LocationCommand {
   label = "Location";
   execute {
      navigate  "page/Location/LocationPage?$filter=LocationId eq $[LocationId]";
   }
}
command MoveToInventoryCommand for EquipmentSerial {
   label = "Move To Inventory";
   enabled = [MchCode != null and SupMchCode != null and IsSerialTracked = "SERIAL TRACKING"];
   variable WoContractVar;
   variable WoMaintOrgVar;
   variable WoDirectiveVar;
   variable WoNoVar;
   execute {
      call GetDefContract() into WoContractVar;
      dialog DlgMoveToInventory(MchCode, Contract, WoContractVar)
      into(MchCode, Contract, WoNoVar, WoContractVar, WoMaintOrgVar, WoDirectiveVar)
         {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command MaintenanceHistoryCommand for EquipmentSerial {
   label = "Maintenance History";
   execute {
      navigate "page/MaintenanceHistoryForObject/MaintenanceHistoryPage?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector SupplierInfoSelector for SupplierInfo {
   label = "${SupplierId}";
   static SupplierId {
      label = "Supplier ID";
   }
   static Name;
}

@Override
selector ReferenceManufacturerInfoSelector for ManufacturerInfo {
   label = "";
   static ManufacturerId {
      label = "Manufacturer ID";
   }
   static Name;
   static AssociationNo;
}

@Override
selector EquipmentSerialSelector for EquipmentSerial {
   label = "${MchCode} - ${MchName} - ${Contract}";
   static EquipmentObjectSeq {
      visible = [false];
      searchable = false;
   }
   static MchCode;
   static Contract;
   static MchName;
}
@Override
selector ReferenceEquipmentSerialUivSelector for EquipmentSerial {
   field Contract;
   field MchCode;
   field MchName;
   field MchLoc;
}
@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}

@Override
selector PartCatalogSelector for PartCatalog {
   static PartNo;
   static Description;
   static SerialTrackingCode;
}

@Override
selector ReferenceSupplierInfoSelector for SupplierInfo {
   static SupplierId {
      label = "Supplier ID";
   }
   static Name;
   static AssociationNo {
      visible = [false];
   }
   static SuppliersOwnId {
      visible = [false];
   }
   static CorporateForm {
      visible = [false];
   }
}

@Override
selector ReferenceEquipmentAllObjectUivSelector for EquipmentAllObjectUiv {
   static EquipmentObjectSeq {
      visible = [false];
      searchable = false;

   }
   static Contract;
   static MchCode;
   static MchName;
   static EquipmentMainPosition {
      visible = [false];
   }
   static ObjLevel;
   static OperationalStatus;
}

@Override
selector ReferenceItemClassSelector for ItemClass {
   static ItemClassId;
   static ItemClassDesc {
      label = "Item Class Name";
   }
   static ParentItemClassId {
      visible = [false];
   }
   static Notes {
      visible = [false];
   }
   badge Objstate;
}

@Override
selector ReferenceProcessClassSelector for ProcessClass {
   static ProcessClassId;
   static ProcessClassDesc {
      label = "Description";
   }
   static ParentProcessClassId {
      visible = [false];
   }
   static Notes {
      visible = [false];
   }
   badge Objstate;
}

@Override
selector ReferenceAccountingCodePartValueSelector for AccountingCodePartValue {
   static CodePartValue {
      label = "${FetchCostCenter}";
   }
   static MasterComCodePartValue {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group SerialObjectInfoGroup for EquipmentSerial {
   label = "";
   field MchCode {
      size = Medium;
   }
   field MchName {
      size = Medium;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      preview = UserAllowedSiteLovCard;
      size = Small;
      validate command {
         variable Resultrec {
            type = LogicalCodePartValues;
         }
         execute {
            call GetLogicalCodePartValues(Contract) into Resultrec;
            set FetchCostCenter = Resultrec.FetchCostCenter;
            set CostCenterCodePart = Resultrec.CostCenterCodePart;
            set HideCostCenter = Resultrec.HideCostCenter;
            set FetchObjectNo = Resultrec.FetchObjectNo;
            set ObjectCodePart = Resultrec.ObjectCodePart;
            set HideObjectNo = Resultrec.HideObjectNo;
            if[Contract != null] {
               call GetCompany(Contract) into Company;
            }
         }
      }
   }
   field LuName {
      visible = [false];
   }

   field KeyRef {
      visible = [false];
   }
   badge OperationalStatus {
      style = TextOnly;
      size = Small;
      emphasis StatePlanned = [OperationalStatus = "PlannedForOperation"];
      emphasis StateStopped = [OperationalStatus = "OutOfOperation"];
      emphasis StateObsolete = [OperationalStatus = "Scrapped"];
      emphasis Complementary9 = [OperationalStatus = "InOperation"];
      emphasis Off = [OperationalStatus = "NotApplicable"];
      emphasis StatePreliminary = [OperationalStatus = "Designed"];
      emphasis StateChanged = [OperationalStatus = "Renamed"];
   }
   badge OperationalCondition {
      style = TextOnly;
      size = Small;
      emphasis Complementary1 = [OperationalCondition = "Operational"];
      emphasis Complementary2 = [OperationalCondition = "NonOperational"];
      emphasis Complementary3 = [OperationalCondition = "NotApplicable"];
   }
}

group LocationandPositionGroup for EquipmentSerial {
   label = "Position and Location";
   collapsed = [true];
   field MchLoc {
      size = Small;
   }
   field MchPos {
      size = Small;
   }
   lov LocationCardRef with ReferenceEquipObjectLocationLovSelector {
      search = LocationId, Name;
      size = Medium;
      label = "Location";
      preview = EquipObjectLocationLovCard1;
      description = LocationRef.Name;
   }
}
group PartInfoGroup for EquipmentSerial {
   label = "Part Information";
   lov PartNoRef with PartCatalogSelector using GetPartNos {
      search = PartNo, Description;
      size = Medium;
   }
   field SerialNo {
      size = Small;
   }
//   field MchSerialNo;
   field PartRev {
      size = Small;
   }
   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      size = Medium;
      label = "Supplier";
      description = SupplierInfoRef.Name;
   }
   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilter(PartNo) {
               search = ManufacturerNo, Name;
               description = PartManufacturerRef.Name;
            }
         }

         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufacturerId, Name;
               description = ManufacturerNoRef.Name;
            }
         }
      }
   }
   field ManufacturedDate {
      label = "Manufacture Date";
   }

   field Ownership {
      size = Small;
   }
   field Owner {
      size = Small;
      editable = [(Ownership = "CustomerOwned" or Ownership = "SupplierLoaned" or Ownership = "SupplierRented") and(Owner != original.Owner or original.Owner = null)];
      lovswitch {
         when[Ownership = "CustomerOwned"] {
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               preview = CustomerInfoCustcategoryPubCard;
            }
         }
         when[Ownership = "SupplierLoaned" or Ownership = "SupplierRented"] {
            lov SupplierInfoRef with SupplierInfoSelector {
               search = SupplierId, Name;


            }
         }
      }
   }
}
group GbCodePartInfoGroup for EquipmentSerial {
   label = "Code Part Info";
   collapsed = [true];

   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchCostCenter}";
      filterlabel = "Cost Center";
      size = Medium;
      searchable = true;
      visible = [HideCostCenter = "TRUE"];
      description = CostCenterCodePartRef.Description;
   }

   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchObjectNo}";
      filterlabel = "Object";
      visible = [HideObjectNo != null];
      size = Medium;
      searchable = true;
      description = ObjectCodePartRef.Description;
   }

}

group TypeDesGroup for EquipmentSerial {
   label = "Type Designation Has ";
   collapsed = [true];
   field Requirements2 {
      size = Small;
      label = "Technical Data";
   }
   field Documents2 {
      size = Small;
   }
}
group FunctionalObjectHasGroup for EquipmentSerial {
   label = "Serial Object Has";

   field Requirements {
      size = Small;
      label = "Technical Data";
   }
   field SpareParts {
      size = Small;
   }
   field Warranty {
      size = Small;
   }
   field Documents {
      size = Small;
   }
   field Connections {
      size = Small;
   }
   field TestPoints {
      size = Small;
   }
   field Parties {
      size = Small;
   }
   field Notes {
      size = Small;
   }
   field ToolEquipment {
      size = Small;
   }
}

group SerialObjectGroup for EquipmentSerial {
   label = "General";
   field SupMchCode {

      label = "Belongs to Object";
      size = Medium;
      editable = [FuncObjectSeqSaved = null];
      lovswitch {
         when [ToolEquipment = true] {
            lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
               search = MchCode, MchName;
               preview = MaintenanceObjectCard;
               validate command {
                  variable ValidateSupMchCodeReturn
                     {
                     type = Structure(ValidateSupMchCodeReturn);
                  }
                  execute {
                     call ValidateSupMchCode(SupContract, SupMchCode) into ValidateSupMchCodeReturn;
                     set MchLoc = ValidateSupMchCodeReturn.MchLoc;
                     set MchPos = ValidateSupMchCodeReturn.MchPos;
                     set CostCenter = ValidateSupMchCodeReturn.CostCenter;
                     set ObjectNo = ValidateSupMchCodeReturn.ObjectNo;
                     set LocationId = ValidateSupMchCodeReturn.LocationId;
                     set FunctionalObjectSeq = SupMchCodeRef.EquipmentObjectSeq;
                  }
               }
            }
         }
         when [ToolEquipment = false or ToolEquipment = null] {
            lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
               search = MchCode, MchName;
               preview = MaintenanceObjectCard;
               validate command {
                  variable ValidateSupMchCodeReturn
                     {
                     type = Structure(ValidateSupMchCodeReturn);
                  }
                  execute {

                     call ValidateSupMchCode(SupContract, SupMchCode) into ValidateSupMchCodeReturn;
                     set MchLoc = ValidateSupMchCodeReturn.MchLoc;
                     set MchPos = ValidateSupMchCodeReturn.MchPos;
                     set CostCenter = ValidateSupMchCodeReturn.CostCenter;
                     set ObjectNo = ValidateSupMchCodeReturn.ObjectNo;
                     set LocationId = ValidateSupMchCodeReturn.LocationId;
                  }
               }
            }
         }
      }
   }
   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      preview = UserAllowedSiteLovCard;
      size = Small;
      editable = [FuncObjectSeqSaved = null];
   }
   lov TypeRef with TypeDesignationSelector using GetTypeDesignations(MchType) {
      search = Type, Description;
      size = Medium;
      description = TypeRef.Description;
      validate command
         {
         variable Resultrec {
            type = TypeDesValues;
         }

         execute {
            if [Type != null] {
               call GetTypeDesignationValues(Type) into Resultrec;
               set MchType = Resultrec.MchType;
               if [Resultrec.ItemClass != null] {
                  set ItemClassId = Resultrec.ItemClass;
               }
            }
         }
      }
   }
   lov MchTypeRef with ReferenceEquipmentObjTypeSelector {
      search = MchType, Description;
      size = Small;

      description = MchTypeRef.Description;

      validate command {
         variable TempMchType;
         variable GetItemClass;
         execute {
            call HasMchTypeTechSpec(MchType) into MchTypeHasTechReference;
            call GetItemClassId(MchCode, Contract, MchType) into GetItemClass;
            set ItemClassId = GetItemClass;
            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchType;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }
            }
         }
      }
   }
   field OldMchType {
      visible = [false];
   }
   field OldType {
      visible = [false];
   }
   field OldCostCenter {
      visible = [false];
   }
   field OldSupMchCode {
      visible = [false];
   }
   lov CategoryIdRef with ReferenceEquipmentObjCategorySelector {
      search = CategoryId, Description;
      size = Small;
   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Small;
   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Medium;
      description = CriticalityRef.Description;
   }

   field ProductionDate;
   field SerialState {
      size = Medium;
   }
   field LatestTransaction {
      size = Large;
   }

   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Medium;
      description = ItemClassIdRef.ItemClassDesc;
   }
   lov ProcessClassRef with ReferenceProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      label = "Process Class";
      description = ProcessClassRef.ProcessClassDesc;
   }
}
group GbNotesGroup for EquipmentSerial {
   label = "Free Notes";
   collapsed = [true];
   field Note {
      size = Large;
      multiline = true;
      showlabel = false;

   }
}
group GbPmProgramGroup for EquipmentSerial {
   collapsed = [true];
   label = "PM Program";

   @DynamicComponentDependency PCMSTD
   lov AppliedPmProgramIdRef with ReferencePmProgramSelector {
      search = PmProgramRev, Description;
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field AppliedPmProgramDescription {
      size = Medium;
      editable = [false];
   }
   field AppliedPmProgramRev {
      size = Small;
      label = "Revision";
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   badge Status {
      style = TextOnly;
      size = Small;
      emphasis StatePreliminary = [Status = "Preliminary"];
      emphasis StateActive = [Status = "Active"];
      emphasis StateObsolete = [Status = "Obsolete"];
   }
   field AppliedDate {
      size = Medium;
   }
   @DynamicComponentDependency PCMSTD
   field DateModified {
      size = Small;
   }
   field PmProgApplicationStatus {
      size = Small;
      required = [true];
   }
   field NotApplicableReason {
      editable = [false];
   }
   field NotApplicableSetDate {
      size = Small;
      editable = [false];
   }
   field NotApplicableSetUser {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
}

group TypeDesignationGroup for TypeDesignation {
   label = "Type Designation";

   field Type {
      size = Medium;
   }
   field Description {
      size = Large;
   }
}

group AttributeTypeSerialGroup for EquipmentSerial {
   label = "Attribute Type - ${SelectionParameters}";

   radiogroup SelectionParameters {
      showlabel = false;
      size = FullWidth;

   }
}
group SafeAccessGroup for EquipmentSerial {
   label = "";
   field SafeAccessCode;
}

@DynamicComponentDependency WOPS
group DwpSchedulingGroup for EquipmentSerial {
   label = "";
   lov DwpClusterIdRef with WopsObjectClusterSelector {
      description = DwpClusterIdRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------

@DynamicComponentDependency OPPLAN
list ObjectOperModeGroupList for ObjectOperModeGroup {
   label = "Operational Mode Groups";
   lov OperModeGroupIdRef with ReferenceOperationalModeGroupSelector {
      search = OperModeGroupId, Description;
      description = OperModeGroupIdRef.Description;
   }
   field Inherited {
      size = Small;
   }
}

@DynamicComponentDependency OPPLAN
list GroupConnectedModeList for OperModeGroupConnect {
   label = "Operational Modes";
   lov OperModeIdRef with ReferenceOperationalModeSelector {
      search = OperModeId, Description;
      size = Small;
   }
   field OperModeIdRef.Description {
      label = "Operational Mode Description";
   }
   field OperModeGroupId;
}
@Override
list EquipmentAllObjectUivLovList for EquipmentAllObjectUiv {
   label = "";
   static Contract;
   static MchCode;
   static MchName;
   static EquipmentMainPosition;
   static ObjLevel;
   static IsCategoryObject;
   static OperationalStatus;
}
----------------------------------- CARDS -----------------------------------
card EquipObjectLocationLovCard1 for EquipObjectLocationLov {
   label = "${Name}";
   field LocationId;
   markdowntext {
      visible = [true];
      text =
      "---------  ----------
      ${Address1} ${Address2}
      ${ZipCode} ${City}
      ${CountryCode} ${County}";
   }
   command LocationCommand;

}
---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

-------------------------------- SINGLETONS ---------------------------------

singleton TypeDesignationSingleton for TypeDesignation {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
}

singleton TypeDesTechnicalObjRefSingleton for TechnicalObjectReference {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   command TechSpecChangeStatusCommand;
   command TechSpecRefreshAttributesCommand;
}
----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
imageviewer ObjectImageViewer for EquipmentSerial {
   label = "Serial Object Image";
   collapsed = [false];
   scale = original;
   height = small;
}
