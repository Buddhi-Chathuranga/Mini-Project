--------------------------------------------------------------------------------------
-- Date    Sign    History
-- ------  ------  ---------------------------------------------------------------
-- 200908  deeklk  AM2020R1-5850, Created.
-------------------------------------------------------------------------------------
client UploadMeasurements;
component EQUIP;
layer Core;
projection UploadMeasurementsHandling;
description "Assistant for Uploading Bulk Measurements from an Excel(.csv) Template";

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry MaintMeasurementsforObjectNavEntry parent EquipNavigator.MaintEquipmentMeasurements at index 300 {
      label = "Upload Measurements";
      assistant DataImportAssistant;

   }
}
-------------------------------- MAIN PAGES ---------------------------------
assistant DataImportAssistant using EquipmentObjectMeasurementSet {
   label = "Upload Measurements";
   savemode = OnLostFocus;

   steps {
      step {
         label = "Download Template";
         markdowntext {
            text = "#### Click on **Download Template** to download the **Excel Template** or Click **Next** to start **Uploading Measurements**.";
         }
         command DownloadTemplateCommand;
      }
      step {
         label = "Upload Data";
         fileselector {
            multifile = [false];
            init command {
               execute {
                  set component.UploadQueue.AcceptedExtensions = ".CSV";
               }
            }
            label = "Browse CSV";
         }
         next command {
            enabled = [not component.UploadQueue.IsEmpty];
            execute {
               call GetObjKey() into Objkey;
               upload "EquipmentObjectMeasurementSet(Objkey=$[Objkey])/FileData";
               call ImportMeasurementsAction(Objkey);
            }
         }

      }
      step {
         label = "Validate Data";
         list MeasurementErrorList(UploadedDataSet);
      }
      final step {
         markdowntext {
            visible = [ErrorCount = 0];
            text = "### **Success!**";
            emphasis Success = [true];
         }
         markdowntext {
            visible = [RowCount = 0 and ErrorCount != 0];
            text = "### **Failed!**";
            emphasis Error = [true];
         }
         markdowntext {
            visible = [ErrorCount = 0];
            text = "#### **${RowCount}** Record(s) has successfully been uploaded.";
         }
         markdowntext {
            visible = [RowCount != 0 and ErrorCount != 0];
            text = "#### **${RowCount}** Record(s) has successfully been uploaded and **${ErrorCount}** Record(s) with errors listed below.";
         }
         markdowntext {
            visible = [RowCount = 0 and ErrorCount != 0];
            text = "#### **${ErrorCount}** Record(s) failed and listed below.";
         }
         list ActualMeasurementErrorList(ErrorDataSet) {
            visible = [ErrorCount != 0];
         }
         command MeasurementsCommand;

      }
      cancelled step {
         description = "The Assistant Was Cancelled.";
      }
   }
   finish command {
      enabled = [component.DataImportAssistant.ActiveStep = 3 and component.MeasurementErrorList.RowCount != 0];

      variable ImportedResult Structure(ImportedResultStr);

      execute {
         call ImportToMeasurements(Objkey) into ImportedResult;
         set ImportLog = ImportedResult.ImportLog;
         set RowCount = ImportedResult.RowCount;
         set ErrorCount = ImportedResult.ErrorCount;

         if [ImportedResult.RowCount != 0 and ImportedResult.ErrorCount != 0] {
            info("Import Finished. Check Error Log.");
         }

         if [ImportedResult.RowCount = 0 and ImportedResult.ErrorCount != 0] {
            error("All Imports Failed. Check Error Log.");
         }

         if [ImportedResult.RowCount != 0 and ImportedResult.ErrorCount = 0] {
            success("All Imports Succeeded");
         }
      }
   }
   cancel command {
      execute {
         confirm("Do you really want to quit the Assistant?") {
            when OK {
               call DeleteVirtualRecords(Objkey);
               exit;

            }
         }
      }
   }

   restart command {
      label = "New Upload";
      style = TextOnly;
   }
}

--------------------------------- COMMANDS ----------------------------------
command DownloadTemplateCommand {
   label = "Download Template";
   mode = Global;
   execute {
      call DownloadTemplate() into Objkey {
         when SUCCESS {
            download FileData from CSVVirtualSet(Objkey);
         }
      }
      set Objkey = null;
   }
}

command MeasurementsCommand {
   label = "Measurements";
   execute {
      navigate "page/Measurements/Measurements";

   }
}

--------------------------------- SELECTORS ---------------------------------


---------------------------------- GROUPS -----------------------------------


----------------------------------- LISTS -----------------------------------
list MeasurementErrorList for ErrorListVirtual {
   label = "Error List";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [true];
      }
      delete {
         enabled = [true];
      }
   }
   badge Status {
      size = Small;
      emphasis Error = [Status = "Error"];
      emphasis StateDefined = [Status = "Warning"];
      emphasis Success = [Status = "Valid"];
      editable = [false];
   }
   field ErrorMessage {
      label = "Description";
      size = Large;
      multiline = true;
      editable = [false];
   }
   field Contract {
      required = [true];
   }
   field MchCode {
      required = [true];
   }
   field MchCodeDesc {
      editable = [false];
   }
   field TestPointId {
      required = [true];
   }
   field TestPointDesc {
      editable = [false];
   }
   field ParameterCode {
      required = [true];
   }
   field ParameterDesc {
      editable = [false];
   }
   field RegDate {
      required = [true];
   }
   field Remark;
   field MeasurementType {
      editable = [false];
   }
   field MeasurementNote;
   field RecordedValue {
      required = [true];
   }
   field MeterId;
}

list ActualMeasurementErrorList for ActualErrorListVirtual {
   label = "Error List";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   badge Status {
      size = Small;
      emphasis Error = [Status = "Error"];
      emphasis Success = [Status = "Valid"];
   }
   field ErrorMessage {
      label = "Error Message";
      multiline = true;
   }
   field Contract;
   field MchCode;
   field MchCodeDesc {
      editable = [false];
   }
   field TestPointId;
   field TestPointDesc {
      editable = [false];
   }
   field ParameterCode;
   field ParameterDesc {
      editable = [false];
   }
   field RegDate;
   field Remark;
   field MeasurementType {
      editable = [false];
   }
   field MeasurementNote;
   field RecordedValue;
   field MeterId;

}

---------------------------------- DIALOGS ----------------------------------


-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------

