--  -------------------------------------------------------------------------
--  *** Below fragments are required to work this fragment properly ***
--      1. SetMeterRollOverValueAssistant
--
--  -------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Date        Sign      History
-- ----------  ------   -----------------------------------------------------
-- 2018-10-16  DHWELK   SAUXXW4-1281,Created file, MTG Version: 1.31,frmTestPointsParams - Testpoints and Parameters
-- 2020-01-06  LASSLK   SAXTEND-1244, Implement LOV Filtering
-- 2020-03-13  LASSLK   SAXTEND-1980, Handle Duplicate in Aurena
-- 2020-03-26  LASSLK   AMZEAX-7,Change the lable Last value to Total Value
-- 2021-01-27  THWCLK   AM2020R1-7271,Bug 157092, Modified ObjectParametersList List.
-- 2021-02-05  DEEKLK   AM2020R1-7402, Modified ObjectParametersList List changed BlockedForUse to BlockedForUseDb.
-- 2022-01-11  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                  and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------


fragment TestPointParameters;
component EQUIP;
layer Core;
description "Testpoints/Parameters";

----------------------------- CLIENT FRAGMENTS ------------------------------

command CmdFlipValueCommand for EquipmentObjectParam {
   label = "Set Meter Roll-over Value";
   enabled = [ParamTypeDb = "A" and BlockedForUseDb != true];
   execute {
      assistant ChangeMeterFlipValueAssistant(Contract, MchCode, MchCodeRef.MchName, ParameterCode, ParameterDescription, TestPointId, TestPntSeq, UnitCode) {
         when OK {
            refresh;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command CmdMeterChangeCommand for EquipmentObjectParam {
   label = "Setup/Change Meter";
   enabled = [(MeterIDRequiredDb != "NU") and(BlockedForUseDb != true)];
   variable InputData Structure(ChangeMeterStructure);
   execute {
      call GetMeasInputData(TestPntSeq, ParameterCode) into InputData;
      assistant ChangeMeterAssistant(InputData) {
         when OK {
            refresh;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command CmdMeasForObjCommand for EquipmentObjectParam {
   label = "Measurements for Object";
   enabled = [BlockedForUseDb != true];

   execute {
      navigate "page/MeasurementsForObject/Form?$filter=Contract eq $[Contract] and MchCode eq $[MchCode]";


   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------
list TestPointsList for EquipmentObjectTestPnt {
   label = "Test Points";
   editmode = SingleRowEdit;
   multiselect = [false];

   field TestPointId {
      size = Small;
      label = "Test Point ID";
   }
   field Description {
      size = Medium;
   }
   field Location {
      size = Medium;
   }
   field Contract {
      columnexclude = [true];
   }
   field MchCode {
      columnexclude = [true];
   }
   field TestPntSeq {
      columnexclude = [true];
   }
   field LuName {
      columnexclude = [true];
   }
}

list ObjectParametersList for EquipmentObjectParam {
   label = "Parameters";

   lov ParameterCodeRef with ReferenceMeasurementParameterSelector {
      search = ParameterCode, Description;
      size = Small;
   }
   field ParameterDescription {
      size = Small;
   }
   field TestPntSeq {
      columnexclude = [true];
   }
   field TestPointId {
      columnexclude = [true];
   }
   lov UnitCodeRef with ReferenceIsoUnitSelector {
      search = UnitCode, Description;
      size = Small;
   }
   field PmCriteria {
      size = Small;
   }
   field LastValue {
      label = "Total Value";
   }
   field RegDate {
      label = "Last Measured Date/Time";
   }
   field CalStartDate {
      label = "Calculation Start Date";
   }
   field MchCode {
      columnexclude = [true];
   }
   field MeasurementParameterRef.MeterIdRequired {
      size = Small;
      label = "Meter ID Required";
   }
   field MeterID {
      size = Small;
   }
   field MeterFlipValue;
   field BlockedForUseDb {
      size = Small;
   }
   field ResourceSeq {
      columnexclude = [true];
   }
   field LuName {
      columnexclude = [true];

   }

   commandgroup CommandGroupCmdGroup {

      command CmdFlipValueCommand;
      command CmdMeterChangeCommand;
      command CmdMeasForObjCommand;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset EquipmentObjectTestPntSet for EquipmentObjectTestPnt;
entityset EquipmentObjectParamSet for EquipmentObjectParam;

@Override
entity EquipmentObjectTestPnt {
   keys = TestPntSeq;
   //ludependencies = EquipmentObjectParam;

   attribute TestPntSeq Number {
      label = "Testpoint Sequence";
   }
   attribute TestPointId Text {
      label = "Test Point ID";
   }
   attribute Description Text {
      label = "Test Point Description";
   }
   attribute Contract Text {
      label = "Site";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }


   reference MchCodeRef(Contract, MchCode) to EquipmentObject(Contract, MchCode) {
      label = "Object ID";
      copy EquipmentObjectSeq to EquipmentObjectSeq;
   }
   reference ResourceSeqRef(ResourceSeq) to ResourceEquipmentSiteConn(ResourceSeq) {
      label = "Resource Seq";
   }
   array ParametersArray(TestPntSeq, TestPointId) to EquipmentObjectParam(TestPntSeq, TestPointId);
}
@Override
entity EquipmentObjectParam {
   keys = TestPntSeq, ParameterCode;

   from = "EQUIP_OBJ_PARAM";
   attribute TestPntSeq Number {
      editable = [false];
   }
   attribute TestPointId Text {
      label = "Test Point ID";

   }
   attribute ParameterDescription Text {
      maxlength = 2000;
   }
   attribute UnitCode Text {
      label = "UoM";
   }
   attribute PmCriteria Enumeration(PmCriteria) {
      label = "Criterion";
   }
   attribute LastValue Number {
      label = "Total Value";
      editable = [false];
   }
   attribute RegDate Timestamp {
      label = "Last Measured Date/Time";
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      // searchable = false;
      editable = [false];
   }
   attribute MchCode Text {
      // searchable = false;
      editable = [false];
   }
   attribute MeterID Text {
      fetch = "Equipment_Object_Meas_API.Get_Meter_Id(Equipment_Object_Meas_API.Get_Seq_For_Latest_Measured(test_pnt_seq,parameter_code))";
      label = "Meter ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute MeterFlipValue Number {
      editable = [false];
   }
   attribute BlockedForUseDb Boolean("TRUE", "FALSE") {
      fetch = "blocked_for_use_db";
      label = "Blocked for Use";
      required = [true];
   }
   attribute LuName Text {
      // searchable = false;
      editable = [false];
   }
   attribute ParamTypeDb Text {
      fetch = "Measurement_Parameter_API.Get_Measurement_Param_Type_Db(PARAMETER_CODE)";
      label = "Parameter Type DB";
      editable = [false];

   }
   attribute MeterIDRequiredDb Text {
      fetch = "Measurement_Parameter_API.Get_Meter_Id_Required_Db(PARAMETER_CODE)";
      label = "Meter ID Required DB";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   reference MeasurementParameterRef(ParameterCode) to MeasurementParameter(ParameterCode);
   reference TestPntSeqRef(TestPntSeq) to EquipmentObjectTestPnt(TestPntSeq) {
      label = "Test Pnt Seq";
   }

   reference TestPointIdRef(Contract, MchCode, TestPointId) to EquipmentObjectTestPnt(Contract, MchCode, TestPointId) {
      label = "Test Points";
   }
   reference ParameterCodeRef(ParameterCode) to MeasurementParameter(ParameterCode) {
      label = "Parameter ID";
      copy Description to ParameterDescription;

   }
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference MchCodeRef(MchCode, Contract) to EquipmentObject(MchCode, Contract) {
      label = "Object ID";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetMeasInputData Structure(ChangeMeterStructure) {
   parameter TestPntSeq Number;
   parameter ParameterCode Text;
}