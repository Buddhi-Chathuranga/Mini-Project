-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  190405  SHEPLK  SAUXXW4-13331, Modified ObjectNavigatorCommand.
--  190328  CLEKLK  SAUXXW4-15262, Added CharPublicContainerFuncObjGroup
--  190222  LoPrlk  SAUXXW4-13051, Done some changes related to performance enhancements.
--  181201  HMANLK  SAUXXW4-711, Implemented Metering Invoicing Command.
--  181016  LoPrlk  SAUXXW4-1343, Revised the enabling condition of the command CriticalityAnalysis.
--  181010  JADASE  SAUXXW4-64, Added Operational Modes
--  180823  ISHHLK  SAUXXW4-1276 Added frmObjectWarranty - Warranty.
--  180809  ISHHLK  SAUXXW4-1301 Added tbwObjectSpareParts - Object Spare Part.
--  180809  LoPrlk  SAUXXW4-1261, Added the command CostDetailsCommand.
--  180803  SHEPLK  SAUXXW4-1646 Added tbwObjectParty - Object Party.
--  180725  CLEKLK  SAUXXW4-1234 Modified dlgCopyFunctionalObject
--  180719  SHEPLK  SAUXXW4-1643 tbwObjectJournal - Object Journal generated from MTG 1.23
--  180702  SHEPLK  SAUXXW4-1608 frmFunctionalObject - Functional Object generated from MTG 1.23
--  200102  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  200228  LASSLK  SAZM-5002,Added the filterlabel property for CostCenterCodePartRef,ObjectCodePartRef
--  200924  LASSLK  AM2020R1-5251, Modified ObjectImageViewer with property media
--  201020  LASSLK  AM2020R1-6659,Modified dlgCopyFunctionalObject
--  210105  DEEKLK  AM2020R1-7134, Moved command definition OpenDlgMoveFunctional to fragment MoveFunctionalObjectDialog.
--  210503  MAABSE  TEAURENAFW-5243, Modified ObjectImageViewer to use new marble.
--  210708  RUSSLK  AM21R2-2103,Introduced EquipmentObjLevelSelector and Changed the selector of ObjLevelRef lov to EquipmentObjLevelSelector.
--  211004  JIHALK  AMZEAX-697, Modidfied FunctionalObjectGroup MchTypeRef LOV.
--  220106  DmAlLK  AM21R2-3233, Added ClusterId.
--  220111  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                  and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------
client FunctionalObject;
component EQUIP;
layer Core;
projection FunctionalObjectHandling;
include fragment EquipmentFunctionalLovSelector;
include fragment MoveFunctionalObjectDialog;
include fragment CopyFunctionalObjectDialog;

include fragment EquipmentObjectPartyList;
include fragment EquipmentObjectUivSelector;
include fragment EquipmentObjectParty4Selector;
@DynamicComponentDependency ORDER
include fragment CustAddressShipLovSelector;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment PersonInfoLovSelector;
@DynamicComponentDependency INVENT
include fragment InventoryPartWoLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLovSelector;
include fragment EquipmentObjectSparePartsList;
include fragment EquipObjectLocationLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment TestPointParameters;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment BoexpTwSettings;
include fragment EquipmentFunctionalPerfQuery;
include fragment MediaLibraryAttachment;

warningsenabled = EquipmentObjectSpare;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ServFunctionalObjectNavEntry parent EquipNavigator.ServEquipmentFunctionalObject at index 1 {
      label = "Functional Object";
      page Form;
   }
   entry MaintFunctionalObjectNavEntry parent EquipNavigator.MaintEquipmentFunctionalObject at index 1 {
      label = "Functional Object";
      page Form home EquipmentFunctional;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using EquipmentFunctionalSet {
   label = "Functional Object";
   startupmode = search;
   crudactions {
      before command ValidateRequirements;
   }

   selector EquipmentFunctionalSelector;
   group FunctionalObjectInfoGroup;

   tabs {
      tab {
         label = "General";
         arrange {
            group FunctionalObjectGroup;
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         group LocationandPositionGroup;
         group PartInfoGroup;
         arrange {
            group GbCode_Part_InfoGroup bind EquipmentFunctionalSelector;
            group TypeDesGroup;
         }
         group FunctionalObjectHasGroup;
         arrange {
            group GbStructuresGroup;
            group GbNotesGroup;
         }
         group GbPmProgramGroup;
      }
      tab {
         label = "Type Designation";
         singleton TypeDesignationSingleton(TypeDesignationArray);
         group TypeDesignationGroup bind TypeDesignationSingleton;
         singleton TypeDesTechnicalObjRefSingleton(TypeDesObjectReferenceArray) bind TypeDesignationSingleton;
         arrange {
            group CharPublicContainerGroup bind TypeDesTechnicalObjRefSingleton;
            group AttributeTypeGroup;
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TypeDesTechnicalObjRefSingleton {

            visible = [SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TypeDesTechnicalObjRefSingleton {
            visible = [SelectionParameters = "Both"];
         }
      }
      tab {
         label = "Spare Parts";
         list ObjectSparePartsList(EquipmentObjectSparePartArray);
      }
      tab {
         label = "Testpoints/Parameters";
         list TestPointsList(TestPointsarray);
         list ObjectParametersList(ParametersArray) bind TestPointsList;
      }
      tab {
         label = "Journal";
         list ObjectJournalList(EquipmentObjectJournalArray);
      }
      tab {
         label = "Parties";
         list ObjectPartyList(EquipmentObjectPartyArray);
      }
      tab {
         label = "Requirements";

         singleton TechnicalObjectReferenceSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechnicalObjectReferenceSingleton;
            group AttributeTypeGroup;
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechnicalObjectReferenceSingleton {
            visible = [SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechnicalObjectReferenceSingleton {

            visible = [SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechnicalObjectReferenceSingleton {
            visible = [SelectionParameters = "Both"];
         }
      }
      tab {
         label = "MPB Scheduling";
         group SafeAccessGroup;
         @DynamicComponentDependency WOPS
         group DwpSchedulingGroup;
         arrange {
            @DynamicComponentDependency OPPLAN
            list ObjectOperModeGroupList(OperationalModeGroupsArray);
            @DynamicComponentDependency OPPLAN
            list GroupConnectedModeList(OperationalModesArray) bind ObjectOperModeGroupList;
         }
      }
   }


   command ObjectNavigatorCommand;

   @DynamicComponentDependency SERCAT
   command ServiceObjectNavCommand;


   commandgroup CommandGroup1CmdGroup {
      commandgroup CommandGroupOperationalStatus {
         label = "Operational Status";
         command OperationalStatusInOperationCommand;
         command OperationalStatusOutofOperationCommand;
         command OperationalStatusScrappedCommand;
         commandgroup CommandGroupStatusforStructure {
            label = "Status for Structure";
            command OperationalStatusInOperationforStructureCommand;
            command OperationalStatusOutOfOperationforStructureCommand;
            command OperationalStatusScrappedforStructureCommand;
         }
      }
   }
   commandgroup CommandGroup2CmdGroup {
      commandgroup CommandGroupStructures {
         label = "Structures/Connections";
         command ConnectedObjectsCommand;
         command StructureCommand;
         command CmdOperationalGroupsCommand;
         command CmdSafeAccessCodeCommand;
      }
   }
   commandgroup Commandgroup8Name {

      command CmdMeasForObjCommand;
   }
   command ObjectWarrantyCommand;
   commandgroup CommandGroup5CmdGroup {
      commandgroup MoveCopy {
         label = "Move/Copy";
         command OpenDlgMoveFunctional;
         command CopyFunctionalObjectCommand;
      }
   }
   commandgroup CommandGroup3CmdGroup {
      commandgroup SetResetLocationtoStructure {
         label = "Set/Reset Location to Structure";
         command CmdSetLocationCommand;
         command CmdResetLocationCommand;
      }
   }
   command CostDetailsCommand;
   @DynamicComponentDependency PLADES
   command DesignObjectInformationCommand;

   command MeteringInvoicingCommand;
   command CriticalityAnalysis;

   commandgroup CommandGroup4CmdGroup {

      @DynamicComponentDependency PCMSCI
      command ServiceContractsforObjectCommand;
   }
   @DynamicComponentDependency SVCSCH
   commandgroup CommandGroup7CmdGroup {

      command FunctionalObjectSchedulingDetailCommand;
   }
   commandgroup CommandGroup6CmdGroup {
      commandgroup MaintenanceInformation {
         label = "Maintenance Information";
         command PMforObjectStructureCommand;
         command ActiveWorkOrdersCommand;
         command CmdTasksCommand;
         command HistoricalWorkOrdersCommand;
      }
   }

}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ObjectNavigatorCommand for EquipmentFunctional {
   label = "Equipment Object Navigator";
   enabled = [MchCode != null and Contract != null];
   --variable VarTreeViewId Number;
   execute {
      --call GetDefTreeView() into VarTreeViewId;
      --navigate "tree/EquipmentObjectNavigator/EquipObjectNavigatorTree?$filter=TreeViewId eq $[VarTreeViewId]&treefilter=MchCodeList:$[MchCode],MchCodeContractList:$[Contract]";
      navigate "tree/EquipmentObjectStructureNavigation/EquipObjectStructureTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}

@DynamicComponentDependency SERCAT
command ServiceObjectNavCommand for EquipmentFunctional {
   label = "Service Object 360";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "tree/ServiceViewOfEquipment/SeviceViewOfEquipTree?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}


command ConnectedObjectsCommand for EquipmentFunctional {
   label = "Connected Objects";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ConnectedObjects/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ObjectWarrantyCommand for EquipmentFunctional {
   label = "Warranty";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/ObjectWarranty/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command StructureCommand for EquipmentFunctional {
   label = "Structure";
   enabled = [MchCode != null and Contract != null and IsCategoryObject = false];
   //sheplk check category object not null
   execute {
      navigate "page/ObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdMeasForObjCommand for EquipmentFunctional {
   label = "Measurements for Object";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/MeasurementsForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdOperationalGroupsCommand for EquipmentFunctional {
   label = "Set Op. Mode Groups to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      @DynamicComponentDependency OPPLAN
      assistant OperationalGroupsAssistant(EquipmentObjectSeq) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command CmdSafeAccessCodeCommand for EquipmentFunctional {
   label = "Set Safe Access Code to Structure";
   enabled = [ChildObjects != "0"];
   execute {
      call SpreadSafeAccessCode();
      success("Safe Access Code successfully inherited to child objects.");
   }
}
command OperationalStatusInOperationCommand for EquipmentFunctional {
   label = "In Operation";
   enabled = [PlanStatus = "TRUE" or OutOperStatus = "TRUE"];
   execute {
      call SetInOperation();
   }
}
command OperationalStatusOutofOperationCommand for EquipmentFunctional {
   label = "Out of Operation";
   enabled = [InOperStatus = "TRUE" or Scrapped = "TRUE"];
   execute {
      call SetOutOfOperation();
   }
}
command OperationalStatusScrappedCommand for EquipmentFunctional {
   label = "Scrapped";
   enabled = [OutOperStatus = "TRUE"];
   execute {
      call SetScrapped();
   }
}
command OperationalStatusInOperationforStructureCommand for EquipmentFunctional {
   label = "Set Structure In Operation";
   variable WarningTexts;
   enabled = [PlanStatus = "TRUE" or OutOperStatus = "TRUE"];
   execute {
      call SetStructureInOperation();
      call GetExistWarning(Contract, MchCode) into WarningTexts;

      if[WarningTexts = "TRUE"] {
         info("Some objects of the structure ${MchCode} were not changed due to their operational condition.");
      }
   }
}
command OperationalStatusOutOfOperationforStructureCommand for EquipmentFunctional {
   label = "Set Structure Out of Operation";
   enabled = [InOperStatus = "TRUE" or Scrapped = "TRUE"];
   execute {
      if [Scrapped = "TRUE" and HasStructure = "TRUE"] {
         confirm("Do you want to change the operational status of all the child objects?") {
            when OK {
               call SetStructureOutOfOperation();
            }
            when CANCEL {
               call SetOutOfOperation();
            }
         }
      }
      else {
         call SetStructureOutOfOperation();
      }
   }
}

command OperationalStatusScrappedforStructureCommand for EquipmentFunctional {
   label = "Set Structure Scrapped";
   enabled = [OutOperStatus];
   execute {
      call SetStructureScrapped();
   }
}
command CmdSetLocationCommand for EquipmentFunctional {
   label = "Set Location to Structure";
   enabled = [LocationId != null];
   execute {
      confirm("Do you want to set location ${LocationId} to object structure?") {
         when OK {
            call SetLocationStructure(LocationId);
         }
      }
   }
}
command CmdResetLocationCommand for EquipmentFunctional {
   label = "Reset Location for Structure";
   enabled = [MchCode != null];
   execute {
      confirm("Do you want to clear location for the object structure?") {
         when OK {
            call ResetLocationStructure();
         }
      }
   }
}
@DynamicComponentDependency PCMSCI
command ServiceContractsforObjectCommand for EquipmentFunctional {
   label = "Service Contracts";
   enabled = [ObjExist = "TRUE"];
   execute {
      navigate "page/ServiceContractsForObject/Form?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq]";
   }
}
@DynamicComponentDependency PLADES
command DesignObjectInformationCommand for EquipmentFunctional {
   label = "Design Object";
   enabled = [DesignStatus != null and MchCode != null];
   execute {
      navigate "page/DesignObject/Form?$filter=Keya eq $[MchCode] and Site eq $[Contract]";
   }
}
command CopyFunctionalObjectCommand for EquipmentFunctional {
   label = "Copy Functional Object";
   enabled = [MchCode != null and Contract != null];
   variable NewContract;
   variable NewMchCode;
   variable NewMchName;
   variable ParentContract;
   variable ParentMchCode;
   variable ParentMchName;

   variable CbSpareParts;
   variable CbRequirements;
   variable CbParameters;
   variable CbTestPoints;
   variable CbDocuments;
   variable CbPm;
   variable CbParties;

   execute {
      call GetMchName(ParentContract, ParentMchCode) into ParentMchName;
      dialog DlgCopyFunctionalObj(Contract, MchCode, MchName, SupContract, SupMchCode, ParentMchName, AppliedPmProgramId)
      into(NewContract, NewMchCode, NewMchName, ParentContract, ParentMchCode, ParentMchName, CbSpareParts, CbRequirements, CbParameters, CbTestPoints, CbDocuments, CbPm, CbParties) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command PMforObjectStructureCommand for EquipmentFunctional {
   label = "PM for Object Structure";
   enabled = [CreatePm = "TRUE"];
   execute {
      navigate "page/PmForObjectStructure/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command ActiveWorkOrdersCommand for EquipmentFunctional {
   label = "Active Work Orders";
   enabled = [CreateWo = "TRUE"];
   execute {
      navigate "page/ObjectWo/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command HistoricalWorkOrdersCommand for EquipmentFunctional {
   label = "Historical Work Orders";
   enabled = [CreateWo = "TRUE"];
   execute {
      navigate "page/HistoricalWorkOrderForObject/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command CmdTasksCommand for EquipmentFunctional {
   label = "Work Tasks";
   enabled = [CreateWo = "TRUE"];
   execute {
      navigate "page/WorkTasks/List?$filter=ReportedObjConnLuNameDb  eq $[LuName] and ReportedObjConnRowkey eq $[Objkey]";
   }
}
command CostDetailsCommand for EquipmentFunctional {
   label = "Object Cost/Year";
   enabled = [ETag != null];
   execute {
      navigate "page/EquipObjCostPerYear/EquipObjCostPerYearForm?$filter=Contract eq $[Contract] and MchCode eq $[MchCode]";
   }
}
command CriticalityAnalysis for EquipmentFunctional {
   label = "Criticality Analysis";
   enabled = [ProcessClassId != null and ItemClassId != null and CmStdId != null];
   execute {
      navigate "page/CriticalityMatrixAnalysis/Form?$filter=ProcessClassId eq $[ProcessClassId] and ItemClassId eq $[ItemClassId]";
   }
}
command ValidateRequirements for EquipmentFunctional {
   variable VarOldMchType;
   variable VarNewMchType;
   variable VarOldType;
   variable VarNewType;
   variable VarMchTypeHasTechReference;


   execute {

      set VarOldMchType = OldMchType;
      set VarNewMchType = MchType;
      set ObjectHasRequirements = Requirements2;
      set VarOldType = OldType;
      set VarNewType = Type;
      set VarMchTypeHasTechReference = MchTypeHasTechReference;

      if [CrudOperation = "update"] {
         if [ObjectHasRequirements] {
            if [(VarOldMchType != VarNewMchType)] {

               if [VarNewMchType != null] {
                  if [VarMchTypeHasTechReference = "FALSE"] {
                     inquire("Do you want to remove Requirements along with the replacement of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
                  else {
                     inquire("Do you want to replace Requirements along with the replacement of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
               }
               else {
                  if [VarOldMchType != null] {
                     inquire("Do you want to remove Requirements along with the deletion of the Object Type?") {
                        when YES {
                           bulkset RemoveRequirements = "TRUE";
                        }
                        when NO {
                           bulkset RemoveRequirements = "FALSE";
                        }
                        when CANCEL {
                           exit CANCEL;
                        }
                     }
                  }
               }
            }

            else {
               if [VarOldType != VarNewType] {
                  if [VarNewType != null] {
                     if [VarOldType != null] {
                        inquire("Do you want to replace Requirements along with the replacement of the Type Designation?") {
                           when YES {
                              bulkset RemoveRequirements = "TRUE";
                           }
                           when NO {
                              bulkset RemoveRequirements = "FALSE";
                           }
                           when CANCEL {
                              exit CANCEL;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }
}

@DynamicComponentDependency SVCSCH
command FunctionalObjectSchedulingDetailCommand for EquipmentFunctional {
   label = "Scheduling Details";
   enabled = [MchCode != null and Contract != null];
   execute {
      navigate "page/SvcschFunctionalObjectSchedulingDetail/Form?$filter=MchCode eq $[MchCode] and Contract eq $[Contract]";
   }
}
command MeteringInvoicingCommand for EquipmentFunctional
   {
   label = "Metering Invoicing";

   execute {
      navigate  "page/MeteringInvoicing/Form?$filter=MchCode eq $[MchCode]";
   }
}
command LocationCommand {
   label = "Location";
   execute {
      navigate  "page/Location/LocationPage?$filter=LocationId eq $[LocationId]";
   }
}
--------------------------------- SELECTORS ---------------------------------
selector EquipmentObjTypesSelector for EquipmentObjType {
   label = "${MchType} - ${Description}";
   static MchType;
   static Description;
   badge Objstate;
}

@Override
selector EquipmentFunctionalSelector for EquipmentFunctional {
   label = "${MchCode} - ${MchName}";
   static EquipmentObjectSeq {
      visible = [false];
      searchable = false;
   }
   static MchCode;
   static MchName;
   static Contract;
   static ObjLevel;
   badge OperationalStatus {
      style = TextOnly;
      size = Medium;
      showlabel = false;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }

}

@Override
selector ReferenceEquipmentFunctionalObjectUivSelector for EquipmentFunctionalUiv {
   field Contract;
   field MchCode;
   field MchName;
   field MchLoc;
   field GroupId;
   field CategoryId;
}

@Override
selector ProcessClassSelector for ProcessClass {
   field ProcessClassId;
   field ProcessClassDesc;
   field ParentProcessClassId;
   field Notes;
   field Objstate;

}

@Override
selector ReferenceAccountSelector for Account {
   label = "";

   static Account;
   static Description {
      label = "Account Description";
   }
   static TaxHandlingValue {
      label = "Tax Handling";
   }
   static TaxFlag {
      label = "Tax Account";
   }
   static ArchivingTransValue {
      label = "Archiving Options";
   }
   static TaxCodeMandatory {
      label = "Tax Code Mandatory in Voucher Entry";
   }
}

@Override
selector TypeDesignationSelector for TypeDesignation {
   field Type;
   field Description;
   field MchType;
   field Objstate;
}


@Override
selector ReferenceAccountingCodePartValueSelector for AccountingCodePartValue {
   static CodePartValue {
      label = "${FetchCostCenter}";
   }
   static MasterComCodePartValue {
      visible = [false];
   }
}
selector EquipmentObjLevelSelector for EquipmentObjectLevel {
   label = "";
   static ObjLevelToSearch;
   static LevelSeq;
   static IndividualAware;
   static CreatePm;
   static CreateWo;
   badge Objstate;
}
---------------------------------- GROUPS -----------------------------------
group FunctionalObjectInfoGroup for EquipmentFunctional {
   label = "";
   field MchCode {
      size = Medium;
   }
   field MchName {
      size = Medium;

   }
   field LuName {
      visible = [false];
   }

   field KeyRef {
      visible = [false];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;

      size = Small;
      validate command {
         variable Resultrec {
            type = LogicalCodePartValues;
         }
         execute {
            call GetLogicalCodePartValues(Contract) into Resultrec;
            set FetchCostCenter = Resultrec.FetchCostCenter;
            set CostCenterCodePart = Resultrec.CostCenterCodePart;
            set HideCostCenter = Resultrec.HideCostCenter;
            set FetchObjectNo = Resultrec.FetchObjectNo;
            set ObjectCodePart = Resultrec.ObjectCodePart;
            set HideObjectNo = Resultrec.HideObjectNo;
            if[Contract != null] {
               call GetCompanyVal(Contract) into Company;
            }
         }
      }

   }
   lov ObjLevelRef with EquipmentObjLevelSelector {
      search = ObjLevelToSearch, LevelSeq;
      size = Small;

   }
   badge OperationalStatus {
      style = TextOnly;
      size = Medium;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   @DynamicComponentDependency PLADES
   badge DesignStatus {
      style = TextOnly;
      size = Small;
      emphasis Complementary1 = [DesignStatus = "PlannedForScrap"];
      emphasis Complementary2 = [DesignStatus = "ReDesign"];
      emphasis Complementary3 = [DesignStatus = "Completed"];
      emphasis Complementary4 = [DesignStatus = "UnderDesign"];
   }
}

group FunctionalObjectGroup for EquipmentFunctional {
   label = "General";
   lov SupMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      editable = [SupMchCodeSaved = null];

   }

   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [SupMchCodeSaved = null];

   }
   lov TypeRef with TypeDesignationSelector using GetTypeDesignations(MchType) {
      search = Type, Description;
      size = Medium;
      description = TypeRef.Description;

      validate command
         {
         variable Resultrec {
            type = TypeDesValues;
         }

         execute {
            if [Type != null] {
               call GetTypeDesignationValues(Type) into Resultrec;
               set MchType = Resultrec.MchType;
               if [Resultrec.ItemClass != null] {
                  set ItemClassId = Resultrec.ItemClass;

               }
            }
         }
      }
   }
   lov MchTypeRef with EquipmentObjTypesSelector {
      search = MchType, Description;

      size = Small;
      description = MchTypeRef.Description;
      validate command {
         variable TempMchType;
         variable GetItemClass;
         execute {
            call HasMchTypeTechSpec(MchType) into MchTypeHasTechReference;
            call GetItemClassId(MchCode, Contract, MchType) into GetItemClass;
            set ItemClassId = GetItemClass;
            if [Type != null and MchType != null] {
               call GetMchType(Type) into TempMchType;
               if [TempMchType != MchType] {
                  alert("The selected object type is not connected to the type designation.");
               }
            }
         }
      }
   }
   field OldMchType {
      visible = [false];
   }
   field OldType {
      visible = [false];
   }

   lov CategoryIdRef with ReferenceEquipmentObjCategorySelector {
      search = CategoryId, Description;
      size = Small;
   }
   lov GroupIdRef  with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      size = Small;
   }


   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Medium;
      description = CriticalityRef.Description;
   }
   field ProductionDate {
      size = Small;
   }

   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      size = Medium;
      description = ItemClassIdRef.ItemClassDesc;
   }
   lov ProcessClassRef with ProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      size = Medium;
      description = ProcessClassRef.ProcessClassDesc;
   }

   field IsCategoryObject {
      size = Small;
//      label = "Category Object";
   }
}
group LocationandPositionGroup for EquipmentFunctional {
   label = "Position and Location";
   collapsed = [true];
   field EquipmentMainPosition {
      size = Small;
   }
   field MchLoc {
      size = Small;
   }
   field MchPos {
      size = Small;
   }
   lov LocationCardRef with ReferenceEquipObjectLocationLovSelector {
      search = LocationId, Name;
      label = "Location";
      size = Medium;
      preview = EquipObjectLocationLovCard1;
      description = LocationIdRef.Name;
   }

   field IsGeographicObject {
      size = Small;
   }

}

group PartInfoGroup for EquipmentFunctional {
   label = "Part Information";
   collapsed = [true];
   lov PartNoRef with ReferencePartCatalogSelector using GetPartNos {
      search = PartNo, Description;
      size = Medium;

   }
   field SerialNo {
      size = Small;
   }
   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      size = Medium;
      description = SupplierInfoRef.Name;
   }
//   lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
//      size = Medium;
//      description = ManufacturerNoRef.Name;
//   }
   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilter(PartNo) {
               search = ManufactureNo, Name;
               description = ManufacturerNoRef.Name;

            }

         }

         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufacturerId, Name;
               description = ManufacturerNoRef.Name;
            }
         }
      }
   }

   field ManufacturedDate {
      size = Small;

   }


}
group FunctionalObjectHasGroup for EquipmentFunctional {
   label = "Functional Object Has";

   field Requirements2 {
      size = Small;
   }
   field SpareParts {
      size = Small;
   }
   field Warranty {
      size = Small;
   }
   field Documents2 {
      size = Small;
   }
   field Connections {
      size = Small;
   }
   field TestPoints {
      size = Small;
   }
   field Parties {
      size = Small;
   }
   field Notes {
      size = Small;
   }
}

group GbCode_Part_InfoGroup for EquipmentFunctional {
   label = "Code Part Info";
   collapsed = [true];

   lov CostCenterCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchCostCenter}";
      filterlabel = "Cost Center";
      searchable = true;
      size = Medium;
      visible = [HideCostCenter = "TRUE"];
      description = CostCenterCodePartRef.Description;
   }

   lov ObjectCodePartRef with ReferenceAccountingCodePartValueSelector {
      search = CodePartValue, Description;
      label = "${FetchObjectNo}";
      filterlabel = "Object";
      searchable = true;
      size = Medium;
      visible = [HideObjectNo != null];
      description = ObjectCodePartRef.Description;
   }
}

group TypeDesGroup for EquipmentFunctional {
   label = "Type Designation Has ";
   collapsed = [true];
   field Requirements3 {
      size = Small;
   }
   field Documents3 {
      size = Small;
   }
}

group GbStructuresGroup for EquipmentFunctional {
   collapsed = [true];
   label = "Structures";

   lov LocationContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov LocationMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = LocationMchCodePerfRef.MchName;
   }

   lov FromContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov FromMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = FromMchCodePerfRef.MchName;
   }

   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov ToMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = ToMchCodePerfRef.MchName;
   }

   lov ProcessContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov ProcessMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = ProcessMchCodePerfRef.MchName;
   }

   lov PipeContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov PipeMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = PipeMchCodePerfRef.MchName;
   }

   lov CircuitContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov CircuitMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Medium;
      description = CircuitMchCodePerfRef.MchName;
   }

}

group GbPmProgramGroup for EquipmentFunctional {
   collapsed = [true];
   label = "PM Program";
   @DynamicComponentDependency PCMSTD
   lov AppliedPmProgramIdRef with ReferencePmProgramSelector {
      search = PmProgramRev, Description;
      size = Small;
   }
   @DynamicComponentDependency PCMSTD
   field AppliedPmProgramDescription {
      size = Medium;
      editable = [false];
   }
   field AppliedPmProgramRev {
      size = Small;
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   badge Status {
      style = TextOnly;
      size = Small;
      emphasis StatePreliminary = [Status = "Preliminary"];
      emphasis StateActive = [Status = "Active"];
      emphasis StateObsolete = [Status = "Obsolete"];
   }
   field AppliedDate {
      size = Medium;
   }
   @DynamicComponentDependency PCMSTD
   field DateModified {
      size = Small;
   }
   field PmProgApplicationStatus {
      size = Small;
      required = [true];
   }
   field NotApplicableReason {
      editable = [false];
   }
   field NotApplicableSetDate {
      size = Small;
      editable = [false];
   }
   field NotApplicableSetUser {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
         key = Authorizer;
      }
   }
}

group GbNotesGroup for EquipmentFunctional {
   label = "Free Notes";
   collapsed = [true];
   field Note {
      size = Large;
      multiline = true;
      showlabel = false;

   }
}

group TypeDesignationGroup for TypeDesignation {
   label = "Type Designation";

   field Type {
      size = Medium;
   }
   field Description {
      size = Large;
   }
}

group AttributeTypeGroup for EquipmentFunctional {
   label = "Attribute Type - ${SelectionParameters}";

   radiogroup SelectionParameters {
      showlabel = false;
      size = FullWidth;

   }
}

group SafeAccessGroup for EquipmentFunctional {
   label = "";
   field SafeAccessCode {
      required = [true];
   }
}

@DynamicComponentDependency WOPS
group DwpSchedulingGroup for EquipmentFunctional {
   label = "";
   lov DwpClusterIdRef with WopsObjectClusterSelector {
      description = DwpClusterIdRef.Description;
   }
}
----------------------------------- LISTS -----------------------------------
list ObjectJournalList for EquipmentObjectJournal {
   orderby = LineNo desc;
   field LineNo {
      editable = [false];
      size = Small;
   }
   field JournalDate {
      editable = [false];
      size = Medium;
   }
   badge EventType {
      style = TextOnly;
      size = Small;
      emphasis Complementary1 = [EventType = "Modified"];
      emphasis Complementary2 = [EventType = "Move"];
      emphasis Complementary3 = [EventType = "Status Change"];
      emphasis Complementary4 = [EventType = "Created"];
      emphasis Complementary5 = [EventType = "Modified"];
   }
   field OldValue {
      editable = [false];
      size = Small;
   }
   field NewValue {
      editable = [false];
      size = Small;
   }
   field JournalText {
      editable = [false];
      size = Medium;
   }
   field Note {
      size = Large;
      multiline = true;
   }
   field CreatedBy {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field ModifyDate;
   field ModifiedBy {
      size = Small;

      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
}
@DynamicComponentDependency OPPLAN
list ObjectOperModeGroupList for ObjectOperModeGroup {
   label = "Operational Mode Groups";
   lov OperModeGroupIdRef with ReferenceOperationalModeGroupSelector {
      search = OperModeGroupId, Description;
      description = OperModeGroupIdRef.Description;
   }
   field Inherited {
      size = Small;
   }
}
@DynamicComponentDependency OPPLAN
list GroupConnectedModeList for OperModeGroupConnect {
   label = "Operational Modes";
   lov OperModeIdRef with ReferenceOperationalModeSelector {
      search = OperModeId, Description;
      size = Small;
   }
   field OperModeIdRef.Description {
      label = "Operational Mode Description";
   }
   field OperModeGroupId;
}


@Override
list AccountingCodePartValueLovList for AccountingCodePartValue {
   static MasterComCodePartValue {
      columnvisible = [false];
   }
}


----------------------------------- CARDS -----------------------------------

card EquipObjectLocationLovCard1 for EquipObjectLocationLov {
   label = "${Name}";
   field LocationId;
   markdowntext {
      visible = [true];
      text =
      "---------  ----------
      ${Address1} ${Address2}
      ${ZipCode} ${City}
      ${CountryCode} ${County}";
   }
   command LocationCommand;

}
---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

-------------------------------- SINGLETONS ---------------------------------

singleton TypeDesignationSingleton for TypeDesignation {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
}

singleton TypeDesTechnicalObjRefSingleton for TechnicalObjectReference {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   command TechSpecChangeStatusCommand;
   command TechSpecRefreshAttributesCommand;
}
----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
imageviewer ObjectImageViewer for EquipmentFunctional {
   label = "Functional Object Image";
   collapsed = [false];
   scale = original;
   height = small;
}
