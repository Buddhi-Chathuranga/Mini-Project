-----------------------------------------------------------------------------
--
--  Logical unit: ChangeMeterAssistant
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  -------------------------------------------------------------------------
--  *** Below fragments are required to work this fragment properly ***
--      1. EquipmentObjectUivSelector
--
--  -------------------------------------------------------------------------
--  Date        Sign    History
--  ------      ------  -----------------------------------------------------
--  2018-10-19  AMNALK  SAUXXW4-1232, Created using MTG Version: 1.31. EE Source: dlgChangeMeter
-----------------------------------------------------------------------------
fragment ChangeMeterAssistant;
component EQUIP;
layer Core;
description "Dialog box for converting functional objects to serial";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant ChangeMeterAssistant for ChangeMeterStructure {
   label = "Setup/Change Meter";

   input this;

   init command {
      variable InitValues {
         type = Structure(AssistantInitStructure);

      }
      execute {
         if [MeterId != null] {
            set MeterIdNew = MeterId;
         }

         call GetInitValues(Contract, MchCode, ParameterCode, TestPntSeq, TestPointId) into InitValues;

         if [InitValues.LatestMeasurementType = "PreliminaryReading"] {
            alert("Meter Change is not allowed. Please process Preliminary Records first");

            if [component.ChangeMeterAssistant.IsModal] {

               exit CANCEL;

            }

            else {

               navigate back;

            }


         }

         set MeterIdRequired = InitValues.MeterIdRequired;
         set ReadingsExist = InitValues.ReadingsExist;
         set MeterIdOld = InitValues.MeterIdOld;
         set ParameterType = InitValues.ParameterType;
         set RegDate = InitValues.ChangeDate;

      }

   }

   steps {
      step {
         group ObjectInformationMeterGroup;
         group MeterInformationGroup;
         group NewMeterGroup;
         group FromOldMeterGroup;

      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [RegDate != null and StartValue != null];
      execute {
         call ChangeMeter(Contract, MchCode, TestPointId, ParameterCode, StartValue, RegDate, MeterIdNew, MeterFlipValue, MeasNote, EndValue, TestPntSeq, ToolEqSeq, MeterIdOld);
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------

group ObjectInformationMeterGroup for ChangeMeterStructure {
   label = "Object Information";

   field Contract {
      size = Small;
      editable = [false];
   }
   field MchCode {
      editable = [false];
   }
   field ObjectDescription {
      size = Medium;
      editable = [false];
   }

}

group MeterInformationGroup for ChangeMeterStructure {
   label = "Testpoint/Parameter";

   field ParameterCode {
      size = Small;
      editable = [false];
   }
   field ParameterDescription {
      editable = [false];
   }
   field TestPointId {
      size = Small;
      editable = [false];
   }
   field Unit {
      size = Small;
      editable = [false];
   }
}

group NewMeterGroup for ChangeMeterStructure {
   label = "New Meter";

   field MeterIdNew {
      size = Small;
      editable = [MeterIdRequired != "NU"];
      required = [MeterIdRequired != "NU"];
   }

   field RegDate {
      size = Medium;
      required = [true];

   }

   field StartValue {
      size = Small;
      editable = [true];
      required = [true];
   }

   field MeterFlipValue {
      size = Small;
   }
   field MeasNote {
      multiline = true;
      size = Large;
   }
}

group FromOldMeterGroup for ChangeMeterStructure {
   label = "From Old Meter";
   field EndValue {
      editable = [MeterIdOld != null];
      required = [false];
   }
   field MeterIdOld {
      label = "Meter ID";
      editable = [false];
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

-------------------------------- STRUCTURES ---------------------------------
structure ChangeMeterStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute MchCode Text {
      label = "Object ID";
      maxlength = 100;
      format = uppercase;
   }
   attribute ObjectDescription Text {
      label = "Description";
      maxlength = 2000;

   }
   attribute ParameterCode Text {
      label = "Parameter ID";
      maxlength = 5;
      format = uppercase;
   }
   attribute ParameterDescription Text {
      label = "Parameter Description";
      maxlength = 2000;

   }
   attribute TestPointId Text {
      label = "Test Point ID";
      maxlength = 30;
      format = uppercase;
   }
   attribute Unit Text {
      label = "Unit";
      maxlength = 2000;

   }
   attribute RegDate Timestamp {
      label = "Meter Setup/Change Date";

   }
   attribute MeterIdNew Text {
      label = "Meter ID";
      maxlength = 30;
   }
   attribute StartValue Number {
      label = "Start Value";
      maxlength = 12;

   }
   attribute MeterFlipValue Number {
      label = "Meter Roll-over Value";
      maxlength = 32767;

   }
   attribute MeasNote Text {
      label = "Measurement Note";
      maxlength = 2000;
   }
   attribute EndValue Number {
      label = "End Value";
      required = [false];

   }
   attribute MeterId Text {
      label = "Meter ID";
      maxlength = 2000;
   }
   attribute MeterIdOld Text;
   attribute TestPntSeq Number;
   attribute ToolEqSeq Number;
   attribute ValueSeq Number;

   attribute MeterIdRequired Text;
   attribute ReadingsExist Number;
   attribute ParameterType Text;

   reference MchCodeRef(Contract, MchCode) to EquipmentObjectUiv(Contract, MchCode) {
      label = "Object ID";

   }
   reference ParameterCodeRef(ParameterCode) to MeasurementParameter(ParameterCode) {
      label = "Meter";
   }
   reference TestPointIdRef(Contract, MchCode, TestPointId) to EquipmentObjectTestPnt(Contract, MchCode, TestPointId) {
      label = "Test Point ID";
   }
}

structure AssistantInitStructure {
   attribute MeterIdRequired Text;
   attribute ChangeDate Timestamp;
   attribute ReadingsExists Text;
   attribute MeterIdOld Text;
   attribute ParameterType Text;
   attribute LatestMeasurementType Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetInitValues Structure(AssistantInitStructure) {
   parameter Contract Text;
   parameter MchCode  Text;
   parameter ParameterCode Text;
   parameter TestPntSeq Number;
   parameter TestPointId Text;
}

action ChangeMeter {
   initialcheck none;
   ludependencies = EquipmentObjectMeas;
   ludependencies = EquipmentObjectParam;
   parameter Contract Text;
   parameter MchCode Text;
   parameter TestPointId Text;
   parameter ParameterCode Text;
   parameter StartValue Number;
   parameter ChangeDate Timestamp;
   parameter MeterIdNew Text;
   parameter MeterFlipValue Number;
   parameter MeasNote Text;
   parameter EndValue Number;
   parameter TestPointSeq Number;
   parameter ToolEqSeq Number;
   parameter MeterIdOld Text;
}