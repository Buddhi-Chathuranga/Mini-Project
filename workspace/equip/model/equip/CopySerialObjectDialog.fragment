--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-08-06  SSILLK SAUXXW4-1235, Converted MTG Version: 1.26. Implementation for  Enterprise Explorer Source: dlgCopySerialObject - Copy Serial Object
-- 2020-01-03  LASSLK SAXTEND-1244 Implement LOV Filtering
-- 2020-10-22  LASSLK AM2020R1-6659,Modified DlgCopySerialObject and StructDlgCopySerialObject
--------------------------------------------------------------------------------------
fragment CopySerialObjectDialog;
component EQUIP;
layer Core;
description "Copy serial dialog  ...";

----------------------------- CLIENT FRAGMENTS ------------------------------
---------------------------------- DIALOGS ----------------------------------
dialog  DlgCopySerialObject for StructDlgCopySerialObject {
   label = "Copy Serial Object - ${MchCode} - ${MchName}";
   input(PartNo, Contract, DestContract, MchCode, MchName, PartRev, SupMchCode, SupContract, DfDestSupMchCodeName, FromForm, ProgramId);
   output(Contract2, MchCode, DestContract, DestMchCode, SerialNo, PartNo, PartRev, SupMchCode, SparePart, TechData, Parameter, TestPnt, Document, Pm, Party, SupContract, IsSerial, CopySerialReturn);
   group GbNew_Serial_ObjectGroup;
   group Gb_New_Copy_OptionsGroup;
   markdowntext {
      visible = [ProgramId != null and Pm = true];
      text = "The Equipment Object you are copying has a PM Program on it. Selecting the Copy PMs switch will copy all the PM actions. If you apply a PM Program back, it will result in duplicate PM records.";
   }

   commandgroup ButtonCommandGroup {


      command Ok {
         enabled = [MchCode != null and SerialNo != null and Contract != null and IsObjectExist != "TRUE"];

         variable IsSerial;
         variable VarReturnObjectId {
            type = Structure(ReturnObjectId);
         }
         variable VarObjectIdReturn Text;
         execute {
            call GetSerialTracked(PartNo) into  IsSerial;
            if[IsSerial != "TRUE"  and PartNo != null] {
               confirm("Part no ${PartNo} is not serial tracked 'At Receipt and Issue'. It will not be possible to move the serial object to the inventory. Still want to save this record?") {

                  when OK {
                     call CopySerial(
                     Contract2,
                     MchCode,
                     DestContract,
                     DestMchCode,
                     SerialNo,
                     PartNo,
                     PartRev,
                     SupMchCode,
                     SparePart,
                     TechData,
                     Parameter,
                     TestPnt,
                     Document,
                     Pm,
                     Party,
                     SupContract)into VarReturnObjectId;
                     set VarObjectIdReturn = VarReturnObjectId.ReturnObjId;
                     if[VarReturnObjectId.ReturnValue = 1] {
                        if[CbPm = "TRUE"] {
                           success("The serial object is now copied. Please check the PM-plan.");
                           if [FromForm = "SerialObj"] {
                              navigate "page/SerialObject/Form?$filter=MchCode eq $[VarObjectIdReturn] and Contract eq $[DestContract]";
                           }

                        }
                        else {
                           success("The serial object is now copied.");
                           if [FromForm = "SerialObj"] {
                              navigate "page/SerialObject/Form?$filter=MchCode eq $[VarObjectIdReturn] and Contract eq $[DestContract]";
                           }
                        }
                     }
                  }
                  when CANCEL {
                     exit;
                  }
               }
            }
            else {
               call CopySerial(
               Contract2,
               MchCode,
               DestContract,
               DestMchCode,
               SerialNo,
               PartNo,
               PartRev,
               SupMchCode,
               SparePart,
               TechData,
               Parameter,
               TestPnt,
               Document,
               Pm,
               Party,
               SupContract)into VarReturnObjectId;
               set VarObjectIdReturn = VarReturnObjectId.ReturnObjId;
               if[VarReturnObjectId.ReturnValue = 1] {
                  if[CbPm = "TRUE"] {
                     success("The serial object is now copied. Please check the PM-plan.");
                     if [FromForm = "SerialObj"] {
                        navigate "page/SerialObject/Form?$filter=MchCode eq $[VarObjectIdReturn] and Contract eq $[DestContract]";
                     }
                  }
                  else {
                     success("The serial object is now copied.");
                     if [FromForm = "SerialObj"] {
                        navigate "page/SerialObject/Form?$filter=MchCode eq $[VarObjectIdReturn] and Contract eq $[DestContract]";
                     }

                  }
               }
            }
         }
      }
      command Cancel;
   }

}
--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceEquipmentAllObjectUivSelector for EquipmentAllObjectUiv {
   label = "";
   static MchCode;
   static MchName;
   static EquipmentMainPosition;
   static ObjLevel;
   static OperationalStatus;
}
---------------------------------- GROUPS -----------------------------------

group GbNew_Serial_ObjectGroup for StructDlgCopySerialObject {
   label = "New Serial Object";
   field MchCode {
      visible = [false];

   }
   field Contract {
      visible = [false];

   }

   lov DestContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
   }

   field DestMchCode {

      validate command {
         execute {

            call CheckExist(DestContract, DestMchCode) into IsObjectExist;

         }

      }

   }
   field MchName {
      editable = [false];

   }
   lov PartNoRef  with ReferencePartCatalogSelector {
      search = PartNo, Description;

      validate command
         {
         execute
            {
            if[PartNo != null] {
               call GetAssitantMchDescription(PartNo) into MchName;
            }
            else {
               set MchName = null;
            }
         }
      }
   }
   field SerialNo;
   field PartRev;
   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
   }
   lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
      search = MchCode, MchName;

      validate command
         {
         execute
            {
            call GetAssistantMchName(SupContract, SupMchCode)into DfDestSupMchCodeName;
         }
      }
   }
   field DfDestSupMchCodeName {
      editable = [false];

   }
}

group Gb_New_Copy_OptionsGroup for StructDlgCopySerialObject {
   label = "Copy Options";
   field CbSparePart {
      size = Small;
      required = [true];
      validate command {
         execute {
            if[CbSparePart = true] {
               set SparePart = 1;
            }
            else {
               set SparePart = 0;
            }

         }
      }
   }
   field CbParameter {
      size = Small;
      required = [true];
      validate command {
         execute {
            if[CbParameter = true] {
               set CbTestPnt = true;
               set Parameter = 1;
               set TestPnt = 1;
            }
            else {
               set Parameter = 0;
            }

         }

      }

   }
   field CbTestPnt {
      size = Small;
      required = [true];
      validate command {
         execute {
            if[CbTestPnt = false] {
               set CbParameter = false;
               set CbPm = false;
               set Parameter = 0;
               set Pm = 0;
               set TestPnt = 0;
            }
            else {
               set TestPnt = 1;
            }
         }
      }
   }

   field CbPm {
      size = Small;
      required = [true];
      validate command {
         execute {
            if[CbPm = true] {
               set CbParameter = true;
               set CbTestPnt = true;
               set Parameter = 1;
               set TestPnt = 1;
               set Pm = 1;
            }
            else {
               set Pm = 0;
            }
         }
      }
   }
   field CbDocument {
      size = Small;
      required = [true];
      validate command {
         execute {
            if [CbDocument = true] {
               set Document = 1;
            }
            else {
               set Document = 0;
            }
         }
      }
   }
   field CbParty {
      size = Small;
      required = [true];
      validate command {
         execute {
            if [CbParty = true] {
               set Party = 1;
            }
            else {
               set Party = 0;
            }
         }
      }
   }
   field CbTechData {
      size = Small;
      required = [true];
      validate command {
         execute {
            if[CbTechData = true] {
               set TechData = 1;
            }
            else {
               set TechData = 0;
            }
         }

      }
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
---------------------------------- ACTIONS ----------------------------------
action CopySerial Structure(ReturnObjectId) {
   initialcheck implementation;
   ludependencies = EquipmentObject, EquipmentSerial;
   parameter  Contract            Text;
   parameter  MchCode             Text;
   parameter  DestContract        Text;
   parameter  DestMchCode         Text;
   parameter  SerialNo            Text;
   parameter  PartNo              Text;
   parameter  SerialRevision      Text;
   parameter  DestSupMchCode      Text;
   parameter  CbSparePart         Number;
   parameter  CbTechData          Number;
   parameter  CbParameter         Number;
   parameter  CbTestPnt           Number;
   parameter  CbDocument          Number;
   parameter  CbPm                Number;
   parameter  CbParty             Number;
   parameter  DfDestSupContract   Text;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetAssitantMchDescription Text {
   parameter PartNo Text;
}
function GetSerialTracked Text {
   parameter PartNo Text;
}
function GetAssistantMchName Text {
   parameter SupContract Text;
   parameter SupMchCode Text;
}

function CheckExist Text {
   parameter DestinationContract Text;
   parameter DestinationObject Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ReturnObjectId {
   attribute ReturnValue Number;
   attribute ReturnObjId Text;
}

--------------------------------- VIRTUALS ----------------------------------
structure StructDlgCopySerialObject {

   attribute DestContract Text {
      label = "New Site";
      maxlength = 5;
      required = [true];
   }
   attribute DestMchCode Text {
      label = "New Object ID";

      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute MchName Text {
      label = "Object Description";
      maxlength = 200;
      // searchable = false;
   }
   attribute FromForm Text;
   attribute PartNo Text {
      label = "Part No";
      maxlength = 25;
      required = [true];
      // searchable = false;
      format = uppercase;
   }
   attribute SerialNo Text {
      label = "Serial No";
      maxlength = 50;
      required = [true];
      // searchable = false;
      format = uppercase;
   }
   attribute PartRev Text {
      label = "Serial Revision";
      maxlength = 6;
      // searchable = false;
      format = uppercase;
   }
   attribute SupContract Text {
      label = "Belongs to Site";
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute SupMchCode Text {
      label = "Belongs to Object ID";
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute DfDestSupMchCodeName Text {
      label = "Object Description";
      maxlength = 200;
      // searchable = false;
   }
   attribute CbSparePart Boolean("TRUE", "FALSE") {
      label = "Spare Parts";
   }
   attribute CbTechData Boolean("TRUE", "FALSE") {
      label = "Technical Data";
   }
   attribute CbParameter Boolean("TRUE", "FALSE") {
      label = "Parameters";
   }
   attribute CbTestPnt Boolean("TRUE", "FALSE") {
      label = "Test Points";
   }
   attribute CbDocument Boolean("TRUE", "FALSE") {
      label = "Documents";
   }
   attribute CbPm Boolean("TRUE", "FALSE") {
      label = "PM";
   }
   attribute CbParty Boolean("TRUE", "FALSE") {
      label = "Parties";
   }
   attribute SparePart Number {
      default = "0";
   }
   attribute TechData  Number {
      default = "0";
   }
   attribute Parameter  Number {
      default = "0";
   }
   attribute TestPnt  Number {
      default = "0";
   }
   attribute Document  Number {
      default = "0";
   }
   attribute Pm  Number {
      default = "0";
   }
   attribute Party Number {
      default = "0";
   }
   attribute MchCode Text {
      maxlength = 100;
      // searchable = false;
      format = uppercase;
   }
   attribute Contract Text {
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute Contract2 Text {
      maxlength = 5;
      // searchable = false;
      format = uppercase;
   }
   attribute IsSerial Text {
      fetch = "PART_CATALOG_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
   }
   attribute IsObjectExist Text {
      fetch = "Equipment_Object_API.Do_Exist(DEST_CONTRACT,DEST_MCH_CODE)";
   }
   attribute CheckExist Text {
      maxlength = 5;
      format = uppercase;
   }
   attribute ProgramId Text;

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      copy Contract to Contract2;
   }
   reference DestContractRef(DestContract) to UserAllowedSiteLov(Contract) {
      label = "New Site";

      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Belongs to Object ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
}
@Override
entity PartCatalog {
   attribute EngSerialTrackingCode Enumeration(PartSerialTracking) {
      label = "After Delivery Serial Tracking";
   }
   attribute ConditionCodeUsage Enumeration(ConditionCodeUsage) {
      label = "Allow Condition Code";
   }
   attribute UnitCode Text {
      label = "UoM";
   }
   attribute MultilevelTracking Enumeration(MultilevelTracking) {
      label = "Multi-Level Tracking";
   }
   attribute UomForWeightNet Text {
      label = "Weight UoM";
   }
   attribute VolumeNet Number {
      label = "Net Volume";
   }
   attribute UomForVolumeNet Text {
      label = "Volume UoM";
   }
}