-----------------------------------------------------------------------------
--
--  Fragment:     EquipmentObjectPartyList
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  180802  SHEPLK  SAUXXW4-1646 tbwObjectParty  - Object Party.
--  200106  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  220111  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                  and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------
fragment EquipmentObjectPartyList;
component EQUIP;
layer Core;
description "To enter and view information on the various party types that are connected to the equipment object.";


----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------------- LIST ------------------------------------
list ObjectPartyList for EquipmentObjectParty {
   // Column 'Contract' (colContract) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   // Column 'MchCode' (colMchCode) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   field PartyType {
      size = Medium;
      validate command {
         execute {
            if [PartyType != "Customer"] {
               set DeliveryAddress = "";
            }
         }
      }
   }
   field Identity {
      size = Large;
      contactwidget {
         enabled = [PartyType = "Supplier" or PartyType = "Contractor" or PartyType = "Customer"];
         source {
            Customer = [PartyType = "Customer"];
            Supplier = [PartyType = "Supplier" or PartyType = "Contractor"];
         }
      }

      lovswitch {
         when [PartyType = "Customer"] {
            lov IdentityCustomerIdRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               description = Name;
            }
         }
         when [PartyType = "Supplier" or PartyType = "Contractor"] {
            lov IdentitySupplierIdRef with SupplierIdSelector {
               search = SupplierId, Name;
               description = Name;
            }
         }
         when [PartyType = "Manufacturer"] {
            lov IdentityManufacturerIdRef with ManufacturerSelector {
               search = ManufacturerId, Name;
               description = Name;
            }
         }
         when [PartyType = "Owner"] {
            lov IdentityOwnerIdRef with OwnerSelector {
               search = OwnerId, Name;
               description = Name;
            }
         }
         when [PartyType = "AssetManager"] {
            lov IdentityAssetManagerRef with ReferencePersonInfoLovSelector {
               search = PersonId, Name;
               description = Name;
            }
         }
      }
      validate command {
         execute {
            if [PartyType = "Customer"] {
               call GetDeliveryAddress(Identity) into DeliveryAddress;
            }
         }
      }
   }
   @DynamicComponentDependency ORDER
   lov DeliveryAddressRef with CustAddressShipLovSelector {
      size = Large;
      editable = [PartyType = "Customer"];
   }

   command SetPartytoStructure;
   command ResetStructureforParty;

}

--------------------------------- SELECTOR ----------------------------------
selector ManufacturerSelector for ManufacturerInfo {
   field ManufacturerId;
   field Name;
}

selector OwnerSelector for OwnerInfo {
   field OwnerId;
   field Name;
}
selector SupplierIdSelector for SupplierInfo {
   field SupplierId;
   field Name;
}

--------------------------------- COMMANDS ----------------------------------
command SetPartytoStructure for EquipmentObjectParty {
   label = "Set Party to Structure";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      confirm("Do you want to set marked party(ies) to object structure?") {
         when OK {
            bulkcall SetPartyStructure();
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ResetStructureforParty for EquipmentObjectParty {
   label = "Reset Structure for Party";
   mode = SelectedRecords;
   bulkexecute {
      confirm("Do you want to remove marked party(ies) from object structure?") {
         when OK {
            bulkcall RemovePartyStructure();
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

-------------------------------- ENTITY SET ---------------------------------
entityset EquipmentObjectPartySet for EquipmentObjectParty;

---------------------------------- ENTITY -----------------------------------
@Override
entity EquipmentObjectParty {
   crud = Create, Read, Update, Delete;
   exec = "EQUIPMENT_OBJECT_PARTY_API";
   keys = EquipmentObjectSeq, PartyType, Identity {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq and PARTY_TYPE_DB = :PartyType and IDENTITY = :Identity";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute MchCode Text {
      fetch = "MCH_CODE";
      label = "Object ID";
      maxlength = 100;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartyType Enumeration(ObjectPartyType) {
      fetch = "PARTY_TYPE_DB";
      label = "Party Type";
      required = [true];
      editable = [ETag = null];
   }
   attribute Identity Text {
      fetch = "IDENTITY";
      label = "Party Identity";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Name Text {
      fetch = "Equipment_Object_Party_API.Get_Name(IDENTITY, PARTY_TYPE)";
      label = "Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute DeliveryAddress Text {
      fetch = "DELIVERY_ADDRESS";
      label = "Delivery Address";
      maxlength = 100;
      format = uppercase;
   }

   reference MchCodeRef(EquipmentObjectSeq) to EquipmentObjectUiv(EquipmentObjectSeq) {
      label = "Object ID";

      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference IdentityCustomerIdRef(Identity) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Party Identity";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference IdentitySupplierIdRef(Identity) to SupplierInfo(SupplierId) {
      label = "Party Identity";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference IdentityManufacturerIdRef(Identity) to ManufacturerInfo(ManufacturerId) {
      label = "Party Identity";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference IdentityOwnerIdRef(Identity) to OwnerInfo(OwnerId) {
      label = "Party Identity";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference IdentityAssetManagerRef(Identity) to PersonInfoLov(PersonId) {
      label = "Party Identity";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   @DynamicComponentDependency ORDER
   reference DeliveryAddressRef(Identity, DeliveryAddress) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }

   action SetPartyStructure;

   action RemovePartyStructure;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetDeliveryAddress Text {
   parameter CustomerNo Text;
}

---------------------------------- ACTIONS ----------------------------------

-------------------------------- ENUMERATION --------------------------------
enumeration PartyType {
   enumerationtype = Standard;
   exec = "Party_Type_API";
   value = "COMPANY" {
      identifier = "Company";
      label = "Company";
   }
   value = "CUSTOMER" {
      identifier = "Customer";
      label = "Customer";
   }
   value = "SUPPLIER" {
      identifier = "Supplier";
      label = "Supplier";
   }
   value = "PERSON" {
      identifier = "Person";
      label = "Person";
   }
   value = "MANUFACTURER" {
      identifier = "Manufacturer";
      label = "Manufacturer";
   }
   value = "OWNER" {
      identifier = "Owner";
      label = "Owner";
   }
   value = "FORWARDER" {
      identifier = "ForwardingAgent";
      label = "Forwarding Agent";
   }
   value = "EMPLOYEE" {
      identifier = "Employee";
      label = "Employee";
   }
}