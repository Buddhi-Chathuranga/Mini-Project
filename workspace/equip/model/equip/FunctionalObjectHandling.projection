-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210917  LASSLK  AM21R2-2778, Modified use attributes in entity EquipmentFunctional.
--  210708  RUSSLK  AM21R2-2103,Added EquipmentObjectLevel Entity.
--  210503  MAABSE  TEAURENAFW-5243, Added fragment MediaLibraryAttachment.
--  210105  DEEKLK  AM2020R1-7134, moved GetMchName() to fragment MoveFunctionalObjectDialog.
--  200213  chanlk  SAZM-4907, Modified DesignStatus.
--  191118  LoPrlk  SAXTEND-1131, Set the attachment LU for EquipmentFunctional.
--  190327  LoPrlk  SAUXXW4-13052, Removed the references to Code Parts to be used on Cost Center and Object.
--  190222  LoPrlk  SAUXXW4-13051, Added the attributes CostCenterCodePart and ObjectCodePart and references CostCenterCodePartRef
--  190222          and ObjectCodePartRef and deleted the attributes FetchCostCenterView and FetchObjectNoView.
--  181016  LoPrlk  SAUXXW4-1343, Added the attribute CmStdId.
--  181010  JADASE  SAUXXW4-64, Added Operational Modes
--  180819  SHEPLK  SAUXXW4-1643 tbwObjectJournal - Object Journal generated from MTG 1.23
--  180809  ISHHLK  SAUXXW4-1301 Added tbwObjectSpareParts - Object Spare Part.
--  180803  SHEPLK  SAUXXW4-1646 Added tbwObjectParty - Object Party.
--  180702  SHEPLK  SAUXXW4-1608 frmFunctionalObject - Functional Object generated from MTG 1.23
--  211004  JIHALK  AMZEAX-697, Added GetItemClassId Function.
--  220112  DmAlLK  AM21R2-3233, Added ClusterId. Included filter that by Contract.
--  220111  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                  and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------
projection FunctionalObjectHandling;
component EQUIP;
layer Core;
description "Manage Equipment Functional Object";
category Users;

include fragment AccountingCodepartESelector;
include fragment EquipObjectLocationLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment EquipmentFunctionalLovSelector;
include fragment EquipmentFunctionalUivSelector;
include fragment MoveFunctionalObjectDialog;
include fragment CopyFunctionalObjectDialog;
include fragment EquipmentObjectPartyList;
include fragment EquipmentObjectUivSelector;
include fragment EquipmentObjectParty4Selector;
@DynamicComponentDependency ORDER
include fragment CustAddressShipLovSelector;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment PersonInfoLovSelector;
@DynamicComponentDependency INVENT
include fragment InventoryPartWoLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLovSelector;
include fragment EquipmentObjectSparePartsList;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment TestPointParameters;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment ResourceEquipmentSiteConnSelector;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment BoexpTwSettings;
include fragment EquipmentFunctionalPerfQuery;
include fragment MediaLibraryAttachment;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentFunctionalSet for EquipmentFunctional;
entityset EquipmentObjectJournalSet for EquipmentObjectJournal;
entityset TypeDesignationSet for TypeDesignation;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentFunctional {
   from = "equipment_functional_uiv";
   ludependencies = TypeDesignation, TechnicalObjectReference, EquipmentObject;
   keys = EquipmentObjectSeq {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq ";
   }
   supportwarnings = [true];
   use attributes = MchCode, Contract, ObjLevel, OperationalStatus, PartNo, MchName, SerialNo, PartRev, MchType, Type, ProcessClassId, ItemClassId, GroupId, Criticality, SupContract, SupMchCode, LocationId, LocationContract, LocationMchCode, FromContract, FromMchCode, ToContract, ToMchCode, ProcessContract, ProcessMchCode, PipeContract, PipeMchCode, CircuitContract, CircuitMchCode, MchLoc, MchPos, CategoryId, CostCenter, VendorNo, ManufacturerNo, EquipmentMainPosition, PurchPrice, PurchDate, ProductionDate, ManufacturedDate, ObjectNo, Note, HasStructure, HasConnection, WarrExp, MchDoc, Info, Data, AppliedPmProgramId, AppliedPmProgramRev, AppliedDate, PmProgApplicationStatus, NotApplicableReason, NotApplicableSetUser, NotApplicableSetDate, OperationalStatusDb, OperationalCondition, SafeAccessCode;
   luname = "'EquipmentObject'";

   attribute MchCode Text {
      editable = [ETag = null];
   }
   attribute MchName Text {
      required = [true];
   }
   attribute Contract Text {
      label = "Site";
      editable = [ETag = null];
   }
   attribute Company Text {
      label = "Company";
      fetch = "Site_API.Get_Company(CONTRACT)";
   }
   attribute ObjectSiteDesc Text {
      fetch = "SITE_API.Get_Description(CONTRACT)";
      label = "Object Site Desc.";
      maxlength = 20;
      editable = [false];
   }
   attribute ObjLevel Text {
      required = [true];
      editable = [ETag = null];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      editable = [false];
   }
   attribute OperationalStatusDb Text {
      editable = [false];
      fetch = "OPERATIONAL_STATUS_DB";

   }
   @DynamicComponentDependency PLADES
   attribute DesignStatus Enumeration(PlantObjectState) {
      fetch = "Plant_Object_API.Get_Design_Status_Equip_Obj(CONTRACT, MCH_CODE)";
      label = "Design Status";
      editable = [false];
   }
   attribute SupMchCode Text {
      label = "Belongs to Object";
   }
   attribute SupMchCodeSaved Text {
      label = "Belongs to Object Saved";
      fetch = "SUP_MCH_CODE";
      editable = [false];
   }

   attribute SupContract Text {
      label = "Belongs to Site";
   }

   attribute SerialNo Text {
      label = "Serial No";
   }
   attribute EquipmentMainPosition Enumeration(EquipmentMainPosition) {
      label = "Main Position";
   }
   attribute ManufacturedDate Date {
      label = "Mfg Date";
   }
   attribute ProductionDate Date {
      label = "Installation Date";
   }
   attribute ItemClassId Text {
      label = "Item Class";
      format = uppercase;
   }

   attribute ManufacturerName Text {
      fetch = "Equipment_Manufacturer_API.Get_Description(MANUFACTURER_NO)";
      label = "Manufacturer Name";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute ObjectNo Text {
      label = "Asset";
   }
   attribute Requirements2 Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No(LU_NAME, KEY_REF)";
      label = "Requirements";
      editable = [false];
   }
   attribute SpareParts Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_SPARE_API.Has_Spare_Part(CONTRACT, MCH_CODE)";
      label = "Spare Parts";
      editable = [false];
   }
   attribute Warranty Boolean("TRUE", "FALSE") {
      fetch = "substr(EQUIPMENT_OBJECT_API.Has_Any_Warranty(CONTRACT,MCH_CODE),1,5)";
      label = "Warranty";
      editable = [false];
   }
   attribute Documents2 Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('EquipmentObject',MCH_CODE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }
   attribute Connections Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_CONN_API.Has_Connection(CONTRACT, MCH_CODE)";
      label = "Connections";
      editable = [false];
   }
   attribute TestPoints Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_TEST_PNT_API.Has_Test_Point(CONTRACT, MCH_CODE)";
      label = "Test Points";
      editable = [false];
   }
   attribute Parties Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_PARTY_API.Has_Party(CONTRACT, MCH_CODE)";
      label = "Parties";
      editable = [false];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Notes(CONTRACT,MCH_CODE)";
      label = "Notes";
      editable = [false];
   }
   attribute Requirements3 Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No('TypeDesignation', TYPE_KEY_VALUE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Documents3 Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('TypeDesignation',TYPE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }

   attribute IsCategoryObject Boolean("TRUE", "FALSE") {
      editable = [false];
   }
   attribute IsGeographicObject Boolean("TRUE", "FALSE") {
      label = "Geographical Object";
      editable = [true];
      required = [true];

   }

   attribute SupplierWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_WARRANTY(EQUIPMENT_OBJECT_SEQ)";
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_CUSTOMER_WARRANTY(EQUIPMENT_OBJECT_SEQ)";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute LocationalParentDescription Text {
      label = "Description:";
      fetch = "Equipment_Object_API.Get_Mch_Name(LOCATION_CONTRACT, LOCATION_MCH_CODE)";
   }
   attribute LocationContract Text {
      label = "Locational Object Site";
   }
   attribute LocationMchCode Text {
      label = "Locational Object";
   }
   attribute FromMchCode Text {
      label = "From Object";
   }
   attribute FromObjectDescription Text {
      label = "Description:";
      fetch = "Equipment_Object_API.Get_Mch_Name(FROM_CONTRACT, FROM_MCH_CODE)";
   }
   attribute FromContract Text {
      label = "From Object Site";
      maxlength = 100;
   }
   attribute ToMchCode Text {
      label = "To Object";
   }
   attribute ToObjectDescription Text {
      label = "Description:";
      fetch = "Equipment_Object_API.Get_Mch_Name(TO_CONTRACT, TO_MCH_CODE)";
   }
   attribute ToContract Text {
      label = "To Object Site";
      maxlength = 100;
   }
   attribute ProcessMchCode Text {
      label = "Process Object";
   }
   attribute ProcessMchCodeDescription Text {
      label = "Description:";
      fetch = "Equipment_Object_API.Get_Mch_Name(PROCESS_CONTRACT, PROCESS_MCH_CODE)";
   }
   attribute ProcessContract Text {
      label = "Process Object Site";
      maxlength = 100;
   }
   attribute PipeMchCode Text {
      label = "Pipe System";
   }
   attribute PipeSystemDescription Text {
      label = "Description:";
      fetch = "Equipment_Object_API.Get_Mch_Name(PIPE_CONTRACT, PIPE_MCH_CODE)";
   }
   attribute PipeContract Text {
      label = "Pipe System Site";
      maxlength = 100;
   }
   attribute CircuitMchCode Text {
      label = "Electrical System";
   }
   attribute ElectricalDescription Text {
      label = "Description:";
      fetch = "Equipment_Object_API.Get_Mch_Name(CIRCUIT_CONTRACT, CIRCUIT_MCH_CODE)";
   }
   attribute CircuitContract Text {
      label = "Electrical System Site";
      maxlength = 100;
   }

   attribute CostCenter Text;

   attribute AppliedPmProgramId Text {
      label = "PM Program ID";
      editable = [false];
   }
   attribute AppliedPmProgramRev Text {
      label = "Revision";
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute AppliedPmProgramDescription Text {
      editable = [false];
      label = "Description";
      fetch = "Pm_Program_API.Get_Description(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
   }
   @DynamicComponentDependency PCMSTD
   attribute PMProgramStatus Text {
      fetch = "Pm_Program_API.Get_Status(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute AppliedDate Date {
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute Status Text {
      fetch = "Pm_Program_API.Get_Status(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProcessClassId Text {
      format = uppercase;
   }
   @DynamicComponentDependency PCMSTD
   attribute DateModified Date {
      fetch = "Pm_Program_API.Get_Date_Modified(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      editable = [false];
      label = "Date Modified";
   }
   attribute PmProgApplicationStatus Boolean("TRUE", "FALSE") {
      required = [true];
      editable = [false];
      label = "N/A for PM Programs";
   }
   attribute NotApplicableReason Text {
      editable = [false];
      label = "N/A Set Reason";
   }
   attribute NotApplicableSetDate Date {
      editable = [false];
      label = "N/A Set Date";
   }
   attribute NotApplicableSetUser Text {
      editable = [false];
      label = "N/A Set By";
   }

   attribute ChildObjects Text {
      fetch = "Equipment_Object_API.Get_Child_Objects(MCH_CODE, CONTRACT)";
   }
   attribute PlanStatus Text {
      fetch = "Equipment_Functional_API.Is_Planned_For_Operation(CONTRACT, MCH_CODE)";
   }
   attribute OutOperStatus Text {
      fetch = "Equipment_Functional_API.Is_Out_Of_Operation(CONTRACT, MCH_CODE)";
   }
   attribute InOperStatus Text {
      fetch = "Equipment_Functional_API.Is_In_Operation(CONTRACT, MCH_CODE)";
   }
   attribute Scrapped Text {
      fetch = "Equipment_Functional_API.Is_Scrapped(CONTRACT, MCH_CODE)";
   }
   attribute HasStructure Text {
      fetch = "Equipment_Object_API.Has_Structure(CONTRACT, MCH_CODE)";
   }
   @DynamicComponentDependency PCMSCI
   attribute ObjExist Text {
      fetch = "Psc_Contr_Product_Scope_API.Object_Exist_In_Srv_Line(MCH_CODE, CONTRACT)";
   }
   attribute Note Text {
      editable = [true];
   }
   attribute FetchCostCenter Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute CostCenterCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'CostCenter')";
   }
   attribute HideCostCenter Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'CostCenter')";
   }
   attribute FetchObjectNo Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'Object')";
   }
   attribute HideObjectNo Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'Object')";
   }
   attribute ObjtsCstCenterView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'CostCenter')";
   }
   attribute ObjtsObjectNoView Text {
      fetch = "Equipment_Object_Api.Get_Code_Part_View(CONTRACT,'Object')";
   }
   attribute ObjectCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'Object')";
   }
   attribute RemoveRequirements Text {
      fetch = "NULL";
      updatable = [true];
      editable = [true];

   }
   attribute OldMchType Text {
      fetch = "MCH_TYPE";
      insertable = [false];
      updatable = [false];


   }
   attribute OldType Text {
      fetch = "TYPE";
      insertable = [false];
      updatable = [false];

   }
   attribute MchTypeHasTechReference Text {
      fetch = "EQUIPMENT_OBJ_TYPE_Api.Has_Technical_Spec_No(mch_type)";
      updatable = [false];
      insertable = [false];

   }
   attribute LuName Text {
      fetch = "lu_name";
      insertable = [false];
      updatable = [false];
   }
   attribute CmStdId Text {
      fetch = "CM_CLASS_API.Get_Cm_Std_Id(process_class_id, item_class_id)";
      insertable = [false];
      updatable = [false];
   }

   attribute KeyRef Text {
      fetch = "key_ref";
      insertable = [false];
      updatable = [false];

   }

   attribute SelectionParameters Enumeration(SelectionAttribTypeEnum) {
      fetch = "'Both'";
      insertable = [false];
      updatable = [false];
   }
   attribute TechnicalSpecNo Number {
      fetch = "Technical_Object_Reference_API.Get_Technical_Spec_No(lu_name, key_ref)";
      insertable = [false];
      updatable = [false];
   }

   attribute SafeAccessCode Enumeration(SafeAccessCode) {
      label = "Safe Access";
      required = [true];
   }
   attribute Objkey Text {
      fetch = "objkey";
   }
   attribute CreateWo Text {
      fetch = "Equipment_Object_Level_API.Get_Create_Wo(OBJ_LEVEL)";
   }
   attribute CreatePm Text {
      fetch = "Equipment_Object_Level_API.Get_Create_Pm(OBJ_LEVEL)";
   }
   attribute ClusterId Text;
   reference ItemClassRef(ItemClassId) to ItemClass(ItemClassId);
   reference EquipmentCriticalityRef(Criticality) to EquipmentCriticality(Criticality);
   reference LocationRef(LocationId) to Location(LocationId);
   reference LocationCardRef(LocationId) to EquipObjectLocationLov(LocationId);
   @DynamicComponentDependency PCMSTD
   reference PmProgramRef(AppliedPmProgramId, AppliedPmProgramRev) to PmProgram(PmProgramId, PmProgramRev);
   reference ProcessClassRef(ProcessClassId) to ProcessClass(ProcessClassId) {
      label = "Process Class";
   }
   @DynamicComponentDependency WOPS
   reference DwpClusterIdRef(Contract, ClusterId) to WopsObjectCluster(ClusterSite, ClusterId) {
      label = "DWP Cluster ID";
   }
   //reference EquipmentFunctionalRef(Contract, MchCode) to EquipmentFunctional(Contract, MchCode);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentFunctionalLov(Contract, MchCode) {
      label = "Object ID";
   }
   reference ObjLevelRef(ObjLevel) to EquipmentObjectLevel(ObjLevel) {
      label = "Object Level";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Belongs to Object";
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference SupMchCodePerfRef(SupContract, SupMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference TypeRef(Type) to TypeDesignation(Type) {
      label = "Type Designation";
      copy MchType to MchType;

   }
   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";

   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference CategoryIdRef(CategoryId) to EquipmentObjCategory(CategoryId) {
      label = "Category";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference LocationIdRef(LocationId) to Location(LocationId) {
      label = "Location ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ItemClassIdRef(ItemClassId) to ItemClass(ItemClassId) {
      label = "Item Class";
   }
   reference CriticalityRef(Criticality) to EquipmentCriticality(Criticality) {
      label = "Criticality";
   }
   reference ManufacturerNoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId) {
      label = "Manufacturer";
   }
   reference PartManufacturerRef(PartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Part Manufacturer";
   }
   reference SupplierInfoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
//   reference CostCenterRef(Company, CostCenter) to AccountingCodepartB(Company, CostCenter);
   reference ObjectNoRef(Company, ObjectNo) to AccountingCodepartE(Company, CodeE) {
      label = "Object";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference LocationMchCodeRef(LocationContract, LocationMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Locational Object";
      copy EquipmentObjectSeq to LocationObjectSeq;
   }
   reference LocationMchCodePerfRef(LocationContract, LocationMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to LocationObjectSeq;
   }
   reference LocationContractRef(LocationContract) to UserAllowedSiteLov(Contract) {
      label = "Locational Object Site";
   }

   reference FromMchCodeRef(FromContract, FromMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "From Object";
      copy EquipmentObjectSeq to FromObjectSeq;
   }
   reference FromMchCodePerfRef(FromContract, FromMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to FromObjectSeq;
   }
   reference FromContractRef(FromContract) to UserAllowedSiteLov(Contract) {
      label = "From Object Site";
   }
   reference ToMchCodeRef(ToContract, ToMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "To Object";
      copy EquipmentObjectSeq to ToObjectSeq;
   }
   reference ToMchCodePerfRef(ToContract, ToMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to ToObjectSeq;
   }
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Object Site";
   }
   reference ProcessMchCodeRef(ProcessContract, ProcessMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Process Object";
      copy EquipmentObjectSeq to ProcessObjectSeq;
   }
   reference ProcessMchCodePerfRef(ProcessContract, ProcessMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to ProcessObjectSeq;
   }
   reference ProcessContractRef(ProcessContract) to UserAllowedSiteLov(Contract) {
      label = "Process Object Site";
   }
   reference PipeMchCodeRef(PipeContract, PipeMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Pipe System";
      copy EquipmentObjectSeq to PipeObjectSeq;
   }
   reference PipeMchCodePerfRef(PipeContract, PipeMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to PipeObjectSeq;
   }
   reference PipeContractRef(PipeContract) to UserAllowedSiteLov(Contract) {
      label = "Pipe System Site";
   }
   reference CircuitMchCodeRef(CircuitContract, CircuitMchCode) to EquipmentFunctional(Contract, MchCode) {
      label = "Electrical System";
      copy EquipmentObjectSeq to CircuitObjectSeq;
   }
   reference CircuitMchCodePerfRef(CircuitContract, CircuitMchCode) to EquipmentFunctionalPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to CircuitObjectSeq;
   }
   reference CircuitContractRef(CircuitContract) to UserAllowedSiteLov(Contract) {
      label = "Electrical System Site";
   }
   @DynamicComponentDependency PCMSTD
   reference AppliedPmProgramIdRef(AppliedPmProgramId) to PmProgram(PmProgramId) {
      label = "PM Program ID";
   }
   reference CostCenterCodePartRef(Company, CostCenterCodePart, CostCenter) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference ObjectCodePartRef(Company, ObjectCodePart, ObjectNo) to AccountingCodePartValue(Company, CodePart, CodePartValue);

   array EquipmentObjectJournalArray(EquipmentObjectSeq) to EquipmentObjectJournal(EquipmentObjectSeq);
   array EquipmentObjectPartyArray(EquipmentObjectSeq) to EquipmentObjectParty(EquipmentObjectSeq);
   array EquipmentObjectSparePartArray(EquipmentObjectSeq) to EquipmentObjectSpare(EquipmentObjectSeq);
   @DynamicComponentDependency OPPLAN
   array OperationalModeGroupsArray(EquipmentObjectSeq) to ObjectOperModeGroup(EquipmentObjectSeq);
   array TestPointsarray(EquipmentObjectSeq, LuName) to EquipmentObjectTestPnt(EquipmentObjectSeq, LuName);
   array TechnicalObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
   array TypeDesignationArray(Type) to TypeDesignation(Type);

   action SpreadSafeAccessCode;

   action SetInOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetOutOfOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetScrapped {
      ludependencies = EquipmentFunctional;
   }
   action SetStructureInOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetStructureOutOfOperation {
      ludependencies = EquipmentFunctional;
   }

   action SetStructureScrapped {
      ludependencies = EquipmentFunctional;
   }

   action SetLocationStructure {
      ludependencies = EquipmentFunctional;
      parameter LocationId Text;
   }

   action ResetLocationStructure {
      ludependencies = EquipmentFunctional;
   }
}

@Override
entity EquipmentObjectJournal {
   crud = Read, Update;
   keys = EquipmentObjectSeq, LineNo {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq and LINE_NO = :LineNo";
   }
   supportwarnings = [true];
   attribute MchCode Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute LineNo Text {
      required = [true];
   }
   attribute Note Text {
      editable = [true];
   }
   attribute ModifyDate Timestamp {
      editable = [false];
   }
   attribute ModifiedBy Text {
      editable = [false];
   }
   attribute EventType Enumeration(FuncObjEvtType) {
      editable = [false];
   }
}

@Override
@DynamicComponentDependency OPPLAN
entity ObjectOperModeGroup {
   crud = Read, Create, Delete;
   keys = EquipmentObjectSeq, OperModeGroupId {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq  AND OPER_MODE_GROUP_ID = :OperModeGroupId";
   }
   --use attributes = MchCode, Contract;

   attribute Inherited Boolean("TRUE", "FALSE") {
      label = "Inherited from Parent";
      editable = [false];
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
   array OperationalModesArray() to OperModeGroupConnect() {
      where = "(:child.OperModeGroupId IN (select oper_mode_group_id FROM OBJECT_OPER_MODE_GROUP a WHERE a.equipment_object_seq = :parent.EquipmentObjectSeq))";
   }
}

@Override
@DynamicComponentDependency OPPLAN
entity OperModeGroupConnect {
   crud = Read;
   ludependencies = ObjectOperModeGroup;

   keys = OperModeId, OperModeGroupId;
   attribute OperModeGroupId Text {
      editable = [false];
   }
   reference OperModeIdRef(OperModeId) to OperationalMode(OperModeId) {
      label = "Operational Mode";
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
}

@Override
entity TypeDesignation {
   crud = Read;
   ludependencies = EquipmentFunctional;

   from = "type_designation";
   exec = "TYPE_DESIGNATION_API";
   keys = Type {
      where = "TYPE = :Type";
   }
   supportwarnings = [true];
   use attributes = Description, KeyRef, LuName;
   attribute Type Text {
      fetch = "type";
      label = "Type Designation";
      maxlength = 100;
      required = [true];
      editable = [false];
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 60;
      editable = [false];
   }
   attribute MchType Text {
      fetch = "mch_type";
      label = "Object Type";
      maxlength = 20;
      editable = [false];
   }
   attribute KeyRef Text {
      fetch = "key_ref";
      label = "Key Ref";
      maxlength = 600;
      editable = [false];
   }
   attribute LuName Text {
      fetch = "lu_name";
      label = "LU Name";
      maxlength = 30;
      editable = [false];
   }
   attribute TechnicalSpecNo Number {
      fetch = "Technical_Object_Reference_API.Get_Technical_Spec_No(lu_name, key_ref)";
      insertable = [false];
      updatable = [false];
   }
   array TypeDesObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
}

@Override
@DynamicComponentDependency PLADES
entity PlantObject {

}
@Override
entity EquipmentObjectLevel {
   crud = Read;
   //This ObjLevelToSearch is used by ObjLevelSelector to search Object level without case matching.
   attribute ObjLevelToSearch Text {
      fetch = "Obj_Level";
      label = "Object Level";

   }
}
------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function  GetObjectImage Stream {
   parameter Contract Text;
   parameter MchCode Text;
}
function GetExistWarning Text {
   parameter Contract Text;
   parameter MchCode Text;
}
function GetExistWarning Text {
   parameter Selection Text;
}
structure TypeDesValues {
   attribute MchType Text;
   attribute ItemClass Text;
}
function GetTypeDesignationValues Structure(TypeDesValues) {
   parameter Type Text;
}
function GetMchType Text {
   parameter Type Text;
}
function GetItemClassId Text {
   parameter MchCode Text;
   parameter Contract Text;
   parameter MchType Text;
}
function GetTypeDesignations List<Entity(TypeDesignation)> {
   parameter MchType Text;
   where = "mch_type LIKE nvl(:MchType,mch_type) ";
}

//@DynamicComponentDependency PURCH
function GetPartNos List<Entity(PartCatalog)> {
   where = "PART_NO NOT IN (SELECT PART_NO
                         FROM PURCHASE_PART
                        WHERE EXTERNAL_RESOURCE_DB = 'TRUE')";

}

function PartManufactureFilter List<Entity(PartManufacturer)> {
   parameter PartNo Text;
   where = "PART_NO = :PartNo";
}

function HasMchTypeTechSpec Text {
   parameter MchType Text;
}
function GetLogicalCodePartValues Structure(LogicalCodePartValues) {
   parameter Contract Text;
}
function GetCostCenterAcc List<Entity(Account)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeB List<Entity(CodeB)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeC List<Entity(CodeC)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeD List<Entity(CodeD)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeE List<Entity(CodeE)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeF List<Entity(CodeF)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeG List<Entity(CodeG)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeH List<Entity(CodeH)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeI List<Entity(CodeI)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeJ List<Entity(CodeJ)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCompanyVal Text {
   parameter Contract Text;
}
function ExistReference Structure(RequirementStruct) {
   parameter MchCode Text;
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure LogicalCodePartValues {
   attribute FetchCostCenter Text;
   attribute CostCenterCodePart Text;
   attribute HideCostCenter   Text;
   attribute FetchObjectNo  Text;
   attribute ObjectCodePart Text;
   attribute HideObjectNo    Text;
}
structure RequirementStruct {
   attribute ReqExist Text;
   attribute ReqExistNew Text;
   attribute PrevMchType Text;

}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------


