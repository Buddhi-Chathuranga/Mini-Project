projection MaintenanceHistoryForObjectHandling;
component EQUIP;
layer Core;
description "Put some useful description here ...";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
include fragment UserAllowedSiteLovSelector;
include fragment OrgCodeAllowedSiteLov1Selector;
include fragment OrgCodeAllowedSiteLovSelector;
include fragment MaintenanceObjectLovSelector;
@DynamicComponentDependency PCMSCI
include fragment PscContrProductLovSelector;
@DynamicComponentDependency PCMSCI
include fragment PscSrvManitObjectsLovSelector;
@DynamicComponentDependency LINAST
include fragment LinastLinearAssetLovSelector;
include fragment ResourceEquipmentLovSelector;
include fragment WorkOrderSymptCodeLovSelector;
include fragment CauseLov2Selector;
@DynamicComponentDependency WO
include fragment JtTaskCostCodeManualSelector;
include fragment WorkOrderTypeCodeLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentSerialSet for EquipmentSerial;
@DynamicComponentDependency WO
entityset JtTaskSet for JtTask;
@DynamicComponentDependency WO
entityset JtTaskStepSet for JtTaskStep;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentSerial {
   from = "equipment_serial_uiv";
   keys = EquipmentObjectSeq {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq ";
   }

   attribute MchName Text {
      label = "Description";
   }
   attribute MchCode Text {
      label = "Object ID";
      required = [false];
      editable = [ETag = null];
   }
   attribute Contract Text {
      label = "Site";
      editable = [ETag = null];
   }
   attribute SerialNo Text {
      label = "Serial No";
   }
   attribute PartNo Text {
      label = "Part No";
   }
   attribute LuName Text {
      fetch = "'EquipmentObject'";
   }
   attribute Objkey Text {
      fetch = "objkey";
   }
}


@Override
@DynamicComponentDependency WO
entity JtTask {
   from = "WORK_TASK_HIST_UIV";
   exec = "JT_TASK_API";

   attribute OrderNo Number {
      fetch = "order_no";
      implementationtype = "Decimal";
   }
   attribute Site Text {
      fetch = "SITE";
      label = "Site";
      maxlength = 5;
      required = [true];
      insertable = [true];
      updatable = [false];
      format = uppercase;
   }
   attribute ReportedConnectionType Enumeration(MaintConnectionType) {
      fetch = "REPORTED_CONNECTION_TYPE_DB";
      label = "Reported Connection Type";
      required = [true];
      editable = [true];
   }
   attribute ReportedObjectSite Text {
      fetch = "REPORTED_OBJECT_SITE";
      label = "Reported Object Site";
      format = uppercase;
   }
   attribute ReportedObjectId Text {
      fetch = "REPORTED_OBJECT_ID";
      label = "Reported Object ID";
      format = uppercase;
   }
   attribute ReportedObjectDescription Text {
      fetch = "REPORTED_OBJECT_DESCRIPTION";
      label = "Reported Object Description";
      editable = [false];
      updatable = [false];
   }
   attribute ReportedObjConnLuNameDb Text {
      fetch = "REPORTED_OBJ_CONN_LU_NAME_DB";
      label = "Reported Obj Conn Lu Name Db";
   }
   attribute ActualConnectionType Enumeration(MaintConnectionType) {
      fetch = "ACTUAL_CONNECTION_TYPE_DB";
      label = "Actual Connection Type";
      required = [true];
      editable = [true];
   }
   attribute ActualObjectSite Text {
      fetch = "ACTUAL_OBJECT_SITE";
      label = "Actual Object Site";
      format = uppercase;
   }
   attribute ActualObjectId Text {
      fetch = "ACTUAL_OBJECT_ID";
      label = "Actual Object ID";
      format = uppercase;
   }
   attribute ActualObjectDescription Text {
      fetch = "ACTUAL_OBJECT_DESCRIPTION";
      label = "Actual Object Description";
      editable = [false];
      updatable = [false];
   }
   attribute ActualObjConnLuNameDb Text {
      fetch = "ACTUAL_OBJ_CONN_LU_NAME_DB";
      label = "Actual Obj Conn Lu Name Db";
   }
   attribute ItemClassSource Text {
      fetch = "ITEM_CLASS_SOURCE";
      label = "Item Class Source";
      insertable = [true];
      updatable = [false];
      editable = [false];
   }
   attribute MinVisitDuration Number {
      fetch = "min_visit_duration";
      label = "Min. Visit Duration";
      insertable = [true];
      updatable = [true];
      implementationtype = "NUMBER";
   }
   attribute Dependencies Text {
      fetch = "Jt_Task_Dependency_API.Get_Dependencies(TASK_SEQ)";
      label = "Dependencies";
      maxlength = 2000;
      editable = [false];
   }
   attribute CostCode Text {
      fetch = "COST_CODE";
      label = "Overriding Cost Code";
   }
   attribute VendorNo Text {
      fetch = "VENDOR_NO";
      label = "Contractor";
   }
   attribute ContractorOwner Text {
      fetch = "CONTRACTOR_OWNER";
      label = "Contractor Coordinator";
   }
   attribute AllowMultipleVisits Boolean("TRUE", "FALSE") {
      label = "Allow Multiple Visits";
      fetch = "allow_multiple_visits_db";
      required = [true];
   }
   attribute GenerateNote Boolean("TRUE", "FALSE") {
      fetch = "nvl(GENERATE_NOTE, 'FALSE')";
      label = "Generate Note";
   }
   attribute SourceConnectionLuName Enumeration(JtConnectedObject.EqSource) {
      fetch = "source_connection_lu_name_db";
      label = "Source Connection";
      editable = [false];
   }
   attribute SourceConnectionLuNameDb Text {
      fetch = "source_connection_lu_name_db";
      label = "Source Connection Db";
      editable = [false];
   }
   attribute SourceObjectSite Text {
      fetch = "Jt_Object_Conn_Utility_API.Get_Object_Site(source_connection_lu_name_db, source_connection_rowkey)";
      label = "Source Site";
      editable = [false];
      updatable = [false];
      format = uppercase;
   }
   attribute SourceObjectId Text {
      fetch = "Jt_Object_Conn_Utility_API.Get_Object_Id(source_connection_lu_name_db, source_connection_rowkey)";
      label = "Source ID";
      editable = [false];
      format = uppercase;
   }
   attribute SourceObjectDescription Text {
      fetch = "Jt_Object_Conn_Utility_API.Get_Object_Description(source_connection_lu_name_db, source_connection_rowkey)";
      label = "Source Description";
      editable = [false];
   }
   attribute SourceRef1 Text {
      label = "Source Ref 1";
      editable = [false];
   }
   attribute SourceRef2 Text {
      label = "Source Ref 2";
      editable = [false];
   }
   attribute SourceRef3 Text {
      label = "Source Ref 3";
      editable = [false];
   }
   attribute SourceRef4 Text {
      label = "Source Ref 4";
      editable = [false];
   }
   attribute PmGroupId Text {
      fetch = "pm_group_id";
      editable = [false];
   }
   attribute PmGroupingRuleId Text {
      fetch = "Jt_Task_API.Get_Pm_Grouping_Rule_Id(WO_NO, TASK_SEQ)";
      label = "Pm Grouping Rule";
      editable = [false];
   }

//   @DynamicComponentDependency SLA
//   attribute SlaOrderLineNo Number {
//      fetch = "sla_order_line_no";
//      editable = [false];
//   }
   attribute ExcludeFromScheduling Boolean("TRUE", "FALSE") {
      label = "Exclude from Scheduling";
      fetch = "exclude_from_scheduling_db";
   }
   attribute WoNo Number {
      fetch = "WO_NO";
      label = "WO No";
      maxlength = 100;
      required = [true];
      insertable = [true];
      updatable = [false];
   }

   attribute ActualObjConnRowkey Text {
      fetch = "ACTUAL_OBJ_CONN_ROWKEY";
   }
   @DynamicComponentDependency SVCSCH
   attribute AppointmentMode Text {
      fetch = "Svcsch_Task_Sched_Util_API.Get_Appointment_Mode(TASK_SEQ)";
      editable = [false];
      insertable = [false];
   }
   @DynamicComponentDependency SVCSCH
   attribute AppointmentStart Timestamp {
      fetch = "Svcsch_Task_Sched_Util_API.Get_Appointment_Start(TASK_SEQ)";
      editable = [false];
      insertable = [false];
   }
   @DynamicComponentDependency SVCSCH
   attribute AppointmentCompletion Timestamp {
      fetch = "Svcsch_Task_Sched_Util_API.Get_Appointment_End(TASK_SEQ)";
      editable = [false];
      insertable = [false];
   }
   reference SiteRef(Site) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference OrganizationSiteRef(OrganizationSite) to UserAllowedSiteLov(Contract) {
      label = "Maintenance Organization Site";
   }
   reference OrganizationIdRef(OrganizationSite, OrganizationId) to OrgCodeAllowedSiteLov1(Contract, OrgCode) {
      label = "Maintenance Organization";
   }
   reference ReportedObjectSiteRef(ReportedObjectSite) to UserAllowedSiteLov(Contract) {
      label = "Reported Object Site";
   }
   reference ReportedObjectIdRef(ReportedObjectSite, ReportedObjectId) to MaintenanceObjectLov(Contract, MchCode) {
      label = "Reported Object ID";
      copy MchName to ReportedObjectDescription;
   }
   @DynamicComponentDependency PCMSCI
   reference ReportedObjectContractRef(ReportedObjectSite, ReportedObjectId) to PscSrvManitObjectsLov(Contract, MchCode) {
      label = "Reported Object ID";
   }
   @DynamicComponentDependency LINAST
   reference ReportedObjectLinearAssetRef(ReportedObjectSite, ReportedObjectId) to LinastLinearAssetLov(Site, LinearAssetName) {
      label = "Linear Asset";
      copy LinearAssetRevisionNo to LinastLinearAssetRevNo;
      copy LinearAssetSq to LinastLinearAssetSq;
      copy Description to ReportedObjectDescription;
   }
   reference ReportedObjectToolEquipmentRef(ReportedObjectId) to ResourceEquipmentLov(ResourceId) {
      label = "Tool/Equipment";
      copy ResourceSeq to ResourceSeq;
      copy Description to ReportedObjectDescription;
   }
   reference ActualObjectSiteRef(ActualObjectSite) to UserAllowedSiteLov(Contract) {
      label = "Actual Object Site";
   }
   reference ActualObjectIdRef(ActualObjectSite, ActualObjectId) to MaintenanceObjectLov(Contract, MchCode) {
      label = "Actual Object ID";
      copy MchName to ActualObjectDescription;
   }
   @DynamicComponentDependency PCMSCI
   reference ActualObjectContractRef(ActualObjectSite, ActualObjectId) to PscSrvManitObjectsLov(Contract, MchCode) {
      label = "Actual Object ID";
      copy MchName to ActualObjectDescription;
   }
   @DynamicComponentDependency LINAST
   reference ActualObjectLinearAssetRef(ActualObjectSite, ActualObjectId) to LinastLinearAssetLov(Site, LinearAssetName) {
      label = "Linear Asset";
      copy LinearAssetRevisionNo to LinastLinearAssetRevNo;
      copy LinearAssetSq to LinastLinearAssetSq;
      copy Description to ActualObjectDescription;
   }
   reference ActualObjectToolEquipmentRef(ActualObjectId) to ResourceEquipmentLov(ResourceId) {
      label = "Tool/Equipment";
      copy ResourceSeq to ResourceSeq;
      copy Description to ActualObjectDescription;
   }
   reference ErrorTypeRef(ErrorType) to WorkOrderTypeCode(ErrType) {
      label = "Fault Type";
   }
   reference ErrorSymptomRef(ErrorSymptom) to WorkOrderSymptCodeLov(ErrSymptom) {
      label = "Symptom ID";
   }
   reference ErrorCauseRef(ItemClassId, ItemClassFunction, ErrorType, ErrorCause) to CauseLov2(ItemClassId, FunctionId, ErrType, ErrCause) {
      label = "Cause";
   }
   reference MaintTeamRef(MaintTeamSite, TeamId) to MaintTeam(Contract, TeamId) {
      label = "Team ID";
   }
   reference PriorityIdRef(PriorityId) to MaintenancePriority(PriorityId) {
      label = "Priority ID";
   }
   reference WorkTypeIdRef(WorkTypeId) to WorkType(WorkTypeId) {
      label = "Work Type ID";
   }
   reference WorkStageIdRef(WorkStageId) to WorkStage(WorkStageId) {
      label = "Work Stage ID";
   }
   reference VendorNoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Contractor";
   }
   reference ContractorOwnerRef(ContractorOwner) to PersonInfo(PersonId) {
      label = "Contractor Coordinator";
   }
   reference CostCodeRef(Company, CostCode) to JtTaskCostCodeManual(Company, CostCode) {
      label = "Overriding Cost Code";
   }
//   @DynamicComponentDependency SLA
//   reference SlaOrderLineNoRef(TaskSeq, SlaOrderNo, SlaOrderLineNo) to SlaOrderLineConnectionTask(TaskSeq, SlaOrderNo, SlaOrderLineNo) {
//      label = "SLA Order Line No";
//   }

}

@Override
@DynamicComponentDependency WO
entity JtTaskStep {
   from = "WORK_TASK_STEP_HIST_UIV";
   keys = TaskSeq, TaskStepSeq {
      where = "TASK_SEQ = :TaskSeq AND TASK_STEP_SEQ = :TaskStepSeq";
   }

   attribute OrderNo Number {
      fetch = "ORDER_NO";
      label = "Order No";
      maxlength = 20;
   }

   attribute ObjectConnectionType Enumeration(MaintConnectionType.EqCatLinTl) {
      fetch = "OBJECT_CONNECTION_TYPE_DB";
   }
   attribute ObjectSite Text {
      fetch = "OBJECT_SITE";
      label = "Object Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute ObjectId Text {
      fetch = "OBJECT_ID";
      label = "Object ID";
      maxlength = 200;
      format = uppercase;
   }
   attribute ObjectDescription Text {
      fetch = "OBJECT_DESCRIPTION";
      label = "Object Description";
      maxlength = 200;
      editable = [true];
   }
   attribute ObjectConnectionLuName Enumeration(JtConnectedObject) {
      editable = [false];
   }
   attribute ObjectConnectionLuNameDb Text {
      fetch = "OBJECT_CONNECTION_LU_NAME_DB";
      label = "Object Connection Lu Name";
      maxlength = 20;
   }
   attribute ObjectConnectionRowkey Text {
      fetch = "OBJECT_CONNECTION_ROWKEY";
   }
   attribute SourceConnectionLuName Enumeration(JtConnectedObject) {
      label = "Source Connection";
      editable = [false];
   }
   attribute SourceConnectionRowkey Text {
      editable = [false];
   }
   attribute SourceObjectSite Text {
      fetch = "SOURCE_OBJECT_SITE";
      label = "Source Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute SourceObjectId Text {
      fetch = "SOURCE_OBJECT_ID";
      label = "Source ID";
      maxlength = 200;
      editable = [false];
      format = uppercase;
   }
   attribute SourceObjectDescription Text {
      fetch = "SOURCE_OBJECT_DESCRIPTION";
      label = "Source Description";
      maxlength = 200;
      editable = [false];
   }
   attribute SourceRef2 Text {
      label = "Source Ref 2";
      editable = [ETag = null];
   }
   attribute SourceRef3 Text {
      label = "Source Ref 3";
      editable = [ETag = null];
   }
   attribute SourceRef4 Text {
      label = "Source Ref 4";
      editable = [ETag = null];
   }
   attribute SourceRef1 Text {
      label = "Source Ref 1";
      editable = [ETag = null];
   }
   attribute NoteId Number {
      editable = [false];
   }
   attribute CancelCause Text {
      editable = [false];
   }
   attribute SourceConnectionLuNameDb Text {
      fetch = "SOURCE_CONNECTION_LU_NAME_DB";
      label = "Source Connection Lu Name";
      maxlength = 20;
      editable = [false];
   }

   attribute JobDescription Text {
      fetch = "Jt_Task_Step_API.Get_Task_Temp_Job_Desc(TASK_SEQ,TASK_STEP_SEQ)";
      label = "Job Description";
      maxlength = 2000;
      editable = [false];
   }

   attribute TestPointID Text {
      fetch = "Jt_Task_Step_API.Get_Pm_Test_Point_Id(TASK_SEQ ,TASK_STEP_SEQ)";
      label = "Test Point ID";
      maxlength = 2000;
      editable = [false];
   }

   attribute GenerateNote Boolean("TRUE", "FALSE") {

      fetch = "Decode(GENERATE_NOTE, NULL, 'FALSE', GENERATE_NOTE)";
   }

   attribute ReportedBy Text {
      fetch = "Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User)";
   }

   attribute WoNo Number {
      fetch = "Jt_Task_API.Get_Wo_No(TASK_SEQ)";
   }

   reference JtTaskRef(TaskSeq) to JtTask(TaskSeq);
   reference CancelTaskCauseRef(CancelCause) to CancelTaskCause(CancelTaskCause);

   reference TaskSeqRef(TaskSeq) to JtTask(TaskSeq) {
      label = "Task No";
   }
   reference ObjectSiteRef(ObjectSite) to UserAllowedSiteLov(Contract) {
      label = "Object Site";
   }
   reference ObjectIdRef(ObjectSite, ObjectId) to MaintenanceObjectLov(Contract, MchCode) {
      label = "Object ID";
   }

   @DynamicComponentDependency LINAST
   reference LinearAssetRef(ObjectSite, ObjectId) to LinastLinearAssetLov(Site, LinearAssetName) {
      label = "Linear Asset";

   }

   reference ToolEquipmentRef(ObjectId) to ResourceEquipmentLov(ResourceId) {
      label = "Tool/Equipment";
      copy ResourceSeq to ResourceSeq;
   }

   reference CreatedByRef(CreatedBy) to FndUser(Identity) {
      label = "Created By";
   }
   reference CancelCauseRef(CancelCause) to CancelTaskCause(CancelTaskCause) {
      label = "Cancel Cause";
   }

}

------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------


--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency WO
function GetHistoricalWorkTasksFiltered List<Entity(JtTask)> {
   basedon JtTaskSet;
   ludependencies = JtTask;
   parameter LuName Text;
   parameter Objkey Text;
   where = "Actual_Obj_Conn_Lu_Name_Db = :LuName
 	      AND Actual_Obj_Conn_Rowkey = :Objkey
         AND OBJSTATE IN ('FINISHED', 'CANCELLED')";
}

@DynamicComponentDependency WO
function GetHistoricalWorkTaskStepsFiltered List<Entity(JtTaskStep)> {
   basedon JtTaskStepSet;
   ludependencies = JtTaskStep;
   parameter LuName Text;
   parameter Objkey Text;
   where = "OBJECT_CONNECTION_LU_NAME_DB = :LuName
 	      AND OBJECT_CONNECTION_ROWKEY = :Objkey
         AND OBJSTATE IN ('CANCELLED', 'DONE')";
}

-------------------------------------------------------------------------------
function PersonInfoFunction List<Entity(PersonInfo)> {
   parameter VendorNo Text;
   parameter Site Text;

   where = "((:VendorNo IS NOT NULL AND (user_id IN (select user_id from b2b_supplier_user where supplier_id = :VendorNo))) AND (:Site IS NOT NULL AND user_id IN(select userid from user_allowed_site where contract = :Site)))";
}

-------------------------------- STRUCTURES ---------------------------------



--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
