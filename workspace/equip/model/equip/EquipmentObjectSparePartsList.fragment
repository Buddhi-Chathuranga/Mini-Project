-----------------------------------------------------------------------------
--
--  Fragment:     EquipmentObjectSparePartList
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2018-08-09  ISHHLK  SAUXXW4-1301 tbwObjectSpareParts - Object Spare Part.
--  2019-02-22  ISHHLK  SAUXXW4-9658 Added warning and error messages.
--  2020-01-06  LASSLK  SAXTEND-1244 Implement LOV Filtering.
--  2021-05-17  DEEKLK  AM2020R1-7786, Modified DetachedSparePartListCommand.
--  2022-01-11  KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                      and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------
fragment EquipmentObjectSparePartsList;
component EQUIP;
layer Core;
description "Use to enter and view information on spare parts and spare part lists connected to the object.";

include fragment SparePartCommon;
include fragment EquipmentObjectUivSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------------- LIST ------------------------------------

list ObjectSparePartsList for EquipmentObjectSpare {
   lov SpareContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   field PurchasePartSlider {
      label = "Purchase Part Only";
      editable = [ETag = null];
      size = Small;
   }
   @DynamicComponentDependency PURCH
   field SpareId {
      size = Medium;
      editable = [ETag = null];
      lovswitch {

         when [PurchasePartSlider = false] {
            lov SpareIdRef with ReferenceInventoryPartWoLovSelector {
               search = PartNo, PartDescriptionInUse;
               description = SpareIdPerfRef.Description;
            }
         }
         when [PurchasePartSlider = true] {
            lov PurchaseSpareIdRef with PurchasePartSelectLov using ObjSparePurchasePartSelect(SpareContract) {
               search = PartNo, PartDescriptionInUse;
               description = PurchaseSpareIdPerfRef.Description;
            }
         }
      }
      validate command {
         variable WarningText Text;
         execute {
//            call CheckPartInfo(PartDescription, UoM, SpareId, SpareContract);
            if [SpareId != null] {
               call GetInfoMessage(WarningText, PurchaseSpareIdPerfRef.Description, UoM, SpareId, SpareContract) into WarningText;
               if [WarningText != null] {
                  messagebox("Warning Message",
                  information, "The part ${SpareId} is not connected to a supplier") {
                     when OK {
                        call GetInventoryQtyOnhand(SpareContract, SpareId) into QuantityOnHand;
                        call GetConditionCode(SpareId, ConditionCode) into ConditionCode;
                        call HasStructure(SpareId, SpareContract) into HasSpareStructure;
                        call GetPartType(SpareContract, SpareId) into InventoryPart;
                        call GetUnitMeas(UoM, SpareId, SpareContract) into UoM;
                        exit;
                     }
                     when "Cancel" {
                        set SpareId = null;
                        --set PartDescription = null;
                        set UoM = null;
                        exit;
                     }
                  }
               }
               else {
                  call GetInventoryQtyOnhand(SpareContract, SpareId) into QuantityOnHand;
                  call GetConditionCode(SpareId, ConditionCode) into ConditionCode;
                  call HasStructure(SpareId, SpareContract) into HasSpareStructure;
                  call GetPartType(SpareContract, SpareId) into InventoryPart;
                  call GetUnitMeas(UoM, SpareId, SpareContract) into UoM;
               }
            }
         }
      }
   }
//   @DynamicComponentDependency PURCH
//   field PartDescription {
//      size = Large;
//   }
   lov ConditionCodeRef with ConditionCodeSelectLov {
      search = ConditionCode, Description;
      size = Large;
      description = ConditionCodeRef.Description;
   }
   field AllowWoMatSite {
      size = Medium;
   }
   field PartOwnership {
      validate command {
         execute {
            if[(PartOwnership = "CompanyOwned") and Owner != null] {
               set Owner = null;
            }
         }
      }
   }

   field Owner {
      editable = [PartOwnership != "CompanyOwned" and PartOwnership != null];
      lovswitch {
         @DynamicComponentDependency PURCH
         when[PartOwnership = "SupplierLoaned"] {
            lov SupplierRef with PurchasePartSupplierLovSelector {
               search = VendorNo, VendorName;
               size = Large;
               description = SupplierRef.VendorName;
            }
         }
         when[PartOwnership = "CustomerOwned"] {
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               size = Large;
               description = OwnerRef.Name;
            }
         }
      }
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
   }
   field HasSpareStructure {
      size = Small;
      editable = [false];
   }
   field  InventoryPart {
      size = Medium;
   }
   @DynamicComponentDependency INVENT
   field InventoryPartRef.DimQuality {
      size = Medium;
      label = "Dimension/Quality";
   }
   @DynamicComponentDependency INVENT
   field InventoryPartRef.TypeDesignation {
      size = Medium;
      label = "Type Designation";
   }
   @DynamicComponentDependency INVENT
   field QuantityOnHand;
   field UoM {
      size = Small;
   }

   field Qty {
      label = "Quantity";
   }
   field MchPart {
      size = Small;
   }
   field DrawingNo {
      size = Small;
   }
   field DrawingPos {
      size = Small;
   }
   @DynamicComponentDependency INVENT
   field PickingLocation {
      size = Small;
   }
   field Note {
      multiline = true;
      size = Large;
   }
   commandgroup CommandGroupCmdGroup {
      command DetachedSparePartListCommand;

   }
   commandgroup CommandGroup2CmdGroup {
      @DynamicComponentDependency INVENT
      command CurrentQuantityonHandCommand;
      @DynamicComponentDependency INVENT
      command InventoryPartAvailabilityPlaCommand;
      @DynamicComponentDependency INVENT
      command InventoryPartCommand;
      @DynamicComponentDependency PURCH
      command SupplierperPartCommand;
   }
}

--------------------------------- SELECTOR ----------------------------------
@Override
selector ConditionCodeSelectLov for ConditionCode {
   field ConditionCode;
   field Description;
}

@Override
@DynamicComponentDependency PURCH
selector PurchasePartSelectLov for PurchasePartLov {
   field Contract;
   field PartNo;
   field PartDescriptionInUse;
}

@Override
@DynamicComponentDependency PURCH
selector PurchasePartSupplierLovSelector for PurchasePartSupplierLov {
   field Contract;
   field VendorNo;
   field VendorName;
}

--------------------------------- COMMANDS ----------------------------------

command DetachedSparePartListCommand for EquipmentObjectSpare {
   label = "Detached Spare Part List";
   mode = SelectedRecords;
   enabled = [HasSpareStructure = true];
   bulkexecute {
      bulknavigate "page/DetachedSparePartList/Form?$filter=SpareId eq $[SpareId] and SpareContract eq $[SpareContract]";
   }
}

@DynamicComponentDependency INVENT
command CurrentQuantityonHandCommand for EquipmentObjectSpare {
   label = "Current Quantity on Hand";
   mode = SelectedRecords;
   enabled = [SpareId != null and SpareContract != null and InventoryPart = "Inventory Part"];
   bulkexecute {
      bulknavigate "page/InventoryPartCurrentlyOnHand/Form?$filter=PartNo eq $[SpareId] and Contract eq $[SpareContract]";
   }
}

@DynamicComponentDependency INVENT
command InventoryPartAvailabilityPlaCommand for EquipmentObjectSpare {
   label = "Inventory Part Availability Planning";
   mode = SelectedRecords;
   enabled = [SpareId != null and SpareContract != null and InventoryPart = "Inventory Part"];
   bulkexecute {
      bulknavigate "page/InventoryPartAvailabilityPlanning/Form?$filter=PartNo eq $[SpareId] and Contract eq $[SpareContract]";
   }
}

@DynamicComponentDependency INVENT
command InventoryPartCommand for EquipmentObjectSpare {
   label = "Inventory Part";
   mode = SelectedRecords;
   enabled = [SpareId != null and SpareContract != null and InventoryPart = "Inventory Part"];
   bulkexecute {
      bulknavigate "page/InventoryPart/Form?$filter=PartNo eq $[SpareId] and Contract eq $[SpareContract]";
   }
}

@DynamicComponentDependency PURCH
command SupplierperPartCommand for EquipmentObjectSpare {
   label = "Supplier per Part";
   mode = SelectedRecords;
   enabled = [SpareId != null and SpareContract != null];
   bulkexecute {
      bulknavigate "page/SupplierForPurchasePart/Form?$filter=PartNo eq $[SpareId] and Contract eq $[SpareContract]";
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

-------------------------------- ENTITY SET ---------------------------------
entityset EquipmentObjectSpareSet for EquipmentObjectSpare;

---------------------------------- ENTITY -----------------------------------
@Override
entity EquipmentObjectSpare {
   supportwarnings = [true];
   keys = EquipmentObjectSeq, MchSpareSeq {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq and MCH_SPARE_SEQ = :MchSpareSeq";
   }
   attribute SpareContract Text {
      label = "Site";
   }
   attribute SpareId Text {
      label = "Part No";
      required = [true];
   }

   @DynamicComponentDependency PURCH
   attribute PartDescription Text {
      fetch = "nvl(Inventory_Part_Api.Get_Description(SPARE_CONTRACT,SPARE_ID) ,Purchase_Part_API.Get_Description(SPARE_CONTRACT,SPARE_ID))";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership.NoConsign) {
      label = "Ownership";
      editable = [true];
   }
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(PART_OWNERSHIP_API.Encode('PART_OWNERSHIP'), 'CUSTOMER OWNED', CUSTOMER_INFO_API.Get_Name('OWNER'), 'SUPPLIER LOANED', Supplier_API.Get_Vendor_Name('OWNER'), '')";
      label = "Owner Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute HasSpareStructure Boolean("TRUE", "FALSE") {
      fetch = "Equipment_Spare_Structure_API.Has_Spare_Structure(SPARE_ID,SPARE_CONTRACT)";
      label = "Structure";
      editable = [true];
   }
   @DynamicComponentDependency INVENT
   attribute QuantityOnHand Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand(SPARE_CONTRACT,SPARE_ID,NULL)";
      label = "Quantity On Hand";
      editable = [false];
   }
   attribute UoM Text {
      fetch = "Equipment_Spare_Structure_API.Get_Unit_Of_Measure(NULL,SPARE_ID,SPARE_CONTRACT)";
      label = "UoM";
      editable = [false];
   }
   attribute MchPart Text {
      label = "Part Classification";
   }
   @DynamicComponentDependency INVENT
   attribute PickingLocation Text {
      fetch = "Inventory_Part_Def_Loc_API.Get_Picking_Location_No(SPARE_CONTRACT,SPARE_ID)";
      label = "Picking Location";
      maxlength = 100;
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      editable = [false];
      required = [false];
   }

   attribute AllowWoMatSite Boolean("TRUE", "FALSE") {
      fetch = "allow_wo_mat_site";
      label = "Allow WO Material Site";
      editable = [true];
      required = [true];
   }
   attribute InventoryPart Text {
      label = "Inventory Part";
      fetch = "Equipment_Object_Spare_API.Get_Part_Type(SPARE_ID,SPARE_CONTRACT)";
      editable = [false];
   }

   attribute PurchasePartSlider Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Equipment_Object_Spare_API.Get_Part_Type(SPARE_ID,SPARE_CONTRACT), 'Non Inventory Part', 'TRUE', 'Inventory Part', 'FALSE')";
      editable = [true];
      required = [true];
   }
   attribute MchSpareSeq Number;
   @DynamicComponentDependency PURCH
   attribute VendorNo Number {
      fetch = "Supplier_API.Get_Vendor_Name(Part_Ownership)";
   }

   @DynamicComponentDependency INVENT
   attribute SupplyCode Text {
      fetch = "Inventory_Part_API.Get_Supply_Code(SPARE_CONTRACT,SPARE_ID)";
   }

   @DynamicComponentDependency PURCH
   reference PurchasePartRef(SpareContract, SpareId) to PurchasePart(Contract, PartNo);
   @DynamicComponentDependency INVENT
   reference InventoryPartRef(SpareContract, SpareId) to InventoryPart(Contract, PartNo);
   reference SpareContractRef(SpareContract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency INVENT
   reference SpareIdRef(SpareContract, SpareId) to InventoryPartWoLov(Contract, PartNo) {
      label = "Part No";
//      copy PartDescriptionInUse to PartDescription;
   }
   @DynamicComponentDependency INVENT
   reference SpareIdPerfRef(SpareContract, SpareId) to InventoryPart(Contract, PartNo);
   @DynamicComponentDependency PURCH
   reference PurchaseSpareIdRef(SpareContract, SpareId) to PurchasePartLov(Contract, PartNo);
   @DynamicComponentDependency PURCH
   reference PurchaseSpareIdPerfRef(SpareContract, SpareId) to PurchasePart(Contract, PartNo);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }

   @DynamicComponentDependency PURCH
   reference SupplierRef(SpareId, Owner) to PurchasePartSupplierLov(PartNo, VendorNo);
   reference OwnerRef(Owner) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Owner";
   }
   reference MchCodeRef(MchCode) to EquipmentObjectUiv(MchCode) {
      label = "Object ID";
   }
}
---------------------------------- ACTIONS ----------------------------------
action CheckPartInfo {
   initialcheck UserAllowedSite(SpareContract);
   supportwarnings = [true];
   parameter PartDescription  Text;
   parameter UoM              Text;
   parameter SpareId          Text;
   parameter SpareContract    Text;
}
--------------------------------- FUNCTIONS ---------------------------------



function HasStructure Text {
   parameter SpareId Text;
   parameter SpareContract Text;
}


function GetPartType Text {
   parameter SpareId Text;
   parameter SpareContract Text;
}
@DynamicComponentDependency PURCH
function ObjSparePurchasePartSelect List < Entity(PurchasePartLov) > {
   parameter Contract Text;
   where = "PART_NO NOT IN (select part_no from INVENTORY_PART_WO_LOV where contract = :Contract)";
}

------------------------------- ENUMERATIONS --------------------------------

-------------------------------- STRUCTURES ---------------------------------
