--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-08-06  SSILLK  SAUXXW4-1251, Converted MTG Version: 1.26. Implementation for  Enterprise Explorer Source: dlgSubstituteSparePart - Replace Part
-- 2018-09-14  SSILLK  SAUXXW4-9918, Replace Part - Some more improvements to be done.
 --2020-02-05  LASSLK   SAXTEND-1244,Implement LOV Filtering 
--------------------------------------------------------------------------------------
fragment ReplacePartAssistant;
component EQUIP;
layer Core;
description "Replace part Assistance ";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant SubstituteSparePartAssistant using SubstituteSparePartSet {
   label = "Replace Part";
   input(SpareId, SpareContract);

   init command {
      execute {

         call IsViewAvailable() into IsViewAvailableCheck;
         if [SpareContract = null] {
            call GetDefaultContract() into SpareContract;

         }

         if[SpareId != null] {
            if [IsViewAvailableCheck = "1"] {
               @DynamicComponentDependency PURCH
               call GetPurRepSpareIdDesc(SpareContract, SpareId) into DfRepSpareIdDescription;
            }
            if [IsViewAvailableCheck = "2"] {
               @DynamicComponentDependency INVENT
               call GetInvRepSpareIdDesc(SpareContract, SpareId) into DfRepSpareIdDescription;
            }
         }
      }

   }

   steps {
      step {

         group GbPart_to_ReplaceGroup;

         group GbReplace_withGroup;

         group GbReplace_Options__Required_Group;
         markdowntext {
            text = "Note! If any of the checkboxes for Work Task Templates or PM Actions are selected a background job will be started when clicking OK in the dialog. Notice that if there would be any Work Task Templates or PM Actions that of any reason cannot get a new revision via the background job, they need to be updated manually afterwards.";
         }

      }
      final step {
         command NavBackCommand;
      }
      cancelled step {

      }
   }

   finish command {

      enabled = [SpareId != null and  NewSpareId != null and SpareContract != null and(PmSparePart = "Y" or StdSparePart = "Y" or  ObjectSparePart = "Y" or DetachedSparePart = "Y")];
      variable MessageNo;


      execute {
         @DynamicComponentDependency PURCH
         call PreOkCheck(SpareContract, SpareId, NewSpareId, PmSparePart, StdSparePart, ObjectSparePart, DetachedSparePart) into MessageNo;


         if[MessageNo = 3]
            {
            info("This action will be run as a background job");
         }
         else
            {
            if[MessageNo = 1]
               {
               success("The part is correctly substituted");
            }
            else {
               if[MessageNo = 2]
                  {
                  error("The part was not substituted");
               }
            }
         }

      }
   }
   cancel command {
      label = "Cancel";
      execute {
         confirm("Assistant will be cancelled. Do you want to continue?") {
            when OK {
               navigate back;
            }
         }
      }
   }
   restart command {
      label = "Replace Another";
      visible = [true];
      enabled = [true];
   }
}

--------------------------------- COMMANDS ----------------------------------

command NavBackCommand {
   label = "Cancel";
   execute {
      navigate back;
   }

}



--------------------------------- SELECTORS ---------------------------------
@Override
@DynamicComponentDependency PURCH
selector PurchasePartLovSelector for PurchasePartLov {
   static Contract;
   static PartNo;
   static Description;
}
@Override
@DynamicComponentDependency INVENT
selector ReferenceInventoryPartWoLovSelector for InventoryPartWoLov {
   static Contract;
   static PartNo;
   static PartDescriptionInUse;
}
---------------------------------- GROUPS -----------------------------------


group GbPart_to_ReplaceGroup for SubstituteSparePartVirtual {
   label = "Part to Replace";
   field SpareId {

      lovswitch {

         when [IsViewAvailableCheck = "1" and SpareContract != null] {
            @DynamicComponentDependency PURCH
            lov  SparePartRef with PurchasePartLovSelector using GetPurchasePart(SpareContract) {
               search = PartNo, Description;
            }
         }
         when[IsViewAvailableCheck = "2" and SpareContract != null] {
            @DynamicComponentDependency INVENT
            lov  SparePartRef2 with ReferenceInventoryPartWoLovSelector using GetWoPurchasePart(SpareContract) {
               search = PartNo, PartDescriptionInUse;
            }
         }
         when [IsViewAvailableCheck = "1" and SpareContract = null] {
            @DynamicComponentDependency PURCH
            lov  SparePartRef with PurchasePartLovSelector using GetPurchasePartTwo {
               search = PartNo, Description;
            }
         }
         when[IsViewAvailableCheck = "2" and SpareContract = null] {
            @DynamicComponentDependency PURCH
            lov  SparePartRef2 with ReferenceInventoryPartWoLovSelector using GetPurchasePartTwo {
               search = PartNo, PartDescriptionInUse;
            }
         }
      }
      validate command {
         execute {
            if [IsViewAvailableCheck = "1"] {
               @DynamicComponentDependency PURCH
               call GetPurRepSpareIdDesc(SpareContract, SpareId) into DfRepSpareIdDescription;
            }
            if [IsViewAvailableCheck = "2"] {
               @DynamicComponentDependency INVENT
               call GetInvRepSpareIdDesc(SpareContract, SpareId) into DfRepSpareIdDescription;
            }
         }
      }
   }

   field DfRepSpareIdDescription;

   lov SpareContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
   }

}

group GbReplace_withGroup for SubstituteSparePartVirtual {
   label = "Replace with";

   field NewSpareId {

      lovswitch {
         when [IsViewAvailableCheck = "1" and SpareContract = null] {
            @DynamicComponentDependency PURCH
            lov  SparePartRef3 with PurchasePartLovSelector using GetNewSpareIdPurchasePart {
               search = PartNo, Description;
            }

         }
         when [IsViewAvailableCheck = "1"] {
            @DynamicComponentDependency PURCH
            lov  SparePartRef3 with PurchasePartLovSelector {
               search = PartNo, Description;
            }

         }
         when[IsViewAvailableCheck = "2"] {
            @DynamicComponentDependency INVENT
            lov  SparePartRef4 with ReferenceInventoryPartWoLovSelector {
               search = PartNo, PartDescriptionInUse;
            }

         }
      }
      validate command {
         execute {
            if [IsViewAvailableCheck = "1"] {
               @DynamicComponentDependency PURCH
               call GetPurRepSpareIdDesc(SpareContract, NewSpareId) into DfNewSpareIdDescription;
            }
            if [IsViewAvailableCheck = "2"] {
               @DynamicComponentDependency INVENT
               call GetInvRepSpareIdDesc(SpareContract, NewSpareId) into DfNewSpareIdDescription;
            }

         }
      }
   }
   field DfNewSpareIdDescription;
}

group GbReplace_Options__Required_Group for SubstituteSparePartVirtual {
   label = "Replace Options (Required)";
   field CbObjectSparePart {
      required = [true];
      validate command {
         execute {
            if [CbObjectSparePart = true] {
               set ObjectSparePart = "Y";
            }
            else {
               set ObjectSparePart = "N";
            }
         }
      }
   }
   field CbDetachedSparePart {
      required = [true];
      validate command {
         execute {
            if [CbDetachedSparePart = true] {
               set DetachedSparePart = "Y";
            }
            else {
               set DetachedSparePart = "N";
            }
         }
      }
   }
   field CbStdSparePart {
      required = [true];
      validate command {
         execute {
            if [CbStdSparePart = true] {
               set StdSparePart = "Y";
            }
            else {
               set StdSparePart = "N";
            }
         }
      }
   }
   field CbPmSparePart {
      required = [true];
      validate command {
         execute {
            if [CbPmSparePart = true] {
               set PmSparePart = "Y";
            }
            else {
               set PmSparePart = "N";
            }
         }
      }
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SubstituteSparePartSet for SubstituteSparePartVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
@DynamicComponentDependency PURCH
query  PurchasePartLov {
   from = "PURCHASE_PART";
   lu = PurchasePart;
   keys = Contract, PartNo;
   attribute Contract Text {
      label = "Site";
   }
   attribute PartNo Text;
   attribute Description Text;
   attribute QcCode Text {
      label = "QC Analyst ID";
   }
   attribute StatGrp Text {
      label = "Purchase Group";
   }
   attribute CloseCode Text {
      label = "Closing Code";
   }
   attribute InventoryFlag Text {
      label = "Inventory Part";
   }
   attribute OverDeliveryTolerance Number {
      label = "Over Delivery (%)";
   }
   attribute OverDelivery Text {
      label = "Over Delivery Check";
   }
   attribute StandardPackSize Number;
   attribute AcquisitionType Text;
}

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency PURCH
function GetPurchasePart List < Entity(PurchasePartLov) > {
   parameter Contract Text;
   where = "part_no IN (SELECT part_no FROM PURCHASE_PART WHERE CONTRACT = :Contract  AND EXTERNAL_RESOURCE_DB = 'FALSE')";
}
@DynamicComponentDependency INVENT
function GetWoPurchasePart List < Entity(InventoryPartWoLov) > {
   parameter Contract Text;
   where = "part_no IN (SELECT part_no  FROM INVENTORY_PART_WO_LOV WHERE CONTRACT = :Contract)";
}
@DynamicComponentDependency PURCH
function GetPurchasePartTwo List < Entity(PurchasePartLov) > {
   where = "part_no IN (SELECT part_no FROM PURCHASE_PART)";
}
@DynamicComponentDependency INVENT
function GetWoPurchasePartTwo List < Entity(InventoryPartWoLov) > {
   where = "part_no IN (SELECT part_no FROM INVENTORY_PART_WO_LOV)";
}
@DynamicComponentDependency PURCH
function GetNewSpareIdPurchasePart List < Entity(PurchasePartLov) > {
   where = "EXTERNAL_RESOURCE_DB = 'FALSE'";
}
function IsViewAvailable Text;
function GetDefaultContract Text;

@DynamicComponentDependency PURCH
function GetPurRepSpareIdDesc Text {
   parameter Contract  Text;
   parameter  SpareId     Text;
}
@DynamicComponentDependency INVENT
function GetInvRepSpareIdDesc Text {
   parameter Contract  Text;
   parameter  SpareId     Text;
}
@DynamicComponentDependency PURCH
@DynamicComponentDependency INVENT
action PreOkCheck Number {
   initialcheck UserAllowedSite(Contract);
   parameter Contract  Text;
   parameter  SpareId     Text;
   parameter NewSpareId  Text;
   parameter PmSparePart Text;
   parameter  StdSparePart Text;
   parameter  ObjectSparePart Text;
   parameter  DetachedSparePart Text;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

virtual SubstituteSparePartVirtual {

   attribute SpareId Text {
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute DfRepSpareIdDescription Text {
      label = "Description";
      maxlength = 2000;
   }
   attribute SpareContract Text {
      label = "Site";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute NewSpareId Text {
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute DfNewSpareIdDescription Text {
      label = "Description";
      maxlength = 2000;
   }
   attribute CbObjectSparePart Boolean("TRUE", "FALSE") {
      label = "Object Spare Part List";
      default = "True";
   }
   attribute CbDetachedSparePart Boolean("TRUE", "FALSE") {
      label = "Detached Spare Part List";
      default = "True";
   }
   attribute CbStdSparePart Boolean("TRUE", "FALSE") {
      label = "Work Task Templates";
      default = "True";
   }
   attribute CbPmSparePart Boolean("TRUE", "FALSE") {
      label = "PM Actions";
      default = "True";
   }
   attribute ObjectSparePart Text {
      maxlength = 5;
      default = "'Y'";
   }
   attribute DetachedSparePart Text {
      maxlength = 5;
      default = "'Y'";
   }
   attribute PmSparePart Text {
      maxlength = 5;
      default = "'Y'";
   }
   attribute StdSparePart Text {
      maxlength = 5;
      default = "'Y'";
   }
   attribute IsViewAvailableCheck Text {
      default = "'1'";
   }

   reference SpareContractRef(SpareContract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency PURCH
   reference   SparePartRef(SpareContract, SpareId) to PurchasePartLov(Contract, PartNo);
   @DynamicComponentDependency INVENT
   reference   SparePartRef2(SpareContract, SpareId) to InventoryPartWoLov(Contract, PartNo);
   @DynamicComponentDependency PURCH
   reference   SparePartRef3(SpareContract, NewSpareId) to PurchasePartLov(Contract, PartNo);
   @DynamicComponentDependency INVENT
   reference   SparePartRef4(SpareContract, NewSpareId) to InventoryPartWoLov(Contract, PartNo);
}