-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  200106  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  210614  DEEKLK  AM21R2-1852, Removed maxlengths from attributes.
-----------------------------------------------------------------------------
fragment MeasurementList;
component EQUIP;
layer Core;
description "Put some useful description here ...";

include fragment UserAllowedSiteLovSelector;
include fragment EquipmentAllObjectLov1Selector;
include fragment EquipmentObjectUivSelector;
include fragment EquipmentAllObjectPerfQuery;
include fragment MarkAsIncorrectAssistant;

----------------------------- CLIENT FRAGMENTS ------------------------------


----------------------------- NAVIGATOR ENTRIES -----------------------------


-------------------------------- MAIN PAGES ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CmdCorrectReadingCommand {
   label = "Manage Preliminary Reading";
   mode = SingleRecord;
   enabled = [(MeasurementTypeDb = "PreliminaryReading" and ParameterTypeDb = "A") or(MeasurementTypeDb = "MeterRollOver" and ParameterTypeDb = "A" and HasNextRecordedReadings != "1")];
   variable VarHasPrevRecords;
   execute {
      call HasPrevPreliminaryRecords(TestPntSeq, ParameterCode, RegDate) into VarHasPrevRecords;
      if[(VarHasPrevRecords and MeasurementTypeDb = "PreliminaryReading") and ParameterTypeDb = "A"] {
         navigate  "assistant/ManagePreliminaryReading/MeterReadAdjustWizAssistant?$action=SetupSourceInfo{VarValuesSeq:$[ValuesSeq], VarContract:$[Contract], VarMchCode:$[MchCode], VarParameterCode:$[ParameterCode], VarTestpointId:$[TestPointId], VarRegDate:$[RegDate], VarTestPntSeq:$[TestPntSeq]}";
      }
      else {
         if[MeasurementTypeDb = "MeterRollOver" and ParameterTypeDb = "A"] {
            call MarkFlipIncorrect(ValuesSeq);
            navigate  "assistant/ManagePreliminaryReading/MeterReadAdjustWizAssistant?$action=SetupSourceInfo{VarValuesSeq:$[ValuesSeq], VarContract:$[Contract], VarMchCode:$[MchCode], VarParameterCode:$[ParameterCode], VarTestpointId:$[TestPointId], VarRegDate:$[RegDate], VarTestPntSeq:$[TestPntSeq]}";
         }
         else {
            alert("Please process the first Preliminary Record in this series before this.");
         }
      }
   }
}
command CmdMarkIncorrectCommand {
   label = "Mark as Incorrect";

   enabled = [MeasurementTypeDb = "RecordedReading" and ParameterTypeDb = "A"];

   execute {
      if [HasNextFlipChangeRecords = 0 and MeasurementTypeDb = "RecordedReading"] {
         assistant MarkIncorrectAssistant(ValuesSeq, Contract, MchCode, EquipmentObjectRef.MchName, ParameterCode, MeasurementParameterRef.Description, TestPointId, UnitOfMeasure, RecordedValue, RegDate, TestPntSeq) {
            when OK {
               refresh;
            }
            when CANCEL {
               exit;
            }
         }
      }
      else {
         alert("Reading cannot be set as Incorrect, as it is followed by a meter change/meter rollover");
      }


   }
}
command CmdMeasForObjCommand {
   label = "Measurements for Object";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/MeasurementsForObject/Form?$filter=MchCode eq $[MchCode]";
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list MeasurementsThisWeekList for EquipmentObjectMeas {
   orderby = MchCode, ParameterCode, RegDate desc;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov MchCodeRef with ReferenceEquipmentAllObjectLov1Selector {
      search = MchCode, MchName;
      size = Medium;
   }
   field EquipmentObjectRef.MchName {
      size = Medium;
      label = "Object Description";
   }
   lov TestPointIdRef with ReferenceEquipmentObjectTestPntSelector {
      search = TestPointId, Description;
      size = Small;
   }
   field EquipmentObjectTestPntRef.Description {
      size = Small;
      label = "Test Point Description";
      columnvisible = [false];
   }
   lov ParameterCodeRef with ReferenceEquipmentObjectParamSelector {
      search = ParameterCode, ParameterDescription;
      size = Small;
      columnvisible = [false];
   }
   field MeasurementParameterRef.Description {
      size = Small;
      label = "Parameter Description";
   }
   field UnitOfMeasure {
      size = Small;
   }
   badge MeasurementType {
      emphasis StateCreated = [MeasurementType = "PreliminaryReading"];
      emphasis StatePlanned = [MeasurementType = "MeterRollOver"];
      emphasis StateInProgress = [MeasurementType = "MeterChangeBefore"];
      emphasis StateReleased = [MeasurementType = "MeterChangeAfter"];
      emphasis StateError = [MeasurementType = "IncorrectReading"];
      emphasis StatePreliminary = [MeasurementType = "PreliminaryReading"];
      emphasis StateBlocked = [MeasurementType = "MeterSetup"];
   }
   field RecordedValue;
   field MeasuredValue;
   field MeterId {
      size = Medium;
   }
   field MeasurementNote {
      multiline = true;
      size = Small;
   }
   field RegDate {
      format = longtime;
   }
   field Remark {
      columnvisible = [false];
   }
   field ResourceSeq {
      columnvisible = [false];
   }

   commandgroup CommandGroupCmdGroup {
      command CmdCorrectReadingCommand;
      command CmdMarkIncorrectCommand;
      command CmdMeasForObjCommand;
   }
}

list MeasurementsLastWeekList for EquipmentObjectMeas {
   orderby = MchCode, ParameterCode, RegDate desc;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov MchCodeRef with ReferenceEquipmentAllObjectLov1Selector {
      search = MchCode, MchName;
      size = Medium;
   }
   field EquipmentObjectRef.MchName {
      size = Medium;
      label = "Object Description";
   }
   lov TestPointIdRef with ReferenceEquipmentObjectTestPntSelector {
      search = TestPointId, Description;
      size = Small;
   }
   field EquipmentObjectTestPntRef.Description {
      size = Small;
      label = "Test Point Description";
   }
   lov ParameterCodeRef with ReferenceEquipmentObjectParamSelector {
      search = ParameterCode, ParameterDescription;
      size = Small;
   }
   field MeasurementParameterRef.Description {
      size = Small;
      label = "Parameter Description";
   }
   field UnitOfMeasure {
      size = Small;
   }
   badge MeasurementType {
      emphasis StateCreated = [MeasurementType = "PreliminaryReading"];
      emphasis StatePlanned = [MeasurementType = "MeterRollOver"];
      emphasis StateInProgress = [MeasurementType = "MeterChangeBefore"];
      emphasis StateReleased = [MeasurementType = "MeterChangeAfter"];
      emphasis StateError = [MeasurementType = "IncorrectReading"];
      emphasis StatePreliminary = [MeasurementType = "PreliminaryReading"];
      emphasis StateBlocked = [MeasurementType = "MeterSetup"];
   }
   field RecordedValue;
   field MeasuredValue;
   field MeterId {
      size = Medium;
   }
   field MeasurementNote {
      multiline = true;
      size = Small;
   }
   field RegDate {
      format = longtime;
   }
   field Remark {
      columnvisible = [false];
   }
   field ResourceSeq {
      columnvisible = [false];
   }

   commandgroup CommandGroupCmdGroup {
      command CmdCorrectReadingCommand;
      command CmdMarkIncorrectCommand;
      command CmdMeasForObjCommand;
   }
}

list MeasurementsWeekTwoWeeksAgoList for EquipmentObjectMeas {
   orderby = MchCode, ParameterCode, RegDate desc;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov MchCodeRef with ReferenceEquipmentAllObjectLov1Selector {
      search = MchCode, MchName;
      size = Medium;
   }
   field EquipmentObjectRef.MchName {
      size = Medium;
      label = "Object Description";
   }
   lov TestPointIdRef with ReferenceEquipmentObjectTestPntSelector {
      search = TestPointId, Description;
      size = Small;
   }
   field EquipmentObjectTestPntRef.Description {
      size = Small;
      label = "Test Point Description";
   }
   lov ParameterCodeRef with ReferenceEquipmentObjectParamSelector {
      search = ParameterCode, ParameterDescription;
      size = Small;
   }
   field MeasurementParameterRef.Description {
      size = Small;
      label = "Parameter Description";
   }
   field UnitOfMeasure {
      size = Small;
   }
   badge MeasurementType {
      emphasis StateCreated = [MeasurementType = "PreliminaryReading"];
      emphasis StatePlanned = [MeasurementType = "MeterRollOver"];
      emphasis StateInProgress = [MeasurementType = "MeterChangeBefore"];
      emphasis StateReleased = [MeasurementType = "MeterChangeAfter"];
      emphasis StateError = [MeasurementType = "IncorrectReading"];
      emphasis StatePreliminary = [MeasurementType = "PreliminaryReading"];
      emphasis StateBlocked = [MeasurementType = "MeterSetup"];
   }
   field RecordedValue;
   field MeasuredValue;
   field MeterId {
      size = Medium;
   }
   field MeasurementNote {
      multiline = true;
      size = Small;
   }
   field RegDate {
      format = longtime;
   }
   field Remark {
      columnvisible = [false];
   }
   field ResourceSeq {
      columnvisible = [false];
   }

   commandgroup CommandGroupCmdGroup {
      command CmdCorrectReadingCommand;
      command CmdMarkIncorrectCommand;
      command CmdMeasForObjCommand;
   }
}

list MeasurementsWeekThreeWeeksAgoList for EquipmentObjectMeas {
   orderby = MchCode, ParameterCode, RegDate desc;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov MchCodeRef with ReferenceEquipmentAllObjectLov1Selector {
      search = MchCode, MchName;
      size = Medium;
   }
   field EquipmentObjectRef.MchName {
      size = Medium;
      label = "Object Description";
   }
   lov TestPointIdRef with ReferenceEquipmentObjectTestPntSelector {
      search = TestPointId, Description;
      size = Small;
   }
   field EquipmentObjectTestPntRef.Description {
      size = Small;
      label = "Test Point Description";
   }
   lov ParameterCodeRef with ReferenceEquipmentObjectParamSelector {
      search = ParameterCode, ParameterDescription;
      size = Small;
   }
   field MeasurementParameterRef.Description {
      size = Small;
      label = "Parameter Description";
   }
   field UnitOfMeasure {
      size = Small;
   }
   badge MeasurementType {
      emphasis StateCreated = [MeasurementType = "PreliminaryReading"];
      emphasis StatePlanned = [MeasurementType = "MeterRollOver"];
      emphasis StateInProgress = [MeasurementType = "MeterChangeBefore"];
      emphasis StateReleased = [MeasurementType = "MeterChangeAfter"];
      emphasis StateError = [MeasurementType = "IncorrectReading"];
      emphasis StatePreliminary = [MeasurementType = "PreliminaryReading"];
      emphasis StateBlocked = [MeasurementType = "MeterSetup"];
   }
   field RecordedValue;
   field MeasuredValue;
   field MeterId {
      size = Medium;
   }
   field MeasurementNote {
      multiline = true;
      size = Small;
   }
   field RegDate {
      format = longtime;
   }
   field Remark {
      columnvisible = [false];
   }
   field ResourceSeq {
      columnvisible = [false];
   }

   commandgroup CommandGroupCmdGroup {
      command CmdCorrectReadingCommand;
      command CmdMarkIncorrectCommand;
      command CmdMeasForObjCommand;
   }
}

list MeasurementsOlderList for EquipmentObjectMeas {
   orderby = MchCode, ParameterCode, RegDate desc;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   lov MchCodeRef with ReferenceEquipmentAllObjectLov1Selector {
      search = MchCode, MchName;
      size = Medium;
   }
   field EquipmentObjectRef.MchName {
      size = Medium;
      label = "Object Description";
   }
   lov TestPointIdRef with ReferenceEquipmentObjectTestPntSelector {
      search = TestPointId, Description;
      size = Small;
   }
   field EquipmentObjectTestPntRef.Description {
      size = Small;
      label = "Test Point Description";
   }
   lov ParameterCodeRef with ReferenceEquipmentObjectParamSelector {
      search = ParameterCode, ParameterDescription;
      size = Small;
   }
   field MeasurementParameterRef.Description {
      size = Small;
      label = "Parameter Description";
   }
   field UnitOfMeasure {
      size = Small;
   }
   badge MeasurementType {
      emphasis StateCreated = [MeasurementType = "PreliminaryReading"];
      emphasis StatePlanned = [MeasurementType = "MeterRollOver"];
      emphasis StateInProgress = [MeasurementType = "MeterChangeBefore"];
      emphasis StateReleased = [MeasurementType = "MeterChangeAfter"];
      emphasis StateError = [MeasurementType = "IncorrectReading"];
      emphasis StatePreliminary = [MeasurementType = "PreliminaryReading"];
      emphasis StateBlocked = [MeasurementType = "MeterSetup"];
   }
   field RecordedValue;
   field MeasuredValue;
   field MeterId {
      size = Medium;
   }
   field MeasurementNote {
      multiline = true;
      size = Small;
   }
   field RegDate {
      format = longtime;
   }
   field Remark {
      columnvisible = [false];
   }
   field ResourceSeq {
      columnvisible = [false];
   }

   commandgroup CommandGroupCmdGroup {
      command CmdCorrectReadingCommand;
      command CmdMarkIncorrectCommand;
      command CmdMeasForObjCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset EquipmentObjectMeasSet for EquipmentObjectMeas;
entityset EquipmentObjectMeasThisWeekSet for EquipmentObjectMeas {
   where = "TRUNC(SYSDATE, 'DAY') < reg_date";
}
entityset EquipmentObjectMeasLastWeekSet for EquipmentObjectMeas {
   where = "TRUNC(SYSDATE, 'DAY') - 7 < reg_date AND  TRUNC(SYSDATE, 'DAY') > reg_date";
}
entityset EquipmentObjectMeasWeekTwoWeeksAgoSet for EquipmentObjectMeas {
   where = "TRUNC(SYSDATE, 'DAY') - 14 < reg_date AND  TRUNC(SYSDATE, 'DAY') - 7 > reg_date";
}
entityset EquipmentObjectMeasWeekThreeWeeksAgoSet for EquipmentObjectMeas {
   where = "TRUNC(SYSDATE, 'DAY') - 21 < reg_date AND  TRUNC(SYSDATE, 'DAY') - 14 > reg_date";
}
entityset EquipmentObjectMeasOlderSet for EquipmentObjectMeas {
   where = "TRUNC(SYSDATE, 'DAY') - 21 > reg_date";
}
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObjectMeas {
   crud = Read;
   from = "equipment_object_meas";
   exec = "EQUIPMENT_OBJECT_MEAS_API";
   keys = ValuesSeq {
      where = "VALUES_SEQ = :ValuesSeq";
   }
   use attributes = Contract, MchCode, TestPointId, ParameterCode, TestPntSeq, MeasurementType, RecordedValue, MeasuredValue, MeterId, MeasurementNote, RegDate, Remark, ResourceSeq, TestSequenceId;
   attribute ValuesSeq Number {
      fetch = "values_seq";
      label = "VALUES_SEQ";
      required = [true];
      editable = [ETag = null];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Object Site";
      required = [true];
      format = uppercase;
   }
   attribute MchCode Text {
      fetch = "mch_code";
      label = "Object ID";
      required = [true];
      format = uppercase;
   }
   attribute TestPointId Text {
      fetch = "test_point_id";
      label = "Test Point ID";
      required = [true];
      format = uppercase;
   }
   attribute ParameterCode Text {
      fetch = "parameter_code";
      label = "Parameter ID";
      required = [true];
      format = uppercase;
   }
   attribute UnitOfMeasure Text {
      fetch = "Equipment_Object_Param_API.Get_Unit(test_pnt_seq, parameter_code)";
      label = "Unit of Measure";
      editable = [false];
   }
   attribute TestPntSeq Number {
      fetch = "test_pnt_seq";
      label = "Test Pnt Seq";
      editable = [ETag = null];
   }
   attribute MeasurementType Enumeration(MeasurementType) {
      fetch = "measurement_type_db";
      label = "Measurement Type";
      required = [true];
      editable = [ETag = null];
   }
   attribute MeasurementTypeDb Text {
      fetch = "measurement_type_db";
      label = "Measurement Type";
      editable = [false];
   }
   attribute RecordedValue Number {
      fetch = "recorded_value";
      label = "Recorded Value";
      required = [true];
   }
   attribute MeasuredValue Number {
      fetch = "measured_value";
      label = "Measured Value";
      editable = [false];
   }
   attribute MeterId Text {
      fetch = "meter_id";
      label = "Meter ID";
   }
   attribute MeasurementNote Text {
      fetch = "measurement_note";
      label = "Measurement Note";
      editable = [ETag = null];
   }
   attribute RegDate Timestamp {
      fetch = "reg_date";
      label = "Registration Date";
      required = [true];
      editable = [ETag = null];
   }
   attribute Remark Text {
      fetch = "remark";
      label = "Remark";
   }
   attribute ResourceSeq Number {
      fetch = "resource_seq";
      label = "Resource Seq";
      editable = [false];
   }
   attribute TestSequenceId Text {
      fetch = "test_sequence_id";
      label = "TEST_SEQUENCE_ID";
      required = [true];
      format = uppercase;
   }
   attribute ParameterTypeDb Text {
      fetch = "Measurement_Parameter_API.Get_Measurement_Param_Type_Db(parameter_code)";
      label = "Parameter Type";
      editable = [false];
   }
   attribute HasNextRecordedReadings Text {
      fetch = "Equipment_Object_Meas_API.Next_Recorded_Read_Exist(test_pnt_seq, parameter_code, reg_date)";
      editable = [false];
   }
   attribute HasPrevPreliminaryRecords Text {
      fetch = "Equipment_Object_Meas_API.Prev_Preliminary_Records_Exist(test_pnt_seq, parameter_code, reg_date)";
      editable = [false];
   }
   attribute HasNextFlipChangeRecords Number {
      fetch = "Equipment_Object_Meas_API.Next_Flip_Change_Exist(test_pnt_seq, parameter_code, reg_date)";
      editable = [false];
   }

   reference EquipmentObjectRef(Contract, MchCode) to EquipmentAllObjectPerf(Contract, MchCode);
   reference EquipmentObjectTestPntRef(TestPntSeq) to EquipmentObjectTestPnt(TestPntSeq);
   reference MeasurementParameterRef(ParameterCode) to MeasurementParameter(ParameterCode);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Object Site";
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentAllObjectLov1(Contract, MchCode) {
      label = "Object ID";
   }
   reference TestPointIdRef(Contract, MchCode, TestPointId) to EquipmentObjectTestPnt(Contract, MchCode, TestPointId) {
      label = "Test Point ID";
   }
   reference ParameterCodeRef(Contract, MchCode, TestPointId, ParameterCode) to EquipmentObjectParam(Contract, MchCode, TestPointId, ParameterCode) {
      label = "Parameter ID";
   }
   reference TestPntSeqRef(TestPntSeq) to EquipmentObjectTestPnt(TestPntSeq) {
      label = "Test Pnt Seq";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action MarkFlipIncorrect {
   initialcheck implementation;
   parameter ValuesSeq Number;
}
--------------------------------- FUNCTIONS ---------------------------------
function HasPrevPreliminaryRecords Boolean {
   parameter TestPrintSq Number;
   parameter ParameterCode Text;
   parameter RegDate Timestamp;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------