--------------------------------------------------------------------------------------
-- Date       Sign   History
-- ---------- ------ -----------------------------------------------------------------
-- 2021-06-30 KrRaLK AM21R2-1682, Created.
--------------------------------------------------------------------------------------
client ServiceViewOfEquipment;
component EQUIP;
layer Core;
projection ServiceViewOfEquipmentHandling;

--------------------------------- FRAGMENTS ---------------------------------
include fragment UserAllowedSiteLovSelector;
include fragment MaintenanceObjectSelector;
include fragment EquipmentAllObjectLovSelector;
include fragment EquipmentObjectList;
include fragment FunctionalObjectTab;
include fragment SerialObjectTab;
@DynamicComponentDependency PM
include fragment PmForObjectStucturePmActionMaintenancePlan;
include fragment ObjectWarrantyList;
include fragment EquipObjCostPerYearList;
@DynamicComponentDependency METINV
include fragment MeteringInvoicingList;
@DynamicComponentDependency WO
include fragment WorkTask;
@DynamicComponentDependency WO
include fragment ReportActionTakenDialog;
@DynamicComponentDependency WO
include fragment OnHoldCauseDialog;
@DynamicComponentDependency WO
include fragment WorkTaskSteps;
include fragment MediaLibraryAttachment;
include fragment EquipmentFunctionalLovSelector;
include fragment EquipmentObjectTestPntLovSelector;

warningsenabled = EquipmentObjectList;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   @DynamicComponentDependency SERCAT
   entry ServiceViewOfEquipmentNavEntry parent SercatNavigator.ServiceCatalogManagement at index 5000 {
      label = "Service Object 360";
      tree SeviceViewOfEquipTree;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page EquipmentObjectPageF using EquipmentObjectListSet {
   label = "Service Object 360";
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   searchcontext EquipObjectNavigatorPageFilter {
      defaults = GetDefaultValuesForPageFilter();
   }
   selector EquipmentObjectSelector;
   group EquipObjStructureGroup;
   tabs {
      tab {
         label = "Summary";
         arrange {
            list SummaryListPm using GetPmSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            list SummaryListWo using GetWoSummary(EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
         }
      }
      tab {
         label = "Child Objects";
         group AllChildObjectsSelection;

         list ServiceObjectsList using GetEquipmentObjectsFiltered(EquipObjectNavigatorPageFilter.EquipmentObjectSeq, "F")
            {

            label = "";

            visible = [VisibleAllChildObject = false or VisibleAllChildObject = null];

            copyoncruddefault(EquipmentObjectSeq) to(FunctionalObjectSeq);
         }
         list ServiceObjectsList using GetAllFChildEquipmentObjects(EquipObjectNavigatorPageFilter.EquipmentObjectSeq) {
            label = "";

            visible = [VisibleAllChildObject = true];

         }
      }
      tab {
         label = "Functional Service Object";
         visible = [ObjLevel != null];
         singleton FunObjectGeneralSingleton(EquipmentFunctionalArray);
         arrange {

            arrange
               {
               group FunObjectGeneralGroup bind FunObjectGeneralSingleton;
               group ServiceFuncPartInfoGroup bind FunObjectGeneralSingleton;
            }
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         arrange {
            group ServiceFunNotesGroup;
            group AdditionalInfoGroup;
         }
      }
      tab {
         label = "Serial Service Object";
         visible = [ObjLevel = null];

         singleton ServiceSerialGeneralSingleton(EquipmentSerialArray);
         arrange {
            arrange
               {
               group ServiceSerialObjectGroup bind ServiceSerialGeneralSingleton;
               group ServiceSerialPartInfoGroup bind ServiceSerialGeneralSingleton;
            }
            imageviewer ObjectImageViewer using MediaLibraryResultSet(luname, keyref);
         }
         arrange {
            group ServiceSerialNotesGroup;
            group AdditionalInfoGroup;
         }
      }
      tab {
         label = "More Information";
         group MoreInfoTabSelectionGroup;
         -- ********************** Spare Parts *********************
         list ServiceObjectSparePartsList(EquipmentObjectSparePartArray) {

            visible = [VisibleSpareParts = true];
            label = "Spare Parts";
         }

         -- ********************** Test Points/ Parameters *********
         list ServiceObjTestPointsList(TestPointsarray) {
            visible = [VisibleTestPoints = true];
         }
         list ServiceObjectParametersList(ParametersArray) bind ServiceObjTestPointsList {
            visible = [VisibleTestPoints = true];
         }

         -- ********************** Journal **************************
         list ServiceObjectJournalList(EquipmentObjectJournalArray) {
            visible = [VisibleJournal = true and ObjLevel != null];
            label = "Journal";
         }

         -- ********************** Requirements/ Technical data *********************
         singleton TechObjectReferenceEquipSingleton(TechnicalObjectReferenceArray);
         arrange {
            group CharPublicContainerGroup bind TechObjectReferenceEquipSingleton {
               visible = [VisibleRequirements = true];
            }
            group AttributeTypeGroup {
               visible = [VisibleRequirements = true];
            }
         }
         list ServiceTechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Numeric"];
         }
         list ServiceTechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Alpha"];
         }
         list ServiceTechnicalSpecBothList(TechnicalSpecBothArray) bind TechObjectReferenceEquipSingleton {
            visible = [VisibleRequirements = true and SelectionParameters = "Both"];
         }
      }
      tab {
         label = "Financials";

         group PurchInformationGroup;
         list RowDataList(RowDataArray);
         stackedchart CostPerYearStackedChart(CostDetailsArray) bind RowDataList;
         arrange {
            linechart CostPerYearLineChart(CostDetailsArray) bind RowDataList;
            piechart CostPerYearPieChart(CostTypeArray) bind RowDataList;
         }

      }
      tab {
         label = "Contract Lines";
         @DynamicComponentDependency PCMSCI
         @DynamicComponentDependency SRVCON
         list SrvObjPscServicesList using GetServiceLinesFiltered(EquipmentObjectSeq) {
            label = "";
         }
      }
      tab {
         label = "Services";
         @DynamicComponentDependency REQMGT
         list ManualSrvRequestList using GetManualServiceList(Contract, MchCode) {
            label = "Reactive Services";
         }
         @DynamicComponentDependency RECSRV
         list PlannedSrvRequestList using GetPlannedServiceList(Contract, MchCode) {
            label = "Recurring Services";
         }
      }
      tab {
         label = "Work Tasks";
         @DynamicComponentDependency WO
         @DynamicComponentDependency REQMGT
         list ServiceWorkTaskList using GetServiceWorkTaskList(Contract, MchCode) {
            label = "";
         }

      }
      tab {
         label = "Contacts";
         list ServiceObjectPartyList(EquipmentObjectPartyArray) {
            label = "";
         }
      }
   }
   command CmdMeasurementsCommand;

}

----------------------------------- TREES -----------------------------------
tree SeviceViewOfEquipTree using EquipmentObjectListSet {
   label = "Service Object 360";
   navicontexts {
      context F {
         label = "Function";
      }
   }
   selector EquipmentObjectSelector;

   rootnode EquipmentObjectStructureNode {
      label = "${MchCode} - ${MchName}";
      navigate {
         when L page EquipmentObjectPageL {
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(L, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }

         default page EquipmentObjectPageF {
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "F");
      }

   }

   node ChildEquipmentObjectNode for EquipmentObjectList {
      label = "${MchCode} - ${MchName}";
      visible = [F];
      orderby = MchCode;
      navigate {
         page EquipmentObjectPageF {
            searchcontext(MchCode, EquipObjectNavigatorPageFilter.MchCode);
            searchcontext(Contract, EquipObjectNavigatorPageFilter.Contract);
            searchcontext(EquipmentObjectSeq, EquipObjectNavigatorPageFilter.EquipmentObjectSeq);
            searchcontext(root.F, EquipObjectNavigatorPageFilter.StructureInTree);

            filter(MchCode, MchCode);
            filter(Contract, Contract);
            filter(EquipmentObjectSeq, EquipmentObjectSeq);
         }
      }
      iconset {
         icon "business-structure-alt" {
            expression = [Objtype = "EquipmentFunctional"];
         }
         icon "diamonds-solid" {
            expression = [Objtype = "EquipmentSerial"];
         }
         emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
         emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
         emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
         emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
         emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
         emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
         emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
      }
      connections {
         node ChildEquipmentObjectNode using GetEquipObjectsChildFiltered(EquipmentObjectSeq, "F");

      }
   }

}

------------------------------- SEARCHCONTEXT -------------------------------
searchcontext EquipObjectNavigatorPageFilter for NavPageFilterStructure {
   label = "";
   field EquipmentObjectSeq {
      visible = [false];
   }
   field MchCode {
      visible = [false];
   }
   field Contract {
      visible = [false];
   }
   field StructureInTree {
      visible = [false];
   }
}
--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------
@DynamicComponentDependency RECSRV
selector ServicePackageSelector for RecurringServicePackage {
   static RecPackageId;
   static Description;
}
@DynamicComponentDependency REQMGT
selector ServiceCatalogRefSelector  for ServiceCatalog {
   label = "${ItemId} - ${Description}";
   orderby = ItemId;
   field ItemId {
      label = "Service";
   }

}
@Override
@DynamicComponentDependency REQMGT
selector SrvRequestSelector for SrvRequest {
   label = "${ReqId} - ${Description}";
   orderby = ReqId;

   field ReqId {
      label = "Request ID";
   }
}
@Override
@DynamicComponentDependency PCMSCI
selector ReferenceSrvPscContrProductSelector for SrvPscContrProduct {
   field ContractId;
}

@Override
selector EquipmentObjectSelector for EquipmentObjectList {
   label = "${MchCode} - ${MchName} - ${Contract} - ${OperationalStatus}";
   static EquipmentObjectSeq;
   static MchCode {
      label = "Service Object ID";
   }
   static MchName {
      label = "Service Object Description";
   }
   static Contract {
      label = "Service Object Site";
   }
   badge OperationalStatus {
      style = TextOnly;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }
   static F {
      visible = [false];
      searchable = false;
   }
   static L {
      visible = [false];
      searchable = false;
   }
   static R {
      visible = [false];
      searchable = false;
   }
   static T {
      visible = [false];
      searchable = false;
   }
   static P {
      visible = [false];
      searchable = false;
   }
   static S {
      visible = [false];
      searchable = false;
   }
   static E {
      visible = [false];
      searchable = false;
   }
}

@Override
selector CompanySiteSelector for CompanySite {
   label = "${Contract} - ${Description}";
   static Contract;
   static Description;
}

@Override
selector LocationSelector for Location {
   label = "${LocationId} - ${Name}";
   static LocationId;
   static Name;
}

@Override
selector EquipmentObjTypeSelector for EquipmentObjType {
   label = "${MchType} - ${Description}";
   static MchType;
   static Description;
}


---------------------------------- GROUPS -----------------------------------

group AllChildObjectsSelection for EquipChildTabSelection {
   label = "";
   field  VisibleAllChildObject {
      size = Small;
      validate command {
         execute {
            call ValidateChildObjects();
         }

      }

   }

}
group EquipObjStructureGroup for EquipmentObjectList {
   label = "";
   field LuName {
      visible = [false];
      editable = [false];

   }
   field KeyRef {
      visible = [false];
      editable = [false];

   }
   lov MchCodeRef with ReferenceMaintenanceObjectSelector {
      label = "Service Object ID";
      editable = [false];

      search = MchCode, MchName;

      preview = MaintenanceObjectCard;
      size = Medium;
   }
   field MchName {
      label = "Service Object Description";
      size = Medium;
      editable = [false];
   }
//   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
//      search = Contract, ContractDesc;
//      size = Small;
//   }
   field ObjLevelRef {
      label = "Service Object Level";
      editable = [false];
      size = Small;
      visible = [ObjLevelRef != null];
   }
   badge OperationalStatus {
      size = Small;
      style = TextOnly;
      editable = [false];
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }

   field LocationIdRef {
      size = Small;
      editable = [false];
   }
   field ProductionDate {
      size = Small;
      editable = [false];
   }
   field Ownership {
      size = Medium;
      editable = [false];
      visible = [Ownership != null];
   }
   field Owner {
      size = Small;
      editable = [false];
      visible = [Owner != null];
      lovswitch {
         when[Ownership = "CustomerOwned"] {
            @DynamicComponentDependency WO
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               preview = CustomerInfoCustcategoryPubCard;
            }
         }
         when[Ownership = "SupplierLoaned" or Ownership = "SupplierRented"] {
            lov SupplierInfoRef with SupplierInfoSelector;
         }
      }

   }
}

group PurchInformationGroup for EquipmentObjectList clone PurchInfoGroup {

}

group MoreInfoTabSelectionGroup for MoreInfoTabSelection {
   label = "";
   field VisibleSpareParts {
      size = Small;
      validate command {
         execute {
            if [VisibleSpareParts = true] {
               set VisibleTestPoints = false;
               set VisibleJournal = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleTestPoints {
      size = Medium;
      validate command {
         execute {
            if [VisibleTestPoints = true] {
               set VisibleSpareParts = false;
               set VisibleJournal = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleJournal {
      size = Small;
      visible = [ObjLevel != null];
      validate command {
         execute {
            if [VisibleJournal = true] {
               set VisibleSpareParts = false;
               set VisibleTestPoints = false;
               set VisibleRequirements = false;
            }
         }
      }
   }
   field VisibleRequirements {
      size = Medium;
      validate command {
         execute {
            if [VisibleRequirements = true] {
               set VisibleSpareParts = false;
               set VisibleTestPoints = false;
               set VisibleJournal = false;
            }
         }
      }
   }

}

group FunObjectGeneralGroup for EquipmentFunctional {
   label = "General";
   lov SupMchCodeRef with ReferenceEquipmentFunctionalObjectUivSelector {
      search = MchCode, MchName;
      size = Small;
      editable = [false];

   }

   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
      editable = [false];

   }
   lov MchTypeRef with EquipmentObjTypesSelector {
      search = MchType, Description;
      size = Small;
      description = MchTypeRef.Description;
      editable = [false];

   }
   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Small;
      description = CriticalityRef.Description;
      editable = [false];

   }
}

group AdditionalInfoGroup for EquipmentObjectList {
   label = "Additional Information";
   field MchLoc {
      label = "Room";
      size = Small;
      editable = [false];
   }
   field MchPos {
      label = "Position";
      size = Small;
      editable = [false];

   }
   lov CategoryIdRef with ReferenceEquipmentObjCategorySelector {
      search = CategoryId, Description;
      size = Small;
      editable = [false];
   }
   lov GroupIdRef with ReferenceEquipmentObjGroupSelector {
      search = GroupId, Description;
      label = "Group";

      size = Small;
      editable = [false];
   }
   lov TypeRef with TypeDesignationSelector using GetTypeDesignationsForFunc(MchType) {
      search = Type, Description;
      size = Small;
      description = TypeRef.Description;
      editable = [false];
   }
   lov ItemClassIdRef with ReferenceItemClassSelector {
      search = ItemClassId, ItemClassDesc;
      label = "Item Class";

      size = Small;
      description = ItemClassIdRef.ItemClassDesc;
      editable = [false];
   }
   lov ProcessClassRef with ProcessClassSelector {
      search = ProcessClassId, ProcessClassDesc;
      label = "Process Class";

      size = Small;
      description = ProcessClassRef.ProcessClassDesc;
      editable = [false];
   }


}

group ServiceFunNotesGroup for EquipmentObjectList {
   label = "Free Notes";
   field Note {
      size = Large;
      multiline = true;
      showlabel = false;
      editable = [false];

   }
}
group ServiceSerialNotesGroup for EquipmentObjectList {
   label = "Free Notes";
   field Note {
      size = Large;
      multiline = true;
      showlabel = false;
      editable = [false];
   }
}

group ServiceSerialObjectGroup for EquipmentSerial {
   label = "General";
   lov SupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
      search = MchCode, MchName;
      preview = MaintenanceObjectCard;
      label = "Belongs to Object";
      size = Medium;
      editable = [false];
   }
   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      preview = UserAllowedSiteLovCard;
      size = Small;
      editable = [false];
   }
   lov MchTypeRef with EquipmentObjTypeSelector {
      search = MchType, Description;
      size = Small;

      description = MchTypeRef.Description;
      editable = [false];

   }

   lov CriticalityRef with ReferenceEquipmentCriticalitySelector {
      search = Criticality, Description;
      size = Medium;
      description = CriticalityRef.Description;
      editable = [false];

   }
}
group ServiceSerialPartInfoGroup for EquipmentSerial {
   label = "Part Information";
   lov PartNoRef with ReferencePartCatalogSelector using GetPartNosForSerial {
      search = PartNo, Description;
      size = Medium;
      editable = [false];

   }
   field SerialNo {
      size = Small;
      editable = [false];

   }

   field PartRev {
      size = Small;
      editable = [false];

   }
   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      size = Medium;
      label = "Supplier";
      description = SupplierInfoRef.Name;
      editable = [false];

   }
   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilterForSerial(PartNo) {
               search = ManufacturerNo, Name;
               description = PartManufacturerRef.Name;
            }
         }

         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufacturerId, Name;
               description = ManufacturerNoRef.Name;
            }
         }
      }
      editable = [false];

   }
   field ManufacturedDate {
      label = "Manufacture Date";
      editable = [false];

   }
}

group ServiceFuncPartInfoGroup for EquipmentFunctional {
   label = "Part Information";
   lov SupplierInfoRef with ReferenceSupplierInfoSelector {
      search = SupplierId, Name;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      size = Medium;
      label = "Supplier";
      description = SupplierInfoRef.Name;
      editable = [false];

   }
   field ManufacturerNo {
      size = Medium;
      lovswitch {
         when [PartNo != null] {
            lov PartManufacturerRef with ReferencePartManufacturerSelector using PartManufactureFilterForSerial(PartNo) {
               search = ManufacturerNo, Name;
               description = PartManufacturerRef.Name;
            }
         }

         when [PartNo = null] {
            lov ManufacturerNoRef with ReferenceManufacturerInfoSelector {
               search = ManufacturerId, Name;
               description = ManufacturerNoRef.Name;
            }
         }
      }
      editable = [false];

   }
   field ManufacturedDate {
      label = "Manufacture Date";
      editable = [false];

   }
}
----------------------------------- LISTS -----------------------------------
@DynamicComponentDependency REQMGT
list ManualSrvRequestList for ManualSrvRequestScope {
   label = "Reactive Services";
   orderby = ReqId;
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   lov SrvReqIdRef with SrvRequestSelector {
      size = Small;
   }
   field ReqGenDate {
      size = Small;
   }
   badge Objstate {
      style = TextOnly;
      showlabel = false;
      label = "Request Status";
      emphasis StateNew = [Objstate = "New"];
      emphasis StatePlanned = [Objstate = "Opened"];
      emphasis Complementary3 = [Objstate = "Released"];
      emphasis StateInProgress = [Objstate = "Started"];
      emphasis Complementary9 = [Objstate = "Completed"];
      emphasis StateClosed = [Objstate = "Closed"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
   lov ServiceItemRef with ServiceCatalogSelector {
      description = ServiceItemRef.Description;
      details = "page/ServiceCatalog/ServiceCatalogPage?$filter=ItemId eq $[ItemId]";
   }
   field ContractId {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field PriceRuleId {
      size = Small;
   }
   field PriceRuleSource {
      size = Small;
   }
   lov SlaOrderRef with SlaOrderSelector {
      label = "SLA Order";
      details = "page/ReqServLevelAgreement/ReqScopeSlaOrderDetailPage;$filter=SlaOrderNo eq $[SlaOrderNo]";
   }

}

@DynamicComponentDependency RECSRV
list PlannedSrvRequestList for PlannedSrvRequestScope {
   label = "Recurring Services";
   orderby = RecProgramId asc;
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   lov ProgramRef with RecurringServiceProgramSelector {
      label = "Program";
      details = "page/RecurringServiceProgram/Form?$filter=RecProgramId eq $[RecProgramId]";
   }
   field ProgramRef.Description {
      label = "Description";
   }
   lov RecPackageRef with ServicePackageSelector {
      description = RecPackageRef.Description;
      details = "page/RecurringServicePackage/Form?$filter=RecPackageId eq $[RecPackageId]";
   }
   lov ItemIdRef with ServiceCatalogSelector {
      description = ItemIdRef.Description;
      details = "page/ServiceCatalog/ServiceCatalogPage?$filter=ItemId eq $[ItemId]";
   }
   field GenDate {
      label = "Due Next";
   }
   field ProgramScheduleRef.ScheduleStatus {
      label = "Schedule Status";
   }
   @DynamicComponentDependency REQMGT
   field RequestId;
   @DynamicComponentDependency REQMGT
   badge RequestStatus {
      style = TextOnly;
      showlabel = false;
      label = "Request Status";
      emphasis StateNew = [RequestStatus = "New"];
      emphasis StatePlanned = [RequestStatus = "Opened"];
      emphasis Complementary3 = [RequestStatus = "Released"];
      emphasis StateInProgress = [RequestStatus = "Started"];
      emphasis Complementary9 = [RequestStatus = "Completed"];
      emphasis StateClosed = [RequestStatus = "Closed"];
      emphasis StateCancelled = [RequestStatus = "Cancelled"];
   }
   @DynamicComponentDependency REQMGT
   field GenerationDate;
   field TriggerValue;
   field RecTriggerSeqRef;
   lov TestPointIdRef with ReferenceEquipmentObjectTestPntLovSelector {
      description = TestPointIdDescRef.Description;
   }
   lov ParameterCodeRef with ReferenceEquipmentObjectParamSelector {
      description = ParameterCodeRef.ParameterDescription;
   }
   field UnitCode;
}

@DynamicComponentDependency WO
@DynamicComponentDependency REQMGT
list ServiceWorkTaskList for ServiceReqTask {
   label = "";
   orderby = ReqId;
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   lov SrvReqIdRef with SrvRequestSelector {
      size = Small;
   }
   badge SrvReqState {
      style = TextOnly;
      emphasis StateNew = [SrvReqState = "New"];
      emphasis StatePlanned = [SrvReqState = "Opened"];
      emphasis Complementary3 = [SrvReqState = "Released"];
      emphasis StateInProgress = [SrvReqState = "Started"];
      emphasis Complementary9 = [SrvReqState = "Completed"];
      emphasis StateCancelled = [SrvReqState = "Cancelled"];
      emphasis StateClosed = [SrvReqState = "Closed"];
   }

   lov ServiceItemRef with ServiceCatalogRefSelector {
      label = "Service";
      description = ServiceItemRef.Description;
   }
   lov TaskSeqRef with ReferenceJtTaskLovSelector {
      details = "page/WorkTaskService/Form?$filter=TaskSeq eq $[TaskSeq]";
      description = Description;
      size = Medium;
   }
   badge Objstate {
      label = "Work Task Status";
      showlabel = false;
      style = TextOnly;
      emphasis Progress1 = [Objstate = "NEW"];
      emphasis Progress3 = [Objstate = "UNDERPREPARATION"];
      emphasis Progress4 = [Objstate = "PREPARED"];
      emphasis Progress6 = [Objstate = "RELEASED"];
      emphasis Progress8 = [Objstate = "WORKSTARTED"];
      emphasis Progress10 = [Objstate = "WORKDONE"];
      emphasis Progress11 = [Objstate = "REPORTED"];
      emphasis StateClosed = [Objstate = "FINISHED"];
      emphasis StateCancelled = [Objstate = "CANCELLED"];
   }
   @DynamicComponentDependency METINV
   lov OrganizationIdRef with OrgCodeAllowedSiteLovSelector;
}

list ServiceTechnicalSpecAlphanumList for TechnicalSpecAlphanum {
   label = "Technical Attributes";
   orderby = AttribNumber;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   field AttribNumber {
      size = Small;
   }
   field Attribute {
      size = Large;
      //! TODO: Equivalent APF control, tblTechnicalSpecAlphanum_colsAttribute, handles a PM_DataItemValidate message in colsAttribute_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Large;
      label = "Description";
   }
   lov ValueTextRef with TechnicalAttribTextSelector {
      size = Medium;
      freeinput = [true];
   }
   field Info {
      size = Medium;
      multiline = true;
   }
   field GroupNameRef {
      size = Medium;
      columnvisible = [false];
      editable = [false];
   }
   field GroupNameDesc {
      size = Large;
      label = "Group Description";
      columnvisible = [false];
      editable = [false];
   }
}
list ServiceTechnicalSpecBothList for TechnicalSpecification {
   label = "Technical Attributes";
   orderby = AttribNumber;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   field AttribNumber {
      size = Small;
   }
   field AttributeRef {
      size = Large;
      //! TODO: Equivalent APF control, tblTechnicalSpecBoth_colsAttribute, handles a PM_DataItemValidate message in colsAttribute_WindowActions
      // Refactor and handle that inside following validate command (or remove the validate command if not necessary)

   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Large;
      label = "Description";
   }
   field ValueText {
      size = Small;
   }
   field TechnicalUom {
      size = Small;
   }
   field ValueNo;
   field LowerLimit;
   field UpperLimit;
   field Info {
      size = Medium;
      multiline = true;
   }
   field GroupNameRef {
      size = Medium;
      columnvisible = [false];
      editable = [false];
   }
   field GroupNameDesc {
      size = Large;
      label = "Group Description";
      columnvisible = [false];
      editable = [false];
   }
}

list ServiceTechnicalSpecNumericList for TechnicalSpecNumeric {
   label = "Technical Attributes";
   orderby = AttribNumber;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }

   field AttribNumber {
      size = Small;
   }
   field AttributeRef {
      size = Large;
      validate command {
         execute {
            call GetTechnicalUnit(TechnicalClass, Attribute) into Uom;

         }
      }
   }
   field TechnicalAttribStdRef.AttribDesc {
      size = Large;
      label = "Description";
   }
   field Uom {
      size = Small;
   }
   field ValueNo;
   field LowerLimit;
   field UpperLimit;
   field Info {
      size = Medium;
      multiline = true;
   }
   field GroupNameRef {
      size = Medium;
      columnvisible = [false];
      editable = [false];
   }
   field GroupNameDesc {
      size = Large;
      label = "Group Description";
      columnvisible = [false];
      editable = [false];
   }
}

list ServiceObjectJournalList for EquipmentObjectJournal {
   label = "";
   orderby = LineNo desc;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }

   field LineNo {
      editable = [false];
      size = Small;
   }
   field JournalDate {
      editable = [false];
      size = Medium;
   }
   badge EventType {
      style = TextOnly;
      size = Small;
      emphasis Complementary1 = [EventType = "Modified"];
      emphasis Complementary2 = [EventType = "Move"];
      emphasis Complementary3 = [EventType = "Status Change"];
      emphasis Complementary4 = [EventType = "Created"];
      emphasis Complementary5 = [EventType = "Modified"];
   }
   field OldValue {
      editable = [false];
      size = Small;
   }
   field NewValue {
      editable = [false];
      size = Small;
   }
   field JournalText {
      editable = [false];
      size = Medium;
   }
   field Note {
      size = Large;
      multiline = true;
   }
   field CreatedBy {
      size = Small;
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field ModifyDate;
   field ModifiedBy {
      size = Small;

      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
}

list ServiceObjTestPointsList for EquipmentObjectTestPnt {
   label = "Test Points";
   multiselect = [false];

   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }

   field TestPointId {
      size = Small;
      label = "Test Point ID";
   }
   field Description {
      size = Medium;
   }
   field Location {
      size = Medium;
   }
   field Contract {
      columnexclude = [true];
   }
   field MchCode {
      columnexclude = [true];
   }
   field TestPntSeq {
      columnexclude = [true];
   }
   field LuName {
      columnexclude = [true];
   }
}

list ServiceObjectParametersList for EquipmentObjectParam {
   label = "Parameters";
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   lov ParameterCodeRef with ReferenceMeasurementParameterSelector {
      search = ParameterCode, Description;
      size = Small;
   }
   field ParameterDescription {
      size = Small;
   }
   field TestPntSeq {
      columnexclude = [true];
   }
   field TestPointId {
      columnexclude = [true];
   }
   lov UnitCodeRef with ReferenceIsoUnitSelector {
      search = UnitCode, Description;
      size = Small;
   }
   field PmCriteria {
      size = Small;
   }
   field LastValue {
      label = "Total Value";
   }
   field RegDate {
      label = "Last Measured Date/Time";
   }
   field CalStartDate {
      label = "Calculation Start Date";
   }
   field MchCode {
      columnexclude = [true];
   }
   field MeasurementParameterRef.MeterIdRequired {
      size = Small;
      label = "Meter ID Required";
   }
   field MeterID {
      size = Small;
   }
   field MeterFlipValue;
   field BlockedForUseDb {
      size = Small;
   }
   field ResourceSeq {
      columnexclude = [true];
   }
   field LuName {
      columnexclude = [true];

   }
}

list ServiceObjectSparePartsList for EquipmentObjectSpare {
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   lov SpareContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Small;
   }
   field PurchasePartSlider {
      label = "Purchase Part Only";
      editable = [ETag = null];
      size = Small;
   }
   @DynamicComponentDependency PURCH
   field SpareId {
      size = Medium;
      editable = [ETag = null];
      lovswitch {

         when [PurchasePartSlider = false] {
            lov SpareIdRef with ReferenceInventoryPartWoLovSelector {
               search = PartNo, PartDescriptionInUse;
               description = SpareIdPerfRef.Description;
            }
         }
         when [PurchasePartSlider = true] {
            lov PurchaseSpareIdRef with PurchasePartSelectLov using ObjSparePurchasePartSelect(SpareContract) {
               search = PartNo, PartDescriptionInUse;
               description = PurchaseSpareIdPerfRef.Description;
            }
         }
      }
   }
//   @DynamicComponentDependency PURCH
//   field PartDescription {
//      size = Large;
//   }
   lov ConditionCodeRef with ConditionCodeSelectLov {
      search = ConditionCode, Description;
      size = Large;
      description = ConditionCodeRef.Description;
   }
   field PartOwnership {
      validate command {
         execute {
            if[(PartOwnership = "CompanyOwned") and Owner != null] {
               set Owner = null;
            }
         }
      }
   }

   field Owner {
      editable = [PartOwnership != "CompanyOwned" and PartOwnership != null];
      lovswitch {
         @DynamicComponentDependency PURCH
         when[PartOwnership = "SupplierLoaned"] {
            lov SupplierRef with PurchasePartSupplierLovSelector {
               search = VendorNo, VendorName;
               size = Large;
               description = SupplierRef.VendorName;
            }
         }
         when[PartOwnership = "CustomerOwned"] {
            @DynamicComponentDependency WO
            lov OwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               size = Large;
               description = OwnerRef.Name;
            }
         }
      }
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
   }
   field HasSpareStructure {
      size = Small;
      editable = [false];
   }
   field  InventoryPart {
      size = Medium;
   }
   @DynamicComponentDependency INVENT
   field InventoryPartRef.DimQuality {
      size = Medium;
      label = "Dimension/Quality";
   }
   @DynamicComponentDependency INVENT
   field InventoryPartRef.TypeDesignation {
      size = Medium;
      label = "Type Designation";
   }
   @DynamicComponentDependency INVENT
   field QuantityOnHand;
   field UoM {
      size = Small;
   }

   field Qty {
      label = "Quantity";
   }
   field MchPart {
      size = Small;
   }
   field DrawingNo {
      size = Small;
   }
   field DrawingPos {
      size = Small;
   }
   @DynamicComponentDependency INVENT
   field PickingLocation {
      size = Small;
   }
   field Note {
      multiline = true;
      size = Large;
   }
}

list ServiceObjectPartyList for EquipmentObjectParty {
   // Column 'Contract' (colContract) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   // Column 'MchCode' (colMchCode) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   field PartyType {
      size = Medium;
      validate command {
         execute {
            if [PartyType != "Customer"] {
               set DeliveryAddress = "";
            }
         }
      }
   }
   field Identity {
      size = Large;
      contactwidget {
         enabled = [PartyType = "Supplier" or PartyType = "Contractor" or PartyType = "Customer"];
         source {
            Customer = [PartyType = "Customer"];
            Supplier = [PartyType = "Supplier" or PartyType = "Contractor"];
         }
      }

      lovswitch {
         when [PartyType = "Customer"] {
            @DynamicComponentDependency WO
            lov IdentityCustomerIdRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               description = Name;
            }
         }
         when [PartyType = "Supplier" or PartyType = "Contractor"] {
            lov IdentitySupplierIdRef with SupplierIdSelector {
               search = SupplierId, Name;
               description = Name;
            }
         }
         when [PartyType = "Manufacturer"] {
            lov IdentityManufacturerIdRef with ManufacturerSelector {
               search = ManufacturerId, Name;
               description = Name;
            }
         }
         when [PartyType = "Owner"] {
            lov IdentityOwnerIdRef with OwnerSelector {
               search = OwnerId, Name;
               description = Name;
            }
         }
         when [PartyType = "AssetManager"] {
            lov IdentityAssetManagerRef with ReferencePersonInfoLovSelector {
               search = PersonId, Name;
               description = Name;
            }
         }
      }
      validate command {
         execute {
            if [PartyType = "Customer"] {
               call GetDeliveryAddress(Identity) into DeliveryAddress;
            }
         }
      }
   }
   @DynamicComponentDependency ORDER
   lov DeliveryAddressRef with CustAddressShipLovSelector {
      size = Large;
      editable = [PartyType = "Customer"];
   }

}

@Override
list ServiceObjectsList for EquipmentObjectList {
   orderby = MchCode, Contract;

   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   fieldset EquipmentObjectfieldset;

}


@DynamicComponentDependency PCMSCI
list SrvObjPscServicesList for SrvPscContrProduct {
   orderby = ContractId, LineNo;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   lov ContractIdRef with ReferenceScServiceContractSelector {
      search = ContractId, ContractName;
      label = "Contract";
      description = ContractIdRef.ContractName;
      details = "tree/RequestContract/RequestContractTree?$filter=ContractId eq $[ContractId]";
      editable = [false];
      size = Medium;
   }
   lov CustomerIdRef with ReferenceCustomerInfoCustcategoryPubSelector {
      search = CustomerId, Name;
      label = "Contract Customer";
      description = CustomerIdRef.Name;
      size = Medium;
      editable = [false];
      contactwidget {
         enabled = [CustomerId != null];
         source = Customer;
      }
   }

   field ContractName {
      size = Medium;
   }
   // Column 'Contract' (colsContract) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   lov LineNoRef with ReferencePscContrProductSelector {
      size = Small;
      details = "page/RequestContract/RequestServiceLineDetailPage;$filter=ContractId eq $[ContractId] and LineNo eq $[LineNo]";
      editable = [false];
   }
   field Description {
      size = Medium;
   }
   field DateFrom {
      label = "Line Valid From";
      size = Small;
      editable = [false];
   }
   field ExpiryDate {
      label = "Line Valid To";
      size = Small;
      editable = [false];
   }
   field RequestSlaTempId {
      size = Small;
      editable = [false];
   }
   field PriceRuleId {
      size = Small;
      editable = [false];
   }
}

list SummaryListPm for ServiceObjectCountEntity {
   label = "";
   card ObjUsedInPm;
}
list SummaryListWo for ServiceObjectWoCountEntity {
   label = "";
   card ObjUsedInWo;
}

@DynamicComponentDependency RECSRV
@DynamicComponentDependency REQMGT
list ServiceObjectList for ServiceObjectServiceEntity {
   orderby = Program;
   field Program {
      label = "Program";
      size = Medium;
      editable = [false];
   }
   field Contract {
      label = "Contract";
      size = Medium;
      editable = [false];
   }
   field Request {
      label = "Request";
      size = Medium;
      editable = [false];
   }
   field RequestStatus {
      label = "Request Status";
      size = Medium;
      editable = [false];
   }
}
----------------------------------- CARDS -----------------------------------

card ObjUsedInPm for ServiceObjectCountEntity {

   label = "${DisplayText}";
   markdowntext {
      text = "# ${ObjCount}";
   }
   command DetailsCommandSrv;
   command DetailsCommandSrvAll;
}
card ObjUsedInWo for ServiceObjectWoCountEntity {

   label = "${DisplayText}";
   markdowntext {
      text = "# ${ObjCount}";
   }
   command DetailsCommandSrvWo;
   command DetailsCommandSrvWoAll;
}
--------------------------------- COMMANDS ----------------------------------
command DetailsCommandSrv for ServiceObjectCountEntity {
   label = "Go to level ${DisplayText}s";
   icon = "caret-right";
   style = IconOnly;
   enabled = [OneObjCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Single";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}
command DetailsCommandSrvAll for ServiceObjectCountEntity {
   label = "Go to Structure ${DisplayText}s";
   icon = "chevron-right";
   style = IconOnly;
   enabled = [AllCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Structure";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}

command DetailsCommandSrvWo for ServiceObjectWoCountEntity {
   label = "Go to level ${DisplayText}";
   icon = "caret-right";
   style = IconOnly;
   enabled = [OneObjCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Single";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}
command DetailsCommandSrvWoAll for ServiceObjectWoCountEntity {
   label = "Go to Structure ${DisplayText}";
   icon = "chevron-right";
   style = IconOnly;
   enabled = [AllCount != 0];
   variable TypeOfObj Text;
   execute {
      set TypeOfObj = "Structure";
      call GetNavigationUrl(EquipmentObjectSeq, ConnectedLu, TypeOfObj) into NavigateUrlVar;
      navigate "${NavigateUrlVar}";
   }
}

command CmdMeasurementsCommand for EquipmentObjectList {
   label = "Measurements for Service Object";
   enabled = [EquipmentObjectSeq != null];
   execute {
      navigate "page/MeasurementsForObject/Form?$filter=EquipmentObjectSeq eq $[EquipmentObjectSeq] and Contract eq $[Contract]";
   }
}

------------------------------- IMAGE VIEWERS -------------------------------
imageviewer ObjectImageViewer for EquipmentObjectList {
   label = "Service Object Image";
   collapsed = [false];
   scale = original;
   height = auto;
}
----------------------------- VISUAL COMPONENTS -----------------------------

-------------------------------- SINGLETONS ---------------------------------

singleton TechObjectReferenceEquipSingleton for TechnicalObjectReference {
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
}

singleton FunObjectGeneralSingleton for EquipmentFunctional {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

}

singleton ServiceSerialGeneralSingleton for EquipmentSerial {
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
}