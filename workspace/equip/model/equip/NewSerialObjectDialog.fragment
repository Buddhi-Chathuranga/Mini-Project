-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181023  ISHHLK  SAUXXW4-1247 dlgNewSerialObject - New Serial Object generated from MTG Version: 1.32
--  181023  ISHHLK  SAUXXW4-1238 dlgCreateSerialObject - New Serial Object
--  200106  LASSLK  SAXTEND-1244, Implement LOV Filtering
--  210721  lasslk  AM21R2-2104,Added Ownership column to CreateSerialObjectDialog
-----------------------------------------------------------------------------
fragment NewSerialObjectDialog;
component EQUIP;
layer Core;
description "Create New Serial object";

include fragment CustomerInfoCustcategoryPubSelector;
----------------------------- CLIENT FRAGMENTS ------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CreateSerialObjectDialog for CreateSerialObjectStructure {
   label = "New Serial Object Connected to ${LabelMchCode} ${DfContract} ${MchName}";
   input(LabelMchCode, DfContract, PartNo, DfSerialNo, DfGroupId, DfMchTypeRef, DfTypeRef, MakeSupMchCodeVisible, MchName);
   output(DfMchCode, DfContract, PartNo, DfSerialNo, DfGroupId, DfMchType, DfType, SupContract, MchCode, MchName, CostCenter, MchLoc, MchPos, DfOwnership, DfOwner);
   group CreateSerialObjectGroup;

   commandgroup OpenCreateSerialObjectDialog {
      label = "New Serial Object";
      command Ok {
         enabled = [PartNo != null and DfSerialNo != null];
      }
      command Cancel;
   }
}

---------------------------------- GROUPS -----------------------------------
group CreateSerialObjectGroup for CreateSerialObjectStructure {
   label = "New Serial Object";
   field DfMchCode {
      size = Large;
   }
   field MchName {
      visible = [false];
   }

   lov DfContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Large;
   }
   lov PartNoRef with PartCatalogSelector {
      search = PartNo, Description;
      size = Large;
      validate command {
         execute {
            call GetDescriptionForSerialPart(PartNo) into DfNewDescription;
         }
      }
   }
   field DfNewDescription {
      size = Large;
   }
   field DfSerialNo {
      size = Large;
   }

   lov DfGroupIdRef with EquipmentObjGroup using GetActiveGroupIdForSerial {
      size = Large;
   }
   lov DfMchTypeRef with EquipmentObjType using GetActiveMchTypeForSerial {
      size = Large;
      label = "Object Type";
   }

   lov TypeRef with TypeDesignation using GetActiveTypeDesignationForSerial {
      size = Large;
      label = "Type Designation";
      validate command {
         variable TempMchType;
         execute {
            if [DfType != null and DfMchType != null] {
               call GetMchType(DfType) into TempMchType;
               if [TempMchType != DfMchType] {
                  alert("The selected object type is not connected to the type designation.");
               }
            }
            if [DfType != null and DfMchType = null] {
               call GetMchType(DfType) into DfMchType;
            }
         }
      }
   }

   field MakeSupMchCodeVisible {
      visible = [false];
   }
   lov SupContractRef with ReferenceUserAllowedSiteLovSelector {
      search = Contract, ContractDesc;
      size = Large;
      visible = [MakeSupMchCodeVisible = 1];
   }
   lov DfSupMchCodeRef with ReferenceEquipmentAllObjectUivSelector {
      search = MchCode, MchName;
      size = Large;
      visible = [MakeSupMchCodeVisible = 1];
      validate command {
         execute {
            if [DfSupMchCode = null] {
               set DfSupMchName = null;
            }
            else {
               set SupMchName = SupMchCodeRef.MchName;
            }
         }
      }
   }

   field DfSupMchName {
      size = Large;
      visible = [MakeSupMchCodeVisible = 1];
   }
   field DfOwnership {
      label = "Ownership";
      size = Large;

   }
   field DfOwner {
      size = Large;
      editable = [(DfOwnership = "CustomerOwned" or DfOwnership = "SupplierLoaned" or DfOwnership = "SupplierRented") and(DfOwner != original.DfOwner or original.DfOwner = null)];
      lovswitch {
         when[DfOwnership = "SupplierLoaned" or DfOwnership = "SupplierRented"] {
            lov SupplierInfoRef with ReferenceSupplierInfoSelector {
               search = SupplierId, Name;
            }
         }
         when[DfOwnership = "CustomerOwned"] {
            lov DfOwnerRef with ReferenceCustomerInfoCustcategoryPubSelector {
               search = CustomerId, Name;
               preview = CustomerInfoCustcategoryPubCard;
            }
         }

      }
   }


}
--------------------------------- SELECTORS ---------------------------------
@Override
selector PartCatalogSelector for PartCatalog {
   static PartNo;
   static Description;
   static SerialTrackingCode;
   static UnitCode;
}
@Override
selector ReferenceSupplierInfoSelector for SupplierInfo {
   static SupplierId {
      label = "Supplier ID";
   }
   static Name;
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

---------------------------------- ACTIONS ----------------------------------
action NewSerialObject {
   initialcheck implementation;
   ludependencies = EquipmentSerial, EquipmentObject;
   parameter  Contract            Text;
   parameter  MchCode             Text;
   parameter  PartNo              Text;
   parameter  SerialNo            Text;
   parameter  MchType             Text;
   parameter  GroupId             Text;
   parameter  Type                Text;
   parameter  SupContract         Text;
   parameter  SupMchCode          Text;
   parameter  CostCenter          Text;
   parameter  MchLoc              Text;
   parameter  MchPos              Text;
   parameter  Owner               Text;
   parameter  Ownership           Enumeration(Ownership);
}
--------------------------------- FUNCTIONS ---------------------------------
function GetDescriptionForSerialPart Text {
   parameter  PartNo   Text;
}

function GetSerialTrackRcpt Text {
   parameter  PartNo   Text;
}

function GetActiveGroupIdForSerial List < Entity(EquipmentObjGroup) > {
   where = "OBJSTATE in ('Active')";
}
function GetActiveMchTypeForSerial List < Entity(EquipmentObjType) > {
   where = "OBJSTATE in ('Active')";
}
function GetActiveTypeDesignationForSerial List < Entity(TypeDesignation) > {
   where = "OBJSTATE in ('Active')";
}


-------------------------------- STRUCTURES ---------------------------------
structure CreateSerialObjectStructure {
   attribute DfMchCode Text {
      label = "Object ID";
      maxlength = 100;
      format = uppercase;
   }
   attribute LabelMchCode Text {
      maxlength = 100;
      format = uppercase;
   }
   attribute DfContract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute PartNo Text {
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute DfNewDescription Text {
      label = "Description";
      maxlength = 2000;
   }
   attribute DfSerialNo Text {
      label = "Serial No";
      maxlength = 50;
      format = uppercase;
   }
   attribute DfGroupId Text {
      label = "Group ID";
      maxlength = 10;
      fetch = "Equipment_Object_API.Get_Group_Id(SupContract, DfSupMchCode)";
      format = uppercase;
   }
   attribute DfMchType Text {
      label = "Object Type";
      maxlength = 20;
      format = uppercase;
   }
   attribute DfType Text {
      label = "Type Designation";
      maxlength = 30;
      format = uppercase;
   }
   attribute SupContract Text {
      label = "Belongs to Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute DfSupMchCode Text {
      label = "Belongs to Object ID";
      maxlength = 100;
      format = uppercase;
   }
   attribute DfSupMchName Text {
      label = "Object Description";
      maxlength = 200;
   }

   attribute DfCostCenter Text {
      maxlength = 10;
      fetch = "Equipment_Object_API.Get_Cost_Center(SupContract, DfSupMchCode)";
      format = uppercase;
   }
   attribute DfMchLoc Text {
      maxlength = 10;
      fetch = "Equipment_Object_API.Get_Mch_Loc(SupContract, DfSupMchCode)";
      format = uppercase;
   }
   attribute DfMchPos Text {
      maxlength = 15;
      fetch = "Equipment_Object_API.Get_Mch_Pos(SupContract, DfSupMchCode)";
   }

   attribute MakeSupMchCodeVisible Number;

   attribute MchName Text;

   attribute GetGroupId Text {
      fetch = "Equipment_Object_API.Get_Group_Id(SupContract ,DfSupMchCode )";
   }
   attribute DfOwnership Enumeration(Ownership) {
      label = "Ownership";
   }
   attribute DfOwner Text {
      label = "Owner";
      maxlength = 30;
      format = uppercase;
   }
   attribute VendorNo Text;
   reference DfContractRef(DfContract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference DfGroupIdRef(DfGroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference DfMchTypeRef(DfMchType) to EquipmentObjType(MchType) {
      label = "Object Type";
   }
   reference TypeRef(DfMchType, DfType) to TypeDesignation(MchType, Type) {
      label = "Type Designation";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
   }
   reference DfSupMchCodeRef(SupContract, DfSupMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Belongs to Object ID";
   }
   reference DfOwnerRef(DfOwner) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Owner";
   }
   reference SupplierInfoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
}