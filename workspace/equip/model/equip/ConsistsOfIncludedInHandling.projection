-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181010  ISHHLK  tbwConsistInclude - Consists of/Included in, MTG Version: 1.30, Enterprise Explorer Source: tbwConsistInclude
-----------------------------------------------------------------------------

projection ConsistsOfIncludedInHandling;
component EQUIP;
layer Core;
description "Manage Consists of Spare Parts for Equipment";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment EquipmentAllObjectUivSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLovSelector;
include fragment EquipmentAllObjectPerfQuery;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjectSpareSet for EquipmentObjectSpare;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObjectSpare {
//   keys = Contract, SpareId, MchSpareSeq {
//      where = "CONTRACT = :Contract and SPARE_ID = :SpareId and MCH_SPARE_SEQ = :MchSpareSeq";
//   }
   keys = Contract, MchSpareSeq {
      where = "CONTRACT = :Contract and MCH_SPARE_SEQ = :MchSpareSeq";
   }

   use attributes = MchCode, SpareContract, HasSpareStructure, Qty, MchPart, DrawingNo, DrawingPos;
   attribute SpareId Text {
      label = "Part No";
      editable = [ETag = null];
   }
   attribute PartDescription Text {
      fetch = "Maintenance_Spare_API.Get_Description(spare_contract,spare_id)";
      label = "Part Description";
      maxlength = 2000;
   }
   attribute SpareContract Text {
      label = "Part Number Site";
   }
   attribute HasSpareStructure Enumeration(TranslateBoolean) {
      fetch = "Equipment_Spare_Structure_API.Has_Spare_Structure(SPARE_ID,SPARE_CONTRACT)";
      label = "Structure";
   }
   @DynamicComponentDependency INVENT
   attribute InventoryPart Enumeration(InventoryFlag) {
      label = "Inventory Part";
      fetch = "Equipment_Object_Spare_API.Get_Part_Type(SPARE_ID,SPARE_CONTRACT)";
      editable = [false];
   }
   @DynamicComponentDependency INVENT
   attribute QuantityOnHand Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand(spare_contract,spare_id,null)";
      label = "Quantity On Hand";
      editable = [false];
   }
   attribute Uom Text {
      fetch = "Maintenance_Spare_API.Get_Unit_Meas(spare_contract,spare_id)";
      label = "UoM";
      maxlength = 2000;
      editable = [ETag != null];
   }
   reference EquipmentObjectRef(Contract, MchCode) to EquipmentObject(Contract, MchCode);
   @DynamicComponentDependency INVENT
   reference InventoryPartRef(SpareContract, SpareId) to InventoryPart(Contract, PartNo);
   reference MchCodeRef(Contract, MchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Object ID";
   }
   reference MchCodePerfRef(Contract, MchCode) to EquipmentAllObjectPerf(Contract, MchCode);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Object Site";
   }
   @DynamicComponentDependency PURCH
   reference SpareIdRef(SpareId) to PurchasePartLov(PartNo) {
      label = "Part No";
   }
   reference SpareContractRef(SpareContract) to UserAllowedSiteLov(Contract) {
      label = "Part Number Site";
   }
}

------------------------------- ENUMERATIONS --------------------------------
@Override
@DynamicComponentDependency INVENT
enumeration InventoryFlag {
   enumerationtype = Standard;
   exec = "Inventory_Flag_API";
   value = "Inventory Part" {
      identifier = "InventoryPart";
      label = "Inventory Part";
   }
   value = "Non Inventory Part" {
      identifier = "NonInventoryPart";
      label = "Non Inventory Part";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency INVENT
function GetDescription Text {
   parameter SpareContract Text;
   parameter SpareId Text;
}
@DynamicComponentDependency INVENT
function GetUnitMeas Text {
   parameter SpareContract Text;
   parameter SpareId Text;
}

@DynamicComponentDependency PURCH
function PurchasePartSelect List<Entity(PurchasePartLov)> {
   parameter SpareContract Text;
   where = "CONTRACT = :SpareContract";
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

