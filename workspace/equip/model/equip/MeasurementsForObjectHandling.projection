-----------------------------------------------------------------------------
-- Date        Sign      History
-- ----------  ------   -----------------------------------------------------
-- 2019-09-18  KrRaLK   SAZM-3164, Modified EquipmentObjectParam.
--------------------------------APP10 SUPPORT--------------------------------
-- 2018-10-18  AMNALK   SAUXXW4-1271, Created using MTG Version: 1.31. EE Source: frmObjectMeasurements
-- 2018-10-23  TAJALK   SAUXXW4-1266, Added an action and a function
-- 2021-07-01  RUSSLK   AMZEAX-636 ,  Added Contract as a key in EquipmentObjectParam entity and to the ValuesArray array.
-- 2021-08-17  RUSSLK   AM21R2-2526,Modified the EquipmentObjectParam and added ToolEquipmentTestPntRef to the EquipmentObjectMeasGroup.
-- 2022-01-11  KrRaLK   AM21R2-2950, Equipment object is given a sequence number as the primary key (while keeping the old Object ID
--                      and Site as a unique constraint), so inlined the business logic to handle the new design of the EquipmentObject.
-----------------------------------------------------------------------------
projection MeasurementsForObjectHandling;
component EQUIP;
layer Core;
description "Manage Measurements for Equipment Object";
category Users;

include fragment UserAllowedSiteLovSelector;
include fragment EquipmentObjectUivSelector;
include fragment EquipmentObjectTestPntLovSelector;
include fragment MarkAsIncorrectAssistant;
include fragment ChangeMeterAssistant;
include fragment SetMeterRollOverValueAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjectParamSet for EquipmentObjectParam;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObjectParam {
   crud = Read, Update;
   from = "Object_Parameters";
   exec = "EQUIPMENT_OBJECT_PARAM_API";
   keys = TestPntSeq, ParameterCode;
   use attributes = LuName, ResourceSeq;

   attribute EquipmentObjectSeq Number;
   attribute TestPntSeq Number;
   attribute ParameterCode Text;
   attribute MchCode Text {
      fetch = "mch_code";
      label = "Object ID";
      maxlength = 32767;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "NVL(Equipment_Object_API.Get_Mch_Name(contract, mch_code), Resource_Util_API.Get_Resource_Description(resource_seq))";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute ObjLevel Text {
      fetch = "Equipment_Object_API.Get_Obj_Level(contract, mch_code)";
      maxlength = 2000;
      editable = [false];
   }
   attribute LuName Text {
      fetch = "lu_name";
      maxlength = 30;
      required = [true];
   }
   attribute ResourceSeq Number {
      fetch = "resource_seq";
      editable = [ETag = null];
   }
   attribute BlockedForUse Boolean("TRUE", "FALSE") {
      fetch = "blocked_for_use_db";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";

   }
   array ToolEquipValuesArray(ResourceSeq) to EquipmentObjectMeasGroup(ResourceSeq);
   array ValuesArray(EquipmentObjectSeq) to EquipmentObjectMeasGroup(EquipmentObjectSeq);

}
@Override
entity EquipmentObjectMeasGroup using EquipmentObjectMeas {
   crud = Read, Update;
   from = "equip_object_meas_group";
   exec = "EQUIPMENT_OBJECT_MEAS_API";
   excludefromconfig = [true];
   keys = TestPntSeq, ParameterCode;

   where = "Equipment_Object_Param_Api.Get_Blocked_For_Use_Db(TEST_PNT_SEQ, PARAMETER_CODE) = 'FALSE'";

   attribute ValuesSeq Number {
      fetch = "values_seq";
      label = "Values seq";
      editable = [ETag = null];
   }
   attribute TestPntSeq Number {
      fetch = "test_pnt_seq";
      label = "Testpoint Sequence";

   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [ETag != null];
      format = uppercase;
   }
   attribute MchCode Text {
      fetch = "mch_code";
      label = "Object ID";
      maxlength = 100;
      editable = [ETag != null];
      format = uppercase;
   }
   attribute ObjectDescription Text {
      fetch = "NVL(Equipment_Object_API.Get_Mch_Name(contract, mch_code), Resource_Util_API.Get_Resource_Description(resource_seq))";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TestPointId Text {
      fetch = "test_point_id";
      label = "Test Point ID";
      editable = [false];
      format = uppercase;
   }
   attribute ParameterCode Text {
      fetch = "parameter_code";
      label = "Parameter ID";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute ParamTypeDb Text {
      fetch = "Measurement_Parameter_API.Get_Measurement_Param_Type_Db(PARAMETER_CODE)";
      label = "Parameter Type DB";
      editable = [false];
   }
   attribute UnitOfMeasure Text {
      fetch = "Equipment_Object_Param_API.Get_Unit(test_pnt_seq,parameter_code)";
      label = "Unit of Measure";
      maxlength = 2000;
      editable = [false];
   }

   attribute ResourceSeq Number {
      fetch = "resource_seq";
      label = "Resource Seq";
      editable = [false];
   }
   attribute TestSequenceId Text {
      fetch = "test_sequence_id";
      label = "Test sequence id";
      maxlength = 6;
      editable = [ETag = null];
   }
   attribute MeasurementType Enumeration(MeasurementType) {
      fetch = "measurement_type_db";
      label = "Measurement Type";
      editable = [false];
      required = [false];

   }
   attribute MeasurementTypeDb Text {
      fetch = "measurement_type_db";
      label = "Measurement Type DB";
      maxlength = 20;
      editable = [false];
      required = [false];
   }
   attribute RecordedValue Number {
      fetch = "recorded_value";
      label = "Last Value";
      maxlength = 12;
      editable = [false];
   }
   attribute NewRecordedValue Number {
      fetch = "new_recorded_value";
      label = "New Reading Value";
      maxlength = 12;
   }
   attribute NewRegDate Timestamp {
      fetch = "new_reg_date";
      label = "New Reading Date/Time";
   }
   attribute TotalValue Text {
      fetch = "NVL(measured_value, Equipment_Object_Meas_API.Get_Latest_Measured_Value(test_pnt_seq, parameter_code))";
      label = "Total Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute MeterId Text {
      fetch = "meter_id";
      label = "Meter ID";
      maxlength = 30;
      editable = [false];
   }
   attribute MeasurementNote Text {
      fetch = "measurement_note";
      label = "Measurement Note";
      maxlength = 2000;

   }
   attribute RegDate Timestamp {
      fetch = "reg_date";
      label = "Last Measured Date/Time";
      editable = [ETag = null];
      required = [false];

   }
   attribute Remark Text {
      fetch = "remark";
      label = "Remark";
      maxlength = 200;

   }
   attribute MeterIDRequired Text {
      fetch = "Meter_Id_Required_API.Encode(Measurement_Parameter_API.Get_Meter_Id_Required(parameter_code))";
      label = "Meter ID Required";
      maxlength = 2000;
      editable = [false];
   }
   attribute NoteModified Boolean("TRUE", "FALSE") {
      fetch = "'FALSE'";

   }
   reference EquipmentObjectTestPntRef(Contract, MchCode, TestPointId) to EquipmentObjectTestPnt(Contract, MchCode, TestPointId);
   reference ToolEquipmentTestPntRef(MchCode, TestPointId, ResourceSeq) to EquipmentObjectTestPnt(MchCode, TestPointId, ResourceSeq);
   reference MeasurementParameterRef(ParameterCode) to MeasurementParameter(ParameterCode);
   reference TestPntSeqRef(TestPntSeq) to EquipmentObjectTestPnt(TestPntSeq) {
      label = "Testpoint Sequence";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";

   }
   reference MchCodeRef(MchCode) to EquipmentObjectUiv(Contract) {
      label = "Object ID";

   }
   reference TestPointIdRef(TestPointId) to EquipmentObjectTestPntLov(TestPointId) {
      label = "Test Point ID";

   }
   reference ParameterCodeRef(ParameterCode) to MeasurementParameter(ParameterCode) {
      label = "Parameter ID";
   }

   array HistMeasArray1(EquipmentObjectSeq, TestPntSeq, ParameterCode) to EquipmentObjectMeas(EquipmentObjectSeq, TestPntSeq, ParameterCode);
   array HistMeasArray2(ResourceSeq, TestPointId, ParameterCode) to EquipmentObjectMeas(ResourceSeq, TestPointId, ParameterCode);

}
@Override
entity EquipmentObjectMeas {
   crud = Read;
   from = "equipment_object_meas";
   exec = "EQUIPMENT_OBJECT_MEAS_API";
   keys = ValuesSeq {
      where = "VALUES_SEQ = :ValuesSeq";
   }
   attribute Contract Text {
      fetch = "Equipment_Object_API.Get_Contract(Equipment_Object_Seq)";
      label = "Site";
      maxlength = 5;
      editable = [ETag != null];
      format = uppercase;
   }
   attribute MchCode Text {
      fetch = "Equipment_Object_API.Get_Mch_Code(Equipment_Object_Seq)";
      label = "Object ID";
      maxlength = 100;
      editable = [ETag != null];
      format = uppercase;
   }

   attribute ValuesSeq Number {
      fetch = "values_seq";
      label = "(Untitled)";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
   }
   attribute MeasurementType Enumeration(MeasurementType) {
      fetch = "measurement_type_db";
      label = "Measurement Type";
      required = [true];
      editable = [ETag = null];
   }
   attribute RecordedValue Number {
      fetch = "recorded_value";
      label = "Recorded Value";
      maxlength = 12;
      required = [true];
      editable = [ETag = null];
   }
   attribute MeasuredValue Number {
      fetch = "measured_value";
      label = "Total Value";
      maxlength = 12;
      editable = [false];
   }
   attribute MeasurementNote Text {
      fetch = "measurement_note";
      label = "Measurement Note";
      maxlength = 2000;
   }
   attribute RegDate Timestamp {
      fetch = "reg_date";
      label = "Registration Date";

   }
   attribute MeterId Text {
      fetch = "meter_id";
      label = "Meter ID";
      maxlength = 30;
   }
   attribute Remark Text {
      fetch = "remark";
      label = "Remark";
      maxlength = 200;
   }
   attribute MeasurementTypeDb Text {
      fetch = "measurement_type_db";
      label = "Measurement Type DB";
      maxlength = 20;
      editable = [false];
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action MarkFlipIncorrect {
   initialcheck implementation;
   parameter ValuesSeq Number;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetSiteDate Timestamp {
   parameter Contract Text;
}

function GetDefaultRemark Text;

function IsRegDateExists Number {
   parameter TestPointSq Number;
   parameter ParameterCode Text;
   parameter NewRegDate Timestamp;
}

function GetPrevMeterIdByDate Text {
   parameter NewRegDate Timestamp;
   parameter TestPointSq Number;
   parameter ParameterCode Text;
}

function HasPrevPreliminaryRecords Boolean {
   parameter TestPrintSq Number;
   parameter ParameterCode Text;
   parameter RegDate Timestamp;
}

function GetParameterType Text {
   parameter ParameterCode Text;
}

function GetInputData Structure(ChangeMeterStructure) {
   parameter TestPntSeq Number;
   parameter ParameterCode Text;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------