-----------------------------------------------------------------------------
--
--  Logical unit: MarkAsIncorrectAssistant
--  Component:    EQUIP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ------      ------  -----------------------------------------------------
--  2018-10-18  AMNALK  SAUXXW4-1232, Created.
-----------------------------------------------------------------------------
fragment MarkAsIncorrectAssistant;
component EQUIP;
layer Core;
description "Mark as incorrect...";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant MarkIncorrectAssistant using MarkIncorrectAssistantVirtualSet {
   label = "Mark as Incorrect";
   input(ValuesSeq, Contract, MchCode, MchName, ParameterCode, ParameterDescription, TestPointId, Unit, RecordedValue, RegDate, TestPntSeq);

   steps {
      step {
         group ObjectInfoGroup;
         group MeterEquipInfoGroup;
         group SelectedReadingGroup;
         group ReasonForIncorrectGroup;
         markdowntext {
            text = "Selected Reading will be set as Incorrect. Do you want to continue?";
         }

      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      execute {
         call MarkReadingInCorrect(ValuesSeq, Contract, MchCode, TestPointId, ParameterCode, MeasurementNote, RegDate, TestPntSeq);
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;

      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group ObjectInfoGroup for MarkIncorrectAssistantVirtual {
   label = "Object Information";

   field Contract {
      size = Small;
   }
   field MchCode;
   field MchName;
}

group MeterEquipInfoGroup for MarkIncorrectAssistantVirtual {
   label = "Meter Information";
   field ParameterCode;
   field ParameterDescription {
      label = "Parameter Description";
   }
   field TestPointId {
      size = Small;
   }
   field Unit {
      size = Small;
      label = "Unit Of Measure";

   }
}

group SelectedReadingGroup for MarkIncorrectAssistantVirtual {
   label = "Selected Reading";
   field RecordedValue;
   field RegDate {
      label = "Registration Date";
   }
}

group ReasonForIncorrectGroup for MarkIncorrectAssistantVirtual {
   label = "Reason";

   field MeasurementNote {
      multiline = true;
      size = Large;
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjMeasDlgSet for EquipmentObjMeasDlg;
entityset MarkIncorrectAssistantVirtualSet for MarkIncorrectAssistantVirtual;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObjMeasDlg using  EquipmentObjectMeas {
   crud = Create, Read, Update, Delete;
   from = "equipment_object_meas";
   exec = "EQUIPMENT_OBJECT_MEAS_API";
   keys = Contract, MchCode, ParameterCode, TestPointId {
      where = "CONTRACT = :Contract and MCH_CODE = :MchCode and PARAMETER_CODE = :ParameterCode and TEST_POINT_ID = :TestPointId";
   }

   use attributes = RecordedValue, RegDate, MeasurementNote, TestPntSeq;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute MchCode Text {
      fetch = "mch_code";
      label = "Object ID";
      maxlength = 100;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute ParameterCode Text {
      fetch = "parameter_code";
      label = "Meter";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute TestPointId Text {
      fetch = "test_point_id";
      label = "Test Point ID";
      maxlength = 30;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Unit Text {
      fetch = "Equipment_Object_Param_API.Get_Unit(test_pnt_seq, parameter_code)";
      label = "Unit";
      maxlength = 2000;
      editable = [false];
   }
   attribute RecordedValue Number {
      fetch = "recorded_value";
      label = "Recorded Value";
      maxlength = 12;
      editable = [false];
   }
   attribute RegDate Timestamp {
      fetch = "reg_date";
      label = "Reg. Date";
      editable = [false];
   }
   attribute MeasurementNote Text {
      fetch = "measurement_note";
      label = "Reason for Incorrect";
      maxlength = 2000;
   }
   attribute TestPntSeq Number {
      fetch = "test_pnt_seq";
      editable = [ETag = null];
   }
   reference EquipmentObjectRef(Contract, MchCode) to EquipmentObject(Contract, MchCode);
   reference MeasurementParameterRef(ParameterCode) to MeasurementParameter(ParameterCode);
   reference MchCodeRef(Contract, MchCode) to EquipmentObject(Contract, MchCode) {
      label = "Object ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ParameterCodeRef(ParameterCode) to MeasurementParameter(ParameterCode) {
      label = "Meter";
   }
   reference TestPointIdRef(Contract, MchCode, TestPointId) to EquipmentObjectTestPnt(Contract, MchCode, TestPointId) {
      label = "Test Point ID";
   }
   reference TestPntSeqRef(TestPntSeq) to EquipmentObjectTestPnt(TestPntSeq);
}

--------------------------------- VIRTUALS ----------------------------------

virtual MarkIncorrectAssistantVirtual {

   attribute ValuesSeq Number;
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute MchCode Text {
      label = "Object ID";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute MchName Text {
      label = "Object Description";
      maxlength = 200;
      editable = [false];

   }
   attribute ParameterCode Text {
      label = "Meter";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute ParameterDescription Text {
      label = "Parameter Description";
      maxlength = 500;
      editable = [false];

   }
   attribute TestPointId Text {
      label = "Test Point ID";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   attribute Unit Text {
      label = "Unit";
      maxlength = 2000;
      editable = [false];
   }
   attribute RecordedValue Number {
      label = "Recorded Value";
      maxlength = 12;
      editable = [false];
   }
   attribute RegDate Timestamp {
      label = "Reg. Date";
      editable = [false];
   }
   attribute MeasurementNote Text {
      label = "Reason for Incorrect";
      maxlength = 2000;
   }
   attribute TestPntSeq Number {
      editable = [false];
   }
}

action MarkReadingInCorrect {
   initialcheck none;
   ludependencies = EquipmentObjectMeas;
   parameter ValuesSeq Number;
   parameter Contract Text;
   parameter MchCode Text;
   parameter TestPointId Text;
   parameter ParameterCode Text;
   parameter MeasurementNote Text;
   parameter RegDate Timestamp;
   parameter TestPntSeq Number;
}