--------------------------------------------------------------------------------------
-- Date    Sign    History
-- ------  ------  ---------------------------------------------------------------
-- 191118  LoPrlk  SAXTEND-1131, Set the attachment LU for EquipmentSerial.
-- 190327  LoPrlk  SAUXXW4-13052, Removed the references to Code Parts to be used on Cost Center and Object.
-- 181018  LoPrlk  SAUXXW4-1343, Added the attribute CmStdId.
-- 181010  JADASE  SAUXXW4-64, Added Operational Modes
-- 180828  SSILLK  SAUXXW4-1303, Converted MTG Version: 1.26. Implementation for  Enterprise Explorer Source:tbwSerialObject - Serial Objects
-- 210625  SHAGLK  AM21R2-1493, Added new attribute ToolEquipment and implement GetBelongsToObject function for filtering
-- 210720  SHAGLK  AM21R2-1493, Removed function GetBelongsToObject
-- 210917  LASSLK  AM21R2-2778, Modified use attributes in entity EquipmentSerial.
-- 220112  DmAlLK  AM21R2-3233, Added ClusterId. Included filter that by Contract.
--------------------------------------------------------------------------------------
projection SerialObjectsHandling;
component EQUIP;
layer Core;
description "Manage Equipment Serial Objects.";
category Users;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment AccountingCodepartESelector;
include fragment EquipmentAllObjectUivSelector;
include fragment UserAllowedSiteLovSelector;
include fragment EquipmentObjectSparePartsList;
@DynamicComponentDependency ORDER
include fragment CustAddressShipLovSelector;
include fragment PersonInfoLovSelector;
@DynamicComponentDependency INVENT
include fragment InventoryPartWoLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLovSelector;
include fragment EquipmentObjectParty4Selector;
include fragment EquipmentObjectPartyList;
include fragment EquipmentObjectUivSelector;
include fragment EquipObjectLocationLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment EquipmentSerialUivSelector;
include fragment EquipmentSerialLovSelector;
include fragment MaintenanceObjectSelector;
include fragment AccountingCodepartBSelector;
include fragment CopySerialObjectDialog;
include fragment MoveSerialObjectDialog;
include fragment EmployeeLovSelector;
include fragment EquipmentAllObjectLov1Selector;
include fragment TestPointParameters;
include fragment ResourceEquipmentSiteConnSelector;
@DynamicComponentDependency OPPLAN
include fragment OperationalGroupAssistant;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment SetMeterRollOverValueAssistant;
include fragment ChangeMeterAssistant;
include fragment BoexpTwSettings;
include fragment EquipmentAllObjectPerfQuery;
include fragment MediaLibraryAttachment;
include fragment MoveToInventoryDialog;
include fragment OrgCodeAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentSerialSet for EquipmentSerial;
entityset TypeDesignationSet for TypeDesignation;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentSerial {
   from = "equipment_serial_uiv";
   ludependencies = TypeDesignation, TechnicalObjectReference, EquipmentObject;
   keys = EquipmentObjectSeq {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq ";
   }
   supportwarnings = [true];
   use attributes = MchCode, Contract, MchName, OperationalStatus, OperationalCondition, SupMchCode, SupContract, Type, MchType, PartNo, CategoryId, SerialNo, PartRev, GroupId, ManufacturedDate, MchLoc, MchPos, ProductionDate, LocationId, ItemClassId, Criticality, ManufacturerNo, VendorNo, SerialState, LatestTransaction, Ownership, Owner, CostCenter, ObjectNo, MchCodeKeyValue, SafeAccessCode, KeyRef, LuName, Company, AppliedPmProgramId, AppliedPmProgramRev, AppliedDate, PmProgApplicationStatus, NotApplicableReason, NotApplicableSetDate, NotApplicableSetUser, ProcessClassId, FuncObjectSeqSaved;
   luname = "'EquipmentObject'";

   attribute MchName Text {
      label = "Object Description";
   }
   attribute MchCode Text {
      label = "Object ID";
      required = [false];
      editable = [ETag = null];
   }
   attribute Contract Text {
      label = "Site";
      editable = [ETag = null];
   }
   attribute ObjectSiteDesc Text {
      fetch = "SITE_API.Get_Description(Equipment_Object_API.Get_Contract(equipment_object_seq))";
      label = "Object Site Desc.";
      maxlength = 20;
      editable = [false];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      fetch = "OPERATIONAL_STATUS_DB";
      editable = [false];
   }
   attribute SupMchCode Text {
      label = "Belongs to Object";
   }
   attribute PartRev Text {
      label = "Serial Rev";
   }
   attribute KeyRef Text {
      fetch = "key_ref";
      insertable = [false];
      updatable = [false];
   }
   attribute DfSuppWarranty Text {
      fetch = "Equipment_Object_API.Has_Warranty__(equipment_object_seq)";
      maxlength = 5;
      // searchable = false;
      editable = [false];
   }
   attribute DfCustWarranty Text {
      fetch = "Object_Cust_Warranty_API.Has_Warranty(equipment_object_seq, sysdate)";
      maxlength = 5;
      // searchable = false;
      editable = [false];
   }
   attribute ProcessClassId Text {
      label = "Process Class";
      format = uppercase;
   }
   attribute ItemClassId Text {
      label = "Item Class";
      format = uppercase;
   }
   attribute ManufacturerName Text {
      fetch = "Equipment_Manufacturer_API.Get_description(MANUFACTURER_NO)";
      label = "Manufacturer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute PurchPrice Number {
      label = "Acquisition Cost";
      format = ifscurrency;
   }
   attribute ProductionDate Date {
      label = "Installation Date";
      editable = [ETag = null];
   }
   attribute ManufacturedDate Date {
      label = "Manuf Date";
      editable = [ETag = null];
   }
   attribute ObjectNo Text {
      label = "Asset";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(Equipment_Object_API.Get_Contract(equipment_object_seq))";
   }
   attribute Owner Text {
      maxlength = 30;
      format = uppercase;
   }
   attribute OwnerVal Text {
      fetch = "OWNER";
   }
   attribute SerialState Text {
      label = "Current Position";
      maxlength = 253;
   }
   attribute Note Text {
      editable = [true];
      maxlength = 2000;
   }
   attribute SupplierWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_WARRANTY(EQUIPMENT_OBJECT_SEQ)";
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_FUNCTIONAL_API.HAS_CUSTOMER_WARRANTY(EQUIPMENT_OBJECT_SEQ)";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute Info Text {
      label = "Information";
      // searchable = false;
   }
   attribute Data Text {
      label = "Technical Data";
      // searchable = false;
   }
   attribute Requirements2 Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No('TypeDesignation', TYPE_KEY_VALUE)";
      label = "Requirements";
      editable = [false];
   }
   attribute Documents2 Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('TypeDesignation',TYPE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }
   attribute Untitled Text {
      fetch = "Equipment_Object_API.Do_Exist(CONTRACT, MCH_CODE)";
      label = "(Untitled)";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute OperStatus Text {
      fetch = "Equipment_Serial_API.Activate_In_Operation(CONTRACT,MCH_CODE)";
      label = "Oper Status";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute OutOfOperation Text {
      fetch = "Equipment_Serial_API.Activate_Out_Of_Operation(CONTRACT,MCH_CODE)";
      label = "Out of Operation";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute Scrapped Text {
      fetch = "Equipment_Serial_API.Activate_Scrapped(CONTRACT,MCH_CODE)";
      label = "Scrapped";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute HasStructure Text {
      fetch = "Equipment_Object_API.Has_Structure(CONTRACT, MCH_CODE)";
   }
   attribute IsScrapped Text {

      fetch = "Equipment_Object_API.Is_Scrapped(CONTRACT, MCH_CODE)";
   }
   attribute ChildObjects Text {
      fetch = "Equipment_Object_API.Get_Child_Objects(MCH_CODE, CONTRACT)";
   }
   attribute FetchContract Text {
      fetch = "User_Default_API.Get_Contract";
   }
   attribute SerialNo Text {
      fetch = "serial_no";
   }
   attribute  InRep Text {
      fetch = "PART_SERIAL_CATALOG_API.Is_In_Repair_Workshop(PART_NO,SERIAL_NO)";
   }
   attribute PurchDate Date {
      label = "Purchase Date ";
   }

   attribute OperationalCondition Enumeration(SerialOperationalCond) {
      fetch = "OPERATIONAL_CONDITION_DB";
   }
   attribute SafeAccessCode Enumeration(SafeAccessCode) {
      label = "Safe Access";
      required = [true];
   }
   attribute SetNonOper Text {
      fetch = "Equipment_Serial_API.Activate_Set_Non_Operational(CONTRACT,MCH_CODE)";
      label = "Set Non Oper";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute AppliedPmProgramId Text {
      label = "PM Program ID";
      editable = [false];
   }
   attribute AppliedPmProgramRev Text {
      label = "PM Program Revision";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PCMSTD
   attribute AppliedPmProgramDescription Text {
      editable = [false];
      label = "Description";
      fetch = "Pm_Program_API.Get_Description(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
   }
   @DynamicComponentDependency PCMSTD
   attribute DateModified Date {
      fetch = "Pm_Program_API.Get_Date_Modified(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      editable = [false];
      label = "Date Modified";
   }
   @DynamicComponentDependency PCMSTD
   attribute Status Text {
      fetch = "Pm_Program_API.Get_Status(APPLIED_PM_PROGRAM_ID,APPLIED_PM_PROGRAM_REV)";
      label = "Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute AppliedDate Date {
      editable = [false];
   }
   attribute PmProgApplicationStatus Boolean("TRUE", "FALSE") {
      label = "N/A for PM Programs";
      editable = [false];
   }
   attribute NotApplicableReason Text {
      label = "N/A Set Reason";
      editable = [false];
   }
   attribute NotApplicableSetUser Text {
      label = "N/A Set By";
      editable = [false];
   }
   attribute NotApplicableSetDate Date {
      label = "N/A Set Date";
      editable = [false];
   }

   attribute SetOper Text {
      fetch = "Equipment_Serial_API.Activate_Set_Operational(CONTRACT,MCH_CODE)";
      label = "Set Oper";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute SupMchCodeSaved Text {
      fetch = "SUP_MCH_CODE";
      editable = [false];
   }
   attribute FuncObjectSeqSaved Text {
      fetch = "FUNCTIONAL_OBJECT_SEQ";
      editable = [false];
   }
   attribute Requirements Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Technical_Spec_No(LU_NAME, KEY_REF)";
      label = "Requirements";
      editable = [false];
   }
   attribute SpareParts Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_SPARE_API.Has_Spare_Part(CONTRACT, MCH_CODE)";
      label = "Spare Parts";
      editable = [false];
   }
   attribute Warranty Boolean("TRUE", "FALSE") {
      fetch = "substr(EQUIPMENT_OBJECT_API.Has_Any_Warranty(EQUIPMENT_OBJECT_SEQ),1,5)";
      label = "Warranty";
      editable = [false];
   }
   attribute Documents Boolean("TRUE", "FALSE") {
      fetch = "MAINTENANCE_DOCUMENT_REF_API.Exist_Obj_Reference('EquipmentObject',MCH_CODE_KEY_VALUE)";
      label = "Documents";
      editable = [false];
   }
   attribute Connections Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_CONN_API.Has_Connection(CONTRACT, MCH_CODE)";
      label = "Connections";
      editable = [false];
   }
   attribute TestPoints Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_TEST_PNT_API.Has_Test_Point(CONTRACT, MCH_CODE)";
      label = "Test Points";
      editable = [false];
   }
   attribute Parties Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_PARTY_API.Has_Party(CONTRACT, MCH_CODE)";
      label = "Parties";
      editable = [false];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "EQUIPMENT_OBJECT_API.Has_Notes(CONTRACT,MCH_CODE)";
      label = "Notes";
      editable = [false];
   }
   attribute ToolEquipment Boolean("TRUE", "FALSE") {
      fetch = "RESOURCE_TOOL_EQUIP_API.Has_Equipment(CONTRACT,MCH_CODE)";
      label = "Tool/Equipment";
      editable = [false];
   }
   attribute FetchCostCenter Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT, 'CostCenter')";
   }
   attribute CostCenterCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'CostCenter')";
   }
   attribute HideCostCenter Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT, 'CostCenter')";
   }
   attribute FetchObjectNo Text {
      fetch = "Equipment_Object_Api.Get_Code_Part(CONTRACT,'Object')";
   }
   attribute ObjectCodePart Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Part_For_Logical(COMPANY, 'Object')";
   }
   attribute HideObjectNo Text {
      fetch = "Equipment_Object_Api.Hide_Code_Part(CONTRACT,'Object')";
   }
//   attribute LocationId Text;
//   attribute PartNo Text;
//   attribute SerialNo Text;
//   attribute MchSerialNo Text {
//      fetch = "SERIAL_NO";
//
//   }

   @DynamicComponentDependency PCMSCI
   attribute ObjExist Text {
      fetch = "Psc_Contr_Product_Scope_API.Object_Exist_In_Srv_Line(MCH_CODE, CONTRACT)";
   }
   attribute OldMchType Text {
      fetch = "MCH_TYPE";
      insertable = [false];
      updatable = [false];
   }
   attribute OldSupMchCode Text {
      fetch = "SUP_MCH_CODE";
      insertable = [false];
      updatable = [false];
   }
   attribute RemoveRequirements Text {
      fetch = "NULL";
      updatable = [true];
      editable = [true];
   }
   attribute OldType Text {
      fetch = "TYPE";
      insertable = [false];
      updatable = [false];
   }
   attribute MchTypeHasTechReference Text {
      fetch = "EQUIPMENT_OBJ_TYPE_Api.Has_Technical_Spec_No(MCH_TYPE)";
      updatable = [false];
      insertable = [false];
   }
   attribute OldCostCenter Text {
      fetch = "COST_CENTER";
      insertable = [false];
      updatable = [false];
   }
   attribute ReturnInFacility Text {
      fetch = "Equipment_Serial_API.Is_InFacility(PART_NO, SERIAL_NO)";
   }
   attribute ReturnInFacilityOrWorkshop Text {
      fetch = "Equipment_Serial_API.Infacility_Or_Workshop(PART_NO, SERIAL_NO)";
   }
   attribute IsSerialTr Text {
      fetch = "PART_CATALOG_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
   }

   attribute CmStdId Text {
      fetch = "CM_CLASS_API.Get_Cm_Std_Id(PROCESS_CLASS_ID, ITEM_CLASS_ID)";
      insertable = [false];
      updatable = [false];
   }
   attribute ExistWarning Text {
      fetch = "Equipment_Object_API.Exist_Warning(CONTRACT, MCH_CODE)";
   }
   attribute LuName Text {
      fetch = "lu_name";
      insertable = [false];
      updatable = [false];
   }

   attribute SelectionParameters Enumeration(SelectionAttribTypeEnum) {
      fetch = "'Both'";
      insertable = [false];
      updatable = [false];
   }
   attribute TechnicalSpecNo Number {
      fetch = "Technical_Object_Reference_API.Get_Technical_Spec_No(lu_name, key_ref)";
      insertable = [false];
      updatable = [false];
   }
   attribute IsSerialTracked Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(PART_NO)";
   }
   attribute Objkey Text {
      fetch = "objkey";
   }
   attribute ClusterId Text;
   reference EquipmentObjTypeRef(MchType) to EquipmentObjType(MchType);
   reference EquipmentCriticalityRef(Criticality) to EquipmentCriticality(Criticality);
   reference ProcessClassRef(ProcessClassId) to ProcessClass(ProcessClassId);
   reference ItemClassRef(ItemClassId) to ItemClass(ItemClassId);
   reference LocationRef(LocationId) to Location(LocationId);
   reference LocationCardRef(LocationId) to EquipObjectLocationLov(LocationId);
   reference EquipmentObjGroupRef(GroupId) to EquipmentObjGroup(GroupId);
   reference EquipmentObjectRef(SupContract, SupMchCode) to EquipmentAllObjectPerf(Contract, MchCode) {
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference SiteRef(Contract) to Site(Contract);
   reference SupplierInfoRef(VendorNo) to SupplierInfo(SupplierId);
   reference CustomerInfoRef(Owner) to CustomerInfo(CustomerId);
   @DynamicComponentDependency PCMSTD
   reference PmProgramRef(AppliedPmProgramId, AppliedPmProgramRev) to PmProgram(PmProgramId, PmProgramRev);
   @DynamicComponentDependency WOPS
   reference DwpClusterIdRef(Contract, ClusterId) to WopsObjectCluster(ClusterSite, ClusterId) {
      label = "DWP Cluster ID";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Object Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference MchCodeRef(Contract, MchCode) to EquipmentSerialLov(Contract, MchCode) {
      label = "Object ID";
      copy EquipmentObjectSeq to EquipmentObjectSeq;
   }

   reference MchTypeRef(MchType) to EquipmentObjType(MchType) {
      label = "Object Type";
   }
   reference TypeRef(MchType, Type) to TypeDesignation(MchType, Type) {
      label = "Type Designation";
   }
   reference ProcessClassIdRef(ProcessClassId) to ProcessClass(ProcessClassId) {
      label = "Process Class";
   }
   reference ItemClassIdRef(ItemClassId) to ItemClass(ItemClassId) {
      label = "Item Class";
   }
   reference LocationIdRef(LocationId) to Location(LocationId) {
      label = "Location ID";
   }
   reference GroupIdRef(GroupId) to EquipmentObjGroup(GroupId) {
      label = "Group ID";
   }
   reference CriticalityRef(Criticality) to EquipmentCriticality(Criticality) {
      label = "Criticality";
   }
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentAllObjectUiv(Contract, MchCode) {
      label = "Belongs to Object ID";
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference SupMchCodePerfRef(SupContract, SupMchCode) to EquipmentObject(Contract, MchCode) {
      copy EquipmentObjectSeq to FunctionalObjectSeq;
   }
   reference CategoryIdRef(CategoryId) to EquipmentObjCategory(CategoryId) {
      label = "Category";
   }
   reference CostCenterRef(Company, CostCenter) to CodeB(Company, CodeB) {
      label = "Cost Center";
   }
   reference VendorNoRef(VendorNo) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
   reference PartManufacturerRef(PartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Manufacturer";
   }
   reference ManufacturerNoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId) {
      label = "Manufacturer";
   }
   reference ObjectNoRef(Company, ObjectNo) to AccountingCodepartE(Company, CodeE) {
      label = "Asset";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference OwnerRef(Owner) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Owner";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   //!TODO: Key definitions do not match, investigate and correct
   @DynamicComponentDependency PCMSTD
   reference AppliedPmProgramIdRef(AppliedPmProgramId) to PmProgram(PmProgramId) {
      label = "PM Program ID";
   }
   reference SupContractRef(SupContract) to UserAllowedSiteLov(Contract) {
      label = "Belongs to Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference CostCenterCodePartRef(Company, CostCenterCodePart, CostCenter) to AccountingCodePartValue(Company, CodePart, CodePartValue);
   reference ObjectCodePartRef(Company, ObjectCodePart, ObjectNo) to AccountingCodePartValue(Company, CodePart, CodePartValue);

   array EquipmentObjectPartyArray(EquipmentObjectSeq) to EquipmentObjectParty(EquipmentObjectSeq);
   array EquipmentObjectSparePartArray(EquipmentObjectSeq) to EquipmentObjectSpare(EquipmentObjectSeq);
   @DynamicComponentDependency OPPLAN
   array OperationalModeGroupsArray(EquipmentObjectSeq) to ObjectOperModeGroup(EquipmentObjectSeq);
   array TestPointsarray(EquipmentObjectSeq, LuName) to EquipmentObjectTestPnt(EquipmentObjectSeq, LuName);
   array TechnicalObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
   array TypeDesignationArray(Type) to TypeDesignation(Type);

   action SetLocationStructure {
      ludependencies = EquipmentSerial;
      parameter LocationId Text;
   }

   action ResetLocationStructure {
      ludependencies = EquipmentSerial;
   }

   action SetInOperation {
      ludependencies = EquipmentSerial;
   }

   action SetOutOfOperation {
      ludependencies = EquipmentSerial;
   }

   action SetScrapped {
      ludependencies = EquipmentSerial;
   }

   action SetStructureInOperation {
      ludependencies = EquipmentSerial;
      supportwarnings = [true];
   }

   action SetStructureOutOfOperation {
      ludependencies = EquipmentSerial;
   }

   action SetStructureScrapped {
      ludependencies = EquipmentSerial;
   }

   action SetInOperative {
      ludependencies = EquipmentSerial;
   }

   action SetNonOperative {
      ludependencies = EquipmentSerial;
   }
   action SetStructureOperational {
      ludependencies = EquipmentSerial;
   }

   action SetStructureNonOperational {
      ludependencies = EquipmentSerial;
   }


   action SpreadSafeAccessCode {
   }
}

@Override
@DynamicComponentDependency OPPLAN
entity ObjectOperModeGroup {
   crud = Read, Create, Delete;
   keys = EquipmentObjectSeq, OperModeGroupId {
      where = "EQUIPMENT_OBJECT_SEQ = :EquipmentObjectSeq  AND OPER_MODE_GROUP_ID = :OperModeGroupId";
   }
   attribute Inherited Boolean("TRUE", "FALSE") {
      label = "Inherited from Parent";
      editable = [false];
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
   array OperationalModesArray() to OperModeGroupConnect() {
      where = "(:child.OperModeGroupId IN (select oper_mode_group_id FROM OBJECT_OPER_MODE_GROUP a WHERE a.equipment_object_seq = :parent.EquipmentObjectSeq))";
   }
}

@Override
@DynamicComponentDependency OPPLAN
entity OperModeGroupConnect {
   crud = Read;
   ludependencies = ObjectOperModeGroup;

   keys = OperModeId, OperModeGroupId;
   attribute OperModeGroupId Text {
      editable = [false];
   }
   reference OperModeIdRef(OperModeId) to OperationalMode(OperModeId) {
      label = "Operational Mode";
   }
   reference OperModeGroupIdRef(OperModeGroupId) to OperationalModeGroup(OperModeGroupId) {
      label = "Operational Mode Group";
   }
}

@Override
entity TypeDesignation {
   crud = Read;
   from = "type_designation";
   exec = "TYPE_DESIGNATION_API";
   keys = Type {
      where = "TYPE = :Type";
   }
   supportwarnings = [true];
   use attributes = Description, KeyRef, LuName;
   attribute Type Text {
      fetch = "type";
      label = "Type Designation";
      maxlength = 100;
      required = [true];
      editable = [false];
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 60;
      editable = [false];
   }
   attribute MchType Text {
      fetch = "mch_type";
      label = "Object Type";
      maxlength = 20;
      editable = [false];
   }
   attribute KeyRef Text {
      fetch = "key_ref";
      label = "Key Ref";
      maxlength = 600;
      editable = [false];
   }
   attribute LuName Text {
      fetch = "lu_name";
      label = "LU Name";
      maxlength = 30;
      editable = [false];
   }
   attribute TechnicalSpecNo Number {
      fetch = "Technical_Object_Reference_API.Get_Technical_Spec_No(lu_name, key_ref)";
      insertable = [false];
      updatable = [false];
   }
   array TypeDesObjectReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

//@Override
//query EquipmentAllObjectUiv {
//   attribute HasStructure Enumeration(TranslateBoolean) {
//      lovcolumn = [false];
//      fetch = "has_structure";
//   }
//   attribute HasConnection Enumeration(TranslateBoolean) {
//      lovcolumn = [false];
//      fetch = "has_connection";
//   }
//
//   attribute EquipmentMainPosition Enumeration(EquipmentMainPosition) {
//      lovcolumn = [true];
//      fetch = "equipment_main_position";
//   }
//}

---------------------------------- ACTIONS ----------------------------------

action ValidateSupMchCode  Structure(ValidateSupMchCodeReturn) {
   initialcheck UserAllowedSite(SupContract);
   parameter SupContract Text;
   parameter SupMchCode Text;
}

structure ValidateSupMchCodeReturn {
   attribute CostCenter Text;
   attribute MchLoc Text;
   attribute MchPos Text;
   attribute ObjectNo Text;
   attribute LocationId Text;

}



--------------------------------- FUNCTIONS ---------------------------------
function GetContractDescription Text {
   parameter Contract Text;
}
function GetManufacturerDescription Text {
   parameter ManufacturerNo Text;
}
function  GetObjectImage Stream {
   parameter Contract Text;
   parameter MchCode Text;
}
function GetPartNos List<Entity(PartCatalog)> {
   where = "PART_NO NOT IN (SELECT PART_NO
                         FROM PURCHASE_PART
                        WHERE EXTERNAL_RESOURCE_DB = 'TRUE')";
}
function GetSupMchCode List<Entity(EquipmentAllObjectUiv)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function GetTypeDesignations List<Entity(TypeDesignation)> {
   parameter MchType Text;
   where = "mch_type LIKE nvl(:MchType,mch_type) ";
}
function HasMchTypeTechSpec Text {
   parameter MchType Text;
}
function GetExistWarning Text {
   parameter Contract Text;
   parameter MchCode Text;
}
function InFacilityOrRepairWorkshop Boolean {
   parameter PartNo Text;
   parameter SerialNo Text;
}
function GetMchDescription Text {
   parameter PartNo Text;
}
function GetCompany Text {
   parameter Contract Text;
}
function GetMchType Text {
   parameter Type Text;
}
function GetItemClassId Text {
   parameter MchCode Text;
   parameter Contract Text;
   parameter MchType Text;
}
function GetLogicalCodePartValues Structure(LogicalCodePartValues) {
   parameter Contract Text;
}
function GetOldData Structure(GetOldInfo) {
   parameter Contract Text;
   parameter MchCode Text;
}

structure TypeDesValues {
   attribute MchType Text;
   attribute ItemClass Text;
}
function GetTypeDesignationValues Structure(TypeDesValues) {
   parameter Type Text;
}
function PartManufactureFilter List<Entity(PartManufacturer)> {
   parameter PartNo Text;
   where = "PART_NO = :PartNo";
}
//function GetSerialTracked Text {
//   parameter PartNo Text;
//}
function GetCostCenterAcc List<Entity(Account)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeB List<Entity(CodeB)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeC List<Entity(CodeC)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeD List<Entity(CodeD)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeE List<Entity(CodeE)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeF List<Entity(CodeF)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeG List<Entity(CodeG)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeH List<Entity(CodeH)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeI List<Entity(CodeI)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetCostCenterCodeJ List<Entity(CodeJ)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
function GetActiveMchType List<Entity(EquipmentObjType)> {
   where = " OBJSTATE = 'Active'";
}
function GetIsSerialTr Text {
   parameter PartNo Text;
}
function InOperativeWarning Text {
   parameter Contract Text;
   parameter MchCode Text;
}
function GetDefContract Text {
}
-------------------------------- STRUCTURES ---------------------------------
structure LogicalCodePartValues {
   attribute FetchCostCenter Text;
   attribute CostCenterCodePart  Text;
   attribute HideCostCenter   Text;
   attribute FetchObjectNo  Text;
   attribute ObjectCodePart   Text;
   attribute HideObjectNo    Text;
}
structure GetOldInfo {
   attribute MchType Text;
   attribute Type Text;
   attribute CostCenter Text;
   attribute SupMchCode Text;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

