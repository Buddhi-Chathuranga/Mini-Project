------------------------------------------------------------------------------------
-- Date        Sign     History
-- --------    ------   ------------------------------------------------------------
-- 20190320    HMANLK   SAUXXW4-1255, Created.
--
------------------------------------------------------------------------------------
fragment EquipmentObjectCustInfo;
component EQUIP;
layer Core;
description "Put some useful description here ...";
include fragment CompanyHavingSiteLov;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment UserAllowedSiteLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------


----------------------------- VISUAL COMPONENTS -----------------------------

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ObjectInformationCommand for EquipmentObjectParty {
   icon = "popup";
   style = IconOnly;
   mode = SelectedRecords;
   execute {
      if [ObjLevel = null] {
         navigate "/page/SerialObject/Form?$filter=Contract eq $[MchCodeContract] and MchCode eq $[MchCode]";
      }
      else {
         navigate "page/FunctionalObject/Form?$filter=Contract eq $[MchCodeContract] and MchCode eq $[MchCode]";
      }
   }
}
@DynamicComponentDependency PCMSCI
command ServiceContractInformationCommand for PscContrProduct {
   icon = "chevron-right";
   style = IconOnly;
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "tree/ServiceContract/ServiceContractTree?$filter=ContractId eq $[ContractId]";
   }
}

command ConnectBusinessObjectCommand for EquipmentObjectParty {
   label = "Connect";
   enabled = [searchcontext.CaseSearchContext.CaseId != ""];
   variable CaseLocalIdVar;
   execute {
      messagebox("QUESTION", question, "Selected Equipment object will be added on to business objects tab of the connected case. Do you want to continue?") {
         when YES {
            call ConnectBusinessObject(searchcontext.CaseSearchContext.CaseId, MchCode, MchCodeContract, MchType) into CaseLocalIdVar {
               when SUCCESS {
                  success("Equipment object successfully connect to case ${CaseLocalIdVar}.");

               }
               when FAIL {
                  error("${error.Message}");
               }
            }
         }
         when NO {
            exit CANCEL;
         }
      }
   }
}
@DynamicComponentDependency PCMSCI
command ConnectServiceContractCommand for PscContrProduct {
   label = "Connect";
   enabled = [searchcontext.CaseSearchContext.CaseId != ""];
   variable CaseLocalIdVar;
   execute {
      messagebox("QUESTION", question, "Selected Service contract will be added on to business objects tab of the connected case. Do you want to continue?") {
         when YES {
            call ConnectServiceContract(searchcontext.CaseSearchContext.CaseId, ContractId, LineNo) into CaseLocalIdVar {
               when SUCCESS {
                  success("Service Contract successfully connect to case ${CaseLocalIdVar}.");

               }
               when FAIL {
                  error("${error.Message}");
               }
            }
         }
         when NO {
            exit CANCEL;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
selector EquipmentObjectLovSelector for EquipmentObject {
   static MchCode;
   static MchName;
}
@DynamicComponentDependency SRVCON
selector ServiceContractLovSelector for ScServiceContract {
   static ContractId;
   static ContractName;
}
@DynamicComponentDependency PCMSCI
selector WorkTypeLovSelector for WorkType {
   static WorkTypeId;
   static Description;
}

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------
list EquipmentObjectPartyList for EquipmentObjectParty {
   label = "Equipment Objects";
   lov MchCodeRef with EquipmentObjectLovSelector {
      label = "Object";
      description = MchName;
   }
   lov MchCodeContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      label = "Site";
      description = MchCodeContractRef.ContractDesc;
   }
   lov SupMchCodeRef with EquipmentObjectLovSelector {
      size = Small;
      description = SupMchCodeRef.MchName;
      search = MchCode, MchName;
   }
   lov SupContractRef with CompanyHavingSiteSelector {
      size = Small;
      description = SupContractRef.CompanyName;
      search = Company, CompanyName;
   }
   field MchType {
      size = Small;
   }
   field Address1 {
      size = Small;
   }
   field Address2 {
      size = Small;
   }
   field Address3 {
      size = Small;
      columnvisible = [false];
   }
   field Address4 {
      size = Small;
      columnvisible = [false];
   }
   field Address5 {
      size = Small;
      columnvisible = [false];
   }
   field Address6 {
      size = Small;
      columnvisible = [false];
   }
   field ZipCode {
      size = Small;
   }
   field City {
      size = Small;
   }
   field State {
      size = Small;
      label = "Address 5";
      columnvisible = [false];
   }
   field County {
      size = Small;
   }
   field CountryRef {
      size = Small;
      columnvisible = [false];
   }
   field CountryCode {
      size = Small;
   }
   field PrimaryAddress {
      size = Small;
   }
   lov CompanyRef with CompanyHavingSiteSelector {
      size = Small;
      description = CompanyRef.CompanyName;
      search = Company, CompanyName;
   }
   badge OperationalStatus {
      size = Small;
      style = TextOnly;
      emphasis StatePlanned = [OperationalStatusDb = "PLANNED_FOR_OP"];
      emphasis StateStopped = [OperationalStatusDb = "OUT_OF_OPERATION"];
      emphasis StateObsolete = [OperationalStatusDb = "SCRAPPED"];
      emphasis Complementary9 = [OperationalStatusDb = "IN_OPERATION"];
      emphasis Off = [OperationalStatusDb = "NOT_APPLICABLE"];
      emphasis StatePreliminary = [OperationalStatusDb = "DESIGNED"];
      emphasis StateChanged = [OperationalStatusDb = "RENAMED"];
   }

   commandgroup CommandGroupCmdGroup {
      command ObjectInformationCommand;
   }
   command ConnectBusinessObjectCommand;

}
@DynamicComponentDependency PCMSCI
list SrvConLinesList for PscContrProduct {
   label = "Service Contracts";
   @DynamicComponentDependency SRVCON
   lov ContractIdRef with ServiceContractLovSelector {
      label = "Contract";
      description = ContractName;
      search = ContractId, ContractName;
   }

   field LineNo {
      size = Small;
   }
   field Description;
   @DynamicComponentDependency SRVCON
   field ContractIdRef.ContractType {
      label = "Contract Type";
   }
   field PscDateFrom {
      format = longtime;
   }
   field PscExpDate {
      format = longtime;
   }
   lov WorkTypeIdRef with WorkTypeLovSelector {
      label = "Work Type";
      search = WorkTypeId, Description;
   }
   command ConnectServiceContractCommand;
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset EquipmentObjectPartySet for EquipmentObjectParty;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity EquipmentObjectParty {
   crud = Read;
   from = "customer_object_addr_lov1";
   keys = Identity, MchCode, AddressId;
   attribute Identity Text {
      editable = [false];
   }
   attribute MchCode Text {
      editable = [false];
      label = "Object ID";
   }
   attribute MchName Text {
      fetch = "mch_name";
      label = "Object Description";
      editable = [false];
   }
   attribute MchCodeContract Text {
      fetch = "mch_code_contract";
      label = "Site";
      editable = [false];
   }
   attribute SupMchCode Text {
      fetch = "sup_mch_code";
      label = "Belongs To";
      format = uppercase;
   }
   attribute SupContract Text {
      fetch = "sup_contract";
      label = "Belongs To Site";
      format = uppercase;
   }
   attribute MchType Text {
      fetch = "mch_type";
      label = "Object Type";
      editable = [false];
      format = uppercase;
   }
   attribute AddressId Text {
      fetch = "NVL(address_id,' ')";
      label = "Address ID";
      editable = [false];
   }
   attribute Address1 Text {
      fetch = "address1";
      label = "Address 1";
      editable = [false];
   }
   attribute Address2 Text {
      fetch = "address2";
      label = "Address 2";
      editable = [false];
   }
   attribute Address3 Text {
      fetch = "address3";
      label = "Address8";
      editable = [false];
   }
   attribute Address4 Text {
      fetch = "address4";
      label = "Address9";
      editable = [false];
   }
   attribute Address5 Text {
      fetch = "address5";
      label = "Address10";
      editable = [false];
   }
   attribute Address6 Text {
      fetch = "address6";
      label = "Address11";
      editable = [false];
   }
   attribute ZipCode Text {
      fetch = "zip_code";
      label = "Address 3";
      editable = [false];
   }
   attribute City Text {
      fetch = "city";
      label = "Address 4";
      maxlength = 35;
      editable = [false];
   }
   attribute County Text {
      fetch = "county";
      label = "County";
      editable = [false];
   }
   attribute Country Text {
      fetch = "country";
      label = "Address 6";
      maxlength = 35;
   }
   attribute State Text {
      fetch = "State";
      label = "Address 5";
   }
   attribute CountryCode Text {
      fetch = "country_code";
      label = "Country Code";
      editable = [false];
      format = uppercase;
   }
   attribute PrimaryAddress Text {
      fetch = "primary_address";
      label = "Primary Address";
      editable = [false];
   }
   attribute ObjLevel Text {
      fetch = "obj_level";
      label = "Object Level";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(mch_code_contract)";
   }
   attribute OperationalStatus Text {
      fetch = "operational_status";
   }
   attribute OperationalStatusDb Text {
      fetch = "operational_status_db";
   }
   reference MchCodeRef(MchCode) to EquipmentObject(MchCode) {
      label = "Object";
   }
   reference MchCodeContractRef(MchCodeContract) to UserAllowedSiteLov(Contract);
   reference SupMchCodeRef(SupContract, SupMchCode) to EquipmentObject(Contract, MchCode) {
      label = "Belongs To";
   }
   reference SupContractRef(SupContract) to CompanyHavingSite(Company) {
      label = "Belongs To Site";
   }
   reference CountryRef(Country) to IsoCountry(CountryCode) {
      label = "Address 6";
   }
   reference CompanyRef(Company) to CompanyHavingSite(Company) {
      label = "Company";
   }

   @DynamicComponentDependency PCMSCI
   array PscContrProductArray(MchCode, Contract)  to PscContrProduct(MchCode, MchContract);
}

@Override
@DynamicComponentDependency PCMSCI
entity PscContrProduct {
   crud = Read;
   from = "psc_contr_product_obj_user";
   attribute PscDateFrom Timestamp {
      fetch = "psc_date_from";
      label = "Date From";
      editable = [false];
   }
   attribute MchCode Text {
      label = "Mch Code";
   }
   attribute MchContract Text {
      label = "Mch Contract";
   }
   attribute PscExpDate Timestamp {
      fetch = "psc_exp_date";
      label = "Expiry Date";
      editable = [false];
   }
   attribute WorkTypeId Text {
      label = "Work Type";
      required = [true];
   }
   @DynamicComponentDependency SRVCON
   reference ContractIdRef(ContractId) to ScServiceContract(ContractId) {
      label = "Contract ID";
   }
   reference WorkTypeIdRef(WorkTypeId) to WorkType(WorkTypeId) {
      label = "Work Type";
   }

}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action ConnectBusinessObject Text {
   initialcheck UserAllowedSite(MchContract);
   parameter CaseId Text;
   parameter MchCode Text;
   parameter MchContract Text;
   parameter MchType Text;
}

action ConnectServiceContract Text {
   initialcheck implementation;
   parameter CaseId Text;
   parameter ContractId Text;
   parameter LineNo Number;
}
