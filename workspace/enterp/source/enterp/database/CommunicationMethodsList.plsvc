-----------------------------------------------------------------------------
--
--  Fragment:     CommunicationMethodsList
--  Component:    ENTERP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181023  thjilk  Created.
-----------------------------------------------------------------------------

layer Core;

@ApproveGlobalVariable 
comm_methods_attr_   VARCHAR2(32000);
@ApproveGlobalVariable 
glb_party_type_db_   VARCHAR2(200);
@ApproveGlobalVariable 
glb_identity_        VARCHAR2(200);
@ApproveGlobalVariable 
no_def_method_       VARCHAR2(200);
@ApproveGlobalVariable 
no_def_method_addr_  VARCHAR2(200);

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Comm_Method_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
   rec_           comm_method%ROWTYPE;
   modified_rec_  Comm_Method_Rec;
   exist_         VARCHAR2(5);
   valid_from_    DATE;
   valid_to_      DATE;
   method_id_db_  VARCHAR2(100);
   ap_ar_info_    VARCHAR2(200);
   CURSOR Get (party_type_ VARCHAR2, identity_ VARCHAR2, comm_id_ VARCHAR2) IS
      SELECT * 
      FROM   comm_method
      WHERE  identity = identity_
      AND    comm_id = comm_id_
      AND    party_type_db = party_type_;
BEGIN
   exist_        := Comm_Method_API.Comm_Id_Exist(key_.identity, Party_Type_API.Decode(key_.party_type), key_.comm_id);
   valid_from_   := Client_SYS.Get_Item_Value_To_Date('VALID_FROM', attr_, lu_name_);
   valid_to_     := Client_SYS.Get_Item_Value_To_Date('VALID_TO', attr_, lu_name_);
   method_id_db_ := Client_SYS.Get_Item_Value('METHOD_ID_DB', attr_);
   IF (exist_ = 'TRUE') THEN
      IF (key_.party_type = Party_Type_API.DB_SUPPLIER) THEN
         ap_ar_info_ := Language_SYS.Translate_Constant(lu_name_, 'INFOINMSG1: AP supplier');
      ELSIF (key_.party_type = Party_Type_API.DB_CUSTOMER) THEN
         ap_ar_info_ := Language_SYS.Translate_Constant(lu_name_, 'INFOINMSG2: AR customer');
      END IF;
      IF (method_id_db_ IS NOT NULL) THEN
         Error_SYS.Record_General(lu_name_, 'COMMETHODINPAYLED: It is not possible to change the communication method because it is connected to an :P1 contact entered in the Payment Information.', ap_ar_info_);
      END IF;
      IF ((valid_from_ IS NOT NULL) OR (valid_to_ IS NOT NULL)) THEN
         Client_SYS.Add_Warning(lu_name_, 'COMMIDINPAYLED: Comm ID :P1 is connected to an :P2 contact entered in the Payment Information.', key_.comm_id, ap_ar_info_);
      END IF;
   END IF;
   Add_To_Rec_From_Attr___(attr_, modified_rec_);   
   OPEN Get(key_.party_type, key_.identity, key_.comm_id);
   FETCH Get INTO rec_;
   CLOSE Get;  
   super(etag_, key_, attr_, info_, action_);
   glb_party_type_db_   := key_.party_type;
   glb_identity_        := key_.identity;
   comm_methods_attr_   := Get_Modified_Attr___(rec_, modified_rec_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Comm_Method_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
   rec_      comm_method%ROWTYPE;
   new_rec_  Comm_Method_Rec;
BEGIN
   Add_To_Rec_From_Attr___(attr_, new_rec_); 
   glb_identity_      := Client_SYS.Get_Item_Value('IDENTITY', attr_);
   super(etag_, key_, attr_, info_, action_);
   glb_party_type_db_ := key_.party_type;
   rec_.objid         := Comm_Method_API.Get_Objid_From_Etag__(etag_);
   comm_methods_attr_ := Get_Modified_Attr___(rec_, new_rec_);
END CRUD_Create___;


PROCEDURE Check_Default_Comm_Method___ (
   init_  IN  BOOLEAN,
   info$_ OUT VARCHAR2 ) 
IS
   method_id_              VARCHAR2(200);
   address_id_             VARCHAR2(200);
   method_count_           NUMBER := 0;
   method_count_per_addr_  NUMBER := 0;
   valid_from_             DATE;
   valid_to_               DATE;
   CURSOR Get_Method_Count(party_type_db_ VARCHAR2, identity_ VARCHAR2, method_id_ VARCHAR2, valid_from_ DATE, valid_to_ DATE) IS
      SELECT COUNT(*) 
      FROM   comm_method
      WHERE  identity    = identity_
      AND    party_type_db = party_type_db_
      AND    method_id     = method_id_
      AND    (NVL(valid_from_, Database_SYS.Get_First_Calendar_Date()) <= NVL(valid_to,   Database_SYS.Get_Last_Calendar_Date()) 
      AND    NVL(valid_to_,   Database_SYS.Get_Last_Calendar_Date())  >= NVL(valid_from, Database_SYS.Get_First_Calendar_Date()));
   CURSOR Get_Addr_Method_Count(party_type_db_ VARCHAR2, identity_ VARCHAR2, method_id_ VARCHAR2, address_id_ VARCHAR2, valid_from_ DATE, valid_to_ DATE) IS
      SELECT COUNT(*) 
      FROM   comm_method
      WHERE  identity    = identity_
      AND    party_type_db = party_type_db_
      AND    method_id     = method_id_
      AND    address_id    = address_id_
      AND    (NVL(valid_from_, Database_SYS.Get_First_Calendar_Date()) <= NVL(valid_to,   Database_SYS.Get_Last_Calendar_Date()) 
      AND    NVL(valid_to_,   Database_SYS.Get_Last_Calendar_Date())  >= NVL(valid_from, Database_SYS.Get_First_Calendar_Date()));
BEGIN
   IF (init_) THEN
      no_def_method_       := NULL;
      no_def_method_addr_  := NULL;
      comm_methods_attr_   := NULL;
      glb_party_type_db_   := NULL;
      glb_identity_        := NULL;
   ELSE 
      method_id_  := Client_SYS.Get_Item_Value('METHOD_ID', comm_methods_attr_);
      address_id_ := Client_SYS.Get_Item_Value('ADDRESS_ID', comm_methods_attr_);
      valid_from_ := Client_SYS.Get_Item_Value_To_Date('VALID_FROM', comm_methods_attr_, lu_name_);
      valid_to_   := Client_SYS.Get_Item_Value_To_Date('VALID_TO', comm_methods_attr_, lu_name_);
      OPEN Get_Method_Count(glb_party_type_db_, glb_identity_, method_id_, valid_from_, valid_to_);
      FETCH Get_Method_Count INTO method_count_;
      CLOSE Get_Method_Count;
      OPEN Get_Addr_Method_Count(glb_party_type_db_, glb_identity_, method_id_, address_id_, valid_from_, valid_to_);
      FETCH Get_Addr_Method_Count INTO method_count_per_addr_;
      CLOSE Get_Addr_Method_Count;
      IF (comm_methods_attr_ IS NOT NULL) THEN
         Comm_Method_API.Check_Default(no_def_method_, no_def_method_addr_, comm_methods_attr_, glb_party_type_db_, glb_identity_);
         IF (method_count_ > 1) THEN
            IF (no_def_method_ IS NOT NULL) THEN
               Client_SYS.Add_Warning(lu_name_, 'NODEFEXIST: There are more than one row for communication method :P1, but no Default per Method selected.', method_id_);
            END IF;
            IF ((method_count_per_addr_ > 1) AND (no_def_method_addr_ IS NOT NULL)) THEN
               Client_SYS.Add_Warning(lu_name_, 'NODEFADDEXIST: There are more than one row for communication method :P1 and address ID :P2, but no Default per Method and Address selected.', method_id_, address_id_);
            END IF;
         END IF;
      END IF;
      info$_ := Client_SYS.Get_All_Info();
   END IF;
END Check_Default_Comm_Method___;


FUNCTION Get_Modified_Attr___ (
   old_rec_       IN comm_method%ROWTYPE,
   modified_rec_  IN Comm_Method_Rec ) RETURN VARCHAR2
IS
   attr_          VARCHAR2(32000);  
   prev_addr_id_  VARCHAR2(200);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Set_Item_Value('ROW_ID', old_rec_.objid, attr_);
   IF (modified_rec_.method_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('METHOD_ID', Comm_Method_Code_API.Decode(modified_rec_.method_id), attr_);
   ELSE
      Client_SYS.Set_Item_Value('METHOD_ID', old_rec_.method_id, attr_);
   END IF;
   IF (modified_rec_.address_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('ADDRESS_ID', modified_rec_.address_id, attr_);
      IF (old_rec_.address_id IS NULL) THEN
         prev_addr_id_ := modified_rec_.address_id;
      END IF;
   ELSE
      prev_addr_id_ := old_rec_.address_id;
      Client_SYS.Set_Item_Value('ADDRESS_ID', old_rec_.address_id, attr_);
   END IF;
   Client_SYS.Set_Item_Value('PREV_ADDRESS_ID', prev_addr_id_, attr_);
   IF (modified_rec_.method_default IS NOT NULL) THEN
      IF (modified_rec_.method_default) THEN
         Client_SYS.Set_Item_Value('METHOD_DEFAULT', 'TRUE', attr_);
      ELSE
         Client_SYS.Set_Item_Value('METHOD_DEFAULT', 'FALSE', attr_);
      END IF;  
   ELSE
      Client_SYS.Set_Item_Value('METHOD_DEFAULT', old_rec_.method_default, attr_);
   END IF;
   IF (modified_rec_.address_default IS NOT NULL) THEN
      IF (modified_rec_.address_default) THEN
         Client_SYS.Set_Item_Value('ADDRESS_DEFAULT', 'TRUE', attr_);
      ELSE
         Client_SYS.Set_Item_Value('ADDRESS_DEFAULT', 'FALSE', attr_);
      END IF; 
   ELSE
      Client_SYS.Set_Item_Value('ADDRESS_DEFAULT', old_rec_.address_default, attr_);
   END IF;
   IF (modified_rec_.valid_from IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('VALID_FROM', TO_CHAR(modified_rec_.valid_from, 'YYYY-MM-DD-HH.MI.SS'), attr_);
   ELSE
      IF (old_rec_.valid_from IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('VALID_FROM', TO_CHAR(old_rec_.valid_from, 'YYYY-MM-DD-HH.MI.SS'), attr_);
      ELSE
         Client_SYS.Set_Item_Value('VALID_FROM', TO_CHAR(TRUNC(SYSDATE), 'YYYY-MM-DD-HH.MI.SS'), attr_);
      END IF;
   END IF;
   IF (modified_rec_.valid_to IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('VALID_TO', TO_CHAR(modified_rec_.valid_to, 'YYYY-MM-DD-HH.MI.SS'), attr_);
   ELSE
      IF (old_rec_.valid_to IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('VALID_TO', TO_CHAR(old_rec_.valid_to, 'YYYY-MM-DD-HH.MI.SS'), attr_);
      ELSE
         Client_SYS.Set_Item_Value('VALID_TO', TO_CHAR(TRUNC(SYSDATE), 'YYYY-MM-DD-HH.MI.SS'), attr_);
      END IF;
   END IF;
   Client_SYS.Set_Item_Value('END_MODIFY', 'NULL', attr_);
   RETURN attr_;
END Get_Modified_Attr___;

