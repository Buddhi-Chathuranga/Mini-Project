-----------------------------------------------------------------------------
--
--  Filename      : CreateCompanyRegENTERP.ins
--
--  Module        : ENTERP
--
--  Purpose       : Registers Create Company related data for ENTERP
--                  
--  Localization  : NOT Needed!
--
--  Date     Sign   History
--  ------   ----   -----------------------------------------------------------
--  010406   LiSv   Created
--  020125   ovjose Added CompanyLu and CompanyLuTranslation and changed version to 1.6.0
--  020214   LaLi   Modified
--  021112   StDa   Modified, GLOB06-Move Company Template Translations.
--  021114   ovjose Glob06. Change calls to use Enterp_Comp_Connect_V170_API. Added remove table info.
--  021115   hecolk IID ITFI135N. Added LU 'ValidationPerCompany'.
--  021216   mgutse Bug 92332. IID ITFI128E. Added LU 'Branch'.
--  030127   ovjose Changed version to 1.7.0
--  061205   Samwlk Define Company Template PL as a System Template.
--  070914   Samwlk Define Company Template Persian as a System Template. 
--  100506   Jobase EAFH-2932, Removed COMP_MSG_SETUP_DIST_INST_TAB.
--  110318   Kagalk RAVEN-1074, Removed references to obsolete LU ValidationPerCompany
--  110808   AsHelk Changed Version to 2.0.0 
--  110819   AsHelk Introduced new Std system Template STD-UK. 
--  140625   Shdilk Changed version to 2.1.0
--  160830   kumglk Added missing tables to Enterp_Comp_Connect_V170_API.Reg_Add_Table and Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail  
--  200923   supwlk FISPRING20-7470, Changed version to 20.1.0
--  201117   prKalk Added CompanyLocalizationInfo
--  201123   supwlk FISPRING20-8337, Changed version to 21.1.0
--  211014   Jratlk Introduced new company Template STD-SK.
--  211123   Jratlk Introduced new company Template STD-CZ.
-----------------------------------------------------------------------------
SET SERVEROUT ON

DEFINE MODULE = 'ENTERP'

--
-- This section defines the component as a Create Company component
--
-- Arguments:
-- No1:  Component. Identity of the component in upper case
-- No2:  Version. The components version
-- No3:  Parent Component. Identity of the parent component in upper case
-- No4:  Active. (String TRUE/FALSE). TRUE means that the component will be called during create company process.
PROMPT Inserting default data to Create_Company_Reg_Tab
BEGIN
   Enterp_Comp_Connect_V170_API.Reg_Add_Component('&MODULE', '22.1.0', NULL, 'TRUE');
END;
/
COMMIT;

--
-- This section deletes data from Remove_Company_Tab and Remove_Company_Detail_Tab
--
-- Arguments:
-- No1:  Component. Identity of the component in upper case
-- No2:  Remove standard only. (String TRUE/FALSE). TRUE used within RD release
PROMPT Delete data from Remove_Company_Tab
BEGIN
   Enterp_Comp_Connect_V170_API.Delete_Remove_Company_Info('&MODULE', TRUE);
END;
/    
COMMIT;

--
-- This section defines Create Company detail data for the Component and its Logical Units stored in
-- crecomp_component_lu_tab.
-- At the same time (when calling Xxx_API.Create_Company_Reg__) it defines the table, owned by the LU, 
-- that should be used when removing a company (stored in Remove_Company_Tab and Remove_Company_Detail_Tab).
--
-- Arguments for Xxx_API.Create_Company_Reg__:
-- No1:  Execution Order (IN/OUT NUMBER) 
-- No2:  Create and Export. (String TRUE/FALSE Default TRUE).
--       This parameter is used to define if the template should 
--       be created when creating a template and exported when exporting the template. 
-- No3:  Active. (String TRUE/FALSE Default TRUE). If the LU should be active (used) when creating a company
-- No4:  Account Related Lu. (String TRUE/FALSE Default FALSE). An account related LU is a LU that stores and handles data 
--       related to the accounting code string
-- No5:  Standard table (TRUE when released from RD Default TRUE)
--
--
-- Note: In the end Create Company detail data for Posting Control Logical Units which are handled in a special way are defined. 
--
-- Arguments for Posting_Ctrl_Crecomp_API.Comp_Reg_Xxx_Gen__ (where Xxx is the different Posting Ctrl levels):
-- No1:  Execution Order (IN/OUT NUMBER)
-- No2:  Component. Identity of the component in upper case
-- No3:  Logical Unit. The identity of the logical unit
-- No4:  Package. The identity of database package for the logical unit.
-- No5:  Create and Export. (String TRUE/FALSE Default TRUE).
--       This parameter is used to define if the template should 
--       be created when creating a template and exported when exporting the template. 
-- No6:  Active. (String TRUE/FALSE Default TRUE). If the LU should be active (used) when creating a company
PROMPT Inserting default meta data to Create Company Tables
DECLARE
   execution_order_ NUMBER := 1; 
BEGIN
  Create_Company_API.Create_Company_Reg__(execution_order_); 
  Branch_API.Create_Company_Reg__(execution_order_);
END;
/
COMMIT;

--
-- The following two sections defines tables in the component that should be used when removing a company. 
-- This is done in this section if the table is not a part of the Create Company concept. 
-- If it is a part of the Create Company concept the tables are registered already in the above section
-- when calling Xxx_API.Create_Company_Reg__ method.
--
-- Arguments:
-- No1:  Component. Identity of the component in upper case
-- No2:  Table name, name of the table containing company data
-- No3:  Standard table (TRUE when released from RD)
PROMPT Inserting default data to Remove_Company_Tab
BEGIN
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANIES_PER_GROUP_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANY_ADDRESS_TAB','TRUE');  
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANY_ADDRESS_TYPE_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANY_DELIVERY_TAX_EXEMP_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANY_EMP_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANY_LOCALIZATION_INFO_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANY_MSG_SETUP_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','COMPANY_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','CREATE_COMPANY_LOG_IMP_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','CREATE_COMPANY_LOG_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','CUSTOMER_INFO_OUR_ID_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','CUSTOMS_INFO_OUR_ID_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','FORWARDER_INFO_OUR_ID_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','KEY_LU_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','KEY_LU_ATTRIBUTE_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','KEY_LU_TRANSLATION_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','KEY_MASTER_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','MANUFACTURER_INFO_OUR_ID_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','OWNER_INFO_OUR_ID_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','PERSON_COMPANY_ACCESS_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','SUPPLIER_INFO_OUR_ID_TAB','TRUE');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table('&MODULE','USER_PRIV_REMOVE_COMPANY_TAB','TRUE');
END;
/
COMMIT;

-- Arguments:
-- No1:  Component. Identity of the component in upper case
-- No2:  Table name. Name of the table containing company data
-- No3:  Column name. Normally the name of the column containing the company identity but if the column can contain other
--       data than company identities then several registration lines are needed to define the company rows in the table and 
--       in such case define column name for each extra column (together with Arg 4) to identify the company rows in the table.
-- No4:  Column value. Set <COMPANY> if the column (Arg 3) only holds company identities, if not only companies are 
--       stored in the column, then set value, per column, to identify the company rows. 
-- Note: Normally one row is enough to define the company lines for a specifict company in the table. 
--       For example:
--       Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_TAB','COMPANY','<COMPANY>');
--       
--       For tables where not only one column is enough to define the company rows it means that several calls to 
--       Reg_Add_Table_Detail is needed to define which rows in the table that contains company data for a specific company
--       For example:
--       Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_TRANSLATION_TAB','KEY_VALUE','<COMPANY>');
--       Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_TRANSLATION_TAB','KEY_NAME', 'CompanyKeyLu');
PROMPT Inserting remove Create Company detail data for &MODULE
BEGIN
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANIES_PER_GROUP_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_ADDRESS_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_ADDRESS_TYPE_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_DELIVERY_TAX_EXEMP_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_EMP_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_LOCALIZATION_INFO_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_MSG_SETUP_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','COMPANY_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','CREATE_COMPANY_LOG_IMP_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','CREATE_COMPANY_LOG_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','CUSTOMER_INFO_OUR_ID_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','CUSTOMS_INFO_OUR_ID_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','FORWARDER_INFO_OUR_ID_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_TAB','KEY_NAME', 'CompanyKeyLu');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_TAB','KEY_VALUE','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_ATTRIBUTE_TAB','KEY_NAME', 'CompanyKeyLu');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_ATTRIBUTE_TAB','KEY_VALUE','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_TRANSLATION_TAB','KEY_NAME', 'CompanyKeyLu');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_LU_TRANSLATION_TAB','KEY_VALUE','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_MASTER_TAB','KEY_NAME', 'CompanyKeyLu');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','KEY_MASTER_TAB','KEY_VALUE','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','MANUFACTURER_INFO_OUR_ID_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','OWNER_INFO_OUR_ID_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','PERSON_COMPANY_ACCESS_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','SUPPLIER_INFO_OUR_ID_TAB','COMPANY','<COMPANY>');
   Enterp_Comp_Connect_V170_API.Reg_Add_Table_Detail('&MODULE','USER_PRIV_REMOVE_COMPANY_TAB','COMPANY','<COMPANY>');
END;
/
COMMIT;

--
-- This section defines so called client mapping, i.e. a definition of the anonymous columns that
-- are linked to a specific Component and Logical Unit. The definition is used in runtime to
-- "redesign" the Create Company Template detail window, only showing columns used by the LU with 
-- the proper column label for each column.
-- The mapping_id is an unique identity for a Component and Lu, previously defined
-- when adding data for Create Company Detail data (crecomp_component_lu_tab).
-- The mapping_id is constructed in the following way: CCD_ || UPPER(LU)
--
-- Arguments for Xxx_API.Create_Client_Mapping__:
-- No1:  Client Window. Defaults to "frmCreateCompanyTemDetail" (which should always be used)
--
-- Note: In the end Client Mapping data for Posting Control Logical Units which are handled in a special way are defined.
--
-- Arguments for Posting_Ctrl_Crecomp_API.Client_Map_Xxx_Gen__ (where Xxx is the different Posting Ctrl levels):
-- No1:  Component. Identity of the component in upper case
-- No2:  Logical Unit. The identity of the logical unit
PROMPT Define Client Mapping for &MODULE
DECLARE
BEGIN
   Branch_API.Create_Client_Mapping__;
   Create_Company_API.Create_Client_Mapping__;
END;
/
COMMIT;
  
--
-- This section defines what system company templates are released by IFS RD
--
DELETE FROM system_company_template_tab;

PROMPT Insert system company templates into system_company_template_tab
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-AR', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-AT', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-BE', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-CH', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-CN', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-CZ', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-DA', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-DE', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-ES', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-FI', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-FR', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-JP', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-NO', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-SK', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-SV', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-TH', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-US', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-PL', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-PER', SYSDATE);   
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-UK', SYSDATE);
INSERT INTO system_company_template_tab (template_id, rowversion)
   VALUES ('STD-LIM', SYSDATE);
COMMIT;

UNDEFINE MODULE
