-----------------------------------------------------------------------------
--
--  Logical unit: PersonalData
--
--  Report:       PersonalData
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
--  
--  180627  PICZPL Bug 142706: header for data separation; function as field handling
--  181217  AJPELK Bug 145888, Correct the table and index spaces.
--  200911  machlk  HCSPRING20-1613, Implement GDPR after removing BENADM.
--  210720  machlk  HCM21R2-81, Remove External Candidate.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating PERSONAL_DATA_RPI specification

CREATE OR REPLACE PACKAGE PERSONAL_DATA_RPI AS

module_ CONSTANT VARCHAR2(6) := 'ENTERP';
lu_name_ CONSTANT VARCHAR2(25) := 'PersonalData';

TYPE ArrayOfStrings IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
TYPE ArrayOfArrays IS TABLE OF ArrayOfStrings INDEX BY BINARY_INTEGER;
TYPE PropertyCursorType IS REF CURSOR;

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   key_ref_                  IN VARCHAR2,
   data_subject_db_          IN VARCHAR2,
   operation_date_           IN VARCHAR2,
   action_                   IN VARCHAR2)
   RETURN NUMBER;

FUNCTION Tokenize_String(str_ IN VARCHAR2, separator_ VARCHAR2 DEFAULT ',') RETURN ArrayOfStrings;

FUNCTION Date_To_String (d_ IN DATE) RETURN VARCHAR2;

FUNCTION String_To_Date (s_ IN VARCHAR2) RETURN DATE;

FUNCTION Data_Subject_Used_On_Detail_Db(pers_data_management_id_ IN NUMBER,
                                        data_subject_db_         IN VARCHAR2) RETURN VARCHAR2;
FUNCTION Is_Pers_Data_Purpose_Select_Db(pers_data_management_id_ IN NUMBER,
                                        data_subject_db_         IN VARCHAR2,
                                        purpose_id_              IN NUMBER) RETURN VARCHAR2;


PROCEDURE Init;

END PERSONAL_DATA_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table PERSONAL_DATA_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT_DB', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STATEMENT_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REMARK', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONSENT_PURPOSE_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONSENT_PURPOSE_NAME', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONSENT_PURPOSE_DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EFFECTIVE_ON', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EFFECTIVE_UNTIL', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PERSONAL_DATA', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATA_CATEGORY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SEQ_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'APPLICATION_AREA_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MATCH_BY', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COL_HEADER', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CNT_COLUMNS', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COL1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COL2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COL3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COL4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COL5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COL6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_RPT';
   index_name_ VARCHAR2(30) := 'PERSONAL_DATA_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view PERSONAL_DATA_REP

CREATE OR REPLACE VIEW PERSONAL_DATA_REP AS
SELECT *
FROM   PERSONAL_DATA_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE PERSONAL_DATA_REP
   IS 'LU=PersonalData^PROMPT=Personal Data^MODULE=ENTERP^';

COMMENT ON COLUMN PERSONAL_DATA_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN PERSONAL_DATA_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN PERSONAL_DATA_REP.key_ref
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Key Ref^QUERY=Key Ref:^QFLAGS=M-S--^QVALUE=%^';
COMMENT ON COLUMN PERSONAL_DATA_REP.data_subject_db
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Data Subject Db^QUERY=Data Subject Db:^QFLAGS=M-S--^';
COMMENT ON COLUMN PERSONAL_DATA_REP.operation_date
   IS 'FLAGS=A----^DATATYPE=DATE^TITLE=Operation Date^QUERY=Operation Date:^QFLAGS=M-S--^';
COMMENT ON COLUMN PERSONAL_DATA_REP.action
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Action^QUERY=Action:^QFLAGS=M-S--^';
COMMENT ON COLUMN PERSONAL_DATA_REP.name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Name^';
COMMENT ON COLUMN PERSONAL_DATA_REP.data_subject
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Data Subject^';
COMMENT ON COLUMN PERSONAL_DATA_REP.statement_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Statement Date^';
COMMENT ON COLUMN PERSONAL_DATA_REP.remark
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Remark^';
COMMENT ON COLUMN PERSONAL_DATA_REP.consent_purpose_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Consent Purpose Id^';
COMMENT ON COLUMN PERSONAL_DATA_REP.consent_purpose_name
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Consent Purpose Name^';
COMMENT ON COLUMN PERSONAL_DATA_REP.consent_purpose_description
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Consent Purpose Description^';
COMMENT ON COLUMN PERSONAL_DATA_REP.effective_on
   IS 'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Effective On^';
COMMENT ON COLUMN PERSONAL_DATA_REP.effective_until
   IS 'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Effective Until^';
COMMENT ON COLUMN PERSONAL_DATA_REP.pers_data_management_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Pers Data Management Id^';
COMMENT ON COLUMN PERSONAL_DATA_REP.personal_data
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Personal Data^';
COMMENT ON COLUMN PERSONAL_DATA_REP.data_category
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Data Category^';
COMMENT ON COLUMN PERSONAL_DATA_REP.seq_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Seq No^';
COMMENT ON COLUMN PERSONAL_DATA_REP.storage_type
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Storage Type^';
COMMENT ON COLUMN PERSONAL_DATA_REP.application_area_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Logical Unit Id^';
COMMENT ON COLUMN PERSONAL_DATA_REP.match_by
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Match By^';
COMMENT ON COLUMN PERSONAL_DATA_REP.condition
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Condition^';
COMMENT ON COLUMN PERSONAL_DATA_REP.col_header
   IS 'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Col Header^';
COMMENT ON COLUMN PERSONAL_DATA_REP.cnt_columns
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cnt Columns^';
COMMENT ON COLUMN PERSONAL_DATA_REP.col1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Col1^';
COMMENT ON COLUMN PERSONAL_DATA_REP.col2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Col2^';
COMMENT ON COLUMN PERSONAL_DATA_REP.col3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Col3^';
COMMENT ON COLUMN PERSONAL_DATA_REP.col4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Col4^';
COMMENT ON COLUMN PERSONAL_DATA_REP.col5
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Col5^';
COMMENT ON COLUMN PERSONAL_DATA_REP.col6
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Col6^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('PERSONAL_DATA_REP', 'ENTERP', 'PersonalData', 'Personal Data', 'PERSONAL_DATA_RPT', 'PERSONAL_DATA_RPI.Execute_Report', 0,'','','','PLSQL1.2','TRUE','Financials','Personal Data Management');
   Report_SYS.Define_Report_Text_('PERSONAL_DATA_REP', 'PERSONAL_DATA_DATA_SUBJECT', 'Data Subject');
   Report_SYS.Define_Report_Text_('PERSONAL_DATA_REP', 'PERSONAL_DATA_DATA', 'Personal Data');
   Report_SYS.Define_Report_Text_('PERSONAL_DATA_REP', 'PERSONAL_DATA_PURPOSES', 'Data Processing Purposes');
   Report_SYS.Define_Report_Text_('PERSONAL_DATA_REP', 'PERSONAL_DATA_AFFECTED', 'Affected Personal Data');
   Report_SYS.Refresh_('PERSONAL_DATA_REP');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating PERSONAL_DATA_RPI implementation

CREATE OR REPLACE PACKAGE BODY PERSONAL_DATA_RPI IS

   TYPE binds$ IS RECORD (
      key_ref                   VARCHAR2(2000),
      data_subject_db           VARCHAR2(2000),
      operation_date            DATE,
      action                    VARCHAR2(2000));

   CURSOR get_personal_information IS
      SELECT
         NULL            name,
         to_date(NULL)   operation_date,
         NULL            data_subject,
         to_date(NULL)   statement_date,
         NULL            remark
      FROM dual;
   
   CURSOR get_consent_purpose(key_ref_ IN VARCHAR2, data_subject_db_ IN VARCHAR2, operation_date_ IN DATE, action_ IN VARCHAR2 ) IS
      SELECT purpose_id                                                 consent_purpose_id, 
             Pers_Data_Process_Purpose_API.Get_Purpose_Name(purpose_id) consent_purpose_name,
             Pers_Data_Process_Purpose_API.Get_Description(purpose_id)  consent_purpose_description,
             effective_on                                               effective_on,
             effective_until                                            effective_until
        FROM PERS_DATA_PROC_PURPOSE_ASSIST
       WHERE key_ref = key_ref_
         AND data_subject_db = data_subject_db_
         AND operation_date = operation_date_
         AND action = action_
         AND valid = 'TRUE'
      ORDER BY purpose_id;


   CURSOR get_personal_data_management(data_subject_ IN VARCHAR2, purpose_id_ IN NUMBER ) IS
      SELECT pers_data_management_id, personal_data
        FROM PERSONAL_DATA_MANAGEMENT pdm
       WHERE Personal_Data_Man_Det_API.Data_Subject_Used_On_Details(PERS_DATA_MANAGEMENT_ID, data_subject_ ) = 'TRUE'
         AND Pers_Data_Man_Proc_Purpose_Api.Is_Pers_Data_Purpose_Selected(PERS_DATA_MANAGEMENT_ID, data_subject_ , purpose_id_ ) = 'TRUE'
      ORDER BY pers_data_management_id;
   
   CURSOR get_employee_personal_data IS
      SELECT
         to_number(NULL) pers_data_management_id,
         NULL            personal_data,
         NULL            data_category
      FROM dual;
   
   CURSOR get_emp_personal_data_row IS
      SELECT
         to_number(NULL)      seq_no,
         NULL                 storage_type,
         NULL                 application_area_id,
         NULL                 match_by,
         NULL                 condition,
         NULL                 col_header,
         to_number(NULL)      cnt_columns,
         NULL                 col1,
         NULL                 col2,
         NULL                 col3,
         NULL                 col4,
         NULL                 col5,
         NULL                 col6
      FROM dual;
-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_personal_information_  IN get_personal_information%ROWTYPE DEFAULT NULL,
   rec_consent_purpose_       IN get_consent_purpose%ROWTYPE DEFAULT NULL,
   rec_personal_data_management_ IN get_personal_data_management%ROWTYPE DEFAULT NULL,
   rec_employee_personal_data_ IN get_employee_personal_data%ROWTYPE DEFAULT NULL,
   rec_emp_personal_data_row_ IN get_emp_personal_data_row%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO PERSONAL_DATA_RPT (
      result_key,
      key_ref,
      data_subject_db,
      operation_date,
      action,
      name,
      data_subject,
      statement_date,
      remark,
      consent_purpose_id,
      consent_purpose_name,
      consent_purpose_description,
      effective_on,
      effective_until,
      pers_data_management_id,
      personal_data,
      data_category,
      seq_no,
      storage_type,
      application_area_id,
      match_by,
      condition,
      col_header,
      cnt_columns,
      col1,
      col2,
      col3,
      col4,
      col5,
      col6,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      binds$_.key_ref,
      binds$_.data_subject_db,
      nvl(rec_personal_information_.operation_date,
      binds$_.operation_date),
      binds$_.action,
      rec_personal_information_.name,
      rec_personal_information_.data_subject,
      rec_personal_information_.statement_date,
      rec_personal_information_.remark,
      rec_consent_purpose_.consent_purpose_id,
      rec_consent_purpose_.consent_purpose_name,
      rec_consent_purpose_.consent_purpose_description,
      rec_consent_purpose_.effective_on,
      rec_consent_purpose_.effective_until,
      nvl(rec_employee_personal_data_.pers_data_management_id,
      rec_personal_data_management_.pers_data_management_id),
      nvl(rec_employee_personal_data_.personal_data,
      rec_personal_data_management_.personal_data),
      rec_employee_personal_data_.data_category,
      rec_emp_personal_data_row_.seq_no,
      rec_emp_personal_data_row_.storage_type,
      rec_emp_personal_data_row_.application_area_id,
      rec_emp_personal_data_row_.match_by,
      rec_emp_personal_data_row_.condition,
      rec_emp_personal_data_row_.col_header,
      rec_emp_personal_data_row_.cnt_columns,
      rec_emp_personal_data_row_.col1,
      rec_emp_personal_data_row_.col2,
      rec_emp_personal_data_row_.col3,
      rec_emp_personal_data_row_.col4,
      rec_emp_personal_data_row_.col5,
      rec_emp_personal_data_row_.col6,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

FUNCTION Is_Function_Column___(column_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   IF (instr(upper(column_),'_API.') > 0) THEN RETURN TRUE;
   END IF;
   RETURN FALSE;
END Is_Function_Column___;

PROCEDURE Check_Valid_Columns___ (
   view_name_                     IN VARCHAR2,
   columns_                       IN ArrayOfStrings )
IS
   i_             NUMBER;
   func_name_     VARCHAR2(200);
BEGIN
   i_ := columns_.FIRST;
   WHILE i_ IS NOT NULL LOOP
      -- in same cases instead of column function is used. Function syntax is: <package>.<function_name>(<parameters>)
      IF (Is_Function_Column___(columns_(i_))) THEN
         func_name_ := upper(substr(columns_(i_),0,instr(columns_(i_),'(')-1));
         Assert_SYS.Assert_Is_Function(func_name_);
      ELSE
         -- this is just view's column         
         Assert_SYS.Assert_Is_View_Column(view_name_, columns_(i_));
      END IF;
      
      i_ := columns_.NEXT(i_);
   END LOOP;
END Check_Valid_Columns___;

FUNCTION Create_Address_Lu_List___ (
   pers_data_management_id_       IN NUMBER,
   application_area_id_               IN VARCHAR2,
   view_name_                     IN VARCHAR2,
   all_address_fields_            IN VARCHAR2 ) RETURN VARCHAR2
IS
   columns_                       ArrayOfStrings;
   i_                             NUMBER;
   fld_                           VARCHAR2(100);
   selected_fields_               VARCHAR2(2000);
BEGIN
   IF (all_address_fields_ IS NULL) THEN
      Error_SYS.Record_General(lu_name_,'ADDRNOLUADDRCOLS: Lu :P1 has no defined address columns',application_area_id_);
   END IF;
   
   columns_ := Tokenize_String(all_address_fields_);
   
   i_ := columns_.FIRST;
   WHILE i_ IS NOT NULL LOOP
      IF i_ = 1 AND columns_(i_) IS NULL THEN
         Error_SYS.Record_General(lu_name_,'ADDRNOCOUNTRY: No Country field defined for address stored in :P1',application_area_id_);
      END IF;
      
      IF columns_(i_) IS NULL THEN
         fld_ := ' '''' FLD'||to_char(i_);
      ELSE
         Assert_SYS.Assert_Is_View_Column(view_name_, columns_(i_));
         fld_ := columns_(i_) || ' FLD' || to_char(i_);
      END IF;
      
      IF selected_fields_ IS NULL THEN selected_fields_ := fld_;
      ELSE selected_fields_ := selected_fields_ || ',' || fld_;
      END IF;
      
      i_ := columns_.NEXT(i_);
   END LOOP;
   
   RETURN selected_fields_;
END Create_Address_Lu_List___;

FUNCTION Create_Address_Fields_List___ (
   pers_data_management_id_       IN NUMBER,
   application_area_id_               IN VARCHAR2,
   view_name_                     IN VARCHAR2 ) RETURN VARCHAR2
IS
   CURSOR field_no (report_order_ IN NUMBER) IS 
      SELECT field_name
        FROM PERSONAL_DATA_MAN_DET_TAB pdmd
       WHERE pdmd.pers_data_management_id = pers_data_management_id_
         AND pdmd.application_area_id         = application_area_id_
         AND pdmd.storage_type            = 'FIELD'
         AND pdmd.report_order            = report_order_;
   field_name_                  PERSONAL_DATA_MAN_DET_TAB.field_name%TYPE;
   fld_                         VARCHAR2(100);
   selected_fields_                VARCHAR2(2000);
BEGIN
   FOR i_ IN 1..11 LOOP
      OPEN  field_no(i_);
      FETCH field_no INTO field_name_;
      IF (field_no%NOTFOUND) THEN
         IF (i_ = 1) THEN 
            CLOSE field_no;
            Error_SYS.Record_General(lu_name_, 'ADDRNOCOUNTRY: No Country field defined for address stored in :P1', application_area_id_);
         ELSE
            fld_ := ' '''' FLD'||to_char(i_);
         END IF;
      ELSE
         Assert_SYS.Assert_Is_View_Column(view_name_, field_name_);
         fld_ := field_name_ || ' FLD' || to_char(i_);
      END IF;
      CLOSE field_no;
      
      IF selected_fields_ IS NULL THEN selected_fields_ := fld_;
      ELSE selected_fields_ := selected_fields_ || ',' || fld_;
      END IF;
   END LOOP;
   RETURN selected_fields_;
END Create_Address_Fields_List___;

PROCEDURE Create_Fields_List___ (
   fields_                    IN OUT VARCHAR2,
   logical_units_             IN OUT VARCHAR2,
   same_lu_for_all_           IN OUT BOOLEAN,
   pers_data_management_id_   IN     NUMBER,
   data_subject_db_           IN     VARCHAR2,
   condition_                 IN     VARCHAR2 )
IS
   CURSOR get_fields_info IS 
      SELECT pdmd.application_area_id application_area_id, pdmd.field_name field_name
        FROM PERSONAL_DATA_MAN_DET_TAB pdmd
       WHERE pdmd.pers_data_management_id = pers_data_management_id_
         AND pdmd.data_subject            = data_subject_db_
         AND (pdmd.condition IS NULL OR pdmd.condition = condition_)
         AND pdmd.storage_type            = 'FIELD'
         AND pdmd.report_order IS NOT NULL
      ORDER BY pdmd.report_order;
   prev_lu_id_       VARCHAR2(100);
BEGIN
   fields_        := NULL;
   logical_units_ := NULL;
   
   FOR fld_ IN get_fields_info LOOP 
      IF fields_ IS NULL THEN fields_ := fld_.field_name;
      ELSE fields_ := fields_ || ';' || fld_.field_name;
      END IF;
      --
      IF logical_units_ IS NULL THEN
         logical_units_   := fld_.application_area_id;
         same_lu_for_all_ := TRUE;
      ELSE
         logical_units_ := logical_units_ || ',' || fld_.application_area_id;
         IF fld_.application_area_id != prev_lu_id_ THEN same_lu_for_all_ := FALSE;
         END IF;
         prev_lu_id_      := fld_.application_area_id;
      END IF;
   END LOOP;
END Create_Fields_List___;

FUNCTION Create_Default_Fields_List___ (
   application_area_id_               IN VARCHAR2,
   view_name_                     IN VARCHAR2 ) RETURN VARCHAR2
IS
   CURSOR get_columns IS
      SELECT column_name, column_datatype
        FROM DICTIONARY_SYS_VIEW_COLUMN
       WHERE lu_name = application_area_id_
         AND view_name = view_name_
         AND type_flag = 'A' AND lov_flag = 'L'
      ORDER BY column_index;
   flds_       VARCHAR2(2000);
BEGIN
   FOR fld_ IN get_columns LOOP 
      IF ((fld_.column_datatype LIKE 'BOOLEAN%') OR (fld_.column_datatype LIKE 'BINARY%')) THEN
         -- skip these columns
         NULL;
      ELSE
         IF flds_ IS NULL THEN flds_ := fld_.column_name;
         ELSE flds_ := flds_ || ';' || fld_.column_name;
         END IF; 
      END IF;
   END LOOP;
   RETURN flds_;
END Create_Default_Fields_List___;

FUNCTION Create_Row_Header___ (
   application_area_id_               IN VARCHAR2,
   view_name_                     IN VARCHAR2,
   columns_                       IN ArrayOfStrings ) RETURN VARCHAR2 
IS
   i_                             NUMBER;
   header_str_                    VARCHAR2(2000);
   column_name_                   VARCHAR2(2000);
BEGIN
   i_      := columns_.FIRST;
   
   WHILE i_ IS NOT NULL LOOP
      IF Is_Function_Column___(columns_(i_)) THEN column_name_ := Language_SYS.Translate_Constant(lu_name_,'CODEDESCRIPTION: Description');
      ELSE column_name_ := Language_SYS.Translate_Item_Prompt_(application_area_id_,columns_(i_));
      END IF;
      
      IF (header_str_ IS NULL) THEN header_str_ := column_name_;
      ELSE header_str_ := header_str_ || ' * ' || column_name_;
      END IF;
      
      i_ := columns_.NEXT(i_);
   END LOOP;
   
   RETURN header_str_;
END Create_Row_Header___;

FUNCTION Create_Select_Clouse___ (
   application_area_id_               IN VARCHAR2,
   view_name_                     IN VARCHAR2,
   columns_                       IN ArrayOfStrings ) RETURN VARCHAR2 
IS
   i_                             NUMBER;
   select_                        VARCHAR2(2000);
   column_type_                   DICTIONARY_SYS_VIEW_COLUMN.column_datatype%TYPE;
   converted_column_value_        VARCHAR2(100);
   CURSOR get_column_type (col_name_ IN VARCHAR2) IS
      SELECT column_datatype
        FROM DICTIONARY_SYS_VIEW_COLUMN
       WHERE lu_name = application_area_id_
         AND view_name = view_name_
         AND column_name = col_name_;
BEGIN
   i_      := columns_.FIRST;
   
   WHILE i_ IS NOT NULL LOOP
      column_type_ := NULL;
      
      IF NOT Is_Function_Column___(columns_(i_)) THEN
         OPEN  get_column_type(columns_(i_));
         FETCH get_column_type INTO column_type_;
         CLOSE get_column_type;

         IF instr(column_type_,'STRING') > 0 THEN
            converted_column_value_ := columns_(i_);
         ELSIF instr(column_type_,'NUMBER') > 0 THEN
            converted_column_value_ := 'to_char('||columns_(i_)|| ')';
         ELSIF instr(column_type_,'DATE') > 0 THEN
            converted_column_value_ := 'to_char('||columns_(i_)|| ')';
         ELSE
            Error_SYS.Record_General('UNKNCOLTYPE: Unknown column type :P1 for column :P2', column_type_, view_name_ ||  '.' || columns_(i_));
         END IF;
      ELSE
         -- function always returns varchar2
         converted_column_value_ := columns_(i_);
      END IF;
      
      IF select_ IS NULL THEN select_ := 'SELECT ' || converted_column_value_;
      ELSE select_ := select_ || ' || '' * '' || ' || converted_column_value_;
      END IF;
      
      i_ := columns_.NEXT(i_);
   END LOOP;
   
   RETURN select_;
END Create_Select_Clouse___;

PROCEDURE Build_Xml_Data_Row___ (
   xml$_                          IN OUT CLOB,
   seq_no_                        IN     NUMBER,
   storage_type_                  IN     VARCHAR2,
   application_area_id_               IN     VARCHAR2, 
   match_by_                      IN     VARCHAR2,
   additional_condition_          IN     VARCHAR2,
   cnt_columns_                   IN     NUMBER,
   col1_                          IN     VARCHAR2,
   col2_                          IN     VARCHAR2 DEFAULT NULL,
   col3_                          IN     VARCHAR2 DEFAULT NULL,
   col4_                          IN     VARCHAR2 DEFAULT NULL,
   col5_                          IN     VARCHAR2 DEFAULT NULL,
   col6_                          IN     VARCHAR2 DEFAULT NULL,
   col_header_                    IN     VARCHAR2 DEFAULT '0' )
IS
BEGIN
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'EMP_PERSONAL_DATA_ROW');
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SEQ_NO', seq_no_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'STORAGE_TYPE', storage_type_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'APPLICATION_AREA_ID', application_area_id_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'MATCH_BY', match_by_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONDITION', additional_condition_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COL_HEADER', col_header_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'CNT_COLUMNS', cnt_columns_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COL1', col1_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COL2', col2_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COL3', col3_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COL4', col4_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COL5', col5_);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COL6', col6_);
   Xml_Record_Writer_SYS.End_Element(xml$_, 'EMP_PERSONAL_DATA_ROW');
END Build_Xml_Data_Row___;

FUNCTION Two_Params_Data_Subject___ ( data_subject_ IN VARCHAR2 ) RETURN BOOLEAN 
IS
BEGIN
   IF (data_subject_ = 'BUSINESS_CONTACT' OR data_subject_ = 'BUSINESS_CONTACTS' OR data_subject_ = 'EMPLOYEE' OR data_subject_ = 'DEPENDENTS' OR data_subject_ = 'PERSON_DEPENDENT') THEN
      RETURN TRUE;
   END IF;
   RETURN FALSE;
END Two_Params_Data_Subject___;

-- process Muliti Property Fields (LU: CompanyEmpPropertyField)
PROCEDURE Process_Multi_Property___ (
   xml$_                          IN OUT CLOB,
   seq_no_                        IN     NUMBER,
   data_subject_                  IN     VARCHAR2,
   key_reference_                 IN     VARCHAR2,
   application_area_id_               IN     VARCHAR2, 
   view_name_                     IN     VARCHAR2,
   match_by_                      IN     VARCHAR2,
   storage_type_                  IN     VARCHAR2,
   additional_condition_          IN     VARCHAR2,
   property_code_                 IN     VARCHAR2 )
IS
   TYPE PropCodeValue         IS VARRAY(15) OF VARCHAR2(800);
   TYPE PropCodeValueDesc     IS VARRAY(15) OF VARCHAR2(2000);
   TYPE PropertyCntCursorType IS REF CURSOR;
   
   property_cursor_               PropertyCursorType;
   property_cursor_cnt_           PropertyCntCursorType;
   stmt_                          VARCHAR2(4000);
   stmt1_                         VARCHAR2(200);
   stmt2_                         VARCHAR2(100);
   where_clause_                  VARCHAR2(1000);
   
   prop_cnt_                      NUMBER;
   prop_code_default_description_ VARCHAR2(40);
   prop_code_lov_                 VARCHAR2(200);
   prop_code_description_         ArrayOfStrings;
   prop_code_lov_defined_         ArrayOfStrings;
   prop_code_value_               PropCodeValue := PropCodeValue();
   prop_code_value_desc_          PropCodeValueDesc := PropCodeValueDesc();
   prop_code_valid_from_          DATE;
   prop_code_valid_to_            DATE;
   valid_from_prompt_             VARCHAR2(200);
   valid_to_prompt_               VARCHAR2(200);
   
   prop_code_value1_              VARCHAR2(100);   prop_code_value_desc1_         VARCHAR2(2000);
   prop_code_value2_              VARCHAR2(100);   prop_code_value_desc2_         VARCHAR2(2000); 
   prop_code_value3_              VARCHAR2(100);   prop_code_value_desc3_         VARCHAR2(2000); 
   prop_code_value4_              VARCHAR2(100);   prop_code_value_desc4_         VARCHAR2(2000); 
   prop_code_value5_              VARCHAR2(100);   prop_code_value_desc5_         VARCHAR2(2000); 
   prop_code_value6_              VARCHAR2(100);   prop_code_value_desc6_         VARCHAR2(2000); 
   prop_code_value7_              VARCHAR2(100);   prop_code_value_desc7_         VARCHAR2(2000); 
   prop_code_value8_              VARCHAR2(100);   prop_code_value_desc8_         VARCHAR2(2000); 
   prop_code_value9_              VARCHAR2(100);   prop_code_value_desc9_         VARCHAR2(2000); 
   prop_code_value10_             VARCHAR2(100);   prop_code_value_desc10_        VARCHAR2(2000); 
   prop_code_value11_             VARCHAR2(100);   prop_code_value_desc11_        VARCHAR2(2000); 
   prop_code_value12_             VARCHAR2(100);   prop_code_value_desc12_        VARCHAR2(2000); 
   prop_code_value13_             VARCHAR2(100);   prop_code_value_desc13_        VARCHAR2(2000); 
   prop_code_value14_             VARCHAR2(100);   prop_code_value_desc14_        VARCHAR2(2000); 
   prop_code_value15_             VARCHAR2(100);   prop_code_value_desc15_        VARCHAR2(2000); 
   
   property_string_               VARCHAR2(2000);
BEGIN
   Assert_SYS.Assert_Is_View(view_name_);
   Assert_SYS.Assert_Is_View('PROPERTY_FIELD');
   
   FOR i_ IN 1..15 LOOP 
      prop_code_value_.extend();
      prop_code_value_desc_.extend();
   END LOOP;
   
   -- count how many property fields is defined for given multi-property-code and get information about LOV presence
   prop_cnt_ := 0;
   stmt_     := 'SELECT DEFAULT_DESCRIPTION, LOV_VIEW FROM PROPERTY_FIELD WHERE PROPERTY_CODE = :property_code ORDER BY FIELD_NO';
   OPEN  property_cursor_cnt_ FOR stmt_ USING property_code_;
   LOOP 
      FETCH property_cursor_cnt_ INTO prop_code_default_description_, prop_code_lov_;
      EXIT WHEN property_cursor_cnt_%NOTFOUND;
      
      prop_code_description_(prop_code_description_.COUNT) := prop_code_default_description_;
      
      IF prop_code_lov_ IS NOT NULL THEN prop_code_lov_defined_(prop_code_lov_defined_.COUNT) := 'TRUE';
      ELSE prop_code_lov_defined_(prop_code_lov_defined_.COUNT) := 'FALSE';
      END IF;
      
      prop_cnt_ := prop_cnt_ + 1;
   END LOOP;
   CLOSE property_cursor_cnt_;
   
   valid_from_prompt_ := Language_SYS.Translate_Item_Prompt_(application_area_id_, 'VALID_FROM');
   valid_to_prompt_   := Language_SYS.Translate_Item_Prompt_(application_area_id_, 'VALID_TO');
   
   where_clause_ := Personal_Data_Man_Util_API.Get_Cleanup_Where_Clause(data_subject_, match_by_, storage_type_, additional_condition_, FALSE);
   stmt_ := 'SELECT PROPERTY_FIELD1, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 1,PROPERTY_FIELD1, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD2, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 2,PROPERTY_FIELD2, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD3, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 3,PROPERTY_FIELD3, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD4, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 4,PROPERTY_FIELD4, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD5, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 5,PROPERTY_FIELD5, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD6, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 6,PROPERTY_FIELD6, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD7, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 7,PROPERTY_FIELD7, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD8, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 8,PROPERTY_FIELD8, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD9, Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE, 9,PROPERTY_FIELD9, EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD10,Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE,10,PROPERTY_FIELD10,EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD11,Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE,11,PROPERTY_FIELD11,EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD12,Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE,12,PROPERTY_FIELD12,EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD13,Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE,13,PROPERTY_FIELD13,EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD14,Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE,14,PROPERTY_FIELD14,EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       PROPERTY_FIELD15,Property_Field_Value_API.Get_Default_Description(PROPERTY_CODE,15,PROPERTY_FIELD15,EMP_NO,PERSON_ID,COMPANY_ID),' ||
            '       VALID_FROM, VALID_TO ' ||
            ' FROM ' || view_name_ || where_clause_;
            
   IF (Two_Params_Data_Subject___(data_subject_)) THEN
      OPEN  property_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1), 
                                             Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 2),
                                             property_code_;
   ELSE
      OPEN  property_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1),
                                             property_code_;
   END IF;
   
   LOOP
      -- used variables instead ov varrays since it seems that reference cursors do not work with varrays (execution-time error: structure not initialized)
      FETCH property_cursor_ INTO prop_code_value1_, prop_code_value_desc1_, 
                                  prop_code_value2_, prop_code_value_desc2_, 
                                  prop_code_value3_, prop_code_value_desc3_, 
                                  prop_code_value4_, prop_code_value_desc4_, 
                                  prop_code_value5_, prop_code_value_desc5_, 
                                  prop_code_value6_, prop_code_value_desc6_, 
                                  prop_code_value7_, prop_code_value_desc7_, 
                                  prop_code_value8_, prop_code_value_desc8_, 
                                  prop_code_value9_, prop_code_value_desc9_, 
                                  prop_code_value10_,prop_code_value_desc10_, 
                                  prop_code_value11_,prop_code_value_desc11_, 
                                  prop_code_value12_,prop_code_value_desc12_, 
                                  prop_code_value13_,prop_code_value_desc13_, 
                                  prop_code_value14_,prop_code_value_desc14_, 
                                  prop_code_value15_,prop_code_value_desc15_, 
                                  prop_code_valid_from_, prop_code_valid_to_;
      EXIT WHEN property_cursor_%NOTFOUND;
      
      -- Move values from variables into varrays to make creation of property_string_ easier 
      prop_code_value_(1) := prop_code_value1_;   prop_code_value_desc_(1) := prop_code_value_desc1_;
      prop_code_value_(2) := prop_code_value2_;   prop_code_value_desc_(2) := prop_code_value_desc2_;
      prop_code_value_(3) := prop_code_value3_;   prop_code_value_desc_(3) := prop_code_value_desc3_;
      prop_code_value_(4) := prop_code_value4_;   prop_code_value_desc_(4) := prop_code_value_desc4_;
      prop_code_value_(5) := prop_code_value5_;   prop_code_value_desc_(5) := prop_code_value_desc5_;
      prop_code_value_(6) := prop_code_value6_;   prop_code_value_desc_(6) := prop_code_value_desc6_;
      prop_code_value_(7) := prop_code_value7_;   prop_code_value_desc_(7) := prop_code_value_desc7_;
      prop_code_value_(8) := prop_code_value8_;   prop_code_value_desc_(7) := prop_code_value_desc8_;
      prop_code_value_(9) := prop_code_value9_;   prop_code_value_desc_(9) := prop_code_value_desc9_;
      prop_code_value_(10):= prop_code_value10_;  prop_code_value_desc_(10):= prop_code_value_desc10_;
      prop_code_value_(11):= prop_code_value11_;  prop_code_value_desc_(11):= prop_code_value_desc11_;
      prop_code_value_(12):= prop_code_value12_;  prop_code_value_desc_(12):= prop_code_value_desc12_;
      prop_code_value_(13):= prop_code_value13_;  prop_code_value_desc_(13):= prop_code_value_desc13_;
      prop_code_value_(14):= prop_code_value14_;  prop_code_value_desc_(14):= prop_code_value_desc14_;
      prop_code_value_(15):= prop_code_value15_;  prop_code_value_desc_(15):= prop_code_value_desc15_;
      
      FOR i_ IN 1..prop_cnt_ LOOP
         IF (prop_code_lov_defined_(i_-1) = 'TRUE' AND prop_code_value_desc_(i_) IS NOT NULL) THEN 
            property_string_ := prop_code_description_(i_-1) || ': ' || prop_code_value_desc_(i_);
            Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_, application_area_id_,match_by_,additional_condition_,2,prop_code_description_(i_-1),prop_code_value_desc_(i_));
         ELSE 
            property_string_ := prop_code_description_(i_-1) || ': ' || prop_code_value_(i_);
            Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_, application_area_id_,match_by_,additional_condition_,2,prop_code_description_(i_-1),prop_code_value_(i_));
         END IF;
         
         
      END LOOP;
      
      -- Add Valid_From and Valid_To information
      Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,application_area_id_, match_by_,additional_condition_,4,valid_from_prompt_,prop_code_valid_from_,valid_to_prompt_,prop_code_valid_to_);
   END LOOP;
   CLOSE property_cursor_;
EXCEPTION
   WHEN OTHERS THEN
      IF property_cursor_%ISOPEN THEN
         CLOSE property_cursor_;
      END IF;
END Process_Multi_Property___;

-- process CompanyEmployeeProperty
PROCEDURE Process_Comp_Emp_Property___ (
   xml$_                          IN OUT CLOB,
   seq_no_                        IN     NUMBER,
   data_subject_                  IN     VARCHAR2,
   key_reference_                 IN     VARCHAR2,
   application_area_id_               IN     VARCHAR2, 
   view_name_                     IN     VARCHAR2,
   match_by_                      IN     VARCHAR2,
   storage_type_                  IN     VARCHAR2,
   additional_condition_          IN     VARCHAR2,
   property_code_                 IN     VARCHAR2 )
IS
   property_cursor_               PropertyCursorType;
   stmt_                          VARCHAR2(2000);
   where_clause_                  VARCHAR2(2000);
   property_value_                VARCHAR2(400);
   property_valid_from_           DATE;
   property_valid_to_             DATE;
   valid_from_prompt_             VARCHAR2(200);
   valid_to_prompt_               VARCHAR2(200);
BEGIN
   Assert_SYS.Assert_Is_View(view_name_);
   
   valid_from_prompt_ := Language_SYS.Translate_Item_Prompt_(application_area_id_, 'VALID_FROM');
   valid_to_prompt_   := Language_SYS.Translate_Item_Prompt_(application_area_id_, 'VALID_TO');
   
   where_clause_ := Personal_Data_Man_Util_API.Get_Cleanup_Where_Clause(data_subject_, match_by_, storage_type_, additional_condition_, FALSE);
   stmt_         := 'SELECT property_value, valid_from, valid_to FROM ' || view_name_ || where_clause_;
   
   IF (Two_Params_Data_Subject___ ( data_subject_)) THEN
      OPEN  property_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1), 
                                             Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 2),
                                             property_code_;
   ELSE
      OPEN  property_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1),
                                             property_code_;
   END IF;
   
   LOOP
      FETCH property_cursor_ INTO property_value_, property_valid_from_, property_valid_to_;
      EXIT WHEN property_cursor_%NOTFOUND;
      
      Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,application_area_id_,match_by_,additional_condition_,5,property_value_,valid_from_prompt_,to_char(property_valid_from_),valid_to_prompt_,to_char(property_valid_to_));
   END LOOP;
   CLOSE property_cursor_;
EXCEPTION
   WHEN OTHERS THEN
      IF property_cursor_%ISOPEN THEN
         CLOSE property_cursor_;
      END IF;
END Process_Comp_Emp_Property___;

PROCEDURE Process_Name___ (
   xml$_                          IN OUT CLOB,
   seq_no_                        IN     NUMBER,
   data_subject_                  IN     VARCHAR2,
   key_reference_                 IN     VARCHAR2,
   application_area_id_           IN     VARCHAR2, 
   view_name_                     IN     VARCHAR2,
   match_by_                      IN     VARCHAR2,
   storage_type_                  IN     VARCHAR2,
   additional_condition_          IN     VARCHAR2,
   name_columns_                  IN     VARCHAR2 )
IS
   TYPE NameCursorType IS REF CURSOR;
   
   name_field_cursor_             NameCursorType;
   columns_                       ArrayOfStrings;
   i_                             NUMBER := 0;
   stmt_                          VARCHAR2(2000);
   where_clause_                  VARCHAR2(2000);
   name_field_value_              VARCHAR2(2000);
   name_field_col_name_           VARCHAR2(2000);
   name_value_found_              BOOLEAN;
   data_row_                      VARCHAR2(2000);
BEGIN
   IF name_columns_ IS NULL THEN RETURN;
   END IF;
   
   Assert_SYS.Assert_Is_View(view_name_);
   Personal_Data_Man_Util_API.Assert_Match_By(view_name_, match_by_);   
   
   columns_ := Tokenize_String(name_columns_,';');
   Check_Valid_Columns___(view_name_,columns_);
   
   i_ := columns_.FIRST;
   WHILE i_ IS NOT NULL LOOP
      where_clause_ := Personal_Data_Man_Util_API.Get_Cleanup_Where_Clause(data_subject_, match_by_, storage_type_, additional_condition_, FALSE);
      stmt_         := 'SELECT ' || columns_(i_) || ' FROM ' || view_name_ || where_clause_;

      IF (Two_Params_Data_Subject___ ( data_subject_)) THEN
         OPEN  name_field_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1), 
                                                  Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 2);
      ELSE
         OPEN  name_field_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1);
      END IF;
      
      FETCH name_field_cursor_ INTO name_field_value_;
      IF (name_field_cursor_%NOTFOUND) THEN name_value_found_ := FALSE;
      ELSE name_value_found_ := TRUE;
      END IF;
      CLOSE name_field_cursor_;
      
      IF name_value_found_ THEN
         name_field_col_name_ := Language_SYS.Translate_Item_Prompt_(application_area_id_, columns_(i_));
         
         IF data_row_ IS NULL THEN
            data_row_ := name_field_col_name_ || ': ' || name_field_value_;
         ELSE
            data_row_ := data_row_ || chr(13) || chr(10) || name_field_col_name_ || ': ' || name_field_value_;
         END IF;
      END IF;
      
      i_ := columns_.NEXT(i_);
   END LOOP;
   
   IF data_row_ IS NOT NULL THEN
      Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_, application_area_id_, match_by_,additional_condition_,1,data_row_);
   END IF;      
EXCEPTION
   WHEN OTHERS THEN
      IF name_field_cursor_%ISOPEN THEN
         CLOSE name_field_cursor_;
      END IF;
END Process_Name___;

PROCEDURE Process_Address___ (
   xml$_                          IN OUT CLOB,
   seq_no_                        IN     NUMBER,
   data_subject_                  IN     VARCHAR2,
   key_reference_                 IN     VARCHAR2,
   application_area_id_           IN     VARCHAR2, 
   view_name_                     IN     VARCHAR2,
   match_by_                      IN     VARCHAR2,
   storage_type_                  IN     VARCHAR2,
   additional_condition_          IN     VARCHAR2,
   selected_columns_              IN     VARCHAR2 )
IS
   TYPE AddressCursorType IS REF CURSOR;
   
   address_fields_cursor_         AddressCursorType;
   stmt_                          VARCHAR2(2000);
   where_clause_                  VARCHAR2(2000);
   --
   country_                       VARCHAR2(2000);
   address1_                      VARCHAR2(2000);
   address2_                      VARCHAR2(2000);
   address3_                      VARCHAR2(2000);
   address4_                      VARCHAR2(2000);
   address5_                      VARCHAR2(2000);
   address6_                      VARCHAR2(2000);
   city_                          VARCHAR2(2000);
   county_                        VARCHAR2(2000);
   state_                         VARCHAR2(2000);
   zip_code_                      VARCHAR2(2000);
   --
   formated_address_              VARCHAR2(2000);
BEGIN
   where_clause_ := Personal_Data_Man_Util_API.Get_Cleanup_Where_Clause(data_subject_, match_by_, storage_type_, additional_condition_, FALSE);
   stmt_         := 'SELECT ' || selected_columns_ || ' FROM ' || view_name_ || where_clause_;
   
   IF (Two_Params_Data_Subject___ ( data_subject_)) THEN
      OPEN  address_fields_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1), 
                                                   Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 2);
   ELSE
      OPEN  address_fields_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1);
   END IF;

   LOOP
      FETCH address_fields_cursor_ INTO country_, 
                                        address1_, address2_, address3_, address4_, address5_, address6_, 
                                        city_, county_, state_, zip_code_;
      EXIT WHEN address_fields_cursor_%NOTFOUND;
    
      formated_address_ := Address_Presentation_API.Format_Address(country_,
                                                                   address1_,
                                                                   address2_,
                                                                   address3_,
                                                                   address4_,
                                                                   address5_,
                                                                   address6_,
                                                                   city_,    
                                                                   county_,  
                                                                   state_,   
                                                                   zip_code_,
                                                                   Iso_Country_API.Encode(country_));
      Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,application_area_id_,match_by_,additional_condition_,1,formated_address_);
  END LOOP;

  CLOSE address_fields_cursor_;
  
EXCEPTION
   WHEN OTHERS THEN
      IF address_fields_cursor_%ISOPEN THEN
         CLOSE address_fields_cursor_;
      END IF;
END Process_Address___;

-- Function below will be used later (after small corrections :) )
PROCEDURE Process_Fields___ (
   xml$_                          IN OUT CLOB,
   seq_no_                        IN     NUMBER,
   data_subject_                  IN     VARCHAR2,
   key_reference_                 IN     VARCHAR2,
   list_of_fields_                IN     VARCHAR2,
   list_of_logical_units_         IN     VARCHAR2,
   match_by_                      IN     VARCHAR2,
   storage_type_                  IN     VARCHAR2,
   additional_condition_          IN     VARCHAR2,
   add_row_header_                IN     BOOLEAN DEFAULT FALSE)
IS
   TYPE FieldDataCursorType IS REF CURSOR;
   field_data_cursor_            FieldDataCursorType;
   
   fields_                       ArrayOfStrings;
   logical_units_                ArrayOfStrings;
   all_fields_all_values_        ArrayOfArrays;
   filed_no_                     NUMBER;
   fields_cnt_                   NUMBER;
   view_name_                    VARCHAR2(100);
   where_clause_                 VARCHAR2(2000);
   stmt_                         VARCHAR2(2000);
   field_value_                  VARCHAR2(2000);
   field_value_row_no_           NUMBER;
   filed_all_values_             VARCHAR2(2000);
BEGIN
   IF (list_of_fields_ IS NULL OR list_of_logical_units_ IS NULL) THEN RETURN;
   END IF;
   
   fields_        := Tokenize_String(list_of_fields_);
   logical_units_ := Tokenize_String(list_of_logical_units_);
   IF (fields_.COUNT != logical_units_.COUNT) THEN RETURN;
   END IF;
   
   where_clause_ := Personal_Data_Man_Util_API.Get_Cleanup_Where_Clause(data_subject_, match_by_, storage_type_, additional_condition_, FALSE);
   
   fields_cnt_ := 0;
   filed_no_   := fields_.FIRST;
   WHILE filed_no_ IS NOT NULL LOOP
      fields_cnt_       := fields_cnt_ + 1;
      filed_all_values_ := NULL;
      
      IF logical_units_(filed_no_) = 'PersonInfo' THEN view_name_ := 'PERSON_INFO_ALL';
      ELSE view_name_  := Dictionary_Sys.Get_Base_View(logical_units_(filed_no_));
      END IF;
      
      -- security...
      Assert_SYS.Assert_Is_View(view_name_);
      Personal_Data_Man_Util_API.Assert_Match_By(view_name_, match_by_);   
      
      -- build and execute select statement to fetch field's value
      stmt_ := 'SELECT ' || fields_(filed_no_) || ' FROM ' || view_name_ || where_clause_;
      
      IF (Two_Params_Data_Subject___ ( data_subject_)) THEN
         OPEN  field_data_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1), 
                                                  Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 2);
      ELSE   
         OPEN  field_data_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1);
      END IF;
      
      -- fetch all values for given field and build single single string      
      LOOP 
         -- assume automatic convertion filed to VARCHAR2
         FETCH field_data_cursor_ INTO field_value_;
         EXIT WHEN field_data_cursor_%NOTFOUND;
         
         IF filed_all_values_ IS NULL THEN filed_all_values_ := nvl(field_value_,'><');
         ELSE filed_all_values_ := filed_all_values_ || ',' || nvl(field_value_,'><');
         END IF;
      END LOOP;
      CLOSE field_data_cursor_;
      
      all_fields_all_values_(filed_no_) := Tokenize_String(filed_all_values_);
      
      filed_no_ := fields_.NEXT(filed_no_);
   END LOOP;
   
   
   field_value_row_no_ := all_fields_all_values_.FIRST;
   WHILE field_value_row_no_ IS NOT NULL LOOP
      IF (fields_cnt_ = 1 ) THEN
         Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,logical_units_(0),match_by_,additional_condition_, 
                               1, all_fields_all_values_(field_value_row_no_)(0),
                               NULL, NULL, NULL, NULL, NULL);
      ELSIF (fields_cnt_ = 2 ) THEN
         Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,logical_units_(0),match_by_,additional_condition_, 
                               2, all_fields_all_values_(field_value_row_no_)(0), all_fields_all_values_(field_value_row_no_)(1),
                               NULL, NULL, NULL, NULL);
      ELSIF (fields_cnt_ = 3 ) THEN
         Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,logical_units_(0),match_by_,additional_condition_, 
                               3, all_fields_all_values_(field_value_row_no_)(0), all_fields_all_values_(field_value_row_no_)(1),
                                  all_fields_all_values_(field_value_row_no_)(2),
                               NULL, NULL, NULL);
      ELSIF (fields_cnt_ = 4 ) THEN
         NULL;
      ELSIF (fields_cnt_ = 5 ) THEN
         NULL;
      ELSE -- six or more :)
         NULL;
      END IF;
      -- Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,application_area_id_,match_by_,additional_condition_,values_no_, values_(0),values_(1),values_(2),values_(3),values_(4),values_(5));
      
      field_value_row_no_ := fields_.NEXT(field_value_row_no_);
   END LOOP;
   
EXCEPTION
   WHEN OTHERS THEN
      IF field_data_cursor_%ISOPEN THEN
         CLOSE field_data_cursor_;
      END IF;
END Process_Fields___;   

PROCEDURE Process_Logical_Unit___ (
   xml$_                          IN OUT CLOB,
   seq_no_                        IN     NUMBER,
   data_subject_                  IN     VARCHAR2,
   key_reference_                 IN     VARCHAR2,
   application_area_id_           IN     VARCHAR2, 
   view_name_                     IN     VARCHAR2,
   columns_list_                  IN     VARCHAR2,
   match_by_                      IN     VARCHAR2,
   storage_type_                  IN     VARCHAR2,
   additional_condition_          IN     VARCHAR2,
   add_row_header_                IN     BOOLEAN DEFAULT FALSE)
IS
   TYPE LuDataCursorType IS REF CURSOR;
   cnt_                           NUMBER := 0;
   
   lu_data_cursor_                LuDataCursorType;
   lu_data_count_cursor_          LuDataCursorType;
   columns_                       ArrayOfStrings;
   values_                        ArrayOfStrings;
   values_no_                     NUMBER;
   where_clause_                  VARCHAR2(2000);
   select_clause_                 VARCHAR2(2000);
   stmt_                          VARCHAR2(2000);
   lu_data_                       VARCHAR2(2000);
   lu_data_count_                 NUMBER;
BEGIN
   Assert_SYS.Assert_Is_View(view_name_);
   Personal_Data_Man_Util_API.Assert_Match_By(view_name_, match_by_);   
   
   IF columns_list_ IS NULL THEN RETURN;
   END IF;
   
   columns_ := Tokenize_String(columns_list_,';');
   Check_Valid_Columns___(view_name_,columns_);
   
   select_clause_ := Create_Select_Clouse___(application_area_id_,view_name_,columns_);
   where_clause_ := Personal_Data_Man_Util_API.Get_Cleanup_Where_Clause(data_subject_, match_by_, storage_type_, additional_condition_, FALSE);
   
   -- if necessary, check how many rows will be returned
   IF add_row_header_ THEN
      stmt_ := 'SELECT count(*) FROM ' || view_name_ || where_clause_;
      IF (Two_Params_Data_Subject___ ( data_subject_)) THEN
         OPEN  lu_data_count_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1), 
                                                     Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 2);
      ELSE
         OPEN  lu_data_count_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1);
      END IF;
      FETCH lu_data_count_cursor_ INTO lu_data_count_;
      CLOSE lu_data_count_cursor_;
      
      lu_data_count_ := nvl(lu_data_count_,0);
   END IF;
   
   stmt_ := select_clause_ || ' FROM ' || view_name_ || where_clause_;   
   
   IF (Two_Params_Data_Subject___ ( data_subject_)) THEN
      OPEN  lu_data_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1), 
                                            Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 2);
   ELSE
      OPEN  lu_data_cursor_ FOR stmt_ USING Personal_Data_Man_Util_API.Get_Identity_From_Key_Ref(data_subject_, key_reference_, 1);
   END IF;
   
   LOOP
      FETCH lu_data_cursor_ INTO lu_data_;
      EXIT WHEN lu_data_cursor_%NOTFOUND;
      
      cnt_ := cnt_ + 1;
      
      -- print header at the beginning of the section but only if more than one row will be printed; if more than 1 column - print header even for one row
      IF (cnt_ = 1 AND add_row_header_ AND (lu_data_count_ > 1 OR columns_.COUNT > 1)) THEN
         values_ := Tokenize_String(Create_Row_Header___(application_area_id_,view_name_,columns_),'*');
         values_no_ := values_.COUNT;
         -- expand values_ array to have (always) 6 entries (as report handles up to 6 columns in data row)
         -- array has 0-based indexing!
         FOR i_ IN values_.COUNT..5 LOOP
            values_(values_.COUNT) := '*';
         END LOOP;
         
         IF values_no_ > 6 THEN
            -- up to 6 columns supported. If more selected to displaly create ONE value with concatenated names using separator ('*')
            FOR i_ IN 1..values_no_-1 LOOP
               values_(0) := values_(0) || ' * ' || values_(i_);
            END LOOP;
            values_no_ := 1;
         END IF;
         
         Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,application_area_id_,match_by_,additional_condition_,values_no_, values_(0),values_(1),values_(2),values_(3),values_(4),values_(5),'1');
      END IF;
      
      values_ := Tokenize_String(lu_data_,'*');
      values_no_ := values_.COUNT;
      -- expand values_ array to have (always) 6 entries (as report handles up to 6 columns in data row)
      -- array has 0-based indexing!
      FOR i_ IN values_.COUNT..5 LOOP
         values_(values_.COUNT) := '*';
      END LOOP;
      
      IF values_no_ > 6 THEN
         -- up to 6 columns supported. If more selected to displaly create ONE value with concatenated names using separator ('*')
         FOR i_ IN 1..values_no_-1 LOOP
            values_(0) := values_(0) || ' * ' || values_(i_);
         END LOOP;
         values_no_ := 1;
      END IF;
      
      Build_Xml_Data_Row___(xml$_,seq_no_,storage_type_,application_area_id_,match_by_,additional_condition_,values_no_, values_(0),values_(1),values_(2),values_(3),values_(4),values_(5));
   END LOOP;
   CLOSE lu_data_cursor_;   
EXCEPTION
   WHEN OTHERS THEN
      IF lu_data_cursor_%ISOPEN THEN
         CLOSE lu_data_cursor_;
      END IF;
      IF lu_data_count_cursor_%ISOPEN THEN
         CLOSE lu_data_count_cursor_;
      END IF;
END Process_Logical_Unit___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------
PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_personal_information_ BOOLEAN;
   rec_personal_information_ get_personal_information%ROWTYPE;
   par_personal_information_ binds$;
   has_consent_purpose_ BOOLEAN;
   rec_consent_purpose_ get_consent_purpose%ROWTYPE;
   par_consent_purpose_ binds$;
   has_personal_data_management_ BOOLEAN;
   rec_personal_data_management_ get_personal_data_management%ROWTYPE;
   par_personal_data_management_ binds$;
   has_employee_personal_data_ BOOLEAN;
   rec_employee_personal_data_ get_employee_personal_data%ROWTYPE;
   par_employee_personal_data_ binds$;
   has_emp_personal_data_row_ BOOLEAN;
   rec_emp_personal_data_row_ get_emp_personal_data_row%ROWTYPE;
   par_emp_personal_data_row_ binds$;
   --
   data_subject_                VARCHAR2(200);
   operation_date_str_          VARCHAR2(30);
   personal_data_list_          VARCHAR2(2000);
   personal_data_row_           VARCHAR2(2000);
   loc_key_ref_                 VARCHAR2(2000);
   loc_data_subject_db_         VARCHAR2(2000);
   loc_data_subject_            VARCHAR2(2000);
   i_                           NUMBER;
   identity_name_               VARCHAR2(2000);
   remark_                      VARCHAR2(2000);
   
   view_name_                   VARCHAR2(35);
   data_subject_related_        Personal_Data_Man_Util_API.data_subject_array_;
   lu_fields_list_              VARCHAR2(2000);
   lu_ids_                      VARCHAR2(2000);
   all_fileds_same_lu_          BOOLEAN;
   data_category_               PERSONAL_DATA_MANAGEMENT_TAB.data_category%TYPE;
   field_name_                  PERSONAL_DATA_MAN_DET_TAB.field_name%TYPE;
   
   CURSOR get_personal_data2(par_key_ref_ IN VARCHAR2, par_data_subject_db_ IN VARCHAR2, par_operation_date_ IN DATE, par_action_db_ IN VARCHAR2) IS
      SELECT DISTINCT pers_data_management_id, personal_data, data_category
        FROM PERSONAL_DATA_MANAGEMENT pdm,
             (SELECT purpose_id
                FROM PERS_DATA_PROC_PURPOSE_ASSIST 
               WHERE key_ref = par_key_ref_
                 AND data_subject_db = par_data_subject_db_
                 AND operation_date = par_operation_date_
                 AND action = par_action_db_
                 AND valid = 'TRUE' ) pdp
       WHERE Personal_Data_RPI.Data_Subject_Used_On_Detail_Db(pdm.pers_data_management_id,par_data_subject_db_) = 'TRUE'
         AND Personal_Data_RPI.Is_Pers_Data_Purpose_Select_Db(pdm.pers_data_management_id,par_data_subject_db_, pdp.purpose_id) = 'TRUE'
      ORDER BY pdm.pers_data_management_id;
   rec_personal_data_   get_personal_data2%ROWTYPE;
   
   CURSOR get_personal_data_row (pers_data_management_id_ IN NUMBER, data_subject_db_ IN VARCHAR2) IS
      SELECT min(pdmd.seq_no) seq_no, pdmd.storage_type storage_type, pdmd.application_area_id application_area_id, pdmd.match_by match_by, pdmd.condition condition, ' ' col1
        FROM PERSONAL_DATA_MAN_DET_TAB pdmd
       WHERE pdmd.pers_data_management_id = pers_data_management_id_
         AND pdmd.data_subject = data_subject_db_
         AND pdmd.report_order IS NOT NULL
      GROUP BY pdmd.storage_type, pdmd.application_area_id, pdmd.match_by, pdmd.condition
      ORDER BY min(pdmd.seq_no);
   
BEGIN
   General_SYS.Init_Method(lu_name_, 'PERSONAL_DATA_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.key_ref              := Client_SYS.Get_Item_Value('KEY_REF', parameter_attr_); 
   binds$_.data_subject_db      := Client_SYS.Get_Item_Value('DATA_SUBJECT_DB', parameter_attr_); 
   binds$_.operation_date       := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('OPERATION_DATE', parameter_attr_));
   binds$_.action               := Client_SYS.Get_Item_Value('ACTION', parameter_attr_); 
   
   identity_name_               := Client_SYS.Get_Item_Value('NAME', parameter_attr_); 
   remark_                      := Client_SYS.Get_Item_Value('REMARK', parameter_attr_); 

   data_subject_                := Data_Subject_API.Decode(binds$_.data_subject_db);
   operation_date_str_          := Client_SYS.Get_Item_Value('OPERATION_DATE', parameter_attr_);
   binds$_.operation_date       := String_To_Date(operation_date_str_);
   
   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'PERSONAL_DATA_REP', 'Personal Data');

   has_personal_information_ := FALSE;
   par_personal_information_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'PERSONAL_INFORMATIONS');
   OPEN get_personal_information;
   LOOP
      FETCH get_personal_information INTO rec_personal_information_;
      has_personal_information_ := get_personal_information%FOUND OR get_personal_information%ROWCOUNT > 0;
      EXIT WHEN get_personal_information%NOTFOUND;
      
      rec_personal_information_.name           := identity_name_;
      rec_personal_information_.statement_date := trunc(sysdate);
      rec_personal_information_.remark         := remark_;
      rec_personal_information_.operation_date := binds$_.operation_date;
      rec_personal_information_.data_subject   := data_subject_;
      
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'PERSONAL_INFORMATION');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'NAME', rec_personal_information_.name);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATION_DATE', rec_personal_information_.operation_date);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'DATA_SUBJECT', rec_personal_information_.data_subject);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'STATEMENT_DATE', rec_personal_information_.statement_date);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'REMARK', rec_personal_information_.remark);
      
      -- ----------------------------------
      -- PERSONAL DATA BLOCK - begin
      -- ----------------------------------
      has_employee_personal_data_ := FALSE;
      par_employee_personal_data_ := binds$_;
      
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'EMPLOYEE_PERSONAL_DATAS');
      
      OPEN get_personal_data2(binds$_.key_ref, binds$_.data_subject_db, binds$_.operation_date, binds$_.action);
      LOOP
         FETCH get_personal_data2 INTO rec_personal_data_;
         has_employee_personal_data_ := get_personal_data2%FOUND OR get_personal_data2%ROWCOUNT > 0;
         EXIT WHEN get_personal_data2%NOTFOUND;
         
         data_subject_related_ := Personal_Data_Man_Util_API.Get_Connected_Key_Ref(binds$_.key_ref, binds$_.data_subject_db, 'CLEANUP',rec_personal_data_.data_category);
         i_                    := data_subject_related_.FIRST;
         
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'EMPLOYEE_PERSONAL_DATA');
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PERS_DATA_MANAGEMENT_ID', rec_personal_data_.pers_data_management_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PERSONAL_DATA', rec_personal_data_.personal_data);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'DATA_CATEGORY', rec_personal_data_.data_category);
         has_emp_personal_data_row_ := FALSE;
         par_emp_personal_data_row_ := binds$_;

         Xml_Record_Writer_SYS.Start_Element(xml$_, 'EMP_PERSONAL_DATA_ROWS');

         WHILE i_ IS NOT NULL LOOP
            loc_key_ref_              := data_subject_related_(i_).key_ref;
            loc_data_subject_db_      := data_subject_related_(i_).data_subject;
            loc_data_subject_         := Data_Subject_API.Decode(loc_data_subject_db_);
            
            FOR data_row_ IN get_personal_data_row (rec_personal_data_.pers_data_management_id, loc_data_subject_db_) LOOP
               has_emp_personal_data_row_ := TRUE;
               
               -- retrieve personaldata rows here!
               Assert_SYS.Assert_Is_Logical_Unit(data_row_.application_area_id);

               IF data_row_.application_area_id = 'PersonInfo' THEN
                  view_name_ := 'PERSON_INFO_ALL';
               ELSE
                  view_name_  := Dictionary_Sys.Get_Base_View(data_row_.application_area_id);
               END IF;

               IF (rec_personal_data_.data_category = 'ADDRESS') THEN
                  IF data_row_.storage_type = 'LOGICAL_UNIT' THEN 
                     lu_fields_list_ := Create_Address_Lu_List___(rec_personal_data_.pers_data_management_id,data_row_.application_area_id,
                                                                  view_name_,
                                                                  Personal_Data_Man_Det_API.Get_Field_Name(rec_personal_data_.pers_data_management_id,data_row_.seq_no));
                     Process_Address___(xml$_, data_row_.seq_no, loc_data_subject_db_, loc_key_ref_, data_row_.application_area_id, view_name_, data_row_.match_by, data_row_.storage_type, data_row_.condition, lu_fields_list_);
                  ELSIF data_row_.storage_type = 'FIELD' THEN
                     lu_fields_list_ := Create_Address_Fields_List___(rec_personal_data_.pers_data_management_id,data_row_.application_area_id, view_name_);
                     Process_Address___(xml$_, data_row_.seq_no, loc_data_subject_db_, loc_key_ref_, data_row_.application_area_id, view_name_, data_row_.match_by, data_row_.storage_type, data_row_.condition, lu_fields_list_);
                  END IF;
               ELSIF (rec_personal_data_.data_category = 'NAME') THEN
                  --lu_fields_list_ := Create_Fields_List___(rec_personal_data_.pers_data_management_id,data_row_.application_area_id);
                  Create_Fields_List___(lu_fields_list_,lu_ids_,all_fileds_same_lu_,rec_personal_data_.pers_data_management_id,loc_data_subject_db_,NULL);
                  Process_Name___(xml$_, data_row_.seq_no, loc_data_subject_db_, loc_key_ref_, data_row_.application_area_id, view_name_, data_row_.match_by, data_row_.storage_type, data_row_.condition, lu_fields_list_);
               ELSIF (rec_personal_data_.data_category = 'PROPERTY_CODE') THEN
                  field_name_ := Personal_Data_Man_Det_API.Get_Field_Value(rec_personal_data_.pers_data_management_id, data_row_.seq_no);

                  IF ((data_row_.application_area_id = 'CompanyPersProperty') OR (data_row_.application_area_id = 'CompanyEmployeeProperty')) THEN
                     Process_Comp_Emp_Property___(xml$_, data_row_.seq_no, loc_data_subject_db_, loc_key_ref_, data_row_.application_area_id, 'COMPANY_EMPLOYEE_PROPERTY_ALL', data_row_.match_by, data_row_.storage_type, data_row_.condition, field_name_);
                  ELSIF ((data_row_.application_area_id = 'CompPersPropertyField') OR (data_row_.application_area_id = 'CompanyEmpPropertyField')) THEN
                     Process_Multi_Property___(xml$_, data_row_.seq_no, loc_data_subject_db_, loc_key_ref_, data_row_.application_area_id, 'COMPANY_EMP_PROPERTY_FIELD_ALL', data_row_.match_by, data_row_.storage_type, data_row_.condition, field_name_);
                  ELSE
                     Error_SYS.Record_General(lu_name_,'PROPCODEUNKN: Unknown property code :P1', data_row_.application_area_id);
                  END IF;
               ELSE
                  IF data_row_.storage_type = 'LOGICAL_UNIT' THEN
                     NULL;
                     lu_fields_list_ := Personal_Data_Man_Det_API.Get_Field_Name(rec_personal_data_.pers_data_management_id,data_row_.seq_no);
                     IF lu_fields_list_ IS NULL THEN
                        lu_fields_list_ := Create_Default_Fields_List___(data_row_.application_area_id, view_name_);
                     ELSE
                        lu_fields_list_ := REPLACE(lu_fields_list_,',',';');
                     END IF;
                     Process_Logical_Unit___(xml$_, data_row_.seq_no, loc_data_subject_db_,loc_key_ref_,data_row_.application_area_id, view_name_,lu_fields_list_,data_row_.match_by,data_row_.storage_type,data_row_.condition, TRUE);
                  ELSIF data_row_.storage_type = 'FIELD' THEN
                     Create_Fields_List___(lu_fields_list_,lu_ids_,all_fileds_same_lu_,rec_personal_data_.pers_data_management_id, loc_data_subject_db_,data_row_.condition);
                     IF all_fileds_same_lu_ THEN
                        Process_Logical_Unit___(xml$_, data_row_.seq_no, loc_data_subject_db_,loc_key_ref_,data_row_.application_area_id, view_name_,lu_fields_list_,data_row_.match_by,data_row_.storage_type,data_row_.condition, TRUE);
                     ELSE
                        -- This case will be implemented later
                        NULL;
                        --Process_Fields___(xml$_, data_row_.seq_no, loc_data_subject_db_,loc_key_ref_,lu_fields_list_,lu_ids_,data_row_.match_by,data_row_.storage_type,data_row_.condition, TRUE);
                     END IF;
                  ELSE
                     Error_SYS.Record_General(lu_name_,'PERSDATAUNKNOWN: Unknown storage type :P1', data_row_.storage_type);
                  END IF;
               END IF;
            END LOOP;

            i_ := data_subject_related_.NEXT(i_);
         END LOOP;
         
         Xml_Record_Writer_SYS.End_Element(xml$_, 'EMP_PERSONAL_DATA_ROWS');
         Xml_Record_Writer_SYS.End_Element(xml$_, 'EMPLOYEE_PERSONAL_DATA');
         
         binds$_ := par_emp_personal_data_row_;
         IF NOT has_emp_personal_data_row_ THEN
            Add_Result_Row___(result_key$_,
                              binds$_ => binds$_,
                              rec_personal_information_ => rec_personal_information_,
                              rec_employee_personal_data_ => rec_employee_personal_data_,
                              row_no$_ => row_no$_);
         END IF;

         
      END LOOP;
      CLOSE get_personal_data2;
      
      Xml_Record_Writer_SYS.End_Element(xml$_, 'EMPLOYEE_PERSONAL_DATAS');
      binds$_ := par_employee_personal_data_;
      -- ----------------------------------
      -- PERSONAL DATA BLOCK - end
      -- ----------------------------------
      
      -- ----------------------------------
      -- PERSONAL CONSENTS BLOCK - begin
      -- ----------------------------------
      has_consent_purpose_ := FALSE;
      par_consent_purpose_ := binds$_;
      
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'CONSENT_PURPOSES');
      OPEN get_consent_purpose(binds$_.key_ref, binds$_.data_subject_db, binds$_.operation_date, binds$_.action);
      LOOP
         FETCH get_consent_purpose INTO rec_consent_purpose_;
         has_consent_purpose_ := get_consent_purpose%FOUND OR get_consent_purpose%ROWCOUNT > 0;
         EXIT WHEN get_consent_purpose%NOTFOUND;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'CONSENT_PURPOSE');
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONSENT_PURPOSE_ID', rec_consent_purpose_.consent_purpose_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONSENT_PURPOSE_NAME', rec_consent_purpose_.consent_purpose_name);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONSENT_PURPOSE_DESCRIPTION', rec_consent_purpose_.consent_purpose_description);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'EFFECTIVE_ON', rec_consent_purpose_.effective_on);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'EFFECTIVE_UNTIL', rec_consent_purpose_.effective_until);
         
         has_personal_data_management_ := FALSE;
         par_personal_data_management_ := binds$_;
         personal_data_list_  := NULL;

         Xml_Record_Writer_SYS.Start_Element(xml$_, 'PERSONAL_DATA_MANAGEMENTS');
         OPEN get_personal_data_management(data_subject_, rec_consent_purpose_.consent_purpose_id);
         LOOP
            FETCH get_personal_data_management INTO rec_personal_data_management_;
            has_personal_data_management_ := get_personal_data_management%FOUND OR get_personal_data_management%ROWCOUNT > 0;
            EXIT WHEN get_personal_data_management%NOTFOUND;
         
            IF personal_data_list_ IS NOT NULL THEN personal_data_list_ := personal_data_list_ || ';' || rec_personal_data_management_.personal_data;
            ELSE personal_data_list_ := rec_personal_data_management_.personal_data;
            END IF;
         END LOOP;
         CLOSE get_personal_data_management;
         
         IF has_personal_data_management_ THEN
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'PERSONAL_DATA_MANAGEMENT');
            --Xml_Record_Writer_SYS.Add_Element(xml$_, 'PERS_DATA_MANAGEMENT_ID', rec_personal_data_management_.pers_data_management_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PERSONAL_DATA', personal_data_list_);
            Xml_Record_Writer_SYS.End_Element(xml$_, 'PERSONAL_DATA_MANAGEMENT');
            
            Add_Result_Row___(result_key$_,
                              binds$_ => binds$_,
                              rec_personal_information_ => rec_personal_information_,
                              rec_consent_purpose_ => rec_consent_purpose_,
                              rec_personal_data_management_ => rec_personal_data_management_,
                              row_no$_ => row_no$_);
         END IF;
         
         Xml_Record_Writer_SYS.End_Element(xml$_, 'PERSONAL_DATA_MANAGEMENTS');
         binds$_ := par_personal_data_management_;
         IF NOT has_personal_data_management_ THEN
            Add_Result_Row___(result_key$_,
                              binds$_ => binds$_,
                              rec_personal_information_ => rec_personal_information_,
                              rec_consent_purpose_ => rec_consent_purpose_,
                              row_no$_ => row_no$_);
         END IF;

         Xml_Record_Writer_SYS.End_Element(xml$_, 'CONSENT_PURPOSE');
      END LOOP;
      CLOSE get_consent_purpose;
      Xml_Record_Writer_SYS.End_Element(xml$_, 'CONSENT_PURPOSES');
      binds$_ := par_consent_purpose_;
      -- ----------------------------------
      -- PERSONAL CONSENTS BLOCK - end
      -- ----------------------------------
      
      IF NOT has_consent_purpose_ AND NOT has_employee_personal_data_ THEN
         Add_Result_Row___(result_key$_,
                           binds$_ => binds$_,
                           rec_personal_information_ => rec_personal_information_,
                           row_no$_ => row_no$_);
      END IF;

      Xml_Record_Writer_SYS.End_Element(xml$_, 'PERSONAL_INFORMATION');
   END LOOP;
   CLOSE get_personal_information;
   
   Xml_Record_Writer_SYS.End_Element(xml$_, 'PERSONAL_INFORMATIONS');
   binds$_ := par_personal_information_;
   IF NOT has_personal_information_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'PERSONAL_DATA_REP');
   Report_SYS.Finish_Xml_Report('PERSONAL_DATA_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_personal_information%ISOPEN THEN
            CLOSE get_personal_information;
         END IF;
         IF get_consent_purpose%ISOPEN THEN
            CLOSE get_consent_purpose;
         END IF;
         IF get_personal_data_management%ISOPEN THEN
            CLOSE get_personal_data_management;
         END IF;
         IF get_personal_data2%ISOPEN THEN
            CLOSE get_personal_data2;
         END IF;
         IF get_emp_personal_data_row%ISOPEN THEN
            CLOSE get_emp_personal_data_row;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   key_ref_                  IN VARCHAR2,
   data_subject_db_          IN VARCHAR2,
   operation_date_           IN VARCHAR2,
   action_                   IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'PERSONAL_DATA_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (key_ref_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('KEY_REF', key_ref_, parameter_attr_);
   END IF;
   IF (data_subject_db_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DATA_SUBJECT_DB', data_subject_db_, parameter_attr_);
   END IF;
   IF (operation_date_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('OPERATION_DATE', operation_date_, parameter_attr_);
   END IF;
   IF (action_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ACTION', action_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;

FUNCTION Date_To_String (d_ IN DATE) RETURN VARCHAR2 
IS
   s_ VARCHAR2(30);
BEGIN
   s_ := to_char(d_,'YYYYMMDDHH24MISS');
   RETURN s_;
END Date_To_String;

FUNCTION String_To_Date (s_ IN VARCHAR2) RETURN DATE
IS
   d_     DATE;
BEGIN
   d_ := to_date(s_,'YYYYMMDDHH24MISS');
   RETURN d_;
END String_To_Date;

FUNCTION Tokenize_String(str_ IN VARCHAR2, separator_ VARCHAR2 DEFAULT ',') RETURN ArrayOfStrings
IS
  I                INTEGER;
  my_array         ArrayOfStrings;
  spe_reg_exp_     VARCHAR2(20) := '[^' || separator_ || ']+';
BEGIN
  FOR CURRENT_ROW IN (
    with test as    
      (select str_ from dual)
      select regexp_substr(str_, spe_reg_exp_, 1, rownum) SPLIT
        from test
      connect by level <= length (regexp_replace(str_, spe_reg_exp_))  + 1)
  LOOP
    my_array(my_array.COUNT) := ltrim(rtrim(CURRENT_ROW.SPLIT));
  END LOOP;
  
  RETURN my_array;
END Tokenize_String;

FUNCTION Data_Subject_Used_On_Detail_Db(pers_data_management_id_ IN NUMBER,
                                        data_subject_db_         IN VARCHAR2) RETURN VARCHAR2
IS 
   data_subject_          VARCHAR2(200);
BEGIN
   data_subject_ := Data_Subject_API.Decode(data_subject_db_);
   RETURN Personal_Data_Man_Det_API.Data_Subject_Used_On_Details(pers_data_management_id_,data_subject_);
END Data_Subject_Used_On_Detail_Db;

FUNCTION Is_Pers_Data_Purpose_Select_Db(pers_data_management_id_ IN NUMBER,
                                        data_subject_db_         IN VARCHAR2,
                                        purpose_id_              IN NUMBER) RETURN VARCHAR2
IS
   data_subject_          VARCHAR2(200);
BEGIN
   data_subject_ := Data_Subject_API.Decode(data_subject_db_);
   RETURN Pers_Data_Man_Proc_Purpose_Api.Is_Pers_Data_Purpose_Selected(pers_data_management_id_,data_subject_,purpose_id_);
END Is_Pers_Data_Purpose_Select_Db;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END PERSONAL_DATA_RPI;
/
SHOW ERROR