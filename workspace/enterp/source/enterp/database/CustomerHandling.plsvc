-----------------------------------------------------------------------------
--
--  Logical unit: CustomerHandling
--  Component:    ENTERP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181112  thjilk  Created.
--  210305  Smallk  FISPRING20-8936, Overrode CRUD_Default_Copy___().
--  210710  Smallk  FI21R2-2313, Merged LCS bug 159691, removed Check_Default_Contact___().
-----------------------------------------------------------------------------

layer Core;

@ApproveGlobalVariable
customer_id_         VARCHAR2(20);
@ApproveGlobalVariable
customer_address_    VARCHAR2(20);
@ApproveGlobalVariable
glb_address_id_      VARCHAR2(100);
@ApproveGlobalVariable
glb_address_code_    VARCHAR2(100);

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Customer_Info_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
   default_language_db_    VARCHAR2(5);
   country_db_             VARCHAR2(5);
BEGIN
   customer_id_ := key_.customer_id;
   IF (Client_SYS.Item_Exist('DEFAULT_LANGUAGE_DB', attr_)) THEN
      default_language_db_ := Client_SYS.Get_Item_Value('DEFAULT_LANGUAGE_DB', attr_);
      Error_SYS.Check_Not_Null(lu_name_, 'DEFAULT_LANGUAGE_DB', default_language_db_);      
   END IF;
   IF (Client_SYS.Item_Exist('COUNTRY_DB', attr_)) THEN
      country_db_          := Client_SYS.Get_Item_Value('COUNTRY_DB', attr_);
      Error_SYS.Check_Not_Null(lu_name_, 'COUNTRY_DB', country_db_);      
   END IF;
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Customer_Info_Contact_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
BEGIN
   super(etag_, key_, attr_, info_, action_);
   customer_id_       := key_.customer_id;
   customer_address_  := Client_SYS.Get_Item_Value('CUSTOMER_ADDRESS', attr_);
END CRUD_Create___;


@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Customer_Info_Contact_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
BEGIN
   super(etag_, key_, attr_, info_, action_);
   customer_id_       := key_.customer_id;
   customer_address_  := Client_SYS.Get_Item_Value('CUSTOMER_ADDRESS', attr_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Delete___ (
   etag_   IN OUT VARCHAR2,
   key_    IN     Customer_Info_Address_Type_Key,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
BEGIN
   customer_id_      := key_.customer_id;
   glb_address_id_   := key_.address_id;
   glb_address_code_ := key_.address_type_code;
   super(etag_, key_, info_, action_);
END CRUD_Delete___;


PROCEDURE Check_Default_Address_Type___ (
   init_  IN  BOOLEAN,
   info$_ OUT VARCHAR2 ) 
IS
BEGIN
   IF (init_) THEN
      customer_id_       := NULL;
      glb_address_id_    := NULL;
      glb_address_code_  := NULL;
   ELSE
      IF (glb_address_code_ = Address_Type_Code_API.DB_DELIVERY) THEN
         Customer_Info_Address_Type_API.Check_Del_Tax_Info_Exist__(customer_id_, glb_address_id_);
      END IF;
      IF (glb_address_code_ = Address_Type_Code_API.DB_DOCUMENT) THEN
         Customer_Info_Address_Type_API.Check_Doc_Tax_Info_Exist__(customer_id_, glb_address_id_);
      END IF;
   END IF;
   info$_ := Client_SYS.Get_All_Info();
END Check_Default_Address_Type___;


PROCEDURE Check_Create_Category_Customer___ 
IS 
BEGIN
   Error_SYS.Record_General(lu_name_, 'CREATECATEGOTYCUSTOMER: This procedure is used for control permission to create a Customer Info record with category :P1', Customer_Category_API.Decode(Customer_Category_API.DB_CUSTOMER));
END Check_Create_Category_Customer___;


FUNCTION Subject_Key_Ref___ (
   data_subject_db_  IN   VARCHAR2,
   key1_             IN   VARCHAR2,
   key2_             IN   VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Data_Subject_Consent_API.Get_Subject_Key_Ref(data_subject_db_, key1_, key2_);
END Subject_Key_Ref___;


FUNCTION Default_Contact_Info___ (
   person_id_       IN VARCHAR2,
   contact_address_ IN VARCHAR2 ) RETURN Default_Contact_Info_Structure_Rec
IS
   rec_  Default_Contact_Info_Structure_Rec;
BEGIN
   Person_Info_Address_API.Get_Default_Contact_Info(rec_.phone,
                                                    rec_.mobile,
                                                    rec_.email, 
                                                    rec_.fax, 
                                                    rec_.pager, 
                                                    rec_.intercom, 
                                                    rec_.www, 
                                                    person_id_, 
                                                    contact_address_);
   RETURN rec_;
END Default_Contact_Info___;


FUNCTION Default_End_Cust_Addr_Id___ (
   end_customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   addr_id_    VARCHAR2(100);
BEGIN
   addr_id_ := Customer_Info_Address_API.Get_Default_Address(end_customer_id_, Address_Type_Code_API.Decode(Address_Type_Code_API.DB_DELIVERY));
   RETURN addr_id_;
END Default_End_Cust_Addr_Id___;


FUNCTION End_Cust_Address_Details___ (
   end_customer_id_  IN VARCHAR2,
   end_cust_addr_id_ IN VARCHAR2 ) RETURN Adress_Details_Structure_Rec
IS
   rec_      Adress_Details_Structure_Rec;
BEGIN
   rec_.address1     := Customer_Info_Address_API.Get_Address1(end_customer_id_, end_cust_addr_id_);
   rec_.address2     := Customer_Info_Address_API.Get_Address2(end_customer_id_, end_cust_addr_id_);
   rec_.address3     := Customer_Info_Address_API.Get_Address3(end_customer_id_, end_cust_addr_id_);
   rec_.address4     := Customer_Info_Address_API.Get_Address4(end_customer_id_, end_cust_addr_id_);
   rec_.address5     := Customer_Info_Address_API.Get_Address5(end_customer_id_, end_cust_addr_id_);
   rec_.address6     := Customer_Info_Address_API.Get_Address6(end_customer_id_, end_cust_addr_id_);
   rec_.zip_code     := Customer_Info_Address_API.Get_Zip_Code(end_customer_id_, end_cust_addr_id_);
   rec_.city         := Customer_Info_Address_API.Get_City(end_customer_id_, end_cust_addr_id_);
   rec_.state        := Customer_Info_Address_API.Get_State(end_customer_id_, end_cust_addr_id_);
   rec_.county       := Customer_Info_Address_API.Get_County(end_customer_id_, end_cust_addr_id_);
   rec_.country      := Customer_Info_Address_API.Get_Country_Code(end_customer_id_, end_cust_addr_id_);
   rec_.country_desc := Customer_Info_Address_API.Get_Country(end_customer_id_, end_cust_addr_id_);
   rec_.end_customer_category := Customer_Info_API.Get_Customer_Category_Db(end_customer_id_);
   RETURN rec_;
END End_Cust_Address_Details___;


@Override
PROCEDURE CRUD_Default___ (
   key_  IN     Customer_Info_Address_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT    VARCHAR2 )
IS
   cust_id_      VARCHAR2(200);
   country_      VARCHAR2(200);
   country_db_   VARCHAR2(200);
BEGIN
   cust_id_     := Client_SYS.Get_Item_Value('CUSTOMER_ID', attr_);
   country_db_  := Customer_Info_API.Get_Country_Db(cust_id_);
   country_     := Iso_Country_API.Decode(country_db_);
   super(key_, attr_, info_);
   Client_SYS.Add_To_Attr('COUNTRY_DESC', country_, attr_);
   Client_SYS.Add_To_Attr('COUNTRY_DB', country_db_, attr_);
END CRUD_Default___;


PROCEDURE Add_Default_Address_Types___ (
   key_ IN Customer_Info_Address_Key )
IS 
BEGIN
   Customer_Info_Address_Type_API.Add_Default_Address_Types(key_.customer_id, key_.address_id);
END Add_Default_Address_Types___;


FUNCTION Fetch_Country_Description___ (
   country_code_ IN VARCHAR2 )  RETURN VARCHAR2
IS 
BEGIN
   RETURN Iso_Country_API.Decode(country_code_);
END Fetch_Country_Description___;


@Override
PROCEDURE CRUD_Default_Copy___ (
   rec_ IN OUT Customer_Info_Rec )
IS
BEGIN
   super(rec_);
   rec_.creation_date := TRUNC(SYSDATE); 
END CRUD_Default_Copy___;
