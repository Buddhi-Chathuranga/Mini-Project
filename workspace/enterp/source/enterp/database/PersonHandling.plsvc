-----------------------------------------------------------------------------
--
--  Logical unit: PersonHandling
--  Component:    ENTERP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  180524  ThJilk  FIUXXW2-212, Created.
--  180528  MaRalk  FIUXXW2-285, Added method Update_Address___.
--  180614  MaRalk  FIUXXW2-396, Moved methods Field_Visibility___, Address_Presentation_Details___, Get_Sysdate___ 
--  180614          Data_Source_Refresh___, Default_Country___ to NewAndEditAddressCommonDialog.plsvc.
--  180614          Moved Update_Detailed_Address___ to DetailAddressDialog.plsvc.
--  180801  GaYalk  FIUXXW2-445, Added Get_Default_Valid_Date___ to facilitate the valid documents filter
--  181130  thjilk  FIUXX-15610, Removed methods Add_New_Address___, Update_Address___, Delete_Address___, Check_Delete_Address___
--  210305  Smallk  FISPRING20-8936, Overrode CRUD_Default_Copy___().
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Person_Info_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
   blocked_for_use_                 person_info_tab.blocked_for_use%TYPE;
   blocked_for_use_supplier_        person_info_tab.blocked_for_use_supplier%TYPE;
   cust_contact_exist_              VARCHAR2(200);
   update_con_block_for_crm_objs_   VARCHAR2(200);
   customer_contact_                person_info_tab.customer_contact%TYPE;
   add_info_                        VARCHAR2(2000);
BEGIN
   blocked_for_use_               := Client_SYS.Get_Item_Value('BLOCKED_FOR_USE_DB', attr_);
   blocked_for_use_supplier_      := Client_SYS.Get_Item_Value('BLOCKED_FOR_USE_SUPPLIER_DB', attr_);
   customer_contact_              := Person_Info_API.Get_Customer_Contact_Db(key_.person_id);
   cust_contact_exist_            := Customer_Info_Contact_API.Is_Customer_Contact(key_.person_id);
   update_con_block_for_crm_objs_ := 'FALSE';
   IF (blocked_for_use_ = 'TRUE' AND customer_contact_ = 'TRUE') THEN
      $IF Component_Crm_SYS.INSTALLED $THEN 
         IF (cust_contact_exist_ = 'TRUE') THEN
            Client_SYS.Add_Warning(lu_name_, 'UNBLOCKCUSTCONTACTCRM: The contact will be blocked for use as a new customer contact. Do you want to select the Blocked for Use in CRM box in Customer page for existing customer contacts?');        
            update_con_block_for_crm_objs_ := 'TRUE'; 
         ELSE
            Client_SYS.Add_Info(lu_name_, 'UNBLOCKCUSTCONTACTCRMINFO: The contact will be blocked for use as a new customer contact');
            update_con_block_for_crm_objs_ := 'FALSE';
         END IF;
      $ELSE   
         Client_SYS.Add_Info(lu_name_, 'UNBLOCKCUSTCONTACTCRMINFO: The contact will be blocked for use as a new customer contact');
         IF (cust_contact_exist_ = 'TRUE') THEN
            update_con_block_for_crm_objs_ := 'TRUE'; 
         ELSE
            update_con_block_for_crm_objs_ := 'FALSE';
         END IF;
      $END
   END IF;
   IF (blocked_for_use_ = 'FALSE' AND customer_contact_ = 'TRUE') THEN
      $IF Component_Crm_SYS.INSTALLED $THEN 
         IF (cust_contact_exist_ = 'TRUE') THEN
            Client_SYS.Add_Warning(lu_name_, 'BLOCKCUSTCONTACTCRM: The contact will be allowed (i.e., un-blocked) for use as a new customer contact. Do you want to clear the Blocked for Use in CRM box in Customer page for existing customer contacts?');        
            update_con_block_for_crm_objs_ := 'TRUE'; 
         ELSE
            Client_SYS.Add_Info(lu_name_, 'BLOCKCUSTCONTACTCRMINFO: The contact will be allowed (i.e., un-blocked) for use as a new customer contact');
            update_con_block_for_crm_objs_ := 'FALSE';
         END IF;
      $ELSE   
         Client_SYS.Add_Info(lu_name_, 'BLOCKCUSTCONTACTCRMINFO: The contact will be allowed (i.e., un-blocked) for use as a new customer contact');
         IF (cust_contact_exist_ = 'TRUE') THEN
            update_con_block_for_crm_objs_ := 'TRUE'; 
         ELSE
            update_con_block_for_crm_objs_ := 'FALSE';
         END IF;
      $END
   END IF;
   IF (blocked_for_use_supplier_ = 'TRUE') THEN
      Client_SYS.Add_Info(lu_name_, 'BLOCKSUPPCONTACTINFO: The contact will be blocked for use as a new supplier contact');
   ELSIF (blocked_for_use_supplier_ = 'FALSE') THEN
      Client_SYS.Add_Info(lu_name_, 'UNBLOCKSUPPCONTACTINFO: The contact will be allowed (i.e., un-blocked) for use as a new supplier contact');
   END IF;
   Client_SYS.Set_Item_Value('UPDATE_CON_BLOCK_FOR_CRM_OBJS', update_con_block_for_crm_objs_, attr_);
   add_info_ := Client_SYS.Get_All_Info();
   super(etag_, key_, attr_, info_, action_);
   info_ := info_ || add_info_;
END CRUD_Update___;


FUNCTION Subject_Key_Ref___ (
   data_subject_db_ IN VARCHAR2,
   key1_            IN VARCHAR2,
   key2_            IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Data_Subject_Consent_API.Get_Subject_Key_Ref(data_subject_db_, key1_, key2_);
END Subject_Key_Ref___;


FUNCTION Get_Default_Valid_Date___ RETURN Valid_Documents_Structure_Rec
IS
   rec_ Valid_Documents_Structure_Rec;
BEGIN
   rec_.valid_date := TRUE; 
   RETURN rec_;
END Get_Default_Valid_Date___;


@Override
PROCEDURE CRUD_Default___ (
   key_  IN     Person_Info_Address_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT    VARCHAR2 )
IS
   person_id_  VARCHAR2(200);
   country_    VARCHAR2(200);
   country_db_ VARCHAR2(200);
BEGIN
   person_id_  := Client_SYS.Get_Item_Value('PERSON_ID', attr_);
   country_db_ := Person_Info_API.Get_Country_Db(person_id_);
   country_    := Iso_Country_API.Decode(country_db_);
   super(key_, attr_, info_);
   Client_SYS.Add_To_Attr('COUNTRY_DB', country_db_, attr_);
   Client_SYS.Add_To_Attr('COUNTRY_DESC', country_, attr_);
END CRUD_Default___;


PROCEDURE Add_Default_Address_Types___ (
   key_ IN Person_Info_Address_Key )
IS
BEGIN
   Person_Info_Address_Type_API.Add_Default_Address_Types(key_.person_id, key_.address_id);
END Add_Default_Address_Types___;


FUNCTION Fetch_Country_Description___ (
   country_code_ IN VARCHAR2 )  RETURN VARCHAR2
IS 
BEGIN
   RETURN Iso_Country_API.Decode(country_code_);
END Fetch_Country_Description___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Person_Info_Address_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
BEGIN
   Client_SYS.Add_To_Attr('SOURCE_WINDOW', 'PERSON_INFO', attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Comm_Method_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
   person_id_     VARCHAR2(200);
   address_id_    VARCHAR2(100);
   check_access_  VARCHAR2(5);
   is_protected_  VARCHAR2(5);
BEGIN
   person_id_    := Client_SYS.Get_Item_Value('IDENTITY', attr_);
   address_id_   := Client_SYS.Get_Item_Value('ADDRESS_ID', attr_);
   check_access_ := NVL(Person_Info_API.Check_Access(person_id_), 'FALSE');
   is_protected_ := NVL(Person_Info_API.Is_Protected(person_id_), 'FALSE');
   IF ((check_access_ = 'FALSE') AND (is_protected_ = 'TRUE')) THEN
      IF (address_id_ IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'REQADDRID: The Address ID is mandatory.');
      END IF;   
   END IF;
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;


@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Comm_Method_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT    VARCHAR2,
   action_ IN     VARCHAR2 )
IS
   address_id_    VARCHAR2(100);
   check_access_  VARCHAR2(5);
   is_protected_  VARCHAR2(5);
   rec_           person_info_comm_method2%ROWTYPE;
   CURSOR get_comm_method_addr (identity_ IN VARCHAR2, comm_id_ IN VARCHAR2) IS
      SELECT *
      FROM   person_info_comm_method2
      WHERE  party_type = Party_Type_API.Decode(Party_Type_API.DB_PERSON)
      AND    identity   = identity_
      AND    comm_id    = comm_id_;
BEGIN
   address_id_   := Client_SYS.Get_Item_Value('ADDRESS_ID', attr_);
   check_access_ := NVL(Person_Info_API.Check_Access(key_.identity), 'FALSE');
   is_protected_ := NVL(Person_Info_API.Is_Protected(key_.identity), 'FALSE');
   IF ((check_access_ = 'FALSE') AND (is_protected_ = 'TRUE')) THEN
      IF (address_id_ IS NULL) THEN
         OPEN get_comm_method_addr (key_.identity, key_.comm_id);
         FETCH get_comm_method_addr INTO rec_;
         CLOSE get_comm_method_addr;
         IF (rec_.address_id IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'REQADDRID: The Address ID is mandatory.');
         END IF;
      END IF;
   END IF;
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Default_Copy___ (
   rec_ IN OUT Person_Info_Rec )
IS
BEGIN
   super(rec_);
   rec_.creation_date := TRUNC(SYSDATE);
END CRUD_Default_Copy___;
