-----------------------------------------------------------------------------
--
--  Logical unit: DataProcessingPurposeConfigurationHandling
--  Component:    ENTERP
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___ (
   rec_ IN Data_Processing_Purpose_Configuration_Virtual_Rec )
IS
   key_    Data_Processing_Purpose_Configuration_Virtual_Key;
BEGIN
   super(rec_);
   key_.objkey := rec_.objkey;
   Fetch_Processing_Purpose_Details___(key_, rec_.personal_data_management_id, rec_.data_subject);
END CRUD_Create___;


@Override
PROCEDURE CRUD_Update___ (
   old_ IN Data_Processing_Purpose_Virtual_Rec,
   new_ IN Data_Processing_Purpose_Virtual_Rec )
IS
BEGIN
   super(old_, new_);
   IF (new_.selected = true) THEN
      Pers_Data_Man_Proc_Purpose_API.New_Data_Proc_Purpose(new_.purpose_id, new_.personal_data_management_id, new_.data_subject);
   ELSIF (new_.selected = false) THEN
      Pers_Data_Man_Proc_Purpose_API.Remove_Data_Proc_Purpose(new_.purpose_id, new_.personal_data_management_id, new_.data_subject);
   END IF;
END CRUD_Update___;


PROCEDURE Fetch_Processing_Purpose_Details___ (
   key_                         IN Data_Processing_Purpose_Configuration_Virtual_Key,
   personal_data_management_id_ IN NUMBER,
   data_subject_                IN VARCHAR2 )
IS
   detail_key_rec_             Data_Processing_Purpose_Virtual_Key;
   detail_rec_                 Data_Processing_Purpose_Virtual_Rec;
   CURSOR get_purpose_configuration_details IS
      SELECT purpose_id,
             Pers_Data_Process_Purpose_API.Get_Purpose_Name(purpose_id)   purpose_name,
             Pers_Data_Man_Proc_Purpose_API.Is_Pers_Data_Purpose_Selected(personal_data_management_id_, data_subject_, purpose_id)   selected
      FROM   pers_data_process_purpose
      ORDER BY purpose_id;
BEGIN
   FOR rec_ IN Get_Data_Processing_Purpose_Array___(key_) LOOP
      detail_key_rec_.objkey := rec_.objkey;
      CRUD_Delete___(Get_Record___(detail_key_rec_));
   END LOOP;
   FOR rec_ IN get_purpose_configuration_details LOOP
      detail_rec_.personal_data_management_id := personal_data_management_id_;
      detail_rec_.data_subject := data_subject_;
      detail_rec_.purpose_id := rec_.purpose_id;
      detail_rec_.purpose_name := rec_.purpose_name;
      detail_rec_.selected := CASE rec_.selected WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
      New_Detail___(key_, detail_rec_);
   END LOOP;
END Fetch_Processing_Purpose_Details___;


FUNCTION Set_Data_Subject___ (
   personal_data_management_id_ IN NUMBER ) RETURN VARCHAR2
IS
   data_subject_  VARCHAR2(100);
   CURSOR get_data_subjects IS
      SELECT data_subject
      FROM   data_subject d
      WHERE  d.personal_data_management_db = 'TRUE' AND data_subject_id NOT IN ('USER','DEPENDENTS','BUSINESS_CONTACTS')
      AND    EXISTS (SELECT 1
                     FROM   personal_data_man_det_tab p
                     WHERE  p.pers_data_management_id = personal_data_management_id_
                     AND    p.exclude_from_cleanup = 'FALSE'
                     AND    Report_SYS.Parse_Parameter(d.data_subject_id, Personal_Data_Man_Util_api.Get_Related_Data_Subjects(p.data_subject, 'REVERSE')) = 'TRUE')
      ORDER  BY data_subject_id ASC;
BEGIN
   OPEN get_data_subjects;
   FETCH get_data_subjects INTO data_subject_;
   CLOSE get_data_subjects; 
   RETURN data_subject_;
END Set_Data_Subject___;