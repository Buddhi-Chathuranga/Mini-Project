-----------------------------------------------------------------------------
--  Module : ENTERP
--
--  Purpose: File for upgrade from Enterp 2.1.0 to 3.0.0
--
--  File   : 300.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  --------------------------------------------------
--  151008   hiralk  Created
--  151026   Hecolk  STRFI-472, Removal of Oracle Default values of DB columns
--  151102   Hairlk  ORA-1404, Removed obsolete view SUPPLIER_INFO_RFQ_LOV
--  151109   PRatlk  STRFI-308, Removed obsolete views
--  160216   TiRalk  STRFI-1209, Added SRM_TEXT_ID$ to SUPPLIER_INFO_CONTACT_TAB.
--  160226   DipeLK  STRLOC-154, Added 2new columns for address_presentation_tab.
--  160226   DipeLk  STRLOC-154, Added new table called address_validation.
--  160412   reanpl  STRLOC-346, Added new address columns to COMPANY_ADDRESS_TAB
--  160413   reanpl  STRLOC-346, Added new address columns to PERSON_INFO_ADDRESS_TAB
--  160413   reanpl  STRLOC-346, Added new address columns to CUSTOMER_INFO_ADDRESS_TAB
--  160415   reanpl  STRLOC-346, Added new address columns to MANUFACTURER_INFO_ADDRESS_TAB
--  160418   reanpl  STRLOC-346, Added new address columns to OWNER_INFO_ADDRESS_TAB
--  160418   reanpl  STRLOC-346, Added new address columns to FORWARDER_INFO_ADDRESS_TAB
--  160418   reanpl  STRLOC-346, Added new address columns to CUSTOMS_INFO_ADDRESS_TAB
--  160418   chgulk  STRLOC-346, Added new address columns to SUPPLIER_INFO_ADDRESS_TAB
--  160420   reanpl  STRLOC-346, Added new address columns to TAX_OFFICE_INFO_ADDRESS_TAB
--  160505   chgulk  STRLOC-369, Renamed Address_validation_tab to Address_Setup_Tab.
--  160524   ChguLK  STRLOC-420, Update edit_layout column in ADDRESS_PRESENTATION_TAB.
--  160706   SamGLK  STRSA-7401, PRIMARY_SCHEDULING is added to Employee_Emp_Tab.
--  160919   Shdilk  STRFI-3548, Remove Address_Type view and Address_Type_API
--  161017   Shdilk  STRFI-3809, Remove Dynamic_Sql_Util_API package
--  161214   ovjose  STRFI-4284, added key_lu_attribute_tab. PROG removed from key_lu_translation_tab
--  161228   ChJalk  Updated the value of the column party in CUSTOMER_INFO_ADDRESS_TYPE_TAB with the value of the column party in CUSTOMER_INFO_ADDRESS_TAB, if they are different.
--  170131   ANDJSE  Added B2B-tables (B2B_CUSTOMER_USER_TAB and B2B_SUPPLIER_USER_TAB) and populated them with old B2B-connections.
--  170320   HasRLK  Adding index to SUPPLIER_INFO_CONTACT_TAB and CUSTOMER_INFO_CONTACT_TAB
--  170705   Thaslk  STRFI-9033 - Adding zip_code_table
--  170831   Thaslk  STRFI-9802 - Removing obselete view CUSTOMER_INFO_CONTACT_LOV_PUB
--  170925   Shdilk  STRFI-10168, Add new column ROWSTATE to PERSON_INFO_TAB
--  171023   Ajpelk  STRFI-10382, Change COLUMN Titles OF EXEMPT_EXPIRY_DATE and EXEMPT_ISSUE_DATE
--  171103   reanpl  CRUISE-521, Added company_address_id to BRANCH_TAB
--  171103   reanpl  CRUISE-523, Added customer_branch to CUSTOMER_INFO_ADDRESS_TAB
--  171103   reanpl  CRUISE-523, Added supplier_branch to SUPPLIER_INFO_ADDRESS_TAB
--  171128   paralk  STRFI-10895, Added EXT_TAX_SYSTEM_PARAMETERS_TAB
--  180123   kriwpl  LCS-139441, GDPR
--  180201   piwrpl  LCS-139441, GDPR
--  180810   Nirylk  LCS-143494, Fixed Upgrade issues.
--  180824   Chwilk  Bug 143765, Upgrade issue with b2b_supplier_user_tab.
-----------------------------------------------------------------------------

SET SERVEROUTPUT ON

DEFINE MODULE = 'ENTERP'

------------------------------------------------------------------------------------------

-- Instructions for upg files:

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-" line and a empty line.
-- The section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- The "start tag" (in this case "Example_Tab"), should be placed in "List of upgrade sections".
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line.

-- If the Pl block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
-- If the Pl block not has DML instructions, there should not be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any column in an upgrade file !

-- Don't forget performance when updating large tabled !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL update
-- If possible, try to put several updates together in one statement.

------------------------------------------------------------------------------------------

-- List of upgrade sections - Tax_Liability_Tab
--                            Person_Info_Tab
--                            Customer_Info_Tab
--                            Customer_Info_Address_Tab
--                            Comm_Method_Tab
--                            Supplier_Info_Contact_Tab
--                            Supplier_Info_Tab
--                            Create_Company_Tem_Detail_Tab
--                            Company_Tab
--                            Company_Delivery_Tax_Exemp_Tab
--                            Copying_Info_Tab
--                            Customer_Info_Contact_Tab
--                            Enterp_Address_Country_Tab
--                            Supplier_Info_Address_Tab
--                            Crecomp_Component_Lu_Tab
--                            Company_Group_Tab
--                            Companies_Per_Group_Tab
--                            Source_Company_Tab
--                            Target_Company_Tab
--                            Basic_Data_Window_Tab
--                            Company_Basic_Data_Window_Tab
--                            Copy_Basic_Data_Log_Tab
--                            Copy_Basic_Data_Log_Detail_Tab
--                            Target_Company_Data_Tmp
--                            Address_Presentation_Tab
--                            Address_Setup_Tab
--                            Company_Address_Tab
--                            Person_Info_Address_Tab
--                            Manufacturer_Info_Address_Tab
--                            Owner_Info_Address_Tab
--                            Forwarder_Info_Address_Tab
--                            Customs_Info_Address_Tab
--                            Supplier_Info_Address_Tab
--                            Tax_Office_Info_Address_Tab
--                            Remove_Company_Tab
--                            Key_Lu_Attribute_Tab
--                            Address_Definition_Tab
--                            B2b_Customer_User_Tab
--                            B2b_Supplier_User_Tab
--                            Zip_Code_Tab
--                            Forwarder_Info_Tab
--                            Branch_Tab
--                            Ext_Tax_System_Parameters_Tab
--                            Data_Subject_Tab
--                            Personal_Data_Management_Tab
--                            Personal_Data_Man_Det_Tab
--                            Pers_Data_Process_Purpose_Tab
--                            Pers_Data_Man_Proc_Purpose_Tab
--                            Personal_Data_Cleanup_Log_Tab
--                            Data_Subject_Consent_Tab
--                            Data_Subject_Consent_Oper_Tab
--                            Data_Subject_Consent_Purp_Tab
--                            Anonymization_Setup_Tab

------------------------------------------------------------------------------------------

-- ***** Tax_Liability_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_1');
PROMPT Adding columns tax_liability, tax_liability_type to tax_liability_tab
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TAX_LIABILITY_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY_TYPE', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_2');
PROMPT Copying data to tax_liability_tab
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'TAX_LIABILITY_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'LIABILITY_TYPE') AND Database_SYS.Column_Exist(table_name_, 'TAXABLE')) THEN
      stmt_ :=
         'UPDATE tax_liability_tab
          SET tax_liability         = liability_type,
              tax_liability_type    = taxable
          WHERE tax_liability       IS NULL
          AND   tax_liability_type  IS NULL
         ';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_3');
PROMPT Updating columns tax_liability, tax_liability_type of tax_liability_tab to not nullable
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TAX_LIABILITY_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_ , 'M', column_ , TRUE);
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY_TYPE', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_ , 'M', column_ , TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_4');
PROMPT Drop primary key constraint on tax_liability_tab
DECLARE
   table_name_      VARCHAR2(30) := 'TAX_LIABILITY_TAB';
   index_name_      VARCHAR2(30) := 'TAX_LIABILITY_PK';
BEGIN
   Database_SYS.Remove_Constraints(table_name_, index_name_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_5');
PROMPT Updating columns liability_type, taxable of tax_liability_tab to nullable
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TAX_LIABILITY_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('LIABILITY_TYPE', NULL, 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TAXABLE', NULL, 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_6');
PROMPT Create primary key constraint on tax_liability_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TAX_LIABILITY_TAB';
   index_name_ VARCHAR2(30) := 'TAX_LIABILITY_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TAX_LIABILITY');
   Database_SYS.Set_Table_Column(columns_, 'COUNTRY_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_7');
PROMPT Increase length of column system_def in tax_liability_tab
DECLARE
   table_name_    VARCHAR2(30) := 'TAX_LIABILITY_TAB';
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SYSTEM_DEF', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_8');
PROMPT Adding default values to column system_def in tax_liability_tab
BEGIN
   UPDATE tax_liability_tab
   SET    system_def = 'FALSE'
   WHERE  system_def IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_9');
PROMPT Set column system_def in tax_liability_tab to not null
DECLARE
   table_name_    VARCHAR2(30) := 'TAX_LIABILITY_TAB';
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SYSTEM_DEF', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_10');
PROMPT Adding default values to column description in tax_liability_tab
BEGIN
   UPDATE tax_liability_tab
   SET    description = tax_liability
   WHERE  description IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_11');
PROMPT Set column description in tax_liability_tab to not null
DECLARE
   table_name_    VARCHAR2(30) := 'TAX_LIABILITY_TAB';
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_12');
PROMPT Set tax_liability_type column values rde to tax in tax_liability_tab
BEGIN
   UPDATE TAX_LIABILITY_TAB
   SET    TAX_LIABILITY_TYPE = 'TAX'
   WHERE  TAX_LIABILITY_TYPE = 'RDE';
   COMMIT;
END;
/

-- ***** Tax_Liability_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Person_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_13');
PROMPT Adding columns to person_info_tab
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'PERSON_INFO_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('SUPPLIER_CONTACT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE_SUPPLIER', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_14');
PROMPT Adding values to column supplier_contact in person_info_tab
BEGIN
   UPDATE person_info_tab pi
   SET    pi.supplier_contact = 'TRUE'
   WHERE  EXISTS (SELECT ci.person_id
                  FROM supplier_info_contact_tab ci
                  WHERE ci.person_id = pi.person_id)
   AND supplier_contact IS NULL;

   UPDATE person_info_tab pi
   SET    pi.supplier_contact = 'FALSE'
   WHERE  supplier_contact IS NULL;

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_15');
PROMPT Setting columns supplier_contact in person_info_tab as not null
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'PERSON_INFO_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('SUPPLIER_CONTACT', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_16');
PROMPT Convert rowversion to date type
DECLARE
   table_name_ VARCHAR2(30) := 'PERSON_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Column_Type(table_name_, 'ROWVERSION') = 'NUMBER') THEN
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column(table_name_, 'ROWVERSION_TMP', 'ROWVERSION', TRUE);
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N', 'SYSDATE', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_17');
PROMPT Trim column name in person_info_tab
BEGIN
   UPDATE person_info_tab
   SET    name = TRIM(name)
   WHERE  name != ' ' AND name IS NOT NULL AND (name LIKE '% ' OR name LIKE ' %');
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_18');
PROMPT Update alias in person_info_tab
DECLARE
   stmt_ VARCHAR2(1000);
BEGIN
   IF (Database_SYS.Component_Active('PERSON')) THEN
      stmt_ := 'UPDATE person_info_tab p
                SET p.alias = (SELECT t.name6
                               FROM   pers_tab t
                               WHERE  t.person_id = p.person_id
                               AND    t.name6 IS NOT NULL)
                WHERE p.alias IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

-- ***** Person_Info_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Customer_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_19');
PROMPT Convert rowversion to date type
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Column_Type(table_name_, 'ROWVERSION') = 'NUMBER') THEN
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column(table_name_, 'ROWVERSION_TMP', 'ROWVERSION', TRUE);
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N', 'SYSDATE', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_20');
PROMPT Adding column to customer_info_tab
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'B2B_CUSTOMER', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_21');
PROMPT Updating column b2b_customer in customer_info_tab
BEGIN
   UPDATE customer_info_tab
   SET    b2b_customer = 'TRUE'
   WHERE  customer_id IN (SELECT value
                          FROM   fnd_user_property
                          WHERE  name IN ('CUSTOMER_ID','CUSTOMER_NO'));
   COMMIT;
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_22');
PROMPT Updating customer_info_tab, changing default language code 'us' to 'en' to co-op with upgrades
BEGIN
   UPDATE customer_info_tab
   SET    default_language = 'en'
   WHERE  default_language = 'us';
   COMMIT;
END;
/

-- ***** Customer_Info_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Customer_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_23');
PROMPT Convert rowversion to date type
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_ADDRESS_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Column_Type(table_name_, 'ROWVERSION') = 'NUMBER') THEN
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column(table_name_, 'ROWVERSION_TMP', 'ROWVERSION', TRUE);
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N', 'SYSDATE', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_24');
PROMPT Adding values to column in_city of customer_info_address_tab
BEGIN
   IF (Database_SYS.Get_Column_Nullable('CUSTOMER_INFO_ADDRESS_TAB', 'IN_CITY') = 'Y') THEN
      UPDATE customer_info_address_tab
      SET    in_city = 'FALSE'
      WHERE  in_city IS NULL;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_25');
PROMPT Modifying column in_city of customer_info_address_tab to not nullable and resetting default value
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_ADDRESS_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('IN_CITY', nullable_ => 'N', default_value_ => '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_26');
PROMPT Adding new columns to customer_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_27');
PROMPT Add new column customer_branch to customer_info_address_tab
DECLARE
   table_name_  VARCHAR2(30) := 'CUSTOMER_INFO_ADDRESS_TAB';
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CUSTOMER_BRANCH', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_28');
PROMPT Updating party in customer_info_address_type_tab to the party value in customer_info_address_tab if they are different
DECLARE
   CURSOR get_diff_party_records IS
      SELECT ciat.party, ciatt.rowid obj_id
      FROM   customer_info_address_tab ciat, customer_info_address_type_tab ciatt
      WHERE  ciatt.customer_id = ciat.customer_id
      AND    ciatt.address_id = ciat.address_id
      AND    ciatt.party != ciat.party;
   TYPE party_list_tab IS TABLE OF get_diff_party_records%ROWTYPE INDEX BY PLS_INTEGER;
   party_list_   party_list_tab;
   bulk_limit_   CONSTANT NUMBER := 10000;
BEGIN
   OPEN get_diff_party_records;
   LOOP
      FETCH get_diff_party_records BULK COLLECT INTO party_list_ LIMIT bulk_limit_;
      EXIT WHEN party_list_.COUNT = 0;
      FORALL i IN 1..party_list_.COUNT
         UPDATE customer_info_address_type_tab
         SET    party = party_list_(i).party
         WHERE  rowid = party_list_(i).obj_id;
   END LOOP;
   CLOSE get_diff_party_records;
   COMMIT;
END;
/

-- ***** Customer_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Comm_Method_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_29');
PROMPT Convert rowversion to date type
DECLARE
   table_name_ VARCHAR2(30) := 'COMM_METHOD_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Column_Type(table_name_, 'ROWVERSION') = 'NUMBER') THEN
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column(table_name_, 'ROWVERSION_TMP', 'ROWVERSION', TRUE);
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N', 'SYSDATE', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;
END;
/

-- ***** Comm_Method_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supplier_Info_Contact_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_30');
PROMPT Adding columns to supplier_info_contact_tab
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_CONTACT_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('DEPARTMENT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MAIN_REPRESENTATIVE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SRM_TEXT_ID$', 'VARCHAR2(50)', 'N', 'SYS_GUID()');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CONNECT_ALL_SUPP_ADDR', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('SUPPLIER_INFO_CONTACT_TAB', 'ADD', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_31');
PROMPT Creating indexes for supplier_info_contact_tab
DECLARE
   index_name_ VARCHAR2(30) := 'SUPPLIER_INFO_CONTACT_SX1';
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_CONTACT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SRM_TEXT_ID$');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'SUPPLIER_INFO_CONTACT_TAB';
   index_name_  VARCHAR2(30) := 'SUPPLIER_INFO_CONTACT_IX1';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERSON_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Supplier_Info_Contact_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supplier_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_32');
PROMPT Adding columns to supplier_info_tab
DECLARE
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SUPPLIER_CATEGORY', 'VARCHAR2(20)', 'N', '''SUPPLIER''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWTYPE', 'VARCHAR2(30)', 'N', '''SupplierInfo''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('B2B_SUPPLIER', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_33');
PROMPT Updating column b2b_supplier in supplier_info_tab
BEGIN
   UPDATE supplier_info_tab
   SET    b2b_supplier = 'TRUE'
   WHERE  supplier_id IN (SELECT value
                          FROM   fnd_user_property
                          WHERE  name IN ('CONTRACTOR_ID','VENDOR_NO'));
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_34');
PROMPT Convert rowversion to date type
DECLARE
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Column_Type(table_name_, 'ROWVERSION') = 'NUMBER') THEN
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column(table_name_, 'ROWVERSION_TMP', 'ROWVERSION', TRUE);
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N', 'SYSDATE', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;
END;
/

-- ***** Supplier_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Create_Company_Tem_Detail_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_35');
PROMPT Adding columns to create_company_tem_detail_tab
DECLARE
   table_name_ VARCHAR2(30) := 'CREATE_COMPANY_TEM_DETAIL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPONENT', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LU', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C2', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C3', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C4', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C5', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C6', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C7', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C8', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C9', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C10', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C11', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C12', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C13', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C14', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C15', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C16', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C17', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C18', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C19', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C20', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C21', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C22', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C23', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C24', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C25', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C26', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C27', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C28', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C29', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_C30', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N1', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N2', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N3', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N4', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N5', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N6', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N7', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N8', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N9', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N10', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N11', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N12', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N13', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N14', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N15', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N16', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N17', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N18', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N19', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_N20', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_D1', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_D2', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_D3', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_D4', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXT_D5', 'DATE', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_36');
PROMPT Set default values to c12 column in create_company_tem_detail_tab.
BEGIN
   UPDATE create_company_tem_detail_tab
   SET    c12 = c2
   WHERE  component = 'INVOIC'
   AND    lu = 'InvoiceType'
   AND    c12 IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_37');
PROMPT Adding values to column selected of create_company_tem_detail_tab
BEGIN
   IF (Database_SYS.Get_Column_Nullable('CREATE_COMPANY_TEM_DETAIL_TAB', 'SELECTED') = 'Y') THEN
      UPDATE create_company_tem_detail_tab
      SET    selected = 'TRUE'
      WHERE  selected IS NULL;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_38');
PROMPT Modifying column selected of create_company_tem_detail_tab to not nullable and resetting default value
DECLARE
   table_name_ VARCHAR2(30) := 'CREATE_COMPANY_TEM_DETAIL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SELECTED', nullable_ => 'N', default_value_ => '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_39');
PROMPT Remove IP8 from create_company_tem_detail_tab
BEGIN
   DELETE
   FROM   create_company_tem_detail_tab
   WHERE  C2 = 'IP8';
   COMMIT;
END;
/

-- ***** Create_Company_Tem_Detail_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Company_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_40');
PROMPT Adding columns to company_tab
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COMPANY_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('LOCALIZATION_COUNTRY', 'VARCHAR2(20)', 'N', '''NONE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('COMPANY_TAB', 'A', column_, TRUE);
END;
/

-- ***** Company_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Company_Delivery_Tax_Exemp_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_41');
PROMPT Change column names of exempt_expiry_date and exempt_issue_date
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_DELIVERY_TAX_EXEMP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Rename_Column(table_name_, 'CERTIFICATE_ISSUE_DATE', 'EXEMPT_EXPIRY_DATE', TRUE);
   Database_SYS.Rename_Column(table_name_, 'CERTIFICATE_EXPIRY_DATE', 'EXEMPT_ISSUE_DATE', TRUE);
END;
/

-- ***** Company_Delivery_Tax_Exemp_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Copying_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_42');
PROMPT Updating values in column copy_for_category in copying_info_tab for supplier party type
BEGIN
   UPDATE copying_info_tab
      SET copy_for_category  =  CASE
                                   WHEN (pkg_and_method_name IN ('Supplier_Info_Msg_Setup_API.Copy_Supplier',
                                                                 'Supplier_Info_Our_Id_API.Copy_Supplier')) THEN 'SUPPLIER'
                                   ELSE 'SUPPLIER^PROSPECT'
                                END,
          copy_convert_option = CASE
                                   WHEN (pkg_and_method_name IN ('Supplier_Info_Msg_Setup_API.Copy_Supplier',
                                                                 'Supplier_Info_Our_Id_API.Copy_Supplier')) THEN 'COPY^CONVERT'
                                   ELSE 'COPY'
                                END
      WHERE ((party_type = 'SUPPLIER') AND (module = 'ENTERP'));
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_43');
PROMPT Updating copy_convert_option in copying_info_tab
BEGIN
   UPDATE copying_info_tab
      SET   copy_convert_option = 'COPY^CONVERT'
      WHERE party_type = 'CUSTOMER'
      AND   module = 'ENTERP'
      AND   pkg_and_method_name IN ('Customer_Info_Address_API.Copy_Customer',
                                    'Customer_Info_Address_Type_API.Copy_Customer',
                                    'Comm_Method_API.Copy_Identity_Info',
                                    'Customer_Info_Contact_API.Copy_Customer');
      COMMIT;
END;
/

-- ***** Copying_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Info_Contact_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_44');
PROMPT Adding columns to customer_info_contact_tab
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_CONTACT_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CRM_TEXT_ID$', 'VARCHAR2(50)', 'N', 'SYS_GUID()');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CONNECT_ALL_CUST_ADDR', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'ADD', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_45');
PROMPT Creating indexes for customer_info_contact_tab
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_INFO_CONTACT_SX1';
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_CONTACT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CRM_TEXT_ID$');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_      Database_SYS.ColumnTabType;
   table_name_   VARCHAR2(30) := 'CUSTOMER_INFO_CONTACT_TAB';
   index_name_   VARCHAR2(30) := 'CUSTOMER_INFO_CONTACT_IX1';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERSON_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Customer_Info_Contact_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Enterp_Address_Country_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_46');
PROMPT Adding values to column detailed_address of enterp_address_country_tab
BEGIN
   IF (Database_SYS.Get_Column_Nullable('ENTERP_ADDRESS_COUNTRY_TAB', 'DETAILED_ADDRESS') = 'Y') THEN
      UPDATE enterp_address_country_tab
      SET    detailed_address = 'FALSE'
      WHERE  detailed_address IS NULL;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_47');
PROMPT Modifying column detailed_address of enterp_address_country_tab to not nullable and resetting default value
DECLARE
   table_name_ VARCHAR2(30) := 'ENTERP_ADDRESS_COUNTRY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('DETAILED_ADDRESS', nullable_ => 'N', default_value_ => '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** Enterp_Address_Country_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supplier_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_48');
PROMPT Convert rowversion to date type
DECLARE
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_ADDRESS_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Column_Type(table_name_, 'ROWVERSION') = 'NUMBER') THEN
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column(table_name_, 'ROWVERSION_TMP', 'ROWVERSION', TRUE);
      column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N', 'SYSDATE', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_49');
PROMPT Add new column supplier_branch to supplier_info_address_tab
DECLARE
   table_name_  VARCHAR2(30) := 'SUPPLIER_INFO_ADDRESS_TAB';
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SUPPLIER_BRANCH', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** Supplier_Info_Address_Tab End *****

-----------------------------------------------------------------------------------------

-- ***** Crecomp_Component_Lu_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_50');
PROMPT Remove GroconCodeParts lu from company template related tables
BEGIN
   DELETE
   FROM   crecomp_component_lu_tab
   WHERE  module = 'GROCON'
   AND    lu     = 'GroconCodeParts';

   DELETE
   FROM   client_mapping_tab
   WHERE  module = 'GROCON'
   AND    lu     = 'GroconCodeParts';

   DELETE
   FROM   client_mapping_detail_tab
   WHERE  module = 'GROCON'
   AND    lu     = 'GroconCodeParts';

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_51');
PROMPT Remove licensetypeseniority lu from company template related tables
BEGIN
   DELETE
   FROM   crecomp_component_lu_tab
   WHERE  module = 'STRACO'
   AND    lu     = 'LicenseTypeSeniority';

   DELETE
   FROM   client_mapping_tab
   WHERE  module = 'STRACO'
   AND    lu     = 'LicenseTypeSeniority';

   DELETE
   FROM   client_mapping_detail_tab
   WHERE  module = 'STRACO'
   AND    lu     = 'LicenseTypeSeniority';

   COMMIT;
END;
/

-- ***** Crecomp_Component_Lu_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Company_Group_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_52');
PROMPT Adding new table company_group_tab
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_GROUP_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_53');
PROMPT Creating primarykey in company_group_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COMPANY_GROUP_PK';
   table_name_ VARCHAR2(30) := 'COMPANY_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_GROUP_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_54');
PROMPT Adding indexes to company_group_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COMPANY_GROUP_RK';
   table_name_ VARCHAR2(30) := 'COMPANY_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Company_Group_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Companies_Per_Group_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_55');
PROMPT Adding new table companies_per_group_tab
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANIES_PER_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_GROUP_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_56');
PROMPT Creating primarykey in companies_per_group_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COMPANIES_PER_GROUP_PK';
   table_name_ VARCHAR2(30) := 'COMPANIES_PER_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_57');
PROMPT Adding indexes to companies_per_group_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COMPANIES_PER_GROUP_RK';
   table_name_ VARCHAR2(30) := 'COMPANIES_PER_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Companies_Per_Group_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Source_Company_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_58');
PROMPT Adding new table source_company_tab
DECLARE
   table_name_ VARCHAR2(30) := 'SOURCE_COMPANY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_59');
PROMPT Adding indexes to source_company_tab
DECLARE
   index_name_ VARCHAR2(30) := 'SOURCE_COMPANY_PK';
   table_name_ VARCHAR2(30) := 'SOURCE_COMPANY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'SOURCE_COMPANY_RK';
   table_name_ VARCHAR2(30) := 'SOURCE_COMPANY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Source_Company_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Target_Company_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_60');
PROMPT Adding new table target_company_tab
DECLARE
   table_name_ VARCHAR2(30) := 'TARGET_COMPANY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TARGET_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_61');
PROMPT Adding indexes to target_company_tab
DECLARE
   index_name_ VARCHAR2(30) := 'TARGET_COMPANY_PK';
   table_name_ VARCHAR2(30) := 'TARGET_COMPANY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'TARGET_COMPANY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'TARGET_COMPANY_RK';
   table_name_ VARCHAR2(30) := 'TARGET_COMPANY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Target_Company_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Basic_Data_Window_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_62');
PROMPT Adding new table basic_data_window_tab
DECLARE
   table_name_ VARCHAR2(30) := 'BASIC_DATA_WINDOW_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOGICAL_UNIT_NAME', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WINDOW', 'VARCHAR2(1000)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_63');
PROMPT Adding indexes to basic_data_window_tab
DECLARE
   index_name_ VARCHAR2(30) := 'BASIC_DATA_WINDOW_PK';
   table_name_ VARCHAR2(30) := 'BASIC_DATA_WINDOW_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOGICAL_UNIT_NAME');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'BASIC_DATA_WINDOW_RK';
   table_name_ VARCHAR2(30) := 'BASIC_DATA_WINDOW_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Basic_Data_Window_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Company_Basic_Data_Window_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_64');
PROMPT Adding new table company_basic_data_window_tab
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_BASIC_DATA_WINDOW_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TARGET_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOGICAL_UNIT_NAME', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UPDATE_METHOD_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COPY_FROM_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_65');
PROMPT Adding indexes to company_basic_data_window_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COMPANY_BASIC_DATA_WINDOW_PK';
   table_name_ VARCHAR2(30) := 'COMPANY_BASIC_DATA_WINDOW_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'TARGET_COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'LOGICAL_UNIT_NAME');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'COMPANY_BASIC_DATA_WINDOW_RK';
   table_name_ VARCHAR2(30) := 'COMPANY_BASIC_DATA_WINDOW_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Company_Basic_Data_Window_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Copy_Basic_Data_Log_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_66');
PROMPT Adding new table copy_basic_data_log_tab
DECLARE
   table_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOG_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COPY_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WINDOW', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STATUS', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_67');
PROMPT Creating primarykey in copy_basic_data_log_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_PK';
   table_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOG_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_68');
PROMPT Adding indexes to copy_basic_data_log_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_RK';
   table_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_69');
PROMPT Creating sequence copy_basic_data_log_seq
DECLARE
   sequence_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 1 ORDER NOCACHE', TRUE);
END;
/

-- ***** Copy_Basic_Data_Log_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Copy_Basic_Data_Log_Detail_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_70');
PROMPT Adding new table copy_basic_data_log_detail_tab
DECLARE
   table_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_DETAIL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOG_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TARGET_COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STATUS', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MESSAGE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_71');
PROMPT Creating primarykey in copy_basic_data_log_detail_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_DETAIL_PK';
   table_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_DETAIL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOG_ID');
   Database_SYS.Set_Table_Column(columns_, 'TARGET_COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'VALUE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_72');
PROMPT Adding indexes to copy_basic_data_log_detail_tab
DECLARE
   index_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_DETAIL_RK';
   table_name_ VARCHAR2(30) := 'COPY_BASIC_DATA_LOG_DETAIL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Copy_Basic_Data_Log_Detail_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Target_Company_Data_Tmp Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_73');
PROMPT Adding new temporary table target_company_data_tmp
DECLARE
   table_name_ VARCHAR2(30) := 'TARGET_COMPANY_DATA_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_COMPANY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TARGET_COMPANY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_74');
PROMPT Adding indexes to target_company_data_tmp
DECLARE
   table_name_    VARCHAR2(30) := 'TARGET_COMPANY_DATA_TMP';
   index_columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(index_columns_, 'SOURCE_COMPANY');
   Database_SYS.Set_Table_Column(index_columns_, 'TARGET_COMPANY');
   Database_SYS.Create_Index(table_name_, 'TARGET_COMPANY_DATA_IX1', index_columns_, 'N', NULL, NULL, TRUE, TRUE);
END;
/

-- ***** Target_Company_Data_Tmp End *****

-------------------------------------------------------------------------------------------

-- ***** Address_Presentation_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_75');
PROMPT Adding new columns user_defined_row_count and max_row_count to address_presentation_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ADDRESS_PRESENTATION_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'USER_DEFINED_ROW_COUNT', 'NUMBER', 'N', '6', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_ROW_COUNT', 'NUMBER', 'N', '10', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_76');
PROMPT Update edit_layout column in address_presentation_tab
DECLARE
BEGIN
   UPDATE address_presentation_tab t
   SET    t.edit_layout = t.edit_layout||chr(13)||chr(10)||'$R8=0'||chr(13)||chr(10)||'$C8=1'||chr(13)||chr(10)||'$W8=4.4'||chr(13)||chr(10)||'$R9=0'||chr(13)||chr(10)||
                         '$C9=1'||chr(13)||chr(10)||'$W9=4.4'||chr(13)||chr(10)||'$R10=0'||chr(13)||chr(10)||'$C10=1'||chr(13)||chr(10)||'$W10=4.4'||chr(13)||chr(10)||
	         				'$R11=0'||chr(13)||chr(10)||'$C11=1'||chr(13)||chr(10)||'$W11=4.4'
   WHERE  instr(t.edit_layout,'$R8') = 0;
END;
/

-- ***** Address_Presentation_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Address_Setup_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_77');
PROMPT Adding new table address_setup_tab
DECLARE
   table_name_ VARCHAR2(30) := 'ADDRESS_SETUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOGICAL_UNIT', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USER_DEFINED_LINE_LENGTH', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_LINE_LENGTH', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MANDATORY_ADDRESS_LINE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_78');
PROMPT Creating indexes for address_setup_tab
DECLARE
   index_name_ VARCHAR2(30) := 'ADDRESS_SETUP_PK';
   table_name_ VARCHAR2(30) := 'ADDRESS_SETUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOGICAL_UNIT');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'ADDRESS_SETUP_RK';
   table_name_ VARCHAR2(30) := 'ADDRESS_SETUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Address_Setup_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Company_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_79');
PROMPT Adding new columns to company_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COMPANY_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WITHIN_CITY_LIMIT', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'JURISDICTION_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Company_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Person_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_80');
PROMPT Adding new columns to person_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PERSON_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Person_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Manufacturer_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_81');
PROMPT Adding new columns to manufacturer_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'MANUFACTURER_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Manufacturer_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Owner_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_82');
PROMPT Adding new columns to owner_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'OWNER_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Owner_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Forwarder_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_83');
PROMPT Adding new columns to forwarder_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FORWARDER_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Forwarder_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customs_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_84');
PROMPT Adding new columns to customs_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMS_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Customs_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supplier_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_85');
PROMPT Adding new columns to supplier_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Supplier_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Tax_Office_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_86');
PROMPT Adding new columns to tax_office_info_address_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TAX_OFFICE_INFO_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** Tax_Office_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Remove_Company_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_87');
PROMPT Remove records from remove_company_tab
DECLARE
BEGIN
   DELETE remove_company_tab
   WHERE module = 'GENLED'
   AND table_name = 'ALL_LEDGER_TAB';
   COMMIT;
END;
/

-- ***** Remove_Company_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Key_Lu_Attribute_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_88');
PROMPT Adding new table key_lu_attribute_tab
DECLARE
   table_name_ VARCHAR2(30) := 'KEY_LU_ATTRIBUTE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_NAME', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'KEY_VALUE', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LU', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ATTRIBUTE_KEY', 'VARCHAR2(500)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ATTRIBUTE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIRST_REG_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWTYPE', 'VARCHAR2(30)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'KEY_LU_ATTRIBUTE_PK';
   table_name_ VARCHAR2(30) := 'KEY_LU_ATTRIBUTE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_NAME');
   Database_SYS.Set_Table_Column(columns_, 'KEY_VALUE');
   Database_SYS.Set_Table_Column(columns_, 'MODULE');
   Database_SYS.Set_Table_Column(columns_, 'LU');
   Database_SYS.Set_Table_Column(columns_, 'ATTRIBUTE_KEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'KEY_LU_ATTRIBUTE_RK';
   table_name_ VARCHAR2(30) := 'KEY_LU_ATTRIBUTE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_89');
PROMPT Update key_lu_attribute_tab
-- Insert attribute key into key_lu_attribute_tab from the PROG lines (and at the same time store the PROG texts in key_lu_attribute_tab)
BEGIN
   INSERT
      INTO key_lu_attribute_tab (
         key_name,
         key_value,
         module,
         lu,
         attribute_key,
         attribute_text,
         first_reg_text,
         rowversion,
         ROWTYPE)
      SELECT
         key_name,
         key_value,
         module,
         lu,
         attribute_key,
         current_translation,
         current_translation,
         SYSDATE,
         Decode(rowtype, 'TemplKeyLuTranslation', 'TemplKeyLuAttribute', 'CompanyKeyLuAttribute')
      FROM key_lu_translation_tab dest
      WHERE language_code = 'PROG'
      AND NOT EXISTS (SELECT 1
                      FROM key_lu_attribute_tab src
                      WHERE src.key_name = dest.key_name
                      AND src.key_value = dest.key_value
                      AND src.module = dest.module
                      AND src.lu = dest.lu
                      AND src.attribute_key = dest.attribute_key);
   COMMIT;
   -- remove all prog lines since they are moved to key_lu_attribute_tab and not needed anymore in key_lu_translation_tab
   DELETE
      FROM key_lu_translation_tab
      WHERE language_code = 'PROG';
   COMMIT;
   -- remove all prog lines
   DELETE
      FROM key_lu_translation_imp_tab
      WHERE language_code = 'PROG';
   COMMIT;
END;
/

-- ***** Key_Lu_Attribute_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Address_Definition_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_90');
PROMPT Remove address, address_definition_tab, address_definition and package
DECLARE
BEGIN
   Database_SYS.Remove_View('ADDRESS_DEFINITION', TRUE);
   Database_SYS.Remove_View('ADDRESS_DEFINITION_V2', TRUE);
   Database_SYS.Remove_Package('ADDRESS_DEFINITION_API', TRUE);
   Database_SYS.Rename_Table('ADDRESS_DEFINITION_TAB','ADDRESS_DEFINITION_300', TRUE);
END;
/

-- ***** Address_Definition_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Ext_Tax_System_Parameters_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_91');
PROMPT Adding new table ext_tax_system_parameters_tab
DECLARE
   table_name_ VARCHAR2(30) := 'EXT_TAX_SYSTEM_PARAMETERS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NUMBER', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USER_NAME_VERTEX', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PASSWORD_VERTEX', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TRUSTED_ID_VERTEX', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VERSION_VERTEX', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_92');
PROMPT Creating primarykey in ext_tax_system_parameters_tab
DECLARE
   index_name_ VARCHAR2(30) := 'EXT_TAX_SYSTEM_PARAMETERS_PK';
   table_name_ VARCHAR2(30) := 'EXT_TAX_SYSTEM_PARAMETERS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NUMBER');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_93');
PROMPT Adding indexes to ext_tax_system_parameters_tab
DECLARE
   index_name_ VARCHAR2(30) := 'EXT_TAX_SYSTEM_PARAMETERS_RK';
   table_name_ VARCHAR2(30) := 'EXT_TAX_SYSTEM_PARAMETERS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Ext_Tax_System_Parameters_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** B2b_Customer_User_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_94');
PROMPT Adding new table b2b_customer_user_tab
DECLARE
   table_name_ VARCHAR2(30) := 'B2B_CUSTOMER_USER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DEFAULT_CUSTOMER', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_95');
PROMPT Adding indexes to b2b_customer_user_tab
DECLARE
   index_name_ VARCHAR2(30) := 'B2B_CUSTOMER_USER_PK';
   table_name_ VARCHAR2(30) := 'B2B_CUSTOMER_USER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_ID');
   Database_SYS.Set_Table_Column(columns_, 'USER_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'B2B_CUSTOMER_USER_RK';
   table_name_ VARCHAR2(30) := 'B2B_CUSTOMER_USER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_96');
PROMPT Adding values to b2b_customer_user_tab
BEGIN
   INSERT INTO b2b_customer_user_tab (
      customer_id,
      user_id,
      default_customer,
      rowversion,
      rowkey)
   SELECT
      value,
      identity,
      'TRUE',
      1,
      sys_guid()
   FROM  fnd_user_property_tab a
   WHERE name IN ('CUSTOMER_ID','CUSTOMER_NO')
   AND a.VALUE IS NOT NULL
   AND NOT EXISTS ( SELECT 1
                    FROM   b2b_customer_user_tab b
                    WHERE  a.value = b.customer_id
                    AND    a.identity = b.user_id)
   GROUP by value, identity;

   -- Set non default when there are more than one Customer
   UPDATE b2b_customer_user_tab
   SET    default_customer = 'FALSE'
   WHERE  user_id IN ( SELECT user_id
                       FROM b2b_customer_user_tab
                       GROUP BY user_id
                       HAVING COUNT(*) > 1)
   AND    rownum < 2;
   COMMIT;
END;
/

-- ***** B2b_Customer_User_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** B2b_Supplier_User_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_97');
PROMPT Adding new table b2b_supplier_user_tab
DECLARE
   table_name_ VARCHAR2(30) := 'B2B_SUPPLIER_USER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SUPPLIER_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DEFAULT_SUPPLIER', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_98');
PROMPT Adding indexes to b2b_supplier_user_tab
DECLARE
   index_name_ VARCHAR2(30) := 'B2B_SUPPLIER_USER_PK';
   table_name_ VARCHAR2(30) := 'B2B_SUPPLIER_USER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SUPPLIER_ID');
   Database_SYS.Set_Table_Column(columns_, 'USER_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'B2B_SUPPLIER_USER_RK';
   table_name_ VARCHAR2(30) := 'B2B_SUPPLIER_USER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_99');
PROMPT Adding values to b2b_customer_user_tab
BEGIN
   INSERT INTO b2b_supplier_user_tab (
      supplier_id,
      user_id,
      default_supplier,
      rowversion,
      rowkey)
   SELECT
      value,
      identity,
      'TRUE',
      1,
      sys_guid()
   FROM fnd_user_property_tab a
   WHERE name IN ('CONTRACTOR_ID','VENDOR_NO')
   AND value IS NOT NULL
   AND NOT EXISTS ( SELECT 1
                    FROM   b2b_supplier_user_tab b
                    WHERE  a.value = b.supplier_id
                    AND    a.identity = b.user_id)
   GROUP BY value, identity;

   -- Set non default when there are more than one Supplier
   UPDATE b2b_supplier_user_tab
   SET    default_supplier = 'FALSE'
   WHERE  user_id IN ( SELECT user_id
                       FROM   b2b_supplier_user_tab
                       GROUP  BY user_id
                       HAVING COUNT(*) > 1)
   AND rownum < 2;
   COMMIT;
END;
/

-- ***** B2b_Supplier_User_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Zip_Code_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_100');
PROMPT Adding new table zip_code_tab
DECLARE
   table_name_ VARCHAR2(30) := 'ZIP_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COUNTRY_CODE', 'VARCHAR2(2)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STATE_CODE', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COUNTY_CODE', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CITY_CODE', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ZIP_CODE', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REGION1', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REGION2', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STREET_NAME', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STREET_NUMBER_EVEN_FROM', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STREET_NUMBER_EVEN_TO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STREET_NUMBER_ODD_FROM', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STREET_NUMBER_ODD_TO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_101');
PROMPT Creating primarykey in zip_code_tab

DECLARE
   index_name_ VARCHAR2(30) := 'ZIP_CODE_PK';
   table_name_ VARCHAR2(30) := 'ZIP_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COUNTRY_CODE');
   Database_SYS.Set_Table_Column(columns_, 'STATE_CODE');
   Database_SYS.Set_Table_Column(columns_, 'COUNTY_CODE');
   Database_SYS.Set_Table_Column(columns_, 'CITY_CODE');
   Database_SYS.Set_Table_Column(columns_, 'ZIP_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_102');
PROMPT Adding indexes to zip_code_tab
DECLARE
   index_name_ VARCHAR2(30) := 'ZIP_CODE_RK';
   table_name_ VARCHAR2(30) := 'ZIP_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Zip_Code_Tab End *****
---------------------------------------------------------------------------------------------

-- ***** Forwarder_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_103');
PROMPT Handle erraneous party_type column data in forwarder_info_tab
BEGIN
   UPDATE forwarder_info_tab
   SET    party_type = 'FORWARDER'
   WHERE  party_type != 'FORWARDER';
   COMMIT;
END;
/

-- ***** Forwarder_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Branch_Tab Start *****

DECLARE
   table_name_  VARCHAR2(30) := 'BRANCH_TAB';
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('COMPANY_ADDRESS_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** Branch_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Data_Subject_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_104');
PROMPT Creating data_subject_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PERSONAL_DATA_MANAGEMENT', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NO_HISTORY_DATA_CLEANUP', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_105');
PROMPT Creating constraint for data_subject_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_PK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_106');
PROMPT Creating unique constraint for data_subject_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_RK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_107');
PROMPT Removal of obsolete data subject
BEGIN
   DELETE FROM data_subject_tab
      WHERE data_subject_id = 'EXTERNAL_APPLICANT';
   COMMIT;
END;
/

-- ***** Data_Subject_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Personal_Data_Management_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_108');
PROMPT Creating personal_data_management_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_MANAGEMENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PERSONAL_DATA', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_CLEANUP', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_CLEANUP_METHOD', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_CATEGORY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ANONYMIZATION_METHOD_ID', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SYSTEM_DEFINED', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_109');
PROMPT Creating constraint for personal_data_management_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERSONAL_DATA_MANAGEMENT_PK';
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_MANAGEMENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_110');
PROMPT Creating constraint for personal_data_management_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERSONAL_DATA_MANAGEMENT_RK';
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_MANAGEMENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_111');
PROMPT Creating sequence pers_data_managment_seq
DECLARE
   sequence_name_ VARCHAR2(30) := 'PERS_DATA_MANAGMENT_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 1000', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_112');
PROMPT Renaming sequence pers_data_managment_seq
BEGIN
   Database_SYS.Rename_Sequence('PERS_DATA_MANAGMENT_SEQ', 'PERS_DATA_MANAGEMENT_SEQ');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_113');
PROMPT Creating index pers_data_managment_uk
DECLARE
   index_name_ VARCHAR2(30) := 'PERS_DATA_MANAGMENT_UK';
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_MANAGEMENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERSONAL_DATA');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_114');
PROMPT Renaming index pers_data_managment_ux1
BEGIN
   Database_Sys.Rename_Index('PERS_DATA_MANAGMENT_UK', 'PERSONAL_DATA_MANAGEMENT_UX1', TRUE);
END;
/

-- ***** Personal_Data_Management_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Personal_Data_Man_Det_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_115');
PROMPT Creating personal_data_man_det_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_MAN_DET_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SEQ_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CLEANUP_ORDER', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOGICAL_UNIT_ID', 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FIELD_NAME', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIELD_VALUE', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MASKED_VALUE', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MATCH_BY', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANDATORY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TABLE_CONDITION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIELD_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIELD_DATA_LENGTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REFERENCE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SKIP_ANONYMIZE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_FROM_CLEANUP', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REPORT_ORDER', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_116');
PROMPT Creating constraint for personal_data_man_det_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERSONAL_DATA_MAN_DET_PK';
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_MAN_DET_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SEQ_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_117');
PROMPT Creating constraint for personal_data_man_det_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERSONAL_DATA_MAN_DET_RK';
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_MAN_DET_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_118');
PROMPT Renaming table personal_data_man_det_tab column logical_unit_id
DECLARE
   table_name_    VARCHAR2(30) := 'PERSONAL_DATA_MAN_DET_TAB';
BEGIN
   Database_Sys.Rename_Column(table_name_, 'APPLICATION_AREA_ID', 'LOGICAL_UNIT_ID');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_119');
PROMPT Creating sequence personal_data_man_det_seq
DECLARE
   sequence_name_ VARCHAR2(30) := 'PERSONAL_DATA_MAN_DET_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 1', TRUE);
END;
/

-- ***** Personal_Data_Management_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Pers_Data_Process_Purpose_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_120');
PROMPT Creating pers_data_process_purpose_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PURPOSE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PURPOSE_NAME', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_121');
PROMPT Creating constraint for pers_data_process_purpose_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_PK';
   table_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PURPOSE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_122');
PROMPT Creating constraint for pers_data_process_purpose_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_RK';
   table_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_123');
PROMPT DROP INDEX PERS_DATA_PROCESS_PURPOSE_UK.
DECLARE
   index_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_UK';
   table_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_TAB';
BEGIN
   Database_SYS.Remove_Indexes(table_name_, index_name_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_124');
PROMPT Creating constraint for pers_data_process_purpose_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_UX1';
   table_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PURPOSE_NAME');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_125');
PROMPT Creating sequence pers_data_process_purpose_seq
DECLARE
   sequence_name_ VARCHAR2(30) := 'PERS_DATA_PROCESS_PURPOSE_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 1', TRUE);
END;
/

-- ***** Pers_Data_Process_Purpose_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Pers_Data_Man_Proc_Purpose_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_126');
PROMPT Creating table pers_data_man_proc_purpose_tab
DECLARE
   table_name_ VARCHAR2(30) := 'PERS_DATA_MAN_PROC_PURPOSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PURPOSE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_127');
PROMPT Creating constraint for pers_data_man_proc_purpose_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERS_DATA_MAN_PROC_PURPOSE_PK';
   table_name_ VARCHAR2(30) := 'PERS_DATA_MAN_PROC_PURPOSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PURPOSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_128');
PROMPT Creating constraint for pers_data_man_proc_purpose_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERS_DATA_MAN_PROC_PURPOSE_RK';
   table_name_ VARCHAR2(30) := 'PERS_DATA_MAN_PROC_PURPOSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Pers_Data_Man_Proc_Purpose_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Personal_Data_Cleanup_Log_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_129');
PROMPT Creating personal_data_cleanup_log_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_CLEANUP_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SEQ_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPLETED', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ERROR_MESSAGE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_130');
PROMPT Creating constraint for personal_data_cleanup_log_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERSONAL_DATA_CLEANUP_LOG_PK';
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_CLEANUP_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_DATE');
   Database_SYS.Set_Table_Column(columns_, 'ACTION');
   Database_SYS.Set_Table_Column(columns_, 'PERS_DATA_MANAGEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SEQ_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_131');
PROMPT Creating constraint for personal_data_cleanup_log_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'PERSONAL_DATA_CLEANUP_LOG_RK';
   table_name_ VARCHAR2(30) := 'PERSONAL_DATA_CLEANUP_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_132');
PROMPT Creating sequence personal_data_clean_log_seq
DECLARE
   sequence_name_ VARCHAR2(30) := 'PERSONAL_DATA_CLEAN_LOG_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'INCREMENT BY 1 START WITH 1', TRUE);
END;
/

-- ***** Personal_Data_Cleanup_Log_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Data_Subject_Consent_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_133');
PROMPT Creating data_subject_consent_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_SUBJECT', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_134');
PROMPT Creating constraint for data_subject_consent_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_PK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_135');
PROMPT Creating constraint for data_subject_consent_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_RK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Data_Subject_Consent_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Data_Subject_Consent_Oper_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_136');
PROMPT Creating data_subject_consent_oper_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_OPER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STATEMENT_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REMARK', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_BY', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_137');
PROMPT Creating constraint for data_subject_consent_oper_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_OPER_PK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_OPER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_DATE');
   Database_SYS.Set_Table_Column(columns_, 'ACTION');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_138');
PROMPT Creating constraint for data_subject_consent_oper_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_OPER_RK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_OPER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_139');
PROMPT Renaming table data_subject_consent_oper_tab columns
DECLARE
   table_name_    VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_OPER_TAB';
BEGIN
   Database_Sys.Rename_Column(table_name_, 'UPDATE_DATE', 'STATEMENT_DATE');
   Database_Sys.Rename_Column(table_name_, 'PERFORMED_BY', 'OPERATION_BY');
END;
/

-- ***** Data_Subject_Consent_Oper_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Data_Subject_Consent_Purp_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_140');
PROMPT Creating data_subject_consent_purp_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_PURP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTION', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_PURPOSE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'EFFECTIVE_ON', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EFFECTIVE_UNTIL', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_141');
PROMPT Creating constraint for data_subject_consent_purp_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_PURP_PK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_PURP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'KEY_REF');
   Database_SYS.Set_Table_Column(columns_, 'OPERATION_DATE');
   Database_SYS.Set_Table_Column(columns_, 'ACTION');
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_PURPOSE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_142');
PROMPT Creating constraint for data_subject_consent_purp_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_PURP_RK';
   table_name_ VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_PURP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_143');
PROMPT Renaming table data_subject_consent_purp_tab column
DECLARE
   table_name_    VARCHAR2(30) := 'DATA_SUBJECT_CONSENT_PURP_TAB';
BEGIN
   Database_Sys.Rename_Column(table_name_, 'VALID', 'SELECTED');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_144');
PROMPT Data update related to datasubconsentaction id name change
BEGIN
   UPDATE data_subject_consent_oper_tab
   SET action = DECODE(action, 'UPDATE_CONSENT', 'UPDATED_PURPOSES', 'NO_CONSENT', 'PURPOSES_WITHDRAWN', 'ERASE_DATA', 'DATA_ERASED', 'NEW_CONSENT', 'NEW_PURPOSE', action)
   WHERE action IN ('UPDATE_CONSENT', 'NO_CONSENT', 'ERASE_DATA', 'NEW_CONSENT');
   UPDATE data_subject_consent_purp_tab
   SET action = DECODE(action, 'UPDATE_CONSENT', 'UPDATED_PURPOSES', 'NO_CONSENT', 'PURPOSES_WITHDRAWN', 'ERASE_DATA', 'DATA_ERASED', 'NEW_CONSENT', 'NEW_PURPOSE', action)
   WHERE action IN ('UPDATE_CONSENT', 'NO_CONSENT', 'ERASE_DATA', 'NEW_CONSENT');
   UPDATE personal_data_cleanup_log_tab
   SET action = DECODE(action, 'UPDATE_CONSENT', 'UPDATED_PURPOSES', 'NO_CONSENT', 'PURPOSES_WITHDRAWN', 'ERASE_DATA', 'DATA_ERASED', 'NEW_CONSENT', 'NEW_PURPOSE', action)
   WHERE action IN ('UPDATE_CONSENT', 'NO_CONSENT', 'ERASE_DATA', 'NEW_CONSENT');
   COMMIT;
END;
/

-- ***** Data_Subject_Consent_Purp_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Anonymization_Setup_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_145');
PROMPT Creating anonymization_setup_tab table
DECLARE
   table_name_ VARCHAR2(30) := 'ANONYMIZATION_SETUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'METHOD_ID', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STRING_VALUE', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ANONYMIZATION_MODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATE_VALUE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NUMBER_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEFAULT_METHOD', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_146');
PROMPT Creating constraint anonymization_setup_pk for anonymization_setup_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'ANONYMIZATION_SETUP_PK';
   table_name_ VARCHAR2(30) := 'ANONYMIZATION_SETUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'METHOD_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_147');
PROMPT Creating constraint anonymization_setup_rk for anonymization_setup_tab table
DECLARE
   index_name_ VARCHAR2(30) := 'ANONYMIZATION_SETUP_RK';
   table_name_ VARCHAR2(30) := 'ANONYMIZATION_SETUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_148');
PROMPT Renaming table anonymization_setup_tab columns
DECLARE
   table_name_    VARCHAR2(30) := 'ANONYMIZATION_SETUP_TAB';
BEGIN
   Database_Sys.Rename_Column(table_name_, 'TEXT_VALUE', 'STRING_VALUE');
   Database_Sys.Rename_Column(table_name_, 'TEXT_ANONYMIZATION_MODE', 'ANONYMIZATION_MODE');
END;
/

-- ***** Anonymization_Setup_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Renaming Non standard Indexes Start *****

-- ***** Renaming Non standard Indexes End  *****

---------------------------------------------------------------------------------------------

-- ***** Removing obsolete database packages Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_149');
PROMPT Removing obsolete packages
BEGIN
   Database_SYS.Remove_Package('TAXABLE_API', TRUE);
   Database_SYS.Remove_Package('TYPE_GENERIC_COM_METH_API', TRUE);
   Database_SYS.Remove_Package('ADDRESS_TYPE_API', TRUE);
   Database_SYS.Remove_Package('DYNAMIC_SQL_UTIL_API', TRUE);
END;
/

-- ***** Removing obsolete database packages End *****

-----------------------------------------------------------------------------------------

-- ***** Removing obsolete views Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_150');
PROMPT Removing obsolete views
BEGIN
   --View SUPPLIER_INFO_RFQ_LOV has been renamed to SUPPLIER_PURCH_SRM_INFO
   Database_SYS.Remove_View('SUPPLIER_INFO_RFQ_LOV', TRUE);
   Database_SYS.Remove_View('TYPE_GENERIC_COM_METH', TRUE);
   Database_SYS.Remove_View('CORPORATE_FORM_LOV', TRUE);
   Database_SYS.Remove_View('CUST_CONTACT_LOV', TRUE);
   Database_SYS.Remove_View('SUPP_CONTACT_LOV', TRUE);
   Database_SYS.Remove_View('PERSON_INFO_COMM_METHOD_ADMIN', TRUE);
   Database_SYS.Remove_View('Address_Type', TRUE);
   Database_SYS.Remove_View('KEY_LU_TRANSLATION_PROG', TRUE);
   Database_SYS.Remove_View('CUSTOMER_INFO_CONTACT_LOV_PUB', TRUE);
   Database_SYS.Remove_View('SAFT_COMPANY', TRUE);
   Database_SYS.Remove_View('SAFT_COMPANY_ADDRESS', TRUE);
   Database_SYS.Remove_View('SAFT_CUSTOMER_INFO_ADDRESS', TRUE);
   Database_SYS.Remove_View('SAFT_CUSTOMER_INFO_CONTACT', TRUE);
   Database_SYS.Remove_View('SAFT_SUPPLIER_INFO_ADDRESS', TRUE);
   Database_SYS.Remove_View('SAFT_SUPPLIER_INFO_CONTACT', TRUE);
END;
/

-- ***** Removing obsolete views End *****

-----------------------------------------------------------------------------------------

-- ***** Renaming obsolete tables Start *****

-- ***** Renaming obsolete tables End   *****

-----------------------------------------------------------------------------------------


exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Timestamp_151');
PROMPT Upgrade statements in file Enterp 300.upg end here
-- Nothing is allowed to be placed below here

---------------------------------------------------------------------------------------------

UNDEFINE MODULE
exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','300.upg','Done');



