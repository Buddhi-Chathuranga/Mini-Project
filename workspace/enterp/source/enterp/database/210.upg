-----------------------------------------------------------------------------
--  Module : ENTERP
--
--  Purpose: File for upgrade from Enterp 2.0.0 to 2.1.0
--
--  File   : 210.UPG
--
--  IFS/Design Template Version 2.3
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  120709  MaRalk  PBR-8, Added column customer_category to Customer_Info_Tab.
--  120911  MaRalk  PBR-446, Added column copy_for_category to copying_info_tab.
--  120911  MaRalk  PBR-560, Added columns End_Customer_Id, End_Cust_Addr_Id to Customer_Info_Address_Tab.
--  130520  MaRalk  PBR-1605, Added columns Customer_Contact, Blocked_For_Use to Person_Info_Tab.
--  130528  MaRalk  PBR-1614, Added column Blocked For Crm Objects to Customer_Info_Contact_Tab.
--  130530  MaIklk  PBR-1615, Added columns personal_interest, campaign_interest, decision_power_type, department, manager, manager_cust_address, manager_guid.
--  130812  Hiralk  CAHOOK-1350, Modified ROWVERSION of CREATE_COMPANY_TEM_DETAIL_TAB.
--  130813  Hiralk  CAHOOK-1374, Modified ROWVERSION of CUSTOMS_INFO_OUR_ID_TAB.
--  130813  Hiralk  CAHOOK-1381, Modified ROWVERSION of FORWARDER_INFO_OUR_ID_TAB.
--  130813  Hiralk  CAHOOK-1385, Modified ROWVERSION of MANUFACTURER_INFO_OUR_ID_TAB.
--  130813  Hiralk  CAHOOK-1390, Modified INTERNAL_INCOME_TYPE of INCOME_TYPE_TAB.
--  130813  Hiralk  CAHOOK-1404, Modified ROWVERSION of OWNER_INFO_OUR_ID_TAB.
--  130814  Hiralk  CAHOOK-1430, Modified ROWVERSION of SUPPLIER_INFO_OUR_ID_TAB.
--  130816  Hiralk  CAHOOK-1324, Modified IDENTIFIER_REF_VALIDATION and DOC_RECIP_ADDRESS_POS of COMPANY_TAB.
--  130816  Hiralk  CAHOOK-1353, Modified IDENTIFIER_REF_VALIDATION of CUSTOMER_INFO_TAB.
--  130819  Hiralk  CAHOOK-1425, Modified IDENTIFIER_REF_VALIDATION of SUPPLIER_INFO_TAB.
--  130819  Hiralk  CAHOOK-2130, Modified EXEMPT_CERTIFICATE_TYPE of COMPANY_DELIVERY_TAX_EXEMP_TAB.
--  130925  Pratlk  DANU-1956,   Added column Master Company to COMPANY_TAB.
--  131001  NIANLK  TIBE-3839: Merge Tinkerbell into SP2
--  131030  Hiralk  PBFI-573, Removed obsolete packages and renamed obsolete tables.
--  131107  Hiralk  PBFI-577, Removed obsolete LUs ValidationPerCompany and CountryRule.
--  130911  MaRalk  PBR-1750, Created table Customer_Contact_Role_Tab and save customer_info_contact_tab - Role data
--  130911          with a generated key. Modified Customer_Info_Contact_Tab-Role columnn length to 10.
--  131015  MaIklk  Added Main Representative column to Customer_Info_Contact_tab.
--  140219  NiWese  PBSC-6285, changed column lengths to 4000 for multiple choice fields.
--  140310  MaRalk  PBSC-7322, Modified First_Name, Middle_Name, Last_Name columns in Person_Info_Tab by spilitting Name.
--  140423  PRatlk  PBFI-6770, Removing obsolete LU CrecompTabcolSkip.
--  140620  MaRalk  PRSC-1291, Restructured the correction done in PBR-1750. Created table Contact_Role_Tab to
--  140620          represent role basic data which are currently stored in CUSTOMER_INFO_CONTACT_TAB and SUPPLIER_INFO_CONTACT_TAB - Role columns.
--  140620          Role column of both tables will be updated by the generated key and modified length to 4000.
--  141027  JanWse  PRSC-2933, Change Customer_Info_Contact_tab.NOTE_TEXT from VARCHAR2 to CLOB
--  141029  JanWse  PRSC-2933, Moved dropping of temporary column to clear script EnterpCL.sql
--  141107  MaRalk  PRSC-3112, Added column copy_convert_option to copying_info_tab.
--  141119  MaIklk  PRSC-4263, Excluded copying records of Customer_Info_Our_Id for prospect and end customers.
--  141216  SALIDE  PRFI-3542, Added column alternative_name to PERSON_INFO_TAB and removed column external_display_name, internal_display_name.
--  150212  Waudlk  PRFI-5471, Removed unnecessary code when adding Not Nullable column.
--  181226  AjPelk  Bug 146034, Removed indexes CUSTOMER_INFO_ADDRESS_IX1 and IX2 and create them correctly.
--  190411  Chwilk  Bug 147706, Corrected the upgrade issue in SUPPLIER_INFO_ADDRESS_TAB, CUSTOMER_INFO_ADDRESS_TAB for customers upgrading from APP8 SP2.
-----------------------------------------------------------------------------

SET SERVEROUTPUT ON

DEFINE MODULE = 'ENTERP'

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

-- Instructions for upg files:

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-" line and a empty line.
-- The section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- The "start tag" (in this case "Example_Tab"), should be placed in "List of upgrade sections".
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line.

-- If the Pl block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
-- If the Pl block not has DML instructions, there should not be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any column in an upgrade file !

-- Don't forget performance when updating large tabled !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL update
-- If possible, try to put several updates together in one statement.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

-- ***** Create_Company_Tem_Detail_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_1');
PROMPT Adding DEFAULT VALUES TO column ROWVERSION, C4 of CREATE_COMPANY_TEM_DETAIL_TAB
BEGIN
   UPDATE CREATE_COMPANY_TEM_DETAIL_TAB
      SET    ROWVERSION = SYSDATE
      WHERE  ROWVERSION IS NULL;

   UPDATE Create_Company_Tem_Detail_tab
      SET C4 = decode(C1, 'ISRSLIP',       'INVOIC',
                          'DDPROPOSALADV', 'PAYLED',
                          'DDORDERADV',    'PAYLED',
                          'REPAYPROPADV',  'PAYLED',
                          'REPAYORDERADV', 'PAYLED',
                          'SUPPAYADV',     'PAYLED')
      WHERE component   = 'INVOIC'
      AND   lu          = 'MessageText';

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_2');
PROMPT Updating COLUMN ROWVERSION OF CREATE_COMPANY_TEM_DETAIL_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'CREATE_COMPANY_TEM_DETAIL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_3');
PROMPT adding new columns C51..C70 to Create_Company_Tem_Detail_Tab
DECLARE
   columns_      Database_SYS.ColumnTabType;
   table_name_   VARCHAR2(30) := 'CREATE_COMPANY_TEM_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'C51', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C52', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C53', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C54', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C55', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C56', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C57', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C58', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C59', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C60', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C61', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C62', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C63', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C64', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C65', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C66', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C67', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C68', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C69', 'VARCHAR2(200)');
   Database_SYS.Set_Table_Column(columns_, 'C70', 'VARCHAR2(200)');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/

-- ***** Create_Company_Tem_Detail_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customs_Info_Our_Id_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_4');
PROMPT Adding DEFAULT VALUES TO column ROWVERSION of CUSTOMS_INFO_OUR_ID_TAB
BEGIN
   UPDATE CUSTOMS_INFO_OUR_ID_TAB
   SET    ROWVERSION = 1
   WHERE  ROWVERSION IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_5');
PROMPT Updating COLUMN ROWVERSION OF CUSTOMS_INFO_OUR_ID_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMS_INFO_OUR_ID_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

-- ***** Customs_Info_Our_Id_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Forwarder_Info_Our_Id_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_6');
PROMPT Adding DEFAULT VALUES TO column ROWVERSION of FORWARDER_INFO_OUR_ID_TAB
BEGIN
   UPDATE FORWARDER_INFO_OUR_ID_TAB
   SET    ROWVERSION = 1
   WHERE  ROWVERSION IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_7');
PROMPT Updating COLUMN ROWVERSION OF FORWARDER_INFO_OUR_ID_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'FORWARDER_INFO_OUR_ID_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

-- ***** Forwarder_Info_Our_Id_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Manufacturer_Info_Our_Id_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_8');
PROMPT Adding DEFAULT VALUES TO column ROWVERSION of MANUFACTURER_INFO_OUR_ID_TAB
BEGIN
   UPDATE MANUFACTURER_INFO_OUR_ID_TAB
   SET    ROWVERSION = 1
   WHERE  ROWVERSION IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_9');
PROMPT Updating COLUMN ROWVERSION OF MANUFACTURER_INFO_OUR_ID_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'MANUFACTURER_INFO_OUR_ID_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

-- ***** Manufacturer_Info_Our_Id_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Income_Type_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_10');
PROMPT Modifying column INTERNAL_INCOME_TYPE of INCOME_TYPE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INCOME_TYPE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('INTERNAL_INCOME_TYPE', 'NUMBER');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

-- ***** Income_Type_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Owner_Info_Our_Id_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_11');
PROMPT Adding DEFAULT VALUES TO column ROWVERSION of OWNER_INFO_OUR_ID_TAB
BEGIN
   UPDATE OWNER_INFO_OUR_ID_TAB
   SET    ROWVERSION = 1
   WHERE  ROWVERSION IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_12');
PROMPT Updating COLUMN ROWVERSION OF OWNER_INFO_OUR_ID_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'OWNER_INFO_OUR_ID_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

-- ***** Owner_Info_Our_Id_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supplier_Info_Our_Id_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_13');
PROMPT Adding DEFAULT VALUES TO column ROWVERSION of SUPPLIER_INFO_OUR_ID_TAB
BEGIN
   UPDATE SUPPLIER_INFO_OUR_ID_TAB
   SET    ROWVERSION = 1
   WHERE  ROWVERSION IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_14');
PROMPT Updating COLUMN ROWVERSION OF SUPPLIER_INFO_OUR_ID_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_OUR_ID_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

-- ***** Supplier_Info_Our_Id_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Company_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_15');
PROMPT Adding DEFAULT VALUES TO column IDENTIFIER_REF_VALIDATION AND DOC_RECIP_ADDRESS_POS of COMPANY_TAB
BEGIN
   UPDATE COMPANY_TAB
      SET    IDENTIFIER_REF_VALIDATION = 'NONE'
      WHERE  IDENTIFIER_REF_VALIDATION IS NULL;

   UPDATE COMPANY_TAB
      SET    DOC_RECIP_ADDRESS_POS = 'RIGHT'
      WHERE  DOC_RECIP_ADDRESS_POS IS NULL;

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_16');
PROMPT Updating COLUMN IDENTIFIER_REF_VALIDATION AND DOC_RECIP_ADDRESS_POS OF COMPANY_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('IDENTIFIER_REF_VALIDATION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DOC_RECIP_ADDRESS_POS', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_17');
PROMPT Adding column MASTER_COMPANY as a NOT NULL COLUMN
DECLARE
	column_ Database_SYS.ColRec;
BEGIN
	column_ := Database_SYS.Set_Column_Values('MASTER_COMPANY', 'VARCHAR2(20)', 'N','''FALSE''',keep_default_ => 'N');
	Database_SYS.Alter_Table_Column('COMPANY_TAB', 'A', column_ , TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_18');
PROMPT Adding new column to COMPANY_TAB
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRINT_SENDERS_ADDRESS', 'VARCHAR2(20)', 'N','''FALSE''',keep_default_ => 'N');
   Database_SYS.Alter_Table_Column ( 'COMPANY_TAB', 'A', column_, TRUE);
END;
/

-- ***** Company_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_19');
PROMPT Adding DEFAULT VALUES TO column IDENTIFIER_REF_VALIDATION of CUSTOMER_INFO_TAB
BEGIN
   UPDATE CUSTOMER_INFO_TAB
   SET    IDENTIFIER_REF_VALIDATION = 'NONE'
   WHERE  IDENTIFIER_REF_VALIDATION IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_20');
PROMPT Updating COLUMN IDENTIFIER_REF_VALIDATION OF CUSTOMER_INFO_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('IDENTIFIER_REF_VALIDATION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_21');
PROMPT Adding new column CUSTOMER_CATEGORY to CUSTOMER_INFO_TAB.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CUSTOMER_CATEGORY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_22');
PROMPT Updating the value of column CUSTOMER_CATEGORY in CUSTOMER_INFO_TAB.
BEGIN
   UPDATE CUSTOMER_INFO_TAB
   SET    CUSTOMER_CATEGORY = 'CUSTOMER'
   WHERE  CUSTOMER_CATEGORY IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_23');
PROMPT Making the column CUSTOMER_CATEGORY NOT NULL

DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CUSTOMER_CATEGORY', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_TAB', 'M', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_24');
PROMPT Adding column ONE_TIME to CUSTOMER_INFO_TAB
DECLARE
   table_name_   VARCHAR2(30) := 'CUSTOMER_INFO_TAB';
   column_       Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ONE_TIME', 'VARCHAR2(20)', 'N','''FALSE''',keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** Customer_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supplier_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_25');
PROMPT Adding DEFAULT VALUES TO column IDENTIFIER_REF_VALIDATION of SUPPLIER_INFO_TAB

BEGIN
   UPDATE SUPPLIER_INFO_TAB
      SET    IDENTIFIER_REF_VALIDATION = 'NONE'
      WHERE  IDENTIFIER_REF_VALIDATION IS NULL;
   COMMIT;
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_26');
PROMPT Updating COLUMN IDENTIFIER_REF_VALIDATION OF SUPPLIER_INFO_TAB TO NOT nullable

DECLARE
   table_name_ VARCHAR2(30) := 'SUPPLIER_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('IDENTIFIER_REF_VALIDATION', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_27');
PROMPT Creating INDEX ON SUPPLIER_INFO_TAB

DECLARE
   index_columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(index_columns_, 'ASSOCIATION_NO');
   Database_SYS.Create_Index('SUPPLIER_INFO_TAB',
                             'SUPPLIER_INFO_IX3',
                             index_columns_,
                             tablespace_ => '&IFSAPP_INDEX',
                             show_info_  => TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_28');
PROMPT Adding column ONE_TIME to SUPPLIER_INFO_TAB
DECLARE
   table_name_   VARCHAR2(30) := 'SUPPLIER_INFO_TAB';
   column_       Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ONE_TIME', 'VARCHAR2(20)', 'N','''FALSE''',keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** Supplier_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Company_Delivery_Tax_Exemp_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_29');
PROMPT Adding DEFAULT VALUES TO column EXEMPT_CERTIFICATE_TYPE of COMPANY_DELIVERY_TAX_EXEMP_TAB
BEGIN
   UPDATE COMPANY_DELIVERY_TAX_EXEMP_TAB
   SET    EXEMPT_CERTIFICATE_TYPE = 'BLANKET CERTIFICATE'
   WHERE  EXEMPT_CERTIFICATE_TYPE IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_30');
PROMPT Updating COLUMN EXEMPT_CERTIFICATE_TYPE OF COMPANY_DELIVERY_TAX_EXEMP_TAB TO NOT nullable
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_DELIVERY_TAX_EXEMP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('EXEMPT_CERTIFICATE_TYPE', NULL, 'N');
   Database_SYS.Alter_Table_Column ( table_name_ , 'M', column_ , TRUE );
END;
/

-- ***** Company_Delivery_Tax_Exemp_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Copying_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_31');
PROMPT Adding new columns COPY_FOR_CATEGORY, COPY_CONVERT_OPTION to COPYING_INFO_TAB.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('COPY_FOR_CATEGORY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column('COPYING_INFO_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('COPY_CONVERT_OPTION', 'VARCHAR2(14)', 'Y');
   Database_SYS.Alter_Table_Column('COPYING_INFO_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_32');
PROMPT Updating the value of column COPY_FOR_CATEGORY in COPYING_INFO_TAB.
BEGIN
   UPDATE COPYING_INFO_TAB
   SET    COPY_FOR_CATEGORY = CASE
                                 WHEN ((PARTY_TYPE = 'CUSTOMER' AND PKG_AND_METHOD_NAME IN ('Customer_Info_Msg_Setup_API.Copy_Customer', 'Customer_Info_Our_Id_API.Copy_Customer'))
                                        OR (PARTY_TYPE = 'CUSTOMER' AND MODULE != 'ENTERP')) THEN 'CUSTOMER'
                                 WHEN (PARTY_TYPE = 'CUSTOMER' AND MODULE = 'ENTERP' AND PKG_AND_METHOD_NAME NOT IN ('Customer_Info_Msg_Setup_API.Copy_Customer', 'Customer_Info_Our_Id_API.Copy_Customer')) THEN 'CUSTOMER^PROSPECT^END_CUSTOMER'
                                 ELSE 'NOT_APPLICABLE'
                              END
   WHERE  COPY_FOR_CATEGORY IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_33');
PROMPT Updating the value of column COPY_CONVERT_OPTION in COPYING_INFO_TAB.

BEGIN
   UPDATE COPYING_INFO_TAB
   SET    COPY_CONVERT_OPTION = CASE
                                   WHEN (PARTY_TYPE = 'CUSTOMER' AND PKG_AND_METHOD_NAME IN ('Crm_Cust_Info_API.Copy_Customer',
                                                                                             'Customer_Info_Our_Id_API.Copy_Customer',
                                                                                             'Customer_Info_Msg_Setup_API.Copy_Customer',
                                                                                             'Identity_Invoice_Info_API.Copy_Customer',
                                                                                             'Party_Type_Id_Property_API.Copy_Customer',
                                                                                             'Customer_Assortment_Struct_API.Copy_Customer',
                                                                                             'Cust_Def_Com_Receiver_API.Copy_Customer' ,
                                                                                             'Cust_Ord_Customer_API.Copy_Customer',
                                                                                             'Customer_Pricelist_API.Copy_Customer',
                                                                                             'Customer_Tax_Calc_Basis_API.Copy_Customer',
                                                                                             'Identity_Pay_Info_API.Copy_Customer',
                                                                                             'CUSTOMER_PRJREP_PARAMS_API.Copy_Customer'))
                                       THEN 'COPY^CONVERT'

                                    WHEN (PARTY_TYPE = 'SUPPLIER')
                                       THEN 'NOT_APPLICABLE'

                                    ELSE 'COPY'
                                 END
   WHERE  COPY_CONVERT_OPTION IS NULL;
   COMMIT;
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_34');
PROMPT Making the column COPY_FOR_CATEGORY NOT NULL
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('COPY_FOR_CATEGORY', 'VARCHAR2(30)', 'N');
   Database_SYS.Alter_Table_Column('COPYING_INFO_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_35');
PROMPT Making the column COPY_CONVERT_OPTION NOT NULL

DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('COPY_CONVERT_OPTION', 'VARCHAR2(14)', 'N');
   Database_SYS.Alter_Table_Column('COPYING_INFO_TAB', 'M', column_, TRUE);
END;
/


-- ***** Copying_Info_Tab End *****
--
---------------------------------------------------------------------------------------------

-- ***** Customer_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_36');
PROMPT Adding new columns to Customer_Info_Address_Tab
DECLARE
   table_name_   VARCHAR2(30) := 'CUSTOMER_INFO_ADDRESS_TAB';
   column_       Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('END_CUSTOMER_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);
   column_ := Database_SYS.Set_Column_Values('END_CUST_ADDR_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);
   column_ := Database_SYS.Set_Column_Values('NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('COMM_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('OUTPUT_MEDIA', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_37');
PROMPT Transfer company_name2 from cust_ord_customer_address to name in customer_info_address_tab
DECLARE
   TYPE ref_cursor_type IS REF CURSOR;

   check_exist_  ref_cursor_type;
   stmt1_        VARCHAR2(32000);
   dummy_        NUMBER;
   not_found_    BOOLEAN;
BEGIN
   stmt1_ :=  'SELECT 1
               FROM   CUSTOMER_INFO_ADDRESS_TAB
               WHERE  name IS NOT NULL';

   OPEN check_exist_ FOR stmt1_;
   FETCH check_exist_ INTO dummy_;
   IF (check_exist_%NOTFOUND) THEN
      not_found_ := TRUE;
   ELSE
      not_found_ := FALSE;
   END IF;
   CLOSE check_exist_;

   IF (Database_SYS.Component_Active('ORDER') AND
       Database_SYS.Table_Exist('cust_ord_customer_address_tab') AND
       not_found_) THEN
      EXECUTE IMMEDIATE
      'UPDATE customer_info_address_tab c
         SET    name = (SELECT company_name2
                        FROM   cust_ord_customer_address_tab o
                        WHERE  c.customer_id = o.customer_no
                        AND    c.address_id = o.addr_no )
         WHERE  EXISTS (SELECT 1
                        FROM   cust_ord_customer_address_tab o
                        WHERE  c.customer_id = o.customer_no
                        AND    c.address_id = o.addr_no
                        AND    o.company_name2 IS NOT NULL)';
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_38');
PROMPT Drop CUSTOMER_INFO_ADDRESS_IX1 AND CUSTOMER_INFO_ADDRESS_IX2 AND CUSTOMER_INFO_ADDRESS_PARTY_IX ON CUSTOMER_INFO_ADDRESS_TAB

DECLARE
   index_columns_ Database_SYS.ColumnTabType;
BEGIN
   IF Database_SYS.Index_Exist('CUSTOMER_INFO_ADDRESS_IX1') THEN
      Database_SYS.Remove_Indexes ('CUSTOMER_INFO_ADDRESS_TAB', 'CUSTOMER_INFO_ADDRESS_IX1');
   END IF;
   IF Database_SYS.Index_Exist('CUSTOMER_INFO_ADDRESS_IX2') THEN
      Database_SYS.Remove_Indexes ('CUSTOMER_INFO_ADDRESS_TAB', 'CUSTOMER_INFO_ADDRESS_IX2');
   END IF;

   IF Database_SYS.Index_Exist('CUSTOMER_INFO_ADDRESS_PARTY_IX') THEN
      Database_SYS.Remove_Indexes ('CUSTOMER_INFO_ADDRESS_TAB', 'CUSTOMER_INFO_ADDRESS_PARTY_IX');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_39');
PROMPT Creating INDEX CUSTOMER_INFO_ADDRESS_IX1 ON CUSTOMER_INFO_ADDRESS_TAB
DECLARE
   index_columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(index_columns_, 'PARTY');
   Database_SYS.Set_Table_Column(index_columns_, 'ADDRESS_ID');
   Database_SYS.Set_Table_Column(index_columns_, 'DEFAULT_DOMAIN');
   Database_SYS.Create_Index('CUSTOMER_INFO_ADDRESS_TAB',
                             'CUSTOMER_INFO_ADDRESS_IX1',
                             index_columns_,
                             tablespace_ => '&IFSAPP_INDEX',
                             show_info_  => TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_40');
PROMPT Creating INDEX CUSTOMER_INFO_ADDRESS_IX2 ON CUSTOMER_INFO_ADDRESS_TAB
DECLARE
   index_columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(index_columns_, 'EAN_LOCATION');
   Database_SYS.Create_Index('CUSTOMER_INFO_ADDRESS_TAB',
                             'CUSTOMER_INFO_ADDRESS_IX2',
                             index_columns_,
                             tablespace_ => '&IFSAPP_INDEX',
                             show_info_  => TRUE);
END;
/


-- ***** Customer_Info_Address_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Person_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_41');
PROMPT Adding new columns Customer_Contact, Blocked_For_Use to Person_Info_Tab.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CUSTOMER_CONTACT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('PERSON_INFO_TAB', 'A', column_,  TRUE);

   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('PERSON_INFO_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_42');
PROMPT Updating the value of column Customer_Contact in Person_Info_Tab.
BEGIN
   UPDATE PERSON_INFO_TAB pi
   SET    pi.CUSTOMER_CONTACT = 'TRUE'
   WHERE  EXISTS (SELECT ci.PERSON_ID
                  FROM CUSTOMER_INFO_CONTACT_TAB ci
                  WHERE ci.PERSON_ID = pi.PERSON_ID)
   AND CUSTOMER_CONTACT IS NULL;

   UPDATE PERSON_INFO_TAB pi
   SET    pi.CUSTOMER_CONTACT = 'FALSE'
   WHERE  CUSTOMER_CONTACT IS NULL;

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_43');
PROMPT Updating the value of column Blocked_For_Use in Person_Info_Tab.
BEGIN
   UPDATE PERSON_INFO_TAB
   SET    BLOCKED_FOR_USE = 'FALSE'
   WHERE  BLOCKED_FOR_USE IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_44');
PROMPT Making the columns Customer_Contact and Blocked_For_Use  NOT NULL
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CUSTOMER_CONTACT', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('PERSON_INFO_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('PERSON_INFO_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_45');
PROMPT Updating First_Name, Middle_Name, Last_Name columns in Person_Info_Tab.
DECLARE
   first_name_     VARCHAR2(100);
   middle_name_    VARCHAR2(100);
   last_name_      VARCHAR2(100);
   constuct_name_  VARCHAR2(100);

   TYPE STRING_TABLE IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
   TYPE NUMBER_TABLE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

   CURSOR get_person_names IS
      SELECT *
      FROM  Person_Info_Tab
      WHERE first_name  IS NULL
      AND   middle_name IS NULL
      AND   last_name   IS NULL
      AND   TRIM(name)  IS NOT NULL;

   TYPE person_rec_type     IS TABLE OF get_person_names%ROWTYPE    INDEX BY BINARY_INTEGER;
   person_recs_             person_rec_type;
   index_                   NUMBER;
   bulk_limit_              CONSTANT NUMBER := 10000;

   -- Below method is a simplified version of Utility_SYS.Tokenize method.
   -- This will add elements of the string splitted by the empty string(' ')
   -- to the output_table_.
   PROCEDURE Tokenize( string_       IN VARCHAR2,
                       output_table_ OUT STRING_TABLE,
                       token_count_  OUT NUMBER)
   IS
      counter_          NUMBER;
      last_pos_         NUMBER;
      delimiter_count_  NUMBER;
      pos_              NUMBER;
      token_            VARCHAR2(2000);
      temp_string_      VARCHAR2(32000);
      delimiter_pos_    NUMBER_TABLE;
   BEGIN
      token_count_      := 1;
      last_pos_         := 1;
      delimiter_count_  := 0;

      temp_string_ := string_ || ' ';

      LOOP
         pos_ := instr (temp_string_, ' ', 1, delimiter_count_ + 1);
         IF NOT pos_ = 0 THEN
            delimiter_count_ := delimiter_count_ + 1;
            delimiter_pos_(delimiter_count_) := pos_;
         ELSE
            EXIT;
         END IF;
      END LOOP;

      token_count_ := 0;
      FOR counter_ IN 1..delimiter_count_
      LOOP
         token_ := substr (temp_string_, last_pos_, delimiter_pos_ (counter_) - last_pos_);
         last_pos_ := delimiter_pos_ (counter_) + length(' ');
         IF NOT token_ IS NULL THEN
            token_count_ := token_count_ + 1;
            output_table_(token_count_) := token_;
         END IF;
      END LOOP;
   END Tokenize;


   --   This method takes the person name value as input parameter and return
   --   First, Middle, Last names extracting from it.
   --   First name will be the first most element in the name and the last name will be the last most one.
   --   The whole texts in between will be suggested as the middle name.
   PROCEDURE Analyze_Name (
      first_name_       OUT VARCHAR2,
      middle_name_      OUT VARCHAR2,
      last_name_        OUT VARCHAR2,
      full_name_        IN  VARCHAR2)
   IS
      name_elements_      STRING_TABLE;
      name_element_count_ NUMBER;
      counter_            NUMBER;
   BEGIN
      Tokenize(full_name_,name_elements_, name_element_count_);

      first_name_ := name_elements_(1);

      -- Setting the Middle Name
      IF (name_element_count_ > 2) THEN
         middle_name_ := NULL;
         counter_ := 2;
         WHILE(counter_ < (name_element_count_)) LOOP
            middle_name_ := concat(middle_name_, concat(name_elements_(counter_), ' '));
            counter_ := counter_ + 1;
         END LOOP;
         middle_name_:= substr(middle_name_, 0, (length(middle_name_) - 1));
      END IF;

      IF (NOT(name_element_count_ = 1)) THEN
         last_name_ :=  name_elements_(name_element_count_);
      END IF;
   END Analyze_Name;

   -- This method takes first_name, middle_name, last_ame as parameters
   -- and construct the full name by concatenating them.
   FUNCTION Construct_Name (
      first_name_       IN VARCHAR2,
      middle_name_      IN VARCHAR2,
      last_name_        IN VARCHAR2) RETURN VARCHAR2
   IS
      name_  VARCHAR2(100) := NULL;
   BEGIN
      name_ := first_name_;
      IF (name_ IS NOT NULL) THEN
         IF (middle_name_ IS NOT NULL) THEN
            name_ := concat(name_, concat(' ', middle_name_));
         END IF;
         IF (last_name_ IS NOT NULL) THEN
            name_ := concat(name_, concat(' ', last_name_));
         END IF;
      ELSE
         IF (middle_name_ IS NOT NULL) THEN
            name_ := middle_name_;
            IF (last_name_ IS NOT NULL) THEN
               name_ := concat(name_, concat(' ', last_name_));
            END IF;
         ELSE
            IF (last_name_ IS NOT NULL) THEN
               name_ := last_name_;
            END IF;
         END IF;
      END IF;
      RETURN name_;
   END Construct_Name;

BEGIN
   OPEN get_person_names;
   LOOP
      FETCH get_person_names BULK COLLECT INTO person_recs_ LIMIT bulk_limit_;
      FOR index_ IN 1..person_recs_.COUNT LOOP
         first_name_   :=  NULL;
         middle_name_  :=  NULL;
         last_name_    :=  NULL;
         -- This will assign values for first_name_, middle_name_, last_name_ by splitting the name column.
         Analyze_Name(first_name_, middle_name_, last_name_, person_recs_(index_).name);
         -- Need to handle names having additional spaces.
         constuct_name_ := Construct_Name(first_name_, middle_name_, last_name_);
         -- If name already saved is not equal to concatenation of first, middle, last names,
         -- name value need to be modified. This happens for names having additional spaces.
         -- Example like Name: Marco Van    Eno  Basten will be written back as Marco Van Eno Basten.
         IF (person_recs_(index_).name != constuct_name_) THEN
            person_recs_(index_).first_name  := first_name_;
            person_recs_(index_).middle_name := middle_name_;
            person_recs_(index_).last_name   := last_name_;
            person_recs_(index_).name        := constuct_name_;
         ELSE
            person_recs_(index_).first_name  := first_name_;
            person_recs_(index_).middle_name := middle_name_;
            person_recs_(index_).last_name   := last_name_;
         END IF;
      END LOOP;

      FORALL index_ IN 1..person_recs_.COUNT
         UPDATE PERSON_INFO_TAB
         SET FIRST_NAME  =  person_recs_(index_).first_name,
            MIDDLE_NAME  =  person_recs_(index_).middle_name,
            LAST_NAME    =  person_recs_(index_).last_name,
            NAME         =  person_recs_(index_).name
         WHERE  PERSON_ID = person_recs_(index_).person_id;

         EXIT WHEN get_person_names%NOTFOUND;
   END LOOP;
   CLOSE get_person_names;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_46');
PROMPT Adding new column ALTERNATIVE_NAME to PERSON_INFO_TAB.

DECLARE
   table_name_ VARCHAR2(30) := 'PERSON_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ALTERNATIVE_NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_47');
PROMPT Deleting basic data translation for LU PersonInfo.
BEGIN
   DELETE FROM language_sys_imp_tab
   WHERE lu     = 'PersonInfo'
   AND   module = 'ENTERP'
   AND   type   = 'Basic Data';

   DELETE FROM language_sys_tab
   WHERE path LIKE 'PersonInfo_ENTERP%'
   AND   module    = 'ENTERP'
   AND   type      = 'Basic Data'
   AND   main_type = 'LU';

   COMMIT;
END;
/

-- ***** Person_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Info_Contact_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_48');
PROMPT Adding several new COLUMNS Blocked_For_Crm_Objects, personal_interest, campaign_interest, decision_power_type, department, manager, manager_cust_address, manager_guid, main_representative_id to Customer_Info_Contact_Tab.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_CRM_OBJECTS', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('PERSONAL_INTEREST', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('CAMPAIGN_INTEREST', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('DECISION_POWER_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('DEPARTMENT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('MANAGER', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('MANAGER_GUID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('MANAGER_CUST_ADDRESS', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('MAIN_REPRESENTATIVE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_49');
PROMPT Updating the value of column Blocked_For_Crm_Objects in Customer_Info_Contact_Tab.
BEGIN
   UPDATE CUSTOMER_INFO_CONTACT_TAB
   SET    BLOCKED_FOR_CRM_OBJECTS = 'FALSE'
   WHERE  BLOCKED_FOR_CRM_OBJECTS IS NULL;

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_50');
PROMPT Making the column Blocked_For_Crm_Objects Not Null
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_CRM_OBJECTS', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Info_Contact_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Key_Lu_Translation_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_51');
PROMPT updating KEY_LU_TRANSLATION_TAB TABLE

BEGIN
   UPDATE KEY_LU_TRANSLATION_TAB t
      SET  (t.installation_translation,t.current_translation)  =
           (SELECT c.c1,c.c1
            FROM create_company_tem_detail_tab c
            WHERE  c.template_id = 'STD-JP'
               AND c.component   = 'ACCRUL'
               AND c.lu          = 'AccountingPeriod'
               AND c.n1          = SUBSTR(t.attribute_key, 1, 4)
               AND c.n2          = SUBSTR(t.attribute_key, 6)
               AND ROWNUM        = 1)
      WHERE t.key_name           = 'CompanyKeyLu'
         AND   t.module          = 'ACCRUL'
         AND   t.lu              = 'AccountingPeriod'
         AND   t.system_defined  = 'TRUE'
         AND   t.Language_Code  IN ('en','PROG')
         AND   EXISTS (SELECT 1
                       FROM company_tab t1
                       WHERE t1.company          = t.key_value
                       AND   t1.from_template_id = 'STD-JP');
   COMMIT;
END;
/
-- ***** Key_Lu_Translation_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Info_Msg_Setup_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_52');
PROMPT Adding column LOCALE to CUSTOMER_INFO_MSG_SETUP_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_INFO_MSG_SETUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('LOCALE', 'VARCHAR2(8)','Y');
   Database_SYS.Alter_Table_Column ( table_name_ , 'A', column_ , TRUE );
END;
/

-- ***** Customer_Info_Msg_Setup_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Fin_Note_Text_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_53');
PROMPT Adding INDEX to FIN_NOTE_TEXT_TAB

DECLARE
   table_name_    VARCHAR2(30) := 'FIN_NOTE_TEXT_TAB';
   index_columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(index_columns_, 'NOTE_ID');
   Database_SYS.Set_Table_Column(index_columns_, 'TIMESTAMP');
   Database_SYS.Create_Index(table_name_,
                             'FIN_NOTE_TEXT_IX1',
                             index_columns_,
                             'N',
                             '&IFSAPP_INDEX',
                             NULL,
                             TRUE,
                             TRUE);
END;
/

-- ***** Fin_Note_Text_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supplier_Info_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_54');
PROMPT Adding name to Supplier_Info_Address_Tab
DECLARE
   table_name_   VARCHAR2(30) := 'SUPPLIER_INFO_ADDRESS_TAB';
   column_       Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('COMM_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('OUTPUT_MEDIA', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_55');
PROMPT Transfer company_name2 from supplier_address_tab to name in supplier_info_address_tab
DECLARE
   TYPE ref_cursor_type IS REF CURSOR;

   check_exist_  ref_cursor_type;
   stmt1_        VARCHAR2(32000);
   dummy_        NUMBER;
   not_found_    BOOLEAN;
BEGIN
   stmt1_ :=  'SELECT 1
               FROM   SUPPLIER_INFO_ADDRESS_TAB
               WHERE  name IS NOT NULL';

   OPEN check_exist_ FOR stmt1_;
   FETCH check_exist_ INTO dummy_;
   IF (check_exist_%NOTFOUND) THEN
      not_found_ := TRUE;
   ELSE
      not_found_ := FALSE;
   END IF;
   CLOSE check_exist_;

   IF (Database_SYS.Component_Active('PURCH') AND
       Database_SYS.Table_Exist('supplier_address_tab') AND
       not_found_) THEN
      EXECUTE IMMEDIATE
         'UPDATE supplier_info_address_tab s
         SET    name = (SELECT company_name2
                        FROM   supplier_address_tab p
                        WHERE  s.supplier_id = p.vendor_no
                        AND    s.address_id = p.addr_no )
         WHERE  EXISTS (SELECT 1
                        FROM   supplier_address_tab p
                        WHERE  s.supplier_id = p.vendor_no
                        AND    s.address_id = p.addr_no
                        AND    p.company_name2 IS NOT NULL)';
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_56');
PROMPT Creating INDEX ON SUPPLIER_INFO_ADDRESS_TAB

DECLARE
   index_columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(index_columns_, 'EAN_LOCATION');
   Database_SYS.Create_Index('SUPPLIER_INFO_ADDRESS_TAB',
                             'SUPPLIER_INFO_ADDRESS_IX2',
                             index_columns_,
                             tablespace_ => '&IFSAPP_INDEX',
                             show_info_  => TRUE);
END;
/

-- ***** Supplier_Info_Address_Tab End *****

-----------------------------------------------------------------------------------------

-- ***** Crecomp_Component_Lu_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_57');
PROMPT Removing records IN CRECOMP_COMPONENT_LU_TAB
BEGIN
   DELETE
      FROM  CRECOMP_COMPONENT_LU_TAB
      WHERE ((module = 'ENTERP' AND lu = 'ValidationPerCompany') OR
             (module = 'GENLED' AND lu IN ('GlValueSet', 'GlKeyMetricIdentity')));
   COMMIT;
END;
/

-- ***** Crecomp_Component_Lu_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Contact_Role_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_58');
PROMPT Creating table CONTACT_ROLE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONTACT_ROLE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROLE_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_59');
PROMPT Creating Constraints CONTACT_ROLE_PK, CONTACT_ROLE_RK
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONTACT_ROLE_TAB';
   index_name_ VARCHAR2(30) := 'CONTACT_ROLE_PK';
   rkidx_name_ VARCHAR2(30) := 'CONTACT_ROLE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROLE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_60');
PROMPT Inserting records to CONTACT_ROLE_TAB and updating CUSTOMER_INFO_CONTACT_TAB, SUPPLIER_INFO_CONTACT_TAB role column with Role_Id VALUES
DECLARE
   role_id_  NUMBER := 0;
   count_    NUMBER;
   char_length1_   NUMBER;
   char_length2_   NUMBER;

   CURSOR check_cus_role_column_length IS
      SELECT char_length
      FROM USER_TAB_COLUMNS
      WHERE table_name = 'CUSTOMER_INFO_CONTACT_TAB'
      AND column_name = 'ROLE';

   CURSOR check_sup_role_column_length IS
      SELECT char_length
      FROM USER_TAB_COLUMNS
      WHERE table_name = 'SUPPLIER_INFO_CONTACT_TAB'
      AND column_name = 'ROLE';

   CURSOR get_roles IS
       SELECT DISTINCT(role)
       FROM CUSTOMER_INFO_CONTACT_TAB c
       WHERE c.role IS NOT NULL
       UNION
       SELECT DISTINCT(role)
       FROM SUPPLIER_INFO_CONTACT_TAB s
       WHERE s.role IS NOT NULL;

BEGIN
   OPEN check_cus_role_column_length;
   FETCH check_cus_role_column_length INTO char_length1_;
   CLOSE check_cus_role_column_length;

   OPEN check_sup_role_column_length;
   FETCH check_sup_role_column_length INTO char_length2_;
   CLOSE check_sup_role_column_length;

   IF ((char_length1_ = 50) AND (char_length2_ = 50)) THEN
      -- Inserting role data to basic data table CONTACT_ROLE_TAB
      FOR rec_ IN get_roles LOOP
        role_id_ := role_id_ + 1;
        INSERT INTO CONTACT_ROLE_TAB
           (role_id,
            description,
            rowversion)
        VALUES
           (role_id_,
            rec_.role,
            SYSDATE);
     END LOOP;

     -- Update  CUSTOMER_INFO_CONTACT_TAB - role column with Role_Id
     UPDATE CUSTOMER_INFO_CONTACT_TAB cc
        SET cc.role = '^' || (SELECT cr.role_id
                              FROM CONTACT_ROLE_TAB cr
                              WHERE  cc.role = cr.description) || '^'
        WHERE cc.role IS NOT NULL;

     -- Update  SUPPLIER_INFO_CONTACT_TAB - role column with Role_Id
     UPDATE SUPPLIER_INFO_CONTACT_TAB cc
        SET cc.role = '^' || (SELECT cr.role_id
                              FROM CONTACT_ROLE_TAB cr
                              WHERE  cc.role = cr.description) || '^'
        WHERE cc.role IS NOT NULL;

   END IF;

   COMMIT;
END;
/

-- Note: Don't move this phrase to CUSTOMER_INFO_CONTACT_TAB modification section as changing column length
-- must be done after the data upgrade.
exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_61');
PROMPT Modifying CUSTOMER_INFO_CONTACT_TAB-ROLE columnn length to 4000
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROLE', 'VARCHAR2(4000)' );
   Database_SYS.Alter_Table_Column('CUSTOMER_INFO_CONTACT_TAB', 'M', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_62');
PROMPT Change column NOTE_TEXT from VARCHAR2 to CLOB
DECLARE
   column_     Database_SYS.ColRec;
   table_      VARCHAR2(30) := 'CUSTOMER_INFO_CONTACT_TAB';
   note_       VARCHAR2(30) := 'NOTE_TEXT';
   note_tmp_   VARCHAR2(30) := 'NOTE_TEXT_210';

BEGIN
   IF Database_SYS.Get_Column_Type(table_, note_) = 'VARCHAR2' THEN
      Database_SYS.Rename_Column(table_, note_tmp_, note_, TRUE );
      column_ := Database_SYS.Set_Column_Values(note_, 'CLOB', 'Y', NULL, 'LOB (' || note_ || ') STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 DISABLE STORAGE IN ROW)');
      Database_SYS.Add_Lob_Column(table_, column_, TRUE);
      -- ifs_assert_safe JanWse 20141027
      EXECUTE IMMEDIATE 'UPDATE ' || table_ || ' SET ' || note_ || ' = ' || note_tmp_;
      COMMIT;
   END IF;
END;
/

-- Note: Don't move this phrase to SUPPLIER_INFO_CONTACT_TAB modification section as changing column length
-- must be done after the data upgrade.
exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_63');
PROMPT Modifying SUPPLIER_INFO_CONTACT_TAB-ROLE columnn length to 4000
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROLE', 'VARCHAR2(4000)' );
   Database_SYS.Alter_Table_Column('SUPPLIER_INFO_CONTACT_TAB', 'M', column_, TRUE );
END;
/

-- ***** Contact_Role_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Client_Mapping_Detail_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_64');
PROMPT Removing obsolete Data from CLIENT_MAPPING_DETAIL_TAB
BEGIN
    DELETE
      FROM CLIENT_MAPPING_DETAIL_TAB
      WHERE module     = 'GENLED'
      AND   lu         = 'GenLedUpdateParameter'
      AND   mapping_id = 'CCD_GENLEDUPDATEPARAMETER'
      AND column_id    = 'C1';

   COMMIT;
END;
/
-- ***** Client_Mapping_Detail_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Renaming Non standard Indexes Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_65');
PROMPT Renaming Non standard INDEXES
BEGIN

   IF Database_SYS.Index_Exist('COMPANY_PARTY_IX') THEN
      Database_SYS.Rename_Index('COMPANY_PARTY_IX','COMPANY_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('COMPANY_ADDRESS_PARTY_IX') THEN
      Database_SYS.Rename_Index('COMPANY_ADDRESS_PARTY_IX','COMPANY_ADDRESS_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('COMPANY_ADDRESS_TYPE_PARTY_IX') THEN
      Database_SYS.Rename_Index('COMPANY_ADDRESS_TYPE_PARTY_IX','COMPANY_ADDRESS_TYPE_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('COMPANY_EMP_IX') THEN
      Database_SYS.Rename_Index('COMPANY_EMP_IX','COMPANY_EMP_IX2',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('CUSTOMER_INFO_PARTY_IX') THEN
      Database_SYS.Rename_Index('CUSTOMER_INFO_PARTY_IX','CUSTOMER_INFO_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('CUSTOMER_INFO_ADD_TYP_PARTY_IX') THEN
      Database_SYS.Rename_Index('CUSTOMER_INFO_ADD_TYP_PARTY_IX','CUSTOMER_INFO_ADDRESS_TYPE_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('FORWARDER_INFO_PARTY_IX') THEN
      Database_SYS.Rename_Index('FORWARDER_INFO_PARTY_IX','FORWARDER_INFO_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('FORWARDER_INFO_ADDR_PARTY_IX') THEN
      Database_SYS.Rename_Index('FORWARDER_INFO_ADDR_PARTY_IX','FORWARDER_INFO_ADDRESS_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('FORW_INFO_ADDR_TYPE_PARTY_IX') THEN
      Database_SYS.Rename_Index('FORW_INFO_ADDR_TYPE_PARTY_IX','FORW_INFO_ADDR_TYPE_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('INCOME_TYPE_IND1') THEN
      Database_SYS.Rename_Index('INCOME_TYPE_IND1','INCOME_TYPE_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('KEY_LU_UX') THEN
      Database_SYS.Rename_Index('KEY_LU_UX','KEY_LU_UX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('MANUFACTURER_INFO_PARTY_IX') THEN
      Database_SYS.Rename_Index('MANUFACTURER_INFO_PARTY_IX','MANUFACTURER_INFO_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('MANUF_INFO_ADDR_PARTY_IX') THEN
      Database_SYS.Rename_Index('MANUF_INFO_ADDR_PARTY_IX','MANUFACTURER_INFO_ADDRESS_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('MANUF_INFO_ADDR_TYPE_PARTY_IX') THEN
      Database_SYS.Rename_Index('MANUF_INFO_ADDR_TYPE_PARTY_IX','MANUF_INFO_ADDR_TYPE_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('OWNER_INFO_PARTY_IX') THEN
      Database_SYS.Rename_Index('OWNER_INFO_PARTY_IX','OWNER_INFO_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('OWNER_INFO_ADDRESS_PARTY_IX') THEN
      Database_SYS.Rename_Index('OWNER_INFO_ADDRESS_PARTY_IX','OWNER_INFO_ADDRESS_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('OWNER_INFO_ADDR_TYPE_PARTY_IX') THEN
      Database_SYS.Rename_Index('OWNER_INFO_ADDR_TYPE_PARTY_IX','OWNER_INFO_ADDRESS_TYPE_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('PERSON_INFO_PARTY_IX') THEN
      Database_SYS.Rename_Index('PERSON_INFO_PARTY_IX','PERSON_INFO_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('USER_ID_UX') THEN
      Database_SYS.Rename_Index('USER_ID_UX','PERSON_INFO_UX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('PERSON_INFO_ADDRESS_PARTY_IX') THEN
      Database_SYS.Rename_Index('PERSON_INFO_ADDRESS_PARTY_IX','PERSON_INFO_ADDRESS_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('PERSON_INFO_ADDR_TYPE_PARTY_IX') THEN
      Database_SYS.Rename_Index('PERSON_INFO_ADDR_TYPE_PARTY_IX','PERSON_INFO_ADDRESS_TYPE_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('REMOVE_COMPANY_UX') THEN
      Database_SYS.Rename_Index('REMOVE_COMPANY_UX','REMOVE_COMPANY_UX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('SUPPLIER_INFO_NAME_IX') THEN
      Database_SYS.Rename_Index('SUPPLIER_INFO_NAME_IX','SUPPLIER_INFO_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('SUPPLIER_INFO_PARTY_IX') THEN
      Database_SYS.Rename_Index('SUPPLIER_INFO_PARTY_IX','SUPPLIER_INFO_IX4',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('SUPPLIER_INFO_ADDR_PARTY_IX') THEN
      Database_SYS.Rename_Index('SUPPLIER_INFO_ADDR_PARTY_IX','SUPPLIER_INFO_ADDRESS_IX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('SUPP_INFO_ADDR_TYPE_PARTY_IX') THEN
      Database_SYS.Rename_Index('SUPP_INFO_ADDR_TYPE_PARTY_IX','SUPPLIER_INFO_ADDRESS_TYPE_IX1',TRUE);
   END IF;

   IF (Database_SYS.Constraint_Exist('CITY_CODE_PK2')) THEN
      Database_SYS.Rename_Constraint('CITY_CODE_TAB','CITY_CODE_PK2','CITY_CODE_UC1',TRUE);
   END IF;

   IF (Database_SYS.Constraint_Exist('county_code_pk2')) THEN
      Database_SYS.Rename_Constraint('county_code_tab','county_code_pk2','county_code_uc1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('CUSTOMER_INFO_UX') THEN
      Database_SYS.Rename_Index('CUSTOMER_INFO_UX','CUSTOMER_INFO_SX1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('PERSON_INFO_UX') THEN
      Database_SYS.Rename_Index('PERSON_INFO_UX','PERSON_INFO_SX1',TRUE);
   END IF;

   IF (Database_SYS.Constraint_Exist('STATE_CODES_PK2')) THEN
      Database_SYS.Rename_Constraint('STATE_CODES_TAB','STATE_CODES_PK2','STATE_CODES_UC1',TRUE);
   END IF;

   IF Database_SYS.Index_Exist('SUPPLIER_INFO_UX') THEN
      Database_SYS.Rename_Index('SUPPLIER_INFO_UX','SUPPLIER_INFO_SX1',TRUE);
   END IF;

END;
/

-- ***** Renaming Non standard Indexes End  *****

---------------------------------------------------------------------------------------------

-- ***** Removing obsolete database packages Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_66');
PROMPT Removing obsolete packages
BEGIN
   Database_SYS.Remove_Package('OWNER_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('COMPANY_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('CUSTOMER_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('CUSTOMS_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('FORWARDER_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('MANUF_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('PERSON_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('SUPPLIER_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('TAX_INFO_COMM_METHOD_API', TRUE);
   Database_SYS.Remove_Package('VALIDATION_PER_COMPANY_API', TRUE);
   Database_SYS.Remove_Package('COUNTRY_RULE_API', TRUE);
   Database_SYS.Remove_Package('ENTERP_COMP_CONNECT_V151_API', TRUE);
   Database_SYS.Remove_Package('ENTERP_COMP_CONNECT_V160_API', TRUE);
   Database_SYS.Remove_Package('CRECOMP_TABCOL_SKIP_API', TRUE);
END;
/

-- ***** Removing obsolete database packages End *****

-----------------------------------------------------------------------------------------

-- ***** Removing obsolete views Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_67');
PROMPT Removing obsolete views
BEGIN
   Database_SYS.Remove_View('VALIDATION_PER_COMPANY', TRUE);
   Database_SYS.Remove_View('VALIDATION_PER_COMPANY_PCT', TRUE);
   Database_SYS.Remove_View('COUNTRY_RULE', TRUE);
   Database_SYS.Remove_View('COUNTRY_RULE_LOV', TRUE);
   Database_SYS.Remove_View('CRECOMP_CONSISTENCY_CHECK', TRUE);
   Database_SYS.Remove_View('CRECOMP_TABCOL_SKIP',TRUE);
   -- Removing obsolete PCT-views earlier used for create company concept
   Database_SYS.Remove_View('BRANCH_PCT', TRUE);
END;
/

-- ***** Removing obsolete views End *****

-----------------------------------------------------------------------------------------

-- ***** Renaming obsolete tables Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_68');
PROMPT Renaming obsolete TABLES
BEGIN
   Database_SYS.Rename_Table('OWNER_INFO_COMM_METHOD_TAB', 'OWNER_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('COMPANY_COMM_METHOD_TAB', 'COMPANY_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('CUSTOMER_INFO_COMM_METHOD_TAB', 'CUSTOMER_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('CUSTOMS_INFO_COMM_METHOD_TAB', 'CUSTOMS_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('FORWARDER_INFO_COMM_METHOD_TAB', 'FORWARDER_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('MANUF_INFO_COMM_METHOD_TAB', 'MANUF_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('PERSON_INFO_COMM_METHOD_TAB', 'PERSON_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('SUPPLIER_INFO_COMM_METHOD_TAB', 'SUPPLIER_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('TAX_INFO_COMM_METHOD_TAB', 'TAX_INFO_COMM_METHOD_210', TRUE);
   Database_SYS.Rename_Table('VALIDATION_PER_COMPANY_TAB', 'VALIDATION_PER_COMPANY_210', TRUE);
   Database_SYS.Rename_Table('COUNTRY_RULE_TAB', 'COUNTRY_RULE_210', TRUE);
   Database_SYS.Rename_Table('CRECOMP_CONSISTENCY_CHECK_TAB', 'CRECOMP_CONSISTENCY_CHECK_210', TRUE);
   Database_SYS.Rename_Table('CRECOMP_TABCOL_SKIP_TAB','CRECOMP_TABCOL_SKIP_210',TRUE);
END;
/

-- ***** Renaming obsolete tables End   *****

---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Timestamp_69');
PROMPT Upgrade statements in file Enterp 210.upg end here
-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------

UNDEFINE MODULE
exec Database_SYS.Log_Detail_Time_Stamp('ENTERP','210.upg','Done');
