fragment TaxIdNumbersValidation;
component ENTERP;
layer Core;
description "Validation of Tax ID Number";

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------

command ValidateTaxIdNumberCommand {
   label = "Validate Tax ID Number";

   variable TaxIdNumberSelectionVar Text;
   variable ProjectionNameVar Text;
   variable TaxIdNumberValidationResultsVar Structure(TaxIdNumberValidationResultsStructure);

   execute {
      call ValidateTaxIdNumbersCheckTaxService(TaxIdNumberSelectionVar, ProjectionNameVar) into TaxIdNumberValidationResultsVar;
      call GetTaxIdNumberMessages(TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithInvalidCharacters,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNoCountryCode,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNotEuCountryCode,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersInvalid,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid1,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid2,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid3,
      TaxIdNumberValidationResultsVar.MsgTaxIdTypesInvalid,
      TaxIdNumberValidationResultsVar.MsgNoTaxIdTypes,
      TaxIdNumberValidationResultsVar.MsgNetworkError) into TaxIdNumberValidationResultsVar;

      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNotEuCountryCode != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNotEuCountryCode}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNoCountryCode != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNoCountryCode}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithInvalidCharacters != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithInvalidCharacters}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersInvalid != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersInvalid}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid1 != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid1}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid2 != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid2}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid3 != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid3}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdTypesInvalid != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdTypesInvalid}");
      }
      if [TaxIdNumberValidationResultsVar.MsgNoTaxIdTypes != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgNoTaxIdTypes}");
      }
      if [TaxIdNumberValidationResultsVar.MsgNetworkError != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgNetworkError}");
      }
   }
}


command BulkValidateTaxIdNumberCommand {
   label = "Validate Tax ID Number";
   mode = SelectedRecords;

   variable TaxIdNumberSelectionVar Text;
   variable ProjectionNameVar Text;
   variable TaxIdNumberValidationResultsVar Structure(TaxIdNumberValidationResultsStructure);

   bulkexecute {
      call ValidateTaxIdNumbersCheckTaxService(TaxIdNumberSelectionVar, ProjectionNameVar) into TaxIdNumberValidationResultsVar;
      call GetTaxIdNumberMessages(TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithInvalidCharacters,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNoCountryCode,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNotEuCountryCode,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersInvalid,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid1,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid2,
      TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid3,
      TaxIdNumberValidationResultsVar.MsgTaxIdTypesInvalid,
      TaxIdNumberValidationResultsVar.MsgNoTaxIdTypes,
      TaxIdNumberValidationResultsVar.MsgNetworkError) into TaxIdNumberValidationResultsVar;

      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNotEuCountryCode != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNotEuCountryCode}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNoCountryCode != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithNoCountryCode}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithInvalidCharacters != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersWithInvalidCharacters}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersInvalid != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersInvalid}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid1 != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid1}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid2 != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid2}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid3 != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdNumbersItInvalid3}");
      }
      if [TaxIdNumberValidationResultsVar.MsgTaxIdTypesInvalid != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgTaxIdTypesInvalid}");
      }
      if [TaxIdNumberValidationResultsVar.MsgNoTaxIdTypes != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgNoTaxIdTypes}");
      }
      if [TaxIdNumberValidationResultsVar.MsgNetworkError != null] {
         alert("${TaxIdNumberValidationResultsVar.MsgNetworkError}");
      }
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

---------------------------------- ACTIONS ----------------------------------
-- Company Securiity is handled by Tax_Ledger_Item_API.Update_Validated_Date, Supplier_Document_Tax_Info_API.Update_Validated_Date,
-- Customer_Document_Tax_Info_API.Update_Validated_Date, Customer_Ipd_Tax_Info_Addr_API.Update_Validated_Date, Customer_Ipd_Tax_Info_Inv_API.Update_Validated_Date,
-- Tax_Liability_Countries_API.Update_Validated_Date
-- Cash_Box_Lump_Sum_API.Update_Validated_Date
action ValidateTaxIdNumbersCheckTaxService Structure(TaxIdNumberValidationResultsStructure) {
   initialcheck implementation;
   implementation = "Java";
   ludependencies = TaxLedgerItem, SupplierDocumentTaxInfo, TaxProposalItem, CustomerIpdTaxInfoInv, CustomerIpdTaxInfoAddr, CustomerDocumentTaxInfo, TaxLiabilityCountries,
   CustomerOrder, CustomerOrderLine, ExternalCustomerOrder, ExternalCustOrderLine, ExtCustOrderChange, ExtCustOrderLineChange, CashBoxLumpSum;

   parameter FullSelection Text;
   parameter ProjectionName Text;
}

function GetTaxIdNumberMessages Structure(TaxIdNumberValidationResultsStructure) {
   parameter InvalidCharacter Text;
   parameter NoCountryCode Text;
   parameter NotEuCountryCode Text;
   parameter InvalidTaxId Text;
   parameter ItInvalid1 Text;
   parameter ItInvalid2 Text;
   parameter ItInvalid3 Text;
   parameter InvalidTaxIdType Text;
   parameter NoTaxIdType Text;
   parameter NetworkError Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure TaxIdNumberValidationResultsStructure {
   attribute MsgTaxIdNumbersWithInvalidCharacters Text;
   attribute MsgTaxIdNumbersWithNoCountryCode Text;
   attribute MsgTaxIdNumbersWithNotEuCountryCode Text;
   attribute MsgTaxIdNumbersInvalid Text;
   attribute MsgTaxIdNumbersItInvalid1 Text;
   attribute MsgTaxIdNumbersItInvalid2 Text;
   attribute MsgTaxIdNumbersItInvalid3 Text;
   attribute MsgTaxIdTypesInvalid Text;
   attribute MsgNoTaxIdTypes Text;
   attribute MsgNetworkError Text;
}
