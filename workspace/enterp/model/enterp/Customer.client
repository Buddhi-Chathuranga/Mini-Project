-----------------------------------------------------------------------------
-- Date    Sign    History
-- ------  ------  ------------------------------------------------------
-- 191002  Satglk  SCXTEND-440, Added missing navigator entries.
-- 200102  Hiralk  GESPRING20-1771, Included LocalizationControlCenterHandler fragment.
-- 200114  Thjilk  Bug 151824, Added attribute Name to CustomerInfoAddressSelector.
-- 200910  misibr  GEFALL20-3013, added LOV BusinessClassificationRef.
-- 210211  ckumlk  FISPRING20-9011, Applied Start-up Mode.
-- 210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
-- 210601  SWiclk  COM21R2-89, Modified CustomerHeaderGroup by adding B2bCustomer field (invisible)
-- 210608  ChFolk  SCZ-15100(Bug 159621), Modified AddressInfo page to make Sales Address Information tab visible for End Customer as well.
-- 210629  Carabr  FI21R2-2540, replaced BusinessClassificationRef.Description by BusinessClassificationDesc
-- 211201  Kgamlk  FI21R2-7229, Added DateOfRegistration.
-- 220125  ErFelk  Bug 162059(SC21R2-7170), Modified AddressInfo page to make Document Tax Information tab visible for End Customer.
-----------------------------------------------------------------------------
client Customer;
component ENTERP;
layer Core;
projection CustomerHandling;

include fragment AssociationInfoSelector;
include fragment CustomerInfoAddrDelPubLovSelector;
include fragment PersonInfoAddress1Selector;
include fragment PersonInfoAllSelector;
include fragment AddCustomerContactDialog;
include fragment CommunicationMethodsList;
include fragment CopyCustomerDialog;
include fragment ChangeCustomerCategoryDialog;
@DynamicComponentDependency INVOIC
include fragment CustomerAddressDeliveryTaxInformation;
@DynamicComponentDependency INVOIC
include fragment CustomerAddressDeliveryTaxSupplyCountryInformation;
@DynamicComponentDependency INVOIC
include fragment CustomerAddressDocumentTaxInformation;
@DynamicComponentDependency INVOIC
include fragment CustomerInvoiceInformation;
@DynamicComponentDependency PAYLED
include fragment CustomerPaymentInformation;
@DynamicComponentDependency PAYLED
include fragment CustomerCreditInformation;
@DynamicComponentDependency CRM
include fragment CustomerCrmInfo;
@DynamicComponentDependency ORDER
include fragment SalesCustomerAddressTab;
@DynamicComponentDependency ORDER
include fragment CustomerSalesInfo;
@DynamicComponentDependency PRJREP
include fragment CustomerPrjrepParameters;

warningsenabled = CustomerInfo, ChangeCustomerCategory, CommMethod, CheckDefaultCommMethod, CustomerInfoAddressType, CheckDefaultAddressType, CustomerInfoAddress;
@DynamicComponentDependency INVOIC
warningsenabled = CustomerTaxInfo, CustomerDeliveryTaxInfo, ValidateNoInvoiceCopies, CustomerDocumentTaxInfo, CustomerAddrTaxNumber;
@DynamicComponentDependency PAYLED
warningsenabled = CustomerCreditInfo, UpdateReminderTemplate, IdentityPayInfo;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CustomerNavEntry parent EnterpNavigator.CustomerMenu at index 100 {
      label = "Customer";

      page Form home CustomerInfo selector CustomerInfoSelector;
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      @DynamicComponentDependency INVOIC
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PAYLED
      entry CreditInfoNavEntry;
      @DynamicComponentDependency CRM
      entry CustomerInfoNavEntry;
      @DynamicComponentDependency ORDER
      entry SalesInfoNavEntry;
      @DynamicComponentDependency PRJREP
      entry PrjrepParamsNavEntry;
   }
   @DynamicComponentDependency INVOIC
   entry CustomerInvoiceCustomerNavEntry parent InvoiceNavigator.CustomerInvoiceMenu at index 450 {
      label = "Customer";

      page Form home CustomerInfo selector CustomerInfoSelector;
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PAYLED
      entry CreditInfoNavEntry;
      @DynamicComponentDependency CRM
      entry CustomerInfoNavEntry;
      @DynamicComponentDependency ORDER
      entry SalesInfoNavEntry;
      @DynamicComponentDependency PRJREP
      entry PrjrepParamsNavEntry;
   }
   @DynamicComponentDependency ORDER
   entry CustomersSalesSpecificInformationNavEntry parent OrderNavigator.SalesCustomer at index 50 {
      label = "Customer";

      page Form home CustomerInfo selector CustomerInfoSelector;
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PAYLED
      entry CreditInfoNavEntry;
      @DynamicComponentDependency CRM
      entry CustomerInfoNavEntry;
      entry SalesInfoNavEntry;
      @DynamicComponentDependency PRJREP
      entry PrjrepParamsNavEntry;
   }
}


entry AddressInfoNavEntry {
   label = "Address";

   page AddressInfo selector CustomerInfoSelector;
}


entry ContactNavEntry {
   label = "Contact";

   page Contact selector CustomerInfoSelector;
}


entry CommunicationMethodNavEntry {
   label = "Communication Method";

   page CommunicationMethod selector CustomerInfoSelector;
}


entry MessageSetupNavEntry {
   label = "Message Setup";

   page MessageSetup selector CustomerInfoSelector;
}

@DynamicComponentDependency INVOIC
entry InvoiceNavEntry {
   label = "Invoice";

   page Invoice selector CustomerInfoSelector;
}

@DynamicComponentDependency PAYLED
entry PaymentNavEntry {
   label = "Payment";

   page Payment selector CustomerInfoSelector;
}

@DynamicComponentDependency PAYLED
entry CreditInfoNavEntry {
   label = "Credit Information";

   page CreditInfo selector CustomerInfoSelector;
}

@DynamicComponentDependency CRM
entry CustomerInfoNavEntry {
   label = "CRM Info";

   page CustomerCrmInfoPage selector CustomerInfoSelector;
}

@DynamicComponentDependency ORDER
entry SalesInfoNavEntry {
   label = "Sales";
   page SalesInfo selector CustomerInfoSelector;
}

@DynamicComponentDependency PRJREP
entry PrjrepParamsNavEntry {
   label = "Project Reporting Info";

   page PrjrepParameters selector CustomerInfoSelector;
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using CustomerInfoSet {
   label = "Customer";
   startupmode = search;
   selector CustomerInfoSelector;
   arrange {
      group CustomerInfoGroup bind CustomerInfoSelector;
      group CustomerLogoGroup bind CustomerInfoSelector;
   }
   group CustomerGeneralInfoGroup bind CustomerInfoSelector;
   list OurIdAtCustomerList(OurIds) bind CustomerInfoSelector;

   commandgroup CustomerCmdGroup {
      command CopyCustomerCommand;
      command ChangeCategoryCommand;
      command EndCustConnCommand;
      command ViewB2BUsersCommand;
   }

   command Customer360Command;

   command ManageDataProcessingPurposesCommand;
}



page AddressInfo using CustomerInfoSet {
   label = "Address";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CustomerInfoSelector;
   group CustomerHeaderGroup;
   selector CustomerInfoAddressSelector(CustomerInfoAddresses) bind CustomerInfoSelector;
   arrange {
      group CustomerInfoAddressGroup bind CustomerInfoAddressSelector;
      group EndCustomerGroup bind CustomerInfoAddressSelector;
   }
   tabs {
      tab {
         label = "General Address Information";
         arrange {
            arrange {
               group AddressGroup bind CustomerInfoAddressSelector;
               group GeneralAddressInfoGroup bind CustomerInfoAddressSelector;
            }
            list AddressTypeList(AddressTypes) bind CustomerInfoAddressSelector;
         }
         list CommMethodAddressList(AddressCommunicationMethods) bind CustomerInfoAddressSelector;
         list CustomerInfoAddressContactList(CustomerInfoContacts) bind CustomerInfoAddressSelector {
            copyoncruddefault(CustomerId, AddressId) to(CustomerId, CustomerAddress);
         }
      }
      @DynamicComponentDependency INVOIC
      tab {
         label = "Delivery Tax Information";
         visible = [CustomerCategory in("Customer", "Prospect")];

         selector CustomerTaxInfoSelector(CustomerTaxInfoArray) bind CustomerInfoAddressSelector;
         group DeliveryTaxCodeGroup bind CustomerTaxInfoSelector;
         selector CustomerDeliveryTaxInfoSuppSelector(CustomerDeliveryTaxInfoArray) bind CustomerTaxInfoSelector;
         group SupplyCountryDeliveryGroup bind CustomerDeliveryTaxInfoSuppSelector;
         list CustomerDeliveryTaxCodeList(CustomerDeliveryTaxCodes) bind CustomerDeliveryTaxInfoSuppSelector;
         list TaxExemptList(CustomerDelTaxExemptArray)bind CustomerDeliveryTaxInfoSuppSelector;
         list CusTaxFreeTaxCodeList(CustomerTaxFreeTaxCodes) bind CustomerDeliveryTaxInfoSuppSelector;
      }
      @DynamicComponentDependency INVOIC
      tab {
         label = "Document Tax Information";
         visible = [CustomerCategory in("Customer", "Prospect", "EndCustomer")];

         list DocumentTaxCodeList(CustomerDocumentTaxInfoArray)  bind CustomerInfoAddressSelector;
         -- gelr:addr_specific_tax_reg_numbers, begin
         list CustomerAddressTaxNumberList(CustomerAddressTaxNumberArray) bind DocumentTaxCodeList {
            visible = ["ADDR_SPECIFIC_TAX_REG_NUMBERS" in selection.DocumentTaxCodeList.EnabledLccParams];
            display = Nested;
         }
         -- gelr:addr_specific_tax_reg_numbers, end
      }
      tab {
         label = "Sales Address Information";
         visible = [CustomerCategory in("Customer", "Prospect", "EndCustomer") and not OneTime];
         @DynamicComponentDependency ORDER
         singleton SalesCustomerAddressSingleton(SalesCustomerAddressArray) bind CustomerInfoAddressSelector;
         @DynamicComponentDependency ORDER
         group SalesCustomerAddressGroup bind SalesCustomerAddressSingleton;
         @DynamicComponentDependency ORDER
         group ShipmentGroup bind SalesCustomerAddressSingleton;
      }
   }
}


page Contact using CustomerInfoSet {
   label = "Contact";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CustomerInfoSelector;
   group CustomerHeaderGroup;
   list CustomerInfoContactList(CustomerInfoContacts) bind CustomerInfoSelector;
}


page CommunicationMethod using CustomerInfoSet {
   label = "Communication Method";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CustomerInfoSelector;
   group CustomerHeaderGroup;
   list CommMethodList(CommunicationMethods) bind CustomerInfoSelector;
}

page MessageSetup using CustomerInfoSet {
   label = "Message Setup";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CustomerInfoSelector;
   group CustomerHeaderGroup;
   list CustomerInfoMsgSetupList(MessageSetups) bind CustomerInfoSelector {
      visible = [CustomerCategory = "Customer"];
   }
   markdowntext {
      visible = [CustomerCategory != "Customer"];
      text = "Message Setup is not relevant for ${CustomerCategory}";
   }
}
--------------------------------- SINGLETON ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------


--------------------------------- COMMANDS ----------------------------------

command CopyCustomerCommand for CustomerInfo {
   label = "Copy Customer";
   enabled = [true];

   variable CustomerIdVar Text;

   execute {
      dialog CopyCustomerDialog(CustomerId, Name, CustomerCategory) into(CustomerIdVar) {
         when OK {
            navigate "page/Customer/Form?$filter=CustomerId eq $[CustomerIdVar] ";
         }
      }
   }
}


command ChangeCategoryCommand for CustomerInfo {
   label = "Change Customer Category";
   enabled = [CustomerCategory != "Customer"];

   execute {
      dialog ChangeCustomerCategoryDialog(CustomerId, Name, AssociationNo, CustomerCategory) {
         when OK {
            exit;
         }
      }
   }
}


command EndCustConnCommand for CustomerInfo {
   label = "View End Customer Connections";
   enabled = [true];
   execute {
      navigate "page/EndCustomersPerCustomerAnalysis/Form?$filter=CustomerId eq $[CustomerId]";
   }
}


command ViewB2BUsersCommand for CustomerInfo {
   label = "View B2B Users";
   enabled = [B2bCustomer];
   execute {
      navigate "page/B2bUserCustomer/List?$filter=CustomerId eq $[CustomerId]";
   }
}


command ManageDataProcessingPurposesCommand for CustomerInfo {
   label = "Manage Data Processing Purposes";
   enabled = [VisibleDataSubConstColumn = "TRUE"];
   variable DataSubjectDbVar Text;
   variable DataSubjectKeyRefVar Text;

   execute {
      set DataSubjectDbVar = "CUSTOMER";
      call SubjectKeyRef(DataSubjectDbVar, CustomerId, "NULL") into DataSubjectKeyRefVar;
      navigate "assistant/DataProcessingPurposeManagement/DataProcessingPurposeManagementAssistant?$action=InitPersonalConsents{KeyRefVar: $[DataSubjectKeyRefVar], DataSubjectIdVar:$[CustomerId], DataSubjectNameVar:$[Name], DataSubjectVar:$[DataSubjectDbVar]}";
   }
}

command Customer360Command for CustomerInfo {
   label = "Customer 360";
   enabled = [true];

   execute {
      navigate "lobby/f832a693-c978-4f91-8f13-03cb3681844b;pageParams=CUSTOMER_ID:${CustomerId}";
   }
}

command AddContactCommand for CustomerInfoContact {
   label = "Add Contact";
   enabled = [true];
   mode = Global;
   variable DummyVar Text;

   execute {
      dialog AddCustomerContactDialog(CustomerId, null, NoteText) into(DummyVar, DummyVar) {
         when OK {
            exit;
         }
      }
   }
}


@DynamicComponentDependency CRM
command CrmDetailsCommand for CustomerInfoContact {
   label = "CRM Details";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/CrmCustomerContact/CustomerContactPage?$filter=CustomerId eq $[CustomerId] and PersonId eq $[PersonId]";
   }
}


command AddDefaultAddressTypesCommand for CustomerInfoAddress {
   execute {
      if [CrudOperation = "create"] {
         call AddDefaultAddressTypes();
      }
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector CustomerInfoSelector for CustomerInfo {
   label = "${CustomerId} - ${Name}";

   static CustomerId {
      contactwidget {
         enabled = [true];
         source = Customer;
         key = CustomerId;
      }
   }
   static Name;
   static AssociationNo;
   static CustomerCategory;
   static OneTime {
      visible = [false];
   }
}


@Override
selector ReferenceMessageClassSelector for MessageClass {
   static ClassId {
      label = "Class ID";
   }
   static Receive {
      visible = [false];
   }
   static Send {
      visible = [false];
   }
}



selector LocalLanguageCodeSelector for LanguageCode {
   static LangCodeRfc3066;
}


@Override
selector ReferenceCustomerInfoAddressSelector for CustomerInfoAddress {
   static AddressId {
      label = "Address ID";
   }
   static SecondaryContact {
      visible = [false];
   }
}


@Override
selector CustomerInfoAddressSelector for CustomerInfoAddress {
   label = "Address ID: ${AddressId}";
   crudactions {
      after command AddDefaultAddressTypesCommand;
   }

   static CustomerId {
      visible = [false];
   }
   static AddressId;
   static Country;
   static City;
   static ZipCode;
   static EndCustomerId;
   static EanLocation {
      visible = [false];
   }
   static Name {
      visible = [false];
   }
   static EndCustAddrId {
      visible = [false];
   }
   static EndCustomerIdRef.Name {
      visible = [false];
   }
   static Address {
      visible = [false];
   }
   static InCity {
      visible = [false];
   }
   static JurisdictionCode {
      visible = [false];
   }
   static CustomerBranch {
      visible = [false];
   }
   static PrimaryContact {
      visible = [false];
   }
   static SecondaryContact {
      visible = [false];
   }
   static ValidFrom {
      visible = [false];
   }
   static ValidTo {
      visible = [false];
   }
   static Address1 {
      visible = [false];
   }
   static Address2 {
      visible = [false];
   }
   static Address3 {
      visible = [false];
   }
   static Address4 {
      visible = [false];
   }
   static Address5 {
      visible = [false];
   }
   static Address6 {
      visible = [false];
   }
   static State {
      visible = [false];
   }
   static County {
      visible = [false];
   }
   static PartyType {
      visible = [false];
   }
   static DeliveryTypeExist {
      visible = [false];
   }
   static CountryDesc {
      visible = [false];
   }
   static OneTimeDb {
      visible = [false];
   }
}


---------------------------------- GROUPS -----------------------------------
group CustomerInfoGroup for CustomerInfo {
   label = "";

   field CustomerId;
   field Name;
   lov AssociationNoRef with ReferenceAssociationInfoSelector {
      freeinput = [true];
   }
   field OneTime;
   field B2bCustomer;
   field ValidDataProcessingPurpose {
      visible = [VisibleDataSubConstColumn = "TRUE"];
   }
}


group CustomerHeaderGroup for CustomerInfo {
   label = "";

   field CustomerId;
   field Name;
   field AssociationNo;
   // Note: Introduced to be used for the Storefront Manager command in Sales-Assortment tab.
   field B2bCustomer {
      visible = [false];
   }
}


group CustomerGeneralInfoGroup for CustomerInfo {
   label = "General Information";

   field DefaultLanguage;
   field Country;
   field CustomerCategory;
   field CreationDate;
   lov CorporateFormRef with ReferenceCorporateFormSelector using CorporateFormLovWhere(Country) {
      search = CorporateForm, CorporateFormDesc;
      description = CorporateFormDesc;
   }
   lov BusinessClassificationRef with ReferenceBusinessClassificationSelector using BusinessClassificationLovWhere(Country) {
      search = BusinessClassification, BusinessClassificationDesc;
      description = BusinessClassificationDesc;
   }
   field DateOfRegistration;
   field IdentifierReference;
   field IdentifierRefValidation;
   lov CustomerTaxUsageTypeRef with ReferenceCustomerTaxUsageTypeSelector {
      search = CustomerTaxUsageType, Description;
      description = CustomerTaxUsageTypeRef.Description;
   }
}


group CustomerLogoGroup for CustomerInfo {
   label = "Logo";

   imagefield {
      imagedata CustomerLogo;
      showlabel = false;
      size = Small;
   }
}



group CustomerInfoAddressGroup for CustomerInfoAddress {
   label = "";

   field AddressId {
      visible = [isNew];
   }
   field EanLocation;
   field Name;
}


group EndCustomerGroup for CustomerInfoAddress {
   label = "End Customer";

   lov EndCustomerIdRef with ReferenceCustomerInfoSelector using EndCustomers(CustomerId) {
      search = CustomerId, Name;
      description = EndCustomerIdRef.Name;
      size = Large;
      contactwidget {
         enabled = [true];
         source = Customer;
         key = EndCustomerId;
      }
      editable = [not(parent.OneTime) and DeliveryTypeExist and(parent.CustomerCategory = "Customer")];
      validate command {
         variable AdressDetailsVar Structure(AdressDetailsStructure);
         execute {
            if [EndCustomerId != null] {
               call DefaultEndCustAddrId(EndCustomerId) into EndCustAddrId;
               call EndCustAddressDetails(EndCustomerId, EndCustAddrId) into AdressDetailsVar;
               copy AdressDetailsVar into this;
               if [EndCustomerCategory != "EndCustomer"] {
                  alert("The ship-via codes and delivery terms corresponding to the end customer ${EndCustomerId} address identity ${EndCustAddrId} will be used when saving the record.");
               }
            }
            else {
               set EndCustAddrId = null;
            }
         }
      }
   }
   lov EndCustAddrIdRef with ReferenceCustomerInfoAddrDelPubLovSelector {
      editable = [EndCustomerId != null];
      validate command {
         variable AdressDetailsVar Structure(AdressDetailsStructure);
         execute {
            if [EndCustAddrId != null] {
               call EndCustAddressDetails(EndCustomerId, EndCustAddrId) into AdressDetailsVar;
               copy AdressDetailsVar into this;
               if [EndCustomerCategory != "EndCustomer"] {
                  alert("The ship-via codes and delivery terms corresponding to the end customer ${EndCustomerId} address identity ${EndCustAddrId} will be used when saving the record.");
               }
            }
         }
      }
   }
}


group GeneralAddressInfoGroup for CustomerInfoAddress {
   label = "Other Information";

   field InCity;
   field JurisdictionCode;
   field CustomerBranch;
   field PrimaryContact;
   field SecondaryContact;
}


group AddressGroup for CustomerInfoAddress {
   label = "";

   field Country {
      editable = [EndCustAddrId = null];
      validate command {
         execute {
            if [Country != null] {
               call FetchCountryDescription(Country) into CountryDesc;
            }
            else {
               set CountryDesc = null;
            }
         }
      }
   }
   daterangefield {
      startdate ValidFrom;
      enddate ValidTo;
      label = "Validity Period";
   }
   addressfield {
      address1 Address1;
      address2 Address2;
      address3 Address3;
      address4 Address4;
      address5 Address5;
      address6 Address6;
      city City;
      country CountryDesc;
      county County;
      state State;
      zipcode ZipCode;
      countrycode Country;
      label = "Address";
      editable = [EndCustAddrId = null];
   }
}


----------------------------------- LISTS -----------------------------------
list OurIdAtCustomerList for CustomerInfoOurId {
   label = "Our ID at Customer";

   @DynamicComponentDependency ACCRUL
   lov CompanyRef with ReferenceCompanyFinanceSelector;
   field OurId;
}

list CustomerInfoMsgSetupList for CustomerInfoMsgSetup {
   label = " ";

   lov MessageClassRef with ReferenceMessageClassSelector;
   lov MediaCodeRef with ReferenceMessageMediaSelector;
   lov AddressRef with ReferenceMessageReceiverSelector;
   field SequenceNo;
   field MethodDefault {
      size = Small;
   }
   lov LocaleRef with LocalLanguageCodeSelector {
      editable = [MediaCode = "E-INVOICE"];
   }
}


list CustomerInfoContactList for CustomerInfoContact {
   label = "";

   lov PersonIdRef with ReferencePersonInfoAllSelector using ActivePersons {
      search = PersonId, Name;
      description = PersonIdRef.Name;
      size = Large;
      contactwidget {
         enabled = [true];
         source = Person;
         key = PersonId;
      }
      validate command {
         variable ResultVar Structure(DefaultContactInfoStructure);
         execute {
            call DefaultContactInfo(PersonId, ContactAddress) into ResultVar;
            copy ResultVar into this;
         }
      }
   }
   field PersonIdRef.Title {
      size = Small;
      label = "Title";
   }
   field Role {
      size = Large;
   }
   lov CustomerAddressRef with ReferenceCustomerInfoAddressSelector;
   field ConnectAllCustAddr {
      size = Small;
   }
   lov ContactAddressRef with ReferencePersonInfoAddress1Selector;
   field AddressPrimary {
      size = Small;
   }
   field AddressSecondary {
      size = Small;
   }
   field CustomerPrimary {
      size = Small;
   }
   field CustomerSecondary {
      size = Small;
   }
   field Phone {
      fieldhint = PhoneNumber;
   }
   field Mobile {
      fieldhint = MobileNumber;
   }
   field Email {
      fieldhint = Email;
   }
   field Fax;
   field Pager;
   field Intercom;
   field Www {
      fieldhint = Url;
   }
   field NoteText;

   @DynamicComponentDependency CRM
   command CrmDetailsCommand;
   command AddContactCommand;
}


@Override
list CustomerInfoAddressLovList for CustomerInfoAddress {
   static AddressId {
      label = "Address ID";
      columnvisible = [false];
   }
   static EndCustomerId {
      label = "End Customer ID";
   }
   static EndCustAddrId {
      label = "End Customer Address ID";
   }
}


@Override
list MessageMediaLovList for MessageMedia {
   static MediaCode;
   static Description;
}


@Override
list MessageClassLovList for MessageClass {
   static ClassId {
      label = "Class ID";
   }
}


@Override
list MessageReceiverLovList for MessageReceiver {
   static Receiver;
   static Description;
}


list AddressTypeList for CustomerInfoAddressType {
   label = "Address Types";

   field AddressTypeCode;
   field DefAddress;
}


list CustomerInfoAddressContactList for CustomerInfoContact {
   label = "Contact";

   lov PersonIdRef with ReferencePersonInfoAllSelector using ActivePersons {
      search = PersonId, Name;
      description = PersonIdRef.Name;
      size = Large;
      contactwidget {
         enabled = [true];
         source = Person;
         key = PersonId;
      }
      validate command {
         variable ResultVar Structure(DefaultContactInfoStructure);
         execute {
            call DefaultContactInfo(PersonId, ContactAddress) into ResultVar;
            copy ResultVar into this;
         }
      }
   }
   field PersonIdRef.Title {
      size = Small;
      label = "Title";
   }
   field Role {
      size = Large;
   }
   field ConnectAllCustAddr {
      size = Small;
      editable = [false];
   }
   lov ContactAddressRef with ReferencePersonInfoAddress1Selector;
   field AddressPrimary {
      size = Small;
   }
   field AddressSecondary {
      size = Small;
   }
   field CustomerPrimary {
      size = Small;
   }
   field CustomerSecondary {
      size = Small;
   }
   field Phone {
      fieldhint = PhoneNumber;
   }
   field Mobile {
      fieldhint = MobileNumber;
   }

   field Email {
      fieldhint = Email;
   }
   field Fax;
   field Pager;
   field Intercom;
   field Www {
      fieldhint = Url;

   }
   field NoteText;
}


----------------------------------- CARDS -----------------------------------


---------------------------------- DIALOGS ----------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDARS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------
