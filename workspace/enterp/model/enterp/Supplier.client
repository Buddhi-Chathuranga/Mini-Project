--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  191002  Satglk  SCXTEND-440, Added missing navigator entries.
--  210211  ckumlk  FISPRING20-9011, Applied Start-up Mode.
--  210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
--  210712  NaLrlk  PR21R2-400, Added navigator entry for RmcomNavigator.
--  211014  PrRtlk  SC21R2-2967, Added Outbound Address Information Tab.
-----------------------------------------------------------------------------
client Supplier;
component ENTERP;
layer Core;
projection SupplierHandling;

include fragment AssociationInfoSelector;
include fragment PersonInfoAddress1Selector;
include fragment PersonInfoAllSelector;
include fragment AddSupplierContactDialog;
include fragment CommunicationMethodsList;
include fragment CopySupplierDialog;
include fragment ChangeSupplierCategoryDialog;
@DynamicComponentDependency ACCRUL
include fragment SupplierTaxInfo;
@DynamicComponentDependency INVOIC
include fragment SupplierAddressDocumentTaxInformation;
@DynamicComponentDependency INVOIC
include fragment SupplierInvoiceInformation;
@DynamicComponentDependency PAYLED
include fragment SupplierPaymentInformation;
@DynamicComponentDependency PURCH
include fragment SupplierAddressTab;
@DynamicComponentDependency PURCH
include fragment SupplierPurchaseInformationPage;
@DynamicComponentDependency SRM
include fragment SrmSupplierInfoTab;
@DynamicComponentDependency DISCOM
include fragment SuppOutboundAddrInfoTab;
warningsenabled = SupplierInfo, SupplierInfoGeneral, CommMethod, CheckDefaultCommMethod, ChangeSupplierCategory, SupplierInfoAddress, SupplierInfoAddressType, CheckDefaultAddressType;
@DynamicComponentDependency INVOIC
warningsenabled = IdentityInvoiceInfo, SupplierDocumentTaxInfo, SupplierAddrTaxNumber;
@DynamicComponentDependency ACCRUL
warningsenabled = SupplierTaxInfo;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SupplierNavEntry parent EnterpNavigator.SupplierMenu at index 100 {
      label = "Supplier";

      page Form home SupplierInfoGeneral selector SupplierGeneralSelector;
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      @DynamicComponentDependency INVOIC
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PURCH
      entry PurchaseNavEntry;
      @DynamicComponentDependency SRM
      entry SrmNavEntry;
   }
   // A duplicate navigator entry is added to register this page as home page for LU SupplierInfo to support Object connections.
   entry SupplierInfoSupplierNavEntry parent EnterpNavigator.SupplierMenu at index 100 {
      label = "Supplier";

      page Form home SupplierInfo;
      hidden = [true];
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      @DynamicComponentDependency INVOIC
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PURCH
      entry PurchaseNavEntry;
      @DynamicComponentDependency SRM
      entry SrmNavEntry;
   }
   // A duplicate navigator entry is added to register this page as home page for LU SupplierInfoProspect to support Object connections.
   entry SupplierInfoProspectSupplierNavEntry parent EnterpNavigator.SupplierMenu at index 150 {
      label = "Supplier";

      page Form home SupplierInfoProspect;
      hidden = [true];
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      @DynamicComponentDependency INVOIC
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PURCH
      entry PurchaseNavEntry;
      @DynamicComponentDependency SRM
      entry SrmNavEntry;
   }
   @DynamicComponentDependency INVOIC
   entry SupplierInvoiceSupplierNavEntry parent InvoiceNavigator.SupplierInvoiceMenu at index 550 {
      label = "Supplier";

      page Form home SupplierInfoGeneral selector SupplierGeneralSelector;
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PURCH
      entry PurchaseNavEntry;
      @DynamicComponentDependency SRM
      entry SrmNavEntry;
   }
   @DynamicComponentDependency PURCH
   entry SupplierSupplierNavEntry parent PurchNavigator.ProcurementSupplier at index 100 {
      label = "Supplier";

      page Form home SupplierInfoGeneral selector SupplierGeneralSelector;
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      @DynamicComponentDependency INVOIC
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      entry PurchaseNavEntry;
      @DynamicComponentDependency SRM
      entry SrmNavEntry;
   }
   @DynamicComponentDependency RMCOM
   entry SRMSupplierSupplierNavEntry parent RmcomNavigator.SRMSupplier at index 60 {
      label = "Supplier";

      page Form home SupplierInfoGeneral selector SupplierGeneralSelector;
      entry AddressInfoNavEntry;
      entry ContactNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      @DynamicComponentDependency INVOIC
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency PURCH
      entry PurchaseNavEntry;
      @DynamicComponentDependency SRM
      entry SrmNavEntry;
   }
}


entry AddressInfoNavEntry {
   label = "Address";

   page AddressInfo selector SupplierGeneralSelector;
}


entry ContactNavEntry {
   label = "Contact";

   page Contact selector SupplierGeneralSelector;
}


entry CommunicationMethodNavEntry {
   label = "Communication Method";

   page CommunicationMethod selector SupplierGeneralSelector;
}


entry MessageSetupNavEntry {
   label = "Message Setup";

   page MessageSetup selector SupplierGeneralSelector;
}

@DynamicComponentDependency INVOIC
entry InvoiceNavEntry {
   label = "Invoice";

   page Invoice selector SupplierGeneralSelector;
}

@DynamicComponentDependency PAYLED
entry PaymentNavEntry {
   label = "Payment";

   page Payment selector SupplierGeneralSelector;
}

@DynamicComponentDependency SRM
entry SrmNavEntry {
   label = "SRM";

   page SrmSupplierInfo selector SupplierGeneralSelector;
}

@DynamicComponentDependency PURCH
entry PurchaseNavEntry {
   label = "Purchase";

   page Purchase selector SupplierGeneralSelector;
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using SupplierInfoGeneralSet {
   label = "Supplier";
   startupmode = search;
   selector SupplierGeneralSelector;
   arrange {
      group SupplierInfoGroup bind SupplierGeneralSelector;
      group SupplierLogoGroup bind SupplierGeneralSelector;
   }
   group SupplierGeneralInfoGroup bind SupplierGeneralSelector;
   list OurIdAtSupplierList(OurIds) bind SupplierGeneralSelector;

   commandgroup SupplierCmdGroup {
      command CopySupplierCommand;
      command ChangeSupplierCategoryCommand;
      command ViewB2BUsersCommand;
   }

   command Supplier360Command;

   command ManageDataProcessingPurposesCommand;

}


page AddressInfo using SupplierInfoGeneralSet {
   label = "Address";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   selector SupplierGeneralSelector;
   group SupplierHeaderGroup;
   selector SupplierInfoAddressSelector(SupplierInfoAddresses) bind SupplierGeneralSelector;
   group SupplierInfoAddressGroup bind SupplierInfoAddressSelector;
   tabs {
      tab {
         label = "General Address Information";
         arrange {
            group AddressGroup bind SupplierInfoAddressSelector;
            list AddressTypeList(AddressTypes) bind SupplierInfoAddressSelector;
         }
         list CommMethodAddressList(AddressCommunicationMethods) bind SupplierInfoAddressSelector;
         list SupplierInfoAddressContactList(SupplierInfoContacts) bind SupplierInfoAddressSelector {
            copyoncruddefault(SupplierId, AddressId) to(SupplierId, SupplierAddress);
         }
      }
      tab {
         label = "Delivery Tax Information";
         @DynamicComponentDependency ACCRUL
         selector SupplierTaxInfoSelector(SupplierDeliveryTaxInfoArray) bind SupplierInfoAddressSelector;
         @DynamicComponentDependency ACCRUL
         group SupplierTaxInfoGroup bind SupplierTaxInfoSelector;
         @DynamicComponentDependency ACCRUL
         list SupplierDeliveryTaxCodeList(SupplierDeliveryTaxCodeArray) bind SupplierTaxInfoSelector;
      }
      @DynamicComponentDependency INVOIC
      tab {
         label = "Document Tax Information";
         list SuppDocumentTaxInfoList(SupplierDocumentTaxInfoArray) bind SupplierInfoAddressSelector;
         -- gelr:addr_specific_tax_reg_numbers, begin
         list SupplierAddressTaxNumberList(SupplierAddressTaxNumberArray) bind SuppDocumentTaxInfoList {
            visible = ["ADDR_SPECIFIC_TAX_REG_NUMBERS" in selection.SuppDocumentTaxInfoList.EnabledLccParams];
            display = Nested;
         }
         -- gelr:addr_specific_tax_reg_numbers, end
      }
      tab {
         label = "Purchase Address Information";
         visible = [not OneTime];
         @DynamicComponentDependency PURCH
         singleton SupplierAddressSingleton(SupplierAddresses) bind SupplierInfoAddressSelector;
         @DynamicComponentDependency PURCH
         group SupplierAddressGroup bind SupplierAddressSingleton;
      }
      tab {
         label = "Outbound Address Information";
         @DynamicComponentDependency DISCOM
         singleton OutboundAddressInfoSingleton(SuppOutboundAddrInfoArray) bind SupplierInfoAddressSelector;
         @DynamicComponentDependency DISCOM
         group OutboundAddressInfoGroup bind OutboundAddressInfoSingleton;
         @DynamicComponentDependency DISCOM
         group ShipmentGroup bind OutboundAddressInfoSingleton;
      }
   }
}


page Contact using SupplierInfoGeneralSet {
   label = "Contact";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector SupplierGeneralSelector;
   group SupplierHeaderGroup;
   list SupplierInfoContactList(SupplierInfoContacts);
}


page CommunicationMethod using SupplierInfoGeneralSet {
   label = "Communication Method";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector SupplierGeneralSelector;
   group SupplierHeaderGroup;
   list CommMethodList(CommunicationMethods) bind SupplierGeneralSelector;
}


page MessageSetup using SupplierInfoGeneralSet {
   label = "Message Setup";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector SupplierGeneralSelector;
   group SupplierHeaderGroup;
   list SupplierInfoMsgSetupList(MessageSetups) bind SupplierGeneralSelector {
      visible = [SupplierCategory = "Supplier"];
   }
   markdowntext {
      visible = [SupplierCategory != "Supplier"];
      text = "Message Setup is not relevant for ${SupplierCategory}";
   }
}


-------------------------------- ASSISTANTS ---------------------------------


--------------------------------- COMMANDS ----------------------------------
command CopySupplierCommand for SupplierInfoGeneral {
   label = "Copy Supplier";
   enabled = [true];

   variable  SupplierIdVar Text;

   execute {
      dialog CopySupplierDialog(SupplierId, Name) into(SupplierIdVar) {
         when OK {
            navigate "page/Supplier/Form?$filter=SupplierId eq $[SupplierIdVar] ";
         }
      }
   }
}


command ChangeSupplierCategoryCommand for SupplierInfoGeneral {
   label = "Change Supplier Category";
   enabled = [SupplierCategory = "Prospect"];

   execute {
      dialog ChangeSupplierCategoryDialog(SupplierId, Name, AssociationNo) {
         when CANCEL {
            exit;
         }
      }
   }
}


command ViewB2BUsersCommand for SupplierInfoGeneral {
   label = "View B2B Users";
   enabled = [B2bSupplier];

   execute {
      navigate "page/B2bUserSupplier/List?$filter=SupplierId eq $[SupplierId]";
   }
}


command ManageDataProcessingPurposesCommand for SupplierInfoGeneral {
   label = "Manage Data Processing Purposes";
   enabled = [VisibleDataSubConstColumn = "TRUE"];

   variable DataSubjectDbVar Text;
   variable DataSubjectKeyRefVar Text;

   execute {
      set DataSubjectDbVar = "SUPPLIER";
      call SubjectKeyRef(DataSubjectDbVar, SupplierId, "NULL") into DataSubjectKeyRefVar;
      navigate "assistant/DataProcessingPurposeManagement/DataProcessingPurposeManagementAssistant?$action=InitPersonalConsents{KeyRefVar: $[DataSubjectKeyRefVar], DataSubjectIdVar:$[SupplierId], DataSubjectNameVar:$[Name], DataSubjectVar:$[DataSubjectDbVar]}";
   }
}


command Supplier360Command for SupplierInfoGeneral {
   label = "Supplier 360";
   enabled = [true];

   execute {
      navigate "lobby/3384df0a-270f-49e4-91f5-8c601c14fa63;pageParams=SUPPLIER_ID:${SupplierId}";
   }
}


command AddContactCommand for SupplierInfoContact {
   label = "Add Contact";
   enabled = [true];
   mode = Global;
   variable DummyVar Text;

   execute {
      dialog AddSupplierContactDialog(SupplierId, null, false) into(DummyVar, DummyVar, DummyVar) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}


@DynamicComponentDependency SRM
command SrmDetailsCommand for SupplierInfoContact {
   label = "SRM Details";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/SrmSupplierContact/Form?$filter=SupplierId eq $[SupplierId] and PersonId eq $[PersonId] and Guid eq $[Guid]";
   }
}


command TaxCodeInfoCommand for SupplierInfoAddress {
   label = "Tax Code Information";
   enabled = [CountryCode = "AR"];
   execute {
      navigate "page/TaxCodeInformationForSupplierAddress/Form?$filter=SupplierId eq $[SupplierId] and AddressId eq $[AddressId]";
   }
}


command AddDefaultAddressTypesCommand for SupplierInfoAddress {
   execute {
      if [CrudOperation = "create"] {
         call AddDefaultAddressTypes();
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
selector SupplierGeneralSelector for SupplierInfoGeneral {
   label = "${SupplierId} - ${Name}";

   static SupplierId {
      contactwidget {
         enabled = [true];
         source = Supplier;
         key = SupplierId;
      }
   }
   static Name;
   static AssociationNo;
   static SupplierCategory;
   static OneTime {
      visible = [false];
   }
}


@Override
selector ReferenceMessageClassSelector for MessageClass {
   static ClassId {
      label = "Class ID";
   }
   static Receive {
      visible = [false];
   }
   static Send {
      visible = [false];
   }
}


@Override
selector SupplierInfoAddressSelector for SupplierInfoAddress {
   label = "Address ID: ${AddressId}";
   crudactions {
      after command AddDefaultAddressTypesCommand;
   }

   static SupplierId {
      visible = [false];
   }
   static AddressId;
   static Country;
   static City;
   static ZipCode;
   static EanLocation {
      visible = [false];
   }
   static Name {
      visible = [false];
   }
   static SupplierBranch {
      visible = [false];
   }
   static ValidFrom {
      visible = [false];
   }
   static ValidTo {
      visible = [false];
   }
   static Address1 {
      visible = [false];
   }
   static Address2 {
      visible = [false];
   }
   static Address3 {
      visible = [false];
   }
   static Address4 {
      visible = [false];
   }
   static Address5 {
      visible = [false];
   }
   static Address6 {
      visible = [false];
   }
   static State {
      visible = [false];
   }
   static County {
      visible = [false];
   }
   static PartyType {
      visible = [false];
   }
   static CountryCode {
      visible = [false];
   }
   static CountryDesc {
      visible = [false];
   }

   command TaxCodeInfoCommand;
}


---------------------------------- GROUPS -----------------------------------
group SupplierInfoGroup for SupplierInfoGeneral {
   label = "";

   field SupplierId;
   field Name;
   lov AssociationNoRef with ReferenceAssociationInfoSelector {
      freeinput = [true];
   }
   field OneTime;
   field B2bSupplier;
   field ValidDataProcessingPurpose {
      visible = [VisibleDataSubConstColumn = "TRUE"];
   }
}


group SupplierHeaderGroup for SupplierInfoGeneral {
   label = "";

   field SupplierId;
   field Name;
   field AssociationNo;
}


group SupplierGeneralInfoGroup for SupplierInfoGeneral {
   label = "General Information";

   field DefaultLanguage;
   field Country;
   field SupplierCategory;
   field SuppliersOwnId;
   field CreationDate {
      editable = [false];
   }
   lov CorporateFormRef with ReferenceCorporateFormSelector using CorporateFormLovWhere(Country) {
      search = CorporateForm, CorporateFormDesc;
      description = CorporateFormDesc;
   }
   field IdentifierReference;
   field IdentifierRefValidation;
}


group SupplierLogoGroup for SupplierInfoGeneral {
   label = "Logo";

   imagefield {
      imagedata SupplierLogo;
      showlabel = false;
      size = Small;
   }
}


group SupplierInfoAddressGroup for SupplierInfoAddress {
   label = "";

   field AddressId {
      visible = [isNew];
   }
   field EanLocation;
   field Name;
   field SupplierBranch;
}


group AddressGroup for SupplierInfoAddress {
   label = "";

   field Country {
      validate command {
         execute {
            if [Country != null] {
               call FetchCountryDescription(Country) into CountryDesc;
            }
            else {
               set CountryDesc = null;
            }
         }
      }
   }
   daterangefield {
      startdate ValidFrom;
      enddate ValidTo;
      label = "Validity Period";
   }
   addressfield {
      address1 Address1;
      address2 Address2;
      address3 Address3;
      address4 Address4;
      address5 Address5;
      address6 Address6;
      city City;
      country CountryDesc;
      county County;
      state State;
      zipcode ZipCode;
      countrycode Country;
      label = "Address";
   }
}


----------------------------------- LISTS -----------------------------------
list OurIdAtSupplierList for SupplierInfoOurId {
   label = "Our ID at Supplier";

   @DynamicComponentDependency ACCRUL
   lov CompanyRef with ReferenceCompanyFinanceSelector;
   field OurId;
}


list SupplierInfoContactList for SupplierInfoContact {
   label = "";

   lov PersonIdRef with ReferencePersonInfoAllSelector using ActivePersons {
      search = PersonId, Name;
      description = PersonIdRef.Name;
      size = Large;
      contactwidget {
         enabled = [true];
         source = Person;
         key = PersonId;
      }
      validate command {
         variable ResultVar Structure(DefaultContactInfoStructure);
         execute {
            call DefaultContactInfo(PersonId, ContactAddress) into ResultVar;
            set Phone = ResultVar.Phone;
            set Mobile = ResultVar.Mobile;
            set Email = ResultVar.EMail;
            set Fax = ResultVar.Fax;
            set Pager = ResultVar.Pager;
            set Intercom = ResultVar.Intercom;
            set Www = ResultVar.Www;
         }
      }
   }
   field PersonIdRef.Title {
      label = "Title";
      size = Small;
   }
   field Role {
      size = Large;
   }
   lov SupplierAddressRef with ReferenceSupplierInfoAddressSelector;
   field ConnectAllSuppAddr {
      size = Small;
   }
   lov ContactAddressRef with ReferencePersonInfoAddress1Selector;
   field AddressPrimary {
      size = Small;
   }
   field AddressSecondary {
      size = Small;
   }
   field SupplierPrimary {
      size = Small;
   }
   field SupplierSecondary {
      size = Small;
   }
   field Phone {
      fieldhint = PhoneNumber;
   }
   field Mobile {
      fieldhint = MobileNumber;
   }
   field Email {
      fieldhint = Email;
   }
   field Fax;
   field Pager;
   field Intercom;
   field Www {
      fieldhint = Url;
   }
   field NoteText;

   @DynamicComponentDependency SRM
   command SrmDetailsCommand;
   command AddContactCommand;
}


list SupplierInfoMsgSetupList for SupplierInfoMsgSetup {
   label = " ";

   lov MessageClassRef with ReferenceMessageClassSelector;
   lov MediaCodeRef with ReferenceMessageMediaSelector;
   lov AddressRef with ReferenceMessageReceiverSelector;
   field SequenceNo;
   field MethodDefault {
      size = Small;
   }
}


@Override
list MessageMediaLovList for MessageMedia {
   static MediaCode;
   static Description;
}


@Override
list MessageClassLovList for MessageClass {
   static ClassId {
      label = "Class ID";
   }
}


@Override
list MessageReceiverLovList for MessageReceiver {
   static Receiver;
   static Description;
}


list AddressTypeList for SupplierInfoAddressType {
   label = "Address Types";

   field AddressTypeCode;
   field DefAddress;
}


list SupplierInfoAddressContactList for SupplierInfoContact {
   label = "Contact";

   lov PersonIdRef with ReferencePersonInfoAllSelector using ActivePersons {
      search = PersonId, Name;
      description = PersonIdRef.Name;
      size = Large;
      contactwidget {
         enabled = [true];
         source = Person;
         key = PersonId;
      }
      validate command {
         variable ResultVar Structure(DefaultContactInfoStructure);
         execute {
            call DefaultContactInfo(PersonId, ContactAddress) into ResultVar;
            set Phone = ResultVar.Phone;
            set Mobile = ResultVar.Mobile;
            set Email = ResultVar.EMail;
            set Fax = ResultVar.Fax;
            set Pager = ResultVar.Pager;
            set Intercom = ResultVar.Intercom;
            set Www = ResultVar.Www;
         }
      }
   }
   field PersonIdRef.Title {
      label = "Title";
      size = Small;
   }
   field Role {
      size = Large;
   }
   field ConnectAllSuppAddr {
      size = Small;
      editable = [false];
   }
   lov ContactAddressRef with ReferencePersonInfoAddress1Selector;
   field AddressPrimary {
      size = Small;
   }
   field AddressSecondary {
      size = Small;
   }
   field SupplierPrimary {
      size = Small;
   }
   field SupplierSecondary {
      size = Small;
   }
   field Phone {
      fieldhint = PhoneNumber;

   }
   field Mobile {
      fieldhint = MobileNumber;
   }
   field Email {
      fieldhint = Email;
   }
   field Fax;
   field Pager;
   field Intercom;
   field Www {
      fieldhint = Url;
   }
   field NoteText;
}


----------------------------------- CARDS -----------------------------------


---------------------------------- DIALOGS ----------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDARS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------

