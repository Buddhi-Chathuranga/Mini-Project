projection CreateCompanyAssistantHandling;
component ENTERP;
layer Core;
description "This assistant to create companies. Once the company is created, more information like needed for certain components, such as Periodical Cost Allocation and Invoice etc can be added in the Company page";
category Users;
include fragment CreateCompanyTemValidSelector;
include fragment CurrBalCodePartLovSelector;
@DynamicComponentDependency ACCRUL
include fragment CreateComCurrBalLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset TemplTranslationLngSet for TemplTranslationLng;
entityset CompanyTranslationLngSet for CompanyTranslationLng;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Company {
   attribute FromTemplateId Text {
      label = "Company Template";
   }
   attribute IdentifierRefValidation Enumeration(IdentifierRefValidation) {
      label = "ID Reference Validation";
   }
   attribute DocRecipAddressPos Enumeration(PositioningType) {
      label = "Document Recipient Address Positioning";
   }
   attribute PrintSendersAddress Boolean("TRUE", "FALSE") {
      label = "Print Document Senders Address";
   }
   attribute LocalizationCountry Enumeration(LocalizationCountry) {
      label = "Localization";
   }
}


------------------------------- ENUMERATIONS --------------------------------
enumeration CreateFromEnum {
   value = "EXISTING" {
      identifier = "Existing";
      label = "Existing Company";
   }
   value = "TEMPLATE" {
      identifier = "Template";
      label = "Template";
   }
}


enumeration CalenderCreationMethodEnum {
   value = "SOURCE" {
      identifier = "Source";
      label = "Source Template/Company";
   }
   value = "USER_DEFINED" {
      identifier = "UserDefined";
      label = "User Defined";
   }
}


---------------------------------- QUERIES ----------------------------------
query TemplTranslationLng {
   from = "templ_translation_lng";
   lu = TemplKeyLuTranslation;
   keys = KeyName, KeyValue, LanguageCode;
   where = "key_name = 'TemplKeyLu'";

   attribute KeyName Text;
   attribute KeyValue Text;
   attribute LanguageCode Text;
   attribute Description Text {
      fetch = "Iso_Language_API.Decode(language_code)";
   }
}


query CompanyTranslationLng {
   from = "company_translation_lng";
   lu = CompanyKeyLuTranslation;
   keys = KeyName, KeyValue, LanguageCode;
   where = "key_name = 'CompanyKeyLu'";

   attribute KeyName Text;
   attribute KeyValue Text;
   attribute LanguageCode Text;
   attribute Description Text {
      fetch = "Iso_Language_API.Decode(language_code)";
   }
}


---------------------------------- ACTIONS ----------------------------------
//! TODO: This needed to be changed to a function as it has no call for DB change
// Consider on how the warnings are displayed in client when this is done
@DynamicComponentDependency ACCRUL
action ValidateAccountingDetails {
   initialcheck none;
   supportwarnings = [true];

   parameter SourceCompany Text;
   parameter TemplateId Text;
   parameter CreationMethod Enumeration(CalenderCreationMethodEnum);
   parameter AccYear Number;
   parameter StartYear Number;
   parameter StartMonth Number;
   parameter NumberOfYears Number;
   parameter CurrencyCode Text;
   parameter ValidFrom Date;
   parameter ParallelAccCurrency Text;
   parameter ParallelCurBase Enumeration(ParallelBase);
}

-- Company Security is handled by Create_Company_API.Create_New_Company__ for update company
@DynamicComponentDependency ACCRUL
action CreateNewCompany Structure(CompanyCreationStructure) {
   initialcheck implementation;
   supportwarnings = [true];

   parameter NewCompany Text;
   parameter NewCompanyName Text;
   parameter CreateAsTemplateCompany Boolean;
   parameter CreateAsMasterCompany Boolean;
   parameter CreateFrom Enumeration(CreateFromEnum);
   parameter SourceCompany Text;
   parameter TemplateId Text;
   parameter CalenderCreationMethod Enumeration(CalenderCreationMethodEnum);
   parameter AccYear Number;
   parameter StartYear Number;
   parameter StartMonth Number;
   parameter NumberOfYears Number;
   parameter UseVouNoPeriod Boolean;
   parameter CurrencyCode Text;
   parameter ValidFrom Date;
   parameter ParallelAccCurrency Text;
   parameter ParallelCurBase Enumeration(ParallelBase);
   parameter DefaultLanguage Text;
   parameter Country Text;
   parameter LogicalAccTypesList Text;
   parameter CodePart Text;
   parameter InternalName Text;
   parameter LanguageCodes Text;
}


--------------------------------- FUNCTIONS ---------------------------------
function UseVouPeriod Text {
   parameter SourceCompany Text;
}


function DefaultTemplate Text;


function FetchCodePartInfo Structure(CodePartInfoStructure) {
   parameter SourceCompany Text;
   parameter TemplateId Text;
}

function LanguageList Structure(LanguageCodeStructure) {
   parameter LanguageRef Text;
}


function LogicalAccTypesList Text {
   parameter Assets Boolean;
   parameter Liabilities Boolean;
   parameter Revenues Boolean;
   parameter Cost Boolean;
   parameter Statistics Boolean;
   parameter StatOpenBal Boolean;
}


function FetchCalendarData Structure(CalendarDataStructure) {
   parameter SourceCompany Text;
   parameter TemplateId Text;
}


function FetchInternalName Text {
   parameter SourceCompany Text;
   parameter TemplateId Text;
   parameter CodePart Text;
}


function CheckCompanyExist Text {
   parameter Company Text;
}


function ValidateCreateFromDetails Text {
   parameter SourceCompany Text;
   parameter TemplateId Text;
}


function DefaultValidFrom Date {
   parameter StartYear Number;
   parameter StartMonth Number;
}


function ValidateCodePart Text {
   parameter SourceCompany Text;
   parameter TemplateId Text;
   parameter CodePart Text;
}

function UseVouPeriodTemplate Text {
   parameter TemplateId Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure CreateCompanyStructure {
   attribute NewCompany Text {
      label = "Company";
      format = uppercase;
      required = [true];
   }
   attribute NewCompanyName Text {
      label = "Company Name";
      required = [true];
   }
   attribute CreateAsTemplateCompany Boolean("TRUE", "FALSE") {
      label = "Template Company";
      required = [true];
   }
   attribute CreateAsMasterCompany Boolean("TRUE", "FALSE") {
      label = "Master Company for Group Consolidation";
      required = [true];
   }
   attribute SourceCompany Text {
      label = "Source Company";
      format = uppercase;
   }
   attribute SourceCompanyName Text {
      label = "Source Company Name";
      required = [true];
   }
   attribute TemplateId Text {
      label = "Template ID";
      format = uppercase;
   }
   attribute TemplateName Text {
      label = "Description";
      required = [true];
   }
   attribute DomainId Text {
      label = "Domain ID";
   }
   attribute CalenderCreationMethod Enumeration(CalenderCreationMethodEnum);
   attribute AccYear Number {
      label = "First Accounting Year";
   }
   attribute StartYear Number {
      label = "Start from Year";
   }
   attribute StartMonth Number {
      label = "Start from Month";
   }
   attribute NumberOfYears Number {
      label = "Number of Years";
   }
   attribute UseVouNoPeriod Boolean("TRUE", "FALSE") {
      label = "Use Voucher Number Series per Period";
      required = [true];
   }
   attribute IsPeriodUsed Text;
   attribute CurrencyCode Text {
      label = "Accounting Currency";
      required = [true];
      format = uppercase;
   }
   attribute ValidFrom Date {
      label = "Valid From";
      required = [true];
   }
   attribute ParallelAccCurrency Text {
      label = "Parallel Currency";
      format = uppercase;
   }
   @DynamicComponentDependency ACCRUL
   attribute ParallelCurBase Enumeration(ParallelBase) {
      label = "Parallel Currency Base";
   }
   attribute DefaultLanguage Lookup(IsoLanguage) {
      required = [true];
   }
   attribute Country Lookup(IsoCountry) {
      format = uppercase;
      required = [true];
   }
   attribute UseCurrencyBalance Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute CodePart Text {
      format = uppercase;
   }
   attribute InternalName Text {
      maxlength = 10;
   }
   attribute Assets Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute Liabilities Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute Revenues Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute Cost Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute Statistics Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute StatOpenBal Boolean("TRUE", "FALSE") {
      label = "Statistics, Opening Balance";
      required = [true];
   }
   attribute CreateFrom Enumeration(CreateFromEnum);
   attribute Languages Text;
   attribute LanguageCodes Text;
   attribute TemplTransLngCodes Text;
   attribute CompanyTransLngCodes Text;
   attribute DefCodePartExist Boolean("TRUE", "FALSE");
   attribute LogicalAccTypesList Text;
   attribute CompanyCreation Text;

   reference SourceCompanyRef(SourceCompany) to Company(Company) {
      label = "Source Company";
   }
   reference TemplateIdRef(TemplateId) to CreateCompanyTemValid(TemplateId) {
      label = "Template ID";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Accounting Currency";
   }
   reference ParallelAccCurrencyRef(ParallelAccCurrency) to IsoCurrency(CurrencyCode) {
      label = "Parallel Currency";
   }
   reference TemplateCodePartRef(TemplateId, CodePart) to CurrBalCodePartLov(TemplateId, CodePart) {
      label = "Code Part";
   }
   @DynamicComponentDependency ACCRUL
   reference CompanyCodePartRef(SourceCompany, CodePart) to CreateComCurrBalLov(Company, CodePart) {
      label = "Code Part";
   }
}


structure CodePartInfoStructure {
   attribute CodePart Text;
   attribute InternalName Text;
}


structure LanguageCodeStructure {
   attribute LanguageCodeList Text;
   attribute LanguageList Text;
}


structure CompanyCreationStructure {
   attribute Company Text;
   attribute Success Text;
}


structure CalendarDataStructure {
   attribute AccYear Number;
   attribute StartYear Number;
   attribute StartMonth Number;
   attribute NumberOfYears Number;
}


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------

