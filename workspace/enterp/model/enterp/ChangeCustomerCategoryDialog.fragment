fragment ChangeCustomerCategoryDialog;
component ENTERP;
layer Core;
description "Change Customer Category Dialog";

@DynamicComponentDependency ORDER
include fragment CustomerTemplateLovSelector;
@DynamicComponentDependency ORDER
include fragment CustProspectTemplateLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command InitCommand for ChangeCustomerCategoryStructure {
   execute {
      call FetchDefaultCompany() into DefaultCompany;
      set AssociationNo = PrevAssociationNo;
   }
}


---------------------------------- GROUPS -----------------------------------
group CustomerGroup for ChangeCustomerCategoryStructure {
   label = "Customer";

   radiogroup ProspectCategory {
      visible = [SourceCategory = "EndCustomer"];
      size = FullWidth;
      validate command {
         execute {
            set NewCategory = ProspectCategory;
         }
      }
   }
   radiogroup EndCustomerCategory {
      visible = [SourceCategory = "Prospect"];
      size = FullWidth;
      validate command {
         execute {
            set NewCategory = EndCustomerCategory;
            if [EndCustomerCategory = "EndCustomer"] {
               set TempCustomerId = null;
               set TempCompany = null;
               set TempOverwriteOrderData = false;
               set TempTransOrdAddrTemp = false;
            }
         }
      }
   }
   field CustomerId {
      contactwidget {
         enabled = [true];
         source = Customer;
         key = CustomerId;
      }
   }
   field CustomerName;
   field AssociationNo;
}


group TemplateCustomerGroup for ChangeCustomerCategoryStructure {
   label = "Template Customer";

   field TempCustomerId {
      size = Large;
      editable = [EndCustomerCategory != "EndCustomer"];
      contactwidget {
         enabled = [true];
         source = Customer;
         key = TempCustomerId;
      }
      validate command {
         variable OrdInfoVar Structure(CompanyOrderInfoStructure);
         execute {
            if [TempCustomerId = null] {
               set TempOverwriteOrderData = false;
               set TempTransOrdAddrTemp = false;
               set TempCustomerName = null;
            }
            else {
               call TempCustomerInfo(TempCustomerId) into TempCustomerName;
               set TempCompany = DefaultCompany;
               call CompanyOrderInfo(TempCompany) into OrdInfoVar;
               set TempOverwriteOrderData = OrdInfoVar.OverwriteOrderData;
               set TempTransOrdAddrTemp = OrdInfoVar.TransferAddressRelatedInfo;
            }
         }
      }
      lovswitch {
         when [NewCategory = "Prospect"] {
            @DynamicComponentDependency ORDER
            lov TempCustomerIdRef with ReferenceCustomerTemplateLovSelector {
               search = TemplateCustomerId, TemplateCustomerDesc;
               description = TempCustomerName;
            }
         }
         when [true] {
            @DynamicComponentDependency ORDER
            lov TempCustomerIdProsRef with ReferenceCustProspectTemplateLovSelector {
               search = TemplateCustomerId, TemplateCustomerDesc;
               description = TempCustomerName;
            }
         }
      }
   }
   @DynamicComponentDependency ACCRUL
   lov TempCompanyRef with ReferenceCompanyFinanceSelector {
      editable = [EndCustomerCategory != "EndCustomer"];
      validate command {
         variable OrdInfoVar Structure(CompanyOrderInfoStructure);
         execute {
            call CompanyOrderInfo(TempCompany) into OrdInfoVar;
            set TempOverwriteOrderData = OrdInfoVar.OverwriteOrderData;
            set TempTransOrdAddrTemp = OrdInfoVar.TransferAddressRelatedInfo;
         }
      }
   }
   field TempOverwriteOrderData {
      editable = [(TempCustomerId != null) and(SourceCategory != "EndCustomer")];
   }
   field TempTransOrdAddrTemp {
      editable = [(TempCustomerId != null) and(SourceCategory != "EndCustomer")];
      size = Large;
   }
}


---------------------------------- DIALOGS ----------------------------------
dialog ChangeCustomerCategoryDialog for ChangeCustomerCategoryStructure {
   label = "Change Customer Category";
   input(CustomerId, CustomerName, PrevAssociationNo, SourceCategory) {
      command InitCommand;
   }

   group CustomerGroup;
   group TemplateCustomerGroup;

   command Ok {
      execute {
         call ChangeCustomerCategory(CustomerId, CustomerName, NewCategory, PrevAssociationNo, AssociationNo, TempCustomerId, TempCompany, TempOverwriteOrderData, TempTransOrdAddrTemp);
         exit OK;
      }
   }
   command Cancel;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- ACTIONS ----------------------------------
-- Template Company is passed to Copy_Customer_Details___ and Copy_Prospect_Details___ and is used for dynamic statement
-- therefore UserFinance check needed to be added in the logic some place
-- Security handling related to DbRmcomAccess is handled as well
action ChangeCustomerCategory {
   initialcheck implementation;
   supportwarnings = [true];

   parameter CustomerId Text;
   parameter CustomerName Text;
   parameter CustomerCategory Enumeration(CustomerCategory);
   parameter PrevAssociationNo Text;
   parameter AssociationNo Text;
   parameter TemplateCustomerId Text;
   parameter TemplateCompany Text;
   parameter OverwriteOrderData Boolean;
   parameter TransferAddressRelatedInfo Boolean;

   ludependencies = CustomerInfo;
}


--------------------------------- FUNCTIONS ---------------------------------
function FetchDefaultCompany Text;

function CompanyOrderInfo Structure(CompanyOrderInfoStructure) {
   parameter Company Text;
}

function TempCustomerInfo Text {
   parameter TempCustomerId Text;
}


-------------------------------- STRUCTURES ---------------------------------
structure ChangeCustomerCategoryStructure {
   attribute CustomerId Text {
      label = "Customer ID";
      editable = [false];
   }
   attribute CustomerName Text;
   attribute AssociationNo Text;
   attribute SourceCategory Enumeration(CustomerCategory);
   attribute NewCategory Enumeration(CustomerCategory);
   attribute ProspectCategory Enumeration(CustomerCategory.Prospect) {
      label = "Category";
   }
   attribute EndCustomerCategory Enumeration(CustomerCategory.EndCustomer) {
      label = "Category";
   }
   attribute DefaultCompany Text;
   attribute TempCustomerId Text {
      label = "Template Customer";
   }
   attribute TempCustomerName Text;
   attribute TempCompany Text;
   attribute TempOverwriteOrderData Boolean("TRUE", "FALSE") {
      label = "Overwrite Order Related Data";
      required = [true];
   }
   attribute TempTransOrdAddrTemp Boolean("TRUE", "FALSE") {
      label = "Transfer Address Related Information from Template";
      required = [true];
   }
   attribute PrevAssociationNo Text;

   @DynamicComponentDependency ACCRUL
   reference TempCompanyRef(TempCompany) to CompanyFinance(Company) {
      label = "Company";
   }
   @DynamicComponentDependency ORDER
   reference TempCustomerIdRef(TempCustomerId) to CustomerTemplateLov(TemplateCustomerId);
   @DynamicComponentDependency ORDER
   reference TempCustomerIdProsRef(TempCustomerId) to CustProspectTemplateLov(TemplateCustomerId);
}


structure CompanyOrderInfoStructure {
   attribute OverwriteOrderData Boolean;
   attribute TransferAddressRelatedInfo Boolean;
}

