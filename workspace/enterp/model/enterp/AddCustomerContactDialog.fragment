fragment AddCustomerContactDialog;
component ENTERP;
layer Core;
description "Add Customer Contact Dialog";

include fragment AddContactCommon;

----------------------------- CLIENT FRAGMENTS ------------------------------


---------------------------------- GROUPS -----------------------------------
group CustomerContactHeaderGroup for CustomerContactStructure {
   label = "";

   field CustomerId {
      size = Small;
      contactwidget {
         enabled = [true];
         source = Customer;
         key = CustomerId;
      }
   }
   lov CustomerAddressRef with ReferenceCustomerInfoAddressSelector {
      validate command {
         execute {
            if[AddressId = null] {
               set CopyAddress = false;
            }
         }
      }
   }
   field CopyAddress {
      editable = [AddressId != null];
   }
}


group CustomerContactDetailsGroup for CustomerContactStructure {
   label = "Contact";

   fieldset ContactDetailsFieldSet;
}


group CommunicationMethodGroup for CustomerContactStructure {
   label = "Communication Methods";

   fieldset CommunicationMethodsFieldSet;
}


---------------------------------- DIALOGS ----------------------------------
dialog AddCustomerContactDialog for CustomerContactStructure {
   label = "Add Customer Contact";
   input(CustomerId, AddressId, NoteText);
   output(PersonId, AddressId);

   group CustomerContactHeaderGroup;
   group CustomerContactDetailsGroup;
   group CommunicationMethodGroup;

   command Ok {
      enabled = [FullName != null];
      execute {
         if [PersonExists and(PersonId != null)] {
            call CreateCustomerContactForExistPerson(CustomerId,
            PersonId,
            AddressId,
            CopyAddress,
            Role,
            NoteText);
            exit OK;
         }
         else {
            call CreateCustomerContact(CustomerId,
            PersonId,
            AddressId,
            CopyAddress,
            Role,
            FullName,
            FirstName,
            MiddleName,
            LastName,
            Title,
            Initials,
            Phone,
            Mobile,
            Email,
            Fax,
            Pager,
            Intercom,
            Www,
            Messenger,
            NoteText) into PersonId;
            exit OK;
         }
         exit OK;
      }
   }
   command Cancel;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------


---------------------------------- ACTIONS ----------------------------------
-- This method calls Customer_Info_Contact_API.Create_Contact which calls Customer_Info_Contact_API.New__.
-- CustomerInfoContact entity has DbRmcomAccess security handling
action CreateCustomerContact Text {
   initialcheck implementation;

   parameter CustomerId Text;
   parameter PersonId Text;
   parameter CustomerAddress Text;
   parameter CopyAddress Boolean;
   parameter Role Text;
   parameter FullName Text;
   parameter FirstName Text;
   parameter MiddleName Text;
   parameter LastName Text;
   parameter Title Text;
   parameter Initials Text;
   parameter Phone Text;
   parameter Mobile Text;
   parameter Email Text;
   parameter Fax Text;
   parameter Pager Text;
   parameter Intercom Text;
   parameter Www Text;
   parameter Messenger Text;
   parameter NoteText Text;

   ludependencies = CustomerInfoContact;
}

-- Customer_Info_Contact_API.New is called and CustomerInfoContact entity has DbRmcomAccess security handling
action CreateCustomerContactForExistPerson {
   initialcheck implementation;

   parameter CustomerId Text;
   parameter PersonId Text;
   parameter CustomerAddress Text;
   parameter CopyAddress Boolean;
   parameter Role Text;
   parameter NoteText Text;

   ludependencies = CustomerInfoContact;
}


--------------------------------- FUNCTIONS ---------------------------------
function ActivePersons List < Entity(PersonInfoAll) > {
   where = "customer_contact_db = 'TRUE' AND blocked_for_use_db = 'FALSE' AND objstate IN ('Active')";
}


-------------------------------- STRUCTURES ---------------------------------
structure CustomerContactStructure {
   attribute CustomerId Text {
      label = "Customer";
      editable = [false];
   }
   attribute PersonId Text {
      label = "Person";
      format = uppercase;
   }
   attribute FullName Text {
      label = "Name";
   }
   attribute FirstName Text;
   attribute MiddleName Text;
   attribute LastName Text;
   attribute Initials Text;
   attribute Title Text;
   attribute Phone Text;
   attribute Mobile Text;
   attribute Email Text {
      label = "E-mail";
   }
   attribute Fax Text;
   attribute Www Text {
      label = "www";
   }
   attribute Messenger Text;
   attribute Pager Text {
      label = "Pager Number";
   }
   attribute Intercom Text;
   attribute AddressId Text;
   attribute CopyAddress Boolean("TRUE", "FALSE") {
      label = "Copy Address to Contact";
      required = [true];
   }
   attribute PersonExists Boolean("TRUE", "FALSE") {
      default = "'FALSE'";
   }
   attribute NewPerson Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute RoleDb Text;
   attribute Role Text;
   attribute NoteText Text;

   reference PersonIdRef(PersonId) to PersonInfoAll(PersonId) {
      label = "Person";
   }
   reference CustomerAddressRef(CustomerId, AddressId) to CustomerInfoAddress(CustomerId, AddressId) {
      label = "Customer Address";
   }
   reference ContactRoleRef(RoleDb, Role) to ContactRoleDbLov(RoleDb, Description) {
      label = "Role";
      multireference = [true];
   }
}

