client CompanyTemplates;
component ENTERP;
layer Core;
projection CompanyTemplatesHandling;


----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CompanyTemplatesNavEntry parent EnterpNavigator.CompanyTemplateMenu at index 200 {
      label = "Company Templates";
      page List home CreateCompanyTem;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page List using CreateCompanyTemSet {
   label = "Company Templates";
   list CreateCompanyTemList;
}

page SystemCompanyTemplate using SystemCompanyTemplateQuerySet {
   list SystemCompanyTemplateQueryList;
}

page CompanyTemplateComponent using CreateCompanyTemSet {
   selector CreateCompanyTemSelector;
   list CreateCompanyTemCompQueryList(CreateCompanyTemCompArray) bind CreateCompanyTemSelector;
}

page CompanyTemplateLu using CreateCompanyTemCompQuerySet {
   selector CreateCompanyTemCompSelector;
   list CreateCompanyTemLuList(CreateCompanyTemLuArray)bind CreateCompanyTemCompSelector;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command MarkAsDefaultCommand for CreateCompanyTem {
   label = "Mark as Default Template";

   enabled = [not DefaultTemplate];
   execute {
      confirm("Are you sure you want to mark ${TemplateId} as the default template? The current default template will be de-selected.") {
         when CANCEL {
            exit;
         }
         when OK {
            call SetDefaultTemplate();
         }
      }
   }
}

command CompanyTemplateComponentCommand for CreateCompanyTem {
   label = "Company Template Component";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate CompanyTemplateComponent(TemplateId);
   }
}

command TranslationsCommand for CreateCompanyTem {
   label = "Translations";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/TemplateAttributeTranslations/Form?$filter=KeyValue eq $[TemplateId]";
   }
}

command MarkasValidTemplateCommand for CreateCompanyTem {
   label = "Mark as Valid Template";
   enabled = [not Valid and ChangeAllowed = "TRUE"];
   execute {
      confirm("Do you really want to mark template ${TemplateId} as a Valid template? This action will also change the version of each component in the template to the registered version. Note that this may cause inconsistency related errors when using this template as source for the Create Company process.") {
         when OK {
            call SetValid();
         }
      }
   }
}

command CopyCompanyTemplateCommand for CreateCompanyTem {
   label = "Copy Company Template";
   enabled = [true];

   execute {
      dialog CopyCompanyTemplateDialog(TemplateId) {
         when OK {
            exit;
         }
      }
   }
}

command RenameCompanyTemplateCommand for CreateCompanyTem {
   label = "Rename Company Template";
   enabled = [true];

   execute {
      dialog RenameCompanyTemplateDialog(TemplateId) {
         when OK {
            exit;
         }
      }
   }
}

command CreateCompanyTemplateAssistantCommand for CreateCompanyTem {
   label = "New Company Template";
   mode = SelectedRecords;

   execute {
      navigate "assistant/CreateCompanyTemplateAssistant/Assistant";
   }
}

command ExportCompanyTemplatetoFileCommand for CreateCompanyTem {
   label = "Export Company Template to File Assistant";
   mode = SingleRecord;
   enabled = [true];
   execute {
      navigate "assistant/ExportCompanyTemplateToFileAssistant/Assistant?$action=ExportCompanyTemplateSetup{InputTemplateIdVar:$[TemplateId]}";
   }
}

command ViewReservedSystemTemplatesCommand for CreateCompanyTem {
   label = "View Reserved System Templates Ids";
   mode = SelectedRecords;

   execute {
      navigate SystemCompanyTemplate;
   }
}

command CompanyTemplateLuCommand for CreateCompanyTemComp {
   label = "Company Template Lu";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate CompanyTemplateLu(TemplateId, Component);

   }
}

command TranslationsCommand for CreateCompanyTemComp {
   label = "Translations";
   enabled = [Translations = "TRUE"];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/TemplateAttributeTranslations/Form?$filter=KeyValue eq $[TemplateId] and Module eq $[Component]";
   }
}

command CompanyTemplateDetailCommand for CreateCompanyTemLu {
   label = "Company Template Detail";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/CompanyTemplateDetail/Form?$filter=TemplateId eq $[TemplateId] and Component eq $[Component] and Lu eq $[Lu]";
   }
}

command TranslationsCommand for CreateCompanyTemLu {
   label = "Translations";
   enabled = [Translations = "TRUE"];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/TemplateAttributeTranslations/Form?$filter=KeyValue eq $[TemplateId] and Module eq $[Component] and Lu eq $[Lu]";
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector CreateCompanyTemSelector for CreateCompanyTem {
   label = "${TemplateId} - ${Description}";
   static TemplateId;
   static Description;
}

@Override
selector CreateCompanyTemCompQuerySelector for CreateCompanyTemComp {
   label = "${Component} - ${Version}";
   lov TemplateIdRef with CreateCompanyTemSelector {
      search = TemplateId, Description;
      description = TemplateIdRef.Description;
   }
   static Component;
   static Version;
}


---------------------------------- GROUPS -----------------------------------


----------------------------------- LISTS -----------------------------------
list CreateCompanyTemList for CreateCompanyTem {
   crudactions {
      delete {
         enabled = [ChangeAllowed = "TRUE"];
      }
   }

   lov CreateCompanyTemRef with ReferenceCreateCompanyTemSelector {
      search = TemplateId, Description;
      description = Description;
   }

   field Valid;
   field DefaultTemplate;
   field CreationDate;
   field LastModificationDate;
   field CreatedByUser;
   field SystemTemplate;
   field ChangeAllowed {
      columnexclude = [true];
      columnvisible = [false];
   }

   commandgroup GeneralCmdGroup {
      command CompanyTemplateComponentCommand;
      command TranslationsCommand;
   }
   commandgroup SetDefaultCmdGroup {
      command MarkAsDefaultCommand;
   }
   commandgroup ValidTemplateCmdGroup {
      command MarkasValidTemplateCommand;
   }
   commandgroup CopyRenameCmdGroup {
      command CopyCompanyTemplateCommand;
      command RenameCompanyTemplateCommand;
   }
   commandgroup CreateTemplateCmdGroup {
      command CreateCompanyTemplateAssistantCommand;
      command ExportCompanyTemplatetoFileCommand;
   }
   commandgroup ViewReservedCmdGroup {
      command ViewReservedSystemTemplatesCommand;
   }
}

list SystemCompanyTemplateQueryList for SystemCompanyTemplate {
   field TemplateId;
}

list CreateCompanyTemCompQueryList for CreateCompanyTemComp {
   field CreateCompanyTemCompRef;
   field Version;

   command CompanyTemplateLuCommand;
   command TranslationsCommand;
}

list CreateCompanyTemLuList for CreateCompanyTemLu {
   crudactions {
      new {
         enabled = [ChangeAllowed = "TRUE"];
      }
      delete {
         enabled = [ChangeAllowed = "TRUE"];
      }
   }

   field ChangeAllowed {
      columnexclude = [true];
      columnvisible = [false];
   }
   field CreateCompanyTemLuRef;

   command CompanyTemplateDetailCommand;
   command TranslationsCommand;
}


----------------------------------- CARDS -----------------------------------


---------------------------------- DIALOGS ----------------------------------
dialog CopyCompanyTemplateDialog for CopyCompanyTemplateStructure {
   label = "Copy Company Template";
   input(TemplateId);

   group {
      label = "New Template Details";

      field TemplateIdRef;
      field NewTemplateId;
      field Description;
   }
   command Ok {
      enabled = [TemplateId != null and NewTemplateId != null];
      execute {
         call CopyTemplate(TemplateId, NewTemplateId, Description);
         alert("The template ${NewTemplateId} is copied from template ${TemplateId}.");
         exit OK;
      }
   }
   command Cancel;
}

dialog RenameCompanyTemplateDialog for CopyCompanyTemplateStructure {
   label = "Rename Company Template";
   input(TemplateId);

   group {
      label = "New Template Details";
      field TemplateIdRef {
         editable = [false];
      }
      field NewTemplateId;
   }

   command Ok {
      execute {
         call RenameTemplate(TemplateId, NewTemplateId);
         alert("The template ${TemplateId} is renamed to template ${NewTemplateId}.");
         exit OK;
      }
   }
   command Cancel;
}


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDARS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------


