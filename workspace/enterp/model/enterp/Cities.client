client Cities;
component ENTERP;
layer Core;
projection CitiesHandling;

include fragment EnterpAddressCountry2Query;
include fragment StateCodes2Selector;
include fragment CountyCode2Selector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CitiesNavEntry parent EnterpNavigator.BasicDataMenu at index 700 {
      label = "Cities";

      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using CountyCodeSet {
   label = "Cities";

   selector CountyCodeSelector;
   group CountyGroup bind CountyCodeSelector;
   list CityCodesList(CityCodes);
}


-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ZipCodesCommand for CityCode {
   label = "Zip Codes";
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/ZipCodes/Form?$filter=CountryCode eq $[CountryCode] and StateCode eq $[StateCode] and CountyCode eq $[CountyCode] and CityCode eq $[CityCode]";
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector CountyCodeSelector for CountyCode {
   label = "${CountyCode} - ${CountyName}";

   static CountryCode;
   static StateCode;
   static CountyCode;
   static CountyName;
}

@Override
selector ReferenceEnterpAddressCountry2Selector for EnterpAddressCountry2 {
   label = "";

   static StatePresentation {
      visible = [false];
   }
   static CountyPresentation {
      visible = [false];
   }
   static CityPresentation {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group CountyGroup for CountyCode {
   label = "";

   lov CountryCodeRef with ReferenceEnterpAddressCountry2Selector {
      search = CountryCode, CountryName;
      description = CountryCodeRef.CountryName;
   }
   lov StateCodeRef with ReferenceStateCodes2Selector {
      search = StateCode, StateName;
      description = StateCodeRef.StateName;
   }
   lov CountyCodeRef with ReferenceCountyCode2Selector {
      search = CountyCode, CountyName;
      description = CountyCodeRef.CountyName;
   }
   field CountryCodeRef.CityPresentation {
      label = "City Presentation";
   }
}


----------------------------------- LISTS -----------------------------------
list CityCodesList for CityCode {
   label = "Cities";

   field CityCode {
      size = Small;
      format = uppercase;
   }
   field CityName;
   field NumericCityCode;

   command ZipCodesCommand;
}

@Override
list EnterpAddressCountry2LovList for EnterpAddressCountry2 {
   label = "";
   static StatePresentation {
      columnexclude = [true];
   }
   static CountyPresentation {
      columnexclude = [true];
   }
   static CityPresentation {
      columnexclude = [true];
   }
}


----------------------------------- CARDS -----------------------------------


---------------------------------- DIALOGS ----------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDARS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------
