projection CompanyTemplatesHandling;
component ENTERP;
layer Core;
description "Managing company templates and related items like company template component and company template logical units";
category Users;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CreateCompanyTemSet for CreateCompanyTem;

entityset SystemCompanyTemplateQuerySet for SystemCompanyTemplate;

entityset CreateCompanyTemCompQuerySet for CreateCompanyTemComp;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CreateCompanyTem {
   crud = Update, Delete, Read;

   attribute Valid Boolean {
      editable = [false];
   }
   attribute DefaultTemplate Boolean {
      editable = [false];
   }
   attribute CreatedByUser Text {
      label = "Created By";
      editable = [false];
   }
   attribute SystemTemplate Boolean;
   attribute CreationDate Timestamp;
   attribute LastModificationDate Timestamp {
      editable = [false];
   }
   attribute ChangeAllowed Text {
      fetch = "Create_Company_Tem_API.Change_Template_Allowed(template_id)";
   }

   reference CreateCompanyTemRef(TemplateId) to CreateCompanyTem(TemplateId) {
      label = "Template";
   }

   array CreateCompanyTemCompArray(TemplateId) to CreateCompanyTemComp(TemplateId);
   action SetDefaultTemplate {
      ludependencies = CreateCompanyTem;
   }
   action SetValid {
      ludependencies = CreateCompanyTem;
   }
}

@Override
entity CreateCompanyTemLu {
   crud = Create, Read, Delete;

   attribute ChangeAllowed Text {
      fetch = "Create_Company_Tem_API.Change_Template_Allowed(template_id)";
   }
   attribute Translations Text {
      fetch = "Templ_Key_Lu_API.Check_Translations(template_id, component, lu)";
   }

   reference CreateCompanyTemLuRef(TemplateId, Component, Lu) to CreateCompanyTemLu(TemplateId, Component, Lu) {
      label = "Logical Unit";
   }
}


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------
query SystemCompanyTemplate {
   from = "system_company_template";
   lu = SystemCompanyTemplate;
   keys = TemplateId;

   attribute TemplateId Text {
      label = "Template ID";
   }
}

query CreateCompanyTemComp {
   from = "create_company_tem_comp";
   lu = CreateCompanyTemComp;
   keys = TemplateId, Component;

   attribute TemplateId Text {
      label = "Template ID";
   }
   attribute Component Text;
   attribute Version Text;
   attribute Translations Text {
      fetch = "Templ_Key_Lu_API.Check_Translations(template_id, component, null)";
   }

   reference CreateCompanyTemCompRef(TemplateId, Component) to CreateCompanyTemComp(TemplateId, Component) {
      label = "Component";
   }
   reference TemplateIdRef(TemplateId) to CreateCompanyTem(TemplateId) {
      label = "Template";
   }

   array CreateCompanyTemLuArray(TemplateId, Component) to CreateCompanyTemLu(TemplateId, Component);
}


---------------------------------- ACTIONS ----------------------------------
-- Create_Company_Tem_API.Copy_Template__ calls Create_Company_Tem_API.Exist and other related validations
action CopyTemplate {
   initialcheck implementation;

   parameter TemplateId Text;
   parameter NewTemplateId Text;
   parameter Description Text;

   ludependencies = CreateCompanyTem;
}

-- Create_Company_Tem_API.Rename_Template__ calls Change_Template_Allowed(template_id_) and other related validations
action RenameTemplate {
   initialcheck implementation;

   parameter TemplateId Text;
   parameter NewTemplateId Text;

   ludependencies = CreateCompanyTem;
}


--------------------------------- FUNCTIONS ---------------------------------


-------------------------------- STRUCTURES ---------------------------------
structure CopyCompanyTemplateStructure {
   attribute TemplateId Text;
   attribute NewTemplateId Text {
      label = "New Template ID";
      format = uppercase;
   }
   attribute Description   Text;

   reference TemplateIdRef(TemplateId) to CreateCompanyTem(TemplateId) {
      label = "Template ID";
   }
}


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------


