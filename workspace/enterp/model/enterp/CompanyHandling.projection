--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181120  thjilk  Bug 145381, Added changes related to Lookup attributes.
--  191016  ShKolk  GEFALL20-473, Added array to CompanyAddressTaxNumber
--  200313  WaSalk  GESPRIN20-3715, Added LocalizationControlCenterHandler.fragment and relavent atttributes to handle localizations.
--  200826  SBalLK  GESPRING20-537, Added ItalyIntrastatEnabled for Company entity to enable italy localization.
--  200908  misibr  GEFALL20-3013, added reference BusinessClassificationRef
--  210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
--  220111  Hecolk  KEEP-5975, Added E-Invoicing Compliance basic data related code
-----------------------------------------------------------------------------
projection CompanyHandling;
component ENTERP;
layer Core;
description "This is used to enter or modify information for a company";
category Users;

include fragment AssociationInfoSelector;
include fragment DetailAddressDialog;
include fragment CommunicationMethodsList;
@DynamicComponentDependency ACCRUL
include fragment TaxCalcStructureActiveSelector;
include fragment UpdateCompanyAssistant;
include fragment UpdateCompanyTranslationAssistant;
@DynamicComponentDependency INVOIC
include fragment CompanyAddressTaxInformation;
-- gelr:outgoing_fiscal_note, begin
@DynamicComponentDependency INVOIC
include fragment CompanyAddressTaxNumberInformation;
-- gelr:outgoing_fiscal_note, end
-- gelr:fr_tax_reports, begin
@DynamicComponentDependency TAXLED
include fragment DasReportingInformation;
-- gelr:fr_tax_reports, end
@DynamicComponentDependency INVENT
include fragment CompanyAddressSupplyChainInfoTab;
@DynamicComponentDependency ACCRUL
include fragment CompanyAccountingRules;
@DynamicComponentDependency ACCRUL
include fragment CompanyTaxControl;
@DynamicComponentDependency INVOIC
include fragment CompanyInvoiceInformation;
@DynamicComponentDependency PAYLED
include fragment CompanyPaymentInformation;
@DynamicComponentDependency FIXASS
include fragment CompanyFixedAssets;
@DynamicComponentDependency PERCOS
include fragment CompanyPeriodicalCostAllocation;
@DynamicComponentDependency MPCCOM
include fragment CompanySupplyChainInfoPage;
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CompanySet for Company;
entityset CompanyEmpSet for CompanyEmp;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Company {
   crud = Read, Update;
   supportwarnings = [true];
   ludependencies = CompanyInvoiceInfo;

   attribute DocRecipAddressPos Enumeration(PositioningType) {
      label = "Document Recipient Address Positioning";
   }
   attribute PrintSendersAddress Boolean("TRUE", "FALSE") {
      label = "Print Document Senders Address";
   }
   attribute CreationDate Date {
      editable = [false];
      updatable = [false];
   }
   attribute FromCompany Text {
      editable = [false];
      updatable = [false];
   }
   attribute FromTemplateId Text {
      editable = [false];
      updatable = [false];
   }
   attribute IdentifierRefValidation Enumeration(IdentifierRefValidation) {
      label = "ID Reference Validation";
   }
   attribute TemplateCompany Boolean("TRUE", "FALSE") {
      editable = [false];
      updatable = [false];
   }
   attribute MasterCompany Boolean("TRUE", "FALSE") {
      editable = [false];
   }
   attribute CreatedBy Text {
      editable = [false];
      format = uppercase;
   }
   attribute LocalizationCountry Enumeration(LocalizationCountry) {
      label = "Localization";
   }
   @DynamicComponentDependency DOCMAN
   attribute IsDocmanActive Number {
      fetch = "Dictionary_SYS.Component_Is_Active_Num('DOCMAN')";
   }
   @DynamicComponentDependency SINWOF
   attribute IsSinwofActive Number {
      fetch = "Dictionary_SYS.Component_Is_Active_Num('SINWOF')";
   }
   @DynamicComponentDependency INVOIC
   attribute VisibleSuppInvWorkflow Boolean("TRUE", "FALSE") {
      fetch = "Company_Invoice_Info_API.Get_Use_Posting_Proposal(company)";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
   @DynamicComponentDependency INVOIC
   attribute NcfRefMethod Text {
      fetch = "Company_Invoice_Info_API.Get_Ncf_Reference_Method_Db(company)";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, begin
   reference AssociationNoRef(AssociationNo) to AssociationInfo(AssociationNo) {
      label = "Association No";
   }
   reference CorporateFormRef(CountryCode, CorporateForm) to CorporateForm(CountryCode, CorporateForm) {
      label = "Form of Business";
   }
   reference BusinessClassificationRef(CountryCode, BusinessClassification) to BusinessClassification(CountryCode, BusinessClassification) {
      label = "Classification of Business";
   }

   array CommunicationMethods(PartyType, Company) to CommMethod(PartyType, Identity);
   array MessageSetups(Company) to CompanyMsgSetup(Company);
   array CompanyAddresses(Company) to CompanyAddress(Company);
   @DynamicComponentDependency ACCRUL
   array TaxControlBasicDataArray(Company) to CompanyTaxControl(Company);
   @DynamicComponentDependency ACCRUL
   array AccountingRulesBasicDataArray(Company) to CompanyFinance(Company);
   @DynamicComponentDependency ACCRUL
   array CurrencyTypeBasicDataArray(Company) to CurrencyTypeBasicData(Company);
   @DynamicComponentDependency INVOIC
   array CompanyInvoiceInfoArray(Company) to CompanyInvoiceInfo(Company);
   @DynamicComponentDependency INVOIC
   array CompanyInvoiceInfoDefInvTypes(Company) to CompanyDefInvoiceType(Company);
   -- gelr:e-invoicing_compliance, begin
   @DynamicComponentDependency INVOIC
   array CompanyInvoiceEinvComplianceArray(Company) to EinvComplianceMsgSetup(Company);
   -- gelr:e-invoicing_compliance, end
   @DynamicComponentDependency INVOIC
   array CompanyTaxControlInvoices(Company) to CompanyTaxControlInvoic(Company);
   @DynamicComponentDependency SINWOF
   array CompanyInvoiceSuppInvWorkflows(Company) to CompanySinwofInfo(Company);
   @DynamicComponentDependency PAYLED
   array CompanyPayments(Company) to CompanyPayInfo(Company);
   @DynamicComponentDependency PERCOS
   array CompanyCostAllocInfoArray(Company) to CompanyCostAllocInfo(Company);
   @DynamicComponentDependency FIXASS
   array CompanyFixedAssetsArray(Company) to FaCompany(Company);
   @DynamicComponentDependency MPCCOM
   array CompanySupplyChainInfoArray(Company) to CompanyDistributionInfo(Company);
   @DynamicComponentDependency INVENT
   array CompanyWarehousingInfoArray(Company) to CompanyInventInfo(Company);
   @DynamicComponentDependency PURCH
   array CompanyProcurementInfoArray(Company) to CompanyPurchInfo(Company);
   @DynamicComponentDependency ORDER
   array CompanySalesInfoArray(Company) to CompanyOrderInfo(Company);
   @DynamicComponentDependency RENTAL
   array CompanyRentalInfoArray(Company) to CompanyRentalInfo(Company);
   @DynamicComponentDependency DISCOM
   array CompanySupplyChainTaxInfoArray(Company) to CompanyTaxDiscomInfo(Company);
   @DynamicComponentDependency JINSUI
   array JinsuiInvoiceInfoArray(Company) to JsCompanyInfo(Company);
   -- gelr:localization_control_center, begin
   array CompanyLocalizationInfoArray(Company) to CompanyLocalizationInfo(Company);
   -- gelr:localization_control_center, end
}


@Override
entity CompanyAddress {
   supportwarnings = [true];
   ludependencies = CompanyAddressType;

   attribute AddressId Text {
      label = "Address ID";
   }
   attribute EanLocation Text {
      label = "Company's Own Address ID";
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute DetailAddressExist Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Enterp_Address_Country_API.Get_Detailed_Address(country_db), 'TRUE', 'TRUE', 'FALSE')";
   }
   attribute JurisdictionCode Text {
      editable = [false];
      updatable = [false];
   }
   attribute ValidationDate Date {
      default = "trunc(sysdate)";
      fetch = "trunc(sysdate)";
   }
   attribute Country Lookup(IsoCountry) {
      format = uppercase;
   }

   @DynamicComponentDependency ACCRUL
   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }

   array AddressTypes(Company, AddressId) to CompanyAddressType(Company, AddressId);
   array AddressCommunicationMethods(PartyType, Company, AddressId) to CommMethod(PartyType, Identity, AddressId);
   @DynamicComponentDependency INVOIC
   array TaxCodes(Company, AddressId) to DeliveryFeeCodeCompany(Company, AddressId);
   array TaxExempArray(Company, AddressId) to CompanyDeliveryTaxExemp(Company, AddressId);
   -- gelr:outgoing_fiscal_note, begin
   @DynamicComponentDependency INVOIC
   array CompanyAddressTaxNumberArray(Company, AddressId) to CompanyAddressTaxNumber(Company, AddressId);
   -- gelr:outgoing_fiscal_note, end
   -- gelr:fr_tax_reports, begin
   @DynamicComponentDependency TAXLED
   array ReportingParameterInfoArray(Company, AddressId) to DasReportingInfo(Company, AddressId);
   -- gelr:fr_tax_reports, end
   @DynamicComponentDependency INVENT
   array CompanyAddressSupplyChainInfoArray(Company, AddressId) to CompanyAddressDelivInfo(Company, AddressId);
   action AddDefaultAddressTypes {
      ludependencies = CompanyAddressType;
   }
}


@Override
entity CompanyAddressType {
   supportwarnings = [true];
   ludependencies = CompanyAddress;
}


@Override
entity CompanyMsgSetup {
   reference MessageClassRef(MessageClass) to MessageClass(ClassId) {
      label = "Message Class";
   }
   reference MediaCodeRef(MediaCode) to MessageMedia(MediaCode) {
      label = "Media Code";
   }
   reference AddressRef(Address) to MessageReceiver(Receiver) {
      label = "Address";
   }
}


@Override
entity CompanyEmp {
   validate action CheckEmpExpDates;
   supportwarnings = [true];

   attribute EmployeeId Text {
      label = "Employee ID";
   }

   attribute ValidDataProcessingPurpose Boolean("TRUE", "FALSE") {
      fetch = "Personal_Data_Man_Util_API.Is_Valid_Consent_By_Keys('EMPLOYEE', company, employee_id, TRUNC(sysdate))";
   }
   attribute VisibleDataSubConstColumn Text {
      fetch = "Data_Subject_API.Get_Personal_Data_Managemen_Db('EMPLOYEE')";
   }

   reference PersonIdRef(PersonId) to PersonInfo(PersonId) {
      label = "Person ID";
   }
}


@Override
entity CompanyDeliveryTaxExemp {
   attribute ExemptCertificateType Enumeration(ExemptCertificateType) {
      label = "Certificate Type";
   }
   attribute CertificateExpiryDate Date {
      label = "Expiration Date";
   }
   attribute CertificateIssueDate Date {
      label = "Certification Date";
   }
   attribute CertificateLocation Text {
      label = "Certificate Jurisdiction";
   }
}


@Override
entity CommMethod {
   attribute PartyTypeDbVal Text {
      default = "'COMPANY'";
   }
}


-- gelr:localization_control_center, begin
@Override
entity CompanyLocalizationInfo {
   crud = Read, Update;
   attribute Mandatory Boolean("TRUE", "FALSE");
}
-- gelr:localization_control_center, end

------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------
action CheckEmpExpDates {
   initialcheck none;
   supportwarnings = [true];
   parameter Init Boolean;
}


--------------------------------- FUNCTIONS ---------------------------------
function SubjectKeyRef Text {
   parameter DataSubjectDb Text;
   parameter Key1 Text;
   parameter Key2 Text;
}


function GetEmployeeDetails List<Entity(CompanyEmp)> {
   parameter Company Text;
   parameter ShowValidEmployees Boolean;
   parameter DtCompany Text;
   parameter DtEmployeeId Text;
   basedon CompanyEmpSet;
}


function GetListSearchContextDefaults Structure(ShowValidEmployeesStructure);


function FetchCountryDescription Text {
   parameter CountryCode Lookup(IsoCountry);
}


-------------------------------- STRUCTURES ---------------------------------
structure ShowValidEmployeesStructure {
   attribute ShowValidEmployees Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute Company Text;
   attribute EmployeeId Text;
}


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------


