--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181120  thjilk  Bug 145381, Added changes related to Lookup attributes.
--  190118  thjilk  Bug 146348, Added missing annotation @DynamicComponentDependency
--  190206  thjilk  Bug 146695, Added fields Address3,Address4,Address5,Address6 to the selector CompanyAddressSelector.
--  191016  ShKolk  GEFALL20-473, Added list CompanyAddressTaxNumberList
--  200311  WaSalk  GESPRIN20-3715, Added InitLocalizationFunctionalityCommand as a Selectionchanged command to handle localizations.
--  200826  SBalLK  GESPRING20-537, Added ItalyIntrastatEnabled for InitLocalizationFunctionalitiesCommand to enable italy localization.
--  200908  misibr  GEFALL20-3013, added LOV BusinessClassificationRef
--  210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
--  211015  PraWlk  FI21R2-3531, Removed CompanyLocalizationSelector and used CompanySelector instead in the page CompanyLocalizationInfo. Also created
--  211015          the new group CompanyLocalizationGroup with additional filed LocalizationCountry and used it instead CompanyGroup in the same page.
-----------------------------------------------------------------------------
client Company;
component ENTERP;
layer Core;
projection CompanyHandling;

include fragment AssociationInfoSelector;
include fragment DetailAddressDialog;
include fragment CommunicationMethodsList;
@DynamicComponentDependency ACCRUL
include fragment TaxCalcStructureActiveSelector;
include fragment UpdateCompanyAssistant;
include fragment UpdateCompanyTranslationAssistant;
@DynamicComponentDependency INVOIC
include fragment CompanyAddressTaxInformation;
-- gelr:outgoing_fiscal_note, begin
@DynamicComponentDependency INVOIC
include fragment CompanyAddressTaxNumberInformation;
-- gelr:outgoing_fiscal_note, end
-- gelr:fr_tax_reports, begin
@DynamicComponentDependency TAXLED
include fragment DasReportingInformation;
-- gelr:fr_tax_reports, end
@DynamicComponentDependency INVENT
include fragment CompanyAddressSupplyChainInfoTab;
@DynamicComponentDependency ACCRUL
include fragment CompanyAccountingRules;
@DynamicComponentDependency ACCRUL
include fragment CompanyTaxControl;
@DynamicComponentDependency INVOIC
include fragment CompanyInvoiceInformation;
@DynamicComponentDependency PAYLED
include fragment CompanyPaymentInformation;
@DynamicComponentDependency FIXASS
include fragment CompanyFixedAssets;
@DynamicComponentDependency PERCOS
include fragment CompanyPeriodicalCostAllocation;
@DynamicComponentDependency MPCCOM
include fragment CompanySupplyChainInfoPage;
warningsenabled = Company, CompanyAddress, CompanyAddressType, CheckDefaultCommMethod, CommMethod, CompanyEmp;
@DynamicComponentDependency ACCRUL
warningsenabled = CompanyTaxControl, CompanyFinance, CurrencyTypeBasicData;
@DynamicComponentDependency INVOIC
warningsenabled = CompanyInvoiceInfo, CompanyTaxControlInvoic, TaxLiabilityCountries, CompanyAddressTaxNumber;
@DynamicComponentDependency PERCOS
warningsenabled = CompanyCostAllocInfo;
@DynamicComponentDependency PAYLED
warningsenabled = CompanyPayInfo;
@DynamicComponentDependency FIXASS
warningsenabled = FaCompany, CheckDetailAddress;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CompanyNavEntry parent EnterpNavigator.CompanyMenu at index 200 {
      label = "Company";

      page Form home Company selector CompanySelector;
      entry AddressInfoNavEntry;
      entry CommunicationMethodNavEntry;
      entry MessageSetupNavEntry;
      entry EmployeesNavEntry;
      @DynamicComponentDependency ACCRUL
      entry AccountingRulesNavEntry;
      @DynamicComponentDependency ACCRUL
      entry TaxControlNavEntry;
      @DynamicComponentDependency INVOIC
      entry InvoiceNavEntry;
      @DynamicComponentDependency PAYLED
      entry PaymentNavEntry;
      @DynamicComponentDependency FIXASS
      entry FixedAssetsNavEntry;
      @DynamicComponentDependency PERCOS
      entry PeriodicalCostAllocationNavEntry;
      @DynamicComponentDependency MPCCOM
      entry SupplyChainInfoNavEntry;
      -- gelr:localization_control_center, begin
      entry LocalizationControlNavEntry;
      -- gelr:localization_control_center, end
   }
}


entry AddressInfoNavEntry {
   label = "Address";

   page AddressInfo selector CompanySelector;
}


entry CommunicationMethodNavEntry {
   label = "Communication Method";

   page CommunicationMethod selector CompanySelector;
}


entry MessageSetupNavEntry {
   label = "Message Setup";

   page MessageSetup selector CompanySelector;
}


entry EmployeesNavEntry {
   label = "Employees";

   page Employees selector CompanySelector;
}


@DynamicComponentDependency ACCRUL
entry AccountingRulesNavEntry {
   label = "Accounting Rules";

   page AccountingRules selector CompanySelector;
}


@DynamicComponentDependency ACCRUL
entry TaxControlNavEntry {
   label = "Tax Control";

   page TaxControl selector CompanySelector;
}


@DynamicComponentDependency INVOIC
entry InvoiceNavEntry {
   label = "Invoice";

   page Invoice selector CompanySelector;
}


@DynamicComponentDependency PAYLED
entry PaymentNavEntry {
   label = "Payment";

   page Payment selector CompanySelector;
}


@DynamicComponentDependency FIXASS
entry FixedAssetsNavEntry {
   label = "Fixed Assets";

   page FixedAssets selector CompanySelector;
}


@DynamicComponentDependency PERCOS
entry PeriodicalCostAllocationNavEntry {
   label = "Periodical Cost Allocation";

   page PeriodicalCostAllocation selector CompanySelector;
}


@DynamicComponentDependency MPCCOM
entry SupplyChainInfoNavEntry {
   label = "Supply Chain Information";

   page CompanySupplyChainInfo selector CompanySelector;
}


-- gelr:localization_control_center, begin
entry LocalizationControlNavEntry {
   label = "Localization Control Center";

   page CompanyLocalizationInfo selector CompanySelector;
}
-- gelr:localization_control_center, end
-------------------------------- MAIN PAGES ---------------------------------
page Form using CompanySet {
   label = "Company";

   selector CompanySelector;
   group CompanyGroup bind CompanySelector;
   arrange {
      group CompanyGeneralInfoGroup bind CompanySelector;
      group MiscInfoGroup  bind CompanySelector;
   }

   commandgroup CompanyCmdGroup {
      command UpdateCompanyCommand;
      command UpdateCompanyTranslationCommand;
      command CreateCompanyCommand;
   }
}


page AddressInfo using CompanySet {
   label = "Address";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   selector CompanySelector;
   group CompanyGroup;
   selector CompanyAddressSelector(CompanyAddresses) bind CompanySelector;
   group CompanyAddressGroup bind CompanyAddressSelector;
   tabs {
      tab {
         label = "General Address Information";
         arrange {
            arrange {
               group AddressGroup bind CompanyAddressSelector;
               group GeneralAddressInfoGroup bind CompanyAddressSelector;
            }
            list AddressTypeList(AddressTypes) bind CompanyAddressSelector;
         }
         list CommMethodAddressList(AddressCommunicationMethods) bind CompanyAddressSelector;
      }
      tab {
         label = "Tax Information";
         group CompanyAddressTaxCodeGroup bind CompanyAddressSelector;
         @DynamicComponentDependency INVOIC
         list DeliveryTaxCodeList(TaxCodes) bind CompanyAddressSelector;
         list TaxExemptionInfoList(TaxExempArray) bind CompanyAddressSelector;
         -- gelr:outgoing_fiscal_note, begin
         @DynamicComponentDependency INVOIC
         list CompanyAddressTaxNumberList(CompanyAddressTaxNumberArray) bind CompanyAddressSelector {
            visible = ["ADDR_SPECIFIC_TAX_REG_NUMBERS" in EnabledLccParams];
         }
         -- gelr:outgoing_fiscal_note, end
         -- gelr:fr_tax_reports, begin
         @DynamicComponentDependency TAXLED
         list Das2ReportingInfoList(ReportingParameterInfoArray) bind CompanyAddressSelector {
            visible = ["FR_TAX_REPORTS" in EnabledLccParams];
         }
         -- gelr:fr_tax_reports, end
      }
      @DynamicComponentDependency INVENT
      tab {
         label = "Supply Chain Information";
         singleton CompanyAddressSupplyChainInfoSingleton(CompanyAddressSupplyChainInfoArray) bind CompanyAddressSelector;
         group SupplyChainDataGroup bind CompanyAddressSupplyChainInfoSingleton;
         group InterSiteDataGroup bind CompanyAddressSupplyChainInfoSingleton;
      }
   }
}


page CommunicationMethod using CompanySet {
   label = "Communication Method";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   selector CompanySelector;
   group CompanyGroup;
   list CommMethodList(CommunicationMethods) bind CompanySelector;
}


page MessageSetup using CompanySet {
   label = "Message Setup";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CompanySelector;
   group CompanyGroup;
   list CompanyMsgSetupList(MessageSetups) bind CompanySelector;
}


page Employees using CompanySet {
   label = "Employees";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CompanySelector;
   group CompanyGroup;
   list CompanyEmpList using GetEmployeeDetails(Company, ListSearchContext.ShowValidEmployees, ListSearchContext.Company, ListSearchContext.EmployeeId) {
      searchcontext ListSearchContext {
         defaults = GetListSearchContextDefaults();
      }
      copyoncruddefault(Company)to(Company);
   }
}


-- gelr:localization_control_center, begin
page CompanyLocalizationInfo using CompanySet {
   label = "Localization Control Center";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CompanySelector;
   group CompanyLocalizationGroup;
   list CompanyLocalizationInfoList(CompanyLocalizationInfoArray);
}
-- gelr:localization_control_center, end


searchcontext ListSearchContext for ShowValidEmployeesStructure {
   label = "";
   field ShowValidEmployees;
   field Company {
      visible = [false];
   }
   field EmployeeId {
      visible = [false];
   }
}

-------------------------------- ASSISTANTS ---------------------------------


--------------------------------- COMMANDS ----------------------------------
command CreateCompanyCommand for Company {
   label = "New Company";
   mode = Global;
   execute {
      navigate "assistant/CreateCompanyAssistant/Assistant";
   }
}


command UpdateCompanyCommand for Company {
   label = "Update Company";
   execute {
      assistant UpdateCompanyAssistant(Company) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}


command UpdateCompanyTranslationCommand for Company {
   label = "Update Company Translation";
   execute {
      assistant UpdateCompanyTranslationAssistant(Company) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}


command DetailedCompanyAddressCommand for CompanyAddress {
   label = "Edit Detailed Address";
   enabled = [DetailAddressExist];

   execute {
      dialog DetailedAddressDialog("COMPANY", Company, AddressId, Street, HouseNo, null, Community, District) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}


command DetailsCommand for CompanyEmp {
   label = "Details";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/Person/Form?$filter=PersonId eq $[PersonId]";
   }
}


command ManageDataProcessingPurposesCommand for CompanyEmp {
   label = "Manage Data Processing Purposes";
   enabled = [VisibleDataSubConstColumn = "TRUE"];

   variable DataSubjectDbVar Text;
   variable DataSubjectKeyRefVar Text;

   execute {
      set DataSubjectDbVar = "EMPLOYEE";
      call SubjectKeyRef(DataSubjectDbVar, CompanyId, EmpNo) into DataSubjectKeyRefVar;
      navigate "assistant/DataProcessingPurposeManagement/DataProcessingPurposeManagementAssistant?$action=InitPersonalConsents{KeyRefVar: $[DataSubjectKeyRefVar], DataSubjectIdVar:$[PersonId], DataSubjectNameVar:$[Name], DataSubjectVar:$[DataSubjectDbVar]}";
   }
}


command AddDefaultAddressTypesCommand for CompanyAddress {
   execute {
      if [CrudOperation = "create"] {
         call AddDefaultAddressTypes();
      }
      if [CrudOperation = "create" or CrudOperation = "update"] {
         call CheckDetailAddress(Company, AddressId, "COMPANY");
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector CompanySelector for Company {
   label = "${Company} - ${Name}";
   static Name;
}


@Override
selector ReferenceMessageClassSelector for MessageClass {
   static ClassId {
      label = "Class ID";
   }
   static Receive {
      visible = [false];
   }
   static Send {
      visible = [false];
   }
}


@Override
selector CompanyAddressSelector for CompanyAddress {
   label = "Address ID: ${AddressId}";
   crudactions {
      after command AddDefaultAddressTypesCommand;
   }
   static Company {
      visible = [false];
   }
   static AddressId;
   static Country;
   static City;
   static ZipCode;
   static EanLocation {
      visible = [false];
   }
   static JurisdictionCode {
      visible = [false];
   }
   static WithinCityLimit {
      visible = [false];
   }
   static ValidFrom {
      visible = [false];
   }
   static ValidTo {
      visible = [false];
   }
   static Address1 {
      visible = [false];
   }
   static Address2 {
      visible = [false];
   }
   static Address3 {
      visible = [false];
   }
   static Address4 {
      visible = [false];
   }
   static Address5 {
      visible = [false];
   }
   static Address6 {
      visible = [false];
   }
   static Address3 {
      visible = [false];
   }
   static Address4 {
      visible = [false];
   }
   static Address5 {
      visible = [false];
   }
   static Address6 {
      visible = [false];
   }
   static County {
      visible = [false];
   }
   static State {
      visible = [false];
   }
   static Street {
      visible = [false];
   }
   static HouseNo {
      visible = [false];
   }
   static Community {
      visible = [false];
   }
   static District {
      visible = [false];
   }
   static DetailAddressExist {
      visible = [false];
   }
   static PartyType {
      visible = [false];
   }
   static TaxCalcStructureId {
      visible = [false];
   }
   static ValidationDate {
      visible = [false];
   }

   command DetailedCompanyAddressCommand;

}

---------------------------------- GROUPS -----------------------------------
group CompanyGroup for Company {
   label = "";

   field Company;
   field Name;
   lov AssociationNoRef with ReferenceAssociationInfoSelector {
      freeinput = [true];
   }
   field CreatedBy;
   -- gelr:localization_control_center, begin
   field EnabledLccParams {
      visible = [false];
   }
   -- gelr:localization_control_center, end
}


group CompanyGeneralInfoGroup for Company {
   label = "General Information";

   field DefaultLanguage;
   field Country {
      format = uppercase;
   }
   field LocalizationCountry {
   -- gelr:localization_control_center, begin
      editable = [original.LocalizationCountry = "None"];

      validate command {
         execute {
            if [LocalizationCountry != "None"] {
               messagebox("Warning Message",
               warning,
               "This will activate a country localization for the company. Once saved, the selected localization will be enabled for the company and it is not possible to change. If there are transactions in the company this action may cause data inconsistency.Do you want to continue?") {
                  when "Yes" {
                     exit;
                  }
                  when "No" {
                     set LocalizationCountry = "None";
                  }
               }
            }
         }
      }
   -- gelr:localization_control_center, end
   }
   lov CorporateFormRef with ReferenceCorporateFormSelector {
      search = CorporateForm, CorporateFormDesc;
      description = CorporateFormRef.CorporateFormDesc;
   }
   lov BusinessClassificationRef with ReferenceBusinessClassificationSelector {
      search = BusinessClassification, Description;
      description = BusinessClassificationRef.Description;
   }

   field CreationDate;
   field ActivityStartDate;
   field FromCompany;
   field FromTemplateId;
   field TemplateCompany;
   field MasterCompany;
   -- gelr:localization_control_center, begin
   field EnabledLccParams {
      visible = [false];
   }
   -- gelr:localization_control_center, end
}


group MiscInfoGroup for Company {
   label = "Miscellaneous Information";

   field Logotype;
   field DocRecipAddressPos;
   field PrintSendersAddress;
   field AuthorizationId;
   field AuthIdExpireDate;
   field IdentifierReference;
   field IdentifierRefValidation;
}


group CompanyAddressGroup for CompanyAddress {
   label = "";

   field AddressId {
      visible = [isNew];
   }
   field EanLocation;
}


group AddressGroup for CompanyAddress {
   label = "";

   field Country {
      validate command {
         execute {
            if [Country != null] {
               call FetchCountryDescription(Country) into CountryDesc;
            }
            else {
               set CountryDesc = null;
            }
         }
      }
   }
   daterangefield {
      startdate ValidFrom;
      enddate ValidTo;
      label = "Validity Period";
   }
   addressfield {
      address1 Address1;
      address2 Address2;
      address3 Address3;
      address4 Address4;
      address5 Address5;
      address6 Address6;
      city City;
      country CountryDesc;
      county County;
      state State;
      zipcode ZipCode;
      countrycode Country;
      label = "Address";
   }
}


group GeneralAddressInfoGroup for CompanyAddress {
   label = "Other Information";

   field WithinCityLimit;
   field JurisdictionCode;
}


group CompanyAddressTaxCodeGroup for CompanyAddress {
   label = "";

   @DynamicComponentDependency ACCRUL
   lov TaxCalcStructureIdRef with ReferenceTaxCalcStructureActiveSelector {
      search = TaxCalcStructureId, Description;
      description = TaxCalcStructureIdRef.Description;
      size = Large;
   }
}

group CompanyLocalizationGroup for Company {
   label = "";

   field Company;
   field Name;
   lov AssociationNoRef with ReferenceAssociationInfoSelector {
      freeinput = [true];
   }
   field CreatedBy;
   field EnabledLccParams {
      visible = [false];
   }
   field LocalizationCountry;
}

----------------------------------- LISTS -----------------------------------
list AddressTypeList for CompanyAddressType {
   label = "Address Types";

   field AddressTypeCode;
   field DefAddress;
}


@Override
list MessageMediaLovList for MessageMedia {
   static MediaCode;
   static Description;
}


@Override
list MessageClassLovList for MessageClass {
   static ClassId {
      label = "Class ID";
   }
}


@Override
list MessageReceiverLovList for MessageReceiver {
   static Receiver;
   static Description;
}


list CompanyMsgSetupList for CompanyMsgSetup {
   label = "";

   lov MessageClassRef with ReferenceMessageClassSelector;
   lov MediaCodeRef with ReferenceMessageMediaSelector;
   lov AddressRef with ReferenceMessageReceiverSelector;
   field MethodDefault {
      size = Small;
   }
}


list CompanyEmpList for CompanyEmp {
   label = "";

   field EmployeeId {
      size = Small;
   }
   lov PersonIdRef with ReferencePersonInfoSelector {
      search = PersonId, Name;
      description = PersonIdRef.Name;
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field ExpireDate;
   field ValidDataProcessingPurpose {
      size = Small;
      emphasis Info = [ValidDataProcessingPurpose = false];
      editable = [false];
   }

   commandgroup CompanyEmpCmdGroup {
      command DetailsCommand;
      command ManageDataProcessingPurposesCommand;
   }
}


list TaxExemptionInfoList for CompanyDeliveryTaxExemp {
   label = "Tax Exempt Information";

   field TaxExemptionCertNo;
   field ExemptCertificateType;
   field CertificateExpiryDate;
   field CertificateIssueDate;
   field CertificateLocation;
}

-- gelr:localization_control_center, begin
list CompanyLocalizationInfoList for CompanyLocalizationInfo {
   label = "";

   field ParameterDescription;
   field ParameterText {
      size = Large;
   }
   field Mandatory;
   field ParameterValue {
      required = [true];
      editable = [not Mandatory];
   }
}
-- gelr:localization_control_center, end
----------------------------------- CARDS -----------------------------------


---------------------------------- DIALOGS ----------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDARS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------

