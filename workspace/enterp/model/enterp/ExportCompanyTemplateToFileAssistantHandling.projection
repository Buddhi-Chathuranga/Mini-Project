projection ExportCompanyTemplateToFileAssistantHandling;
component ENTERP;
layer Core;
description "Export Company Template(s) to File";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ExportCompanyTemplateVirtualSet for ExportCompanyTemplateVirtual;
entityset IncludeExcludeComponentQuerySet for IncludeExcludeComponentQuery;
entityset IncludeExcludeTemplateLanguageQuerySet for IncludeExcludeTemplateLanguageQuery;
------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query IncludeExcludeComponentQuery {
   from = "create_company_tem_comp_active";
   lu = CreateCompanyTemComp;
   keys = TemplateId, Component;

   attribute TemplateId Text {
      format = uppercase;
   }
   attribute Component Text {
      format = uppercase;
   }
   attribute Version Text;
}

query IncludeExcludeTemplateLanguageQuery {
   from = "templ_translation_lng";
   lu = TemplKeyLuTranslation;
   keys = KeyName, KeyValue, LanguageCode;

   attribute KeyName Text;
   attribute KeyValue Text {
      format = uppercase;
   }
   attribute LanguageCode Text;
   attribute Description Text {
      fetch = "Iso_Language_API.Decode(language_code)";
   }
}

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------


--------------------------------- VIRTUALS ----------------------------------
virtual ExportCompanyTemplateVirtual {
   keys = Objkey;
   crud = Read, Update, Create;
   attribute TemplateId Text {
      format = uppercase;
      editable = [true];
      insertable = [true];
      updatable = [true];
   }
   attribute TemplatePerFile Boolean("TRUE", "FALSE") {
      required = [true];
      default = "true";
   }
   attribute ExportLanguages Boolean("TRUE", "FALSE") {
      required = [true];
      default = "true";
   }
   attribute ComponentList Text;
   attribute LanguageList Text;
   attribute ExportFile Stream {
      implementation = "Java";
   }
   attribute ComponentListGenerated Boolean("TRUE", "FALSE");
   attribute LanguageListGenerated Boolean("TRUE", "FALSE");

   reference CompanyTemplateRef(TemplateId) to CreateCompanyTem(TemplateId);

   array SelectComponentArray(TemplateId) to IncludeExcludeComponentQuery(TemplateId);
   array SelectCompanyLangArray(TemplateId) to IncludeExcludeTemplateLanguageQuery(KeyValue);

   array ActiveComponentArray(Objkey) to ActiveTemplateCompVirtual(ParentObjkey);
   array ExportCompanyLangArray(Objkey) to ExportCompanyLang(ParentObjkey);
   array ExportFilesArray(Objkey) to ExportCompanyTemplateFiles(ParentObjkey);
   action GenerateTemplateFiles Text {
   }
   action GenerateSummary {
      ludependencies = ActiveTemplateCompVirtual, ExportCompanyLang;
   }
}

virtual ExportCompanyLang {
   keys = Objkey;
   crud = Read, Create;

   attribute TemplateId Text {
      format = uppercase;
      maxlength = 30;
      required = [true];
   }
   attribute LanguageCode Text {
      format = lowercase;
      maxlength = 3;
      required = [true];
   }
   attribute Description Text {
      fetch = "Iso_Language_API.Decode(language_code)";
   }
   attribute Selected Boolean("TRUE", "FALSE") {
      required = [true];
   }
}

virtual ActiveTemplateCompVirtual {
   keys = Objkey;
   crud = Read, Create;

   attribute TemplateId Text {
      format = uppercase;
      maxlength = 30;
      required = [true];
   }
   attribute Component Text {
      format = uppercase;
      maxlength = 6;
      required = [true];
   }
   attribute Version Text {
      format = uppercase;
      maxlength = 30;
      required = [true];
   }
   attribute Selected Boolean("TRUE", "FALSE") {
      required = [true];
   }
}

virtual ExportCompanyTemplateFiles {
   keys = Objkey;
   crud = Read, Create;

   attribute TemplateId Text {
      format = uppercase;
      maxlength = 30;
      required = [true];
   }
   attribute Component Text {
      format = uppercase;
      maxlength = 6;
      required = [true];
   }
   attribute FileName Text {
      maxlength = 500;
      required = [true];
   }
   attribute FileContent Text {
      maxlength = 100;
      required = [true];
   }
   attribute TemplateFile Binary {
      required = [true];
      // fetch empty string if someone calls the projection source directly, to not consume memory it the binary is large.
      fetch = "''";
   }
}


--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------
