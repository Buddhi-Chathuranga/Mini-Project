--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181120  thjilk  Bug 145381, Added changes related to Lookup attributes.
--  190118  thjilk  Bug 146348, Removed obsolete property "visible" and added "columnvisible" instead.
--  190206  thjilk  Bug 146695, Added fields Address3,Address4,Address5,Address6 to the selector PersonInfoAddressSelector.
--  190525  basblk  Bug 146766, Made changes to configure middle name
--  190708  basblk  Bug 148922, Removed all occurenses of IsEmpConnected. Removed unused parameters from FormattedFullName().
--  200722  Hecolk  FIXTEND-3404 (LCS Bug 154880), Modified FullNameCommand
--  210211  ckumlk  FISPRING20-9011, Applied Start-up Mode.
--  210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
--  210720  Diwslk  FI21R2-2216, Added new field JobTitle to the group PersonInfoGroup, command FullNameCommand.
-----------------------------------------------------------------------------
client Person;
component ENTERP;
layer Core;
projection PersonHandling;

include fragment PersonFullNameDialog;
include fragment PersonInfoFreeUserSelector;
include fragment DetailAddressDialog;
include fragment CommunicationMethodsList;
include fragment PersonInfoAddress1Selector;
@DynamicComponentDependency PERSON
include fragment PersonDocumentList;

warningsenabled = PersonInfo, PersonInfoAddress, PersonInfoAddressType, CheckDefaultCommMethod, CommMethod, CheckDetailAddress;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PersonNavEntry parent EnterpNavigator.PersonMenu at index 100 {
      label = "Person";

      page Form home PersonInfo selector PersonInfoSelector;
      entry AddressInfoNavEntry;
      entry CommunicationMethodNavEntry;
      @DynamicComponentDependency PERSON
      entry DocumentsNavEntry;
   }
}


entry AddressInfoNavEntry {
   label = "Address";

   page AddressInfo selector PersonInfoSelector;
}


entry CommunicationMethodNavEntry {
   label = "Communication Method";

   page CommunicationMethod selector PersonInfoSelector;
}


@DynamicComponentDependency PERSON
entry DocumentsNavEntry {
   label = "Documents";
   page Documents selector PersonInfoSelector;
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using PersonInfoSet {
   label = "Person";
   startupmode = search;
   selector PersonInfoSelector;
   arrange {
      arrange {
         group PersonInfoGroup bind PersonInfoSelector;
         group PersonGeneralInfoGroup bind PersonInfoSelector;
      }
      group PersonImageGroup bind PersonInfoSelector;
   }
   tabs {
      tab {
         label = "Customer Contact";
         group CustomerContactGroup bind PersonInfoSelector;
         list CustomerContactList(ContactCustomerInformationArray) bind PersonInfoSelector;
      }
      tab {
         label = "Supplier Contact";
         group SupplierContactGroup bind PersonInfoSelector;
         list SupplierContactList(ContactSupplierInformationArray) bind PersonInfoSelector;
      }
   }

   commandgroup DataValidityCmdGroup {
      command SetActive;
      command SetHidden {
         label = "Hide";
      }
      command SetBlocked {
         label = "Block";
      }
   }
   command FullNameCommand;
   command ManageDataProcessingPurposesCommand;
}


page AddressInfo using PersonInfoSet {
   label = "Address";

   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   selector PersonInfoSelector;
   group PersonHeaderGroup;
   selector PersonInfoAddressSelector(PersonInfoAddresses) bind PersonInfoSelector;
   arrange {
      group AddressGroup bind PersonInfoAddressSelector;
      list AddressTypeList(AddressTypes) bind PersonInfoAddressSelector;
   }
   list CommMethodAddressList(AddressCommunicationMethods) bind PersonInfoAddressSelector;
}


page CommunicationMethod using PersonInfoSet {
   label = "Communication Method";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector PersonInfoSelector;
   group PersonHeaderGroup;
   list CommMethodList(CommunicationMethods) bind PersonInfoSelector;
}


@DynamicComponentDependency PERSON
page Documents using PersonInfoSet {
   label = "Documents";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector PersonInfoSelector;
   group PersonHeaderGroup;
   list PersonDocumentList(PersonDocuments) {
      searchcontext ValidDocumentsSearchContext {
         defaults = GetDefaultValidDate();
      }
      filter = [(DefaultSearchValue = ValidDocumentsSearchContext.ValidDate and ValidData = ValidDocumentsSearchContext.ValidDate) or DefaultOtherSearchValue = ValidDocumentsSearchContext.ValidDate];
   }
}

-------------------------------- ASSISTANTS ---------------------------------


--------------------------------- COMMANDS ----------------------------------
command FullNameCommand for PersonInfo {
   label = "Edit Full Name";
   enabled = [true];

   variable NameVar Text;
   variable FirstNameVar Text;
   variable MiddleNameVar Text;
   variable LastNameVar Text;
   variable TitleVar Text;
   variable JobTitleVar Text;
   variable InitialsVar Text;
   execute {
      call FormattedFullName(Name) into NameStruct;
      dialog NameDialog(FirstName, MiddleName, LastName, Title, JobTitle, Initials, NameStruct.ExposeMiddleName) into(FirstNameVar, MiddleNameVar, LastNameVar, TitleVar, JobTitleVar, InitialsVar) {
         when OK {
            if [NameStruct.ExposeMiddleName = "FALSE" or MiddleNameVar = null] {
               set NameVar = "${FirstNameVar}${NameStruct.Separator}${LastNameVar}";
            }
            else {
               set NameVar = "${FirstNameVar}${NameStruct.Separator}${MiddleNameVar}${NameStruct.Separator}${LastNameVar}";
            }
            call UpdateFullName(PersonId, NameVar, FirstNameVar, MiddleNameVar, LastNameVar, TitleVar, JobTitleVar, InitialsVar);
            exit;
         }
      }
   }
}


command DetailedPersonAddressCommand for PersonInfoAddress {
   label = "Edit Detailed Address";
   enabled = [DetailAddressExist];

   execute {
      dialog DetailedAddressDialog("PERSON", PersonId, AddressId, Street, HouseNo, FlatNo, Community, District) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}


command ManageDataProcessingPurposesCommand for PersonInfo {
   label = "Manage Data Processing Purposes";
   enabled = [VisibleDataSubConstColumn = "TRUE"];

   variable DataSubjectDbVar Text;
   variable DataSubjectKeyRefVar Text;

   execute {
      set DataSubjectDbVar = "PERSON";
      call SubjectKeyRef(DataSubjectDbVar, PersonId, "NULL") into DataSubjectKeyRefVar;
      navigate "assistant/DataProcessingPurposeManagement/DataProcessingPurposeManagementAssistant?$action=InitPersonalConsents{KeyRefVar: $[DataSubjectKeyRefVar], DataSubjectIdVar:$[PersonId], DataSubjectNameVar:$[Name], DataSubjectVar:$[DataSubjectDbVar]}";
   }
}


command AddDefaultAddressTypesCommand for PersonInfoAddress {
   execute {
      if [CrudOperation = "create"] {
         if [IsProtected != "TRUE"] {
            call AddDefaultAddressTypes();
         }
      }
      if [CrudOperation = "create" or CrudOperation = "update"] {
         call CheckDetailAddress(PersonId, AddressId, "PERSON");
      }
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector PersonInfoSelector for PersonInfo {
   label = "${PersonId} - ${Name}";

   static PersonId {
      contactwidget {
         enabled = [true];
         source = Person;
         key = PersonId;
      }
   }
   static Name;
   static UserId {
      label = "User ID";
   }
   badge Objstate {
      visible = [false];
   }
}


@Override
selector PersonInfoAddressSelector for PersonInfoAddress {
   label = "Address ID: ${AddressId}";
   crudactions {
      after command AddDefaultAddressTypesCommand;
   }
   static PersonId {
      visible = [false];
   }
   static AddressId;
   static Country;
   static City;
   static ZipCode;
   static Address {
      visible = [false];
   }
   static CountryDesc {
      visible = [false];
   }
   static ValidFrom {
      visible = [false];
   }
   static ValidTo {
      visible = [false];
   }

   static Address3 {
      visible = [false];
   }
   static Address4 {
      visible = [false];
   }
   static Address5 {
      visible = [false];
   }
   static Address6 {
      visible = [false];
   }
   static State {
      visible = [false];
   }
   static County {
      visible = [false];
   }
   static Street {
      visible = [false];
   }
   static HouseNo {
      visible = [false];
   }
   static FlatNo {
      visible = [false];
   }
   static Community {
      visible = [false];
   }
   static District {
      visible = [false];
   }
   static DetailAddressExist {
      visible = [false];
   }
   static PartyType {
      visible = [false];
   }
   static Address1 {
      visible = [false];
   }
   static Address2 {
      visible = [false];
   }
   static Address3 {
      visible = [false];
   }
   static Address4 {
      visible = [false];
   }
   static Address5 {
      visible = [false];
   }
   static Address6 {
      visible = [false];
   }

   command DetailedPersonAddressCommand;
}


---------------------------------- GROUPS -----------------------------------

group PersonHeaderGroup for PersonInfo {
   label = "";

   field PersonId;
   field Name;
   field UserId;
   badge Objstate {
      size = Small;
      style = TextOnly;

      emphasis StateActive = [Objstate = "Active"];
      emphasis StateHidden = [Objstate = "Hidden"];
      emphasis StateBlocked = [Objstate = "Blocked"];
   }
}

group PersonInfoGroup for PersonInfo {
   label = "";

   field PersonId;
   field Name {
      editable = [ETag = null];
      validate command {
         variable FirstNameVar Text;
         variable MiddleNameVar Text;
         variable LastNameVar Text;
         variable TitleVar Text;
         variable JobTitleVar Text;
         variable InitialsVar Text;
         execute {
            call FormattedFullName(Name) into NameStruct;
            if [NameStruct.FirstName != null and not(NameStruct.MiddleName != null or NameStruct.LastName != null)] {
               dialog NameDialog(NameStruct.FirstName, NameStruct.MiddleName, NameStruct.LastName, NameStruct.Title, NameStruct.JobTitle, NameStruct.Initials, NameStruct.ExposeMiddleName) into(FirstNameVar, MiddleNameVar, LastNameVar, TitleVar, JobTitleVar, InitialsVar) {
                  when OK {
                     if [Name != "${FirstNameVar} ${MiddleNameVar} ${LastNameVar}"] {
                        set Name = "${FirstNameVar} ${MiddleNameVar} ${LastNameVar}";
                     }
                     if [FirstName != FirstNameVar] {
                        set FirstName = FirstNameVar;
                     }
                     if [MiddleName != MiddleNameVar] {
                        set MiddleName = MiddleNameVar;
                     }
                     if [LastName != LastNameVar] {
                        set LastName = LastNameVar;
                     }
                     if [Title != TitleVar] {
                        set Title = TitleVar;
                     }
                     if [JobTitle != JobTitleVar] {
                        set JobTitle = JobTitleVar;
                     }
                     if [Initials != InitialsVar] {
                        set Initials = InitialsVar;
                     }
                  }
               }
            }
            else {
               set FirstName = "${NameStruct.FirstName}";
               set MiddleName = "${NameStruct.MiddleName}";
               set LastName = "${NameStruct.LastName}";
            }

            if [NameStruct.ExposeMiddleName = "FALSE"] {
               set Name = "${FirstName} ${LastName}";
            }
         }
      }
   }
   field Title;
   field JobTitle;
   field AlternativeName;
   lov UserIdRef with ReferencePersonInfoFreeUserSelector;
   badge Objstate {
      size = Small;
      style = TextOnly;

      emphasis StateActive = [Objstate = "Active"];
      emphasis StateHidden = [Objstate = "Hidden"];
      emphasis StateBlocked = [Objstate = "Blocked"];
   }
}


group PersonGeneralInfoGroup for PersonInfo {
   label = "General Information";

   field DefaultLanguage;
   field Country {
      format = uppercase;
   }
   field CreationDate;
   field Protected;
   field Inactive;
   field ValidDataProcessingPurpose {
      visible = [VisibleDataSubConstColumn = "TRUE"];
   }
}


group PersonImageGroup for PersonInfo {
   label = "${Name}";

   imagefield {
      imagedata PersonImage;
      showlabel = false;
      size = FullWidth;
   }
}


group CustomerContactGroup for PersonInfo {
   label = "";

   field CustomerContact;
   field BlockedForUse {
      editable = [CustomerContact];
   }
}


group SupplierContactGroup for PersonInfo {
   label = "";

   field SupplierContact;
   field BlockedForUseSupplier {
      editable = [SupplierContact];
   }
}


group AddressGroup for PersonInfoAddress {
   label = "General Address Information";

   field AddressId {
      visible = [isNew];
   }
   field Country {
      validate command {
         execute {
            if [Country != null] {
               call FetchCountryDescription(Country) into CountryDesc;
            }
            else {
               set CountryDesc = null;
            }
         }
      }
   }
   daterangefield {
      startdate ValidFrom;
      enddate ValidTo;
      label = "Validity Period";
   }
   addressfield {
      address1 Address1;
      address2 Address2;
      address3 Address3;
      address4 Address4;
      address5 Address5;
      address6 Address6;
      city City;
      country CountryDesc;
      county County;
      state State;
      zipcode ZipCode;
      countrycode Country;
      label = "Address";
   }
}


----------------------------------- LISTS -----------------------------------
list CustomerContactList for ContactCustomerInfo {
   label = "Contact for Customer";

   multiselect = [false];

   lov CustomerInfoRef with ReferenceCustomerInfoSelector {
      search = CustomerId, Name;
      description = CustomerInfoRef.Name;
      size = Large;
      contactwidget {
         enabled = [true];
         source = Customer;
         key = CustomerId;
      }
   }
   field CustomerInfoRef.CustomerCategory {
      label = "Category";
   }
   field CustomerAddress;
   field Role;
   @DynamicComponentDependency RMCOM
   field Department {
      columnvisible = [parent.IsCrmActive = 1];
   }
   field Manager {
      columnvisible = [parent.IsCrmActive = 1];
   }
   field BlockedForCrmObjectsDb {
      columnvisible = [parent.IsCrmActive = 1];
   }
}


list SupplierContactList for ContactSupplierInfo {
   label = "Contact for Supplier";

   multiselect = [false];

   lov SupplierInfoRef with ReferenceSupplierInfoGeneralSelector {
      search = SupplierId, Name;
      description = SupplierInfoRef.Name;
      size = Large;
      contactwidget {
         enabled = [true];
         source = Supplier;
         key = SupplierId;
      }
   }
   field SupplierInfoRef.SupplierCategory {
      label = "Category";
   }
   field SupplierAddress;
   field Role;
   @DynamicComponentDependency RMCOM
   field Department {
      columnvisible = [parent.IsSrmActive = 1];
   }
}


list AddressTypeList for PersonInfoAddressType {
   label = "Address Types";
   crudactions {
      new {
         enabled = [(parent.AccessToProtected = "TRUE") or(parent.IsProtected = "FALSE")];
      }
      delete {
         enabled = [(parent.AccessToProtected = "TRUE") or(parent.IsProtected = "FALSE")];
      }
   }

   field AddressTypeCode {
      editable = [(parent.AccessToProtected = "TRUE") or(parent.IsProtected = "FALSE")];
   }
   field DefAddress;
}


@Override
list CommMethodList for CommMethod {
   field AddressId {
      required = [(parent.AccessToProtected = "FALSE") and(parent.IsProtected = "TRUE")];
      lovswitch {
         when [(parent.AccessToProtected = "FALSE") and(parent.IsProtected = "TRUE")] {
            lov ProtectedAddressIdRef with ReferencePersonInfoAddress1Selector;
         }
         when [true] {
            lov AddressIdRef with ReferencePartyTypeAddressSelector;
         }
      }
   }
   fieldorder {
      anchor MethodDefault;
      followedby AddressId;
   }
}


----------------------------------- CARDS -----------------------------------


---------------------------------- DIALOGS ----------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDARS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------


------------------------------ SEARCH CONTEXT -------------------------------
searchcontext ValidDocumentsSearchContext for ValidDocumentsStructure {
   label = "";

   field ValidDate {
      label = "Show Valid";
   }
}
