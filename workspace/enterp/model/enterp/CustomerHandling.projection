-----------------------------------------------------------------------------
-- Date    Sign    History
-- ------  ------  ------------------------------------------------------
-- 200102  Hiralk  GESPRING20-1771, Included LocalizationControlCenterHandler fragment.
-- 200824  Hairlk  SCTA-8074, Added dummy action CheckCreateCategoryCustomer to control permission to create a Customer Info record with category Customer.
-- 200908  misibr  GEFALL20-3013, added reference BusinessClassificationRef
-- 210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
-- 210629  Carabr  FI21R2-2540, replaced BusinessClassificationRef.Description by BusinessClassificationDesc.
-- 210710  Smallk  FI21R2-2313, Merged LCS bug 159691, removed action CheckDefaultContact, modified entity CustomerInfoContact.
-----------------------------------------------------------------------------

projection CustomerHandling;
component ENTERP;
layer Core;
description "This page is to register a new customer";
category Users;

include fragment AssociationInfoSelector;
include fragment CustomerInfoAddrDelPubLovSelector;
include fragment PersonInfoAddress1Selector;
include fragment PersonInfoAllSelector;
include fragment AddCustomerContactDialog;
include fragment CommunicationMethodsList;
include fragment CopyCustomerDialog;
include fragment ChangeCustomerCategoryDialog;
@DynamicComponentDependency INVOIC
include fragment CustomerAddressDeliveryTaxInformation;
@DynamicComponentDependency INVOIC
include fragment CustomerAddressDeliveryTaxSupplyCountryInformation;
@DynamicComponentDependency INVOIC
include fragment CustomerAddressDocumentTaxInformation;
@DynamicComponentDependency INVOIC
include fragment CustomerInvoiceInformation;
@DynamicComponentDependency PAYLED
include fragment CustomerPaymentInformation;
@DynamicComponentDependency PAYLED
include fragment CustomerCreditInformation;
@DynamicComponentDependency CRM
include fragment CustomerCrmInfo;
@DynamicComponentDependency ORDER
include fragment SalesCustomerAddressTab;
@DynamicComponentDependency ORDER
include fragment CustomerSalesInfo;
@DynamicComponentDependency PRJREP
include fragment CustomerPrjrepParameters;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerInfoSet for CustomerInfo;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerInfo {
   supportwarnings = [true];

   attribute CustomerId Text {
      label = "Customer";
   }
   attribute CustomerCategory Enumeration(CustomerCategory) {
      label = "Category";
      editable = [ETag = null];
   }
   attribute CreationDate Date {
      editable = [false];
   }
   attribute IdentifierRefValidation Enumeration(IdentifierRefValidation) {
      label = "ID Reference Validation";
   }
   attribute OneTime Boolean("TRUE", "FALSE") {
      label = "One-Time Customer";
   }
   attribute B2bCustomer Boolean("TRUE", "FALSE") {
      label = "B2B Customer";
      editable = [ETag != null];
   }
   attribute ValidDataProcessingPurpose Boolean("TRUE", "FALSE") {
      fetch = "Personal_Data_Man_Util_API.Is_Valid_Consent_By_Keys('CUSTOMER',CUSTOMER_ID, NULL, trunc(SYSDATE))";
      editable = [false];
      required = [true];
   }
   attribute VisibleDataSubConstColumn Text {
      fetch = "Data_Subject_API.Get_Personal_Data_Managemen_Db('CUSTOMER')";
   }
   attribute CorporateFormDesc Text {
      fetch = "SUBSTR(Corporate_Form_API.Get_Corporate_Form_Desc(country_db, corporate_form),1,50)";
   }
   attribute CustomerLogo Stream {
      fetch = "Binary_Object_Data_Block_API.Get_Data(picture_id, 1)";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
   attribute DefaultLanguage Lookup(IsoLanguage) {
      required = [true];
   }
   attribute Country Lookup(IsoCountry) {
      required = [true];
      format = uppercase;
   }
   attribute BusinessClassificationDesc Text {
      fetch = "SUBSTR(Business_Classification_API.Get_Description(country_db, corporate_form),1,50)";
   }

   reference AssociationNoRef(AssociationNo) to AssociationInfo(AssociationNo) {
      label = "Association No";
   }
   -- remove country code from the reference as filtering is handled from a function
   reference CorporateFormRef(CorporateForm) to CorporateForm(CorporateForm) {
      label = "Form of Business";
   }
   reference CustomerTaxUsageTypeRef(CustomerTaxUsageType) to CustomerTaxUsageType(CustomerTaxUsageType) {
      label = "Customer Tax Usage Type";
   }
   reference BusinessClassificationRef(BusinessClassification) to BusinessClassification(BusinessClassification) {
      label = "Classification of Business";
   }

   array OurIds(CustomerId) to CustomerInfoOurId(CustomerId);
   array CustomerInfoAddresses(CustomerId) to CustomerInfoAddress(CustomerId);
   array CustomerInfoContacts(CustomerId) to CustomerInfoContact(CustomerId);
   array CommunicationMethods(PartyType, CustomerId) to CommMethod(PartyType, Identity);
   array MessageSetups(CustomerId) to CustomerInfoMsgSetup(CustomerId);
   @DynamicComponentDependency INVOIC
   array CustomerInvoiceCompanies(PartyType, CustomerId) to IdentityInvoiceInfo(PartyType, Identity);
   @DynamicComponentDependency PAYLED
   array CustomerPayments(PartyType, CustomerId) to IdentityPayInfo(PartyType, Identity);
   @DynamicComponentDependency PRJREP
   array CustomerPrjrepCompanies(CustomerId) to CustomerPrjrepParams(Identity);
   @DynamicComponentDependency ORDER
   array CustOrdCustomers(CustomerId) to CustOrdCustomer(CustomerId);
   @DynamicComponentDependency PAYLED
   array CustomerCreditInfoArray(PartyType, CustomerId) to CustomerCreditInfo(PartyType, Identity);
   @DynamicComponentDependency CRM
   array CustomerCrmInfoArray(CustomerId) to CrmCustInfo(CustomerId);

}


@Override
entity CustomerInfoOurId {
   from = "customer_info_our_id_fin_auth";
   keys = CustomerId, Company;

   attribute OurId Text {
      label = "Our ID";
      required = [true];
   }

   @DynamicComponentDependency ACCRUL
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
}


@Override
entity CustomerInfoMsgSetup {
   attribute SequenceNo Number {
      label = "Sequence Number";
   }

   reference MessageClassRef(MessageClass) to MessageClass(ClassId) {
      label = "Message Class";
   }
   reference MediaCodeRef(MediaCode) to MessageMedia(MediaCode) {
      label = "Media Code";
   }
   reference AddressRef(Address) to MessageReceiver(Receiver) {
      label = "Address";
   }
   reference LocaleRef(Locale) to LanguageCode(LangCodeRfc3066) {
      label = "Number/Date Format Locale";
   }
}


@Override
entity CustomerInfoContact {
   attribute CustomerAddress Text {
      label = "Customer Address ID";
   }
   attribute Phone Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('PHONE'), 1, contact_address)";
      label = "Phone";
      editable = [false];
   }
   attribute Mobile Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('MOBILE'), 1, contact_address)";
      editable = [false];
   }
   attribute Email Text {
      label = "E Mail";
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('E_MAIL'), 1, contact_address)";
      editable = [false];
   }
   attribute Fax Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('FAX'), 1, contact_address)";
      editable = [false];
   }
   attribute Pager Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('PAGER'), 1, contact_address)";
      editable = [false];
   }
   attribute Intercom Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('INTERCOM'), 1, contact_address)";
      editable = [false];
   }
   attribute Www Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('WWW'), 1, contact_address)";
      label = "www";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute Guid Text {
      required = [false];
   }
   attribute Created Date {
      required = [false];
   }
   attribute Changed Date {
      required = [false];
   }
   attribute CreatedBy Text {
      required = [false];
   }
   attribute ChangedBy Text {
      required = [false];
   }
   attribute ConnectAllCustAddrDb Text {
      fetch = "connect_all_cust_addr_db";
      insertable = [false];
      updatable = [false];
   }

   reference PersonIdRef(PersonId) to PersonInfoAll(PersonId) {
      label = "Person";
   }
   reference CustomerAddressRef(CustomerId, CustomerAddress) to CustomerInfoAddress(CustomerId, AddressId) {
      label = "Customer Address ID";
   }
   reference ContactAddressRef(PersonId, ContactAddress) to PersonInfoAddress1(PersonId, AddressId) {
      label = "Contact Address";
   }
}


@Override
entity CustomerInfoAddress {
   supportwarnings = [true];
   ludependencies = CustomerInfoAddressType, CustomerTaxInfo, CustomerDeliveryTaxInfo;

   attribute CustomerId Text {
      label = "Customer";
   }
   attribute AddressId Text {
      label = "Address ID";
   }
   attribute EanLocation Text {
      label = "Customer's Own Address ID";
   }
   attribute Name Text {
      label = "Customer Name";
   }
   attribute EndCustomerId Text {
      label = "End Customer";
   }
   attribute EndCustAddrId Text {
      label = "Address ID";
   }
   attribute InCity Boolean("TRUE", "FALSE") {
      label = "Within City Limit";
   }
   attribute JurisdictionCode Text {
      editable = [false];
      updatable = [false];
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute EndCustomerCategory Enumeration(CustomerCategory) {
      fetch = "Customer_Info_API.Get_Customer_Category_Db(end_customer_id)";
   }
   attribute DeliveryTypeExist Boolean("TRUE", "FALSE") {
      fetch = "Customer_Info_Address_Type_API.Check_Exist(customer_id, address_id, Address_Type_Code_API.Decode('DELIVERY'))";
   }
   attribute OneTimeDb Text {
      fetch = "Customer_Info_API.Get_One_Time_Db(customer_id)";
   }

   reference EndCustomerIdRef(EndCustomerId) to CustomerInfo(CustomerId) {
      label = "End Customer";
   }
   reference EndCustAddrIdRef(EndCustomerId, EndCustAddrId) to CustomerInfoAddrDelPubLov(CustomerId, AddressId) {
      label = "Address Identity";
   }
   attribute Country Lookup(IsoCountry) {
      format = uppercase;
   }

   array AddressTypes(CustomerId, AddressId) to CustomerInfoAddressType(CustomerId, AddressId);
   array AddressCommunicationMethods(PartyType, CustomerId, AddressId) to CommMethod(PartyType, Identity, AddressId);
   array CustomerInfoContacts() to CustomerInfoContact() {
      where = "(:parent.CustomerId = :child.CustomerId ) AND (:parent.AddressId = :child.CustomerAddress OR :child.ConnectAllCustAddrDb = 'TRUE')";
   }
   @DynamicComponentDependency INVOIC
   array CustomerTaxInfoArray(CustomerId, AddressId) to CustomerTaxInfo(CustomerId, AddressId);
   @DynamicComponentDependency INVOIC
   array CustomerDocumentTaxInfoArray(CustomerId, AddressId) to CustomerDocumentTaxInfo(CustomerId, AddressId);
   @DynamicComponentDependency ORDER
   array SalesCustomerAddressArray(CustomerId, AddressId) to CustOrdCustomerAddress(CustomerId, AddressId);

   action AddDefaultAddressTypes {
      ludependencies = CustomerInfoAddressType;
   }
}

@Override
entity CustomerInfoAddressType {
   supportwarnings = [true];
   validate action CheckDefaultAddressType;
}


@Override
entity CommMethod {
   attribute PartyTypeDbVal Text {
      default = "'CUSTOMER'";
   }
}


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------
action CheckDefaultAddressType {
   initialcheck none;
   supportwarnings = [true];

   parameter Init Boolean;
}


//This action has been analyzed and it is not possible to remove, since this is used for control permission to create a Customer Info record with category Customer
@SuppressWarning UnusedFunctionOrAction(2021-11-30, bmekse)
action CheckCreateCategoryCustomer {
   initialcheck none;
}

--------------------------------- FUNCTIONS ---------------------------------
function SubjectKeyRef Text {
   parameter DataSubjectDb Text;
   parameter Key1 Text;
   parameter Key2 Text;
}


function DefaultContactInfo Structure(DefaultContactInfoStructure) {
   parameter PersonId Text;
   parameter ContactAddress Text;
}


function EndCustomers List<Entity(CustomerInfo)> {
   parameter CustomerId Text;
   where = "customer_id != :CustomerId AND one_time_db = 'FALSE'";

}


function DefaultEndCustAddrId Text {
   parameter EndCustomerId Text;
}


function EndCustAddressDetails Structure(AdressDetailsStructure) {
   parameter EndCustomerId Text;
   parameter EndCustAddrId Text;
}


function FetchCountryDescription Text {
   parameter CountryCode Lookup(IsoCountry);
}


function CorporateFormLovWhere List<Entity(CorporateForm)> {
   parameter Country Lookup(IsoCountry);
   --where clause is written in this way to get the all of the values without filtering in the searchmode
   where = "(:Country IS NOT NULL AND COUNTRY_CODE = :Country  ) or (:Country IS NULL AND COUNTRY_CODE IS NOT NULL)";
}

function BusinessClassificationLovWhere List<Entity(BusinessClassification)> {
   parameter Country Lookup(IsoCountry);
   where = "(:Country IS NOT NULL AND COUNTRY_CODE = :Country  ) or (:Country IS NULL AND COUNTRY_CODE IS NOT NULL)";
}
-------------------------------- STRUCTURES ---------------------------------
structure DefaultContactInfoStructure {
   attribute Phone Text;
   attribute Mobile Text;
   attribute Email Text;
   attribute Fax Text;
   attribute Pager Text;
   attribute Intercom Text;
   attribute Www Text;
}


structure AdressDetailsStructure {
   attribute Address1 Text;
   attribute Address2 Text;
   attribute Address3 Text;
   attribute Address4 Text;
   attribute Address5 Text;
   attribute Address6 Text;
   attribute ZipCode Text;
   attribute City Text;
   attribute State Text;
   attribute County Text;
   attribute Country Text;
   attribute CountryDesc Text;
   attribute EndCustomerCategory Enumeration(CustomerCategory);
}


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
