--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181120  thjilk  Bug 145381, Added changes related to Lookup attributes.
--  210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
-----------------------------------------------------------------------------
projection PersonHandling;
component ENTERP;
layer Core;
description "This is used to enter or modify information for a person";
category Users;

include fragment PersonFullNameDialog;
include fragment PersonInfoFreeUserSelector;
include fragment DetailAddressDialog;
include fragment CommunicationMethodsList;
include fragment PersonInfoAddress1Selector;
@DynamicComponentDependency PERSON
include fragment PersonDocumentList;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PersonInfoSet for PersonInfo;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PersonInfo {
   from = "person_info_all";
   keys = PersonId;
   supportwarnings = [true];

   exclude attributes = UpdateConBlockForCrmObjs;

   attribute PersonId Text {
      label = "Person";
   }
   attribute Name Text {
      label = "Full Name";
   }
   attribute CreationDate Date {
      editable = [false];
   }
   attribute Inactive Boolean("TRUE", "FALSE") {
      label = "Inactive for Document Distribution";
      required = [true];
   }
   attribute ValidDataProcessingPurpose Boolean("TRUE", "FALSE") {
      fetch = "Personal_Data_Man_Util_API.Is_Valid_Consent_By_Keys('PERSON', person_id, NULL, trunc(sysdate))";
      editable = [false];
      required = [true];
   }
   attribute Objstate Enumeration(PersonInfoState) {
      label = "Validity";
   }
   attribute BlockedForUse Boolean("TRUE", "FALSE") {
      label = "Blocked for Use";
   }
   attribute BlockedForUseSupplier Boolean("TRUE", "FALSE") {
      label = "Blocked for Use";
   }
   attribute PersonImage Stream {
      fetch = "Binary_Object_Data_Block_API.Get_Data(picture_id, 1)";
   }
   attribute IsCrmActive Number {
      fetch = "Dictionary_SYS.Component_Is_Active_Num('CRM')";
   }
   attribute IsSrmActive Number {
      fetch = "Dictionary_SYS.Component_Is_Active_Num('SRM')";
   }
   attribute VisibleDataSubConstColumn Text {
      fetch = "Data_Subject_API.Get_Personal_Data_Managemen_Db('PERSON')";
   }

   reference UserIdRef(UserId) to PersonInfoFreeUser(UserId) {
      label = "User ID";
   }

   array ContactCustomerInformationArray(PersonId) to ContactCustomerInfo(PersonId);
   array ContactSupplierInformationArray(PersonId) to ContactSupplierInfo(PersonId);
   array CommunicationMethods(PartyType, PersonId) to CommMethod(PartyType, Identity);
   array PersonInfoAddresses(PersonId) to PersonInfoAddress(PersonId);
   @DynamicComponentDependency PERSON
   array PersonDocuments(PersonId) to PersDocument(PersonId);
}


@Override
entity PersonInfoAddress {
   from = "person_info_address1";
   keys = PersonId, AddressId;
   supportwarnings = [true];
   ludependencies = PersonInfoAddressType;

   attribute AddressId Text {
      label = "Address ID";
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute DetailAddressExist Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Enterp_Address_Country_API.Get_Detailed_Address(country_db), 'TRUE', 'TRUE', 'FALSE')";
   }
   attribute Country Lookup(IsoCountry) {
      format = uppercase;
   }
   attribute IsProtected Text {
      fetch = "Person_Info_API.Is_Protected(person_id)";
   }
   attribute AccessToProtected Text {
      fetch = "Person_Info_API.Check_Access_To_Protected(person_id)";
   }

   array AddressCommunicationMethods(PartyType, PersonId, AddressId) to CommMethod(PartyType, Identity, AddressId);
   array AddressTypes(PersonId, AddressId) to PersonInfoAddressType(PersonId, AddressId);

   action AddDefaultAddressTypes {
      ludependencies = PersonInfoAddressType;
   }
}


@Override
entity PersonInfoAddressType {
   supportwarnings = [true];
   ludependencies = PersonInfoAddress;
}


@Override
entity CommMethod {
   from = "person_info_comm_method2";

   attribute PartyTypeDbVal Text {
      default = "'PERSON'";
   }
   attribute AddressId Text {
      label = "Address ID";
   }

   reference ProtectedAddressIdRef(Identity, AddressId) to PersonInfoAddress1(PersonId, AddressId);
}


------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query ContactCustomerInfo {
   from = "contact_customer";
   lu = CustomerInfoContact;
   keys = CustomerId, PersonId, Objid;
   ludependencies = PersonInfo;

   attribute CustomerId Text;
   attribute PersonId Text;
   attribute Objid Text;
   attribute CustomerAddress Text {
      label = "Customer Address ID";
   }
   attribute Role Lookup(ContactRole) {
      fetch = "role_db";
      multiselect = [true];
   }
   @DynamicComponentDependency RMCOM
   attribute Department Lookup(ContactDepartment) {
      fetch = "department_db";
   }
   attribute Manager Text;
   attribute BlockedForCrmObjectsDb Boolean("TRUE", "FALSE") {
      label = "Blocked for Use in CRM";
      required = [true];
   }

   reference CustomerInfoRef(CustomerId) to CustomerInfo(CustomerId) {
      label = "Customer";
   }
}


query ContactSupplierInfo {
   from = "contact_supplier";
   lu = SupplierInfoContact;
   keys = SupplierId, PersonId, Objid;
   ludependencies = PersonInfo;

   attribute SupplierId Text;
   attribute PersonId Text;
   attribute Objid Text;
   attribute SupplierAddress Text {
      label = "Supplier Address ID";
   }
   attribute Role Lookup(ContactRole) {
      fetch = "role_db";
      multiselect = [true];
   }
   @DynamicComponentDependency RMCOM
   attribute Department Lookup(ContactDepartment) {
      fetch = "department_db";
   }

   reference SupplierInfoRef(SupplierId) to SupplierInfoGeneral(SupplierId) {
      label = "Supplier";
   }
}


---------------------------------- ACTIONS ----------------------------------


--------------------------------- FUNCTIONS ---------------------------------
function SubjectKeyRef Text {
   parameter DataSubjectDb Text;
   parameter Key1 Text;
   parameter Key2 Text;
}

function GetDefaultValidDate Structure(ValidDocumentsStructure);

function FetchCountryDescription Text {
   parameter CountryCode Lookup(IsoCountry);
}

-------------------------------- STRUCTURES ---------------------------------
structure ValidDocumentsStructure {
   attribute ValidDate Boolean {
      required = [true];
   }
}


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
