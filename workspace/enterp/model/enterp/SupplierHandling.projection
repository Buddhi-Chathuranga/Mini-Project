--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210303  Smallk  FISPRING20-8769, Merged LCS Bug 157213.
--  210710  Smallk  FI21R2-2313, Merged LCS bug 159691, removed action CheckDefault, modified entity SupplierInfoContact.
--  210806  NaLrlk  PR21R2-589, Removed Representatives array from entity SupplierInfoGeneral.
--  211014  PrRtlk  SC21R2-2967, Added Outbound Address Information Tab
-----------------------------------------------------------------------------
projection SupplierHandling;
component ENTERP;
layer Core;
description "This page is to register a new supplier";
category Users;

include fragment AssociationInfoSelector;
include fragment PersonInfoAddress1Selector;
include fragment PersonInfoAllSelector;
include fragment AddSupplierContactDialog;
include fragment CommunicationMethodsList;
include fragment CopySupplierDialog;
include fragment ChangeSupplierCategoryDialog;
@DynamicComponentDependency ACCRUL
include fragment SupplierTaxInfo;
@DynamicComponentDependency INVOIC
include fragment SupplierAddressDocumentTaxInformation;
@DynamicComponentDependency INVOIC
include fragment SupplierInvoiceInformation;
@DynamicComponentDependency PAYLED
include fragment SupplierPaymentInformation;
@DynamicComponentDependency PURCH
include fragment SupplierAddressTab;
@DynamicComponentDependency PURCH
include fragment SupplierPurchaseInformationPage;
@DynamicComponentDependency SRM
include fragment SrmSupplierInfoTab;
@DynamicComponentDependency DISCOM
include fragment SuppOutboundAddrInfoTab;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SupplierInfoGeneralSet for SupplierInfoGeneral;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SupplierInfo {
   supportwarnings = [true];
}

@Override
entity SupplierInfoGeneral {
   supportwarnings = [true];

   attribute SupplierId Text {
      label = "Supplier";
   }
   attribute SupplierCategory Enumeration(SupplierInfoCategory) {
      label = "Category";
      editable = [ETag = null];
   }
   attribute IdentifierRefValidation Enumeration(IdentifierRefValidation) {
      label = "ID Reference Validation";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
   attribute ValidDataProcessingPurpose Boolean("TRUE", "FALSE") {
      fetch = "Personal_Data_Man_Util_API.Is_Valid_Consent_By_Keys('SUPPLIER', supplier_id, NULL, trunc(SYSDATE))";
      label = "Valid Data Processing Purpose";
      editable = [false];
      required = [true];
   }
   attribute VisibleDataSubConstColumn Text {
      fetch = "Data_Subject_API.Get_Personal_Data_Managemen_Db('SUPPLIER')";
   }
   attribute SupplierLogo Stream {
      fetch = "Binary_Object_Data_Block_API.Get_Data(picture_id, 1)";
   }
   attribute CorporateFormDesc Text {
      fetch = "SUBSTR(Corporate_Form_API.Get_Corporate_Form_Desc(country_db, corporate_form),1,50)";
   }
   attribute B2bSupplier Boolean("TRUE", "FALSE") {
      label = "B2B Supplier";
   }
   attribute PartyType Enumeration(PartyType) {
      fetch = "'SUPPLIER'";
   }
   attribute DefaultLanguage Lookup(IsoLanguage) {
      required = [true];
   }
   attribute Country Lookup(IsoCountry) {
      required = [true];
      format = uppercase;
   }

   reference AssociationNoRef(AssociationNo) to AssociationInfo(AssociationNo) {
      label = "Association No";
   }
   -- remove country code from the reference as filtering is handled from a function
   reference CorporateFormRef(CorporateForm) to CorporateForm(CorporateForm) {
      label = "Form of Business";
   }

   array OurIds(SupplierId) to SupplierInfoOurId(SupplierId);
   array SupplierInfoAddresses(SupplierId) to SupplierInfoAddress(SupplierId);
   array SupplierInfoContacts(SupplierId) to SupplierInfoContact(SupplierId);
   array CommunicationMethods(PartyType, SupplierId) to CommMethod(PartyType, Identity);
   array MessageSetups(SupplierId) to SupplierInfoMsgSetup(SupplierId);
   @DynamicComponentDependency INVOIC
   array SupplierInvoiceCompanies(PartyType, SupplierId) to IdentityInvoiceInfo(PartyType, Identity);
   @DynamicComponentDependency PAYLED
   array SupplierPayments(PartyType, SupplierId) to IdentityPayInfo(PartyType, Identity);
   @DynamicComponentDependency PURCH
   array SupplierPurchases(SupplierId) to SupplierPurchaseInformation(VendorNo);
   @DynamicComponentDependency SRM
   array SrmSupplierInfoArray(SupplierId) to SrmSupplierInfo(SupplierId);
   @DynamicComponentDependency PURCH
   array TaxCalculationBasisArray(SupplierId) to SupplierTaxCalcBasis(VendorNo);
}


@Override
entity SupplierInfoOurId {
   from = "supplier_info_our_id_fin_auth";
   keys = SupplierId, Company;

   attribute OurId Text {
      label = "Our ID";
      required = [true];
   }

   @DynamicComponentDependency ACCRUL
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
}


@Override
entity SupplierInfoContact {
   attribute SupplierAddress Text {
      label = "Supplier Address ID";
   }
   attribute Phone Text {
      fetch = "CONCAT('tel:', Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('PHONE'), 1, contact_address, sysdate))";
      editable = [false];
   }
   attribute Mobile Text {
      fetch = "CONCAT('tel:', Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('MOBILE'), 1, contact_address))";
      editable = [false];
   }
   attribute Email Text {
      fetch = "CONCAT('mailto:', Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('E_MAIL'), 1, contact_address))";
      label = "E-mail";
      editable = [false];
   }
   attribute Fax Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('FAX'), 1, contact_address, sysdate)";
      editable = [false];
   }
   attribute Pager Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('PAGER'), 1, contact_address)";
      editable = [false];
   }
   attribute Intercom Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('INTERCOM'), 1, contact_address)";
      editable = [false];
   }
   attribute Www Text {
      fetch = "Comm_Method_API.Get_Value('PERSON', person_id, Comm_Method_Code_API.Decode('WWW'), 1, contact_address)";
      label = "www";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute PersonImage Stream {
      fetch = "Binary_Object_Data_Block_API.Get_Data(Person_Info_API.Get_Picture_Id(person_id), 1)";
      editable = [false];
   }
   attribute Guid Text {
      required = [false];
   }
   attribute Created Date {
      required = [false];
   }
   attribute Changed Date {
      required = [false];
   }
   attribute CreatedBy Text {
      required = [false];
   }
   attribute ChangedBy Text {
      required = [false];
   }
   attribute ConnectAllSuppAddrDb Text {
      fetch = "connect_all_supp_addr_db";
      insertable = [false];
      updatable = [false];
   }

   reference SupplierAddressRef(SupplierId, SupplierAddress) to SupplierInfoAddress(SupplierId, AddressId) {
      label = "Supplier Address ID";
   }
   reference PersonIdRef(PersonId) to PersonInfoAll(PersonId) {
      label = "Person";
   }
   reference ContactAddressRef(PersonId, ContactAddress) to PersonInfoAddress1(PersonId, AddressId) {
      label = "Contact Address";
   }
}


@Override
entity SupplierInfoMsgSetup {
   attribute SequenceNo Number {
      label = "Sequence Number";
   }

   reference MessageClassRef(MessageClass) to MessageClass(ClassId) {
      label = "Message Class";
   }
   reference MediaCodeRef(MediaCode) to MessageMedia(MediaCode) {
      label = "Media Code";
   }
   reference AddressRef(Address) to MessageReceiver(Receiver) {
      label = "Address";
   }
}


@Override
entity SupplierInfoAddress {
   supportwarnings = [true];
   ludependencies = SupplierInfoAddressType;

   attribute SupplierId Text {
      label = "Supplier";
   }
   attribute AddressId Text {
      label = "Address ID";
   }
   attribute EanLocation Text {
      label = "Supplier's Own Address ID";
   }
   attribute Name Text {
      label = "Supplier Name";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute Country Lookup(IsoCountry) {
      format = uppercase;
   }

   array AddressTypes(SupplierId, AddressId) to SupplierInfoAddressType(SupplierId, AddressId);
   array AddressCommunicationMethods(PartyType, SupplierId, AddressId) to CommMethod(PartyType, Identity, AddressId);
   array SupplierInfoContacts() to SupplierInfoContact() {
      where = "(:parent.SupplierId = :child.SupplierId ) AND (:parent.AddressId = :child.SupplierAddress OR :child.ConnectAllSuppAddrDb = 'TRUE')";
   }
   @DynamicComponentDependency INVOIC
   array SupplierDocumentTaxInfoArray(SupplierId, AddressId) to SupplierDocumentTaxInfo(SupplierId, AddressId);
   @DynamicComponentDependency ACCRUL
   array SupplierDeliveryTaxInfoArray(SupplierId, AddressId) to SupplierTaxInfo(SupplierId, AddressId);
   @DynamicComponentDependency PURCH
   array SupplierAddresses(SupplierId, AddressId) to SupplierAddress(SupplierId, AddressId);
   @DynamicComponentDependency DISCOM
   array SuppOutboundAddrInfoArray(SupplierId, AddressId) to SuppOutboundAddrInfo(SupplierId, AddressId);
   action AddDefaultAddressTypes {
      ludependencies = SupplierInfoAddressType;
   }
}


@Override
entity SupplierInfoAddressType {
   supportwarnings = [true];
   validate action CheckDefaultAddressType;
   ludependencies = SupplierInfoAddress;

   attribute Party Text {
      required = [false];
   }
}


@Override
entity CommMethod {
   attribute PartyTypeDbVal Text {
      default = "'SUPPLIER'";
   }
}


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------
action CheckDefaultAddressType {
   initialcheck none;
   supportwarnings = [true];

   parameter Init Boolean;
}


//This action has been analyzed and it is not possible to remove, since this is used for control permission to create a Supplier Info record with category Supplier
@SuppressWarning UnusedFunctionOrAction(2021-11-30, bmekse)
action CheckCreateCategorySupplier {
   initialcheck none;
}

--------------------------------- FUNCTIONS ---------------------------------
function SubjectKeyRef Text {
   parameter DataSubjectDb Text;
   parameter Key1 Text;
   parameter Key2 Text;
}


function DefaultContactInfo Structure(DefaultContactInfoStructure) {
   parameter PersonId Text;
   parameter ContactAddress Text;
}


function FetchCountryDescription Text {
   parameter CountryCode Lookup(IsoCountry);
}

function CorporateFormLovWhere List<Entity(CorporateForm)> {
   parameter Country Lookup(IsoCountry);
   --where clause is written in this way to get the all of the values without filtering in the searchmode
   where = "(:Country IS NOT NULL AND COUNTRY_CODE = :Country  ) or (:Country IS NULL AND COUNTRY_CODE IS NOT NULL)";
}


-------------------------------- STRUCTURES ---------------------------------
structure DefaultContactInfoStructure {
   attribute Phone Text;
   attribute Mobile Text;
   attribute EMail Text;
   attribute Fax Text;
   attribute Pager Text;
   attribute Intercom Text;
   attribute Www Text;
}


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
