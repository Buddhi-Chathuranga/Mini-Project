-----------------------------------------------------------------------------
--
--  Fragment:     PrePostingWithSourceCommonAssistant
--  Component:    MPCCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  200208  NiEdlk  SCXTEND-3091, Created.
-----------------------------------------------------------------------------

layer Core;

@ApproveGlobalVariable
parent_pre_accounting_id_global_     NUMBER;
@ApproveGlobalVariable
distribution_validation_type_global_ VARCHAR2(10);
@ApproveGlobalVariable
distribution_total_amount_global_    NUMBER;

PROCEDURE Get_Pre_Posting_Data___ (
   rec_ IN OUT Pre_Accounting_Virtual_Rec)
IS
   codeparts_settings_rec_       Pre_Accounting_API.Codeparts_Settings_Rec;
BEGIN
   IF (rec_.posting_type IS NOT NULL) THEN
-- Check Allowed Codeparts regular pre-posting
      codeparts_settings_rec_ := Pre_Accounting_API.Get_Codeparts_Settings(rec_.posting_type,
                                                                           rec_.company);
      rec_.allowed := codeparts_settings_rec_.all_codeparts_compiled;
      rec_.allowed_account_no := codeparts_settings_rec_.account_no;
      rec_.allowed_codeno_b := codeparts_settings_rec_.codeno_b;
      rec_.allowed_codeno_c := codeparts_settings_rec_.codeno_c;
      rec_.allowed_codeno_d := codeparts_settings_rec_.codeno_d;
      rec_.allowed_codeno_e := codeparts_settings_rec_.codeno_e;
      rec_.allowed_codeno_f := codeparts_settings_rec_.codeno_f;
      rec_.allowed_codeno_g := codeparts_settings_rec_.codeno_g;
      rec_.allowed_codeno_h := codeparts_settings_rec_.codeno_h;
      rec_.allowed_codeno_i := codeparts_settings_rec_.codeno_i;
      rec_.allowed_codeno_j := codeparts_settings_rec_.codeno_j;
   ELSE
      rec_.allowed := 'ALLOWED';
      rec_.allowed_account_no := 'DISABLED';
      rec_.allowed_codeno_b := 'DISABLED';
      rec_.allowed_codeno_c := 'DISABLED';
      rec_.allowed_codeno_d := 'DISABLED';
      rec_.allowed_codeno_e := 'DISABLED';
      rec_.allowed_codeno_f := 'DISABLED';
      rec_.allowed_codeno_g := 'DISABLED';
      rec_.allowed_codeno_h := 'DISABLED';
      rec_.allowed_codeno_i := 'DISABLED';
      rec_.allowed_codeno_j := 'DISABLED';
   END IF;   
END Get_Pre_Posting_Data___;


PROCEDURE Get_Distributed_Pre_Posting_Data___ (
   rec_ IN OUT Pre_Accounting_Virtual_Rec)
IS
   codeparts_settings_rec_       Pre_Accounting_API.Codeparts_Settings_Rec;
BEGIN
   IF (rec_.total_amount_dist IS NULL) THEN
      rec_.total_amount_dist := 0;
   END IF;
   rec_.allowed_dist := 'DISABLED';
   IF (rec_.posting_type_dist IS NOT NULL) THEN
      codeparts_settings_rec_ := Pre_Accounting_API.Get_Codeparts_Settings(rec_.posting_type_dist,
                                                                           rec_.company);
      rec_.allowed_dist := codeparts_settings_rec_.all_codeparts_compiled;
      rec_.allowed_account_no_dist := codeparts_settings_rec_.account_no;
      rec_.allowed_codeno_b_dist := codeparts_settings_rec_.codeno_b;
      rec_.allowed_codeno_c_dist := codeparts_settings_rec_.codeno_c;
      rec_.allowed_codeno_d_dist := codeparts_settings_rec_.codeno_d;
      rec_.allowed_codeno_e_dist := codeparts_settings_rec_.codeno_e;
      rec_.allowed_codeno_f_dist := codeparts_settings_rec_.codeno_f;
      rec_.allowed_codeno_g_dist := codeparts_settings_rec_.codeno_g;
      rec_.allowed_codeno_h_dist := codeparts_settings_rec_.codeno_h;
      rec_.allowed_codeno_i_dist := codeparts_settings_rec_.codeno_i;
      rec_.allowed_codeno_j_dist := codeparts_settings_rec_.codeno_j;
   END IF;
END Get_Distributed_Pre_Posting_Data___;


PROCEDURE Get_Codepart_Labels___ (
   rec_ IN OUT Pre_Accounting_Virtual_Rec)
IS 
BEGIN
   rec_.label_account_no := Accounting_Code_Parts_API.Get_Name(rec_.company,'A');
   rec_.label_codeno_b := Accounting_Code_Parts_API.Get_Name(rec_.company,'B');
   rec_.label_codeno_c := Accounting_Code_Parts_API.Get_Name(rec_.company,'C');
   rec_.label_codeno_d := Accounting_Code_Parts_API.Get_Name(rec_.company,'D');
   rec_.label_codeno_e := Accounting_Code_Parts_API.Get_Name(rec_.company,'E');
   rec_.label_codeno_f := Accounting_Code_Parts_API.Get_Name(rec_.company,'F');
   rec_.label_codeno_g := Accounting_Code_Parts_API.Get_Name(rec_.company,'G');
   rec_.label_codeno_h := Accounting_Code_Parts_API.Get_Name(rec_.company,'H');
   rec_.label_codeno_i := Accounting_Code_Parts_API.Get_Name(rec_.company,'I');
   rec_.label_codeno_j := Accounting_Code_Parts_API.Get_Name(rec_.company,'J');
END Get_Codepart_Labels___;


PROCEDURE Get_Enabled_Codeparts___ (
   pre_accounting_rec_ IN Pre_Accounting_API.Public_Rec,
   rec_                IN OUT Pre_Accounting_Virtual_Rec)
IS
BEGIN
   IF (pre_accounting_rec_.account_no IS NOT NULL AND rec_.allowed_account_no = 'DISABLED') THEN
      rec_.allowed_account_no := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_b IS NOT NULL AND rec_.allowed_codeno_b = 'DISABLED') THEN
      rec_.allowed_codeno_b := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_c IS NOT NULL AND rec_.allowed_codeno_c = 'DISABLED') THEN
      rec_.allowed_codeno_c := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_d IS NOT NULL AND rec_.allowed_codeno_d = 'DISABLED') THEN
      rec_.allowed_codeno_d := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_e IS NOT NULL AND rec_.allowed_codeno_e = 'DISABLED') THEN
      rec_.allowed_codeno_e := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_f IS NOT NULL AND rec_.allowed_codeno_f = 'DISABLED') THEN
      rec_.allowed_codeno_f := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_g IS NOT NULL AND rec_.allowed_codeno_g = 'DISABLED') THEN
      rec_.allowed_codeno_g := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_h IS NOT NULL AND rec_.allowed_codeno_h = 'DISABLED') THEN
      rec_.allowed_codeno_h := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_i IS NOT NULL AND rec_.allowed_codeno_i = 'DISABLED') THEN
      rec_.allowed_codeno_i := 'READONLY';
   END IF;
   IF (pre_accounting_rec_.codeno_j IS NOT NULL AND rec_.allowed_codeno_j = 'DISABLED') THEN
      rec_.allowed_codeno_j := 'READONLY';
   END IF; 
END Get_Enabled_Codeparts___;


PROCEDURE Set_Company_And_Total_Amount___(
   pre_accounting_rec_ IN Pre_Accounting_API.Public_Rec,
   rec_                IN Pre_Accounting_Virtual_Rec)
IS
   total_amount_dist_            NUMBER := NULL;
BEGIN
   IF (pre_accounting_rec_.company IS NULL OR rec_.allowed_dist != 'DISABLED') THEN
      IF (rec_.total_amount_dist != 0) THEN
         total_amount_dist_ := rec_.total_amount_dist;
      END IF;
      Pre_Accounting_API.Set_Company_And_Total_Amount(rec_.pre_accounting_id, rec_.contract, total_amount_dist_);
   END IF;
END Set_Company_And_Total_Amount___;


PROCEDURE Validate_Code_Part___(
   code_value_    IN VARCHAR2,
   code_part_     IN VARCHAR2,
   voucher_date_  IN DATE,
   company_       IN VARCHAR2)
IS
BEGIN
   Pre_Accounting_API.Validate_Codepart(codevalue_ => code_value_,
                                        code_part_ => code_part_,
                                        voucher_date_ => voucher_date_,
                                        company_ => company_);
END Validate_Code_Part___;

-- handle FOR multiple cases
PROCEDURE Reset_Pre_Accounting_Total_Amount___ (
   pre_accounting_id_   IN NUMBER,
   contract_            IN VARCHAR2)
IS
BEGIN
   Pre_Accounting_API.Set_Company_And_Total_Amount(pre_accounting_id_, contract_, NULL);
END Reset_Pre_Accounting_Total_Amount___;


FUNCTION Mandatory_Pre_Posting_Complete___(
   pre_accounting_id_    IN NUMBER,
   posting_type_         IN VARCHAR2,
   contract_             IN VARCHAR2)  RETURN BOOLEAN
IS
BEGIN
   RETURN PRE_ACCOUNTING_API.Mandatory_Pre_Posting_Complete(pre_accounting_id_,posting_type_,Site_API.Get_Company(contract_));   
END Mandatory_Pre_Posting_Complete___;


FUNCTION Check_Mandatory_Code_Parts___ (
   pre_accounting_id_            IN NUMBER,
   posting_type_                 IN VARCHAR2,
   contract_                     IN VARCHAR2,
   source_identifier_            IN VARCHAR2,
   check_only_project_code_part_ IN BOOLEAN ) RETURN BOOLEAN
IS
BEGIN
   -- Returns a dummy since this is used in Before Command and only functions could be used thers.
   PRE_ACCOUNTING_API.Check_Mandatory_Code_Parts(pre_accounting_id_,posting_type_,Site_API.Get_Company(contract_),source_identifier_,check_only_project_code_part_);   
   RETURN TRUE;
END Check_Mandatory_Code_Parts___;


FUNCTION Check_Preposting_Enabled___ (
   company_      IN VARCHAR2,
   posting_type_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   Pre_Accounting_API.Check_Enabled(company_, posting_type_);
   RETURN TRUE;
END Check_Preposting_Enabled___;


PROCEDURE Validate_Pre_Accounting_Distribution___ (
   init_ IN BOOLEAN )
IS
BEGIN
   IF (init_) THEN
      parent_pre_accounting_id_global_ := NULL;
      distribution_total_amount_global_ := NULL;
   ELSE
      IF (NOT Check_Distribution_Complete___(parent_pre_accounting_id_global_)) THEN 
         IF (distribution_validation_type_global_ = 'AMOUNT') THEN
            Error_SYS.Record_General(lu_name_, 'NOCOMPLETEAMOUNT: The line amounts must sum up to :P1, the total amount to distribute.', distribution_total_amount_global_);
         ELSE 
            Error_SYS.Record_General(lu_name_, 'NOCOMPLETEPERCENTAGE: The line percentages must sum up to 100 %.');
         END IF;
      END IF;
   END IF;
END Validate_Pre_Accounting_Distribution___;


FUNCTION Check_Distribution_Complete___(
   pre_accounting_id_    IN NUMBER) RETURN BOOLEAN
IS
      total_        NUMBER;
      check_ok_     BOOLEAN;

      CURSOR get_distribution(parent_pre_accounting_id_ IN NUMBER) IS
      SELECT SUM(NVL(amount_distribution, 0))
      FROM PRE_ACCOUNTING_TAB
      WHERE parent_pre_accounting_id = parent_pre_accounting_id_
      GROUP BY parent_pre_accounting_id;
BEGIN
      OPEN get_distribution(pre_accounting_id_);
      FETCH get_distribution INTO total_;
      total_ := ROUND(total_, 12);
      IF get_distribution%FOUND THEN
         IF total_ = 1 THEN
            check_ok_ := TRUE;
         ELSE
            check_ok_ := FALSE;
         END IF;
      ELSE
         -- no distribution found is ok!
         check_ok_ := TRUE;
      END IF;
      CLOSE get_distribution;
      RETURN check_ok_;
END Check_Distribution_Complete___;


@Override
PROCEDURE CRUD_Create___ (
   etag_    IN OUT VARCHAR2,
   key_     IN OUT Pre_Accounting_Distribution_Key,
   attr_    IN OUT VARCHAR2,
   info_    OUT    VARCHAR2,
   action_  IN     VARCHAR2 )
IS
BEGIN
   distribution_validation_type_global_ := Client_Sys.Get_Item_Value('VALIDATION_TYPE', attr_);
   distribution_total_amount_global_ := Client_Sys.Get_Item_Value('TOTAL_AMOUNT', attr_);
   super(etag_, key_, attr_, info_, action_);
   parent_pre_accounting_id_global_ := key_.parent_pre_accounting_id;
END CRUD_Create___;


@Override
PROCEDURE CRUD_Update___ (
   etag_    IN OUT VARCHAR2,
   key_     IN OUT Pre_Accounting_Distribution_Key,
   attr_    IN OUT VARCHAR2,
   info_    OUT    VARCHAR2,
   action_  IN     VARCHAR2 )
IS
BEGIN
   distribution_validation_type_global_ := Client_Sys.Get_Item_Value('VALIDATION_TYPE', attr_);
   distribution_total_amount_global_ := Client_Sys.Get_Item_Value('TOTAL_AMOUNT', attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Delete___ (
   etag_    IN OUT VARCHAR2,
   key_     IN     Pre_Accounting_Distribution_Key,
   info_    OUT    VARCHAR2,
   action_  IN     VARCHAR2 )
IS
BEGIN
   super(etag_, key_, info_, action_);
   parent_pre_accounting_id_global_ := key_.parent_pre_accounting_id;
END CRUD_Delete___;


@Override
PROCEDURE CRUD_Default___ (
   key_  IN  Pre_Accounting_Distribution_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
   parent_pre_accounting_id_ NUMBER;
BEGIN
   parent_pre_accounting_id_ := Client_SYS.Get_Item_Value('PARENT_PRE_ACCOUNTING_ID', attr_);
   super(key_, attr_, info_);
   Client_SYS.Add_To_Attr('COMPANY_REF', Pre_Accounting_API.Get_Company(parent_pre_accounting_id_), attr_);
END CRUD_Default___;
