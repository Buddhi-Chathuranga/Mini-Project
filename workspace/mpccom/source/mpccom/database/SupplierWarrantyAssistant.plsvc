-----------------------------------------------------------------------------
--
--  Fragment:     SupplierWarrantyAssistant
--  Component:    MPCCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-- 2021-02-23  NiDalk  SC2020R1-12544, Modified Delete_Supplier_Warranty_Condition___ and Update_Warranty___ not to fetch parent values as it is not necessary.
-- 2019-02-12  SaGelk  SCUXXW4-7710, Created
-- 2019-02-12  SaGelk  SCUXXW4-7715, Created
-----------------------------------------------------------------------------

layer Core;

--Header (Grand Parent) Group
--CRUD CREATE OF HEADER (GRAND PARENT) VIRTUAL
@Override
PROCEDURE CRUD_Create___(
   rec_ IN Supplier_Part_Information_Virtual_Rec )
IS
BEGIN
   super(rec_);
   Create_Child_List___(rec_);
END CRUD_Create___;

--Parent List (SupplierPartInformationVirtual)
--CREATE Parent LIST
PROCEDURE Create_Child_List___(
   parent_rec_ IN Supplier_Part_Information_Virtual_Rec)
IS
   child_rec_ Supplier_Warranty_Type_Virtual_Rec;
   
   CURSOR get_sup_warranty_type IS
   SELECT 
      DECODE(customer_order_connection_db, 'CALCULATE', 'TRUE', 'FALSE') AS customer_order_connection_db,
      DECODE(convert_to_cust_ord_db, 'CONVERT', 'TRUE', 'FALSE') AS convert_to_cust_ord_db,
      DECODE(material_cost_type_db, 'MATERIAL', 'TRUE', 'FALSE') AS material_cost_type_db,
      DECODE(expenses_cost_type_db, 'EXPENSES', 'TRUE', 'FALSE') AS expenses_cost_type_db,
      DECODE(fixed_price_cost_type_db, 'FIXED PRICE', 'TRUE', 'FALSE') AS fixed_price_cost_type_db,
      DECODE(personnel_cost_type_db, 'PERSONNEL', 'TRUE', 'FALSE') AS personnel_cost_type_db,
      DECODE(external_cost_type_db, 'EXTERNAL', 'TRUE', 'FALSE') AS external_cost_type_db,
      warranty_type_id,
      warranty_description,
      warranty_id,
      note_text,
      objid,
      objversion
   FROM SUP_WARRANTY_TYPE
   WHERE warranty_id = parent_rec_.warranty_id;
   
BEGIN
   
   FOR rec_ IN get_sup_warranty_type LOOP
      
      child_rec_.customer_order_connection_db   := Fndcg_Projection_Svc_Util_API.To_Boolean(rec_.customer_order_connection_db);
      child_rec_.convert_to_cust_ord_db         := Fndcg_Projection_Svc_Util_API.To_Boolean(rec_.convert_to_cust_ord_db);
      child_rec_.material_cost_type_db          := Fndcg_Projection_Svc_Util_API.To_Boolean(rec_.material_cost_type_db);
      child_rec_.expenses_cost_type_db          := Fndcg_Projection_Svc_Util_API.To_Boolean(rec_.expenses_cost_type_db);
      child_rec_.fixed_price_cost_type_db       := Fndcg_Projection_Svc_Util_API.To_Boolean(rec_.fixed_price_cost_type_db);
      child_rec_.personnel_cost_type_db         := Fndcg_Projection_Svc_Util_API.To_Boolean(rec_.personnel_cost_type_db);
      child_rec_.external_cost_type_db          := Fndcg_Projection_Svc_Util_API.To_Boolean(rec_.external_cost_type_db);
      
      child_rec_.warranty_type_id               := rec_.warranty_type_id;
      child_rec_.warranty_description           := rec_.warranty_description;
      child_rec_.warranty_id                    := rec_.warranty_id;
      child_rec_.note_text                      := rec_.note_text;
      
      child_rec_.part_no                        := parent_rec_.part_no;
      child_rec_.serial_no                      := parent_rec_.serial_no;
      child_rec_.obj_id                         := rec_.objid;
      child_rec_.obj_version                    := rec_.objversion;
      
      child_rec_.objkey := sys_guid();
      child_rec_.parent_objkey := parent_rec_.objkey;
      CRUD_Create___(child_rec_);
      
   END LOOP;
END Create_Child_List___;

--Supplier Warranty Type
--Convert Boolean values to string
FUNCTION Convert_Boolean_To_String___(
   value_name_ IN VARCHAR2,
   bool_value_ IN BOOLEAN ) RETURN VARCHAR2
IS
BEGIN
   CASE value_name_
      WHEN 'CUSTOMER_ORDER_CONNECTION_DB' THEN 
         IF bool_value_  THEN
            RETURN 'CALCULATE';
         ELSE
            RETURN 'NOT CALCULATE';
         END IF;
      WHEN 'CONVERT_TO_CUST_ORD_DB' THEN
         IF bool_value_ THEN
            RETURN 'CONVERT';
         ELSE
            RETURN 'NOT CONVERT';
         END IF;
      WHEN 'MATERIAL_COST_TYPE_DB' THEN
         IF bool_value_ THEN
            RETURN 'MATERIAL';
         ELSE
            RETURN 'NOT MATERIAL';
         END IF;
      WHEN 'EXPENSES_COST_TYPE_DB' THEN
         IF bool_value_ THEN
            RETURN 'EXPENSES';
         ELSE
            RETURN 'NOT EXPENSES';
         END IF;
      WHEN 'FIXED_PRICE_COST_TYPE_DB' THEN
         IF bool_value_ THEN
            RETURN 'FIXED PRICE';
         ELSE
            RETURN 'NOT FIXED PRICE';
         END IF;
      WHEN 'PERSONNEL_COST_TYPE_DB' THEN
         IF bool_value_ THEN
            RETURN 'PERSONNEL';
         ELSE
            RETURN 'NOT PERSONNEL';
         END IF;
      WHEN 'EXTERNAL_COST_TYPE_DB' THEN
         IF bool_value_ THEN
            RETURN 'EXTERNAL';
         ELSE
            RETURN 'NOT EXTERNAL';
         END IF;
   END CASE;
END Convert_Boolean_To_String___;

--Supplier Warranty Type Create
@Override
PROCEDURE CRUD_Create___(
   rec_ IN Supplier_Warranty_Type_Virtual_Rec )
IS
   attr_ VARCHAR2(32000);
   copy_rec_    Supplier_Warranty_Type_Virtual_Rec;
   info_  VARCHAR2(200);
   
   warranty_id_ NUMBER;
BEGIN
   
   copy_rec_ := rec_;
   warranty_id_ := rec_.warranty_id;
   
   IF NOT Sup_Warranty_Type_API.Exists(rec_.warranty_id, rec_.warranty_type_id) THEN
      Create_Supplier_Warranty_Id___(warranty_id_, rec_.part_no, rec_.serial_no, rec_.parent_objkey);
      copy_rec_.warranty_id := warranty_id_;
      Client_SYS.Add_To_Attr('WARRANTY_ID', warranty_id_, attr_);
      Client_SYS.Add_To_Attr('WARRANTY_TYPE_ID', rec_.warranty_type_id, attr_);
      Client_SYS.Add_To_Attr('WARRANTY_DESCRIPTION', rec_.warranty_description, attr_);
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      
      Client_SYS.Add_To_Attr('CUSTOMER_ORDER_CONNECTION_DB', Convert_Boolean_To_String___('CUSTOMER_ORDER_CONNECTION_DB', rec_.customer_order_connection_db), attr_);
      Client_SYS.Add_To_Attr('CONVERT_TO_CUST_ORD_DB', Convert_Boolean_To_String___('CONVERT_TO_CUST_ORD_DB', rec_.convert_to_cust_ord_db), attr_);
      
      Client_SYS.Add_To_Attr('MATERIAL_COST_TYPE_DB',  Convert_Boolean_To_String___('MATERIAL_COST_TYPE_DB', rec_.material_cost_type_db), attr_);
      Client_SYS.Add_To_Attr('EXPENSES_COST_TYPE_DB', Convert_Boolean_To_String___('EXPENSES_COST_TYPE_DB', rec_.expenses_cost_type_db), attr_);
      Client_SYS.Add_To_Attr('FIXED_PRICE_COST_TYPE_DB', Convert_Boolean_To_String___('FIXED_PRICE_COST_TYPE_DB', rec_.fixed_price_cost_type_db), attr_);
      Client_SYS.Add_To_Attr('PERSONNEL_COST_TYPE_DB', Convert_Boolean_To_String___('PERSONNEL_COST_TYPE_DB', rec_.personnel_cost_type_db), attr_);
      Client_SYS.Add_To_Attr('EXTERNAL_COST_TYPE_DB', Convert_Boolean_To_String___('EXTERNAL_COST_TYPE_DB', rec_.external_cost_type_db) , attr_);
      Client_SYS.Add_To_Attr('WARRANTY_CONDITION_RULE', Warranty_Condition_Rule_API.Decode('INCLUSIVE'), attr_);
      
      Sup_Warranty_Type_API.New__(info_, copy_rec_.obj_id, copy_rec_.obj_version, attr_, 'DO');
   END IF;
   super(copy_rec_);
   
END CRUD_Create___;

--Supplier Warranty Type Update
@Override
PROCEDURE CRUD_Update___(
   old_ IN Supplier_Warranty_Type_Virtual_Rec,
   new_ IN Supplier_Warranty_Type_Virtual_Rec )
IS
   attr_ VARCHAR2(32000);
   copy_new_    Supplier_Warranty_Type_Virtual_Rec;
   info_  VARCHAR2(200);
   
   warranty_state_  VARCHAR2(20); 
   
   parent_row_ ${PROJECTION}_SUPPLIER_PART_INFORMATION_VIRTUAL_VRT%ROWTYPE;
   
   CURSOR get_parent_warranty_ IS
   SELECT *
   FROM ${PROJECTION}_SUPPLIER_PART_INFORMATION_VIRTUAL_VRT
   WHERE objkey = new_.parent_objkey;
   
BEGIN
   copy_new_ := new_;
   --   Get the current warranty id from the header
   OPEN get_parent_warranty_;
   FETCH get_parent_warranty_ INTO parent_row_;
   copy_new_.warranty_id := parent_row_.warranty_id;
   CLOSE get_parent_warranty_;
   
   --   Check if the warranty is shared
   warranty_state_ := Sup_Warranty_API.Get_Objstate(copy_new_.warranty_id);
   IF warranty_state_ = Sup_Warranty_API.DB_SHARED THEN
      Create_Supplier_Warranty_Id___(copy_new_.warranty_id, new_.part_no, new_.serial_no, new_.parent_objkey);
   END IF;
   --   Get the new Objversion and new ObjId
   IF (copy_new_.warranty_id != new_.warranty_id) THEN 
      Get_Obj___(copy_new_.obj_id, copy_new_.obj_version, copy_new_.warranty_id, copy_new_.warranty_type_id);
   END IF;
   
   Client_SYS.Add_To_Attr('WARRANTY_DESCRIPTION', new_.warranty_description, attr_);
   Client_SYS.Add_To_Attr('NOTE_TEXT', new_.note_text, attr_);
   
   Client_SYS.Add_To_Attr('CUSTOMER_ORDER_CONNECTION_DB', Convert_Boolean_To_String___('CUSTOMER_ORDER_CONNECTION_DB', new_.customer_order_connection_db), attr_);
   Client_SYS.Add_To_Attr('CONVERT_TO_CUST_ORD_DB', Convert_Boolean_To_String___('CONVERT_TO_CUST_ORD_DB', new_.convert_to_cust_ord_db), attr_);
   
   Client_SYS.Add_To_Attr('MATERIAL_COST_TYPE_DB',  Convert_Boolean_To_String___('MATERIAL_COST_TYPE_DB', new_.material_cost_type_db), attr_);
   Client_SYS.Add_To_Attr('EXPENSES_COST_TYPE_DB', Convert_Boolean_To_String___('EXPENSES_COST_TYPE_DB', new_.expenses_cost_type_db), attr_);
   Client_SYS.Add_To_Attr('FIXED_PRICE_COST_TYPE_DB', Convert_Boolean_To_String___('FIXED_PRICE_COST_TYPE_DB', new_.fixed_price_cost_type_db), attr_);
   Client_SYS.Add_To_Attr('PERSONNEL_COST_TYPE_DB', Convert_Boolean_To_String___('PERSONNEL_COST_TYPE_DB', new_.personnel_cost_type_db), attr_);
   Client_SYS.Add_To_Attr('EXTERNAL_COST_TYPE_DB', Convert_Boolean_To_String___('EXTERNAL_COST_TYPE_DB', new_.external_cost_type_db) , attr_);
   Client_SYS.Add_To_Attr('WARRANTY_CONDITION_RULE', Warranty_Condition_Rule_API.Decode('INCLUSIVE'), attr_);
   
   Sup_Warranty_Type_API.Modify__(info_, copy_new_.obj_id, copy_new_.obj_version, attr_, 'DO');
   
   super(old_, copy_new_);
   
END CRUD_Update___; 

--Supplier Warranty Type Delete
@Override
PROCEDURE CRUD_Delete___(
   rec_ IN Supplier_Warranty_Type_Virtual_Rec )
IS
   info_  VARCHAR2(200);
   warranty_state_  VARCHAR2(20); 
   copy_rec_    Supplier_Warranty_Type_Virtual_Rec;
   
   parent_row_ ${PROJECTION}_SUPPLIER_PART_INFORMATION_VIRTUAL_VRT%ROWTYPE;
   
   grand_parent_rec_ Supplier_Part_Information_Virtual_Rec;
   old_grand_parent_rec_ Supplier_Part_Information_Virtual_Rec;
   grand_parent_key_ Supplier_Part_Information_Virtual_Key;
   
   CURSOR get_parent_warranty_ IS
   SELECT *
   FROM ${PROJECTION}_SUPPLIER_PART_INFORMATION_VIRTUAL_VRT
   WHERE objkey = rec_.parent_objkey;
BEGIN
   
   copy_rec_ := rec_;
   OPEN get_parent_warranty_;
   FETCH get_parent_warranty_ INTO parent_row_;
   copy_rec_.warranty_id := parent_row_.warranty_id;
   CLOSE get_parent_warranty_;
   
   --   Check if the warranty is shared
   warranty_state_ := Sup_Warranty_API.Get_Objstate(copy_rec_.warranty_id);
   IF warranty_state_ = Sup_Warranty_API.DB_SHARED THEN
      Create_Supplier_Warranty_Id___(copy_rec_.warranty_id, copy_rec_.part_no, copy_rec_.serial_no, copy_rec_.parent_objkey);
   END IF;
   
   --   Get the new Objversion and new ObjId
   IF (copy_rec_.warranty_id != rec_.warranty_id) THEN 
      Get_Obj___(copy_rec_.obj_id, copy_rec_.obj_version, copy_rec_.warranty_id, copy_rec_.warranty_type_id);
   END IF;
   
   Sup_Warranty_Type_API.Remove__(info_, copy_rec_.obj_id, copy_rec_.obj_version, 'DO');
   super(copy_rec_);
   
   IF NOT Sup_Warranty_Type_API.Warranty_Exist(copy_rec_.warranty_id) THEN
      grand_parent_key_.objkey := rec_.parent_objkey;
      grand_parent_rec_ := Get_Record___(grand_parent_key_);
      old_grand_parent_rec_ := grand_parent_rec_;
      grand_parent_rec_.warranty_id := NULL;
      CRUD_Update___(old_grand_parent_rec_, grand_parent_rec_);
   END IF; 
   
END CRUD_Delete___;

--Supplier Warranty Type Get Objid and @Override
--Since the entity is not used in the fragment there is no autogenerated methods to get the objid and objversion
PROCEDURE Get_Obj___(
   objid_            OUT VARCHAR2,
   objversion_       OUT VARCHAR2,
   warranty_id_      IN  NUMBER,
   warranty_type_id_ IN  VARCHAR2)
IS
   row_type_  Sup_Warranty_Type%ROWTYPE;
   
   CURSOR get_supplier_warranty_obj IS
      SELECT *
         FROM  SUP_WARRANTY_TYPE
         WHERE warranty_id = warranty_id_
         AND   warranty_type_id = warranty_type_id_;
BEGIN
   OPEN get_supplier_warranty_obj;
   FETCH get_supplier_warranty_obj INTO row_type_;
   objid_ := row_type_.objid;
   objversion_ := row_type_.objversion;
   CLOSE get_supplier_warranty_obj;
END Get_Obj___;

----Supplier Warranty Type Copy from template
PROCEDURE Copy_Supplier_Warranty_From_Template___ (
   warranty_id_   IN NUMBER,
   template_id_   IN VARCHAR2,
   part_no_       IN VARCHAR2,
   serial_no_     IN VARCHAR2,
   parent_objkey_ IN VARCHAR2)
IS
   CURSOR get_supplier_warranty_type_list IS
   SELECT * 
   FROM ${PROJECTION}SUPPLIER_WARRANTY_TYPE_VIRTUAL_VRT;
   
   parent_rec_ Supplier_Part_Information_Virtual_Rec;
   parent_key_ Supplier_Part_Information_Virtual_Key;
   
   copy_warranty_id_ NUMBER;
BEGIN
   
   parent_key_.objkey := parent_objkey_;
   parent_rec_ := Get_Record___(parent_key_);
   copy_warranty_id_ := warranty_id_;

   Create_Supplier_Warranty_Id___(copy_warranty_id_, part_no_, serial_no_, parent_objkey_);
   
	Sup_Warranty_Type_API.Copy_From_Template(copy_warranty_id_, template_id_);
   
   parent_rec_.warranty_id := copy_warranty_id_;
   
   --Have to use this instead of CRUD DELETE because CRUD DELETE has been used to Delete the values in the entity as well.
   --Here the whole virtual needs to be refreshed as new record so all the records in the virtual are deleted and created again to avoid having duplicate records.
   --Checking if a record already exists or not in CRUD CREATE will have for loop in for loop (performance issue [nxn]).
   FOR rec_ IN get_supplier_warranty_type_list LOOP
      DELETE FROM ${PROJECTION}SUPPLIER_WARRANTY_TYPE_VIRTUAL_VRT WHERE objkey = rec_.objkey;
   END LOOP;
   
   Create_Child_List___(parent_rec_);
   
END Copy_Supplier_Warranty_From_Template___;

----Supplier Warranty Type Copy warranty and create a new warranty Id
PROCEDURE Create_Supplier_Warranty_Id___(
   warranty_id_ IN OUT NUMBER,
   part_no_         IN     VARCHAR2,
   serial_no_       IN     VARCHAR2,
   parent_objkey_   IN     VARCHAR2)
IS
   parent_rec_ Supplier_Part_Information_Virtual_Rec;
   parent_key_ Supplier_Part_Information_Virtual_Key;
   old_parent_rec_ Supplier_Part_Information_Virtual_Rec;

   warranty_state_  VARCHAR2(20);  
   new_warranty_id_ NUMBER;
BEGIN
   parent_key_.objkey := parent_objkey_;
   parent_rec_ := Get_Record___(parent_key_);
   old_parent_rec_ := parent_rec_;
   
   IF warranty_id_ IS NULL THEN
      Sup_Warranty_API.New(new_warranty_id_);
      -- NOT IMPLEMENTED     Objstate is set to Unique
   ELSE
      warranty_state_ := Sup_Warranty_API.Get_Objstate(warranty_id_);
      
      IF warranty_state_ = Sup_Warranty_API.DB_SHARED THEN
         Sup_Warranty_API.Copy(new_warranty_id_, warranty_id_, part_no_, serial_no_);
      END IF;
   END IF;
   
   IF (warranty_id_ IS NULL OR (warranty_id_ != new_warranty_id_)) THEN      
      warranty_id_ := new_warranty_id_;   
      parent_rec_.warranty_id := warranty_id_;
      CRUD_Update___(old_parent_rec_, parent_rec_);
   END IF;  
   
END Create_Supplier_Warranty_Id___;

--Copy Supplier Warramty Condition
FUNCTION Copy_Supplier_Warranty_Condition___(
   parent_row_ IN ${PROJECTION}SUPPLIER_WARRANTY_TYPE_VIRTUAL_VRT%ROWTYPE) RETURN Supplier_Part_Information_Virtual_Rec
IS
   --   GRAND PARENT VALUES
   grand_parent_rec_ Supplier_Part_Information_Virtual_Rec;
   old_grand_parent_rec_ Supplier_Part_Information_Virtual_Rec;
   grand_parent_key_ Supplier_Part_Information_Virtual_Key;
   
   --   PARENT VALUES
   old_parent_rec_ Supplier_Warranty_Type_Virtual_Rec;
   new_parent_rec_ Supplier_Warranty_Type_Virtual_Rec;
   parent_key_      Supplier_Warranty_Type_Virtual_Key;
   
BEGIN
   --   Get Grand Parent Record
   grand_parent_key_.objkey := parent_row_.parent_objkey;
   grand_parent_rec_ := Get_Record___(grand_parent_key_);
   old_grand_parent_rec_ := grand_parent_rec_;
   
   -- Copy Warranty ID
   Create_Supplier_Warranty_Id___(grand_parent_rec_.warranty_id, grand_parent_rec_.part_no, grand_parent_rec_.serial_no, grand_parent_rec_.objkey);
   
   --   Update parent virtual with the new warranty_id
   parent_key_.objkey := parent_row_.objkey;
   old_parent_rec_ := Get_Record___(parent_key_);
   new_parent_rec_ := old_parent_rec_;
   
   new_parent_rec_.warranty_id := grand_parent_rec_.warranty_id;
   CRUD_UPDATE___(old_grand_parent_rec_, grand_parent_rec_);
   CRUD_UPDATE___(old_parent_rec_, new_parent_rec_);
   
   RETURN grand_parent_rec_;
END Copy_Supplier_Warranty_Condition___;

--Supplier Warranty Condition CREATE
@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Supplier_Warranty_Condition_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
   
IS
   grand_parent_rec_ Supplier_Part_Information_Virtual_Rec;
   parent_row_ ${PROJECTION}SUPPLIER_WARRANTY_TYPE_VIRTUAL_VRT%ROWTYPE;
   
   --   Get parent Record
   objkey_   VARCHAR2(50);
   
   CURSOR get_warranty_type_(objkey_ VARCHAR2) IS
   SELECT *
   FROM ${PROJECTION}SUPPLIER_WARRANTY_TYPE_VIRTUAL_VRT
   WHERE objkey = objkey_;
BEGIN
   objkey_ := Client_SYS.Get_Item_Value('PARENT_OBJKEY', attr_);
   --   Get parent record key values
   OPEN get_warranty_type_(objkey_);
   FETCH get_warranty_type_ INTO parent_row_;
   CLOSE get_warranty_type_;
   
   grand_parent_rec_ := Copy_Supplier_Warranty_Condition___(parent_row_);

   -- Add the new warranty to attr
   Client_SYS.Set_Item_Value('WARRANTY_ID', to_char(grand_parent_rec_.warranty_id), attr_);
   
   super(etag_, key_, attr_, info_, action_);
   
END CRUD_Create___;

--Supplier Warranty Condition DELETE
PROCEDURE Delete_Supplier_Warranty_Condition___ (
	key_ IN Supplier_Warranty_Condition_Key)
IS
   copy_key_ Supplier_Warranty_Condition_Key;
   
   etag_   VARCHAR2(32000);
   info_   VARCHAR2(32000);
   objid_      VARCHAR2(32000);
   objversion_ VARCHAR2(32000);
BEGIN
   copy_key_ := key_;
   Get_Objid_Objversion___(objid_, objversion_, copy_key_);
   etag_ := Get_Etag___(objid_, objversion_);
   
   CRUD_Delete___(etag_, copy_key_, info_, 'DO');
   
END Delete_Supplier_Warranty_Condition___;

--Supplier Warranty Condition UPDATE
PROCEDURE Update_Warranty___ (
   key_       IN Supplier_Warranty_Condition_Key,
   min_value_ IN NUMBER,
   max_value_ IN NUMBER)
IS
   copy_key_ Supplier_Warranty_Condition_Key;

   --   CREATE ATTR_
   info_ VARCHAR2(200);
   objid_ VARCHAR2(32000);
   objversion_ VARCHAR2(32000);
   attr_ VARCHAR2(32000);
   etag_ VARCHAR2(32000);
   
BEGIN
   copy_key_ := key_;   
   Get_Objid_Objversion___(objid_, objversion_, copy_key_);
   etag_ := Get_Etag___(objid_, objversion_);
   
   --   Build ATTR
   IF min_value_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('MIN_VALUE', min_value_, attr_);
   END IF;
   IF max_value_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('MAX_VALUE', max_value_, attr_);
   END IF;
   
   CRUD_Update___(etag_, copy_key_, attr_, info_, 'DO');
END Update_Warranty___;