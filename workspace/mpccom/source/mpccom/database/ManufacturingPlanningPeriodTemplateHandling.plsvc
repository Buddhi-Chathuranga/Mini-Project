-----------------------------------------------------------------------------
--
--  Logical unit: ManufacturingPlanningPeriodTemplateHandling
--  Component:    MPCCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2019-07-01  SBalLK  SCUXXW4-22329, Added Check_Default_Template_Exist_For_Site___() and removed Check_Template_One_Exist___() method to validate defualt template for the site.
--  2018-11-01  SBalLK  Issue SCUXXW4-7595, Added Check_Template_Exist___(), Get_Recalculation_Date___(), Start_Copy_Template___() method.
--  2018-10-29  ErRalk  Issue SCUXXW4-7650, Added Get_Delete_From_Period___(),Delete_Periods___ methods.
--  2018-10-29  SBalLK  Issue SCUXXW4-7610, Added Get_Max_Period_No___(), Create_Periods___() methods.
--  2018-10-26  SBalLK  Issue SCUXXW4-7560, Created.
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___ (
   etag_   IN  OUT VARCHAR2,
   key_    IN  OUT Period_Template_Detail_Key,
   attr_   IN  OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   contract_      VARCHAR2(5);
   template_id_   NUMBER;
   period_no_     NUMBER;   
BEGIN
   contract_      := Client_sys.Get_Item_Value('CONTRACT', attr_);
   template_id_   := Client_sys.Get_Item_Value_To_Number('TEMPLATE_ID', attr_, lu_name_);
   period_no_     := Period_Template_Detail_API.Get_Max_Period_No(contract_, template_id_ ) + 1 ;
   Client_SYS.Add_To_Attr('PERIOD_NO', period_no_, attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;

FUNCTION Check_Template_Exist___(
   contract_    IN VARCHAR2,
   template_id_ IN NUMBER )  RETURN NUMBER
IS   
BEGIN
   RETURN Period_Template_API.Check_Exist(contract_, template_id_);
END Check_Template_Exist___;

FUNCTION Get_Recalculation_Date___(
   contract_    IN VARCHAR2,
   template_id_ IN NUMBER )  RETURN DATE
IS   
BEGIN
   RETURN Period_Template_API.Get_Recalculation_Date (contract_, template_id_);
END Get_Recalculation_Date___;

FUNCTION Get_Site_Date___(
   contract_ IN VARCHAR2 )  RETURN DATE
IS
BEGIN
   RETURN Site_API.Get_Site_Date(contract_);
END Get_Site_Date___;

FUNCTION Get_Max_Period_No___(
   contract_    IN VARCHAR2,
   template_id_ IN NUMBER )  RETURN NUMBER
IS
BEGIN
   RETURN Period_Template_Detail_API.Get_Max_Period_No(contract_, template_id_);
END Get_Max_Period_No___;

FUNCTION Get_Delete_From_Period___(
   contract_    IN VARCHAR2,
   template_id_ IN NUMBER )RETURN NUMBER
IS 
BEGIN
   RETURN Period_Template_Detail_API.Get_Max_Period_No(contract_, template_id_);
END Get_Delete_From_Period___;

FUNCTION Check_Default_Template_Exist_For_Site___ (
	contract_ IN VARCHAR2) RETURN Template_One_Check_Structure_Rec
IS
   template_id_      NUMBER := 1;
   template_one_rec_ Template_One_Check_Structure_Rec;
BEGIN
	template_one_rec_.template_one         := Period_Template_API.Check_Exist(contract_, template_id_);
   template_one_rec_.template_one_Periods := Period_Template_Detail_API.Check_Exist_Any_Period(contract_, template_id_);  
   RETURN template_one_rec_;
END Check_Default_Template_Exist_For_Site___;

PROCEDURE Recalculate_Template___ (
	key_ IN Period_Template_Key,
	start_date_ IN DATE,
	calendar_id_ IN VARCHAR2)
IS
BEGIN
	Period_Template_Manager_API.Recalculate_Template(key_.contract, key_.template_id, start_date_, calendar_id_);
END Recalculate_Template___;

PROCEDURE Recalculate_Site_Template___ (
	key_ IN Period_Template_Key,
	start_date_ IN DATE)
IS
BEGIN
	Period_Template_Manager_API.Recalculate_Site_Templates(key_.contract, start_date_);
END Recalculate_Site_Template___;

PROCEDURE Create_Periods___ (
	key_ IN Period_Template_Key,
	period_unit_ IN VARCHAR2,
	start_period_ IN NUMBER,
	no_of_period_ IN NUMBER,
	period_length_ IN NUMBER)
IS
BEGIN
	Period_Template_Manager_API.Create_Periods( key_.contract,
                                               key_.template_id,
                                               Plan_Period_Unit_API.Decode(period_unit_),
                                               start_period_,
                                               no_of_period_,
                                               period_length_ );
END Create_Periods___;

PROCEDURE Delete_Periods___ (
	key_ IN Period_Template_Key,
	delete_from_period_ IN NUMBER,
	delete_to_period_ IN NUMBER)
IS
BEGIN
	Period_Template_Manager_API.Delete_Periods(key_.contract, key_.template_id, delete_from_period_, delete_to_period_);
END Delete_Periods___;

PROCEDURE Start_Copy_Template___ (
   source_contract_         IN VARCHAR2,
   source_template_id_      IN NUMBER,
   contract_                IN VARCHAR2,
   template_id_             IN NUMBER,
   template_description_    IN VARCHAR2,
   last_recalculation_date_ IN DATE) 
IS   
BEGIN
   Period_Template_Initial_Check___(source_contract_, source_template_id_);
   Period_Template_Manager_API.Copy_Template(source_contract_,
                                             source_template_id_,
                                             contract_,
                                             template_id_,
                                             template_description_,
                                             last_recalculation_date_);
END Start_Copy_Template___;
