---------------------------------------------------------------------------------------------
--  Module : MPCCOM
--
--  Purpose: Upgrade database objects for IFS/Mpccom
--           from version 15.0.0 to 21.1.0
--
--  File   : 2110.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  210517   SBalLK  SC21R2-2331, Modified "Repairing basic data translation for DiscreteCharacValue Lu" code block to ignore already repaired data through bug 154340.
--  201202   RasDlk  SCZ-11538, Adding column REL_MTRL_PLANNING to table SITE_TO_SITE_RESERVE_SETUP_TAB.
--  201124   NiAslk  SC2020R1-11432, Modified file name to reflect new version name IFS Cloud 21.1.0.
--  201103   LEPESE  SCZ-12186, switched off the delivery_overhead_flag in accounting_event_tab for event_code RETPODSINT.
--  201103           Updated the delivery_overhead_flag in accounting_event_tab_on event_code RETPODIRSH to mirror PODIRSH setting.
--  201009   WaSalk  SC2020R1-10520,Decreased length of CONTRACT_CLAUSE in MPCCOM_PHRASE_TAB.
--  201009   LEPESE  SC2020R1-10519, Reduced the length of columns APPROVAL_REQUIRED, MANUAL_CONN_ALLOWED,
--  201009           MANUAL_DISCONN_ALLOWED and SHOW_IN_RECEIPT to VARCHAR2(5) in CONTRACT_CLAUSE_TYPE_TAB.
--  200923   BudKlk  SC2020R1-9427, Merged CDB files into UPG.
--  200909   Dinklk  MF2020R1-7147, Added POSTING_GROUP_ID to PER_OH_ADJUSTMENT_HISTORY_TAB. Made COST_SOURCE_ID non mandatory.
--  200728   cecobr  gelr:brazilian_specific_attributes, Added table BUSINESS_TRANSACTION_CODE_TAB
--  200907   ambslk  MF2020R1-7053, Added NOTE_TEXT to MPCCOM_PHRASE_REVISION_TAB.
--  200728   JaThlk  SC2020R1-8906, Created a new sequence CONNECTION_RULE_ID_SEQ.
--  200623   ambslk  MF2020R1-5605, Added APPROVAL_STATUS to MPCCOM_PHRASE_REVISION_TAB.
--  200602   lepese  SC2021R1-291, inserting new posting types for Work Task events.
--  200512   ambslk  MFSPRING20-752, Added CONTRACT_CLAUSE_TYPE column to MPCCOM_PHRASE_TAB.
--  200429   MuShlk  MF2020R1-5532, Incresed the length of columns APPROVAL_REQUIRED, MANUAL_CONN_ALLOWED, MANUAL_DISCONN_ALLOWED and SHOW_IN_RECEIPT in CONTRACT_CLAUSE_TYPE_TAB.
--  200428   MuShlk  MF2020R1-5528, Changed the length of the column CONTRACT_CLAUSE to VARCAHR2(20) in MPCCOM_PHRASE_TAB.
--  200408   JaThlk  SC2020R1-1903, Merged CDBs into UPG.
--  200131   ambslk  MFSPRING20-752, Added new table MPCCOM_PHRASE_REVISION_TAB and REVISION_NO to MPCCOM_PHRASE_TEXT_TAB.
--  200124   MuShlk  MFSPRING20-906, Added new column CONTRACT_CLAUSE to MPCCOM_PHRASE_TAB.
--  200124   MuShlk  MFSPRING20-944, Replaced CLAUSE_TYPE with CONTRACT_CLAUSE_TYPE.
--  200108   MuShlk  MFSPRING20-650, Added new table PHRASE_CONNECTION_RULE_TAB and constraints.
--  200102   MuShlk  MFSPRING20-713, Added new table CLAUSE_TYPE_TAB and constraints.
--  191216   Nuudlk  Adding ACQUISITION_ORIGIN_TAB
--  191216   fiallk  Adding STATISTICAL_CODE_TAB
--  191216   Utbalk  Added BUSINESS_OPERATION_TAB
--  191121   AsHelk  Created
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_1');
PROMPT START upgrading WITH 2110.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_2');
PROMPT Creating sequence CONNECTION_RULE_ID_SEQ.
DECLARE
   sequence_name_ VARCHAR2(30) := 'CONNECTION_RULE_ID_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'MINVALUE 1 START WITH 1 INCREMENT BY 1 NOCACHE ORDER', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_3');
PROMPT Creating sequence MPC_SIM_ACCOUNTING_ID

BEGIN
      Database_SYS.Create_Sequence('MPC_SIM_ACCOUNTING_ID', 'MINVALUE -9999999999999999999 INCREMENT BY -1 START WITH -1 CYCLE NOCACHE', TRUE);
END;
/

---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ----------------------------
---------------------------------------------------------------------------------------------

-- ***** Business_Operation_Tab Start *****

-- gelr: br_business_operation, begin
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_4');
PROMPT Adding table BUSINESS_OPERATION_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'BUSINESS_OPERATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BUSINESS_OPERATION', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_5');
PROMPT Adding PK index to the table BUSINESS_OPERATION_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'BUSINESS_OPERATION_PK';
   table_name_ VARCHAR2(30) := 'BUSINESS_OPERATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'BUSINESS_OPERATION');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_6');
PROMPT Adding RK index to the table BUSINESS_OPERATION_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'BUSINESS_OPERATION_RK';
   table_name_ VARCHAR2(30) := 'BUSINESS_OPERATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- gelr: br_business_operation, end

-- ***** Business_Operation_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Statistical_Code_Tab Start *****

-- gelr: good_service_statistical_code, begin
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_7');
PROMPT Adding table STATISTICAL_CODE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'STATISTICAL_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STATISTICAL_CODE', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_8');
PROMPT Adding PK index to the table STATISTICAL_CODE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'STATISTICAL_CODE_PK';
   table_name_ VARCHAR2(30) := 'STATISTICAL_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'STATISTICAL_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_9');
PROMPT Adding RK index to the table STATISTICAL_CODE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'STATISTICAL_CODE_RK';
   table_name_ VARCHAR2(30) := 'STATISTICAL_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- gelr: good_service_statistical_code, end

-- ***** Statistical_Code_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Acquisition_Origin_Tab Start *****

-- gelr:acquisition_origin, begin
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_10');
PROMPT Adding TABLE ACQUISITION_ORIGIN_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'ACQUISITION_ORIGIN_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_ORIGIN', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_11');
PROMPT Adding PK index to the table ACQUISITION_ORIGIN_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'ACQUISITION_ORIGIN_PK';
   table_name_ VARCHAR2(30) := 'ACQUISITION_ORIGIN_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_ORIGIN');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_12');
PROMPT Adding RK index to the table ACQUISITION_ORIGIN_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'ACQUISITION_ORIGIN_RK';
   table_name_ VARCHAR2(30) := 'ACQUISITION_ORIGIN_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- gelr:acquisition_origin, end

-- ***** Acquisition_Origin_Tab End *****


-- ***** Business_Transaction_Code_Tab Start *****
-- gelr:brazilian_specific_attributes, begin
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_13');
PROMPT Adding table BUSINESS_TRANSACTION_CODE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'BUSINESS_TRANSACTION_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BUSINESS_TRANSACTION_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DIRECTION', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRESENCE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_14');
PROMPT Adding primary key index to the table BUSINESS_TRANSACTION_CODE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'BUSINESS_TRANSACTION_CODE_PK';
   table_name_ VARCHAR2(30) := 'BUSINESS_TRANSACTION_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'BUSINESS_TRANSACTION_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_15');
PROMPT Adding rowkey index to the table BUSINESS_TRANSACTION_CODE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'BUSINESS_TRANSACTION_CODE_RK';
   table_name_ VARCHAR2(30) := 'BUSINESS_TRANSACTION_CODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- gelr:brazilian_specific_attributes, end
-- ***** Business_Transaction_Code_Tab End *****


---------------------------------------------------------------------------------------------
-- ***** CONTRACT_CLAUSE_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_16');
PROMPT Creating CONTRACT_CLAUSE_TYPE_TAB and Constraints.

DECLARE
   table_name_ VARCHAR2(30) := 'CONTRACT_CLAUSE_TYPE_TAB';
   index_name_ VARCHAR2(30) := 'CONTRACT_CLAUSE_TYPE_PK';
   index_rk_   VARCHAR2(30) := 'CONTRACT_CLAUSE_TYPE_RK';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT_CLAUSE_TYPE',   'VARCHAR2(20)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',            'VARCHAR2(200)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'APPROVAL_REQUIRED',      'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'APPROVAL_PROFILE_ID',    'VARCHAR2(10)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_CONN_ALLOWED',    'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_DISCONN_ALLOWED', 'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'SHOW_IN_RECEIPT',        'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'NOTE_TEXT',              'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',             'DATE',           'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                 'VARCHAR2(50)',   'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE',               'VARCHAR2(20)',   'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT_CLAUSE_TYPE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_rk_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** CONTRACT_CLAUSE_TYPE_TAB End *****

---------------------------------------------------------------------------------------------
-- ***** PHRASE_CONNECTION_RULE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_17');
PROMPT Creating PHRASE_CONNECTION_RULE_TAB and Constraints.
DECLARE
   table_name_ VARCHAR2(30) := 'PHRASE_CONNECTION_RULE_TAB';
   index_name_ VARCHAR2(30) := 'PHRASE_CONNECTION_RULE_PK';
   index_rk_   VARCHAR2(30) := 'PHRASE_CONNECTION_RULE_RK';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONNECTION_RULE_ID',  'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'PHRASE_ID',           'VARCHAR2(10)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'PHRASE_REVISION_NO',  'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',            'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',             'VARCHAR2(25)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'SECOND_COMMODITY',    'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'VENDOR_NO',           'VARCHAR2(20)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID',          'VARCHAR2(10)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUB_PROJECT_ID',      'VARCHAR2(10)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_NO',         'VARCHAR2(10)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOTE_TEXT',           'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',          'DATE',           'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',              'VARCHAR2(50)',   'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE',            'VARCHAR2(20)',   'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);   Database_SYS.Reset_Column_Table(columns_);
   
   Database_SYS.Set_Table_Column(columns_, 'CONNECTION_RULE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_rk_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
---- ***** PHRASE_CONNECTION_RULE_TAB End *****

-- ***** MPCCOM_PHRASE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_18');
PROMPT Adding NEW COLUMN CONTRACT_CLAUSE AND CONTRACT_CLAUSE_TYPE TO MPCCOM_PHRASE_TAB

DECLARE
   columns_ Database_Sys.ColumnTabType;
   table_   VARCHAR2(30) := 'MPCCOM_PHRASE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT_CLAUSE', 'VARCHAR2(5)', 'N', '''FALSE''', NULL, 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT_CLAUSE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_, columns_, TRUE);
END;
/

-- ***** MPCCOM_PHRASE_TAB End *****

---------------------------------------------------------------------------------------------
-- ***** MPCCOM_PHRASE_REVISION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_19');
PROMPT Create MPCCOM_PHRASE_REVISION_TAB and constraints.

DECLARE
   table_name_ VARCHAR2(30) := 'MPCCOM_PHRASE_REVISION_TAB';
   index_name_ VARCHAR2(30) := 'MPCCOM_PHRASE_REVISION_PK';
   index_rk_   VARCHAR2(30) := 'MPCCOM_PHRASE_REVISION_RK';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PHRASE_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REVISION_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REVISION_DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PHASE_IN_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PHASE_OUT_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'APPROVAL_STATUS', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOTE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PHRASE_ID');
   Database_SYS.Set_Table_Column(columns_, 'REVISION_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_rk_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** MPCCOM_PHRASE_REVISION_TAB End *****
  
-- ***** MPCCOM_PHRASE_TEXT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_20');
PROMPT Adding new COLUMN REVISION_NO TO MPCCOM_PHRASE_TEXT_TAB 

BEGIN    
   DECLARE
      columns_       Database_SYS.ColumnTabType;
      table_name_    VARCHAR2(30) := 'MPCCOM_PHRASE_TEXT_TAB';
   BEGIN
      Database_SYS.Reset_Column_Table(columns_);      
      Database_SYS.Set_Table_Column(columns_, 'REVISION_NO'   , 'NUMBER'      , 'N', 1      , NULL, 'N'); 
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   END;      
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_21');
PROMPT Recreate primary key constraint MPCCOM_PHRASE_TEXT_PK with new column REVISION_NO

DECLARE
   table_name_  VARCHAR2(32) := 'MPCCOM_PHRASE_TEXT_TAB';
   pk_name_     VARCHAR2(32) := 'MPCCOM_PHRASE_TEXT_PK';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column (columns_ , 'PHRASE_ID');
   Database_SYS.Set_Table_Column (columns_ , 'REVISION_NO');
   Database_SYS.Set_Table_Column (columns_ , 'LANGUAGE_CODE');
   Database_SYS.Create_Constraint(table_name_, pk_name_ , columns_, 'P', '&IFSAPP_INDEX', NULL , TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_22');
PROMPT Create  record in MPCCOM_PHRASE_REVISION_TAB with REVISION_NO = 1 for all records in MPCCOM_PHRASE_TAB
DECLARE
   phrase_id_     MPCCOM_PHRASE_REVISION_TAB.phrase_id%TYPE;
   
   CURSOR get_phrase_id IS
      SELECT phrase_id 
      FROM MPCCOM_PHRASE_TAB 
      WHERE phrase_id NOT IN (SELECT phrase_id FROM MPCCOM_PHRASE_REVISION_TAB);
   
BEGIN
   FOR rec_ IN get_phrase_id LOOP
      phrase_id_ := rec_.phrase_id;
      INSERT INTO MPCCOM_PHRASE_REVISION_TAB(PHRASE_ID,REVISION_NO,REVISION_DESCRIPTION,PHASE_IN_DATE,PHASE_OUT_DATE,ROWVERSION)
      VALUES (phrase_id_, '1', NULL, SYSDATE, NULL, SYSDATE);
   END LOOP;
COMMIT;
END;
/   


-- ***** MPCCOM_PHRASE_TEXT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** STATISTIC_PERIOD_TAB Start ***** 
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_23');
PROMPT Creating unique constraint on end_date column.

DECLARE
   table_name_        VARCHAR2(30) := 'STATISTIC_PERIOD_TAB';
   index_name_        VARCHAR2(30) := 'STATISTIC_PERIOD_UX1';
   columns_           Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table (columns_);
   Database_SYS.Set_Table_Column (columns_, 'END_DATE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** STATISTIC_PERIOD_TAB End *****

--------------------------------------------------------------------------------------------- 

-- ***** ACC_EVENT_POSTING_TYPE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_24');
PROMPT Inserting posting types for posting events BALINVROU+ and BALINVROU-

BEGIN
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB( EVENT_CODE,
                                              STR_CODE,
                                              DEBIT_CREDIT,
                                              BOOKING,
                                              PRE_ACCOUNTING_FLAG,
                                              PROJECT_ACCOUNTING_FLAG,
                                              ROWVERSION ) 
                                      VALUES( 'BALINVROU+',
                                              'M19',
                                              'D',
                                               1,
                                              'Y',
                                              'INCLUDE PROJECT PRE POSTING',
                                               SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB( EVENT_CODE,
                                              STR_CODE,
                                              DEBIT_CREDIT,
                                              BOOKING,
                                              PRE_ACCOUNTING_FLAG,
                                              PROJECT_ACCOUNTING_FLAG,
                                              ROWVERSION ) 
                                      VALUES( 'BALINVROU+',
                                              'M10',
                                              'C',
                                              1,
                                              'N',
                                              'EXCLUDE PROJECT PRE POSTING',
                                              SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB( EVENT_CODE,
                                              STR_CODE,
                                              DEBIT_CREDIT,
                                              BOOKING,
                                              PRE_ACCOUNTING_FLAG,
                                              PROJECT_ACCOUNTING_FLAG,
                                              ROWVERSION ) 
                                      VALUES( 'BALINVROU-',
                                              'M10',
                                              'D',
                                              1,
                                              'N',
                                              'EXCLUDE PROJECT PRE POSTING',
                                              SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB( EVENT_CODE,
                                              STR_CODE,
                                              DEBIT_CREDIT,
                                              BOOKING,
                                              PRE_ACCOUNTING_FLAG,
                                              PROJECT_ACCOUNTING_FLAG,
                                              ROWVERSION ) 
                                      VALUES( 'BALINVROU-',
                                              'M20',
                                              'C',
                                              1,
                                              'Y',
                                              'INCLUDE PROJECT PRE POSTING',
                                              SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_25');
PROMPT Inserting posting types FOR posting EVENTS SHIPODWHS-, SHIPODWHS+, SHIPODSIT- AND SHIPODSIT+

BEGIN
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODWHS-','M3','D',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODWHS-','M1','C',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODWHS+','M1','D',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODWHS+','M3','C',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODSIT-','M4','D',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODSIT-','M1','C',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODSIT+','M1','D',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('SHIPODSIT+','M3','C',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_26');
PROMPT Updating PROJECT_ACCOUNTING_FLAG of event WOREPREC to be same as WOREPISS.

BEGIN      
   UPDATE acc_event_posting_type_tab
      SET project_accounting_flag   = 'SITUATIONAL PROJECT PRE POSTING'
    WHERE event_code                = 'WOREPREC' 
      AND str_code                  = 'M1'
      AND debit_credit              = 'D' 
      AND booking                   = 1 
      AND project_accounting_flag   = 'EXCLUDE PROJECT PRE POSTING';

   UPDATE acc_event_posting_type_tab
      SET project_accounting_flag   = 'INCLUDE PROJECT PRE POSTING'
    WHERE event_code                = 'WOREPREC' 
      AND str_code                  = 'M208'
      AND debit_credit              = 'C' 
      AND booking                   = 1 
      AND project_accounting_flag   = 'EXCLUDE PROJECT PRE POSTING';

   COMMIT;
END ;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_27');
PROMPT Updating PROJECT_ACCOUNTING_FLAG of event SHIPDIR to be same as SHIPTRAN.

BEGIN      
   UPDATE acc_event_posting_type_tab
      SET project_accounting_flag   = 'SITUATIONAL PROJECT PRE POSTING'
    WHERE event_code                = 'SHIPDIR' 
      AND str_code                  = 'M1'
      AND debit_credit              = 'C' 
      AND booking                   = 1 
      AND project_accounting_flag   = 'EXCLUDE PROJECT PRE POSTING';      
   COMMIT;
END ;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_28');
PROMPT Inserting posting types for missing posting EVENTS. 
PROMPT Replaced posting type M3 with M191 for bussiness event SERREN- and SERREN+.  
BEGIN
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('LOT-IN','M1','D',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('LOT-IN','M3','C',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('LOT-OUT','M3','D',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('LOT-OUT','M1','C',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('BALINVROU+','M19','D',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('BALINVROU+','M10','C',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('BALINVROU-','M10','D',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('BALINVROU-','M20','C',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('RINTORDTRX','M3','D',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES('RINTORDTRX','M4','C',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   -- Consignment
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('CO-LOT-IN','M3','C',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   -- Consignment
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('CO-LOT-IN','M60','D',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   -- Consignment
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('CO-LOT-OUT','M3','D',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;

   -- Consignment
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('CO-LOT-OUT','M60','C',1,'N','INCLUDE PROJECT PRE POSTING',SYSDATE);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;      

   BEGIN
      UPDATE acc_event_posting_type_tab
         SET str_code     = 'M191'
       WHERE event_code   = 'SERREN-' 
         AND str_code     = 'M3'
         AND debit_credit = 'D' 
         AND booking      = 1 ;
   EXCEPTION
      WHEN dup_val_on_index THEN
         DELETE
            FROM acc_event_posting_type_tab
            WHERE event_code = 'SERREN-'
            AND str_code     = 'M191'
            AND debit_credit = 'D' 
            AND booking      = 1 ;

         UPDATE acc_event_posting_type_tab
            SET str_code     = 'M191'
          WHERE event_code   = 'SERREN-' 
            AND str_code     = 'M3'
            AND debit_credit = 'D' 
            AND booking      = 1 ;
   END;     

   BEGIN
      UPDATE acc_event_posting_type_tab
         SET str_code     = 'M191'
       WHERE event_code   = 'SERREN+' 
         AND str_code     = 'M3'
         AND debit_credit = 'C' 
         AND booking      = 1 ;
   EXCEPTION
      WHEN dup_val_on_index THEN
         DELETE
            FROM acc_event_posting_type_tab
            WHERE event_code = 'SERREN+' 
            AND str_code     = 'M191'
            AND debit_credit = 'C' 
            AND booking      = 1 ;

         UPDATE acc_event_posting_type_tab
            SET str_code     = 'M191'
          WHERE event_code   = 'SERREN+' 
            AND str_code     = 'M3'
            AND debit_credit = 'C' 
            AND booking      = 1 ;
   END;

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_29');
PROMPT Inserting new posting types for Work Task events...

BEGIN   
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTISS','M50','D',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTISS','M1','C',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTRECEIPT','M144','C',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTRECEIPT','M1','D',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTREPISS','M207','D',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTREPISS','M1','C',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTREPREC','M208','C',1,'Y','EXCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTREPREC','M1','D',1,'N','EXCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('CO-WTISS','M60','C',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('CO-WTISS','M50','D',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTRENT+','M261','D',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTRENT+','M262','C',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTRENT-','M261','C',1,'Y','INCLUDE PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   BEGIN
      INSERT INTO ACC_EVENT_POSTING_TYPE_TAB(EVENT_CODE,STR_CODE,DEBIT_CREDIT,BOOKING,PRE_ACCOUNTING_FLAG,PROJECT_ACCOUNTING_FLAG,ROWVERSION)
      VALUES ('WTRENT-','M262','D',1,'N','SITUATIONAL PROJECT PRE POSTING',SYSDATE);
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_30');
PROMPT Update PROJECT_ACCOUNTING_FLAG of event_code OOREC from INCLUDE PROJECT PRE POSTING to SITUATIONAL PROJECT PRE POSTING for posting type M1

BEGIN
   UPDATE ACC_EVENT_POSTING_TYPE_TAB
      SET PROJECT_ACCOUNTING_FLAG = 'SITUATIONAL PROJECT PRE POSTING'
    WHERE EVENT_CODE = 'OOREC'
      AND STR_CODE = 'M1'
      AND DEBIT_CREDIT = 'D'
      AND BOOKING = '1'
      AND PROJECT_ACCOUNTING_FLAG = 'INCLUDE PROJECT PRE POSTING';
   
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_31');
PROMPT Updating PROJECT_ACCOUNTING_FLAG TO 'SITUATIONAL PROJECT PRE POSTING' on 'PD-SHIP' event code

BEGIN
   UPDATE acc_event_posting_type_tab
      SET project_accounting_flag   = 'SITUATIONAL PROJECT PRE POSTING'
    WHERE event_code                = 'PD-SHIP' 
      AND str_code                  = 'M1'
      AND debit_credit              = 'C' 
      AND booking                   = 1 
      AND project_accounting_flag   = 'EXCLUDE PROJECT PRE POSTING';      

   COMMIT;

END ;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_32');
PROMPT Modify pre_accounting_flag to N and project_accounting_flag to Exclude project prepostings for posting types M10 Debit, M18 Credit and M277 both Debit AND Credit in APINVOICE.
BEGIN
          
   UPDATE acc_event_posting_type_tab
   SET    pre_accounting_flag = 'N',
          project_accounting_flag = 'EXCLUDE PROJECT PRE POSTING'
   WHERE  event_code          = 'APINVOICE'
     AND  str_code            = 'M10'
     AND  debit_credit        = 'D'
     AND  booking             = 32;

   UPDATE acc_event_posting_type_tab
   SET    pre_accounting_flag = 'N',
          project_accounting_flag = 'EXCLUDE PROJECT PRE POSTING'
   WHERE  event_code          = 'APINVOICE'
   AND    str_code            = 'M18'
   AND    debit_credit        = 'C'
   AND    booking             = 33;

   UPDATE acc_event_posting_type_tab
   SET    pre_accounting_flag = 'N',
          project_accounting_flag = 'EXCLUDE PROJECT PRE POSTING'
   WHERE  event_code          = 'APINVOICE'
   AND    str_code            = 'M277'
   AND    debit_credit        = 'D'
   AND    booking             = 30;

   UPDATE acc_event_posting_type_tab
   SET    pre_accounting_flag = 'N',
          project_accounting_flag = 'EXCLUDE PROJECT PRE POSTING'
   WHERE  event_code          = 'APINVOICE'
   AND    str_code            = 'M277'
   AND    debit_credit        = 'C'
   AND    booking             = 31;

   COMMIT;
END;
/

-- ***** ACC_EVENT_POSTING_TYPE_TAB End *****

--------------------------------------------------------------------------------------------- 

-- ***** COUNTRY_NOTC_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_33');
PROMPT Removing Spanish entries from the country_notc_tab.  

BEGIN
   DELETE
   FROM country_notc_tab
   WHERE country_code = 'ES';
      
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_34');
PROMPT Removing Portugal entries from the country_notc_tab.  

BEGIN
   DELETE
      FROM country_notc_tab
      WHERE country_code = 'PT'
      AND country_notc IN ('11', '12', '13', '14', '15', '19', '21', '22', '23', '24', '29', '30', '31', '32', '33', '34', '40', '41', '42', '50', '51', '52', '60', '70', '80', '90', '91', '99');

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_35');
PROMPT Removing Czech entries from the country_notc_tab.  

BEGIN
   DELETE
      FROM country_notc_tab
      WHERE country_code = 'CZ'
      AND country_notc IN ('1', '2', '3', '40', '50', '6', '7', '8', '9');

   COMMIT;
      
END;
/
-- ***** COUNTRY_NOTC_TAB End *****

--------------------------------------------------------------------------------------------- 

-- ***** COMPANY_DISTRIBUTION_INFO_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_36');
PROMPT Increasing the length of the column SSCC_COMPANY_PREFIX of COMPANY_DISTRIBUTION_INFO_TAB.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SSCC_COMPANY_PREFIX', 'VARCHAR2(12)');
   Database_SYS.Alter_Table_Column('COMPANY_DISTRIBUTION_INFO_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_37');
PROMPT Adding column INTERCHANGE_AGREEMENT_ID to table COMPANY_DISTRIBUTION_INFO_TAB.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('INTERCHANGE_AGREEMENT_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('COMPANY_DISTRIBUTION_INFO_TAB', 'A', column_, TRUE);
END;
/
-- ***** COMPANY_DISTRIBUTION_INFO_TAB End *****
 
--------------------------------------------------------------------------------------------- 
 
-- ***** PRE_ACCOUNTING_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_38');
PROMPT Adding a nullable COLUMN COMPANY TO PRE_ACCOUNTING_TAB.

DECLARE
   table_name_  VARCHAR2(30) := 'PRE_ACCOUNTING_TAB';
   column_name_ VARCHAR2(30) := 'COMPANY';
BEGIN
   IF (NOT Database_SYS.Column_Exist(table_name_, column_name_)) THEN
      DECLARE
         column_     Database_SYS.ColRec;
      BEGIN
         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values(column_name_, 'VARCHAR2(20)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      END;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_39');
PROMPT Adding a nullable COLUMN TOTAL_AMOUNT TO PRE_ACCOUNTING_TAB.

DECLARE
   table_name_  VARCHAR2(30) := 'PRE_ACCOUNTING_TAB';
   column_name_ VARCHAR2(30) := 'TOTAL_AMOUNT';
BEGIN
   IF (NOT Database_SYS.Column_Exist(table_name_, column_name_)) THEN
      DECLARE
         column_     Database_SYS.ColRec;
      BEGIN
         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values(column_name_, 'NUMBER', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      END;
   END IF;  
END;
/

-- ***** PRE_ACCOUNTING_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** MPCCOM_SYSTEM_PARAMETER_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_40');
PROMPT Adding PARAMETER_VALUE_BLOB to MPCCOM_SYSTEM_PARAMETER_TAB

DECLARE  
   table_name_ VARCHAR2(30) := 'MPCCOM_SYSTEM_PARAMETER_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   column_ := Installation_SYS.Set_Column_Values('PARAMETER_VALUE_BLOB', 'BLOB', 'Y', NULL, 'LOB (PARAMETER_VALUE_BLOB) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Installation_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/
-- ***** MPCCOM_SYSTEM_PARAMETER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** LANGUAGE_CODE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_41');
PROMPT Inserting Country Code FOR Latvia.

DECLARE
BEGIN
   BEGIN
      INSERT INTO language_code_tab ( lang_code,
                                      description,
                                      lang_code_rfc3066,
                                      nls_language,
                                      nls_territory,
                                      status,
                                      installed,
                                      enabled_for_login,
                                      dictionary_update,
                                      rowversion )
                             VALUES ( 'lv',
                                      'Latvian',
                                      'lv-LV',
                                      'LATVIAN',
                                      'LATVIA',
                                      'P',
                                      'FALSE',
                                      'TRUE',
                                      SYSDATE,
                                      SYSDATE );
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         NULL;
   END;

   COMMIT;
END;
/
-- ***** LANGUAGE_CODE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PER_OH_ADJUSTMENT_HISTORY_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_42');
PROMPT Adding NEW COLUMN POSTING_GROUP_ID TO PER_OH_ADJUSTMENT_HISTORY_TAB AND Modified COLUMN COST_SOURCE_ID AS Nullable

DECLARE
   table_      VARCHAR2(30) := 'PER_OH_ADJUSTMENT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COST_SOURCE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'POSTING_GROUP_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_, columns_, TRUE);
END;
/

-- ***** PER_OH_ADJUSTMENT_HISTORY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SITE_TO_SITE_RESERVE_SETUP_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_43');
PROMPT Adding column REL_MTRL_PLANNING to table SITE_TO_SITE_RESERVE_SETUP_TAB.
PROMPT IF COLUMN exist increase THE length TO 28.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN   
   IF (Database_SYS.Column_Exist('SITE_TO_SITE_RESERVE_SETUP_TAB', 'REL_MTRL_PLANNING')) THEN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('REL_MTRL_PLANNING', 'VARCHAR2(28)', 'N'); 
      Database_SYS.Alter_Table_Column('SITE_TO_SITE_RESERVE_SETUP_TAB', 'M', column_, TRUE);    
   ELSE         
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('REL_MTRL_PLANNING', 'VARCHAR2(28)', 'N', '''VISIBLE_PLANNED''', keep_default_ => 'N'); 
      Database_SYS.Alter_Table_Column('SITE_TO_SITE_RESERVE_SETUP_TAB', 'A', column_, TRUE);         
   END IF;
   
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_44');
PROMPT IF COLUMN exist UPDATE THE data TO new VALUES.
DECLARE
   stmt_       VARCHAR2(2000);
BEGIN   
   IF (Database_SYS.Column_Exist('SITE_TO_SITE_RESERVE_SETUP_TAB', 'REL_MTRL_PLANNING')) THEN
      stmt_ := '  UPDATE site_to_site_reserve_setup_tab
                     SET rel_mtrl_planning = CASE rel_mtrl_planning
                                                WHEN ''TRUE'' THEN ''VISIBLE_PLANNED''
                                                ELSE ''VISIBLE_RELEASED''
                                             END
                     WHERE rel_mtrl_planning IN (''TRUE'', ''FALSE'')';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

-- ***** SITE_TO_SITE_RESERVE_SETUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** LANGUAGE_SYS_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_45');
PROMPT Repairing basic data translation for DiscreteCharacValue Lu data.

DECLARE
   CURSOR get_translation_values IS
      SELECT SUBSTR(path, 28) characteristic_value, lang_code, text
      FROM   language_sys_tab
      WHERE  module = 'MPCCOM' 
      AND    main_type = 'LU'
      AND    path LIKE 'DiscreteCharacValue_MPCCOM.%'
      AND    attribute = 'Text'
      AND    INSTR(path, '~') = 0;
   
   CURSOR check_valid (char_value_ IN VARCHAR2)IS 
      SELECT characteristic_code
      FROM   discrete_charac_value_tab
      WHERE  characteristic_value = char_value_;

   TYPE Translation_Tab IS TABLE OF get_translation_values%ROWTYPE INDEX BY PLS_INTEGER;
   translation_tab_  Translation_Tab;
BEGIN
   OPEN get_translation_values;
   FETCH get_translation_values BULK COLLECT INTO translation_tab_;
   CLOSE get_translation_values;

   IF translation_tab_.COUNT > 0 THEN
      FOR i_ IN translation_tab_.first..translation_tab_.last LOOP
         Basic_Data_Translation_API.Remove_Basic_Data_Translation('MPCCOM',
                                                                  'DiscreteCharacValue',
                                                                  translation_tab_(i_).characteristic_value);

         FOR rec_ IN check_valid(translation_tab_(i_).characteristic_value) LOOP
            Basic_Data_Translation_API.Insert_Basic_Data_Translation('MPCCOM',
                                                                     'DiscreteCharacValue',
                                                                     rec_.characteristic_code||'^'||translation_tab_(i_).characteristic_value,
                                                                     translation_tab_(i_).lang_code,
                                                                     translation_tab_(i_).text);
         END LOOP;
      END LOOP;
   END IF;

   COMMIT;
END;
/

-- ***** LANGUAGE_SYS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ACCOUNTING_EVENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_46');
PROMPT Disabling the Delivery Overhead postings ON event code RETPODSINT AND syncronizing RETPODIRSH WITH PODRISH IN accounting_event_tab.

BEGIN
   UPDATE accounting_event_tab
      SET delivery_overhead_flag = 'N'
    WHERE event_code = 'RETPODSINT';

   UPDATE accounting_event_tab
      SET delivery_overhead_flag = (SELECT delivery_overhead_flag
                                      FROM accounting_event_tab
                                     WHERE event_code = 'PODIRSH')
    WHERE event_code = 'RETPODIRSH';

   COMMIT;
END;
/

-- ***** ACCOUNTING_EVENT_TAB End *****

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Timestamp_47');
PROMPT Upgrade statements IN FILE 2110.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('MPCCOM','2110.upg','Done');
