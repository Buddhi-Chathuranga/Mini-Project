--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-16  Aabalk  SC2020R1-9294, Handled true false values for enumeration fields.
-- 2018-03-25  ErFelk  SCUXXW4-18026, Added missing annotation, Dynamic Component Dependency for INVENT and PURCH.
-- 2018-04-06  Lufelk  SCUXXW4-7885, Converted from frmUserDefaults using MTG Version: 1.15
--------------------------------------------------------------------------------------
client SitesPerUser;
component MPCCOM;
layer Core;
projection SitesPerUserHandling;
include fragment CompanyHavingSiteSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry UserDefaultsNavEntry parent EnterpNavigator.SiteMenu at index 200 {
      label = "Sites per User";
      page Form;
   }
}


-------------------------------- MAIN PAGES ---------------------------------
page Form using UserDefaults {
   label = "Sites per User";
   startupmode = search;
   editmode = MultiField;
   selector UserDefaultSelector;
   group UserDefaultsGroup;
   list SiteList(DetailSite);

   commandgroup CommandGroup {

      command ConnectallSitesinCompanyCommand;
      command ConnectallSitesinSiteClusterCommand;
   }
}


--------------------------------- COMMANDS ----------------------------------
command ConnectallSitesinCompanyCommand for UserDefault {
   label = "Connect all Sites in Company";
   enabled = [true];
   execute {
      dialog ConnectToAllSitesInCompanyDialog(Userid) into(Company) {
         when OK {
            call ConnectAllSitesInCompany(Company);
            success("Successfully added");
         }
      }
   }
}

command ConnectallSitesinSiteClusterCommand for UserDefault {
   label = "Connect all Sites in Site Cluster";
   enabled = [true];
   execute {
      dialog ConnAllSitesInSiteClusterDialog into(SiteClusterId) {
         when OK {
            call ConnectSitesInSiteCluster(SiteClusterId);
            success("Successfully Connected");
         }
      }
   }
}

command SetasDefaultSiteCommand for UserAllowedSite {
   label = "Set as Default Site";
   enabled = [UserSiteType != "DefaultSite"];
   execute {
      call SetDefaultSite();
   }
}

command SiteCommand for UserAllowedSite {
   label = "Site";

   execute {
      navigate "page/CompanySite/Form?$filter=Contract eq $[Contract]";
   }

}

--------------------------------- SELECTORS ---------------------------------
@Override
selector UserDefaultSelector for UserDefault {
   label = "${Userid} - ${FndUserRef.Description}";
   static Userid {
      label = "User ID";
   }
   static UseridRef.Description;
}

selector UserIdSelector for FndUser {
   static Identity;
   static Description;
}

selector AuthorizeCodeRefSelector for OrderCoordinators {
   static AuthorizeCode;
   static Name;
   static State;
}
@DynamicComponentDependency PURCH
selector BuyerCodeRefSelector for PurchaseBuyers {
   static BuyerCode;
   static Name;
   static State;
}
@DynamicComponentDependency INVENT
selector PlannerIdRefSelector for InventoryPartPlanners {
   static BuyerCode;
   static BuyerName;
   static State;
}
selector SitesSelector for Site {
   field Contract;
   field Company;
   field DeliveryAddress;
   field Offset;
   field Description {
      label = "Site Description";
   }
}
@Override
selector SiteClusterSelector for SiteCluster {
   field SiteClusterId {
      label = "Site Cluster";
   }
   field Description;
}

@Override
selector CompanyHavingSiteSelector for CompanyHavingSite {
   static Company;
   static CompanyName;
   static NoOfSites;
}
---------------------------------- GROUPS -----------------------------------
group UserDefaultsGroup for UserDefault {
   label = "";
   lov UseridRef with UserIdSelector {
      label = "User";
      contactwidget {
         enabled = [true];
         source = Person;
      }
      description = UseridRef.Description;
   }
   lov AuthorizeCodeRef with AuthorizeCodeRefSelector {
      label = "Default Coordinator";
      maxlength = 2000;
      contactwidget {
         enabled = [true];
         source = Person;
      }
      description = AuthorizeCodeRef.Name;

   }
   @DynamicComponentDependency PURCH
   lov BuyerCodeRef with BuyerCodeRefSelector {
      label = "Default Buyer";
      contactwidget {
         enabled = [true];
         source = Person;
      }
      description = BuyerCodeRef.Name;
   }
   @DynamicComponentDependency INVENT
   lov PlannerIdRef with PlannerIdRefSelector {
      label = "Default Planner";
      contactwidget {
         enabled = [true];
         source = Person;
      }
      description = PlannerIdRef.BuyerName;
   }
}

group ConnAllSitesInSIteClusterGroup for ConnAllSitesInSIteClusterStructure {
   label = "Connect To All Permitted Sites In Site Cluster";
   lov SiteClusterIdRef with SiteClusterSelector {
      label = "Site Cluster";
   }
}

group ConnectToAllSitesInCompanyGroup for ConnectToAllSitesInCompanyStructure {
   label = "Connect To All Sites In Company";
   lov CompanyRef with CompanyHavingSiteSelector {
      label = "Company";
   }
}


----------------------------------- LISTS -----------------------------------
list SiteList for UserAllowedSite {
   label = "";
   lov ContractRef with SitesSelector {
      description = ContractRef.Description;
   }
   field ContractRef.Company {
      label = "Company";
   }
   field UserSiteType {
      enumerationtrue = "DefaultSite";
      enumerationfalse = "NotDefaultSite";
      truelabel = "Yes";
      falselabel = "No";
   }
   command SetasDefaultSiteCommand;
   command SiteCommand;
}


---------------------------------- DIALOGS ----------------------------------
dialog ConnAllSitesInSiteClusterDialog for ConnAllSitesInSIteClusterStructure {
   label = "Connect To All Permitted Sites In Site Cluster";
   output(SiteClusterId);
   group ConnAllSitesInSIteClusterGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}
dialog ConnectToAllSitesInCompanyDialog for ConnectToAllSitesInCompanyStructure {
   label = "Connect To All Sites In Company";
   input(Userid);
   output(Company);
   group ConnectToAllSitesInCompanyGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}
