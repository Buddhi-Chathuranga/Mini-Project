-----------------------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------------------------
-- 2019-09-20  mwerse  SCFALL19-214, Added dynamic code part labels.
-- 2019-05-13  DaZase  SCUXXW4-19729, Added initialcheck to all unbounded actions.
-- 2019-01-09  Yasmlk  SCUXXW4-15036, Implemented functions for CodePart Lovs to filter by valid dates.
-- 2019-01-03  JaThlk  SCUXXW4-7657, Moved the Codepart Settings to CodepartsSettings fragment.
-- 2018-12-14  fandse  SCUXXW4-7655, Fixed the references to get description etc.
-- 2018-12-14  fandse  SCUXXW4-7102  Included GetCodepartsSettings here and changes due to fragments in fragments
-- 2018-12-06  FANDSE  SCUXXW4-7655, Initial Aurena implmentation of dlgGivenValue as PrePostingWithoutSourceAssistant.
------------------------------------------------------------------------------------------------------------------------

fragment PrePostingWithoutSourceAssistant;
component MPCCOM;
layer Core;
description "Use this assistant to enter pre-postings according to the accounting rules. The entered pre-postings will be returned to be added to the transaction e.g. issue, receive.";
include fragment PreAccountCodepartAMpccomSelector;
include fragment PreAccountingCodepartBSelector;
include fragment PreAccountingCodepartCSelector;
include fragment PreAccountingCodepartDSelector;
include fragment PreAccountingCodepartESelector;
include fragment PreAccountingCodepartFSelector;
include fragment PreAccountingCodepartGSelector;
include fragment PreAccountingCodepartHSelector;
include fragment PreAccountingCodepartISelector;
include fragment PreAccountingCodepartJSelector;
include fragment CodepartsSettings;


----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant PrePostingWithoutSourceAssistant for PreAccountingStructure {
   label = "Pre Posting";
   savemode = OnLostFocus;
   input(Contract, AllowedAccountNo, AllowedCodenoB, AllowedCodenoC, AllowedCodenoD, AllowedCodenoE, AllowedCodenoF, AllowedCodenoG, AllowedCodenoH, AllowedCodenoI, AllowedCodenoJ);
   output(AccountNo, CodenoB, CodenoC, CodenoD, CodenoE, CodenoF, CodenoG, CodenoH, CodenoI, CodenoJ);
   init command {
      execute {
         call GetPreAccountingDefaults(Contract, AllowedAccountNo, AllowedCodenoB, AllowedCodenoC, AllowedCodenoD, AllowedCodenoE, AllowedCodenoF, AllowedCodenoG, AllowedCodenoH, AllowedCodenoI, AllowedCodenoJ) into InitPreAccountingStructure;
         set Company = InitPreAccountingStructure.Company;
         set SiteDate = InitPreAccountingStructure.SiteDate;
         set LabelAccountNo = InitPreAccountingStructure.LabelAccountNo;
         set LabelCodenoB = InitPreAccountingStructure.LabelCodenoB;
         set LabelCodenoC = InitPreAccountingStructure.LabelCodenoC;
         set LabelCodenoD = InitPreAccountingStructure.LabelCodenoD;
         set LabelCodenoE = InitPreAccountingStructure.LabelCodenoE;
         set LabelCodenoF = InitPreAccountingStructure.LabelCodenoF;
         set LabelCodenoG = InitPreAccountingStructure.LabelCodenoG;
         set LabelCodenoH = InitPreAccountingStructure.LabelCodenoH;
         set LabelCodenoI = InitPreAccountingStructure.LabelCodenoI;
         set LabelCodenoJ = InitPreAccountingStructure.LabelCodenoJ;
      }
   }
   steps {
      step {
         group PreAccountingGroup;
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [not(AllowedAccountNo = "MANDATORY" and AccountNo = null) and not(AllowedCodenoB = "MANDATORY" and CodenoB = null) and not(AllowedCodenoC = "MANDATORY" and CodenoC = null)
      and not(AllowedCodenoD = "MANDATORY" and CodenoD = null) and not(AllowedCodenoE = "MANDATORY" and CodenoE = null) and not(AllowedCodenoF = "MANDATORY" and CodenoF = null)
      and not(AllowedCodenoG = "MANDATORY" and CodenoG = null) and not(AllowedCodenoH = "MANDATORY" and CodenoH = null) and not(AllowedCodenoI = "MANDATORY" and CodenoI = null)
      and not(AllowedCodenoJ = "MANDATORY" and CodenoJ = null)];
      execute {
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group PreAccountingGroup for PreAccountingStructure {
   label = "Pre Posting";
   lov AccountNoRef with ReferencePreAccountCodepartAMpccomSelector using GetValidCodePartsForCodePartA(SiteDate) {
      label = "${LabelAccountNo}";
      description = AccountNoRef.Description;
      size = Large;
      editable = [AllowedAccountNo != "DISABLED"];
      visible = [AllowedAccountNo != "DISABLED"];
      required = [AllowedAccountNo = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(AccountNo, "A", SiteDate, Company);
         }
      }
   }
   lov CodenoBRef with ReferencePreAccountingCodepartBSelector using GetValidCodePartsForCodePartB(SiteDate, LabelCodenoB, Company) {
      label = "${LabelCodenoB}";
      description = CodenoBRef.Description;
      size = Large;
      editable = [AllowedCodenoB != "DISABLED"];
      visible = [AllowedCodenoB != "DISABLED"];
      required = [AllowedCodenoB = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoB, "B", SiteDate, Company);
         }
      }
   }
   lov CodenoCRef with ReferencePreAccountingCodepartCSelector using GetValidCodePartsForCodePartC(SiteDate, LabelCodenoC, Company) {
      label = "${LabelCodenoC}";
      description = CodenoCRef.Description;
      size = Large;
      editable = [AllowedCodenoC != "DISABLED"];
      visible = [AllowedCodenoC != "DISABLED"];
      required = [AllowedCodenoC = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoC, "C", SiteDate, Company);
         }
      }
   }
   lov CodenoDRef with ReferencePreAccountingCodepartDSelector using GetValidCodePartsForCodePartD(SiteDate, LabelCodenoD, Company) {
      label = "${LabelCodenoD}";
      description = CodenoDRef.Description;
      size = Large;
      editable = [AllowedCodenoD != "DISABLED"];
      visible = [AllowedCodenoD != "DISABLED"];
      required = [AllowedCodenoD = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoD, "D", SiteDate, Company);
         }
      }
   }
   lov CodenoERef with ReferencePreAccountingCodepartESelector using GetValidCodePartsForCodePartE(SiteDate, LabelCodenoE, Company) {
      label = "${LabelCodenoE}";
      description = CodenoERef.Description;
      size = Large;
      editable = [AllowedCodenoE != "DISABLED"];
      visible = [AllowedCodenoE != "DISABLED"];
      required = [AllowedCodenoE = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoE, "E", SiteDate, Company);
         }
      }
   }
   lov CodenoFRef with ReferencePreAccountingCodepartFSelector using GetValidCodePartsForCodePartF(SiteDate, LabelCodenoF, Company) {
      label = "${LabelCodenoF}";
      description = CodenoFRef.Description;
      size = Large;
      editable = [AllowedCodenoF != "DISABLED"];
      visible = [AllowedCodenoF != "DISABLED"];
      required = [AllowedCodenoF = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoF, "F", SiteDate, Company);
         }
      }
   }
   lov CodenoGRef with ReferencePreAccountingCodepartGSelector using GetValidCodePartsForCodePartG(SiteDate, LabelCodenoG, Company) {
      label = "${LabelCodenoG}";
      description = CodenoGRef.Description;
      size = Large;
      editable = [AllowedCodenoG != "DISABLED"];
      visible = [AllowedCodenoG != "DISABLED"];
      required = [AllowedCodenoG = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoG, "G", SiteDate, Company);
         }
      }
   }
   lov CodenoHRef with ReferencePreAccountingCodepartHSelector using GetValidCodePartsForCodePartH(SiteDate, LabelCodenoH, Company) {
      label = "${LabelCodenoH}";
      description = CodenoHRef.Description;
      size = Large;
      editable = [AllowedCodenoH != "DISABLED"];
      visible = [AllowedCodenoH != "DISABLED"];
      required = [AllowedCodenoH = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoH, "H", SiteDate, Company);
         }
      }
   }
   lov CodenoIRef with ReferencePreAccountingCodepartISelector using GetValidCodePartsForCodePartI(SiteDate, LabelCodenoI, Company) {
      label = "${LabelCodenoI}";
      description = CodenoIRef.Description;
      size = Large;
      editable = [AllowedCodenoI != "DISABLED"];
      visible = [AllowedCodenoI != "DISABLED"];
      required = [AllowedCodenoI = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoI, "I", SiteDate, Company);
         }
      }
   }
   lov CodenoJRef with ReferencePreAccountingCodepartJSelector using GetValidCodePartsForCodePartJ(SiteDate, LabelCodenoJ, Company) {
      label = "${LabelCodenoJ}";
      description = CodenoJRef.Description;
      size = Large;
      editable = [AllowedCodenoJ != "DISABLED"];
      visible = [AllowedCodenoJ != "DISABLED"];
      required = [AllowedCodenoJ = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoJ, "J", SiteDate, Company);
         }
      }
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

---------------------------------- ACTIONS ----------------------------------
action ValidateCodePart {
   initialcheck none;
   parameter CodeValue Text;
   parameter CodePart Text;
   parameter VoucherDate Date;
   parameter Company Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetPreAccountingDefaults Structure(InitPreAccountingStructure) {
   parameter Contract Text;
   parameter AllowedAccountNo Text;
   parameter AllowedCodenoB Text;
   parameter AllowedCodenoC Text;
   parameter AllowedCodenoD Text;
   parameter AllowedCodenoE Text;
   parameter AllowedCodenoF Text;
   parameter AllowedCodenoG Text;
   parameter AllowedCodenoH Text;
   parameter AllowedCodenoI Text;
   parameter AllowedCodenoJ Text;
}

function GetValidCodePartsForCodePartA List < Entity(PreAccountCodepartAMpccom) > {
   parameter SiteDate Date;
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate)";
}
function GetValidCodePartsForCodePartB List < Entity(PreAccountingCodepartB) > {
   parameter SiteDate Date;
   parameter LabelCodenoB Text;
   parameter Company Text;
   alterattribute LabelCodenoB {
      fetch = ":LabelCodenoB";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartC List < Entity(PreAccountingCodepartC) > {
   parameter SiteDate Date;
   parameter LabelCodenoC Text;
   parameter Company Text;
   alterattribute LabelCodenoC {
      fetch = ":LabelCodenoC";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartD List < Entity(PreAccountingCodepartD) > {
   parameter SiteDate Date;
   parameter LabelCodenoD Text;
   parameter Company Text;
   alterattribute LabelCodenoD {
      fetch = ":LabelCodenoD";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartE List < Entity(PreAccountingCodepartE) > {
   parameter SiteDate Date;
   parameter LabelCodenoE Text;
   parameter Company Text;
   alterattribute LabelCodenoE {
      fetch = ":LabelCodenoE";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartF List < Entity(PreAccountingCodepartF) > {
   parameter SiteDate Date;
   parameter LabelCodenoF Text;
   parameter Company Text;
   alterattribute LabelCodenoF {
      fetch = ":LabelCodenoF";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartG List < Entity(PreAccountingCodepartG) > {
   parameter SiteDate Date;
   parameter LabelCodenoG Text;
   parameter Company Text;
   alterattribute LabelCodenoG {
      fetch = ":LabelCodenoG";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartH List < Entity(PreAccountingCodepartH) > {
   parameter SiteDate Date;
   parameter LabelCodenoH Text;
   parameter Company Text;
   alterattribute LabelCodenoH {
      fetch = ":LabelCodenoH";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartI List < Entity(PreAccountingCodepartI) > {
   parameter SiteDate Date;
   parameter LabelCodenoI Text;
   parameter Company Text;
   alterattribute LabelCodenoI {
      fetch = ":LabelCodenoI";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}
function GetValidCodePartsForCodePartJ List < Entity(PreAccountingCodepartJ) > {
   parameter SiteDate Date;
   parameter LabelCodenoJ Text;
   parameter Company Text;
   alterattribute LabelCodenoJ {
      fetch = ":LabelCodenoJ";
   }
   where = "valid_from <= TRUNC(:SiteDate) AND valid_until >= TRUNC(:SiteDate) and COMPANY = :Company";
}


-------------------------------- STRUCTURES ---------------------------------
structure PreAccountingStructure {
   attribute Company Text {
      editable = [false];
   }
   attribute SiteDate Date {
      editable = [false];
   }
   attribute AccountNo Text;
   attribute CodenoB Text;
   attribute CodenoC Text;
   attribute CodenoD Text;
   attribute CodenoE Text;
   attribute CodenoF Text;
   attribute CodenoG Text;
   attribute CodenoH Text;
   attribute CodenoI Text;
   attribute CodenoJ Text;
   attribute LabelAccountNo Text {
      editable = [false];
   }
   attribute LabelCodenoB Text {
      editable = [false];
   }
   attribute LabelCodenoC Text {
      editable = [false];
   }
   attribute LabelCodenoD Text {
      editable = [false];
   }
   attribute LabelCodenoE Text {
      editable = [false];
   }
   attribute LabelCodenoF Text {
      editable = [false];
   }
   attribute LabelCodenoG Text {
      editable = [false];
   }
   attribute LabelCodenoH Text {
      editable = [false];
   }
   attribute LabelCodenoI Text {
      editable = [false];
   }
   attribute LabelCodenoJ Text {
      editable = [false];
   }
   attribute AllowedAccountNo Text {
      editable = [false];
   }
   attribute AllowedCodenoB Text {
      editable = [false];
   }
   attribute AllowedCodenoC Text {
      editable = [false];
   }
   attribute AllowedCodenoD Text {
      editable = [false];
   }
   attribute AllowedCodenoE Text {
      editable = [false];
   }
   attribute AllowedCodenoF Text {
      editable = [false];
   }
   attribute AllowedCodenoG Text {
      editable = [false];
   }
   attribute AllowedCodenoH Text {
      editable = [false];
   }
   attribute AllowedCodenoI Text {
      editable = [false];
   }
   attribute AllowedCodenoJ Text {
      editable = [false];
   }
   reference AccountNoRef(Company, AccountNo) to PreAccountCodepartAMpccom(Company, Account);
   reference CodenoBRef(Company, CodenoB) to PreAccountingCodepartB(Company, CodeB);
   reference CodenoCRef(Company, CodenoC) to PreAccountingCodepartC(Company, CodeC);
   reference CodenoDRef(Company, CodenoD) to PreAccountingCodepartD(Company, CodeD);
   reference CodenoERef(Company, CodenoE) to PreAccountingCodepartE(Company, CodeE);
   reference CodenoFRef(Company, CodenoF) to PreAccountingCodepartF(Company, CodeF);
   reference CodenoGRef(Company, CodenoG) to PreAccountingCodepartG(Company, CodeG);
   reference CodenoHRef(Company, CodenoH) to PreAccountingCodepartH(Company, CodeH);
   reference CodenoIRef(Company, CodenoI) to PreAccountingCodepartI(Company, CodeI);
   reference CodenoJRef(Company, CodenoJ) to PreAccountingCodepartJ(Company, CodeJ);
}

structure InitPreAccountingStructure {
   attribute SiteDate Date;
   attribute Company Text;
   attribute LabelAccountNo Text;
   attribute LabelCodenoB Text;
   attribute LabelCodenoC Text;
   attribute LabelCodenoD Text;
   attribute LabelCodenoE Text;
   attribute LabelCodenoF Text;
   attribute LabelCodenoG Text;
   attribute LabelCodenoH Text;
   attribute LabelCodenoI Text;
   attribute LabelCodenoJ Text;
}

