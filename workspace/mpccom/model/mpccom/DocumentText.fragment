---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2020-10-12  JaThlk  SCZ-11463, Added a new LOV field, PhraseId to fetch the Phrase Text to multiline field.
-- 2019-06-18  JaThlk  SCUXXW4-18689, Changed the label of the fields Phrase Text and Phrase Id in the lov selector and lov list.
-- 2019-02-19  Milise  SCUXXW4-7660, added freeinput.
-- 2018-12-21  Chfolk  SCUXXW4-7660, Included used fragments.
-- 2018-04-20  MWerse  SCUXXW4-7660, Converted from dlgNoteText using MTG Version: 1.16
---------------------------------------------------------------------------------

fragment DocumentText;
component MPCCOM;
layer Core;
description "Use this API to enter document texts that will be printed on the chosen document. These can either be general texts or standard phrases.";
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant DocumentText using NoteTexts {
   label = "Document Text ${Label}";
   input(NoteId, Label, ReadOnly);
   --Note that the variable sent in as "Label" must have the property "translatable = true"
   steps {
      step {
         list NotesList(DetailNotes);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      label = "Close";
      execute {
         exit OK;
      }
   }
   cancel command {
      visible = [false];
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceMpccomPhraseTextLovSelector for MpccomPhraseTextLov {
   static PhraseText {
      label = "Phrase Text";
   }
   static PhraseId {
      label = "Phrase ID";
   }
}

----------------------------------- LISTS -----------------------------------
list NotesList for DocumentText {
   label = "";
   crudactions {
      new {
         enabled = [not parent.ReadOnly];
      }
      edit {
         enabled = [not parent.ReadOnly];
      }
      delete {
         enabled = [not parent.ReadOnly];
      }
   }
   lov OutputTypeRef with ReferenceOutputTypeLovSelector {
      size = Small;
   }
   lov PhraseIdRef with ReferenceMpccomPhraseTextLovSelector {
 	   size = Small;
 	   validate command {
 	      execute {
 	 	      set NoteText = PhraseIdRef.PhraseText;
 	      }
 	   }
   }
   field NoteText {
      size = Large;
      multiline = true;
   }
}

@Override
list MpccomPhraseTextLovLovList for MpccomPhraseTextLov {
   label = "";
   static PhraseText {
      label = "Phrase Text";
   }
   static PhraseId {
      label = "Phrase ID";
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset NoteTexts for NoteTextVirtual;

--------------------------------- VIRTUALS ----------------------------------
virtual NoteTextVirtual {
   attribute NoteId Number;
   attribute Label Text;
   attribute ReadOnly Boolean;
   array DetailNotes(NoteId) to DocumentText(NoteId);
}

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity DocumentText {
   where = "output_type != 'PURCHASE'";
   attribute NoteText Text {
      label = "Document Text/Phrase Text";
   }
   attribute PhraseId Text {
 	   fetch = "NULL";
   }

   reference PhraseIdRef(PhraseId) to MpccomPhraseTextLov(PhraseId) {
 	   label = "Phrase ID";
   }
   reference OutputTypeRef(OutputType) to OutputTypeLov(OutputType) {
      label = "Output Type";
   }
}
