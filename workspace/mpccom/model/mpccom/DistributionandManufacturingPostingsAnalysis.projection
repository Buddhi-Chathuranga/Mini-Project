--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-09-16  TiRalk  FI21R2-3892, Modified the fetch of AccountingYearStr and AccountingPeriodStr to get
-- 2021-09-16          the values according to date_applied to support Month End Process Lobby Navigations.
-- 2019-08-26  ChFolk  SCUXXW4-23626, Removed get methods where we can get the value from the references.
-- 2019-06-27  ChFolk  SCUXXW4-22439, Included frgament CodeStringAllBasic and new references for code parts.
-- 2018-06-06  Lufelk  SCUXXW4-SCUXXW4-7890, Converted from tbwAccounting using MTG Version: 1.21
-- 2018-07-18  ussolk  FIUXX-22855 Added AccountingYearStr and AccountingPeriodStr to handle page parameters in Month End Process Lobby Navigations.
--------------------------------------------------------------------------------------
projection DistributionandManufacturingPostingsAnalysis;
component MPCCOM;
layer Core;
description "To view postings created in Supply Chain, Manufacturing and postings created for transactions related to work order material in Service and Maintenance";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment CodeStringAllBasic;
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset MpccomAccountingSet for MpccomAccounting;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity MpccomAccounting {
   crud = Read;
   attribute AccountingId Number {
      label = "Accounting ID";
   }
   attribute StrCode Text {
      label = "Posting Type";
   }
   attribute AccountingYearStr Text {
      fetch = "to_char(Accounting_Period_API.Get_Accounting_Year(company, date_applied))";
   }
   attribute AccountingPeriodStr Text {
      fetch = "Accounting_Period_API.Get_Year_Period_Str(company, date_applied)";
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute StatusDesc Text {
      fetch = "Mpccom_Accounting_Status_Api.Decode(status_code)";
      label = "Status Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute AccountNo Text {
      label = "@A";
   }
   attribute CodenoB Text {
      label = "@B";
   }
   attribute CodenoC Text {
      label = "@C";
   }
   attribute CodenoD Text {
      label = "@D";
   }
   attribute CodenoE Text {
      label = "@E";
   }
   attribute CodenoF Text {
      label = "@F";
   }
   attribute CodenoG Text {
      label = "@G";
   }
   attribute CodenoH Text {
      label = "@H";
   }
   attribute CodenoI Text {
      label = "@I";
   }
   attribute CodenoJ Text {
      label = "@J";
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
   }
   attribute EventCode Text {
      label = "Posting Event Code";
   }
   attribute VoucherNo Number {
      maxlength = 10;
   }
   attribute BookingSource Text {
      label = "Posting Source";
   }
   attribute DebitAmount Number {
      format = ifscurrency;
   }
   attribute CreditAmount Number {
      format = ifscurrency;
   }
   attribute DebitCreditAmount Number {
      format = ifscurrency;
   }
   attribute DebitCurrAmount Number {
      format = ifscurrency;
   }
   attribute CreditCurrAmount Number {
      format = ifscurrency;
   }
   attribute DebitCreditCurrAmount Number {
      format = ifscurrency;
   }
   attribute InventoryValueStatus Enumeration(InventoryValueStatus) {
      editable = [ETag = null];
   }
   attribute OriginalAccountingId Number {
      label = "Original Posting ID";
   }
   attribute BucketPostingGroupId Text {
      label = "Posting Cost Group";
   }
   reference PostingCtrlPostingTypeRef(StrCode) to PostingCtrlPostingType(PostingType);
   reference MpccomSystemEventRef(EventCode) to MpccomSystemEvent(SystemEventId);
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PerOhAdjustmentIdRef(Company, PerOhAdjustmentId) to PerOhAdjustmentHistory(Company, AdjustmentId) {
      label = "Periodic OH Adjustment ID";
   }
   reference AccountRef(Company, AccountNo) to Account(Company, Account);
   reference CodeBRef(Company, CodenoB) to CodeB(Company, CodeB);
   reference CodeCRef(Company, CodenoC) to CodeC(Company, CodeC);
   reference CodeDRef(Company, CodenoD) to CodeD(Company, CodeD);
   reference CodeERef(Company, CodenoE) to CodeE(Company, CodeE);
   reference CodeFRef(Company, CodenoF) to CodeF(Company, CodeF);
   reference CodeGRef(Company, CodenoG) to CodeG(Company, CodeG);
   reference CodeHRef(Company, CodenoH) to CodeH(Company, CodeH);
   reference CodeIRef(Company, CodenoI) to CodeI(Company, CodeI);
   reference CodeJRef(Company, CodenoJ) to CodeJ(Company, CodeJ);
}