-----------------------------------------------------------------------------
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-- 220202   DigPlk  SC21R2-7491,  Enabled multiline feature in description field of Phrasegroup to display the notepad icon.
-- 180329   Lufelk  SCUXXW4-7820,  Created.
-----------------------------------------------------------------------------
client Phrases;
component MPCCOM;
layer Core;
projection PhrasesHandling;

@DynamicComponentDependency PURCH
include fragment ContractClauseTypeSelector;
@DynamicComponentDependency PURCH
include fragment PropagateRevisionDialog;

warningsenabled = Obsolete;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PhrasesNavEntry parent Documents.DocumentTextAdministration at index 300 {
      label = "Phrase";
      page Form home MpccomPhrase;
   }
}


-------------------------------- MAIN PAGES ---------------------------------
page Form using MpccomPhrases {
   label = "Phrase";
   editmode = MultiField;
   selector MpccomPhraseSelector;
   group PhrasesGroup;
   list PhrasesRevisionsList(DetailPhraseRevisionText);
   list PhrasesList(DetailPhraseText) bind PhrasesRevisionsList;

   @DynamicComponentDependency PURCH
   command PhraseConnectionRules;
   @DynamicComponentDependency PURCH
   command PhraseConnectionsWhereUsed;
}

--------------------------------- COMMANDS ----------------------------------
@DynamicComponentDependency PURCH
command PhraseConnectionsWhereUsed for MpccomPhrase {
   label = "Procurement Clause Connections";
   enabled = [ContractClauseTypeRef != null];
   execute {
      navigate "page/PhraseConnectionsWhereUsed/List?$filter=PhraseId eq $[PhraseId]";
   }
}

@DynamicComponentDependency PURCH
command PhraseConnectionRules for MpccomPhrase {
   label = "Procurement Clause Connection Rules";
   enabled = [ContractClauseTypeRef != null];
   execute {
      navigate "page/PhraseConnectionRules/List?$filter=PhraseId eq $[PhraseId]";
   }
}

command ActivateContractClaue for MpccomPhraseRevision {
   label = "Set Active";
   enabled = [(IsPhraseTextNull = "FALSE" and ApprovalStatus = "Inactive") or ApprovalStatus = "Approved"];
   mode = SingleRecord;
   execute {
      confirm("This will change phrase revision to Active.") {
         when OK {
            call Activate();
            info("Phrase revision was set to Active.");
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ObsoleteContractClaue for MpccomPhraseRevision {
   label = "Obsolete";
   enabled = [ApprovalStatus = "Active"];
   mode = SingleRecord;
   execute {
      call Obsolete();
   }
}
@DynamicComponentDependency PURCH
command PropagateRevision for MpccomPhraseRevision {
   label = "Propagate Revision";
   enabled = [ApprovalStatus = "Active" and parent.ContractClause = true];
   variable ReleaseStatusVar {
      type = Boolean;
   }
   variable ConfirmedStatusVar {
      type = Boolean;
   }
   variable SharedStatusVar {
      type = Boolean;
   }
   variable IsRevUpdatedVar {
      type = Boolean;
   }

   mode = SingleRecord;
   execute {
      dialog PropagateRevisonDialog(PhraseId, RevisionNo) into(ReleaseStatusVar, ConfirmedStatusVar, SharedStatusVar) {
         when OK {
            call PropagateRevision(PhaseInDate, PhaseOutDate, ReleaseStatusVar, ConfirmedStatusVar, SharedStatusVar) into IsRevUpdatedVar;
            if [IsRevUpdatedVar] {
               info("Phrase connections are updated with new revision. Already shared purchase orders require manual communication.");
            }
            exit OK;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector MpccomPhraseSelector for MpccomPhrase {
   label = "${PhraseId} - ${Description}";
   static PhraseId;
   static Description;
}


---------------------------------- GROUPS -----------------------------------
group PhrasesGroup for MpccomPhrase {
   label = "";
   field PhraseId {
      label = "Phrase ID";
      size = Small;
   }
   field Description {
      label = "Description ";
      multiline = true;
      size = Medium;
   }

   @DynamicComponentDependency PURCH
   field ContractClause {
      size = Small;
      label = "Procurement Clause";
      editable = [IsContractClauseEditable = "TRUE" or isNew];
   }
   @DynamicComponentDependency PURCH
   lov ContractClauseTypeRef with ReferenceContractClauseTypeLovSelector {
      size = Large;
      required = [ContractClause = true];
      visible = [ContractClause = true];
      editable = [IsContractClauseEditable = "TRUE" or isNew];
      label = "Clause Type";
      description = ContractClauseTypeRef.Description;
      preview = ContractClauseTypeCard;
   }
}

----------------------------------- LISTS -----------------------------------
list PhrasesList for MpccomPhraseText {
   orderby = LanguageCode;
   label = "Phrase Texts";
   crudactions {
      edit {
         enabled = [parent.ApprovalStatus in("Inactive", "ApprovalRequired") or parent.ApprovalStatus = null];
      }
      delete {
         enabled = [parent.ApprovalStatus in("Inactive", "ApprovalRequired") or parent.ApprovalStatus = null];
      }
      new {
         enabled = [parent.ApprovalStatus in("Inactive", "ApprovalRequired") or parent.ApprovalStatus = null];
      }
   }

   field RevisionNo {
      columnvisible = [false];
   }
   field LanguageCodeRef;
   field PhraseText {
      label = "Text";
      size = FullWidth;
      multiline = true;
   }
}

list PhrasesRevisionsList for MpccomPhraseRevision {
   label = "Phrase Revisions";
   orderby = RevisionNo desc;
   preselect = [true];
   multiselect = [false];
   crudactions {
      edit {
         enabled = [not(selection.PhrasesRevisionsList.ApprovalStatus = "Obsolete")];
      }
      delete {
         enabled = [(selection.PhrasesRevisionsList.ApprovalStatus = "Inactive") or(selection.PhrasesRevisionsList.ApprovalStatus = null)];
      }
   }

   field PhraseId {
      columnvisible = [false];
   }
   field RevisionNo;
   field RevisionDescription;
   field PhaseInDate;
   field PhaseOutDate;
   badge ApprovalStatus {
      label = "Status";
      required = [false];
      columnexclude = [parent.ContractClause = false];
      size = Medium;
      style = TextOnly;
      emphasis Progress1 = [ApprovalStatusDb = "APPROVAL_REQUIRED"];
      emphasis Progress2 = [ApprovalStatusDb = "INACTIVE"];
      emphasis Progress4 = [ApprovalStatusDb = "APPROVAL_IN_PROGRESS"];
      emphasis Progress8 = [ApprovalStatusDb = "APPROVED"];
      emphasis Progress12 = [ApprovalStatusDb = "ACTIVE"];
      emphasis StateCancelled = [ApprovalStatusDb = "OBSOLETE"];
   }
   field NoteText {
      label = "Notes";
      size = FullWidth;
      multiline = true;
   }

   command ActivateContractClaue;
   command ObsoleteContractClaue;
   @DynamicComponentDependency PURCH
   command PropagateRevision;

}
