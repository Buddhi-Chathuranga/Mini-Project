-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-12-28  Asawlk  SC21R2-6957, Added DynamicComponentDependency annotation to DocumentAddressRef.
-- 2021-01-29  WaSalk  SC2020R1-12315, Added max length for ClusterLevel as 100 and modified max length for SiteClusterId to 50 in
-- 2021-01-29          SiteCluster and SiteClusterStructure.
-- 2020-03-26  SBalLK  Bug 152848 (SCZ-9452), Resolving automatic testing reported issues.
-- 2019-05-09  DaZase  SCUXXW4-19733, Added initialcheck to all unbounded actions.
-- 2019-02-19  SAGELK  SCUXXW4-7700, Converted from dlgSiteList MTG Version: 1.34.
-- 2018-12-22  SURBLK  SCUXXW4-7845, Converted from frmSiteClusterStructure
--                     SCUXXW4-7835, Converted from frmSiteClusterNodeDetail
--                     SCUXXW4-7835, Converted from frmSiteClusterNodeDetail
--                     SCUXXW4-8015, Converted from tbwSiteClusterLevel
--                     SCUXXW4-7620, Converted from dlgCreateSubNodes
--                     SCUXXW4-7585, Converted from dlgConnectSites
--                     SCUXXW4-7850, Converted from frmSiteClusterTree
--                     SCUXXW4-7905, Converted from tbwConnectedSites MTG Version: 1.34.
-----------------------------------------------------------------------------
projection SiteClusterHandling;
component MPCCOM;
layer Core;
description "Use this API to define and also view site clusters and their current status.";
category Users;
include fragment CompanyAddressLovPubSelector;
include fragment WorkTimeCalendarLovSelector;
@DynamicComponentDependency INVENT
include fragment CountryOfRegionLovSelector;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SiteClusterSet for SiteCluster;
entityset SiteClusterNodeSet for SiteClusterNode;
entityset CreateSubNodesSet for CreateSubNodesVirtual;
entityset ConnectSitesParentSet for ConnectSitesParentVirtual;
entityset SiteListParentSet for SiteListParentVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SiteCluster {
   crud = Create, Read, Update, Delete;
   from = "site_cluster";
   exec = "SITE_CLUSTER_API";
   keys = SiteClusterId {
      where = "SITE_CLUSTER_ID = :SiteClusterId";
   }
   use attributes = Description;
   attribute SiteClusterId Text {
      fetch = "site_cluster_id";
      label = "Site Cluster";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 200;
      required = [true];
   }

   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }

   array SiteClusterNodeInfoArray(SiteClusterId) to SiteClusterNode(SiteClusterNodeId);
   array SiteClusterNodeArray(SiteClusterId) to SiteClusterNode(ParentNode);
   array SiteClusterLevelArray(SiteClusterId) to SiteClusterLevel(SiteClusterId);

}

@Override
entity SiteClusterLevel {
   crud = Create, Read, Update, Delete;
   from = "site_cluster_level";
   exec = "SITE_CLUSTER_LEVEL_API";
   keys = ClusterLevel, SiteClusterId {
      where = "CLUSTER_LEVEL = :ClusterLevel and SITE_CLUSTER_ID = :SiteClusterId";
   }
   use attributes = Description;
   attribute ClusterLevel Number {
      fetch = "cluster_level";
      label = "Level";
      required = [true];
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute Description Text {
      fetch = "description";
      label = "Level Name";
      maxlength = 200;
      required = [true];
   }
   attribute SiteClusterId Text {
      fetch = "site_cluster_id";
      label = "Site Cluster";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }
}

@Override
entity SiteClusterNode {
   crud = Create, Read, Update, Delete;
   from = "site_cluster_node";
   exec = "SITE_CLUSTER_NODE_API";
   keys = SiteClusterNodeId, SiteClusterId {
      where = "SITE_CLUSTER_NODE_ID = :SiteClusterNodeId and SITE_CLUSTER_ID = :SiteClusterId";
   }
   use attributes = Description, Contract, ParentNode;
   attribute SiteClusterNodeId Text {
      fetch = "site_cluster_node_id";
      label = "Node";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Node Description";
      maxlength = 200;
      required = [true];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Connected to Site";
      maxlength = 5;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SiteDescription Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Site Description";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute LevelName Text {
      fetch = "Site_Cluster_Level_API.Get_Description(site_cluster_id, Site_Cluster_Node_API.Get_Level_No(site_cluster_id, site_cluster_node_id))";
      label = "Level Name";
      maxlength = 200;
      editable = [ETag = null];
   }
   attribute SiteClusterId Text {
      fetch = "site_cluster_id";
      label = "Site Cluster";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ParentNode Text {
      fetch = "parent_node";
      label = "Parent Node";
      maxlength = 50;
      format = uppercase;
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Connected to Site";
   }
   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }

   reference SiteClusterNodeIdRef(SiteClusterId, SiteClusterNodeId) to SiteClusterNode(SiteClusterId, SiteClusterNodeId) {
      label = "Site Cluster Node";

   }

   array SiteClusterStructureNodes(SiteClusterId, SiteClusterNodeId) to SiteClusterNode(SiteClusterId, ParentNode);
   array SiteClusterChildNodeInfoArray(SiteClusterId, SiteClusterNodeId) to SiteClusterNode(SiteClusterId, SiteClusterNodeId);

   array ConnectedSiteArray() to Site() {
      where = "contract IN (SELECT contract
                                 FROM site_cluster_node
      WHERE site_cluster_id = :parent.SiteClusterId)";
   }
   array ChildNodeConnectedSiteArray() to Site() {
      where = "contract IN (SELECT contract
                                 FROM site_cluster_node
      WHERE site_cluster_id = :parent.SiteClusterId START WITH site_cluster_node_id = :parent.SiteClusterNodeId AND site_cluster_id = :parent.SiteClusterId CONNECT BY PRIOR site_cluster_node_id = parent_node AND PRIOR site_cluster_id = site_cluster_id AND site_cluster_id = :parent.SiteClusterId)";
   }

}

@Override
entity Site {
   crud = Read;
   from = "site";
   exec = "SITE_API";
   keys = Contract {
      where = "CONTRACT = :Contract";
   }

   use attributes = Description, Company, DeliveryAddress, DistCalendarId, ManufCalendarId, Offset;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Site Description";
      maxlength = 20;
      required = [true];
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute DeliveryAddress Text {
      fetch = "delivery_address";
      label = "Delivery Address";
      maxlength = 50;
      format = uppercase;
   }
   @DynamicComponentDependency DISCOM
   attribute DocumentAddress Text {
      fetch = "Site_Discom_Info_API.Get_Document_Address_Id(contract, 'FALSE')";
      label = "Document Address";
      maxlength = 2000;
      format = uppercase;
   }
   attribute DistCalendarId Text {
      fetch = "dist_calendar_id";
      label = "Distribution Calendar";
      maxlength = 10;
      required = [true];
      format = uppercase;
   }
   attribute ManufCalendarId Text {
      fetch = "manuf_calendar_id";
      label = "Manufacturing Calendar";
      maxlength = 10;
      required = [true];
      format = uppercase;
   }
   attribute Offset Number {
      fetch = "offset";
      label = "Time Zone Offset";
      required = [true];
   }
//   attribute CountryCode Text {
//      fetch = "country_code";
//      label = "Country Code";
//      maxlength = 2;
//      insertable = [true];
//   }
//   attribute RegionCode Text {
//      fetch = "region_code";
//      label = "Region Code";
//      insertable = [true];
//   }
//   @DynamicComponentDependency INVENT
//   attribute LastPeriodicWADate Date {
//      fetch = "Site_Invent_Info_API.Get_Last_Actual_Cost_Calc(contract)";
//      label = "Last Periodic WA Date";
//   }
   @DynamicComponentDependency DISCOM
   attribute PrintConditionCodeOnCustomerOrderReports Boolean("TRUE", "FALSE") {
      fetch = "Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(contract)";
      label = "Print Condition Code on Customer Order Reports";
      required = [true];
   }
   @DynamicComponentDependency DISCOM
   attribute PrintConditionCodeOnPurchaseOrderReports Boolean("TRUE", "FALSE") {
      fetch = "Site_Discom_Info_API.Get_Disp_Cond_Purch_Order_Db(contract)";
      label = "Print Condition Code on Purchase Order Reports";
      required = [true];
   }
   @DynamicComponentDependency MFGSTD
   attribute ReceiptSOInBackground Boolean("TRUE", "FALSE") {
      fetch = "Site_Mfgstd_Info_API.Get_So_Receipt_Background_Db(contract)";
      label = "Receipt SO in Background";
      required = [true];
   }
   @DynamicComponentDependency ORDER
   attribute InternalCustomer Text {
      fetch = "Cust_Ord_Customer_API.Get_Customer_No_From_Contract(contract)";
      label = "Internal Customer";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute InternalSupplier Text {
      fetch = "Supplier_API.Get_Vendor_No_From_Contract(contract)";
      label = "Internal Supplier";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency MSCOM
   reference SiteMscomInfoRef(Contract) to SiteMscomInfo(Contract);
   @DynamicComponentDependency INVENT
   reference SiteInventInfoRef(Contract) to SiteInventInfo(Contract);
   @DynamicComponentDependency DISCOM
   reference SiteDiscomInfoRef(Contract) to SiteDiscomInfo(Contract);
   @DynamicComponentDependency MFGSTD
   reference SiteMfgstdInfoRef(Contract) to SiteMfgstdInfo(Contract);
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
   reference DeliveryAddressRef(Company, DeliveryAddress) to CompanyAddressLovPub(Company, DeliveryAddress) {
      label = "Delivery Address";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   @DynamicComponentDependency DISCOM
   reference DocumentAddressRef(Company, DocumentAddress) to CompanyAddressLovPub(Company, DeliveryAddress) {
      label = "Document Address";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference DistCalendarIdRef(DistCalendarId) to WorkTimeCalendarLov(CalendarId) {
      label = "Distribution Calendar";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ManufCalendarIdRef(ManufCalendarId) to WorkTimeCalendarLov(CalendarId) {
      label = "Manufacturing Calendar";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference BranchRef(Company) to Branch(Company) {
      label = "Branch";
   }
//   @DynamicComponentDependency INVENT
//   reference CountryRef(CountryCode) to CountryOfRegionLov(CountryCode) {
//      label = "Country";
//      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
//   }
//   @DynamicComponentDependency INVENT
//   reference RegionRef(CountryCode, RegionCode) to CountryRegion(CountryCode, RegionCode) {
//      label = "Region";
//   }
   @DynamicComponentDependency ORDER
   reference InternalCustomerRef(InternalCustomer) to CustOrdCustomer(CustomerNo) {
      label = "Internal Customer";
   }
   @DynamicComponentDependency PURCH
   reference InternalSupplierRef(InternalSupplier) to Supplier(VendorNo) {
      label = "Internal Supplier";
   }
}


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CreateSubNode {
   initialcheck none;
   parameter Objkey Text;
   parameter ParentNode Text;

   ludependencies = SiteClusterNode;
}

action DeleteNode {
   initialcheck none;
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;

   ludependencies = SiteClusterNode;
}

action CreateSiteCluster {
   initialcheck none;
   parameter SiteClusterId Text;
   parameter Description Text;
}

action DisconnectSite {
   initialcheck none;
   parameter SiteClusterId Text;
   parameter Contract Text;

   ludependencies = Site, SiteClusterNode;
}

action ConnectSites {
   initialcheck implementation;
   parameter Objkey Text;

   ludependencies = SiteClusterNode;
   ludependencies = Site;
}

action CreateConnectSite {
   initialcheck implementation;
   ludependencies = ConnectSitesVirtual;

   parameter Selection Text;
   parameter ParentObjkey Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckNodeExists Text {
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;
}
function FilterContract List<Entity(UserAllowedSiteLov)> {
   parameter SiteClusterId Text;
   where = "CONTRACT not in (select CONTRACT FROM SITE_CLUSTER_NODE WHERE CONTRACT is not null AND site_cluster_id = :SiteClusterId)";
}

-------------------------------- STRUCTURES ---------------------------------
structure SiteClusterStructure {
   attribute SiteClusterId Text {
      label = "Site Cluster";
      maxlength = 50;
      format = uppercase;
      required = [true];
   }
   attribute Description Text {
      label = "Description";
      maxlength = 200;
      required = [true];
   }
}

--------------------------------- VIRTUALS ----------------------------------

virtual CreateSubNodesVirtual {
   attribute SiteClusterId Text;
   array SubNodesArray(SiteClusterId) to SubNodesVirtual(SiteClusterId);
}

virtual SubNodesVirtual {
   attribute SiteClusterId Text {
      label = "Site Cluster";
   }
   attribute SiteClusterNodeId Text {
      label = "Site Cluster Node";
      required = [true];
      format = uppercase;
   }
   attribute Description Text {
      required = [true];
   }
}

virtual ConnectSitesParentVirtual {
   attribute SiteClusterId Text;
   attribute SiteClusterNodeId Text;

   array ConnetSitesArray(SiteClusterId, SiteClusterNodeId) to ConnectSitesVirtual(SiteClusterId, SiteClusterNodeId);
}

virtual ConnectSitesVirtual {
   attribute SiteClusterId Text;
   attribute SiteClusterNodeId Text;
   attribute Contract Text {
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute Description Text {
      maxlength = 200;
   }
   reference SiteRef(Contract) to Site(Contract);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}

virtual SiteListParentVirtual {
   attribute SiteClusterId Text;
   attribute SiteClusterNodeId Text;

   array SiteListArray() to SiteListVirtual();
}

virtual SiteListVirtual {
   attribute SiteClusterId Text;
   attribute SiteClusterNodeId Text;
   attribute Contract Text {
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute ContractDesc Text {
      maxlength = 200;
   }
   reference SiteRef(Contract) to Site(Contract);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------