----------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------     --------------------------------------------------------------
-- 2019-07-01  SBalLK     SCUXXW4-22329, Added CheckDefaultTemplateExistForSite() and removed CheckTemplateOneExist() method to validate defualt template for the site.
-- 2019-02-07  SBalLK     SCUXXW4-15988, Used contract as a key parameter for TemplateIdRef in CopyTemplateStructure.
-- 2018-11-01  SBalLK     Issue SCUXXW4-7595, Added Copy Template Functionality.
-- 2018-10-29  ErRalk     Issue SCUXXW4-7650, Added Delete Periods dialog.
-- 2018-10-29  SBalLK     Issue SCUXXW4-7610, Added Create Periods dialog.
-- 2018-10-26  SBalLK     Issue SCUXXW4-7560, Implement Recalculate Period Template Dialog and Recalculate All Template Details For Site dialog.
-- 2018-10-26  ErRalk     SCUXXW4-7800, Converted from frmDynamicPeriodTemplate using MTG Version: 1.32
----------------------------------------------------------------------------------------
projection ManufacturingPlanningPeriodTemplateHandling;
component MPCCOM;
layer Core;
description "Use this API to enter and maintain period templates for use by all manufacturing planning modules";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment PeriodTemplateLovSelector;
include fragment RecalculatePeriodTemplateDialog;
include fragment PeriodTemplateInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PeriodTemplateSet for PeriodTemplate;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PeriodTemplate {
   supportwarnings = [true];
   use attributes = TemplateDescription, CalendarId, RecalculationDate;
   attribute Contract Text {
      label = "Template Site";
      maxlength = 100;
   }
   attribute ContractDescription Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Site Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TemplateDescription Text {
      maxlength = 50;
   }
   attribute CalendarId Text {
      editable = [ETag = null];
   }
   attribute RecalculationDate Date {
      label = "Period 1 Begin Date";
      editable = [ETag = null];
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Template Site";
   }
   reference CalendarIdRef(CalendarId) to WorkTimeCalendar(CalendarId) {
      label = "Calendar ID";
   }
   array PeriodTemplateDetailsArray(Contract, TemplateId) to PeriodTemplateDetail(Contract, TemplateId);

   action RecalculateTemplate {
      parameter StartDate Date;
      parameter CalendarId Text;
      ludependencies = PeriodTemplateDetail;
   }
   action RecalculateSiteTemplate {
      parameter StartDate Date;
      ludependencies = PeriodTemplateDetail;
   }
   action DeletePeriods {
      parameter DeleteFromPeriod Number;
      parameter DeleteToPeriod Number;
      ludependencies = PeriodTemplateDetail;
   }
   action CreatePeriods {
      parameter PeriodUnit Enumeration(PlanPeriodUnit.PlanPeriodUnit1);
      parameter StartPeriod Number;
      parameter NoOfPeriod Number;
      parameter PeriodLength Number;
      ludependencies = PeriodTemplateDetail;
   }
}
@Override
entity PeriodTemplateDetail {
   where = "PERIOD_NO > 0";
   ludependencies = PeriodTemplateDetail;

   use attributes = PeriodLength, PlanPeriodUnit, LengthInWorkDays, PeriodBeginCounter, PeriodEndCounter;

   attribute PeriodNo Number {
      maxlength = 3;
      required = [false];
      editable = [false];
   }
   attribute PeriodLength Number {
      maxlength = 4;
   }
   attribute LengthInWorkDays Number {
      maxlength = 4;
      editable = [false];
      required = [false];
   }
   attribute PeriodBeginDate Date {
      fetch = "Work_Time_Calendar_API.Get_Work_Day(Period_Template_API.Get_Calendar_Id(contract, template_id), period_begin_counter)";
      label = "Period Begin Date";
      editable = [false];
   }
   attribute PeriodEndDate Date {
      fetch = "Work_Time_Calendar_API.Get_Work_Day(Period_Template_API.Get_Calendar_Id(contract, template_id), period_end_counter)";
      label = "Period End Date";
      editable = [false];
   }
   attribute PreviousLength Number {
      required = [false];
   }
   attribute PeriodBeginCounter Number {
      required = [false];
   }
   attribute PeriodEndCounter Number {
      required = [false];
   }

   reference TemplateIdRef(Contract, TemplateId) to PeriodTemplate(Contract, TemplateId) {
      label = "Template ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action StartCopyTemplate {
   initialcheck implementation;
   parameter SourceContract Text;
   parameter SourceTemplateId Number;
   parameter Contract Text;
   parameter TemplateId Number;
   parameter TemplateDescription Text;
   parameter LastRecalculationDate Date;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetSiteDate Date {
   parameter Contract Text;
}

function GetMaxPeriodNo Number {
   parameter Contract Text;
   parameter TemplateId Number;
}

function GetRecalculationDate Date {
   parameter Contract Text;
   parameter TemplateId Number;
}

function CheckTemplateExist Number {
   parameter Contract Text;
   parameter TemplateId Number;
}

function TemplateIdLovUserWhere List<Entity(PeriodTemplateLov)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function CheckDefaultTemplateExistForSite Structure(TemplateOneCheckStructure) {
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure DeletePeriodsStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      editable = [false];
   }
   attribute SiteDescription Text {
      label = "Site Description";
      maxlength = 100;
      editable = [false];
   }
   attribute TemplateId Number {
      label = "Template ID";
      maxlength = 100;
      editable = [false];
   }
   attribute TemplateDescription Text {
      label = "Template Description";
      editable = [false];
      maxlength = 100;
   }
   attribute DeleteFromPeriod Number {
      label = "Delete from Period";
      editable = [false];
      maxlength = 100;
   }
   attribute DeleteToPeriod Number {
      label = "Delete to Period";
   }
}

structure RecalculateAllTemplateDetailsForSiteStructure {
   attribute StartDate Date {
      label = "Period 1 Begin Date";
      required = [true];
   }
}

structure CreatePeriodsStructure {
   attribute Contract Text {
      label = "Template Site";
      maxlength = 100;
      editable = [false];
   }
   attribute ContractDescripton Text {
      label = "Site Description";
      maxlength = 100;
      editable = [false];
   }
   attribute TemplateId Number {
      label = "Template Id";
      editable = [false];
   }
   attribute TemplateDescription Text {
      label = "Template Description";
      maxlength = 100;
      editable = [false];
   }
   attribute StartPeriod Number {
      label = "Starting Period";
      editable = [false];
   }
   attribute NumberOfPeriods Number {
      required = [true];
   }
   attribute PeriodLength Number {
      required = [true];
   }
   attribute PlanPeriodUnit Enumeration(PlanPeriodUnit.PlanPeriodUnit1);
}

structure CopyTemplateStructure {
   attribute SourceContract Text {
      label = "Template Site";
      maxlength = 100;
      editable = [false];
   }
   attribute SourceContractDesc Text {
      label = "Site Description";
      maxlength = 100;
      editable = [false];
   }
   attribute SourceTemplateId Number {
      label = "Template ID";
      editable = [false];
   }
   attribute SourceTemplateDesc Text {
      label = "Template Description";
      maxlength = 100;
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      required = [true];
      format = uppercase;
   }
   attribute ContractDesc Text {
      label = "Site Description";
      maxlength = 100;
   }
   attribute TemplateId Number {
      label = "Template ID";
      maxlength = 5;
      required = [true];
   }
   attribute TemplateDescription Text {
      label = "Template Description";
      maxlength = 100;
      required = [true];
   }
   attribute LastRecalculationDate Date {
      label = "Period 1 Begin Date";
      required = [true];
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference TemplateIdRef(Contract, TemplateId) to PeriodTemplateLov(Contract, TemplateId) {
      label = "Template ID";
   }
}

structure TemplateOneCheckStructure {
   attribute TemplateOne Number;
   attribute TemplateOnePeriods Number;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------