-----------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------
-- 2021-12-16  SBalLK  SC21R2-6853, Modified MpccomSystemEvent entity by increasing Description length from 20 to 200.
-- 2020-11-16  Aabalk  SC2020R1-9294, Converted Boolean attributes into Enumerations where necessary.
-- 2018-10-25  SUDELK  SCUXXW4-7812, Converted from frmMpccomSystemEvent using MTG Version: 1.32
-----------------------------------------------------------------------------------------------
projection BusinessEventHandling;
component MPCCOM;
layer Core;
description "Use this API to view details of system events used in IFS Applications";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset MpccomSystemEventSet for MpccomSystemEvent;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity MpccomSystemEvent {
   crud = Read, Update;
   from = "mpccom_system_event";
   exec = "MPCCOM_SYSTEM_EVENT_API";
   supportwarnings = [true];
   use attributes = Description;
   attribute SystemEventId Text {
      fetch = "system_event_id";
      label = "System Event ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "System Event Description";
      maxlength = 200;
      required = [true];
   }
   array TransactionInfoArray(SystemEventId)to MpccomTransactionCode(TransactionCode);
   array PostingInfoArray(SystemEventId) to AccountingEvent(EventCode);
   array PostingTypeArray(SystemEventId) to AccEventPostingType(EventCode);
}

@Override
entity MpccomTransactionCode {
   crud = Read;
   from = "mpccom_transaction_code";
   exec = "MPCCOM_TRANSACTION_CODE_API";
   supportwarnings = [true];
   use attributes = Direction, TransitQtyDirection, InventoryStatDirection, IntrastatDirection, OrderType, TransactionSource, CorrespondingTransaction, Notc, TransBasedRevalGroup, PartTracing, ActualCostReceipt, CostSource, ConsignmentStock, SourceApplication;
   attribute TransactionCode Text {
      fetch = "transaction_code";
      label = "System Event ID";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Direction Text {
      fetch = "direction";
      label = "Direction";
      maxlength = 1;
      required = [true];
   }
   attribute TransitQtyDirection Enumeration(StockQuantityDirection) {
      fetch = "transit_qty_direction_db";
      label = "Transit Qty Direction";
      editable = [false];
   }
   attribute InventoryStatDirection Enumeration(InventoryStatDirection) {
      fetch = "inventory_stat_direction_db";
      label = "Inv Statistics Direction";
      required = [true];
      editable = [ETag = null];
   }
   attribute IntrastatDirection Enumeration(IntrastatDirection) {
      fetch = "intrastat_direction_db";
      label = "Intrastat Direction";
      editable = [false];
   }
   attribute OrderType Enumeration(OrderType) {
      fetch = "order_type_db";
      label = "Order Type";
      editable = [false];
   }
   attribute TransactionSource Enumeration(MpccomTransactionSource) {
      fetch = "transaction_source_db";
      label = "Transaction Source";
      editable = [false];
   }
   attribute CorrespondingTransaction Text {
      fetch = "corresponding_transaction";
      label = "Corresponding Transaction";
      maxlength = 10;
      format = uppercase;
   }
   attribute CorrespondingTransactionDescription Text {
      fetch = "Mpccom_System_Event_API.Get_Description(CORRESPONDING_TRANSACTION) ";
   }

   attribute Notc Text {
      fetch = "notc";
      label = "NOTC";
      maxlength = 2;
      editable = [ETag = null];
   }
   attribute Description Text {
      fetch = "Notc_API.Get_Description(notc)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TransBasedRevalGroup Enumeration(TransBasedRevalGroup) {
      fetch = "trans_based_reval_group_db";
      label = "Trans Based Reval Group";
      required = [true];
   }
   attribute PartTracing Enumeration(PartTracing) {
      fetch = "part_tracing_db";
      label = "Part Tracing";
      required = [true];
   }
   attribute ActualCostReceipt Enumeration(ActualCostReceipt) {
      fetch = "actual_cost_receipt_db";
      label = "Periodic WA Receipt";
      editable = [false];
   }
   attribute CostSource Enumeration(TransactionCostSource) {
      fetch = "cost_source_db";
      label = "Unit Cost Source";
      editable = [false];
   }
   attribute ConsignmentStock Enumeration(ConsignmentStockTrans) {
      fetch = "consignment_stock_db";
      label = "Consignment Stock";
      required = [true];
   }
   attribute SourceApplication Enumeration(SourceApplication) {
      fetch = "source_application_db";
      label = "Created by Object/Function";
      editable = [false];
   }
   attribute ReceiptIssueTrackingDb Boolean("TRUE", "FALSE") {
      fetch = "receipt_issue_tracking_db";
      label = "At Receipt and Issue";
      editable = [false];
   }
   attribute CompanyOwnedAllowedDb Boolean("TRUE", "FALSE") {
      fetch = "company_owned_allowed_db";
      label = "Company Owned";
      editable = [false];
   }
   attribute CompanyRentAssetAllowedDb Boolean("TRUE", "FALSE") {
      fetch = "company_rent_asset_allowed_db";
      label = "Company Rental Asset";
      editable = [false];
   }
   attribute CustomerOwnedStockDb Boolean("TRUE", "FALSE") {
      fetch = "decode(customer_owned_stock_db, 'CUSTOMER OWNED STOCK ALLOWED','TRUE','FALSE')";
      label = "Customer Owned";
      editable = [false];
   }
   attribute SupplierLoanedStockDb Boolean("TRUE", "FALSE") {
      fetch = "decode(supplier_loaned_stock_db, 'SUPPLIER LOANED STOCK ALLOWED', 'TRUE', 'FALSE')";
      label = "Supplier Loaned";
      editable = [false];
   }
   attribute SupplierRentedAllowedDb Boolean("TRUE", "FALSE") {
      fetch = "supplier_rented_allowed_db";
      label = "Supplier Rented";
      editable = [false];
   }
   attribute SystemEventId Text {
      fetch = "NULL";
   }
   reference NotcRef(Notc) to Notc(Notc) {
      label = "NOTC";
   }
}

@Override
entity AccountingEvent {
   crud = Read, Update;
   from = "accounting_event";
   exec = "ACCOUNTING_EVENT_API";
   supportwarnings = [true];
   exclude attributes = AuthorizeId, ConsignmentEvent, DeliveryOverheadFlag, Description, SalesOverheadFlag;
   attribute EventCode Text {
      fetch = "event_code";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute OnlineFlag Enumeration(BookingOnline) {
      fetch = "online_flag_Db";
      label = "Codestring Validation Online";
      required = [true];
      editable = [true];
   }
   attribute MaterialAdditionFlag Enumeration(MaterialAddition) {
      fetch = "material_addition_flag_db";
      label = "Material Overhead";
      required = [true];
      editable = [true];
   }
   attribute SalesOverheadFlagDb Boolean("TRUE", "FALSE") {
      fetch = "sales_overhead_flag_db";
      label = "Sales Overhead";
      required = [true];
      editable = [true];
   }
   attribute Oh1BurdenFlag Enumeration(OverheadCost1) {
      fetch = "oh1_burden_flag_db";
      label = "Machine Overhead 1";
      required = [true];
      editable = [true];
   }
   attribute Oh2BurdenFlagDb Enumeration(OverheadCost2) {
      fetch = "oh2_burden_flag_db";
      label = "Machine Overhead 2";
      required = [true];
      editable = [true];
   }
   attribute MsAdditionFlag Enumeration(AdministrationOverhead) {
      fetch = "ms_addition_flag_db";
      label = "Administration Overhead";
      required = [true];

   }
   attribute DeliveryOverheadFlag Enumeration(DeliveryOverhead) {
      fetch = "delivery_overhead_flag_db";
      label = "Delivery Overhead";
      required = [true];
      editable = [true];
   }
   attribute LaborOverheadFlag Enumeration(LaborOverhead) {
      fetch = "labor_overhead_flag_db";
      label = "Labor Overhead";
      required = [true];
      editable = [true];
   }
   attribute GeneralOverheadFlag Enumeration(GeneralOverhead) {
      fetch = "general_overhead_flag_db";
      label = "General Overhead";
      required = [true];
      editable = [true];
   }
   array AccEventPostingTypeArray(EventCode) to AccEventPostingType(EventCode);
}
@Override
entity AccEventPostingType {
   crud = Read;
   from = "acc_event_posting_type";
   exec = "ACC_EVENT_POSTING_TYPE_API";
   use attributes = DebitCredit, PreAccountingFlag, ProjectAccountingFlag;
   attribute EventCode Text {
      fetch = "event_code";
      label = "Posting Event";
      maxlength = 10;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute StrCode Text {
      fetch = "str_code";
      label = "Posting Type";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
   }
   attribute PostingTypeDescription Text {
      fetch = "Posting_Ctrl_API.Get_Posting_Type_Desc(Site_API.Get_Company(user_allowed_site_api.get_default_site),str_code)";
      label = "Posting Type Description";
      maxlength = 100;
      editable = [false];
   }
   attribute DebitCredit Text {
      fetch = "debit_credit";
      label = "Debit/Credit";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
   }
   attribute PreAccountingFlag Text {
      fetch = "pre_accounting_flag";
      label = "Pre-Posting";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
   }
   attribute ProjectAccountingFlag Text {
      fetch = "project_accounting_flag";
      label = "Project Pre-Posting";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
}
