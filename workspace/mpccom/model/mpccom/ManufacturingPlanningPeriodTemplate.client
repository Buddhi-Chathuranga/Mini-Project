----------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------     --------------------------------------------------------------
-- 2021-03-02  WaSalk     SC2020R1-12728, Added DynamicComponentDependency CUSSCH and MFGSTD to entry BasicDataPeriodTemplateMaintenanceNavEntry
-- 2021-03-02             and BasicDataPeriodTemplateMaintenanceMfgstdNavEntry .
-- 2019-07-01  SBalLK     SCUXXW4-22329, Modified CheckTemplateOne command to validate for default template.
-- 2019-05-29  SBalLK     SCUXXW4-21895, Removed "Records." from before crud action method.
-- 2018-12-23  SBalLK     Issue SCUXXW4-15108, Passed site description from site reference which disturbed during the implementation of issue SCUXXW4-7800.
-- 2018-11-01  SBalLK     Issue SCUXXW4-7595, Added Copy Template Functionality.
-- 2018-10-29  ErRalk     Issue SCUXXW4-7650, Added Delete Periods dialog.
-- 2018-10-29  SBalLK     Issue SCUXXW4-7610, Added Create Periods dialog.
-- 2018-10-26  SBalLK     Issue SCUXXW4-7560, Implemented RecalculateCurrentTemplateDeCommand, RecalculateallTemplateDetailCommand commands.
-- 2018-10-26  ErRalk     SCUXXW4-7800, Converted from frmDynamicPeriodTemplate using MTG Version: 1.32
----------------------------------------------------------------------------------------

client ManufacturingPlanningPeriodTemplate;
component MPCCOM;
layer Core;
projection ManufacturingPlanningPeriodTemplateHandling;
include fragment UserAllowedSiteLovSelector;
include fragment PeriodTemplateLovSelector;
include fragment RecalculatePeriodTemplateDialog;
warningsenabled = PeriodTemplate;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   @DynamicComponentDependency CUSSCH
   entry BasicDataPeriodTemplateMaintenanceNavEntry parent CusschNavigator.CustomerScheduleBasicData at index 300 {
      label = "Period Template Maintenance";
      page Form home PeriodTemplate;
   }
   @DynamicComponentDependency MFGSTD
   entry BasicDataPeriodTemplateMaintenanceMfgstdNavEntry parent MfgstdNavigator.ManufacturingStandardBasicDataNavEntry at index 800 {
      label = "Period Template Maintenance";
      page Form home PeriodTemplate;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using PeriodTemplateSet {
   label = "Period Template Maintenance";
   crudactions {
      before command CheckTemplateOne;
   }
   selector PeriodTemplateSelector;
   group DynamicPeriodTemplateGroup;
   list PeriodTemplateDetailsList(PeriodTemplateDetailsArray);

   commandgroup CommandGroupCmdGroup {

      command CreatePeriodsCommand;
      command DeletePeriodsCommand;
      command CopyCurrentTemplateCommand;
      command RecalculateCurrentTemplateDeCommand;
      command RecalculateAllTemplateDetailCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CreatePeriodsCommand for PeriodTemplate {
   label = "Create Periods";
   enabled = [TemplateId != null];
   variable StartPeriodVar {
      type = Number;
   }
   variable NoOfPeriodVar {
      type = Number;
   }
   variable PeriodLengthVar {
      type = Number;
   }
   variable PeriodUnitVar {
      type = Text;
   }
   execute {
      call GetMaxPeriodNo(Contract, TemplateId) into StartPeriodVar;
      dialog CreatePeriodsDialog(Contract, ContractRef.ContractDesc, TemplateId, TemplateDescription, StartPeriodVar) into(PeriodUnitVar, NoOfPeriodVar, PeriodLengthVar) {
         when CANCEL {
            exit CANCEL;
         }
         when OK {
            call CreatePeriods(PeriodUnitVar, StartPeriodVar, NoOfPeriodVar, PeriodLengthVar);
         }
      }
   }
}
command DeletePeriodsCommand for PeriodTemplate {
   label = "Delete Periods";
   enabled = [TemplateId != null];
   variable DeleteFromPeriodVar {
      type = Text;
   }
   execute {
      call GetMaxPeriodNo(Contract, TemplateId) into DeleteFromPeriodVar;
      set DeleteToPeriod = 1;
      dialog DeleteManufacturingPlanningTemplatePeriodsDialog(Contract, ContractRef.ContractDesc, TemplateId, TemplateDescription, DeleteFromPeriodVar, DeleteToPeriod) into(DeleteToPeriod) {
         when OK {
            call DeletePeriods(DeleteFromPeriodVar, DeleteToPeriod);
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command CopyCurrentTemplateCommand for PeriodTemplate {
   label = "Copy Current Template";
   enabled = [TemplateId != null];
   variable TargetBeginDateVar {
      type = Date;
   }
   execute {
      call GetRecalculationDate(Contract, TemplateId) into TargetBeginDateVar;
      dialog CopyTemplateDialog(Contract, ContractRef.ContractDesc, TemplateId, TemplateDescription, TargetBeginDateVar) {
         when OK {
            refresh;
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command RecalculateCurrentTemplateDeCommand for PeriodTemplate {
   label = "Recalculate Period Template";
   enabled = [TemplateId != null];
   variable ReturnStartDateVar {
      type = Date;
   }
   variable ReturnClendarIdVar {
      type = Text;
   }
   execute {
      call GetSiteDate(Contract) into StartDate;
      dialog RecalculatePeriodTemplateDialog(Contract, ContractRef.ContractDesc, TemplateId, TemplateDescription, CalendarId, StartDate) into(ReturnStartDateVar, ReturnClendarIdVar) {
         when OK {
            call RecalculateTemplate(ReturnStartDateVar, ReturnClendarIdVar);
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command RecalculateAllTemplateDetailCommand for PeriodTemplate {
   label = "Recalculate all Template Details for Site";
   enabled = [TemplateId != null];
   variable ReturnStartDateVar {
      type = Date;
   }
   execute {
      call GetSiteDate(Contract) into StartDate;
      dialog RecalculateAllTemplateDetailsForSiteDialog(StartDate) into(ReturnStartDateVar) {
         when OK {
            call RecalculateSiteTemplate(ReturnStartDateVar);
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command InitCommand for CreatePeriodsStructure {
   execute {
      set NumberOfPeriods = 0;
      set PeriodLength = 1;
      set StartPeriod = "#{StartPeriod + 1}";
   }
}
command InitCommand for CopyTemplateStructure {
   execute {
      set Contract = SourceContract;
      set TemplateId = SourceTemplateId;
      set TemplateDescription = SourceTemplateDesc;
   }
}
command CheckPeriodLength for PeriodTemplateDetail {
   bulkexecute {
      ifany [PeriodLength = 0] {
         error("Decimals or zero is not allowed in Period Lengths.");
         exit CANCEL;
      }
   }
}
command CheckTemplateOne for PeriodTemplate {
   variable TemplateOneCheckVar {
      type = Structure(TemplateOneCheckStructure);
   }
   execute {
      call CheckDefaultTemplateExistForSite(Contract)into TemplateOneCheckVar;

      if [TemplateOneCheckVar.TemplateOne = 0] {
         info("The system will now create a template header and details for template 1 and site ${Contract}. Then template header for template ${TemplateId} will be created. This will take approximately 1 minute to complete.");
      }
      else {
         if [TemplateOneCheckVar.TemplateOnePeriods = 0] {
            info("The system will now recreate details for template 1 for site ${Contract}. Then template header for template ${TemplateId} will be created. This will take approximately 1 minute to complete.");
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector PeriodTemplateSelector for PeriodTemplate {
   orderby = Contract, TemplateId;
   label = "";
   static Contract;
   static ContractDescription;
   static TemplateId;
   static TemplateDescription;
   fieldorder = Contract, ContractDescription, TemplateId, TemplateDescription;
}

---------------------------------- GROUPS -----------------------------------
group DynamicPeriodTemplateGroup for PeriodTemplate {
   label = "";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field ContractRef.ContractDesc {
      searchable = false;
   }
   field TemplateId {
      size = Small;
   }
   field TemplateDescription;
   lov CalendarIdRef with ReferenceWorkTimeCalendarSelector {
      description = CalendarIdRef.Description;
   }
   field RecalculationDate;
}

group DeletePeriodsGroup for DeletePeriodsStructure {
   label = "";
   field Contract;
   field SiteDescription {
      size = Large;
   }
   field TemplateId;
   field TemplateDescription {
      size = Large;
   }
   field DeleteFromPeriod;
   field DeleteToPeriod;
}

group RecalculateAllTemplateDetailsForSiteGroup for RecalculateAllTemplateDetailsForSiteStructure {
   label = "Recalculation Parameter";
   field StartDate;
}

group CreatePeriodsGroup for CreatePeriodsStructure {
   label = "";
   field Contract {
      size = Small;
   }
   field ContractDescripton;
   field TemplateId {
      size = Small;
   }
   field TemplateDescription;
   field StartPeriod;
   field NumberOfPeriods;
   field PeriodLength;
}

group PlanPeriodUnitsGroup for CreatePeriodsStructure {
   label = "Plan Period Units";
   radiogroup PlanPeriodUnit;
}

group CopyTemplateSourceGroup for CopyTemplateStructure {
   label = "Source Template";
   field SourceContract {
      size = Small;
   }
   field SourceContractDesc;
   field SourceTemplateId {
      size = Small;
   }
   field SourceTemplateDesc;
}

group CopyTemplateTargetGroup for CopyTemplateStructure {
   label = "Target Template";

   lov ContractRef with ReferenceUserAllowedSiteLovSelector
      {
      size = Small;
   }
   field ContractRef.ContractDesc;
   lov TemplateIdRef with ReferencePeriodTemplateLovSelector using TemplateIdLovUserWhere(Contract) {
      size = Small;
      validate command {
         execute {
            if [TemplateIdRef != null] {
               set TemplateDescription = TemplateIdRef.TemplateDescription;
            }
         }
      }
   }
   field TemplateDescription;
   field LastRecalculationDate;
}

----------------------------------- LISTS -----------------------------------
list PeriodTemplateDetailsList for PeriodTemplateDetail {
   label = "Period Template Details";
   orderby = PeriodNo;
   crudactions {
      before command CheckPeriodLength;

	  new {
         enabled = [parent.TemplateId != 1];
      }
      edit {
         enabled = [parent.TemplateId != 1];
      }
   }
   field PeriodNo;
   field PeriodLength {
      size = Small;
      editable = [TemplateId != 1];
   }
   field PlanPeriodUnit {
      size = Small;
      editable = [TemplateId != 1];
   }
   field LengthInWorkDays;
   field PeriodBeginDate;
   field PeriodEndDate;
   // fieldranking PeriodNo, PeriodLength, PlanPeriodUnit, LengthInWorkDays, PeriodBeginDate, PeriodEndDate;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog RecalculateAllTemplateDetailsForSiteDialog for RecalculateAllTemplateDetailsForSiteStructure {
   label = "Recalculate all Template Details for Site";
   input(StartDate);
   output(StartDate);

   group RecalculateAllTemplateDetailsForSiteGroup;

   command Ok {
      enabled = [StartDate != null];
   }
   command Cancel;
}

dialog CreatePeriodsDialog for CreatePeriodsStructure {
   label = "Create Periods";
   input(Contract, ContractDescripton, TemplateId, TemplateDescription, StartPeriod) {
      command InitCommand;
   }
   output(PlanPeriodUnit, NumberOfPeriods, PeriodLength);

   group CreatePeriodsGroup;
   group PlanPeriodUnitsGroup;

   command Ok {
      enabled = [NumberOfPeriods != null and PeriodLength != null];
      execute {
         if[PeriodLength = 0] {
            error("Decimals or zero is not allowed in Period Lengths.");
         }
         else {
            exit OK;
         }
      }
   }
   command Cancel;
}

dialog DeleteManufacturingPlanningTemplatePeriodsDialog for DeletePeriodsStructure {
   label = "Delete periods for Site ${Contract} Template ID ${TemplateId}.";
   input(Contract, SiteDescription, TemplateId, TemplateDescription, DeleteFromPeriod, DeleteToPeriod);
   output(DeleteToPeriod);

   group DeletePeriodsGroup;
   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [DeleteToPeriod != null];
      }
      command Cancel;
   }
}

dialog CopyTemplateDialog for CopyTemplateStructure {
   label = "Copy Template";

   input(SourceContract, SourceContractDesc, SourceTemplateId, SourceTemplateDesc, LastRecalculationDate) {
      command InitCommand;
   }

   group CopyTemplateSourceGroup;
   group CopyTemplateTargetGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [Contract != null and TemplateId != null and TemplateDescription != null and LastRecalculationDate != null];

         variable TemplateExist {
            type = Number;
         }
         execute {
            call CheckTemplateExist(Contract, TemplateId) into TemplateExist;

            if[TemplateExist = 1] {
               confirm("Template ${TemplateId} for Site ${Contract} already exists. Replace existing template details?") {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call StartCopyTemplate(SourceContract, SourceTemplateId, Contract, TemplateId, TemplateIdRef.TemplateDescription, LastRecalculationDate) {
               when SUCCESS {
                  exit OK;
               }
               when FAIL {
                  if [not(error.Message = null)] {
                     error("${error.Message}");
                  }
               }
            }
         }
      }
      command Cancel;
   }
}
---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------