-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2022-01-10  Asawlk  SC21R2-7040, Added annotation DynamicComponentDependency to DocumentAddressRef.
-- 2021-08-11  NiDalk  SC21R2-2232, Modified NewCommnad to correct navigate.
-- 2019-06-07  STHOSE  SCUXXW4-22139, Bug correction
-- 2019-02-19  SAGELK  SCUXXW4-7700, Converted from dlgSiteList MTG Version: 1.34.
-- 2018-12-22  SURBLK  SCUXXW4-7845, Converted from frmSiteClusterStructure
--                     SCUXXW4-7835, Converted from frmSiteClusterNodeDetail
--                     SCUXXW4-7835, Converted from frmSiteClusterNodeDetail
--                     SCUXXW4-8015, Converted from tbwSiteClusterLevel
--                     SCUXXW4-7620, Converted from dlgCreateSubNodes
--                     SCUXXW4-7585, Converted from dlgConnectSites
--                     SCUXXW4-7850, Converted from frmSiteClusterTree
--                     SCUXXW4-7905, Converted from tbwConnectedSites MTG Version: 1.34.
-----------------------------------------------------------------------------
client SiteCluster;
component MPCCOM;
layer Core;
projection SiteClusterHandling;
include fragment UserAllowedSiteLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SiteClusterNavEntry parent EnterpNavigator.SiteMenu at index 400 {
      label = "Site Cluster";
      tree SiteClusterNodeTree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using SiteClusterSet {
   label = "Site Cluster";
   selector SiteClusterSelector;
   group SiteClusterStructureGroup;

   tabs {
      tab {
         label = "Node Information";
         singleton NodeInformationSingleton(SiteClusterNodeInfoArray);
         group NodeInformationGroup bind NodeInformationSingleton;
      }
      tab {
         label = "Connected Sites";
         singleton ConnectedSitesSingleton(SiteClusterNodeInfoArray);
         list ConnectedSitesList(ConnectedSiteArray) bind ConnectedSitesSingleton;
      }
      tab {
         label = "Levels";
         list SiteClusterLevelList(SiteClusterLevelArray);
      }
   }
   command NewCommnad;
   commandgroup CommandGroupCmdGroup {
      command SiteClusterTranslationCommand;
   }
}

page ChildNode using SiteClusterNodeSet {
   label = "Site Cluster";
   crudactions {
      delete {
         enabled = [false];

      }
      edit {
         enabled = [false];
      }
   }

   selector SiteClusterNodeSelector;
   group SiteClusterChildNodeGroup;

   tabs {
      tab {
         label = "Node Information";
         singleton NodeInformationSingleton(SiteClusterChildNodeInfoArray);
         group NodeInformationChildGroup bind NodeInformationSingleton;
      }
      tab {
         label = "Connected Sites";
         list ConnectedSitesList(ChildNodeConnectedSiteArray);
      }
   }

   commandgroup CommandGroupCmdGroup {
      command SiteClusterTranslationCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
command NewCommnad for SiteCluster {
   mode = Global;

   label = "New";
   icon = "new";
   style = IconOnly;


   variable SiteClusterId {
      type = Text;
   }
   variable SiteClusterDescription {
      type = Text;
   }

   execute {
      dialog CreateSiteClusterDialog into(SiteClusterId, SiteClusterDescription) {
         when OK {
            call CreateSiteCluster(SiteClusterId, SiteClusterDescription);
            if [SiteClusterId != null] {
               navigate "tree/SiteCluster/SiteClusterNodeTree?$filter=SiteClusterId eq $[SiteClusterId]";
            }
         }
      }
   }
}


command SiteClusterTranslationCommand for SiteCluster {
   label = "Translation";
   mode = Global;
   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'MPCCOM' and Lu eq 'SiteCluster'";
   }
}

command SiteClusterLevelTranslationCommand for SiteClusterLevel {
   label = "Translation";
   mode = Global;
   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'MPCCOM' and Lu eq 'SiteClusterLevel'";
   }
}

command CreateSubNodesCommand for SiteClusterNode {
   label = "Create Sub Nodes";
   enabled = [Contract = null];
   execute {
      assistant CreateSubNodesAssistant(SiteClusterId, SiteClusterNodeId) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command DisconnectSitesCommand for Site {
   label = "Disconnect Sites";
   mode = SelectedRecords;
   enabled = [true];
   execute {
      call DisconnectSite(parent.SiteClusterId, Contract);
   }
}

command DeleteNodeCommand for SiteClusterNode {
   label = "Delete Node";
   enabled = [true];
   execute {
      messagebox("",
      information, "Do you want to delete node ${SiteClusterNodeId} and all its sub nodes?") {
         when "Yes" {
            call DeleteNode(SiteClusterId, SiteClusterNodeId);
         }
         when "No" {
            exit;
         }
      }
   }
}

command ConnectSitesCommand for SiteClusterNode {
   label = "Connect Sites";
   enabled = [Contract = null];
   execute {
      assistant ConnectSitesAssistant(SiteClusterId, SiteClusterNodeId) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command QuerySite {
   label = "Query Sites";
   enabled = [true];
   execute {
      assistant SiteListAssistant(SiteClusterId, SiteClusterNodeId, Objkey) {
         when CANCEL {
            refresh;
         }
         when OK {
            refresh;
         }
      }
   }
}

command CreateConnectSiteCommand {
   label = "OK";
   execute {
      call CreateConnectSite(component.SiteList.Selection, ParentObjkey);
      exit OK;
   }
}

command CreateSubNodeCommand for CreateSubNodesVirtual {
   label = "OK";
   enabled = [component.SubNodesList.RowCount > 0];

   execute {
      call CreateSubNode(Objkey, SiteClusterNodeId);
      exit OK;
   }
}

command ConnectSiteCommand {
   label = "OK";
   execute {
      call ConnectSites(Objkey);
      exit OK;
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector SiteClusterSelector for SiteCluster {
   label = "${SiteClusterId} - ${Description}";
   static SiteClusterId;
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group SiteClusterStructureGroup for SiteCluster {
   label = "";
   lov SiteClusterIdRef with SiteClusterSelector {
      description = SiteClusterIdRef.Description;
   }
}

group SiteClusterChildNodeGroup for SiteClusterNode {
   label = "";
   lov SiteClusterIdRef with SiteClusterSelector {
      description = SiteClusterIdRef.Description;
   }
   lov SiteClusterNodeIdRef with SiteClusterNodeSelector
      {
      description = SiteClusterNodeIdRef.Description;
   }
   field ParentNode;
}

group NodeInformationGroup for SiteClusterNode {
   label = "";
   lov SiteClusterNodeIdRef with SiteClusterNodeSelector
      {
      label = "Node";
      description = SiteClusterNodeIdRef.Description;
   }
   field ParentNode;
   field ContractRef;
   field SiteDescription;
   field LevelName;
}
group NodeInformationChildGroup for SiteClusterNode {
   label = "";
   field ContractRef;
   field SiteDescription;
   field LevelName;
}

group NewSiteClusterGroup for SiteClusterStructure {
   label = "";
   field SiteClusterId;
   field Description;
}
--------------------------------- SINGLETON ---------------------------------

singleton NodeInformationSingleton for SiteClusterNode {
   commandgroup CreateSubNodeCmdGroup {
      command CreateSubNodesCommand;
      command DeleteNodeCommand;
      command ConnectSitesCommand;
   }
}

singleton ConnectedSitesSingleton for SiteClusterNode;

----------------------------------- LISTS -----------------------------------

list SiteClusterLevelList for SiteClusterLevel {
   field ClusterLevel;
   field Description;

   commandgroup CommandGroupCmdGroup {
      command SiteClusterLevelTranslationCommand;
   }
}

list ConnectedSitesList for Site {
   label = "";

   field Contract;
   field Description;
   field CompanyRef;
   lov DeliveryAddressRef with ReferenceCompanyAddressLovPubSelector;
   @DynamicComponentDependency DISCOM
   lov DocumentAddressRef with ReferenceCompanyAddressLovPubSelector;
   @DynamicComponentDependency MSCOM
   field SiteMscomInfoRef.MessageReceiver {
      label = "Message Receiver";
   }
   lov DistCalendarIdRef with ReferenceWorkTimeCalendarLovSelector;
   lov ManufCalendarIdRef with ReferenceWorkTimeCalendarLovSelector;
   field Offset;
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.NegativeOnHand {
      label = "Negative On Hand";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.PurchInvValueMethod {
      label = "Inventory Valuation Method for Purchased Parts";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.ManufInvValueMethod {
      label = "Inventory Valuation Method for Manufactured Parts";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.ExtServiceCostMethod {
      label = "External Service Cost Method";
   }
   @DynamicComponentDependency DISCOM
   field SiteDiscomInfoRef.PurchCompMethod {
      label = "Purchase Component Method";
   }
   @DynamicComponentDependency MFGSTD
   field SiteMfgstdInfoRef.StructureUpdate {
      label = "Structure Update";
   }
   @DynamicComponentDependency MFGSTD
   field SiteMfgstdInfoRef.StructureStateDefault {
      label = "Default Structure Status";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.CountDiffAmount {
      label = "Max Counting Difference Amt";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.CountDiffPercentage {
      label = "Max Counting Difference (%)";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.PickingLeadtime {
      label = "Picking Lead Time";
   }
   @DynamicComponentDependency MFGSTD
   field SiteMfgstdInfoRef.DispositionOfQuotation {
      label = "Disposition of Quotations";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.InvoiceConsideration {
      size = Small;
      label = "Supplier Invoice Consideration";
   }
   //field LastPeriodicWADate;
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.MrbAvailControlId {
      size = Small;
      label = "Default Avail Control ID";
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.CostDefaultsManually;
   @DynamicComponentDependency DISCOM
   field SiteDiscomInfoRef.CustOrderPricingMethod {
      size = Small;
      label = "Customer Order Pricing Method";
   }
   @DynamicComponentDependency DISCOM
   field SiteDiscomInfoRef.CustOrderDiscountMethod {
      size = Small;
      label = "Customer Order Discount Method";
   }
   field BranchRef {
      size = Small;
   }
   @DynamicComponentDependency DISCOM
   field PrintConditionCodeOnCustomerOrderReports {
      size = Small;
      // truelabel = "<Define text to show when field is checked or 'True' will be shown>";
      // falselabel = "<Define text to show when field is checked or 'False' will be shown>";
   }
   @DynamicComponentDependency DISCOM
   field PrintConditionCodeOnPurchaseOrderReports {
      size = Small;
      // truelabel = "<Define text to show when field is checked or 'True' will be shown>";
      // falselabel = "<Define text to show when field is checked or 'False' will be shown>";
   }
   @DynamicComponentDependency MSCOM
   field SiteMscomInfoRef.DispCondWorkOrder {
      size = Small;
      label = "Print Condition Code on Work Order Reports";
      // truelabel = "<Define text to show when field is checked or 'True' will be shown>";
      // falselabel = "<Define text to show when field is checked or 'False' will be shown>";
   }
   @DynamicComponentDependency MFGSTD
   field SiteMfgstdInfoRef.VimMroEnabled {
      size = Small;
      label = "VIM MRO Usage";
      // truelabel = "<Define text to show when field is checked or 'True' will be shown>";
      // falselabel = "<Define text to show when field is checked or 'False' will be shown>";
   }
   @DynamicComponentDependency MFGSTD
   field ReceiptSOInBackground {
      size = Small;
      // truelabel = "<Define text to show when field is checked or 'True' will be shown>";
      // falselabel = "<Define text to show when field is checked or 'False' will be shown>";
   }
   @DynamicComponentDependency ORDER
   field InternalCustomerRef {
      size = Small;
   }
   @DynamicComponentDependency PURCH
   field InternalSupplierRef {
      size = Small;
   }
   @DynamicComponentDependency INVENT
   field SiteInventInfoRef.AvgWorkDaysPerWeek {
      label = "Average Working Days per Week";
   }
   @DynamicComponentDependency MFGSTD
   field SiteMfgstdInfoRef.DopAutoClose {
      size = Small;
      label = "DOP Auto Close";
      // truelabel = "<Define text to show when field is checked or 'True' will be shown>";
      // falselabel = "<Define text to show when field is checked or 'False' will be shown>";
   }
   // fieldranking Contract, Description, CompanyRef, DistCalendarIdRef, ManufCalendarIdRef, Offset, SiteInventInfoRef.NegativeOnHand, SiteInventInfoRef.PurchInvValueMethod, SiteInventInfoRef.ManufInvValueMethod, SiteInventInfoRef.ExtServiceCostMethod;

   commandgroup CommandGroupCmdGroup {
      command DisconnectSitesCommand;
   }
}

list SubNodesList for SubNodesVirtual {
   field SiteClusterNodeId {
      validate command {
         variable NodeExistVar {
            type = Text;
         }
         execute {
            call CheckNodeExists(SiteClusterId, SiteClusterNodeId) into NodeExistVar;
            if [NodeExistVar = "1"] {
               set SiteClusterNodeId = null;
               error("Site Custer Node Already Exists.");
            }

         }
      }
   }
   field Description;
}

list ConnectSitesList for ConnectSitesVirtual {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector using FilterContract(SiteClusterId) {
      description = ContractRef.ContractDesc;
      validate command {
         execute {
            set Description = ContractRef.ContractDesc;
         }
      }
   }
   field SiteRef.Company {
      size = Small;
      label = "Company";
   }
}

list SiteList for SiteListVirtual {
   disable = Create, Update, Delete;

   lov ContractRef with ReferenceUserAllowedSiteLovSelector;
   field ContractDesc;
   // fieldranking ContractRef, ContractDesc;
}

-------------------------------- ASSISTANTS ---------------------------------
assistant CreateSubNodesAssistant using CreateSubNodesSet {
   label = "Create Sub Nodes to Node: ${SiteClusterNodeId}";
   input(SiteClusterId, SiteClusterNodeId);
   singlestep {
      list SubNodesList(SubNodesArray);
   }
   command CreateSubNodeCommand;
}

assistant ConnectSitesAssistant using ConnectSitesParentSet {
   label = "Connect Sites to  Node: ${SiteClusterNodeId}";
   input(SiteClusterId, SiteClusterNodeId);
   singlestep {
      list ConnectSitesList(ConnetSitesArray);
   }
   command ConnectSiteCommand;
   command Cancel;
   command QuerySite;
}

assistant SiteListAssistant using SiteListParentSet {
   label = "Site List";
   input(SiteClusterId, SiteClusterNodeId, ParentObjkey);

   singlestep {
      list SiteList using FilterContract(SiteClusterId);
   }
   command CreateConnectSiteCommand;
   command Cancel;
}

----------------------------------- TREES -----------------------------------

tree SiteClusterNodeTree using SiteClusterSet {
   label = "Site Cluster";
   selector SiteClusterSelector;
   command NewCommnad;
   rootnode RootNode {
      label = "${SiteClusterId} - ${Description}";
      navigate {
         page Form {
            filter(SiteClusterId, SiteClusterId);
         }
      }
      iconset {
         icon "folder-alt";
      }
      connections {
         node ChildNode(SiteClusterNodeArray);
      }
   }
   node ChildNode for SiteClusterNode {
      label = "${SiteClusterNodeId} - ${Description}";
      navigate {
         page ChildNode {
            filter(SiteClusterId, SiteClusterId);
            filter(SiteClusterNodeId, SiteClusterNodeId);
         }
      }
      iconset {
         icon "folder-alt" {
            expression = [Contract = null];
         }
         icon "circle-solid" {
            expression = [Contract != null];
         }
      }
      connections {
         node ChildNode(SiteClusterStructureNodes);
      }
   }
}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

dialog CreateSiteClusterDialog for SiteClusterStructure {
   label = "Create Site Cluster";
   output(SiteClusterId, Description);
   group NewSiteClusterGroup;
   command Ok {
      enabled = [SiteClusterId != null and Description != null];
   }
   command Cancel;
}
