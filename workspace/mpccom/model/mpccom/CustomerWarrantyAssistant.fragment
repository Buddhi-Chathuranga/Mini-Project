----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-02-23  NiDalk  SC2020R1-12544, Removed passing ParentObjkey to UpdateWarrantyLanguage, DeleteWarrantyLanguage, UpdateWarrantyConditions and DeleteWarrantyCondition.
-- 2020-11-19  UdGnlk  SC2020R1-6777, Modified ValidFrom and ValidTo columns visible condition in CustomerWarrantyConditionList.
-- 2019-05-23  fgusse  SCUXXW4-20688, Added translatable to DocumentTextCommand
-- 2019-05-13  DaZase  SCUXXW4-19725, Added initialcheck to all unbounded actions.
-- 2019-04-05  SAGELK  SCUXXW4-15935, Converted the Customer Warranty Type Entity to a virtual, so that the
--                                    connection is maintained between lists is maintained. And fixed the
--                                    issue of creating a new warranty when the warranty type is shared and
--                                    a crud action is triggered in Conditions,warranty language and document text.
-- 2019-03-12  PIPELK  SCUXXW4-15251, Added SelectMethod paraameter to control View/Edit function of the assitant
-- 2019-01-10  SWiclk  SCUXXW4-7925, Converted tbwCustWarrantyCondition using MTG Version: 1.34
-- 2019-01-10  SWiclk  SCUXXW4-8050, Converted tbwWarrantyLangDesc using MTG Version: 1.34
-- 2019-01-10  SWiclk  SCUXXW4-7630, Converted dlgCustomerTemplate using MTG Version: 1.34
-- 2019-01-10  SWiclk  SCUXXW4-7645, Converted dlgCustomerWarranty using MTG Version: 1.34
----------------------------------------------------------------------------------------------------------
fragment CustomerWarrantyAssistant;
component MPCCOM;
layer Core;
description "Use this fragment to create a Customer Warranty. Use Copy from template button to choose a customer warranty type template which will be copied to your warranty.";

include fragment DocumentText;
include fragment PartCatalogLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant CustomerWarrantyAssistant using PartInformationSet {
   label = "Customer Warranty";
   savemode = OnLostFocus;
   input(PartNo, SerialNo, CustomerWarrantyId, SelectMethod);
   output(CustomerWarrantyId);

   singlestep {
      group PartInformationWarrantyGroup;
      list CustomerWarrantyTypeList(CustomerWarrantyTypeArray);
      list CustomerWarrantyConditionList(CustomerWarrantyConditionArray) bind CustomerWarrantyTypeList {
         collapsed = [true];
      }

//      // Below list may be needed to show ValidFrom and ValidTo dates. Cannot use yet since cannot pass selected record from cust warranty type as keys.
//      list CustomerWarrantyConditionList using GetCustomerWarrantyConditions(component.CustomerWarrantyTypeList.Selection, PartNo, SerialNo) {
//         copyoncruddefault(CustomerWarrantyId) to(WarrantyId);
//         collapsed = [true];
//      }

      list WarrantyLanguageDescriptionList(WarrantyLanguageDescriptionArray) bind CustomerWarrantyTypeList {
         collapsed = [true];
      }
   }
   command Cancel;
}

//DOCUMENT TEXT
//This assistant is overtaken to send the objkey of customer warranty type virtual. The objkey is used to get the record of the warranty type virtual
//and the objkey is the key value. This is needed to make a copy of the customer warranty when the warranty id is shared. Since there is no parent-child
//relationship betweeen the Document Text (or NotesText Virtual) and any of the entity or virtuals in the first assistant (Condition, Language Description
// Warranty Type) so cannot access the objkey.
@Overtake
assistant DocumentText using NoteTexts {
   label = "Document Text ${Label}";
   input(NoteId, Label, ReadOnly, WarrantyTypeObjkey);
   --Note that the variable sent in as "Label" must have the property "translatable = true"
   steps {
      step {
         list NotesList(DetailNotes);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      label = "Close";
      execute {
         exit OK;
      }
   }
   cancel command {
      visible = [false];
   }
   restart command {
      visible = [false];
   }
}


--------------------------------- COMMANDS ----------------------------------
// This command is used to pass the objkey and the part_no of PartInformationVirtual to CRUD_Create of CustWarrantyType.
command PassVirtualRecordWarrantyConditionCommand for CustomerWarrantyCondition {
   execute {
      set ParentObjkey = parent.Objkey;
   }
}

command PassVirtualRecordWarrantylanguageCommand for WarrantyLanguageDescription {
   execute {
      set ParentObjkey = parent.Objkey;
   }
}

command PassNoteTextVirtualObjkey for DocumentText {
   execute {
      set ParentObjkey = parent.Objkey;
   }
}

command DocumentTextsCommand for WarrantyLanguageDescription {
   label = "Document Text";
   enabled = [true];
   variable LabelVar;
   variable SelectMethodVar {
      type = Boolean;
   }

   execute {
      set LabelVar = " for Customer Warranty Type ID - ${WarrantyTypeId}, Language Code - ${LanguageCode}" {
         translatable = true;
      }
      if [parent.parent.SelectMethod] {
         set SelectMethodVar = false;
      }
      else {
         set SelectMethodVar = false;
      }
//      Calling the overtaken assistant.
      assistant DocumentText(NoteId, LabelVar, SelectMethodVar, parent.Objkey) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

command OpenCustomerTemplateDialogCommand for PartInformationVirtual {
   label = "Copy From Template";
   mode = Global;
   enabled = [SelectMethod];
   execute {
      //These values are passed from PartInformationVirtual
      dialog CustomerTemplateDialog(CustomerWarrantyId, PartNo, SerialNo, Objkey) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command DeleteWarrantyConditionCommand for CustomerWarrantyCondition {
   label = "";
   mode = SelectedRecords;
   icon = "delete";
   enabled = [ValidFrom = null and ValidTo = null and parent.parent.SelectMethod];
   execute {
      call DeleteWarrantyCondition();
   }
}

command DeleteWarrantylanguageCommand for WarrantyLanguageDescription {
   label = "";
   mode = SelectedRecords;
   icon = "delete";
   enabled = [parent.parent.SelectMethod];
   execute {
      call DeleteWarrantyLanguage();
   }
}

command DeleteDocumentTextCommand for DocumentText {
   label = "";
   mode = SelectedRecords;
   icon = "delete";
   enabled = [not parent.ReadOnly];
   execute {
      call DeleteDocumentText(parent.Objkey);
   }
}

// OK button of Copy From Template
command Ok for CustomerTemplateStructure {
   label = "Ok";
   execute {
      call CopyCustomerWarrantyFromTemplate(WarrantyId, TemplateId, PartNo, SerialNo, VirtualObjkey);
   }
}

// Close button of Assistant
command Cancel for PartInformationVirtual {
   label = "Close";
   execute {
      exit OK;
   }
}

---------------------------------- GROUPS -----------------------------------
group PartInformationWarrantyGroup for PartInformationVirtual {
   label = "";
   lov PartNoRef with ReferencePartCatalogLovSelector {
      label = "Part No";
      description = PartNoRef.Description;
   }
   field SerialNo {
      visible = [SerialNo != null or SerialNo = ""];
   }
   field CustomerWarrantyId {
      label = "Customer Warranty ID";
   }
}

group CustomerTemplateGroup for CustomerTemplateStructure {
   label = "Copy From Template";
   lov TemplateIdRef with ReferenceCustWarrantyTypeTempSelector {
      description = TemplateIdRef.WarrantyDescription;
   }
}
----------------------------------- LISTS -----------------------------------
list CustomerWarrantyTypeList for CustomerWarrantyTypeVirtual {
   label = "Warranty Types";
   editmode = SingleRowEdit;
   crudactions {
      new {
         enabled = [parent.SelectMethod];
      }
      edit {
         enabled = [parent.SelectMethod];
      }
      delete {
         enabled = [parent.SelectMethod];
      }
   }

   field WarrantyId {
      columnexclude = [true];
   }
   field WarrantyTypeId;
   field WarrantyDescription;
   field MaterialCostTypeDb {
      size = Small;
   }
   field ExpensesCostTypeDb {
      size = Small;
   }
   field FixedPriceCostTypeDb {
      size = Small;
   }
   field PersonnelCostTypeDb {
      size = Small;
   }
   field ExternalCostTypeDb {
      size = Small;
   }
   field NoteText {
      multiline = true;
      height = small;
   }

   command OpenCustomerTemplateDialogCommand;
}

// tbwCustWarrantyCondition - Cust Warranty Condition
list CustomerWarrantyConditionList for CustomerWarrantyCondition {
   label = "Warranty Conditions";
   crudactions {
      update action = UpdateWarrantyConditions;
      before command PassVirtualRecordWarrantyConditionCommand;
      new {
         enabled = [parent.parent.SelectMethod];
      }
      edit {
         enabled = [parent.parent.SelectMethod];
      }
      delete {
         // Delete is handled in DeleteWarrantyConditionCommand.
         enabled = [false];
      }
   }

   lov ConditionIdRef with ReferenceWarrantyConditionSelector {
      label = "Condition";
      description = ConditionIdRef.ConditionDescription;
      validate command {
         execute {
            set MinValue = ConditionIdRef.MinValue;
            set MaxValue = ConditionIdRef.MaxValue;
         }
      }
   }
   //TODO:{
   // Serial_Warranty_Dates_API.Get_Valid_From(partno,serialno, warranty_id,warranty_type_id,condition_id)
   // Here the PartNo and SerialNo are not available in projection and there is no way to pass parent values from client to fetch at populating.
   field ValidFrom {
      // accessing a value in PartInformationVirtual
      columnvisible = [parent.parent.SerialNo != null];
   }
   field ValidTo {
      // accessing a value in PartInformationVirtual
      columnvisible = [parent.parent.SerialNo != null];
   }
   // }-------------
   field MinValue;
   field MaxValue;
   field ConditionIdRef.TimeUnit {
      size = Small;
      label = "Time Unit";
   }
   field OtherUomRef {
      size = Small;
   }
   // fieldranking ConditionIdRef, Description, ValidFrom, ValidTo, MinValue, MaxValue, WarrantyConditionRef.TimeUnit, OtherUomRef;
   command DeleteWarrantyConditionCommand;
}

// tbwWarrantyLangDesc - Warranty Lang Desc
list WarrantyLanguageDescriptionList for WarrantyLanguageDescription {
   label = "Warranty Language Descriptions";
   crudactions {
      update action = UpdateWarrantyLanguage;
      before command PassVirtualRecordWarrantylanguageCommand;
      new {
         enabled = [parent.parent.SelectMethod];
      }
      edit {
         enabled = [parent.parent.SelectMethod];
      }
      delete {
         // Delete is handled in DeleteWarrantylanguageCommand.
         enabled = [false];
      }
   }

   field LanguageCodeRef {
      size = Small;
   }
   field WarrantyTypeDesc;
   field DocumentText {
      size = Small;
   }
   // fieldranking LanguageCodeRef, WarrantyTypeDesc, DocumentText;

   command DeleteWarrantylanguageCommand;
   commandgroup CommandGroupCmdGroup {
      command DocumentTextsCommand;
   }
}

@Override
list NotesList for DocumentText {
   crudactions {
      before command PassNoteTextVirtualObjkey;
      update action = UpdateDocumentText;

      delete {
      // Delete is handled in DeleteDocumentTextCommand.
         enabled = [false];
      }
   }
   command DeleteDocumentTextCommand;
}

---------------------------------- DIALOGS ----------------------------------
//dlgCustomerTemplate - Copy From Template
dialog CustomerTemplateDialog for CustomerTemplateStructure {
   label = "Copy From Template";
   input(WarrantyId, PartNo, SerialNo, VirtualObjkey);
   group CustomerTemplateGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartInformationSet for PartInformationVirtual;
entityset CustomerWarrantyConditionSet for CustomerWarrantyCondition;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerWarrantyCondition using CustWarrantyCondition {
   crud = Create, Read, Update, Delete;
   from = "cust_warranty_condition";
   exec = "CUST_WARRANTY_CONDITION_API";
   keys = WarrantyId, WarrantyTypeId, ConditionId;
   use attributes = MinValue, MaxValue;

   attribute VirtualObjkey Text {
      fetch = "NULL";
      required = [false];
   }
   attribute PartNo Text {
      fetch = "NULL";
      required = [false];
   }
   attribute SerialNo Text {
      fetch = "NULL";
      required = [false];
   }
   attribute WarrantyId Number {
      fetch = "warranty_id";
      label = "Warranty ID";
      required = [true];
      editable = [ETag = null];
   }
   attribute WarrantyTypeId Text {
      fetch = "warranty_type_id";
      label = "Warranty Type ID";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ConditionId Number {
      fetch = "condition_id";
      label = "Condition ID";
      required = [true];
      editable = [ETag = null];
   }
   attribute ValidFrom Date {
      fetch = "NULL";
      label = "Valid From";
      editable = [false];
   }
   attribute ValidTo Date {
      fetch = "NULL";
      label = "Valid To";
      editable = [false];
   }
   attribute MinValue Number {
      fetch = "min_value";
      label = "Min Value";
   }
   attribute MaxValue Number {
      fetch = "max_value";
      label = "Max Value";
   }
   attribute OtherUom Text {
      fetch = "Warranty_Condition_API.Get_Unit_Code(condition_id)";
      editable = [false];
   }

   reference ConditionIdRef(ConditionId) to WarrantyCondition(ConditionId) {
      label = "Condition ID";
   }
   reference OtherUomRef(OtherUom) to IsoUnit(UnitCode) {
      label = "Other UoM";
   }
   attribute ParentObjkey Text {
      fetch = "NULL";
   }

   action UpdateWarrantyConditions {
      parameter MinValue Number;
      parameter MaxValue Number;
   }
   action DeleteWarrantyCondition {
      ludependencies = CustomerWarrantyTypeVirtual, CustWarrantyCondition, WarrantyLangDesc;
   }
}

@Override
entity WarrantyLanguageDescription using WarrantyLangDesc {
   crud = Create, Read, Update, Delete;
   keys = LanguageCode, WarrantyId, WarrantyTypeId {
      where = "LANGUAGE_CODE = :LanguageCode and WARRANTY_ID = :WarrantyId and WARRANTY_TYPE_ID = :WarrantyTypeId";
   }
   use attributes = WarrantyTypeDesc, NoteId;
   ludependencies = CustomerWarrantyTypeVirtual, DocumentText;

   attribute WarrantyTypeDesc Text {
      label = "Warranty Type Description";
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute ParentObjkey Text {
      fetch = "NULL";
   }

   reference LanguageCodeRef(LanguageCode) to IsoLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference WarrantyTypeIdRef(WarrantyId, WarrantyTypeId) to CustWarrantyType(WarrantyId, WarrantyTypeId) {
      label = "Warranty Type ID";
   }

   action UpdateWarrantyLanguage {
      parameter WarrantyTypeDesc Text;
   }
   action DeleteWarrantyLanguage {
      ludependencies = CustomerWarrantyTypeVirtual, CustWarrantyCondition, WarrantyLangDesc;
   }
}

@Override
entity DocumentText {
   attribute ParentObjkey Text {
      fetch = "NULL";
   }
   action UpdateDocumentText {
      parameter ParentObjkey Text;
      parameter NoteText Text;
   }
   action DeleteDocumentText {
      parameter ParentObjkey Text;
   }
}

---------------------------------- ACTIONS ----------------------------------
action CopyCustomerWarrantyFromTemplate {
   initialcheck none;
   ludependencies = CustomerWarrantyTypeVirtual, CustWarrantyCondition, WarrantyLangDesc;

   parameter WarrantyId Number;
   parameter TemplateId Text;
   parameter PartNo Text;
   parameter SerialNo Text;
   parameter GrandParentObjkey Text;
}

--------------------------------- FUNCTIONS ---------------------------------
// This function is not used yet but may need to fetch ValidFrom and ValidTo dates.
//function GetCustomerWarrantyConditions List < Entity(CustomerWarrantyCondition) > {
//   basedon CustomerWarrantyConditionSet;
//   parameter Selection Text;
//   parameter PartNo Text;
//   parameter SerialNo Text;
//
//   alterattribute ValidFrom {
//      fetch = "Serial_Warranty_Dates_API.Get_Valid_From(:PartNo, :SerialNo, warranty_id, warranty_type_id, condition_id)";
//   }
//   alterattribute ValidTo {
//      fetch = "Serial_Warranty_Dates_API.Get_Valid_To(:PartNo, :SerialNo, warranty_id, warranty_type_id, condition_id)";
//   }
//}
-------------------------------- STRUCTURES ---------------------------------
structure CustomerTemplateStructure {
   attribute WarrantyId Number;
   attribute TemplateId Text {
      label = "Template ID";
      maxlength = 20;
      required = [true];
      format = uppercase;
   }
   attribute PartNo Text;
   attribute SerialNo Text;
   attribute VirtualObjkey Text;

   reference TemplateIdRef(TemplateId) to CustWarrantyTypeTemp(TemplateId) {
      label = "Template ID";
   }
}

--------------------------------- VIRTUALS ----------------------------------
virtual PartInformationVirtual {
   ludependencies = CustomerWarrantyTypeVirtual, CustWarrantyCondition, WarrantyLangDesc, DocumentText;

   attribute PartNo Text {
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute CustomerWarrantyId Number {
      editable = [false];
      label = "Customer Warranty ID";

   }

   reference PartNoRef(PartNo)to PartCatalog(PartNo);
   array CustomerWarrantyTypeArray(CustomerWarrantyId) to CustomerWarrantyTypeVirtual(WarrantyId);
}

virtual CustomerWarrantyTypeVirtual {
   ludependencies = CopyCustomerWarrantyFromTemplate, CustWarrantyCondition, WarrantyLangDesc, DocumentText;

   attribute WarrantyId Number {
      label = "Warranty ID";
      required = [false];
   }
   attribute WarrantyTypeId Text {
      label = "Warranty Type ID";
      maxlength = 100;
      format = uppercase;
      required = [true];
      editable = [ETag = null];
   }
   attribute WarrantyDescription Text {
      label = "Description";
      maxlength = 35;
      editable = [true];
   }
   attribute MaterialCostTypeDb Boolean("MATERIAL", "NOT MATERIAL") {
      label = "Material Cost";
      required = [true];
   }
   attribute MaterialCostType Text {
      required = [false];
   }
   attribute ExpensesCostTypeDb Boolean("EXPENSES", "NOT EXPENSES") {
      label = "Expenses";
      required = [true];
   }
   attribute ExpensesCostType Text {
      required = [false];
   }
   attribute FixedPriceCostTypeDb Boolean("FIXED PRICE", "NOT FIXED PRICE") {
      label = "Fixed Price";
      required = [true];
   }
   attribute FixedPriceCostType Text {
      required = [false];
   }
   attribute PersonnelCostTypeDb Boolean("PERSONNEL", "NOT PERSONNEL") {
      label = "Personnel Cost";
      required = [true];
   }
   attribute PersonnelCostType Text {
      required = [false];
   }
   attribute ExternalCostTypeDb Boolean("EXTERNAL", "NOT EXTERNAL") {
      label = "External Cost";
      required = [true];
   }
   attribute ExternalCostType Text {
      required = [false];
   }
   attribute NoteText Text {
      label = "Note";
      maxlength = 2000;
   }
   attribute SelectMethod Boolean("TRUE", "FALSE") {
      fetch = "'TRUE'";
      required = [true];
   }
   //   Grand Parent Values (PartInformationVirtual)
   attribute PartNo Text {
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute ObjId Text;
   attribute ObjVersion Text;
   attribute Objgrants Text;

   reference WarrantyTypeIdRef(WarrantyId, WarrantyTypeId) to CustWarrantyType(WarrantyId, WarrantyTypeId) {
      label = "Warranty Type ID";
   }
   array CustomerWarrantyConditionArray(WarrantyId, WarrantyTypeId) to CustomerWarrantyCondition(WarrantyId, WarrantyTypeId);
   array WarrantyLanguageDescriptionArray(WarrantyId, WarrantyTypeId) to WarrantyLanguageDescription(WarrantyId, WarrantyTypeId);
}

@Override
virtual NoteTextVirtual {
   attribute WarrantyTypeObjkey Text;
}
