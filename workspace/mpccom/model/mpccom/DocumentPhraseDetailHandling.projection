----------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------
-- 2018-11-26  RuLiLk  SCUXXW4-7790, Converted frmDocumentPhraseCompanies using MTG Version: 1.33
-- 2018-11-18  MalLlk  SCUXXW4-7797, Converted frmDocumentPhraseDetail using MTG Version: 1.33
----------------------------------------------------------------------------------------------

projection DocumentPhraseDetailHandling;
component MPCCOM;
layer Core;
description "Use this API to enter delivery routes. Delivery routes can be used for both customer orders and purchase orders.";
category Users;
include fragment SiteCompanyLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PhraseOnDocumentSet for PhraseOnDocument;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PhraseOnDocument {
   ludependencies = DocumentPhraseCompany;

   attribute DocumentCode Text {
      label = "Document";
   }
   attribute ValidUntil Date {
      label = "Valid To";
   }
   attribute ValidForAllCompaniesDb Boolean("TRUE", "FALSE") {
      label = "Valid for All Companies";
      required = [true];
   }

   reference MpccomDocumentRef(DocumentCode) to MpccomDocument(DocumentCode) {
      label = "Document";
   }
   reference MpccomPhraseRef(PhraseId) to MpccomPhrase(PhraseId) {
      label = "Phrase ID";
   }
   array DocumentPhraseCompanyArray(DocumentCode, PhraseId, ValidFrom) to DocumentPhraseCompany(DocumentCode, PhraseId, ValidFrom);
}
@Override
entity DocumentPhraseCompany {
   ludependencies = PhraseOnDocument, DocumentPhraseSite;

   crud = Create, Read, Update, Delete;

   exclude attributes = ValidForAllSites, ValidUntil;
   attribute DocumentCode Text {
      fetch = "document_code";
      label = "Document";
      maxlength = 3;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PhraseId Text {
      fetch = "phrase_id";
      label = "Phrase ID";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ValidFrom Date {
      fetch = "valid_from";
      label = "Valid From";
      required = [true];
      editable = [ETag = null];
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ValidForAllSitesDb Boolean("TRUE", "FALSE") {
      fetch = "valid_for_all_sites_db";
      label = "Valid for All Sites";
      required = [true];
      default = "TRUE";

   }

   reference CompanyRef(Company) to Company(Company);
   array DocumentPhraseSiteArray(DocumentCode, PhraseId, ValidFrom, Company) to DocumentPhraseSite(DocumentCode, PhraseId, ValidFrom, Company);

}
@Override
entity DocumentPhraseSite {
   ludependencies = DocumentPhraseCompany;
   crud = Create, Read, Delete;

   exclude attributes = ValidUntil;
   attribute DocumentCode Text {
      fetch = "document_code";
      label = "Document";
      maxlength = 3;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PhraseId Text {
      fetch = "phrase_id";
      label = "Phrase ID";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ValidFrom Date {
      fetch = "valid_from";
      label = "Valid From";
      required = [true];
      editable = [ETag = null];
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
      maxlength = 20;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   reference CompanyRef(DocumentCode, PhraseId, ValidFrom, Company) to DocumentPhraseCompany(DocumentCode, PhraseId, ValidFrom, Company) {
      label = "Company";
   }
   reference ContractRef(Company, Contract) to SiteCompanyLov(Company, Contract) {
      label = "Site";
   }
}


------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------