--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-08-03  MaEelk  SCUXXW4-7567, Converted dlgCancelReason into a fragment.
--------------------------------------------------------------------------------------

fragment CancelReasonDialog;
component MPCCOM;
layer Core;
description "This API is used to give a cancel reason.";
//include fragment OrderCancelReasonLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
---------------------------------- GROUPS -----------------------------------
group CancelReasonGroup for CancelReasonStructure {
   label = "";

   lov CancellationReasonRef with ReferenceOrderCancelReasonLovSelector using ValidCancellationReasons(UsedByEntity) {
      description = CancellationReasonRef.ReasonDescription;
      size = Large;
   }
}

command InitCommand for CancelReasonStructure {
   execute {
      set UsedByEntity = "%^${EntityCode}^%";
   }
}

---------------------------------- DIALOGS ----------------------------------
dialog CancelReasonDialog for CancelReasonStructure {
   label = "Cancel Reason";

   input(EntityCode) {
      command InitCommand;
   }

   output(CancellationReason);
   group CancelReasonGroup;

   command Ok {
      execute {
         if [CancellationReason != null] {
            call CheckCancellationReasonExist(CancellationReason, EntityCode);
         }
         exit OK;
      }
   }
   command Cancel;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
structure CancelReasonStructure {
   attribute CancellationReason Text {
      label = "Cancellation Reason";
      maxlength = 10;
      format = uppercase;
   }
   attribute ReasonDescription Text {
      label = "Reason Description";
      maxlength = 2000;
   }
   attribute UsedByEntity Text {
      editable = [false];
   }
   attribute EntityCode Text {
      editable = [false];
   }
   attribute LabelText Text {
      editable = [false];
   }
   attribute MarkdownText Text {
      editable = [false];
   }
   reference CancellationReasonRef(CancellationReason) to OrderCancelReasonLov(CancelReason) {
      label = "Cancellation Reason";
   }
}

---------------------------------- ACTIONS ----------------------------------
//! TODO: Should be refactored as a function!
action CheckCancellationReasonExist {
   initialcheck none;
   parameter CancellationReason Text;
   parameter EntityCode Text;

}

--------------------------------- FUNCTIONS ---------------------------------
function ValidCancellationReasons List < Entity(OrderCancelReasonLov) > {
   parameter UsedByEntity Text;

   where = "USED_BY_ENTITY_DB like :UsedByEntity  AND OBJSTATE IN ('Active')";

}
