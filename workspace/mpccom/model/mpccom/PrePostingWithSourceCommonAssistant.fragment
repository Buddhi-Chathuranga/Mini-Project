--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-11-24  Cpeilk  SC21R2-6128, Changed attribute Selection from Text to LongText to support larger selection of rows.
-- 2021-05-15  SBalLK  Bug 159388(SCZ-14871), Made client lists persistmode to "Entity" for make dialog button title to more consistent.
-- 2020-11-18  JaThlk  Bug 156505 (SCZ-12441), Allowed to use both code part and description values when searching in the Pre Posting fields.
-- 2020-06-08  HarWlk  Bug 154290 (SCZ-10320), Modify the GetAccountNo function to filter the results using Company
-- 2020-02-08  NiEdlk  SCXTEND-3091, Added functionality to support preposting of multiple lines.
--------------------------------------------------------------------------------------

fragment PrePostingWithSourceCommonAssistant;
component MPCCOM;
layer Core;
description "Common Code for Pre Posting with Source";

--------------------------------- FRAGMENTS ---------------------------------
include fragment PreAccountCodepartAMpccomSelector;
include fragment PreAccountingCodepartBSelector;
include fragment PreAccountingCodepartCSelector;
include fragment PreAccountingCodepartDSelector;
include fragment PreAccountingCodepartESelector;
include fragment PreAccountingCodepartFSelector;
include fragment PreAccountingCodepartGSelector;
include fragment PreAccountingCodepartHSelector;
include fragment PreAccountingCodepartISelector;
include fragment PreAccountingCodepartJSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------------- LISTS -----------------------------------
list PreAccountingList for PreAccounting {
   label = "";
   editmode = SingleCellEdit;
   persistmode = Entity;
   savemode = Buffer;
   crudactions {
      before command BeforeSavePreAccountingCommand;
      new {
         enabled = [false];
      }
      edit {
         enabled = [not parent.ReadOnly];
      }
      delete {
         enabled = [false];
      }
   }
   lov AccountNoRef with ReferencePreAccountCodepartAMpccomSelector using GetAccountNo(parent.VoucherDate, parent.Company) {
      description = AccountNoRef.Description;
      search = Account, Description;
      label = "${parent.LabelAccountNo}";
      editable = [parent.AllowedAccountNo = "ALLOWED" or parent.AllowedAccountNo = "MANDATORY"];
      columnvisible = [parent.AllowedAccountNo != "DISABLED"];
      searchable = false;
      required = [parent.AllowedAccountNo = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(AccountNo, "A", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoBRef with ReferencePreAccountingCodepartBSelector using GetCodePartB(parent.VoucherDate, parent.LabelCodenoB, parent.Company) {
      description = CodenoBRef.Description;
      search = CodeB, Description;
      label = "${parent.LabelCodenoB}";
      editable = [parent.AllowedCodenoB = "ALLOWED" or parent.AllowedCodenoB = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoB != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoB = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoB, "B", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoCRef with ReferencePreAccountingCodepartCSelector using GetCodePartC(parent.VoucherDate, parent.LabelCodenoC, parent.Company) {
      description = CodenoCRef.Description;
      search = CodeC, Description;
      label = "${parent.LabelCodenoC}";
      editable = [parent.AllowedCodenoC = "ALLOWED" or parent.AllowedCodenoC = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoC != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoC = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoC, "C", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoDRef with ReferencePreAccountingCodepartDSelector using GetCodePartD(parent.VoucherDate, parent.LabelCodenoD, parent.Company) {
      description = CodenoDRef.Description;
      search = CodeD, Description;
      label = "${parent.LabelCodenoD}";
      editable = [parent.AllowedCodenoD = "ALLOWED" or parent.AllowedCodenoD = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoD != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoD = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoD, "D", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoERef with ReferencePreAccountingCodepartESelector using GetCodePartE(parent.VoucherDate, parent.LabelCodenoE, parent.Company) {
      description = CodenoERef.Description;
      search = CodeE, Description;
      label = "${parent.LabelCodenoE}";
      editable = [parent.AllowedCodenoE = "ALLOWED" or parent.AllowedCodenoE = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoE != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoE = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoE, "E", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoFRef with ReferencePreAccountingCodepartFSelector using GetCodePartF(parent.VoucherDate, parent.LabelCodenoF, parent.Company) {
      description = CodenoFRef.Description;
      search = CodeF, Description;
      label = "${parent.LabelCodenoF}";
      editable = [parent.AllowedCodenoF = "ALLOWED" or parent.AllowedCodenoF = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoF != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoF = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoF, "F", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoGRef with ReferencePreAccountingCodepartGSelector using GetCodePartG(parent.VoucherDate, parent.LabelCodenoG, parent.Company) {
      description = CodenoGRef.Description;
      search = CodeG, Description;
      label = "${parent.LabelCodenoG}";
      editable = [parent.AllowedCodenoG = "ALLOWED" or parent.AllowedCodenoG = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoG != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoG = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoG, "G", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoHRef with ReferencePreAccountingCodepartHSelector using GetCodePartH(parent.VoucherDate, parent.LabelCodenoH, parent.Company) {
      description = CodenoHRef.Description;
      search = CodeH, Description;
      label = "${parent.LabelCodenoH}";
      editable = [parent.AllowedCodenoH = "ALLOWED" or parent.AllowedCodenoH = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoH != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoH = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoH, "H", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoIRef with ReferencePreAccountingCodepartISelector using GetCodePartI(parent.VoucherDate, parent.LabelCodenoI, parent.Company) {
      description = CodenoIRef.Description;
      search = CodeI, Description;
      label = "${parent.LabelCodenoI}";
      editable = [parent.AllowedCodenoI = "ALLOWED" or parent.AllowedCodenoI = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoI != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoI = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoI, "I", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoJRef with ReferencePreAccountingCodepartJSelector using GetCodePartJ(parent.VoucherDate, parent.LabelCodenoJ, parent.Company) {
      description = CodenoJRef.Description;
      search = CodeJ, Description;
      label = "${parent.LabelCodenoJ}";
      editable = [parent.AllowedCodenoJ = "ALLOWED" or parent.AllowedCodenoJ = "MANDATORY"];
      columnvisible = [parent.AllowedCodenoJ != "DISABLED"];
      searchable = false;
      required = [parent.AllowedCodenoJ = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoJ, "J", parent.VoucherDate, parent.Company);
         }
      }
   }
   field ActivitySeq {
      columnvisible = [parent.ProjectConnected];
      searchable = false;
   }
}

list PreAccountingDistributionList for PreAccountingDistribution {
   label = "Distribution";
   editmode = SingleCellEdit;
   persistmode = Entity;
   savemode = Buffer;
   multiselect = [true];
   crudactions {
      before command BeforeSavePreAccountingDistributionCommand;
      new {
         enabled = [not parent.ReadOnly];
      }
      edit {
         enabled = [not parent.ReadOnly];
      }
      delete {
         enabled = [not parent.ReadOnly];
      }
   }
   field Percentage {
      validate command {
         execute {
            if [Percentage < 0 or Percentage > 100] {
               error("The percentage must be between 0 and 100");
               exit;
            }
            if [parent.TotalAmountDist != 0] {
               set Amount = "#{Percentage*parent.TotalAmountDist/100}";
            }
         }
      }
   }
   field Amount {
      label = "Amount";
      format = ifscurrency;
      columnvisible = [parent.TotalAmountDist != 0];
      validate command {
         execute {
            if [parent.TotalAmountDist != 0] {
               if [Amount < 0 or Amount > parent.TotalAmountDist] {
                  error("The amount must be between 0 and ${parent.TotalAmountDist}");
                  exit;
               }
               set Percentage = "#{100*Amount/parent.TotalAmountDist}";
            }
         }
      }
   }
   lov AccountNoRef with ReferencePreAccountCodepartAMpccomSelector using GetAccountNo(parent.VoucherDate, parent.Company) {
      description = AccountNoRef.Description;
      search = Account, Description;
      label = "${parent.LabelAccountNo}";
      editable = [parent.AllowedAccountNoDist != "DISABLED"];
      columnvisible = [parent.AllowedAccountNoDist != "DISABLED"];
      required = [parent.AllowedAccountNoDistDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(AccountNo, "A", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoBRef with ReferencePreAccountingCodepartBSelector using GetCodePartB(parent.VoucherDate, parent.LabelCodenoB, parent.Company) {
      description = CodenoBRef.Description;
      search = CodeB, Description;
      label = "${parent.LabelCodenoB}";
      editable = [parent.AllowedCodenoBDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoBDist != "DISABLED"];
      required = [parent.AllowedCodenoBDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoB, "B", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoCRef with ReferencePreAccountingCodepartCSelector using GetCodePartC(parent.VoucherDate, parent.LabelCodenoC, parent.Company) {
      description = CodenoCRef.Description;
      search = CodeC, Description;
      label = "${parent.LabelCodenoC}";
      editable = [parent.AllowedCodenoCDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoCDist != "DISABLED"];
      required = [parent.AllowedCodenoCDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoC, "C", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoDRef with ReferencePreAccountingCodepartDSelector using GetCodePartD(parent.VoucherDate, parent.LabelCodenoD, parent.Company) {
      description = CodenoDRef.Description;
      search = CodeD, Description;
      label = "${parent.LabelCodenoD}";
      editable = [parent.AllowedCodenoDDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoDDist != "DISABLED"];
      required = [parent.AllowedCodenoDDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoD, "D", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoERef with ReferencePreAccountingCodepartESelector using GetCodePartE(parent.VoucherDate, parent.LabelCodenoE, parent.Company) {
      description = CodenoERef.Description;
      search = CodeE, Description;
      label = "${parent.LabelCodenoE}";
      editable = [parent.AllowedCodenoEDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoEDist != "DISABLED"];
      required = [parent.AllowedCodenoEDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoE, "E", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoFRef with ReferencePreAccountingCodepartFSelector using GetCodePartF(parent.VoucherDate, parent.LabelCodenoF, parent.Company) {
      description = CodenoFRef.Description;
      search = CodeF, Description;
      label = "${parent.LabelCodenoF}";
      editable = [parent.AllowedCodenoFDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoFDist != "DISABLED"];
      required = [parent.AllowedCodenoFDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoF, "F", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoGRef with ReferencePreAccountingCodepartGSelector using GetCodePartG(parent.VoucherDate, parent.LabelCodenoG, parent.Company) {
      description = CodenoGRef.Description;
      search = CodeG, Description;
      label = "${parent.LabelCodenoG}";
      editable = [parent.AllowedCodenoGDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoGDist != "DISABLED"];
      required = [parent.AllowedCodenoGDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoG, "G", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoHRef with ReferencePreAccountingCodepartHSelector using GetCodePartH(parent.VoucherDate, parent.LabelCodenoH, parent.Company) {
      description = CodenoHRef.Description;
      search = CodeH, Description;
      label = "${parent.LabelCodenoH}";
      editable = [parent.AllowedCodenoHDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoHDist != "DISABLED"];
      required = [parent.AllowedCodenoHDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoH, "H", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoIRef with ReferencePreAccountingCodepartISelector using GetCodePartI(parent.VoucherDate, parent.LabelCodenoI, parent.Company) {
      description = CodenoIRef.Description;
      search = CodeI, Description;
      label = "${parent.LabelCodenoI}";
      editable = [parent.AllowedCodenoIDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoIDist != "DISABLED"];
      required = [parent.AllowedCodenoIDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoI, "I", parent.VoucherDate, parent.Company);
         }
      }
   }
   lov CodenoJRef with ReferencePreAccountingCodepartJSelector using GetCodePartJ(parent.VoucherDate, parent.LabelCodenoJ, parent.Company) {
      description = CodenoJRef.Description;
      search = CodeJ, Description;
      label = "${parent.LabelCodenoJ}";
      editable = [parent.AllowedCodenoJDist != "DISABLED"];
      columnvisible = [parent.AllowedCodenoJDist != "DISABLED"];
      required = [parent.AllowedCodenoJDist = "MANDATORY"];
      validate command {
         execute {
            call ValidateCodePart(CodenoJ, "J", parent.VoucherDate, parent.Company);
         }
      }
   }
   field ActivitySeq {
      columnvisible = [parent.ProjectConnected];
   }
   summary = Percentage, Amount;
   fieldranking Percentage, Amount, AccountNoRef, CodenoBRef, CodenoCRef, CodenoDRef, CodenoERef, CodenoFRef, CodenoGRef, CodenoHRef;
}
--------------------------------- COMMANDS ----------------------------------
command BeforeSavePreAccountingCommand for PreAccounting {
   bulkexecute {
      bulkset Company = parent.Company;
      bulkset PrePostingSource = parent.PrePostingSource;
      bulkset VoucherDate = parent.VoucherDate;
   }
}

command BeforeSavePreAccountingDistributionCommand for PreAccountingDistribution {
   bulkexecute {
      if [parent.TotalAmountDist != 0] {
         bulkset LineAmount = Amount;
         bulkset TotalAmount = parent.TotalAmountDist;
         bulkset ValidationType = "AMOUNT";
      }
      else {
         bulkset LineAmount = Percentage;
         bulkset TotalAmount = 100;
         bulkset ValidationType = "PERCENTAGE";
      }
      bulkset Contract = parent.Contract;
      bulkset Company = parent.Company;
      bulkset PrePostingSource = parent.PrePostingSource;
      bulkset VoucherDate = parent.VoucherDate;
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PreAccountingVirtualSet for PreAccountingVirtual;

--------------------------------- ENTITIES ----------------------------------
@Override
entity PreAccountingDistribution using PreAccounting {
   validate action ValidatePreAccountingDistribution;
   crud = Create, Read, Update, Delete;
   from = "pre_accounting";
   exec = "PRE_ACCOUNTING_API";
   keys = ParentPreAccountingId, PreAccountingId {
      where = "PARENT_PRE_ACCOUNTING_ID = :ParentPreAccountingId and PRE_ACCOUNTING_ID = :PreAccountingId";
   }
   use attributes = AccountNo, CodenoB, CodenoC, CodenoD, CodenoE, CodenoF, CodenoG, CodenoH, CodenoI, CodenoJ, ActivitySeq, AmountDistribution;
   attribute Percentage Number {
      fetch = "(amount_distribution * 100)";
      label = "Percentage";
      editable = [true];
      required = [true];
   }
   attribute Amount Number {
      fetch = "Pre_Accounting_API.Get_Distributed_Amount__(pre_accounting_id, total_amount)";
      label = "Amount";
      editable = [true];
      format = ifscurrency;
   }
   attribute AccountNo Text {
      fetch = "account_no";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoB Text {
      fetch = "codeno_b";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoC Text {
      fetch = "codeno_c";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoD Text {
      fetch = "codeno_d";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoE Text {
      fetch = "codeno_e";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoF Text {
      fetch = "codeno_f";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoG Text {
      fetch = "codeno_g";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoH Text {
      fetch = "codeno_h";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoI Text {
      fetch = "codeno_i";
      maxlength = 10;
      format = uppercase;
   }
   attribute CodenoJ Text {
      fetch = "codeno_j";
      maxlength = 10;
      format = uppercase;
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Seq";
      editable = [false];
   }
   attribute ParentPreAccountingId Number {
      fetch = "parent_pre_accounting_id";
      label = "Parent Pre Accounting ID";
      editable = [false];
   }
   attribute PreAccountingId Number {
      fetch = "pre_accounting_id";
      label = "Pre Accounting ID";
      editable = [false];
      default = "Pre_Accounting_API.Get_Next_Pre_Accounting_Id()";
   }
   attribute CompanyRef Text {
      fetch = "company";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute Company Text {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute Contract Text {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute PrePostingSource Text {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute VoucherDate Date {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute TotalAmount Number {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute LineAmount Number {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute ValidationType Text {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }

   reference AccountNoRef(CompanyRef, AccountNo) to PreAccountCodepartAMpccom(Company, Account);
   reference CodenoBRef(CompanyRef, CodenoB) to PreAccountingCodepartB(Company, CodeB);
   reference CodenoCRef(CompanyRef, CodenoC) to PreAccountingCodepartC(Company, CodeC);
   reference CodenoDRef(CompanyRef, CodenoD) to PreAccountingCodepartD(Company, CodeD);
   reference CodenoERef(CompanyRef, CodenoE) to PreAccountingCodepartE(Company, CodeE);
   reference CodenoFRef(CompanyRef, CodenoF) to PreAccountingCodepartF(Company, CodeF);
   reference CodenoGRef(CompanyRef, CodenoG) to PreAccountingCodepartG(Company, CodeG);
   reference CodenoHRef(CompanyRef, CodenoH) to PreAccountingCodepartH(Company, CodeH);
   reference CodenoIRef(CompanyRef, CodenoI) to PreAccountingCodepartI(Company, CodeI);
   reference CodenoJRef(CompanyRef, CodenoJ) to PreAccountingCodepartJ(Company, CodeJ);
}

---------------------------------- ACTIONS ----------------------------------
action ValidateCodePart {
   initialcheck none;
   parameter CodeValue Text;
   parameter CodePart Text;
   parameter VoucherDate Date;
   parameter Company Text;
}

action ResetPreAccountingTotalAmount {
   initialcheck UserAllowedSite(Contract);
   parameter PreAccountingId Number;
   parameter Contract Text;
}

action ValidatePreAccountingDistribution {
   initialcheck none;
   parameter Init Boolean;
   ludependencies = PreAccountingDistribution;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetAccountNo List < Entity(PreAccountCodepartAMpccom) > {
   parameter VoucherDate Date;
   parameter Company Text;
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartB List < Entity(PreAccountingCodepartB) > {
   parameter VoucherDate Date;
   parameter LabelCodenoB Text;
   parameter Company Text;
   alterattribute LabelCodenoB {
      fetch = ":LabelCodenoB";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartC List < Entity(PreAccountingCodepartC) > {
   parameter VoucherDate Date;
   parameter LabelCodenoC Text;
   parameter Company Text;
   alterattribute LabelCodenoC {
      fetch = ":LabelCodenoC";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartD List < Entity(PreAccountingCodepartD) > {
   parameter VoucherDate Date;
   parameter LabelCodenoD Text;
   parameter Company Text;
   alterattribute LabelCodenoD {
      fetch = ":LabelCodenoD";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartE List < Entity(PreAccountingCodepartE) > {
   parameter VoucherDate Date;
   parameter LabelCodenoE Text;
   parameter Company Text;
   alterattribute LabelCodenoE {
      fetch = ":LabelCodenoE";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartF List < Entity(PreAccountingCodepartF) > {
   parameter VoucherDate Date;
   parameter LabelCodenoF Text;
   parameter Company Text;
   alterattribute LabelCodenoF {
      fetch = ":LabelCodenoF";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartG List < Entity(PreAccountingCodepartG) > {
   parameter VoucherDate Date;
   parameter LabelCodenoG Text;
   parameter Company Text;
   alterattribute LabelCodenoG {
      fetch = ":LabelCodenoG";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartH List < Entity(PreAccountingCodepartH) > {
   parameter VoucherDate Date;
   parameter LabelCodenoH Text;
   parameter Company Text;
   alterattribute LabelCodenoH {
      fetch = ":LabelCodenoH";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartI List < Entity(PreAccountingCodepartI) > {
   parameter VoucherDate Date;
   parameter LabelCodenoI Text;
   parameter Company Text;
   alterattribute LabelCodenoI {
      fetch = ":LabelCodenoI";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function GetCodePartJ List < Entity(PreAccountingCodepartJ) > {
   parameter VoucherDate Date;
   parameter LabelCodenoJ Text;
   parameter Company Text;
   alterattribute LabelCodenoJ {
      fetch = ":LabelCodenoJ";
   }
   where = "TRUNC(:VoucherDate) >= VALID_FROM and TRUNC(:VoucherDate) <= VALID_UNTIL and COMPANY = :Company";
}

function MandatoryPrePostingComplete Boolean {
   parameter PreAccountingId Number;
   parameter PostingType Text;
   parameter Contract Text;
}

function CheckMandatoryCodeParts Boolean {
   parameter PreAccountingId Number;
   parameter PostingType Text;
   parameter Contract Text;
   parameter SourceIdentifier Text;
   parameter CheckOnlyProjectCodePart Boolean;
}

function CheckPrepostingEnabled Boolean {
   parameter Company Text;
   parameter PostingType Text;
}

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PreAccounting {
   use attributes = AccountNo, CodenoB, CodenoC, CodenoD, CodenoE, CodenoF, CodenoG, CodenoH, CodenoI, CodenoJ, ActivitySeq, Company, Contract, PrePostingSource;
   attribute PreAccountingId Number {
      label = "Pre-Accounting ID";
      editable = [false];
   }
   attribute AccountNo Text {
      format = uppercase;
   }
   attribute CodenoB Text {
      format = uppercase;
   }
   attribute CodenoC Text {
      format = uppercase;
   }
   attribute CodenoD Text {
      format = uppercase;
   }
   attribute CodenoE Text {
      format = uppercase;
   }
   attribute CodenoF Text {
      format = uppercase;
   }
   attribute CodenoG Text {
      format = uppercase;
   }
   attribute CodenoH Text {
      format = uppercase;
   }
   attribute CodenoI Text {
      format = uppercase;
   }
   attribute CodenoJ Text {
      format = uppercase;
   }
   attribute ActivitySeq Text {
      label = "Activity Sequence";
      editable = [false];
   }
   attribute CompanyRef Text {
      fetch = "company";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute Company Text {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute Contract Text {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute PrePostingSource Text {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   attribute VoucherDate Date {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [false];
   }
   reference AccountNoRef(CompanyRef, AccountNo) to PreAccountCodepartAMpccom(Company, Account);
   reference CodenoBRef(CompanyRef, CodenoB) to PreAccountingCodepartB(Company, CodeB);
   reference CodenoCRef(CompanyRef, CodenoC) to PreAccountingCodepartC(Company, CodeC);
   reference CodenoDRef(CompanyRef, CodenoD) to PreAccountingCodepartD(Company, CodeD);
   reference CodenoERef(CompanyRef, CodenoE) to PreAccountingCodepartE(Company, CodeE);
   reference CodenoFRef(CompanyRef, CodenoF) to PreAccountingCodepartF(Company, CodeF);
   reference CodenoGRef(CompanyRef, CodenoG) to PreAccountingCodepartG(Company, CodeG);
   reference CodenoHRef(CompanyRef, CodenoH) to PreAccountingCodepartH(Company, CodeH);
   reference CodenoIRef(CompanyRef, CodenoI) to PreAccountingCodepartI(Company, CodeI);
   reference CodenoJRef(CompanyRef, CodenoJ) to PreAccountingCodepartJ(Company, CodeJ);
}

--------------------------------- VIRTUALS ----------------------------------
virtual PreAccountingVirtual {
   attribute PostingType Text;
   attribute PreAccountingId Number;
   attribute Contract Text;
   attribute Company Text;
   attribute VoucherDate Date;
   attribute ValidationDate Date;
   attribute ReadOnly Boolean;
   attribute ProjectConnected Boolean;
   attribute PostingTypeDist Text;
   attribute Allowed Text;
   attribute AllowedAccountNo Text;
   attribute AllowedCodenoB Text;
   attribute AllowedCodenoC Text;
   attribute AllowedCodenoD Text;
   attribute AllowedCodenoE Text;
   attribute AllowedCodenoF Text;
   attribute AllowedCodenoG Text;
   attribute AllowedCodenoH Text;
   attribute AllowedCodenoI Text;
   attribute AllowedCodenoJ Text;
   attribute LabelAccountNo Text;
   attribute LabelCodenoB Text;
   attribute LabelCodenoC Text;
   attribute LabelCodenoD Text;
   attribute LabelCodenoE Text;
   attribute LabelCodenoF Text;
   attribute LabelCodenoG Text;
   attribute LabelCodenoH Text;
   attribute LabelCodenoI Text;
   attribute LabelCodenoJ Text;
   attribute AllowedDist Text;
   attribute AllowedAccountNoDist Text;
   attribute AllowedCodenoBDist Text;
   attribute AllowedCodenoCDist Text;
   attribute AllowedCodenoDDist Text;
   attribute AllowedCodenoEDist Text;
   attribute AllowedCodenoFDist Text;
   attribute AllowedCodenoGDist Text;
   attribute AllowedCodenoHDist Text;
   attribute AllowedCodenoIDist Text;
   attribute AllowedCodenoJDist Text;
   attribute SameContract Text;
   attribute SameAccountNo Text;
   attribute SameCodeB Text;
   attribute SameCodeC Text;
   attribute SameCodeD Text;
   attribute SameCodeE Text;
   attribute SameCodeF Text;
   attribute SameCodeG Text;
   attribute SameCodeH Text;
   attribute SameCodeI Text;
   attribute SameCodeJ Text;
   attribute SameActivitySeq Text;
   attribute TotalAmountDist Number;
   attribute Selection LongText {
      inlined = [true];
   }
   attribute MultipleRecords Boolean;
   attribute PrePostingSource Text;

   array PreAccountingDistributionArray(PreAccountingId) to PreAccountingDistribution(ParentPreAccountingId);
}
