--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-03-10  SBalLK  SC2020R1-12867, Added dynamic dependency for navigator entries.
-- 2021-02-02  UdGnlk  SCZ-12333, Removed PlanPeriodUnitEngineeringNavEntry as there is no such entry in MpccomNavigator.
-- 2020-12-21  NiAslk  SC2020R1-11700, Set max length to PlanYearPeriodNo and PlanYearNo.
-- 2018-09-05  SaGeLK  SCUXXW4-7600, Converted from dlgCreateIsoWeeks using MTG Version: 1.27
-- 2018-09-05  SaGeLK  SCUXXW4-7615, Converted from dlgCreatePeriodUnits using MTG Version: 1.27
-- 2018-09-05  SaGeLK  SCUXXW4-7680, Converted from dlgRemovePeriod using MTG Version: 1.27
-- 2018-04-05  Lufelk  SCUXXW4-7995, Converted from tbwPlanPeriodUnit using MTG Version: 1.15
--------------------------------------------------------------------------------------
client PlanningPeriodUnits;
component MPCCOM;
layer Core;
projection PlanningPeriodUnitsHandling;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   @DynamicComponentDependency MFGSTD
   entry PlanPeriodUnitSalesNavEntry parent MfgstdNavigator.ManufacturingStandardBasicDataNavEntry at index 1700 {
      label = "Planning Period Units";
      page List;
   }


}


-------------------------------- MAIN PAGES ---------------------------------
page List using PlanPeriodUnitDefs {
   label = "Planning Period Units";
   list PlanPeriodUnitList;
}

--------------------------------- COMMANDS ----------------------------------

command TranslationCommand {
   label = "Translation";
   mode = Global;
   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'MPCCOM' and Lu eq 'PlanPeriodUnitDef'";
   }
}

command CreateISOWeeksCommand {
   label = "Create ISO Weeks";
   mode = Global;
   enabled = [true];
   variable MaximumEndDateVar;
   variable MaximumCalendarDateVar;
   execute {
      call GetMaximumEndWeekDate("0") into MaximumEndDateVar;
      dialog CreateIsoWeeksDialog(MaximumEndDateVar) into(StartDate, EndDate) {
         when OK {
            call GetMaximumCalendarDate("0") into MaximumCalendarDateVar;
            if [MaximumCalendarDateVar < EndDate] {
               info("Defined period is outside the working calendar");
            }
            else {
               call CreateNewWeeks(StartDate, EndDate);
            }
         }
      }
   }
}

command CreateMonthsCommand {
   label = "Create Months";
   mode = Global;
   enabled = [true];
   variable MaximumEndDateVar;
   execute {
      call GetMaximumEndDate("3", "FALSE") into MaximumEndDateVar;
      dialog CreatePeriodUnitsDialog("Create Months", MaximumEndDateVar) into(StartDate, EndDate) {
         when OK {
            call CreateNewPeriods(StartDate, EndDate, "3");
         }
      }
   }
}

command CreateQuartersCommand {
   label = "Create Quarters";
   mode = Global;
   enabled = [true];
   variable MaximumEndDateVar;
   execute {
      call GetMaximumEndDate("4", "FALSE") into MaximumEndDateVar;
      dialog CreatePeriodUnitsDialog("Create Quarters", MaximumEndDateVar) into(StartDate, EndDate) {
         when OK {
            call CreateNewPeriods(StartDate, EndDate, "4");
         }
      }
   }
}

command RemovePeriodCommand {
   label = "Remove Period";
   mode = Global;
   variable MaximumEndDateVar;
   execute {
      call GetMaximumEndDate("3", "TRUE") into MaximumEndDateVar;
      dialog RemovePeriodDialog(MaximumEndDateVar) into(PeriodUnit, ClearPeriodUntil) {
         when OK {
            confirm("Are you sure you want to clear ${PeriodUnit} until ${ClearPeriodUntil} ?") {
               when OK {
                  call RemovePeriodUnits(PeriodUnit, ClearPeriodUntil);
               }
            }
         }
      }
   }
}

---------------------------------- GROUPS -----------------------------------
group RemovePeriodGroup for RemovePeriodStructure {
   label = "";

   field PeriodUnit {
      size = Small;
   }
   field ClearPeriodUntil;
}

group CreatePeriodUnitsGroup for CreatePeriodUnitsStructure {
   label = "";
   field StartDate;
   field EndDate;
}

group CreateIsoWeeksGroup for CreateIsoWeeksStructure {
   label = "";

   field StartDate;
   field EndDate;
}
----------------------------------- LISTS -----------------------------------
list PlanPeriodUnitList for PlanPeriodUnitDef {
   label = "";
   orderby = PlanPeriodUnit, PlanYearNo, PlanYearPeriodNo;
   field PlanYearNo {
      label = "Year";
      size = Small;
      maxlength = 4;
   }
   field PlanYearPeriodNo {
      label = "Period";
      size = Small;
      maxlength = 3;
   }
   field Description {
      label = "Period Description";
   }
   field PlanPeriodUnit {
      label = "Period Unit";
      size = Small;
   }
   field BeginDate {
      label = "Period Begin";
   }
   field EndDate {
      label = "Period End";
   }
   command TranslationCommand;

   commandgroup CommandGroup2 {

      command CreateISOWeeksCommand;
      command CreateMonthsCommand;
      command CreateQuartersCommand;
      command RemovePeriodCommand;
   }
}

---------------------------------- DIALOGS ----------------------------------
dialog CreateIsoWeeksDialog for CreateIsoWeeksStructure {
   label = "Create ISO Weeks";
   input(StartDate);
   output(StartDate, EndDate);
   group CreateIsoWeeksGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [StartDate != null and EndDate != null];
      }
      command Cancel;
   }
}

dialog CreatePeriodUnitsDialog for CreatePeriodUnitsStructure {
   label = "${LabelId}";

   input(LabelId, StartDate);
   output(StartDate, EndDate);
   group CreatePeriodUnitsGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [StartDate != null and EndDate != null];
      }
      command Cancel;
   }
}

dialog RemovePeriodDialog for RemovePeriodStructure {
   label = "Remove Period";
   input(ClearPeriodUntil);
   output(PeriodUnit, ClearPeriodUntil);
   group RemovePeriodGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [PeriodUnit != null and ClearPeriodUntil != null];
      }
      command Cancel;
   }
}