----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-07-09  ChFolk  SCUXXW4-22798, Changed references to project information to increase performance.
-- 2019-04-26  DaZase  SCUXXW4-19617, Added initialcheck to all unbounded actions.
-- 2019-04-24  SWiclk  SCUXXW4-18412, Modified GetHandlingUnitStructureLevel() by adding Where clause.
-- 2019-04-15  DaZase  SCUXXW4-18783, Reworked array InventoryPartInStockArray so it will show hu with more than 1 component.
-- 2018-09-28  StHose  SCUXXW4-6054, Converted from frmCountHandlingUnits using MTG Version: 1.29
----------------------------------------------------------------------------------------------------------
projection CountHandlingUnits;
component INVENT;
layer Core;
description "Use this API to count stock records attached to a handling unit.";
category Users;
include fragment HandlingUnitLov5Selector;
include fragment HandlingUnitLov4Selector;
include fragment InventoryLocation19Selector;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency MFGSTD
include fragment ControlPlanPartRevLovSelector;
include fragment HandlingUnitExtendedSelector;
include fragment HandlingUnitsSearchContext;
include fragment HandlingUnitExtendedInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset HandlingUnitSet for HandlingUnit;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity HandlingUnit {
   crud = Read, Update;
   from = "handling_unit_extended";
   where = "IS_IN_STOCK = 'TRUE' AND LOCATION_TYPE_DB IN ('PICKING','F','MANUFACTURING') ";
   keys = HandlingUnitId {
      where = "HANDLING_UNIT_ID = :HandlingUnitId";
   }

   use attributes = Contract, LocationNo, HandlingUnitTypeId, Sscc, AltHandlingUnitLabelId, LocationType, ParentHandlingUnitId, Width, Height, Depth, UomForLength, ManualGrossWeight, ManualVolume, NoOfHandlingUnitLabels, NoOfContentLabels, IsInStock, SourceRef1, SourceRef2, SourceRef3, ShipmentId;
   attribute LastCountDate Date {
      fetch = "Handling_Unit_API.Get_Last_Count_Date(handling_unit_id)";
      label = "Last Count Date";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
      maxlength = 2000;
   }

   attribute Contract Text {
      maxlength = 100;
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute StructureLevel Number {
      fetch = "structure_level";
      label = "Structure Level";
      editable = [false];
   }
   attribute HandlingUnitId Number {
      required = [true];
   }
   attribute Description Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(handling_unit_type_id)";
      label = "Category Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Sscc Text {
      label = "SSCC";
   }
   attribute WarehouseId Text {
      fetch = "warehouse_id";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayId Text {
      fetch = "bay_id";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "row_id";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierId Text {
      fetch = "tier_id";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinId Text {
      fetch = "bin_id";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute ParentHandlingUnitId Number {
      editable = [ETag = null];
   }
   attribute TopParentHandlingUnitId Text {
      fetch = "top_parent_handling_unit_id";
      label = "Top Parent Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AccessoryExist Boolean("TRUE", "FALSE") {
      fetch = "accessory_exist";
      label = "Accessories Exist";
      editable = [false];
   }
   attribute Composition Text {
      fetch = "Handling_Unit_API.Get_Composition(handling_unit_id)";
      label = "Composition";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForLength Text {
      label = "Length UoM";
      editable = [ETag != null];
   }
   attribute NetWeight Number {
      fetch = "net_weight";
      label = "Net Weight";
      editable = [false];
   }
   attribute TareWeight Number {
      fetch = "tare_weight";
      label = "Tare Weight";
      editable = [false];
   }
   attribute OperativeGrossWeight Number {
      fetch = "operative_gross_weight";
      label = "Operative Gross Weight";
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "uom_for_weight";
      label = "UoM for Weight";
      maxlength = 30;
      editable = [false];
   }
   attribute OperativeVolume Number {
      fetch = "operative_volume";
      label = "Operative Volume";
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "uom_for_volume";
      label = "Volume UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute AdditiveVolumeDb Boolean("TRUE", "FALSE") {
      fetch = "additive_volume_db";
      label = "Additive Volume";
      editable = [false];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      fetch = "generate_sscc_no_db";
      label = "Generate SSCC";
      required = [true];
   }
   attribute PrintLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_label_db";
      label = "Print Handling Unit Label";
      editable = [ETag != null];
   }
   attribute PrintContentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_content_label_db";
      label = "Print Handling Unit Content Label";
      editable = [ETag != null];
   }
   attribute MixOfPartNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_part_no_blocked_db";
      label = "Mix of Part Numbers Blocked";
      editable = [ETag != null];
   }
   attribute MixOfCondCodeBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_cond_code_blocked_db";
      label = "Mix of Condition Codes Blocked";
      editable = [ETag != null];
   }
   attribute MixOfLotBatchBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_lot_batch_blocked_db";
      label = "Mix of Lot Batch Numbers Blocked";
      editable = [ETag != null];
   }
   attribute MaxVolumeCapacity Number {
      fetch = "max_volume_capacity";
      label = "Max Volume Capacity";
      editable = [false];
   }
   attribute MaxWeightCapacity Number {
      fetch = "max_weight_capacity";
      label = "Max Weight Capacity";
      editable = [false];
   }
   attribute StackableDb Boolean("TRUE", "FALSE") {
      fetch = "stackable_db";
      label = "Stackable";
      editable = [false];
   }
   attribute IsInStock Boolean("TRUE", "FALSE") {
      fetch = "is_in_stock";
   }
   attribute IsInProjectInventory Boolean("TRUE", "FALSE") {
      fetch = "is_in_project_inventory";
      label = "In Project Inventory";
      editable = [false];
   }
   attribute IsInInventoryTransit Boolean("TRUE", "FALSE") {
      fetch = "is_in_inventory_transit";
      label = "In Transit";
      editable = [false];
   }
   attribute SourceRef1 Text {
      label = "Source Ref 1";
      editable = [ETag = null];
   }
   attribute SourceRef2 Text {
      label = "Source Ref 2";
      editable = [ETag = null];
   }
   attribute SourceRef3 Text {
      label = "Source Ref 3";
      editable = [ETag = null];
   }
   attribute SourceRefType Enumeration(HandlUnitSourceRefType) {
      fetch = "Handl_Unit_Source_Ref_Type_API.Decode(source_ref_type_db)";
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
      label = "Source Ref Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute ShipmentId Number {
      editable = [ETag = null];
   }
   attribute LocationTypeDb Text {
      fetch = "location_type_db";
      label = "Location Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute TotalOnhandQty Number {
      fetch = "total_onhand_qty";
      label = "Total Qty Onhand";
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      maxlength = 6;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 25;
      editable = [false];
   }
   attribute PartOwnership2 Text {
      fetch = "Part_Ownership_API.Decode(part_ownership)";
      label = "Part Ownership";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "part_ownership";
      label = "Part Ownership Db";
      maxlength = 200;
      // searchable = false;
      editable = [false];
   }
   attribute Owner Text {
      fetch = "owner";
      label = "Owner";
      maxlength = 20;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "owner_name";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute ActivitySequence Number {
      fetch = "activity_sequence";
      label = "Activity Seq";
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(availability_control_id)";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProgramId Text {
      fetch = "program_id";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Activity_API.Get_Program_Description(ACTIVITY_SEQUENCE)";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQUENCE, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQUENCE))";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute SubProjectId Text {
      fetch = "sub_project_id";
      label = "Sub Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQUENCE, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQUENCE))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivityNo Text {
      fetch = "activity_no";
      label = "Activity ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQUENCE, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQUENCE))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   attribute SecondLevelParentHuId Number {
      fetch = "second_level_parent_hu_id";
      label = "Level 2 Handling Unit ID";
      editable = [false];
   }
   attribute HasStockReservationDb Boolean("TRUE", "FALSE") {
      fetch = "has_stock_reservation_db";
      label = "Reservations Exist";
      editable = [false];
   }
   attribute TotalReservedQty Number {
      fetch = "total_reserved_qty";
      label = "Total Reserved Quantity";
      editable = [false];
   }
   attribute TransportTaskId Text {
      fetch = "Handling_Unit_API.Get_Transport_Task_Id(handling_unit_id)";
      label = "Transport Task Id";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      maxlength = 2000;
      editable = [false];
   }

   attribute HandlingUnitCategoryId Text {
      fetch = "handling_unit_category_id";
      maxlength = 2000;
      editable = [false];
   }

   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitRef(SecondLevelParentHuId) to HandlingUnit(HandlingUnitId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySequence) to Activity(ActivitySeq);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySequence, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnitExtended(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference HandlingUnitCategoryIdRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category";
   }
   reference SsccRef(Sscc) to HandlingUnitLov4(Sscc) {
      label = "SSCC";
   }
   reference AltHandlingUnitLabelIdRef(AltHandlingUnitLabelId) to HandlingUnitLov5(AltHandlingUnitLabelId) {
      label = "Alt Handling Unit Label ID";
   }
   reference ParentHandlingUnitIdRef(ParentHandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Parent Handling Unit ID";
   }
   reference UomForLengthRef(UomForLength) to IsoUnit(UnitCode) {
      label = "Length UoM";
   }
//   array InventoryPartInStockArray(PartNo, ConfigurationId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySequence, Contract, LocationNo) to InventoryPartInStock(PartNo, ConfigurationId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, Contract, LocationNo) {
//      where = "(:child.HandlingUnitId IN (SELECT HANDLING_UNIT_ID FROM HANDLING_UNIT CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID START WITH HANDLING_UNIT_ID IN (:parent.HandlingUnitId)))";
   //   }
   // Copied array InventoryPartsInStockArray in HandlingUnitHandling.projection to solve issues with hu with more than 1 component (that have same HU ID),
   // by removing array parameters and moved QtyOnhand and QtyInTransit checks from InventoryPartInStock where to this array instead.
   array InventoryPartInStockArray() to InventoryPartInStock() {
      where = "((:child.QtyOnhand > 0 OR :child.QtyInTransit > 0)
               AND (:child.HandlingUnitId IN (SELECT HANDLING_UNIT_ID
                                              FROM HANDLING_UNIT CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                              START WITH HANDLING_UNIT_ID IN (:parent.HandlingUnitId))))";
   }

}

@Override
entity InventoryPartInStock {
   crud = Read;
   from = "inventory_part_in_stock_uiv";
   //where = "(QTY_ONHAND > 0 OR QTY_IN_TRANSIT > 0)";
   keys = HandlingUnitId, PartNo, ConfigurationId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, Contract, LocationNo {
      where = "HANDLING_UNIT_ID = :HandlingUnitId and PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and ENG_CHG_LEVEL = :EngChgLevel and WAIV_DEV_REJ_NO = :WaivDevRejNo and ACTIVITY_SEQ = :ActivitySeq and CONTRACT = :Contract and LOCATION_NO = :LocationNo";
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryId Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract,part_no)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no ))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute QtyOnhand Number {
      label = "Qty on Hand";
   }
   attribute CatchQtyOnhand Number {
      label = "Catch Quantity On Hand";
   }
   attribute UnifiedOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_onhand,'REMOVE')";
      label = "Unified On Hand Qty";
      editable = [false];
   }
   attribute UnifiedCatchOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,catch_qty_onhand,'REMOVE','CATCH')";
      label = "Unified Catch On Hand Qty";
      editable = [false];
   }
   attribute QtyAvailable Number {
      fetch = "(qty_onhand - qty_reserved)";
      label = "Qty Available";
      editable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
   }
   attribute UnifiedReservedQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_reserved,'REMOVE')";
      label = "Unified Reserved Qty";
      editable = [false];
   }
   attribute UnifiedQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_in_transit,'REMOVE')";
      label = "Unified Qty in Transit";
      editable = [ETag != null];
   }
   attribute UnifiedCatchQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,catch_qty_in_transit,'REMOVE','CATCH')";
      label = "Unified Catch Qty in Transit";
      editable = [ETag != null];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute UnifiedUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(part_no)";
      label = "Unified UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute UnifiedCatchUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(part_no,'CATCH')";
      label = "Unified Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute FreezeFlag Enumeration(InventoryPartFreezeCode) {
      label = "Frozen";
   }
   attribute LastCountDate Date {
      label = "Latest Count Date";
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(availability_control_id)";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TotalInventoryValue Number {
      fetch = "(Inventory_Part_In_Stock_API.Get_Company_Owned_Unit_Cost(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id)) * qty_onhand";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute Owner Text {
      fetch = "NVL(owning_customer_no,owning_vendor_no)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(contract,part_no,configuration_id,location_no,lot_batch_no,serial_no,eng_chg_level,waiv_dev_rej_no,activity_seq, handling_unit_id)";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency ORDER
   attribute PartAcquisitionValue Number {
      fetch = "Cust_Part_Acq_Value_API.Get_Acquisition_Value(owning_customer_no,part_no,serial_no,lot_batch_no)";
      label = "Part Acquisition Value";
      editable = [false];
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute TotalAcquisitionValue Number {
      fetch = "qty_onhand*Cust_Part_Acq_Value_API.Get_Acquisition_Value(owning_customer_no,part_no,serial_no,lot_batch_no)";
      label = "Total Acquisition Value";
      editable = [false];
      format = ifscurrency;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      label = "Sub Project Id";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      label = "Activity No";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "part_ownership_db";
      label = "Part Ownership";
      maxlength = 20;
      editable = [false];
   }
   attribute ReceiptAndIssueSerialTracking Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      label = "Receipt and Issue Serial Tracking";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Source Ref1";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef2 Text {
      fetch = "source_ref2";
      label = "Source Ref2";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef3 Text {
      fetch = "source_ref3";
      label = "Source Ref3";
      maxlength = 50;
      editable = [false];
   }
   attribute ReceiptNo Number {
      fetch = "receipt_no";
      label = "Receipt No";
      editable = [false];
   }
   attribute SourceRefType Text {
      fetch = "source_ref_type";
      label = "Source Ref Type";
      maxlength = 200;
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
      label = "Source Ref Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute LocationTypeDb Text {
      fetch = "location_type_db";
      label = "Location Type";
      maxlength = 20;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id)";
   }
   attribute Uom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract,part_no)";
      label = "UoM";
      maxlength = 100;
      editable = [false];
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnitExtended(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   @DynamicComponentDependency MFGSTD
   reference EngChgLevelRef(Contract, PartNo, EngChgLevel) to ControlPlanPartRevLov(Contract, PartNo, EngChgLevel) {
      label = "Revision No";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference RotablePartPoolIdRef(Contract, RotablePartPoolId) to RotablePoolSite(Contract, RotablePartPoolId) {
      label = "Rotable Part Pool ID";
   }
   reference UomRef(Uom) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference CatchUomRef(CatchUom) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }
   reference UnifiedUomRef(UnifiedUom) to IsoUnit(UnitCode) {
      label = "Unified UoM";
   }
   reference UnifiedCatchUomRef(UnifiedCatchUom) to IsoUnit(UnitCode) {
      label = "Unified Catch UoM";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Availability Control ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
}
------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CountWithoutDifferences {
   initialcheck implementation;
   parameter Selection Text;
   parameter CountAllToZero Text;
   ludependencies = HandlingUnit;
}

action CountZero Text {
   initialcheck implementation;
   parameter Selection Text;
   parameter CountAllToZero Text;
   ludependencies = HandlingUnit;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetHandlingUnitStructureLevel List<Entity(HandlingUnit)> {
   parameter ShowHuLevel Enumeration(ShowHuLevels);
   basedon HandlingUnitSet;
   where = "is_in_stock = 'TRUE' AND location_type_db IN ('PICKING','F','MANUFACTURING')
    AND (CASE
          WHEN :ShowHuLevel = 'ShowOnlyTopLevel' AND structure_level = 1 THEN 1
          WHEN :ShowHuLevel = 'ShowAll' THEN 1
          ELSE 0 END) = 1  ";
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


