--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2022-02-02  BwItLk  SC21R2-7297, Modified GetHandlingUnitInStockDetails by adding BayId, RowId, TierId, BinId to filter out data in Warehouse Navigator in each level.
--  2021-11-08  SBalLK  SC21R2-2833, Added WarehouseTypeId attribute in to InventLocationWarehouseGroup.
--  2021-09-28  Aabalk  SC21R2-2608, Added ProjectIdRef and ProjectAddressRef to DeliveryAddressGroup.
--  2021-08-25  JaThlk  SC21R2-2374, Added DISCOM dynamic dependency to SupplierInfoSelector to avoid modularity test errors.
--  2021-06-14  SBalLK  SC21R2-1545, Recently some of the location related logical units from MSCOM has moved to new component LOC.
--  2021-05-15  SBalLK  SC21R2-1169, Removed PartyType, PartyTypeId and PartyTypeAddressId from WhseShipmentReceiptInfo and added GeolocationId, GeolocationAddressId and AddressType attributes.
--  2021-01-26  Aabalk  SCTA-8317, Replaced SendAutoDisAdvDb with SendAutoDisAdv enumeration.
--  2021-01-21  WaSalk  SC2020R1-12006, Modified url path of FrmMethodsViewTransportTaskLinesCommand with search context.
--  2020-06-17  PamPlk  SC2020R1-7179, Added SendAutoDisAdvDb.
--  2020-02-24  Skanlk  Bug 152572 (SCZ-8862), Modified navigation url by adding DestWarehouseId as an initcontext in NavigateToRemoteWhseRegArrivalCommand command
--  2020-02-24  		to pass the DestWarehouseId to register arrivals window.
--  2019-12-23  AsZelk  SCSPRING20-1349, Remote Warehouse Address tab merged into Remote Warehouse tab and added Shipment Order Defaults group.
--  2019-11-07  ErRalk  SCSPRING20-959, Modified places where WarehousePurchInfo is used with WhseShipmentReceiptInfo.
--  2019-05-25  bajelk  SCUXXW4-19369, Added editable fields for Putaway group attributes as required.
--  2019-05-02  fandse  SCUXXW4-17693, Added details navigation for Parts In Stock tab and Handling Units In Stock tab.
--  2019-04-17  bajelk  SCUXXW4-19368, Deleted OrderProcessingTypeDesc field and added referance to get the values of OrderProcessingTypeDesc in RemoteWhseAssortConnectionsList.
--  2019-04-17  bajelk  SCUXXW4-19366, Added label for PurchaseRefillGroup in Remote Warehouse Address tab.
--  2019-04-06  bajelk  SCUXXW4-14391, Added navigation entry for NavigateToRemoteWhseRegArrivalCommand.
--  2019-03-31  ChFolk  SCUXXW4-18092, Added dynamic dependency to PURCH SupplierInfoSelector as teh usage of it DeliveryAddressGroup is dynamic dependent on PURCH.
--  2019-03-29  ChFolk  SCUXXW4-18092, Commented out SupplierInfoSelector override as a temporary fix.
--  2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
--  2019-02-15  bajelk  SCUXXW4-16026, Deleted objstate attribute inside overrided WarehouseCapabilityValues entity.
--  2019-01-27  bajelk  SCUXXW4-15286, Deleted the "Hidden" status of Storage Capability LOV in Warehouse Values List.
--  2018-11-06  KoDelk  SCUXXW4-6557, Converted from frmInventLocationWarehouse using MTG Version: 1.32
---------------------------------------------------------------------------------
client InventLocationWarehouse;
component INVENT;
layer Core;
projection InventLocationWarehouseHandling;
include fragment ClearStorageCharacteristics;
include fragment RemoteWhseAssortmentLovSelector;
include fragment WarehouseBayTab;
include fragment InventoryLocationsTab;
include fragment InventoryPartInStockList;
include fragment HandlingUnitsInStockList;
include fragment RemoteWarehousePartsPlanningTab;
@DynamicComponentDependency MSCOM
include fragment UserWarehouseConnectionTab;
@DynamicComponentDependency LOC
include fragment LocationLovSelector;
@DynamicComponentDependency LOC
include fragment LocationPartyAddressLovSelector;
@DynamicComponentDependency PROJ
include fragment ProjectLovSelector;
include fragment ModifyCapacitiesAndConditionsAssistant;
@DynamicComponentDependency SHPMNT
include fragment ShipmentTypeSelector;
include fragment OrderDeliveryTermLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry WarehouseEntry parent InventNavigator.WarehouseManagementLocation at index 150 {
      label = "Warehouse";
      internal "page/InventLocationWarehouse/Form?initcontext=Destination:'Warehouse'";
   }
}

@Override
selector WarehouseSelector for Warehouse {
   label = "${WarehouseId} - ${Description}";
   static Contract;
   static WarehouseId;
   static Description;
}
-------------------------------- MAIN PAGES ---------------------------------
page Form using WarehouseSet {
   label = "${initcontext.WindowTitle}";
   crudactions {
      new {
         enabled = [initcontext.Destination = "Warehouse"];
      }
      duplicate {
         enabled = [initcontext.Destination = "Warehouse"];
      }
      delete {
         enabled = [initcontext.Destination = "Warehouse"];
      }
   }
   editmode = MultiField;
   initcontext FetchDestinationInfo;
   selector WarehouseSelector;
   group InventLocationWarehouseGroup;
   tabs {
      tab {
         label = "General";
         arrange {
            group ReceiptControlGroup;
            arrange {
               group VisibilityControlGroup;
               group DefaultPartAvailGroup;
               group PutawayControlGroup;
               group RouteOrderGroup;
            }
         }
      }
      tab {
         label = "Capacities and Conditions";
         singleton CapacitiesAndConditionsSingleton(WarehouseArray);
         markdowntext {
            text = "|             | Warehouse Value | Operative Value | Operative Value Source | UoM |
            | ----------- | ---------: | --------------: | --------------: | --: |
            | **Bin Cubic Capacity** | | | | |
            | Width           | ${BinWidthCapacity} | ${BinWidthOppValue} | ${BinWidthSource} | ${LengthUom} |
            | Height          | ${BinHeightCapacity} | ${BinHeightOppValue} | ${BinHeightSource} | ${LengthUom} |
            | Depth           | ${BinDeptCapacity} | ${BinDepthOppValue} | ${BinDepthSource} | ${LengthUom} |
            | Volume          | ${BinVolumeCapacity} | ${BinVolumeOperativeValue} | ${BinVolumeSource} | ${VolumeUom} |
            | **Carrying Capacity** | | | | |
            | Bay             | ${BayCarryingCapacity} | ${BayCarryingCapacityOppValue} | ${BayCarryingCapacitySource} | ${WeightUom} |
            | Row             | ${RowCarryingCapacity} | ${RowCarryingCapacityOppValue} | ${RowCarryingCapacitySource} | ${WeightUom} |
            | Tier            | ${TierCarryingCapacity} | ${TierCarryingCapacityOppValue} | ${TierCarryingCapacitySource} | ${WeightUom} |
            | Bin             | ${BinCarryingCapacity} | ${BinCarryingCapacityOppValue} | ${BinCarryingCapacitySource} | ${WeightUom} |
            | **Storage Conditions** | | | | |
            | Min Temperature | ${BinMinTemperature} | ${BinMinTemperatureOppValue} | ${BinMinTemperatureSource} | ${TemperatureUom} |
            | Max Temperature | ${BinMaxTemperature} | ${BinMaxTemperatureOppValue} | ${MaxTemperatureSource} | ${TemperatureUom} |
            | Min Humidity    | ${BinMinHumidity} | ${BinMinHumidityOppValue} | ${MinHumiditySource} | ${HumidityUom} |
            | Max Humidity    | ${BinMaxHumidity} | ${BinMaxHumidityOppValue} | ${MaxHumiditySource} | ${HumidityUom} |";
         }
      }
      tab {
         label = "Handling Unit Capacity";
         list WarehouseHuCapacityList(WarehouseHuCapacityArray);
      }
      tab {
         label = "Capabilities";
         arrange {
            list WarehouseStorageCapabilityList(WarehouseCapabilityValuesArray);
            list WarehouseCapabilityOperativeList(WarehouseBinCapabilityOppValuesArray);
         }
      }
      tab {
         label = "Bays";
         list WarehouseBaysList(WarehouseBayArray);
      }
      tab {
         label = "Locations";
         list WarehouseBayBinList(WarehouseBayBinArray);
      }
      @DynamicComponentDependency DISCOM
      tab {
         label = "Remote Warehouse";
         visible = [RemoteWarehouseDb];

         singleton PurchaseRefillSingleton(WhseShipmentReceiptInfoArray);
         group DeliveryAddressGroup bind PurchaseRefillSingleton;
         group PurchaseRefillGroup bind PurchaseRefillSingleton {
            label = "Arrival Defaults";
         }
         group ShipmentOrderDefaultsGroup bind PurchaseRefillSingleton;
         list DefaultLocationList(DefaultLocationsArray) bind PurchaseRefillSingleton;
         list RemoteWarehousePartsPlanningList(RemoteWarehouseAssortmentPartArray) {
            collapsed = [true];
         }
         list RemoteWhseAssortConnectionsList(RemoteWhseAssortConnectArray);
         @DynamicComponentDependency MSCOM
         list UserWarehouseConnectionList(UserWarehouseConnectionArray) {
            label = "Users";
            collapsed = [true];
         }
         group RemoteWarehousePutawayGroup;
      }
      tab {
         label = "Transport Task";
         arrange {
            group DropOffLicationGroup;
            group AutomaticConsolidationGroup;
         }
      }
      tab {
         label = "Parts In Stock";
         list InventoryPartInStockList(InventoryPartInStockArray) {
            details = "page/QuantityPerLocationDetails/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConfigurationId eq $[ConfigurationId] and LocationNo eq $[LocationNo] and LotBatchNo eq $[LotBatchNo] and SerialNo eq $[SerialNo] and EngChgLevel eq $[EngChgLevel] and WaivDevRejNo eq $[WaivDevRejNo] and ActivitySeq eq $[ActivitySeq] and HandlingUnitId eq $[HandlingUnitId]";
         }
      }
      tab {
         label = "Handling Units In Stock";
         list HandlingUnitsInStockList using GetHandlingUnitInStockDetails(HandlingUnitsSearchContext.ShowHuLevel, Contract, WarehouseId, BayId, RowId, TierId, BinId) {
            details = "tree/HandlingUnit/HandlingUnitStructureTree?$filter=HandlingUnitId eq $[HandlingUnitId]";
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
         }
         list InventoryPartInStockForHuList(InventoryPartsInStockForHuArray) bind HandlingUnitsInStockList;
      }
   }

   commandgroup CommandGroupCmdGroup {

      command MethodsClearCharsCommand;
      command FrmMethodsRefillAllPutawayZonesCommand;
      command FrmMethodsRunStorageOptimizationCommand;
      command FrmMethodsViewTransportTaskLinesCommand;
      command FrmMethodsViewPurchaseRequisitionLinesCommand;
      command FrmMethodsViewPurchaseOrderLinesCommand;
   }
   commandgroup RemoteWarehouseCmdGroup {
      label = "Remote Warehouse";
      command NavigateToRemoteWhseRegArrivalCommand;
   }
}

initcontext FetchDestinationInfo {
   parameter Destination Text;
   parameter WindowTitle Text;
   init command {
      variable InitContextData Structure(InitContextStructure);
      execute {
         call GetInitContextData(Destination) into InitContextData;
         set WindowTitle = InitContextData.WindowTitle;
         set Destination = InitContextData.Destination;
      }
   }
}
--------------------------------- SINGLETON ---------------------------------
@DynamicComponentDependency DISCOM
singleton PurchaseRefillSingleton for WhseShipmentReceiptInfo {
   crudactions {

   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command MethodsClearCharsCommand for Warehouse {
   label = "Clear Storage Characteristics";
   enabled = [true];
   execute {
      dialog ClearStorageCharacteristicsDialog("Warehouse", WarehouseId, Contract, WarehouseId, "", "") {
         when OK {
            success("Cleared Storage Characteristics");
         }
      }
   }
}

command FrmMethodsRefillAllPutawayZonesCommand for Warehouse {
   label = "Refill All Putaway Zones";
   enabled = [true];
   execute {
      navigate "assistant/RefillAllPutawayZones/TaskAssistant?$action=InitFromWarehouse{VarSiteId:$[Contract], VarWarehouseId:$[WarehouseId]}";
   }
}
command FrmMethodsRunStorageOptimizationCommand for Warehouse {
   label = "Storage Optimization";
   enabled = [true];
   execute {
      navigate "assistant/StorageOptimization/TaskAssistant?$action=InitFromWarehouse{VarSiteId:$[Contract], VarWarehouseId:$[WarehouseId]}";
   }
}
command FrmMethodsViewTransportTaskLinesCommand for Warehouse {
   label = "Transport Task Lines";
   enabled = [true];
   variable StatusVar Text;
   execute {
      set StatusVar = "CREATED;PICKED";
      navigate "page/TransportTaskLines/List?searchcontext=ContractList:$[Contract],WarehouseList:$[WarehouseId],TransportTaskStatusDbList:$[StatusVar]";
   }
}
command FrmMethodsViewPurchaseRequisitionLinesCommand for Warehouse {
   label = "Purchase Requisition Lines";
   execute {
      navigate "page/PurchaseRequisitionLines/List?$filter=Contract eq $[Contract] and DestinationWarehouseId eq $[WarehouseId] and Objstate ne IfsApp.PurchaseRequisitionLinesHandling.PurchaseReqLineState'POCreated' and Objstate ne IfsApp.PurchaseRequisitionLinesHandling.PurchaseReqLineState'ChangeOrderCreated'";

   }
}
command FrmMethodsViewPurchaseOrderLinesCommand for Warehouse {
   label = "Purchase Order Lines";
   enabled = [true];
   execute {
      navigate "page/PurchaseOrderLines/List?$filter=Contract eq $[Contract] and DestinationWarehouseId eq $[WarehouseId] and Objstate ne IfsApp.PurchaseOrderLinesHandling.PurchaseOrderLineState'Cancelled' and Objstate ne IfsApp.PurchaseOrderLinesHandling.PurchaseOrderLineState'Stopped' and Objstate ne IfsApp.PurchaseOrderLinesHandling.PurchaseOrderLineState'Closed'";
   }
}
command RemoveCapabilityCommand for WarehouseBinCapabilityOppValues {
   label = "Remove Capability";
   mode = SelectedRecords;
   bulkexecute {
      call RemoveCapability(Selection);
   }
}
command NavigateToRemoteWhseRegArrivalCommand for Warehouse {
   label = "Register Arrivals";
   enabled = [RemoteWarehouseDb];
   execute {
      navigate "page/RegisterArrivals/List?initcontext=DestWarehouseId:$[WarehouseId]&$filter=Contract eq $[Contract] and DestinationWarehouseId eq $[WarehouseId]";
   }
}

command EditCapacitiesAndConditionsCommand for Warehouse {
   label = "Edit";
   enabled = [true];
   icon = "edit";
   style = IconOnly;
   execute {
      assistant ConnectCustomersAssistant("Warehouse", Contract, WarehouseId, "", "", "", "") {
         when OK {
            success("Capacities and Conditions has been saved.");
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector PartAvailabilityControlSelector for PartAvailabilityControl {
   label = "${Description}";
   static AvailabilityControlId;
   static Description;
   badge Objstate;
}
@Override
selector HandlingUnitTypeSelector for HandlingUnitType {
   static Description;
}
-- Added the dynamic dependency DISCOM here because otherwise it would cause errors since dynamic dependency have been defined
-- for the enitre entity where reference for SupplierInfo has been included
@Override
@DynamicComponentDependency DISCOM
selector SupplierInfoSelector for SupplierInfo {
   static Name;
}

@Override
selector ReferenceInventoryLocationRemoteWhseSelector for InventoryLocationRemoteWhse {
   static LocationType;
}

---------------------------------- GROUPS -----------------------------------
group InventLocationWarehouseGroup for Warehouse {
   label = "Inventory Location Warehouse";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;
      visible = [initcontext.Destination = "Warehouse"];
   }

   field WarehouseId {
      size = Small;
      label = "Warehouse ID";
   }
   field Description;
   field GlobalWarehouseId;
   lov WarehouseTypeIdRef with WarehouseTypeSelector {
      size = Small;
      description = WarehouseTypeIdRef.Description;
   }
   field RemoteWarehouseDb {
      size = Small;
   }
}

group ReceiptControlGroup for Warehouse {
   label = "Receipt Control";

   field ReceiptsBlockedDb {
      editable = [not ReceiptsBlockedParentDb];
      size = Small;
   }
   field ReceiptsBlockedOn;
   field ReceiptToOccupiedBlockedDb {
      editable = [not ReceiptToOccupiedBlockedParentDb];
      size = Small;
   }
   field ReceiptsToOccBlockedOn;
   field MixOfPartNumberBlockedDb {
      editable = [not MixOfPartNumberBlockedParentDb];
      size = Small;
   }
   field MixBlockedOn;
   field MixOfCondCodesBlockedDb {
      editable = [not MixOfCondCodesBlockedParentDb];
      size = Small;
   }
   field MixCondCodesBlockedOn;
   field MixOfLotBatchNoBlockedDb {
      editable = [not MixOfLotBatchNoBlockedParentDb];
      size = Small;
   }
   field MixLotBatchNoBlockedOn;
   field ExcludeStorageReqValDb {
      editable = [not ExcludeStorageReqValParentDb];
      size = Small;
   }
   field ValidationExcludedOn;
}
group VisibilityControlGroup for Warehouse {
   label = "Visibility Control";

   field HideInWhseNavigatorDb;
   field HiddenLevelsExistBelow;
}
group DefaultPartAvailGroup for Warehouse {
   label = "Default Part Availability Control";

   lov AvailabilityControlIdRef with PartAvailabilityControlSelector {
      description = AvailabilityControlIdRef.Description;
   }
}
group PutawayControlGroup for Warehouse {
   label = "Putaway Control";
   field AutoRefillPutawayZonesDb;
   field PutawayDestinationDb;
}
group RouteOrderGroup for Warehouse {
   label = "";

   field RouteOrder;
}
group DropOffLicationGroup for Warehouse {
   label = "Drop-Off Location";
   lov DropOffLocationRef with ReferenceDropOffLocationSelector {
      description = DropOffLocDescription;
   }
   field DropOffWarehouse;
   field DropOffBay;
   field DropOffRow;
   field DropOffTier;
   field DropOffBin;
}
group AutomaticConsolidationGroup for Warehouse {
   label = "Automatic Consolidation";
   field TransportFromWhseLevel;
   field TransportFromWhseLevelOppValue;
   field TransportFromWhseLevelSource;
   field TransportToWhseLevel;
   field TransportToWhseLevelOppValue;
   field TransportToWhseLevelSource;
}
group RemoteWarehousePutawayGroup for Warehouse {
   label = "Putaway";
   field AppearAsPutawayZoneDb {
      size = Small;
   }
   field PutawayMaxBinsPerPart {
      label = "Max Bins Per Part";
      editable = [AppearAsPutawayZoneDb = true];
   }
   field PutawayZoneRanking {
      label = "Ranking";
      editable = [AppearAsPutawayZoneDb = true];
   }
}
@DynamicComponentDependency DISCOM
group PurchaseRefillGroup for WhseShipmentReceiptInfo {
   label = "";
   field ReceiveCaseDb;
}
@DynamicComponentDependency DISCOM
group DeliveryAddressGroup for WhseShipmentReceiptInfo {
   label = "Delivery Address";
   field AddressType {
      size = Small;
   }
   lov CompanyRef with ReferenceCompanySelector {
      description = CompanyRef.Name;
      visible = [AddressType = "Company"];
      required = [AddressType = "Company"];
   }
   lov CompanyAddressRef with ReferenceCompanyAddressSelector {
      size = Small;
      visible = [AddressType = "Company"];
      required = [AddressType = "Company"];
   }

   lov CustomerInfoCustcategoryPubRef with ReferenceCustomerInfoCustcategoryPubSelector {
      description = CustomerInfoCustcategoryPubRef.Name;
      visible = [AddressType = "Customer"];
      required = [AddressType = "Customer"];
   }
   lov CustomerInfoAddressRef with CustomerInfoAddressSelector {
      size = Small;
      visible = [AddressType = "Customer"];
      required = [AddressType = "Customer"];
   }

   lov SupplierInfoRef with SupplierInfoSelector {
      description = SupplierInfoRef.Name;
      visible = [AddressType = "Supplier"];
      required = [AddressType = "Supplier"];
   }

   lov SupplierInfoAddressRef with SupplierInfoAddressSelector {
      size = Small;
      visible = [AddressType = "Supplier"];
      required = [AddressType = "Supplier"];
   }

   lov PersonInfoAllRef with ReferencePersonInfoAllSelector {
      description = PersonInfoAllRef.Name;
      visible = [AddressType = "Person"];
      required = [AddressType = "Person"];
   }
   lov PersonInfoAddressRef with PersonInfoAddressSelector {
      size = Small;
      visible = [AddressType = "Person"];
      required = [AddressType = "Person"];
   }
   @DynamicComponentDependency LOC
   lov GeolocationIdRef with ReferenceLocationLovSelector {
      description = GeolocationIdRef.Name;
      visible = [AddressType = "Geolocation"];
      required = [AddressType = "Geolocation"];
   }
   @DynamicComponentDependency LOC
   lov GeolocationAddressIdRef with ReferenceLocationPartyAddressLovSelector {
      size = Small;
      visible = [AddressType = "Geolocation"];
      required = [AddressType = "Geolocation"];
   }
   @DynamicComponentDependency PROJ
   lov ProjectIdRef with ReferenceProjectLovSelector {
      size = Small;
      visible = [AddressType = "Project"];
      required = [AddressType = "Project"];
   }
   @DynamicComponentDependency PROJ
   lov ProjectAddressRef with ReferenceProjectAddressSelector {
      size = Small;
      visible = [AddressType = "Project"];
      required = [AddressType = "Project"];
   }
   addressfield {
      address1 CompanyAddressRef.Address1;
      address2 CompanyAddressRef.Address2;
      address3 CompanyAddressRef.Address3;
      address4 CompanyAddressRef.Address4;
      address5 CompanyAddressRef.Address5;
      address6 CompanyAddressRef.Address6;
      city CompanyAddressRef.City;
      country CompanyAddressRef.CountryDesc;
      county CompanyAddressRef.County;
      state CompanyAddressRef.State;
      zipcode CompanyAddressRef.ZipCode;
      countrycode CompanyAddressRef.CountryCode;
      visible = [AddressType = "Company"];
      size = Large;
   }
   addressfield {
      address1 CustomerInfoAddressRef.Address1;
      address2 CustomerInfoAddressRef.Address2;
      address3 CustomerInfoAddressRef.Address3;
      address4 CustomerInfoAddressRef.Address4;
      address5 CustomerInfoAddressRef.Address5;
      address6 CustomerInfoAddressRef.Address6;
      city CustomerInfoAddressRef.City;
      country CustomerInfoAddressRef.CountryDesc;
      county CustomerInfoAddressRef.County;
      state CustomerInfoAddressRef.State;
      zipcode CustomerInfoAddressRef.ZipCode;
      countrycode CustomerInfoAddressRef.CountryCode;
      visible = [AddressType = "Customer"];
      size = Large;
   }
   addressfield {
      address1 SupplierInfoAddressRef.Address1;
      address2 SupplierInfoAddressRef.Address2;
      address3 SupplierInfoAddressRef.Address3;
      address4 SupplierInfoAddressRef.Address4;
      address5 SupplierInfoAddressRef.Address5;
      address6 SupplierInfoAddressRef.Address6;
      city SupplierInfoAddressRef.City;
      country SupplierInfoAddressRef.CountryDesc;
      county SupplierInfoAddressRef.County;
      state SupplierInfoAddressRef.State;
      zipcode SupplierInfoAddressRef.ZipCode;
      countrycode SupplierInfoAddressRef.CountryCode;
      visible = [AddressType = "Supplier"];
      size = Large;
   }
   addressfield {
      address1 PersonInfoAddressRef.Address1;
      address2 PersonInfoAddressRef.Address2;
      address3 PersonInfoAddressRef.Address3;
      address4 PersonInfoAddressRef.Address4;
      address5 PersonInfoAddressRef.Address5;
      address6 PersonInfoAddressRef.Address6;
      city PersonInfoAddressRef.City;
      country PersonInfoAddressRef.CountryDesc;
      county PersonInfoAddressRef.County;
      state PersonInfoAddressRef.State;
      zipcode PersonInfoAddressRef.ZipCode;
      countrycode PersonInfoAddressRef.CountryCode;
      visible = [AddressType = "Person"];
      size = Large;
   }
   @DynamicComponentDependency LOC
   addressfield {
      address1 GeolocationAddressIdRef.Address1;
      address2 GeolocationAddressIdRef.Address2;
      address3 GeolocationAddressIdRef.Address3;
      address4 GeolocationAddressIdRef.Address4;
      address5 GeolocationAddressIdRef.Address5;
      address6 GeolocationAddressIdRef.Address6;
      city GeolocationAddressIdRef.City;
      country GeolocationAddressIdRef.CountryDesc;
      county GeolocationAddressIdRef.County;
      state GeolocationAddressIdRef.State;
      zipcode GeolocationAddressIdRef.ZipCode;
      countrycode GeolocationAddressIdRef.CountryCode;
      visible = [AddressType = "Geolocation"];
      size = Large;
   }
   @DynamicComponentDependency PROJ
   addressfield {
      address1 ProjectAddressRef.Address1;
      address2 ProjectAddressRef.Address2;
      address3 ProjectAddressRef.Address3;
      address4 ProjectAddressRef.Address4;
      address5 ProjectAddressRef.Address5;
      address6 ProjectAddressRef.Address6;
      city ProjectAddressRef.City;
      country ProjectAddressRef.CountryDesc;
      county ProjectAddressRef.County;
      state ProjectAddressRef.State;
      zipcode ProjectAddressRef.ZipCode;
      countrycode ProjectAddressRef.CountryCode;
      visible = [AddressType = "Project"];
      size = Large;
   }
}
@DynamicComponentDependency DISCOM
group ShipmentOrderDefaultsGroup for WhseShipmentReceiptInfo {
   label = "Shipment Order Defaults";

   lov ShipViaRef with ReferenceMpccomShipViaSelector {
      description = ShipViaRef.Description;
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation {
      label = "Delivery Terms Location";
      multiline = true;
      size = Medium;
   }
   lov RouteRef with ReferenceDeliveryRouteSelector {
      description = RouteRef.Description;
      validate command {
         variable ForwarderIdVar Text;
         execute {
            if [RouteId != null] {
               call GetRouteConnectForwarder(RouteId) into ForwarderIdVar;
               set ForwardAgentId = ForwarderIdVar;
            }
            else {
               set ForwardAgentId = null;
            }
         }
      }
   }
   lov ForwarderRef with ReferenceForwarderInfoSelector {
      description = ForwarderRef.Name;
   }
   lov ArrivalRouteIdRef with ReferenceDeliveryRouteSelector {
      description = ArrivalRouteIdRef.Description;
   }
   @DynamicComponentDependency SHPMNT
   lov ShipmentTypeRef with ShipmentTypeShipOrdLovSelector {
      advancedview ShipmentTypeShipOrdLovList;
      description = ShipmentTypeRef.Description;
   }
   field PickingLeadTime;
   field ExtTransportLeadTime;
   field TransportLeadtime;
   field IntTransportLeadTime;
   field SendAutoDisAdv;
}
----------------------------------- LISTS -----------------------------------

list WarehouseHuCapacityList for WarehouseHuCapacity {
   label = "Handling Unit Capacity";

   lov HandlingUnitTypeIdRef with HandlingUnitTypeSelector {
      description = Description;
   }
   field BinHuTypeCapacity;
}

list WarehouseStorageCapabilityList for WarehouseCapabilityValues {
   label = "Warehouse Values";
   lov StorageCapabilityIdRef with StorageCapabilitySelector using GetWarehouseValuesState {
      description = StorageCapabilityIdRef.Description;
   }
   field RemovedDb {
      size = Small;
   }
}
list WarehouseCapabilityOperativeList for WarehouseBinCapabilityOppValues {
   label = "Operative Values";
   lov StorageCapabilityIdRef with StorageCapabilitySelector {
      description = StorageCapabilityIdRef.Description;
   }
   field Source {
      size = Small;
   }

   commandgroup CommandGroupCmdGroup {

      command RemoveCapabilityCommand;
   }
}
list RemoteWhseAssortConnectionsList for RemoteWhseAssortConnect {
   label = "Assortments";
   collapsed = [true];

   lov AssortmentIdRef with ReferenceRemoteWhseAssortmentLovSelector {
      description = AssortmentIdRef.Description;
   }
   field RemoteWhseAssortmentRef.Priority {
      label = "Priority";
   }
   field RemoteWhseAssortmentRef.OrderProcessingType;
   field RemoteWhseAssortmentRef.OrderProcessingTypeDesc;
}
@DynamicComponentDependency DISCOM
list DefaultLocationList for WarehouseDefaultLocation {
   label = "Default Locations";
   collapsed = [true];

   lov LocationNoRef with ReferenceInventoryLocationRemoteWhseSelector {
      description = LocationNoRef.LocationName;
   }
   field LocationNoRef.LocationType;
   field LocationNoRef.LocationGroup;
   field LocationBay {
      size = Small;
   }
   field LocationRow {
      size = Small;
   }
   field LocationTier {
      size = Small;
   }
   field LocationBin {
      size = Small;
   }
}

--------------------------------- SINGLETON ---------------------------------
singleton CapacitiesAndConditionsSingleton for Warehouse {
   commandgroup ModifyCommandGroup {
      command EditCapacitiesAndConditionsCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------