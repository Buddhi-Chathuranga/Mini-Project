--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210126  DiJwlk  SC2020R1-11785, Removed field references to optimize performance.
--  201002  JaThlk  SC2020R1-10279, Moved the project related attributes from the entity to projection.
--  201002          in order to avoid illegal static code errors.
--  200217  DiHelk  GESPRING20-1803, Generate Warehouse Journal Data
-----------------------------------------------------------------------------
projection WarehouseJournalDataHandling;
component INVENT;
layer Core;
description "Warehouse journal data handling";
category Users;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
-- gelr: warehouse_journal, begin
entityset WarehouseJournalSet for WarehouseJournal;

@Override
entity WarehouseJournal {
   crud = Read;

   attribute InventoryCost Number {
      fetch = "cost * quantity";
   }
   attribute Owner Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,OWNING_VENDOR_NO,OWNING_CUSTOMER_NO)";
   }
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   attribute OwnerName Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(OWNING_CUSTOMER_NO))";
   }
   attribute PreviousPartOwnership Enumeration(PartOwnership) {
      label = "Previous Ownership";
   }
   attribute PreviousPartOwner Text {
      fetch = "DECODE(PREVIOUS_OWNING_CUST_NO,NULL,PREVIOUS_OWNING_VENDOR_NO,PREVIOUS_OWNING_CUST_NO)";
   }
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   attribute PreviousPartOwnerName Text {
      fetch = "DECODE(PREVIOUS_OWNING_CUST_NO,NULL,SUPPLIER_API.Get_Vendor_Name(PREVIOUS_OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(PREVIOUS_OWNING_CUST_NO))";
   }
   attribute ErrorneousPosting Boolean("TRUE", "FALSE");
   attribute TransferredPosting Boolean("TRUE", "FALSE");
   attribute ReportEarnedValue Boolean("TRUE", "FALSE") {
      fetch = "DECODE(REPORT_EARNED_VALUE_DB, NULL, 'FALSE', 'FALSE', NULL ,'TRUE')";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(project_id)";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(activity_seq))";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDesc Text {
      label = "Sub Project Description";
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(activity_seq))";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectDescription Text {
      fetch = "Project_API.Get_Description(PROJECT_ID)";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      label = "Description";
   }

   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part No";
   }
   @DynamicComponentDependency PROJ
   reference ActivityRef(ActivitySeq) to Activity(ActivitySeq);
   reference TransactionCodeRef(TransactionCode) to MpccomTransactionCode(TransactionCode);
   reference InventoryLocationRef(Contract, LocationNo) to InventoryLocation(Contract, LocationNo);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project";
   }
   reference DeliveryReasonIdRef(Company, DeliveryReasonId) to DeliveryReason(Company, DeliveryReasonId) {
      label = "Delivery Reason";

   }
}

-- gelr: warehouse_journal, end
