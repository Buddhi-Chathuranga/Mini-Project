----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-07-26  ChFolk  SCUXXW4-22798, Included fragment ProjectDetailsFieldSet to display project information and concatenated descriptions.
-- 2019-07-03  JaThlk  SCUXXW4-17765, Moved the scrap method implementation to ScrapInventoryPartParameterDialog.
-- 2019-06-07  JaThlk  SCUXXW4-21719, Fixed the label and navigation issues in scrap inventory part page.
-- 2019-04-26  fandse  SCUXXW4-6327, ViewConfigurationCommand must pass PartNo as well.
-- 2019-04-25  fandse  SCUXXW4-17694, Added logic to get default scrap quantity 1 for serials, removed parameter not used in dialog
-- 2019-03-12  JaThlk  SCUXXW4-17128, Added SessionId as an in parameter in IdentifySerialsInLocationAssistant.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-12-26  JaThlk  SCUXXW4-6327, Fixed the navigation in ViewConfigurationCommand.
-- 2018-09-17  JaThlk  SCUXXW4-6327, Added the call to assistant IdentifySerialsInLocAssistant
-- 2018-06-01  ChFolk  SCUXXW4-6327, Included from frmInvScrap using MTG Version: 1.17
----------------------------------------------------------------------------------------------------------
client ScrapInventoryPart;
component INVENT;
layer Core;
include fragment InventoryPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment HandlingUnitLovSelector;
include fragment ScrapInventoryPartParameterDialog;
include fragment IdentifySerialsInLocationAssistant;
include fragment ProjectDetailsFieldSet;

warningsenabled = CreateSerialSequence;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ScrapInventoryPartNavEntry parent InventNavigator.WarehouseManagementPartHandling at index 400 {
      label = "Scrap Inventory Part";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using InventoryPartConfigurationSet {
   label = "Scrap Inventory Part";
   startupmode = search;
   selector InventoryPartConfigSelector;
   group InvscrapGroup {
      label = "";
   }
   list PartLocationList(PartlocArray) {
      label = "";
   }
   commandgroup CommandGroupCmdGroup {

      command InventoryPartAvailabilityPlaCommand;
      command ViewConfigurationCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
command InventoryPartAvailabilityPlaCommand for InventoryPartConfiguration {
   label = "Inventory Part Availability Planning";
   enabled = [PartNo != null];
   execute {
      navigate "page/InventoryPartAvailabilityPlanning/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConfigurationId eq $[ConfigurationId] and ProjectId eq '*'";
   }
}

command ViewConfigurationCommand for InventoryPartConfiguration {
   label = "View Configuration";
   enabled = [ConfigurationId != "*"];
   variable Mode;
   execute {
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarMode:$[Mode],
                                                                                                   VarPartNo:$[PartNo],
                                                                                                   VarConfigurationId:$[ConfigurationId]}";
   }
}

command ScrapCommand for InventoryPartInStock {
   label = "Scrap";
   mode = SingleRecord;
   enabled = [true];
   variable ResultKeyNum {
      type = Number;
   }
   variable CatchUnitEnabledStr {
      type = Text;
   }
   variable QtyScrappedNum {
      type = Number;
   }
   variable PrintServiceabilityTagBool {
      type = Boolean;
   }
   variable DefaultQtyScrappedNum {
      type = Number;
   }
   execute {
      call GetCatchUnitEnabled(Contract, PartNo) into CatchUnitEnabledStr;
      set DefaultQtyScrappedNum = null;
      if [SerialNo != "*"] {
         set DefaultQtyScrappedNum = 1;
      }
      dialog ScrapDialog(CatchUnitEnabledStr, DefaultQtyScrappedNum, Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, parent.ReceiptIssueSerialTrackingDb, AvailableQtytoScrap) into(QtyScrappedNum, PrintServiceabilityTagBool) {
         when OK {
            if [PrintServiceabilityTagBool] {
               call GetReportResultKey(PartNo, Contract, SerialNo, LotBatchNo, QtyScrappedNum) into ResultKeyNum;
               printdialog ResultKeyNum;
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryPartConfigSelector for InventoryPartConfiguration {
   label = "${PartNo} - ${PartNoRef.Description} - ${Contract} - ${ConfigurationId}";
   static PartNo;
   static PartNoRef.Description;
   static Contract;
   static ConfigurationId;
}

---------------------------------- GROUPS -----------------------------------
group InvscrapGroup for InventoryPartConfiguration {
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      label = "Part";
      description = PartNoRef.Description;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field UoMRef {
      size = Small;
   }
   field CatchUoM {
      size = Small;
   }
   field ReceiptIssueSerialTrackingDb {
      visible = [false];
   }
}

----------------------------------- LISTS -----------------------------------
list PartLocationList for InventoryPartInStock {
   defaultfilter = [AvailableQtytoScrap > 0];
   field AvailableQtytoScrap;
   field CatchQtyOnhand;
   field LocationNo;
   lov HandlingUnitIdRef with ReferenceHandlingUnitLovSelector;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = HandlingUnitTypeIdRef.Description;
      label = "Handling Unit Type";
   }
   field HandlingUnitIdRef.Sscc {
      label = "SSCC";
   }
   field HandlingUnitIdRef.AltHandlingUnitLabelId {
      label = "Alt Handling Unit Label ID";
   }
   field Warehouse {
      label = "Warehouse ID";
   }
   field BayNo {
      label = "Bay ID";
   }
   field RowNo {
      label = "Row ID";
   }
   field TierNo {
      label = "Tier ID";
   }
   field BinNo {
      label = "Bin ID";
   }
   field ExpirationDate;
   field LotBatchNo;
   field SerialNo;
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
      label = "Condition Code";
   }
   field WaivDevRejNo;
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      description = AvailabilityControlIdRef.Description;
      label = "Availability Control";
   }
   field EngChgLevel;
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   field TopParentHandlingUnitId;
   lov TopParentHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = TopParentHandlingUnitTypeIdRef.Description;
      label = "Top Parent Handling Unit Type";
   }
   field TopParentSscc;
   field TopParentAltHandlingUnitLabelId;
   field PartOwnership;
   field Owner {
      contactwidget {
         enabled = [Owner != null];
         source {
            Customer = [PartOwnershipDb = "CUSTOMER OWNED"];
            Supplier = [PartOwnershipDb = "SUPPLIER OWNED" or PartOwnershipDb = "SUPPLIER LOANED" or PartOwnershipDb = "SUPPLIER RENTED" or PartOwnershipDb = "CONSIGNMENT"];
         }
      }
   }
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   field OwnerName;
   fieldset ProjectDetailsFieldSet;
   commandgroup CommandGroupCmdGroup {

      command ScrapCommand;
   }
}