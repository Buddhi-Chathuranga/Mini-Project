-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2022-01-27  JaThlk  SC21R2-7284, Modified CountReportLineVirtual to set the format uppercase for SerialNo, WaivDevRejNo and EngChgLevel.
-- 2021-12-23  JaThlk  SC21R2-2942, Added CountRepLineSerialAggregated entity and GetCountReportAggregated function to support counting serial items without specifying serials.
-- 2021-12-17  JaThlk  SC21R2-2932, Added GetRouteOrderInfo, RouteOrderStructure CountReportHeaderVirtual and CountReportLineVirtual to support adding count per count report lines.
-- 2021-10-28  DigPlk  SC21R2-2881, Added 'GetSessionIdSelection' function to support IdentifySerialsInLocRepeatAssistant.
-- 2019-10-21  DaZase  SCXTEND-428, Added ludependencies on CountingReportLine, CountingReportLineAggregated and HandlUnitStockSnapshot.
-- 2019-08-02  ChFolk  SCUXXW4-23117, Replaced Boolean flag with respective Enumeration.
-- 2019-07-10  ChFolk  SCUXXW4-22798, Modified Project information by adding get methods to increase performance.
-- 2019-04-26  SWiclk  SCUXXW4-18408, Modified functions GetCountReportLineAggregated() and GetCountReportLineDetails()
-- 2019-04-26          in order to improve performance.
-- 2019-04-25  DaZase  SCUXXW4-19618, Added initialcheck to all unbounded actions.
-- 2019-04-24  DaZase  SCUXXW4-19618, Moved (bound) action GetResultKey to entity CountingReport, moved (bound)
-- 2019-04-24  DaZase  actions ConfirmLine and CountLineWithoutDiff to both entities CountingReportLine
-- 2019-04-24  DaZase  and CountingReportLineAggregated
-- 2019-04-17  DaZase  SCUXXW4-14187, Added function GetSystemShortageFlag.
-- 2019-01-17  DaZase  SCUXXW4-6770, Converted from tbwCountInventory using MTG Version: 1.34
-- 2018-11-16  DaZase  SCUXXW4-6149, Converted from frmInvCountHandlingUnit using MTG Version: 1.32
-- 2018-11-08  DaZase  SCUXXW4-6154, Converted from frmInvCountInventory using MTG Version: 1.31
-----------------------------------------------------------------------------
projection CountPerCountReport;
component INVENT;
layer Core;
description "Use this API to display the current count report. The count reports are generated in the Create Count Report window";
category Users;
include fragment InventoryPartInStockDelivSelector;
include fragment InventoryPartInStockLov11Selector;
include fragment InventoryPartInStockLov10Selector;
include fragment InventoryPartInStockLov9Selector;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency PROJ
include fragment ProjectLovSelector;
// Everything needed for the IdentifySerialsInLocationAssistant
include fragment IdentifySerialsInLocationAssistant;
include fragment TemporaryPartTrackingSerialSelector;
include fragment InventoryLocation8Selector;
include fragment HandlingUnitLov9Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------


------------------------------ ENTITY DETAILS -------------------------------


---------------------------- GENERATED FROM APF -----------------------------


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CountingReportSet for CountingReport;
entityset CountingReportLineSet for CountingReportLine;
entityset HandlUnitStockSnapshotSet for HandlUnitStockSnapshot;
entityset CountReportHeaderVirtualSet for CountReportHeaderVirtual;
entityset CountRepLineSerialAggregatedSet for CountRepLineSerialAggregated;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CountingReport {
   crud = Read;

   where = "INV_LIST_NO IN (SELECT INV_LIST_NO FROM counting_report_line crl WHERE crl.confirmed_db = 'FALSE')";
   supportwarnings = [true];

   use attributes = Contract;
   // need ludependencies so attributes in header that is fetched from line are updated
   // (for example NoOfUncountedRows) since they control enabling of commands
   ludependencies = CountingReportLine;

   attribute InvListNo Text {
      maxlength = 100;
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute DetailReportPrinted Enumeration(GenYesNo) {
      fetch = "detail_report_printed_db";
      label = "Detailed Report Printed";
      editable = [false];
      required = [true];
   }
   attribute AggregatedReportPrinted Enumeration(GenYesNo) {
      fetch = "aggregated_report_printed_db";
      label = "Aggregated on Handling Unit / Location Report Printed";
      editable = [false];
      required = [true];
   }
   attribute NoOfUncountedRows Number {
      fetch = "Counting_Report_Line_API.Get_No_Uncounted_Rows(INV_LIST_NO)";
   }
   attribute NoOfCountedLines Number {
      fetch = "Counting_Report_Line_API.Get_No_Counted_Lines(INV_LIST_NO)";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

   action GetResultKey Text {
      parameter ReportId Text;
   }

}
@Override
entity CountingReportLine {
   crud = Read, Update;
   from = "counting_report_line_extended";
   keys = Seq, InvListNo {
      where = "SEQ = :Seq and INV_LIST_NO = :InvListNo";
   }
   use attributes = PartNo, ConfigurationId, QtyCount1, CatchQtyCounted, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, ProjectId, ActivitySeq, LastCountDate, Contract, Userid, QtyOnhand, NoteText, PartTrackingSessionId, WarehouseRouteOrder, BayRouteOrder, RowRouteOrder, TierRouteOrder, BinRouteOrder;
   ludependencies = HandlUnitStockSnapshot;
   attribute Seq Number {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyCount1 Number {
      label = "Counted Qty";
   }
   attribute InvQtyOnhand Number {
      fetch = "inv_qty_onhand";
      label = "On Hand Qty";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchQtyCounted Number {
      label = "Counted Catch Qty";
   }
   attribute InvCatchQtyOnhand Number {
      fetch = "inv_catch_qty_onhand";
      label = "On Hand Catch Qty";
      maxlength = 2000;
      editable = [false];
   }
   attribute ApprovalNeeded Boolean("TRUE", "FALSE") {
      fetch = "Counting_Result_API.Check_Approval_Needed(contract, part_no, configuration_id, qty_count1, qty_onhand, part_ownership_db)";
      label = "Approval Needed";
      editable = [false];
   }
   attribute Confirmed Boolean("TRUE", "FALSE") {
      fetch = "confirmed";
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeDesc Text {
      fetch = "handling_unit_type_desc";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Sscc Text {
      fetch = "sscc";
      label = "SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "alt_handling_unit_label_id";
      label = "Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute OutermostHandlingUnitId Number {
      fetch = "outermost_handling_unit_id";
      label = "Outermost Handling Unit ID";
      editable = [false];
   }
   attribute OutermostHandlingUnitTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(outermost_handling_unit_id))";
      label = "Outermost Handling Unit Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract,location_no)";
      label = "Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay";
      maxlength = 100;
      editable = [false];
   }
   // Changed Row to RowNo since Row seems to be protected word/command in Marble
   attribute RowNo Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row";
      maxlength = 100;
      editable = [false];
   }
   attribute Tier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier";
      maxlength = 100;
      editable = [false];
   }
   attribute Bin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin";
      maxlength = 100;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no ))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(availability_control_id)";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Rev No";
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "PROJECT_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      label = "Sub Project Id";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE (ACTIVITY_SEQ, 0, null, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      label = "Activity No";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
   }
   attribute SecondLevelParentHuId Text {
      fetch = "second_level_parent_hu_id";
      label = "Level 2 Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute SecondLevelSscc Text {
      fetch = "second_level_sscc";
      label = "Level 2 SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute SecondLevelAltHuLabelId Text {
      fetch = "second_level_alt_hu_label_id";
      label = "Level 2 Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Text {
      fetch = "top_parent_handling_unit_id";
      label = "Top Parent Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute TopParentHuTypeId Text {
      fetch = "top_parent_hu_type_id";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeDesc Text {
      fetch = "top_parent_hu_type_desc";
      label = "Top Parent Handling Unit Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "top_parent_sscc";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHuLabelId Text {
      fetch = "top_parent_alt_hu_label_id";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute LastCountDate Timestamp {
      label = "Latest Count";
      editable = [false];
   }
   attribute InvListNo Text {
      maxlength = 100;
      editable = [false];
   }
   attribute Contract Text {
      maxlength = 100;
      editable = [false];
   }
   attribute Userid Text;
   attribute QtyOnhand Number {
      label = "On Hand Qty";
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute PartOwnershipDb Text {
      fetch = "part_ownership_db";
      label = "Part Ownership";
      maxlength = 2000;
      editable = [false];
   }
   attribute SerialTrackingAtReceiptAndIssue Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      label = "Serial Tracking at Receipt and Issue";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartTrackingSessionId Number {
      label = "Session ID";
   }
   attribute PartShortageExist Number {
      fetch = "Shortage_Demand_API.Shortage_Exists(CONTRACT, PART_NO)";
   }
   attribute PartShortageFlagDb Text {
      fetch = "Inventory_Part_API.Get_Shortage_Flag_Db(CONTRACT, PART_NO)";
   }
   attribute RcptIssuePartTrackingDb Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      label = "Receipt Issue Serial Tracked Db";
      maxlength = 2000;
      editable = [false];
   }

   attribute InvSerialTrackingDb Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(part_no)";
      label = "Inventory Serial Tracking Code Db";
      maxlength = 2000;
      editable = [false];
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitRef(OutermostHandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitIdRef(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStockDeliv(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);

   action ConfirmLine {
      ludependencies = CountingReport;
   }

   action CountLineWithoutDiff {
      parameter InvQtyOnhand Number;
      parameter InvCatchQtyOnhand Number;
   }

}

@Override
entity CountingReportLineAggregated using CountingReportLine {
   crud = Read, Update;
   from = "counting_report_line_extended";
   exec = "COUNTING_REPORT_LINE_API";
   keys = Seq, InvListNo {
      where = "SEQ = :Seq and INV_LIST_NO = :InvListNo";
   }
   use attributes = PartNo, ConfigurationId, QtyCount1, CatchQtyCounted, LocationNo, HandlingUnitId, SerialNo, LotBatchNo, WaivDevRejNo, EngChgLevel, ProjectId, ActivitySeq, LastCountDate, Contract, Userid, QtyOnhand, NoteText, PartTrackingSessionId;
   ludependencies = HandlUnitStockSnapshot;
   attribute Seq Number {
      fetch = "seq";
      label = "Seq No";
      required = [true];
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyCount1 Number {
      fetch = "qty_count1";
      label = "Qty Counted";
   }
   attribute InvQtyOnhand Number {
      fetch = "inv_qty_onhand";
      label = "Current Qty Onhand";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchQtyCounted Number {
      fetch = "catch_qty_counted";
      label = "Catch Qty Counted";
   }
   attribute InvCatchQtyOnhand Number {
      fetch = "inv_catch_qty_onhand";
      label = "Catch Qty On Hand";
      maxlength = 2000;
      editable = [false];
   }
   attribute ApprovalNeeded Boolean("TRUE", "FALSE") {
      fetch = "Counting_Result_API.Check_Approval_Needed(contract, part_no, configuration_id, qty_count1, qty_onhand, part_ownership_db)";
      label = "Approval Needed";
      editable = [false];
   }
   attribute Confirmed Boolean("TRUE", "FALSE") {
      fetch = "Counting_Result_API.Check_Exist(contract,part_no,configuration_id, location_no,lot_batch_no,serial_no,eng_chg_level,waiv_dev_rej_no,activity_seq,handling_unit_id,last_count_date)";
      label = "Confirmed";
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
      required = [true];
      editable = [ETag = null];
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
      required = [true];
      editable = [ETag = null];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeDesc Text {
      fetch = "handling_unit_type_desc";
      label = "Handling Unit Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Sscc Text {
      fetch = "sscc";
      label = "SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "alt_handling_unit_label_id";
      label = "Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no ))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(availability_control_id)";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Rev No";
      maxlength = 6;
      editable = [false];
      format = uppercase;
   }
   attribute Warehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract,location_no)";
      label = "Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay";
      maxlength = 100;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row";
      maxlength = 100;
      editable = [false];
   }
   attribute Tier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier";
      maxlength = 100;
      editable = [false];
   }
   attribute Bin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "PROJECT_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      label = "Sub Project Id";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      label = "Activity No";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      maxlength = 10;
      editable = [ETag = null];
   }
   attribute SecondLevelParentHuId Number {
      fetch = "second_level_parent_hu_id";
      label = "Level 2 Handling Unit ID";
      editable = [false];
   }
   attribute SecondLevelSscc Text {
      fetch = "second_level_sscc";
      label = "Level 2 SSCC";
      maxlength = 100;
      editable = [false];
   }
   attribute SecondLevelAltHuLabelId Text {
      fetch = "second_level_alt_hu_label_id";
      label = "Level 2 Alt Handling Unit Label ID";
      maxlength = 100;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "top_parent_handling_unit_id";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeId Text {
      fetch = "top_parent_hu_type_id";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeDesc Text {
      fetch = "top_parent_hu_type_desc";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "top_parent_sscc";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHuLabelId Text {
      fetch = "top_parent_alt_hu_label_id";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute LastCountDate Timestamp {
      fetch = "last_count_date";
      label = "Latest Count Date";
      editable = [false];
   }
   attribute InvListNo Text {
      fetch = "inv_list_no";
      label = "Count Report No";
      maxlength = 100;
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 100;
      editable = [false];
   }
   attribute Userid Text {
      fetch = "userid";
      label = "User ID";
      maxlength = 30;
   }
   attribute QtyOnhand Number {
      fetch = "qty_onhand";
      label = "Current Qty Onhand";
   }
   attribute NoteText Text {
      fetch = "note_text";
      label = "Note";
      maxlength = 2000;
   }
   attribute RcptIssuePartTrackingDb Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      label = "Receipt Issue Serial Tracked Db";
      maxlength = 2000;
      editable = [false];
   }
   attribute InvSerialTrackingDb Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(part_no)";
      label = "Inventory Serial Tracking Code Db";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "part_ownership_db";
      label = "Part Ownership";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartTrackingSessionId Number {
      fetch = "part_tracking_session_id";
      label = "Session ID";
   }
   attribute PartShortageExist Number {
      fetch = "Shortage_Demand_API.Shortage_Exists(CONTRACT, PART_NO)";
   }
   attribute PartShortageFlagDb Text {
      fetch = "Inventory_Part_API.Get_Shortage_Flag_Db(CONTRACT, PART_NO)";
   }
   // TODO: If we get some kind of init method and window variable to handle this system parameter we don't need this attribute anymore
   attribute SystemParameterShortageFlag Text {
      fetch = "Mpccom_System_Parameter_API.Get_Parameter_Value1('SHORTAGE_HANDLING')";
      editable = [false];
   }

   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference InventoryPartInStockRef(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStock(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId);
   reference PartCatalogRef(PartNo) to PartCatalog(PartNo);
   reference HandlingUnitIdRef(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStockDeliv(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);

   --- Actions for Details Tab (and binded/nested list on Aggregated Tab) ------
   action ConfirmLine {
      ludependencies = CountingReportLine;
      ludependencies = CountingReport;
      ludependencies = HandlUnitStockSnapshot;
   }

   action CountLineWithoutDiff {
      parameter InvQtyOnhand Number;
      parameter InvCatchQtyOnhand Number;
      ludependencies = CountingReportLine;
      ludependencies = HandlUnitStockSnapshot;
   }
}

@Override
entity CountRepLineSerialAggregated using CountingReportLine {
   crud = Read, Update;
   from = "Count_Rep_Line_Serial_Aggregat";
   keys = InvListNo, Contract, PartNo, HandlingUnitId, LocationNo, ConfigurationId, LotBatchNo, SerialNo, WaivDevRejNo, ActivitySeq, EngChgLevel;
   ludependencies = CountingReportLine;

   attribute InvListNo Text {
      fetch = "inv_list_no";
      maxlength = 15;
      required = [true];
      editable = [ETag = null];
   }
   attribute Seq Number {
      label = "Seq No";
      required = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      fetch = "NVL(handling_unit_id, 0)";
      label = "Handling Unit ID";
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Rev No";
      maxlength = 6;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Seq";
      editable = [false];
   }
   attribute AggregatedCountedQty Number {
      label = "Counted Qty";
      fetch = "qty_count1";
      editable = [true];
   }
   attribute AggregatedInvQtyOnhand Number {
      fetch = "inv_qty_onhand";
      editable = [false];
   }

   reference HandlingUnitIdRef(Contract, HandlingUnitId) to InventoryPartInStockLov9(Contract, PartNo) {
      label = "Handling Unit ID";
   }
   array SerialAggregatedArray(InvListNo, Contract, PartNo, HandlingUnitId, LocationNo, ConfigurationId, LotBatchNo, WaivDevRejNo, ActivitySeq, EngChgLevel) to CountingReportLine(InvListNo, Contract, PartNo, HandlingUnitId, LocationNo, ConfigurationId, LotBatchNo, WaivDevRejNo, ActivitySeq, EngChgLevel) {
      where = "((:parent.SerialNo = '#' AND :child.SerialNo != '*') OR (:parent.SerialNo = '*' AND :parent.SerialNo = :child.SerialNo)) ";
   }

   action UpdateCountedQty {
      ludependencies = CountingReportLine;
      parameter AggregatedCountedQty Number;
      parameter AggregatedInvQtyOnhand Number;
   }
}

------------------------------- ENUMERATIONS --------------------------------
---------------- Search Structures for Details Tab --------------------------
enumeration ShowLineDetails {
   enumerationtype = Custom;
   value = "ShowAll" {
      identifier = "ShowAll";
      label = "Show All";
   }
   value = "ShowAllUnconfirmed" {
      identifier = "ShowAllUnconfirmed";
      label = "Show All Unconfirmed Lines";
   }
   value = "ShowSingle" {
      identifier = "ShowSingle";
      label = "Show Single";
   }
   value = "ShowSingleUnconfirmed" {
      identifier = "ShowSingleUnconfirmed";
      label = "Show Single Unconfirmed Lines";
   }
}
---------------- Search Structures for Aggregated Tab -----------------------
enumeration ShowLineAggregated {
   enumerationtype = Custom;
   value = "ShowOnlyTopLevel" {
      identifier = "ShowOnlyTopLevel";
      label = "Show Only Top Level";
   }
   value = "ShowOnlyTopLevelUnconfirmed" {
      identifier = "ShowOnlyTopLevelUnconfirmed";
      label = "Show Only Top Level Unconfirmed Lines";
   }
   value = "ShowAll" {
      identifier = "ShowAll";
      label = "Show All";
   }
   value = "ShowAllUnconfirmed" {
      identifier = "ShowAllUnconfirmed";
      label = "Show All Unconfirmed Lines";
   }
}
---------------------------------- QUERIES ----------------------------------
@Override
query HandlUnitStockSnapshot {
   from = "counting_report_handl_unit_uxx";
//   keys = InvListNo, HandlingUnitId {
//      where = "INV_LIST_NO = :InvListNo and HANDLING_UNIT_ID = :HandlingUnitId";
   //   }
   // Added LocationNo as extra key to handle cases where its a 0/null HandlingUnitId on several records
   // If this don't work 100% compared to IEE we probably need to use objid as the only key instead here if possible
   // had to add NVL on handling unit id to make the select for the "splitter" part to work when you don't have handling unit id
   keys = InvListNo, HandlingUnitId, LocationNo {
      where = "INV_LIST_NO = :InvListNo and NVL(HANDLING_UNIT_ID,0) = :HandlingUnitId and LOCATION_NO = :LocationNo";
   }

   ludependencies = CountingReportLine;

   attribute InvListNo Text {
      fetch = "inv_list_no";
      maxlength = 15;
      required = [true];
      editable = [ETag = null];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
      editable = [false];
   }
   attribute WarehouseId Text {
      fetch = "warehouse_id";
      label = "Warehouse";
      maxlength = 15;
      editable = [false];
   }
   attribute BayId Text {
      fetch = "bay_id";
      label = "Bay";
      maxlength = 5;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "row_id";
      label = "Row";
      maxlength = 5;
      editable = [false];
   }
   attribute TierId Text {
      fetch = "tier_id";
      label = "Tier";
      maxlength = 5;
      editable = [false];
   }
   attribute BinId Text {
      fetch = "bin_id";
      label = "Bin";
      maxlength = 5;
      editable = [false];
   }
   attribute StructureLevel Number {
      fetch = "structure_level";
      label = "Structure Level";
      editable = [false];
   }
   // Used as key
   attribute HandlingUnitId Number {
      fetch = "NVL(handling_unit_id, 0)";
      label = "Handling Unit ID";
      editable = [false];
   }
   // Used in the client
   attribute HandlingUnitIdClient Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
      editable = [false];
   }
   attribute Sscc Text {
      fetch = "sscc";
      label = "SSCC";
      maxlength = 18;
      editable = [ETag = null];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "alt_handling_unit_label_id";
      label = "Alt Handling Unit Label ID";
      maxlength = 25;
      editable = [ETag = null];
   }
   attribute Counted Boolean("TRUE", "FALSE") {
      fetch = "counted";
      label = "Counted";
      required = [true];
      editable = [ETag = null];
   }
   attribute ApprovalNeeded Boolean("TRUE", "FALSE") {
      fetch = "approval_needed";
      label = "Approval Needed";
      required = [true];
      editable = [ETag = null];
   }
   attribute Confirmed Boolean("TRUE", "FALSE") {
      fetch = "confirmed";
      label = "Confirmed";
      required = [true];
      editable = [ETag = null];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
//   attribute HandlingUnitTypeDescription Text {
//      fetch = "handling_unit_type_description";
//      label = "Type Description";
//      maxlength = 200;
//      editable = [false];
//   }
   attribute HandlingUnitCategoryId Text {
      fetch = "handling_unit_category_id";
      label = "Handling Unit Category ID";
      maxlength = 25;
      editable = [false];
   }
//   attribute HandlingUnitCategoryDesc Text {
//      fetch = "handling_unit_category_desc";
//      label = "Category Description";
//      maxlength = 200;
//      editable = [false];
//   }
   attribute SecondLevelParentHuId Number {
      fetch = "second_level_parent_hu_id";
      label = "Level 2 Handling Unit ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "top_parent_handling_unit_id";
      label = "Top Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "top_parent_sscc";
      label = "Top Parent SSCC";
      maxlength = 18;
      editable = [false];
   }
   attribute TopParentAltHuLabelId Text {
      fetch = "top_parent_alt_hu_label_id";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 25;
      editable = [false];
   }
   attribute TopParentHuTypeId Text {
      fetch = "top_parent_hu_type_id";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 25;
      editable = [false];
   }
//   attribute TopParentHuTypeDesc Text {
//      fetch = "top_parent_hu_type_desc";
//      label = "Top Parent Handling Unit Type Description";
//      maxlength = 200;
//      editable = [false];
//   }
   attribute Composition Text {
      fetch = "composition";
      label = "Composition";
      maxlength = 200;
      editable = [false];
   }
   attribute Owner Text {
      fetch = "owner";
      label = "Owner";
      maxlength = 20;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "owner_name";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "part_ownership";
      label = "Part Ownership";
      maxlength = 200;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 25;
      editable = [false];
   }
   attribute AvailabilityControlDesc Text {
      fetch = "availability_control_desc";
      label = "Availability Control Description";
      maxlength = 50;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Rev No";
      maxlength = 6;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Seq";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Program_id";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(PROGRAM_ID)";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "PROJECT_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute SubProjectId Text {
      fetch = "sub_project_id";
      label = "Sub Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivityNo Text {
      fetch = "activity_no";
      label = "Activity No";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference HandlingUnitRef(SecondLevelParentHuId) to HandlingUnit(HandlingUnitId);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference HandlingUnitIdRef(Contract, HandlingUnitId) to InventoryPartInStockLov9(Contract, PartNo) {
      label = "Handling Unit ID";
   }
   reference SsccRef(Contract, Sscc) to InventoryPartInStockLov10(Contract, PartNo) {
      label = "SSCC";
   }
   reference AltHandlingUnitLabelIdRef(Contract, AltHandlingUnitLabelId) to InventoryPartInStockLov11(Contract, PartNo) {
      label = "Alt Handling Unit Label ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   reference HandlingUnitCategoryRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category";
   }
   reference TopParentHandlingUnitTypeIdRef(TopParentHuTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Top Parent Handling Unit Type";
   }

   array CountingReportLineAggregatedArray(InvListNo) to CountingReportLineAggregated(InvListNo) {
      where = "((:child.HandlingUnitId IN (SELECT HANDLING_UNIT_ID FROM HANDLING_UNIT_EXTENDED
                                            CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                            START WITH HANDLING_UNIT_ID IN (:parent.HandlingUnitId))) OR
                                            (:parent.HandlingUnitId = :child.HandlingUnitId AND EXISTS (SELECT *
                                            FROM INV_PART_STOCK_SNAPSHOT_PUB ipss
                                            WHERE ipss.source_ref_type_db = 'COUNTING_REPORT'
                                            AND   :child.LocationNo = :parent.LocationNo
                                            AND   ipss.source_ref1 = :child.InvListNo
                                            AND   ipss.handling_unit_id = :child.HandlingUnitId)))";

   }
}


---------------------------------- ACTIONS ----------------------------------
---------------------- Actions for Header -----------------------------------
action CountAllLinesWithoutDif {
   initialcheck CountingReportInitialCheck(InvListNo);
   parameter InvListNo Text;
   ludependencies = CountingReportLine;
   ludependencies = HandlUnitStockSnapshot;
}

action ConfirmAllCountedLines {
   initialcheck CountingReportInitialCheck(InvListNo);
   parameter InvListNo Text;
   ludependencies = CountingReportLine;
}

action CancelCountingReport {
   initialcheck CountingReportInitialCheck(InvListNo);
   parameter InvListNo Text;
   ludependencies = CountingReportLine;
}

---------------------- Actions for Aggregated Tab ---------------------------
action CountWithoutDiff {
   initialcheck HandlUnitStockSnapshotInitialCheck(FullSelection);
   parameter FullSelection Text;
   ludependencies = HandlUnitStockSnapshot;
}

action CountAsZero {
   initialcheck HandlUnitStockSnapshotInitialCheck(FullSelection);
   parameter FullSelection Text;
   ludependencies = HandlUnitStockSnapshot;
}

action ConfirmAggregated {
   initialcheck HandlUnitStockSnapshotInitialCheck(FullSelection);
   parameter FullSelection Text;
   ludependencies = HandlUnitStockSnapshot;
   ludependencies = CountingReport;
}


--------------------------------- FUNCTIONS ---------------------------------
function GetSessionIdSelection Structure(IdentifySerialsRecStructure) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter QtyNum Text;
   parameter CatchQtyNum Number;
   parameter AssistantTitle Text;
   parameter AssistantContext Text;
   parameter SessionId Number;
}

function GetSystemShortageFlag Text;

-------------------- Functions for Details Tab ------------------------------
function GetDetailsSearchContextDefaults Structure(DetailsSearchContextStructure);

function GetCountReportLineDetails List<Entity(CountingReportLine)> {
   parameter ShowDetails Enumeration(ShowLineDetails);
   parameter InvListNo Text;
   basedon CountingReportLineSet;
   from = "counting_report_line_extended";
   where = "inv_list_no = :InvListNo
   AND (CASE
   WHEN :ShowDetails = 'ShowAll' THEN 1
   WHEN :ShowDetails = 'ShowSingle' AND outermost_handling_unit_id IS NULL THEN 1
   WHEN :ShowDetails = 'ShowAllUnconfirmed' AND Counting_Result_API.Check_Exist(contract,
                                                                                 part_no,
                                                                                 configuration_id,
                                                                                 location_no,
                                                                                 lot_batch_no,
                                                                                 serial_no,
                                                                                 eng_chg_level,
                                                                                 waiv_dev_rej_no,
                                                                                 activity_seq,
                                                                                 handling_unit_id,
                                                                                 last_count_date) = 'FALSE' THEN 1
   WHEN :ShowDetails = 'ShowSingleUnconfirmed' AND outermost_handling_unit_id IS NULL
                                               AND Counting_Result_API.Check_Exist(contract,
                                                                                    part_no,
                                                                                    configuration_id,
                                                                                    location_no,
                                                                                    lot_batch_no,
                                                                                    serial_no,
                                                                                    eng_chg_level,
                                                                                    waiv_dev_rej_no,
                                                                                    activity_seq,
                                                                                    handling_unit_id,
                                                                                    last_count_date) = 'FALSE' THEN 1
   ELSE 0 END) = 1";

}


-------------------- Functions for Create Count Report Line Assistant  ------------------------------
function GetRouteOrderInfo Structure(RouteOrderStructure) {
   parameter Contract Text;
   parameter LocationNo Text;
}

function SetLovWhereForHandlingUnit List<Entity(HandlingUnitLov9)> {
   parameter LocationNo Text;
   parameter Contract Text;
   where = "(TOP_LOCATION_NO IS NULL OR (TOP_LOCATION_NO = :LocationNo AND TOP_CONTRACT = :Contract)) AND SHIPMENT_ID IS NULL ";
}

function GetExistingStockRecordInfo Structure(ExistingStockRecordInfoStructure) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
}


-------------------- Functions for Aggregated Tab ---------------------------
function GetAggregatedSearchContextDefaults Structure(AggregatedSearchContextStructure);

function GetCountReportLineAggregated List<Entity(HandlUnitStockSnapshot)> {
   parameter ShowAggregated Enumeration(ShowLineAggregated);
   parameter InvListNo Text;
   basedon HandlUnitStockSnapshotSet;
   from = "counting_report_handl_unit_uxx";
   where = "inv_list_no = :InvListNo
   AND (CASE
   WHEN :ShowAggregated = 'ShowAll' THEN 1
   WHEN :ShowAggregated = 'ShowOnlyTopLevel' AND outermost_db = 'TRUE' THEN 1
   WHEN :ShowAggregated = 'ShowOnlyTopLevelUnconfirmed' AND outermost_db = 'TRUE' AND confirmed = 'FALSE' THEN 1
   WHEN :ShowAggregated = 'ShowAllUnconfirmed' AND confirmed = 'FALSE' THEN 1
   ELSE 0 END) = 1";

}

-------------------- Functions for Details Aggregated Serials Tab ---------------------------
function GetCountReportAggregated List<Entity(CountRepLineSerialAggregated)> {
   parameter ShowDetails Enumeration(ShowLineDetails);
   parameter InvListNo Text;
   basedon CountRepLineSerialAggregatedSet;
   from = "Count_Rep_Line_Serial_Aggregat";
   where = "inv_list_no = :InvListNo
   AND (CASE
   WHEN :ShowDetails = 'ShowAll' THEN 1
   WHEN :ShowDetails = 'ShowSingle' AND outermost_handling_unit_id IS NULL THEN 1
   WHEN :ShowDetails = 'ShowAllUnconfirmed' AND Counting_Report_Line_API.Any_Unconfirmed_Line_Exist(inv_list_no,
                                                                                                    contract,
                                                                                                    part_no,
                                                                                                    configuration_id,
                                                                                                    location_no,
                                                                                                    lot_batch_no,
                                                                                                    NULL,
                                                                                                    eng_chg_level,
                                                                                                    waiv_dev_rej_no,
                                                                                                    activity_seq,
                                                                                                    handling_unit_id) = 'TRUE' THEN 1
   WHEN :ShowDetails = 'ShowSingleUnconfirmed' AND outermost_handling_unit_id IS NULL
   AND Counting_Report_Line_API.Any_Unconfirmed_Line_Exist(inv_list_no,
                                                           contract,
                                                           part_no,
                                                           configuration_id,
                                                           location_no,
                                                           lot_batch_no,
                                                           NULL,
                                                           eng_chg_level,
                                                           waiv_dev_rej_no,
                                                           activity_seq,
                                                           handling_unit_id) = 'TRUE' THEN 1
   ELSE 0 END) = 1";

}
-------------------------------- STRUCTURES ---------------------------------
-------------------- Structures for Details Tab -----------------------------
structure DetailsSearchContextStructure {
   attribute ShowDetails Enumeration(ShowLineDetails) {
      label = "Show Details";
   }
}

-------------------- Structures for Aggregated Tab --------------------------
structure AggregatedSearchContextStructure {
   attribute ShowAggregated Enumeration(ShowLineAggregated) {
      label = "Show Aggregated";
   }
}

-------------------- Structures for Global Commands --------------------------
structure RouteOrderStructure {
   attribute WarehouseRouteOrder Text;
   attribute BayRouteOrder Text;
   attribute RowRouteOrder Text;
   attribute TierRouteOrder Text;
   attribute BinRouteOrder Text;
}

structure ExistingStockRecordInfoStructure {
   attribute ExpirationDate Date;
   attribute ReceiptDate Date;
   attribute AvailabilityControlId Text;
   attribute RotablePartPoolId Text;
   attribute CatchQtyOnhand Number;
   attribute PartOwnership Text;
   attribute OwningCustomerNo Text;
   attribute OwningVendorNo Text;
}

--------------------------------- VIRTUALS ----------------------------------
-------------------- Virtuals for Create Count Report Line Assistant ------------
virtual CountReportHeaderVirtual {
   attribute InvListNo Text {
      label = "Count Report No";
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      editable = [false];
   }
   array CountReportArray(InvListNo, Contract) to CountReportLineVirtual(InvListNo, Contract);
   action CreateCountReportLines {
      ludependencies = CountingReportLine;
   }
}

virtual CountReportLineVirtual {
   crud = Read, Create, Update, Delete;
   attribute InvListNo Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute Seq Number {
      label = "Seq No";

      editable = [false];
   }
   attribute PartNo Text {
      required = [true];
   }
   attribute LocationNo Text {
      required = [true];
   }
   attribute ConfigurationId Text {
      required = [true];
   }
   attribute SerialNo Text {
      required = [true];
      format = uppercase;
   }
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
      required = [true];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      required = [true];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      required = [true];
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      required = [true];
      format = uppercase;
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      required = [true];
      format = uppercase;
   }
   attribute InvQtyOnhand Number;
   attribute CatchQtyOnhand Number {
      editable = [false];
   }
   attribute WarehouseRouteOrder Text {
      editable = [false];
   }
   attribute BayRouteOrder Text {
      editable = [false];
   }
   attribute RowRouteOrder Text {
      editable = [false];
   }
   attribute TierRouteOrder Text {
      editable = [false];
   }
   attribute BinRouteOrder Text {
      editable = [false];
   }
   attribute ExpirationDate Date {
      editable = [false];
   }
   attribute ReceiptDate Date {
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      editable = [false];
   }
   attribute RotablePartPoolId Text {
      editable = [false];
   }
   attribute PartOwnership Text {
      editable = [false];
   }
   attribute OwningCustomerNo Text {
      editable = [false];
   }
   attribute OwningVendorNo Text {
      editable = [false];
   }

   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation8(Contract, LocationNo) {
      label = "Location No";
   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
}


--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------



