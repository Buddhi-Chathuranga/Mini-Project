-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-10-28  DigPlk  SC21R2-2883, Added 'GetSessionIdSelection' function and to support IdentifySerialsInLocRepeatAssistant.
-- 2019-07-10  ChFolk  SCUXXW4-22798, Modified Project information by adding get methods to increase performance.
-- 2019-07-10  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-04-25  DaZase  SCUXXW4-19621, Moved (bound) GetReportResultKey to CountingReport,
-- 2019-04-25          added custom initialcheck to CompleteReport and CancelReport.
-- 2018-06-27  DaZase  SCUXXW4-5924, Converted from frmApproveCountReport using MTG Version: 1.21
-----------------------------------------------------------------------------
projection CountResultsPerCountReportHandling;
component INVENT;
layer Core;
description "Use this API to approve or cancel rejected counting results on a count report. It is also possible change the quantity counted before approval. If the counting result is approved, the quantity on hand will be updated with the result from the counting and the freeze flag will be released. From this API it is also possible to print a counting control report where all rejected lines will be printed.";
category Users;
include fragment InventoryPartLocationSelector;
include fragment SiteUivSelector;
// Everything needed for the IdentifySerialsInLocationAssistant
include fragment IdentifySerialsInLocationAssistant;
include fragment TemporaryPartTrackingSerialSelector;
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CountingReports for CountingReport;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CountingReport {
   crud = Read;
   ludependencies = CountingResult;
   from = "counting_report_reject_result";
   attribute InvListNo Text {
      maxlength = 100;
   }
   reference ContractRef(Contract) to SiteUiv(Contract) {
      label = "Site";
   }
   array CountingResultArray(InvListNo) to CountingResult(InvListNo);

   action GetReportResultKey Number;

}
@Override
entity CountingResult {
   crud = Read, Update;
   keys = Contract, PartNo, ConfigurationId, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, CountDate {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and LOCATION_NO = :LocationNo and HANDLING_UNIT_ID = :HandlingUnitId and LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and WAIV_DEV_REJ_NO = :WaivDevRejNo and ENG_CHG_LEVEL = :EngChgLevel and COUNT_DATE = :CountDate";
   }
   where = "OBJSTATE = 'Rejected'";
   attribute InvListNo Text {
      label = "Inv List No";
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT,PART_NO)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyCounted Number {
      label = "Counted Qty";
      maxlength = 0;
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
      editable = [ETag = null];
   }
   attribute QtyDifference Number {
      fetch = "(QTY_COUNTED - QTY_ONHAND)";
      label = "Difference Qty";
      editable = [false];

      updatable = [false];
      // temp fix until this can be set in projection again TEUXX-12323
   }
   attribute DiffAmount Number {
      fetch = "Counting_Result_API.Get_Diff_Amount(CONTRACT,QTY_COUNTED,QTY_ONHAND,INVENTORY_VALUE)";
      label = "Difference Amount";
      format = ifscurrency;
      editable = [false];

      updatable = [false];
      // temp fix until this can be set in projection again TEUXX-12323
   }
   attribute CountDiffAmount Number {
      label = "Max Counting Difference Amt";
      format = ifscurrency;
   }
   attribute DiffPercentage Number {
      fetch = "Counting_Result_API.Get_Diff_Percentage(QTY_COUNTED,QTY_ONHAND)";
      label = "Difference Percentage";
      format = decimal;
      editable = [false];
      updatable = [false];
      // temp fix until this can be set in projection again TEUXX-12323
   }
   attribute CountDiffPercentage Number {
      fetch = "COUNT_DIFF_PERCENTAGE";
      label = "Max Counting Difference Percentage";
      editable = [false];
   }
   attribute CatchQtyCounted Number {
      label = "Counted Catch Qty";
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty";
      editable = [ETag = null];
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute CatchQtyDifference Number {
      fetch = "(CATCH_QTY_COUNTED - CATCH_QTY_ONHAND)";
      label = "Catch Qty Difference";
      editable = [false];

      updatable = [false];
      // temp fix until this can be set in projection again TEUXX-12323
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO ))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(Inventory_Part_In_Stock_API.Get_Availability_Control_Id(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID))";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute InventoryValue Number {
      label = "Unit Cost";
      required = [true];
      editable = [ETag = null];
      format = ifscurrency;
   }
   attribute CountDate Timestamp {
      label = "Confirmation Date/Time";
   }
   attribute CountUserId Text {
      editable = [ETag = null];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "PROJECT_PROGRAM_GLOBAL_API.Get_Description(Project_API.Get_Program_Id(PROJECT_ID))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "PROJECT_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      label = "Sub Project Id";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      label = "Activity No";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute PartTrackingSessionId Number {
      label = "Session ID";
   }
   attribute SerialTrackingatReceiptandIssue Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
      label = "Serial Tracking at Receipt and Issue";
      maxlength = 2000;
      editable = [false];
   }
   attribute InventoryValueUnrounded Number {
      fetch = "INVENTORY_VALUE";
      label = "Inventory Value Unrounded";
      editable = [false];
   }
   attribute InventorySerialTracking Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(PART_NO)";
      label = "Inventory Serial Tracking";
      editable = [false];
   }
   // InventoryUoM added so InventoryUoMRef will work incl the LOV
   attribute InventoryUoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT,PART_NO)";
      editable = [false];
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference InventoryPartInStockRef(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStock(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference PartCatalogRef(PartNo) to PartCatalog(PartNo);
   reference SeqRef(InvListNo, Seq) to CountingReportLine(InvListNo, Seq) {
      label = "Seq No";
   }
   reference InventoryUoMRef(InventoryUoM) to IsoUnit(UnitCode) {
      label = "Inventory UoM";
   }
   reference WaivDevRejNoRef(Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo) to InventoryPartLocation(Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo) {
      label = "W/D/R No";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action CompleteReport {
   initialcheck CountingResultInitialCheck(InvListNo);
   parameter InvListNo Text;
   ludependencies = CountingReport, CountingResult;
}

action CancelReport {
   initialcheck CountingResultInitialCheck(InvListNo);
   parameter InvListNo Text;
   ludependencies = CountingReport, CountingResult;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetDifference Structure(DiffAmountAndPercentageStructure) {
   parameter Contract Text;
   parameter QtyCounted Number;
   parameter QtyOnhand Number;
   parameter InventoryValue Number;
}

function GetSessionIdSelection Structure(IdentifySerialsRecStructure) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter QtyNum Text;
   parameter CatchQtyNum Number;
   parameter AssistantTitle Text;
   parameter AssistantContext Text;
   parameter SessionId Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure DiffAmountAndPercentageStructure {
   attribute DiffAmount Number;
   attribute DiffPercentage Number;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


