----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-11-04  DigPlk  SC21R2-2888, Replaced the functionality of IdentifySerialsInLocAssistant with IdentifySerialsInLocRepeatAssistant.
-- 2021-06-30  RasDlk  SC21R2-1036, Added the Shipment Handling Unit tab.
-- 2020-05-27  RasDlk  SCSPRING20-689, Passed the relevant parameters to GetDetailsTab and GetAggregatedTab functions.
-- 2020-03-11  RasDlk  SCSPRING20-689, Modified WarehouseWorkerCompleteCustomerOrderPickListCommand by passing the relevant parameters for MovePartsIntoShipmentInventoryDialog.
-- 2020-01-29  RasDlk  SCSPRING20-689, Replaced the function name CheckDialogThree with CheckReportPicking.
-- 2019-11-13  FRBESE  SCXTEND-1158, Changed MyWarehouseTaskNavEntry navigator entry index from 200 to 300.
-- 2019-06-21  SURBLK  SCUXXW4-21903, Added status badges and stateindicator.
-- 2019-06-18  ErRalk  SCUXXW4-22632, Modified ReportPickAllCommand to enable command when there is no record selection.
-- 2019-06-10  ErRalk  SCUXXW4-22186, Added warningsenabled PickSelected and PickAll.
-- 2019-05-16  ErRalk  SCUXXW4-9295, Added CustomerOrderPickList
-- 2019-04-25  SaGelk  SCUXXW4-6345, Converted frmMyWarehouseTask using MTG Version: 1.34
----------------------------------------------------------------------------------------------------------
client MyWarehouseTask;
component INVENT;
layer Core;
projection MyWarehouseTaskHandling;
--------------------------------- FRAGMENTS ---------------------------------
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseWorkerLocGroupLovSelector;
include fragment TransportTask;
include fragment ParkReasonDialog;
@DynamicComponentDependency SHPORD
include fragment MyShopOrderIssuePickLineW;

@DynamicComponentDependency SHPMNT
include fragment ReportPickingOfPickListLineBase;
@DynamicComponentDependency SHPMNT
include fragment MovePartsIntoShipmentInventoryDialog;

@DynamicComponentDependency SHPMNT
warningsenabled = PickSelected, PickAll;

----------------------------- VISUAL COMPONENTS -----------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry MyWarehouseTaskNavEntry parent InventNavigator.WarehouseManagementWarehouseTasks at index 300 {
      label = "My Warehouse Task";
      tree MyWarehouseTaskTree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page WarehouseWorkerPage using WarehouseWorkerSet {
   label = "My Warehouse Task";
   selector WarehouseWorkerSelector;
   group MyWarehouseWorkerGroup;
   list MyTasksList(MyTasksArray);
}

page WarehouseTaskPage using WarehouseTaskSet {
   label = "My Warehouse Task";
   stateindicator WarehouseTaskStateIndicator;
   selector WarehouseTaskSelector;
   group MyWarehouseTaskGroup {
      collapsed = [true];
   }

   @DynamicComponentDependency SHPMNT
   singleton CustomerOrderPickListSingleton(CustomerOrderPickListArray);

   @DynamicComponentDependency SHPMNT
   group PickReportDiffGroup bind CustomerOrderPickListSingleton {
      label = "Customer Order Pick List";
      visible = [false];
   }

   tabs {
      tab {
         label = "Details";
         visible = [TaskType = "TransportTask"];

         list TransportTaskLineDetailsList using GetTransportTaskLineDetails(DemandLineStockReservationSearchContext.ShowDetails, SourceRef1Num) {
            searchcontext DemandLineStockReservationSearchContext {
               defaults = GetDemandLineStockReservationSearchContextDefaults();
            }
            copyoncruddefault(TransportTaskId, FromContract, ToContract) to(TransportTaskId, FromContract, ToContract);
         }
      }
      tab {
         label = "Aggregated";
         visible = [TaskType = "TransportTask"];

         list AggregatedHandlingUnitsList using GetAggregatedHandlingUnitsOnTransportTask(HandlingUnitsSearchContext.ShowHuLevel, SourceRef1Num) {
            label = "";
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
            copyoncruddefault(TransportTaskId) to(TransportTaskId);
         }
         list AggregatedTransportTaskLineList(AggregateHandlingUnitsArray)bind AggregatedHandlingUnitsList {
            label = "";
            display = Nested;
         }
      }
      tab {
         label = "Compiled View";
         visible = [TaskType = "TransportTask"];

         group TransportTaskCompiledViewGroup(WarehouseTaskArray);
         group Transport_FromGroup(WarehouseTaskArray);
         group Transport_ToGroup(WarehouseTaskArray);
         group ForwardToGroup(WarehouseTaskArray);
         group SourceRefGroup(WarehouseTaskArray);
      }
      tab {
         label = "Report Picking of Shop Order";
         visible = [TaskType = "ShopOrderPickList"];
         @DynamicComponentDependency SHPORD
         list MyShopOrderIssuePickLineWList(WarehouseTaskShopOrderArray);
      }
      tab {
         label = "Details";
         visible = [TaskType = "CustomerOrderPickList"];
         @DynamicComponentDependency SHPMNT
         list PickReportDiffSingleList using GetDetailsTab(DemandLineStockReservationSearchContext.ShowDetails, SourceRef1, SenderType, Contract) {
            searchcontext DemandLineStockReservationSearchContext {
               defaults = GetDemandLineStockReservationSearchContextDefaults();
            }
         }
      }
      tab {
         label = "Aggregated";
         visible = [TaskType = "CustomerOrderPickList"];
         @DynamicComponentDependency SHPMNT
         list PickAggregatedList using GetAggregatedTab(HandlingUnitsSearchContext.ShowHuLevel, SourceRef1, PickListType, Contract, PickByChoiceOption, SenderType, Contract) {
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
         }
         @DynamicComponentDependency SHPMNT
         list PickReportDiffSingleListDetail(DetailsArray) bind PickAggregatedList {
            display = Nested;
         }
      }
      tab {
         label = "Shipment Handling Units";
         @DynamicComponentDependency SHPMNT
         list PickShipmentHandlingUnitList using GetShipmentHandlingUnitTab(SourceRef1, Contract, PickListType, SenderType, SenderId);
         @DynamicComponentDependency SHPMNT
         list PickReportHandlingUnitReservationDetail(ReservationDetailsArray) bind PickShipmentHandlingUnitList {
            display = Nested;
         }
      }
   }
   @DynamicComponentDependency SHPMNT
   commandgroup PrintPickListCommandGroup {
      command PrintShipmentPickListCommand bind CustomerOrderPickListSingleton;
   }

   commandgroup CommandGroupCmdGroup {
      command WarehouseTaskCommand;
   }
   commandgroup TaskActionsGroup {
      command WarehouseTaskStartNextCommand;
      command ParkCommand;
      //      Complete Command for Child node
      command TransportTaskCompleteCommand;
      @DynamicComponentDependency SHPMNT
      command WarehouseTaskCompleteCustomerOrderPickListCommand;
      @DynamicComponentDependency SHPORD
      command WarehouseTaskShopOrderCompleteCommand;

      command WarehouseTaskStartSelectedCommand;
      command WarehouseTaskNewTaskCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command WarehouseTaskCommand for WarehouseTask {
   label = "Warehouse Task";
   enabled = [true];
   execute {
      navigate "page/WarehouseTask/Form?$filter=TaskId eq $[TaskId]";
   }
}

command StartSelectedCommand for WarehouseTask {
   label = "Start Selected";
   enabled = [StartedLinesExist = 0];
   execute {
      call StartSelected(TaskId, parent.WorkerId, Status);
   }
}

command WarehouseTaskStartSelectedCommand for WarehouseTask {
   label = "Start Selected";
   enabled = [StartedLinesExist = 0];
   execute {
      call StartSelected(TaskId, PossibleWorkerId, Status);
   }
}
//Complete command for Shop Order Pick List in Parent Node (Warehouse Worker)
@DynamicComponentDependency SHPORD
command WarehouseWorkerShopOrderCompleteCommand for WarehouseTask {
   label = "Complete";
   enabled = [WorkerId != null and StartedLinesExist = 1 and Status = "Started" and TaskType = "ShopOrderPickList"];

   variable MyShopOrderIssueSelectionVar Text;
   variable ShopOrderIssueVar {
      type = Structure(ShopOrderIssueStructure);
   }
   variable SessionId Number;
   variable SessionSelection Text;
   execute {
      //      Get List values in the Structure
      call GetShopOrderIssueFromParent(SourceRef1, Contract) into MyShopOrderIssueSelectionVar;

      call GetMyShopOrderIssueStructure(MyShopOrderIssueSelectionVar) into ShopOrderIssueVar;
      if [ShopOrderIssueVar.RcptIssueSerialTrackDb = "TRUE" and ShopOrderIssueVar.SerialNo = "*"] {
         call GetRecordsWithSessionId(ShopOrderIssueVar.Contract, ShopOrderIssueVar.PartNo, ShopOrderIssueVar.ConfigurationId, ShopOrderIssueVar.LocationNo, ShopOrderIssueVar.LotBatchNo, ShopOrderIssueVar.EngChgLevel, ShopOrderIssueVar.WaivDevRejNo, ShopOrderIssueVar.ActivitySeq, ShopOrderIssueVar.HandlingUnitId, ShopOrderIssueVar.QtyToPick, NULL, NULL, NULL, NULL) into IdentifySerialsRecStructure;
         assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
            when CANCEL {
               exit CANCEL;
            }
         }
         call ExecuteShopOrderPickList(MyShopOrderIssueSelectionVar, IdentifySerialsRecStructure.SessionId);
      }
      else {
         call Complete(Contract, WorkerId);
      }
   }
}

//Complete command for Shop Order Pick List in Child Node (Warehouse Task)
@DynamicComponentDependency SHPORD
command WarehouseTaskShopOrderCompleteCommand for WarehouseTask {
   label = "Complete";
   enabled = [WorkerId != null and StartedLinesExist = 1 and Status = "Started" and TaskType = "ShopOrderPickList"];

   variable ShopOrderIssueVar {
      type = Structure(ShopOrderIssueStructure);
   }
   variable SessionSelection Text;

   execute {
      stringify(MyShopOrderIssuePickLineWList, "PART_NO=${PartNo}^SERIAL_NO=${SerialNo}^CONTRACT=${Contract}^CONFIGURATION_ID=${ConfigurationId}^LOCATION_NO=${LocationNo}^
         LOT_BATCH_NO=${LotBatchNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^
         QTY_ASSIGNED=${QtyAssigned}^ORDER_NO=${OrderNo}^RELEASE_NO=${ReleaseNo}^SEQUENCE_NO=${SequenceNo}^LINE_ITEM_NO=${LineItemNo}^PICK_LIST_NO=${PickListNo}^
         CATCH_QTY_TO_ISSUE=${CatchQtyToIssue}^QTY_TO_ISSUE=${QtyToIssue}^", JSON) into MyShopOrderIssueSelectionVar;

      call CheckMultipleSerialRecords(MyShopOrderIssueSelectionVar);
      call GetMyShopOrderIssueStructure(MyShopOrderIssueSelectionVar) into ShopOrderIssueVar;
      if [ShopOrderIssueVar.RcptIssueSerialTrackDb = "TRUE" and ShopOrderIssueVar.SerialNo = "*"] {
         call GetRecordsWithSessionId(ShopOrderIssueVar.Contract, ShopOrderIssueVar.PartNo, ShopOrderIssueVar.ConfigurationId, ShopOrderIssueVar.LocationNo, ShopOrderIssueVar.LotBatchNo, ShopOrderIssueVar.EngChgLevel, ShopOrderIssueVar.WaivDevRejNo, ShopOrderIssueVar.ActivitySeq, ShopOrderIssueVar.HandlingUnitId, ShopOrderIssueVar.QtyToPick, NULL, NULL, NULL, NULL) into IdentifySerialsRecStructure;
         assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
            when CANCEL {
               exit CANCEL;
            }
         }
         call ExecuteShopOrderPickList(MyShopOrderIssueSelectionVar, IdentifySerialsRecStructure.SessionId);
      }
      else {
         call Complete(Contract, WorkerId);
      }
   }
}

command TransportTaskCompleteCommand for WarehouseTask {
   label = "Complete";
   enabled = [WorkerId != null and StartedLinesExist = 1 and Status = "Started" and TaskType = "TransportTask"];

   execute {
      call Complete(Contract, WorkerId);
   }
}

@DynamicComponentDependency SHPMNT
command  WarehouseWorkerCompleteCustomerOrderPickListCommand for WarehouseTask {
   label = "Complete";
   enabled = [WorkerId != null and StartedLinesExist = 1 and Status = "Started" and TaskType = "CustomerOrderPickList"];
   variable LocationNoVar {
      type = Text;
   }
   variable ReportPickVar {
      type = Structure(ReportPickStructure);
   }
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   variable SelectionLongVar LongText;

   execute {
      messagebox("",
      information, "Current picklist will be pick reported.") {
         when OK {
            call CompleteWarehouseWorkerCustomer(component.MyTasksList.Selection) into ReportPickVar;
            if [ReportPickVar.UseShipmentInv = 1] {
               call CheckReportPicking(ReportPickVar.Contract, ReportPickVar.PickListNo, ReportPickVar.PickListType) into ShipmentInvLocVar;
               if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
                  dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, ReportPickVar.Contract, "Site", ReportPickVar.Contract) into(LocationNoVar) {
                     when CANCEL {
                        exit;
                     }
                  }
               }
            }

            call GetPickReportDiffSingleListRecords(ReportPickVar.PickListNo, "ShowAll") into SelectionLongVar;
            call PickAll(ReportPickVar.PickListNo, ReportPickVar.PickListType, SelectionLongVar, LocationNoVar);
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

@DynamicComponentDependency SHPMNT
command  WarehouseTaskCompleteCustomerOrderPickListCommand for WarehouseTask clone ReportPickAllCommand {
   label = "Complete";
   enabled = [WorkerId != null and StartedLinesExist = 1 and Status = "Started" and TaskType = "CustomerOrderPickList"];
   execute {
      super;
   }
}

command WarehouseWorkerStartNextCommand for WarehouseTask {
   label = "Start Next";
   mode = Global;
   enabled = [WorkerId != null and StartedLinesExist = 0 and ReadyLinesExist = 1];
   execute {
      call NewTask(Contract, WorkerId, 0);
   }
}

command WarehouseTaskStartNextCommand for WarehouseTask {
   label = "Start Next";
   mode = Global;
   enabled = [PossibleWorkerId != null and StartedLinesExist = 0 and ReadyLinesExist = 1];
   execute {
      call NewTask(Contract, WorkerId, 0);
   }
}

command WarehouseWorkerNewTaskCommand for WarehouseTask {
   label = "New Task";
   mode = Global;
   enabled = [WorkerId != null and StartedLinesExist = 0 and ReadyLinesExist = 0];
   execute {
      call NewTask(Contract, WorkerId, 0);
   }
}

command WarehouseTaskNewTaskCommand for WarehouseTask {
   label = "New Task";
   mode = Global;
   enabled = [PossibleWorkerId != null and StartedLinesExist = 0 and ReadyLinesExist = 0];
   execute {
      call NewTask(Contract, PossibleWorkerId, 0);
   }
}

@Override
@DynamicComponentDependency SHPMNT
command ReportPickAllCommand for PickReservation {
   enabled = [Objstate = "Started" and component.PickReportDiffSingleList.SelectionCount = 0];
}

@Override
@DynamicComponentDependency SHPMNT
command ReportPickSelectedCommand for PickReservation {
   enabled = [OriginalQtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command PickByChoiceCommand for PickReservation {
   enabled = [ParentPickListType = "CUST_ORDER_PICK_LIST" and ParentPickByChoiceOption != "NOT_ALLOWED" and BlockedForPickByChoice != "TRUE" and QtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command ReportPickingonOutermostHUCommand for PickReservation {
   enabled = [ParentPickListType = "CUST_ORDER_PICK_LIST" and OutermostHandlingUnitID != null and QtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command InputUoMParametersCommand for PickReservation {
   enabled = [ParentPickListType = "CUST_ORDER_PICK_LIST" and InputUomGroupId != null and QtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command ViewConfigurationCommand for PickReservation {
   enabled = [ConfigurationId != "*" and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command IdentifySerialsCommand for PickReservation {
   enabled = [SerialNo = "*" and ReceiptAndIssueSerialTracking = "TRUE" and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command ReportPickOnAggregatedCommand for PickShipment {
   enabled = [(count(*, HandlingUnitId != null) = 0 or count(*, HandlingUnitId = null) = 0) and Picked = false and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command UnreserveOnAggregatedCommand for PickShipment {
   enabled = [(count(*, HandlingUnitId != null) = 0 or count(*, HandlingUnitId = null) = 0) and Picked = false and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command PickByChoiceOnAggregatedCommand for PickShipment {
   enabled = [HandlingUnitId != 0 and HandlingUnitId != null and ParentPickListType = "CUST_ORDER_PICK_LIST" and
   ParentPickByChoiceOption != "NOT_ALLOWED" and BlockedForPickByChoice != "TRUE" and PickedQty = 0 and CompositionDb != "MIXED" and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command UnreserveCommand for PickReservation {
   enabled = [OriginalQtyToPick != 0 and WarehouseObjstate = "Started"];
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector WarehouseWorkerSelector for WarehouseWorker {
   label = "${WorkerId} - ${PersonInfoRef.Name} - ${Contract}";
   static WorkerId {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   static PersonInfoRef.Name;
   static Contract;
}

@Override
selector WarehouseTaskSelector for WarehouseTask {
   label = "${WorkerId} - ${PersonInfoRef.Name} - ${Contract} - ${TaskId}";
   static WorkerId;
   static PersonInfoRef.Name;
   static Contract;
   static TaskId;
   static TaskType;
   badge Objstate;
}

---------------------------------- GROUPS -----------------------------------
group MyWarehouseWorkerGroup for WarehouseWorker {
   label = "";

   field WorkerIdRef {
      contactwidget {
         enabled = [true];
         source = Person;
      }
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
}

group MyWarehouseTaskGroup for WarehouseTask {
   label = "${TaskType}";

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field WorkerId {
      size = Small;
   }
   field WorkerGroup {
      size = Small;
   }
   field TaskId {
      size = Small;
   }
   field TaskType {
      size = Small;
   }
   lov LocationGroupRef with ReferenceWarehouseWorkerLocGroupLovSelector {
      size = Small;
   }
   field Status {
      size = Small;
   }
   field Priority {
      size = Small;
   }
   field AssignedPriority {
      size = Small;
   }
   field NumberOfLines {
      size = Small;
   }
   field RequestedDateFinished {
      size = Small;
   }
   field TotalPlannedTimeNeededMinutes {
      size = Small;
   }
   field LatestDateStarted {
      size = Small;
   }
   field ActualDateStarted {
      size = Small;
   }
   field ExpectedDateFinished {
      size = Small;
   }
   field Info;
   field SourceRef1 {
      size = Small;
   }
   field Assigned {
      size = Small;
   }
   lov WarehouseTaskParkReasonRef with ReferenceWarehouseTaskParkReasonSelector {
      label = "Park Reason";
      description = WarehouseTaskParkReasonRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------
list MyTasksList for WarehouseTask {
   editmode = SingleRowEdit;
   label = "Tasks";
   field WorkerId {
      searchable = false;
      columnexclude = [true];
   }
   field PossibleWorkerId {
      searchable = false;
      columnexclude = [true];
   }
   field StartedLinesExist {
      searchable = false;
      columnexclude = [true];
   }
   field ReadyLinesExist {
      searchable = false;
      columnexclude = [true];
   }
   field WorkerGroupRef {
      size = Small;
   }
   field TaskId;
   field TaskType {
      size = Small;
   }
   lov LocationGroupRef with ReferenceWarehouseWorkerLocGroupLovSelector {
      size = Small;
   }
   fieldset Status;

   field Priority;
   field AssignedPriority;
   field NumberOfLines;
   field RequestedDateFinished;
   field TotalPlannedTimeNeededMinutes;
   field LatestDateStarted;
   field ActualDateStarted;
   field ExpectedDateFinished;
   field Info {
      size = Small;
   }
   field SourceRef1 {
      size = Small;
   }
   field Assigned {
      size = Small;
   }
   field ParkReasonId {
      size = Small;
   }
   field WarehouseTaskParkReasonRef.Description {
      size = Small;
      label = "Park Reason Description";
   }

   commandgroup CommandGroupCmdGroup {
      command WarehouseTaskCommand;
   }

   commandgroup TaskActionsGroup {
      command WarehouseWorkerStartNextCommand;
      command ParkCommand;
//      Complete Command for Parent node
      command TransportTaskCompleteCommand;
      @DynamicComponentDependency SHPMNT
      command WarehouseWorkerCompleteCustomerOrderPickListCommand;
      @DynamicComponentDependency SHPORD
      command WarehouseWorkerShopOrderCompleteCommand;

      command StartSelectedCommand;
      command WarehouseWorkerNewTaskCommand;
   }
}

fieldset Status {
   badge Status {
      label = "Status";

      emphasis Complementary2 = [Status = "Planned"];
      emphasis Complementary5 = [Status = "Released"];
      emphasis Complementary3 = [Status = "Started"];
      emphasis Complementary7 = [Status = "Parked"];
      emphasis Complementary4 = [Status = "Cancelled"];
      emphasis Complementary1 = [Status = "Closed"];
      style = TextOnly;
   }
}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator WarehouseTaskStateIndicator for WarehouseTask {
   state "Planned" {
      completed = 25%;
      emphasis Complementary2 = [Objstate = "Planned"];
   }
   state "Released" {
      completed = 50%;
      emphasis Complementary5 = [Objstate = "Released"];
   }
   state "Started" {
      completed = 75%;
      emphasis Complementary3 = [Objstate = "Started"];
   }
   state "Parked" {
      completed = 100%;
      emphasis Complementary7 = [Objstate = "Parked"];
   }
   state "Closed" {
      completed = 100%;
      emphasis Complementary1 = [Objstate = "Closed"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis Complementary4 = [Objstate = "Cancelled"];
   }
   fieldorder = Planned, Released, Started, Parked, Closed, Cancelled;
}

--------------------------------- SINGLETON ---------------------------------

@DynamicComponentDependency SHPMNT
singleton CustomerOrderPickListSingleton for ShipmentPickList;

----------------------------------- TREES -----------------------------------
tree MyWarehouseTaskTree using WarehouseWorkerSet {
   label = "";
   selector WarehouseWorkerSelector;

   rootnode RootNode {
      label = "Worker ID: ${WorkerId}";
      navigate {
         page WarehouseWorkerPage {
            filter(WorkerId, WorkerId);
            filter(Contract, Contract);
         }
      }
      connections {
         node ChildNode(MyTasksArray);
      }
   }

   node ChildNode for WarehouseTask {
      label = "${TaskId} - ${TaskType}";
      navigate {
         page WarehouseTaskPage {
            filter(TaskId, TaskId);
            filter(Contract, Contract);
         }
      }
   }
}

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------
