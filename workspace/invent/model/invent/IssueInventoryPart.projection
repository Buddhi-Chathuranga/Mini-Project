---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2021-02-19  WaSalk  SC2020R1-12572, Added EnabledLccParams to support LCC concept and removed fragment LocalizationControlCenterHandler
-- 2021-02-19          and WarehouseJournalEnabled.
-- 2020-03-10  WaSalk  GESPRING20-3756, Added DeliveryReasonId to action IssueInventoryPart and to pass necessary methods.
-- 2020-02-14  WaSalk  GESPRING200-1793, Added LocalizationControlCenterHandler fragment, Attrbutes DeliveryReasonId
-- 2020-02-14          WarehouseJournalEnabled and company to enable Localization WarehouseJournal.
-- 2019-07015  YasMlk  SCUXXW4-23077 Removed unused references.
-- 2019-05-20  DaZase  SCUXXW4-19667, Added initialcheck to all unbounded actions.
-- 2018-12-24  JaThlk  SCUXXW4-6332, Implemented issuing inventory parts and handled where clause in PartLocArray.
-- 2018-11-15  MWerse  SCUXXW4-6330, Converted from frmIssue using MTG Version: 1.30
---------------------------------------------------------------------------------

projection IssueInventoryPart;
component INVENT;
layer Core;
description "Use this API to display the inventory part you are going to enter as manually issued.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment IdentifySerialsInLocationAssistant;
include fragment PrePostingWithoutSourceAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartConfigSet for InventoryPartConfig;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartConfig {
   ludependencies = InventoryPartInStock, InventoryPartConfig;

   crud = Read, Update;
   from = "invent_part_config_stockable";
   keys = PartNo, Contract, ConfigurationId {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and CONFIGURATION_ID = :ConfigurationId";
   }
   supportwarnings = [true];


   attribute PartNo Text {
      maxlength = 100;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute ConfigurationId Text {
      maxlength = 100;
      editable = [false];
   }

   attribute LocationNo Text {
      fetch = "Inventory_Part_Def_Loc_API.Get_Location_No(contract, part_no)";
      maxlength = 35;
      editable = [false];
   }
   attribute CatchQtyEnabled Boolean("TRUE", "FALSE") {
      fetch = "Part_Catalog_API.Get_Catch_Unit_Enabled_Db(PART_NO)";
   }
   attribute Uom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
   }
   -- gelr: warehouse_journal, begin
   attribute DeliveryReasonId Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(Contract)";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Site_API.Get_Company(Contract))";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   -- gelr: warehouse_journal, end
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   array PartLocArray(PartNo, Contract, ConfigurationId) to InventoryPartInStock(PartNo, Contract, ConfigurationId) {
      where = "((:child.QtyOnhand > :child.QtyReserved) or (:child.IsAllowedNegativeOnhand = 'NEG ONHAND OK')) and :child.FreezeFlagDb = 'N' and :child.ActivitySeq = 0 and :child.LocationTypeDb in ('PICKING','F','MANUFACTURING')";
   }
   -- gelr: warehouse_journal, begin
   reference DeliveryReasonIdRef(Company, DeliveryReasonId) to DeliveryReason(Company, DeliveryReasonId);
   -- gelr: warehouse_journal, end
}
@Override
entity InventoryPartInStock {
   ludependencies = InventoryPartInStock, InventoryPartConfig;
   crud = Read, Update;
   from = "inventory_part_pick_ship_stock";
   keys = PartNo, Contract, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, ConfigurationId, ActivitySeq {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and LOCATION_NO = :LocationNo and HANDLING_UNIT_ID = :HandlingUnitId and LOT_BATCH_NO = :LotBatchNo and
      SERIAL_NO = :SerialNo and WAIV_DEV_REJ_NO = :WaivDevRejNo and ENG_CHG_LEVEL = :EngChgLevel and CONFIGURATION_ID = :ConfigurationId and
      ACTIVITY_SEQ = :ActivitySeq";
   }

   attribute Contract Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute IssuedQty Number {
      fetch = "NULL";
      label = "Issued Qty";
      editable = [true];
      required = [true];
   }
   attribute IssuedCatchQty Number {
      fetch = "NULL";
      label = "Issued Catch Qty";
   }
   attribute CatchQtyEnabled Boolean("TRUE", "FALSE") {
      fetch = "Part_Catalog_API.Get_Catch_Unit_Enabled_Db(PART_NO)";
   }
   attribute QtyOnhand Number {
      editable = [false];
   }

   attribute AvailableQty Number {
      fetch = "(QTY_ONHAND) - (QTY_RESERVED)";
      label = "Available Qty";
      editable = [false];
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty";
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ExpirationDate Date {
      editable = [false];
   }
   attribute RowId Text {
      fetch = "RowNo";
      label = "Row ID";
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute WaivDevRejNo Text {
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      editable = [ETag = null];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      editable = [false];
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
      maxlength = 12;
      editable = [false];
   }
   attribute QtyReserved Number {
      label = "Reserved Qty";
      maxlength = 12;
      editable = [false];
   }
   attribute FreezeFlagDb Enumeration(InventoryPartFreezeCode) {
      label = "Frozen";
   }
   attribute LocationTypeDb Text;

   attribute PartOwnershipDb Text;

   attribute Ownership Enumeration(PartOwnership) {
      fetch = "DECODE(serial_no, '*', part_ownership_db, DECODE(Part_Serial_Catalog_API.Get_Part_Ownership_Db(part_no, serial_no), 'COMPANY RENTAL ASSET', Part_Serial_Catalog_API.Get_Part_Ownership(part_no, serial_no), part_ownership_db))";
      label = "Ownership";
      editable = [ETag = null];
   }
   attribute Owner Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner";
      maxlength = 100;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ActivitySeq Number {
      maxlength = 10;
      required = [true];
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute IsAllowedNegativeOnhand Text {
      fetch = "Inventory_Part_API.Get_Negative_On_Hand_Db(CONTRACT, PART_NO)";
   }
   attribute ReceiptIssueSerialTrackDb Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
   }
   attribute PartTrackSessionId Number {
      fetch = "NULL";
   }
   attribute AccountNo Text {
      fetch = "NULL";
   }
   attribute CostCenter Text {
      fetch = "NULL";
   }
   attribute CodeC Text {
      fetch = "NULL";
   }
   attribute CodeD Text {
      fetch = "NULL";
   }
   attribute ObjectNo Text {
      fetch = "NULL";
   }
   attribute ProjectNo Text {
      fetch = "NULL";
   }
   attribute CodeG Text {
      fetch = "NULL";
   }
   attribute CodeH Text {
      fetch = "NULL";
   }
   attribute CodeI Text {
      fetch = "NULL";
   }
   attribute CodeJ Text {
      fetch = "NULL";
   }
   attribute InvTranSource Text {
      fetch = "NULL";
   }
   attribute Note Text {
      fetch = "NULL";
      label = "Note";
      maxlength = 2000;
      editable = [ETag != null];
   }
   -- gelr: warehouse_journal, begin
   attribute DeliveryReasonId Text {
      fetch = "NULL";
   }
   -- gelr: warehouse_journal, end
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference TopParentHandlingUnitTypeRef(TopParentHandlingUnitTypeID) to HandlingUnitType(HandlingUnitTypeId);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);

   action IssueInventoryPart {
      ludependencies = InventoryPartConfig;
      parameter IssuedQty Number;
      parameter IssuedCatchQty Number;
      parameter CatchQtyEnabled Boolean;
      parameter AccountNo Text;
      parameter CostCenter Text;
      parameter CodeC Text;
      parameter CodeD Text;
      parameter ObjectNo Text;
      parameter ProjectNo Text;
      parameter CodeG Text;
      parameter CodeH Text;
      parameter CodeI Text;
      parameter CodeJ Text;
      parameter InvTranSource Text;
      parameter PartTrackSessionId Number;
      parameter DeliveryReasonId Text;
   }
}
---------------------------------- ACTIONS ----------------------------------
action GetReportResultKeyList Text {
   initialcheck implementation;
   parameter SelectedKeyList Text;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

