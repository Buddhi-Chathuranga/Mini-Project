----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 210121      RasDlk  SC2020R1-12220, Removed the required property from WorkerIdRef.
-- 181115      RAKUSE  SCUXXW4-5704, Converted dialog 'dlgPsheetCalcTaskTypeTimeShare' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CalculateActualTaskTypeTimeShare;
component INVENT;
layer Core;
projection CalculateActualTaskTypeTimeShareHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent InventNavigator.WarehouseTasksCalculationandAnalysis at index 300 {
      label = "Calculate Actual Task Type Time Share";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------
group ParameterGroup for TaskVirtual {
   label = "Parameters";
   lov SiteRef with ReferenceUserAllowedSiteLovSelector {
      freeinput = [true];
      size = Small;
      format = uppercase;
      required = [true];
   }
   lov WorkerIdRef with ReferenceWarehouseWorkerSelector {
      freeinput = [true];
      size = Small;
      format = uppercase;
   }
   field FromDate {
      visible = [TaskOption = "Now"];
   }
   field ToDate {
      visible = [TaskOption = "Now"];
   }
   field ExecutionOffsetFrom {
      visible = [TaskOption = "Schedule"];
   }
   field ExecutionOffsetTo {
      visible = [TaskOption = "Schedule"];
   }
}


-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Calculate Actual Task Type Time Share";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;

         set Contract = Params.Contract;
         set WorkerId = Params.WorkerId;
         set FromDate = Params.FromDate;
         set ToDate = Params.ToDate;
         set ExecutionOffsetFrom = Params.ExecutionOffsetFrom;
         set ExecutionOffsetTo = Params.ExecutionOffsetTo;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
