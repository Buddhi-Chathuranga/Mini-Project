-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2019-05-21  DaZase  SCUXXW4-19676, Added initialcheck to all unbounded actions.
-- 2018-10-10  ChFolk  SCUXXW4-5631, Renamed PackHandlingUnitsInStockAccordingToPackingInstructionAssistant as PackHuInStockAccordingToPackingInstructionAssistant to limit the length of the name.
-- 2018-10-09  ChFolk  SCUXXW4-5631, Renamed the assistant as PackHandlingUnitsInStockAccordingToPackingInstructionAssistant.
-- 2018-10-09          Renamed virtual PackAccordingToPackingInstructionVirtual as PackHandlingUnitsAccordingToPackingInstructionVirtual.
-- 2018-09-27  ChFolk  SCUXXW4-5631, Created the fragment to dlgPackAccordingToPackingInstruction.
-------------------------------------------------------------------------------------------------------
fragment PackHuInStockAccordingToPackingInstructionAssistant;
component INVENT;
layer Core;
description "Assistant to automatically pack existing handling units, creating new handling unit parents according to a defined packing instruction.";

include fragment PackingInstructionWithRootSelector;
include fragment HandlingUnitExtendedInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant PackHuInStockAccordingToPackingInstructionAssistant using PackHuAccordingToPackingInstructionSet {
   label = "Pack According to Packing Instruction";
   savemode = OnLostFocus;
   input(SelectedHandlingUnits, ShipmentId);

   steps {
      step {
         group PackHuAccordingToPackingInstructionGroup;
         list HandlingUnitsToPackList(HandlingUnitsToPackArray);
      }
      final step {

      }
      cancelled step {
      }
   }
   finish command {
      enabled = [LinesReadyToPack = "TRUE"];
      execute {
         call PackHandlingUnits(Objkey, ShipmentId);
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group PackHuAccordingToPackingInstructionGroup for PackHuAccToPackInsVirtual {
   label = "";
   lov PackingInstructionIdRef with ReferencePackingInstructionWithRootSelector using GetPackingInstructionIdsHu(Objkey) {
      description = PackingInstructionIdRef.PackingInstructionDesc;
      label = "Packing Instruction";
   }
}

----------------------------------- LISTS -----------------------------------
list HandlingUnitsToPackList for HandlingUnitsToPackVirtual {
   editmode = SingleCellEdit;
   label = "";
   field Contract {
      size = Small;
   }
   field HandlingUnitId {
      size = Small;
   }
   lov HandlingUnitTypeRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeRef.Description;
      editable = [false];
   }
   lov HandlingUnitCategoryRef with ReferenceHandlingUnitCategorySelector {
      label = "Handling Unit Category";
      description = HandlingUnitCategoryRef.Description;
      editable = [false];
   }
   field LocationNo {
      size = Small;
   }
   field AccessoryExist {
      size = Small;
   }
   field Applied {
      size = Small;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PackHuAccordingToPackingInstructionSet for PackHuAccToPackInsVirtual;

---------------------------------- ACTIONS ----------------------------------
action PackHandlingUnits {
   initialcheck implementation;
   parameter ParentObjkey Text;
   parameter ShipmentId Number;
   ludependencies = HandlingUnit;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetPackingInstructionIdsHu List < Entity(PackingInstructionWithRoot) > {
   parameter ParentObjkey Text;
}

--------------------------------- VIRTUALS ----------------------------------
virtual PackHuAccToPackInsVirtual {
   crud = Read, Create, Update;
   ludependencies = HandlingUnitsToPackVirtual;
   attribute PackingInstructionId Text {
      label = "";
      maxlength = 100;
      format = uppercase;
   }
   attribute SelectedHandlingUnits Text {
      label = "";
      maxlength = 2000;
   }
   attribute ShipmentId Number;
   attribute LinesReadyToPack Text;
   array HandlingUnitsToPackArray() to HandlingUnitsToPackVirtual();

   reference PackingInstructionIdRef(PackingInstructionId) to PackingInstructionWithRoot(PackingInstructionId) {
      label = "Packing Instruction ID";
   }
}

virtual HandlingUnitsToPackVirtual {
   crud = Read, Update;
   ludependencies = PackHuAccToPackInsVirtual;

   attribute PackingInstructionId Text {
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      editable = [false];
   }
   attribute HandlingUnitId Text {
      label = "Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      label = "Handling Unit Type ID";
      maxlength = 100;
      editable = [false];
   }
   attribute LocationNo Text {
      label = "Location No";
      maxlength = 100;
      editable = [false];
   }
   attribute AccessoryExist Boolean("TRUE", "FALSE") {
      label = "Accessories Exist";
      editable = [false];
   }
   attribute Applied Boolean("TRUE", "FALSE") {
      label = "Applied";
      editable = [false];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Handling_Unit_Category_Id(HANDLING_UNIT_TYPE_ID)";
   }
   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitCategoryRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
}

