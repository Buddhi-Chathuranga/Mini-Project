-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2019-12-20  Hadolk  MFSPRING20-77, Added the fields EngRevision, DrawingNo and DrawingRevisionNo and the reference to Part Revision.
-- 2018-12-18  ChFolk  SCUXXW4-5644, included fragment PackingInstructionWithRootSelector.
-- 2018-09-24  ChFolk  SCUXXW4-5644, Renamed the Assistant as PackStocksIntoPackingInstructionAssistant.
-- 2018-09-02  ChFolk  SCUXXW4-5644, Created the fragment to dlgPackStocksIntoPackingInstruction.
-------------------------------------------------------------------------------------------------------
fragment PackStocksIntoPackingInstructionAssistant;
component INVENT;
layer Core;
description "Assistant to automatically pack inventory part in stock records to handling units according to a defined packing instruction.";

include fragment PackingInstructionWithRootSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant PackStocksIntoPackingInstructionAssistant using PackStocksIntoPackingInstructionSet {
   label = "Pack According to Packing Instruction";
   savemode = OnLostFocus;
   input(ConnectedSource, ObjidListArr);
   output(CreatedHandlingUnits);

   steps {
      step {
         group PackStocksIntoPackingInstructionGroup;
         list PartInStockList(PartInStockArray);
      }
      final step {

      }
      cancelled step {
      }
   }
   finish command {
      enabled = [LinesReadyToPack = "TRUE"];
      execute {
         call ExecutePacking(Objkey, PackingInstructionId) into CreatedHandlingUnits;
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group PackStocksIntoPackingInstructionGroup for PackStocksIntoPackingInstructionVirtual {
   label = "";
   lov PackingInstructionIdRef with ReferencePackingInstructionWithRootSelector using GetPackingInstructionIds(Objkey) {
      description = PackingInstructionIdRef.PackingInstructionDesc;
      label = "Packing Instruction";
   }

}

----------------------------------- LISTS -----------------------------------
list PartInStockList for PartInStockVirtual {
   editmode = SingleCellEdit;
   label = "";
   field QtyToAttach {
      size = Small;
   }
   field Applied {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Inventory Part";
      description = InventoryPartRef.DescriptionInUse;
      editable = [false];
   }
   field ConfigurationId {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field ActivitySeq {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field QtyOnhand {
      size = Small;
   }
   field QtyReserved;
   field AvailableQty;
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.EngRevision {
      label = "Engineering Revision No";
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.TechnicalDrawingNo {
      label = "Drawing No";
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.TechDrawingRevisionNo {
      label = "Drawing Revision No";
      editable = [false];
      columnvisible = [false];
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PackStocksIntoPackingInstructionSet for PackStocksIntoPackingInstructionVirtual;

---------------------------------- ACTIONS ----------------------------------
action ExecutePacking LongText {
   initialcheck none;
   parameter ParentObjkey Text;
   parameter PackingInstructionId Text;
   ludependencies = InventoryPartInStock, ReceiptInvLocation;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetPackingInstructionIds List < Entity(PackingInstructionWithRoot) > {
   parameter ParentObjkey Text;
}

--------------------------------- VIRTUALS ----------------------------------
virtual PackStocksIntoPackingInstructionVirtual {
   crud = Read, Create, Update;
   ludependencies = PartInStockVirtual;
   attribute PackingInstructionId Text {
      label = "";
      maxlength = 100;
      format = uppercase;
   }
   attribute ObjidListArr Text {
      label = "";
      maxlength = 2000;
   }
   attribute ConnectedSource Text {
      label = " ";
      maxlength = 100;
   }
   attribute LinesReadyToPack Text;
   attribute CreatedHandlingUnits Text;
   array PartInStockArray() to PartInStockVirtual();

   reference PackingInstructionIdRef(PackingInstructionId) to PackingInstructionWithRoot(PackingInstructionId) {
      label = "Packing Instruction ID";
   }
}

virtual PartInStockVirtual {
   crud = Read, Update;
   ludependencies = PackStocksIntoPackingInstructionVirtual;
   attribute PackingInstructionId Text {
      editable = [false];
   }
   attribute QtyToAttach Number {
      label = "Qty to Attach";
      editable = [true];
   }
   attribute Applied Boolean("TRUE", "FALSE") {
      label = "Applied";
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      editable = [false];
   }
   attribute PartNo Text {
      label = "Part No";
      maxlength = 100;
      editable = [false];
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
      maxlength = 100;
      editable = [false];
   }
   attribute LocationNo Text {
      label = "Location No";
      maxlength = 100;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      maxlength = 100;
      editable = [false];
   }
   attribute SerialNo Text {
      label = "Serial No";
      maxlength = 100;
      editable = [false];
   }
   attribute ActivitySeq Text {
      label = "Activity Sequence";
      maxlength = 100;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      maxlength = 100;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Rev No";
      maxlength = 100;
      editable = [false];
   }
   attribute HandlingUnitId Text {
      label = "Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyOnhand Text {
      label = "Qty on Hand";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyReserved Number {
      label = "Qty Reserved";
      required = [false];
      editable = [ETag = null];
   }
   attribute AvailableQty Number {
      label = "Available Qty";
      editable = [false];
   }
   attribute SourceRef1 Text {
      label = "Source Ref 1";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef2 Text {
      label = "Source Ref 2";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef3 Text {
      label = "Source Ref 3";
      maxlength = 50;
      editable = [false];
   }
   attribute ReceiptNo Number {
      label = "Receipt No";
      editable = [false];
   }
   attribute InvTransSourceRefTypeDb Text {
      fetch = "DECODE(INV_TRANS_SOURCE_REF_TYPE_DB, 'PURCHASE_ORDER', 'PUR ORDER', NULL)";
      label = "Inv Trans Source Ref Type";
      maxlength = 20;
      editable = [false];
   }
   attribute UnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   @DynamicComponentDependency MFGSTD
   reference PartRevisionRef(Contract, PartNo, EngChgLevel) to PartRevision(Contract, PartNo, EngChgLevel);
}

