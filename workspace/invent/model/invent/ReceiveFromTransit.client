----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-12-14  SBalLK  SC21R2-2833, Added RemoteWarehouse attribute.
-- 2020-11-13  JuMalk  SC2020R1-6772, Removed savemode from ReceiveFromTransitList to improve usability upon save.
-- 2019-07-26  ChFolk  SCUXXW4-22798, Included fragment ProjectDetailsFieldSet to display project information and concatenated descriptions.
-- 2019-04-05  ChFolk  SCUXXW4-17954, Added update action ReceivePartFromTransitUpdate and removed SingleCellEdit.
-- 2019-04-05          Made some changes to increase performance.
-- 2019-04-05  JaThlk  SCUXXW4-7227, Fixed the navigation isssue in ResolveShortagesCommand.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2019-01-08  milise  SCUXXW4-7225. added savemode buffer.
-- 2018-05-02  ChFolk  SCUXXW4-7227, Converted from tbwRecTransit using MTG Version: 1.16
----------------------------------------------------------------------------------------------------------

client ReceiveFromTransit;
component INVENT;
layer Core;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLov4Selector;
include fragment InventoryLocation19Selector;
include fragment ProjectDetailsFieldSet;

warningsenabled = ReceivePartFromTransitUpdate;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ReceiveFromTransitNavEntry parent InventNavigator.WarehouseManagementPartHandling at index 200 {
      label = "Receive from Transit";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using InventoryPartInStocks {
   label = "Receive from Transit";
   startupmode = search;
   list ReceiveFromTransitList;

}

--------------------------------- COMMANDS ----------------------------------
command ResolveShortagesCommand for InventoryPartInStock {
   label = "Resolve Shortages";
   enabled = [SystemShortageFlag = "Y" and ShortagesExist = 1];
   execute {
      if [PartOwnershipDb != null] {
         if [PartOwnershipDb = "CUSTOMER OWNED"] {
            if [ConditionCode != null] {
               navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode] and PartOwnership eq $[PartOwnershipDb] and OwningCustomerNo eq $[Owner]";
            }
            else {
               navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and PartOwnership eq $[PartOwnershipDb] and OwningCustomerNo eq $[Owner]";
            }
         }
         else {
            if [PartOwnershipDb = "SUPPLIER LOANED"] {
               if [ConditionCode != null] {
                  navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode] and PartOwnership eq $[PartOwnershipDb] and OwningVendorNo eq $[Owner]";
               }
               else {
                  navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and PartOwnership eq $[PartOwnershipDb] and OwningVendorNo eq $[Owner]";
               }
            }
            else {
               if [PartOwnershipDb != "SUPPLIER LOANED" or PartOwnershipDb != "CUSTOMER OWNED"] {
                  if [ConditionCode != null] {
                     navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode] and PartOwnership eq $[PartOwnershipDb]";
                  }
                  else {
                     navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and PartOwnership eq $[PartOwnershipDb]";
                  }
               }
            }

         }

      }
      else {
         if [ConditionCode != null] {
            navigate "page/frmShortageDemand/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode]";
         }
         else {
            navigate "page/frmShortageDemand/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
         }
      }
   }
}

command PrintConditionTagCommand for InventoryPartInStock {
   label = "Print Condition Tag";
   mode = SelectedRecords;
   enabled = [ConditionCode != null];
   variable ResultKeysStr {
      type = Text;
   }
   bulkexecute {
      call GetReportResultKeyList(Selection) into ResultKeysStr;
      printdialog ResultKeysStr;
   }
}

----------------------------------- LISTS -----------------------------------
list ReceiveFromTransitList for InventoryPartInStock {
   defaultfilter = [QtyInTransit > 0];
   crudactions {
      update action = ReceivePartFromTransitUpdate;
   }
   field QtyReceived;
   field CatchQtyReceived {
      editable = [CatchUnitEnableDb = "TRUE"];
   }
   lov PartNoRef with ReferenceInventoryPartLov4Selector {
      label = "Part";
      description = PartNoRef.Description;
   }

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field ConfigurationIdRef;
   measure QtyInTransit(InventoryPartRef.UnitMeas);
   measure CatchQtyInTransit(InventoryPartRef.CatchUnitMeas);
   measure QtyOnhand(InventoryPartRef.UnitMeas);
   measure CatchQtyOnhand(InventoryPartRef.CatchUnitMeas);
   lov LocationNoRef with InventoryLocation19Selector {
      size = Small;
   }
   field HandlingUnitIdRef {
      label = "Handling Unit ID";
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = HandlingUnitTypeIdRef.Description;
      label = "Handling Unit Type";
   }
   field Sscc;
   field AltHandlingUnitLabelId;
   field Warehouse {
      size = Small;
   }
   field RemoteWarehouse {
      size = Small;
   }
   field BayNo {
      size = Small;
   }
   field RowNo {
      size = Small;
   }
   field TierNo {
      size = Small;
   }
   field BinNo {
      size = Small;
   }
   field ExpirationDate;
   field LotBatchNo {
      size = Small;
   }
   field SerialNo;
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
      label = "Condition Code";
   }
   field WaivDevRejNo {
      size = Small;
   }
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      description = AvailabilityControlIdRef.Description;
      label = "Availability Control";
   }
   field EngChgLevel {
      size = Small;
   }
   field TopParentHandlingUnitId;
   @DynamicComponentDependency PROJ
   field ActivitySeqRef {
      label = "Activity Sequence";
   }
   lov TopParentHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = TopParentHandlingUnitTypeIdRef.Description;
      label = "Top Parent Handling Unit Type";
   }
   field TopParentSscc;
   field TopParentAltHandlingUnitLabelId;
   field Source;
   field PartOwnership;
   field Owner;
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   field OwnerName;
   fieldset ProjectDetailsFieldSet;
   commandgroup CommandGroup {

      command ResolveShortagesCommand;
      command PrintConditionTagCommand;
   }
}
