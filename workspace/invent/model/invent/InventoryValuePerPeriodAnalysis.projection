-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-05-20  DaZase  SCUXXW4-19666, Added initialcheck to all unbounded actions.
-- 2019-04-01  DaZase  SCUXXW4-6955, Converted from tbwInventoryValuePerDetail using MTG Version: 1.34
-- 2018-09-11  HSJOSE  SCUXXW4-6960, Converted from tbwInventoryValuePerDetailLocGrp using MTG Version: 1.28
-- 2018-09-11  HSJOSE  SCUXXW4-6975, Converted from tbwInventoryValuePerLevelLocGrp using MTG Version: 1.28
-- 2018-09-11  HSJOSE  SCUXXW4-6985, Converted from tbwInventoryValuePerPartLocGrp using MTG Version: 1.28
-- 2018-09-11  LEPESE  SCUXXW4-6965, Converted from tbwInventoryValuePerLevel using MTG Version: 1.28
-- 2018-09-11  LEPESE  SCUXXW4-6980, Converted from tbwInventoryValuePerPart using MTG Version: 1.28
-- 2018-09-11  LEPESE  SCUXXW4-6430, Converted from frmQueryInventoryValue using MTG Version: 1.28
-----------------------------------------------------------------------------
projection InventoryValuePerPeriodAnalysis;
component INVENT;
layer Core;
description "Use this API to view the value of the inventory for the chosen period, site, and part.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment PrintInventoryValueComparisonAssistant;
include fragment StatisticPeriod2Selector;
include fragment InventoryPartLovSelector;
include fragment InventValuePartLocgrpLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryValueSet for InventoryValue;
entityset InventoryValuePartSet for InventoryValuePart;
entityset InventoryValueCostLevelSet for InventoryValueCostLevel;
entityset InventoryValuePartDetailSet for InventoryValuePartDetail;
entityset InventoryValuePartLocGrpSet for InventoryValuePartLocGrp;
entityset InventoryValueLevelLocGrpSet for InventoryValueLevelLocGrp;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryValue {
   crud = Read;
   keys = StatYearNo, StatPeriodNo, Contract {
      where = "STAT_YEAR_NO = :StatYearNo and STAT_PERIOD_NO = :StatPeriodNo and CONTRACT = :Contract";
   }
   use attributes = CreateDate, LastActivityDate, CompleteFlag;
   attribute StatYearNo Number {
      label = "Year";
      editable = [false];
   }
   attribute StatPeriodNo Number {
      label = "Period";
      maxlength = 2;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute CreateDate Date {
      label = "Created";
   }
   attribute BaseCurrency Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(CONTRACT))";
      label = "Currency";
   }
   attribute CompleteFlagDb Boolean("Y", "N") {
      fetch = "complete_flag_db";
      label = "Aggregation Job Status";
      required = [true];
   }
   reference StatPeriodNoRef(StatYearNo, StatPeriodNo) to StatisticPeriod(StatYearNo, StatPeriodNo) {
      label = "Period";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   array InventoryValuePartArray(StatYearNo, StatPeriodNo, Contract) to InventoryValuePart(StatYearNo, StatPeriodNo, Contract);
   array InventoryValueCostLevelArray(StatYearNo, StatPeriodNo, Contract) to InventoryValueCostLevel(StatYearNo, StatPeriodNo, Contract);
   array InventoryValuePartDetailArray(StatYearNo, StatPeriodNo, Contract) to InventoryValuePartDetail(StatYearNo, StatPeriodNo, Contract);
   array InventoryValuePartLocGrpArray(StatYearNo, StatPeriodNo, Contract) to InventoryValuePartLocGrp(StatYearNo, StatPeriodNo, Contract);
   array InventoryValueLevelLocGrpArray(StatYearNo, StatPeriodNo, Contract) to InventoryValueLevelLocGrp(StatYearNo, StatPeriodNo, Contract);
   array InventoryValueDetailLocationGroupArray(StatYearNo, StatPeriodNo, Contract) to InventoryValueDetailLocationGroup(StatYearNo, StatPeriodNo, Contract);
}

@Override
entity InventoryValuePart {
   crud = Read;
   from = "inventory_value_part_sum_ext";
   keys = PartNo, StatYearNo, StatPeriodNo, Contract {
      where = "PART_NO = :PartNo and STAT_YEAR_NO = :StatYearNo and STAT_PERIOD_NO = :StatPeriodNo and CONTRACT = :Contract";
   }
   use attributes = QtyWaivDevRej, Quantity, QtyInTransit, QtyAtCustomer;
   attribute PartNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute QtyWaivDevRej Number {
      label = "W/D/R Qty";
      editable = [false];
   }
   attribute Quantity Number {
      editable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
      editable = [false];
   }
   attribute QtyAtCustomer Number {
      editable = [false];
   }
   attribute TotalValue Number {
      fetch = "total_value";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute UnitCost Number {
      fetch = "unit_cost";
      label = "Unit Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute AbcClass Text {
      fetch = "abc_class";
      label = "ABC Class";
      maxlength = 1;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "accounting_group";
      label = "Accounting Group";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "type_code_db";
      label = "Part Type";
      editable = [false];
   }
   attribute PrimeCommodity Text {
      fetch = "prime_commodity";
      label = "Commodity Group 1";
      maxlength = 5;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "second_commodity";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute AssetClass Text {
      fetch = "asset_class";
      label = "Asset Class";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute StatYearNo Number {
      label = "Year";
      maxlength = 4;
      //searchable = false;
      editable = [false];
   }
   attribute StatPeriodNo Number {
      label = "Stat Period";
      maxlength = 2;
      // searchable = false;
      editable = [false];
   }
   attribute Contract Text {
      // searchable = false;
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Inventory Part";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
}

@Override
entity InventoryValueCostLevel using InventoryValuePart {
   crud = Read;
   from = "inventory_value_part_level_ext";
   keys = PartNo, ConfigurationId, SerialNo, LotBatchNo, ConditionCode, StatYearNo, StatPeriodNo, Contract {
      where = "PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and SERIAL_NO = :SerialNo and LOT_BATCH_NO = :LotBatchNo and CONDITION_CODE = :ConditionCode and STAT_YEAR_NO = :StatYearNo and STAT_PERIOD_NO = :StatPeriodNo and CONTRACT = :Contract";
   }
   use attributes = QtyWaivDevRej, Quantity, QtyInTransit, QtyAtCustomer, CreateDate;
   attribute PartNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute QtyWaivDevRej Number {
      label = "W/D/R Qty";
      editable = [false];
   }
   attribute Quantity Number {
      editable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
      editable = [false];
   }
   attribute QtyAtCustomer Number {
      editable = [false];
   }
   attribute TotalValue Number {
      fetch = "total_value";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute UnitCost Number {
      fetch = "unit_cost";
      label = "Unit Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute CreateDate Date {
      label = "Created";
      editable = [false];
   }
   attribute AbcClass Text {
      fetch = "abc_class";
      label = "ABC Class";
      maxlength = 1;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "accounting_group";
      label = "Accounting Group";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "type_code_db";
      label = "Part Type";
      editable = [false];
   }
   attribute PrimeCommodity Text {
      fetch = "prime_commodity";
      label = "Commodity Group 1";
      maxlength = 5;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "second_commodity";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute AssetClass Text {
      fetch = "asset_class";
      label = "Asset Class";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute StatYearNo Number {
      label = "Year";
      maxlength = 4;
      // searchable = false;
      editable = [false];
   }
   attribute StatPeriodNo Number {
      label = "Stat Period";
      maxlength = 2;
      // searchable = false;
      editable = [false];
   }
   attribute Contract Text {
      // searchable = false;
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Inventory Part";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
}

@Override
entity InventoryValuePartDetail using InventValuePartDetail {
   crud = Read;
   from = "invent_value_part_detail_ext";
   exec = "INVENT_VALUE_PART_DETAIL_API";
   keys = PartNo, ConfigurationId, SerialNo, LotBatchNo, ConditionCode, BucketPostingGroupId, CostSourceId, StatYearNo, StatPeriodNo, Contract {
      where = "PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and SERIAL_NO = :SerialNo and LOT_BATCH_NO = :LotBatchNo and CONDITION_CODE = :ConditionCode and BUCKET_POSTING_GROUP_ID = :BucketPostingGroupId and COST_SOURCE_ID = :CostSourceId and STAT_YEAR_NO = :StatYearNo and STAT_PERIOD_NO = :StatPeriodNo and CONTRACT = :Contract";
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute BucketPostingGroupId Text {
      fetch = "bucket_posting_group_id";
      label = "Posting Cost Group ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute CostSourceId Text {
      fetch = "cost_source_id";
      label = "Cost Source ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute TotalValue Number {
      fetch = "total_value";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute CreateDate Date {
      fetch = "create_date";
      label = "Created";
      editable = [false];
   }
   attribute AbcClass Text {
      fetch = "abc_class";
      label = "ABC Class";
      maxlength = 1;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "accounting_group";
      label = "Accounting Group";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "type_code_db";
      label = "Part Type";
      editable = [false];
   }
   attribute PrimeCommodity Text {
      fetch = "prime_commodity";
      label = "Commodity Group 1";
      maxlength = 5;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "second_commodity";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute AssetClass Text {
      fetch = "asset_class";
      label = "Asset Class";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute StatYearNo Number {
      fetch = "stat_year_no";
      label = "Year";
      maxlength = 4;
      editable = [false];
   }
   attribute StatPeriodNo Number {
      fetch = "stat_period_no";
      label = "Period";
      maxlength = 2;
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(Contract)";
   }

   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Inventory Part";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   @DynamicComponentDependency COST
   reference BucketPostingGroupIdRef(Company, BucketPostingGroupId) to CostBucketPostingGroup(Company, PostingGroupId) {
      label = "Posting Cost Group ID";
   }
   reference CostSourceIdRef(Company, CostSourceId) to CostSource(Company, CostSourceId) {
      label = "Cost Source ID";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlanner(BuyerCode) {
      label = "Planner";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
}

@Override
entity InventoryValuePartLocGrp using InventoryValuePart {
   crud = Read;
   from = "invent_value_locgrp_sum_ext";
   keys = PartNo, LocationGroup, StatYearNo, StatPeriodNo, Contract {
      where = "PART_NO = :PartNo and LOCATION_GROUP = :LocationGroup and STAT_YEAR_NO = :StatYearNo and STAT_PERIOD_NO = :StatPeriodNo and CONTRACT = :Contract";
   }
   use attributes = QtyWaivDevRej, Quantity, QtyInTransit, QtyAtCustomer;
   attribute PartNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute LocationGroup Text {
      editable = [false];
   }
   attribute QtyWaivDevRej Number {
      label = "W/D/R Qty";
      editable = [false];
   }
   attribute Quantity Number {
      editable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
      editable = [false];
   }
   attribute QtyAtCustomer Number {
      editable = [false];
   }
   attribute TotalValue Number {
      fetch = "total_value";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute UnitCost Number {
      fetch = "unit_cost";
      label = "Unit Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute AbcClass Text {
      fetch = "abc_class";
      label = "ABC Class";
      maxlength = 1;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "accounting_group";
      label = "Accounting Group";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "type_code_db";
      label = "Part Type";
      editable = [false];
   }
   attribute PrimeCommodity Text {
      fetch = "prime_commodity";
      label = "Commodity Group 1";
      maxlength = 5;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "second_commodity";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute AssetClass Text {
      fetch = "asset_class";
      label = "Asset Class";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute StatYearNo Number {
      label = "Year";
      maxlength = 4;
      // searchable = false;
      editable = [false];
   }
   attribute StatPeriodNo Number {
      label = "Stat Period";
      maxlength = 2;
      // searchable = false;
      editable = [false];
   }
   attribute Contract Text {
      // searchable = false;
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Inventory Part";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
   reference InventoryLocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
}
query InventoryValueDetailLocationGroup {
   from = "invent_value_locgrp_detail_ext";
   lu = InventValuePartDetail;
   keys = PartNo, ConfigurationId, SerialNo, LotBatchNo, ConditionCode, BucketPostingGroupId, CostSourceId, LocationGroup, StatYearNo, StatPeriodNo, Contract {
      where = "PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and SERIAL_NO = :SerialNo and LOT_BATCH_NO = :LotBatchNo and CONDITION_CODE = :ConditionCode and BUCKET_POSTING_GROUP_ID = :BucketPostingGroupId and COST_SOURCE_ID = :CostSourceId and LOCATION_GROUP = :LocationGroup and STAT_YEAR_NO = :StatYearNo and STAT_PERIOD_NO = :StatPeriodNo and CONTRACT = :Contract";
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute BucketPostingGroupId Text {
      fetch = "bucket_posting_group_id";
      label = "Posting Cost Group ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute CostSourceId Text {
      fetch = "cost_source_id";
      label = "Cost Source ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute LocationGroup Text {
      fetch = "location_group";
      label = "Location Group";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute TotalValue Number {
      fetch = "total_value";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute CreateDate Date {
      fetch = "create_date";
      label = "Created";
      editable = [false];
   }
   attribute AbcClass Text {
      fetch = "abc_class";
      label = "ABC Class";
      maxlength = 1;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "accounting_group";
      label = "Accounting Group";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "type_code_db";
      label = "Part Type";
      editable = [false];
   }
   attribute PrimeCommodity Text {
      fetch = "prime_commodity";
      label = "Commodity Group 1";
      maxlength = 5;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "second_commodity";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute AssetClass Text {
      fetch = "asset_class";
      label = "Asset Class";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute StatYearNo Number {
      fetch = "stat_year_no";
      label = "Year";
      maxlength = 4;
      // searchable = false;
      editable = [false];
   }
   attribute StatPeriodNo Number {
      fetch = "stat_period_no";
      label = "Statistical Period";
      maxlength = 2;
      // searchable = false;
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      // searchable = false;
      editable = [false];
      format = uppercase;
   }
   // TODO: Replace the company fetch with reference to company in parent.
   attribute Company Text {
      fetch = "Site_API.Get_Company(Contract)";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Inventory Part";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   @DynamicComponentDependency COST
   reference BucketPostingGroupIdRef(Company, BucketPostingGroupId) to CostBucketPostingGroup(Company, PostingGroupId) {
      label = "Posting Cost Group ID";
   }
   reference CostSourceIdRef(Company, CostSourceId) to CostSource(Company, CostSourceId) {
      label = "Cost Source ID";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
}

@Override
entity InventoryValueLevelLocGrp using InventoryValuePart {
   crud = Read;
   from = "invent_value_locgrp_level_ext";
   keys = PartNo, ConfigurationId, SerialNo, LotBatchNo, ConditionCode, LocationGroup, StatYearNo, StatPeriodNo, Contract {
      where = "PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and SERIAL_NO = :SerialNo and LOT_BATCH_NO = :LotBatchNo and CONDITION_CODE = :ConditionCode and LOCATION_GROUP = :LocationGroup and STAT_YEAR_NO = :StatYearNo and STAT_PERIOD_NO = :StatPeriodNo and CONTRACT = :Contract";
   }
   use attributes = QtyWaivDevRej, Quantity, QtyInTransit, QtyAtCustomer, CreateDate;
   attribute PartNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
      format = uppercase;
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute LocationGroup Text {
      editable = [false];
   }
   attribute QtyWaivDevRej Number {
      label = "W/D/R Qty";
      editable = [false];
   }
   attribute Quantity Number {
      editable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
      editable = [false];
   }
   attribute QtyAtCustomer Number {
      editable = [false];
   }
   attribute TotalValue Number {
      fetch = "total_value";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute UnitCost Number {
      fetch = "unit_cost";
      label = "Unit Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute CreateDate Date {
      label = "Created";
      editable = [false];
   }
   attribute AbcClass Text {
      fetch = "abc_class";
      label = "ABC Class";
      maxlength = 1;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "accounting_group";
      label = "Accounting Group";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "type_code_db";
      label = "Part Type";
      editable = [false];
   }
   attribute PrimeCommodity Text {
      fetch = "prime_commodity";
      label = "Commodity Group 1";
      maxlength = 5;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "second_commodity";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute AssetClass Text {
      fetch = "asset_class";
      label = "Asset Class";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute StatYearNo Number {
      label = "Year";
      maxlength = 4;
      // searchable = false;
      editable = [false];
   }
   attribute StatPeriodNo Number {
      label = "Statistical Period";
      maxlength = 2;
      // searchable = false;
      editable = [false];
   }
   attribute Contract Text {
      // searchable = false;
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Inventory Part";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
   reference InventoryLocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
}

-------------------------------- STRUCTURES ---------------------------------
structure InventoryValueRepStructure {
   attribute StatYearNo Number {
      label = "Year ";
      maxlength = 4;
      required = [true];
   }
   attribute StatPeriodNo Number {
      label = "Period";
      maxlength = 2;
      required = [true];
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute FromPartNo Text {
      label = "From";
      maxlength = 25;
      format = uppercase;
   }
   attribute ToPartNo Text {
      label = "To";
      maxlength = 25;
      format = uppercase;
   }
   attribute LevelOfDetail Enumeration(InvValueRepDetailLevel) {
      label = "Level of Detail";
      required = [true];
   }
   attribute LocationGroup Text {
      label = "Location Group";
      maxlength = 100;
      format = uppercase;
   }
   reference StatYearNoRef(StatYearNo) to StatisticPeriod2(StatYearNo) {
      label = "Year ";
   }
   reference StatPeriodNoRef(StatYearNo, StatPeriodNo) to StatisticPeriod(StatYearNo, StatPeriodNo) {
      label = "Period";
   }
   reference SiteRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference FromPartNoRef(Contract, FromPartNo) to InventoryPartLov(Contract, PartNo) {
      label = "From Part No";
   }
   reference ToPartNoRef(Contract, ToPartNo) to InventoryPartLov(Contract, PartNo) {
      label = "To Part No";
   }
   reference LocationGroupRef(LocationGroup) to InventValuePartLocgrpLov(LocationGroup) {
      label = "Location Group";
   }
}

structure InvValCheckRepStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute DiffToleranceAmount Number {
      label = "Diff Tolerance Amount";
      maxlength = 10;
      required = [true];
      format = ifscurrency;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}

structure InvValSumRepStructure {
   attribute StatYearNo Number {
      label = "Year ";
      maxlength = 4;
      required = [true];
   }
   attribute StatPeriodNo Number {
      label = "Period";
      maxlength = 2;
      required = [true];
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute InventoryCostType Enumeration(InventoryCostType) {
      label = "Cost Type";
      required = [CostSetRef = null];
   }
   @DynamicComponentDependency COST
   attribute CostSet Number {
      label = "Cost Set";
      required = [InventoryCostType = null];
   }
   attribute IncludeParts Boolean {
      label = "Include Parts in Report";
      required = [true];
   }
   attribute Criteria1 Enumeration(InventoryValueRepParam) {
      label = "Criteria";
      editable = [false];
   }
   attribute Criteria1From Text {
      label = "From Value";
      editable = [false];
   }
   attribute Criteria1To Text {
      label = "To Value";
      editable = [false];
   }
   attribute Criteria2 Enumeration(InventoryValueRepParam) {
      label = "Criteria";
      editable = [false];
   }
   attribute Criteria2From Text {
      label = "From Value";
      editable = [false];
   }
   attribute Criteria2To Text {
      label = "To Value";
      editable = [false];
   }
   attribute Criteria3 Enumeration(InventoryValueRepParam) {
      label = "Criteria";
      editable = [false];
   }
   attribute Criteria3From Text {
      label = "From Value";
      editable = [false];
   }
   attribute Criteria3To Text {
      label = "To Value";
      editable = [false];
   }
   attribute Criteria4 Enumeration(InventoryValueRepParam) {
      label = "Criteria";
      editable = [false];
   }
   attribute Criteria4From Text {
      label = "From Value";
      editable = [false];
   }
   attribute Criteria4To Text {
      label = "To Value";
      editable = [false];
   }
   attribute Criteria5 Enumeration(InventoryValueRepParam) {
      label = "Criteria";
      editable = [false];
   }
   attribute Criteria5From Text {
      label = "From Value";
      editable = [false];
   }
   attribute Criteria5To Text {
      label = "To Value";
      editable = [false];
   }
   reference StatPeriodNoRef(StatYearNo, StatPeriodNo) to StatisticPeriod(StatYearNo, StatPeriodNo) {
      label = "Period";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency COST
   reference CostSetRef(Contract, CostSet) to CostSet(Contract, CostSet) {
      label = "Cost Set";
   }
}
structure CriteriaStructure {
   attribute Criteria Enumeration(InventoryValueRepParam) {
      label = "Criteria";
      required = [true];
   }
   attribute CriteriaFrom Text {
      editable = [ETag = null];
      label = "Criteria From";
      format = uppercase;
   }
   attribute CriteriaTo Text {
      editable = [ETag = null];
      label = "Criteria To";
      format = uppercase;
   }
   attribute PartTypeFrom Enumeration(InventoryPartType) {
      label = "Criteria From";
      required = [true];
   }
   attribute PartTypeTo Enumeration(InventoryPartType) {
      label = "Criteria To";
      required = [true];
   }
   reference AbcClassFromRef(CriteriaFrom) to AbcClass(AbcClass);
   reference PlannerFromRef(CriteriaFrom) to InventoryPartPlanner(BuyerCode);
   reference AccountingGroupFromRef(CriteriaFrom) to AccountingGroup(AccountingGroup);
   reference ProductFamilyFromRef(CriteriaFrom) to InventoryProductFamily(PartProductFamily);
   reference ProductCodeFromRef(CriteriaFrom) to InventoryProductCode(PartProductCode);
   reference CommodityFromRef(CriteriaFrom) to CommodityGroup(CommodityCode);
   reference AssetClassFromRef(CriteriaFrom) to AssetClass(AssetClass);
   reference AbcClassToRef(CriteriaTo) to AbcClass(AbcClass);
   reference PlannerToRef(CriteriaTo) to InventoryPartPlanner(BuyerCode);
   reference AccountingGroupToRef(CriteriaTo) to AccountingGroup(AccountingGroup);
   reference ProductFamilyToRef(CriteriaTo) to InventoryProductFamily(PartProductFamily);
   reference ProductCodeToRef(CriteriaTo) to InventoryProductCode(PartProductCode);
   reference CommodityToRef(CriteriaTo) to CommodityGroup(CommodityCode);
   reference AssetClassToRef(CriteriaTo) to AssetClass(AssetClass);
}
---------------------------------- ACTIONS ----------------------------------
action GetReportResultKeyInvValRep Text {
   initialcheck UserAllowedSite(Contract);
   parameter PeriodYear          Number;
   parameter PeriodNo            Number;
   parameter Contract            Text;
   parameter FromPartNo          Text;
   parameter ToPartNo            Text;
   parameter LevelOfDetail       Enumeration(InvValueRepDetailLevel);
   parameter LocationGroup       Text;
}

action GetReportResultKeyCheckRep Text {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter DiffToleranceAmount Number;
}

action GetReportResultKeyInvValSum Text {
   initialcheck UserAllowedSite(Contract);
   parameter StatYearNo             Number;
   parameter StatPeriodNo           Number;
   parameter Contract               Text;
   parameter InventoryCostType      Enumeration(InventoryCostType);
   parameter CostSet                Number;
   parameter IncludeParts           Boolean;
   parameter Criteria1              Enumeration(InventoryValueRepParam);
   parameter Criteria1From          Text;
   parameter Criteria1To            Text;
   parameter Criteria2              Enumeration(InventoryValueRepParam);
   parameter Criteria2From          Text;
   parameter Criteria2To            Text;
   parameter Criteria3              Enumeration(InventoryValueRepParam);
   parameter Criteria3From          Text;
   parameter Criteria3To            Text;
   parameter Criteria4              Enumeration(InventoryValueRepParam);
   parameter Criteria4From          Text;
   parameter Criteria4To            Text;
   parameter Criteria5              Enumeration(InventoryValueRepParam);
   parameter Criteria5From          Text;
   parameter Criteria5To            Text;
}
--------------------------------- FUNCTIONS ---------------------------------

function GetPartTypeDb Text {
   parameter PartType Enumeration(InventoryPartType);
}

