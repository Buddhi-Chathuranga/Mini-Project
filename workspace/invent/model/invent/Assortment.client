--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-04-30  AyAmlk  PR21R2-170, STRATEGIC_PROCUREMENT: Added missing dynamic dependencies for SRM.
--  2020-01-25  WaSalk  SC2020R1-12234, Modified CharacTmpDefinedNodeto editable false.
--  2020-10-08  AyAmlk  PR2020R1-341, Added New command to tree so that its visible when there are no records in the page.
--  2020-07-09  AyAmlk  PR2020R1-53, Moved common code in Assortment and ProcurementCategoryAssortment to AssortmentCommonObjects fragment.
--  2020-07-06  AyAmlk  PR2020R1-144, Re-arranged the commands in Form and AssortmentNodePage pages.
--  2020-05-28  LaDelk  PR2020R1-145, Removed 'Delete Node' command from AssortmentStructure page.
--  2020-03-16  AyAmlk  PR2020R1-2, STRATEGIC_PROCUREMENT: Added ProcCategoryAssortment field.
--  2020-03-16          Added NavigateToProcurementCategoryCommand to navigate to Procurement Category Assortment page.
--  2019-11-04  SWiclk  SCXTEND-1211, Added startupmode = search to page AssortmentPage.
--  2019-07-18  MeAblk  SCUXXW4-19300, Added MoveAssortmentNodeInTreeCommand in order to make node move enable in the Tree.
--  2019-07-03  MeAblk  SCUXXW4-22545, Added NewCommnad, NewAssortmentStructureGroup and CreateNewAssortmentStructureDialog.
--  2019-06-30  AwWelk  SCUXXW4-20787, Corrected the question message in MoveAssortmentNodeDialog.
--  2019-06-28  bajelk  SCUXXW4-20860, made some label changes.
--  2019-06-27  Satglk  SCUXXW4-20820, In EngAttributeRef selector changed to ReferenceCharacteristicTemplateSelector.
--  2019-06-27  Satglk  SCUXXW4-20803, In ReferenceIsoUnitSelector, fields reduced to UnitCode, Description.
--  2019-06-27  Satglk  SCUXXW4-20800, In AssortmentHistoryList, HistoryNo field - searchable flag removed.
--  2019-06-27  AwWelk  SCUXXW4-20810, Corrected the fetching of parent attribute in DisconnectPartsCommand.
--  2019-06-27  Satglk  SCUXXW4-20799, In AssortmentStructureSelector badge label set to TextOnly.
--  2019-06-22  bajelk  SCUXXW4-22553, added colors for badges in AssortmentStructureSelector .
--  2019-06-07  bajelk  SCUXXW4-20796, Made label change.
--  2019-05-19  bajelk  SCUXXW4-19062, Added PartListCommand to implement PartListAssistant in Connect Parts dialog.
--  2019-05-05  bajelk  SCUXXW4-17990, Added CopyfromAssortmentStructureGroup in CopyAssortmentDialog of Copy Campaign Command.
--  2019-04-05  bajelk  SCUXXW4-17931, Added size for Notes field in AssortmentStructureGroup.
--  2019-01-27  bajelk  SCUXXW4-15271, Renamed Assortment Detail page as "Assortment Detail".
--  2019-01-03  bajelk  SCUXXW4-14948, Added SalesLimitationsForOtherAssortmentsExist in Valid for Customers field
--  2018-12-06  bajelk  SCUXXW4-6632, Converted from tbwAssortmentHistory using MTG Version: 1.32
--                      Added Assortment Details and Assortment History Details tab windows.
--  2018-11-27  KoDelk  SCUXXW4-5961, Converted from frmWarehouseMgrTaskPlanning using MTG Version: 1.32
---------------------------------------------------------------------------------
client Assortment;
component INVENT;
layer Core;
projection AssortmentHandling;


--------------------------------- FRAGMENTS ---------------------------------
include fragment AssortmentCommonObjects;
include fragment CreatePartsPerSiteDialog;
@DynamicComponentDependency ORDER
include fragment CustomerAssortmentStructTab;
include fragment CreateGtinAutomaticallyAssistant;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry AssortmentNavEntry parent InventNavigator.PartMasterDataAssortment at index 100 {
      label = "Assortment";
      tree Tree;
   }
   entry AssortmentDetailNavEntry parent InventNavigator.PartMasterDataAssortment at index 150 {
      label = "Assortment Details";
      page AssortmentPage home AssortmentStructure;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using AssortmentStructureSet {
   label = "Assortment: ${AssortmentId} - ${Description}";
   stateindicator AssortmentStructureStateIndicator;
   editmode = MultiField;
   selector AssortmentStructureSelector;
   group AssortmentStructureGroup;
   singleton RootNodeDetailSingleton(AssortmentRootNodeArray);
   group AssortmentNodeInformationGroup bind RootNodeDetailSingleton;
   group AssortmentNodeCharacteristicGroup bind RootNodeDetailSingleton;
   list ConnectedPartsList using GetConnectedParts(AssortmentId, AssortmentId, searchcontext.AssortmentStructureSearchContext.PartViewType);

   command NewCommnad;
   commandgroup StatusCmdGroup {
      commandgroup StatusCmds {
         label = "Status";
         command Activate;
         command Close;
         command ChangeToPlanned;
      }
   }
   commandgroup EditStructureCmdGroup {
      commandgroup EditStructureCmds {
         label = "Edit Structure";
         command CreateSubNodesForRootCommand;
      }
   }
   commandgroup PartOperationsCmdGroup {
      commandgroup PartOperationsCmds {
         label = "Part Operations";
         command ConnectPartsForRootCommand;
         command CreateAndConnectPartsForRootCommand;
         command CreatePartsPerSiteForRootCommand;
      }
   }
   commandgroup AssortmentOperationsCmdGroup {
      commandgroup AssortmentOperationsCmds {
         label = "Assortment Operations";
         command NavigateToAssortmentDetailCommand;

         command CopyAssortmentCommand;
         command CopyAssortmentNodeForRootCommand;
         command QueryConnectedCustomersCommand;
      }
   }
   -- STRATEGIC_PROCUREMENT: start
   @DynamicComponentDependency SRM
   commandgroup NavigateToProcurementCategoryCmdGroup {
      command NavigateToProcurementCategoryCommand;
   }
   -- STRATEGIC_PROCUREMENT: end
   commandgroup TranslationCmdGroup {
      command TranslationCommand;
   }

}

page AssortmentPage using AssortmentStructureSet {
   label = "Assortment Details";
   stateindicator AssortmentStructureStateIndicator;
   editmode = MultiField;
   selector AssortmentStructureSelector;
   group AssortmentStructureGroup;

   tabs {
      tab {
         label = "Assortment Levels";
         list AssortmentLevelsList(AssortmentStructureLevelArray);
      }
      tab {
         label = "Assortment History";
         list AssortmentHistoryList(AssortmentHistoryArray);
      }
      @DynamicComponentDependency ORDER
      tab {
         label = "Valid for Customers";
         list CustomerAssortmentStructList(CustomerAssortmentStructArray);
      }
   }

   commandgroup StatusCmdGroup {
      command Activate;
      command Close;
      command ChangeToPlanned;
   }
   commandgroup AssormentNodeCmdGroup {
      command CopyAssortmentCommand;
      command QueryConnectedCustomersCommand;
   }
   commandgroup TranslationCmdGroup {
      command TranslationCommand;
   }
   commandgroup AssortmentStructureCmdGroup {
      command NavigateToAssortmentStructureCommand;
   }
}

page AssortmentNodePage using AssortmentNodeSet {
   label = "Assortment: ${AssortmentId} - ${Description}";
   stateindicator AssortmentNodeStateIndicator;
   editmode = MultiField;
   selector AssortmentNodeSelector;
   group AssortmentNodeHeaderGroup;
   group AssortmentNodeInformationGroup;
   group AssortmentNodeCharacteristicGroup;
   list ConnectedPartsList using GetConnectedParts(AssortmentId, AssortmentNodeId, AssortmentStructureSearchContext.PartViewType);

   commandgroup StatusCmdGroup {
      commandgroup StatusCmds {
         label = "Status";
         command ActivateCommand;
         command CloseCommand;
         command ChangetoPlannedCommand;
      }
   }
   commandgroup EditStructureCmdGroup {
      commandgroup EditStructureCmds {
         label = "Edit Structure";
         command CreateSubNodesCommand;
         command MoveAssortmentNodeCommand;
         command RemoveNodeCommand;
      }
   }
   commandgroup PartOperationsCmdGroup {
      commandgroup PartOperationsCmds {
         label = "Part Operations";
         command ConnectPartsCommand;
         command CreateAndConnectPartsCommand;
         command CreatePartsPerSiteCommand;
      }
   }
   commandgroup AssortmentOperationsCmdGroup {
      commandgroup AssortmentOperationsCmds {
         label = "Assortment Operations";
         command NavigateToAssortmentDetailFromNodeCommand;
         command CopyAssortmentFromNodeCommand;
         command CopyAssortmentNodeCommand;
         command QueryConnectedCustomersFromNodeCommand;
      }
   }
   commandgroup TranslationCmdGroup {
      command AssortmnetNodeTranslationCommand;
   }
}
--------------------------------- SINGLETON ---------------------------------
singleton RootNodeDetailSingleton for AssortmentNode {
   crudactions {

   }
   commandgroup TranslationCmdGroup {
      command AssortmnetNodeTranslationCommand;
   }
}
-------------------------------- ASSISTANTS ---------------------------------
assistant CreateAndConnectPartsAssistant using AssortmentVirtualSet {
   label = "Create and Connect Parts";
   savemode = OnLostFocus;
   input(AssortmentId, ParentNodeId);

   steps {
      step {
         group AssortmentGroup {
            visible = [false];
         }
         list CreateAndConnectPartsList(CreatePartVirtualArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [component.CreateAndConnectPartsList.RowCount > 0];

      execute {
         call CreatePartNode();
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

--------------------------------- COMMANDS ----------------------------------
command QueryConnectedCustomersFromNodeCommand for AssortmentNode {
   label = "Customers per Assortment";
   enabled = [AssortmentStructureRef.ClassificationStandard != null];
   execute {
      navigate "page/CustomersPerAssortment/List?$filter=AssortmentId eq $[AssortmentId]";
   }
}

command QueryConnectedCustomersCommand for AssortmentStructure {
   label = "Customers per Assortment";
   enabled = [ClassificationStandard != null];
   execute {
      navigate "page/CustomersPerAssortment/List?$filter=AssortmentId eq $[AssortmentId]";
   }
}

command NavigateToAssortmentDetailCommand for AssortmentStructure {
   label = "Assortment Details";
   enabled = [true];
   execute {
      navigate AssortmentPage(AssortmentId);
   }
}

-- STRATEGIC_PROCUREMENT: start
@DynamicComponentDependency SRM
command NavigateToProcurementCategoryCommand for AssortmentStructure {
   label = "Procurement Category Assortment";
   enabled = [ProcCategoryAssortment];

   execute {
      navigate "tree/ProcurementCategoryAssortment/Tree?$filter=AssortmentId eq $[AssortmentId]";
   }
}
-- STRATEGIC_PROCUREMENT: end

command NavigateToAssortmentStructureCommand for AssortmentStructure {
   label = "Assortment";
   enabled = [true];
   execute {
      navigate {
         tree Tree {
            filter(AssortmentId, AssortmentId);
         }
      }
   }
}

command NavigateToAssortmentDetailFromNodeCommand for AssortmentNode {
   label = "Assortment Details";
   enabled = [true];
   execute {
      navigate AssortmentPage(AssortmentId);
   }
}

command CreateAndConnectPartsCommand for AssortmentNode {
   label = "Create And Connect Parts";
   enabled = [PartNo = null];

   execute {
      assistant CreateAndConnectPartsAssistant(AssortmentId, AssortmentNodeId) {
         when OK {
            success("Parts Added");
         }
      }
   }
}

command CreateAndConnectPartsForRootCommand for AssortmentStructure {
   label = "Create And Connect Parts";
   enabled = [PartNo = null];

   execute {
      assistant CreateAndConnectPartsAssistant(AssortmentId, AssortmentId) {
         when OK {
            success("Parts Added");
         }
      }
   }
}

command ConnectPartsCommand for AssortmentNode {
   label = "Connect Parts";
   enabled = [PartNo = null];

   execute {
      assistant ConnectPartsAssistant(AssortmentId, AssortmentNodeId) {
         when OK {
            success("Parts Connected");
         }
      }
   }
}

command ConnectPartsForRootCommand for AssortmentStructure {
   label = "Connect Parts";
   enabled = [PartNo = null];

   execute {
      assistant ConnectPartsAssistant(AssortmentId, AssortmentId) {
         when OK {
            success("Parts Connected");
         }
      }
   }
}

command AssortLevelTranslationCommand {
   label = "Translation";
   mode = Global;
   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'INVENT' and Lu eq 'AssortmentStructureLevel'";
   }
}

command CreatePartsPerSiteCommand for AssortmentNode {
   label = "Create Parts Per Site";
   enabled = [AssortmentStructureRef.Objstate = "Active"];
   execute {
      assistant CreatePartsPerSiteAssistant(AssortmentId, AssortmentNodeId) {
         when OK {
            success("Part Creation Posted.");
            exit OK;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CreatePartsPerSiteForRootCommand for AssortmentStructure {
   label = "Create Parts Per Site";
   enabled = [Objstate = "Active"];
   execute {
      assistant CreatePartsPerSiteAssistant(AssortmentId, AssortmentId) {
         when OK {
            success("Part Creation Posted.");
            exit OK;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command NewCommnad for AssortmentStructure {
   label = "New";
   icon = "new";
   style = IconOnly;
   mode = Global;
   variable AssortmentIdVar Text;

   execute {
      dialog CreateNewAssortmentStructureDialog into(AssortmentIdVar) {
         when OK {
            if [AssortmentIdVar != null] {
               navigate "tree/Assortment/Tree?$filter=AssortmentId eq $[AssortmentIdVar]";
            }
            exit OK;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Overtake
selector ReferenceIsoUnitSelector for IsoUnit {
   label = "";
   static UnitCode;
   static Description;
}
---------------------------------- GROUPS -----------------------------------
group AssortmentStructureGroup clone AssortmentStructureBaseGroup {
   label = "";

   -- STRATEGIC_PROCUREMENT: start
   @DynamicComponentDependency SRM
   field ProcCategoryAssortment;
   -- STRATEGIC_PROCUREMENT: end
}

group AssortmentNodeHeaderGroup for AssortmentNode {
   label = "";

   field AssortmentId {
      size = Small;
   }
   field AssortmentStructureRef.Description;
   lov ClassificationStandardRef with ReferenceClassificationStandardSelector {
      description = ClassificationStandardRef.Description;
   }
   field AssortmentStructureRef.Notes {
      multiline = true;
   }
}

group AssortmentNodeInformationGroup clone AssortmentNodeInformationBaseGroup {
   label = "Node Information";
}

group AssortmentNodeCharacteristicGroup for AssortmentNode {
   label = "Characteristics";

   lov EngAttributeRef with ReferenceCharacteristicTemplateSelector {
      description = TemplateDescription;
      editable = [PartNo = null];
   }
   field CharacTmpDefinedNode {
      editable = [false];
   }
}

group AssortmentGroup for AssortmentVirtual {
   field AssortmentId;
   field ParentNodeId;
}

group NewAssortmentStructureGroup for NewAssortmentStructureStructure clone NewAssortmentStructureBaseGroup {
   -- STRATEGIC_PROCUREMENT: start
   @DynamicComponentDependency SRM
   field ProcCategoryAssortment;
   -- STRATEGIC_PROCUREMENT: end
}

----------------------------------- LISTS -----------------------------------
list ConnectedPartsList clone ConnectedPartsBaseList {
   label = "Connected Parts";

   fieldranking PartCatalogRef, LotTrackingCode, SerialTrackingCodeDb, SerialRule, EngSerialTrackingCodeDb, UnitCodeRef, ConfigurableDb, ConditionCodeUsageDb, LotQuantityRule;

   commandgroup CommandGroupCmdGroup {
      command DisconnectPartsCommand;
   }
}

list CreateAndConnectPartsList for CreatePartVirtual {
   label = "New Parts";

   field PartNo {
      validate command {
         variable ResultVar;
         execute {
            call CheckPartCatalogExists(PartNo) into ResultVar;
            if [ResultVar] {
               error("Part already exists in Part Catalog");
               set PartNo = "";
            }
         }
      }
   }
   field Description;
   field LotTrackingCode;
   field ReceiptIssueSerialTrackDb {
      validate command {
         execute {
            if [ReceiptIssueSerialTrackDb] {
               set EngSerialTrackingCodeDb = "SerialTracking";
            }
         }
      }
   }
   field SerialTrackingCodeDb {
      enumerationtrue = "SerialTracking";
      enumerationfalse = "NotSerialTracking";
      emphasis True = [SerialTrackingCodeDb = "SerialTracking"];
      emphasis Off = [SerialTrackingCodeDb = "NotSerialTracking"];
   }
   field SerialRule;
   field EngSerialTrackingCodeDb {
      enumerationtrue = "SerialTracking";
      enumerationfalse = "NotSerialTracking";
      emphasis True = [EngSerialTrackingCodeDb = "SerialTracking"];
      emphasis Off = [EngSerialTrackingCodeDb = "NotSerialTracking"];
   }
   lov UnitCodeRef with ReferenceIsoUnitSelector {
      description = UnitCodeRef.Description;
   }
   field CatchUnitEnabledDb;
   lov InputUnitMeasGroupIdRef with  ReferenceInputUomGroupLovSelector {
      size = Small;
   }
   lov StandardNamesRef with ReferenceStandardNamesSelector {
      description = StandardNamesRef.StdName;
   }
   field ConfigurableDb {
      enumerationtrue = "Configured";
      enumerationfalse = "NotConfigured";
      emphasis True = [ConfigurableDb = "Configured"];
      emphasis Off = [ConfigurableDb = "NotConfigured"];
   }
   field ConditionCodeUsageDb {
      enumerationtrue = "AllowConditionCode";
      enumerationfalse = "NotAllowConditionCode";
      emphasis True = [ConditionCodeUsageDb = "AllowConditionCode"];
      emphasis Off = [ConditionCodeUsageDb = "NotAllowConditionCode"];
   }
   field InfoText;
   field LotQuantityRule;
   field SubLotRule;
   lov EngPartMainGroupRef with ReferenceEngPartMainGroupSelector {
      description = EngPartMainGroupRef.Description;
   }
   field MultilevelTrackingDb {
      enumerationtrue = "TrackingOn";
      enumerationfalse = "TrackingOff";
      emphasis True = [MultilevelTrackingDb = "TrackingOn"];
      emphasis Off = [MultilevelTrackingDb = "TrackingOff"];
   }
   field GtinSeries;
   field GtinNo;
   field CreateAutomatically {
      validate command {
         variable Dummy;
         execute {
            assistant CreateAutoGtinAssistant into(GtinNo, GtinSeries, Dummy) {
               when OK {
                  exit;
               }
            }
         }
      }
   }
   measure NetWeight(NetWeightUom) {
      unitlookup IsoUnits(UnitCode);
      unitselector IsoUnitSelector;
   }
   measure NetVolume(NetVolumeUom) {
      unitlookup IsoUnits(UnitCode);
      unitselector IsoUnitSelector;
   }
   field FreightFactor;
}

list AssortmentLevelsList for AssortmentStructureLevel {

   field StructureLevel {
      size = Small;
   }
   field Name {
      size = Large;
   }

   commandgroup CommandGroupCmdGroup {
      command AssortLevelTranslationCommand;
   }
}

list AssortmentHistoryList for AssortmentHistory {

   field HistoryNo {
      columnvisible = [false];
      columnexclude = [true];
   }
   field MessageText {
      size = FullWidth;
   }
   field DateCreated;
   field UserId {
      size = Small;
   }
}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CreateNewAssortmentStructureDialog for NewAssortmentStructureStructure {
   label = "Create New Assortment Structure";
   output(AssortmentId);

   group NewAssortmentStructureGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [AssortmentId != null and Description != null];

         execute {
            -- STRATEGIC_PROCUREMENT: Passed ProcCategoryAssortment.
            call CreateAssortmentStructure(AssortmentId, Description, ClassificationStandard, Notes, ProcCategoryAssortment);
            exit OK;
         }
      }
      command Cancel;
   }
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------
tree Tree using AssortmentStructureSet {
   label = "Assortment";
   searchcontext AssortmentStructureSearchContext {
      defaults = GetDefaultSeachContext();
   }
   selector AssortmentStructureSelector;
   command NewCommnad;
   rootnode RootNode {
      label = "Assortment: ${AssortmentId} - ${Description}";
      navigate {
         page Form {
            filter(AssortmentId, AssortmentId);
         }
      }
      iconset {
         icon "folder-alt";
         emphasis Complementary3 = [true];
      }
      connections {
         node ChildNode using GetAssortmentNodes(AssortmentId, AssortmentId, AssortmentStructureSearchContext.PartNo);
      }
   }
   node ChildNode for AssortmentNode {
      label = "${AssortmentNodeId} - ${Description}";
      orderby = AssortmentNodeId;

      navigate {
         page AssortmentNodePage {
            filter(AssortmentId, AssortmentId);
            filter(AssortmentNodeId, AssortmentNodeId);
         }
      }
      iconset {
         icon "diamon-solid-small" {
            expression = [PartNo != null];
         }
         icon "folder-alt" {
            expression = [PartNo = null];
         }
         emphasis Complementary3 = [true];
      }
      connections {
         node ChildNode using GetAssortmentNodes(AssortmentId, AssortmentNodeId, AssortmentStructureSearchContext.PartNo);
      }
      onmove {
         when ChildNode command MoveAssortmentNodeInTreeCommand;
         when RootNode command MoveAssortmentNodeInTreeCommand;
      }
   }
}

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

------------------------------ SEARCH CONTEXT -------------------------------
searchcontext AssortmentStructureSearchContext for AssortmentContextSearchStructure {
   label = "";
   radiogroup PartViewType;
   field PartNo;
}