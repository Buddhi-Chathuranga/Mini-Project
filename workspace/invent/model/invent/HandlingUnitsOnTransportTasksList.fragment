----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-05-21  JaThlk  SCUXXW4-21051, Excluded unnecessary attributes from the entity to avoid runtime errors.
-- 2019-04-05  ChFolk  SCUXXW4-18830, Added attributes CreatedLinesExist and PickedLinesExist to HandlUnitStockSnapshot
-- 2019-03-29  ChFolk  SCUXXW4-18092, Removed Dynamic Dependency on ProjectId and ActivitySeq as they are from the entity TransportTaskLine.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-12-17  ChFolk  SCUXXW4-6124, Moved necessary fragments from HandlingUnitsOnTransportTasks and removed command which are handled at required clients.
-- 2018-12-11  Sudelk  SCUXXW4-6124, Binded the TransportTaskLinesList to the parent List.
-- 2018-07-11  ChFolk  SCUXXW4-6502, Include some attributes and references to HandlUnitStockSnapshot to use it for the AggregatedHandlingUnitsList which is used
-- 2018-07-11          for Aggregated tab in transport Task.
-- 2018-07-09  ChFolk  SCUXXW4-6502 Created to include common code from HandlingUnitsOnTransportTasksHandling.projection and HandlingUnitsOnTransportTasks.client
-- 2018-07-09          to be used by both HandlingUnitsOnTransportTask and available Handling Units tab in TransportTask.
----------------------------------------------------------------------------------------------------------

fragment HandlingUnitsOnTransportTasksList;
component INVENT;
layer Core;
description "fragment uses to keep entity and list for Handling Units In Stock";

include fragment InventoryLocation17Selector;
include fragment UserAllowedSiteLovSelector;
include fragment HandlingUnitExtendedSelector;
include fragment HandlingUnitLovSelector;
include fragment InventoryPartInStockLov9Selector;
include fragment ProjectDetailsFieldSet;

----------------------------- CLIENT FRAGMENTS ------------------------------
----------------------------------- LISTS -----------------------------------
list HandlingUnitsList for HandlUnitStockSnapshot {
   orderby = TransportTaskId;
   field TransportTaskIdRef {
      label = "Transport Task";
   }
   lov HandlingUnitIdRef with ReferenceInventoryPartInStockLov9Selector {
      size = Small;
   }
   lov FromContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov FromLocationNoRef with ReferenceInventoryLocation17Selector {
      size = Small;
   }
   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov ToLocationNoRef with ReferenceInventoryLocation17Selector {
      size = Small;
   }
   lov ForwardToLocationNoRef with ReferenceInventoryLocation17Selector {
      size = Small;
   }
   field Destination;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
      editable = [false];
   }
   lov SsccRef with ReferenceHandlingUnitLovSelector;
   lov AltHandlingUnitLabelIdRef with ReferenceHandlingUnitLovSelector;
   field FromLocationGroup;
   field FromWarehouse {
      label = "From Warehouse ID";
   }
   field FromBay {
      size = Small;
   }
   field FromRow {
      size = Small;
   }
   field FromTier {
      size = Small;
   }
   field FromBin {
      size = Small;
   }
   field ToWarehouse {
      label = "To Warehouse ID";
   }
   field ToBay {
      size = Small;
   }
   field ToRow {
      size = Small;
   }
   field ToTier {
      size = Small;
   }
   field ToBin {
      size = Small;
   }
   field CreateDate {
      label = "Date Created";
   }
   lov HandlingUnitCategoryRef with ReferenceHandlingUnitCategorySelector {
      label = "Handling Unit Category";
      description = HandlingUnitCategoryRef.Description;
   }
   field SecondLevelHandlingUnitIdRef.Sscc {
      label = "Level 2 SSCC";
   }
   field SecondLevelHandlingUnitIdRef.AltHandlingUnitLabelId {
      label = "Level 2 Alt Handling Unit Label ID";
   }
   field TopParentHandlingUnitId {
      size = Small;
   }
   lov TopParentHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Top Parent Handling Unit Type";
      description = TopParentHandlingUnitTypeIdRef.Description;
   }
   field TopParentAltHandlingUnitLabelId {
      size = Small;
   }
   field TopParentSscc;
   field StructureLevel {
      size = Small;
   }
   field Composition {
      size = Small;
   }
   field Width {
      size = Small;
   }
   field Height {
      size = Small;
   }
   field Depth {
      size = Small;
   }
   field UomForLengthRef {
      size = Small;
      label = "Length UoM";
   }
   field OperativeGrossWeight {
      size = Small;
   }
   field UomForWeight {
      size = Small;
      label = "Weight UoM";
   }
   field OperativeVolume {
      size = Small;
   }
   field UomForVolume {
      size = Small;
      label = "Volume UoM";
   }
   field MaxVolumeCapacity {
      size = Small;
   }
   field MaxWeightCapacity {
      size = Small;
   }
   badge TransportTaskStatus {
      label = "Transport Task Status";
      style = TextOnly;
      size = Small;
      emphasis Progress1 = [TransportTaskStatus = "Created"];
      emphasis Progress7 = [TransportTaskStatus = "Picked"];
      emphasis Progress10 = [TransportTaskStatus = "Executed"];
   }
   field StackableDb {
      size = Small;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part";
      description = InventoryPartRef.DescriptionInUse;
   }
   field ConfigurationId {
      columnvisible = [false];
   }
   field SerialNo {
      columnvisible = [false];
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.Description;
   }
   field LotBatchNo {
      size = Small;

   }
   field EngChgLevel {
      size = Small;

   }
   field WaivDevRejNo {
      size = Small;

   }
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Availability Control";
      description = AvailabilityControlDesc;
   }
   field PartOwnership;
   field Owner {
      size = Small;
   }
   field OwnerName;
   field ActivitySeq;
   fieldset ProjectDetailsFieldSet;

   field ParentTransportTaskId {
      columnvisible = [false];
   }
   field ParentFixedDb {
      columnvisible = [false];
   }
}

list TransportTaskLineList for TransportTaskLine {
   orderby = LineNo;
   field TransportTaskId;
   field LineNo {
      size = Small;
   }
   lov ExtHandlingUnitIdRef with ReferenceHandlingUnitExtendedSelector;
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part No";
      description = InventoryPartRef.DescriptionInUse;
   }
   field ConfigurationId {
      size = Small;
   }
   badge TransportTaskStatus {
      label = "Transport Task Status";
      size = Small;
      style = TextOnly;
      emphasis StateCreated = [TransportTaskStatus = "Created"];
      emphasis StateExecuted = [TransportTaskStatus = "Executed"];
      emphasis StatePicked = [TransportTaskStatus = "Picked"];
   }
   field ToContract {
      size = Small;
   }
   field ToLocationNo {
      size = Small;
   }
   field ForwardToLocationNo {
      size = Small;
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
   }
   field ExtHandlingUnitIdRef.Sscc {
      label = "SSCC";
   }
   field ExtHandlingUnitIdRef.AltHandlingUnitLabelId {
      label = "Alt Handling Unit Label ID";
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.Description;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field Quantity {
      size = Small;
   }
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "UoM";
   }
   field CatchQuantity {
      size = Small;
   }
   field CatchUoM {
      size = Small;
   }
   field CatchQuantityRequired {
      size = Small;
   }
   field OrderType {
      size = Small;
   }
   field OrderRef1 {
      size = Small;
   }
   field OrderRef2 {
      size = Small;
   }
   field OrderRef3 {
      size = Small;
   }
   field OrderRef4 {
      size = Small;
   }
   field Destination;
   field ToWarehouse {
      size = Small;
   }
   field ToBay {
      size = Small;
   }
   field ToRow {
      size = Small;
   }
   field ToTier {
      size = Small;
   }
   field ToBin {
      size = Small;
   }
   fieldset ProjectDetailsFieldSet;
   field ActivitySeq {
      size = Small;

   }
   field PartOwnership {
      label = "Ownership";
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   field WarehouseTaskStarted {
      size = Small;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity HandlUnitStockSnapshot {
   crud = Update;
   from = "TRANSPORT_TASK_HANDLING_UNIT";
   exec = "TRANSP_TASK_HANDL_UNIT_OVW_API";

   keys = TransportTaskId, HandlingUnitId;
   exclude attributes = ProcessControl, LocationNo, Contract, SourceRefTypeDb, SourceRefType, SourceRef5, SourceRef4, SourceRef3, SourceRef2, SourceRef1;

   attribute TransportTaskId Number {
      fetch = "TRANSPORT_TASK_ID";
      label = "Transport Task ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute HandlingUnitId Number {
      fetch = "HANDLING_UNIT_ID";
      label = "Handling Unit ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute FromContract Text {
      fetch = "FROM_CONTRACT";
      label = "From Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute FromLocationNo Text {
      fetch = "FROM_LOCATION_NO";
      label = "From Location No";
      maxlength = 35;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ToContract Text {
      fetch = "TO_CONTRACT";
      label = "To Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ToLocationNo Text {
      fetch = "TO_LOCATION_NO";
      label = "To Location No";
      maxlength = 35;
      required = [true];
      format = uppercase;
   }
   attribute ForwardToLocationNo Text {
      fetch = "FORWARD_TO_LOCATION_NO";
      label = "Forward To Location No";
      maxlength = 35;
      format = uppercase;
   }
   attribute Destination Enumeration(InventoryPartDestination) {
      fetch = "DESTINATION_DB";
      label = "Destination";
      required = [true];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "HANDLING_UNIT_TYPE_ID";
      label = "Handling Unit Type ID";
      maxlength = 25;
      required = [false];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Sscc Text {
      fetch = "SSCC";
      label = "SSCC";
      maxlength = 18;
      editable = [ETag = null];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "ALT_HANDLING_UNIT_LABEL_ID";
      label = "Alt Handling Unit Label ID";
      maxlength = 25;
      editable = [ETag = null];
   }
   attribute FromLocationGroup Text {
      fetch = "INVENTORY_LOCATION_API.Get_Location_Group(FROM_CONTRACT, FROM_LOCATION_NO)";
      label = "From Location Group";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromWarehouse Text {
      fetch = "INVENTORY_LOCATION_API.Get_Warehouse(FROM_CONTRACT, FROM_LOCATION_NO)";
      label = "From Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromBay Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bay_No(FROM_CONTRACT, FROM_LOCATION_NO)";
      label = "From Bay ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromRow Text {
      fetch = "INVENTORY_LOCATION_API.Get_Row_No(FROM_CONTRACT, FROM_LOCATION_NO)";
      label = "From Row ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromTier Text {
      fetch = "INVENTORY_LOCATION_API.Get_Tier_No(FROM_CONTRACT, FROM_LOCATION_NO)";
      label = "From Tier ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromBin Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bin_No(FROM_CONTRACT, FROM_LOCATION_NO)";
      label = "From Bin ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToWarehouse Text {
      fetch = "INVENTORY_LOCATION_API.Get_Warehouse(TO_CONTRACT,TO_LOCATION_NO)";
      label = "To Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToBay Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bay_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Bay ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToRow Text {
      fetch = "INVENTORY_LOCATION_API.Get_Row_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Row ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToTier Text {
      fetch = "INVENTORY_LOCATION_API.Get_Tier_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Tier ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToBin Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bin_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Bin ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute CreateDate Date {
      fetch = "CREATE_DATE";
      label = "Create Date";
      editable = [false];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(HANDLING_UNIT_TYPE_ID)";
   }
   attribute ParentHandlingUnitId Number {
      fetch = "PARENT_HANDLING_UNIT_ID";
      label = "Parent Handling Unit ID";
   }
   attribute SecondLevelParentHuId Number {
      fetch = "SECOND_LEVEL_PARENT_HU_ID";
      label = "Level 2 Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "TOP_PARENT_HANDLING_UNIT_ID";
      label = "Top Parent Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute StructureLevel Number {
      fetch = "STRUCTURE_LEVEL";
      label = "Structure Level";
      maxlength = 100;
      editable = [false];
   }
   attribute Composition Text {
      fetch = "Handling_Unit_API.Get_Composition(HANDLING_UNIT_ID)";
      label = "Composition";
      maxlength = 2000;
      editable = [false];
   }
   attribute Width Number {
      fetch = "WIDTH";
      label = "Width";
      maxlength = 100;
   }
   attribute Height Number {
      fetch = "HEIGHT";
      label = "Height";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute Depth Number {
      fetch = "DEPTH";
      label = "Depth";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute UomForLength Text {
      fetch = "UOM_FOR_LENGTH";
      label = "Uom For Length";
      maxlength = 30;
      editable = [false];
   }
   attribute OperativeGrossWeight Number {
      fetch = "OPERATIVE_GROSS_WEIGHT";
      label = "Operative Gross Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "UOM_FOR_WEIGHT";
      label = "Uom For Weight";
      maxlength = 30;
      editable = [false];
   }
   attribute OperativeVolume Number {
      fetch = "OPERATIVE_VOLUME";
      label = "Operative Volume";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "UOM_FOR_VOLUME";
      label = "Uom For Volume";
      maxlength = 30;
      editable = [false];
   }
   attribute MaxVolumeCapacity Number {
      fetch = "MAX_VOLUME_CAPACITY";
      label = "Max Volume Capacity";
      maxlength = 100;
      editable = [false];
   }
   attribute MaxWeightCapacity Number {
      fetch = "MAX_WEIGHT_CAPACITY";
      label = "Max Weight Capacity";
      maxlength = 100;
      editable = [false];
   }
   attribute TransportTaskStatus Enumeration(TransportTaskStatus) {
      fetch = "TRANSPORT_TASK_STATUS_DB";
      label = "Transport Task Status";
      editable = [false];
   }
   attribute TransportTaskStatusDb Text {
      fetch = "TRANSPORT_TASK_STATUS_DB";
      label = "Transport Task Status";
      editable = [false];
   }
   attribute StackableDb Boolean("TRUE", "FALSE") {
      fetch = "STACKABLE_DB";
      label = "Stackable";
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "LOT_BATCH_NO";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "ENG_CHG_LEVEL";
      label = "Revision No";
      maxlength = 6;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "WAIV_DEV_REJ_NO";
      label = "W/D/R";
      maxlength = 15;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "AVAILABILITY_CONTROL_ID";
      label = "Availability Control ID";
      maxlength = 25;
      editable = [false];
   }
   attribute AvailabilityControlDesc Text {
      fetch = "AVAILABILITY_CONTROL_DESC";
      label = "Availability Control Description";
      maxlength = 50;
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "PART_OWNERSHIP";
      label = "Part Ownership";
   }
   attribute OutermostDb Text {
      fetch = "OUTERMOST_DB";
      label = "Outermost DB";
      maxlength = 5;
      editable = [false];
   }
   attribute Owner Text {
      fetch = "OWNER";
      label = "Owner";
      maxlength = 20;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "OWNER_NAME";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "ACTIVITY_SEQ";
      label = "Activity Seq";
      maxlength = 100;
      editable = [false];
   }
   attribute ProgramId Text {
      fetch = "PROGRAM_ID";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      fetch = "PROJECT_ID";
      label = "Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "SUB_PROJECT_ID";
      label = "Sub Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivityNo Text {
      fetch = "ACTIVITY_NO";
      label = "Activity ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ParentTransportTaskId Number {
      fetch = "''";
   }
   attribute ParentFixedDb Text {
      fetch = "''";
   }
   attribute CreatedLinesExist Boolean {
      fetch = "Transport_Task_Handl_Unit_API.Line_With_Status_Exist(TRANSPORT_TASK_ID, HANDLING_UNIT_ID, FROM_CONTRACT, FROM_LOCATION_NO, 'CREATED')";
   }
   attribute PickedLinesExist Boolean {
      fetch = "Transport_Task_Handl_Unit_API.Line_With_Status_Exist(TRANSPORT_TASK_ID, HANDLING_UNIT_ID, FROM_CONTRACT, FROM_LOCATION_NO, 'PICKED')";
   }
   array HandlingUnintsOnTransportTaskArray() to TransportTaskLine() {
      where = " (:parent.TransportTaskId = :child.TransportTaskId AND
                 :child.TransportTaskStatusDb IN ('CREATED', 'PICKED') AND
                (:child.HandlingUnitId IN (SELECT HU.HANDLING_UNIT_ID
                                           FROM HANDLING_UNIT HU
                                           CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                           START WITH HU.HANDLING_UNIT_ID IN (:parent.HandlingUnitId))))";
   }
   reference TransportTaskIdRef(TransportTaskId) to TransportTask(TransportTaskId) {
      label = "Transport Task ID";
   }
   reference HandlingUnitIdRef(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStockLov9(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
      label = "Handling Unit ID";
      where = "HANDLING_UNIT_ID > 0";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference FromContractRef(FromContract) to UserAllowedSiteLov(Contract) {
      label = "From Site";
   }
   reference FromLocationNoRef(FromContract, FromLocationNo) to InventoryLocation17(Contract, LocationNo) {
      label = "From Location No";
   }
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Site";
   }
   reference ToLocationNoRef(ToContract, ToLocationNo) to InventoryLocation17(Contract, LocationNo) {
      label = "To Location No";
   }
   reference ForwardToLocationNoRef(ToContract, ForwardToLocationNo) to InventoryLocation17(Contract, LocationNo) {
      label = "Forward To Location No";
   }
   reference SsccRef(HandlingUnitId, Sscc) to HandlingUnitLov(HandlingUnitId, Sscc);
   reference AltHandlingUnitLabelIdRef(HandlingUnitId, AltHandlingUnitLabelId) to HandlingUnitLov(HandlingUnitId, AltHandlingUnitLabelId);
   reference HandlingUnitCategoryRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
   reference SecondLevelHandlingUnitIdRef(SecondLevelParentHuId) to HandlingUnit(HandlingUnitId);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference UomForLengthRef(UomForLength) to IsoUnit(UnitCode) {
      label = "Uom For Length";
   }
   reference InventoryPartRef(FromContract, PartNo) to InventoryPart(Contract, PartNo);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
}

@Override
entity TransportTaskLine {
   crud = Read;
   attribute TransportTaskId Number {
      maxlength = 100;
   }
   attribute LineNo Number {
      maxlength = 100;
   }
   attribute HandlingUnitId Number {
      maxlength = 100;
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute ConfigurationId Text {
      editable = [false];
      format = uppercase;
   }
   attribute TransportTaskStatus Enumeration(TransportTaskStatus) {
      editable = [false];
   }
   attribute TransportTaskStatusDb Text {
      fetch = "TRANSPORT_TASK_STATUS_DB";
      label = "Transport Task Status";
      editable = [false];
   }
   attribute ToContract Text {
      label = "To Site";
      editable = [ETag = null];
   }
   attribute ToLocationNo Text {
      editable = [ETag = null];
   }
   attribute ForwardToLocationNo Text {
      editable = [ETag = null];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R";
   }
   attribute Quantity Number {
      maxlength = 100;
      editable = [false];
   }
   attribute CatchQuantity Number {
      maxlength = 100;
      editable = [false];
   }
   attribute CatchUoM Text {
      fetch = "Transport_Task_Line_API.Get_Catch_Unit_Meas(TRANSPORT_TASK_ID, LINE_NO)";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchQuantityRequired Number {
      fetch = "Transport_Task_Line_API.Catch_Quantity_Required(TRANSPORT_TASK_ID, LINE_NO)";
      label = "Catch Quantity Required";
      editable = [false];
   }
   attribute OrderRef4 Number {
      maxlength = 100;
   }
   attribute ToWarehouse Text {
      fetch = "INVENTORY_LOCATION_API.Get_Warehouse(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToBay Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bay_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Bay";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToRow Text {
      fetch = "INVENTORY_LOCATION_API.Get_Row_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Row";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToTier Text {
      fetch = "INVENTORY_LOCATION_API.Get_Tier_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Tier";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToBin Text {
      fetch = "INVENTORY_LOCATION_API.Get_Bin_No(TO_CONTRACT, TO_LOCATION_NO)";
      label = "To Bin";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      maxlength = 100;
   }
   attribute PartOwnership Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Part_Ownership(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
   }
   attribute Owner Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner";
      maxlength = 2000;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute WarehouseTaskStarted Boolean("TRUE", "FALSE") {
      fetch = "Transport_Task_Manager_API.Warehouse_Task_Is_Started_Db(TRANSPORT_TASK_ID)";
      label = "Warehouse Task Started";
      editable = [false];
   }
   attribute FromContract Text {
      label = "From Site";
   }
   reference ExtHandlingUnitIdRef(HandlingUnitId) to HandlingUnitExtended(HandlingUnitId);
   reference InventoryPartRef(FromContract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
}
