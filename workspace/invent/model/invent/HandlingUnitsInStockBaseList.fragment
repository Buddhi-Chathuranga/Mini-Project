----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-10-21  ErRalk  SC21R2-5226, Modified the enable condition in MoveHuWithShipmentOrder to differnt types of Site and Remotewarehouse enable conditions.
-- 2021-10-05  Diablk  SC21R2-901, Added new command Move with shipment Order.
-- 2021-10-01  PamPlk  SC21R2-901, Added RemoteWarehouse attribute to HandlingUnitsInStockBaseList.
-- 2020-10-20  ErRalk  SC2020R1-10777, Added ObjId attribute to ReceiptInvLocationForHu.
-- 2020-10-19  PAMMLK  MF2020R1-7524, Moved the function calls ChangeOwnershipBetweenCustomer and ChangeOwnershipToCompany to TransferOwnershipToCompanyHU and TransferOwnershipToCustomerHU
-- 2020-10-19          to keep the dialog remain open once the error message closed.
-- 2020-05-21  Aabalk  SC2020R1-1686, Added WarehouseId parameter to MoveHandlingUnitDialog.
-- 2020-05-06  PAMMLK  MF2020R1-940, Introoduce a new fragment TransferOwnershipToCompanyHU and modified the TransOwnershipToCompanyCommand to excute TransferOwnershipToCompanyHUDialog
-- 2020-05-06                        added a variable OwnershipTransferReasonId and pass it as attributue to ChangeOwnershipToCompany.
-- 2020-05-04  PAMMLK  MF2020R1-939, Added a variable OwnershipTransferReasonId to TransOwnershipBetweenCustomersCommand and pass it as attributue to ChangeOwnershipBetweenCustomer.
-- 2019-08-19  JaThlk  SCUXXW4-23774, Replaced ACTIVITY_SEQ with ACTIVITY_SEQUENCE in HandlingUnitInStock entity to avoid server errors.
-- 2019-06-28  ChFolk  SCUXXW4-16712, Added two commands to handle unattached parts based on the connected source.
-- 2019-05-27  ChFolk  SCUXXW4-21153, Modifed UnattchPartsFromHandlingUnitCommand and UnattachPartsForHuFromPartInStockCommand to have ObjIdListVar and HandlingUnitIdListVar
-- 2019-05-27          as a parameters to UnattachPartsFromHandlingUnitAssistant instead of the where clause. Removed functions GenerateUnattachPartsFromHuWhereClause and
-- 2019-05-27          GenerateUnattachPartInStockWhereClause and added function GetConnectedObjids.
-- 2019-05-06  DaZase  SCUXXW4-19633, Added initialcheck to all unbounded actions.
-- 2019-04-26  fandse  SCUXXW4-18710, Added ludependencies for some commands to refresh tables e.g. transfer from/to project, change w/d/r, change expiration etc.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2019-02-25  fandse  SCUXXW4-16155, Re-grouping and re-naming commands, fixed dynamic dependencies, etc
-- 2019-02-13  fandse  SCUXXW4-16155, Perform Putaway should not be enabled when location is null.
-- 2019-02-13  fandse  SCUXXW4-6101, Removed ID from Change Parent Handling Unit, reverted previous correction of SCUXXW4-15435
-- 2019-02-11  fandse  UXXPERF-27, Performance improvments.
-- 2019-01-11  SuDelk  SCUXXW4-15435, Removed Site Column from Inventory Part In Stock child List.
-- 2019-01-03  ChFolk  SCUXXW4-3891, Added SourceRef field into ReceiptInvLocationForHuBaseList.
-- 2018-12-24  KoDelk  SCUXXW4-14359, Included ControlPlanPartRevLovSelector, ChangeWaivDevRejNoHUDialog, ChangePartAvailabilityControlHUDialog, ChangeParentHandlingUnitIdDialog fragmnets
-- 2018-12-14  fandse  SCUXXW4-7102  Moved GetCodepartsSettings into PrePostingWithoutSourceAssitant.fragment
-- 2018-12-07  ChFolk  SCUXXW4-6121, Added UnattachPartsForHuFromPartInStockCommand to the bottom list.
-- 2018-12-06  FANDSE  SCUXXW4-7655, Initial Aurena implmentation of dlgGivenValue as PrePostingWithoutSourceAssistant.
-- 2018-12-05  ChFolk  SCUXXW4-6121 Created.
----------------------------------------------------------------------------------------------------------
fragment HandlingUnitsInStockBaseList;
component INVENT;
layer Core;
description "This fragment contains the entity and list details of handlinh Units In Stock";

include fragment ScrapHandlingUnitDialog;
include fragment MoveHandlingUnitDialog;
include fragment MoveHuWithTransportTask;
include fragment UnattachPartsFromHandlingUnitAssistant;
include fragment ChangePartAvailabilityControlHUDialog;
include fragment ChangeWaivDevRejNoHUDialog;
include fragment ChangeExpirationDateHUDialog;
include fragment ChangeParentHandlingUnitIdDialog;
include fragment TransferOwnershipToCustomerHU;
include fragment TransferOwnershipToCompanyHU;
include fragment TransferHandlingUnitInStockToProjectInventoryDialog;
include fragment TransferHandlingUnitInStockToStandardInventoryDialog;
include fragment PackHuInStockAccordingToPackingInstructionAssistant;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation19Selector;
@DynamicComponentDependency MFGSTD
include fragment ControlPlanPartRevLovSelector;
include fragment HandlingUnitExtendedInitialCheck;
include fragment ProjectDetailsFieldSet;
@DynamicComponentDependency SHIPOD
include fragment MoveHuWithShipmentOrderDialog;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------

command ScrapCommand {
   label = "Scrap";
   mode = SelectedRecords;
   enabled = [IsInStock and(LocationTypeDb != "SHIPMENT" and LocationTypeDb != "QA" and LocationTypeDb != "ARRIVAL")];

   variable PrintServiceabilityTagStr {
      type = Text;
   }
   variable SourceStr {
      type = Text;
   }
   variable ScrapCode;
   variable ScrapNote;
   bulkexecute {
      dialog ScrapHUDialog(SourceStr) into(ScrapCode, ScrapNote, PrintServiceabilityTag) {
         when OK {
            if [PrintServiceabilityTag] {
               set PrintServiceabilityTagStr = "TRUE";
            }
            else {
               set PrintServiceabilityTagStr = "FALSE";
            }
            bulkcall ScrapHu(HandlingUnitId,
            ScrapCode,
            ScrapNote,
            PrintServiceabilityTagStr);
         }
         when CANCEL {
            exit;
         }
      }

   }
}

command PerformPutaway {
   label = "Perform Putaway";
   mode = SelectedRecords;
   enabled = [LocationNo != null and LocationTypeDb != "SHIPMENT" and(TransportTaskId = null or(TransportTaskId != null and SnapshotExistsForHu = "FALSE"))];
   bulkexecute {
      call PerformPutaway(Selection);
   }
}

command TransportTaskCommand {
   label = "Transport Task";
   mode = SelectedRecords;
   enabled = [TransportTaskId != NULL];
   bulkexecute {
      bulknavigate "page/TransportTaskLines/List?searchcontext=TransportTaskIdList:${TransportTaskId}";
   }
}

command MoveHandlingUnitCommand {
   label = "Move";
   mode = SelectedRecords;
   enabled = [IsInStock and LocationTypeDb != "SHIPMENT"];
   variable HandlingUnitIdList {
      type = Text;
   }
   variable ContractVar {
      type = Text;
   }
   variable LocationTypeDbVar {
      type = Text;
   }
   bulkexecute {
      call GetSelectedHandlingUnits(Selection) into HandlingUnitIdList;
      call GetSelectedContract(Selection) into ContractVar;
      call GetSelectedLocationTypeDb(Selection) into LocationTypeDbVar;
      dialog MoveHandlingUnitDialog(HandlingUnitIdList, ContractVar, LocationTypeDbVar, "MOVE", WarehouseId) {
         when OK {
            exit OK;
         }
      }
   }
}

command MoveHuWithTransportTaskCommand {
   label = "Move with Transport Task";
   mode = SelectedRecords;
   enabled = [IsInStock and LocationType != "Shipment"];
   variable InputContractStr {
      type = Text;
   }
   variable ContractStr {
      type = Text;
   }
   variable LocationNoStr {
      type = Text;
   }
   variable DestinationStr {
      type = Text;
   }
   bulkexecute {
      call GetSelectedContract(Selection) into InputContractStr;
      dialog MoveHuWithTransportTaskDialog(InputContractStr) into(ContractStr, LocationNoStr, DestinationStr) {
         when OK {
            call MoveWithTransportTask(Selection, ContractStr, LocationNoStr, DestinationStr);
            exit;
         }
      }
   }
}

command UnattchPartsFromHuFromPartsInStockCommand {
   label = "Unattach Parts";
   mode = SelectedRecords;
   enabled = [IsInStock and(LocationTypeDb != "SHIPMENT" and LocationTypeDb != "QA" and LocationTypeDb != "ARRIVAL")];
   variable HandlingUnitIdListVar {
      type = Text;
   }
   bulkexecute {
      ifany [QtyOnhand = 0 and QtyInTransit > 0] {
         alert("One or more rows were removed due to only having quantity in transit.");
      }
      set ConnectedSorceVar = "INVENT";
      call GetSelectedHandlingUnits(Selection) into HandlingUnitIdListVar;
      assistant UnattachPartsFromHandlingUnitAssistant(ConnectedSorceVar, null, HandlingUnitIdListVar, null) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command UnattchPartsFromHuFromReceiptInvLocCommand {
   label = "Unattach Parts";
   mode = SelectedRecords;
   enabled = [IsInStock and(LocationTypeDb = "SHIPMENT" or LocationTypeDb = "QA" or LocationTypeDb = "ARRIVAL")];
   variable HandlingUnitIdListVar {
      type = Text;
   }
   bulkexecute {
      ifany [QtyOnhand = 0 and QtyInTransit > 0] {
         alert("One or more rows were removed due to only having quantity in transit.");
      }
      set ConnectedSorceVar = "RECEIPT";
      call GetSelectedHandlingUnits(Selection) into HandlingUnitIdListVar;
      assistant UnattachPartsFromHandlingUnitAssistant(ConnectedSorceVar, null, HandlingUnitIdListVar, null) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command ChangePartAvailabilityControlHU {
   label = "Change Part Availability Control";
   mode = SelectedRecords;
   enabled = [IsInStock and LocationType != "Shipment"];
   variable ToAvailabilityControlId;
   bulkexecute {
      dialog ChangePartAvailabilityControlHUDialog into(ToAvailabilityControlId) {
         when OK {
            call ChangePartAvailabilityControlHu(Selection, ToAvailabilityControlId);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command ChangeWaivDevRejNoCommand {
   label = "Change W/D/R";
   mode = SelectedRecords;
   enabled = [IsInStock and LocationType != "Shipment"];
   variable ToWaivDevRejNo;
   bulkexecute {
      dialog ChangeWaivDevRejDialog into(ToWaivDevRejNo) {
         when OK {
            call ChangeWaivDevRejNo(Selection, ToWaivDevRejNo, SourceRef1, SourceRefType);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command ReceiveFromTransitCommand {
   label = "Receive from Transit";
   mode = SelectedRecords;
   enabled = [IsInInventoryTransit];
   bulkexecute {
      call ReceiveFromInventoryTransit(Selection);
   }
}

command ChangeExpirationDateCommand {
   label = "Change Expiration Date";
   mode = SelectedRecords;
   enabled = [IsInStock and LocationType != "Shipment"];
   variable ToExpirationDate;
   bulkexecute {
      dialog ChangeExpirationDateDialog into(ToExpirationDate) {
         when OK {
            call UpdateExpirationDate(Selection, ToExpirationDate);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command ChangeParentHandlingUnitCommand {
   label = "Change Parent Handling Unit";
   mode = SelectedRecords;
   enabled = [count(Contract) = 1 and count(LocationNo) = 1 and ShipmentId = null or(ShipmentId != null and CanModifyHuStructOnShip = "TRUE")];
   bulkexecute {
      dialog ChangeParentHandlingUnitDialog(Selection) {
         when CANCEL {
            exit;
         }
      }
   }
}

command TransOwnershipBetweenCustomersCommand {
   label = "Transfer Ownership Between Customers";
   mode = SelectedRecords;
   enabled = [PartOwnershipDb = "CUSTOMER OWNED"];
   variable ToCustomerStr {
      type = Text;
   }
   variable OwnershipTransferReasonId {
      type = Text;
   }
   bulkexecute {
      dialog TransferOwnershipToCustomerHUDialog(Selection) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command TransOwnershipToCompanyCommand {
   label = "Transfer Ownership to Company";
   mode = SelectedRecords;
   enabled = [PartOwnershipDb = "CUSTOMER OWNED" or PartOwnershipDb = "SUPPLIER LOANED"];
   bulkexecute {
      dialog TransferOwnershipToCompanyHUDialog(Selection) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

@DynamicComponentDependency PROJ
command TransferHandlingUnitToProjectInventoryCommand {
   label = "Transfer to Project Inventory";
   mode = SelectedRecords;

   enabled = [ShipmentId = null and(TotalAvaialableQty > 0) and LocationTypeDb != "QA" and LocationTypeDb != "ARRIVAL"];
   variable SelectedHandlingUnitsVar {
      type = Text;
   }
   variable ContractsVar {
      type = Text;
   }
   variable CompanyVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "${Contract}") into ContractsVar;
      call ValidateCompany(ContractsVar) into CompanyVar;

      if [CompanyVar != null] {
         call GetSelectedHandlingUnits(Selection) into SelectedHandlingUnitsVar;
         if [SelectedHandlingUnitsVar != null] {
            dialog TransferHandlingUnitInStockToProjectInventoryDialog(SelectedHandlingUnitsVar, CompanyVar) {
               when OK {
                  exit;
               }
               when CANCEL {
                  exit;
               }
            }
         }
      }
   }
}

@DynamicComponentDependency PROJ
command TransferHandlingUnitToStandardInventoryCommand {
   label = "Transfer to Standard Inventory";
   mode = SelectedRecords;
   enabled = [ShipmentId = null and count(*, ActivitySequence != 0) > 0 and(TotalAvaialableQty > 0)];
   variable SelectedHandlingUnitsVar {
      type = Text;
   }
   bulkexecute {
      call GetSelectedHandlingUnits(Selection) into SelectedHandlingUnitsVar;
      if [SelectedHandlingUnitsVar != null] {
         dialog TransferHandlingUnitInStockToStandardInventoryDialog(SelectedHandlingUnitsVar) {
            when OK {
               exit;
            }
            when CANCEL {
               exit;
            }
         }
      }
   }
}

command CreateSsccCommand {
   label = "Generate SSCC";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      call CreateSscc(Selection);
   }
}

command PrintHandlingUnitLabelCommand {
   label = "Print Handling Unit Label";
   mode = SelectedRecords;
   enabled = [true];
   variable ReportResulyKeyList {
      type = Text;
   }
   bulkexecute {
      call GetHandlingUnitLabelResultKey(Selection) into ReportResulyKeyList;
      if [ReportResulyKeyList != null] {
         printdialog ReportResulyKeyList;
      }
   }
}

command PrintHandlingUnitContentLabelCommand {
   label = "Print Handling Unit Content Label";
   mode = SelectedRecords;
   enabled = [true];
   variable ReportResulyKeyList {
      type = Text;
   }
   bulkexecute {
      call GetHandlingUnitLabelContentResultKey(Selection) into ReportResulyKeyList;
      if [ReportResulyKeyList != null] {
         printdialog ReportResulyKeyList;
      }
   }
}

command PackHandlingUnitsAccordingToPackingInstructionCommand {
   label = "Pack According to Packing Instruction";
   mode = SelectedRecords;
   enabled = [IsInStock and ParentHandlingUnitId = null];
   variable SelectedHandlingUnitsVar {
      type = Text;
   }
   bulkexecute {
      call ValidateDifferentLocations(Selection);
      call GetSelectedHandlingUnits(Selection) into SelectedHandlingUnitsVar;
      assistant PackHuInStockAccordingToPackingInstructionAssistant(SelectedHandlingUnitsVar, null) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

@DynamicComponentDependency SHIPOD
command MoveHuWithShipmentOrder {
   label = "Move with Shipment Order";
   mode = SelectedRecords;
   enabled = [(LocationTypeDb = "PICKING") and IsInStock and not HasStockReservationDb and(count(Contract) = 1) and(not((count(*, RemoteWarehouse = true) >= 1) and count(*, RemoteWarehouse = false) >= 1) and not(count(*, RemoteWarehouse = true) > 1 and count(WarehouseId) > 1))];
   bulkexecute {
      dialog MoveWithShipmentOrderDialog(Selection) {
         when OK {
            exit;
         }
      }
   }
}

------------------------- commands in bottom tab ----------------------------
command UnattachPartsForHuFromPartInStockCommand {
   label = "Unattach Part";
   mode = SelectedRecords;
   enabled = [QtyOnhand > 0 and LocationTypeDb != "SHIPMENT" and LocationTypeDb != "QA" and LocationTypeDb != "ARRIVAL"];
   variable ObjIdListVar {
      type = Text;
   }
   variable ConnectedSorceVar {
      type = Text;
   }
   bulkexecute {
      if [QtyInTransit > 0] {
         alert("One or more rows were removed due to only having quantity in transit.");
      }
      set ConnectedSorceVar = "INVENT";
      call GetConnectedObjids(Selection) into ObjIdListVar;
      assistant UnattachPartsFromHandlingUnitAssistant(ConnectedSorceVar, ObjIdListVar, null, true) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- FIELDSET ----------------------------------


----------------------------------- LISTS -----------------------------------
list HandlingUnitsInStockBaseList for HandlingUnitInStock {
   label = "Handling Units";
   field Contract {
      columnexclude = [parent.luname = "SiteInventInfo" or parent.luname = "Warehouse" or parent.luname = "WarehouseBay" or parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayTier" or parent.luname = "WarehouseBayRow"];
   }
   field LocationNo;
   field StructureLevel {
      size = Small;
   }
   field HandlingUnitRef;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeDescription;
      editable = [false];
   }
   lov HandlingUnitCategoryIdRef with ReferenceHandlingUnitCategorySelector {
      label = "Handling Category";
      description = HandlingUnitCategoryDescription;
      editable = [false];
   }
   field Sscc;
   field AltHandlingUnitLabelId;
   field LocationType {
      size = Small;
   }
   field WarehouseId {
      size = Small;
      columnexclude = [parent.luname = "Warehouse" or parent.luname = "WarehouseBay" or parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayTier" or parent.luname = "WarehouseBayRow"];
   }
   field BayId {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBay" or parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayRow" or parent.luname = "WarehouseBayTier"];
   }
   field RowId {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayRow"];
   }
   field TierId {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayTier"];
   }
   field BinId {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBayBin"];
   }
   field ParentHandlingUnitId;
   field TopParentHandlingUnitId {
      size = Small;
   }
   field TopParentHandlingUnitTypeId {
      size = Small;
   }
   field TopParentHandlingUnitTypeDesc {
      size = Small;
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelId {
      size = Small;
   }
   field AccessoryExist {
      size = Small;
   }
   field Composition {
      size = Small;
   }
   field Width;
   field Height;
   field Depth;
   field UomForLength {
      size = Small;
   }
   field NetWeight;
   field TareWeight;
   field ManualGrossWeight;
   field OperativeGrossWeight;
   field UomForWeight {
      size = Small;
   }
   field ManualVolume;
   field OperativeVolume;
   field UomForVolume {
      size = Small;
   }
   field AdditiveVolumeDb {
      size = Small;
   }
   field GenerateSsccNoDb {
      size = Small;
   }
   field PrintLabelDb {
      size = Small;
   }
   field NoOfHandlingUnitLabels;
   field PrintContentLabelDb {
      size = Small;
   }
   field NoOfContentLabels;
   field MixOfPartNoBlockedDb {
      size = Small;
   }
   field MixOfCondCodeBlockedDb {
      size = Small;
   }
   field MixOfLotBatchBlockedDb {
      size = Small;
   }
   field MaxVolumeCapacity;
   field MaxWeightCapacity;
   field StackableDb {
      size = Small;
   }
   field IsInStock {
      size = Small;
   }
   field IsInProjectInventory {
      size = Small;
   }
   field LastCountDate;
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRefType {
      size = Small;
   }
   field ShipmentId;
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Inventory Part";
      description = InventoryPartRef.DescriptionInUse;
      editable = [false];
   }
   field ConfigurationId {
      size = Small;

   }
   field SerialNo {
      size = Small;

   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.Description;
   }
   field TotalOnhandQty;
   field LotBatchNo {
      size = Small;

   }
   field EngChgLevel {
      size = Small;

   }
   field WaivDevRejNo {
      size = Small;

   }
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Availablity Control";
      description = AvailabilityControlIdRef.Description;
   }
   field PartOwnership {
      size = Small;

   }
   field Owner {
      size = Small;

   }
   field OwnerName {
      size = Small;

   }
   field ActivitySequence;
   fieldset ProjectDetailsFieldSet;
   field SecondLevelParentHuId {
      columnvisible = [false];
   }
   field SecondLevelSscc {
      size = Small;
      columnvisible = [false];
   }
   field SecondLevelAltHandlingUnitLabelId {
      size = Small;
      columnvisible = [false];
   }
   field HasStockReservationDb {
      size = Small;
      columnvisible = [false];
   }
   field TotalReservedQty {
      columnvisible = [false];
   }
   field RemoteWarehouse {
      size = Small;
      label = "Remote";
   }
   fieldranking HandlingUnitId, Contract, LocationNo, StructureLevel, HandlingUnitTypeId, HandlingUnitCategoryID;
   commandgroup ContentStructureCommandGroup {
      commandgroup ContentStructureCommandSubGroup {
         label = "Content and Structure";
         command ChangeParentHandlingUnitCommand;
         command PackHandlingUnitsAccordingToPackingInstructionCommand;
         command UnattchPartsFromHuFromPartsInStockCommand;
         command UnattchPartsFromHuFromReceiptInvLocCommand;
      }
   }
   commandgroup LabelsCommandGroup {
      commandgroup LabelsCommandSubGroup {
         label = "Labels";
         command CreateSsccCommand;
         command PrintHandlingUnitLabelCommand;
         command PrintHandlingUnitContentLabelCommand;
      }
   }
   command IssueCommand;
   command ScrapCommand;
   commandgroup RelocationCommandGroup {
      commandgroup RelocationCommandSubGroup {
         label = "Relocation";
         command PerformPutaway;
         command MoveHandlingUnitCommand;
         command MoveHuWithTransportTaskCommand;
         command ReceiveFromTransitCommand;
         command TransportTaskCommand;
         @DynamicComponentDependency SHIPOD
         command MoveHuWithShipmentOrder;
      }
   }
   commandgroup AvailabilitCommandGroup {
      commandgroup AvailabilitCommandSubGroup {
         label = "Availability";
         command ChangePartAvailabilityControlHU;
         command ChangeWaivDevRejNoCommand;
         command ChangeExpirationDateCommand;
      }
   }
   commandgroup OwnershipCommandGroup {
      commandgroup OwnershipCmmandSubGroup {
         label = "Ownership";
         command TransOwnershipBetweenCustomersCommand;
         command TransOwnershipToCompanyCommand;
      }
   }
   @DynamicComponentDependency PROJ
   commandgroup ProjectCommandGroup {
      commandgroup ProjectCommandSubGroup {
         label = "Project";
         command TransferHandlingUnitToProjectInventoryCommand;
         command TransferHandlingUnitToStandardInventoryCommand;
      }
   }
}

list InventoryPartInStockForHuBaseList for InventoryPartInStockForHu {
   label = "Inventory Parts In Stock";

   lov HandlingUnitIdRef with ReferenceHandlingUnitSelector;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = HandlingUnitTypeDescription;
   }
   lov HandlingUnitCategoryIdRef with ReferenceHandlingUnitCategorySelector {
      description = HandlingUnitCategoryDescription;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part";
      description = InventoryPartRef.DescriptionInUse;
   }
   field ConfigurationIdRef {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.Description;
   }
   @DynamicComponentDependency MFGSTD
   lov EngChgLevelRef with ReferenceControlPlanPartRevLovSelector {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   field RotablePartPoolIdRef {
      size = Small;
   }
   field QtyOnhand;
   field CatchQtyOnhand;
   field UnifiedOnHandQty;
   field UnifiedCatchOnHandQty;
   field QtyReserved;
   field QtyAvailable;
   field QtyInTransit;
   field UnifiedReservedQty;
   field CatchQtyInTransit;
   field UnifiedQtyInTransit;
   field UnifiedCatchQtyInTransit;
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "UoM";
   }
   field CatchUom {
      size = Small;
   }
   field UnifiedUomRef {
      size = Small;
   }
   field UnifiedCatchUomRef {
      size = Small;
   }
   field FreezeFlag {
      size = Small;
   }
   field LastActivityDate;
   field LastCountDate;
   field ReceiptDate;
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Availablity Control";
      description = AvailabilityControlIdRef.Description;
   }
   field AvgUnitTransitCost;
   field CountVariance;
   field ExpirationDate;
   field TotalInventoryValue;
   field PartOwnership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field PartAcquisitionValue;
   @DynamicComponentDependency ORDER
   field TotalAcquisitionValue;
   fieldset ProjectDetailsFieldSet;
   field ContractRef {
      size = Small;
   }
   field LocationType {
      size = Small;
   }
   field LocationTypeDb {
      size = Small;
      columnvisible = [false];
   }
   lov LocationNoRef with ReferenceInventoryLocation19Selector {
      size = Small;
   }
   fieldranking HandlingUnitIdRef, InventoryPartRef, ConfigurationIdRef, LotBatchNo, SerialNo, EngChgLevelRef, WaivDevRejNo, QtyOnhand, QtyReserved, QtyInTransit;
   command UnattachPartsForHuFromPartInStockCommand;
}
@DynamicComponentDependency RCEIPT
list ReceiptInvLocationForHuBaseList for ReceiptInvLocationForHu {
   label = "Receipt Inventory Locations";

   lov HandlingUnitIdRef with ReferenceHandlingUnitSelector;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = HandlingUnitTypeDescription;
   }
   lov HandlingUnitCategoryIdRef with ReferenceHandlingUnitCategorySelector {
      description = HandlingUnitCategoryDescription;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      description = InventoryPartRef.DescriptionInUse;
   }
   field ConfigurationIdRef {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.Description;
     // description = ConditionCodeDescription;
   }
   @DynamicComponentDependency MFGSTD
   lov EngChgLevelRef with ReferenceControlPlanPartRevLovSelector {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   field RotablePartPoolIdRef;
   field QtyOnhand;
   field CatchQtyOnhand;
   field UnifiedOnHandQty;
   field UnifiedCatchOnHandQty;
   field QtyReserved;
   field QtyAvailable;
   field QtyInTransit;
   field UnifiedReservedQty;
   field CatchQtyInTransit;
   field UnifiedQtyInTransit;
   field UnifiedCatchQtyInTransit;
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "UoM";
   }
   field CatchUom {
      size = Small;
   }
   field UnifiedUomRef {
      size = Small;
   }
   field UnifiedCatchUomRef {
      size = Small;
   }
   field FreezeFlag;
   field LastActivityDate;
   field LastCountDate;
   field ReceiptDate;
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Availablity Control";
      description = AvailabilityControlIdRef.Description;
   }
   field AvgUnitTransitCost;
   field CountVariance;
   field ExpirationDate;
   field TotalInventoryValue;
   field PartOwnership;
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field PartAcquisitionValue;
   @DynamicComponentDependency ORDER
   field TotalAcquisitionValue;
   fieldset ProjectDetailsFieldSet;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field LocationType {
      size = Small;
   }
   lov LocationNoRef with ReferenceInventoryLocation19Selector {
      size = Small;
   }
   field SourceRef1;
   field SourceRef2;
   field SourceRef3;
   field ReceiptNo;
   field SourceRefType;
   command UnattachPartsForHuFromReceiptInvLocCommand;
   //fieldranking HandlingUnitIdRef, InventoryPartRef, ConfigurationIdRef, LotBatchNo, SerialNo, EngChgLevelRef, WaivDevRejNo, QtyOnhand, QtyReserved, QtyInTransit;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset HandlingUnitInStockSet for HandlingUnitInStock;
entityset HandlingUnitInReceiptSet for HandlingUnitInStock;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity HandlingUnitInStock using HandlingUnit {
   crud = Read, Update;
   from = "handling_unit_extended";
   exec = "HANDLING_UNIT_API";
   ludependencies = InventoryPartInStock, ReceiptInvLocation;
   keys = HandlingUnitId {
      where = "HANDLING_UNIT_ID = :HandlingUnitId";
   }
   attribute Contract Text {
      maxlength = 100;
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute StructureLevel Number {
      fetch = "STRUCTURE_LEVEL";
      label = "Structure Level";
      editable = [false];
   }
   attribute HandlingUnitId Number {
      required = [true];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "HANDLING_UNIT_TYPE_ID";
      editable = [false];
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "HANDLING_UNIT_TYPE_DESCRIPTION";
      editable = [false];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "HANDLING_UNIT_CATEGORY_ID";
      editable = [false];
   }
   attribute HandlingUnitCategoryDescription Text {
      fetch = "HANDLING_UNIT_CATEGORY_DESC";
      editable = [false];
   }
   attribute Sscc Text {
      label = "SSCC";
   }
   attribute WarehouseId Text {
      fetch = "WAREHOUSE_ID";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayId Text {
      fetch = "BAY_ID";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "ROW_ID";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierId Text {
      fetch = "TIER_ID";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinId Text {
      fetch = "BIN_ID";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute ParentHandlingUnitId Number {
      editable = [ETag = null];
   }
   attribute TopParentHandlingUnitId Text {
      fetch = "TOP_PARENT_HANDLING_UNIT_ID";
      label = "Top Parent Handling Unit ID";
      maxlength = 100;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "TOP_PARENT_HU_TYPE_ID";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "TOP_PARENT_HU_TYPE_DESC";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "TOP_PARENT_SSCC";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "TOP_PARENT_ALT_HU_LABEL_ID";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AccessoryExist Boolean("TRUE", "FALSE") {
      fetch = "ACCESSORY_EXIST";
      label = "Accessories Exist";
      editable = [false];
   }
   attribute Composition Text {
      fetch = "COMPOSITION";
      label = "Composition";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForLength Text {
      label = "Length UoM";
      editable = [ETag != null];
   }
   attribute NetWeight Number {
      fetch = "NET_WEIGHT";
      label = "Net Weight";
      editable = [false];
   }
   attribute TareWeight Number {
      fetch = "TARE_WEIGHT";
      label = "Tare Weight";
      editable = [false];
   }
   attribute OperativeGrossWeight Number {
      fetch = "OPERATIVE_GROSS_WEIGHT";
      label = "Operative Gross Weight";
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "UOM_FOR_WEIGHT";
      label = "UoM for Weight";
      maxlength = 30;
      editable = [false];
   }
   attribute OperativeVolume Number {
      fetch = "OPERATIVE_VOLUME";
      label = "Operative Volume";
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "UOM_FOR_VOLUME";
      label = "Volume UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute AdditiveVolumeDb Boolean("TRUE", "FALSE") {
      fetch = "ADDITIVE_VOLUME_DB";
      label = "Additive Volume";
      editable = [false];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      fetch = "GENERATE_SSCC_NO_DB";
      label = "Generate SSCC";
      required = [true];
   }
   attribute PrintLabelDb Boolean("TRUE", "FALSE") {
      fetch = "PRINT_LABEL_DB";
      label = "Print Handling Unit Label";
      required = [true];
   }
   attribute PrintContentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "PRINT_CONTENT_LABEL_DB";
      label = "Print Handling Unit Content Label";
      required = [true];
   }
   attribute MixOfPartNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_PART_NO_BLOCKED_DB";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }
   attribute MixOfCondCodeBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_COND_CODE_BLOCKED_DB";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   attribute MixOfLotBatchBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_LOT_BATCH_BLOCKED_DB";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   attribute MaxVolumeCapacity Number {
      fetch = "MAX_VOLUME_CAPACITY";
      label = "Max Volume Capacity";
      editable = [false];
   }
   attribute MaxWeightCapacity Number {
      fetch = "MAX_WEIGHT_CAPACITY";
      label = "Max Weight Capacity";
      editable = [false];
   }
   attribute StackableDb Boolean("TRUE", "FALSE") {
      fetch = "STACKABLE_DB";
      label = "Stackable";
      editable = [false];
   }
   attribute IsInStock Boolean("TRUE", "FALSE") {
      fetch = "IS_IN_STOCK";
   }
   attribute IsInInventoryTransit Boolean("TRUE", "FALSE") {
      fetch = "IS_IN_INVENTORY_TRANSIT";
      label = "In Transit";
      editable = [false];
   }
   attribute IsInProjectInventory Boolean("TRUE", "FALSE") {
      fetch = "IS_IN_PROJECT_INVENTORY";
      label = "In Project Inventory";
      editable = [false];
   }
   attribute LastCountDate Date {
      fetch = "Handling_Unit_API.Get_Last_Count_Date(HANDLING_UNIT_ID)";
      label = "Last Count Date";
      editable = [false];
   }
   attribute SourceRef1 Text {
      label = "Source Ref 1";
      editable = [ETag = null];
   }
   attribute SourceRef2 Text {
      label = "Source Ref 2";
      editable = [ETag = null];
   }
   attribute SourceRef3 Text {
      label = "Source Ref 3";
      editable = [ETag = null];
   }
   attribute SourceRefType Enumeration(HandlUnitSourceRefType) {
      fetch = "HANDL_UNIT_SOURCE_REF_TYPE_API.Decode(SOURCE_REF_TYPE_DB)";
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute LocationTypeDb Text {
      fetch = "LOCATION_TYPE_DB";
      label = "Location Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute ShipmentId Number {
      editable = [ETag = null];
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute TotalOnhandQty Number {
      fetch = "TOTAL_ONHAND_QTY";
      label = "Total Qty On Hand";
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "LOT_BATCH_NO";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "ENG_CHG_LEVEL";
      label = "Revision No";
      maxlength = 6;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "WAIV_DEV_REJ_NO";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "AVAILABILITY_CONTROL_ID";
      label = "Availability Control ID";
      maxlength = 25;
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "Part_Ownership_API.Decode(PART_OWNERSHIP)";
      label = "Part Ownership";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "PART_OWNERSHIP";
      label = "Part Ownership Db";
      maxlength = 200;
      editable = [false];
   }
   attribute Owner Text {
      fetch = "OWNER";
      label = "Owner";
      maxlength = 20;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "OWNER_NAME";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute ActivitySequence Number {
      fetch = "ACTIVITY_SEQUENCE";
      label = "Activity Seq";
      editable = [false];
   }
   attribute ProgramId Text {
      fetch = "PROGRAM_ID";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQUENCE, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQUENCE))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "PROJECT_ID";
      label = "Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQUENCE, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQUENCE))";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute SubProjectId Text {
      fetch = "SUB_PROJECT_ID";
      label = "Sub Project ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQUENCE, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQUENCE))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivityNo Text {
      fetch = "ACTIVITY_NO";
      label = "Activity ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQUENCE, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQUENCE))";
      label = "Activity Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SecondLevelParentHuId Number {
      fetch = "SECOND_LEVEL_PARENT_HU_ID";
      label = "Level 2 Handling Unit ID";
      editable = [false];
   }
   attribute SecondLevelSscc Number {
      fetch = "Handling_Unit_API.Get_Sscc(SECOND_LEVEL_PARENT_HU_ID)";
      label = "Level 2 SSCC";
      editable = [false];
   }
   attribute SecondLevelAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Alt_Handling_Unit_Label_Id(SECOND_LEVEL_PARENT_HU_ID)";
      label = "Level 2 Alt Handling Unit Label ID";
      editable = [false];
   }
   attribute HasStockReservationDb Boolean("TRUE", "FALSE") {
      fetch = "HAS_STOCK_RESERVATION_DB";
      label = "Reservations Exist";
      editable = [false];
   }
   attribute TotalReservedQty Number {
      fetch = "TOTAL_RESERVED_QTY";
      label = "Total Reserved Quantity";
      editable = [false];
   }
   attribute TotalAvaialableQty Number {
      fetch = "TOTAL_ONHAND_QTY - TOTAL_RESERVED_QTY";
      label = "Total Avaialble Quantity";
      editable = [false];
   }
   attribute TransportTaskId Text {
      fetch = "Handling_Unit_API.Get_Transport_Task_Id(HANDLING_UNIT_ID)";
      label = "Transport Task ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute SnapshotExistsForHu Text {
      fetch = "Handl_Unit_Stock_Snapshot_API.Handling_Unit_Exist('TRANSPORT_TASK', HANDLING_UNIT_ID)";
      label = "Snapshot Exists for Hu";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency SHPMNT
   attribute CanModifyHuStructOnShip Text {
      fetch = "Shipment_Handling_Utility_API.Can_Modify_Hu_Struct_On_Ship(SHIPMENT_ID)";
      label = " ";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency RCEIPT
   attribute ReceiptSourceRef1 Text {
      fetch = "Receipt_Inv_Location_API.Get_Source_Ref1__(HANDLING_UNIT_ID)";
      label = "Source Ref 1";
      editable = [false];
   }
   @DynamicComponentDependency RCEIPT
   attribute ReceiptSourceRef2 Text {
      label = "Source Ref 2";
      fetch = "Receipt_Inv_Location_API.Get_Source_Ref2__(HANDLING_UNIT_ID)";
      editable = [false];
   }
   @DynamicComponentDependency RCEIPT
   attribute ReceiptSourceRef3 Text {
      label = "Source Ref 3";
      fetch = "Receipt_Inv_Location_API.Get_Source_Ref3__(HANDLING_UNIT_ID)";
      editable = [false];
   }
   @DynamicComponentDependency RCEIPT
   attribute ReceiptSourceRefType Enumeration(LogisticsSourceRefType) {
      label = "Source Ref Type";
      fetch = "Receipt_Inv_Location_API.Get_Source_Ref_Type_Db__(HANDLING_UNIT_ID)";
      editable = [false];
   }
   attribute RemoteWarehouse Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Remote_Warehouse_DB(CONTRACT, WAREHOUSE_ID)";
   }
   array InventoryPartsInStockForHuArray() to InventoryPartInStockForHu() {
      where = "((:child.QtyOnhand > 0 OR :child.QtyInTransit > 0)
               AND (:child.HandlingUnitId IN (SELECT HANDLING_UNIT_ID
                                              FROM HANDLING_UNIT CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                              START WITH HANDLING_UNIT_ID IN (:parent.HandlingUnitId))))";
   }
   @DynamicComponentDependency RCEIPT
   array ReceiptInvLocationHuArray() to ReceiptInvLocationForHu() {
      where = "((:child.QtyOnhand > 0 OR :child.QtyInTransit > 0)
               AND (:child.HandlingUnitId IN (SELECT HANDLING_UNIT_ID
                                              FROM HANDLING_UNIT CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                              START WITH HANDLING_UNIT_ID IN (:parent.HandlingUnitId))))";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitCategoryIdRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySequence, ActivityNo) to Activity(ActivitySeq, ActivityNo);
}

@Override
entity InventoryPartInStockForHu using InventoryPartInStock {
   crud = Read;
   from = "inventory_part_in_stock_uiv";
   keys = HandlingUnitId, PartNo, ConfigurationId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, Contract, LocationNo;
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      maxlength = 25;
      editable = [false];
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      maxlength = 200;
      editable = [false];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Handling_Unit_Category_Id(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      maxlength = 25;
      editable = [false];
   }
   attribute HandlingUnitCategoryDescription Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Handl_Unit_Category_Desc(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      maxlength = 200;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO)";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute QtyOnhand Number {
      label = "Qty On Hand";
   }
   attribute CatchQtyOnhand Number {
      label = "Catch Quantity On Hand";
   }
   attribute UnifiedOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,QTY_ONHAND,'REMOVE')";
      label = "Unified On Hand Qty";
      editable = [false];
   }
   attribute UnifiedCatchOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,CATCH_QTY_ONHAND,'REMOVE','CATCH')";
      label = "Unified Catch On Hand Qty";
      editable = [false];
   }
   attribute QtyAvailable Number {
      fetch = "(QTY_ONHAND - QTY_RESERVED)";
      label = "Qty Available";
      editable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
   }
   attribute UnifiedReservedQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,QTY_RESERVED,'REMOVE')";
      label = "Unified Reserved Qty";
      editable = [false];
   }
   attribute UnifiedQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,QTY_IN_TRANSIT,'REMOVE')";
      label = "Unified Qty in Transit";
      editable = [ETag != null];
   }
   attribute UnifiedCatchQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,CATCH_QTY_IN_TRANSIT,'REMOVE','CATCH')";
      label = "Unified Catch Qty in Transit";
      editable = [ETag != null];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute UnifiedUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(PART_NO)";
      label = "Unified UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute UnifiedCatchUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(PART_NO,'CATCH')";
      label = "Unified Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute FreezeFlag Enumeration(InventoryPartFreezeCode) {
      label = "Frozen";
   }
   attribute LastCountDate Date {
      label = "Latest Count Date";
   }
   attribute AvailabilityControlId Text {
      editable = [false];
   }
   attribute TotalInventoryValue Number {
      fetch = "(Inventory_Part_In_Stock_API.Get_Company_Owned_Unit_Cost(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)) * QTY_ONHAND";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute Owner Text {
      fetch = "NVL(OWNING_CUSTOMER_NO,OWNING_VENDOR_NO)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(CONTRACT,PART_NO,CONFIGURATION_ID,LOCATION_NO,LOT_BATCH_NO,SERIAL_NO,ENG_CHG_LEVEL,WAIV_DEV_REJ_NO,ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency ORDER
   attribute PartAcquisitionValue Number {
      fetch = "CUST_PART_ACQ_VALUE_API.Get_Acquisition_Value(OWNING_CUSTOMER_NO,PART_NO,SERIAL_NO,LOT_BATCH_NO)";
      label = "Part Acquisition Value";
      editable = [false];
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute TotalAcquisitionValue Number {
      fetch = "QTY_ONHAND*CUST_PART_ACQ_VALUE_API.Get_Acquisition_Value(OWNING_CUSTOMER_NO,PART_NO,SERIAL_NO,LOT_BATCH_NO)";
      label = "Total Acquisition Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute PartOwnershipDb Text {
      fetch = "PART_OWNERSHIP_DB";
      label = "Part Ownership";
      maxlength = 20;
      editable = [false];
   }
   attribute ReceiptIssueSerialTrackDb Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
      label = "Receipt and Issue Serial Tracking";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationTypeDb Text {
      fetch = "LOCATION_TYPE_DB";
      label = "Location Type";
      maxlength = 20;
      editable = [false];
   }
   attribute LocationType Text {
      fetch = "LOCATION_TYPE";
      label = "Location Type";
      maxlength = 20;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference HandlingUnitCategoryIdRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   @DynamicComponentDependency MFGSTD
   reference EngChgLevelRef(Contract, PartNo, EngChgLevel) to ControlPlanPartRevLov(Contract, PartNo, EngChgLevel) {
      label = "Revision No";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference RotablePartPoolIdRef(Contract, RotablePartPoolId) to RotablePoolSite(Contract, RotablePartPoolId) {
      label = "Rotable Part Pool ID";
   }
   reference UnifiedUomRef(UnifiedUom) to IsoUnit(UnitCode) {
      label = "Unified UoM";
   }
   reference UnifiedCatchUomRef(UnifiedCatchUom) to IsoUnit(UnitCode) {
      label = "Unified Catch UoM";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
}

@Override
@DynamicComponentDependency RCEIPT
entity ReceiptInvLocationForHu using ReceiptInvLocation {
   crud = Read;
   from = "RECEIPT_INV_LOCATION_HU";
   keys = ReceiptSequence, Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId;

   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      maxlength = 25;
      editable = [false];
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      maxlength = 200;
      editable = [false];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Handling_Unit_Category_Id(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      maxlength = 25;
      label = "Category ID";
   }
   attribute HandlingUnitCategoryDescription Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Handl_Unit_Category_Desc(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      maxlength = 200;
      label = "Category Description";
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute RotablePartPoolId Text {
      label = "Rotable Part Pool ID";
   }
   attribute QtyOnhand Number {
      label = "Qty On Hand";
      required = [true];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
   }
   attribute CatchQtyOnhand Number {
      label = "Catch Quantity On Hand";
   }
   attribute UnifiedOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_onhand,'REMOVE')";
      label = "Unified On Hand Qty";
   }
   attribute UnifiedCatchOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,catch_qty_onhand,'REMOVE','CATCH')";
      label = "Unified Catch On Hand Qty";
   }
   attribute QtyReserved Number {
      label = "Qty Reserved";
   }
   attribute QtyAvailable Number {
      fetch = "(qty_onhand - qty_reserved)";
      label = "Qty Available";
   }
   attribute UnifiedReservedQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_reserved,'REMOVE')";
      label = "Unified Reserved Qty";
   }
   attribute CatchQtyInTransit Number {
      label = "Catch Qty in Transit";
   }
   attribute UnifiedQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_in_transit,'REMOVE')";
      label = "Unified Qty in Transit";
   }
   attribute UnifiedCatchQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,catch_qty_in_transit,'REMOVE','CATCH')";
      label = "Unified Catch Qty in Transit";
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
   }
   attribute UnifiedUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(part_no)";
      label = "Unified UoM";
   }
   attribute UnifiedCatchUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(part_no,'CATCH')";
      label = "Unified Catch UoM";
   }
   attribute FreezeFlag Enumeration(InventoryPartFreezeCode) {
      label = "Frozen";
   }
   attribute LastActivityDate Timestamp {
      label = "Last Activity Date";
      editable = [false];
   }
   attribute LastCountDate Date {
      label = "Latest Count Date";
   }
   attribute ReceiptDate Timestamp {
      label = "Receipt Date";
   }
   attribute AvailabilityControlId Text {
      label = "Availability Control ID";
   }
   attribute AvgUnitTransitCost Number {
      label = "Avg Unit Transit Cost";
   }
   attribute CountVariance Number {
      label = "Count Variance";
   }
   attribute ExpirationDate Date {
      label = "Expiration Date";
   }
   attribute TotalInventoryValue Number {
      fetch = "(Inventory_Part_In_Stock_API.Get_Company_Owned_Unit_Cost(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id)) * qty_onhand";
      label = "Total Inventory Value";
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "part_ownership_db";
      label = "Part Ownership";
   }
   attribute Owner Text {
      fetch = "NVL(OWNING_CUSTOMER_NO,OWNING_VENDOR_NO)";
      label = "Owner";
      format = uppercase;
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(CONTRACT,PART_NO,CONFIGURATION_ID,LOCATION_NO,LOT_BATCH_NO,SERIAL_NO,ENG_CHG_LEVEL,WAIV_DEV_REJ_NO,ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
   }
   @DynamicComponentDependency ORDER
   attribute PartAcquisitionValue Number {
      fetch = "Cust_Part_Acq_Value_API.Get_Acquisition_Value(owning_customer_no,part_no,serial_no,lot_batch_no)";
      label = "Part Acquisition Value";
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute TotalAcquisitionValue Number {
      fetch = "qty_onhand*Cust_Part_Acq_Value_API.Get_Acquisition_Value(owning_customer_no,part_no,serial_no,lot_batch_no)";
      label = "Total Acquisition Value";
      format = ifscurrency;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ProjectId Text {
      label = "Project ID";
   }
   attribute ReceiptAndIssueSerialTracking Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      label = "Receipt and Issue Serial Tracking";
   }
   attribute SourceRef1 Text {
      label = "Source Ref1";
      fetch = "source_ref1";
   }
   attribute SourceRef2 Text {
      label = "Source Ref2";
      fetch = "source_ref2";
   }
   attribute SourceRef3 Text {
      label = "Source Ref3";
      fetch = "source_ref3";
   }
   attribute SourceRef4 Text {
      label = "Source Ref4";
      fetch = "source_ref4";
   }
   attribute ReceiptNo Number {
      fetch = "receipt_no";
   }
   attribute SourceRefType Text {
      fetch = "source_ref_type";
      label = "Source Ref Type";
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
      label = "Source Ref Type Db";
   }
   attribute LocationTypeDb Text {
      label = "Location Type";
   }
   attribute ObjId Text {
      fetch = "objid";
   }
   attribute Objkey Text;
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference HandlingUnitCategoryIdRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category";
   }
   reference RotablePartPoolIdRef(Contract, RotablePartPoolId) to RotablePoolSite(Contract, RotablePartPoolId) {
      label = "Rotable Part Pool ID";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   @DynamicComponentDependency MFGSTD
   reference EngChgLevelRef(Contract, PartNo, EngChgLevel) to ControlPlanPartRevLov(Contract, PartNo, EngChgLevel) {
      label = "Revision No";
   }
   reference UnifiedUomRef(UnifiedUom) to IsoUnit(UnitCode) {
      label = "Unified UoM";
   }
   reference UnifiedCatchUomRef(UnifiedCatchUom) to IsoUnit(UnitCode) {
      label = "Unified Catch UoM";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
}

---------------------------------- ACTIONS ----------------------------------
action ScrapHu {
   initialcheck HandlingUnitExtendedInitialCheck(HandlingUnitId);
   parameter HandlingUnitId Number;
   parameter ScrapCause Text;
   parameter ScrapNote Text;
   parameter PrintServiceabilityTagDb Text;
   ludependencies = HandlingUnit;
}

action ChangeWaivDevRejNo {
   initialcheck implementation;
   parameter Selection Text;
   parameter WaivDevRejNo Text;
   parameter SourceRef1 Text;
   parameter SourceRefType Text;
   ludependencies = HandlingUnit, InventoryPartInStock, ReceiptInvLocation;
}

action ChangePartAvailabilityControlHu {
   initialcheck implementation;
   parameter Selection Text;
   parameter AvailabilityControlId Text;
   ludependencies = HandlingUnit, InventoryPartInStock, ReceiptInvLocation;
}

action UpdateExpirationDate {
   initialcheck implementation;
   parameter Selection Text;
   parameter ExpirationDate Date;
   ludependencies = HandlingUnit, InventoryPartInStock, ReceiptInvLocation;
}

action MoveWithTransportTask {
   initialcheck implementation;
   parameter Selection Text;
   parameter Contract Text;
   parameter LocationNo Text;
   parameter Destination Text;
   ludependencies = HandlingUnit, InventoryPartInStock, ReceiptInvLocation;
}

action CreateSscc {
   initialcheck implementation;
   parameter Selection Text;
   ludependencies = HandlingUnit;
}

action GetHandlingUnitLabelResultKey Text {
   initialcheck implementation;
   parameter Selection Text;

}
action GetHandlingUnitLabelContentResultKey Text {
   initialcheck implementation;
   parameter Selection Text;
}
action ValidateDifferentLocations {
   initialcheck none;
   parameter Selection Text;
}
action IssueWithPosting {
   initialcheck implementation;
   parameter Selection Text;
   parameter CodeA Text;
   parameter CodeB Text;
   parameter CodeC Text;
   parameter CodeD Text;
   parameter CodeE Text;
   parameter CodeF Text;
   parameter CodeG Text;
   parameter CodeH Text;
   parameter CodeI Text;
   parameter CodeJ Text;
   ludependencies = HandlingUnit;
}

action PerformPutaway {
   initialcheck implementation;
   supportwarnings = [true];
   parameter Selection Text;
}

action ReceiveFromInventoryTransit {
   initialcheck implementation;
   parameter Selection Text;
   ludependencies = HandlingUnit;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetSelectedHandlingUnits Text {
   parameter Selection Text;
}

function ValidateCompany Text {
   parameter ContractList Text;
}

function GetSelectedContract Text {
   parameter Selection Text;
}

function GetSelectedLocationTypeDb Text {
   parameter Selection Text;
}

function GetConnectedObjids Text {
   parameter Selection Text;
}

function GetInventoryPartInStockObjidByKeys Text {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
}
