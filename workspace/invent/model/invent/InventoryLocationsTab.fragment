-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2022-01-18  SBalLK  Bug SC21R2-7237, Modified PrintLocNoBarcodeCommand() method to disable command when multiple selected records contains multiple site.
-- 2020-12-17  JeLise  SCZ-12962, Added descriptionlabel to ContractRef and WarehouseIdRef.
-- 2020-11-11  PamPlk  SC2020R1-10310, Made Duplicate button enable and Removed Db suffix from ReceiptsBlockedDb, ReceiptToOccupiedBlockedDb,
-- 2020-11-11          MixOfPartNumberBlockedDb, MixOfCondCodesBlockedDb, MixOfLotBatchNoBlockedDb and ExcludeStorageReqValDb fields.
-- 2019-05-13  DaZase  SCUXXW4-19645, Added initialcheck to all unbounded actions.
-- 2018-12-21  KoDelk  SCUXXW4-14231, Moved Location in to a framnet so it can be reused
-----------------------------------------------------------------------------
fragment InventoryLocationsTab;
component INVENT;
layer Core;
description "Manage WarehouseBayBin";
include fragment WarehouseBayTierLovSelector;
include fragment WarehouseBayRowLovSelector;
include fragment WarehouseBayLov;
include fragment WarehouseLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseBayBinInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command PrintLocSeqBarcodeCommand for WarehouseBayBin {
   label = "Print Location Sequence Barcode";
   mode = SelectedRecords;
   enabled = [true];
   variable ReportResulyKeyList {
      type = Text;
   }
   bulkexecute {
      call GetLocationSequenceBarcodeResultKey(Selection) into ReportResulyKeyList;
      if [ReportResulyKeyList != null] {
         printdialog ReportResulyKeyList;
      }
   }
}
command PrintLocNoBarcodeCommand for WarehouseBayBin {
   label = "Print Location No Barcode";
   mode = SelectedRecords;
   enabled = [count(Contract) = 1];
   variable ReportResulyKeyList {
      type = Text;
   }
   bulkexecute {
      call GetLocationNumberBarcodeResultKey(Selection) into ReportResulyKeyList;
      if [ReportResulyKeyList != null] {
         printdialog ReportResulyKeyList;
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list WarehouseBayBinList for WarehouseBayBin {

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;
      descriptionlabel = "Description";
      columnexclude = [parent.luname = "SiteInventInfo" or parent.luname = "Warehouse" or parent.luname = "WarehouseBay"];
   }
   field LocationNo {
      size = Small;
   }
   field Description;
   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      freeinput = [true];
      description = WarehouseIdRef.Description;
      descriptionlabel = "Description";
      columnexclude = [parent.luname = "Warehouse" or parent.luname = "WarehouseBay"];
   }
   lov BayIdRef with ReferenceWarehouseBayLovSelector {
      columnexclude = [parent.luname = "WarehouseBay"];
      freeinput = [true];
      size = Small;
   }
   lov RowIdRef with ReferenceWarehouseBayRowLovSelector {
      size = Small;
      freeinput = [true];
   }
   lov TierIdRef with ReferenceWarehouseBayTierLovSelector {
      size = Small;
      freeinput = [true];
   }

   lov BinIdRef with ReferenceWarehouseBayBinSelector {
      size = Small;
      freeinput = [true];
   }

   lov LocationGroupRef with ReferenceInventoryLocationGroupSelector {
      size = Small;
      description = LocationGroupRef.Description;
   }
   field InventoryLocationGroupRef.InventoryLocationType {
      size = Small;
      label = "Location Type";
   }
   field LocationSequence;
   field NoteText {
      size = Small;
   }
   field WidthCapacity;
   field WidthCapacityOppValue;
   field BinWidthSource {
      size = Small;
   }
   field HeightCapacity;
   field HeightCapacityOppValue;
   field BinHeightSource {
      size = Small;
   }
   field DeptCapacity;
   field DeptCapacityOppValue;
   field BinDepthSource {
      size = Small;
   }
   field LengthUom {
      size = Small;
   }
   field VolumeCapacity;
   field BinVolumeOperativeValue;
   field BinVolumeSource {
      size = Small;
   }
   field VolumeUom {
      size = Small;
   }
   field CarryingCapacity;
   field CarryingCapacityOppValue;
   field BinCarryingCapacitySource {
      size = Small;
   }
   field WeightUom {
      size = Small;
   }
   field MinTemperature;
   field MinTemperatureOppValue;
   field MinTemperatureSource {
      size = Small;
   }
   field MaxTemperature;
   field MaxTemperatureOppValue;
   field MaxTemperatureSource {
      size = Small;
   }
   field TemperatureUom {
      size = Small;
   }
   field MinHumidity;
   field MinHumidityOppValue;
   field MinHumiditySource {
      size = Small;
   }
   field MaxHumidity;
   field MaxHumidityOppValue;
   field MaxHumiditySource {
      size = Small;
   }
   field WarehouseRef.RouteOrder {
      size = Small;
      label = "Warehouse Route Order";
   }
   field WarehouseBayRef.RouteOrder {
      size = Small;
      label = "Bay Route Order";
   }
   field WarehouseBayRowRef.RouteOrder {
      size = Small;
      label = "Row Route Order";
   }
   field WarehouseBayTierRef.RouteOrder {
      size = Small;
      label = "Tier Route Order";
   }
   field RouteOrder {
      size = Small;
   }
   field ReceiptsBlocked {
      size = Small;
   }
   field ReceiptsBlockedOn {
      size = Small;
   }
   field ReceiptToOccupiedBlocked {
      size = Small;
   }
   field ReceiptsOccBlockedOn {
      size = Small;
   }
   field MixOfPartNumberBlocked {
      size = Small;
   }
   field MixOfPartNumbersBlockedOn {
      size = Small;
   }
   field MixOfCondCodesBlocked {
      size = Small;
   }
   field MixOfConditionCodesBlockedOn {
      size = Small;
   }
   field MixOfLotBatchNoBlocked {
      size = Small;
   }
   field MixOfLotBatchNumbersBlockedOn {
      size = Small;
   }
   field ExcludeStorageReqVal {
      size = Small;
   }
   field ValidationExcludedOn;
   lov AvailabilityControlIdRef with PartAvailabilityControlSelector {
      description = AvailabilityControlIdRef.Description;
   }
   lov DefaultPartAvailabilityControlOperativeValueRef with PartAvailabilityControlSelector {
      description = DefaultPartAvailabilityControlOperativeValueRef.Description;
   }
   field DefaultPartAvailabilityControlOperativeValueSource {
      size = Small;
   }
   field HideInWhseNavigatorDb {
      size = Small;
   }
   field RemoteWarehouseDb {
      size = Small;
   }
   // fieldranking ContractRef, LocationNo, WarehouseIdRef, BayIdRef, RowIdRef, TierIdRef, BinIdRef, LocationGroupRef, ReceiptsBlockedDb, ReceiptToOccupiedBlockedDb;

   commandgroup CommandGroupCmdGroup {

      command PrintLocSeqBarcodeCommand;
      command PrintLocNoBarcodeCommand;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseBayBin {
   supportwarnings = [true];
   use attributes = LocationNo, Description, LocationGroup, LocationSequence, NoteText, WidthCapacity, HeightCapacity, DeptCapacity, VolumeCapacity, CarryingCapacity, MinTemperature, MaxTemperature, MinHumidity, MaxHumidity, RouteOrder, AvailabilityControlId;
   attribute SiteDescription Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Site Description";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute LocationNo Text {
      label = "Location No";
      format = uppercase;
   }
   attribute WarehouseId Text {
      label = "Warehouse ID";
      required = [true];
   }
   attribute BayId Text {
      label = "Bay ID";
      format = uppercase;
   }
   attribute RowId Text {
      label = "Row ID";
      format = uppercase;
   }
   attribute TierId Text {
      label = "Tier ID";
      format = uppercase;
   }
   attribute BinId Text {
      label = "Bin ID";
      format = uppercase;
   }
   attribute LocationGroupDescription Text {
      fetch = "Inventory_Location_Group_API.Get_Description(location_group)";
      label = "Location Group Description";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute LocationSequence Number {
      editable = [false];
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute WidthCapacity Number {
      label = "Bin Width";
   }
   attribute WidthCapacityOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Width_Capacity(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Width Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute BinWidthSource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Width_Capacity_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Width Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute HeightCapacity Number {
      label = "Bin Height";
   }
   attribute HeightCapacityOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Height_Capacity(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Height Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute BinHeightSource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Height_Capacity_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Height Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DeptCapacity Number {
      label = "Bin Depth";
   }
   attribute DeptCapacityOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Dept_Capacity(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Depth Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute BinDepthSource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Dept_Capacity_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Depth Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute LengthUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "Length UoM";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute VolumeCapacity Number {
      label = "Bin Volume";
   }
   attribute BinVolumeOperativeValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Volume_Capacity(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Volume Operative Value";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinVolumeSource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Volume_Capacity_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Volume Source";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(contract)";
      label = "Volume UoM";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute CarryingCapacity Number {
      label = "Bin Carrying Capacity";
   }
   attribute CarryingCapacityOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Carrying_Capacity(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Carrying Capacity Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute BinCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Carry_Capacity_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Bin Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "Weight UoM";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MinTemperatureOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Min_Temperature(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Min Temperature Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute MinTemperatureSource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Min_Temperature_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Min Temperature Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MaxTemperatureOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Max_Temperature(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Max Temperature Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute MaxTemperatureSource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Max_Temperature_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Max Temperature Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute TemperatureUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(contract))";
      label = "Temperature UoM";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MinHumidity Number {
      label = "Min Humidity (%)";
   }
   attribute MinHumidityOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Min_Humidity(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Min Humidity (%) Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute MinHumiditySource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Min_Humidity_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Min Humidity (%) Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MaxHumidity Number {
      label = "Max Humidity (%)";
   }
   attribute MaxHumidityOppValue Number {
      fetch = "Warehouse_Bay_Bin_API.Get_Max_Humidity(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Max Humidity (%) Operative Value";
      insertable = [false];
      updatable = [false];
   }
   attribute MaxHumiditySource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Max_Humidity_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Max Humidity (%) Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute RouteOrder Text {
      label = "Bin Route Order";
   }
   attribute ReceiptsBlocked Boolean("TRUE", "FALSE") {
      fetch = "receipts_blocked_db";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptsBlockedOn Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Receipts_Blocked_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ReceiptToOccupiedBlocked Boolean("TRUE", "FALSE") {
      fetch = "receipt_to_occupied_blocked_db";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute ReceiptsOccBlockedOn Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Receipt_To_Occup_Blkd_Src(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Receipts to Occupied Blocked on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MixOfPartNumberBlocked Boolean("TRUE", "FALSE") {
      fetch = "mix_of_part_number_blocked_db";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }
   attribute MixOfPartNumbersBlockedOn Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Mix_Of_Part_Blocked_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Mix of Part Numbers Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MixOfCondCodesBlocked Boolean("TRUE", "FALSE") {
      fetch = "mix_of_cond_codes_blocked_db";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   attribute MixOfConditionCodesBlockedOn Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Mix_Of_Cond_Blocked_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Mix of Condition Codes Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MixOfLotBatchNoBlocked Boolean("TRUE", "FALSE") {
      fetch = "mix_of_lot_batch_no_blocked_db";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   attribute MixOfLotBatchNumbersBlockedOn Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Mix_Of_Lot_Blocked_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Mix of Lot Batch Numbers Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ExcludeStorageReqVal Boolean("TRUE", "FALSE") {
      fetch = "exclude_storage_req_val_db";
      label = "Exclude Storage Requirement Validation";
      required = [true];
   }
   attribute ValidationExcludedOn Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Excl_Storage_Req_Val_Src(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Validation Excluded on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute AvailabilityControlId Text {
      label = "Default Part Availability Control Bin Value";
   }
   attribute DefaultPartAvailabilityControlOperativeValue Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Availability_Control_Id(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Default Part Availability Control Operative Value";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DefaultPartAvailabilityControlOperativeValueSource Text {
      fetch = "Warehouse_Bay_Bin_API.Get_Avail_Control_Id_Source(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Default Part Availability Control Operative Value Source";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute HideInWhseNavigatorDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Bin_API.Get_Hide_In_Whse_Navigator_Db(contract, warehouse_id, bay_id, tier_id, row_id, bin_id)";
      label = "Hidden";
      required = [true];
      editable = [false];
   }
   attribute RemoteWarehouseDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Remote_Warehouse_Db(contract,warehouse_id)";
      label = "Remote";
      required = [true];
      editable = [false];
      insertable = [false];
      updatable = [false];
   }

   reference InventoryLocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup);
   reference WarehouseRef(Contract, WarehouseId) to Warehouse(Contract, WarehouseId);
   reference WarehouseBayRef(Contract, WarehouseId, BayId) to WarehouseBay(Contract, WarehouseId, BayId);
   reference WarehouseBayRowRef(Contract, WarehouseId, BayId, RowId) to WarehouseBayRow(Contract, WarehouseId, BayId, RowId);
   reference WarehouseBayTierRef(Contract, WarehouseId, BayId, TierId) to WarehouseBayTier(Contract, WarehouseId, BayId, TierId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse";
   }
   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBayLov(Contract, WarehouseId, BayId) {
      label = "Bay";
   }
   reference RowIdRef(Contract, WarehouseId, BayId, RowId) to WarehouseBayRowLov(Contract, WarehouseId, BayId, RowId) {
      label = "Row";
   }
   reference TierIdRef(Contract, WarehouseId, BayId, TierId) to WarehouseBayTierLov(Contract, WarehouseId, BayId, TierId) {
      label = "Tier";
   }
   reference BinIdRef(Contract, WarehouseId, BayId, TierId, BinId) to WarehouseBayBin(Contract, WarehouseId, BayId, RowId, TierId, BinId) {
      label = "Bin";
   }

   reference LocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Default Part Availability Control Bin Value";
   }
   reference DefaultPartAvailabilityControlOperativeValueRef(DefaultPartAvailabilityControlOperativeValue) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Default Part Availability Control Operative Value";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action GetLocationSequenceBarcodeResultKey Text {
   initialcheck implementation;
   parameter Selection Text;
}

action GetLocationNumberBarcodeResultKey Text {
   initialcheck implementation;
   parameter Selection Text;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
