-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-05-20  DaZase  SCUXXW4-19653, Added initialcheck to all unbounded actions.
-- 2019-01-22  fandse  SCUXXW4-6995, Converted from tbwInventPartOfflineMove using MTG Version: 1.34
-----------------------------------------------------------------------------

projection InventoryPartOfflineMoveTransactionsHandling;
component INVENT;
layer Core;
description "Manage InventPartOfflineMove";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
include fragment InventoryPartLov4Selector;
include fragment InventoryLocation19Selector;
include fragment UserAllowedSiteLovSelector;
include fragment PartMoveAcknowldgReasonLovSelector;
include fragment InventPartOfflineMoveInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventPartOfflineMoveSet for InventPartOfflineMove;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventPartOfflineMove {
   crud = Read, Delete;
   use attributes = InternalOfflineMoveId, FromContract, FromLocationNo, ToContract, ToLocationNo, PartNo, ConfigurationId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, Quantity, CatchQuantity, FirstSyncUserId, FirstSyncDateTime, SecondSyncUserId, SecondSyncDateTime, ErrorDescription, AcknowledgeReasonId, AcknowledgeNoteText, MoveExecutionDateTime;
   attribute FromContract Text {
      label = "From Contract";
   }
   attribute InternalOfflineMoveIdChar Text {
      fetch = "to_char(Internal_Offline_Move_Id)";
   }
   attribute ToContract Text {
      label = "To Contract";
   }
   attribute EngChgLevel Text {
      label = "Rev No";
   }
   attribute ActivitySeq Number {
      label = "Activity Seq";
   }
   attribute CatchQuantity Number {
      label = "Catch Qty";
   }
   attribute FirstSyncDateTime Timestamp {
      label = "First Sync Date/Time";
   }
   attribute SecondSyncDateTime Timestamp {
      label = "Second Sync Date/Time";
   }
   attribute AcknowledgeReasonId Text {
      label = "Ack Reason Id";
   }
   attribute AcknowledgeNoteText Text {
      label = "Ack Note Text";
   }
   attribute MoveExecutionDateTime Date {
      label = "Move Execution Date/Time";
   }
   attribute Status Text {
      fetch = "Invent_Part_Offline_Move_API.Get_Status(external_offline_move_id)";
      label = "Status";
      editable = [false];
   }
   attribute StatusDb Text {
      fetch = "Invent_Part_Offline_Move_API.Get_Status_Db(external_offline_move_id)";
      label = "Db Status";
      editable = [false];
   }
   reference AcknowledgeReasonIdRef(AcknowledgeReasonId) to PartMoveAcknowldgReasonLov(AcknowledgeReasonId) {
      label = "Acknowledge Reason";
   }
   reference FromContractRef(FromContract) to UserAllowedSiteLov(Contract) {
      label = "From Contract";
   }
   reference FromLocationNoRef(FromContract, FromLocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "From Location No";
   }
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Contract";
   }
   reference ToLocationNoRef(ToContract, ToLocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "To Location No";
   }
   reference PartNoRef(FromContract, PartNo) to InventoryPartLov4(Contract, PartNo) {
      label = "Part No";
   }
   reference ConfigurationIdRef(FromContract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action RunPendingMovePart {
   initialcheck InventPartOfflineMoveInitialCheck(ExternalOfflineMoveId);
   parameter ExternalOfflineMoveId Text;
   ludependencies = InventPartOfflineMove;
}

action AcknowledgePartMove {
   initialcheck InventPartOfflineMoveInitialCheck(ExternalOfflineMoveId);
   parameter ExternalOfflineMoveId Text;
   parameter AcknowledgeReasonId Text;
   parameter AcknowledgeNoteText Text;
   ludependencies = InventPartOfflineMove;

}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------
structure PartMoveAcknowledgeReasonDialogStructure {
   attribute AcknowledgeReasonId Text {
      label = "Acknowledge Reason";
   }
   attribute AcknowledgeNoteText Text {
      label = "Acknowledge Note Text";
      maxlength = 2000;
   }
   reference AcknowledgeReasonIdRef(AcknowledgeReasonId) to PartMoveAcknowldgReasonLov(AcknowledgeReasonId);
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

