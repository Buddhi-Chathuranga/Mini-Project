-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-05-08  SWiclk  SCUXXW4-7260, Converted from tbwShortageDemandSummary using MTG Version: 1.17
-----------------------------------------------------------------------------
projection InventoryPartShortagesAnalysis;
component INVENT;
layer Core;
description "Use this API to view the records of parts with shortages, also considering different ownership and condition codes, including site IDs and shortage quantities.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InventoryPartShortages for InventoryPartShortage;

------------------------------ ENTITY DETAILS -------------------------------
@Override
query InventoryPartShortage {
   from = "shortage_demand_by_part";
   keys = ObjId;
   attribute ObjId Text {
      fetch = "OBJID";
      editable = [false];
   }

   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT,PART_NO)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute PartOwnership Text {
      fetch = "Part_Ownership_API.Decode(PART_OWNERSHIP)";
      label = "Part Ownership";
      maxlength = 100;
      editable = [false];
   }
   attribute Owner Text {
      fetch = "NVL(OWNING_CUSTOMER_NO,OWNING_VENDOR_NO)";
      label = "Owner";
      maxlength = 20;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
   }
   attribute ShortageQty Number {
      fetch = "Shortage_Demand_API.Get_Shortage_Qty(CONTRACT,PART_NO,CONDITION_CODE,PART_OWNERSHIP,OWNING_CUSTOMER_NO,OWNING_VENDOR_NO, PROJECT_ID, ACTIVITY_SEQ)";
      label = "Shortage Qty";
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "PROJECT_ID";
      label = "Project ID";
      maxlength = 30;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "ACTIVITY_SEQ";
      label = "Activity Sequence";
      editable = [false];
   }
   attribute QtytoDistribute Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_  => CONTRACT, part_no_  => PART_NO, configuration_id_  => '*', qty_type_  => 'AVAILABLE', expiration_control_  => 'NOT EXPIRED', supply_control_db_  => 'NETTABLE', ownership_type1_db_  => PART_OWNERSHIP, ownership_type2_db_  => DECODE(PART_OWNERSHIP,'COMPANY OWNED','CONSIGNMENT'), owning_customer_no_  => OWNING_CUSTOMER_NO, owning_vendor_no_  => OWNING_VENDOR_NO, location_type1_db_  => 'PICKING', location_type2_db_  => 'SHIPMENT', include_standard_   => decode(PROJECT_ID, '*', 'TRUE', 'FALSE'), include_project_  => decode(PROJECT_ID, '*', 'FALSE', 'TRUE'), activity_seq_   => ACTIVITY_SEQ, project_id_   => PROJECT_ID, condition_code_  => decode(CONDITION_CODE, '*', NULL, CONDITION_CODE))";
      label = "Qty to Distribute";
      editable = [false];
   }
   attribute OwningCustomerNo Text {
      fetch = "OWNING_CUSTOMER_NO";
      label = "Owning Customer";
      maxlength = 20;
      editable = [false];
   }
   attribute OwningVendorNo Text {
      fetch = "OWNING_VENDOR_NO";
      label = "Owning Supplier No";
      maxlength = 20;
      editable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "PART_OWNERSHIP";
      label = "Part Ownership";
      maxlength = 20;
      editable = [false];
   }

   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

}
