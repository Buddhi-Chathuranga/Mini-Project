----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-07-26  ChFolk  SCUXXW4-22798, Modified project information and removed some attributes with get methods to increase performance.
-- 2019-07-03  JaThlk  SCUXXW4-17765, Moved the scrap method implementation to ScrapInventoryPartParameterDialog.
-- 2019-06-10  JaThlk  SCUXXW4-21721, Fixed the issues related to scrap command.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-09-17  JaThlk  SCUXXW4-6327, Included the fragments IdentifySerialsInLocationAssistant and TemporaryPartTrackingSerialSelector
-- 2018-05-18  ChFolk  SCUXXW4-6327, Included from frmInvScrap using MTG Version: 1.17
----------------------------------------------------------------------------------------------------------
projection ScrapInventoryPart;
component INVENT;
layer Core;
description "Use this API to scrap the inventory part manually";
category Users;
include fragment InventoryPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment HandlingUnitLovSelector;
include fragment ScrapInventoryPartParameterDialog;
include fragment IdentifySerialsInLocationAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartConfigurationSet for InventoryPartConfiguration;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartConfiguration using InventoryPartConfig {
   crud = Read;
   from = "invent_part_config_stockable";
   exec = "INVENTORY_PART_CONFIG_API";
   keys = PartNo, Contract, ConfigurationId {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and CONFIGURATION_ID = :ConfigurationId";
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute UoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
      maxlength = 30;
      editable = [ETag = null];
   }
   attribute ReceiptIssueSerialTrackingDb Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference UoMRef(UoM) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   array PartlocArray(PartNo, Contract, ConfigurationId) to InventoryPartInStock(PartNo, Contract, ConfigurationId);
}

@Override
entity InventoryPartInStock {
   crud = Read;
   from = "inventory_part_pick_ship_stock";
   exec = "INVENTORY_PART_IN_STOCK_API";
   where = "FREEZE_FLAG_DB = 'N'";

   attribute AvailableQtytoScrap Number {
      fetch = "(QTY_ONHAND - QTY_RESERVED)";
      label = "Available Qty to Scrap";
      editable = [false];
   }
   attribute CatchQtyOnhand Number {
      fetch = "CATCH_QTY_ONHAND";
      label = "Available Catch Qty to Scrap";
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "LOCATION_NO";
      label = "Location No";
      maxlength = 35;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      fetch = "HANDLING_UNIT_ID";
      label = "Handling Unit ID";
      required = [true];
      editable = [ETag = null];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "WAREHOUSE";
      label = "Warehouse";
      maxlength = 15;
      editable = [false];
   }
   attribute BayNo Text {
      fetch = "BAY_NO";
      label = "Bay";
      maxlength = 5;
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "ROW_NO";
      label = "Row";
      maxlength = 5;
      editable = [false];
   }
   attribute TierNo Text {
      fetch = "TIER_NO";
      label = "Tier";
      maxlength = 5;
      editable = [false];
   }
   attribute BinNo Text {
      fetch = "BIN_NO";
      label = "Bin";
      maxlength = 5;
      editable = [false];
   }
   attribute ExpirationDate Date {
      fetch = "EXPIRATION_DATE";
      label = "Expiration Date";
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "LOT_BATCH_NO";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute WaivDevRejNo Text {
      fetch = "WAIV_DEV_REJ_NO";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      fetch = "AVAILABILITY_CONTROL_ID";
      label = "Availability Control Id";
      maxlength = 25;
   }
   attribute EngChgLevel Text {
      fetch = "ENG_CHG_LEVEL";
      label = "Revision No";
      maxlength = 6;
      editable = [false];
      format = uppercase;
   }
   attribute ActivitySeq Number {
      fetch = "ACTIVITY_SEQ";
      label = "Activity Sequence";
      editable = [false];
   }
   attribute LastActivityDate Date {
      fetch = "LAST_ACTIVITY_DATE";
      label = "Last activity date";
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationType Text {
      fetch = "LOCATION_TYPE";
      label = "Location type";
      editable = [false];
   }
   attribute QtyOnhand Number {
      fetch = "QTY_ONHAND";
      label = "Qty onhand";
      editable = [false];
   }
   attribute QtyReserved Number {
      fetch = "QTY_RESERVED";
      label = "Qty reserved";
      editable = [false];
   }
   attribute QtyScrapped Number {
      fetch = "NULL";
      editable = [false];
   }
   attribute CatchQtyScrapped Number {
      fetch = "NULL";
      editable = [false];
   }
   attribute ScrapCause Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute ScrapNote Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "PART_OWNERSHIP_DB";
      label = "Ownership";
      editable = [ETag = null];
   }
   attribute PartOwnershipDb Text {
      fetch = "PART_OWNERSHIP_DB";
   }
   attribute Owner Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,OWNING_VENDOR_NO,OWNING_CUSTOMER_NO)";
      label = "Owner";
      maxlength = 100;
      editable = [ETag = null];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(OWNING_CUSTOMER_NO))";
      label = "Owner Name";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute ProjectId Text {
      fetch = "PROJECT_ID";
      label = "Project ID";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      editable = [false];
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
}

---------------------------------- ACTIONS ----------------------------------


action GetReportResultKey Number {
   initialcheck implementation;
   parameter PartNo Text;
   parameter Contract Text;
   parameter SerialNo Text;
   parameter LotBatchNo Text;
   parameter QtyScrapped Number;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetCatchUnitEnabled Text {
   parameter Contract Text;
   parameter PartNo Text;
}
