----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-05-29  fandse  SCUXXW4-21247, Removed size large on a couple of fields.
-- 2018-05-02  ChFolk  SCUXXW4-5446, Included CopyWarehouseWorkerDialog which is from dlgCopyWarehouseWorker.
-- 2018-04-19  ChFolk  SCUXXW4-6592, Converted from frmWarehouseWorker using MTG Version: 1.16
----------------------------------------------------------------------------------------------------------
client WarehouseWorker;
component INVENT;
layer Core;
projection WarehouseWorkerHandling;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseWorkerGroupLovSelector;

warningsenabled = WarehouseWorker;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry WarehouseWorkerNavEntry parent InventNavigator.WarehouseTasksWarehouseTaskBasicData at index 1 {
      label = "Warehouse Worker";
      page Form home WarehouseWorker;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using WarehouseWorkers {
   label = "Warehouse Worker";
   selector WarehouseWorkerSelector;
   group WarehouseWorkerGroup {
      label = "";
   }
   tabs {
      tab {
         label = "Task Type";
         list WorkerTaskTypeList(DetailWorkerTaskType);
      }
      tab {
         label = "Location Group";
         list WorkerLocationGroupList(DetailWarehouseWorkerLocationGroup);
      }
   }
   commandgroup WarehouseWorkerCmdGroup {

      command AddAllLocationGroupsCommand;
      command CopyWorkerCommand;
   }
}

---------------------------------- GROUPS -----------------------------------
group WarehouseWorkerGroup for WarehouseWorker {
   label = "";
   lov WorkerIdRef with PersonInfoSelector {
      description = WorkerIdRef.Name;
      label = "Worker";
      contactwidget {
         enabled = [true];
         source = Person;
      }

   }
   lov ContractRef with UserAllowedSiteLovSelector {
      size = Small;
      validate command {
         enabled = [Contract != null and WorkerGroup != null];
         execute {
            call GetCalendarId(Contract, WorkerGroup) into CalendarId;
         }
      }
   }

   lov WorkerGroupRef with WarehouseWorkerGroupLovSelector using DistinctWorkerGroups(Contract) {
      size = Small;
      validate command {
         enabled = [Contract != null and WorkerGroup != null];
         execute {
            call GetCalendarId(Contract, WorkerGroup) into CalendarId;
         }
      }
   }
   lov CalendarIdRef with WorkTimeCalendarSelector {
      size = Small;
   }
   field StartDate;
   field EndDate;
}

--------------------------------- COMMANDS ----------------------------------
command AddAllLocationGroupsCommand for WarehouseWorker {
   label = "Add All Location Groups";
   enabled = [WorkerId != null];
   execute {
      confirm("Do you want to add all possible location groups to this worker group?") {
         when OK {
            call AddAllLocationGroups();
         }
      }
   }
}

command CopyWorkerCommand for WarehouseWorker {
   label = "Copy Worker";
   enabled = [not isDirty or not isNew];
//   variable ToWorkerIdStr {
//      type = Text;
//   }
//   variable ToContractStr {
//      type = Text;
//   }
//   variable ToStartDateDt {
//      type = Date;
//   }
//   variable ToWorkerGroupStr {
//      type = Text;
//   }
//   variable ToCalendarIdStr {
//      type = Text;
//   }
   execute {
      dialog CopyWarehouseWorkerDialog(Contract, WorkerId, WorkerIdRef.Name, StartDate, WorkerGroup, CalendarId, StartDate, WorkerGroup, CalendarId, Contract) {
         when "ApplyCommand" {
            refresh;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command ApplyCommand for CopyWarehouseWorkerStructure {
   label = "Apply";
   execute {
      exit "ApplyCommand";
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector WarehouseWorkerSelector for WarehouseWorker {
   label = "${WorkerId} - ${WorkerIdRef.Name} - ${Contract}";
   static WorkerId {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   static WorkerIdRef.Name;
   static Contract;
}

----------------------------------- LISTS -----------------------------------
list WorkerTaskTypeList for WarehouseWorkerTaskType {
   field TaskType;
   field TimeShare {
      format = percentage;
   }
   field ActualTimeShare {
      format = percentage;
   }
   field EfficencyRate {
      format = percentage;
   }
   field ActualEfficiencyRate {
      format = percentage;
   }
   field Status;
}

list WorkerLocationGroupList for WarehouseWorkerLocationGroup {
   lov LocationGroupRef with InventoryLocationGroupSelector using InventoryLocationGroups(Contract) {
      label = "Location Group";
      size = Small;
      validate command {
         execute {
            call GetDescription(LocationGroup) into LocationGroupDescription;
         }
      }
   }
   field LocationGroupDescription;
   field TimeShare {
      format = percentage;
   }
   field ActualTimeShare {
      format = percentage;
   }
   field Status;
}

---------------------------------- DIALOGS ----------------------------------
dialog CopyWarehouseWorkerDialog for CopyWarehouseWorkerStructure {
   label = "Copy Warehouse Worker";
   input(FromContract, FromWorkerId, FromWorkerName, ValidFrom, FromWorkerGroup, FromCalendarId, ToStartDate, ToWorkerGroup, ToCalendarId, ToContract);
   group FromWarehouseWorkerGroup;
   group ToWarehouseWorkerGroup;
   command ApplyCommand {
      enabled = [FromWorkerId != null and FromContract != null and ToWorkerId != null and ToWorkerGroup != null and ToContract != null and ToCalendarId];
      execute {
         call CopyWorker(FromContract, FromWorkerId, ToWorkerId, ToContract, ToStartDate, ToWorkerGroup, ToCalendarId);
         success("Warehouse worker ${FromWorkerId} of site ${FromContract} was copied as ${ToWorkerId} in site ${ToContract}");
         set ToWorkerId = null;
      }
   }
   command Ok {
      enabled = [FromWorkerId != null and FromContract != null and ToWorkerId != null and ToWorkerGroup != null and ToContract != null and ToCalendarId];
      execute {
         call CopyWorker(FromContract, FromWorkerId, ToWorkerId, ToContract, ToStartDate, ToWorkerGroup, ToCalendarId);
         success("Warehouse worker ${FromWorkerId} of site ${FromContract} was copied as ${ToWorkerId} in site ${ToContract}");
         navigate "page/WarehouseWorker/Form?$filter=Contract eq $[ToContract] and WorkerId eq $[ToWorkerId]";
      }
   }
   command Cancel;
}

group FromWarehouseWorkerGroup for CopyWarehouseWorkerStructure {
   label = "Copy From";
   field FromContract {
      visible = [false];
   }
   field FromWorkerId {
      size = Small;
      label = "Worker ID";
   }
   field FromWorkerName {
      label = "Worker Name";
   }
   field ValidFrom {
      label = "Valid From";
   }
   field FromWorkerGroup {
      label = "Worker Group";
   }
   field FromCalendarId {
      label = "Calendar ID";
   }
}

group ToWarehouseWorkerGroup for CopyWarehouseWorkerStructure {
   label = "Copy To";
   lov ToWorkerIdRef with PersonInfoSelector {
      label = "Worker ID";
      description = ToWorkerIdRef.Name;
      validate command {
         enabled = [FromWorkerId = ToWorkerId];
         execute {
            set ToContract = "";
         }
      }
   }
   field ToStartDate {
      label = "Valid From";
   }
   lov WorkerGroupRef with WarehouseWorkerGroupLovSelector using DistinctWorkerGroups(ToContract) {
      label = "Worker Group";
   }
   lov CalendarIdRef with WorkTimeCalendarSelector {
      size = Small;
      label = "Calendar ID";
   }
   lov ToContractRef with UserAllowedSiteLovSelector {
      size = Small;
      label = "Site";
      validate command {
         enabled = [FromWorkerId = ToWorkerId and FromContract = ToContract];
         execute {
            alert("Select a different site to copy the existing warehouse worker.");
         }
      }
   }
}

