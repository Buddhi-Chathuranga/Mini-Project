---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2018-12-18  ChFolk  SCUXXW4-5324, Include fragment InventoryPartBarcodeLovSelector.
-- 2018-10-08  MWerse  SCUXXW4-5324, Converted from dlgChangeWaivDevRejNo using MTG Version: 1.30
---------------------------------------------------------------------------------

fragment ChangeWDRNoAssistant;
component INVENT;
layer Core;
description "Assistant to change  the waiver, deviation, and rejection number for part location records. It is also possible to split part locations into several records. If barcode labels are used, the W/D/R number will be updated for the barcode and you can choose if you want to print the labels.";
include fragment InventoryPartBarcodeLovSelector;
include fragment InventoryPartInStockUivInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant ChangeWDRNoAssistant using ChangeWDRNoSet {
   label = "Change W/D/R No";
   input(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, FromWDRNo, ActivitySeq, HandlingUnitId, PartOwnershipDb, FromAvailabilityControlId, AvailableQty);
   init command {
      execute {
         set Quantity = AvailableQty;
      }
   }

   singlestep {
      group ChangeWDRNoGroup;
      list BarcodesList(BarcodesArray);
   }

   command Ok;
   command Cancel;
}

--------------------------------- COMMANDS ----------------------------------
command Ok for ChangeWDRNoVirtual {
   label = "Ok";
   variable ExistingRecordVar {
      type = Structure(ExistingRecordStruct);
   }
   execute {
      if [Quantity = 0 or Quantity = null] {
         alert("Quantity must have a value.");
         exit;
      }
      if [Quantity > AvailableQty] {
         alert("The specified quantity is greater than the available quantity.");
         exit;
      }
      if [PartOwnershipDb = "CONSIGNMENT"] {
         confirm("Part ${PartNo} is of ownership consignment and therefore, it is recommended that the W/D/R be updated from the purchase receipt instead. Do you still want to continue?") {
            when CANCEL {
               exit;
            }
         }
      }
      call CheckRecordExist(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, ToWDRNo, ActivitySeq, HandlingUnitId) into ExistingRecordVar;
      if [FromAvailabilityControlId != ExistingRecordVar.ToAvailabilityControlId and FromAvailabilityControlId = null] {
         confirm("The Part Availability Control ID will be set to ${ExistingRecordVar.ToAvailabilityControlId}. Do you wish to continue?") {
            when CANCEL {
               exit;
            }
         }
      }
      if [FromAvailabilityControlId != ExistingRecordVar.ToAvailabilityControlId and ExistingRecordVar.ToAvailabilityControlId = null and ExistingRecordVar.ToWDROnhandQty != 0] {
         confirm("The Part Availability Control ID ${FromAvailabilityControlId} will be removed. Do you wish to continue?") {
            when CANCEL {
               exit;
            }
         }
      }
      if [FromAvailabilityControlId != ExistingRecordVar.ToAvailabilityControlId and FromAvailabilityControlId != null and ExistingRecordVar.ToAvailabilityControlId != null] {
         confirm("The Part Availability Control ID will be changed from ${FromAvailabilityControlId} to ${ExistingRecordVar.ToAvailabilityControlId}. Do you wish to continue?") {
            when CANCEL {
               exit;
            }
         }
      }
      call ChangeWDRNo(Objkey, ToWDRNo, Quantity, CatchQuantity);
   }
}
---------------------------------- GROUPS -----------------------------------
group ChangeWDRNoGroup for ChangeWDRNoVirtual {
   label = "Change W/D/R No";
   field FromWDRNo {
      size = Small;
   }
   field ToWDRNo {
      size = Small;
   }
   field Quantity {
      size = Small;
   }
   field CatchQuantity {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------
list BarcodesList for BarcodeVirtual {
   editmode = SingleCellEdit;
   crudactions {
      new {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }
   field Change;
   field Print;
   lov BarcodeIdRef with ReferenceInventoryPartBarcodeLovSelector;
   fieldranking BarcodeIdRef;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ChangeWDRNoSet for ChangeWDRNoVirtual;

--------------------------------- VIRTUALS ----------------------------------
virtual ChangeWDRNoVirtual {
   attribute Contract Text;
   attribute PartNo Text;
   attribute ConfigurationId Text;
   attribute LocationNo Text;
   attribute LotBatchNo Text;
   attribute SerialNo Text;
   attribute EngChgLevel Text;
   attribute FromWDRNo Text {
      label = "From W/D/R No";
      maxlength = 15;
      editable = [false];
   }
   attribute ActivitySeq Number;
   attribute HandlingUnitId Number;
   attribute PartOwnershipDb Text;
   attribute FromAvailabilityControlId Text;
   attribute AvailableQty Number;
   attribute ToWDRNo Text {
      label = "To W/D/R No";
      maxlength = 15;
      required = [true];
      format = uppercase;
   }
   attribute Quantity Number {
      label = "Quantity";
      required = [true];
   }
   attribute CatchQuantity Number {
      label = "Catch Quantity";
   }

   array BarcodesArray() to BarcodeVirtual();
}

virtual BarcodeVirtual {
   attribute Change Boolean {
      label = "Change W/D/R No";
      required = [true];
      editable = [true];
      default = "FALSE";
   }
   attribute Print Boolean {
      label = "Print New Barcode Label";
      required = [true];
      editable = [true];
      default = "FALSE";
   }
   attribute BarcodeId Number {
      label = "Barcode ID";
      required = [true];
      editable = [false];
   }
   reference BarcodeIdRef(BarcodeId) to InventoryPartBarcodeLov(Contract) {
      label = "Barcode ID";
   }
}


---------------------------------- ACTIONS ----------------------------------
action ChangeWDRNo {
   initialcheck MyInventoryPartInStockInitialCheck(ParentKey);
   ludependencies = InventoryPartInStock;
   parameter ParentKey Text;
   parameter ToWDRNo Text;
   parameter Quantity Number;
   parameter CatchQuantity Number;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckRecordExist Structure(ExistingRecordStruct) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter ToWDRNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
}

-------------------------------- STRUCTURES ---------------------------------
structure ExistingRecordStruct {
   attribute ToAvailabilityControlId Text;
   attribute ToWDROnHandQuantity Number;
}