--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-06-30  RasDlk  SC21R2-1036, Added the Shipment Handling Unit tab.
--  2021-02-08  GrGalk  SC2020R1-12289, Added enabled conditions to command PrintTransportTaskCommand by overriding it and added the command in the page level
--  2020-12-01  UdGnlk  SC2020R1-6769, Added the startup mode as search.
--  2020-05-27  RasDlk  SCSPRING20-689, Passed the relevant parameters to GetDetailsTab and GetAggregatedTab functions.
--  2019-08-27  SWiclk  SCUXXW4-23662, Removed fragment WarehouseWorkerLovSelector and moved MovePartsIntoShipmentInventoryDialog to ReportPickingOfPickListLineBase.
--  2019-07-03  Satglk  SCUXXW4-22487, Additional conditions, new, edit added for TransportTaskSingleton.
--  2019-06-21  SURBLK  SCUXXW4-21903, Added status badges and stateindicator.
--  2019-06-18  ErRalk  SCUXXW4-22632, Modified ReportPickAllCommand to enable command when there is no record selection.
--  2019-06-10  ErRalk  SCUXXW4-22186, Added warningsenabled PickSelected and PickAll.
--  2019-06-07  bajelk  SCUXXW4-21878, Added CRUD Action definition in TransportTaskSingleton as required.
--  2019-04-19  ErRalk  SCUXXW4-6560, Changed the visibility of Transport Task groups and tabs to be visible in every language
--  2019-04-18  ErRalk  SCUXXW4-9295, Added CustomerOrderPickList
--  2019-04-01  ChFolk  SCUXXW4-17814, Renamed TransportTaskLinesSearchContext as DemandLineStockResSearchContext.
--  2019-02-19  hadolk  Adding ShopOrderPickList
--  2018-12-13  KoDelk  SCUXXW4-6560, Converted frmWarehouseTaskManager using MTG Version: 1.34
---------------------------------------------------------------------------------
client WarehouseTask;
component INVENT;
layer Core;
projection WarehouseTaskHandling;
include fragment TransportTask;
@DynamicComponentDependency SHPORD
include fragment ReportPickingOfShopOrderPickList;

@DynamicComponentDependency SHPMNT
include fragment ReportPickingOfPickListLineBase;

warningsenabled = WarehouseTask;
@DynamicComponentDependency SHPMNT
warningsenabled = PickSelected, PickAll;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry WarehouseTaskNavEntry parent InventNavigator.WarehouseManagementWarehouseTasks at index 100 {
      label = "Warehouse Task";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using WarehouseTaskSet {
   label = "Warehouse Task";
   startupmode = search;
   stateindicator WarehouseTaskStateIndicator;
   selector WarehouseTaskSelector;
   group WarehouseTaskManagerGroup;
   --group WarehouseTaskGeneralGroup;
   arrange {
      group DateTimeInformationGroup;
      group SourceInformationGroup;
   }
   @DynamicComponentDependency SHPORD
   singleton ShopOrderPickListSingleton(ShopOrderPickListArray);
   @DynamicComponentDependency SHPORD
   group ShopOrderIssuePickLineGroup bind ShopOrderPickListSingleton {
      label = "Shop Order Pick List";
      visible = [TaskType = "ShopOrderPickList"];
   }

   @DynamicComponentDependency SHPMNT
   singleton CustomerOrderPickListSingleton(CustomerOrderPickListArray);

   @DynamicComponentDependency SHPMNT
   group PickReportDiffGroup bind CustomerOrderPickListSingleton {
      label = "Customer Order Pick List";
      visible = [false];
   }

   singleton TransportTaskSingleton(TransportTaskArray);
   arrange {
      group TransportTaskGroup bind TransportTaskSingleton {
         visible = [TaskType = "TransportTask"];
      }
      group HasLinesInStatusGroup bind TransportTaskSingleton {
         visible = [TaskType = "TransportTask"];
      }
   }

   tabs {
      tab {
         label = "Details";
         visible = [TaskType = "ShopOrderPickList"];
         @DynamicComponentDependency SHPORD
         //         list ReportPickingSingleList(ShopMaterialPickLineArray) bind ShopOrderPickListSingleton;
         list ReportPickingSingleList using GetReportPickingSingleList(SourceRef1);
      }
      tab {
         visible = [(TaskType = "ShopOrderPickList") and(PickToParentQty = null)];
         label = "Aggregated";
         @DynamicComponentDependency SHPORD
         list AggregatedList using GetAggregatedSearchContextList(AggregatedTabVisibleLevel.ShowOnlyTopLevel, SourceRef1, TaskId) {
            searchcontext AggregatedTabVisibleLevel {
               defaults = GetAggregatedTabSearchContextDefaults();
            }
         }
         @DynamicComponentDependency SHPORD
         list AggregatedDetailsList(PickListDetailsArray) bind AggregatedList {
            display = Nested;
         }
      }
      tab {
         label = "Consolidation";
         visible = [TaskType = "ShopOrderPickList"];
         @DynamicComponentDependency SHPORD
         group ReportPickingConsolidationGroup1 bind ShopOrderPickListSingleton;
         arrange {
            @DynamicComponentDependency SHPORD
            group ShopOrderParametersGroup bind ShopOrderPickListSingleton;
            @DynamicComponentDependency SHPORD
            group SOMaterialaParametersGroup bind ShopOrderPickListSingleton;
         }
         @DynamicComponentDependency SHPORD
         group AdditionalParametersGroup bind ShopOrderPickListSingleton;
      }
      tab {
         label = "Details";
         visible = [TaskType = "TransportTask"];

         list TransportTaskLineDetailsList using GetTransportTaskLineDetails(DemandLineStockReservationSearchContext.ShowDetails, SourceRef1TransportTaskId) {
            searchcontext DemandLineStockReservationSearchContext {
               defaults = GetDemandLineStockReservationSearchContextDefaults();
            }
            copyoncruddefault(TransportTaskId, FromContract, ToContract) to(TransportTaskId, FromContract, ToContract);
         }
      }
      tab {
         label = "Aggregated";
         visible = [TaskType = "TransportTask"];

         list AggregatedHandlingUnitsList using GetAggregatedHandlingUnitsOnTransportTask(HandlingUnitsSearchContext.ShowHuLevel, SourceRef1TransportTaskId) {
            label = "";
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
            copyoncruddefault(TransportTaskId) to(TransportTaskId);
         }
         list AggregatedTransportTaskLineList(AggregateHandlingUnitsArray)bind AggregatedHandlingUnitsList {
            label = "";
         }
      }
      tab {
         label = "Compiled View";
         visible = [TaskType = "TransportTask"];

         group TransportTaskCompiledViewGroup bind TransportTaskSingleton;
         group Transport_FromGroup bind TransportTaskSingleton;
         group Transport_ToGroup bind TransportTaskSingleton;
         group ForwardToGroup bind TransportTaskSingleton;
         group SourceRefGroup bind TransportTaskSingleton;
      }
      tab {
         visible = [TaskType = "TransportTask" and SourceRef1 != null and not TransportTaskRef.CompletelyExecuted];
         label = "Available Single Lines";
         list AvailableTransportTaskLinesList using GetAvailableTransportTaskLines(DemandLineStockReservationSearchContext.ShowDetails, SourceRef1TransportTaskId, TransportTaskRef.FromContract, TransportTaskRef.ToContract, TransportTaskRef.FromLocationGroup, TransportTaskRef.ParentFixedDb) {
            searchcontext DemandLineStockReservationSearchContext {
               defaults = GetDemandLineStockReservationSearchContextDefaults();
            }
         }
      }
      tab {
         visible = [TaskType = "TransportTask" and SourceRef1 != null and not TransportTaskRef.CompletelyExecuted];
         label = "Available Handling Units";
         list AvailableHandlingUnitsOnTransportTaskList using GetAvailableHandlingUnitsOnTransportTask(HandlingUnitsSearchContext.ShowHuLevel, SourceRef1TransportTaskId, TransportTaskRef.FromContract, TransportTaskRef.ToContract, TransportTaskRef.FromLocationGroup, TransportTaskRef.ParentFixedDb) {
            label = "";
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
         }
         list TransportTasklinesOnAvailableHandlingUnitsList(HandlingUnintsOnTransportTaskArray)bind AvailableHandlingUnitsOnTransportTaskList {
            label = "";
         }
      }

      tab {
         visible = [TaskType = "CustomerOrderPickList"];
         label = "Details";
         @DynamicComponentDependency SHPMNT
         list PickReportDiffSingleList using GetDetailsTab(DemandLineStockReservationSearchContext.ShowDetails, SourceRef1, SenderType, Contract) {
            searchcontext DemandLineStockReservationSearchContext {
               defaults = GetDemandLineStockReservationSearchContextDefaults();
            }
         }

      }

      tab {
         visible = [TaskType = "CustomerOrderPickList"];
         label = "Aggregated";
         @DynamicComponentDependency SHPMNT
         list PickAggregatedList using GetAggregatedTab(HandlingUnitsSearchContext.ShowHuLevel, SourceRef1, PickListType, Contract, PickByChoiceOption, SenderType, Contract) {
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
         }
         @DynamicComponentDependency SHPMNT
         list PickReportDiffSingleListDetail(DetailsArray) bind PickAggregatedList {
            display = Nested;
         }
      }

      tab {
         visible = [TaskType = "CustomerOrderPickList"];
         label = "Shipment Handling Units";
         @DynamicComponentDependency SHPMNT
         list PickShipmentHandlingUnitList using GetShipmentHandlingUnitTab(SourceRef1, Contract, PickListType, SenderType, Contract);

         @DynamicComponentDependency SHPMNT
         list PickReportHandlingUnitReservationDetail(ReservationDetailsArray) bind PickShipmentHandlingUnitList {
            display = Nested;
         }
      }
   }

   commandgroup PrintPickListCommandGroup {
      @DynamicComponentDependency SHPMNT
      command PrintShipmentPickListCommand bind CustomerOrderPickListSingleton;
   }

   commandgroup CommandGroupMain {
      @DynamicComponentDependency SHPORD
      command ReportPickingofAllMaterialCommand bind ShopOrderPickListSingleton;
      @DynamicComponentDependency SHPORD
      command ReportPickingAccordingtoParentQtyCommand bind ShopOrderPickListSingleton;
      @DynamicComponentDependency SHPORD
      command ReportArchiveCommand bind ShopOrderPickListSingleton;
      @DynamicComponentDependency SHPORD
      command PrintPickListCommand bind ShopOrderPickListSingleton;
   }
   command PrintTransportTaskCommand bind TransportTaskSingleton;
}


--------------------------------- COMMANDS ----------------------------------
@Override
@DynamicComponentDependency SHPMNT
command ReportPickAllCommand for PickReservation {
   enabled = [Objstate = "Started" and component.PickReportDiffSingleList.SelectionCount = 0];
}

@Override
@DynamicComponentDependency SHPMNT
command ReportPickSelectedCommand for PickReservation {
   enabled = [OriginalQtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command PickByChoiceCommand for PickReservation {
   enabled = [ParentPickListType = "CUST_ORDER_PICK_LIST" and ParentPickByChoiceOption != "NOT_ALLOWED" and BlockedForPickByChoice != "TRUE" and QtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command ReportPickingonOutermostHUCommand for PickReservation {
   enabled = [ParentPickListType = "CUST_ORDER_PICK_LIST" and OutermostHandlingUnitID != null and QtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command InputUoMParametersCommand for PickReservation {
   enabled = [ParentPickListType = "CUST_ORDER_PICK_LIST" and InputUomGroupId != null and QtyToPick != 0 and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command ViewConfigurationCommand for PickReservation {
   enabled = [ConfigurationId != "*" and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command IdentifySerialsCommand for PickReservation {
   enabled = [SerialNo = "*" and ReceiptAndIssueSerialTracking = "TRUE" and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command ReportPickOnAggregatedCommand for PickShipment {
   enabled = [(count(*, HandlingUnitId != null) = 0 or count(*, HandlingUnitId = null) = 0) and Picked = false and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command UnreserveOnAggregatedCommand for PickShipment {
   enabled = [(count(*, HandlingUnitId != null) = 0 or count(*, HandlingUnitId = null) = 0) and Picked = false and WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPMNT
command UnreserveCommand for PickReservation {
   enabled = [OriginalQtyToPick != 0 and WarehouseObjstate = "Started"];
}

-- Commands for Shop Order Pick List
@Override
@DynamicComponentDependency SHPORD
command CmdReportPickingCommand for ShopMaterialPickLine {
   enabled = [WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPORD
command CmdPickByChoiceCommand for ShopMaterialPickLine {
   enabled = [ShopMaterialAssignRef.PickByChoiceBlocked and WarehouseObjstate = "Started" and PickByChoiceOption != "NOT_ALLOWED"];
}

@Override
@DynamicComponentDependency SHPORD
command CmdUnreservePickListLineCommand for ShopMaterialPickLine {
   enabled = [WarehouseObjstate = "Started"];
}

@Override
@DynamicComponentDependency SHPORD
command CmdCreateCountReportCommand for ShopMaterialPickLine {
   enabled = [WarehouseObjstate = "Started"];
}

@Override
command PrintTransportTaskCommand for TransportTask {
   enabled = [parent.Objstate = "Planned" or parent.Objstate = "Released" or parent.Objstate = "Started" or parent.Objstate = "Parked"];
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector WarehouseTaskSelector for WarehouseTask {
   label = "${TaskId} - ${TaskType} - ${Contract} - ${WorkerId} - ${WorkerGroup}";
   static TaskId;
   badge Objstate {
      label = "Status";
      emphasis Complementary2 = [Objstate = "Planned"];
      emphasis Complementary5 = [Objstate = "Released"];
      emphasis Complementary3 = [Objstate = "Started"];
      emphasis Complementary4 = [Objstate = "Cancelled"];
      emphasis Complementary7 = [Objstate = "Parked"];
      emphasis Complementary1 = [Objstate = "Closed"];
      style = TextOnly;
   }
   static TaskType;
   static Contract;
   static WorkerId;
   static WorkerGroup;
}

---------------------------------- GROUPS -----------------------------------
group WarehouseTaskManagerGroup for WarehouseTask {
   label = "";
   field TaskId {
      size = Small;
   }
   field TaskType {
      size = Small;
   }
   lov SiteRef with SiteSelector {
      description = SiteRef.Description;
      size = Small;
   }
   field WorkerIdRef {
      contactwidget {
         enabled = [true];
         source = Person;
      }
      size = Small;
   }
   lov LocationGroupRef with InventoryLocationGroupSelector {
      description = LocationGroupRef.Description;
   }
   lov WorkerGroupRef with WarehouseWorkerGroupSelector {
      description = WorkerGroupRef.Description;
   }

   field Priority {
      size = Small;

   }
   lov WarehouseTaskParkReasonRef with WarehouseTaskParkReasonSelector {
      description = WarehouseTaskParkReasonRef.Description;
   }
}
group DateTimeInformationGroup for WarehouseTask {
   label = "Date/Time";
   collapsed = [true];

   field RequestedDateFinished;
   field TotalPlannedTimeNeeded;
   field LatestStartDate;
   field ActualDateStarted;
   field ExpectedFinishDate;
}
group SourceInformationGroup for WarehouseTask {
   label = "Source";
   collapsed = [true];

   field Info {
      size = FullWidth;
      multiline = true;
   }
   field SourceRef1;
   // Created this field to handle data type conversion issues in Aurena client
   field SourceRef1TransportTaskId {
      visible = [false];
      searchable = false;
   }

}


----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator WarehouseTaskStateIndicator for WarehouseTask {
   state "Planned" {
      completed = 25%;
      emphasis Complementary2 = [Objstate = "Planned"];
   }
   state "Released" {
      completed = 50%;
      emphasis Complementary5 = [Objstate = "Released"];
   }
   state "Started" {
      completed = 75%;
      emphasis Complementary3 = [Objstate = "Started"];
   }
   state "Parked" {
      completed = 100%;
      emphasis Complementary7 = [Objstate = "Parked"];
   }
   state "Closed" {
      completed = 100%;
      emphasis Complementary1 = [Objstate = "Closed"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis Complementary4 = [Objstate = "Cancelled"];
   }
   fieldorder = Planned, Released, Started, Parked, Closed, Cancelled;
}

--------------------------------- SINGLETON ---------------------------------
singleton TransportTaskSingleton for TransportTask {
   crudactions {
      delete {
         enabled = [true];
      }
      edit {
         enabled = [true];
      }
      new {
         enabled = [false];
      }
   }
}

@DynamicComponentDependency SHPORD
singleton ShopOrderPickListSingleton for ShopMaterialPickList;


@DynamicComponentDependency SHPMNT
singleton CustomerOrderPickListSingleton for ShipmentPickList;

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------

//! TODO: Take necessary steps to handle following construct(s) found in 'frmWarehouseTaskManager'


// --- Late Bind Methods ---
// 1. vrtActivate
//    Action: Investigate method content and reimplement logic
// 2. vrtDataSourceInquireSave
//    Action: Investigate method content and reimplement logic
// 3. vrtFrameStartupUser
//    Action: Investigate method content and reimplement logic
// 4. vrtTabActivateFinish
//    Action: Investigate method content and reimplement logic
//    Used in Concept: Tabs (1)

// --- Event Handlers ---
// 1. frmWarehouseTaskManager_WindowActions
//    Action: Investigate method content and reimplement logic
// 2. frmWarehouseTaskManager_OnPM_DataSourceQueryFieldName
//    Action: Investigate method content and reimplement logic
// 3. frmWarehouseTaskManager_OnPM_DataSourcePopulate
//    Action: Investigate method content and reimplement logic
// 4. frmWarehouseTaskManager_OnPM_DataSourceSave
//    Action: Investigate method content and reimplement logic
// 5. frmWarehouseTaskManager_OnPM_DataSourceUserWhere
//    Action: Investigate method content and reimplement logic
// 6. ecmbTaskId_WindowActions
//    Action: Investigate method content and reimplement logic
// 7. ecmbTaskId_OnPM_DataItemPopulate
//    Action: Investigate method content and reimplement logic
// 8. ecmbTaskId_OnPM_DataItemClear
//    Action: Investigate method content and reimplement logic
// 9. dfsWorkerId_WindowActions
//    Action: Investigate method content and reimplement logic
// 10. dfsWorkerId_OnPM_DataItemValidate
//    Action: Investigate method content and reimplement logic

// --- Methods ---
// 1. TabEnable
//    Action: Investigate method content and reimplement logic
// 2. BringTabToTop
//    Action: Investigate method content and reimplement logic
// 3. Tabs
//    Action: Investigate method content and reimplement logic
//    Used in Concept: Tabs (1)
// 4. DataSourceInquireSave
//    Action: Investigate method content and reimplement logic
// 5. TabActivateFinish
//    Action: Investigate method content and reimplement logic
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          :i_hWndFrame.frmWarehouseTaskManager.dfsState := &AO.Warehouse_Task_API.Get_State(:i_hWndFrame.frmWarehouseTaskManager.ecmbTaskId.i_sMyValue)

// --- Messages ---
// 1. PM_DataSourceQueryFieldName
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_OnPM_DataSourceQueryFieldName
// 2. PM_DataSourceQueryFieldName
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_OnPM_DataSourceQueryFieldName
// 3. PM_DataSourcePopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_OnPM_DataSourcePopulate
// 4. PM_DataSourceSave
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_OnPM_DataSourceSave
// 5. PM_DataSourcePopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_OnPM_DataSourceSave
// 6. PM_DataSourceUserWhere
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_OnPM_DataSourceUserWhere
// 7. PM_DataSourceUserWhere
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_OnPM_DataSourceUserWhere
// 8. PM_DataItemPopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in ecmbTaskId_OnPM_DataItemPopulate
// 9. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in ecmbTaskId_OnPM_DataItemClear
// 10. PM_DataSourceQueryFieldName
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_WindowActions
// 11. PM_DataSourcePopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_WindowActions
// 12. PM_DataSourceSave
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_WindowActions
// 13. PM_DataSourceUserWhere
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmWarehouseTaskManager_WindowActions
// 14. PM_DataItemPopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in ecmbTaskId_WindowActions
// 15. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in ecmbTaskId_WindowActions
// 16. PM_DataItemValidate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsWorkerId_WindowActions
//    Used in Concept: Validate command (2)

// --- Detected Concepts ---
// 1. Tabs: Handling of tabs
//    http://techblogs/designguide/?page_id=276&section=design-patterns - Design patterns for tabs
//    http://techblogs/designguide/?page_id=276&section=checklist - Checklist - Redesigning master detail tab form windows
//    http://techblogs/designguide/?page_id=276&section=master-detail-tab-form-windows - Master detail tab form windows
//    http://techblogs/designguide/?page_id=276&section=container-tab-form-windows - Container tab form windows
//    http://techblogs/designguide/?page_id=276&section=flattening-tabs - Flattening multi-level tabs
//    http://techblogs/designguide/?page_id=276&section=examples-of-tabs - Examples of redesigning tabs as sections separate pages sub-menu pages or tabs
// 2. Validate command: Fired when a user edits a field and then leaves it
//    http://techblogs/uxx/?p=2644 - Validate command

