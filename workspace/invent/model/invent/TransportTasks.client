---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2021-08-11  WaSalk  Bug 160262 (SCZ-15639), Modified PrintTransportTaskCommand to enable for executed transport tasks.
-- 2021-08-11          Added confirm messege to PrintTransportTaskCommand informing printing date will differ for already executed transport tasks.
---2021-07-16  BwItLk  Bug 159883 (SCZ-15225), Modified PrintedFlag to PrintedFlagDb.
-- 2019-06-06  JaThlk  SCUXXW4-21740, Fixed the issue in Identify serials assistant and Concatenated the part no and description.
-- 2019-06-06          And fixed the issue in enable condition of command Execute.
-- 2018-11-04  JaThlk  SCUXXW4-7347, Included SequenceGenerator Assistant
-- 2018-05-04  MWerse  SCUXXW4-7345, Converted from tbwTransportTask using MTG Version: 1.17
---------------------------------------------------------------------------------

client TransportTasks;
component INVENT;
layer Core;
projection TransportTasksHandling;

include fragment InventoryLocation17Selector;
include fragment InventoryPartInStockLov3Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment IdentifySerialsInMultipleLocationsAssistant;
include fragment TemporaryPartTrackingSerialSelector;
warningsenabled = CreateSerialSequence;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry TransportTasksNavEntry parent InventNavigator.WarehouseManagementPartHandling at index 600 {
      label = "Transport Tasks";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using TransportTasks {
   label = "Transport Tasks";
   startupmode = search;
   list TransportTaskList {
      details = "page/TransportTask/Form?$filter=TransportTaskId eq $[TransportTaskId]";
   }
}

----------------------------------- LISTS -----------------------------------
list TransportTaskList for TransportTask {
   field TransportTaskId;
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      label = "Part";
      size = Small;
      description = Description;
   }
   field ConfigurationIdRef;
   field FixedDb {
      size = Small;
   }
   field PrintedFlagDb {
      size = Small;
   }
   lov FromContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov FromLocationNoRef with ReferenceInventoryPartInStockLov3Selector {
      size = Small;
   }
   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov ToLocationNoRef with ReferenceInventoryLocation17Selector {
      size = Small;
   }
   lov ForwardToLocationNoRef with ReferenceInventoryLocation17Selector {
      size = Small;
   }
   field OrderType {
      size = Large;
   }
   field OrderRef1 {
      size = Small;
   }
   field OrderRef2 {
      size = Small;
   }
   field OrderRef3 {
      size = Small;
   }
   field OrderRef4 {
      size = Small;
   }
   field Destination {
      size = Large;
   }
   field FromWarehouseId {
      size = Small;
      label = "From Warehouse ID";
   }
   field FromBayId {
      size = Small;
      label = "From Bay ID";
   }
   field FromRowId {
      size = Small;
      label = "From Row ID";
   }
   field FromTierId {
      size = Small;
      label = "From Tier ID";
   }
   field FromBinId {
      size = Small;
      label = "From Bin ID";
   }
   field ToWarehouseId {
      size = Small;
      label = "To Warehouse ID";
   }
   field ToBayId {
      size = Small;
      label = "To Bay ID";
   }
   field ToRowId {
      size = Small;
      label = "To Row ID";
   }
   field ToTierId {
      size = Small;
      label = "To Tier ID";
   }
   field ToBinId {
      size = Small;
      label = "To Bin ID";
   }
   field CreateDate {
      showonlydate = [true];
   }
   field NoofSerialstoIdentify;
   field HasLinesInCreatedStatus {
      size = Small;
   }
   field HasLinesInPickedStatus {
      size = Small;
   }
   field HasLinesInExecutedStatus {
      size = Small;
   }

   commandgroup CommandGroup {

      command Execute;
      command BulkExecute;
      command ExecutePickedLines;
      command BulkExecutePickedLines;
      command PrintTransportTask;
   }
}

--------------------------------- COMMANDS ----------------------------------
command Execute for TransportTask {
   label = "Execute";
   mode = SelectedRecords;
   enabled = [(count(*, NoofSerialstoIdentify > 0) > 0) and(HasLinesInCreatedStatus = true or HasLinesInPickedStatus = true)];
   variable PartTrackingSessionId;
   variable TransportTaskIdVar Text;
   execute {
      if [DestinationDb = "Y" and ForwardToLocationNo = null] {
         confirm("The parts on the transport task will be put in transit for the destination location.");
      }
      else {
         confirm("This will move the parts on the transport task to the destination location.");
      }
      if [NoofSerialstoIdentify > 0] {
         call GetStringValue(TransportTaskId) into TransportTaskIdVar;
         assistant IdentifySerialsInMultipleLocAssistant("33", TransportTaskIdVar, null, null, null, null, FromContract, PartNo, NoofSerialstoIdentify) into(PartTrackingSessionId) {
            when OK {
               call ExecuteAll(TransportTaskId, PartTrackingSessionId);
            }
         }
      }
      else {
         call ExecuteAll(TransportTaskId, PartTrackingSessionId);
      }
   }
}

command BulkExecute for TransportTask {
   label = "Execute";
   mode = SelectedRecords;
   enabled = [(count(*, NoofSerialstoIdentify > 0) = 0) and(HasLinesInCreatedStatus = true or HasLinesInPickedStatus = true)];
   variable PartTrackingSessionId;
   bulkexecute {
      ifall [DestinationDb = "Y" and ForwardToLocationNo = null] {
         confirm("The parts on the transport task will be put in transit for the destination location.");
      }
      else {
         confirm("This will move the parts on the transport task to the destination location.");
      }
      bulkcall ExecuteAll(TransportTaskId, PartTrackingSessionId);
   }
}

command ExecutePickedLines for TransportTask {
   label = "Execute Picked Lines";
   mode = SelectedRecords;
   enabled = [NoofSerialstoIdentify > 0 and HasLinesInPickedStatus = true];
   variable PartTrackingSessionId;
   execute {
      if [NoofSerialstoIdentify > 0] {
         assistant IdentifySerialsInMultipleLocAssistant("33", TransportTaskId, null, null, null, null, FromContract, PartNo, NoofSerialstoIdentify) into(PartTrackingSessionId) {
            when OK {
               call ExecutePicked(TransportTaskId, PartTrackingSessionId);
            }
         }
      }
      else {
         call ExecutePicked(TransportTaskId, PartTrackingSessionId);
      }
   }
}

command BulkExecutePickedLines for TransportTask {
   label = "Execute Picked Lines";
   mode = SelectedRecords;
   enabled = [(NoofSerialstoIdentify = 0 or NoofSerialstoIdentify = null) and HasLinesInPickedStatus = true];
   variable PartTrackingSessionId;
   bulkexecute {
      bulkcall ExecutePicked(TransportTaskId, PartTrackingSessionId);
   }
}

command PrintTransportTask for TransportTask {
   label = "Print Transport Task";
   mode = SelectedRecords;
   enabled = [NumberofLines > 0];
   variable ResultKeysStr;
   bulkexecute {
      ifall [IsCompletelyExecuted = "TRUE"] {
         confirm("One or more selected transport tasks have already been executed. There could be differences in the data included in the printed transport task, from the executed date to the current date.") {
            when CANCEL {
               exit;
            }
         }
      }
      call GetReportResultKeyList(Selection) into ResultKeysStr;
      printdialog ResultKeysStr;
   }
}
