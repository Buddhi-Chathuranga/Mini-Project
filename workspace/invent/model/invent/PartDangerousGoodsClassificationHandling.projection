-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-07-15  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-05-22  fgusse  SCUXXW4-20687, Added ludependencies for DocumentText
-- 2018-10-23  SURBLK  SCUXXW4-6380, Converted from frmPartCatalogInventAttrib using MTG Version: 1.31
-----------------------------------------------------------------------------

projection PartDangerousGoodsClassificationHandling;
component INVENT;
layer Core;
description "Use this API to select the part that you want to either view or change; you can also use the window to enter a part number and a description for a new part.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment CopyDangerousGoodsClassificationTemplateAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartCatalogInventAttributeSet for PartCatalogInventAttributes;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartCatalogInventAttributes using PartCatalogInventAttrib {
   crud = Create, Read, Update;
   from = "part_catalog_invent_attrib";
   exec = "PART_CATALOG_INVENT_ATTRIB_API";
   ludependencies = DocumentText;

   keys = PartNo {
      where = "PART_NO = :PartNo";
   }
   use attributes = HseContract, HseContract, AdditionalShipDescId, FlashPoint, UnNo, PackagingGroupId, ColdSensitive, PackagingMaterialId, ImdgClassId, ImdgSubsidiaryRisk1Id, ImdgSubsidiaryRisk2Id, ImdgLimitedQuantity, EmSNo, SegregationCode, MarinePollutant, ImdgCommentId, ImdgSpecialProvision, AdrRidClassId, AdrSubsidiaryRisk1Id, AdrSubsidiaryRisk2Id, AdrLimitedQuantity, TunnelCode, AdrCommentId, AdrSpecialProvision, IataDgrClassId, IataSubsidiaryRisk1Id, IataSubsidiaryRisk2Id, IataLimitedQuantity, IataCommentId, IataSpecialProvision, NoteId;
   attribute ProperShippingNameId Text {
      fetch = "proper_shipping_name_id";
      label = "Proper Shipping Name";
      maxlength = 10;
      format = uppercase;
   }

   attribute NoteId Number {
      maxlength = 10;
   }

   attribute NOS Boolean("TRUE", "FALSE") {
      fetch = "n_o_s_db";
      label = "N.O.S";
      required = [true];
   }
   attribute ModifiedDate Date {
      fetch = "TRUNC(modified_date)";
      label = "Modified Date";
      editable = [false];
   }

   attribute ColdSensitive Enumeration(PartColdSensitive) {
      fetch = "cold_sensitive_db";
      label = "Cold Sensitive";
      required = [true];

   }

   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "DocumentText";
      editable = [false];
      required = [true];
   }
   attribute TemplatePart Boolean("TRUE", "FALSE") {
      fetch = "template_part_db";
      label = "Template Part";
      editable = [ETag != null];
      required = [true];
   }
   attribute MarinePollutant Enumeration(PartMarinePollutant) {
      fetch = "marine_pollutant_db";
      label = "Marine Pollutant";
      required = [true];
   }
   attribute AdrEnvironmentalHazard Boolean("TRUE", "FALSE") {
      fetch = "adr_environmental_hazard_db";
      label = "ADR Environmental Hazard";
      required = [true];

   }
   attribute IataEnvironmentalHazard Boolean("TRUE", "FALSE") {
      fetch = "iata_environmental_hazard_db";
      label = "IATA Environmental Hazard";
      required = [true];
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part";
   }
   reference ProperShippingNameIdRef(ProperShippingNameId) to ProperShippingName(ProperShippingNameId) {
      label = "Proper Shipping Name";
   }
   reference HseContractRef(HseContract) to UserAllowedSiteLov(Contract) {
      label = "HSE Site";
   }
   reference AdditionalShipDescIdRef(AdditionalShipDescId) to AdditionalShippingDesc(AdditionalShippingDescId) {
      label = "Additional Shipping Description";
   }
   reference PackagingGroupIdRef(PackagingGroupId) to PackagingGroup(PackagingGroupId) {
      label = "Packaging Group";
   }
   reference PackagingMaterialIdRef(PackagingMaterialId) to PackagingMaterial(PackagingMaterialId) {
      label = "Packaging Material";
   }
   reference ImdgClassIdRef(ImdgClassId) to TransportHazardClass(HazardClass) {
      label = "IMDG Class";
   }
   reference ImdgSubsidiaryRisk1IdRef(ImdgSubsidiaryRisk1Id) to TransportHazardClass(HazardClass) {
      label = "Subsidiary Risk 1";
   }
   reference ImdgSubsidiaryRisk2IdRef(ImdgSubsidiaryRisk2Id) to TransportHazardClass(HazardClass) {
      label = "Subsidiary Risk 2";
   }
   reference ImdgLimitedQuantityRef(ImdgLimitedQuantity) to TransportLimitedQuantity(LimitedQuantity) {
      label = "Limited Quantity";
   }
   reference ImdgCommentIdRef(ImdgCommentId) to TransportHazardComment(HazardCommentId) {
      label = "IMDG Comment";
   }
   reference AdrRidClassIdRef(AdrRidClassId) to TransportHazardClass(HazardClass) {
      label = "ADR/RID Class";
   }
   reference AdrSubsidiaryRisk1IdRef(AdrSubsidiaryRisk1Id) to TransportHazardClass(HazardClass) {
      label = "Subsidiary Risk 1";
   }
   reference AdrSubsidiaryRisk2IdRef(AdrSubsidiaryRisk2Id) to TransportHazardClass(HazardClass) {
      label = "Subsidiary Risk 2";
   }
   reference AdrLimitedQuantityRef(AdrLimitedQuantity) to TransportLimitedQuantity(LimitedQuantity) {
      label = "Limited Quantity";
   }
   reference TunnelCodeRef(TunnelCode) to TunnelCode(TunnelCode) {
      label = "Tunnel Code";
   }
   reference AdrCommentIdRef(AdrCommentId) to TransportHazardComment(HazardCommentId) {
      label = "ADR Comment";
   }
   reference IataDgrClassIdRef(IataDgrClassId) to TransportHazardClass(HazardClass) {
      label = "IATA DGR Class";
   }
   reference IataSubsidiaryRisk1IdRef(IataSubsidiaryRisk1Id) to TransportHazardClass(HazardClass) {
      label = "Subsidiary Risk 1";
   }
   reference IataSubsidiaryRisk2IdRef(IataSubsidiaryRisk2Id) to TransportHazardClass(HazardClass) {
      label = "Subsidiary Risk 2";
   }
   reference IataLimitedQuantityRef(IataLimitedQuantity) to TransportLimitedQuantity(LimitedQuantity) {
      label = "Limited Quantity";
   }
   reference IataCommentIdRef(IataCommentId) to TransportHazardComment(HazardCommentId) {
      label = "IATA Comment";
   }

   array PartcaDangerousSubstanceArray(PartNo) to PartcaDangerousSubstance(PartNo);

}

@Override
entity PartcaDangerousSubstance {
   crud = Create, Read, Update, Delete;
   from = "partca_dangerous_substance";
   exec = "PARTCA_DANGEROUS_SUBSTANCE_API";
   keys = PartNo, SubstanceNo {
      where = "PART_NO = :PartNo and SUBSTANCE_NO = :SubstanceNo";
   }
   exclude attributes = AdrEnvironmentalHazard, IataEnvironmentalHazard, MarinePollutant, ResponsibleForPsn;
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SubstanceNo Text {
      fetch = "substance_no";
      label = "Substance No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SubstanceDescription Text {
      fetch = "Substance_API.Get_Description(substance_no)";
      label = "Substance Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ResponsibleForPsnDb Boolean("TRUE", "FALSE") {
      fetch = "responsible_for_psn_db";
      label = "Component Responsible for Proper Shipping Name";
   }
   attribute MarinePollutantDb Boolean("TRUE", "FALSE") {
      fetch = "marine_pollutant_db";
      label = "Marine Pollutant";
   }
   attribute AdrEnvironmentalHazardDb Boolean("TRUE", "FALSE") {
      fetch = "adr_environmental_hazard_db";
      label = "ADR Environmental Hazard";
   }
   attribute IataEnvironmentalHazardDb Boolean("TRUE", "FALSE") {
      fetch = "iata_environmental_hazard_db";
      label = "IATA Environmental Hazard";
   }
   reference SubstanceNoRef(SubstanceNo) to Substance(SubstanceNo) {
      label = "Substance No";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetUnNoAndNos Structure(UnNoAndNosStructure) {
   parameter ProperShippingNameId Text;
}

function FilterPackagingMaterial List<Entity(PackagingMaterial)> {
   where = "objstate = 'Active'";
}

function FilterAdditionalShipDesc List<Entity(AdditionalShippingDesc)> {
   where = "objstate = 'Active'";
}

function FilterPackagingGroup List<Entity(PackagingGroup)> {
   where = "objstate = 'Active'";
}

function FilterLimitedQuantity List<Entity(TransportLimitedQuantity)> {
   where = "objstate = 'Active'";
}

function FilterTunnelCode List<Entity(TunnelCode)> {
   where = "objstate = 'Active'";

}

-------------------------------- STRUCTURES ---------------------------------
structure UnNoAndNosStructure {
   attribute UnNo Text;
   attribute Nos Boolean;
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------