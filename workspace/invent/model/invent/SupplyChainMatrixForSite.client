--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-01-27  Aabalk  SCSPRING20-1687, Excluded remote warehouse shipment locations from ShipInventoryLocationNoRef.
-- 2018-10-22  Tmahlk  SCUXXW4-6492, Converted from frmSupplyChainMatrixForSite using MTG Version: 1.33
--------------------------------------------------------------------------------------

client SupplyChainMatrixForSite;
component INVENT;
layer Core;
projection SupplyChainMatrixForSiteHandling;
include fragment SiteUivSelector;
include fragment NonRemoteWhseShipLocationSelector;

@DynamicComponentDependency PURCH
include fragment ExternalSupplierLovSelector;
@DynamicComponentDependency PURCH
include fragment SuppAddressMatrixLovSelector;

@DynamicComponentDependency ORDER
include fragment FreightZoneJoinSelector;
@DynamicComponentDependency ORDER
include fragment ExternalCustomerLovSelector;
@DynamicComponentDependency ORDER
include fragment CustAddressMatrixLovSelector;
@DynamicComponentDependency SHPMNT
include fragment ShipmentTypeSelector;

warningsenabled = Site;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SupplyChainMatrixforSiteNavEntry parent EnterpNavigator.SiteMenu at index 900 {
      label = "Supply Chain Matrix for Site";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using SiteSet {
   label = "Supply Chain Matrix for Site";
   startupmode = search;
   selector SiteSelector;
   group SupplyChainMatrixForSiteGroup;
   tabs {
      tab {
         label = "From Supply Site";
         list FromSupplySiteLeadtimeList(FromSupplySiteLeadtimeArray);
         list FromSupplySitePartLeadtimeList(FromSupplySitePartLeadtimeArray) bind FromSupplySiteLeadtimeList {
            display = Nested;
         }
      }
      tab {
         label = "To Demand Site";
         list ToDemandSiteLeadtimeList(ToDemandSiteLeadtimeArray);
         list ToDemandSitePartLeadtimeList(FromSupplySitePartLeadtimeArray) bind ToDemandSiteLeadtimeList {
            display = Nested;
         }
      }
      @DynamicComponentDependency ORDER
      tab {
         label = "To External Customer";
         list ToExternalCustomerLeadtimeList(ToExternalCustomerLeadtimeArray);
         list ToExternalCustomerPartLeadtimeList(ToExternalCustomerPartLeadtimeArray) bind ToExternalCustomerLeadtimeList {
            display = Nested;
         }
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "From External Supplier";
         list FromExternalSupplierLeadtimeList(FromExternalSupplierLeadtimeArray);
         list FromExternalSupplierPartLeadtimeList(FromExternalSupplierPartLeadtimeArray) bind FromExternalSupplierLeadtimeList {
            display = Nested;
         }
      }
   }
}

--------------------------------- COMMANDS ----------------------------------
command SetasDefaultShipViaCommand for SiteToSiteLeadtime {
   label = "Set as Default Ship Via";
   mode = SelectedRecords;
   enabled = [DefaultShipVia = "No" and SupplySite != null and ShipViaCode != null];
   execute {
      set DefaultShipVia = "Yes";
   }
}

command SetasDefaultShipViaCommand for SiteToSitePartLeadtime {
   label = "Set as Default Ship Via";
   enabled = [DefaultShipVia = "No" and SupplySite != null and ShipViaCode != null];
   execute {
      set DefaultShipVia = "Yes";
   }
}

@DynamicComponentDependency ORDER
command SetasDefaultShipViaCommand for CustomerAddressLeadtime {
   label = "Set as Default Ship Via";
   mode = SelectedRecords;
   enabled = [CustomerNo != null and DefaultShipVia = "No" and ShipViaCode != null];
   execute {
      set DefaultShipVia = "Yes";
   }
}

@DynamicComponentDependency ORDER
command SetasDefaultShipViaCommand for CustAddrPartLeadtime {
   label = "Set as Default Ship Via";
   mode = SelectedRecords;
   enabled = [CustomerNo != null and DefaultShipVia = "No" and ShipViaCode != null];
   execute {
      set DefaultShipVia = "Yes";
   }
}

@DynamicComponentDependency PURCH
command SetasDefaultShipViaCommand for SupplierAddressLeadtime {
   label = "Set as Default Ship Via";
   mode = SelectedRecords;
   enabled = [VendorNo != null and DefaultShipVia = "No" and ShipViaCode != null];
   execute {
      set DefaultShipVia = "Yes";
   }
}

@DynamicComponentDependency PURCH
command SetasDefaultShipViaCommand for SuppAddrPartLeadtime {
   label = "Set as Default Ship Via";
   enabled = [VendorNo != null and DefaultShipVia = "No" and ShipViaCode != null];
   execute {
      set DefaultShipVia = "Yes";
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector SiteSelector for Site {
   label = "${Contract} - ${Description}";
   static Contract;
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group SupplyChainMatrixForSiteGroup for Site {
   label = "";
   lov ContractRef with ReferenceSiteUivSelector {
      description = ContractRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------
list FromSupplySiteLeadtimeList for SiteToSiteLeadtime {
   label = "";
   field SupplySite {
      columnexclude = [true];
   }
   field DemandSite {
      columnexclude = [true];
   }
   lov SupplySiteRef with ReferenceSiteUivSelector {
      description = SupplySiteRef.Description;
      validate command {
         execute {
            @DynamicComponentDependency PURCH
            call GetVendorNoFromContract(SupplySite) into InternalSupplier;
         }
      }
   }
   @DynamicComponentDependency PURCH
   lov InternalSupplierRef with ReferenceSupplierSelector {
      description = InternalSupplierRef.VendorName;
      contactwidget {
         enabled = [InternalSupplier != null];
         source = Supplier;
      }
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      editable = [false];
      required = [true];
   }
   field ExceptionDb {
      size = Small;
      required = [true];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   @DynamicComponentDependency DISCOM
   lov ArrivalRouteIdRef with ReferenceDeliveryRouteSelector {
      description = ArrivalRouteIdRef.Description;
      validate command {
         enabled = [ArrivalRouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(ArrivalRouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   @DynamicComponentDependency DISCOM
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field PickingLeadtime;
   @DynamicComponentDependency SHPMNT
   lov ShipmentTypeRef with ShipmentTypeSelector {
      description = ShipmentTypeRef.Description;
   }
   lov ShipInventoryLocationNoRef with ReferenceNonRemoteWhseShipLocationSelector {
      size = Small;
   }
   field DeliveryLeadtime;
   field TransportLeadtime;
   field InternalDeliveryLeadtime;
   field SafetyLeadTime;
   field DistOrderCurrCodeRef;
   field Distance;
   field ExpectedAdditionalCost;
   field ExpAddCostCurrCodeRef;

   fieldranking SupplySiteRef, ShipViaCodeRef, DefaultShipVia, ExceptionDb, DeliveryLeadtime, TransportLeadtime, InternalDeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}

list FromSupplySitePartLeadtimeList for SiteToSitePartLeadtime {
   label = "Exceptions for Supply Site: ${parent.SupplySite}";
   lov SupplyChainPartGroupRef with ReferenceSupplyChainPartGroupSelector {
      description = SupplyChainPartGroupRef.Description;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      editable = [false];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   @DynamicComponentDependency DISCOM
   lov ArrivalRouteIdRef with ReferenceDeliveryRouteSelector {
      description = ArrivalRouteIdRef.Description;
      validate command {
         enabled = [ArrivalRouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(ArrivalRouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   @DynamicComponentDependency DISCOM
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field PickingLeadtime;
   @DynamicComponentDependency SHPMNT
   lov ShipmentTypeRef with ShipmentTypeSelector {
      description = ShipmentTypeRef.Description;
   }
   field DeliveryLeadtime;
   field TransportLeadtime;
   field InternalDeliveryLeadtime;
   field SafetyLeadTime;
   field Distance;
   field ExpectedAdditionalCost;
   field CurrencyCodeRef {
      size = Small;
   }
   fieldranking SupplyChainPartGroupRef, ShipViaCodeRef, DefaultShipVia, DeliveryLeadtime, TransportLeadtime, InternalDeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}

list ToDemandSiteLeadtimeList for SiteToSiteLeadtime {
   label = "";
   field SupplySite {
      columnexclude = [true];
   }
   field DemandSite {
      columnexclude = [true];
   }
   lov DemandSiteRef with ReferenceSiteUivSelector {
      description = DemandSiteRef.Description;
      validate command {
         execute {
            @DynamicComponentDependency ORDER
            call GetCustomerNoFromContract(DemandSite) into InternalCustomer;
         }
      }
   }
   @DynamicComponentDependency ORDER
   lov InternalCustomerRef with ReferenceCustOrdCust1Selector {
      description = InternalCustomerRef.Name;
      contactwidget {
         enabled = [InternalCustomer != null];
         source = Customer;
      }
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
      validate command {
         execute {
            set FreightMapId = null;
            set ManuallyAssignedZoneDb = false;
         }
      }
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      editable = [false];
      required = [true];
   }
   field ExceptionDb {
      size = Small;
      required = [true];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   @DynamicComponentDependency DISCOM
   lov ArrivalRouteIdRef with ReferenceDeliveryRouteSelector {
      description = ArrivalRouteIdRef.Description;
   }
   @DynamicComponentDependency DISCOM
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
      validate command {
         enabled = [RouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(RouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field PickingLeadtime;
   @DynamicComponentDependency SHPMNT
   lov ShipmentTypeRef with ShipmentTypeSelector {
      description = ShipmentTypeRef.Description;
   }
   lov ShipInventoryLocationNoRef with ReferenceNonRemoteWhseShipLocationSelector {
      size = Small;
   }
   field DeliveryLeadtime;
   field DistOrderCurrCodeRef;
   field TransportLeadtime;
   field InternalDeliveryLeadtime;
   field Distance;
   field ExpectedAdditionalCost;
   field ExpAddCostCurrCodeRef;

   @DynamicComponentDependency ORDER
   lov ZoneIdRef with ReferenceFreightZoneJoinSelector {
      description = ZoneIdRef.Description;
      validate command {
         execute {
            call SetFreightMapId(ShipViaCode, SupplySite, ZoneId) into FreightMapId;
            set ManuallyAssignedZoneDb = true;
            if [ZoneId = null and FreightMapId = null] {
               set ManuallyAssignedZoneDb = false;
            }
         }
      }
   }
   @DynamicComponentDependency ORDER
   lov FreightMapIdRef with ReferenceFreightMapSelector {
      description = FreightMapIdRef.Description;
      editable = [false];
   }
   field ManuallyAssignedZoneDb {
      size = Small;
      required = [true];
      editable = [false];
   }

   fieldranking DemandSiteRef, ShipViaCodeRef, DefaultShipVia, ExceptionDb, DeliveryLeadtime, TransportLeadtime, InternalDeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}

list ToDemandSitePartLeadtimeList for SiteToSitePartLeadtime {
   label = "Exceptions for Demand Site: ${parent.DemandSite}";
   lov SupplyChainPartGroupRef with ReferenceSupplyChainPartGroupSelector {
      description = SupplyChainPartGroupRef.Description;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
      validate command {
         execute {
            set FreightMapId = null;
            set ManuallyAssignedZoneDb = false;
         }
      }
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      editable = [false];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   @DynamicComponentDependency DISCOM
   lov ArrivalRouteIdRef with ReferenceDeliveryRouteSelector {
      description = ArrivalRouteIdRef.Description;
   }
   @DynamicComponentDependency DISCOM
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
      validate command {
         enabled = [RouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(RouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field PickingLeadtime;
   @DynamicComponentDependency SHPMNT
   lov ShipmentTypeRef with ShipmentTypeSelector {
      description = ShipmentTypeRef.Description;
   }
   field DeliveryLeadtime;
   field TransportLeadtime;
   field InternalDeliveryLeadtime;
   field Distance;
   field ExpectedAdditionalCost;
   field CurrencyCodeRef {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   lov ZoneIdRef with ReferenceFreightZoneJoinSelector {
      description = ZoneIdRef.Description;
      validate command {
         execute {
            call SetFreightMapId(ShipViaCode, SupplySite, ZoneId) into FreightMapId;
            set ManuallyAssignedZoneDb = true;
            if [ZoneId = null and FreightMapId = null] {
               set ManuallyAssignedZoneDb = false;
            }
         }
      }
   }
   @DynamicComponentDependency ORDER
   lov FreightMapIdRef with ReferenceFreightMapSelector {
      description = FreightMapIdRef.Description;
      editable = [false];
   }
   field ManuallyAssignedZoneDb {
      size = Small;
      required = [true];
      editable = [false];
   }

   fieldranking SupplyChainPartGroupRef, ShipViaCodeRef, DefaultShipVia, DeliveryLeadtime, TransportLeadtime, InternalDeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}

@DynamicComponentDependency PURCH
list FromExternalSupplierLeadtimeList for SupplierAddressLeadtime {
   label = "";
   field Contract {
      columnexclude = [true];
   }
   lov VendorNoRef with ReferenceExternalSupplierLovSelector {
      description = VendorNoRef.Name;
      contactwidget {
         enabled = [VendorNo != null];
         source = Supplier;
      }
   }
   lov AddrNoRef with ReferenceSuppAddressMatrixLovSelector {
      description = AddrNoRef.CompanyName2;
   }
   field DefaultDeliveryAddress {
      size = Small;
      required = [true];
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      required = [true];
      editable = [false];
   }
   field ExceptionDb {
      size = Small;
      required = [true];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
      validate command {
         enabled = [RouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(RouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field VendorDeliveryLeadtime;
   field TransportLeadtime;
   field InternalDeliveryLeadtime;
   field SafetyLeadTime;
   field Distance;
   field ExpectedAdditionalCost;
   field CurrencyCodeRef {
      size = Small;
   }

   fieldranking VendNoRef, AddrNoRef, ShipViaCodeRef, DefaultShipVia, ExceptionDb, VendorDeliveryLeadtime, TransportLeadtime, InternalDeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}

@DynamicComponentDependency PURCH
list FromExternalSupplierPartLeadtimeList for SuppAddrPartLeadtime {
   label = "Exceptions for Supplier Address: ${parent.VendorNo} - ${parent.AddrNo}";

   lov SupplyChainPartGroupRef with ReferenceSupplyChainPartGroupSelector {
      description = SupplyChainPartGroupRef.Description;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      editable = [false];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
      validate command {
         enabled = [RouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(RouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field DeliveryLeadtime;
   field TransportLeadtime;
   field InternalDeliveryLeadtime;
   field SafetyLeadTime;
   field Distance;
   field ExpectedAdditionalCost;
   field CurrencyCodeRef {
      size = Small;
   }

   fieldranking SupplyChainPartGroupRef, ShipViaCodeRef, DefaultShipVia, DeliveryLeadtime, TransportLeadtime, InternalDeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}

@DynamicComponentDependency ORDER
list ToExternalCustomerLeadtimeList for CustomerAddressLeadtime {
   label = "";
   lov CustomerNoRef with ReferenceExternalCustomerLovSelector {
      description = CustomerNoRef.Name;
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
   }
   lov AddrNoRef with ReferenceCustAddressMatrixLovSelector {
      description = AddrNoRef.CompanyName2;
   }
   field DefaultAddress {
      size = Small;
      required = [true];
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
      validate command {
         execute {
            set FreightMapId = null;
            set ManuallyAssignedZoneDb = false;
         }
      }
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      required = [true];
      editable = [false];
   }
   field ExceptionDb {
      size = Small;
      required = [true];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
      validate command {
         enabled = [RouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(RouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field PickingLeadtime;
   lov ShipmentTypeRef with ShipmentTypeSelector {
      description = ShipmentTypeRef.Description;
   }
   lov ShipInventoryLocationNoRef with ReferenceNonRemoteWhseShipLocationSelector {
      size = Small;
   }
   field DeliveryLeadtime;
   field Distance;
   field ExpectedAdditionalCost;
   field CurrencyCodeRef {
      size = Small;
   }
   lov ZoneIdRef with ReferenceFreightZoneJoinSelector {
      description = ZoneIdRef.Description;
      validate command {
         execute {
            call SetFreightMapId(ShipViaCode, Contract, ZoneId) into FreightMapId;
            set ManuallyAssignedZoneDb = true;
            if [ZoneId = null and FreightMapId = null] {
               set ManuallyAssignedZoneDb = false;
            }
         }
      }
   }
   lov FreightMapIdRef with ReferenceFreightMapSelector {
      description = FreightMapIdRef.Description;
      editable = [false];
   }
   field ManuallyAssignedZoneDb {
      size = Small;
      required = [true];
      editable = [false];
   }
   fieldranking CustomerNoRef, AddrNoRef, ShipViaCodeRef, DefaultShipVia, ExceptionDb, DeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}


@DynamicComponentDependency ORDER
list ToExternalCustomerPartLeadtimeList for CustAddrPartLeadtime {
   label = "Exceptions for Customer Address: ${parent.CustomerNo} - ${parent.AddrNo}";
   lov SupplyChainPartGroupRef with ReferenceSupplyChainPartGroupSelector {
      description = SupplyChainPartGroupRef.Description;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
      validate command {
         execute {
            set FreightMapId = null;
            set ManuallyAssignedZoneDb = false;
         }
      }
   }
   field DefaultShipVia {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      editable = [false];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
      validate command {
         enabled = [RouteId != null];
         variable ForwardAgentIdVar;
         execute {
            call GetForwardAgentId(RouteId) into ForwardAgentIdVar;
            set ForwardAgentId = ForwardAgentIdVar;
         }
      }
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field PickingLeadtime;
   lov ShipmentTypeRef with ShipmentTypeSelector {
      description = ShipmentTypeRef.Description;
   }
   field DeliveryLeadtime;
   field Distance;
   field ExpectedAdditionalCost;
   field CurrencyCodeRef {
      size = Small;
   }
   lov ZoneIdRef with ReferenceFreightZoneJoinSelector {
      description = ZoneIdRef.Description;
      validate command {
         execute {
            call SetFreightMapId(ShipViaCode, Contract, ZoneId) into FreightMapId;
            set ManuallyAssignedZoneDb = true;
            if [ZoneId = null and FreightMapId = null] {
               set ManuallyAssignedZoneDb = false;
            }
         }
      }
   }
   lov FreightMapIdRef with ReferenceFreightMapSelector {
      description = FreightMapIdRef.Description;
      editable = [false];
   }
   field ManuallyAssignedZoneDb {
      size = Small;
      editable = [false];
      required = [true];
   }

   fieldranking SupplyChainPartGroupRef, ShipViaCodeRef, DefaultShipVia, DeliveryLeadtime;

   commandgroup CommandGroupCmdGroup {

      command SetasDefaultShipViaCommand;
   }
}