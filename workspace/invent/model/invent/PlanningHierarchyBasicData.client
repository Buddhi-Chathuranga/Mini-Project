-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2019-06-07  YasMlk  SCUXXW4-20861, Added PreSaveCommands and column validation for columns SafetyStockCoverTime and MaxSafetyStkCoverTime.
-- 2019-05-17  JaThlk  SCUXXW4-20876, Included CreateCustomerSelector fragment.
-- 2018-10-26  SUDELK  SCUXXW4-6006 Converted from frmBasicDataPlanningHierarchy using MTG Version: 1.32
-------------------------------------------------------------------------------------------------------
client PlanningHierarchyBasicData;
component INVENT;
layer Core;
projection PlanningHierarchyBasicDataHandling;

--------------------------------- FRAGMENTS ---------------------------------
include fragment UserSiteCompanyLovSelector;
@DynamicComponentDependency PURCH
include fragment CreateCustomerSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PlanningHierarchyBasicData parent InventNavigator.SupplyChainPlanningPartPlanning at index 1550 {
      label = "Planning Hierarchy Basic Data";
      page CompanyParam selector CompanyDistributionInfoSelector;
      entry SiteSubMenu;
      entry AbcFrequencySubMenu;
      entry AssetClassSubMenu;
      entry CommodityGroupSubMenu;
      entry SupplierSubMenu;
   }
   entry SiteSubMenu {
      label = "Site";
      page SiteParam selector CompanyDistributionInfoSelector;
   }
   entry AbcFrequencySubMenu {
      label = "ABC-Frequency";
      page AbcFrequencyParam selector CompanyDistributionInfoSelector;
   }
   entry AssetClassSubMenu {
      label = "Asset Class";
      page AssetClassParam selector CompanyDistributionInfoSelector;
   }
   entry CommodityGroupSubMenu {
      label = "Commodity Group";
      page CommodityGroupParam selector CompanyDistributionInfoSelector;
   }
   entry SupplierSubMenu {
      label = "Supplier";
      page SupplierParam selector CompanyDistributionInfoSelector;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page CompanyParam using CompanyDistributionInfoSet {
   label = "Planning Hierarchy Basic Data";
   selector CompanyDistributionInfoSelector;
   group BasicDataPlanningHierarchyGroup {
      label = "";
   }
   singleton CompanyGenSinglton(CompanyInventInfoArray);
   group NameGenGroup bind CompanyGenSinglton {
      label = "General";
   }
   @DynamicComponentDependency INVPLA
   singleton CompanyOrderPointSingleton(CompanyInvplaInfoOrderPointArray);
   @DynamicComponentDependency INVPLA
   group CompanyInvplaInfoOrderPointGroup bind CompanyOrderPointSingleton {
      label = "Order Point";
   }
   @DynamicComponentDependency INVPLA
   singleton CompanySafetyStockSingleton(CompanyInvplaInfoTpssArray);
   @DynamicComponentDependency INVPLA
   group CompanyInvplaInfoTPSSGroup bind CompanySafetyStockSingleton {
      label = "Time Phased Safety Stock";
   }
}

page SiteParam using CompanyDistributionInfoSet {
   label = "Site";
   selector CompanyDistributionInfoSelector;
   group BasicDataPlanningHierarchyGroup;
   tabs {
      tab {
         label = "General";
         list SiteParametersList(SiteInventInfoArray);
      }
      tab {
         label = "Order Point";
         @DynamicComponentDependency INVPLA
         list SiteInvplaInfoOrderPointList(SiteInvplaInfoOrderPointArray);
      }
      tab {
         label = "Time Phase Safety Stock";
         @DynamicComponentDependency INVPLA
         list SiteInvplaInfoTPSSList(SiteInvplaInfoTpssArray);
      }
   }
}

page AbcFrequencyParam using CompanyDistributionInfoSet {
   label = "ABC-Frequency-Lifecycle";
   selector CompanyDistributionInfoSelector;
   group BasicDataPlanningHierarchyGroup;
   tabs {
      tab {
         label = "General";
         list AbcFrequencyLifecycleList(AbcFrequencyLifeCycleArray);
      }
      tab {
         label = "Order Point";
         @DynamicComponentDependency INVPLA
         list AbcFrequencyLifecycleOrderPointInvplaList(AbcFrequencyLifeInvplaOrderPointArray);
      }
      tab {
         label = "Time Phased Safety Stock";
         @DynamicComponentDependency INVPLA
         list AbcFrequencyLifecycleTPSSInvplaList(AbcFrequencyLifeInvplaTpssArray);
      }
   }
}

page AssetClassParam using CompanyDistributionInfoSet {
   label = "Asset Class";
   selector CompanyDistributionInfoSelector;
   group BasicDataPlanningHierarchyGroup;
   tabs {
      tab {
         label = "General";
         list AssetClassParametersList(AssetClassCompanyArray);
      }
      tab {
         label = "Order Point";
         @DynamicComponentDependency INVPLA
         list AssetClassCompanyOrderPointInvplaList(AssetClassCompanyInvplaOrderPointArray);
      }
      tab {
         label = "Time Phased Safety Stock";
         @DynamicComponentDependency INVPLA
         list AssetClassCompanyTPSSInvplaList(AssetClassCompanyInvplaTpssArray);
      }
   }
}

page CommodityGroupParam using CompanyDistributionInfoSet {
   label = "Commodity Group";
   selector CompanyDistributionInfoSelector;
   group BasicDataPlanningHierarchyGroup;
   tabs {
      tab {
         label = "General";
         list CommodityGroupParametersList(CommodityGroupCompanyArray);
      }
      tab {
         label = "Order Point";
         @DynamicComponentDependency INVPLA
         list CommGroupCompanyOrderPointInvplaList(CommGroupCompanyInvplaOrderPointArray);
      }
      tab {
         label = "Time Phased Safety Stock";
         @DynamicComponentDependency INVPLA
         list CommGroupCompanyTPSSInvplaList(CommGroupCompanyInvplaTpssArray);
      }
   }
}

page SupplierParam using CompanyDistributionInfoSet {
   label = "Supplier";
   selector CompanyDistributionInfoSelector;
   group BasicDataPlanningHierarchyGroup;
   tabs {
      tab {
         label = "General";
         @DynamicComponentDependency PURCH
         list SupplierParametersList(SupplierCompanyPurchArray);
      }
      tab {
         label = "Order Point";
         @DynamicComponentDependency INVPLA
         list SupplierCompanyOrderPointInvplaList(SupplierCompanyInvplaOrderPointArray);
      }
      tab {
         label = "Time Phased Safety Stock";
         @DynamicComponentDependency INVPLA
         list SupplierCompanyTPSSInvplaList(SupplierCompanyInvplaTpssArray);
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector CompanyDistributionInfoSelector for CompanyDistributionInfo {
   label = "${Company} - ${CompanyRef.Name}";
   static Company;
   static CompanyRef.Name;
}
singleton CompanyGenSinglton for CompanyInventInfo {
   crudactions {
   }
}
@DynamicComponentDependency INVPLA
singleton CompanyOrderPointSingleton for CompanyInvplaInfoOrderPoint {
   crudactions {
   }
}
@DynamicComponentDependency INVPLA
singleton CompanySafetyStockSingleton for CompanyInvplaInfoTpss {
   crudactions {
   }
}
---------------------------------- GROUPS -----------------------------------
group BasicDataPlanningHierarchyGroup for CompanyDistributionInfo {
   label = "";
   field Company;
   field CompanyRef.Name {
      label = "Name";
   }
}

group NameGenGroup for CompanyInventInfo {
   field InventoryInterestRate;
   field OrderingCost;
   field ServiceLevelRateRef;
}
@DynamicComponentDependency INVPLA
group CompanyInvplaInfoOrderPointGroup for CompanyInvplaInfoOrderPoint {
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field SafetyStockCoverTime;
   field LeadTimeFactor;
   field MaxSafetyStkCoverTime;
   field LotSizeModel {
      size = Small;
   }
   field OrderPointModel {
      size = Small;
   }
   field LotSizeCoverTime;
   field MaxOrderCoverTime;
   field AbsoluteMaxCapacity {
      size = Small;
   }
}
@DynamicComponentDependency INVPLA
group CompanyInvplaInfoTPSSGroup for CompanyInvplaInfoTpss {
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field SafetyStockCoverTime;
   field LeadTimeFactor;
   field MaxSafetyStkCoverTime;
}

----------------------------------- LISTS -----------------------------------
list SiteParametersList for SiteInventInfo {
   lov ContractRef with ReferenceUserSiteCompanyLovSelector {
      size = Small;
      validate command {
         execute {
            call GetDescription(Contract) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field InventoryInterestRate;
   field OrderingCost;
   field ServiceLevelRateRef;
}
@DynamicComponentDependency INVPLA
list SiteInvplaInfoOrderPointList for SiteInvplaInfoOrderPoint {
   lov ContractRef with ReferenceUserSiteCompanyLovSelector {
      size = Small;
      validate command {
         execute {
            call GetDescription(Contract) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field LotSizeModel {
      size = Small;
   }
   field OrderPointModel {
      size = Small;
   }
   field LotSizeCoverTime;
   field SafetyStockCoverTime;
   field MaxOrderCoverTime;
   field MaxSafetyStkCoverTime;
   field LeadTimeFactor;
   field AbsoluteMaxCapacity {
      size = Small;
   }
   fieldranking ContractRef, Description, DemandModel, SafetyStockModel, LotSizeModel, OrderPointModel, LotSizeCoverTime, SafetyStockCoverTime, MaxOrderCoverTime, MaxSafetyStkCoverTime;
}
@DynamicComponentDependency INVPLA
list SiteInvplaInfoTPSSList for SiteInvplaInfoTpss {
   crudactions {
      before command PreSaveCommand;
   }
   lov ContractRef with ReferenceUserSiteCompanyLovSelector {
      size = Small;
      validate command {
         execute {
            call GetDescription(Contract) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field SafetyStockCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field MaxSafetyStkCoverTime
      {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field LeadTimeFactor;
   fieldranking ContractRef, Description, DemandModel, SafetyStockModel, SafetyStockCoverTime, MaxSafetyStkCoverTime, LeadTimeFactor;
}

list AbcFrequencyLifecycleList for AbcFrequencyLifecycle {
   orderby = AbcClass, FrequencyClass, LifecycleStage;
   lov ContractRef with ReferenceUserSiteCompanyLovSelector {
      size = Small;
   }
   field AbcClassRef {
      size = Small;
   }
   field FrequencyClass {
      size = Small;
   }
   field LifecycleStage {
      size = Small;
   }
   field InventoryInterestRate;
   field OrderingCost;
   field ServiceLevelRateRef;
}
@DynamicComponentDependency INVPLA
list AbcFrequencyLifecycleOrderPointInvplaList for AbcFrequencyLifeInvplaOrderPoint {
   lov ContractRef with ReferenceUserSiteCompanyLovSelector {
      size = Small;
   }
   field AbcClassRef {
      size = Small;
   }
   field FrequencyClass {
      size = Small;
   }
   field LifecycleStage {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field LotSizeModel {
      size = Small;
   }
   field OrderPointModel {
      size = Small;
   }
   field LotSizeCoverTime;
   field SafetyStockCoverTime;
   field MaxOrderCoverTime;
   field MaxSafetyStkCoverTime;
   field LeadTimeFactor;
   field AbsoluteMaxCapacity {
      size = Small;
   }
}
@DynamicComponentDependency INVPLA
list AbcFrequencyLifecycleTPSSInvplaList for AbcFrequencyLifeInvplaTpss {
   crudactions {
      before command PreSaveCommand;
   }
   lov ContractRef with ReferenceUserSiteCompanyLovSelector {
      size = Small;
   }
   field AbcClassRef {
      size = Small;
   }
   field FrequencyClass {
      size = Small;
   }
   field LifecycleStage {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field SafetyStockCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field MaxSafetyStkCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field LeadTimeFactor;
}

list AssetClassParametersList for AssetClassCompany {
   field AssetClassRef {
      size = Small;
      validate command {
         execute {
            call GetDescription(AssetClass) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field InventoryInterestRate;
   field OrderingCost;
   field ServiceLevelRateRef;
   fieldranking AssetClassRef, Description, InventoryInterestRate, OrderingCost, ServiceLevelRateRef;
}
@DynamicComponentDependency INVPLA
list AssetClassCompanyOrderPointInvplaList for AssetClassCompanyInvplaOrderPoint {
   field AssetClassRef {
      size = Small;
      validate command {
         execute {
            call GetDescription(AssetClass) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field LotSizeModel {
      size = Small;
   }
   field OrderPointModel {
      size = Small;
   }
   field LotSizeCoverTime;
   field SafetyStockCoverTime;
   field MaxOrderCoverTime;
   field MaxSafetyStkCoverTime;
   field LeadTimeFactor;
   field AbsoluteMaxCapacity {
      size = Small;
   }
}
@DynamicComponentDependency INVPLA
list AssetClassCompanyTPSSInvplaList for AssetClassCompanyInvplaTpss {
   crudactions {
      before command PreSaveCommand;
   }
   field AssetClassRef {
      size = Small;
      validate command {
         execute {
            call GetDescription(AssetClass) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field SafetyStockCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field MaxSafetyStkCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field LeadTimeFactor;
   fieldranking AssetClassRef, Description, DemandModel, SafetyStockModel, SafetyStockCoverTime, MaxSafetyStkCoverTime, LeadTimeFactor;
}

list CommodityGroupParametersList for CommodityGroupCompany {
   field CommodityCodeRef {
      size = Small;
      validate command {
         execute {
            call GetDescription(CommodityCode) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field InventoryInterestRate;
   field OrderingCost;
   field ServiceLevelRateRef;
   fieldranking CommodityCodeRef, Description, InventoryInterestRate, OrderingCost, ServiceLevelRateRef;
}
@DynamicComponentDependency INVPLA
list CommGroupCompanyOrderPointInvplaList for CommGroupCompanyInvplaOrderPoint {
   field CommodityCodeRef {
      size = Small;
      validate command {
         execute {
            call GetDescription(CommodityCode) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field LotSizeModel {
      size = Small;
   }
   field OrderPointModel {
      size = Small;
   }
   field LotSizeCoverTime;
   field SafetyStockCoverTime;
   field MaxOrderCoverTime;
   field MaxSafetyStkCoverTime;
   field LeadTimeFactor;
   field AbsoluteMaxCapacity {
      size = Small;
   }
   fieldranking CommodityCodeRef, Description, DemandModel, SafetyStockModel, LotSizeModel, OrderPointModel, LotSizeCoverTime, SafetyStockCoverTime, MaxOrderCoverTime, MaxSafetyStkCoverTime;
}
@DynamicComponentDependency INVPLA
list CommGroupCompanyTPSSInvplaList for CommGroupCompanyInvplaTpss {
   crudactions {
      before command PreSaveCommand;
   }
   field CommodityCodeRef {
      size = Small;
      validate command {
         execute {
            call GetDescription(CommodityCode) into Description;
         }
      }
   }
   field Description {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field SafetyStockCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field MaxSafetyStkCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field LeadTimeFactor;
   fieldranking CommodityCodeRef, Description, DemandModel, SafetyStockModel, SafetyStockCoverTime, MaxSafetyStkCoverTime, LeadTimeFactor;
}
@DynamicComponentDependency PURCH
list SupplierParametersList for SupplierCompanyPurch {
   lov VendorNoRef with ReferenceCreateCustomerSelector {
      size = Small;
   }
   field VendorNoRef.SupplierName {
      size = Small;
   }
   field InventoryInterestRate;
   field OrderingCost;
   field ServiceLevelRateRef;
   fieldranking VendorNoRef, VendorNoRef.SupplierName, InventoryInterestRate, OrderingCost, ServiceLevelRateRef;
}
@DynamicComponentDependency INVPLA
list SupplierCompanyOrderPointInvplaList for SupplierCompanyInvplaOrderPoint {
   lov VendorNoRef with ReferenceCreateCustomerSelector {
      size = Small;
   }
   field VendorNoRef.SupplierName {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field LotSizeModel {
      size = Small;
   }
   field OrderPointModel {
      size = Small;
   }
   field LotSizeCoverTime;
   field MaxOrderCoverTime;
   field SafetyStockCoverTime;
   field MaxSafetyStkCoverTime;
   field LeadTimeFactor;
   field AbsoluteMaxCapacity {
      size = Small;
   }
   fieldranking VendorNoRef, VendorNoRef.SupplierName, DemandModel, SafetyStockModel, LotSizeModel, OrderPointModel, LotSizeCoverTime, MaxOrderCoverTime, SafetyStockCoverTime, MaxSafetyStkCoverTime;
}
@DynamicComponentDependency INVPLA
list SupplierCompanyTPSSInvplaList for SupplierCompanyInvplaTpss {
   crudactions {
      before command PreSaveCommand;
   }
   lov VendorNoRef with ReferenceCreateCustomerSelector {
      size = Small;
   }
   field VendorNoRef.SupplierName {
      size = Small;
   }
   field DemandModel {
      size = Small;
   }
   field SafetyStockModel {
      size = Small;
   }
   field SafetyStockCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field MaxSafetyStkCoverTime {
      validate command {
         execute {
            if [(SafetyStockCoverTime != null and MaxSafetyStkCoverTime != null) and SafetyStockCoverTime > MaxSafetyStkCoverTime] {

               confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
                  when CANCEL {
                     set SafetyStockValidity = "FALSE";
                     exit CANCEL;
                  }
                  when OK {
                     set SafetyStockValidity = "TRUE";
                  }
               }
            }
         }
      }
   }
   field LeadTimeFactor;
   fieldranking VendorNoRef, SupplierName, DemandModel, SafetyStockModel, SafetyStockCoverTime, MaxSafetyStkCoverTime, LeadTimeFactor;
}
--------------------------------- COMMANDS ----------------------------------
@DynamicComponentDependency INVPLA
command PreSaveCommand for SiteInvplaInfoTpss {
   execute {
      if [CrudOperation = "create" or CrudOperation = "update"] {

         if [SafetyStockValidity = "FALSE"] {
            confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}
@DynamicComponentDependency INVPLA
command PreSaveCommand for AbcFrequencyLifeInvplaTpss {
   execute {
      if [CrudOperation = "create" or CrudOperation = "update"] {

         if [SafetyStockValidity = "FALSE"] {
            confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}

@DynamicComponentDependency INVPLA
command PreSaveCommand for AssetClassCompanyInvplaTpss {
   execute {
      if [CrudOperation = "create" or CrudOperation = "update"] {

         if [SafetyStockValidity = "FALSE"] {
            confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}
@DynamicComponentDependency INVPLA
command PreSaveCommand for CommGroupCompanyInvplaTpss {
   execute {
      if [CrudOperation = "create" or CrudOperation = "update"] {

         if [SafetyStockValidity = "FALSE"] {
            confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}

@DynamicComponentDependency INVPLA
command PreSaveCommand for SupplierCompanyInvplaTpss {
   execute {
      if [CrudOperation = "create" or CrudOperation = "update"] {

         if [SafetyStockValidity = "FALSE"] {
            confirm("Safety Stock Cover Time is higher than the Max Safety Stock Cover Time") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}
