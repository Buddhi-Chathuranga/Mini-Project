--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-02-03  UdGnlk  SC2020R1-12235, Reverse the previous correction.
--  2021-01-27  UdGnlk  SC2020R1-12235, Added ProcCategoryAssortment mandatory field to AssortmentStructure entity.
--  2019-04-12  AwWelk  SCUXXW4-16984, reverting the changes made by SCUXXW4-14957 since we will receive a correction through TEUXX-6809.
--  2019-04-10  JaThlk  SCUXXW4-18416, Moved the where clause for CharacteristicCode to projection file from plsvc file.
--  2019-04-10  JaThlk  SCUXXW4-18415, Moved the where clause for AssortmentNodes to projection file from plsvc file.
--  2019-02-18  bajelk  SCUXXW4-14957, Removed Blocked State of Planner field in Inventory part Defaults.
--  2019-01-30  bajelk  SCUXXW4-15493, Changed labels of CurrencyCode and ParallelAccCurrency in CompanyFinance entity.
--  2019-01-27  bajelk  SCUXXW4-15494, Changed label for CurrencyCode in ValidSupplierLovSelector fragment.
--  2019-01-26  AwWelk  SCUXXW4-15908, Made the code review corrections.
--  2019-01-23  bajelk  SCUXXW4-15500, Changed label for Transaction and Status Message attribute in PurchaseStatus entity.
--  2019-01-23  bajelk  SCUXXW4-15501, Changed label for Assortment key in SupplierAssortment entity.
--  2019-01-23  bajelk  SCUXXW4-15502, Changed label for SamplePercent attribute in InspectionRule entity.
--  2018-12-30  AwWelk  SCUXXW4-2945, Added AssortmentPartSupplierDefaultList by converting tbwAssortmentPartSuppDef using MTG Version: 1.34.
--  2018-12-26  bajelk  SCUXXW4-15113, Changed some labels of SalesPriceGroup, SalesPartRebateGroup and SalesPartRebateGroup entities.
--  2018-12-26  bajelk  SCUXXW4-15123, Changed lable of Description,OverDeliveryTolerance,OverDelivery attribute inside PurchasePartGroup entity and
--  2018-12-26          Changed lable of Descriptiony attribute inside OrderProcType entity.
--  2018-12-26  bajelk  SCUXXW4-15122, Changed lable of QcCode attribute inside QualityCtrlAnalystLov query in QualityCtrlAnalystLovSelector fragment and
--  2018-12-26          Changed lable of BuyerCode attribute inside PurchaseBuyerLov query in PurchaseBuyerLovSelector fragment
--  2018-12-24  bajelk  SCUXXW4-14997, "Concatenate Characteristics Template" and "Description" fields in both AssortmentInvCharDefEngAttributeRootNodeGroup and AssortmentInvCharDefEngAttributeChildNodeGroup.
--  2018-12-24  bajelk  SCUXXW4-14961, Changed lables for InventoryPartStatusPar entity in Invent component and validated "Block" values in the LOV using function.
--  2018-12-24  bajelk  SCUXXW4-14960, Changed lables for AssetClass entity in Invent component.
--  2018-12-24  bajelk  SCUXXW4-15010, Changed lable for SearchType attribute in Characteristic entity which is in MPCCOM.
--  2018-12-24  bajelk  SCUXXW4-15007, Changed lables for Site Cluster ID, Level Description, Site Cluster Node ID in SiteClusterNodeJoinSelector fragment
--  2018-12-24  bajelk  SCUXXW4-15006,Changed lable for SiteClusterId key in SiteCluster entity which is in MPCCOM.
--  2018-12-23  AwWelk  SCUXXW4-2961, Added converted tbwAssortmentPurchDef using MTG Version: 1.34
--  2018-12-23  bajelk  SCUXXW4-14962, Changed lables for CustomsUnitMeas attribute in CustomsStatisticsNumber entity and PartProductCode key in InventoryProductFamily entity.
--  2018-12-23  bajelk  SCUXXW4-14963, Removed lov Records in Blocked State for the Customs Stat No field, changed lables in CustomsStatisticsNumber entity.
--  2018-12-20  AwWelk  SCUXXW4-9627, Added tbwAssortmentSalesDef using  MTG Version: 1.34.
--  2018-12-17  bajelk  SCUXXW4-14900, Added AssortmentPartSupplierDefaultsList in Supplier for Purchase Part Defaults Tab using MTG Version: 1.34
--  2018-12-12  AwWelk  SCUXXW4-6637, Added converted tbwAssortmentInventCharDef using MTG Version: 1.34
--  2018-12-11  AwWelk  SCUXXW4-6647, Added converted tbwAssortmentInventDef using MTG Version: 1.34
--  2018-12-08  AwWelk  SCUXXW4-6074, Converted frmEnterDefaultsPerNode using MTG Version: 1.34
---------------------------------------------------------------------------------
projection DefaultsPerAssortmentNodeHandling;
component INVENT;
layer Core;
description "View Defaults per Assortment Node";
category Users;
include fragment CreatePartsPerSiteDialog;
include fragment SiteClusterNodeJoinSelector;
include fragment SiteClusterLevelLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment InventoryPartLovSelector;
include fragment TechnicalCoordinatorLovSelector;
include fragment ApplicationCountrySelector;
include fragment TaxCodeCommonSelector;
include fragment OrderCoordinatorLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
@DynamicComponentDependency PURCH
include fragment AssortmentPartSupplierDefaultsList;
@DynamicComponentDependency ORDER
include fragment AssortmentSalesDefaultsList;
@DynamicComponentDependency PURCH
include fragment AssortmentPurchDefaultList;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset AssortmentStructureSet for AssortmentStructure;
entityset AssortmentNodeSet for AssortmentNode;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AssortmentStructure {
   crud = Read;
   supportwarnings = [true];
   use attributes = Description;
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AssortmentNodeId Text {
      fetch = "assortment_id";
   }

   attribute EngAttribute Text {
      fetch = "Assortment_Node_API.Get_Eng_Attribute(assortment_id, assortment_id)";
   }
   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference AssortmentNodeRef(AssortmentId, AssortmentId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference CharacteristicTemplateRef(EngAttribute) to CharacteristicTemplate(EngAttribute);
   array AssortmentInventDefaultArray(AssortmentId, AssortmentNodeId) to AssortmentInventDefault(AssortmentId, AssortmentNodeId) {
      where = ":child.AssortmentNodeId IN
             (SELECT assortment_node_id
                FROM assortment_node
               WHERE assortment_id = :parent.AssortmentId
               START WITH assortment_node_id = :parent.AssortmentId
                      AND assortment_id = :parent.AssortmentId
               CONNECT BY PRIOR parent_node = assortment_node_id
                       AND PRIOR assortment_id = assortment_id
                       AND assortment_id = :parent.AssortmentId)";
   }
   array AssortmentInventoryPartCharacteristicsDefaultArray(AssortmentId, AssortmentNodeId) to AssortmentInventoryPartCharacteristicsDefault(AssortmentId, AssortmentNodeId) {
      where = ":child.AssortmentNodeId IN
                   (SELECT assortment_node_id
                      FROM assortment_node
                     WHERE assortment_id = :parent.AssortmentId
                     START WITH assortment_node_id = :parent.AssortmentId
                            AND assortment_id = :parent.AssortmentId
                    CONNECT BY PRIOR parent_node = assortment_node_id
                           AND PRIOR assortment_id = assortment_id
                           AND assortment_id = :parent.AssortmentId)";

   }
   @DynamicComponentDependency ORDER
   array AssortmentSalesDefaultArray(AssortmentId, AssortmentNodeId) to AssortmentSalesDefault(AssortmentId, AssortmentNodeId) {
      where = ":child.AssortmentNodeId IN
             (SELECT assortment_node_id
                FROM assortment_node
               WHERE assortment_id = :parent.AssortmentId
               START WITH assortment_node_id = :parent.AssortmentId
                      AND assortment_id = :parent.AssortmentId
               CONNECT BY PRIOR parent_node = assortment_node_id
                       AND PRIOR assortment_id = assortment_id
                       AND assortment_id = :parent.AssortmentId)";
   }
   @DynamicComponentDependency PURCH
   array AssortmentPurchDefaultArray(AssortmentId, AssortmentNodeId) to AssortmentPurchDefault(AssortmentId, AssortmentNodeId) {
      where = " :child.AssortmentNodeId IN (SELECT assortment_node_id
                              FROM   assortment_node
                              WHERE  assortment_id = :parent.AssortmentId
                              START  WITH assortment_node_id = :parent.AssortmentId
                                   AND    assortment_id = :parent.AssortmentId
                              CONNECT BY PRIOR parent_node = assortment_node_id
                                  AND    PRIOR assortment_id = assortment_id
                                  AND    assortment_id = :parent.AssortmentId)";

   }
   @DynamicComponentDependency PURCH
   array AssortmentPartSupplierDefaultArray(AssortmentId, AssortmentNodeId) to AssortmentPartSupplierDefault(AssortmentId, AssortmentNodeId) {
      where = ":child.AssortmentNodeId IN
             (SELECT assortment_node_id
                FROM assortment_node
               WHERE assortment_id = :parent.AssortmentId
               START WITH assortment_node_id = :parent.AssortmentId
                      AND assortment_id = :parent.AssortmentId
               CONNECT BY PRIOR parent_node = assortment_node_id
                       AND PRIOR assortment_id = assortment_id
                       AND assortment_id = :parent.AssortmentId)";
   }
}

@Override
entity AssortmentNode {
   supportwarnings = [true];
   crud = Read;
   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference AssortmentNodeRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference CharacteristicTemplateRef(EngAttribute) to CharacteristicTemplate(EngAttribute);

   array AssortmentInventDefaultArray(AssortmentId) to AssortmentInventDefault(AssortmentId) {
      where = ":child.AssortmentNodeId IN
             (SELECT assortment_node_id
                FROM assortment_node
               WHERE assortment_id = :parent.AssortmentId
               START WITH assortment_node_id = :parent.AssortmentNodeId
                      AND assortment_id = :parent.AssortmentId
               CONNECT BY PRIOR parent_node = assortment_node_id
                       AND PRIOR assortment_id = assortment_id
                       AND assortment_id = :parent.AssortmentId)";
   }
   array AssortmentInventoryPartCharacteristicsDefaultArray(AssortmentId) to AssortmentInventoryPartCharacteristicsDefault(AssortmentId) {
      where = ":child.AssortmentNodeId IN
                   (SELECT assortment_node_id
                      FROM assortment_node
                     WHERE assortment_id = :parent.AssortmentId
                     START WITH assortment_node_id = :parent.AssortmentNodeId
                            AND assortment_id = :parent.AssortmentId
                    CONNECT BY PRIOR parent_node = assortment_node_id
                           AND PRIOR assortment_id = assortment_id
                           AND assortment_id = :parent.AssortmentId)";
   }
   @DynamicComponentDependency ORDER
   array AssortmentSalesDefaultArray(AssortmentId) to AssortmentSalesDefault(AssortmentId) {
      where = ":child.AssortmentNodeId IN
                   (SELECT assortment_node_id
                      FROM assortment_node
                     WHERE assortment_id = :parent.AssortmentId
                     START WITH assortment_node_id = :parent.AssortmentNodeId
                            AND assortment_id = :parent.AssortmentId
                    CONNECT BY PRIOR parent_node = assortment_node_id
                           AND PRIOR assortment_id = assortment_id
                           AND assortment_id = :parent.AssortmentId)";
   }
   @DynamicComponentDependency PURCH
   array AssortmentPurchDefaultArray(AssortmentId) to AssortmentPurchDefault(AssortmentId) {
      where = ":child.AssortmentNodeId IN
                   (SELECT assortment_node_id
                      FROM assortment_node
                     WHERE assortment_id = :parent.AssortmentId
                     START WITH assortment_node_id = :parent.AssortmentNodeId
                            AND assortment_id = :parent.AssortmentId
                    CONNECT BY PRIOR parent_node = assortment_node_id
                           AND PRIOR assortment_id = assortment_id
                           AND assortment_id = :parent.AssortmentId)";
   }
   @DynamicComponentDependency PURCH
   array AssortmentPartSupplierDefaultArray(AssortmentId) to AssortmentPartSupplierDefault(AssortmentId) {
      where = ":child.AssortmentNodeId IN
                   (SELECT assortment_node_id
                      FROM assortment_node
                     WHERE assortment_id = :parent.AssortmentId
                     START WITH assortment_node_id = :parent.AssortmentNodeId
                            AND assortment_id = :parent.AssortmentId
                    CONNECT BY PRIOR parent_node = assortment_node_id
                           AND PRIOR assortment_id = assortment_id
                           AND assortment_id = :parent.AssortmentId)";
   }
}

@Override
entity AssortmentInventDefault using AssortmentInventDef {
   use attributes = PlannerBuyer, UnitMeas, CatchUnitMeas, TypeCode, InputUnitMeasGroupId, PrimeCommodity, SecondCommodity, AssetClass, PartStatus, HazardCode, AccountingGroup, PartProductCode, PartProductFamily, TypeDesignation, DimQuality, PurchLeadtime, ManufLeadtime, ExpectedLeadtime, DurabilityDay, MinDurabDaysCoDeliv, MinDurabDaysPlanning, Supersedes, SupplyChainPartGroup, SupplyCode, DopConnection, DopNetting, CountryOfOrigin, RegionOfOrigin, CustomsStatNo, IntrastatConvFactor, TechnicalCoordinatorId, QtyCalcRounding, InventoryValuationMethod, InventoryPartCostLevel, InvoiceConsideration, ZeroCostFlag, PartCostGroupId, MaxActualCostUpdate, ExtServiceCostMethod, CycleCode, CyclePeriod, OeAllocAssignFlag, AutomaticCapabilityCheck, NegativeOnHand, OnhandAnalysisFlag, CoReserveOnhAnalysFlag, ForecastConsumptionFlag, ShortageFlag, StockManagement, StdNameId, EstimatedMaterialCost, PlanningMethod, MinOrderQty, MaxOrderQty, MulOrderQty, ShrinkageFac, ServiceRate, StdOrderSize, CarryRate, SafetyStock, SafetyLeadTime, OrderPointQty, LotSize, MaxweekSupply, SetupCost, QtyPredictedConsumption, ProposalRelease, OrderRequisition, Notes;
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AssortmentLevelName Text {
      fetch = "Assortment_Node_API.Get_Node_Level_Description(assortment_id,assortment_node_id)";
      label = "Assortment Level Name";
      maxlength = 50;
      editable = [false];
   }
   attribute AssortmentNodeId Text {
      fetch = "assortment_node_id";
      label = "Assortment Node";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SiteClusterId Text {
      fetch = "site_cluster_id";
      label = "Site Cluster";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SiteClusterNodeId Text {
      fetch = "site_cluster_node_id";
      label = "Site Cluster Node";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CountryCode Text {
      fetch = "country_code";
      label = "Country";
      maxlength = 2;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      format = uppercase;
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 30;
   }
   attribute CatchUnitMeas Text {
      fetch = "catch_unit_meas";
      label = "Catch UoM";
      maxlength = 30;
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "type_code_db";
      label = "Part Type";
   }
   attribute InputUnitMeasGroupId Text {
      fetch = "input_unit_meas_group_id";
      label = "Input UoM Group";
      maxlength = 30;
      format = uppercase;
   }
   attribute PrimeCommodity Text {
      fetch = "prime_commodity";
      label = "Comm Group 1";
      maxlength = 5;
   }
   attribute SecondCommodity Text {
      fetch = "second_commodity";
      label = "Comm Group 2";
      maxlength = 5;
   }
   attribute AssetClass Text {
      fetch = "asset_class";
      label = "Asset Class";
      maxlength = 2;
      format = uppercase;
   }
   attribute PartStatus Text {
      fetch = "part_status";
      label = "Part Status";
      maxlength = 1;
      format = uppercase;
   }
   attribute HazardCode Text {
      fetch = "hazard_code";
      label = "Safety Code";
      maxlength = 6;
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "accounting_group";
      label = "Accounting Group";
      maxlength = 5;
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
   }
   attribute TypeDesignation Text {
      fetch = "type_designation";
      label = "Type Designation";
      maxlength = 25;
   }
   attribute DimQuality Text {
      fetch = "dim_quality";
      label = "Dimension/Quality";
      maxlength = 25;
   }
   attribute PurchLeadtime Number {
      fetch = "purch_leadtime";
      label = "Purchasing Lead Time";
   }
   attribute ManufLeadtime Number {
      fetch = "manuf_leadtime";
      label = "Manufacturing Lead Time";
   }
   attribute ExpectedLeadtime Number {
      fetch = "expected_leadtime";
      label = "Expected Lead Time";
   }
   attribute DurabilityDay Number {
      fetch = "durability_day";
      label = "Durability Days";
      maxlength = 4;
   }
   attribute MinDurabDaysCoDeliv Number {
      fetch = "min_durab_days_co_deliv";
      label = "Minimum Remaining Days at CO Delivery";
      maxlength = 4;
   }
   attribute MinDurabDaysPlanning Number {
      fetch = "min_durab_days_planning";
      label = "Minimum Remaining Days for Planning";
      maxlength = 4;
   }
   attribute Supersedes Text {
      fetch = "supersedes";
      label = "Supersedes Part";
      maxlength = 25;
   }
   attribute SupplyChainPartGroup Text {
      fetch = "supply_chain_part_group";
      label = "Supply Chain Part Group";
      maxlength = 20;
      format = uppercase;
   }
   attribute SupplyCode Enumeration(MaterialRequisSupply) {
      fetch = "supply_code_db";
      label = "Default Mtrl Req Supply";
   }
   attribute DopConnection Enumeration(DopConnection) {
      fetch = "dop_connection_db";
      label = "DOP Connection";
   }
   attribute DopNetting Enumeration(DopNetting) {
      fetch = "dop_netting_db";
      label = "DOP Netting";
   }
   attribute CountryOfOrigin Text {
      fetch = "country_of_origin";
      label = "Country of Origin";
      maxlength = 2;
      format = uppercase;
   }
   attribute RegionOfOrigin Text {
      fetch = "region_of_origin";
      label = "Region Code";
      maxlength = 10;
      format = uppercase;
   }
   attribute CustomsStatNo Text {
      fetch = "customs_stat_no";
      label = "Customs Stat No";
      maxlength = 15;
      format = uppercase;
   }
   attribute IntrastatConvFactor Number {
      fetch = "intrastat_conv_factor";
      label = "Intrastat Conv Factor";
   }
   attribute TechnicalCoordinatorId Text {
      fetch = "technical_coordinator_id";
      label = "Tech Coordinator";
      maxlength = 20;
      format = uppercase;
   }
   attribute QtyCalcRounding Number {
      fetch = "qty_calc_rounding";
      label = "Qty Calc Rounding";
   }
   attribute InventoryValuationMethod Enumeration(InventoryValueMethod) {
      fetch = "inventory_valuation_method_db";
      label = "Inventory Valuation Method";
   }
   attribute InventoryPartCostLevel Enumeration(InventoryPartCostLevel) {
      fetch = "inventory_part_cost_level_db";
      label = "Inventory Part Cost Level";
   }
   attribute InvoiceConsideration Enumeration(InvoiceConsideration) {
      fetch = "invoice_consideration_db";
      label = "Supplier Invoice Consideration";
   }
   attribute ZeroCostFlag Enumeration(InventoryPartZeroCost) {
      fetch = "zero_cost_flag_db";
      label = "Zero Cost";
   }
   attribute PartCostGroupId Text {
      fetch = "part_cost_group_id";
      label = "Part Cost Group";
      maxlength = 5;
      format = uppercase;
   }
   attribute MaxActualCostUpdate Number {
      fetch = "max_actual_cost_update";
      label = "Max Periodic WA Update (%)";
   }
   attribute ExtServiceCostMethod Enumeration(ExtServiceCostMethod) {
      fetch = "ext_service_cost_method_db";
      label = "External Service Cost Method";
   }
   attribute CycleCode Enumeration(InventoryPartCountType) {
      fetch = "cycle_code_db";
      label = "Cycle Counting";
   }
   attribute CyclePeriod Number {
      fetch = "cycle_period";
      label = "Cycle Interval";
      maxlength = 3;
   }
   attribute OeAllocAssignFlag Enumeration(CustOrdReservationType) {
      fetch = "oe_alloc_assign_flag_db";
      label = "Reserve at order entry";
   }
   attribute AutomaticCapabilityCheck Enumeration(CapabilityCheckAllocate) {
      fetch = "automatic_capability_check_db";
      label = "Capability Check";
   }
   attribute NegativeOnHand Enumeration(NegativeOnHand) {
      fetch = "negative_on_hand_db";
      label = "Negative On Hand Allowed";
   }
   attribute OnhandAnalysisFlag Enumeration(InventoryPartOnhAnalys) {
      fetch = "onhand_analysis_flag_db";
      label = "Availability Check";
   }
   attribute CoReserveOnhAnalysFlag Enumeration(InventoryPartOnhAnalys) {
      fetch = "co_reserve_onh_analys_flag_db";
      label = "Availability Check at CO Reserve";
   }
   attribute ForecastConsumptionFlag Enumeration(InvPartForecastConsum) {
      fetch = "forecast_consumption_flag_db";
      label = "Online Consumption";
   }
   attribute ShortageFlag Enumeration(InventoryPartShortage) {
      fetch = "shortage_flag_db";
      label = "Shortage Notification";
   }
   attribute StockManagement Enumeration(InventoryPartManagement) {
      fetch = "stock_management_db";
      label = "VMI";
   }
   attribute StdNameId Number {
      fetch = "std_name_id";
      label = "Standard Name ID";
      maxlength = 10;
   }
   attribute EstimatedMaterialCost Number {
      fetch = "estimated_material_cost";
      label = "Estimated Material Cost";
   }
   attribute PlanningMethod Text {
      fetch = "planning_method";
      label = "Planning Method";
      maxlength = 1;
   }
   attribute MinOrderQty Number {
      fetch = "min_order_qty";
      label = "Min Lot Size";
   }
   attribute MaxOrderQty Number {
      fetch = "max_order_qty";
      label = "Max Lot Size";
   }
   attribute MulOrderQty Number {
      fetch = "mul_order_qty";
      label = "Multiple Lot Size";
   }
   attribute ShrinkageFac Number {
      fetch = "shrinkage_fac";
      label = "Scrap Factor (%)";
   }
   attribute ServiceRate Number {
      fetch = "service_rate";
      label = "Service Rate (%)";
   }
   attribute StdOrderSize Number {
      fetch = "std_order_size";
      label = "Std Lot Size";
   }
   attribute CarryRate Number {
      fetch = "carry_rate";
      label = "Inv Interest (%)";
   }
   attribute SafetyStock Number {
      fetch = "safety_stock";
      label = "Safety Stock";
   }
   attribute SafetyLeadTime Number {
      fetch = "safety_lead_time";
      label = "Safety Lead Time";
   }
   attribute OrderPointQty Number {
      fetch = "order_point_qty";
      label = "Order Point";
   }
   attribute LotSize Number {
      fetch = "lot_size";
      label = "Lot Size";
   }
   attribute MaxweekSupply Number {
      fetch = "maxweek_supply";
      label = "Order Cover Time";
   }
   attribute SetupCost Number {
      fetch = "setup_cost";
      label = "Ordering Cost";
   }
   attribute QtyPredictedConsumption Number {
      fetch = "qty_predicted_consumption";
      label = "Pred Year Cons Qty";
   }
   attribute ProposalRelease Enumeration(OrderProposalRelease) {
      fetch = "proposal_release_db";
      label = "Proposal Release";
   }
   attribute OrderRequisition Enumeration(InventoryPartSupplyType) {
      fetch = "order_requisition_db";
      label = "Default Supply Type";
   }
   attribute Notes Text {
      fetch = "notes";
      label = "Notes";
      maxlength = 2000;
   }
   attribute CoReserveOnhAnalysFlagDb Text {
      fetch = "co_reserve_onh_analys_flag_db";
      label = "Co Reserve Onh Analys Flag";
      maxlength = 20;
      editable = [false];
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }
   reference SiteClusterNodeIdRef(SiteClusterId, SiteClusterNodeId) to SiteClusterNodeJoin(SiteClusterId, SiteClusterNodeId) {
      label = "Site Cluster Node";
   }
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference CatchUnitMeasRef(CatchUnitMeas) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }
   reference InputUnitMeasGroupIdRef(InputUnitMeasGroupId) to InputUnitMeasGroup(InputUnitMeasGroupId) {
      label = "Input UoM Group";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Comm Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Comm Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
   reference PartStatusRef(PartStatus) to InventoryPartStatusPar(PartStatus) {
      label = "Part Status";
   }
   reference HazardCodeRef(HazardCode) to SafetyInstruction(HazardCode) {
      label = "Safety Code";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference SupersedesRef(Contract, Supersedes) to InventoryPartLov(Contract, PartNo) {
      label = "Supersedes Part";
   }
   reference SupplyChainPartGroupRef(SupplyChainPartGroup) to SupplyChainPartGroup(SupplyChainPartGroup) {
      label = "Supply Chain Part Group";
   }
   reference CountryOfOriginRef(CountryOfOrigin) to IsoCountry(CountryCode) {
      label = "Country of Origin";
   }
   reference RegionOfOriginRef(CountryCode, RegionOfOrigin) to CountryRegion(CountryCode, RegionCode) {
      label = "Region Code";
   }
   reference CustomsStatNoRef(CustomsStatNo) to CustomsStatisticsNumber(CustomsStatNo) {
      label = "Customs Stat No";
   }
   reference TechnicalCoordinatorIdRef(TechnicalCoordinatorId) to TechnicalCoordinatorLov(TechnicalCoordinatorId) {
      label = "Tech Coordinator";
   }
   @DynamicComponentDependency COST
   reference PartCostGroupIdRef(Contract, PartCostGroupId) to PartCostGroup(Contract, PartCostGroupId) {
      label = "Part Cost Group";
   }
   reference StdNameIdRef(StdNameId) to StandardNames(StdNameId) {
      label = "Standard Name ID";
   }
   reference PlanningMethodRef(PlanningMethod) to InvPartPlanningMethod(PlanningMethod) {
      label = "Planning Method";
   }
   reference ServiceRateRef(ServiceRate) to ServiceRate(ServiceRate) {
      label = "Service Rate (%)";
   }
}

@Override
entity AssortmentInventoryPartCharacteristicsDefault using AssortmentInvCharDef {
   use attributes = EngAttribute, AttrValue, Priority, CharType, Notes;
   attribute EngAttribute Text {
      fetch = "eng_attribute";
      label = "Characteristic Template";
      maxlength = 100;
      editable = [false];
   }
   attribute DfCharTemplateDescription Text {
      fetch = "Characteristic_Template_API.Get_Description(eng_attribute)";
      maxlength = 100;
      editable = [false];
   }
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute AssortmentLevelName Text {
      fetch = "Assortment_Node_API.Get_Node_Level_Description(assortment_id,assortment_node_id)";
      label = "Assortment Level Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute AssortmentNodeId Text {
      fetch = "assortment_node_id";
      label = "Assortment Node";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SiteClusterId Text {
      fetch = "site_cluster_id";
      label = "Site Cluster";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SiteClusterNodeId Text {
      fetch = "site_cluster_node_id";
      label = "Site Cluster Node";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CountryCode Text {
      fetch = "country_code";
      label = "Country";
      maxlength = 2;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CharacteristicCode Text {
      fetch = "characteristic_code";
      label = "Characteristic Code";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute CharacteristicDescription Text {
      label = "Description";
      fetch = "Characteristic_API.Get_Description(CHARACTERISTIC_CODE)";
   }
   attribute AttrValue Text {
      fetch = "attr_value";
      label = "Attribute Value";
      maxlength = 60;
      required = [true];
   }
   attribute Priority Number {
      fetch = "priority";
      label = "Priority";
      editable = [ETag = null];
   }
   attribute CharType Text {
      editable = [false];
      fetch = "char_type";
      label = "Char Type";
      maxlength = 30;
   }
   attribute Notes Text {
      fetch = "notes";
      label = "Notes";
      maxlength = 2000;
   }
   attribute Uom Text {
      label = "UoM";
      fetch = "Characteristic_Templ_Char_API.Get_Unit_Meas(ENG_ATTRIBUTE,CHARACTERISTIC_CODE)";
   }
   reference CharacteristicTemplCharRef(EngAttribute, CharacteristicCode) to CharacteristicTemplChar(EngAttribute, CharacteristicCode);
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }
   reference SiteClusterNodeIdRef(SiteClusterId, SiteClusterNodeId) to SiteClusterNodeJoin(SiteClusterId, ClusterLevelDesc) {
      label = "Site Cluster Node";
   }
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference CharacteristicCodeRef(CharacteristicCode) to Characteristic(CharacteristicCode) {
      label = "Characteristic Code";
   }
   reference AttrValueRef(CharacteristicCode, AttrValue) to DiscreteCharacValue(CharacteristicCode, CharacteristicValue) {
      label = "Attribute Value";
   }
   reference AttrValueRef2(AttrValue) to EmptyReference(TempAttribute);
}

@Override
entity Characteristic {
   attribute Objtype Text;
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
-- Created a Empty Reference to give support for lovswitch in DefaultsPerAssormentNode client.
query EmptyReference {
   from = "dual";
   attribute TempAttribute Text {
      label = "";
      fetch = "null";
      lovcolumn = [false];
   }
}

---------------------------------- ACTIONS ----------------------------------
--------------------------------- FUNCTIONS ---------------------------------

function GetAssortmentNodes List<Entity(AssortmentNode)> {
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   where = "ASSORTMENT_ID = :AssortmentId AND PARENT_NODE = :AssortmentNodeId";
}

function GetCharacteristicsCode List<Entity(Characteristic)> {
   parameter EngAttribute Text;
   where = "CHARACTERISTIC_CODE IN (SELECT CHARACTERISTIC_CODE FROM CHAR_TEMPL_INDISCRETE_CHAR WHERE ENG_ATTRIBUTE = :EngAttribute
                                    UNION
                                    SELECT CHARACTERISTIC_CODE FROM CHAR_TEMPL_DISCRETE_CHAR WHERE ENG_ATTRIBUTE = :EngAttribute)";
}

function ValidateCharacteristicsCode Boolean {
   parameter EngAttribute Text;
   parameter CharacteristicCode Text;
}

function GetCharTypeForCharacteristicsCode Text {
   parameter CharacteristicCode Text;
}


-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


