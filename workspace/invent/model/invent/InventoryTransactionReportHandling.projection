-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-07-25  ChFolk  SCUXXW4-22798, Modified project information to increase performance.
-- 2019-05-16  DaZase  SCUXXW4-19662, Added initialcheck to all unbounded actions.
-- 2018-12-06  ShKolk  SCUXXW4-6276, Converted from frmInventTransactionReport using MTG Version: 1.34
-----------------------------------------------------------------------------
projection InventoryTransactionReportHandling;
component INVENT;
layer Core;
description "Use this API to create and print inventory transaction reports manually. Automatically created reports can also be printed through this API.";
category Users;
include fragment InventWarehouseLocationSelector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryTransactionHist2Selector;
include fragment InventoryTransactionCodeLovSelector;
include fragment InventoryLocation8Selector;
include fragment InventTransactionReportInitialCheck;
include fragment InventoryTransactionHistInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventTransactionReportSet for InventTransactionReport;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventTransactionReport {
   supportwarnings = [true];
   use attributes = NumberSeries, Contract, Warehouse, ReportGroupId, ReportTypeId, TransactionsCreatedBy, FromTransDateCreated, FromTransDateTimeCreated, ToTransDateCreated, ToTransDateTimeCreated, ReportCreatedBy, AutomaticallyCreated, ReportDateCreated, PrintedBy, DatePrinted, CancelledBy, DateCancelled, OrderNo, NoteText, Company;
   attribute TransactionReportId Text {
      maxlength = 100;
      editable = [false];
   }
   attribute NumberSeries Number {
      editable = [false];
   }
   attribute ReportGroupId Text {
      label = "Report Group";
      maxlength = 100;
      editable = [false];
   }
   attribute ReportTypeId Text {
      label = "Report Type";
      maxlength = 100;
      required = [true];
   }
   attribute FromTransDateCreated Date {
      label = "From";
   }
   attribute FromTransDateTimeCreated Time;
   attribute ToTransDateCreated Date {
      label = "To";
   }
   attribute ToTransDateTimeCreated Time;
   attribute PrintCostDb Boolean("TRUE", "FALSE") {
      fetch = "print_cost_db";
      label = "Display Cost on Report Printout";
      required = [true];
   }
   attribute Printed Boolean("TRUE", "FALSE") {
      fetch = "Invent_Transaction_Report_API.Check_If_Printed(transaction_report_id)";
      label = "Printed";
      editable = [false];
   }
   attribute Cancelled Boolean("TRUE", "FALSE") {
      fetch = "Invent_Transaction_Report_API.Check_If_Cancelled(transaction_report_id)";
      label = "Cancelled";
      editable = [false];
   }
   attribute ReportCreatedBy Text {
      label = "Created By";
      editable = [false];
   }
   attribute ReportDateCreated Date {
      label = "Created Date";
      editable = [false];
   }
   attribute PrintedBy Text {
      editable = [false];
   }
   attribute DatePrinted Date {
      label = "Printed Date";
      editable = [false];
   }
   attribute CancelledBy Text {
      editable = [false];
   }
   attribute DateCancelled Date {
      label = "Cancelled Date";
      editable = [false];
   }
   attribute AutomaticallyCreated Boolean("TRUE", "FALSE") {
      fetch = "automatically_created_db";
      label = "Automatically Created";
      editable = [false];
   }
   attribute GroupPerOrder Boolean("TRUE", "FALSE") {
      fetch = "group_per_order_db";
      label = "Group Per Order";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute OrderNo Text {
      editable = [false];
   }
   attribute Company Text {
      editable = [ETag = null];
   }
   attribute ConnectedLinesExist Number {
      fetch = "Inventory_Transaction_Hist_API.Connected_Lines_Exist(transaction_report_id)";
      label = "Lines Count";
      editable = [false];
   }
   reference InventTransReportGroupRef(Company, ReportGroupId) to InventTransReportGroup(Company, ReportGroupId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, Warehouse) to InventWarehouseLocation(Contract, Warehouse) {
      label = "Warehouse ID";
   }
   reference ReportGroupIdRef(Company, ReportGroupId) to InventTransReportGroup(Company, ReportGroupId) {
      label = "Report Group";
   }
   reference ReportTypeIdRef(Company, ReportTypeId) to InventTransReportType(Company, ReportTypeId) {
      label = "Report Type";
   }
   reference TransactionsCreatedByRef(TransactionsCreatedBy) to FndUser(Identity) {
      label = "Transactions Created By";
   }
   array InventoryTransactionHistArray(TransactionReportId) to InventoryTransactionHist(TransactionReportId);
   array InventTransReportAvailableArray(Contract, ReportTypeId) to InventTransReportAvailable(Contract, ReportTypeId) {
      where = "(:child.Userid = :parent.TransactionsCreatedBy OR :parent.TransactionsCreatedBy IS NULL)
      AND (:child.Warehouse = :parent.Warehouse OR :parent.Warehouse IS NULL)
      AND :child.DateCreated BETWEEN TRUNC(NVL(:parent.FromTransDateCreated,TO_DATE('19000101', 'YYYYMMDD'))) AND TRUNC(NVL(:parent.ToTransDateCreated,TO_DATE('40000101', 'YYYYMMDD')))
      AND :child.DateTimeCreated BETWEEN NVL(TO_DATE(REPLACE(TO_CHAR(:parent.FromTransDateTimeCreated,'YYYY-MM-DD HH24.MI.SS'), TO_CHAR(:parent.FromTransDateTimeCreated, 'YYYY-MM-DD'), TO_CHAR(:parent.FromTransDateCreated,'YYYY-MM-DD')), 'YYYY-MM-DD HH24.MI.SS'), TO_DATE('19000101', 'YYYYMMDD')) AND NVL(TO_DATE(REPLACE(TO_CHAR(:parent.ToTransDateTimeCreated,'YYYY-MM-DD HH24.MI.SS'), TO_CHAR(:parent.ToTransDateTimeCreated, 'YYYY-MM-DD'), TO_CHAR(:parent.ToTransDateCreated,'YYYY-MM-DD')), 'YYYY-MM-DD HH24.MI.SS'), TO_DATE('40000101', 'YYYYMMDD'))";
   }
}

@Override
entity InventoryTransactionHist {
   crud = Read;
   keys = TransactionId;
   use attributes = TransactionCode, Transaction, PartNo, ConfigurationId, Direction, Quantity, CatchDirection, CatchQuantity, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, ConditionCode, WaivDevRejNo, EngChgLevel, SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRef5, SourceRefType, Cost, DateCreated, DateTimeCreated, Userid, DateApplied, PartstatFlag, ValuestatFlag, RejectCode, PartOwnership, PreviousPartOwnership, ProjectId, ActivitySeq;
   attribute Transaction Text {
      label = "Transaction Description";
      required = [true];
   }
   attribute CatchDirection Text {
      maxlength = 100;
      required = [true];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute SourceRef1 Text {
      label = "Order Ref 1";
   }
   attribute SourceRef2 Text {
      label = "Order Ref 2";
   }
   attribute SourceRef3 Text {
      label = "Order Ref 3";
   }
   attribute SourceRef4 Text {
      label = "Order Ref 4";
   }
   attribute SourceRef5 Text {
      label = "Order Ref 5";
   }
   attribute SourceRefType Enumeration(OrderType) {
      label = "Order Type";
   }
   attribute Cost Number {
      format = ifscurrency;
   }
   attribute DateTimeCreated Time {
      label = "Creation Time";
   }
   attribute Userid Text {
      label = "By";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute DateApplied Date {
      required = [true];
   }
   attribute PartstatFlag Text {
      label = "Incl Part Aggr per Period";
   }
   attribute ValuestatFlag Text {
      label = "Incl Value Aggr per Period";
   }
   attribute RejectCode Text {
      label = "Return/Scrap";
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      label = "Ownership";
   }
   attribute Owner Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute PreviousPartOwnership Enumeration(PartOwnership) {
      label = "Previous Ownership";
      editable = [false];
   }
   attribute PreviousOwner Text {
      fetch = "DECODE(previous_owning_customer_no,null,previous_owning_vendor_no,previous_owning_customer_no)";
      label = "Previous Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute PreviousOwnerName Text {
      fetch = "DECODE(previous_owning_customer_no,null,Supplier_API.Get_Vendor_Name(previous_owning_vendor_no), Cust_Ord_Customer_API.Get_Name(previous_owning_customer_no))";
      label = "Previous Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute HasErroneousPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Error_Posting_Exists_String(accounting_id)";
      label = "Has Erroneous Postings";
      editable = [false];
   }
   attribute HasTransferredPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Transferred_Posting_Exists_Str(accounting_id)";
      label = "Has Transferred Postings";
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TransactionReportId Text {
      maxlength = 100;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation8(Contract, LocationNo) {
      label = "Location No";
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);

   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";

   }
   reference TransactionIdRef(TransactionId) to InventoryTransactionHist(TransactionId) {
      label = "Transaction ID";
   }
   reference TransactionCodeRef(TransactionCode) to MpccomTransactionCode(TransactionCode) {
      label = "Transaction Code";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference TransactionReportIdRef(TransactionReportId) to InventTransactionReport(TransactionReportId) {
      label = "Inv Trans Report ID";
   }
}

@Override
query InventTransReportAvailable {
   from = "invent_trans_report_available";
   lu = InventTransactionReport;
   keys = TransactionId;
   attribute TransactionId Number {
      fetch = "transaction_id";
      label = "Transaction ID";
   }
   attribute TransactionCode Text {
      fetch = "transaction_code";
      label = "Transaction Code";
      maxlength = 10;
      format = uppercase;
   }
   attribute Transaction Text {
      fetch = "transaction";
      label = "Transaction Description";
      maxlength = 100;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      format = uppercase;
   }
   attribute Direction Text {
      fetch = "direction";
      label = "Direction";
      maxlength = 1;
   }
   attribute Quantity Number {
      fetch = "quantity";
      label = "Quantity";
   }
   attribute CatchDirection Text {
      fetch = "catch_direction";
      label = "Catch Direction";
      maxlength = 100;
   }
   attribute CatchQuantity Text {
      fetch = "catch_quantity";
      label = "Catch Quantity";
      maxlength = 100;
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
   }
   attribute Warehouse Text;
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      maxlength = 6;
   }
   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Order Ref 1";
      maxlength = 100;
   }
   attribute SourceRef2 Text {
      fetch = "source_ref2";
      label = "Order Ref 2";
      maxlength = 100;
   }
   attribute SourceRef3 Text {
      fetch = "source_ref3";
      label = "Order Ref 3";
      maxlength = 100;
   }
   attribute SourceRef4 Text {
      fetch = "source_ref4";
      label = "Order Ref 4";
      maxlength = 100;
   }
   attribute SourceRef5 Text {
      fetch = "source_ref5";
      label = "Order Ref 5";
      maxlength = 50;
   }
   attribute SourceRefType Text {
      fetch = "source_ref_type";
      label = "Order Type";
      maxlength = 100;
   }
   attribute Cost Number {
      fetch = "cost";
      label = "Cost";
      format = ifscurrency;
   }
   attribute DateCreated Date {
      fetch = "date_created";
      label = "Date Created";
   }
   attribute DateTimeCreated Time {
      fetch = "date_time_created";
      label = "Creation Time";
   }
   attribute Userid Text {
      fetch = "userid";
      label = "By";
      maxlength = 100;
      format = uppercase;
   }
   attribute DateApplied Date {
      fetch = "date_applied";
      label = "Date Applied";
   }
   attribute PartstatFlag Text {
      fetch = "partstat_flag";
      label = "Incl Part Aggr per Period";
      maxlength = 100;
   }
   attribute ValuestatFlag Text {
      fetch = "valuestat_flag";
      label = "Incl Value Aggr per Period";
      maxlength = 100;
   }
   attribute RejectCode Text {
      fetch = "reject_code";
      label = "Return/Scrap";
      maxlength = 8;
   }
   attribute Ownership Enumeration(PartOwnership) {
      fetch = "Part_Ownership_API.Decode(part_ownership_db)";
      label = "Ownership";
   }
   attribute Owner Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner";
      maxlength = 100;
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
   }
   attribute PreviousPartOwnership Enumeration(PartOwnership) {
      fetch = "Part_Ownership_API.Decode(previous_part_ownership)";
      label = "Previous Ownership";
   }
   attribute PreviousOwner Text {
      fetch = "DECODE(previous_owning_customer_no,null,previous_owning_vendor_no,previous_owning_customer_no)";
      label = "Previous Owner";
      maxlength = 100;
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute PreviousOwnerName Text {
      fetch = "DECODE(previous_owning_customer_no,null,Supplier_API.Get_Vendor_Name(previous_owning_vendor_no), Cust_Ord_Customer_API.Get_Name(previous_owning_customer_no))";
      label = "Previous Owner Name";
      maxlength = 100;
   }
   attribute ProjectId Text {
      label = "Project ID";
      maxlength = 10;
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      maxlength = 10;
   }
   attribute HasErroneousPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Error_Posting_Exists_String(accounting_id)";
      label = "Has Erroneous Postings";
   }
   attribute HasTransferredPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Transferred_Posting_Exists_Str(accounting_id)";
      label = "Has Transferred Postings";
   }
   attribute ReportTypeId Text {
      label = "Report Type";
      maxlength = 100;
   }
   attribute Contract Text;
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation8(Contract, LocationNo) {
      label = "Location No";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";

   }
   reference TransactionIdRef(TransactionId) to InventoryTransactionHist(TransactionId) {
      label = "Transaction ID";
   }
   reference TransactionCodeRef(TransactionCode) to InventoryTransactionCodeLov(TransactionCode) {
      label = "Transaction Code";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action PrintReport {
   initialcheck InventTransactionReportInitialCheck(TransactionReportId);
   parameter TransactionReportId Text;
   ludependencies = InventTransactionReport, InventTransReportAvailable, InventoryTransactionHist;
}

action CancelReport {
   initialcheck InventTransactionReportInitialCheck(TransactionReportId);
   parameter TransactionReportId Text;
   ludependencies = InventTransactionReport, InventTransReportAvailable, InventoryTransactionHist;
}

action ConnectAllTransactions {
   initialcheck InventTransactionReportInitialCheck(TransactionReportId);
   parameter TransactionReportId Text;
   ludependencies = InventTransactionReport, InventTransReportAvailable, InventoryTransactionHist;
}

action DisconnectAllTransactions {
   initialcheck InventTransactionReportInitialCheck(TransactionReportId);
   parameter TransactionReportId Text;
   ludependencies = InventTransactionReport, InventTransReportAvailable, InventoryTransactionHist;
}

action DisconnectTransactions {
   initialcheck InventoryTransactionHistInitialCheck(TransactionId);
   parameter TransactionId Number;
   ludependencies = InventTransactionReport, InventTransReportAvailable, InventoryTransactionHist;
}

action ConnectTransactions {
   initialcheck InventTransReportAvailableInitialCheck(TransactionId);
   initialcheck InventTransactionReportInitialCheck(TransactionReportId);
   parameter TransactionId Number;
   parameter TransactionReportId Text;
   ludependencies = InventTransactionReport, InventTransReportAvailable, InventoryTransactionHist;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetCompany Text {
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
