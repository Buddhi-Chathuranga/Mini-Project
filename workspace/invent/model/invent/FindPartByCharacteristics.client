--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-21  JaThlk  SC21R2-5236, Replaced the PartType values with identifiers to fix special characters issue.
-- 2019-01-14  SaGeLK  SCUXXW4-5524, Moved the Inventory part of the code from FindPartByCharacteristics to FindInventoryPartByCharacteristicsList.
-- 2019-01-10  SaGeLK  SCUXXW4-8770, Moved the Sales part of the code from FindPartByCharacteristics to FindSalesPartByCharacteristicsList.
-- 2019-01-10  SaGeLK  SCUXXW4-2194, Moved the Purchase part of the code to FindPurchasePartByCharacteristics to FindPurchasePartByCharacteristicsList
-- 2018-12-16  SaGeLK  SCUXXW4-8770, Converted from dlgSalesPartCharSearchWizard using MTG Version: 1.34
-- 2018-12-10  SaGeLK  SCUXXW4-2194, Converted from dlgPurchaseCharSearchWizard using MTG Version: 1.34
-- 2018-11-12  SaGeLK  SCUXXW4-5524, Converted from dlgInventoryCharSearchWizard using MTG Version: 1.33
--------------------------------------------------------------------------------------
client FindPartByCharacteristics;
component INVENT;
layer Core;
projection FindPartByCharacteristics;


//INVENTORY PART
include fragment FindInventoryPartByCharacteristicsList;

//PURCHASE PART
@DynamicComponentDependency PURCH
include fragment FindPurchasePartByCharacteristicsList;

//SALES PART
@DynamicComponentDependency ORDER
include fragment FindSalesPartByCharacteristicsList;

----------------------------- VISUAL COMPONENTS -----------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
// Navigator Entries are in the fragments
-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant FindPartByCharacteristicsAssistant using PartCharactersticSearchWizardSet {
   label = "Find Part by Characteristics";
   savemode = OnLostFocus;

   steps {
      step {
         label = "Select Characteristics";
         // Step: Initialize
         group CharTempGroup {
            label = "Select a characteristic template";
         }
         // Step: Alphanumeric and Numeric
         list CharacteristicSearchList(TemplCharArray);
      }
      step {
         label = "Parts and Attributes";
         // Step: Result and Final
         //         INVENTORY
         list InventoryPartList using FilterInventoryPartListDynamic(EngAttribute) {
            label = "Inventory Part";
            visible = [PartType = "InventoryPart"];
            details = "page/InventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
         }
         list InventoryCharacteristicFinalList using GetValue(component.InventoryPartList.Selection) {
            visible = [PartType = "InventoryPart"];
         }
         //       PURCHASE
         @DynamicComponentDependency PURCH
         list PurchasePartList using FilterPurchasePartList(EngAttribute) {
            label = "Purchase Part";

            visible = [PartType = "PurchasePart"];
         }
         @DynamicComponentDependency PURCH
         list PurchaseCharacteristicFinalList using PurchaseGetValue(component.PurchasePartList.Selection) {
            visible = [PartType = "PurchasePart"];
         }
         //         SALES
         @DynamicComponentDependency ORDER
         list SalesPartList using FilterSalesPartList(EngAttribute) {
            label = "Sales Part";
            visible = [PartType = "SalesPart"];
         }
         @DynamicComponentDependency ORDER
         list SalesCharacteristicFinalList using SalesGetValue(component.SalesPartList.Selection) {
            visible = [PartType = "SalesPart"];
         }
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [component.FindPartByCharacteristicsAssistant.ActiveStep = 2];
      execute {
         navigate back;
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector CharacteristicTemplateSelector for CharacteristicTemplate {
   static EngAttribute {

      label = "Characterisitc Template";
   }
   static Description;
}
selector ReferenceAttributeValueSelector for DiscreteCharacValue {
   static CharacteristicCode;
   static CharacteristicValue;
   static CharacteristicValueDesc;
}
selector ReferenceNumAttributeValueSelector for DiscreteCharacValue {
   static CharacteristicCode;
   static CharacteristicValue;
   static CharacteristicValueDesc;
}

---------------------------------- GROUPS -----------------------------------
//Header group
group CharTempGroup for CharacteristicTemplateVirtual {
   lov EngAttributeRef with CharacteristicTemplateSelector {
      description = EngAttributeRef.Description;
   }
   radiogroup PartType;
   // fieldranking EngAttribute, Description;
}
----------------------------------- LISTS -----------------------------------
// Alphanumeric and numeric Lists
list CharacteristicSearchList for CharacteristicTemplCharListVirtual {
   label = "Enter Search Criteria for alphanumeric fields (use % as wildcard) and for numeric fields (use dots to indicate interval, e.g., 10..20)";
   editmode = SingleCellEdit;

   lov CharacteristicRef with ReferenceCharacteristicTemplateSelector {
      label = "Characteristic";

      editable = [false];
      description = CharacteristicRef.Description;
   }
   lov CharacteristicValueRef with ReferenceAttributeValueSelector using FilterAttributeValue(CharacteristicCode) {
      editable = [CharacteristicCodeTypeDb = "A"];
      hidekey = [true];
      label = "Attribute Value Alpha";
      description = CharacteristicValue;
      freeinput = [true];
   }
   lov NumericCharacteristicValueRef with ReferenceAttributeValueSelector using FilterAttributeValue(CharacteristicCode) {
      editable = [CharacteristicCodeTypeDb = "N"];
      hidekey = [true];
      label = "Attribute Value Numeric";
      description = NumericCharacteristicValue;
      freeinput = [true];
   }
   field UnitMeasRef {
      size = Small;
      editable = [CharacteristicCodeTypeDb = "N"];
   }
   field CharacteristicCodeType;
   field Rowtype;
   // fieldranking CharacteristicCodeRef, CharacteristicRef.Description, UnitMeasRef, Rowtype;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------
