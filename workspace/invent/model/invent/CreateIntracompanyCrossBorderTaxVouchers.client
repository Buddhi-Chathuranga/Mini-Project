--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-09-08  MalLlk  SC21R2-1915, Created.
--------------------------------------------------------------------------------------

client CreateIntracompanyCrossBorderTaxVouchers;
component INVENT;
layer Core;
projection CreateIntracompanyCrossBorderTaxVouchers;

--------------------------------- FRAGMENTS ---------------------------------

include fragment ScheduledTasksCommon;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry CreateIntracompanyCrossBorderTaxVouchersNavEntry parent InventNavigator.WarehouseManagementIntraCompanyTaxReporting at index 200 {
      label = "Create Intracompany Cross-border Tax Vouchers";
      assistant CreateIntracompanyCrossBorderTaxVouchersAssistant;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant CreateIntracompanyCrossBorderTaxVouchersAssistant using TaskVirtuals {
   label = "Create Intracompany Cross-border Tax Vouchers";
   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         -- Init parameters
         set Company = Params.Company;
         set FromDate = Params.FromDate;
         set ToDate = Params.ToDate;
         set ExecutionOffsetFrom = Params.ExecutionOffsetFrom;
         set ExecutionOffsetTo = Params.ExecutionOffsetTo;
      }
   }
   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }
   finish command {
      enabled = [(Company != null and FromDate != null and ToDate != null and TaskOption = "Now") or(
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      variable ExecuteFlagVar {
         type = Boolean;
      }

      execute {
         if [TaskOption = "Now"] {
            set ExecuteFlagVar = true;
            call DateRangeInDifferentMonths(FromDate, ToDate) into DifferentMonthsVar;
            if [DifferentMonthsVar] {
               confirm("The time scale for this covers more than one month. Do you want to continue ?") {
                  when CANCEL {
                     set ExecuteFlagVar = false;
                  }
               }
            }
            if [ExecuteFlagVar] {
               call ExecuteTask();
               set Result = "Task '${ScheduleName}' has been successfully queued as a background job.";
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}.";
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
}

--------------------------------- COMMANDS ----------------------------------


--------------------------------- SELECTORS ---------------------------------


---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";

   field CompanyRef;
   field FromDate {
      visible = [TaskOption = "Now"];
   }
   field ToDate {
      visible = [TaskOption = "Now"];
   }
   field ExecutionOffsetFrom {
      visible = [TaskOption = "Schedule"];
   }
   field ExecutionOffsetTo {
      visible = [TaskOption = "Schedule"];
   }
}


----------------------------------- LISTS -----------------------------------


---------------------------------- DIALOGS ----------------------------------


-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------


----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------
