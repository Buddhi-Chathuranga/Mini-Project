----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-03-12  SBalLK  SC2020R1-12873, Added dynamic dependency for navigator entries.
-- 2021-03-10  SBalLK  SC2020R1-12867, Added dynamic dependency for navigator entries.
-- 2021-02-08  UdGnlk  Bug 157791 (SCZ-13365), Modified HandlingUnitsHandlingUnitNavEntry parent navigator from ReceiptHandlingUnitsNavEntry to ReceiptHandlingUnits.
-- 2021-02-02  UdGnlk  SCZ-12333, Modified InboundShipmentHandlingUnitNavEntry parent navigator from InboundShipmentHandlingUnitsNavEntry to InboundShipmentHandlingUnits.
-- 2020-10-19  DiJwlk  SC2020R1-10788, Modified NewCommnad by setting mode = Global, to display the command button when data is not available.
-- 2020-07-28  Aabalk  SCXTEND-4364, Added fields ManualTareWeight and OperativeUnitTareWeight to WeightGroup.
-- 2020-03-04  Aabalk  SCXTEND-2300, Changed RootNode and HandlingUnitChildNode navigator icon emphasis to denote when a handling unit has attached parts.
-- 2020-02-21  ChFolk  SCXTEND-3462, Added homepage propert for Handling Unit to support lookup for ParentHandlingUnit and TopParentHandlingUnit.
-- 2019-07-10  RoJalk  SCUXXW4-22687, Renamed Handling_Unit_API.Generate_Sscc_No_Exist_In_Strc to Handling_Unit_API.Check_Generate_Sscc_No_Struct.
-- 2019-07-04  ChFolk  SCUXXW4-16712, Removed command UnattchPartFromHandlingUnitCommand from PartInStockDetail page which is now only use to see the part in stock information only.
-- 2019-07-02  JaThlk  SCUXXW4-16766, Removed Location No card and added Location No and Contract in the selectors.
-- 2019-06-28  ChFolk  SCUXXW4-16712, Added commands UnattchPartsFromHuFromPartsInStockCommand and UnattchPartsFromHuFromReceiptInvLocCommand instead of UnattchPartsFromHandlingUnitCommand.
-- 2019-06-06  JaThlk  SCUXXW4-21526, Removed the card for site in the Handling Unit header.
-- 2019-06-06  ChFolk  SCUXXW4-22142, Added NewCommand to the tree to allow adding new records into empty page.
-- 2019-05-27  ChFolk  SCUXXw4-21153, Modified UnattchPartFromHandlingUnitCommand to pass new parameters to UnattachPartsFromHandlingUnitAssistant.
-- 2019-05-23  ChFolk  SCUXXw4-16710, nested list feature is added to structure tab.
-- 2019-05-06  DaZase  SCUXXW4-19632, Changed calls to GetHuLabelResultKey and GetHuContentLabelResultKey since these are now Bound.
-- 2019-02-25  fandse  SCUXXW4-16155, Re-grouping and re-naming, fixed Unattach Part of part node, corrected quantity on part node.
-- 2019-02-19  fandse  SCUXXW4-16155, Command Pack According to Packing Instruction removed from Structure tab
-- 2019-02-15  fandse  SCUXXW4-16155, Added details button in the Structure tab to be able to populate current HU in the header.
-- 2019-02-14  fandse  SCUXXW4-16155, Clean-up of irrelevant shipment related code in Delete Command.
-- 2019-02-13  fandse  SCUXXW4-16155, Rearranged the Weight group to be more in line with Volume group.
-- 2019-02-13  fandse  SCUXXW4-16155, Added SSCC and Alt Handling Unit Label ID to tree selector to be able to search for all IDs.
-- 2019-02-13  fandse  SCUXXW4-6101, Made InTransit hidden when false, removed ID from Change Parent Handling Unit
-- 2019-02-11  fandse  UXXPERF-27, Performance improvments.
-- 2019-01-30  SuDelk  SCUXXW4-6101, Made changes mainly in General tab Groups and Structure tab columns as per comments received from Leif.
-- 2019-01-25  ChFolk  SCUXXW4-6101, Removed command ApplyPackingInstructionsCommand and include new assistant AddToExistingHandlingUnitAssistant which
-- 2019-01-25          supports Adding handling units using either handling unit types or Packing Instructions. Removed included fragment AddHandlingUnitsAssistant.
-- 2019-01-23  ChFolk  SCUXXW4-6101, Removed dialog CreateHandlingUnitDialog and command CreateHuAccordToPackInstructCommand and include new fragment
-- 2019-01-23          CreateNewHandlingUnitAssistant which support both together.
-- 2019-01-16  ChFolk  SCUXXW4-6101, Added HuDetailSelector to avoid refresh issue when doing modification in HandlingUnitDetail.
-- 2019-01-14  SuDelk  SCUXXW4-6101, Made following fields read-only Site,Location, Parent HU, Top Parent HU,Shipment ID.
-- 2019-01-11  SuDelk  SCUXXW4-6101, Added Command Groupings.
-- 2019-01-09  ChFolk  SCUXXW4-6101, Included fragment HandlingUnitTreeViewRepackDialog and added commands RepackStockQuantity and RepackAccessoryQuantity
-- 2019-01-09          which supports moving parts and accessaries between tree nodes.
-- 2019-01-03  ChFolk  SCUXXW4-6101, Moved some include fragments to the HandlingUnitsInStockBaseList.
-- 2018-12-31  ChFolk  SCUXXW4-3891, Included fragment UnattachedInventoryPartsInArrivalTab.
-- 2018-12-31  ChFolk  SCUXXW4-6101, Added NewCommnad and CreateHandlingUnitDialog to support entering new handling unit as
-- 2018-12-31          it is not supported as default with the tree structure.
-- 2018-12-21  ChFolk  SCUXXW4-6101, Moved some fragments to the respective fragments as now fragments on fragmnets is possible.
-- 2018-12-21          Include commands from tree structure to the header.
-- 2018-12-14  fandse  SCUXXW4-7102  Removed fragments already included in PrePostingWithoutSourceAssitant.fragment
-- 2018-12-13  ChFolk  SCUXXW4-6101, Include fragments ApplyPackingInstructionAssistant and DocumentText to complete commands
-- 2018-12-13          CreateHuAccordToPackInstructCommand and DocumentTextCommand.
-- 2018-12-10  Chfolk  SCUXXW4-4786, Included AddHandlingUnitsAssistant to completed AddHandlingUnitsCommand.
-- 2018-12-08  Chfolk  SCUXXW4-6101, Allow dynamically load of bottom list in structure tab based on location type
-- 2018-11-26  SUDELK  SCUXXW4-6101, Re-arranged some fields and Groups in General tab.
-- 2018-11-24  ChFolk  SCUXXW4-6101, Converted frmHandlingUnit using MTG Version: 1.33.
----------------------------------------------------------------------------------------------------------
client HandlingUnit;
component INVENT;
layer Core;
projection HandlingUnitHandling;

include fragment HandlingUnitStructureList;
include fragment UnattachedInventoryPartsInStockTab;
@DynamicComponentDependency RCEIPT
include fragment UnattachedInventoryPartsInArrivalTab;

include fragment HandlingUnitLov4Selector;
include fragment HandlingUnitLov5Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation19Selector;
include fragment DocumentText;
include fragment ApplyPackingInstructionAssistant;
include fragment HandlingUnitAccessoriesAssistant;
include fragment HandlingUnitTreeViewRepackDialog;
include fragment CreateNewHandlingUnitAssistant;
include fragment AddToExistingHandlingUnitAssistant;

warningsenabled = ModifyParentHandlingUnit;
warningsenabled = ConnectToHandlingUnits;
warningsenabled = CheckCapacityExceed;
warningsenabled = RepackPartInHandlingUnit;
warningsenabled = RepackAccessoryInHandlingUnit;
warningsenabled = CopyStructure;
warningsenabled = CreateNewHandlingUnit;
warningsenabled = AddToExistingHandlingUnit;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry WarehouseMgtHandlingUnitNavEntry parent InventNavigator.WarehouseManagementHandlingUnits at index 100 {
      label = "Handling Unit";
      tree HandlingUnitStructureTree home HandlingUnit;
   }

   @DynamicComponentDependency RCEIPT
   entry InboundShipmentHandlingUnitNavEntry parent InventNavigator.InboundShipmentHandlingUnits at index 100 {
      label = "Handling Unit";
      tree HandlingUnitStructureTree home HandlingUnit;
   }
   @DynamicComponentDependency PURCH
   entry HandlingUnitsHandlingUnitNavEntry parent PurchNavigator.ReceiptHandlingUnits at index 100 {
      label = "Handling Unit";
      tree HandlingUnitStructureTree home HandlingUnit;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page HandlingUnitDetail using HandlingUnitSet {
   label = "Handling Unit";
   selector HuDetailSelector;
   group HandlingUnitGroup;
   tabs {
      tab {
         label = "General";
         arrange {
            group VolumeGroup;
            group DimentionsGroup;
            group WeightGroup;
            group SourceGroup;
            group PrintGroup;
            group BlockGroup;
            group LocationDetailsGroup;
            group Notes;
         }
      }
      tab {
         label = "Structure";
         list HandlingUnitStructureList using GetHandlingUnitStructure(HandlingUnitId) {
            details = "tree/HandlingUnit/HandlingUnitStructureTree?$filter=HandlingUnitId eq $[HandlingUnitId]";
         }
         list InventoryPartInStockForHuStructureList(InventoryPartsInStockForHuArray) bind HandlingUnitStructureList {
            visible = [LocationTypeDb != "QA" and LocationTypeDb != "ARRIVAL"];
            display = Nested;
            label = " ";
         }
         @DynamicComponentDependency RCEIPT
         list ReceiptInvLocationForHuStructureList(ReceiptInvLocationHuArray) bind HandlingUnitStructureList {
            visible = [LocationTypeDb = "QA" or LocationTypeDb = "ARRIVAL"];
            display = Nested;
            label = " ";
         }
      }
      tab {
         visible = [ShipmentId = null and(LocationTypeDb != "QA" and LocationTypeDb != "ARRIVAL")];
         label = "Unattached Inventory Parts In Stock";
         list UnattachedInventoryPartsInStockList using GetUnattachedPartInStock(Contract, LocationNo, HandlingUnitId, HandlingUnitTypeId);
      }
      tab {
         label = "Unattached Inventory Parts In Arrival";
         visible = [ShipmentId = null and LocationTypeDb != "PICKING"];
         @DynamicComponentDependency RCEIPT
         list UnattachedReceiptInvLocationList using GetUnattachedPartInArrival(Contract, LocationNo, HandlingUnitId, HandlingUnitTypeId);
      }
   }
   command NewCommnad;
   commandgroup ContentStructureCommandGroup {
      commandgroup ContentStructureCommandSubGroup {
         label = "Content and Structure";
         command AddHandlingUnitsCommand;
         command HandlingUnitAccessoriesCommand;
         command ChangeParentCommand;
         command UnattchPartsFromHuFromPartsInStockCommand;
         command UnattchPartsFromHuFromReceiptInvLocCommand;

         command DeleteHandlingUnitCommand;
      }
   }
   commandgroup LabelsCommandGroup {
      commandgroup LabelsCommandSubGroup {
         label = "Labels";
         commandgroup LabelsForStructureCommandSubGroup {
            label = "for Structure";
            command CreateSsccForHUCommand;
            command PrintHandlingUnitLabelsCommand;
            command PrintHandlingUnitContentLabelsCommand;
         }
         commandgroup LabelsForHandlingUnitCommandSubGroup {
            label = "for Handling Unit";
            command CreateSsccCommand;
            command PrintHandlingUnitLabelCommand;
            command PrintHandlingUnitContentLabelCommand;
         }
      }
   }
   command DocumentTextCommand;
}

page PartInStockDetail using InventoryPartInStockSet {
   label = "Stock details -Part : ${PartNo} Handling Unit - ${HandlingUnitId} ";
   editmode = Inline;
   selector InvPartInStockDetailsSelector;
   group PartInStockGroup;

}

page HandlingUnitAccessoriesDetail using AccessoryOnHandlingUnitSet {
   label = "Accessory - ${HandlingUnitAccessoryId} details Attached to Handling Unit - ${HandlingUnitId} ";
   editmode = Inline;
   selector AccessoryOnHandlingUnitSelector;
   group AccessoriesDetailGroup;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command NewCommnad for HandlingUnit {
   label = "New";
   icon = "new";
   style = IconOnly;
   mode = Global;
   variable HandlingUnitIdListVar {
      type = Text;
   }
   execute {
      assistant CreateNewHandlingUnitAssistant into(HandlingUnitIdListVar) {
         when OK {
            if [HandlingUnitIdListVar != null] {
               navigate "tree/HandlingUnit/HandlingUnitStructureTree;$filter=${HandlingUnitIdListVar}";
            }
            exit OK;
         }
      }
   }
}

command ChangeParentCommand for HandlingUnit {
   label = "Change Parent Handling Unit";
   enabled = [ShipmentId = null and HandlingUnitId != null];
   bulkexecute {
      dialog ChangeParentHandlingUnitDialog(Selection) {
         when CANCEL {
            exit;
         }
      }
   }
}

command DocumentTextCommand for HandlingUnit {
   label = "Document Text";
   enabled = [true];
   variable LabelVar {
      type = Text;
   }
   execute {
      set LabelVar = " for Handling Unit - ${HandlingUnitId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelVar, false) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

command AddHandlingUnitsCommand for HandlingUnit {
   label = "Add Handling Units";
   enabled = [ShipmentId = null];
   execute {
      assistant AddToExistingHandlingUnitAssistant(HandlingUnitId, null, null, null, null, null) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command DeleteHandlingUnitCommand for HandlingUnit {
   label = "Delete Handling Units";
   enabled = [ShipmentId = null];
   execute {
      if [NoOfChildren > 0] {
         inquire("Do you want to delete this handling unit and all handling units beneath this node in the handling unit structure?
   If Yes - the system will delete this handling unit and all connected handling units.
   If No - the system will only delete this handling unit and any connected handling units will remain but moved one level up in the handling unit structure.") {
            when CANCEL {
               exit;
            }
            when YES {
               call RemoveHuStructure(HandlingUnitId);
            }
            when NO {
               call RemoveHandlingUnit(HandlingUnitId);
            }
         }
      }
      else {
         call RemoveHuStructure(HandlingUnitId);
      }
   }
}

command HandlingUnitAccessoriesCommand for HandlingUnit {
   label = "Add Accessories";
   enabled = [ShipmentId = null];
   execute {

      assistant HandlingUnitAccessoriesAssistant(HandlingUnitId) {
         when CANCEL {
            exit;
         }
      }
   }
}

command CreateSsccForHUCommand for HandlingUnit {
   label = "Generate SSCCs";
   enabled = [CreateSsccExist];
   execute {
      call CreateSsccForHu(HandlingUnitId);
   }
}

command PrintHandlingUnitLabelsCommand for HandlingUnit {
   label = "Print Handling Unit Labels";
   enabled = [PrintHuLabelsExist];
   variable ResultKeyListVar {
      type = Text;
   }
   execute {
      call GetHuLabelResultKey() into ResultKeyListVar;
      if [ResultKeyListVar != null] {
         printdialog ResultKeyListVar;
      }
   }
}

command PrintHandlingUnitContentLabelsCommand for HandlingUnit {
   label = "Print Handling Unit Content Labels";
   enabled = [PrintHuContentLabelsExist];
   variable ResultKeyListVar {
      type = Text;
   }
   execute {
      call GetHuContentLabelResultKey() into ResultKeyListVar;
      if [ResultKeyListVar != null] {
         printdialog ResultKeyListVar;
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

selector HuSelector for HandlingUnit {
   label = "${HandlingUnitId} - ${HandlingUnitTypeId}";
   static HandlingUnitId;
   static Sscc {
      visible = [Sscc != null];
   }
   static AltHandlingUnitLabelId {
      visible = [AltHandlingUnitLabelId != null];
   }
   static HandlingUnitTypeId;
   static Contract {
      visible = [Contract != null];
   }
   static LocationNo {
      visible = [LocationNo != null];
   }
}

selector HuDetailSelector for HandlingUnit {
   label = "${HandlingUnitId} - ${HandlingUnitTypeId}";
   static HandlingUnitId;
   static Sscc {
      visible = [Sscc != null];
   }
   static AltHandlingUnitLabelId {
      visible = [AltHandlingUnitLabelId != null];
   }
   static HandlingUnitTypeId;
   static Contract {
      visible = [Contract != null];
   }
   static LocationNo {
      visible = [LocationNo != null];
   }
}

---------------------------------- GROUPS -----------------------------------
group HandlingUnitGroup for HandlingUnit {
   label = " ";
   field HandlingUnitId {
      size = Small;
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeDescription;
      size = Small;
      validate command {
         variable HuTypeDetailStructureVar {
            type = Structure(HuTypeDetailStructure);
         }
         execute {
            call GetDefaultValuesForHuType(HandlingUnitTypeId) into HuTypeDetailStructureVar;
            set HandlingUnitCategoryId = HuTypeDetailStructureVar.HandlingUnitCategoryId;
            set Width = HuTypeDetailStructureVar.Width;
            set Height = HuTypeDetailStructureVar.Height;
            set Depth = HuTypeDetailStructureVar.Depth;
            set UomForLength = HuTypeDetailStructureVar.UomForLength;
            set UomForVolume = HuTypeDetailStructureVar.UomForVolume;
            set UomForWeight = HuTypeDetailStructureVar.UomForWeight;
            set MaxVolumeCapacity = HuTypeDetailStructureVar.MaxVolumeCapacity;
            set MaxWeightCapacity = HuTypeDetailStructureVar.MaxWeightCapacity;
            set TareWeight = HuTypeDetailStructureVar.TareWeight;
            set AdditiveVolumeDb = HuTypeDetailStructureVar.AdditiveVolumeDb;
            set StackableDb = HuTypeDetailStructureVar.StackableDb;
            set GenerateSsccNoDb = HuTypeDetailStructureVar.GenerateSsccDb;
            set PrintLabelDb = HuTypeDetailStructureVar.PrintLabelDb;
            set PrintContentLabelDb = HuTypeDetailStructureVar.PrintContentLabelDb;
            set PrintShipmentLabelDb = HuTypeDetailStructureVar.PrintShipmentLabelDb;

         }
      }
   }
   lov HandlingUnitCategoryIdRef with ReferenceHandlingUnitCategorySelector {
      label = "Handling Unit Category";
      size = Small;
      editable = [false];
      description = HandlingUnitCategoryDescription;
   }
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      label = "Alt Handling Unit Label ID";
      editable = [true];
      size = Small;
   }
   field ParentHandlingUnitIdRef {
      size = Small;
      editable = [false];
   }
   field TopParentHandlingUnitIdRef {
      size = Small;
      editable = [false];
      visible = [TopParentHandlingUnitId != null];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;
      editable = [false];
      size = Small;
   }
   lov LocationNoRef with ReferenceInventoryLocation19Selector {
      size = Small;
      editable = [false];
   }
   field LocationType {
      size = Small;
   }
   field Composition {
      size = Small;
   }
   @DynamicComponentDependency SHPMNT
   field ShipmentIdRef {
      visible = [ShipmentId != null];
      editable = [false];
      size = Small;
   }
   field GenerateSsccNoDb {
      size = Small;
   }
   field IsInTransit {
      size = Small;
      visible = [IsInTransit = true];
   }
   field DocumentText {
      size = Small;
   }
   field AccessoryExist {
      size = Small;
   }
   field ConnectedPartsExist {
      visible = [false];
   }
}

group LocationDetailsGroup for HandlingUnit {
   label = "Location Details";
   field WarehouseId {
      size = Small;
   }
   field BayId {
      size = Small;
   }
   field RowId {
      size = Small;
   }
   field TierId {
      size = Small;
   }
   field BinId {
      size = Small;
   }
}
group SourceGroup for HandlingUnit {
   label = "Source";
   field SourceRefType {
      size = Small;
      editable = [false];
   }
   field SourceRef1 {
      size = Small;
      editable = [false];
   }
   field SourceRef2 {
      size = Small;
      editable = [false];
   }
   field SourceRef3 {
      size = Small;
      editable = [false];
   }
}
group PrintGroup for HandlingUnit {
   label = "Print";
   field PrintLabelDb;
   field PrintContentLabelDb;
   field PrintShipmentLabelDb;
}

group BlockGroup for HandlingUnit {
   label = "Content Restrictions";
   field MixOfPartNoBlockedDb;
   field MixOfCondCodeBlockedDb;
   field MixOfLotBatchBlockedDb;
}

group DimentionsGroup for HandlingUnit {
   label = "Dimensions";
   field Width {
      size = Small;
   }
   field Height {
      size = Small;
   }
   field Depth {
      size = Small;
   }
   field UomForLengthRef {
      size = Small;
   }
}
group WeightGroup for HandlingUnit {
   label = "Weight";
   field ManualGrossWeight {
      size = Small;
   }
   field OperativeGrossWeight {
      size = Small;
   }
   field MaxWeightCapacity {
      size = Small;
   }
   field NetWeight {
      size = Small;
   }
   field ManualTareWeight {
      size = Small;
   }
   field OperativeUnitTareWeight {
      size = Small;
   }
   field TareWeight {
      size = Small;
   }
   field UomForWeight {
      size = Small;
   }
}
group VolumeGroup for HandlingUnit {
   label = "Volume";
   field ManualVolume {
      size = Small;
   }
   field OperativeVolume {
      size = Small;
   }
   field MaxVolumeCapacity {
      size = Small;
   }
   field UomForVolume {
      label = "UoM for Volume";
      size = Small;
   }
   field AdditiveVolumeDb {
      size = Small;
   }
   field StackableDb {
      size = Small;
   }
}
group Notes for HandlingUnit {
   field NoteText {
      label = "Notes";
      multiline = true;
   }
}

group PartInStockGroup for InvPartInStockDetails {
   label = "";
   lov PartRef with InventoryPartSelector {
      description = PartDescription;
   }
   @DynamicComponentDependency CFGCHR
   lov ConfigurationRef with ConfigurationSpecSelector {
      description = ConfigurationRef.Description;
   }
   field SerialNo;
   field LotBatchNo;
   field EngChgLevel;
   field WaivDevRejNo;
   field ActivitySeq;
   field HandlingUnitId;
   measure QtyOnhand(UoM);
   measure QtyAvailable(UoM);
   measure CatchQtyOnhand(CatchUoM) {
      visible = [CatchQtyOnhand != null];
   }
   field ConditionCode;
}

group AccessoriesDetailGroup for AccessoryOnHandlingUnit {
   label = " ";
   field HandlingUnitId {
      size = Small;
   }
   lov HandlingUnitAccessoryRef with AccessoryOnHandlingUnitSelector {
      label = "Handling Unit Accessory";
      description = HandlingUnitAccessoryRef.Description;
   }
   measure Quantity(HandlingUnitAccessoryRef.UnitCode) {
      size = Small;
   }
   measure HandlingUnitAccessoryRef.Weight(HandlingUnitAccessoryRef.UomForWeight) {
      size = Small;
      label = "Net Weight";
   }
   field HandlingUnitAccessoryRef.AdditiveVolume {
      size = Small;
      label = "Additive Volume";
   }
   measure HandlingUnitAccessoryRef.Volume(HandlingUnitAccessoryRef.UomForVolume) {
      size = Small;
      label = "Outer Volume";
   }
}

----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------
tree HandlingUnitStructureTree using HandlingUnitSet {
   label = "Handling Unit Structure";
   selector HuSelector;
   command NewCommnad;
   rootnode RootNode {
      label = "${HandlingUnitId} - ${HandlingUnitTypeId}";
      orderby = HandlingUnitId asc;
      navigate {
         page HandlingUnitDetail {
            filter(HandlingUnitId, HandlingUnitId);
            filter(HandlingUnitTypeId, HandlingUnitTypeId);
         }
      }
      iconset {
         icon "box-large";
         emphasis Complementary3 = [ConnectedPartsExist];
      }
      connections {
         node AccessoriesNode(HandlingUnitAccessoriesNode);
         node PartInStockNode(PartInStockNode);
         node HandlingUnitChildNode using GetChildHandlingUnits(HandlingUnitId);
      }
   }
   node HandlingUnitChildNode for HandlingUnit {
      label = "${HandlingUnitId} - ${HandlingUnitTypeId}";
      orderby = HandlingUnitId asc;

      navigate {
         page HandlingUnitDetail {
            filter(HandlingUnitId, HandlingUnitId);
            filter(HandlingUnitTypeId, HandlingUnitTypeId);
         }
      }
      iconset {
         icon "box-large";
         emphasis Complementary3 = [ConnectedPartsExist];
      }
      connections {
         node AccessoriesNode(HandlingUnitAccessoriesNode);
         node PartInStockNode(PartInStockNode);
         node HandlingUnitChildNode using GetChildHandlingUnits(HandlingUnitId);
      }
      onmove {
         when HandlingUnitChildNode command ModifyParentHandlingUnitId;
         when RootNode command ModifyParentHandlingUnitId;
      }
      oncopy {
         when HandlingUnitChildNode command CopyStructure;
         when RootNode command CopyStructure;
      }

   }
   node PartInStockNode for InvPartInStockDetails {
      label = "${PartNo} - ${SerialNo} - ${LotBatchNo} - ${WaivDevRejNo} - ${EngChgLevel} Qty: ${QtyOnhand} ${UoM}";
      navigate {
         page PartInStockDetail {
            filter(HandlingUnitId, HandlingUnitId);
         }
      }
      iconset {
         icon "diamon-solid-small";
      }
      onmove {
         when HandlingUnitChildNode command RepackStockQuantity;
         when RootNode command RepackStockQuantity;
      }
   }
   node AccessoriesNode for AccessoryOnHandlingUnit {
      label = "${HandlingUnitAccessoryId} Qty: ${Quantity} ${UnitMeas}";
     // label = "${HandlingUnitAccessoryId} Qty: ${Quantity} ${HandlingUnitAccessoryRef.UnitCode}";
      navigate {
         page HandlingUnitAccessoriesDetail {
            filter(HandlingUnitId, HandlingUnitId);
            filter(HandlingUnitAccessoryId, HandlingUnitAccessoryId);
         }
      }
      iconset {
         icon "circle";
      }
      onmove {
         when HandlingUnitChildNode command RepackAccessoryQuantity;
         when RootNode command RepackAccessoryQuantity;
      }
   }
}

command ModifyParentHandlingUnitId {
   label = "";
   execute {
      call ModifyParentHandlingUnit(source.HandlingUnitId, destination.HandlingUnitId);
   }
}

command RepackStockQuantity {
   label = "";
   variable QtyMoveVar {
      type = Number;
   }
   variable CatchQtyMoveVar {
      type = Number;
   }
   variable SourceQtyVar {
      type = Text;
   }
   variable SourceUoMVar {
      type = Text;
   }
   variable SourceCatchQtyVar {
      type = Text;
   }
   variable SourceCatchUoMVar {
      type = Text;
   }
   execute {
      set SourceQtyVar = "${source.QtyAvailable}";
      set SourceUoMVar = "${source.UoM}";
      set SourceCatchQtyVar = "${source.CatchQtyOnhand}";
      set SourceCatchUoMVar = "${source.CatchUoM}";
      dialog HandlingUnitTreeViewRepack(SourceQtyVar, SourceUoMVar, SourceCatchQtyVar, SourceCatchUoMVar) into(QtyMoveVar, CatchQtyMoveVar) {
         when OK {
            call RepackPartInHandlingUnit(source.HandlingUnitId, destination.HandlingUnitId, source.Contract, source.PartNo, source.ConfigurationId, source.LocationNo,
            source.LotBatchNo, source.SerialNo, source.EngChgLevel, source.WaivDevRejNo, source.ActivitySeq, QtyMoveVar, CatchQtyMoveVar);
         }
      }
   }
}

command RepackAccessoryQuantity {
   label = "";
   mode = SingleRecord;
   variable QtyMoveVar {
      type = Number;
   }
   variable CatchQtyMoveVar {
      type = Number;
   }
   variable SourceQtyVar {
      type = Text;
   }
   variable SourceUoMVar {
      type = Text;
   }
   execute {
      set SourceQtyVar = "${source.Quantity}";
      set SourceUoMVar = "${source.UnitMeas}";
      dialog HandlingUnitTreeViewRepack(SourceQtyVar, SourceUoMVar, null, null) into(QtyMoveVar, CatchQtyMoveVar) {
         when OK {
            call RepackAccessoryInHandlingUnit(source.HandlingUnitId, destination.HandlingUnitId, source.HandlingUnitAccessoryId, QtyMoveVar);
         }
      }

   }
}

command CopyStructure {
   label = "";
   execute {
      call CopyStructure(source.HandlingUnitId, destination.HandlingUnitId);
   }
}

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


