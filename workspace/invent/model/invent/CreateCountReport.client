----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 2021-11-02  JaThlk  SC21R2-2927, Modified AdvancedParamGroup to add OneReportPerWarehouse field and to move PrintCountReportDb field from ParameterGroup.
-- 2020-10-26  JaThlk  SC2020R1-10875, Changed the group name from AdvancedGroup to AdvancedParamGroup since the same name has been used in DOCMAN attachments which violates the visible condition.
-- 2020-05-21  BudKLK  Bug 153999 (SCZ-9885), Added GetProcessCount function for the lov ContractRef to validate the ProcessCount according to the selected contract.
-- 2020-04-21  JaThlk  Bug 153545 (SCZ-9774), Set the translatable true for the variable Result.
-- 2019-10-30  SBalLK  Bug 150714 (SCZ-7569), Added SetLovUserWhereForBin, SetLovUserWhereForLocationGroup functions for respective fields to filter valid location group types.
-- 2019-06-11  DaZase  SCUXXW4-12778, Added function SetLovUserWhereForPart to PartNoRef.
-- 2019-03-28  ChFolk  SCUXXW4-18092, Added dynamic dependency to avoid errors in modularity test.
-- 2018-12-04  RAKUSE  SCUXXW4-5724, Converted dialog 'dlgPSheetCreateCountReport' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CreateCountReport;
component INVENT;
layer Core;
projection CreateCountReportHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseLov2Selector;
include fragment WarehouseBayLov2Selector;
include fragment WarehouseBayRowLov2Selector;
include fragment WarehouseBayTierLov2Selector;
include fragment WarehouseBayBinLovSelector;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent InventNavigator.WarehouseManagementCounting at index 100 {
      label = "Create Count Report";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         execute {
            call GetProcessCount(Contract) into ProcessCount;
         }
      }
   }
   lov WarehouseIdRef with ReferenceWarehouseLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov BayIdRef with ReferenceWarehouseBayLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov RowIdRef with ReferenceWarehouseBayRowLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov TierIdRef with ReferenceWarehouseBayTierLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov BinIdRef with ReferenceWarehouseBayBinLovSelector using SetLovUserWhereForBin {
      freeinput = [true];
      size = Small;
   }
   lov StorageZoneIdRef with ReferenceStorageZoneSelector {
      freeinput = [true];
   }

}

group AdvancedParamGroup for TaskVirtual {
   label = "Advanced";
   field CycleCodeDb {
      label = "Part Selection";
   }
   field FreezeCodeDb {
      label = "Freeze part while counting";
      size = Small;
      required = [true];

   }
   field IncludeAllQtyDb {
      label = "Include Full Qty Of Part In Location";
      size = Small;
      required = [true];
   }
   lov PartNoRef with ReferenceInventoryPartLov2Selector using SetLovUserWhereForPart {
      freeinput = [true];
      size = Small;
   }
   @DynamicComponentDependency PROJ
   lov ProjectIdRef with ReferenceProjectSelector {
      freeinput = [true];
      size = Small;
      editable = [ExcludeProjectInventory = false];
   }
   field ProcessCount {
      label = "Number of records to be Printed";
      size = Small;
   }
   field MaxQtyOnhand {
      label = "Max On Hand Qty";
      size = Small;
   }
   field ExcludeSince {
      label = "Excluded Parts Counted Since (Days)";
      size = Small;
   }
   lov CommodityCodeRef with ReferenceLovCommodityGroup2Selector {
      freeinput = [true];
      size = Small;
   }
   lov LocationGroupRef with ReferenceInventoryLocationGroupSelector using SetLovUserWhereForLocationGroup {
      freeinput = [true];
      size = Small;
   }
   lov AbcClassRef with ReferenceAbcClassSelector {
      freeinput = [true];
      size = Small;
   }
   field FrequencyClassDb {
      label = "Frequency Class";
      size = Small;
   }
   field LifecycleStageDb {
      label = "Lifecycle Stage";
      size = Small;
   }
   field OneReportPerWarehouse {
      size = Small;
      required = [true];
   }
   field PrintCountReportDb {
      label = "Print Report";
      size = Small;
      required = [true];
   }
}

group ExcludeStockGroup for TaskVirtual {
   label = "Exclude Stock";
   field ExcludeCompanyOwned {
      label = "Company Owned";
      size = Small;
      required = [true];
   }
   field ExcludeConsignment {
      label = "Consignment";
      size = Small;
      required = [true];
   }
   field ExcludeCustomerOwned {
      label = "Customer Owned";
      size = Small;
      required = [true];
   }
   field ExcludeSupplierLoaned {
      label = "Supplier Loaned";
      size = Small;
      required = [true];
   }
   field ExcludeSupplierRented {
      label = "Supplier Rented";
      size = Small;
      required = [true];
   }
   field ExcludeCompanyRentalAsset {
      label = "Company Rental Asset";
      size = Small;
      required = [true];
   }
   field ExcludeRotablePool {
      label = "Rotable Pool";
      size = Small;
      required = [true];
   }
   field ExcludeFaRotablePool {
      label = "FA Rotable Pool";
      size = Small;
      required = [true];
   }
   field ExcludeProjectInventory {
      label = "Project Inventory";
      size = Small;
      required = [true];
   }
   field ExcludeStandardInventory {
      label = "Standard Inventory";
      size = Small;
      required = [true];
   }
   field ExcludeAttachedToHu {
      label = "Attached to Handling Unit";
      size = Small;
      required = [true];
   }
   field ExcludeNotAttachedToHu {
      label = "Not Attached to Handling Unit";
      size = Small;
      required = [true];
   }
}

group HandlingUnitGroup for TaskVirtual {
   label = "Handling Unit";
   field IncludeFullQtyOfHuDb {
      label = "Include Full Qty of Top Handling Unit";
      size = Small;
      required = [true];
      editable = [ExcludeAttachedToHu = false];
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      freeinput = [true];
      size = Small;
      editable = [ExcludeAttachedToHu = false];
   }
   lov TopHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      freeinput = [true];
      size = Small;
      editable = [ExcludeAttachedToHu = false];
   }
   lov HandlingCategoryTypeIdRef with ReferenceHandlingUnitCategorySelector {
      freeinput = [true];
      size = Small;
      editable = [ExcludeAttachedToHu = false];
   }
   lov TopHandlingCategoryTypeIdRef with ReferenceHandlingUnitCategorySelector {
      freeinput = [true];
      size = Small;
      editable = [ExcludeAttachedToHu = false];
   }


}
-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Create Count Report";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         set Contract = Params.Contract;
         set CycleCodeDb = Params.CycleCodeDb;
         set WarehouseId = Params.WarehouseId;
         set BayId = Params.BayId;
         set RowId = Params.RowId;
         set TierId = Params.TierId;
         set BinId = Params.BinId;
         set StorageZoneId = Params.StorageZoneId;
         set PartNo = Params.PartNo;
         set FreezeCodeDb = Params.FreezeCodeDb;
         set IncludeAllQtyDb = Params.IncludeAllQtyDb;
         set ProcessCount = Params.ProcessCount;
         set ExcludeSince = Params.ExcludeSince;
         set MaxQtyOnhand = Params.MaxQtyOnhand;
         set SecondCommodity = Params.SecondCommodity;
         set ExcludeCompanyOwned = Params.ExcludeCompanyOwned;
         set ExcludeCustomerOwned = Params.ExcludeCustomerOwned;
         set ExcludeRotablePool = Params.ExcludeRotablePool;
         set ExcludeConsignment = Params.ExcludeConsignment;
         set ExcludeSupplierLoaned = Params.ExcludeSupplierLoaned;
         set ExcludeFaRotablePool = Params.ExcludeFaRotablePool;
         set ExcludeProjectInventory = Params.ExcludeProjectInventory;
         set ExcludeStandardInventory = Params.ExcludeStandardInventory;
         set ExcludeAttachedToHu = Params.ExcludeAttachedToHu;
         set ExcludeNotAttachedToHu = Params.ExcludeNotAttachedToHu;
         set ExcludeSupplierRented = Params.ExcludeSupplierRented;
         set ExcludeCompanyRentalAsset = Params.ExcludeCompanyRentalAsset;
         set ProjectId = Params.ProjectId;
         set LocationGroup = Params.LocationGroup;
         set AbcClass = Params.AbcClass;
         set FrequencyClassDb = Params.FrequencyClassDb;
         set LifecycleStageDb = Params.LifecycleStageDb;
         set PrintCountReportDb = Params.PrintCountReportDb;
         set IncludeFullQtyOfHuDb = Params.IncludeFullQtyOfHuDb;
         set HandlingUnitTypeId = Params.HandlingUnitTypeId;
         set TopHandlingUnitTypeId = Params.TopHandlingUnitTypeId;
         set HandlingCategoryTypeId = Params.HandlingCategoryTypeId;
         set TopHandlingCategoryTypeId = Params.TopHandlingCategoryTypeId;
         set OneReportPerWarehouse = Params.OneReportPerWarehouse;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         group AdvancedParamGroup;
         group ExcludeStockGroup;
         group HandlingUnitGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null and CycleCodeDb != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
