----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2018-08-21  SuDelk  SCUXXW4-5996 Converted from frmBasicDataForPutawayZones using MTG Version: 1.25
----------------------------------------------------------------------------------------------------------
projection PutawayZoneBasicDataHandling;
component INVENT;
layer Core;
description "Use this API to define putaway zones for inventory parts.";
category Users;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SiteSet for Site;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Site {
   crud = Read;
   from = "site_uiv";
   exec = "";
   keys = Contract {
      where = "CONTRACT = :Contract";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 100;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "DESCRIPTION";
      label = "Description";
      maxlength = 20;
      editable = [false];
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   array SitePutawayZonesArray(Contract) to SitePutawayZone(Contract) {
      where = "(:child.AssetClass IS NULL AND :child.CommodityGroup IS NULL)";
   }
   array AssetFrequencyClassArray(Contract) to SitePutawayZone(Contract) {
      where = "(:child.AssetClass IS NOT NULL )";
   }
   array CommodityGroupFrequencyClassArray(Contract) to SitePutawayZone(Contract) {
      where = "(:child.CommodityGroup IS NOT NULL)";
   }
}

@Override
entity SitePutawayZone {
   crud = Create, Read, Update, Delete;
   from = "site_putaway_zone";
   exec = "SITE_PUTAWAY_ZONE_API";
   keys = Contract, SequenceNo {
      where = "CONTRACT = :Contract and SEQUENCE_NO = :SequenceNo";
   }

   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SequenceNo Number {
      fetch = "SEQUENCE_NO";
      label = "Sequence No";
      editable = [false];
   }
   attribute Ranking Number {
      fetch = "RANKING";
      label = "Ranking";
      required = [true];
   }
   attribute StorageZoneId Text {
      fetch = "STORAGE_ZONE_ID";
      label = "Storage Zone";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute FrequencyClass Enumeration(InvPartFrequencyClass) {
      label = "Frequency Class";
      editable = [true];

   }
   attribute MaxBinsPerPart Number {
      fetch = "MAX_BINS_PER_PART";
      label = "Max Bins Per Part";
   }
   attribute HandlUnitReservationRanking Number {
      fetch = "HANDL_UNIT_RESERVATION_RANKING";
      label = "Handling Unit Reservation Ranking";
      required = [true];
   }
   reference StorageZoneRef(Contract, StorageZoneId) to StorageZone(Contract, StorageZoneId) {
      label = "Storage Zone";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
   reference CommodityGroupRef(CommodityGroup) to CommodityGroup(CommodityCode) {
      label = "Commodity Group";
   }
}

