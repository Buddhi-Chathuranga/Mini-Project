--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2022-01-12  NiRalk  SC21R2-7114, Removed NGB specific filter functions since the company attribute used in the reference.
-- 2021-11-16  NiRalk  SC21R2-5524, Added Acquisition Origin, Acquisition Reason and Goods/Service statistical code to Inventory Part.
-- 2021-11-16          ValidateContract function and ContractInfo structure added.
-- 2021-08-03  JaThlk  Bug 160319 (SCZ-15746), Modified DescriptionCopy attribute to set the value true for the property, updatable.
-- 2021-07-26  RasDlk  SC21R2-1023, Renamed the field ExcludeShipPackProposal to ExclShipPackProposal.
-- 2021-07-21  RasDlk  SC21R2-1035, Added dynamic dependency annotation for SHPMNT to the attribute ExcludeShipPackProposal.
-- 2021-07-13  RasDlk  SC21R2-1035, Added the attribute ExcludeShipPackProposal for the InventoryPart entity.
-- 2021-07-10  WaSalk  SC21R2-835, Added CustWarrantyId and SupWarrantyId to InventoryPartStructure.
-- 2021-06-10  JaThlk  SC21R2-1009, Modified InventoryPart entity to add new attributes, AbcClassLockedUntil, FreqClassLockedUntil and LifeStageLockedUntil and
-- 2021-06-10          to add enumerations for FrequencyClass and LifecycleStage.
-- 2020-11-16  Aabalk  SC2020R1-9294, Converted Boolean attributes into Enumerations where necessary.
-- 2020-09-22  JaThlk  SC2020R1-9882, Removed unused function signature CheckCharacteristicCodeExist.
-- 2020-02-02  ChFolk  SCXTEND-1183, Added default value for AutomaticCapabilityCheck and made it required to avoid null value in the list.
-- 2019-10-31  NISMLK  MFSPRING20-88, Added TechnicalDrawingNo to CreateNewPartCatalogStructure structure and CreatePartCatalog action.
-- 2019-06-11  StHose  SCUXXW4-22245, Added SupplyTypeDb
-- 2019-05-26  NiDalk  SCUXXW4-20681, Added GetProjectId.
-- 2019-05-22  fgusse  SCUXXW4-20687, Added ludependencies = DocumentText.
-- 2019-05-15  DaZase  SCUXXW4-19650, Added initialcheck to all unbounded actions.
-- 2019-03-14  ChFolk  SCUXXW4-17188, Added dynamic dependency for DEMAND on DeleteForecastParts.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing. Also it is removed from where it is unnecessary.
-- 2018-12-03  SucPlk  SCUXXW4-6209, Moved InventoryPartVirtualSet to CopyCharacteristicsFromTemplate fragment.
-- 2018-11-30  SWiclk  SCUXXW4-6209, Moved Characteristics assistant to a fragment.
-- 2018-11-13  SURBLK  SCUXXW4-6209, Added Inventory Part Characteristics tab - frmInventoryPartCharacteristics.
-- 2018-10-30  SWiclk  SCUXXW4-5464, Converted from dlgCreateNewPartCatalog using MTG Version: 1.32
-- 2018-10-23  SWiclk  SCUXXW4-6890, Converted from tbwInventoryPartAlternate using MTG Version: 1.31
-- 2018-10-21  hadolk  MFUXXW4-600,  Added Manufacturing tab
-- 2018-09-13  SWiclk  SCUXXW4-6204, Converted from frmInventoryPart using MTG Version: 1.29
--------------------------------------------------------------------------------------
projection InventoryPartHandling;
component INVENT;
layer Core;
description "Use this API either to enter a new inventory part or to display the inventory part that you want to revise or view.";
category Users;
include fragment StandardNamesLovSelector;
include fragment TechnicalCoordinatorLovSelector;
include fragment InventoryPartLovSelector;
include fragment LovCommodityGroup2Selector;
include fragment LovCommodityGroup1Selector;
include fragment InputUomGroupLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLov18Selector;
@DynamicComponentDependency DEMAND
include fragment CreateForecastParts;
// Document Text related fragments
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment IntorderPartLovSelector;
@DynamicComponentDependency MFGSTD
include fragment ManufPartAttributeHandling;
include fragment DiscreteCharacNumericValueSelector;
include fragment CopyCharacteristicsFromTemplate;
include fragment PartCatalogNotPositionLovSelector;
include fragment CopyPartAssistant;
include fragment CustomerWarrantyAssistant;
include fragment SupplierWarrantyAssistant;
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartSet for InventoryPart;
// Alternate Parts
entityset InventoryPartAlternativePartQuerySet for InventoryPartAlternativePartQuery;

//entityset CopyPartSet for CopyPartVirtual;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPart {
   crud = Read, Create, Update, Delete;
   keys = PartNo, Contract {
      where = "PART_NO = :PartNo and CONTRACT = :Contract";
   }

   use attributes = Description, TypeCode, PlannerBuyer, UnitMeas, CatchUnitMeas, InputUnitMeasGroupId, PrimeCommodity, SecondCommodity, AssetClass, PartStatus,
   AbcClass, FrequencyClass, LifecycleStage, HazardCode, AccountingGroup, PartProductCode, PartProductFamily, TypeDesignation, DimQuality, CreateDate, LastActivityDate,
   NoteText, NoteId, LeadTimeCode, PurchLeadtime, EarliestUltdSupplyDate, ManufLeadtime, ExpectedLeadtime, Supersedes, DurabilityDay, MinDurabDaysCoDeliv, CustWarrantyId,
   MinDurabDaysPlanning, CountryOfOrigin, RegionOfOrigin, CustomsStatNo, IntrastatConvFactor, SupplyChainPartGroup, SupplyCode, DopConnection,
   DopNetting, TechnicalCoordinatorId, QtyCalcRounding, InventoryValuationMethod, InventoryPartCostLevel, InvoiceConsideration, ZeroCostFlag,
   PartCostGroupId, MaxActualCostUpdate, ExtServiceCostMethod, CyclePeriod, CountVariance, OeAllocAssignFlag, AutomaticCapabilityCheck,
   SupWarrantyId, StandardPutawayQty, DescriptionCopy, StdNameId, PutawayZoneRefillOption, AvailActivityStatus, MandatoryExpirationDate, ResetConfigStdCost,
   NegativeOnHand, CoReserveOnhAnalysFlag, CycleCode, StockManagement, ForecastConsumptionFlag, OnhandAnalysisFlag, ShortageFlag, EngAttribute, AbcClassLockedUntil,
   FreqClassLockedUntil, LifeStageLockedUntil, ExclShipPackProposal, StatisticalCode, AcquisitionOrigin, AcquisitionReasonId, Company;

   supportwarnings = [true];

   ludependencies = DocumentText;

   attribute PartNo Text {
      label = "Inventory Part";
      maxlength = 25;
   }
   attribute Description Text {
      label = "Part Description in Use";
      required = [false];
   }
   attribute PartDescriptionInUse Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description in Use";
      maxlength = 200;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      label = "Planner";
      required = [true];
   }
   attribute UnitMeas Text {
      label = "Inventory UoM";
      required = [true];
   }
   attribute UnitOfMeasureDescription Text {
      fetch = "Iso_Unit_API.Get_Description(unit_meas)";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchUnitMeas Text {
      label = "Catch UoM";
   }
   attribute CatchUnitMeasDescription Text {
      fetch = "Iso_Unit_API.Get_Description(catch_unit_meas)";
      maxlength = 2000;
      editable = [false];
   }
   attribute InputUnitMeasGroupId Text {
      label = "Input UoM Group";
   }
   attribute InputUnitDescription Text {
      fetch = "Input_Unit_Meas_Group_API.Get_Description(input_unit_meas_group_id)";
      maxlength = 2000;
      editable = [false];
   }
   attribute PrimeCommodity Text {
      label = "Commodity Group 1";
      format = uppercase;
   }
   attribute PrimeCommodityGrpDescription Text {
      fetch = "Commodity_Group_API.Get_Description(prime_commodity)";
      maxlength = 2000;
      editable = [false];
   }
   attribute SecondCommodity Text {
      label = "Commodity Group 2";
      format = uppercase;
   }
   attribute SecondCommodityGrpDescription Text {
      fetch = "Commodity_Group_API.Get_Description(second_commodity)";
      maxlength = 2000;
      editable = [false];
   }

   attribute AbcClass Text {
      format = uppercase;
   }
   attribute FrequencyClass Enumeration(InvPartFrequencyClass) {
      fetch = "frequency_class_db";
      maxlength = 200;
   }
   attribute LifecycleStage Enumeration(InvPartLifecycleStage) {
      fetch = "lifecycle_stage_db";
      maxlength = 200;
   }
   attribute SafetyInstructionDescription Text {
      fetch = "Safety_Instruction_API.Get_Description(hazard_code)";
      maxlength = 2000;
      editable = [false];
   }
   attribute AccountingGroup Text {
      format = uppercase;
   }
   attribute AccountingGroupDescription Text {
      fetch = "Accounting_Group_API.Get_Description(accounting_group)";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartProductCode Text {
      label = "Product Code";
      format = uppercase;
   }
   attribute ProductCodeDescription Text {
      fetch = "Inventory_Product_Code_API.Get_Description(part_product_code)";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartProductFamily Text {
      label = "Product Family";
      format = uppercase;
   }
   attribute ProductFamilyDescription Text {
      fetch = "Inventory_Product_Family_API.Get_Description(part_product_family)";
      maxlength = 2000;
      editable = [false];
   }
   attribute DimQuality Text {
      label = "Dimension/Quality";
   }
   attribute NetWeight Number {
      fetch = "Inventory_Part_API.Get_Weight_Net(contract,part_no)";
      label = "Net Weight";
      editable = [false];
   }

   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "Weight UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute NetVolume Number {
      fetch = "Inventory_Part_API.Get_Volume_Net(contract,part_no)";
      label = "Net Volume";
      editable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Volume(Site_API.Get_Company(contract))";
      label = "Volume UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute OnHandQty Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand(contract,part_no,null)";
      label = "On Hand Qty";
      editable = [false];
   }
   attribute OnHandCatchQty Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand(contract,part_no,null,'CATCH')";
      label = "On Hand Catch Qty";
      editable = [false];
   }
   attribute CreateDate Date {
      label = "Created";
   }
   attribute LastActivityDate Date {
      label = "Modified";
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute NoteId Number {
      maxlength = 10;
      editable = [false];
   }
   attribute LeadTimeCode Enumeration(InvPartLeadTimeCode) {
      editable = [false];
      fetch = "lead_time_code_db";

   }
   attribute PurchLeadtime Number {
      label = "Purchasing Lead Time";
      maxlength = 32767;
   }
   attribute UnlimitedPurchSupplyDate Date {
      fetch = "Inventory_Part_API.Get_Ultd_Purch_Supply_Date(contract, part_no)";
      label = "";
      editable = [false];
   }
   attribute ManufLeadtime Number {
      label = "Manufacturing Lead Time";
   }
   attribute UnlimitedManufSupplyDate Date {
      fetch = "Inventory_Part_API.Get_Ultd_Manuf_Supply_Date(contract, part_no)";
      label = "";
      editable = [false];
   }
   attribute ExpectedLeadtime Number {
      label = "Expected Lead Time";
   }
   attribute UnlimitedExpectedSupplyDate Date {
      fetch = "Inventory_Part_API.Get_Ultd_Expected_Supply_Date(contract, part_no)";
      label = "";
      editable = [false];
   }
   attribute Supersedes Text {
      label = "Supersedes Part";
      format = uppercase;
   }
   attribute SupersededByPart Text {
      fetch = "Inventory_Part_API.Get_Superseded_By(contract, part_no)";
      label = "Superseded By Part";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute DurabilityDay Number {
      label = "Days";
      maxlength = 4;
   }
   attribute DurabilityWeeks Number {
      label = "Weeks";
      fetch = "durability_day/7";
      maxlength = 4;
      editable = [false];
   }
   attribute MinDurabDaysCoDeliv Number {
      label = "Minimum Remaining Days at CO Delivery";
      maxlength = 4;
   }
   attribute MinDurabDaysPlanning Number {
      label = "Minimum Remaining Days for Planning";
      maxlength = 4;
   }
   attribute MandatoryExpirationDate Boolean("TRUE", "FALSE") {
      fetch = "mandatory_expiration_date_db";
      label = "Mandatory Expiration Date";
      required = [true];
   }
   attribute CountryOfOrigin Text {
      maxlength = 3;
   }
   attribute RegionOfOrigin Text {
      label = "Region Code";
   }
   attribute CustomsStatNo Text {
      label = "Customs Statistics No";
   }
   attribute SupplyCode Enumeration(MaterialRequisSupply.Subset1) {
      label = "Default Material Requisition Supply";
      fetch = "supply_code_db";
   }
   attribute SupplyTypeDb Text {
      fetch = "Inventory_Part_Planning_API.Get_Order_Requisition_Db (Contract, Part_No)";
      editable = [false];
   }
   attribute DopConnection Enumeration(DopConnection) {
      label = "DOP Connection";
      fetch = "dop_connection_db";
   }
   attribute DopNetting Enumeration(DopNetting) {
      label = "DOP Netting";
      fetch = "dop_netting_db";

   }
   attribute TechnicalCoordinatorId Text {
      label = "Technical Coordinator";
   }
   attribute QtyCalcRounding Number {
      maxlength = 2;
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Site_API.Get_Company(Contract))";
      default = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Site_API.Get_Company(rec_.Contract))";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   @DynamicComponentDependency PURCH
   attribute MultiSitePlannedPart Boolean("TRUE", "FALSE") {
      fetch = "Supply_Source_Part_Manager_API.Is_Part_Internally_Sourced(contract, part_no)";
      label = "Multi-Site Planned Part";
      editable = [false];
      required = [true];
   }
   attribute ResetConfigStdCost Boolean("TRUE", "FALSE") {
      fetch = "reset_config_std_cost_db";
      label = "Reset Configuration Standard Cost from Supply Site";
      required = [true];
      editable = [false];
   }
   attribute PartCostGroupId Text {
      label = "Part Cost Group";
      format = uppercase;
   }
   attribute MaxActualCostUpdate Number {
      label = "Maximum Periodic Weighted Average Update (%)";
   }
   attribute ExtServiceCostMethod Enumeration(ExtServiceCostMethod) {
      label = "Include External Service Cost";
      fetch = "ext_service_cost_method_db";
      required = [true];
   }
   attribute CyclePeriod Number {
      label = "Cycle Interval";
      maxlength = 3;
   }
   attribute CountVariance Number {
      label = "Cumulated Counting Difference";
      editable = [false];
      default = "0";
   }
   attribute CycleCode Enumeration(InventoryPartCountType) {
      fetch = "cycle_code_db";
      label = "Cycle Counting";
      required = [true];
   }
   attribute OeAllocAssignFlag Enumeration(CustOrdReservationType) {
      label = "Priority Reservation At Order Entry";
      fetch = "oe_alloc_assign_flag_db";
      editable = [ETag != null];
      required = [true];
      default = "'N'";
   }
   attribute AutomaticCapabilityCheck Enumeration(CapabilityCheckAllocate) {
      label = "Capability Check";
      fetch = "automatic_capability_check_db";
      default = "'NO AUTOMATIC CAPABILITY CHECK'";
      required = [true];
   }

   attribute NegativeOnHand Enumeration(NegativeOnHand) {
      fetch = "negative_on_hand_db";
      label = "Negative On Hand Allowed";
      required = [true];
      default = "'NEG ONHAND NOT OK'";
   }
   attribute ForecastConsumptionFlag Enumeration(InvPartForecastConsum) {
      fetch = "forecast_consumption_flag_db";
      label = "Online Consumption";
      required = [true];
      default = "'NOFORECAST'";
   }
   attribute OnhandAnalysisFlag Enumeration(InventoryPartOnhAnalys) {
      fetch = "onhand_analysis_flag_db";
      label = "Availability Check";
      required = [true];
      default = "'N'";
   }
   attribute ShortageFlag Enumeration(InventoryPartShortage) {
      fetch = "shortage_flag_db";
      label = "Shortage Notification";
      required = [true];
      default = "'N'";
   }
   attribute CoReserveOnhAnalysFlag Enumeration(InventoryPartOnhAnalys) {
      fetch = "co_reserve_onh_analys_flag_db";
      label = "Availability Check At Customer Order Line Reservation";
      required = [true];
      default = "'N'";
   }
   attribute StockManagement Enumeration(InventoryPartManagement) {
      fetch = "stock_management_db";
      label = "Vendor Managed Inventory";
      required = [true];
   }
   attribute SupWarrantyId Number {
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustWarrantyId Number {
      label = "Customer Warranty";
      editable = [false];
   }
   attribute CustWarranty Boolean("TRUE", "FALSE") {
      label = "Customer Warranty";
      fetch = "DECODE(Cust_Warranty_Id, NULL, 'FALSE', 'TRUE')";
      editable = [false];
   }
   attribute SupWarranty Boolean("TRUE", "FALSE") {
      label = "Supplier Warranty";
      fetch = "DECODE(Sup_Warranty_Id, NULL, 'FALSE', 'TRUE')";
      editable = [false];
   }
   attribute StandardPutawayQty Number {
      label = "Standard Putaway Qty";
   }
   attribute DescriptionCopy Text {
      editable = [ETag != null];
      required = [ETag != null];
      updatable = [true];
   }
   attribute PartCatalogPartDescription Text {
      fetch = "Part_Catalog_API.Get_Description(part_no)";
      label = "Part Catalog Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute StdNameId Number {
      label = "Inventory Part Standard Name";
      maxlength = 10;
   }
   attribute GTIN Text {
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(part_no)";
      label = "GTIN";
      maxlength = 14;
      editable = [false];
   }
   attribute GTINSeries Text {
      fetch = "Part_Gtin_API.Get_Gtin_Series(part_no, Part_Gtin_API.Get_Default_Gtin_No(part_no))";
      label = "GTIN Series";
      maxlength = 20;
      editable = [false];
   }
   attribute PutawayZoneRefillOption Enumeration(PutawayZoneRefillOption) {
      label = "Refill Putaway Zones";
      editable = [ETag != null];
      fetch = "putaway_zone_refill_option_db";
   }
   attribute OperativeValue Text {
      fetch = "Inventory_Part_API.Get_Putaway_Zone_Refill_Option(contract,part_no)";
      label = "Operative Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperativeValueSource Text {
      fetch = "Inventory_Part_API.Get_Putaway_Refill_Option_Src(contract, part_no)";
      label = "Operative Value Source";
      maxlength = 2000;
      editable = [false];
   }

   attribute CountryCode Text {
      fetch = "Company_Site_API.Get_Country_Db(contract)";
      editable = [false];
   }

   attribute DocumentTextExist Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(Note_Id), '0', 'FALSE', 'TRUE')";
      label = "Document Text";
      editable = [false];
      required = [true];
   }
   attribute NoteTextExist Boolean {
      label = "Note";
      fetch = "DECODE(Note_Text, NULL, 'FALSE', 'TRUE')";
      editable = [false];
      required = [true];
   }
   attribute UsePartcaDescInventDb Boolean("TRUE", "FALSE") {
      label = "Use Part Catalog Description as Description for Inventory Part";
      fetch = "Site_Invent_Info_API.Get_Use_Partca_Desc_Invent_Db(contract)";
      editable = [false];
   }

   attribute DefaultQtyCalcRound Number {
      fetch = "Site_Invent_Info_API.Get_Default_Qty_Calc_Round(contract)";
      editable = [false];
   }

   attribute PartCatalogStandardName Text {
      fetch = "Part_Catalog_API.Get_Std_Name_Id(PART_NO) || ' - ' || Standard_Names_Language_API.Get_Std_Name(NULL,Part_Catalog_API.Get_Std_Name_Id(PART_NO))";
      editable = [false];
   }

   @DynamicComponentDependency DEMAND
   attribute AnyForecastPartExists Boolean("TRUE", "FALSE") {
      fetch = "Forecast_Part_Util_API.Check_Any_Forecast_Part_Exist(Contract, Part_No)";
      editable = [false];
   }
   @DynamicComponentDependency DEMAND
   attribute AllForecastPartsExist Boolean("TRUE", "FALSE") {
      fetch = "Forecast_Part_Util_API.Check_All_Forecast_Parts_Exist(Contract, Part_No)";
      editable = [false];
   }

   attribute InvoiceConsideration Enumeration(InvoiceConsideration) {
      fetch = "invoice_consideration_db";
      label = "Invoice Consideration";
      required = [false];
   }
   attribute InventoryValuationMethod Enumeration(InventoryValueMethod) {
      fetch = "inventory_valuation_method_db";
      label = "Inventory Valuation Method";
      required = [false];
   }
   attribute InventoryPartCostLevel Enumeration(InventoryPartCostLevel) {
      fetch = "inventory_part_cost_level_db";
      label = "Inventory Part Cost Level";
      required = [false];

   }
   @DynamicComponentDependency SHPMNT
   attribute ExclShipPackProposal Boolean("TRUE", "FALSE");

   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   @DynamicComponentDependency COST
   reference PartCostGroupRef(Contract, PartCostGroupId) to PartCostGroup(Contract, PartCostGroupId) {
      label = "Part Cost Group";
   }
   reference SiteInventInfoRef(Contract) to SiteInventInfo(Contract);
   reference PartCatalogRef(PartNo) to PartCatalog(PartNo);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";

   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference InventoryUomRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "Inventory UoM";
   }
   reference CatchUnitMeasRef(CatchUnitMeas) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }
   reference InputUnitMeasGroupIdRef(UnitMeas, InputUnitMeasGroupId) to InputUomGroupLov(UnitCode, InputUnitMeasGroupId) {
      label = "Input UoM Group";

   }
   reference PrimeCommodityRef(PrimeCommodity) to LovCommodityGroup1(CommodityCode) {
      label = "Commodity Group 1";

   }
   reference SecondCommodityRef(SecondCommodity) to LovCommodityGroup2(CommodityCode) {
      label = "Commodity Group 2";

   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
   reference PartStatusRef(PartStatus) to InventoryPartStatusPar(PartStatus) {
      label = "Part Status";
   }

   reference HazardCodeRef(HazardCode) to SafetyInstruction(HazardCode) {
      label = "Safety Code";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference SupersedesRef(Contract, Supersedes) to InventoryPartLov(Contract, PartNo) {
      label = "Supersedes Part";

   }
   reference SupersededByPartRef(Contract, SupersededByPart) to InventoryPartLov(Contract, PartNo) {
      label = "Superseded By Part";

   }
   reference CountryOfOriginRef(CountryOfOrigin) to IsoCountry(CountryCode) {
      label = "Country of Origin";
   }
   reference RegionOfOriginRef(CountryCode, RegionOfOrigin) to CountryRegion(CountryCode, RegionCode) {
      label = "Region Code";
   }
   reference CustomsStatNoRef(CustomsStatNo) to CustomsStatisticsNumber(CustomsStatNo) {
      label = "Customs Statistics No";
   }
   reference SupplyChainPartGroupRef(SupplyChainPartGroup) to SupplyChainPartGroup(SupplyChainPartGroup) {
      label = "Supply Chain Part Group";
   }
   reference TechnicalCoordinatorIdRef(TechnicalCoordinatorId) to TechnicalCoordinatorLov(TechnicalCoordinatorId) {
      label = "Technical Coordinator";

   }
   reference CustWarrantyIdRef(CustWarrantyId) to CustWarranty(WarrantyId) {
      label = "Customer Warranty";
   }
   reference StdNameIdRef(StdNameId) to StandardNamesLov(StdNameId) {
      label = "Inventory Part Standard Name";

   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Latest Characteristic Template";
   }
   array InventoryPartAlternativePartArray(Contract, PartNo) to InventoryPartAlternativePartQuery(Contract, PartNo);
   @DynamicComponentDependency MFGSTD
   array ManufPartAttributeArray(Contract, PartNo) to ManufPartAttribute(Contract, PartNo);
   array InventoryPartCharacteristicArray(Contract, PartNo) to InventoryPartChar(Contract, PartNo);

   -- gelr: good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr: good_service_statistical_code, end
   -- gelr:brazilian_specific_attributes, begin
   reference AcquisitionReasonIdRef(Company, AcquisitionReasonId) to AcquisitionReason(Company, AcquisitionReasonId) {
      label = "Acquisition Reason Id";
   }
   -- gelr:brazilian_specific_attributes, end
   -- gelr: acquisition_origin, begin
   reference AcquisitionOriginRef(Company, AcquisitionOrigin) to AcquisitionOrigin(Company, AcquisitionOrigin) {
      label = "Acquisition Origin";
   }
   -- gelr: acquisition_origin, end
}


@Override
entity InventoryPartChar {
   crud = Create, Read, Update, Delete;
   from = "inventory_part_char_all";
   exec = "INVENTORY_PART_CHAR_API";
   keys = Contract, PartNo, CharacteristicCode {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and CHARACTERISTIC_CODE = :CharacteristicCode";
   }
   use attributes = AttrValueNumeric, AttrValueAlpha, UnitMeas;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CharacteristicCode Text {
      fetch = "characteristic_code";
      label = "Characteristic Code";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AttrValueNumeric Number {
      fetch = "attr_value_numeric";
      label = "Attribute Value Numeric";
   }
   attribute AttrValueAlpha Text {
      fetch = "attr_value_alpha";
      label = "Attribute Value Alpha";
      maxlength = 60;
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 10;
   }
   attribute CharType Text {
      fetch = "Characteristic_API.Get_Row_Type_Translated(characteristic_code)";
      label = "Char Type";
      maxlength = 50;
      editable = [false];
   }
   attribute CharTypeDb Text {
      fetch = "Characteristic_API.Get_Row_Type(characteristic_code)";
      label = "Char Type";
      maxlength = 50;
      editable = [false];
   }
   reference CharacteristicRef(CharacteristicCode) to Characteristic(CharacteristicCode) {
      label = "Characteristic Code";
   }
   reference AttrValueNumericRef(CharacteristicCode, AttrValueNumeric) to DiscreteCharacNumericValue(CharacteristicCode, CharacteristicValue) {
      label = "Attribute Value Numeric";
   }
   reference AttrValueAlphaRef(CharacteristicCode, AttrValueAlpha) to DiscreteCharacValue(CharacteristicCode, CharacteristicValue) {
      label = "Attribute Value Alpha";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

// Alternate parts
query InventoryPartAlternativePartQuery {
   from = "inventory_part_alternate";
   lu = InventoryPart;
   keys = Contract, PartNo, AlternativePartNo {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and ALTERNATIVE_PART_NO = :AlternativePartNo";
   }

   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute AlternativePartNo Text {
      fetch = "alternative_part_no";
      label = "Alternate Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 200;
      editable = [false];
   }
   attribute QtyOnHand Number {
      fetch = "qty_on_hand";
      label = "On Hand Qty";
      editable = [false];
   }
   attribute NoteText Text {
      fetch = "note_text";
      label = "Notes";
      maxlength = 2000;
      editable = [false];
   }
   reference PartCatalogRef(AlternativePartNo) to PartCatalog(PartNo) {
      label = "Alternate Part";
   }

}

---------------------------------- ACTIONS ----------------------------------
action SaveCharacteristics {
   initialcheck implementation;
   ludependencies = InventoryPartChar;
   ludependencies = InventoryPart;
   parameter Objkey Text {
      required = [true];
   }
}

action CreateMaintInfo {
   initialcheck UserAllowedSite(Contract);
   supportwarnings = [true];
   parameter Contract Text;
   parameter PartNo Text;
}

action CreatePartCatalog {
   initialcheck none;
   supportwarnings = [true];
   parameter PartNo Text;
   parameter Description Text;
   parameter UnitCode Text;
   parameter LotTrackingCode Text;
   parameter EngSerialTrackingCode Boolean;
   parameter SerialTrackingCode Boolean;
   parameter NetWeight Number;
   parameter NetVolume Number;
   parameter NetDensity Number;
   parameter UomForWeightNet Text;
   parameter UomForVolumeNet Text;
   parameter UomForDensityNet Text;
   parameter GtinNo Text;
   parameter GtinSeries Enumeration(GtinSeries);
   parameter ReceiptIssueSerialTrack Boolean;
   parameter ConditionCodeUsage Boolean;
   parameter Configurable Boolean;
   parameter CatchUnitEnabled Boolean;
   parameter MultilevelTracking Boolean;
   parameter TypeCode Text;
   parameter TechnicalDrawingNo Text;
   --ludependencies = InventoryPart;
}

@DynamicComponentDependency DEMAND
action DeleteForecastParts {
   initialcheck UserAllowedSite(Contract);
   supportwarnings = [true];
   parameter PartNo Text;
   parameter Contract Text;
   ludependencies = InventoryPart;
}

action RemoveActualCostDifference {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter PartNo Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetUsePartcaDescInventDb Text {
   parameter Contract Text;
}
@DynamicComponentDependency COST
function GetPartCostGroup List<Entity(PartCostGroup)> {
   parameter Contract Text;
   where = "(CONTRACT = :Contract and OBJSTATE in ('Active'))";
}

function GetStdName Text {
   parameter StdNameId Number;
}

function GetPartDefaults Structure(InventoryPartStructure) {
   parameter PartNo Text;
   parameter Contract Text;
}

function PartCatalogExists Boolean {
   parameter PartNo Text;
}

function MaintInfoExists Boolean {
   parameter Contract Text;
   parameter PartNo Text;
}

function FetchCharType Structure(CharTypeStructure) {
   parameter CharacteristicCode Text;
}

  // dlgCreateNewPartCatalog
function SetLovUserWhereForUomForWeightNet List<Entity(IsoUnit)> {
   where = "unit_type_db = 'WEIGHT'";
}
function SetLovUserWhereForUomForVolumeNet List<Entity(IsoUnit)> {
   where = "unit_type_db = 'VOLUME'";
}
function SetLovUserWhereForUomForDensityNet List<Entity(IsoUnit)> {
   where = "unit_type_db = 'DENSITY'";
}

function GetProjectId Text {
   parameter Contact Text;
}

function ValidateContract Structure(ContractInfo) {
   initialcheck none;
   parameter Contract Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure InventoryPartStructure {
   attribute PartDescription Text;
   attribute CatalogType Text;
   attribute ExpensePartClient Text;
   attribute UnitOfMeasure Text;
   attribute InputUnitMeasGroupId Text;
   attribute CatchUnitEnabled Text;
   attribute QtyCalcRounding Number;
   attribute CustWarrantyId Number;
   attribute SupWarrantyId Number;
}

// dlgCreateNewPartCatalog
structure CreateNewPartCatalogStructure {
   attribute PartNo Text {
      label = "Part No";
      maxlength = 25;
   }
   attribute Description Text {
      label = "Part Description";
      maxlength = 200;
   }
   attribute UnitCode Text;
   attribute LotTrackingCode Enumeration(PartLotTracking) {
      label = "Lot/Batch Tracking";
      required = [true];
      insertable = [true];
      updatable = [true];

   }
   attribute NetWeight Number {
      label = "Net Weight";
   }
   attribute UomForWeightNet Text {
      label = "UoM";
      maxlength = 30;
   }
   attribute NetVolume Number {
      label = "Net Volume";
   }
   attribute UomForVolumeNet Text {
      label = "UoM";
      maxlength = 30;
   }
   attribute NetDensity Number {
      label = "Density";
   }
   attribute UomForDensityNet Text {
      label = "UoM";
      maxlength = 100;
   }
   attribute GtinNo Text {
      label = "GTIN";
      maxlength = 14;
   }
   attribute GtinSeries Enumeration(GtinSeries) {
      label = "GTIN Series";
   }
   attribute ReceiptIssueSerialTrack Boolean {
      label = "At Receipt and Issue";
      required = [true];
   }

   attribute SerialTrackingCode Boolean {
      label = "In Inventory";
      required = [true];
   }

   attribute EngSerialTrackingCode Boolean {
      label = "After Delivery Serial Tracking";
      required = [true];
   }

   attribute ConditionCodeUsage Boolean {
      label = "Allow Condition Code";
      required = [true];
   }

   attribute Configurable Boolean {
      label = "Configurable";
      required = [true];
   }

   attribute CatchUnitEnabled Boolean {
      label = "Catch UoM Enabled";
      required = [true];
   }
   attribute MultilevelTracking Boolean {
      label = "Multi-Level Tracking";
      required = [true];
   }

   attribute TypeCode Text;
   attribute TechnicalDrawingNo Text;

   reference UomForWeightNetRef(UomForWeightNet) to IsoUnit(UnitCode) {
      label = "Weight UoM";
   }
   reference UomForVolumeNetRef(UomForVolumeNet) to IsoUnit(UnitCode) {
      label = "Volume UoM";
   }
   reference UomForDensityNetRef(UomForDensityNet) to IsoUnit(UnitCode) {
      label = "Density UoM";
   }
   @DynamicComponentDependency MFGSTD
   reference TechnicalDrawingNoRef(TechnicalDrawingNo) to TechnicalDrawing(DrawingNo) {
      label = "Technical Drawing";
   }
}

structure CharTypeStructure {
   attribute CharType Text;
   attribute CharTypeDb Text;
}

structure ContractInfo {
   attribute UsePartcaDescription Text;
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text;
   attribute Company Text;
   -- gelr:localization_control_center, end


}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

