--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2022-01-11  NiRalk  SC21R2-7114, Grouped NGB Specific attributes into Goods/Services statistical code group and Acquisition group.
-- 2022-01-05  GrGalk  SC21R2-7036, Added a label to the field AbcClassLockedUntil
-- 2021-12-23  NiRalk  SC21R2-5959, Added Company in ValidateContract method..
-- 2021-11-16  NiRalk  SC21R2-5524, Added Acquisition Origin, Acquisition Reason and Goods/Service statistical code to Inventory Part.
-- 2021-11-16          The visibility of these are controlled by LCC parameters.
-- 2021-10-13  SBalLK  SC21R2-3223, Modified section InventoryPartGroup, CreateNewPartCatalogGroup by making Description, PartDescriptionInUse fields as multiline field.
-- 2021-08-03  JaThlk  Bug 160319 (SCZ-15746), Added the validate command for DescriptionCopy field to enable the save button.
-- 2021-07-26  RasDlk  SC21R2-1023, Renamed the field ExcludeShipPackProposal to ExclShipPackProposal.
-- 2021-07-21  RasDlk  SC21R2-1035, Added dynamic dependency annotation for SHPMNT to the attribute ExcludeShipPackProposal.
-- 2021-07-13  RasDlk  SC21R2-1035, Added the attribute ExcludeShipPackProposal for the group WeightVolumeQtyGroup.
-- 2021-07-10  WaSalk  SC21R2-835, Added CustWarrantyId and SupWarrantyId to PartNo validate command, GetPartDefaults method call.
-- 2021-06-18  JaThlk  Bug 159648(SCZ-15083), Modified navigate url in InventoryPartDefaultLocationsCommand since the searchcontext has been removed from the page.
-- 2021-06-10  JaThlk  SC21R2-1009, Modified ClassificationGroup to add new fields, AbcClassLockedUntil, FreqClassLockedUntil and LifeStageLockedUntil.
-- 2021-03-10  SBalLK  SC2020R1-12867, Added dynamic dependency for navigator entries.
-- 2021-02-02  UdGnlk  SCZ-12333, Modified EngineeringInventoryPartNavEntry parent navigator from EngineeringInventoryPart to EngineeringInventoryPartNavEntry.
-- 2020-11-25  UdGnlk  SC2020R1-11532, Added @DynamicComponentDependency to PURCH for the commands PurchasePartCommand and SupplierForPurchasePartCommand.
-- 2020-11-16  Aabalk  SC2020R1-9294, Handled true false values for enumeration fields.
-- 2020-08-12  JiThlk  SC2020R1-8964, Added NotifyForecastPartChange to remove deleted Forecast Part from forecats server.
-- 2020-07-27  DiJwlk  SCXTEND-4646, Modified CostControlGroup, to set the InventoryValuationMethod field uneditable
-- 2020-07-27          and to have the fixed value 'StandardCost' when InventoryPartCostLevel value is 'CostPerSerial'
-- 2019-12-03  NiAslk  SCXTEND-1526, Removed Global mode for Warranty commands.
-- 2019-10-31  NISMLK  MFSPRING20-88, Added TechnicalDrawingNo to Settings for New Part in Part Catalog dialog.
-- 2019-08-28  chlelk  SCUXXW4-24130, Blank selections were removed from field in Cost Control group
-- 2019-06-11  StHose  SCUXXW4-22245, Make DOPConnection editable depending on SupplyTypeDb
-- 2019-05-20  NiDalk  SCUXXW4-20681, Modified InventoryPartAvailabilityPlaCommand to pass Project Id
-- 2019-05-22  fgusse  SCUXXW4-20687, Added translatable in DocumentTextCommand.
-- 2019-04-01  SWiclk  SCUXXW4-18321, Modified navigate path from SupplierPerPurchasePart as SupplierForPurchasePart.
-- 2019-03-22  StHose  SCUXXW4-14888, Added field sizes in LeadTimesUltdSupplyDateGroup
-- 2019-03-13  ChFolk  SCUXXW4-17188, Included dynamic dependency anotations where necessary.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Removed unnecessary dynamic dependency annotation for MPCCOM.
-- 2019-01-01  SucPlk  SCUXXW4-2686, Modified parameters to call CopyCharacteristicsTemplateAssistant.
-- 2018-12-21  KePeSe  MFUXXW4-4042, Added Manufacturing MRO commands
-- 2018-12-07  SWiclk  SCUXXW4-14792, Added CharacteristicTemplateGroup.
-- 2018-12-05  Sthose  SCUXXW4-6204, Commmand grouping and removed Standard Names navigation.
-- 2018-11-30  SWiclk  SCUXXW4-6209, Moved Characteristics assistant to a fragment.
-- 2018-11-13  SURBLK  SCUXXW4-6209, Added Inventory Part Characteristics tab.
-- 2018-10-30  SWiclk  SCUXXW4-5464, Converted from dlgCreateNewPartCatalog using MTG Version: 1.32
-- 2018-10-23  SWiclk  SCUXXW4-6890, Converted from tbwInventoryPartAlternate using MTG Version: 1.31
-- 2018-10-21  hadolk  MFUXXW4-600,  Added Manufacturing tab
-- 2018-09-13  SWiclk  SCUXXW4-6204, Converted from frmInventoryPart using MTG Version: 1.29
--------------------------------------------------------------------------------------
client InventoryPart;
component INVENT;
layer Core;
projection InventoryPartHandling;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment InputUomGroupLovSelector;
include fragment LovCommodityGroup1Selector;
include fragment LovCommodityGroup2Selector;
include fragment InventoryPartLovSelector;
@DynamicComponentDependency DEMAND
include fragment CreateForecastParts;
@DynamicComponentDependency DEMAND
include fragment DemandServerActions;
// Document Text related fragments
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment IntorderPartLovSelector;
@DynamicComponentDependency MFGSTD
include fragment ManufPartAttributeHandling;
include fragment DiscreteCharacNumericValueSelector;
include fragment CopyCharacteristicsFromTemplate;
include fragment PartCatalogNotPositionLovSelector;
include fragment CopyPartAssistant;
include fragment CustomerWarrantyAssistant;
include fragment SupplierWarrantyAssistant;
-- gelr: acquisition_origin, begin
include fragment AcquisitionOriginSelector;
-- gelr: acquisition_origin, end
-- gelr: good_service_statistical_code, begin
include fragment StatisticalCodeSelector;
-- gelr: good_service_statistical_code, end
-- gelr:brazilian_specific_attributes, begin
include fragment AcquisitionReasonSelector;
-- gelr:brazilian_specific_attributes, end

warningsenabled = InventoryPart;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PartInventoryPartNavEntry parent InventNavigator.WarehouseManagementPart at index 100 {
      label = "Inventory Part";
      page Form home InventoryPart;
   }
   entry MasterDataInventoryPartNavEntry parent InventNavigator.PartMasterDataInventoryPart at index 100 {
      label = "Inventory Part";
      page Form;
   }
   @DynamicComponentDependency MFGSTD
   entry EngineeringInventoryPartNavEntry parent MfgstdNavigator.EngineeringInventoryPartNavEntry at index 200 {
      label = "Inventory Part";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using InventoryPartSet {
   label = "Inventory Part";
   startupmode = search;
   crudactions {
      before command OpenCreateNewPartCatalogDialog;
      -- TODO: Turn on duplicate after update8 release and fix all boolean issues so the save works, see email from Asieh 19/3 how to fix these issues.
      duplicate {
         enabled = [false];
      }
   }

   selector InventoryPartSelector;
   @DynamicComponentDependency MFGSTD
   singleton ManufPartAttributeSingleton(ManufPartAttributeArray);
   group InventoryPartGroup;
   tabs {
      tab {
         label = "Main";
         arrange {
            arrange {
               group InventoryPartGeneralGroup;
         // Remove all of the 'collapsed' attributes, should be handled by user profile in the future
               group ClassificationGroup {
                  collapsed = [true];
               }
               group CountingInformationGroup {
                  collapsed = [true];
               }
               group ControlValuesGroup {
                  collapsed = [true];
               }
               group LeadTimesUltdSupplyDateGroup {
                  collapsed = [true];
               }
               group ShelfLifeGroup {
                  collapsed = [true];
               }
               group GoodsServicesStatistocalCodeGroup {
                  visible = ["GOOD_SERVICE_STATISTICAL_CODE" in EnabledLccParams];
                  collapsed = [true];
               }
            }
            arrange {
               group CostControlGroup;
               group IdentificationGroup {
                  collapsed = [true];
               }
               group WeightVolumeQtyGroup {
                  collapsed = [true];
               }
               group WarrantyGroup {
                  collapsed = [true];
               }
               group PutawayGroup {
                  collapsed = [true];
               }
               group OriginCustomsInformationGroup {
                  collapsed = [true];
               }
               group SupersedesPartGroup {
                  collapsed = [true];
               }
               group AcquisitionGroup {
                  collapsed = [true];
                  visible = ["BRAZILIAN_SPECIFIC_ATTRIBUTES" in EnabledLccParams];
               }
            }
         }
      }
      tab {
         label = "Alternate Parts";
         list InventoryPartAlternateList(InventoryPartAlternativePartArray) {
            details = "page/InventoryPart/Form?$filter=PartNo eq $[AlternativePartNo] and Contract eq $[Contract]";
         }
      }

      tab {
         label = "Characteristics";
         group CharacteristicTemplateGroup;
         list InventoryPartCharacteristicsList(InventoryPartCharacteristicArray);

      }


      @DynamicComponentDependency MFGSTD
      tab {
         label = "Manufacturing";

         arrange {
            arrange {
               group GbLeadTimeGroup bind ManufPartAttributeSingleton;
               group GbPlanningGroup bind ManufPartAttributeSingleton;
               group GbOperationOverReportGroup bind ManufPartAttributeSingleton;
               group InvPartAttributeGroup bind ManufPartAttributeSingleton;
            }
            arrange {
               group GbShopOrderDefaultsGroup bind ManufPartAttributeSingleton;
               group CgStructureDefaultsGroup bind ManufPartAttributeSingleton;
               group CGroupBoxFromConfiguredGroup bind ManufPartAttributeSingleton;
               group GbDensityGroup bind ManufPartAttributeSingleton;
            }

         }
      }
   }

   commandgroup CommandGroupRelatedGroup {

      commandgroup PartPagesCmdGroup {
         label = "Part Pages";
         command PartCommand;
         @DynamicComponentDependency PURCH
         command PurchasePartCommand;
         @DynamicComponentDependency PURCH
         command SupplierForPurchasePartCommand;
         @DynamicComponentDependency WO
         command MaintInfoCommand;
      }
      commandgroup InventoryDetailsCmdGroup {
         label = "Inventory Details";
         command InventoryPartDefaultLocationsCommand;
         command InventoryPartPutawayZonesCommand;
         command InventoryPartStorageRequirementsCommand;
         command InventoryPartAvailabilityPlaCommand;
         command FifoLifoAnalysisCommand;
         command InventoryTransactionHistorypCommand;
         command InventoryPartPlanningDataCommand;
      }
      commandgroup CostCmdGroup {
         label = "Cost";
         command PartCostCommand;
         command InventoryPartConfigurationCostCommand;
      }
      @DynamicComponentDependency DEMAND
      commandgroup ForcastCmdGroup {
         label = "Forcast";
         command CreateForecastPartCommand;
         command DeleteForecastPartsCommand;
      }
      commandgroup WarrantyCmdGroup {
         label = "Warranty";
         command CustomerWarrantyCommand;
         command SupplierWarrantyCommand;
      }
   }

   command CopyPartCommand;

   commandgroup WADifferenceCmdGroup {

      command RemovePeriodicWADifferenceCommand;
   }

   command DocumentTextCommand;

   commandgroup CommandGroupCmdGroup {

      command MRBCasesCommand;
   }
   @DynamicComponentDependency MROMFG
   commandgroup CommandGroupMroGroup {

      commandgroup CommandGroupManufacturingMRO {
         label = "Manufacturing MRO";
         command MroMaintenanceLevelsPerPartCommand;
         command MroRepairCodesPerPartCommand;
         command MroDiscrepancyCodesPerPartCommand;

      }
   }

   command PartRevisionCommand;
}

-------------------------------- SINGLETONS ---------------------------------

@DynamicComponentDependency MFGSTD
singleton ManufPartAttributeSingleton for ManufPartAttribute {
   crudactions {
      edit {
         visible = [false];
      }
   }
}
-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command PartCommand for InventoryPart {
   label = "Part";
   enabled = [true];
   execute {
      navigate "page/Part/Form?$filter=PartNo eq $[PartNo]";
   }
}
command CopyPartCommand for InventoryPart {
   label = "Copy Part";
   enabled = [true];
   mode = Global;
   variable ObjkeyVar;

   execute {
      assistant CopyPartAssistant(PartNo, Contract) {
         when OK {
            exit OK;
         }
      }
   }
}
command PartCostCommand for InventoryPart {
   label = "Part Cost";
   enabled = [true];
   execute {
      navigate "tree/PartCost/PartCostTree?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
@DynamicComponentDependency PURCH
command PurchasePartCommand for InventoryPart {
   label = "Purchase Part";
   enabled = [not TypeCode in("Manufactured", "ManufacturedRecipe")];
   execute {
      navigate "page/PurchasePart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
@DynamicComponentDependency PURCH
command SupplierForPurchasePartCommand for InventoryPart {
   label = "Supplier For Purchase Part";
   enabled = [not TypeCode in("Manufactured", "ManufacturedRecipe")];
   execute {
      navigate "page/SupplierForPurchasePart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
command InventoryPartAvailabilityPlaCommand for InventoryPart {
   label = "Inventory Part Availability Planning";
   enabled = [true];
   variable ProjectIdVar Text;
   execute {
      call GetProjectId(Contract) into ProjectIdVar;
      navigate "page/InventoryPartAvailabilityPlanning/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ProjectId eq $[ProjectIdVar]";
   }
}
command InventoryTransactionHistorypCommand for InventoryPart {
   label = "Inventory Transaction History per Part";
   enabled = [true];
   execute {
      navigate "page/InventoryTransactionHistoryPerPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
command FifoLifoAnalysisCommand for InventoryPart {
   label = "Fifo/Lifo Analysis";
   enabled = [InventoryValuationMethod = "FirstInFirstOut" or InventoryValuationMethod = "LastInFirstOut"];
   execute {
      navigate "page/InventoryPartCostFifoAnalysis/List?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
command MRBCasesCommand for InventoryPart {
   label = "MRB Cases";
   enabled = [true];
   //! TODO: revist when MFUXXW4-1935 is done
   execute {
      navigate "page/MrbCasesByPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
command InventoryPartPlanningDataCommand for InventoryPart {
   label = "Inventory Part Planning Data";
   enabled = [true];
   execute {
      navigate "page/InventoryPartPlanningData/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}


@DynamicComponentDependency DEMAND
command CreateForecastPartCommand {
   label = "Create Forecast Parts";
   enabled = [not AllForecastPartsExist];
   execute {
      dialog CreateForecastPartsDialog(PartNo, PartDescriptionInUse, Contract) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

@DynamicComponentDependency DEMAND
command DeleteForecastPartsCommand for InventoryPart {
   label = "Delete Forecast Parts";
   enabled = [AnyForecastPartExists];
   variable ResultVar Text;
   execute {
      confirm("Are you sure want to delete connected Forecast Parts?") {
         when OK {
            call DeleteForecastParts(PartNo, Contract);
            @DynamicComponentDependency DEMAND
            call NotifyForecastPartChange(Contract, PartNo, "Delete") into ResultVar;

            if[ResultVar = "SUCCESS"] {
               success("Forecast Server notified.");
            }

            if[ResultVar = "FAILED"] {
               info("Failed to notify the server.");
            }

         }
      }
   }
}
@DynamicComponentDependency WO
command MaintInfoCommand for InventoryPart {
   label = "Maint Info";
   variable MaintInfoExistsVar;
   enabled = [true];

   execute {
      call MaintInfoExists(Contract, PartNo) into MaintInfoExistsVar;
      if [not MaintInfoExistsVar] {
         confirm("Maintenance Information not entered for this Inventory Part, Do you want to create.") {
            when OK {
               call CreateMaintInfo(Contract, PartNo);
               navigate "page/MaintInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
            }
            when CANCEL {
               exit CANCEL;
            }
         }
      }
      else {
         navigate "page/MaintInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
      }
   }
}
command CustomerWarrantyCommand for InventoryPart {
   label = "Customer Warranty";
   enabled = [true];
   execute {
      assistant CustomerWarrantyAssistant(PartNo, SerialNo, CustWarrantyId, true) into(CustWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command SupplierWarrantyCommand for InventoryPart {
   label = "Supplier Warranty";
   enabled = [true];
   execute {
      assistant SupplierWarrantyAssistant(PartNo, SerialNo, SupWarrantyId, true) into(SupWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
         when OK {
            exit OK;
         }
      }
   }
}
command RemovePeriodicWADifferenceCommand for InventoryPart {
   label = "Remove Periodic WA Difference";

   enabled = [InvoiceConsideration = "PeriodicWeightedAverage"];
   //! TODO: <Use the "execute" keyword below to define the Execute logic, found within the event handler 'menuItem_Remove_Execute'>
   execute {

      confirm("This will create transactions and postings to remove remaining price and manufacturing differences.") {
         when OK {
            call RemoveActualCostDifference(Contract, PartNo);
         }
      }

   }
}

command DocumentTextCommand for InventoryPart {
   label = "Document Text";
   enabled = [true];
   variable Label;
   execute {
      set Label = " for Inventory Part - ${PartNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, Label) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

command InventoryPartDefaultLocationsCommand for InventoryPart {
   label = "Default Locations";
   enabled = [true];
   execute {
      navigate "page/InventoryPartDefaultLocations/List?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}

command InventoryPartConfigurationCostCommand for InventoryPart {
   label = "Unit Cost";
   enabled = [true];
   execute {
      navigate "page/InventoryPartUnitCost/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}

command InventoryPartPutawayZonesCommand for InventoryPart {
   label = "Putaway Zones";
   enabled = [true];
   execute {
      navigate "page/InventoryPartPutawayZones/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}

command InventoryPartStorageRequirementsCommand for InventoryPart {
   label = "Storage Requirements";
   enabled = [true];
   execute {
      navigate "page/InventoryPartStorageRequirements/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}

command CopyFromTemplateCommand for InventoryPartChar {
   label = "Copy from Template";
   enabled = [true];
   mode = Global;
   variable ObjkeyVar;

   execute {
      assistant CopyCharacteristicsTemplateAssistant(PartNo, Contract, EngAttribute, UnitMeas, "INVENTORY_PART") into(ObjkeyVar) {
         when OK {
            call SaveCharacteristics(ObjkeyVar);
            exit OK;
         }
      }
   }
}

// dlgCreateNewPartCatalog
command OpenCreateNewPartCatalogDialog for InventoryPart {
   label = "Settings for New Part in Part Catalog";
   variable PartExistsVar;
   variable DescriptionVar;
   execute {
      call PartCatalogExists(PartNo) into PartExistsVar;
      if [not PartExistsVar] {
         dialog CreateNewPartCatalogDialog(PartNo, Description, UnitMeas, TypeCode, "NotLotTracking") into(DescriptionVar) {
            when CANCEL {
               exit CANCEL;
            }
         }
         bulkset Description = DescriptionVar;
      }
   }
}
@DynamicComponentDependency MROMFG
command MroMaintenanceLevelsPerPartCommand for InventoryPart {
   label = "Maintenance Levels per Part";
   enabled = [true];
   execute {
      navigate "page/MaintenanceLevelPart/PartForm?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
@DynamicComponentDependency MROMFG
command MroRepairCodesPerPartCommand for InventoryPart {
   label = "Repair Codes per Part";
   enabled = [true];
   execute {
      navigate "page/RepairCodePart/PartForm?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
@DynamicComponentDependency MROMFG
command MroDiscrepancyCodesPerPartCommand for InventoryPart {
   label = "Discrepancy Codes per Part";
   enabled = [true];
   execute {
      navigate "page/DiscrepancyCodePart/PartForm?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}

command PartRevisionCommand for InventoryPart {
   label = "Part Revisions";
   execute {
      navigate "page/PartRevisions/List?$filter=Contract eq $[Contract] and PartNo eq $[PartNo]";
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryPartSelector for InventoryPart {
   label = "${PartNo} - ${PartDescriptionInUse}";
   static PartNo;
   static PartDescriptionInUse;
   fieldorder = PartNo, PartDescriptionInUse, Contract;
}

@Override
list CharacteristicLovList for Characteristic {
   label = "";
   static CharacteristicCode;
   static Description;
   static SearchType {
      label = "Alpha/Numeric";
   }
}

@Override
selector ReferenceCharacteristicTemplateSelector for CharacteristicTemplate {
   label = "${Description}";
   static EngAttribute {
      label = "Characteristic Template";
   }
}

@Override
list CharacteristicTemplateLovList for CharacteristicTemplate {
   label = "";
   static EngAttribute {
      label = "Characteristic Template";
   }
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group InventoryPartGroup for InventoryPart {
   label = "";

   field PartNo {
      validate command {
         variable PartCatalogDetailsVar;
         execute {
            call GetPartDefaults(PartNo, Contract) into PartCatalogDetailsVar;

            if [PartCatalogDetailsVar.PartDescription != null] {
               set Description = PartCatalogDetailsVar.PartDescription;
               set PartDescriptionInUse = PartCatalogDetailsVar.PartDescription;
               set UnitMeas = PartCatalogDetailsVar.UnitOfMeasure;
               set DescriptionCopy = PartCatalogDetailsVar.PartDescription;
               set InputUnitMeasGroupId = PartCatalogDetailsVar.InputUnitMeasGroupId;
               set CustWarrantyId = PartCatalogDetailsVar.CustWarrantyId;
               set SupWarrantyId = PartCatalogDetailsVar.SupWarrantyId;
            }
            // Set the default value for dfnQtyCalcRounding only if no value has been assigned to it
            if [QtyCalcRounding = null] {
               set QtyCalcRounding = PartCatalogDetailsVar.QtyCalcRounding;
            }
         }
      }
   }

   field Description {
      editable = [not UsePartcaDescInventDb];
      visible = [not UsePartcaDescInventDb];
      required = [not UsePartcaDescInventDb];
      multiline = true;
      size = Medium;
   }

   field PartDescriptionInUse {
      visible = [UsePartcaDescInventDb];
      multiline = true;
      size = Medium;
   }

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      //! dfsContract_WindowActions
      // Validation is written to handle dfsPartCostGroupId when duplicating but in aurina we cannot duplicate yet.
      validate command {
         variable ContractInfoVar {
            type = Structure(ContractInfo);
         }
         execute {
            call ValidateContract(Contract) into ContractInfoVar;
            set Company = ContractInfoVar.Company;
            set UsePartcaDescInventDb = false;
            if [ContractInfoVar.UsePartcaDescription = "TRUE"] {
               set  UsePartcaDescInventDb = true;
            }
            -- gelr:localization_control_center, begin
            set EnabledLccParams = ContractInfoVar.EnabledLccParams;
            -- gelr:localization_control_center, end
         }
      }
   }
   lov PartStatusRef with ReferenceInventoryPartStatusParSelector {
      description = PartStatusRef.Description;
      size = Medium;
   }

   field NoteText {
      multiline = true;
      height = small;
   }

}

group InventoryPartGeneralGroup for InventoryPart {
   label = "General";
   field TypeCode {
      validate command {
         execute {
            if [TypeCode in("Manufactured", "ManufacturedRecipe")] {
               set LeadTimeCode = "Manufactured";
            }
            else {
               if [TypeCode in("PurchasedRaw", "Purchased", "Expense")] {
                  set LeadTimeCode = "Purchased";
               }
            }
         }
      }
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   lov TechnicalCoordinatorIdRef with ReferenceTechnicalCoordinatorLovSelector {
      contactwidget {
         enabled = [TechnicalCoordinatorId != null];
         source = Person;
      }
   }
   lov InventoryUomRef with ReferenceIsoUnitSelector {
      description = InventoryUomRef.Description;
   }
   lov CatchUnitMeasRef with  ReferenceIsoUnitSelector {
      description = CatchUnitMeasRef.Description;
   }
   lov InputUnitMeasGroupIdRef with ReferenceInputUomGroupLovSelector {
      description = InputUnitMeasGroupIdRef.Description;
   }
   field CreateDate;
   field LastActivityDate;
   field NoteTextExist {
      size = Small;
   }
   field DocumentTextExist {
      size = Small;
   }
}

group WeightVolumeQtyGroup for InventoryPart {
   label = "Weight, Volume and Quantities";
   field OnHandQty;
   field OnHandCatchQty;
   measure NetWeight(WeightUom) {
      size = Small;
   }
   measure NetVolume(VolumeUom) {
      size = Small;
   }
   field QtyCalcRounding;
   @DynamicComponentDependency SHPMNT
   field ExclShipPackProposal;
}

group ClassificationGroup for InventoryPart {
   label = "Classification";
   lov PrimeCommodityRef with ReferenceLovCommodityGroup1Selector {
      description = PrimeCommodityRef.Description;
   }
   lov SecondCommodityRef with ReferenceLovCommodityGroup2Selector {
      description = SecondCommodityRef.Description;
   }
   lov AssetClassRef with ReferenceAssetClassSelector {
      description = AssetClassRef.Description;
   }
   lov AbcClassRef with ReferenceAbcClassSelector {
      description = AbcClassRef.AbcPercent;
   }
   field AbcClassLockedUntil {
      label = "ABC Class Locked Until";
   }
   field FrequencyClass;
   field FreqClassLockedUntil {
      label = "Frequency Class Locked Until";
   }
   field LifecycleStage;
   field LifeStageLockedUntil {
      label = "Lifecycle Stage Locked Until";
   }
   lov HazardCodeRef with ReferenceSafetyInstructionSelector {
      description = HazardCodeRef.Description;
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      description = AccountingGroupRef.Description;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }
   lov SupplyChainPartGroupRef with ReferenceSupplyChainPartGroupSelector {
      description = SupplyChainPartGroupRef.Description;
   }

   field TypeDesignation;
   field DimQuality;
}

group CharacteristicTemplateGroup for InventoryPart {
   label = "";
   lov EngAttributeRef with ReferenceCharacteristicTemplateSelector {
      description = EngAttributeRef.Description;
      editable = [false];
   }
}


group LeadTimesUltdSupplyDateGroup for InventoryPart {
   label = "Lead Times and Supply Dates";
   // Field sizes set in order to get a matrix kind of layout
   field LeadTimeCode {
      size = FullWidth;
   }
   field PurchLeadtime {
      size = Small;
      editable = [LeadTimeCode = "Purchased"];
      validate command {
         execute {
            if [PurchLeadtime != null] {
               set ExpectedLeadtime = PurchLeadtime;
            }
         }
      }
   }
   field UnlimitedPurchSupplyDate {
      label = "Purchasing Unlimited Supply Date";
      size = Small;
   }
   field EarliestUltdSupplyDate {
      size = FullWidth;
   }
   field ManufLeadtime {
      size = Small;
      editable = [LeadTimeCode = "Manufactured"];
      validate command {
         execute {
            if [ManufLeadtime != null] {
               set ExpectedLeadtime = ManufLeadtime;
            }
         }
      }
   }
   field UnlimitedManufSupplyDate {
      label = "Manufacturing Unlimited Supply Date";
      size = Small;
   }
   field ExpectedLeadtime {
      size = Small;
   }
   field UnlimitedExpectedSupplyDate {
      label = "Expected Unlimited Supply Date";
      size = Small;
   }
}

group SupersedesPartGroup for InventoryPart {
   label = "Supersession";
   lov SupersedesRef with ReferenceInventoryPartLovSelector;
   lov SupersededByPartRef with ReferenceInventoryPartLovSelector;
}

group ShelfLifeGroup for InventoryPart {
   label = "Shelf Life";
   field DurabilityWeeks;
   field DurabilityDay;
   field MinDurabDaysCoDeliv;
   field MinDurabDaysPlanning;
   field MandatoryExpirationDate;
}

group OriginCustomsInformationGroup for InventoryPart {
   label = "Origin and Customs";
   lov CountryOfOriginRef with ReferenceIsoCountrySelector
      {
      description = CountryOfOriginRef.Description;
   }
   lov RegionOfOriginRef with ReferenceCountryRegionSelector {
      description = RegionOfOriginRef.RegionName;
   }

   lov CustomsStatNoRef with ReferenceCustomsStatisticsNumberSelector {
      description = CustomsStatNoRef.Description;
      validate command {
         execute {
            set IntrastatConvFactor = null;
         }
      }
   }

   field IntrastatConvFactor;
   field CustomsStatNoRef.CustomsUnitMeas {
      size = Small;
      label = "Customs UoM";
   }

}

group IdentificationGroup for InventoryPart {
   label = "Identification";
   field DescriptionCopy {
      validate command {
         execute {
            if [not UsePartcaDescInventDb] {
               set Description = DescriptionCopy;
            }
         }
      }

   }
   field PartCatalogPartDescription;
   field UsePartcaDescInventDb;
   lov StdNameIdRef with ReferenceStandardNamesLovSelector {
      description = StdNameIdRef.StdName;
   }
   field PartCatalogStandardName;
   field GTIN;
   field GTINSeries;
}

group CostControlGroup for InventoryPart {
   label = "Cost Control";
   field InventoryValuationMethod {
      editable = [InventoryPartCostLevel != "CostPerSerial"];
   }
   field InventoryPartCostLevel {
      validate command {
         execute {
            if [InventoryPartCostLevel = "CostPerSerial"] {
               set InventoryValuationMethod = "StandardCost";
            }
         }
      }
   }
   field InvoiceConsideration {
      label = "Supplier Invoice Consideration";
   }
   field ZeroCostFlag;
   field ResetConfigStdCost;
   @DynamicComponentDependency COST
   lov PartCostGroupRef with ReferencePartCostGroupSelector using GetPartCostGroup(Contract) {
      description = PartCostGroupRef.Description;
   }
   field MaxActualCostUpdate {
      editable = [InvoiceConsideration = "PeriodicWeightedAverage"];
   }
   field ExtServiceCostMethod {
      enumerationtrue = "IncludeServiceCost";
      enumerationfalse = "ExcludeServiceCost";
      truelabel = "Yes";
      falselabel = "No";
   }
}

group CountingInformationGroup for InventoryPart {
   label = "Counting";
   field CyclePeriod;
   field CountVariance;
   field CycleCode {
      enumerationtrue = "CyclicCounting";
      enumerationfalse = "NotCyclicCounting";
      truelabel = "Yes";
      falselabel = "No";
   }
}

group ControlValuesGroup for InventoryPart {
   label = "Supply and Demand Controls";
   field OeAllocAssignFlag {
      enumerationtrue = "PriorityReservation";
      enumerationfalse = "NormalReservation";
      truelabel = "Yes";
      falselabel = "No";
   }
   field AutomaticCapabilityCheck;
   field NegativeOnHand {
      enumerationtrue = "NegativeOnHandAllowed";
      enumerationfalse = "NegativOnHandNotAllowed";
      truelabel = "Yes";
      falselabel = "No";
   }
   field ForecastConsumptionFlag {
      enumerationtrue = "OnlineConsumption";
      enumerationfalse = "NoOnlineConsumption";
      truelabel = "Yes";
      falselabel = "No";
   }
   field OnhandAnalysisFlag {
      enumerationtrue = "MakeAvailabilityCheck";
      enumerationfalse = "NoAvailabilityCheck";
      truelabel = "Yes";
      falselabel = "No";
   }
   field ShortageFlag {
      enumerationtrue = "ShortageNotation";
      enumerationfalse = "NoShortageNotation";
      truelabel = "Yes";
      falselabel = "No";
   }
   field CoReserveOnhAnalysFlag {
      enumerationtrue = "MakeAvailabilityCheck";
      enumerationfalse = "NoAvailabilityCheck";
      truelabel = "Yes";
      falselabel = "No";
   }
   field StockManagement {
      label = "VMI";
      enumerationtrue = "VendorManagedInventory";
      enumerationfalse = "SystemManagedInventory";
      truelabel = "Yes";
      falselabel = "No";
   }
   field SupplyCode;
   field DopConnection {
      editable = [SupplyTypeDb = "D"];
   }
   field DopNetting;
   @DynamicComponentDependency PURCH
   field MultiSitePlannedPart;
}

group WarrantyGroup for InventoryPart {
   label = "Warranty";
   field CustWarranty;
   field SupWarranty;
}

group PutawayGroup for InventoryPart {
   label = "Putaway";
   field PutawayZoneRefillOption;
   field OperativeValue;
   field OperativeValueSource;
   field StandardPutawayQty;
}

// dlgCreateNewPartCatalog
group CreateNewPartCatalogGroup for CreateNewPartCatalogStructure {
   label = "";
   field PartNo {
      editable = [false];
   }
   field Description {
      multiline = true;
      size = Medium;
   }

   field NetWeight;
   lov UomForWeightNetRef with ReferenceIsoUnitSelector using SetLovUserWhereForUomForWeightNet;
   field NetVolume;
   lov UomForVolumeNetRef with ReferenceIsoUnitSelector using SetLovUserWhereForUomForVolumeNet;
   field NetDensity;
   lov UomForDensityNetRef with ReferenceIsoUnitSelector using SetLovUserWhereForUomForDensityNet;
   @DynamicComponentDependency MFGSTD
   lov TechnicalDrawingNoRef with ReferenceTechnicalDrawingSelector {
      description = TechnicalDrawingNoRef.Description;
   }
}

group LotBatchTrackingGroup for CreateNewPartCatalogStructure {
   label = "Lot/Batch Tracking";
   field LotTrackingCode {
      validate command {
         execute {
            if [SerialTrackingCode or ReceiptIssueSerialTrack or LotTrackingCode != "NotLotTracking"] {
               set MultilevelTracking = true;
            }
            else {
               set MultilevelTracking = false;
            }
         }
      }
   }
}
group GTINGroup for CreateNewPartCatalogStructure {
   label = "GTIN";
   field GtinNo;
   field GtinSeries;
}
group SerialTrackingGroup for CreateNewPartCatalogStructure {
   label = "Serial Tracking";
   field ReceiptIssueSerialTrack {
      validate command {
         execute {
            if [ReceiptIssueSerialTrack] {
               set EngSerialTrackingCode = true;
               set MultilevelTracking = true;
            }
         }
      }
   }
   field SerialTrackingCode {
      validate command {
         execute {
            if [SerialTrackingCode] {
               set ReceiptIssueSerialTrack = true;
               set EngSerialTrackingCode = true;
               set MultilevelTracking = true;
            }
         }
      }
   }
   field EngSerialTrackingCode;
}

group MiscPartSettingsGroup for CreateNewPartCatalogStructure {
   label = "Misc Part Settings";

   field ConditionCodeUsage {
      validate command {
         execute {
            if [ConditionCodeUsage] {
               confirm("It will not be possible to disable the condition code functionality after it has been enabled, if any inventory part records exist.") {
                  when CANCEL {
                     set ConditionCodeUsage = false;
                  }
               }
            }
         }
      }
   }
   field Configurable;
   field CatchUnitEnabled;
   field MultilevelTracking;
}

group GoodsServicesStatistocalCodeGroup for InventoryPart {
   label = "Goods/Services Statistical Code";
   -- gelr: good_service_statistical_code, begin
   lov StatisticalCodeRef with ReferenceStatisticalCodeSelector {
      description = StatisticalCodeRef.Description;
   }
   -- gelr: good_service_statistical_code, end

}

group AcquisitionGroup for InventoryPart {
   label = "Acquisition";
   -- gelr:brazilian_specific_attributes, begin
   lov AcquisitionReasonIdRef with ReferenceAcquisitionReasonSelector {
      description = AcquisitionReasonIdRef.Description;
   }

   lov AcquisitionOriginRef with ReferenceAcquisitionOriginSelector {
      description = AcquisitionOriginRef.Description;
   }
   -- gelr:brazilian_specific_attributes, end

}

----------------------------------- LISTS -----------------------------------
// Alternate Parts List
list InventoryPartAlternateList for InventoryPartAlternativePartQuery {
   preselect = [false];
   lov PartCatalogRef with PartCatalogSelector {
      description = PartCatalogRef.LanguageDescription;
   }
   field Description {
      searchable = true;
      columnexclude = [true];
   }
   field QtyOnHand;
   field NoteText {
      multiline = true;
   }
   // fieldranking AlternativePartNo, Description, QtyOnHand, NoteText;
}

list InventoryPartCharacteristicsList for InventoryPartChar {
   label = "Characteristics";
   editmode = SingleRowEdit;

   lov CharacteristicRef with ReferenceCharacteristicSelector {
      description = CharacteristicRef.Description;
      validate command {
         execute {
            call FetchCharType(CharacteristicCode) into CharTypeStructure;
            set CharType = CharTypeStructure.CharType;
            set CharTypeDb = CharTypeStructure.CharTypeDb;
         }
      }
   }

   lov AttrValueNumericRef with ReferenceDiscreteCharacNumericValueSelector {
      freeinput = [CharTypeDb != "DiscreteCharacteristic"];
      editable = [CharacteristicRef.SearchType = "Numeric"];
   }
   lov AttrValueAlphaRef with  ReferenceDiscreteCharacValueSelector {
      editable = [CharacteristicRef.SearchType = "Alpha"];
      freeinput = [CharTypeDb != "DiscreteCharacteristic"];
   }
   field UnitMeasRef {
      size = Small;
   }
   field CharacteristicRef.SearchType {
      label = "Alpha/Numeric";
   }
   field CharType;
   field CharTypeDb {
      columnvisible = [false];
   }


   commandgroup CommandGroupCmdGroup {

      command CopyFromTemplateCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CreateNewPartCatalogDialog for CreateNewPartCatalogStructure {
   label = "Settings for New Part in Part Catalog";
   input(PartNo, Description, UnitCode, TypeCode, LotTrackingCode);
   output(Description);
   group CreateNewPartCatalogGroup;
   group LotBatchTrackingGroup;
   group SerialTrackingGroup;
   group GTINGroup;
   group MiscPartSettingsGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [Description != null];

         execute {
            call CreatePartCatalog(PartNo, Description, UnitCode, LotTrackingCode, EngSerialTrackingCode, SerialTrackingCode, NetWeight,
            NetVolume, NetDensity, UomForWeightNet, UomForVolumeNet, UomForDensityNet, GtinNo, GtinSeries,
            ReceiptIssueSerialTrack, ConditionCodeUsage, Configurable, CatchUnitEnabled, MultilevelTracking, TypeCode, TechnicalDrawingNo);

            exit OK;
         }
      }
      command Cancel;
   }
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
