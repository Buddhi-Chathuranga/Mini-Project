-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-11-13  FRBESE  SCXTEND-1158, Changed InventoryPartStorageRequirementsNavEntry navigator entry index from 700 to 600.
-- 2019-02-19  STHOSE  SCUXXW4-6294, Converted from frmInvPartStorageRequirements using MTG Version: 1.34
-- 2018-10-31  SAGELK  SCUXXW4-6289, Converted from frmInvPartStorageCapability using MTG Version: 1.32
--------------------------------------------------------------------------------------
client InventoryPartStorageRequirements;
component INVENT;
layer Core;
projection InventoryPartStorageRequirementsHandling;
include fragment InventoryPartLov18Selector;
//Define Storage Volume
include fragment DefineStorageVolumeRequirement;
include fragment WhStorageVolumeLovSelector;
include fragment UserAllowedSiteLovSelector;
warningsenabled = InventoryPart;
----------------------------- VISUAL COMPONENTS -----------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry InventoryPartStorageRequirementsNavEntry parent InventNavigator.WarehouseManagementPart  at index 600 {
      label = "Inventory Part Storage Requirements";
      page Form;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page Form using InventoryPartSet {
   label = "Inventory Part Storage Requirements";
   startupmode = search;
   selector InventoryPartSelector;
   group InvPartStorageCapabilityGroup;
   tabs {
      tab {
         label = "Capacity and Condition Requirements";
         singleton CapacitiesAndConditionsSingleton(InvPartStorageArray);

         markdowntext {
            text = "| | Inventory Part Value	| Operative Value	| Operative Value Source | UoM |
            | ----------- | ---------: | --------------: | --------------: | --: |
            | **Dimension Capacity Requirement**| | | | |
            | Width | ${StorageWidthRequirement} | ${WidthOperateValue} | ${WidthOperateSource} | ${WidthUom} |
            | Height | ${StorageHeightRequirement} | ${HeightOperateValue} | ${HeightOperateSource} | ${HeightUom} |
            | Depth | ${StorageDepthRequirement} | ${DepthOperateValue} | ${DepthOperateSource} | ${DepthUom} |
            | Qty Per Volume | ${StorageVolumeRequirement} | ${QtyPerVolumeOperateValue} | ${QtyPerVolumeOperateSource} | ${VolumeUom} |
            | **Carrying Capacity Requirement** | | | | |
            | Weight | ${StorageWeightRequirement} | ${WeightOperateValue} | ${WeightOperateSource} | ${WeightUom} |
            | **Storage Conditions Requirement** | | | | |
            | Min Temperature | ${MinStorageTemperature} | ${MinTemperatureOperateValue} | ${MinTemperatureOperateSource} | ${MinTemperatureUom} |
            | Max Temperature | ${MaxStorageTemperature} | ${MaxTemperatureOperateValue} | ${MaxTemperatureOperateSource} | ${MaxTemperatureUom} |
            | Min Humidity | ${MinStorageHumidity} | ${MinHumidityOperateValue} | ${MinHumidityOperateSource} | ${MinHumidityUom} |
            | Max Humidity | ${MaxStorageHumidity} | ${MaxHumidityOperateValue} | ${MaxHumidityOperateSource} | ${MaxHumidityUom} |";
         }
      }
      tab {
         label = "Capability Requirements";

         arrange {
            list InvPartStorageCapabilityList(InvPartStorageCapabilityArray);
            list InvPartCapabilityOperativeList(InvPartCapabilityOperativeArray);
         }
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------
assistant EditCapacitiesAndConditionsAssistant using CapacitiesAndConditionsVirtualSet {
   label = "Modify Capacities and Conditions";
   savemode = OnLostFocus;
   input(Contract, PartNo);
   singlestep {
      group CapacityGroup;
      group CarryingCapacityGroup;
      group StorageConditionGroup;
   }
   command Ok;
   command Cancel {
      execute {
         exit CANCEL;
      }
   }
   command DefineStorageVolumeRequiremeCommand;
}
--------------------------------- COMMANDS ----------------------------------
command Ok for CapacitiesAndConditionsVirtual {
   label = "OK";
   enabled = [true];
   execute {
      call SaveCapacityAndConditions();
      exit OK;
   }
}
command DefineStorageVolumeRequiremeCommand for CapacitiesAndConditionsVirtual {
   label = "Define Storage Volume Requirement";
   enabled = [true];
   execute {
      dialog DefineStorageVolumeReqDialog("Inventory_Part", Contract) into(VolumeVar, VolumeUom) {
         when OK {
            set Volume = VolumeVar;
         }
      }
      refresh;
   }
}

command RemoveCapabilityCommand for InventoryPartCapabilityQuery {
   label = "Remove Capability";
   mode = SelectedRecords;

   enabled = [true];
   bulkexecute {
      bulkcall CreateRemoveCapability(Contract, PartNo, StorageCapabilityId);
   }
}

command CapacitiesAndConditionsCommand for InventoryPart {
   label = "Edit";
   enabled = [true];
   icon = "edit";
   style = IconOnly;
   execute {
      assistant EditCapacitiesAndConditionsAssistant(Contract, PartNo) {
         when OK {
            success("Capacities and Conditions has been saved.");
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryPartSelector for InventoryPart {
   label = "${PartNo} - ${PartNoRef.Description} - ${Contract}";
   static Contract;
   static PartNoRef.Description;
   fieldorder = PartNo, PartNoRef.Description, Contract;
}

---------------------------------- GROUPS -----------------------------------
group InvPartStorageCapabilityGroup for InventoryPart {
   label = "";

   lov PartNoRef with ReferenceInventoryPartLov18Selector {
      hidekey = [true];
      description = "${PartNo} - ${PartNoRef.Description}";
      size = Large;
      searchable = false;
   }
   field Contract;
}

group CapacityGroup for CapacitiesAndConditionsVirtual {
   label = "Dimensions Capacity Requirement";

   measure Width(LengthUom);
   measure Height(LengthUom);
   measure Depth(LengthUom);
   field Volume {
      validate command {
         execute {
            if [Volume <= 0] {
               set Volume = null;
                -- Avoid division by 0
            }
         }
      }
   }
}
group CarryingCapacityGroup for CapacitiesAndConditionsVirtual {
   label = "Carrying Capacity Requirement";

   measure Weight(WeightUom);
}
group StorageConditionGroup for CapacitiesAndConditionsVirtual {
   label = "Storage Conditions Requirement";

   measure MinTemperature(TemperatureUom);
   measure MaxTemperature(TemperatureUom);
   measure MinHumidity(HumidityUom);
   measure MaxHumidity(HumidityUom);
}
----------------------------------- LISTS -----------------------------------
list InvPartStorageCapabilityList for InventoryPartCapability {
   label = "Inventory Part Values";

   lov StorageCapabilityRef with ReferenceStorageCapabilitySelector using ActiveStorageCapability {
      label = "Storage Capability";
      description = StorageCapabilityRef.Description;
      size = Large;
   }
   field RemovedDb;
}

list InvPartCapabilityOperativeList for InventoryPartCapabilityQuery {
   label = "Operative Values";

   lov StorageCapabilityRef with ReferenceStorageCapabilitySelector {
      label = "Storage Capability";
      description = StorageCapabilityRef.Description;
      size = Large;
   }
   field Source;
   commandgroup CommandGroupCmdGroup {
      command RemoveCapabilityCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------
singleton CapacitiesAndConditionsSingleton for InventoryPart {
   commandgroup ModifyCommandGroup {
      command CapacitiesAndConditionsCommand;
   }
}