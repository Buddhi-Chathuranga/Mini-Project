-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-12-08  DiJwlk  SC2020R1-11698, Modified entity InventoryPart by removing IFSAPP keyword from where clause.
-- 2019-11-04  mwerse  SCXTEND-1433, Added default where clause to use view Inventory_Part_Planning
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-06-19  JaThlk  SCUXXW4-11617, Included UserAllowedSiteLovSelector fragment instead of UserAllowedSiteLov.
-- 2018-04-13  MWerse  SCUXXW4-6410, Converted from frmPartStat using MTG Version: 1.16
-----------------------------------------------------------------------------

projection InventoryPartCurrentlyOnHandAnalysis;
component INVENT;
layer Core;
description "Use this API to view detailed information about the part quantity in inventory, reserved, and available for sales and manufacturing. It also shows requirements from customer orders, shop orders, work orders, and material requisitions.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLov4;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryParts for InventoryPart;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPart {
   crud = Read;
   from = "inventory_part i";
   keys = PartNo, Contract {
      where = "PART_NO = :PartNo and CONTRACT = :Contract";
   }
   where = "(i.part_no,i.contract) IN
            (SELECT part_no,contract
             FROM INVENTORY_PART_PLANNING ipp
             WHERE ipp.part_no = i.part_no
             AND ipp.contract = i.contract
             AND ipp.planning_method NOT IN ('T', 'K', 'O'))";
   attribute PartNo Text {
      maxlength = 100;
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT, PART_NO)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute UnitMeas Text {
      label = "UoM";
      editable = [false];
   }
   attribute TotalAvailableQty Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Avail_Plan_Qty_Loc_Type(contract_           => CONTRACT,
                                                                       part_no_            => PART_NO,
                                                                       configuration_id_   => NULL,
                                                                       activity_seq_       => NULL,
                                                                       qty_type_           => 'AVAILABLE',
                                                                       date_requested_     => NULL,
                                                                       location_type1_db_  => 'PICKING',
                                                                       location_type2_db_  => 'F',
                                                                       location_type3_db_  => 'SHIPMENT',
                                                                       location_type4_db_  => 'MANUFACTURING')";
      label = "Total Available Qty";
      editable = [false];
   }
   attribute ForCustomerOrders Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Avail_Plan_Qty_Loc_Type(contract_             => CONTRACT,
                                                                       part_no_              => PART_NO,
                                                                       configuration_id_     => NULL,
                                                                       activity_seq_         => NULL,
                                                                       qty_type_             => 'AVAILABLE',
                                                                       date_requested_       => NULL,
                                                                       location_type1_db_    => 'PICKING',
                                                                       location_type2_db_    => 'SHIPMENT')";
      label = "For Customer Orders";
      editable = [false];
   }
   attribute ForManufacturing Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Avail_Plan_Qty_Loc_Type(contract_          => CONTRACT,
                                                                       part_no_           => PART_NO,
                                                                       configuration_id_  => NULL,
                                                                       activity_seq_      => NULL,
                                                                       qty_type_          => 'AVAILABLE',
                                                                       date_requested_    => NULL,
                                                                       location_type1_db_ => 'PICKING',
                                                                       location_type2_db_ => 'F',
                                                                       location_type3_db_ => 'MANUFACTURING')";
      label = "For Manufacturing";
      editable = [false];
   }
   attribute ForWorkOrders Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Avail_Plan_Qty_Loc_Type(contract_             => CONTRACT,
                                                                       part_no_              => PART_NO,
                                                                       configuration_id_     => NULL,
                                                                       activity_seq_         => NULL,
                                                                       qty_type_             => 'AVAILABLE',
                                                                       date_requested_       => NULL,
                                                                       location_type1_db_    => 'PICKING')";
      label = "For Work Orders";
      editable = [false];
   }
   attribute ForMaterialRequisitions Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Avail_Plan_Qty_Loc_Type(contract_           => CONTRACT,
                                                                       part_no_            => PART_NO,
                                                                       configuration_id_   => NULL,
                                                                       activity_seq_       => NULL,
                                                                       qty_type_           => 'AVAILABLE',
                                                                       date_requested_     => NULL,
                                                                       location_type1_db_  => 'PICKING')";
      label = "For Material Requisitions";
      editable = [false];
   }
   @DynamicComponentDependency ORDER
   attribute CustomerOrders Number {
      fetch = "CUSTOMER_ORDER_LINE_API.Get_Qty_Demand(CONTRACT,PART_NO)";
      label = "Customer Orders";
      editable = [false];
   }
   @DynamicComponentDependency SHPORD
   attribute ShopOrders2 Number {
      fetch = "SHOP_MATERIAL_ALLOC_API.Get_Qty_Demand(PART_NO,CONTRACT)";
      label = "Shop Orders";
      editable = [false];
   }
   @DynamicComponentDependency WO
   attribute WorkOrders Number {
      fetch = "Maint_Material_Req_Line_API.Get_Company_Owned_Qty_Demand(contract, part_no)";
      label = "Work Orders";
      editable = [false];
   }
   attribute MaterialRequisitions Number {
      fetch = "MATERIAL_REQUIS_LINE_API.Get_Qty_Demand(PART_NO,CONTRACT)";
      label = "Material Requisitions";
      editable = [false];
   }
   attribute TotalQtyNotAvailable Number {
      fetch = "(INVENTORY_PART_IN_STOCK_API.Get_Aggregate_Qty_Onhand(CONTRACT, PART_NO, NULL, NULL, NULL) +
                INVENTORY_PART_IN_TRANSIT_API.Get_Total_Qty_In_Order_Transit(CONTRACT, PART_NO, NULL, NULL, NULL, NULL, NULL, NULL, NULL) +
                INVENTORY_PART_IN_STOCK_API.Get_Total_Qty_In_Transit(CONTRACT, PART_NO, NULL, NULL, NULL)) -
                INVENTORY_PART_IN_STOCK_API.Get_Avail_Plan_Qty_Loc_Type(contract_          => CONTRACT,
                                                                        part_no_           => PART_NO,
                                                                        configuration_id_  => NULL,
                                                                        activity_seq_      => NULL,
                                                                        qty_type_          => 'AVAILABLE',
                                                                        date_requested_    => NULL,
                                                                        location_type1_db_ => 'PICKING',
                                                                        location_type2_db_ => 'F',
                                                                        location_type3_db_ => 'SHIPMENT',
                                                                        location_type4_db_ => 'MANUFACTURING')";
      label = "Total Qty Not Available";
      editable = [false];
   }
   attribute InTransit Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Total_Qty_In_Transit(CONTRACT, PART_NO, NULL, NULL, NULL) + INVENTORY_PART_IN_TRANSIT_API.Get_Total_Qty_In_Order_Transit(CONTRACT, PART_NO, NULL, NULL, NULL, NULL, NULL, NULL, NULL)";
      label = "In Transit";
      editable = [false];
   }
   attribute Reserved Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Avail_Plan_Qty_Loc_Type(contract_            => CONTRACT,
                                                                       part_no_             => PART_NO,
                                                                       configuration_id_    => NULL,
                                                                       activity_seq_        => NULL,
                                                                       qty_type_            => 'RESERVED',
                                                                       date_requested_      => NULL,
                                                                       location_type1_db_   => 'PICKING',
                                                                       location_type2_db_   => 'F',
                                                                       location_type3_db_   => 'SHIPMENT',
                                                                       location_type4_db_   => 'MANUFACTURING')";
      label = "Reserved";
      editable = [false];
   }
   attribute AtDock Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Qty_At_Dock(CONTRACT, PART_NO, NULL)";
      label = "At Dock";
      editable = [false];
   }
   attribute InQualityControl Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Qty_In_Quality_Control(CONTRACT,PART_NO, NULL, NULL)";
      label = "In Quality Control";
      editable = [false];
   }
   attribute NotNettableQty Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Inventory_Qty_Rejected(CONTRACT, PART_NO, NULL, NULL)";
      label = "Not Nettable Qty";
      editable = [false];
   }
   attribute Expired Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Inventory_Qty_Expired(CONTRACT, PART_NO, NULL)";
      label = "Expired";
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute PurchaseRequisitions Number {
      fetch = "PURCHASE_REQ_UTIL_API.Get_Part_Total_Qty(CONTRACT,PART_NO)";
      label = "Purchase Requisitions";
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute PurchaseOrders Number {
      fetch = "PURCHASE_ORDER_LINE_UTIL_API.Get_Part_Qty_To_Receipts(CONTRACT,PART_NO)";
      label = "Purchase Orders";
      editable = [false];
   }
   @DynamicComponentDependency SHPORD
   attribute ShopOrders3 Number {
      fetch = "SHOP_ORD_UTIL_API.Get_Part_Remaining_Qty(PART_NO,CONTRACT)";
      label = "Shop Orders";
      editable = [false];
   }
   attribute CustomerOwned Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Inventory_Quantity(contract_              => CONTRACT,
                                                                  part_no_               => PART_NO,
                                                                  configuration_id_      => NULL,
                                                                  qty_type_              => 'AVAILABLE',
                                                                  ownership_type1_db_    => 'CUSTOMER OWNED',
                                                                  location_type1_db_     => 'PICKING',
                                                                  location_type2_db_     => 'F',
                                                                  location_type3_db_     => 'SHIPMENT',
                                                                  location_type4_db_     => 'MANUFACTURING')";
      label = "Customer Owned";
      editable = [false];
   }
   attribute SupplierLoaned Number {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Inventory_Quantity(contract_              => CONTRACT,
                                                                  part_no_               => PART_NO,
                                                                  configuration_id_      => NULL,
                                                                  qty_type_              => 'AVAILABLE',
                                                                  ownership_type1_db_    => 'SUPPLIER LOANED',
                                                                  location_type1_db_     => 'PICKING',
                                                                  location_type2_db_     => 'F',
                                                                  location_type3_db_     => 'SHIPMENT',
                                                                  location_type4_db_     => 'MANUFACTURING')";
      label = "Supplier Loaned";
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov4(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}
