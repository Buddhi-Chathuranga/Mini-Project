-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-08-05  ChFolk  SCUXXW4-23465, Moved TemporaryPartCostDetail, ModifyLevelCostDetailVirtual and related methods to fragment ModifyLevelCostDetailAssistant.
-- 2019-07-11  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-10-27  SAGELK  SCUXXW4-5589, Converted from dlgModifyLevelCostDetail using MTG Version: 1.31
-- 2018-10-03  SAGELK  SCUXXW4-6785, Converted from tbwEstimatedCostPerCondition using MTG Version: 1.31
-- 2018-10-03  SAGELK  SCUXXW4-6945, Converted from tbwInventoryValueComparator using MTG Version: 1.31
-- 2018-10-03  SAGELK  SCUXXW4-6214, Converted from frmInventoryPartConfig using MTG Version: 1.30
--------------------------------------------------------------------------------------
projection InventoryPartUnitCostHandling;
component INVENT;
layer Core;
description "Use this API to enter and view data concerning costs and inventory value";
category Users;

include fragment IntorderPartAlternateLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment StatisticPeriod2Selector;
include fragment PrintInventoryValueComparisonAssistant;
include fragment InventoryPartInitialCheck;
include fragment ModifyLevelCostDetailAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartConfigSet for InventoryPartConfig;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartConfig {
   ludependencies = InventoryPartConfig;

   crud = Read, Update;
   keys = ConfigurationId, Contract, PartNo {
      where = "CONFIGURATION_ID = :ConfigurationId and CONTRACT = :Contract and PART_NO = :PartNo";
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
   attribute EstimatedMaterialCost Number {
      format = ifscurrency;
   }
   attribute LatestPurchasePrice Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute AveragePurchasePrice Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute LastActualCostCalc Timestamp {
      label = "Last Periodic WA Date Purchase";
      editable = [false];
   }
   attribute LastManufCostCalc Timestamp {
      label = "Last Periodic WA Date Manufactured";
      editable = [false];
   }
   attribute AccumulatedPurchaseDiff Number {
      label = "Cummulative Price Difference";
      editable = [false];
   }
   attribute CumCostVariance Number {
      fetch = "Inv_Part_Config_Manuf_Diff_API.Get_Total_Diff(contract, part_no, configuration_id)";
      label = "Cummulative Cost Variance";
      maxlength = 2000;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute PartDescriptionInUse Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Description";
      maxlength = 200;
      editable = [false];
   }

// Used to check if the RemovePeriodicWADifferenceCommand should be enabled or not.
   attribute InvoiceConsideration Text {
      fetch = "INVENTORY_PART_API.Get_Invoice_Consideration_Db(contract, part_no)";
      editable = [false];
   }

// Used to check if the EstimatedCostPerConditionList CRUD Operations should be enabled or not.
   attribute ConditonCodeUsageDb Text {
      fetch = "Part_Catalog_API.Get_Condition_Code_Usage_Db(part_no)";
   }


   array InventoryPartUnitCostArray(ConfigurationId, Contract, PartNo) to InventoryPartUnitCost(ConfigurationId, Contract, PartNo);
   array InventoryValueComparatorArray(ConfigurationId, Contract, PartNo) to InventoryValueComparator(ConfigurationId, Contract, PartNo);
   array InvPartConfigConditionArray(ConfigurationId, Contract, PartNo) to InvPartConfigCondition(ConfigurationId, Contract, PartNo);

   action RemoveActualCostDifference {
   }
}
@Override
entity InventoryPartUnitCost {
   ludependencies = InventoryPartConfig;

   crud = Read;
   from = "inventory_part_unit_cost_sum";
   keys = LotBatchNo, SerialNo, Contract, PartNo, ConfigurationId {
      where = "LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and CONTRACT = :Contract and PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId";
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute UnitCost Number {
      fetch = "Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Method(contract,part_no,configuration_id,lot_batch_no,serial_no)";
      label = "Unit Cost";
      required = [true];
      editable = [ETag != null];
      format = ifscurrency;
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      maxlength = 2000;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no, lot_batch_no))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
// Used to check if the CostDetailsCommand should be enabled or not.
   attribute InventValuationMethodDb Text {
      fetch = "INVENTORY_PART_API.Get_Invent_Valuation_Method_Db(contract, part_no)";
   }
// Used to check if the ModifyLevelCostDetailsCommand should be enabled or not.
   attribute InventoryPartCostLevel Text {
      fetch = "INVENTORY_PART_API.Get_Inventory_Part_Cost_Lev_Db(contract, part_no)";
   }

}

@Override
entity InventoryValueComparator {
   keys = Contract, PartNo, Company, ConfigurationId, ComparatorTypeId, ConditionCode {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and COMPANY = :Company and CONFIGURATION_ID = :ConfigurationId and COMPARATOR_TYPE_ID = :ComparatorTypeId and CONDITION_CODE = :ConditionCode";
   }

   attribute ComparatorTypeId Text {
      label = "Comparator Type";
   }
   attribute ComparatorTypeDescription Text {
      fetch = "Invent_Value_Comparat_Type_API.Get_Description(company, comparator_type_id)";
      label = "Comparator Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ComparisonValue Number {
      maxlength = 0;
      format = ifscurrency;
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference ComparatorTypeIdRef(Company, ComparatorTypeId) to InventValueComparatType(Company, ComparatorTypeId) {
      label = "Comparator Type";
   }
}

@Override
entity InvPartConfigCondition {
   crud = Create, Read, Update, Delete;
   keys = Contract, PartNo, ConfigurationId, ConditionCode {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and CONDITION_CODE = :ConditionCode";
   }
   use attributes = EstimatedCost;
   attribute ConditionCode Text {
      format = uppercase;
   }
   attribute EstimatedCost Number {
      format = ifscurrency;
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetPartDescriptionInUse Text {
   parameter PartNo Text;
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------


--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------