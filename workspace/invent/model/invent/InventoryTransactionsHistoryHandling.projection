---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2021-10-22  MaEelk  SC21R2-4998, Added Part Move Tax Id.
-- 2020-10-12  JaThlk  SCZ-11850, Added get methods to fetch values rather than accessing them through references to avoid costly left outer joins.
-- 2020-09-28  JaThlk  SC2020R1-1187, Added the attributes, ManufacturerNo, Country, ManufacturerPartNo, ManufacturedDate, ManufacturerLotBatchNo and ManufacturerSerialNo.
-- 2020-04-15  carabr  GEFALL20-492, gelr: incoming_fiscal_note, added IncomingFiscalNoteEnabled, FiscalNoteNumber and FiscalNoteItem attributes to InventoryTransactionHistory
-- 2020-02-05  kusplk  GESPRING20-1802, Added DeliveryReasonId, AltDelNoteNo and DelNoteDate columns to InventoryTransactionHist.
-- 2020-01-02  NISMLK  MFSPRING20-711, Added OwnershipTransferReasonId to InventoryTransactionHist.
-- 2019-08-06  ussolk  FIUXX-22855 AccountingPeriodStr, AccountingYearStr are added to handle page parameters in Lobby Navigations
-- 2019-07-25  ChFolk  SCUXXW4-22798, Modified project information to increase performance.
-- 2019-06-10  JaThlk  SCUXXW4-12418, Added a get method to show AltHandlingUnitLabelId.
-- 2019-05-16  DaZase  SCUXXW4-19664, Added initialcheck to all unbounded actions.
-- 2019-01-11  fandse  SCUXXW4-12833, Added support for Pre Posting, removed Get_Enabled_Code_Parts since this is handled inside the assistant instead
-- 2018-08-13  ChFolk  SCUXXW4-6790, Converted from tbwGenInvtran using MTG Version: 1.25
---------------------------------------------------------------------------------

projection InventoryTransactionsHistoryHandling;
component INVENT;
layer Core;
description "Use this API to view the transactions for inventory parts that occurred during a certain period.";
category Users;
include fragment InventoryLocation19Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment InventoryTransactionCodeLovSelector;
include fragment PrePostingWithSourceAssistant;
include fragment InventoryTransactionHistInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryTransactionsHistorySet for InventoryTransactionsHistory;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryTransactionsHistory using InventoryTransactionHist {
   crud = Read;
   from = "inventory_transaction_hist2";
   attribute TransactionId Number {
      maxlength = 20;
      editable = [false];
   }
   attribute TransactionCode Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute Direction Text {
      editable = [false];
      format = uppercase;
   }
   attribute Quantity Number {
      editable = [false];
   }
   attribute CatchDirection Text {
      maxlength = 3;
      editable = [ETag = null];
   }
   attribute CatchQuantity Number {
      label = "Catch Qty";
      editable = [false];
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract,location_no)";
      label = "Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Tier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute SourceRef1 Text {
      label = "Order Ref 1";
   }
   attribute SourceRef2 Text {
      label = "Order Ref 2";
   }
   attribute SourceRef3 Text {
      label = "Order Ref 3";
   }
   attribute SourceRef4 Text {
      label = "Order Ref 4";
   }
   attribute SourceRef5 Text {
      label = "Order Ref 5";
   }
   attribute WaivDevRejNo Text {
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      editable = [false];
   }
   attribute ExpirationDate Date {
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
      format = uppercase;
   }
   attribute SourceRefType Enumeration(OrderType) {
      label = "Order Type";
      editable = [false];
   }
   attribute Cost Number {
      format = ifscurrency;
   }
   attribute InventoryCost Number {
      fetch = "(COST) *(QUANTITY)";
      label = "Inventory Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalCost Number {
      fetch = "Inventory_Transaction_Cost_API.Get_Sum_Unit_Cost(transaction_id, 'TRUE', 'TRUE') *QUANTITY";
      label = "Total Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute DateCreated Date {
      label = "Created";
   }
   attribute DateTimeCreated Time {
      label = "Creation Time";
      editable = [false];
   }
   attribute Source Text {
      label = "Note";
      editable = [false];
   }
   attribute Userid Text {
      label = "Performed by";
      editable = [false];
   }
   attribute DateApplied Date {
      label = "Applied Date";
      editable = [false];
   }
   attribute AccountingYearStr Text {
      fetch = "to_char(Accounting_Period_API.Get_Accounting_Year(Site_API.Get_Company(contract), date_applied))";
   }
   attribute AccountingPeriodStr Text {
      fetch = "Accounting_Period_API.Get_Year_Period_Str(Site_API.Get_Company(contract), date_applied)";
   }

   attribute AccountingId Number {
      editable = [false];
   }
   attribute PartstatFlag Text {
      label = "Incl Part Aggr per Period";
      editable = [false];
   }
   attribute ValuestatFlag Text {
      label = "Incl Value Aggr per Period";
      editable = [false];
   }
   attribute RejectCode Text {
      label = "Return/Scrap";
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      label = "Ownership";
      editable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "Part_Ownership_API.Encode(PART_OWNERSHIP)";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,OWNING_VENDOR_NO,OWNING_CUSTOMER_NO)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   attribute OwnerName Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(OWNING_CUSTOMER_NO))";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute PreviousPartOwnership Enumeration(PartOwnership) {
      label = "Previous Ownership";
      editable = [false];
   }
   attribute PreviousOwner Text {
      fetch = "DECODE(PREVIOUS_OWNING_CUSTOMER_NO,NULL,PREVIOUS_OWNING_VENDOR_NO,PREVIOUS_OWNING_CUSTOMER_NO)";
      label = "Previous Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   attribute PreviousOwnerName Text {
      fetch = "DECODE(PREVIOUS_OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(PREVIOUS_OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(PREVIOUS_OWNING_CUSTOMER_NO))";
      label = "Previous Owner Name";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute HasErroneousPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Error_Posting_Exists_String(ACCOUNTING_ID)";
      label = "Has Erroneous Postings";
      editable = [false];
      required = [true];
   }
   attribute HasTransferredPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Transferred_Posting_Exists_Str(ACCOUNTING_ID)";
      label = "Has Transferred Postings";
      editable = [false];
      required = [true];
   }
   attribute ReportEarnedValue Boolean("TRUE", "FALSE") {
      fetch = "DECODE(REPORT_EARNED_VALUE_DB, NULL, 'FALSE', 'FALSE', NULL ,'TRUE')";
   }
   attribute TransactionReportId Text {
      editable = [false];
   }
   attribute ModifyDateAppliedDate Timestamp {
      label = "Date Applied Modified Date";
      editable = [false];
   }
   attribute ModifyDateAppliedUser Text {
      label = "Date Applied Modified by User";
      editable = [false];
      format = uppercase;
   }
   attribute PreAccountingId Number {
      label = "Pre-Posting ID";
      editable = [false];
   }
   attribute AccountingHasErrors Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Accounting_Have_Errors_Str(ACCOUNTING_ID)";
      label = "Accounting Has Errors";
      editable = [false];
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(CONTRACT)";
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      editable = [false];
   }
   attribute ManufacturerNo Text;
   attribute Country Text {
      label = "Manufacturer Country";
      fetch = "Manufacturer_Info_API.Get_Country(manufacturer_no)";
   }
   attribute ManufacturerPartNo Text;
   attribute ManufacturerSerialNo Text;
   attribute ManufacturerLotBatchNo Text;
   attribute ManufacturedDate Date;
   -- gelr:warehouse_journal, begin
   attribute DeliveryReasonId Text {
      label = "Delivery Reason ID";
      editable = [false];
   }
   attribute DeliveryReasonDescription Text {
      fetch = "Delivery_Reason_API.Get_Description(Site_API.Get_Company(contract), DELIVERY_REASON_ID)";
      editable = [false];
   }
   attribute DelNoteDate Date {
      label = "Delivery Note Date";
      editable = [false];
   }
   attribute AltDelNoteNo Text {
      label = "Alt Delivery Note No";
      editable = [false];
   }
   -- gelr:warehouse_journal, end
   -- gelr: incoming_fiscal_note, begin
   attribute IncomingFiscalNoteEnabled Boolean("TRUE", "FALSE") {
      fetch = "Company_Localization_Info_Api.Get_Parameter_Value_Db(Site_API.Get_Company(CONTRACT), 'INCOMING_FISCAL_NOTE')";
   }

   @DynamicComponentDependency RCEIPT
   attribute FiscalNoteNumber Text {
      fetch = "DECODE(TRANSACTION_CODE, 'ARRIVAL', Receipt_Info_Api.Get_Receipt_Reference(Receipt_Info_Api.Get_Receipt_Sequence(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, NULL, 'PURCHASE_ORDER', SOURCE_REF4)))";
      editable = [false];
   }

   @DynamicComponentDependency INVOIC
   attribute FiscalNoteItem Text {
      fetch = "DECODE(TRANSACTION_CODE, 'ARRIVAL', Man_Supp_Invoice_Item_Api.Get_Item_Id_By_Po_Receipt(Site_API.Get_Company(CONTRACT), SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4))";
      editable = [false];
   }
   -- gelr: incoming_fiscal_note, end
   attribute TransactionCodeDesc Text {
      fetch = "Mpccom_Transaction_code_API.Get_Transaction(TRANSACTION_CODE)";
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT, PART_NO)";
   }
   attribute ContractDescription Text {
      fetch = "Site_API.Get_Description(CONTRACT)";
   }
   attribute ConditionCodeDesc Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE)";
   }
   attribute UnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
   }
   attribute HandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
   }
   attribute Sscc Text {
      fetch = "Handling_Unit_API.Get_Sscc(HANDLING_UNIT_ID)";
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Alt_Handling_Unit_Label_Id(HANDLING_UNIT_ID)";
   }
   attribute TopParentHuTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)))";
   }
   attribute PartMoveTaxId Number {
      label = "Part Move Tax ID";
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference TransactionCodeRef(TransactionCode) to InventoryTransactionCodeLov(TransactionCode) {
      label = "Transaction Code";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference OwnershipTransferReasonRef(OwnershipTransferReasonId) to OwnershipTransferReason(TransferReasonId) {
      label = "Ownership Transfer Reason";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action ModifyWithAppliedDate Text {
   initialcheck implementation;
   parameter SelectedKeyList Text;
   parameter NewDateApplied Date;
   ludependencies = InventoryTransactionHist;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------
structure NewDateAppliedStructure {
   attribute DateApplied Date;
}

structure CodePartsEnabledStructure {
   attribute CodeA Boolean;
   attribute CodeB Boolean;
   attribute CodeC Boolean;
   attribute CodeD Boolean;
   attribute CodeE Boolean;
   attribute CodeF Boolean;
   attribute CodeG Boolean;
   attribute CodeH Boolean;
   attribute CodeI Boolean;
   attribute CodeJ Boolean;
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

