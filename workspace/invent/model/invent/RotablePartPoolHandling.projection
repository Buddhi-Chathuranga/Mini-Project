--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-08-27  ChFolk  SCUXXW4-23117, Removed attribute RotablePoolAssetTypeDb and used Enumeration for RotablePoolAssetType instead of Boolean.
-- 2019-05-02  ChFolk  SCUXXW4-19487, Replaced attribute PartOwnershipDb as PartOwnership.
-- 2018-12-21  milise  SCUXXW4-6450, Changed name from Individuals to Serials.
-- 2018-11-10  ChFolk  SCUXXW4-5781, Added structure RemoveFromRotablePoolStructure, function GetAvailabilityControlIds and
-- 2018-11-10          action ModifyRotablePartPoolId to complete RemoveFromPoolCommand.
-- 2018-11-10  ChFolk  SCUXXW4-4841, Added virtuals AddIndividualsVirtual and AddToRotablePoolVirtual and action ModifyRotablePartPool
-- 2018-11-10          to complete command AddIndividualsCommand.
-- 2018-11-08  ChFolk  SCUXXW4-7257, Included Site tab.
-- 2018-10-24  MiLise  SCUXXW4-6452, Converted from frmRotablePartPool using MTG Version: 1.31
--------------------------------------------------------------------------------------
projection RotablePartPoolHandling;
component INVENT;
layer Core;
description "Manage RotablePartPool";
category Users;
include fragment PartCatalogLovSelector;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency ORDER
include fragment CustOrdCust1Selector;
@DynamicComponentDependency FIXASS
include fragment RotablePartPoolFa;
@DynamicComponentDependency FIXASS
include fragment FaActiveObjectSelector;
@DynamicComponentDependency FIXASS
include fragment RotablePoolFaObjectLovSelector;
include fragment AccountingCodepartASelector;
include fragment AccountingCodepartBSelector;
include fragment AccountingCodepartCSelector;
include fragment AccountingCodepartDSelector;
include fragment AccountingCodepartESelector;
include fragment AccountingCodepartFSelector;
include fragment AccountingCodepartGSelector;
include fragment AccountingCodepartHSelector;
include fragment AccountingCodepartISelector;
include fragment AccountingCodepartJSelector;
include fragment InventoryPartInStockInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset RotablePartPoolSet for RotablePartPool;
entityset InventoryPartInStockSet for InventoryPartInStock;
entityset RotablePoolSiteSet for RotablePoolSite;
entityset AddIndividualsToRotablePoolSet for AddIndividualsVirtual;
entityset ConnectIndividualToFaObjectSet for ConnectIndividualToFaObjectVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity RotablePartPool {
   crud = Read, Create, Update, Delete;
   supportwarnings = [true];

   attribute RotablePartPoolId Text {
      maxlength = 20;
   }
   attribute Description Text {
      maxlength = 35;
   }
   attribute PartNo Text;
   attribute PartOwnership Enumeration(PartOwnership.NoConsSupLoan) {
      required = [false];
      fetch = "Part_Ownership_Db";
   }
   attribute OwningCustomerNo Text;
   attribute AvailabilityControlId Text;
   attribute RotablePoolAssetType Enumeration(RotablePoolAssetType) {
      fetch = "ROTABLE_POOL_ASSET_TYPE_DB";
      label = "FA Rotable Pool";
      editable = [true];
      required = [true];
   }
   attribute TargetQty Number {
      editable = [true];
   }
   attribute ActualPoolQty Number {
      fetch = "NVL(Inventory_Part_In_Stock_API.Get_Rotable_Part_Pool_Qty(rotable_part_pool_id), 0)";
      editable = [false];
   }
   attribute PoolDiffQty Number {
      fetch = "target_qty - NVL(Inventory_Part_In_Stock_API.Get_Rotable_Part_Pool_Qty(rotable_part_pool_id), 0)";
      editable = [false];
   }
   attribute DefaultSite Text {
      fetch = "Rotable_Pool_Site_API.Get_Default_Contract(rotable_part_pool_id)";
      editable = [false];
   }
   attribute CodePartCompany Text {
      fetch = "Rotable_Pool_Site_API.Get_Company(rotable_part_pool_id)";
      editable = [false];
   }
   attribute CodeAChar Text {
      fetch = "'A'";
   }
   attribute CodeBChar Text {
      fetch = "'B'";
   }
   attribute CodeCChar Text {
      fetch = "'C'";
   }
   attribute CodeDChar Text {
      fetch = "'D'";
   }
   attribute CodeEChar Text {
      fetch = "'E'";
   }
   attribute CodeFChar Text {
      fetch = "'F'";
   }
   attribute CodeGChar Text {
      fetch = "'G'";
   }
   attribute CodeHChar Text {
      fetch = "'H'";
   }
   attribute CodeIChar Text {
      fetch = "'I'";
   }
   attribute CodeJChar Text {
      fetch = "'J'";
   }

   @DynamicComponentDependency ORDER
   reference OwningCustomerNoRef(OwningCustomerNo) to CustOrdCust1(CustomerNo);
   reference PartNoRef(PartNo) to PartCatalogLov(PartNo);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   array RotablePartPoolSerialsArray(RotablePartPoolId) to InventoryPartInStock(RotablePartPoolId);
   array RotablePartPoolSitesArray(RotablePartPoolId) to RotablePoolSite(RotablePartPoolId);
   @DynamicComponentDependency FIXASS
   array RotablePoolFaObjectsArray(RotablePartPoolId) to RotablePoolFaObject(RotablePartPoolId);
}
@Override
entity InventoryPartInStock {
   crud = Read;
   from = "inventory_part_in_stock";
   exec = "INVENTORY_PART_IN_STOCK_API";

   use attributes = AvailabilityControlId;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no, serial_no, lot_batch_no)";
      label = "Condition Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no, serial_no, lot_batch_no))";
      label = "Condition Code Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
      required = [true];
      editable = [ETag = null];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      maxlength = 6;
      required = [true];
      editable = [ETag = null];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      required = [true];
      editable = [ETag = null];
   }
   attribute RotablePartPoolId Text {
      fetch = "rotable_part_pool_id";
      label = "(Untitled)";
      maxlength = 20;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation(Contract, LocationNo) {
      label = "Location No";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
}

@Override
entity RotablePoolSite {
   crud = Read, Create, Delete;
   exec = "ROTABLE_POOL_SITE_API";

   attribute RotablePartPoolId Text;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [ETag = null];
      format = uppercase;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract);
   reference SiteRef(Contract) to Site(Contract);
}

@Override
entity InventoryPartInStockRot using InventoryPartInStock {
   crud = Read;
   from = "inventory_part_in_stock_rot";
   keys = Contract, PartNo, SerialNo, LotBatchNo, ConfigurationId, LocationNo, HandlingUnitId, EngChgLevel, ActivitySeq, WaivDevRejNo;
   where = "(inventory_valuation_method_db = 'ST'
        AND part_ownership_db = 'COMPANY OWNED'
        AND inventory_part_cost_level_db = 'COST PER SERIAL')";
   use attributes = AvailabilityControlId;

   attribute AddToPool Text;
   attribute Contract Text;
   attribute PartNo Text;
   attribute Description2 Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Description";
   }
   attribute SerialNo Text;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConfigurationId Text;
   attribute AvailabilityControlId Text;
   attribute ConditionCode Text;
   attribute LocationNo Text;
   attribute HandlingUnitId Number;
   attribute Description3 Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Description";
   }
   attribute EngChgLevel Text {
      label = "Rev No";
   }
   attribute ActivitySeq Number {
      label = "Activity Seq";
   }
   attribute WaivDevRejNo Text;
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Availability Control ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Seq";
   }
}

---------------------------------- ACTIONS ----------------------------------
action ModifyRotablePartPool {
   initialcheck implementation;
   parameter ParentObjkey Text;
   parameter RotablePartPoolId Text;
   parameter AvailabilityControlId Text;
   ludependencies = InventoryPartInStock;
   ludependencies = RotablePartPool;
}

action ModifyRotablePartPoolId {
   initialcheck InventoryPartInStockInitialCheck(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter AvailabilityControlId Text;
   ludependencies = InventoryPartInStock;
   ludependencies = RotablePartPool;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetDescription Text {
   parameter PartNo Text;
}

function GetAvailabilityControlIds List<Entity(PartAvailabilityControl)> {
   where = "OBJSTATE = 'Active'";
}
-------------------------------- STRUCTURES ---------------------------------
structure RemoveFromRotablePoolStructure {
   attribute AvailabilityControlId Text;
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
}
--------------------------------- VIRTUALS ----------------------------------
virtual AddIndividualsVirtual {
   attribute RotablePartPoolId Text;
   attribute PartNo Text;
   attribute AvailabilityControlId Text;
   attribute OwningCustomerNo Text;
   attribute PartOwnership Enumeration(PartOwnership.NoConsSupLoan);

   array AddIndividualsArray() to AddToRotablePoolVirtual();
}

virtual AddToRotablePoolVirtual {
   crud = Read, Update;
   attribute AddIndividual Boolean("TRUE", "FALSE") {
      label = "Add Serial";
      editable = [true];
      required = [true];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
      editable = [false];
      format = uppercase;
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      maxlength = 6;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHuLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);

   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Availability Control ID";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
}

virtual ConnectIndividualToFaObjectVirtual {
   attribute RotablePartPoolId Text;
   attribute PartNo Text;
   attribute AvailabilityControlId Text;
   attribute Company Text;
   attribute ObjectId Text;

   array AddIndividualsArray(RotablePartPoolId) to InventoryPartInStockRot(AddToPool) {
      where = "(:child.PartNo = :parent.PartNo OR
                :child.PartNo IN (SELECT APN.alternative_part_no
                                    FROM part_catalog_alternative APN
                                   WHERE APN.part_no = :parent.PartNo))";
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


