---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2019-09-09  YasMlk  SCFALL19-225, Removed projection attribute and added get method for OrderSupplyDemandTypeDb as part of aurena improvements.
-- 2019-06-12  JaThlk  SCUXXW4-21635, Added the function GetHandlingUnitIdList.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-10-11  JaThlk  SCUXXW4-7047, Implemented SplitReservationAssistant.
-- 2018-09-27  FANDSE  SCUXXW4-7047, Removed comments and duplicated reference to Activity
-- 2018-09-01  FANDSE  SCUXXW4-7047, Fixed @DynamicComponentDependency. removed comments
-- 2018-08-28  SUDELK  SCUXXW4-5614, Fixed Move With Transport Task Command.
-- 2018-08-28  FANDSE  SCUXXW4-7047, Fixed Navigations for Numeric fields after FW-correction TEUXX-13411.
-- 2018-08-27  FANDSE  SCUXXW4-7047, Fixed Move Reservation Command.
-- 2018-08-21  FANDSE  SCUXXW4-7047, Fixed TransportTaskCommand.
-- 2018-08-16  FANDSE  SCUXXW4-7047, Fixed comands for Shop Order and Interim Order
-- 2018-08-15  FANDSE  SCUXXW4-7047, Converted from tbwInvPartStockReservation using MTG Version: 1.21, initial commit, more changes will follow
---------------------------------------------------------------------------------

projection InventoryPartInStockReservationsHandling;
component INVENT;
layer Core;
description "Use this API to view information about the parts reserved in stock. The demand objects that can reserve material are: customer orders, purchase orders, shop orders, DOP orders, interim orders, work orders, maintenance orders, projects, material requisitions, and transport tasks.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment InventoryLocation5Selector;
include fragment MoveResWithTransportTask;
include fragment TemporaryPartTrackingSerialSelector;
include fragment SplitReservationAssistant;
include fragment SequenceGeneratorAssistant;
include fragment IdentifySerialsByBarcodeDynamicAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartInStockReservationSet for InvPartStockReservation;

---------------------------------- QUERIES ----------------------------------
@Override
query InvPartStockReservation {
   from = "inv_part_stock_reservation_uiv";
   keys = OrdRef1, OrdRef2Key, OrdRef3Key, OrdRef4Key, Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel,
   WaivDevRejNo, ActivitySeq, HandlingUnitId, ConfigurationId, PickListNoKey, ShipmentIdKey, SupplyDemandType {
      where = "ORDER_NO = :OrdRef1 and nvl(LINE_NO, CHR(32))  = :OrdRef2Key and nvl(RELEASE_NO, CHR(32)) = :OrdRef3Key and
      nvl(LINE_ITEM_NO, CHR(32)) = :OrdRef4Key and CONTRACT = :Contract and PART_NO = :PartNo and
      LOCATION_NO = :LocationNo and LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and
      ENG_CHG_LEVEL = :EngChgLevel and WAIV_DEV_REJ_NO = :WaivDevRejNo and ACTIVITY_SEQ = :ActivitySeq and
      HANDLING_UNIT_ID = :HandlingUnitId and CONFIGURATION_ID = :ConfigurationId and nvl(PICK_LIST_NO, CHR(32))  = :PickListNoKey and
      nvl(SHIPMENT_ID, -99) = :ShipmentIdKey and ORDER_SUPPLY_DEMAND_TYPE = :SupplyDemandType";
   }

   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract,part_no)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute QtyReserved Number {
      fetch = "QTY_RESERVED";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute OrderSupplyDemandType Text {
      fetch = "ORDER_SUPPLY_DEMAND_TYPE";
      label = "Type";
      maxlength = 30;
      editable = [false];
   }
   attribute OrdRef1 Text {
      fetch = "ORDER_NO";
      label = "Ord Ref 1";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute OrdRef2 Text {
      fetch = "LINE_NO";
      label = "Ord Ref 2";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute OrdRef2Key Text {
      fetch = "nvl(LINE_NO, CHR(32))";
      editable = [false];
   }
   attribute OrdRef3 Text {
      fetch = "RELEASE_NO";
      label = "Ord Ref 3";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute OrdRef3Key Text {
      fetch = "nvl(RELEASE_NO, CHR(32))";
      editable = [false];
   }
   attribute OrdRef4 Text {
      fetch = "LINE_ITEM_NO";
      label = "Ord Ref 4";
      maxlength = 50;
      editable = [false];
   }
   attribute OrdRef4Key Text {
      fetch = "nvl(LINE_ITEM_NO, CHR(32))";
      editable = [false];
   }
   attribute PickListNo Text {
      fetch = "PICK_LIST_NO";
      label = "Pick List No";
      maxlength = 15;
      editable = [false];
   }
   attribute PickListNoKey Text {
      fetch = "nvl(PICK_LIST_NO, CHR(32))";
      editable = [false];
   }
   attribute QtyPicked Number {
      fetch = "QTY_PICKED";
      label = "Qty Picked";
      editable = [false];
   }
   attribute PickListPrintedDb Boolean("TRUE", "FALSE") {
      fetch = "PICK_LIST_PRINTED_DB";
      label = "Pick List Printed";
      editable = [false];
      required = [true];
   }
   attribute PickListPrintedDbText Text {
      fetch = "PICK_LIST_PRINTED_DB";
      label = "Pick List Printed Text";
      editable = [false];
   }
   attribute ShipmentId Number {
      fetch = "SHIPMENT_ID";
      label = "Shipment ID";
      editable = [false];
   }
   attribute ShipmentIdKey Number {
      fetch = "nvl(SHIPMENT_ID, -99)";
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute LocationNo Text {
      fetch = "LOCATION_NO";
      label = "Location No";
      maxlength = 35;
      editable = [false];
      format = uppercase;
   }
   attribute HandlingUnitId Number {
      fetch = "HANDLING_UNIT_ID";
      label = "Handling Unit ID";
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "WAREHOUSE";
      label = "Warehouse ID";
      maxlength = 100;
      editable = [false];
   }
   attribute BayNo Text {
      fetch = "BAY_NO";
      label = "Bay ID";
      maxlength = 100;
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "ROW_NO";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierNo Text {
      fetch = "TIER_NO";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinNo Text {
      fetch = "BIN_NO";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "LOT_BATCH_NO";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "WAIV_DEV_REJ_NO";
      label = "W/D/R No";
      maxlength = 15;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "ENG_CHG_LEVEL";
      label = "Revision No";
      maxlength = 6;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "ACTIVITY_SEQ";
      label = "Activity Sequence";
      editable = [false];
   }
   attribute LastActivityDate Timestamp {
      fetch = "LAST_ACTIVITY_DATE";
      label = "Last Activity Date";
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute SerialTrackingatReceiptandIssue Text {
      fetch = "PART_CATALOG_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
      label = "Serial Tracking at Receipt and Issue";
      maxlength = 2000;
      editable = [false];
   }
   attribute SupplyDemandType Text {
      fetch = "Order_Supply_Demand_Type_API.Encode(ORDER_SUPPLY_DEMAND_TYPE)";
      label = "Supply/Demand Type";
      maxlength = 30;
      editable = [false];
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute PickByChoiceBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "PICK_BY_CHOICE_BLOCKED_DB";
      label = "Blocked for Pick by Choice";
      editable = [false];
      required = [true];
   }
   attribute DummyTopHU Number {
      fetch = "NVL(Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID), HANDLING_UNIT_ID)";
      label = "Dummy Top HU";
      editable = [false];
   }
   attribute OnTransportTask Boolean("TRUE", "FALSE") {
      fetch = "Inv_Part_Stock_Reservation_API.Is_Booked_For_Transport(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID, ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO, PICK_LIST_NO, SHIPMENT_ID, Order_Supply_Demand_Type_API.Encode(ORDER_SUPPLY_DEMAND_TYPE))";
      label = "On Transport Task";
      editable = [false];
      required = [true];
   }
   @DynamicComponentDependency PRJDEL
   attribute ProjectDeliverableMaterialItemNoFromPlanningNo Number {
      fetch = "CASE Order_Supply_Demand_Type_API.Encode(ORDER_SUPPLY_DEMAND_TYPE)
               WHEN 'PROJ_DELIVERABLES_MATERIAL' THEN Planning_Item_API.Get_Item_No_From_Planning_No(LINE_ITEM_NO) END";
      label = "Project Deliverables Item No from Planning No";
      editable = [false];
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency ORDER
   reference PickListNoRef(PickListNo) to CustomerOrderPickList(PickListNo) {
      label = "Pick List No";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
}

---------------------------------- ACTIONS ----------------------------------
action MoveReservation {
   initialcheck UserAllowedSite(Contract);
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter Contract Text;
   parameter LocationNo Text;
   parameter ToLocationNo Text;
   parameter SupplyDemandType Text;
   parameter OrdRef1 Text;
   parameter OrdRef2 Text;
   parameter OrdRef3 Text;
   parameter OrdRef4 Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter QtyReserved Number;
   parameter PickListNo Text;
   parameter QtyPicked Number;
   parameter PickListPrintedDb Text;
   parameter ShipmentId Number;
   parameter MoveComment Text;
   ludependencies = InvPartStockReservation;
}
action MoveResWithTransportTask {
   initialcheck UserAllowedSite(Contract);
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter Contract Text;
   parameter LocationNo Text;
   parameter ToLocationNo Text;
   parameter SupplyDemandType Text;
   parameter OrdRef1 Text;
   parameter OrdRef2 Text;
   parameter OrdRef3 Text;
   parameter OrdRef4 Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter QtyReserved Number;
   parameter PickListNo Text;
   parameter QtyPicked Number;
   parameter PickListPrintedDb Text;
   parameter ShipmentId Number;
   ludependencies = InvPartStockReservation;
}
//! TODO: Should be refactored as a function!
action ConvertToString Text {
   initialcheck none;
   parameter ShipmentId Number;
}

-------------------------------- STRUCTURES ---------------------------------
structure MoveReservationStructure {
   attribute Contract Text;
   attribute ToLocationNo Text {
      label = "To Location No";
      maxlength = 100;
      required = [true];
      format = uppercase;
   }
   attribute ToContract Text {
      maxlength = 100;
   }
   attribute ToLocationDesc Text {
      maxlength = 100;
   }
   attribute MoveComment Text {
      label = "Move Comment";
      maxlength = 4000;
   }
   reference ToLocationNoRef(CONTRACT, ToLocationNo) to InventoryLocation5(Contract, LocationNo) {
      label = "To Location No";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function FindCommonSiteSelected Text {
   parameter Selection Text;
}
@DynamicComponentDependency SHPORD
function CheckTypeOfShopOrder Text {
   parameter Selection Text;
}
@DynamicComponentDependency ORDSTR
function CheckTypeOfInterimOrder Text {
   parameter Selection Text;
}
function CreateTransportTaskFilter Text {
   parameter Selection Text;
}
function GetLocationNos List<Entity(InventoryLocation5)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function GetHandlingUnitIdList Text {
   parameter TotalSelection Text;
}
function GetOrderSupplyDemandTypeDb Text {
   parameter OrderSupplyDemandType Text;
}