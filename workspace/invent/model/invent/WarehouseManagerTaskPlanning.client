--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-01-26  UdGnlk  SC2020R1-12196, Added validation to start command to enable and disable functionality.
--  2019-06-07  bajelk  SCUXXW4-22166, Changed some labels.
--  2018-11-19  KoDelk  SCUXXW4-6540, Converted from frmWarehouseMgrTaskPlanning using MTG Version: 1.32
---------------------------------------------------------------------------------
client WarehouseManagerTaskPlanning;
component INVENT;
layer Core;
projection WarehouseManagerTaskPlanningHandling;

include fragment UserAllowedSiteLovSelector;
include fragment WarehouseWorkerLovSelector;
include fragment ParkReasonDialog;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry WarehouseManagerTaskPlanningNavEntry parent InventNavigator.WarehouseTasksTaskPlanning at index 100 {
      label = "Warehouse Manager Task Planning";
      assistant Assistant;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CompleteCommand for WarehouseTask {
   label = "Complete";
   enabled = [Objstate in("Started")];
   mode = SelectedRecords;

   bulkexecute {
      call CompleteWarehouseTask(Selection);
   }
}
command WarehouseTaskCommand for WarehouseTask {
   label = "Warehouse Task";
   enabled = [true];
   execute {
      navigate "page/WarehouseTask/Form?$filter=TaskId eq $[TaskId]";
   }
}
command AssignReassignWorkerCommand for WarehouseTask {
   label = "Assign/Reassign Worker";
   enabled = [Objstate != "Started"];
   mode = SelectedRecords;

   variable ParamsVar {
      type = AssignWorkerStructure;
   }
   variable WorkerIdVar;
   bulkexecute {
      call GetDialogParameters(Selection) into ParamsVar;

      dialog AssignWorkerDialog(ParamsVar.Contract, ParamsVar.TaskType, ParamsVar.LocationGroup) into(WorkerIdVar) {
         when OK {
            call AssignTasksToWorker(Selection, WorkerIdVar);
            success("Worker Assigned");
         }
      }
   }
}
command AssignReassignWorkerGroupCommand for WarehouseTask {
   label = "Assign/Reassign Worker Group";
   enabled = [Objstate != "Started" and WorkerId = null];
   mode = SelectedRecords;

   variable ParamsVar {
      type = AssignWorkerStructure;
   }
   variable WorkerGroupVar;
   bulkexecute {
      call GetDialogParameters(Selection) into ParamsVar;

      dialog AssignWorkerGroupDialog(ParamsVar.Contract) into(WorkerGroupVar) {
         when OK {
            call AssignTasksToWorkerGroup(Selection, WorkerGroupVar);
            success("Worker Group Assigned");
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryLocationGroupSelector for InventoryLocationGroup {
   static Description;
   static InventoryLocationType;
}
@Override
selector WorkerSelector for WarehouseWorkerLov {
   static WorkerId {
      label = "Worker ID";
   }
   static WorkerName;
   static CalendarId {
      label = "Calendar ID";
   }
   static StartDate;
}
----------------------------- VISUAL COMPONENTS -----------------------------
-------------------------------- ASSISTANTS ---------------------------------

assistant Assistant using WarehouseTaskPlanningVirtualSet {
   label = "Warehouse Manager Task Planning";
   savemode = OnLostFocus;

   init command {
      execute {
         set TransportTask = true;
         set CustomerOrderPickList = true;
         set ShopOrderPickList = true;
      }
   }
   steps {
      step {
         group SiteGroup;
         group TaskTypeParameterGroup;
         group AssignmentGroup;
         list MgrTasksPlanningList using GetWarehouseTasks(Contract, TransportTask, CustomerOrderPickList, ShopOrderPickList, Assignment, WorderId, WorkerGroup, LocationGroup);
      }
      final step {
      }
   }

   finish command {
      visible = [false];
   }
   cancel command {
      label = "Close";

      execute {
         navigate back;
      }
   }
}
---------------------------------- GROUPS -----------------------------------
group SiteGroup for WarehouseTaskPlanningVirtual {
   label = " ";
   lov UserAllowedSiteLovRef with ReferenceUserAllowedSiteLovSelector {
      description = UserAllowedSiteLovRef.ContractDesc;
   }
   lov InventoryLocationGroupRef with InventoryLocationGroupSelector using GetInventoryLocationGroups(Contract) {
      description = InventoryLocationGroupRef.Description;
      editable = [Contract != null];
   }
}

group TaskTypeParameterGroup for WarehouseTaskPlanningVirtual {
   label = "Task Type";

   field TransportTask {
      size = Small;
      editable = [Contract != null];
   }
   field CustomerOrderPickList {
      size = Small;
      editable = [Contract != null];
   }
   field ShopOrderPickList {
      size = Small;
      editable = [Contract != null];
   }
}

group AssignmentGroup for WarehouseTaskPlanningVirtual {
   label = "Assignment";

   radiogroup Assignment {
      editable = [Contract != null];
      validate command {
         execute {
            set WorderId = null;
            set WorkerGroup = null;
         }
      }
   }
   lov WarehouseWorkerRef with ReferenceWarehouseWorkerLovSelector {
      editable = [Assignment = "Assigned"];

      validate command {
         execute {
            set WorkerGroup = null;
         }
      }
   }
   lov WarehouseWorkerGroupRef with WarehouseWorkerGroupSelector {
      description = WarehouseWorkerGroupRef.Description;
      editable = [Assignment = "Assigned"];

      validate command {
         execute {
            set WorderId = null;
         }
      }
   }
}
group WorkerGroup for AssignWorkerStructure {
   label = "";
   lov WarehouseWorkerRef with WorkerSelector {
      description = WarehouseWorkerRef.WorkerName;
      advancedview WarehouseWorkerAdvLovList;
   }
}
group WorkerGroupGroup for AssignWorkerStructure {
   label = "";
   lov WarehouseWorkerGroupRef with WarehouseWorkerGroupSelector {
      description = WarehouseWorkerGroupRef.Description;
   }
}
----------------------------------- LISTS -----------------------------------
list MgrTasksPlanningList for WarehouseTask {
   label = "Warehouse Tasks";

   field InventoryLocationGroupRef {
      size = Small;
   }
   field InventoryLocationGroupRef.InventoryLocationType {
      label = "Location Type";
   }
   field TaskId;
   field TaskType;
   badge Objstate {
      size = Small;
      label = "Status";
      style = TextOnly;
      emphasis Complementary1 = [Objstate = "Parked"];
      emphasis Complementary2 = [Objstate = "Planned"];
      emphasis Complementary3 = [Objstate = "Released"];
      emphasis Complementary4 = [Objstate = "Started"];

   }
   field Priority;
   field AssignedPriority;
   lov WorkerIdRef with ReferenceWarehouseWorkerLovSelector {
      description = WorkerIdRef.WorkerName;
   }
   lov WorkerGroupRef with WarehouseWorkerGroupSelector {
      description = WorkerGroupRef.Description;
   }
   field NumberOfLines;
   field RequestedDateFinished;
   field TotalPlannedTimeNeeded;
   field LatestStartDate;
   field ActualDateStarted;
   field ExpectedFinishDate;
   field Info;
   field SourceRef1;
   lov WarehouseTaskParkReasonRef with WarehouseTaskParkReasonSelector {
      description = WarehouseTaskParkReasonRef.Description;
   }
   field TaskType {
      columnexclude = [true];
      columnvisible = [false];
   }

   fieldranking LocationGroup, TaskId, TaskType, Objstate, Priority, AssignedPriority, WorkerId, WorkerGroup, NumberOfLines;

   commandgroup StatusCommandGroup {
      label = "Status Commands";
      command BulkPlan;
      command BulkRelease;
      command Start {
         enabled = [WorkerId != null and Objstate in("Released")];
      }
      command CompleteCommand;
      command ParkCommand;
      command BulkRestart;
   }

   commandgroup WhseTaskActionsGroup {
      label = "Warehouse Task Actions";
      command WarehouseTaskCommand;
      command AssignReassignWorkerCommand;
      command AssignReassignWorkerGroupCommand;
   }
}
list WarehouseWorkerAdvLovList for WarehouseWorkerLov {
   label = "";
   static WorkerId {
      label = "Worker ID";
   }
   static WorkerName;
   static CalendarId {
      label = "Calendar ID";
   }
   static StartDate;
}
---------------------------------- DIALOGS ----------------------------------
dialog AssignWorkerDialog for AssignWorkerStructure {
   label = "Assign/Reassign Worker";
   input(Contract, TaskType, LocationGroup);
   output(WorkerId);

   group WorkerGroup;

   command Ok;
   command Cancel;
}
dialog AssignWorkerGroupDialog for AssignWorkerStructure {
   label = "Assign/Reassign Worker";
   input(Contract);
   output(WorkerGroup);

   group WorkerGroupGroup;

   command Ok;
   command Cancel;
}
