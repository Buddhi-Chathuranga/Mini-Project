-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2021-09-27  GrGalk  SCZ-16432, Updated the DynamicComponentDependency as SHPORD instead of Shpord.
-- 2020-03-27  JaThlk  Bug 151678 (SCZ-8354), Modified the enable condition of crudaction new in SerialReservationList.
-- 2020-01-06  PamPlk  Bug 151678 (SCZ-8354), Modified the SerialReservationAssistant to handle receiving partially received serial parts.
-- 2019-09-18  JaThlk  SCXTEND-485, Redesign of SerialReservationAssistant.
-- 2019-06-20  JaThlk  SCUXXW4-16264, Removed the savemode buffer and added Close button instead of OK and Cancel button.
-- 2019-01-04  JaThlk  SCUXXW4-5821, Set the savemode to Buffer.
-- 2018-12-18  ChFolk  SCUXXW4-5821, included fragment SequenceGeneratorAssistant.
-- 2018-11-07  JaThlk  SCUXXW4-5821, Implemented SequenceGeneratorAssistant.
-- 2018-10-16  JaThlk  SCUXXW4-5821, Created the fragment from dlgSerialReservation to reserve serial numbers.
-------------------------------------------------------------------------------------------------------
fragment SerialReservationAssistant;
component INVENT;
layer Core;
description "Use this fragment to reserve serial numbers";
include fragment SequenceGeneratorAssistant;
//warningsenabled = CreateSerialSequence;

----------------------------- CLIENT FRAGMENTS ------------------------------
assistant SerialReservationAssistant using SerialReservationSet {
   label = "Serial Number Reservations";
   input(OrderRef1, OrderRef2, OrderRef3, OrderRef4, Contract, PartNo, SourceQty, SerialReservationSourceDb, DueAtDock);

   init command {
      execute {
         if [DueAtDock = null] {
            set UnreservedSerials = SourceQty;
         }
         else {
            set UnreservedSerials = DueAtDock;
         }
      }
   }

   steps {
      step {
         group SourceReferenceGroup;
         group SerialReservationGroup;
         list SerialReservationList(SerialReservationArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      visible = [false];
      execute {
         exit OK;
      }
   }
   cancel command {
      label = "Close";
      execute {
         @DynamicComponentDependency SHPORD
         call BuildSerialStructures(OrderRef1, OrderRef2, OrderRef3);
         exit OK;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------
command GenerateSequenceInReservCommand for SerialNoReservationVirtual {
   label = "Sequence";
   mode = Global;
   variable SerialListStr {
      type = LongText;
   }
   enabled = [computed.SerialsToReserve > 0];
   execute {
      assistant SequenceGeneratorAssistant("${computed.SerialsToReserve}") into(SerialListStr) {
         when OK {
            call CreateLines(Objkey, SerialListStr, Contract, PartNo, OrderRef1, OrderRef2, OrderRef3, OrderRef4, SerialReservationSourceDb);
         }
      }
   }

}

command SendStructureEffectivity for SerialNoReservationVirtual {
   bulkexecute {
      bulkset StructEffectivityDb = "${parent.StructureEffectivityDb}";
      bulkset ReservationCount = 1;
   }

}
command RefreshTabs for SerialNoReservationVirtual {
   bulkexecute {
      bulkcall ReftreshTabs();
      if [DeleteCount > 0] {
         bulkcall ReftreshSerialPartLocTab();
      }
   }

}
--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group SourceReferenceGroup for SerialReservationVirtual {
   label = "Source Reference";
   field OrderRef1 {
      label = "Source Ref1";
      size = Small;
   }
   field OrderRef2 {
      label = "Source Ref2";
      size = Small;
   }
   field OrderRef3 {
      label = "Source Ref3";
      size = Small;
   }
   field OrderRef4 {
      label = "Source Ref4";
   }
   field SerialReservationSource {
      label = "Source Ref Type";
   }
}
group SerialReservationGroup for SerialReservationVirtual {
   label = "";

   lov PartCatalogRef with ReferencePartCatalogSelector {
      label = "Part";
      description = PartCatalogRef.LanguageDescription;
   }
   field SourceQty;
   computedfield SerialsToReserve {
      label = "Serials To Identify";
      value = "#{UnreservedSerials - SerialReservationArray.sum(ReservationCount)}";
      type = Number;
   }
}

----------------------------------- LISTS -----------------------------------
list SerialReservationList for SerialNoReservationVirtual {
   label = "";
   persistmode = Entity;

   crudactions {
      before command SendStructureEffectivity;

      new {
         enabled = [component.SerialReservationList.RowCount < parent.UnreservedSerials];
      }
      after command RefreshTabs;
   }

   field SerialNo;
   field ReservedCheck {
      columnexclude = [true];
   }
   field FromSequence {
      columnexclude = [true];
   }

   command GenerateSequenceInReservCommand;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SerialReservationSet for SerialReservationVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
@DynamicComponentDependency SHPORD
action BuildSerialStructures {
   initialcheck none;
   parameter OrderRef1 Text;
   parameter OrderRef2 Text;
   parameter OrderRef3 Text;
}

action CreateLines {
   initialcheck none;
   parameter ParentObjkey Text;
   parameter SerialList LongText;
   parameter Contract Text;
   parameter PartNo Text;
   parameter OrderRef1 Text;
   parameter OrderRef2 Text;
   parameter OrderRef3 Text;
   parameter OrderRef4 Number;
   parameter SerialReservationSourceDb Text;
   supportwarnings = [true];
   ludependencies = SerialReservationVirtual, SerialNoReservationVirtual;
}
---------------------------------- ACTIONS ----------------------------------
action ReftreshTabs {
   initialcheck none;
   ludependencies = MroSerialReserveLov, RepairSoSerialLov, ReservedSerialNo, ShopMaterialAssign;
}
action ReftreshSerialPartLocTab {
   initialcheck none;
   ludependencies = InventoryPartInStockVirtual;
}
--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual SerialReservationVirtual {
   ludependencies = SerialNoReservationVirtual;
   attribute OrderRef1 Text {
      label = "";
      maxlength = 12;
      format = uppercase;
      editable = [false];
   }
   attribute OrderRef2 Text {
      label = "";
      maxlength = 4;
      editable = [false];
   }
   attribute OrderRef3 Text {
      label = "";
      maxlength = 4;
      editable = [false];
   }
   attribute OrderRef4 Number {
      label = "";
      editable = [false];
   }
   attribute PartNo Text {
      label = "Part No";
      maxlength = 25;
      format = uppercase;
      editable = [false];
   }
   attribute PartDescription Text {
      label = "Part Description";
      fetch = "Part_Catalog_API.Get_Description(PART_NO)";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceQty Number {
      label = "Source Qty";
      editable = [false];
   }
   attribute SerialsToReserve Number {
      label = "Serials to Reserve";
      editable = [false];
   }
   attribute SerialReservationSourceDb Text;
   attribute SerialReservationSource Text {
      fetch = "Serial_Reservation_Source_API.Decode(SERIAL_RESERVATION_SOURCE_DB)";
      editable = [false];
   }
   attribute Contract Text;
   attribute SerialRule Text {
      fetch = "Part_Serial_Rule_API.Encode(Part_Catalog_API.Get_Serial_Rule(PART_NO))";
   }
   attribute MaxSerial Text {
      fetch = "Serial_No_Reservation_API.Get_Max_Serial_No(PART_NO)";
   }
   attribute CountReservation Number {
      fetch = "Serial_No_Reservation_API.Get_Count_Reservation(ORDER_REF1, ORDER_REF2, ORDER_REF3, ORDER_REF4, SERIAL_RESERVATION_SOURCE_DB, PART_NO)";
   }
   attribute DueAtDock Number {
      label = "Due At Dock";
      editable = [false];
   }
   attribute UnreservedSerials Number;

   reference PartCatalogRef(PartNo) to PartCatalog(PartNo);

   array SerialReservationArray(PartNo, OrderRef1, OrderRef2, OrderRef3, OrderRef4, SerialReservationSourceDb, Contract, DueAtDock) to SerialNoReservationVirtual(PartNo, OrderRef1, OrderRef2, OrderRef3, OrderRef4, SerialReservationSourceDb, Contract, DueAtDock);
}

virtual SerialNoReservationVirtual {
   crud = Create, Read, Delete;
   ludependencies = SerialReservationVirtual;
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      required = [true];
      editable = [true];
      format = uppercase;
   }
   attribute OrderRef1 Text {
      fetch = "order_ref1";
      label = "Order Ref1";
      maxlength = 12;
      format = uppercase;
   }
   attribute OrderRef2 Text {
      fetch = "order_ref2";
      label = "Order Ref2";
      maxlength = 4;
   }
   attribute OrderRef3 Text {
      fetch = "order_ref3";
      label = "Order Ref3";
      maxlength = 4;
   }
   attribute OrderRef4 Number {
      fetch = "order_ref4";
      label = "Order Ref4";
   }
   attribute SerialReservationSourceDb Text {
      fetch = "serial_reservation_source_db";
      label = "Serial Reservation Source";
      maxlength = 35;
      editable = [ETag = null];
   }
   attribute SourceQty Number {
      fetch = "source_qty";
      label = "Source Qty";
   }
   attribute Contract Text;
   attribute StructEffectivityDb Text;
   attribute ReservedCheck Boolean;
   attribute FromSequence Boolean;
   attribute ReservationCount Number;
   attribute DueAtDock Number {
      fetch = "due_at_dock";
      label = "Due At Dock";
      editable = [false];
   }

   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
}

