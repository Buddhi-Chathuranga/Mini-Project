--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-05-27  RasDlk  SCSPRING20-689, Added the attribute SenderType to pass it to GetDetailsTab and GetAggregatedTab functions.
--  2019-08-27  SWiclk  SCUXXW4-23662, Moved MovePartsIntoShipmentInventoryDialog to ReportPickingOfPickListLineBase.
--  2019-06-14  ErRalk  SCUXXW4-20755, Added attribute PickListType
--  2019-04-18  ErRalk  SCUXXW4-9295, Added CustomerOrderPickList
--  2019-02-19  hadolk  Adding ShopOrderPickList
--  2018-12-13  KoDelk  SCUXXW4-6560, Converted frmWarehouseTaskManager using MTG Version: 1.34
---------------------------------------------------------------------------------
projection WarehouseTaskHandling;
component INVENT;
layer Core;
description "Manage WarehouseTask";
category Users;
include fragment WarehouseWorkerLovSelector;
include fragment TransportTask;
@DynamicComponentDependency SHPORD
include fragment ReportPickingOfShopOrderPickList;
@DynamicComponentDependency SHPMNT
include fragment ReportPickingOfPickListLineBase;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseTaskSet for WarehouseTask;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseTask {
   crud = Read;
   supportwarnings = [true];
   use attributes = Contract, WorkerId, LocationGroup, Priority, RequestedDateFinished, ActualDateStarted, Info, SourceRef1, ParkReasonId, WorkerGroup;
   attribute TaskId Number {
      label = "Task ID";
      required = [true];
   }
   attribute TaskType Enumeration(WarehouseTaskType) {
      fetch = "task_type_db";
   }

   attribute Contract Text {
      editable = [ETag = null];
   }
   attribute WorkerId Text {
      label = "Worker ID";
      editable = [ETag = null];
   }
   attribute Priority Number {
      maxlength = 0;
      editable = [ETag = null];
   }
   attribute RequestedDateFinished Timestamp {
      label = "Requested Finish Date";
      editable = [ETag = null];
   }
   attribute TotalPlannedTimeNeeded Number {
      fetch = "Warehouse_Task_API.Get_Total_Planned_Time_Needed(task_id)";
      label = "Total Planned Time Needed";
      required = [true];
      editable = [ETag = null];
   }
   attribute LatestStartDate Timestamp {
      fetch = "Warehouse_Task_API.Get_Latest_Date_Started(task_id)";
      label = "Latest Start Date";
      editable = [false];
   }
   attribute ActualDateStarted Timestamp {
      label = "Actual Start Date";
      editable = [ETag = null];
   }
   attribute ExpectedFinishDate Timestamp {
      fetch = "Warehouse_Task_API.Get_Expected_Date_Finished(task_id)";
      label = "Expected Finish Date";
      editable = [false];
   }
   attribute Info Text {
      label = "Source Information";
      editable = [false];
   }
   attribute SourceRef1 Text {
      editable = [false];
   }
   // Created this attribute and method to handle data type conversion issues in Aurena client
   attribute SourceRef1TransportTaskId Number {
      fetch = "Warehouse_Task_API.Get_Transport_Task_Id(source_ref1, task_type_db)";
      editable = [false];
   }

   attribute TaskTypeDb Text {
      fetch = "task_type_db";
      maxlength = 50;
      required = [true];
   }
   attribute ParkReasonId Text {
      editable = [false];
   }
   attribute WorkerGroup Text {
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency SHPMNT
   attribute PickListType Text {
      fetch = "PICK_SHIPMENT_API.Get_Pick_List_Type(Source_Ref1)";
   }
   attribute PickByChoiceOption Text {
      fetch = "Site_Invent_Info_API.Get_Pick_By_Choice_Option_Db(Contract)";
   }
   @DynamicComponentDependency SHPMNT
   attribute OrderUsesShipmentInventory Number {
      fetch = "Handle_Ship_Invent_Utility_API.Uses_Shipment_Inventory(Source_Ref1)";
   }
   @DynamicComponentDependency DISCOM
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "'SITE'";
   }
   reference WarehouseTaskParkReasonRef(ParkReasonId) to WarehouseTaskParkReason(ParkReasonId) {
      label = "Park Reason";
   }
   reference WorkerIdRef(Contract, TaskType, LocationGroup, WorkerId) to WarehouseWorkerLov(Contract, TaskType, LocationGroup, WorkerId) {
      label = "Worker ID";
   }
   reference LocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
   reference WorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroup(Contract, WorkerGroup) {
      label = "Worker Group";
   }
   reference SiteRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference TransportTaskRef(SourceRef1) to TransportTask(TransportTaskId);


   @DynamicComponentDependency SHPORD
   array ShopOrderPickListArray(SourceRef1) to ShopMaterialPickList(PickListNo);
   array TransportTaskArray(SourceRef1) to TransportTask(TransportTaskId);

   @DynamicComponentDependency SHPMNT
   array CustomerOrderPickListArray(SourceRef1) to ShipmentPickList(PickListNo);


}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

