----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-05-10  JaThlk  Bug 159167(SCZ-14716), Removed the emphasis for StatusCode, Reserved in MaterialRequisitionSelector.
-- 2021-02-11  WaSalk  SCZ-13536, Modified by Enabling Duplcate in MaterialRequisitionList.
-- 2020-09-21  JaThlk  SC2020R1-9886, Added the contact widget in the field, CreatedByUserId instead of personwidget.
-- 2019-12-26  ChFolk  SCXTEND-994, Added CreatedByUserId.
-- 2019-08-01  JaThlk  SCUXXW4-23441, Set the badge style to text only.
-- 2019-05-29  fandse  SCUXXW4-21120: Amount now in ifscurrency format.
-- 2019-04-24  fandse  SCUXXW4-20122, Added badge to status in selector.
-- 2019-04-05  fandse  SCUXXW4-18889, Group is renamed to "Lines"
-- 2019-04-05  fandse  SCUXXW4-15367, Changed the notes in the header to have a icon instead.
-- 2019-03-29  fandse  SCUXXW4-17889, Corrected after save command, removed "Record." to pass OrderNo to the title of Pre Posting assistant
-- 2019-03-19  fandse  SCUXXW4-17889, Pre Posting dialog doesn't appear when saving the header when there are mandatory code parts.
-- 2019-03-19  fandse  SCUXXW4-15907, State indicator and badge material requisition.
-- 2019-01-11  milise  SCUXXW4-14263, Added labels for code parts.
-- 2019-01-08  fandse  SCUXXW4-14262, Added handling of Pre Posting
-- 2018-12-21  Sudelk  SCUXXW4-6335, Excluded OrderNoRef,ContractRef,InternalCustomerNoRef and InternalDestinationIdRef  by overriding MaterialRequisitionLinesList.
-- 2018-12-17  milise  SCUXXW4-6850, Added fragment MaterialRequisitionLinesList.
-- 2018-11-29  fandse  SCUXXW4-6335, Changes after code review and demo.
-- 2018-11-24  fandse  SCUXXW4-6335, Added dynamic labels for code part, changes from code review.
-- 2018-11-22  ChFolk  SCUXXW4-5576, Coverted dlgManualDelivery using MTG 1.33. Added ManualIssueAssistant, GetIdentifySerialsCommand and ManualIssueGroup
-- 2018-11-22          and IssueLocationList. Completed IssueManuallyCommand
-- 2018-11-21  fandse  SCUXXW4-6335, Fixed enabling condition for ReserveManuallyCommand, should be possible to Unreserve.
-- 2018-11-20  fandse  SCUXXW4-6335, Fixed navigation to Unissue.
-- 2018-11-16  ChFolk  SCUXXW4-5571, Added ManualReservationAssistant, ManualReservationGroup and LocationList to complete ReserveManuallyCommand.
-- 2018-11-16          It is the convertion of dlgManualAssignment using  MTG Version: 1.32.
-- 2018-11-15  fandse  SCUXXW4-6335, Added Total value in header, made it possible to insert header and line, concatenation, dynamic dependencies etc.
-- 2018-11-13  fandse  SCUXXW4-6335, Further refinement, more commands added, fixing validations, dynamic code etc.
-- 2018-11-08  fandse  SCUXXW4-6335, Initial version of frmMaterialRequisition converted to Aurena with MTG Version: 1.31.
----------------------------------------------------------------------------------------------------------

client MaterialRequisition;
component INVENT;
layer Core;
projection MaterialRequisitionHandling;
include fragment MaterialRequisitionLinesList;
include fragment InventoryPartLovMrpSelector;
include fragment MaterialRequisitionStateIndicator;

warningsenabled = MaterialRequisition;
warningsenabled = CreateSerialSequence;
warningsenabled = IssueMaterial;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry MaterialRequisitionNavEntry parent InventNavigator.WarehouseManagementRequisition at index 100 {
      label = "Material Requisition";
      page Form home MaterialRequisition;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using MaterialRequisitionSet {
   label = "Material Requisition";
   startupmode = search;
   stateindicator MaterialRequisitionStateIndicator;
   crudactions {
      after command AfterSaveMaterialRequisitionCommand;
   }
   selector MaterialRequisitionSelector;
   group MaterialRequisitionGroup;
   list MaterialRequisitionList(MaterialRequisitionLinesArray) {
      label = "Lines";
   }

   commandgroup StatusCmdGroup {
      label = "Status";
      command PlanCommand;
      command ReleaseCommand;
      command StopCommand;
   }
   command PrePostingHeaderCommand;
   command PickListForMaterialRequistionCommand;
   command DocumentTextHeaderCommand;
}

--------------------------------- COMMANDS ----------------------------------
command PlanCommand for MaterialRequisition {
   label = "Plan";
   enabled = [StatusCode != "Planned" and StatusChangeAllowed];
   execute {
      confirm("This will PLAN the material requisition.") {
         when CANCEL {
            exit;
         }
      }
      call ChangeStatusHeader(OrderClass, OrderNo, "Planned");
   }
}
command ReleaseCommand for MaterialRequisition {
   label = "Release";
   enabled = [StatusCode != "Released" and StatusChangeAllowed];
   execute {
      confirm("This will RELEASE the material requisition.") {
         when CANCEL {
            exit;
         }
      }
      call ChangeStatusHeader(OrderClass, OrderNo, "Released");
   }
}
command StopCommand for MaterialRequisition {
   label = "Stop";
   enabled = [StatusCode != "Stopped" and StatusChangeAllowed];
   execute {
      confirm("This will STOP the material requisition.") {
         when CANCEL {
            exit;
         }
      }
      call ChangeStatusHeader(OrderClass, OrderNo, "Stopped");
   }
}
command PrePostingHeaderCommand for MaterialRequisition {
   label = "Pre Posting";
   enabled = [PreAccountingId != null];
   variable SourceIdentifierVar {
      type = Text;
   }
   execute {
      set SourceIdentifierVar = "for Material Requisition ${OrderNo}" {
         translatable = true;
      }
      assistant PrePostingWithSourceAssistant("M109", PreAccountingId, Contract, false, SourceIdentifierVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
command AfterSaveMaterialRequisitionCommand for MaterialRequisition {
   variable MandatoryPrePostingCompleteVar {
      type = Boolean;
   }
   variable SourceIdentifierVar {
      type = Text;
   }
   execute {
      if [PreAccountingId != null and CrudOperation != "Delete"] {
         call MandatoryPrePostingComplete(PreAccountingId, "M109", Contract) into MandatoryPrePostingCompleteVar;
         if [not MandatoryPrePostingCompleteVar] {
            set SourceIdentifierVar = "for Material Requisition ${OrderNo}" {
               translatable = true;
            }
            assistant PrePostingWithSourceAssistant("M109", PreAccountingId, Contract, false, SourceIdentifierVar) {
               when NO {
                  exit CANCEL;
               }
            }
         }
      }
   }
}
command PickListForMaterialRequistionCommand for MaterialRequisition {
   label = "Print Pick List for Material Requisition";
   enabled = [PrintPickListAllowed];
   variable ReportResultKeyList {
      type = Text;
   }
   execute {
      call GetPickListForMaterialRequistionResultKey(OrderNo) into ReportResultKeyList;
      if [ReportResultKeyList != null] {
         printdialog ReportResultKeyList;
      }
   }
}
command DocumentTextHeaderCommand for MaterialRequisition {
   label = "Document Text";
   enabled = [true];
   execute {
      set Label = " for MaterialRequisition - ${OrderNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, Label, false) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

----------------------------------- LISTS -----------------------------------
list MaterialRequisitionList clone MaterialRequisitionLinesList {
   field PreAccountingRef.AccountNo {
      label = "${parent.LabelCodenoA}";
   }
   field PreAccountingRef.CodenoB {
      label = "${parent.LabelCodenoB}";
   }
   field PreAccountingRef.CodenoC {
      label = "${parent.LabelCodenoC}";
   }
   field PreAccountingRef.CodenoD {
      label = "${parent.LabelCodenoD}";
   }
   field PreAccountingRef.CodenoE {
      label = "${parent.LabelCodenoE}";
   }
   field PreAccountingRef.CodenoF {
      label = "${parent.LabelCodenoF}";
   }
   field PreAccountingRef.CodenoG {
      label = "${parent.LabelCodenoG}";
   }
   field PreAccountingRef.CodenoH {
      label = "${parent.LabelCodenoH}";
   }
   field PreAccountingRef.CodenoI {
      label = "${parent.LabelCodenoI}";
   }
   field PreAccountingRef.CodenoJ {
      label = "${parent.LabelCodenoJ}";
   }
   exclude OrderNoRef;
   exclude ContractRef;
   exclude InternalCustomerNoRef;
   exclude InternalDestinationIdRef;
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector MaterialRequisitionSelector for MaterialRequisition {
   label = "${OrderNo} - ${Contract} - ${StatusCode} - ${IntCustomerNo}";
   static OrderNo;
   static Contract;
   badge StatusCode {
      style = TextOnly;
      emphasis StateBlocked = [StatusCode = "Stopped"];
      emphasis Progress1 = [StatusCode = "Planned"];
      emphasis Progress4 = [StatusCode = "Released"];
      emphasis Progress9 = [StatusCode = "PartiallyDelivered"];
      emphasis Progress12 = [StatusCode = "Closed"];
   }
   static IntCustomerNo;
   static OrderClass {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group MaterialRequisitionGroup for MaterialRequisition {
   label = "";
   field OrderClass {
      searchable = false;
      visible = [false];
   }
   field OrderNo {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
      validate command {
         execute {
            call GetSiteDate(Contract) into DueDate;
         }
      }
   }
   lov InternalCustomerRef with ReferenceInternalCustomerSelector {
      description = InternalCustomerRef.Name;
      label = "Internal Customer";
   }
   field DueDate {
      size = Small;
   }
   field DateEntered {
      size = Small;
   }
   field CreatedByUserId {
      size = Small;
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field TotalValue {
      size = Small;
      format = ifscurrency;
   }
   lov DestinationIdRef with ReferenceInternalDestinationLovSelector {
      description = DestinationIdRef.Description;
      label = "Internal Destination";
   }
   field DocumentText {
      size = Small;
   }
   field NoteText {
      label = "Notes";
      multiline = true;
      size = Medium;
   }
}
