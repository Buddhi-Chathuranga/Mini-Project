-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2019-06-06  JaThlk  SCUXXW4-22019, Fixed the FromSerialNo field format issue.
-- 2018-11-02  JaThlk  SCUXXW4-5801, Implemented dlgSequencePreview.
-- 2018-10-31  JaThlk  SCUXXW4-5801, Converted from dlgSequenceGenerator using MTG Version: 1.31.
-------------------------------------------------------------------------------------------------------
fragment SequenceGeneratorAssistant;
component INVENT;
layer Core;
description "Use this assistant to generate a sequence of serial numbers for inventory parts.
             If the numbering is set to Automatic, alphanumeric serial numbers cannot be used.";

----------------------------- CLIENT FRAGMENTS ------------------------------


----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant SequenceGeneratorAssistant using SequenceGeneratorSet {
   label = "Enter Sequence/Interval";
   input(Quantity);
   output(SerialList);
   steps {
      step {
         group SerialCreationGroup;
         list  SequencesList(SequenceArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [component.SequencesList.RowCount > 0];
      execute {
         call CreateSerialSequence(Objkey, Prefix, Suffix, Length) into SerialList;
         exit OK;
      }
   }
   restart command {
      visible = [false];
   }
}

assistant SequencePreviewAssistant using SequencePreviewSet {
   label = "Preview - Serial Sequence";
   input(SerialObjkey, Prefix, Suffix, Length);
   steps {
      step {
         group SequencePreviewGroup;
         list SequencePreviewList(SequencePreviewArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      execute {
         exit OK;
      }
   }
   cancel command {
      execute {
         exit OK;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------
command PreviewCommand for SequencesVirtual {
   label = "Preview";
   mode = Global;
   enabled = [component.SequencesList.RowCount > 0];
   execute {
      assistant SequencePreviewAssistant(Objkey, Prefix, Suffix, Length) {
         when OK {
            exit;
         }
      }
   }
}

---------------------------------- GROUPS -----------------------------------
group SerialCreationGroup for SequenceGeneratorVirtual {
   label = "";

   field Prefix {
      size = Small;
      editable = [true];
   }
   field Suffix {
      size = Small;
      editable = [true];
   }
   field Length {
      size = Small;
      editable = [true];
      validate command {
         variable ValidIntegerVar {
            type = Boolean;
         }
         execute {
            call IsValidInteger(Length) into ValidIntegerVar;
            if [not(ValidIntegerVar) or Length < 0] {
               error("The leading zero length should be an integer greater than zero.");
            }
         }
      }
   }
}

group SequencePreviewGroup for SequencePreviewVirtual {
   label = "Preview - Serial Sequence";
   computedfield Sum {
      value = "#{SequencePreviewArray.sum(LineNo)}";
      type = Number;
   }
}

----------------------------------- LISTS -----------------------------------
list SequencesList for SequencesVirtual {
   label = "";
   field FromSerialNo;
   field ToSerialNo;
   command PreviewCommand;
}

list SequencePreviewList for SequencePreviewListVirtual {
   label = "";
   field SerialNo;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SequenceGeneratorSet for SequenceGeneratorVirtual;
entityset SequencePreviewSet for SequencePreviewVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

//! TODO: Should be refactored as a function!
action CreateSerialSequence LongText {
   initialcheck none;
   parameter ParentObjkey Text;
   parameter Prefix Text;
   parameter Suffix Text;
   parameter Length Number;
   supportwarnings = [true];
}

--------------------------------- FUNCTIONS ---------------------------------
function IsValidInteger Boolean {
   parameter NumberValue Number;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual SequenceGeneratorVirtual {
   attribute Prefix Text {
      maxlength = 50;
      format = uppercase;
   }
   attribute Suffix Text {
      maxlength = 50;
      format = uppercase;
   }
   attribute Length Number;
   attribute SerialList LongText;
   attribute Quantity Number;

   array SequenceArray(Quantity) to SequencesVirtual(Quantity);
}

virtual SequencesVirtual {
   attribute FromSerialNo Number;
   attribute ToSerialNo Number;
   attribute SerialList Text;
   attribute Quantity Number;
}

virtual SequencePreviewVirtual {
   attribute SerialObjkey Text;
   attribute Prefix Text;
   attribute Suffix Text;
   attribute Length Number;
   attribute Sum Number {
      label = "Sum";
   }

   array SequencePreviewArray() to SequencePreviewListVirtual();
}

virtual SequencePreviewListVirtual {
   crud = Read;
   attribute SerialNo Text {
      label = "Serial No";
   }
   attribute LineNo Number;
}

