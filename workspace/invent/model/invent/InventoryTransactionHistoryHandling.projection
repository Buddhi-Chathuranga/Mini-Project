---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2021-08-18  WaSalk  SC21R2-2322, Added DateApplied to MpccomAccounting.
-- 2020-01-02  NISMLK  MFSPRING20-711, Added OwnershipTransferReasonId to InventoryTransactionHist.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-10-13  milise  SCUXXW4-6094, Converted from frmGenInvtran using MTG Version: 1.31
---------------------------------------------------------------------------------

projection InventoryTransactionHistoryHandling;
component INVENT;
layer Core;
description "View InventoryTransactionHist";
category Users;
include fragment InventoryLocation19Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment InventoryTransactionCodeLovSelector;
include fragment HandlingUnitLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryTransactionHistSet for InventoryTransactionHist;
entityset MpccomAccountingSet for MpccomAccounting;
entityset InventoryTransactionCostSet for InventoryTransactionCost;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryTransactionHist {
   crud = Read;
   from = "inventory_transaction_hist2";
   supportwarnings = [true];
   attribute TransactionId Number {
      maxlength = 32767;
      editable = [false];
   }
   attribute TransactionCode Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT,PART_NO)";
   }
   attribute InventoryUoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT,PART_NO)";
   }
   attribute Contract Text {
      editable = [false];
   }


   attribute Direction Text {
      editable = [false];
      format = uppercase;
   }
   attribute Quantity Number {
      editable = [false];
   }
   attribute CatchDirection Text {
      maxlength = 3;
      editable = [ETag = null];
   }
   attribute CatchQuantity Number {
      label = "Catch Qty";
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute LocationType Text {
      fetch = "Inventory_Location_API.Get_Location_Type(contract,location_no)";
      label = "Location Type";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationGroup Text {
      fetch = "NVL(location_group,Inventory_Location_API.Get_Location_Group(contract,location_no))";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationGroupDescription Text {
      fetch = "Inventory_Location_Group_API.Get_Description(location_group)";
      label = "Location Group Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute MiscCost Number {
      fetch = "(Inventory_Transaction_Cost_API.Get_Sum_Unit_Cost(transaction_id, 'TRUE', 'TRUE') *quantity-((cost)*quantity))";
      label = "Miscellaneous Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute Warehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract,location_no)";
      label = "Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay";
      maxlength = 2000;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row";
      maxlength = 2000;
      editable = [false];
   }
   attribute Tier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin";
      maxlength = 2000;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute SourceRef1 Text {
      label = "Order Ref 1";
   }
   attribute SourceRef2 Text {
      label = "Order Ref 2";
   }
   attribute SourceRef3 Text {
      label = "Order Ref 3";
   }
   attribute SourceRef4 Text {
      label = "Order Ref 4";
   }
   attribute SourceRef5 Text {
      label = "Order Ref 5";
   }
   attribute WaivDevRejNo Text {
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      editable = [false];
   }
   attribute ExpirationDate Date {
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
      format = uppercase;
   }
   attribute SourceRefType Enumeration(OrderType) {
      label = "Order Type";
      editable = [false];
   }
   attribute Cost Number {
      format = ifscurrency;
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
   }
   attribute InventoryCost Number {
      fetch = "(cost) *(quantity)";
      label = "Inventory Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalCost Number {
      fetch = "Inventory_Transaction_Cost_API.Get_Sum_Unit_Cost(transaction_id, 'TRUE', 'TRUE') *quantity";
      label = "Total Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute DateCreated Date {
      label = "Created";
   }
   attribute DateTimeCreated Time {
      label = "Creation Time";
      editable = [false];
   }
   attribute Source Text {
      label = "Note";
      editable = [false];
   }
   attribute Userid Text {
      label = "Performed by";
      editable = [false];
   }
   attribute DateApplied Date {
      label = "Applied Date";
      editable = [false];
   }
   attribute AccountingId Number {
      editable = [false];
   }
   attribute PartstatFlag Text {
      label = "Incl Part Aggr per Period";
      editable = [false];
   }
   attribute ValuestatFlag Text {
      label = "Incl Value Aggr per Period";
      editable = [false];
   }
   attribute ReturnScrapDesc Text {
      fetch = "Scrapping_Cause_API.Get_Reject_Message(reject_code)";
      label = "Return/Scrap Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute RejectCode Text {
      label = "Return/Scrap";
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute PreviousPartOwnership Enumeration(PartOwnership) {
      label = "Previous Ownership";
      editable = [false];
   }
   attribute PreviousOwner Text {
      fetch = "DECODE(previous_owning_customer_no,null,previous_owning_vendor_no,previous_owning_customer_no)";
      label = "Previous Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute PreviousOwnerName Text {
      fetch = "DECODE(previous_owning_customer_no,null,Supplier_API.Get_Vendor_Name(previous_owning_vendor_no), Cust_Ord_Customer_API.Get_Name(previous_owning_customer_no))";
      label = "Previous Owner Name";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   attribute TopParentHandlingUnitID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute HasErroneousPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Error_Posting_Exists_String(accounting_id)";
      label = "Has Erroneous Postings";
      editable = [false];
   }
   attribute HasTransferredPostings Boolean("TRUE", "FALSE") {
      fetch = "Mpccom_Accounting_API.Transferred_Posting_Exists_Str(accounting_id)";
      label = "Has Transferred Postings";
      editable = [false];
   }
   attribute ReportEarnedValue Boolean("TRUE", "FALSE") {
      fetch = "DECODE(report_earned_value_db, null, 'FALSE', 'FALSE', null ,'TRUE')";
   }
   attribute TransactionReportId Text {
      editable = [false];
   }
   attribute ModifyDateAppliedDate Timestamp {
      label = "Modified Date/Time";
      editable = [false];
   }
   attribute ModifyDateAppliedUser Text {
      label = "Modified by User";
      editable = [false];
      format = uppercase;
   }
   attribute PreAccountingId Number {
      label = "Pre-Posting ID";
      editable = [false];
   }
   attribute LabelCodenoA Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'A')";
      label = "Label Code Part A";
   }
   attribute LabelCodenoB Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'B')";
      label = "Label Code Part B";
   }
   attribute LabelCodenoC Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'C')";
      label = "Label Code Part C";
   }
   attribute LabelCodenoD Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'D')";
      label = "Label Code Part D";
   }
   attribute LabelCodenoE Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'E')";
      label = "Label Code Part E";
   }
   attribute LabelCodenoF Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'F')";
      label = "Label Code Part F";
   }
   attribute LabelCodenoG Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'G')";
      label = "Label Code Part G";
   }
   attribute LabelCodenoH Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'H')";
      label = "Label Code Part H";
   }
   attribute LabelCodenoI Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'I')";
      label = "Label Code Part I";
   }
   attribute LabelCodenoJ Text {
      fetch = "Accounting_Code_Parts_API.Get_Name(Site_API.Get_Company(contract),'J')";
      label = "Label Code Part J";
   }
  
   reference MpccomSystemEventRef(TransactionCode) to MpccomSystemEvent(SystemEventId);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference InventoryUoMRef(InventoryUoM) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference TransactionCodeRef(TransactionCode) to InventoryTransactionCodeLov(TransactionCode) {
      label = "Transaction Code";
   }
   reference SiteRef(Contract) to Site(Contract);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference OwnershipTransferReasonRef(OwnershipTransferReasonId) to OwnershipTransferReason(TransferReasonId) {
      label = "Transfer Reason";
   }

   array InventoryTransactionCostArray(TransactionId) to InventoryTransactionCost(TransactionId);
   array GenAccountingArray(AccountingId) to MpccomAccounting(AccountingId);
}
@Override
entity InventoryTransactionCost {
   crud = Read;
   from = "inventory_transaction_cost";
   exec = "INVENTORY_TRANSACTION_COST_API";

   attribute CostBucketId Text {
      fetch = "cost_bucket_id";
      label = "Cost Bucket ID";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute BucketPostingGroupId Text {
      fetch = "bucket_posting_group_id";
      label = "Posting Cost Group ID";
      maxlength = 20;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency COST
   attribute CostBucketCostType Enumeration(CostBucketPublicType) {
      fetch = "Cost_Bucket_Public_Type_API.Decode(cost_bucket_public_type)";
      label = "Cost Bucket Cost Type";
      editable = [false];
   }
   attribute CostSourceId Text {
      fetch = "cost_source_id";
      label = "Cost Source ID";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AccountingYear Text {
      fetch = "accounting_year";
      label = "OH Accounting Year";
      maxlength = 4;
      required = [true];
      editable = [ETag = null];
   }
   attribute UnitCost Number {
      fetch = "unit_cost";
      label = "Cost / Unit";
      required = [true];
      editable = [ETag = null];
      format = ifscurrency;
   }
   attribute TransactionId Number {
      fetch = "transaction_id";
      label = "Transaction ID";
      required = [true];
      editable = [ETag = null];
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   @DynamicComponentDependency COST
   reference CostBucketRef(Contract, CostBucketId) to CostBucket(Contract, CostBucketId);
   @DynamicComponentDependency COST
   reference CostBucketPostingGroupRef(Company, BucketPostingGroupId) to CostBucketPostingGroup(Company, PostingGroupId);
   reference CostSourceRef(Company, CostSourceId) to CostSource(Company, CostSourceId) {
      label = "Cost Source ID";
   }
}
@Override
entity MpccomAccounting {
   crud = Read;
   from = "mpccom_accounting";

   attribute AccountingId Number {
      fetch = "accounting_id";
      label = "Accounting ID";
      maxlength = 20;
      editable = [false];
   }
   attribute Seq Number {
      fetch = "seq";
      label = "Seq";
      maxlength = 20;
      editable = [false];
   }
   attribute StrCode Text {
      fetch = "str_code";
      label = "Posting Type";
      maxlength = 100;
      editable = [false];
   }
   attribute AccountNo Text {
      fetch = "account_no";
      label = "Account";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute DebitAmount Number {
      fetch = "debit_amount";
      label = "Debit Amount";
      editable = [false];
      format = ifscurrency;
   }
   attribute CreditAmount Number {
      fetch = "credit_amount";
      label = "Credit Amount";
      editable = [false];
      format = ifscurrency;
   }
   attribute DebitCurrAmount Number {
      fetch = "debit_curr_amount";
      label = "Debit Curr Amount";
      editable = [false];
      format = ifscurrency;
   }
   attribute CreditCurrAmount Number {
      fetch = "credit_curr_amount";
      label = "Credit Curr Amount";
      editable = [false];
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      label = "Currency Code";
      maxlength = 3;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CurrencyRate Number {
      fetch = "currency_rate";
      label = "Currency Rate";
      required = [true];
      editable = [ETag = null];
   }
   attribute ConversionFactor Number {
      fetch = "conversion_factor";
      label = "Conversion Factor";
      editable = [ETag = null];
   }
   attribute EventCode Text {
      fetch = "event_code";
      label = "Posting Event";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SystemEventDescription Text {
      fetch = "Accounting_Event_API.Get_Description(event_code)";
      label = "System Event Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CodenoB Text {
      fetch = "codeno_b";
      label = "Cost Ctr";
      maxlength = 10;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CodenoF Text {
      fetch = "codeno_f";
      label = "Project";
      maxlength = 10;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CodenoE Text {
      fetch = "codeno_e";
      label = "Asset11";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute StatusCode Text {
      fetch = "status_code";
      label = "Status Code";
      maxlength = 3;
      editable = [false];
      format = uppercase;
   }
   attribute StatusDescription Text {
      fetch = "Mpccom_Accounting_Status_API.Decode(status_code)";
      label = "Status Description";
      maxlength = 50;
      editable = [false];
   }
   attribute ErrorDesc Text {
      fetch = "error_desc";
      label = "Error Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CodenoC Text {
      fetch = "codeno_c";
      label = "Sales";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute CodenoD Text {
      fetch = "codeno_d";
      label = "Product";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute CodenoG Text {
      fetch = "codeno_g";
      label = "Bus Unit";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute CodenoH Text {
      fetch = "codeno_h";
      label = "Consolid";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute CodenoI Text {
      fetch = "codeno_i";
      label = "Curr Bal";
      maxlength = 10;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CodenoJ Text {
      fetch = "codeno_j";
      label = "Free Use";
      maxlength = 10;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Seq";
      editable = [ETag = null];
   }
   attribute VoucherNo Number {
      fetch = "voucher_no";
      label = "Voucher No";
      maxlength = 10;
      editable = [ETag = null];
   }
   attribute VoucherType Text {
      fetch = "voucher_type";
      label = "Voucher Type";
      maxlength = 3;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AccountingYear Number {
      fetch = "accounting_year";
      label = "Accounting Year";
      editable = [ETag = null];
   }
   attribute AccountingPeriod Number {
      fetch = "accounting_period";
      label = "Accounting Period";
      editable = [ETag = null];
   }
   attribute BucketPostingGroupId Text {
      fetch = "bucket_posting_group_id";
      label = "Posting Cost Group ID";
      maxlength = 20;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CostSourceId Text {
      fetch = "cost_source_id";
      label = "Cost Source ID";
      maxlength = 20;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute TransRevalEventId Number {
      fetch = "trans_reval_event_id";
      label = "Revaluation Event ID";
      editable = [ETag = null];
   }
   attribute DateApplied Date {
      label = "Applied Date";
   }
   reference PostingCtrlPostingTypeRef(StrCode) to PostingCtrlPostingType(PostingType);
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

