----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-05-29  fandse  SCUXXW4-14435, SystemShortageFlag is loaded only once via initcontext
-- 2019-05-29  fandse  SCUXXW4-14438, ShortageExist corrected to fetch correct value
-- 2018-11-26  fandse  SCUXXW4-6340, Changed in the array connection to use OrderClassDb instead.
-- 2018-11-23  fandse  SCUXXW4-6340, Adjustments after code review.
-- 2018-11-20  fandse  SCUXXW4-6340, Initial version of frmMaterialRequisitionUnissue converted to Aurena with MTG Version: 1.32.
----------------------------------------------------------------------------------------------------------

projection UnissueInventoryPartFromMaterialRequisition;
component INVENT;
layer Core;
description "This API is used to view inventory parts issued for material requisition and do unisse of those.";
category Users;
include fragment InventoryPartLovMrpSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset MaterialRequisLineSet for MaterialRequisLine;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity MaterialRequisLine {
   crud = Read;
   keys = OrderNo, LineNo, ReleaseNo, OrderClass {
      where = "ORDER_NO = :OrderNo and LINE_NO = :LineNo and RELEASE_NO = :ReleaseNo and ORDER_CLASS_DB = :OrderClass";
   }
   supportwarnings = [true];
   use attributes = Contract, StatusCode, PartNo, ProjectId, ActivitySeq;
   attribute OrderNo Text {
      maxlength = 100;
      editable = [false];
   }
   attribute LineNo Text {
      required = [true];
      editable = [ETag = null];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute StatusCode Enumeration(MaterialRequisStatus) {
      label = "Status";
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
   }
   attribute ShortageExist Boolean("TRUE", "FALSE") {
      fetch = "Decode(Shortage_Demand_API.Shortage_Exists(contract, part_no), '0', 'FALSE', 'TRUE')";
      editable = [false];
   }
   attribute PartShortageFlag Boolean("TRUE", "FALSE") {
      fetch = "Decode(Inventory_Part_API.Get_Shortage_Flag_Db(CONTRACT, PART_NO), 'Y', 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, part_no)";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute OrderClassDb Text {
      fetch = "order_class_db";
      maxlength = 20;
      editable = [false];
   }
   attribute UnitMeas Text {
      label = "UoM";
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLovMrp(Contract, PartNo) {
      label = "Part No";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   array MaterialRequisitionUnissueArray(OrderClassDb, OrderNo, LineNo, ReleaseNo) to InventoryTransactionHist(Source, SourceRef1, SourceRef2, SourceRef3);
}
@Override
entity InventoryTransactionHist {
   crud = Read, Update;
   keys = TransactionId, Source, SourceRef1, SourceRef2, SourceRef3, SourceRef4 {
      where = "TRANSACTION_ID = :TransactionId and SOURCE = :Source and SOURCE_REF1 = :SourceRef1 and SOURCE_REF2 = :SourceRef2 and SOURCE_REF3 = :SourceRef3 and SOURCE_REF4 = :SourceRef4";
   }
   use attributes = PartNo, Cost, Quantity, AccountingId, Contract, QtyReversed, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, ConditionCode, WaivDevRejNo, EngChgLevel, DateCreated, ProjectId, ActivitySeq;
   attribute UnissuedQty Number {
      fetch = "NULL";
      label = "Unissued Qty";
   }
   attribute IssuedQty Number {
      fetch = "NVL(quantity,0) - NVL(qty_reversed,0)";
      label = "Issued Qty";
      editable = [false];
   }
   attribute UnissuedCatchQty Number {
      fetch = "NULL";
      label = "Unissued Catch Qty";
   }
   attribute IssuedCatchQty Number {
      fetch = "catch_quantity - Inventory_Transaction_Hist_API.Get_Sum_Reversed_Catch_Qty(transaction_id)";
      label = "Issued Catch Qty";
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute Cost Number {
      maxlength = 12;
   }
   attribute Quantity Number {
      editable = [false];
   }
   attribute AccountingId Number {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute QtyReversed Number {
      label = "Reversed Qty";
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute HandlingUnitId Number {
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract,location_no)";
      label = "Warehouse ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Tier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Bin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [ETag = null];
   }
   attribute SerialNo Text {
      editable = [ETag = null];
   }
   attribute ConditionCode Text {
      editable = [false];
      format = uppercase;
   }
   attribute WaivDevRejNo Text {
      editable = [ETag = null];
   }
   attribute AvailabilityControlId Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Availability_Control_Id(contract,part_no,'*',location_no,lot_batch_no,serial_no,eng_chg_level,waiv_dev_rej_no,activity_seq,handling_unit_id)";
      label = "Availability Control ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      editable = [ETag = null];
   }
   attribute DateCreated Date {
      label = "Created";
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRef1 Text {
      maxlength = 12;
      editable = [ETag = null];
   }
   attribute SourceRef2 Text {
      maxlength = 4;
      editable = [ETag = null];
   }
   attribute SourceRef3 Text {
      maxlength = 4;
   }
   attribute SourceRef4 Number {
      maxlength = 3;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";

   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
}

--------------------------------- FUNCTIONS ---------------------------------

function GetSystemShortageFlag Text;
