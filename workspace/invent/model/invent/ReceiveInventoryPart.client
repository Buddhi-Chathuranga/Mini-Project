-----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------------
-- 2021-05-13  JaThlk  Bug 159295(SCZ-14753), Modified PartLocList to correct the editable condition of ExpirationDate.
-- 2021-02-19  WaSalk  SC2020R1-12581, Removed LocalizationControlCenterHandler fragment and InitLocalizationFunctionalitiesCommand
-- 2021-02-19          and added EnabledLccParams to support LCC concept.
-- 2020-12-03  UdGnlk  SCZ-12800, Modified ExpirationDate column property to make it editable when value exists for a new record.
-- 2020-03-10  WaSalk  GESPRING20-3756, Added DeliveryReasonId to copyoncruddefault and LocationNo validate command.
-- 2020-02-17  WaSalk  GeSPRING20-1794, Added LocalizationControlCenterHandler fragment, InitLocalizationFunctionalitiesCommand,
-- 2020-02-17          and lov DelivReasonIdRef to enable WarehouseJournal localization.
-- 2019-11-13  Hadolk  MFSPRING20-77, Added Drawing No, Drawing Revision No and Eng Rev fields, fetched from Part Revision
-- 2019-08-23  ChLeLK  SCUXXW4-24028, Blank selection has removed from the field "Ownership".
-- 2019-06-14  JaThlk  SCUXXW4-21648, Fixed the UI issues and enable condition of ResolveShortagesCommand.
-- 2019-04-13  SuDelk  SCUXXW4-19308, Changed lavels of UoM and Catch UoM correctly.
-- 2019-04-05  JaThlk  SCUXXW4-18825, Fixed the navigation issue in ResolveShortagesCommand.
-- 2019-04-05  JaThlk  SCUXXW4-18838, Fixed the issue of passing a null value to Pre-posting Assistant.
-- 2019-01-02  Yasmlk  SCUXXW4-6301, Implemented Command PrintServiceabilityTagCommand.
-- 2018-12-27  JaThlk  SCUXXW4-6301, Converted from frmInvReceipt using MTG Version: 1.34
-----------------------------------------------------------------------------------------------------------

client ReceiveInventoryPart;
component INVENT;
layer Core;
projection ReceiveInventoryPart;
include fragment InventoryPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation5Selector;
include fragment HandlingUnitNoShipmentLovSelector;
include fragment PrePostingWithoutSourceAssistant;
include fragment SerialNumberAssistant;
include fragment PrintServiceabilityDialog;
@DynamicComponentDependency COST
include fragment CostBucketInventLovSelector;
include fragment DefineCostStructureAssistant;
include fragment PrintBarcodeLabelsDialog;
include fragment PrintBarcodeLabelsSingleDialog;
@DynamicComponentDependency MFGSTD
include fragment CreateNewPartRevisionAssistant;

warningsenabled = InventoryPartConfig;
warningsenabled = ReceiveInventoryPartInUpdate;
warningsenabled = ReceiveInventoryPartInCreate;


-------------------------------- MAIN PAGES ---------------------------------


--------------------------------- COMMANDS ----------------------------------


----------------------------- VISUAL COMPONENTS -----------------------------


---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.34
// Enterprise Explorer Source: frmInvReceipt
// Language: en-US

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ReceiveInventoryPartNavEntry parent InventNavigator.WarehouseManagementPartHandling at index 100 {
      label = "Receive Inventory Part";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using InventoryPartConfigSet {
   label = "Receive Inventory Part";
   startupmode = search;
   selector InventoryPartConfigSelector;
   group InvReceiptGroup;
   list PartLocList(PartLocArray) {
      copyoncruddefault(ReceiptIssueSerialTrackDb, DeliveryReasonId) to(ReceiptIssueSerialTrackDb, DeliveryReasonId);
   }

   command ViewConfigurationCommand;
   @DynamicComponentDependency MFGSTD
   command CreateNewPartRevisionCommand;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ViewConfigurationCommand for InventoryPartConfig {
   label = "View Configuration";
   enabled = [ConfigurationId != "*"];
   variable Mode;
   execute {
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarMode:$[Mode],
                                                                                                   VarPartNo:$[PartNo],
                                                                                                   VarConfigurationId:$[ConfigurationId]}";
   }
}

@DynamicComponentDependency MFGSTD
command CreateNewPartRevisionCommand {
   label = "Create New Part Revision";
   mode = SingleRecord;
   variable VarEngChgLevel Text;
   variable VarAutoUpdate Boolean;
   execute {
      set VarAutoUpdate = null;
      assistant CreateNewPartRevisionAssistant(Contract, PartNo, VarAutoUpdate) into(VarEngChgLevel, VarAutoUpdate) {
         when OK {
            exit;
         }
      }
   }
}

command ResolveShortagesCommand for InventoryPartInStock {
   label = "Resolve Shortages";
   mode = SingleRecord;
   enabled = [parent.ShortageExist != 0];
   execute {
      if [PartOwnershipDb != null] {
         if [PartOwnershipDb = "CUSTOMER OWNED"] {
            if [ConditionCode != null] {
               navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode] and PartOwnership eq $[PartOwnershipDb] and OwningCustomerNo eq $[Owner]";
            }
            else {
               navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and PartOwnership eq $[PartOwnershipDb] and OwningCustomerNo eq $[Owner]";
            }
         }
         else {
            if [PartOwnershipDb = "SUPPLIER LOANED"] {
               if [ConditionCode != null] {
                  navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode] and PartOwnership eq $[PartOwnershipDb] and OwningVendorNo eq $[Owner]";
               }
               else {
                  navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and PartOwnership eq $[PartOwnershipDb] and OwningVendorNo eq $[Owner]";
               }
            }
            else {
               if [PartOwnershipDb != "SUPPLIER LOANED" or PartOwnershipDb != "CUSTOMER OWNED"] {
                  if [ConditionCode != null] {
                     navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode] and PartOwnership eq $[PartOwnershipDb]";
                  }
                  else {
                     navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and PartOwnership eq $[PartOwnershipDb]";
                  }
               }
            }

         }

      }
      else {
         if [ConditionCode != null] {
            navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConditionCode eq $[ConditionCode]";
         }
         else {
            navigate "page/ResolveShortagesForInventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
         }
      }
   }
}
command PrintBarcodeLabelsCommand for InventoryPartInStock {
   label = "Print Barcode Labels";
   mode = SelectedRecords;
   enabled = [component.InventoryPartInStockList.SelectionCount = 1 or SerialNo != "*"];
   bulkexecute {
      stringify(records, "CONTRACT=${Contract}^PART_NO=${PartNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CONFIGURATION_ID=${ConfigurationId}^ACTIVITY_SEQ=${ActivitySeq}^QTY=1^PACK_SIZE=1^", JSON) into SelectionVar;
      ifall [SerialNo != "*"] {
         assistant PrintBarcodeLabelsAssistant(SelectionVar) {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }
         }
      }
      else {
         assistant PrintBarCodeLabelsSingleAssistant(SelectionVar) {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }
         }
      }
   }
}
command PrintConditionTagCommand for InventoryPartInStock {
   label = "Print Condition Tag";
   mode = SelectedRecords;
   variable ResultKeyVar {
      type = Text;
   }
   enabled = [count(*, ConditionCode != null) > 0];
   bulkexecute {
      call GetReportResultKeyList(Selection) into ResultKeyVar;
      printdialog ResultKeyVar;
   }
}
command PrintServiceabilityTagCommand for InventoryPartInStock {
   label = "Print Serviceability Tag";
   mode = SelectedRecords;
   enabled = [OperationalCondition != "NOT_APPLICABLE"];

   variable ServiceabilityStatusVar {
      type = Text;
   }
   variable ResultKeyListVar {
      type = Text;
   }
   variable BNonSerialExist Boolean;

   bulkexecute {
      set BNonSerialExist = false;

      if [(SerialNo = "*") or(SerialNo = null)] {
         set BNonSerialExist = true;
      }
      if [BNonSerialExist = true] {
         dialog PrintServiceabilityDialog("TRUE") into(ServiceabilityStatusVar) {
            when CANCEL {
               exit;
            }
            when OK {
               call GetReportListDetailsForPrintServiceability(Selection, ServiceabilityStatusVar) into ResultKeyListVar;
            }
         }
         printdialog ResultKeyListVar;
      }
   }
}

command PreprocessCommand for InventoryPartInStock {
   variable ReceiptIssueSerialTrackDbVar {
      type = Text;
   }
   variable SerialNoVar {
      type = Text;
   }
   variable CodeAVar {
      type = Text;
   }
   variable CodeBVar {
      type = Text;
   }
   variable CodeCVar {
      type = Text;
   }
   variable CodeDVar {
      type = Text;
   }
   variable CodeEVar {
      type = Text;
   }
   variable CodeFVar {
      type = Text;
   }
   variable CodeGVar {
      type = Text;
   }
   variable CodeHVar {
      type = Text;
   }
   variable CodeIVar {
      type = Text;
   }
   variable CodeJVar {
      type = Text;
   }
   variable SerialObjkeyVar {
      type = Text;
   }
   variable ZeroCostOnlyVar {
      type = Text;
   }
   variable ZeroCostOnlyFlagVar {
      type = Text;
   }
   variable LotBatchNoVar {
      type = Text;
   }
   variable CostDetailIdVar {
      type = Number;
   }
   variable StandardCostExistVar {
      type = Text;
   }
   variable CostStructSerialNoStr {
      type = Text;
   }
   variable PrintBarcodeVar Text;
   variable CostStructureDefinedVar Boolean;

   bulkexecute {
      set CostStructureDefinedVar = false;
      bulkset RemoveCostDetails = "FALSE";
      bulkset InventorySource = "${parent.InventorySource}";
      bulkset CheckContinue = "TRUE";
      set PrintBarcodeVar = "${parent.PrintBarcode}";
      if [PrintBarcodeVar = "Yes"] {
         bulkset PrintBarcode = "1";
      }
      else {
         bulkset PrintBarcode = "0";
      }
      if [Record.Ownership = "CompanyOwned"] {
         call GetCodepartsSettings("M111", "${parent.Contract}") into CodepartsSettingsVar;
         if [CodepartsSettingsVar.AllCodepartsCompiled != "DISABLED"] {
            assistant PrePostingWithoutSourceAssistant(parent.Contract, CodepartsSettingsVar.AccountNo, CodepartsSettingsVar.CodenoB, CodepartsSettingsVar.CodenoC,
            CodepartsSettingsVar.CodenoD, CodepartsSettingsVar.CodenoE, CodepartsSettingsVar.CodenoF, CodepartsSettingsVar.CodenoG,
            CodepartsSettingsVar.CodenoH, CodepartsSettingsVar.CodenoI, CodepartsSettingsVar.CodenoJ)
            into(CodeAVar, CodeBVar, CodeCVar, CodeDVar, CodeEVar, CodeFVar, CodeGVar, CodeHVar, CodeIVar, CodeJVar) {
               when OK {
                  bulkset AccountNo = CodeAVar;
                  bulkset CostCenter = CodeBVar;
                  bulkset CodeC = CodeCVar;
                  bulkset CodeD = CodeDVar;
                  bulkset ObjectNo = CodeEVar;
                  bulkset ProjectNo = CodeFVar;
                  bulkset CodeG = CodeGVar;
                  bulkset CodeH = CodeHVar;
                  bulkset CodeI = CodeIVar;
                  bulkset CodeJ = CodeJVar;
               }
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
      set ReceiptIssueSerialTrackDbVar = "${parent.ReceiptIssueSerialTrackDb}";
      set SerialNoVar = "${Record.SerialNo}";
      set ZeroCostOnlyVar = "${parent.ZeroCostOnly}";
      set ZeroCostOnlyFlagVar = "${parent.ZeroCostOnlyFlag}";
      if [Record.Ownership != "CustomerOwned" and Record.Ownership != "CompanyRentalAsset" and ZeroCostOnlyVar != ZeroCostOnlyFlagVar] {
         set LotBatchNoVar = "${Record.LotBatchNo}";
         set ConditionCodeVar = "${Record.ConditionCode}";
         if [ReceiptIssueSerialTrackDbVar = "TRUE" and((CreateCount = 1 and(SerialNoVar = "*" or SerialNoVar = null or Record.QuantityReceived > 1)) or(UpdateCount = 1 and SerialNoVar = "*"))] {
            set CostStructSerialNoStr = "*";
         }
         else {
            set CostStructSerialNoStr = SerialNoVar;
         }
         call CheckExist(Record.Contract, Record.PartNo, Record.ConfigurationId, Record.LotBatchNo, CostStructSerialNoStr, Record.ConditionCode) into CheckExistStructure;
         if [CheckExistStructure] {
            set StandardCostExistVar = "${CheckExistStructure.StandardCostExist}";
            if [StandardCostExistVar = "FALSE"] {
               assistant DefineCostStructureAssistant(Record.Contract, Record.PartNo, Record.ConfigurationId, Record.LotBatchNo, CostStructSerialNoStr, Record.ConditionCode, "DIRECT RECEIPT", null) into(CostDetailIdVar) {
                  when OK {
                     set CostStructureDefinedVar = true;
                     bulkset CostDetailId = CostDetailIdVar;
                  }
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
         }
      }
      if [ReceiptIssueSerialTrackDbVar = "TRUE" and((CreateCount = 1 and(SerialNoVar = "*" or SerialNoVar = null or Record.QuantityReceived > 1)) or(UpdateCount = 1 and SerialNoVar = "*"))] {
         assistant SerialNumberAssistant("${Record.Contract}", "${Record.PartNo}", "${Record.LocationNo}", "${Record.QuantityReceived}") into(SerialObjkeyVar) {
            when OK {
               bulkset SerialObjkey = SerialObjkeyVar;
               exit;
            }
            when CANCEL {
               if [CostStructureDefinedVar] {
                  bulkset RemoveCostDetails = "TRUE";
                  exit CANCEL;
               }
               else {
                  exit CANCEL;
               }
               exit;
            }
         }
      }
   }
}
command AfterCrudCommand for InventoryPartInStock {
   variable SelectionVar Text;
   variable ReceiptIssueSerialTrackDbVar {
      type = Text;
   }
   variable SerialNoVar {
      type = Text;
   }
   variable PrintBarcodeVar Text;
   variable SystemShortageFlagVar Text;
   variable PartShortageFlagVar Text;
   variable ShortageVar Text;
   variable ShortageExistVar Number;

   bulkexecute {
      set PrintBarcodeVar = "${Record.PrintBarcode}";
      if [PrintBarcodeVar = "1"] {
         set ReceiptIssueSerialTrackDbVar = "${parent.ReceiptIssueSerialTrackDb}";
         set SerialNoVar = "${Record.SerialNo}";
         if [not(ReceiptIssueSerialTrackDbVar = "TRUE" and SerialNoVar = "*")] {
            stringify(records, "CONTRACT=${Contract}^PART_NO=${PartNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CONFIGURATION_ID=${ConfigurationId}^ACTIVITY_SEQ=${ActivitySeq}^QTY=1^PACK_SIZE=1^", JSON) into SelectionVar;
            assistant PrintBarCodeLabelsSingleAssistant(SelectionVar) {
               when OK {
                  exit;
               }
            }
         }
      }
      set SystemShortageFlagVar = parent.SystemShortageFlag;
      set PartShortageFlagVar = parent.PartShortageFlag;
      set ShortageVar = parent.Shortage;
      set ShortageExistVar = parent.ShortageExist;
      if [SystemShortageFlagVar = "Y"] {
         if [PartShortageFlagVar = ShortageVar] {
            if [ShortageExistVar != 0] {
               info("There are shortages for part ${parent.PartNo}");
            }
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryPartConfigSelector for InventoryPartConfig {
   label = "${PartNo} - ${PartDescription} - ${Contract} - ${ConfigurationId}";
   static PartNo;
   static PartDescription;
   static Contract;
   static ConfigurationId;
}
@Override
selector InventoryLocationTypeLovSelector for InventoryLocationTypeLov {
   static InventoryLocationType;
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group InvReceiptGroup for InventoryPartConfig {
   label = "";
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      label = "Part";
      description = PartDescription;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field Uom {
      label = "UoM";
      size = Small;
      editable = [false];
   }
   field CatchUom {
      label = "Catch UoM";
      size = Small;
      editable = [false];
   }
   field UnitCost {
      size = Small;
   }
   field PrintBarcode;
   field InventorySource {
      multiline = true;
      size = Medium;
   }
   field ZeroCostOnlyFlag {
      columnexclude = [true];
      visible = [false];
   }
   field ZeroCostOnly {
      columnexclude = [true];
      visible = [false];
   }
   field SystemShortageFlag {
      columnexclude = [true];
      visible = [false];
   }
   field Shortage {
      columnexclude = [true];
      visible = [false];
   }
   field ShortageExist {
      columnexclude = [true];
      visible = [false];
   }
   field PartShortageFlag {
      columnexclude = [true];
      visible = [false];
   }
   -- gelr: warehouse_journal, begin
   lov DelivReasonIdRef with ReferenceDeliveryReasonSelector {
      label = "Delivery Reason";
      description = DelivReasonIdRef.Description;
      visible = ["WAREHOUSE_JOURNAL" in EnabledLccParams and EnabledLccParams != ""];
   }
   -- gelr: warehouse_journal, end
}

----------------------------------- LISTS -----------------------------------
list PartLocList for InventoryPartInStock {
   label = "";
   editmode = SingleRowEdit;
   crudactions {
      before command PreprocessCommand;
      after command AfterCrudCommand;
      update action = ReceiveInventoryPartInUpdate;
      create action = ReceiveInventoryPartInCreate;
   }

   field QuantityReceived;
   field QtyOnhand;
   field CatchQuantityReceived {
      editable = [PartCatalogRef.CatchUnitEnabled];
   }
   field CatchQtyOnhand;
   field ExpirationDate {
      editable = [(original.ExpirationDate = null) or(isNew)];
   }
   field LocationNo {
      validate command {
         execute {
            call ValidateLocationInfo(Contract, LocationNo) into WarehouseLocationInfoStructure;
            set Warehouse = WarehouseLocationInfoStructure.Warehouse;
            set BayNo = WarehouseLocationInfoStructure.BayNo;
            set RowNo = WarehouseLocationInfoStructure.RowNo;
            set TierNo = WarehouseLocationInfoStructure.TierNo;
            set BinNo = WarehouseLocationInfoStructure.BinNo;
            set LocationType = WarehouseLocationInfoStructure.LocationType;
               -- gelr: warehouse_journal, begin
            set DeliveryReasonId = parent.DeliveryReasonId;
               -- gelr: warehouse_journal, begin
         }
      }
      lovswitch {
         when [HandlingUnitId != null and HandlingUnitId != 0] {
            lov LocationNoRef with ReferenceInventoryLocation5Selector using GetHandlingUnitLocationNo(Contract, HandlingUnitId);
         }
         when [HandlingUnitId = null or HandlingUnitId = 0] {
            lov LocationNoRef with ReferenceInventoryLocation5Selector using GetLocationNos(Contract);
         }

      }
   }
   lov HandlingUnitIdRef with ReferenceHandlingUnitNoShipmentLovSelector using GetHandlingUnitIds(Contract, LocationNo) {
      freeinput = [true];
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = HandlingUnitTypeIdRef.Description;
      label = "Handling Unit Type";
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field Warehouse {
      size = Small;
   }
   field BayNo {
      size = Small;
   }
   field RowNo {
      size = Small;
   }
   field TierNo {
      size = Small;
   }
   field BinNo {
      size = Small;
   }
   field LocationTypeRef {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
   }
   field WaivDevRejNo {
      size = Small;
   }
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      description = AvailabilityControlIdRef.Description;
      label = "Part Availability Control";
   }
   @DynamicComponentDependency MFGSTD
   field EngChgLevelRef {
      size = Small;
   }
   field TopParentHandlingUnitId;
   lov TopParentHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = TopParentHandlingUnitTypeIdRef.Description;
      label = "Top Parent Handling Unit Type";
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelId {
      size = Small;
   }
   field QtyInTransit {
      columnexclude = [true];
   }
   field Ownership {
      editable = [QtyOnhand = 0 and QtyInTransit = 0];
      size = Small;
      required = [true];
   }
   field Owner {
      size = Small;
      contactwidget {
         enabled = [Owner != null];
         source {
            Customer = [PartOwnershipDb = "CUSTOMER OWNED"];
            Supplier = [PartOwnershipDb = "SUPPLIER OWNED" or PartOwnershipDb = "SUPPLIER LOANED" or PartOwnershipDb = "SUPPLIER RENTED" or PartOwnershipDb = "CONSIGNMENT"];
         }
         key = Owner;
      }
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   field OwnerName {
      size = Small;
   }
   field ReceiptIssueSerialTrackDb {
      columnexclude = [true];
   }
   field ZeroCostOnlyFlag {
      columnexclude = [true];
   }
   field ZeroCostOnly {
      columnexclude = [true];
   }
   field PartOwnershipDb {
      columnexclude = [true];
   }
   field InventorySource {
      columnexclude = [true];
   }
   @DynamicComponentDependency MFGSTD
   field EngChgLevelRef.EngRevision {
      label = "Engineering Revision No";
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   field EngChgLevelRef.TechnicalDrawingNo {
      label = "Drawing No";
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   field EngChgLevelRef.TechDrawingRevisionNo {
      label = "Drawing Revision No";
      editable = [false];
      columnvisible = [false];
   }

   -- gelr: warehouse_journal, begin
   field DeliveryReasonId {
      columnvisible = [false];
   }
   -- gelr: warehouse_journal, end
   commandgroup CommandGroupCmdGroup {
      command ResolveShortagesCommand;
      command PrintBarcodeLabelsCommand;
      command PrintConditionTagCommand;
   }
   command PrintServiceabilityTagCommand;

}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


