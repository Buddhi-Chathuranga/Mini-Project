-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-07-24  ChFolk  SCUXXW4-22798, Modified project informations to increase performance.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-10-17  SWiclk  SCUXXW4-6229, Converted from frmInventoryPartOnhandDevelop using MTG Version: 1.31
-----------------------------------------------------------------------------
projection InventoryPartOnHandDevelopmentAnalysis;
component INVENT;
layer Core;
description "View InventoryPartConfig";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartConfigSet for InventoryPartConfig;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartConfig {
   crud = Read;
   keys = PartNo, Contract, ConfigurationId {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and CONFIGURATION_ID = :ConfigurationId";
   }
   supportwarnings = [true];
   exclude attributes = AccumulatedPurchaseDiff, AveragePurchasePrice, EstimatedMaterialCost, LastActualCostCalc, LastManufCostCalc, LatestPurchasePrice;
   attribute PartNo Text {
      maxlength = 100;
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute LeadTime Number {
      fetch = "DECODE(Inv_Part_Lead_Time_Code_API.Encode(Inventory_Part_API.Get_Lead_Time_Code(contract, part_no)),'M',Inventory_Part_API.Get_Manuf_Leadtime(contract, part_no),Inventory_Part_API.Get_Purch_Leadtime(contract, part_no))";
      label = "Lead Time";
      editable = [false];
   }
   attribute Days Number {
      fetch = "Inventory_Transaction_Hist_API.Calculate_Days( contract, part_no, configuration_id)";
      editable = [false];
   }
   attribute TotalQuantity Number {
      fetch = "Inventory_Transaction_Hist_API.Calculate_Total_Quantity( contract, part_no, configuration_id)";
      editable = [false];
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   array InventoryPartOnhandDevelopArray(PartNo, Contract, ConfigurationId) to InventoryTransactionHist(PartNo, Contract, ConfigurationId);
}
@Override
entity InventoryTransactionHist {
   crud = Read;
   where = "DIRECTION IN ('-','+')";
   use attributes = DateCreated, DateTimeCreated, TransactionCode, Transaction, SourceRef1, SourceRefType, Userid, PartOwnership, ProjectId, ActivitySeq;
   attribute TransactionId Number;
   attribute PartNo Text {
      label = "Part No";
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute ConfigurationId Text {
      label = "Configuration Id";
   }
   attribute DateCreated Date {
      label = "Created";
      required = [true];
   }
   attribute DateTimeCreated Time {
      label = "Transaction Time";
   }
   attribute Transaction Text {
      label = "System Event Description";
      required = [true];
   }
   attribute SourceRef1 Text {
      label = "Order No";
   }
   attribute SourceRefType Enumeration(OrderType) {
      label = "Order Type";
   }
   attribute TransactionQty Number {
      fetch = "TO_NUMBER(direction||TO_CHAR(quantity))";
      label = "Transaction Qty";
      required = [true];
   }
   attribute OnHandQtyAfterTransaction Number {
      fetch = "Inventory_Transaction_Hist_API.Calculate_Qty_Onhand_Date(transaction_id, contract, part_no, configuration_id)";
      label = "On Hand Qty After Transaction";
      editable = [false];
   }

   attribute Userid Text {
      label = "By";
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }

   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


