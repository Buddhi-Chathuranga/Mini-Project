------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------------------
-- 2022-01-28  ErFelk  Bug 162143(SC21R2-7321), Revert the correction done by bug 159019.
-- 2021-06-09  ErFelk  Bug 159019(SCZ-14501), Added function InvalidNotcDirection.
-- 2021-03-05  SBalLK  Issue SC2020R1-12810, Updated StatisticalCodeRef with all key values to avoid duplicate in client.
-- 2021-03-04  ApWilk  Bug 156696(SCZ-13937), Modified IntrastatVirtual to move the PreIntrastatId into the TransferIntrastatToFile assistant.
-- 2021-02-22  WaSalk  SC2020R1-12576, Removed fragment LocalizationControlCenterHandler and added attribute EnabledLccParams.
-- 2020-11-16  Aabalk  SC2020R1-9294, Converted Boolean attributes into Enumerations where necessary.
-- 2020-08-31  SBalLK  GESPRING20-537, Added InvoiceDate, ServiceStatisticalCode, ServiceWay, ServicePaymentWay, OppositeCountryCurrCode, OppositeCountryCurrAmount,
-- 2020-08-31          AdjustToPreviousIntrastat, PrevIntrastatInvoicDate, AdvanceTransaction, PaymentMethod, ReferenceInvoiceSerie, ReferenceInvoiceNumber,
-- 2020-08-31          ReferenceInvoiceDate, ProtocolNo, ItalyIntrastatEnabled attribute to enable italy intrastat localization. Added IsPrevPeriodInvoicDate() function.
-- 2020-03-27  DiJwlk  Bug 151817(SCZ-8470), Added field to display ConsolidationFlag
-- 2019-05-07  DaZase  SCUXXW4-19639, Added initialcheck to all unbounded actions.
-- 2019-04-30  ErFelk  SCUXXW4-6146, Added an attribute ReportViewName.
-- 2019-03-22  ErFelk  SCUXXW4-6146, Implemented IntrastatVirtual for File transfer logic. Added an ENUMERATIONS for FileExtension.
-- 2019-02-19  Asawlk  SCUXXW4-6146, Performed the corrections related to the Intrastat Line. Implemented command buttons "Cancel" and
-- 2019-02-19          "Update intrastat Lines".
-- 2018-11-23  ErFelk  SCUXXW4-6146, Converted from frmIntrastat using MTG Version: 1.32
------------------------------------------------------------------------------------------------------

projection IntrastatHandling;
component INVENT;
layer Core;
description "Manage Intrastat";
category Users;
include fragment PersonInfoPublicSelector;
include fragment CustomsInfoPublicSelector;
include fragment PersonInfoPublicLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CountryNotcLovSelector;
include fragment SiteCompanyLovSelector;
include fragment IntrastatInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset IntrastatSet for Intrastat;
entityset IntrastatVirtualSet for IntrastatVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Intrastat {
   crud = Read, Update, Delete;
   use attributes = BeginDate, EndDate, Company, CountryCode, ToInvoiceDate, CreationDate, CustomsId, BranschNo, RegistrationNo, IntrastatTaxNo, CompanyContact, Representative, RepCurrCode, RepCurrRate, BranschNoRepr, ReprTaxNo, DecNumberExport, VersionExport, DeclarationExport, DecNumberImport, VersionImport, DeclarationImport;
   attribute IntrastatId Number {
      label = "Intrastat ID";
      editable = [false];
   }
   attribute BeginDate Date {
      label = "From Date";
      editable = [ETag = null];
   }
   attribute EndDate Date {
      label = "To Date";
      editable = [ETag = null];
   }
   attribute Company Text {
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute CountryCode Text {
      label = "Country";
      editable = [ETag = null];
   }
   attribute CountryName Text {
      fetch = "Iso_Country_API.Get_Description(country_code, fnd_session_api.get_language)";
      label = "Country Name";
      maxlength = 2000;

      editable = [false];
   }
   attribute ReportViewName Text {
      fetch = "Intrastat_Manager_API.Get_Report_Name(COUNTRY_CODE)";

   }
   attribute ToInvoiceDate Date {
      editable = [ETag = null];
   }
   attribute ProcessInfoDb Boolean("INCOMPLETE", "COMPLETE") {
      fetch = "DECODE(process_info_db, 'INCOMPLETE', 'TRUE', 'FALSE')";
      label = "Incomplete";
      editable = [false];
   }
   attribute CreationDate Date {
      label = "Created";
      editable = [false];
   }
   attribute CustomsId Text {
      maxlength = 100;
   }
   attribute BranschNo Text {
      label = "Branch";
      maxlength = 100;
   }
   attribute RegistrationNo Text {
      label = "Reg No";
      maxlength = 100;
   }
   attribute IntrastatTaxNo Text {
      maxlength = 100;
   }
   attribute CompanyContact Text {
      maxlength = 100;
   }
   attribute FilePrintExportDb Boolean("EXPORT FILE PRINTED", "NO EXPORT FILE PRINTED") {
      fetch = "DECODE(file_print_export_db, 'EXPORT FILE PRINTED', 'TRUE', 'FALSE')";
      label = "Export Report Transferred To File";
      editable = [false];
   }
   attribute FilePrintImportDb Boolean("IMPORT FILE PRINTED", "NO IMPORT FILE PRINTED") {
      fetch = "DECODE(file_print_import_db, 'IMPORT FILE PRINTED', 'TRUE', 'FALSE')";
      label = "Import Report Transferred To File";
      editable = [false];
   }
   attribute DocPrintExportDb Boolean("EXPORT DOC PRINTED", "NO EXPORT DOC PRINTED") {
      fetch = "DECODE(doc_print_export_db, 'EXPORT DOC PRINTED', 'TRUE', 'FALSE')";
      label = "Export Report Printed";
      editable = [false];
   }
   attribute DocPrintImportDb Boolean("IMPORT DOC PRINTED", "NO IMPORT DOC PRINTED") {
      fetch = "DECODE(doc_print_import_db, 'IMPORT DOC PRINTED', 'TRUE', 'FALSE')";
      label = "Import Report Printed";
      editable = [false];
   }
   attribute Representative Text {
      maxlength = 100;
   }
   attribute RepCurrCode Text {
      label = "Currency Code";
      format = uppercase;
   }
   attribute Description Text {
      fetch = "Currency_Code_API.Get_Description(company, rep_curr_code)";
      label = "Description";
      maxlength = 2000;

      editable = [false];
   }
   attribute RepCurrRate Number {
      label = "Currency Rate";
   }
   attribute BranschNoRepr Text {
      label = "Branch";
      maxlength = 100;
      editable = [ETag != null];
   }
   attribute ReprTaxNo Text {
      label = "Tax ID Number";
      maxlength = 100;
   }
   attribute DecNumberExport Number {
      label = "Declaration No";
      maxlength = 3;
   }
   attribute VersionExport Number {
      label = "Version No";
      maxlength = 3;
   }
   attribute DeclarationExport Enumeration(IntrastatDeclaration) {
      label = "Declaration Type";
   }
   attribute DecNumberImport Number {
      label = "Declaration No";
      maxlength = 3;
   }
   attribute VersionImport Number {
      label = "Version No";
      maxlength = 3;
   }
   attribute DeclarationImport Enumeration(IntrastatDeclaration) {
      label = "Declaration Type";
   }
   attribute ConsolidationFlag Boolean("TRUE", "FALSE") {
      fetch = "CONSOLIDATION_FLAG_DB";
      label = "Consolidation";
      editable = [false];
   }
   -- gelr:italy_intrastat, start
   attribute IntrastatFileNo Number {
      fetch = "import_progress_no";
      label = "Intrastat File No";
   }
   -- gelr:italy_intrastat, end
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   reference CompanyRef(Company) to Company(Company);
   reference CustomsInfoRef(CustomsId) to CustomsInfo(CustomsId);
   reference PersonInfo2Ref(Representative) to PersonInfo(PersonId);
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference CompanyContactRef(CompanyContact) to PersonInfoPublic(PersonId) {
      label = "Company Contact";
   }
   reference RepCurrCodeRef(RepCurrCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }

   array IntrastatLineArray(IntrastatId) to IntrastatLine(IntrastatId);

}

@Override
entity IntrastatLine {
   use attributes = TransactionId, Transaction, OrderType, Contract, PartNo, PartDescription, ConfigurationId, LotBatchNo, SerialNo, OrderRef1, OrderRef2, OrderRef3, OrderRef4, InventoryDirection, Quantity, QtyReversed, UnitMeas, RejectCode, ReturnReason, ReturnMaterialReason, DateApplied, Userid, NetUnitWeight, CustomsStatNo, IntrastatAltQty, IntrastatAltUnitMeas, Notc, CountryCode, MovementCode, IntrastatDirection, CountryOfOrigin, RegionOfOrigin, IntrastatOrigin, OppositeCountry, OpponentNumber, OpponentName, OpponentType, OpponentTaxId, OrderUnitPrice, UnitAddCostAmount, UnitChargeAmount, InvoicedUnitPrice, UnitAddCostAmountInv, UnitChargeAmountInv, UnitStatisticalChargeDiff, ModeOfTransport, InvoiceSerie, InvoiceNumber, DeliveryTerms, RegionPort, DelTermsLocation, PlaceOfDelivery, StatisticalProcedure;
   attribute IntrastatId Number {
      maxlength = 0;
      label = "Intrastat ID";

   }
   attribute Transaction Text {
      label = "Transaction Code";
   }
   attribute SiteDescription Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Site Description";
      maxlength = 2000;

      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute OrderRef1 Text {
      label = "Order Ref 1";
   }
   attribute OrderRef2 Text {
      label = "Order Ref 2";
   }
   attribute OrderRef3 Text {
      label = "Order Ref 3";
   }
   attribute OrderRef4 Number {
      label = "Order Ref 4";
      maxlength = 3;
   }
   attribute QtyReversed Number {
      label = "Reversed Qty";
   }
   attribute UnitMeas Text {
      label = "UoM";
   }
   attribute RejectCode Text {
      label = "Scrap Cause";
   }
   attribute DateApplied Date {
      label = "Applied Date";
   }
   attribute Userid Text {
      label = "Performed By";
      editable = [false];
   }
   attribute NetUnitWeight Number {
      label = "Net Weight";
   }

   attribute IntrastatAltUnitMeas Text {
      label = "Intrastat Alt UoM";
   }
   attribute CountryCode Text {
      label = "(Untitled)";
   }
   attribute CountryOfOrigin Text {
      maxlength = 3;
   }

   attribute RegionOfOrigin Text {
      label = "Region Code";
   }
   attribute IntrastatOrigin Enumeration(IntrastatOrigin) {
      editable = [false];
   }
   attribute OppositeCountry Text {
      maxlength = 3;
   }
   attribute OrderUnitPrice Number {
      label = "Net Price/Base";
   }
   attribute UnitAddCostAmount Number {
      label = "Add Cost per Unit/Base";
   }
   attribute UnitChargeAmount Number {
      label = "Charge Price/Base";
   }
   attribute InvoicedUnitPrice Number {
      label = "Net Invoiced Price/Base";
   }
   attribute UnitAddCostAmountInv Number {
      label = "Invoiced Add Cost per Unit/Base";
   }
   attribute UnitChargeAmountInv Number {
      label = "Invoiced Charge Price/Base";
   }
   attribute UnitStatisticalChargeDiff Number {
      label = "Statistical Charge Diff/Base";
      format = ifscurrency;
   }
   attribute InvoiceSerie Text {
      label = "Series ID";
   }
   attribute InvoiceNumber Text {
      label = "Invoice No";
   }
   attribute Untitled Text {
      fetch = "fnd_session_api.get_language";
      label = "(Untitled)";
      maxlength = 2000;

      editable = [false];
   }
   attribute DelTermsLocation Text {
      editable = [false];
   }
   attribute Triangulation Enumeration(Triangulation) {
      fetch = "triangulation_db";
      required = [true];
   }
   attribute OpponentChanged Boolean("TRUE", "FALSE") {
      insertable = [false];
      updatable = [false];
      editable = [true];
      fetch = "'FALSE'";
   }
   -- gelr:italy_intrastat, start
   attribute InvoiceDate Date;
   attribute ServiceStatisticalCode Text;
   attribute ServiceWay Enumeration(IntrastatServiceWay) {
      fetch = "service_way_db";
   }
   attribute ServicePaymentWay Enumeration(IntrastatServicePayWay) {
      fetch = "service_payment_way_db";
   }
   attribute AdjustToPrevIntrastat Boolean("TRUE", "FALSE") {
      fetch = "adjust_to_prev_intrastat_db";
      label = "Adjust to Previous Intrastat";
   }
   attribute PrevIntrastatInvoicDate Date {
      label = "Previous Intrastat Period";
   }
   attribute AdvanceTransaction Boolean("TRUE", "FALSE") {
      fetch = "advance_transaction_db";
   }
   attribute PaymentMethod Text;
   attribute ReferenceInvoiceSerie Text {
      label = "Reference Invoice Series ID";
   }
   attribute ReferenceInvoiceNumber Text;
   attribute ReferenceInvoiceDate Date;
   attribute ProtocolNo Number;
   attribute Company Text {
      fetch = "Site_API.Get_Company(contract)";
   }
   -- gelr:italy_intrastat, end

   reference MpccomSystemEventRef(Transaction) to MpccomSystemEvent(SystemEventId);

   reference ContractRef(Contract) to SiteCompanyLov(Contract) {
      label = "Site";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference RejectCodeRef(RejectCode) to ScrappingCause(RejectReason) {
      label = "Scrap Cause";
   }
   @DynamicComponentDependency DISCOM
   reference ReturnReasonRef(ReturnReason) to ReturnCause(ReturnReason) {
      label = "Return Reason";
   }
   @DynamicComponentDependency ORDER
   reference ReturnMaterialReasonRef(ReturnMaterialReason) to ReturnMaterialReason(ReturnReasonCode) {
      label = "Return Material Reason";
   }
   reference CustomsStatNoRef(CustomsStatNo) to CustomsStatisticsNumber(CustomsStatNo) {
      label = "Customs Statistics No";
   }
   reference IntrastatAltUnitMeasRef(IntrastatAltUnitMeas) to IsoUnit(UnitCode) {
      label = "Intrastat Alt UoM";
   }
   reference NotcRef(CountryCode, Notc) to CountryNotcLov(CountryCode, CountryNotc) {
      label = "NOTC";

   }
   reference MovementCodeRef(CountryCode, MovementCode) to SpecialCodeOfMovement(CountryCode, MovementCode) {
      label = "Movement Code";
   }
   reference CountryOfOriginRef(CountryOfOrigin) to IsoCountry(CountryCode) {
      label = "Country of Origin";
   }
   reference RegionOfOriginRef(CountryCode, RegionOfOrigin) to CountryRegion(CountryCode, RegionCode) {
      label = "Region Code";
   }
   reference OppositeCountryRef(OppositeCountry) to IsoCountry(CountryCode) {
      label = "Opposite Country";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";

   }
   -- gelr:italy_intrastat, start
   reference StatisticalCodeRef(Company, ServiceStatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Services Statistical Code";
   }
   -- gelr:italy_intrastat, end
}

------------------------------- ENUMERATIONS --------------------------------
enumeration FileExtensionEnum {
   value = "csv" {
      label = "CSV";
   }
   value = "txt" {
      label = "Text Only";
   }
   value = "edi" {
      label = "EDI Message";
   }
   value = "asc" {
      label = "ASCII File";
   }

   value = "xml" {
      label = "XML File";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action GetIntrastatResultKey Text {
   initialcheck IntrastatInitialCheck(IntrastatId);
   parameter IntrastatId Number;
   parameter IntrastatDirection Text;
   parameter CountryCode Text;
}
action SetPrintTransferredButtons {
   initialcheck IntrastatInitialCheck(IntrastatId);
   supportwarnings = [true];
   parameter IntrastatId Number;
   parameter Description Text;
   ludependencies = Intrastat;
}

action SetPrintTransferred {
   initialcheck IntrastatInitialCheck(IntrastatId);
   supportwarnings = [true];
   parameter IntrastatId Number;
   parameter Description Text;
   parameter ImportProgressNo Number;
   parameter ExportProgressNo Number;
   ludependencies = Intrastat;
}

action ModifyIntrastatLines {
   initialcheck implementation;
   parameter Selection Text;
   parameter Quantity Number;
   parameter NetUnitWeight Number;
   parameter CustomsStatisticNumber Text;
   parameter IntrastatAltQuantity Number;
   parameter IntrastatAltUnitMeas Text;
   parameter Notc Text;
   parameter CountryOfOrigin Text;
   parameter OppositeCountry Text;
   parameter OpponentTaxId Text;
   parameter OrderUnitPrice Number;
   parameter UnitAddCostAmount Number;
   parameter UnitChargeAmount Number;
   parameter InvoicedUnitPrice Number;
   parameter UnitAddCostAmountInv Number;
   parameter UnitChargeAmountInv Number;
   parameter UnitStatisticalChargeDiff Number;
   parameter ModeOfTransport Enumeration(ModeOfTransport);
   parameter DeliveryTerms Text;
   parameter RegionPort Text;
   parameter StatisticalProcedure Enumeration(StatisticalProcedure);
   parameter Triangulation Enumeration(Triangulation);
   parameter RegionOfOrigin Text;
   parameter SpecialCodeOfMovement Text;
   -- gelr:italy_intrastat, start
   parameter InvoiceDate Date;
   parameter ServiceStatisticalCode Text;
   parameter ServiceWay Enumeration(IntrastatServiceWay);
   parameter ServicePaymentWay Enumeration(IntrastatServicePayWay);
   parameter AdjustToPrevIntrastat Boolean;
   parameter PrevIntrastatInvoicDate Date;
   parameter AdvanceTransaction Boolean;
   parameter PaymentMethod Text;
   parameter ReferenceInvoiceSerie Text;
   parameter ReferenceInvoiceNumber Text;
   parameter ReferenceInvoiceDate Date;
   parameter ProtocolNo Number;
   parameter ItalyIntrastatEnabled Boolean;
   -- gelr:italy_intrastat, end
   ludependencies = IntrastatLine;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetSitesPerCompany List<Entity(SiteCompanyLov)> {
   parameter Company Text;
   where = "COMPANY = :Company";

}
-- gelr:italy_intrastat, start
function StatisticalCodeFilter List<Entity(StatisticalCode)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
-- gelr:italy_intrastat, end

function CreateFileName Text {
   parameter InputFileName Text;
   parameter FileExtension Enumeration(FileExtensionEnum);
}

function CheckLineExist Boolean {
   initialcheck none;
   parameter IntrastatId Number;
}


-- gelr:italy_intrastat, start
function IsPrevPeriodInvoicDate Boolean {
   initialcheck none;
   parameter Contract Text;
   parameter PrevIntrastatInvoicDate Date;
}
-- gelr:italy_intrastat, end
-------------------------------- STRUCTURES ---------------------------------
structure CreateResultStructure {
   attribute ImportProgressNo Number;
   attribute ExportProgressNo Number;

}

structure UpdateIntrastatLinesStructure {
   attribute Quantity Number {
      label = "Quantity";
   }
   attribute NetUnitWeight Number {
      label = "Net Unit Weight";
   }
   attribute CustomsStatisticNumber Text {
      label = "Customs Statistics No";
   }
   attribute IntrastatAltQuantity Number {
      label = "Intrastat Alt Qty";
   }
   attribute IntrastatAltUnitMeas Text {
      label = "Intrastat Alt Unit Meas";
   }
   attribute Notc Text {
      label = "Notc";
   }
   attribute CountryOfOrigin Text {
      label = "Country Of Origin";

   }
   attribute OppositeCountry Text {
      label = "Opposite Country";

   }
   attribute OpponentTaxId Text {
      label = "Opponent Tax ID";

   }
   attribute OrderUnitPrice Number {
      label = "Order Price/Unit (Base Curr)";
      format = ifscurrency;
   }
   attribute UnitAddCostAmount Number {
      label = "Add Cost Amount/Unit (Base Curr)";
      format = ifscurrency;
   }
   attribute UnitChargeAmount Number {
      label = "Charge Amount/Unit (Base Curr)";
      format = ifscurrency;
   }
   attribute InvoicedUnitPrice Number {
      label = "Invoice Price/Unit (Base Curr)";
      format = ifscurrency;
   }
   attribute UnitAddCostAmountInv Number {
      label = "Invoiced Add Cost Amount/Unit (Base Curr)";
      format = ifscurrency;
   }
   attribute UnitChargeAmountInv Number {
      label = "Invoiced Charge Amount/Unit (Base Curr)";
      format = ifscurrency;
   }
   attribute UnitStatisticalChargeDiff Number {
      label = "Statistical Charge Diff/Unit (Base Curr)";
      format = ifscurrency;
   }
   attribute ModeOfTransport Enumeration(ModeOfTransport) {
      label = "Mode of Transport";
   }
   attribute DeliveryTerms Text {
      label = "Delivery Terms";
   }
   attribute RegionPort Text {
      label = "Region Port";
   }
   attribute StatisticalProcedure Enumeration(StatisticalProcedure) {
      label = "Statistical Procedure";
   }
   attribute Triangulation Enumeration(Triangulation) {
      label = "Triangulation";
      required = [false];
   }

   attribute RegionOfOrigin Text {
      label = "Region Of Origin";
   }
   attribute SpecialCodeOfMovement Text {
      label = "Special Code Of Movement";
   }
   -- gelr:italy_intrastat, start
   attribute InvoiceDate Date;
   attribute ServiceStatisticalCode Text;
   attribute ServiceWay Enumeration(IntrastatServiceWay);
   attribute ServicePaymentWay Enumeration(IntrastatServicePayWay);
   attribute AdjustToPrevIntrastat Boolean;
   attribute PrevIntrastatInvoicDate Date {
      label = "Previous Intrastat Period";
   }
   attribute AdvanceTransaction Boolean;
   attribute PaymentMethod Text;
   attribute ReferenceInvoiceSerie Text;
   attribute ReferenceInvoiceNumber Text;
   attribute ReferenceInvoiceDate Date;
   attribute ProtocolNo Number;
   attribute ItalyIntrastatEnabled Boolean;
   -- gelr:italy_intrastat, end
}

--------------------------------- VIRTUALS ----------------------------------
virtual IntrastatVirtual {

   attribute ImportOption Boolean("TRUE", "FALSE") {
      label = "Transfer Import";
      required = [true];
   }

   attribute ExportOption Boolean("TRUE", "FALSE") {
      label = "Transfer Export";
      required = [true];
   }

   attribute PreIntrastatId Number;

   attribute ImportProgressNo Number;
   attribute ExportProgressNo Number;

   attribute MimeType Text {
      fetch = "'text/plain'";
   }
   attribute InputFileName Text {
      label = "File Name";
      required = [true];
      maxlength = 200;
   }
   attribute FileExtension Enumeration(FileExtensionEnum) {
      required = [true];
   }
   attribute TransferFileName Text {
      label = "Transfer File Name";
      maxlength = 200;
   }
   attribute FileData Stream {
      fileinfo {
         filename TransferFileName;
         mimetype MimeType;
      }
   }

   action CreateNewFile Structure(CreateResultStructure) {
      supportwarnings = [true];
      parameter IntrastatId Number;
      parameter CountryCodeRef Text;
      parameter Import Text;
      parameter Export Text;
      parameter ReportStyle Number;
      parameter PreIntrastatId Number;
      parameter FileName Text;

      ludependencies = IntrastatVirtual;
   }

}
