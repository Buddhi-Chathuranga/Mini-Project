-----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------
-- 2022-01-27  ErRalk  SC21R2-7320, Modified data type of HandlingUnitId to fix navigate issue.
-- 2019-08-16  ChFolk  SCUXXW4-23743, Removed some description attribute and added references to concatenated them.
-- 2018-05-30  JaThlk  SCUXXW4-7367, Modified to correct datasource refresh issue when updating records.
-- 2018-05-01  JaThlk  SCUXXW4-7367, Converted from tbwUndoInventoryScrap using MTG Version: 1.16
-----------------------------------------------------------------------------------------------------

projection UndoScrapInventoryPart;
component INVENT;
layer Core;
description "Use this API to undo scrap of the inventory part/handling unit manually. Inventory Qty Scrapped shows the number of units scrapped. Inventory Qty to Correct can be used to feed information about the no of units to be corrected.";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryTransactionHistorySet for InventoryTransactionHistory;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryTransactionHistory using InventoryTransactionHist {
   crud = Read, Update;
   ludependencies = InventoryTransactionHist;
   where = "TRANSACTION_CODE IN ('INVSCRAP', 'CO-SCRAP') AND SOURCE_REF1 IS NULL ";
   attribute PartNo Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute HandlingUnitId Number {
      editable = [false];
   }
   attribute InventoryQtyToCorrect Number {
      fetch = "NULL";
      label = "Inventory Qty to Correct";
      editable = [true];
   }
   attribute CatchQtyToCorrect Number {
      fetch = "NULL";
      label = "Catch Qty to Correct";
   }
   attribute InventoryQtyScrapped Number {
      fetch = "QUANTITY - QTY_REVERSED";
      label = "Inventory Qty Scrapped";
      editable = [false];
   }
   attribute CatchQuantity Number {
      label = "Catch Qty Scrapped";
      editable = [false];
   }
   attribute TransactionCode Text {
      editable = [false];
   }
   attribute RejectCode Text {
      editable = [false];
   }
   attribute Description Text {
      fetch = "Scrapping_Cause_API.Get_Reject_Message(REJECT_CODE)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      editable = [false];
   }
   attribute WarehouseId Text {
      fetch = "Inventory_Location_API.Get_Warehouse(CONTRACT,LOCATION_NO)";
      label = "Warehouse ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute BayId Text {
      fetch = "Inventory_Location_API.Get_Bay_No(CONTRACT,LOCATION_NO)";
      label = "Bay ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "Inventory_Location_API.Get_Row_No(CONTRACT,LOCATION_NO)";
      label = "Row ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TierId Text {
      fetch = "Inventory_Location_API.Get_Tier_No(CONTRACT,LOCATION_NO)";
      label = "Tier ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinId Text {
      fetch = "Inventory_Location_API.Get_Bin_No(CONTRACT,LOCATION_NO)";
      label = "Bin ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute LotBatchNo Text {
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Eng Chg Level";
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Availability_Control_Id(CONTRACT, PART_NO, '*', LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, 0, HANDLING_UNIT_ID)";
      maxlength = 100;
      editable = [false];
   }
   attribute CatchQtyEnabled Boolean("TRUE", "FALSE") {
      fetch = "Part_Catalog_API.Get_Catch_Unit_Enabled_Db(PART_NO)";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference MpccomSystemEventRef(TransactionCode) to MpccomSystemEvent(SystemEventId);
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference TransactionCodeRef(TransactionCode) to MpccomTransactionCode(TransactionCode) {
      label = "Transaction Code";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
}



