-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-07-24  ChFolk  SCUXXW4-22798, Modified project informations to increase performance.
-- 2019-07-10  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-05-14  DaZase  SCUXXW4-19649, Added initialcheck to all unbounded actions.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-05-29  DaZase  SCUXXW4-12145, Added GetResultKeyList() and IsMultipleReports().
-- 2018-05-08  YANILK  SCUXXW4-6895, Converted from tbwInventoryPartBarcode using MTG Version: 1.17
-----------------------------------------------------------------------------
projection InventoryPartBarcodeAnalysis;
component INVENT;
layer Core;
description "Use this API to view all created barcode label IDs existing on packages stored in inventory. It is possible to reprint barcode labels for the listed barcode label IDs.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartBarcodes for InventoryPartBarcode;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity InventoryPartBarcode {
   crud = Read;
   keys = Contract, BarcodeId {
      where = "CONTRACT = :Contract AND BARCODE_ID = :BarcodeId";
   }
   attribute BarcodeId Number {
      maxlength = 100;
      editable = [false];
      label = "Barcode ID";
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute OriginPackSize Number {
      maxlength = 100;
   }
   attribute PartDescription Text {
      fetch = "INVENTORY_PART_API.Get_Description(contract,PART_NO)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ConfigurationIdRef(PartNo, ConfigurationId) to InventoryPartConfig(PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
}

--------------------------------- FUNCTIONS ---------------------------------


---------------------------------- ACTIONS ----------------------------------
action GetResultKeyList Structure(PrintBarcodeStructure) {
   initialcheck implementation;
   parameter FullSelection Text;
   parameter PrintWithDialog Boolean;
}

-------------------------------- STRUCTURES ---------------------------------
structure PrintBarcodeStructure {
   attribute ResultKeyList Text;
   attribute IsMultipleReports Boolean;
}
