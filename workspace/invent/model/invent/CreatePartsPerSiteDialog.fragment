--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2019-05-17  DaZase  SCUXXW4-19625, Added initialcheck to all unbounded actions.
--  2018-12-01  KoDelk  SCUXXW4-5471, Converted from dlgCreatePartsPerSite using MTG Version: 1.32
---------------------------------------------------------------------------------
fragment CreatePartsPerSiteDialog;
component INVENT;
layer Core;
description "Create Parts Per Site Dialog";
include fragment UserAllowedSiteLovSelector;
include fragment SiteClusteDialog;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant CreatePartsPerSiteAssistant using AssortmentNodeVirtualSet {
   label = "Create Parts Per Site";
   savemode = OnLostFocus;
   input(AssortmentId, ParentNodeId);

   steps {
      step {
         group AssortmentNodeGroup {
            visible = [false];
         }
         list ContractList(ContractVirtualArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [component.ContractList.RowCount > 0];

      variable NoOfPartsVar;
      variable NoOfSitesVar;
      execute {
         set NoOfSitesVar = component.ContractList.RowCount;
         call GetNoOfPartsForNode(AssortmentId, ParentNodeId) into NoOfPartsVar;
         confirm("Are you sure you want to create ${NoOfPartsVar} parts on each of the ${NoOfSitesVar} selected sites?") {
            when OK {
               call CreatePartsPerSite();
               exit OK;
            }
         }
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

---------------------------------- GROUPS -----------------------------------
group AssortmentNodeGroup for AssortmentNodeVirtual {
   field AssortmentId;
   field ParentNodeId;
}

----------------------------------- LISTS -----------------------------------
list ContractList for ContractVirtual {
   label = "Sites";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;
      validate command {
         execute {
            set CreateSalesParts = true;
            set CreateSupForPurParts = true;
         }
      }
   }
   field CreateSalesParts {
      size = Small;
   }
   field CreateSupForPurParts {
      size = Small;
   }

   commandgroup SiteOperationsCmdGroup {
      command AddMySitesCommand;
      command SiteClusterCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
command AddMySitesCommand for ContractVirtual {
   label = "Add My Sites";
   mode = Global;

   execute {
      call AddMySites(Objkey);
      success("Sites Added.");
   }
}
command SiteClusterCommand for ContractVirtual {
   label = "Site Cluster";
   mode = Global;

   variable SiteClusterIdVar;
   variable SiteClusterNodeIdVar;
   execute {
      dialog SiteClusterDialog into(SiteClusterIdVar, SiteClusterNodeIdVar) {
         when OK {
            call AddSitesFromSiteCluster(Objkey, SiteClusterIdVar, SiteClusterNodeIdVar);
            success("Sites Added.");
         }
      }
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset AssortmentNodeVirtualSet for AssortmentNodeVirtual;

--------------------------------- VIRTUALS ----------------------------------
virtual AssortmentNodeVirtual {
   attribute AssortmentId Text;
   attribute ParentNodeId Text;

   array ContractVirtualArray(AssortmentId, ParentNodeId) to ContractVirtual(AssortmentId, ParentNodeId);

   action CreatePartsPerSite;
}
virtual ContractVirtual {
   attribute AssortmentId Text;
   attribute ParentNodeId Text;
   attribute Contract Text;
   attribute CreateSalesParts Boolean {
      label = "Create Sales Part";
      required = [true];
   }
   attribute CreateSupForPurParts Boolean {
      label = "Create Supplier for Purchase Part";
      required = [true];
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}

---------------------------------- ACTIONS ----------------------------------
action AddMySites {
   initialcheck implementation;
   ludependencies = ContractVirtual;
   parameter ParentKey Text;
}
action AddSitesFromSiteCluster {
   initialcheck implementation;
   ludependencies = ContractVirtual;
   parameter ParentKey Text;
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetNoOfPartsForNode Number {
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
}