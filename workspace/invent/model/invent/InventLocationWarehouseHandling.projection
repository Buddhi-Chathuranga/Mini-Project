--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2022-02-02  BwItLk  SC21R2-7297, Modified Warehouse entity  by adding BayId, RowId, TierId, BinId to filter out data in Warehouse Navigator in each level.
--  2021-11-08  SBalLK  SC21R2-2833, Added WarehouseTypeId attribute to warehouse entity.
--  2021-09-28  Aabalk  SC21R2-2608, Added ProjectId and ProjectAddressId to WhseShipmentReceiptInfo entity.
--  2021-06-14  SBalLK  SC21R2-1545, Recently some of the location related logical units from MSCOM has moved to new component LOC.
--  2021-05-15  SBalLK  SC21R2-1169, Removed PartyType, PartyTypeId and PartyTypeAddressId from WhseShipmentReceiptInfo and added GeolocationId, GeolocationAddressId and AddressType attributes.
--  2021-05-15          Removed PartyTypeEnumeration.
--  2021-01-26  Aabalk  SCTA-8317, Replaced SendAutoDisAdvDb with SendAutoDisAdv.
--  2020-09-25  JaThlk  SC2020R1-9887, Overrode the virtual CapacitiesAndConditionsVirtual to have the method signature in the projection itself.
--  2020-06-17  PamPlk  SC2020R1-7179, Added SendAutoDisAdvDb.
--  2020-02-26  AsZelk  SCSPRING20-1953, Added GetRouteConnectForwarder() to fetch route connected forwarderId.
--  2019-11-07  ErRalk  SCSPRING20-959, Modified places where WarehousePurchInfo is used with WhseShipmentReceiptInfo and WhseReceiptDefaultLoc with WarehouseDefaultLocation.
--  2019-05-13  DaZase  SCUXXW4-19641, Added initialcheck to all unbounded actions.
--  2019-04-17  bajelk  SCUXXW4-19368, Deleted OrderProcessingTypeDesc attribute from RemoteWhseAssortConnect entity
--                      And added RemoteWhseAssortConnect attribute inside RemoteWhseAssortment entity by Override the entity.
--  2019-02-15  bajelk  SCUXXW4-16026, Deleted objstate attribute inside overrided WarehouseCapabilityValues entity.
--  2019-01-27  bajelk  SCUXXW4-15286, Deleted the "Hidden" status of Storage Capability LOV in Warehouse Values List.
--  2018-11-06  KoDelk  SCUXXW4-6557, Converted from frmInventLocationWarehouse using MTG Version: 1.32
---------------------------------------------------------------------------------
projection InventLocationWarehouseHandling;
component INVENT;
layer Core;
description "Manage Warehouse";
category Users;
include fragment CompanyHavingSiteSelector;
include fragment DropOffLocationSelector;
include fragment ClearStorageCharacteristics;
include fragment RemoteWhseAssortmentLovSelector;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment PersonInfoAllSelector;
include fragment InventoryLocationRemoteWhseSelector;
include fragment WarehouseBayTab;
include fragment InventoryLocationsTab;
include fragment InventoryPartInStockList;
include fragment HandlingUnitsInStockList;
include fragment RemoteWarehousePartsPlanningTab;
@DynamicComponentDependency MSCOM
include fragment UserWarehouseConnectionTab;
@DynamicComponentDependency LOC
include fragment LocationLovSelector;
@DynamicComponentDependency LOC
include fragment LocationPartyAddressLovSelector;
@DynamicComponentDependency PROJ
include fragment ProjectLovSelector;
include fragment ModifyCapacitiesAndConditionsAssistant;
include fragment WarehouseOperativeCapUivInitialCheck;
@DynamicComponentDependency SHPMNT
include fragment ShipmentTypeSelector;
include fragment OrderDeliveryTermLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseSet for Warehouse;
@DynamicComponentDependency DISCOM
entityset WhseShipmentReceiptInfoSet for WhseShipmentReceiptInfo;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Warehouse {
   use attributes = Description, WarehouseTypeId, AvailabilityControlId, RemoteWarehouse, RouteOrder, BinWidthCapacity, BinHeightCapacity, BinDeptCapacity, BinVolumeCapacity, BayCarryingCapacity, RowCarryingCapacity, TierCarryingCapacity, BinCarryingCapacity, BinMinTemperature, BinMaxTemperature, BinMinHumidity, BinMaxHumidity, DropOffLocationNo, TransportFromWhseLevel, TransportToWhseLevel, PutawayMaxBinsPerPart, PutawayZoneRanking, GlobalWarehouseId;
   attribute WarehouseId Text {
      fetch = "warehouse_id";
      label = "Warehouse";
      maxlength = 15;
      format = uppercase;
      required = [true];
      editable = [ETag = null];
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 200;
      required = [true];
   }
   attribute ReceiptsBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Site_Invent_Info_API.Get_Receipts_Blocked_Db(CONTRACT), 'TRUE', 'TRUE', receipts_blocked_db)";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptsBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Receipts_Blocked_Db(CONTRACT)";
      editable = [false];
      insertable = [false];
   }
   attribute ReceiptsBlockedOn Text {
      fetch = "Warehouse_API.Get_Receipts_Blocked_Source(contract, warehouse_id)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
   }
   attribute ReceiptToOccupiedBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Site_Invent_Info_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT), 'TRUE', 'TRUE', receipt_to_occupied_blocked_db)";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute ReceiptToOccupiedBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT)";
      editable = [false];
      insertable = [false];
   }
   attribute ReceiptsToOccBlockedOn Text {
      fetch = "Warehouse_API.Get_Receipt_To_Occup_Blkd_Src(contract, warehouse_id)";
      label = "Receipts Blocked on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute MixOfPartNumberBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Site_Invent_Info_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT), 'TRUE', 'TRUE', mix_of_part_number_blocked_db)";
      label = "Mix of Part Numbers Blocked";
      required = [true];
      editable = [ETag != null];
   }
   attribute MixOfPartNumberBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT)";
      editable = [false];
      insertable = [false];
   }
   attribute MixBlockedOn Text {
      fetch = "Warehouse_API.Get_Mix_Of_Part_Blocked_Source(contract, warehouse_id)";
      label = "Mix Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
   }
   attribute MixOfCondCodesBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Site_Invent_Info_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT), 'TRUE', 'TRUE', mix_of_cond_codes_blocked_db)";
      label = "Mix of Condition Codes Blocked";
      required = [true];
      editable = [ETag != null];
   }
   attribute MixOfCondCodesBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT)";
      editable = [false];
      insertable = [false];
   }
   attribute MixCondCodesBlockedOn Text {
      fetch = "Warehouse_API.Get_Mix_Of_Cond_Blocked_Source(contract, warehouse_id)";
      label = "Mix Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
   }
   attribute MixOfLotBatchNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Site_Invent_Info_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT), 'TRUE', 'TRUE', mix_of_lot_batch_no_blocked_db)";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
      editable = [ETag != null];
   }
   attribute MixOfLotBatchNoBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT)";
      editable = [false];
      insertable = [false];
   }
   attribute MixLotBatchNoBlockedOn Text {
      fetch = "Warehouse_API.Get_Mix_Of_Lot_Blocked_Source(contract, warehouse_id)";
      label = "Mix Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
   }
   attribute ExcludeStorageReqValDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Site_Invent_Info_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT), 'TRUE', 'TRUE', exclude_storage_req_val_db)";
      label = "Exclude Storage Requirement Validation";
      required = [true];
      editable = [ETag != null];
   }
   attribute ExcludeStorageReqValParentDb Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT)";
      editable = [false];
      insertable = [false];
   }
   attribute ValidationExcludedOn Text {
      fetch = "Warehouse_API.Get_Excl_Storage_Req_Val_Src(contract, warehouse_id)";
      label = "Validation Excluded on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute HideInWhseNavigatorDb Boolean("TRUE", "FALSE") {
      fetch = "hide_in_whse_navigator_db";
      label = "Hide in Warehouse Navigator";
      required = [true];
   }
   attribute HiddenLevelsExistBelow Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Is_Hidden_In_Structure_Below(contract, warehouse_id)";
      label = "Hidden Levels Exist Below";
      required = [true];
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Warehouse Value";
      maxlength = 25;
      format = uppercase;
   }
   attribute AutoRefillPutawayZonesDb Boolean("TRUE", "FALSE") {
      fetch = "auto_refill_putaway_zones_db";
      label = "Automatically Refill Putaway Zones";
      required = [true];
   }
   attribute PutawayDestinationDb Boolean("TRUE", "FALSE") {
      fetch = "putaway_destination_db";
      label = "Putaway Destination";
      required = [true];
   }
   attribute RouteOrder Text {
      fetch = "route_order";
      label = "Route Order";
      maxlength = 15;
   }
   attribute BinWidthCapacity Number {
      fetch = "bin_width_capacity";
      label = "Width";
   }
   attribute BinWidthOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Width_Capacity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute BinWidthSource Text {
      fetch = "Warehouse_API.Get_Bin_Width_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute LengthUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
      insertable = [false];
   }
   attribute BinHeightCapacity Number {
      fetch = "bin_height_capacity";
      label = "Height";
   }
   attribute BinHeightOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Height_Capacity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute BinHeightSource Text {
      fetch = "Warehouse_API.Get_Bin_Height_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute BinDeptCapacity Number {
      fetch = "bin_dept_capacity";
      label = "Depth";
   }
   attribute BinDepthOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Dept_Capacity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute BinDepthSource Text {
      fetch = "Warehouse_API.Get_Bin_Dept_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute BinVolumeCapacity Number {
      fetch = "bin_volume_capacity";
      label = "Volume";
   }
   attribute BinVolumeOperativeValue Number {
      fetch = "Warehouse_API.Get_Bin_Volume_Capacity(contract, warehouse_id)";
      label = "Bin Volume Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute BinVolumeSource Text {
      fetch = "Warehouse_API.Get_Bin_Volume_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(contract)";
      label = "Volume UoM";
      maxlength = 100;
      editable = [false];
      insertable = [false];
   }
   attribute BayCarryingCapacity Number {
      fetch = "bay_carrying_capacity";
      label = "Bay";
   }
   attribute BayCarryingCapacityOppValue Number {
      fetch = "Warehouse_API.Get_Bay_Carrying_Capacity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute BayCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Bay_Carry_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
      insertable = [false];
   }
   attribute RowCarryingCapacity Number {
      fetch = "row_carrying_capacity";
      label = "Row";
   }
   attribute RowCarryingCapacityOppValue Number {
      fetch = "Warehouse_API.Get_Row_Carrying_Capacity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute RowCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Row_Carry_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute TierCarryingCapacity Number {
      fetch = "tier_carrying_capacity";
      label = "Tier";
   }
   attribute TierCarryingCapacityOppValue Number {
      fetch = "Warehouse_API.Get_Tier_Carrying_Capacity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute TierCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Tier_Carry_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute BinCarryingCapacity Number {
      fetch = "bin_carrying_capacity";
      label = "Bin";
   }
   attribute BinCarryingCapacityOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Carrying_Capacity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute BinCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Bin_Carry_Capacity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute BinMinTemperature Number {
      fetch = "bin_min_temperature";
      label = "Min Temperature";
   }
   attribute BinMinTemperatureOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Min_Temperature(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute BinMinTemperatureSource Text {
      fetch = "Warehouse_API.Get_Bin_Min_Temperature_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute TemperatureUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
      insertable = [false];
   }
   attribute BinMaxTemperature Number {
      fetch = "bin_max_temperature";
      label = "Max Temperature";
   }
   attribute BinMaxTemperatureOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Max_Temperature(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute MaxTemperatureSource Text {
      fetch = "Warehouse_API.Get_Bin_Max_Temperature_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute BinMinHumidity Number {
      fetch = "bin_min_humidity";
      label = "Min Humidity";
   }
   attribute BinMinHumidityOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Min_Humidity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute MinHumiditySource Text {
      fetch = "Warehouse_API.Get_Bin_Min_Humidity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute HumidityUom Text {
      fetch = "'%'";
      label = "UoM";
      maxlength = 30;
      editable = [false];
      insertable = [false];
   }
   attribute BinMaxHumidity Number {
      fetch = "bin_max_humidity";
      label = "Max Humidity";
   }
   attribute BinMaxHumidityOppValue Number {
      fetch = "Warehouse_API.Get_Bin_Max_Humidity(contract, warehouse_id)";
      label = "Operative Value";
      editable = [false];
      insertable = [false];
   }
   attribute MaxHumiditySource Text {
      fetch = "Warehouse_API.Get_Bin_Max_Humidity_Source(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute DfsMixOfPartsSite Text {
      fetch = "Site_Invent_Info_API.Get_Mix_Of_Parts_Blocked_Db(contract)";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute DfsMixConditionsSite Text {
      fetch = "Site_Invent_Info_API.Get_Mix_Of_Cond_Blocked_Db(contract)";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute RemoteWarehouseDb Boolean("TRUE", "FALSE") {
      fetch = "remote_warehouse_db";
      label = "Remote";
      required = [true];
   }
   attribute DropOffLocationNo Text {
      fetch = "drop_off_location_no";
      label = "Location No";
      maxlength = 35;
      format = uppercase;
   }
   attribute DropOffLocDescription Text {
      fetch = "Inventory_Location_API.Get_Location_Name(contract, drop_off_location_no)";
      editable = [false];
      insertable = [false];
   }

   attribute DropOffWarehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract, drop_off_location_no)";
      label = "Warehouse";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute DropOffBay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract, drop_off_location_no)";
      label = "Bay";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute DropOffRow Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract, drop_off_location_no)";
      label = "Row";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute DropOffTier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract, drop_off_location_no)";
      label = "Tier";
      maxlength = 2000;
      editable = [false];
   }
   attribute DropOffBin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract, drop_off_location_no)";
      label = "Bin";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute TransportFromWhseLevel Enumeration(WarehouseStructureLevel) {
      fetch = "transport_from_whse_level_db";
      label = "From Location By";
   }
   attribute TransportFromWhseLevelOppValue Text {
      label = "Operative Value";
      fetch = "Warehouse_API.Get_Transport_From_Whse_Level(contract, warehouse_id)";
      editable = [false];
      insertable = [false];
   }
   attribute TransportFromWhseLevelSource Text {
      fetch = "Warehouse_API.Get_Trans_From_Whse_Level_Src(contract, warehouse_id)";
      label = "Operative Value Source";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute TransportToWhseLevel Enumeration(WarehouseStructureLevel) {
      fetch = "transport_to_whse_level_db";
      label = "To Location By";
   }
   attribute TransportToWhseLevelOppValue Text {
      label = "Operative Value";
      fetch = "Warehouse_API.Get_Transport_To_Whse_Level(contract, warehouse_id)";
      editable = [false];
      insertable = [false];
   }
   attribute TransportToWhseLevelSource Text {
      fetch = "Warehouse_API.Get_Trans_To_Whse_Level_Src(contract, warehouse_id)";
      label = "Operative Value Source";
      insertable = [false];
      maxlength = 2000;
      editable = [false];
   }
   attribute AppearAsPutawayZoneDb Boolean("TRUE", "FALSE") {
      fetch = "appear_as_putaway_zone_db";
      label = "Appear as Putaway Zone";
      required = [true];
   }
   attribute BayId Text {
      fetch = "NULL";
   }
   attribute RowId Text {
      fetch = "NULL";
   }
   attribute TierId Text {
      fetch = "NULL";
   }
   attribute BinId Text {
      fetch = "NULL";
   }


   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Warehouse Value";
   }
   reference DropOffLocationRef(Contract, DropOffLocationNo) to DropOffLocation(Contract, LocationNo) {
      label = "Location";
   }
   reference WarehouseTypeIdRef(WarehouseTypeId) to WarehouseType(WarehouseTypeId) {
      label = "Warehouse Type";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }


   array WarehouseArray(Contract, WarehouseId) to Warehouse(Contract, WarehouseId);
   array WarehouseHuCapacityArray(Contract, WarehouseId) to WarehouseHuCapacity(Contract, WarehouseId);
   array WarehouseCapabilityValuesArray(Contract, WarehouseId) to WarehouseCapabilityValues(Contract, WarehouseId);
   array WarehouseBinCapabilityOppValuesArray(Contract, WarehouseId) to WarehouseBinCapabilityOppValues(Contract, WarehouseId);
   array RemoteWhseAssortConnectArray(Contract, WarehouseId) to RemoteWhseAssortConnect(Contract, WarehouseId);
   @DynamicComponentDependency DISCOM
   array WhseShipmentReceiptInfoArray(Contract, WarehouseId) to WhseShipmentReceiptInfo(Contract, WarehouseId);
   array WarehouseBayArray(Contract, WarehouseId) to WarehouseBay(Contract, WarehouseId);
   array WarehouseBayBinArray(Contract, WarehouseId) to WarehouseBayBin(Contract, WarehouseId);
   array InventoryPartInStockArray(Contract, WarehouseId) to InventoryPartInStock(Contract, Warehouse);
   array RemoteWarehouseAssortmentPartArray(Contract, WarehouseId) to RemoteWarehouseAssortmentPart(Contract, WarehouseId);
   @DynamicComponentDependency MSCOM
   array UserWarehouseConnectionArray(Contract, WarehouseId) to UserWarehouseConnection(Contract, WarehouseId);
}

@Override
entity WarehouseHuCapacity {
   use attributes = BinHuTypeCapacity;
   attribute Description Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinHuTypeCapacity Number {
      label = "Bin Capacity";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
}
@Override
entity WarehouseCapabilityValues using WarehouseCapability {
   crud = Create, Read, Delete;
   attribute StorageCapabilityId Text {
      label = "Storage Capability ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute RemovedDb Boolean("TRUE", "FALSE") {
      fetch = "removed_db";
      label = "Removed";
      editable = [false];
      required = [true];
   }
   reference StorageCapabilityIdRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability";
   }
}
@Override
entity WarehouseBinCapabilityOppValues using WarehouseCapability {
   crud = Read;
   from = "warehouse_operative_cap_uiv";
   ludependencies = WarehouseCapabilityValues;
   attribute StorageCapabilityId Text {
      label = "Storage Capability ID";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   attribute Source Text {
      fetch = "source";
      label = "Source";
      maxlength = 100;
      editable = [false];
   }
   reference StorageCapabilityIdRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability";
   }
}
@Override
entity RemoteWhseAssortConnect {
   crud = Create, Read, Delete;

   attribute AssortmentId Text {
      fetch = "ASSORTMENT_ID";
      label = "Assortment ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }

   reference AssortmentIdRef(Contract, AssortmentId) to RemoteWhseAssortmentLov(Contract, AssortmentId) {
      label = "Assortment ID";
   }
   reference RemoteWhseAssortmentRef(AssortmentId) to RemoteWhseAssortment(AssortmentId);
}

@Override
entity RemoteWhseAssortment {
   attribute OrderProcessingTypeDesc Text {
      label = "Order Processing Type Desc";
      fetch = "REMOTE_WHSE_ASSORTMENT_API.Get_Order_Processing_Type_Desc(assortment_id)";
      editable = [false];
   }
}

@Override
@DynamicComponentDependency DISCOM
entity WhseShipmentReceiptInfo {
   use attributes = ReceiveCase, AddressType, Company, CompanyAddressId, CustomerId, CustomerAddressId, PersonId, PersonAddressId, SupplierId, SupplierAddressId, GeolocationId, GeolocationAddressId, ProjectId, ProjectAddressId, PickingLeadTime, ExtTransportLeadTime, TransportLeadtime, IntTransportLeadTime, ShipmentType, ForwardAgentId, DeliveryTerms, DelTermsLocation, RouteId, ArrivalRouteId, ShipViaCode;
   attribute ReceiveCaseDb Enumeration(ReceiveCaseEnumeration) {
      fetch = "receive_case_db";
      label = "Default Receive Case for Inventory Part";
   }
   attribute AddressType Enumeration(WarehouseAddressType) {
      label = "Address Type";
   }
   attribute SendAutoDisAdv Boolean("TRUE", "FALSE") {
      fetch = "send_auto_dis_adv_db";
      label = "Send Dispatch Advice Automatically";
      editable = [ETag != null];
      required = [true];
   }

   reference CustomerInfoCustcategoryPubRef(CustomerId) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Identity";
   }
   reference CompanyRef(Company) to Company(Company) {
      label = "Identity";
   }
   reference SupplierInfoRef(SupplierId) to SupplierInfo(SupplierId) {
      label = "Identity";
   }
   reference PersonInfoAllRef(PersonId) to PersonInfoAll(PersonId) {
      label = "Identity";
   }
   @DynamicComponentDependency LOC
   reference GeolocationIdRef(GeolocationId) to Location(LocationId) {
      label = "Identity";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to ProjectLov(ProjectId) {
      label = "Identity";
      where = "Site = :parent.Contract";
   }
   reference CompanyAddressRef(Company, CompanyAddressId) to CompanyAddress(Company, AddressId) {
      label = "Address ID";
   }
   reference CustomerInfoAddressRef(CustomerId, CustomerAddressId) to CustomerInfoAddress(CustomerId, AddressId) {
      label = "Address ID";
   }
   reference SupplierInfoAddressRef(SupplierId, SupplierAddressId) to SupplierInfoAddress(SupplierId, AddressId) {
      label = "Address ID";
   }
   reference PersonInfoAddressRef(PersonId, PersonAddressId) to PersonInfoAddress(PersonId, AddressId) {
      label = "Address ID";
   }
   @DynamicComponentDependency LOC
   reference GeolocationAddressIdRef(GeolocationId, GeolocationAddressId) to LocationPartyAddress(LocationId, AddressInfoId) {
      label = "Address ID";
   }
   @DynamicComponentDependency PROJ
   reference ProjectAddressRef(ProjectId, ProjectAddressId) to ProjectAddress(ProjectId, AddressId) {
      label = "Address ID";
   }
   @DynamicComponentDependency SHPMNT
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ForwarderRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference RouteRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Delivery Route";
   }
   reference ArrivalRouteIdRef(ArrivalRouteId) to DeliveryRoute(RouteId) {
      label = "Arrival Route";
   }
   reference ShipViaRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship Via";
   }

   array DefaultLocationsArray(Contract, WarehouseId) to WarehouseDefaultLocation(Contract, WarehouseId);
}
@Override
@DynamicComponentDependency DISCOM
entity WarehouseDefaultLocation {
   crud = Create, Read, Delete;
   from = "warehouse_default_location";
   use attributes = LocationNo;
   attribute LocationType Enumeration(InventoryLocationType) {
      fetch = "location_type_db";
      label = "Location Type";
      required = [false];
      maxlength = 200;
   }
   attribute LocationGroup Text {
      fetch = "Inventory_Location_API.Get_Location_Group(contract,location_no)";
      label = "Location Group";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationBay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationRow Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationTier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationBin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin";
      maxlength = 2000;
      editable = [false];
   }
   reference LocationNoRef(Contract, WarehouseId, LocationNo) to InventoryLocationRemoteWhse(Contract, WarehouseId, LocationNo) {
      label = "Location No";
   }
}
@Override
entity CompanyAddress {
   attribute AddressId Text {
      label = "Address ID";
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
}
@Override
entity CustomerInfoAddress {
   attribute CustomerId Text {
      label = "Customer ID";
   }
   attribute AddressId Text {
      label = "Address ID";
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
}
@Override
entity SupplierInfoAddress {
   attribute SupplierId Text {
      label = "Supplier ID";
   }
   attribute AddressId Text {
      label = "Address ID";
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
}
@Override
entity PersonInfoAddress {
   attribute PersonId Text {
      label = "Person ID";
   }
   attribute AddressId Text {
      label = "Address ID";
   }
   attribute CountryDesc Text {
      fetch = "country";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
}
@Override
@DynamicComponentDependency LOC
entity LocationPartyAddress {
   from = "location_party_address_pub";
   attribute LocationId Text {
      label = "Geolocation ID";
   }
   attribute AddressInfoId Number {
      label = "Geolocation Address ID";
   }
   attribute CountryDesc Text {
      fetch = "Iso_Country_API.Get_Description(country_code)";
   }
   attribute CountryCode Text {
      fetch = "country_code";
   }
}
@Override
@DynamicComponentDependency PROJ
entity ProjectAddress {
   attribute CountryDesc Text {
      fetch = "Iso_Country_API.Get_Description(country)";
   }
   attribute CountryCode Text {
      fetch = "country";
   }
}
@Override
entity Company {
   attribute AuthorizationId Text {
      label = "Authorization ID";
   }
   attribute AuthIdExpireDate Date {
      label = "Authorization ID Expire Date";
   }
   attribute IdentifierRefValidation Enumeration(IdentifierRefValidation) {
      label = "ID Reference Validation";
   }
}
------------------------------- ENUMERATIONS --------------------------------
enumeration ReceiveCaseEnumeration {
   value = "INVDIR" {
      identifier = "ReceiveIntoInventory";
      label = "Receive into Inventory";
   }
   value = "ARRPUT" {
      identifier = "RcvIntoArrPerfPutaway";
      label = "Receive into Arrival, Perform Putaway";
   }
   value = "ARRINV" {
      identifier = "ReceiveIntoArrival";
      label = "Receive into Arrival";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action RemoveCapability {
   initialcheck implementation;
   ludependencies = WarehouseCapability;

   parameter Selection Text;
}


--------------------------------- FUNCTIONS ---------------------------------
function GetWarehouseValuesState List<Entity(StorageCapability)> {
   where = "objstate = 'Active'";
}
function GetRouteConnectForwarder Text {
   parameter RouteId Text;
}

function GetInitContextData Structure(InitContextStructure) {
   parameter Source Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure InitContextStructure {
   attribute WindowTitle Text;
   attribute Destination Text;
}

--------------------------------- VIRTUALS ----------------------------------
@Override
virtual CapacitiesAndConditionsVirtual {
   action SaveCapacityAndConditions {
      ludependencies = Warehouse;
   }
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
