----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-08-28  ChFolk  SCUXXW4-23117, Used Enumeration for FreezeFlag instead of Boolean.
-- 2019-07-26  ChFolk  SCUXXW4-22798, Modified project information and removed some attributes with get methods to increase performance.
-- 2018-08-17  milise  SCUXXW4-6226, Added keys.
-- 2018-06-05  SuDelk  SCUXXW4-6226, Converted from frmInventoryPartLocation using MTG Version: 1.17
----------------------------------------------------------------------------------------------------------
projection QuantityPerLocationDetailsAnalysis;
component INVENT;
layer Core;
description "Use this API to view details about a particular part at a particular location";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InventoryPartInStocks for InventoryPartInStock;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartInStock {
   crud = Read;
   keys = PartNo, Contract, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and CONFIGURATION_ID =:ConfigurationId and LOCATION_NO =:LocationNo and LOT_BATCH_NO =:LotBatchNo and SERIAL_NO =:SerialNo and ENG_CHG_LEVEL =:EngChgLevel and WAIV_DEV_REJ_NO =:WaivDevRejNo and ACTIVITY_SEQ =:ActivitySeq and HANDLING_UNIT_ID =:HandlingUnitId";
   }
   attribute PartNo Text {
      maxlength = 100;
   }
   attribute UoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT,PART_NO)";
      label = "UoM";
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute ReceiptDate Date {
      editable = [false];
   }
   attribute LastCountDate Date {
      editable = [false];
   }
   attribute NextCountDate Date {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Next_Count_Date(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO,ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Next Count Date";
      editable = [false];
   }
   attribute LastActivityDate Date {
      required = [true];
   }
   attribute LocationTypeDb Text {
      fetch = "LOCATION_TYPE_DB";
      maxlength = 20;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      label = "Handling Unit Type ID";
      maxlength = 100;
      editable = [false];
   }
   attribute Sscc Text {
      fetch = "Handling_Unit_API.Get_Sscc(HANDLING_UNIT_ID)";
      label = "SSCC";
      maxlength = 100;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code (PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 100;
      editable = [false];
   }
   attribute Owner Text {
      fetch = "NVL(OWNING_CUSTOMER_NO, OWNING_VENDOR_NO)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "INVENTORY_PART_IN_STOCK_API.Get_Owner_Name(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Alt_Handling_Unit_Label_Id(HANDLING_UNIT_ID)";
      label = "Alt Handling Unit Label ID";
   }
   attribute FreezeFlag Enumeration(GenYesNo) {
      fetch = "freeze_flag_db";
      label = "Frozen for Counting";
      required = [true];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "AVAILABILITY_CONTROL_ID";
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
}
