-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-12-12  JaThlk  SCXTEND-1872, Removed InventoryPart as the home to avoid navigating to Inventory Part Planning Data instead of Inventory Part page.
-- 2019-11-13  FRBESE  SCXTEND-1158, Changed InventoryPartPlanningDataNavEntry navigator entry index.
-- 2019-11-04  NiAslk  SCXTEND-1218, Added startup mode as search.
-- 2019-06-22  AwWelk  SCUXXW4-21511, Added label for command group ExportReportsCommandGroup.
-- 2019-03-09  ShKolk  SCUXXW4-6241, Converted from frmInventoryPartPlanning using MTG Version: 1.34
-----------------------------------------------------------------------------
client InventoryPartPlanningData;
component INVENT;
layer Core;
projection InventoryPartPlanningDataHandling;

--------------------------------- FRAGMENTS ---------------------------------
@DynamicComponentDependency INVPLA
include fragment InventoryPartReplenishmentRefresh;
@DynamicComponentDependency INVPLA
include fragment IPRParametersTab;
@DynamicComponentDependency MFGSTD
include fragment StrategicSafeStockPart;
@DynamicComponentDependency MRP
include fragment DdmrpBufferPartAttrib;

warningsenabled = InventoryPartPlanning;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry InventoryPartPlanningDataNavEntry parent InventNavigator.WarehouseManagementPart at index 350 {
      label = "Inventory Part Planning Data";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using InventoryPartSet {
   label = "Inventory Part Planning Data";
   startupmode = search;
   selector InventoryPartSelector;
   group HeaderGroup;
   tabs {
      tab {
         label = "General";
         singleton InventoryPartPlanningSingleton(InventoryPartPlanningArray);
         group PartPlanningInfoGroup bind InventoryPartPlanningSingleton;
         arrange {
            group AutoUpdateGroup bind InventoryPartPlanningSingleton;
            group LotSizeGroup bind InventoryPartPlanningSingleton;
         }
         arrange {
            group ManufacturedAcquiredSplitGroup bind InventoryPartPlanningSingleton;
            group DemandPlanningGroup bind InventoryPartPlanningSingleton;
         }
         singleton InventoryPartPlanningMatrixSingleton(InventoryPartPlanningArray);
         markdowntext bind InventoryPartPlanningMatrixSingleton {
            text =
            "|                        | Part Value     | Operative Value                  | Operative Value Source    |
            |-------------------------|---------------:|---------------------------------:|---------------------------|
            | Inventory Interest (%): | ${CarryRate}   | ${HierarchyInvInterestRate}      | ${InvInterestRateSource}  |
            | Ordering Cost:          | ${SetupCost}   | ${OrderingCostFromHierarchy}     | ${OrderingCostSource}     |
            | Service Rate (%):       | ${ServiceRate} | ${ServiceLevelRateFromHierarchy} | ${ServiceLevelRateSource} |";
         }
         group PlanningHierarchyMatrixGroup {
            visible = [false];
         }
      }
      @DynamicComponentDependency INVPLA
      tab {
         label = "IPR Parameters";
         visible = [IPRActive and PlanningMethod in("A", "B", "D", "E", "F", "G", "M")];
         singleton InventoryPartInvplaInfoSingleton(InventoryPartInvplaInfoArray);
         markdowntext bind InventoryPartInvplaInfoSingleton {
            text =
            "|                             | Part Value               | Operative Value                         | Operative Value Source           |
            |------------------------------|--------------------------|-----------------------------------------|----------------------------------|
            | Demand Model:                | ${DemandModel}           | ${HierarchyDemandModel}                 | ${DemandModelSource}             |
            | Safety Stock Model:          | ${SafetyStockModel}      | ${SafetyStockModelFromHierarchy}        | ${SafetyStockModelSource}        |
            | Lot Size Model:              | ${LotSizeModel}          | ${LotsizeModelFromHierarchy}            | ${LotSizeModelSource}            |
            | Order Point Model:           | ${OrderPointModel}       | ${OrderPointModelFromHierarchy}         | ${OrderPointModelSource}         |
            | Lot Size Cover Time:         | ${LotSizeCoverTime}      | ${LotSizeCoverTimeFromHierarchy}        | ${LotSizeCoverTimeSource}        |
            | Safety Stock Cover Time:     | ${SafetyStockCoverTime}  | ${SafetyStockCoverTimeFromHierarchy}    | ${SafetyStockCoverTimeSource}    |
            | Max Order Cover Time:        | ${MaxOrderCoverTime}     | ${MaxOrderCoverTimeFromHierarchy}       | ${MaxOrderCoverTimeSource}       |
            | Max Safety Stock Cover Time: | ${MaxSafetyStkCoverTime} | ${MaxSafetyStockCoverTimeFromHierarchy} | ${MaxSafetyStockCovertimeSource} |
            | Lead Time Factor:            | ${LeadTimeFactor}        | ${LeadTimeFactorFromHierarchy}          | ${LeadTimeFactorSource}          |
            | Absolute Max Capacity:       | ${AbsoluteMaxCapacity}   | ${HierarchyAbsoluteMaxCapacity}         | ${AbsoluteMaxCapacitySource}     |";
         }
         group InvplaPlanningHierarchyMatrixGroup {
            visible = [false];
         }
         arrange {
            group DemandDeviationAnalysisGroup bind InventoryPartInvplaInfoSingleton;
            group InventoryPartInvplaInfoGroup bind InventoryPartInvplaInfoSingleton;
         }
      }
      @DynamicComponentDependency MFGSTD
      tab {
         label = "Time Phased Safety Stocks";
         visible = [not PlanningMethod in("H", "K", "P")];
         list TimePhasedSafetyStockSmallList(StrategicSafeStockPartArray);
      }
      @DynamicComponentDependency MRP
      tab {
         label = "Buffer Part Attributes";
         visible = [PlanningMethod = "H"];
         singleton DdmrpBufferPartAttribSingleton(DdmrpBufferPartAttribArray);
         group GbAutoUpdateGroup bind DdmrpBufferPartAttribSingleton;
         arrange {
            group GbDemanDrivenPlanningGroup bind DdmrpBufferPartAttribSingleton;
            group GbDemandDeviationAnalysisGroup bind DdmrpBufferPartAttribSingleton;
            group GbBufferZonesGroup bind DdmrpBufferPartAttribSingleton;
            funnelchart ZoneQtyChart(DdmrpZoneChartDataArray);
         }
      }
   }
   @DynamicComponentDependency INVPLA
   commandgroup CommandGroup {
      commandgroup IPRCommandGroup {
         label = "IPR";
         command RefreshIPRCommand;

         commandgroup ExportReportsCommandGroup {
            label = "Export Reports";
            command ExportStandardCommand;
            command ExportSimulatedCommand;
            command ExportSiteCommand;
         }
      }
   }
   @DynamicComponentDependency MRP
   command BufferPartAttribLogs;
   @DynamicComponentDependency MRP
   command CalcBufferPartAttributes;
}

-------------------------------- ASSISTANTS ---------------------------------
assistant EditPlanningHierarchyAssistant using EditPlanningHierarchyVirtualSet {
   label = "Planning Hierarchy";
   savemode = OnLostFocus;
   input(Contract, PartNo, PlanningMethod);
   singlestep {
      group EditPlanningHierarchyInventoryInterestGroup;
      group EditPlanningHierarchyOrderingCostGroup;
      group EditPlanningHierarchyServiceRateGroup;
   }
   command Ok;
   command Cancel {
      execute {
         exit CANCEL;
      }
   }
}

--------------------------------- COMMANDS ----------------------------------
command EditPlanningHierarchyCommand for InventoryPartPlanning {
   label = "Planning Hierarchy";
   icon = "edit";
   style = IconAndText;
   enabled = [true];
   execute {
      assistant EditPlanningHierarchyAssistant(Contract, PartNo, PlanningMethod) {
         when OK {
            success("Planning Hierarchy has been saved.");
         }
      }
   }
}

command Ok for EditPlanningHierarchyVirtual {
   label = "OK";
   enabled = [true];
   execute {
      call SavePlanningHierarchy();
      exit OK;
   }
}

@DynamicComponentDependency MRP
command BufferPartAttribLogs for InventoryPart {
   label = "Buffer Part Attributes Log";
   enabled = [LogsExist = true and PlanningMethod = "H"];
   execute {
      navigate "/page/BufferPartsAttributesLog/List?$filter=Contract eq $[Contract] and PartNo eq $[PartNo]";
   }
}
@DynamicComponentDependency MRP
command CalcBufferPartAttributes for InventoryPart {
   label = "Calculate Buffer Part Attributes";
   enabled = [PlanningMethod = "H"];
   execute {
      messagebox("", question, "Would you like to perform calculations for parents of part ${PartNo} in site ${Contract} as well?") {
         when "Yes" {
            call PartSetAsBuffered(Contract, PartNo, "Y");
         }
         when "No" {
            call PartSetAsBuffered(Contract, PartNo, "N");
         }
         when "Cancel" {
            exit;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryPartSelector for InventoryPart {
   label = "${PartNo} - ${InventoryPartRef.Description}";
   static Contract;
   static PartNo;
   static InventoryPartRef.Description;
   fieldorder = PartNo, InventoryPartRef.Description, Contract;
}

singleton InventoryPartPlanningSingleton for InventoryPartPlanning {
   crudactions {
      edit {
         enabled = [true];
      }
   }
}
singleton InventoryPartPlanningMatrixSingleton for InventoryPartPlanning {
   command EditPlanningHierarchyCommand;
}

@DynamicComponentDependency MRP
singleton DdmrpBufferPartAttribSingleton for DdmrpBufferPartAttrib {
   crudactions {
      edit {
         visible = [false];
      }
      after command Refresh;
   }
}

---------------------------------- GROUPS -----------------------------------
group HeaderGroup for InventoryPart {
   label = "";
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      description = InventoryPartRef.Description;
   }
   field SiteInventInfoRef;
}

group PartPlanningInfoGroup for InventoryPartPlanning {
   label = "Part Planning Info";
   lov PlanningMethodRef with ReferenceInvPartPlanningMethodSelector {
      size = FullWidth;
      description = PlanningMethodRef.Description;
   }
   field SafetyStock {
      editable = [not PlanningMethod in("H", "K", "O", "T", "S")];
      searchable = false;
   }
   field SafetyLeadTime {
      editable = [not PlanningMethod in("B", "C", "H", "K", "O", "T", "P")];
      validate command {
         execute {
            if [SafetyLeadTime < 0] {
               info("Safety Lead Time must be an integer greater than zero.");
            }
         }
      }
   }
   field OrderPointQty {
      editable = [PlanningMethod in("B", "C")];
   }
   field LotSize {
      editable = [PlanningMethod in("B", "C")];
   }
   field MaxweekSupply {
      editable = [PlanningMethod in("G")];
      searchable = false;
   }
   field QtyPredictedConsumption {
      editable = [not PlanningMethod in("S")];
      searchable = false;
   }
   field ProposalRelease;
   field OrderRequisition {
      editable = [not PlanningMethod in("S")];
      searchable = false;
   }
   field SchedCapacity;
   field LastActivityDate;
}

group LotSizeGroup for InventoryPartPlanning {
   label = "Lot Size";
   field MinOrderQty {
      size = Small;
      editable = [not PlanningMethod in("O", "T", "S")];
      searchable = false;
   }
   field MaxOrderQty {
      size = Small;
      editable = [not PlanningMethod in("K", "O", "T", "S")];
      searchable = false;
   }
   field MulOrderQty {
      size = Small;
      editable = [not PlanningMethod in("O", "T", "S")];
      searchable = false;
   }
   field ShrinkageFac {
      size = Small;
      searchable = false;
   }
   field StdOrderSize {
      size = Small;
      searchable = false;
   }
}

group AutoUpdateGroup for InventoryPartPlanning {
   label = "Auto Update";
   field PlanningMethodAutoDb {
      size = Small;
      editable = [PlanningMethod in("A", "B")];
      searchable = false;
   }
   field SafetyStockAuto {
      size = Small;
      editable = [(not PlanningMethod in("H", "K", "O", "T", "S")) or(PlanningMethod = "B" and not IPRActive)];
      searchable = false;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field OrderPointQtyAuto {
      size = Small;
      editable = [(PlanningMethod = "B" and(not IPRActive)) or PlanningMethod = "C"];
      searchable = false;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field LotSizeAuto {
      size = Small;
      editable = [(PlanningMethod = "B" and(not IPRActive)) or PlanningMethod = "C"];
      searchable = false;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
}

group ManufacturedAcquiredSplitGroup for InventoryPartPlanning {
   label = "Manufactured/Acquired Split";
   field SplitManufAcquired {
      size = FullWidth;
      required = [true];
      searchable = false;
      enumerationtrue = "Split";
      enumerationfalse = "NoSplit";
      validate command {
         execute {
            if [SplitManufAcquired = "Split"] {
               set PercentManufactured = null;
               set PercentAcquired = null;
            }
         }
      }
   }
   field PercentManufactured {
      size = Small;
      editable = [SplitManufAcquired = "Split"];
   }
   field ManufSupplyType {
      editable = [SplitManufAcquired = "Split"];
   }
   field PercentAcquired {
      size = Small;
      editable = [SplitManufAcquired = "Split"];
   }
   field AcquiredSupplyType {
      editable = [SplitManufAcquired = "Split"];
   }
}

group DemandPlanningGroup for InventoryPartPlanning {
   label = "Demand Planning";
   field TransactionStartDate {
      size = Small;
   }
   field PhaseInDate {
      size = Small;
   }
   field PhaseOutDate {
      size = Small;
   }
   field ServiceLevel {
      size = Small;
   }
   field FillRateService {
      size = Small;
   }
   field ForecastPartExist {
      size = FullWidth;
   }
}

group EditPlanningHierarchyInventoryInterestGroup for EditPlanningHierarchyVirtual {
   label = "Inventory Interest (%)";
   visible = [not PlanningMethod in("S")];
   field CarryRate {
      label = "Part Value";
      size = Small;
      editable = [not PlanningMethod in("S")];
   }
   field HierarchyInvInterestRate {
      label = "Operative Value";
      size = Small;
   }
   field InvInterestRateSource {
      label = "Operative Value Source";
      size = Small;
   }
}

group EditPlanningHierarchyOrderingCostGroup for EditPlanningHierarchyVirtual {
   label = "Ordering Cost";
   visible = [PlanningMethod in("B", "C", "E", "F")];
   field SetupCost {
      label = "Part Value";
      size = Small;
      editable = [PlanningMethod in("B", "C", "E", "F")];
   }
   field OrderingCostFromHierarchy {
      label = "Operative Value";
      size = Small;
   }
   field OrderingCostSource {
      label = "Operative Value Source";
      size = Small;
   }
}

group EditPlanningHierarchyServiceRateGroup for EditPlanningHierarchyVirtual {
   label = "Service Rate (%)";
   visible = [not PlanningMethod in("S")];
   lov ServiceRateRef with ReferenceServiceRateSelector {
      label = "Part Value";
      size = Small;
      editable = [not PlanningMethod in("S")];
   }
   field ServiceLevelRateFromHierarchy {
      label = "Operative Value";
      size = Small;
   }
   field ServiceLevelRateSource {
      label = "Operative Value Source";
      size = Small;
   }
}

group PlanningHierarchyMatrixGroup for InventoryPartPlanning {
   field CarryRate;
   field HierarchyInvInterestRate;
   field InvInterestRateSource;
   field SetupCost;
   field OrderingCostFromHierarchy;
   field OrderingCostSource;
   field ServiceRate;
   field ServiceLevelRateFromHierarchy;
   field ServiceLevelRateSource;
}

----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
