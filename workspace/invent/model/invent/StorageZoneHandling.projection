----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-06-11  SBalLK  SCUXXW4-22255, Removed GenerateWhereStatement() method and changed to generate SQL where statement in the server logic while insert new record for avoid SQL Injections.
-- 2019-06-06  ChFolk  SCUXXW4-18341, Added functions GetWarehouseIds, GetBayIds, GetRowIds, GetTierIds and GetBinIds.
-- 2019-05-31  ChFolk  SCUXXW4-18341, Modified StorageZoneDetail to support multireference.
-- 2019-03-12  ChFolk  SCUXXW4-6482 Converted frmStorageZone using  MTG Version: 1.34.
----------------------------------------------------------------------------------------------------------
projection StorageZoneHandling;
component INVENT;
layer Core;
description "Use this API to define storage zones for inventory parts. A storage zone gathers a freely selected group(s) of storage bins within a site into zones and is entered using the levels in the warehouse navigator.";
category Users;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset StorageZoneSet for StorageZone;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity StorageZone {
   crud = Create, Read, Update, Delete;
   from = "storage_zone";
   exec = "Storage_Zone_API";
   keys = StorageZoneId, Contract {
      where = "STORAGE_ZONE_ID = :StorageZoneId and CONTRACT = :Contract";
   }
   use attributes = Description;
   attribute StorageZoneId Text {
      fetch = "storage_zone_id";
      label = "Storage Zone ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 200;
      required = [true];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";

   }
   array StorageZoneDetailArray(StorageZoneId, Contract) to StorageZoneDetail(StorageZoneId, Contract);
}
@Override
entity StorageZoneDetail {
   crud = Create, Read, Delete;
   ludependencies = StorageZone;
   from = "storage_zone_detail";
   exec = "Storage_Zone_Detail_API";
   keys = Contract, StorageZoneId, SequenceNo {
      where = "CONTRACT = :Contract and STORAGE_ZONE_ID = :StorageZoneId and SEQUENCE_NO = :SequenceNo";
   }
   use attributes = WarehouseId, BayId, RowId, TierId, BinId, SqlWhereExpression;

   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute StorageZoneId Text {
      fetch = "storage_zone_id";
      label = "Storage Zone ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SequenceNo Number {
      fetch = "sequence_no";
      label = "Sequence No";
      editable = [false];
   }
   attribute WarehouseId Text {
      fetch = "warehouse_id";
      label = "Warehouse";
      maxlength = 200;
      editable = [ETag = null];
   }
   attribute BayId Text {
      fetch = "bay_id";
      label = "Bay";
      maxlength = 200;
      editable = [ETag = null];
   }
   attribute RowId Text {
      fetch = "row_id";
      label = "Row";
      maxlength = 200;
      editable = [ETag = null];
   }
   attribute TierId Text {
      fetch = "tier_id";
      label = "Tier";
      maxlength = 200;
      editable = [ETag = null];
   }
   attribute BinId Text {
      fetch = "bin_id";
      label = "Bin";
      maxlength = 200;
      editable = [ETag = null];
   }
   attribute SqlWhereExpression Text {
      fetch = "sql_where_expression";
      label = "SQL Where Expression";
      maxlength = 2000;
   }
   reference WarehouseIdRef(Contract, WarehouseId) to Warehouse(Contract, WarehouseId) {
      label = "Warehouse";
      multireference = [true];
   }
   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBay(Contract, WarehouseId, BayId) {
      label = "Bay";
      multireference = [true];
   }
   reference RowIdRef(Contract, WarehouseId, BayId, RowId) to WarehouseBayRow(Contract, WarehouseId, BayId, RowId) {
      label = "Row";
      multireference = [true];
   }
   reference TierIdRef(Contract, WarehouseId, BayId, TierId) to WarehouseBayTier(Contract, WarehouseId, BayId, TierId) {
      label = "Tier";
      multireference = [true];
   }
   reference BinIdRef(Contract, WarehouseId, BayId, TierId, RowId, BinId) to WarehouseBayBin(Contract, WarehouseId, BayId, TierId, RowId, BinId) {
      label = "Bin";
      multireference = [true];
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function GetWarehouseIds List<Entity(Warehouse)> {
   parameter Contract Text;
   where = "(Report_SYS.Parse_Parameter(contract, :Contract) = 'TRUE' OR :Contract IS NULL)";
}

function GetBayIds List<Entity(WarehouseBay)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   where = "(Report_SYS.Parse_Parameter(contract, :Contract) = 'TRUE' OR :Contract IS NULL) AND
            (Report_SYS.Parse_Parameter(warehouse_id, :WarehouseId) = 'TRUE' OR :WarehouseId IS NULL)";
}
function GetRowIds List<Entity(WarehouseBayRow)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   where = "(Report_SYS.Parse_Parameter(contract, :Contract) = 'TRUE' OR :Contract IS NULL) AND
   (Report_SYS.Parse_Parameter(warehouse_id, :WarehouseId) = 'TRUE' OR :WarehouseId IS NULL) AND
   (Report_SYS.Parse_Parameter(bay_id, :BayId) = 'TRUE' OR :BayId IS NULL)";
}
function GetTierIds List<Entity(WarehouseBayTier)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   where = "(Report_SYS.Parse_Parameter(contract, :Contract) = 'TRUE' OR :Contract IS NULL) AND
   (Report_SYS.Parse_Parameter(warehouse_id, :WarehouseId) = 'TRUE' OR :WarehouseId IS NULL) AND
   (Report_SYS.Parse_Parameter(bay_id, :BayId) = 'TRUE' OR :BayId IS NULL)";
}

function GetBinIds List<Entity(WarehouseBayBin)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter TierId Text;
   parameter RowId Text;
   where = "(Report_SYS.Parse_Parameter(contract, :Contract) = 'TRUE' OR :Contract IS NULL) AND
   (Report_SYS.Parse_Parameter(warehouse_id, :WarehouseId) = 'TRUE' OR :WarehouseId IS NULL) AND
   (Report_SYS.Parse_Parameter(bay_id, :BayId) = 'TRUE' OR :BayId IS NULL) AND
   (Report_SYS.Parse_Parameter(tier_id, :TierId) = 'TRUE' OR :TierId IS NULL) AND
   (Report_SYS.Parse_Parameter(row_id, :RowId) = 'TRUE' OR :RowId IS NULL)";
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

