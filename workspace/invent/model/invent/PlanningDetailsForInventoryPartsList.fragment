--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-06-15  JaThlk  SC21R2-1470, Obsoleted SetLifecycleToMatureCommand and the relevant action, ModifyLifecycleStage since
-- 2021-06-15          the lifecycle stage can be changed in the inventory part page itself.
-- 2019-05-21  DaZase  SCUXXW4-19683, Added initialcheck to all unbounded actions.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-11-12  milise  SCUXXW4-6920, Converted from tbwInventoryPartPlanningOverview using MTG Version: 1.32
--------------------------------------------------------------------------------------

fragment PlanningDetailsForInventoryPartsList;
component INVENT;
layer Core;
description "This fragment contains the entity and list for Planning Details For Inventory Parts ";
include fragment IntorderPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment InventoryPartPlanningInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- MAIN PAGES ---------------------------------


--------------------------------- COMMANDS ----------------------------------
command InventoryPartCommand for InventoryPartPlanning {
   label = "Inventory Part";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/InventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}

----------------------------------- LISTS -----------------------------------

list InventoryPartPlanningOverviewList for InventoryPartPlanning {
   lov PartNoRef with ReferenceIntorderPartLovSelector {
      label = "Part";
      description = PartNoRef.Description;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;

   }
   field InventoryPartRef.UnitMeas {
      label = "UoM";
      size = Small;
   }
   lov PlannerRef with ReferenceInventoryPartPlannerLovSelector {
      editable = [false];
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   lov PlanningMethodRef with ReferenceInvPartPlanningMethodSelector {
      size = Small;
      validate command {
         execute {
            call GetDescription(PlanningMethod) into PlanningMethodDescription;
         }
      }
   }

   field PlanningMethodRef.Description {
      size = Large;
   }
   field PlanningMethodAutoDb {
      size = Small;
   }
   field MinOrderQty {
      editable = [PlanningMethod != "O" and PlanningMethod != "T" and PlanningMethod != "S"];
      size = Small;
   }
   field MaxOrderQty {
      editable = [PlanningMethod != "O" and PlanningMethod != "T" and PlanningMethod != "S"];
      size = Small;
   }
   field MulOrderQty {
      editable = [PlanningMethod != "O" and PlanningMethod != "T" and PlanningMethod != "S"];
      size = Small;
   }
   field ShrinkageFac {
      size = Small;
   }
   field StdOrderSize {
      size = Small;
   }
   field QtyPredictedConsumption {
      editable = [PlanningMethod != "S"];
      size = Small;
   }
   field CarryRate {
      editable = [PlanningMethod != "S"];
      size = Small;
   }
   field InvInterestOperativeValue {
      size = Small;
   }
   field InvInterestSource;
   field ServiceRateRef {
      editable = [PlanningMethod != "S"];
      size = Small;
   }
   field ServiceRateOperativeValue {
      size = Small;
   }
   field ServiceRateSource;
   field SetupCost {
      editable = [PlanningMethod = "B" or PlanningMethod = "C" or PlanningMethod = "E" or PlanningMethod = "F"];
      size = Small;
   }
   field OrderingCostOperativeValue {
      size = Small;
   }
   field OrderingCostSource {
      size = Small;
   }
   field SafetyStock {
      editable = [PlanningMethod != "O" and PlanningMethod != "T" and PlanningMethod != "S" and PlanningMethod != "K"];
      size = Small;
   }
   field OldSafetyStock {
      size = Small;
   }
   field SafetyStockChange {
      size = Small;
   }
   field SafetyLeadTime {
      size = Small;
      editable = [PlanningMethod != "B" and PlanningMethod != "C" and PlanningMethod != "H" and PlanningMethod != "K" and PlanningMethod != "O" and PlanningMethod != "P" and PlanningMethod != "T"];
      validate command {
         execute {
            if [SafetyLeadTime < 0] {
               info("Safety Lead Time must be an integer greater than zero.");
            }
         }
      }
   }
   field SafetyStockAutoDb {
      editable = [PlanningMethod != "O" and PlanningMethod != "T" and PlanningMethod != "S" and PlanningMethod != "K" and PlanningMethod != "B"];
      size = Small;
   }
   field OrderPointQty {
      editable = [PlanningMethod = "B" or PlanningMethod = "C"];
      size = Small;
   }
   field OldOrderPointQty {
      size = Small;
   }
   field OrderPointChange {
      size = Small;
   }
   field OrderPointQtyAutoDb {
      editable = [PlanningMethod != "B"];
      size = Small;
   }
   field LotSize {
      size = Small;
      editable = [PlanningMethod = "B" or PlanningMethod = "C"];
   }
   field OldLotSize {
      size = Small;
   }
   field LotSizeChange {
      size = Small;
   }
   field LotSizeAutoDb {
      size = Small;
      editable = [PlanningMethod != "B"];
   }
   field MaxweekSupply {
      size = Small;
      editable = [PlanningMethod = "G"];
   }
   field ProposalRelease {
      size = Small;
   }
   field OrderRequisition {
      size = Small;
      editable = [PlanningMethod != "S"];
   }
   field LastActivityDate;
   @DynamicComponentDependency INVPLA
   field DemandModel {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field DemandModelSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field SafetyStockModel {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field SafetyStockModelSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field LotSizeModel {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field LotSizeModelSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field OrderPointModel {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field OrderPointModelSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field LotSizeCoverTime {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field LotSizeCoverTimeSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field SafetyStockCoverTime {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field SafetyStockCoverTimeSource;
   @DynamicComponentDependency INVPLA
   field MaxOrderCoverTime {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field MaxOrderCoverTimeSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field MaxSafetyStockCoverTime {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field MaxSafetyStockCoverTimeSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field LeadTimeFactor {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field LeadTimeFactorSource {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field InventoryPartInvplaInfoRef.OrderCycleTime {
      size = Small;
      label = "Order Cycle Time";
   }
   @DynamicComponentDependency INVPLA
   field InventoryPartInvplaInfoRef.StdDevIssuesInLeadtime {
      size = Small;
      label = "Std Dev Issues in Lead Time";
   }
   @DynamicComponentDependency INVPLA
   field InventoryPartInvplaInfoRef.NumOfIssuesInLeadtime {
      size = Small;
      label = "No Of Issues in Lead Time";
   }
   @DynamicComponentDependency INVPLA
   field InventoryPartInvplaInfoRef.AvgIssuedQtyInLeadtime {
      size = Small;
      label = "Avg Qty per Issue";
   }
   field SeasonalDemandPattern {
      size = Small;
   }
   @DynamicComponentDependency INVPLA
   field EstimatedYearlyDemand {
      size = Small;
      editable = [PlanningMethod = "B" or PlanningMethod = "C"];
   }
   field InventoryPartRef.AbcClass {
      size = Small;
      label = "ABC Class";
   }
   field InventoryPartRef.FrequencyClass {
      size = Small;
      label = "Frequency Class";
   }
   field InventoryPartRef.LifecycleStage {
      size = Small;
      label = "Lifecycle Stage";
   }
   field InventoryPartRef.DeclineIssueCounter {
      size = Small;
      label = "No. of Issues for Decline";
   }
   field InventoryPartRef.ExpiredIssueCounter {
      size = Small;
      label = "Number of Issues for Expired";
   }
   field InventoryPartRef.DeclineDate {
      label = "Declined Date";
   }
   field InventoryPartRef.ExpiredDate {
      label = "Expired Date";
   }

   fieldranking PartNoRef, ContractRef, PlanningMethodRef, PlanningMethodAutoDb, MinOrderQty, MaxOrderQty, MulOrderQty, ShrinkageFac, StdOrderSize, SafetyStock;

   command InventoryPartCommand;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
// To be included when fragments in fragments is supported.
//include fragment InventoryPartPlannerLovSelector;
//include fragment UserAllowedSiteLovSelector;
//include fragment IntorderPartLovSelector;

entityset InventoryPartPlanningSet for InventoryPartPlanning;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartPlanning {
   crud = Read, Update;
   keys = PartNo, Contract {
      where = "PART_NO = :PartNo and CONTRACT = :Contract";
   }
   use attributes = PlanningMethod, MinOrderQty, MaxOrderQty, MulOrderQty, ShrinkageFac, StdOrderSize, QtyPredictedConsumption, CarryRate, ServiceRate, SetupCost, SafetyStock, OldSafetyStock, SafetyLeadTime, OrderPointQty, OldOrderPointQty, LotSize, OldLotSize, MaxweekSupply, ProposalRelease, OrderRequisition, LastActivityDate;

   attribute PlanningMethod Text {
      format = uppercase;
   }
   attribute PlanningMethodAutoDb Boolean("TRUE", "FALSE") {
      fetch = "planning_method_auto_db";
      label = "Auto Update Planning Method";
      required = [true];
   }
   attribute ShrinkageFac Number {
      label = "Scrap Factor (%)";
      maxlength = 3;
   }
   attribute QtyPredictedConsumption Number {
      label = "Pred Year Consump Qty";
   }
   attribute CarryRate Number {
      label = "Inv Interest (%)";
   }
   attribute InvInterestOperativeValue Text {
      fetch = "Inventory_Part_Planning_API.Get_Inventory_Interest_Rate(contract, part_no)";
      label = "Inv Interest Operative Value";
      maxlength = 100;
      editable = [false];
   }
   attribute InvInterestSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Planning_API.Get_Inv_Interest_Rate_Source(contract, part_no))";
      label = "Inv Interest Source";
      editable = [false];
   }
   attribute ServiceRate Number {
      label = "Service Rate (%)";
   }
   attribute ServiceRateOperativeValue Text {
      fetch = "Inventory_Part_Planning_API.Get_Service_Level_Rate(contract, part_no)";
      label = "Service Rate Operative Value";
      maxlength = 100;
      editable = [false];
   }
   attribute ServiceRateSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Planning_API.Get_Service_Level_Rate_Source(contract, part_no))";
      label = "Service Rate Source";
      editable = [false];
   }
   attribute SetupCost Number {
      maxlength = 11;
   }
   attribute OrderingCostOperativeValue Text {
      fetch = "Inventory_Part_Planning_API.Get_Ordering_Cost(contract, part_no)";
      label = "Ordering Cost Operative Value";
      maxlength = 100;
      editable = [false];
   }
   attribute OrderingCostSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Planning_API.Get_Ordering_Cost_Source(contract, part_no))";
      label = "Ordering Cost Source";
      editable = [false];
   }
   attribute OldSafetyStock Number {
      label = "Prev Safety Stock";
   }
   attribute SafetyStockChange Number {
      fetch = "Inventory_Part_Planning_API.Get_Percent_Diff(old_safety_stock, safety_stock)";
      label = "Safety Stock Change (%)";
      editable = [false];
   }
   attribute SafetyStockAutoDb Boolean("Y", "N") {
      fetch = "DECODE(safety_stock_auto_db, 'Y', 'TRUE', 'FALSE')";
      label = "Auto Update Safety Stock";
      required = [true];
   }
   attribute OldOrderPointQty Number {
      label = "Prev Order Point";
   }
   attribute OrderPointChange Number {
      fetch = "Inventory_Part_Planning_API.Get_Percent_Diff(old_order_point_qty, order_point_qty)";
      label = "Order Point Change (%)";
      editable = [false];
   }
   attribute OrderPointQtyAutoDb Boolean("Y", "N") {
      fetch = "DECODE(order_point_qty_auto_db, 'Y', 'TRUE', 'FALSE')";
      label = "Auto Update Order Point";
      required = [true];
   }
   attribute OldLotSize Number {
      label = "Prev Lot Size";
   }
   attribute LotSizeChange Number {
      fetch = "Inventory_Part_Planning_API.Get_Percent_Diff(old_lot_size, lot_size)";
      label = "Lot Size Change (%)";
      editable = [false];
   }
   attribute LotSizeAutoDb Boolean("Y", "N") {
      fetch = "DECODE(lot_size_auto_db, 'Y', 'TRUE', 'FALSE')";
      label = "Auto Update Lot Size";
      required = [true];
   }
   attribute OrderRequisition Enumeration(InventoryPartSupplyType) {
      label = "Default Supply Type";
      required = [true];
   }
   attribute LastActivityDate Timestamp {
      label = "Modified";
      editable = [ETag = null];
   }
   @DynamicComponentDependency INVPLA
   attribute DemandModel Enumeration(InvPartDemandModel) {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Demand_Model_Db(contract, part_no)";
      label = "Demand Model";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute DemandModelSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Demand_Model_Source(contract, part_no))";
      label = "Demand Model Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute SafetyStockModel Enumeration(InvPartSafetystockModel) {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Safety_Stock_Model_Db(contract, part_no)";
      label = "Safety Stock Model";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute SafetyStockModelSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Safety_Stock_Model_Source(contract, part_no))";
      label = "Safety Stock Model Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute LotSizeModel Enumeration(InvPartLotSizeModel) {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Lot_Size_Model_Db(contract, part_no)";
      label = "Lot Size Model";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute LotSizeModelSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Lot_Size_Model_Source(contract, part_no))";
      label = "Lot Size Model Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute OrderPointModel Enumeration(InvPartOrderPointModel) {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Order_Point_Model_Db(contract, part_no)";
      label = "Order Point Model";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute OrderPointModelSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Order_Point_Model_Source(contract, part_no))";
      label = "Order Point Model Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute LotSizeCoverTime Text {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Lot_Size_Cover_Time(contract, part_no)";
      label = "Lot Size Cover Time";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute LotSizeCoverTimeSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Lot_Size_Cover_Time_Source(contract, part_no))";
      label = "Lot Size Cover Time Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute SafetyStockCoverTime Text {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Safety_Stock_Cover_Time(contract, part_no)";
      label = "Safety Stock Cover Time";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute SafetyStockCoverTimeSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Safe_Stock_Cov_Time_Source(contract, part_no))";
      label = "Safety Stock Cover Time Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute MaxOrderCoverTime Text {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Max_Order_Cover_Time(contract, part_no)";
      label = "Max Order Cover Time";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute MaxOrderCoverTimeSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Max_Order_Covr_Time_Source(contract, part_no))";
      label = "Max Order Cover Time Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute MaxSafetyStockCoverTime Text {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Max_Safety_Stk_Cover_Time(contract, part_no)";
      label = "Max Safety Stock Cover Time";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute MaxSafetyStockCoverTimeSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Max_Safety_Stk_Covr_Source(contract, part_no))";
      label = "Max Safety Stock Cover Time Source";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute LeadTimeFactor Text {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Lead_Time_Factor(contract, part_no)";
      label = "Lead Time Factor";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute LeadTimeFactorSource Enumeration(PlanningHierarchySource) {
      fetch = "Planning_Hierarchy_Source_API.Encode(Inventory_Part_Invpla_Info_API.Get_Lead_Time_Factor_Source(contract, part_no))";
      label = "Lead Time Factor Source";
      editable = [false];
   }
   attribute SeasonalDemandPattern Boolean("TRUE", "FALSE") {
      fetch = "Asset_Class_API.Get_Seasonal_Demand_Pattern_Db(Inventory_Part_API.Get_Asset_Class(contract, part_no))";
      label = "Seasonal Demand Pattern";
      editable = [false];
   }
   @DynamicComponentDependency INVPLA
   attribute EstimatedYearlyDemand Number {
      fetch = "Inventory_Part_Invpla_Info_API.Get_Estimated_Yearly_Demand(contract, part_no)";
      label = "Estimated Yearly Demand";
      editable = [false];
   }
   attribute Planner Text {
      fetch = "Inventory_Part_API.Get_Planner_Buyer(contract, part_no)";
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   @DynamicComponentDependency INVPLA
   reference InventoryPartInvplaInfoRef(Contract, PartNo) to InventoryPartInvplaInfo(Contract, PartNo);
   reference PartNoRef(Contract, PartNo) to IntorderPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PlannerRef(Planner) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference PlanningMethodRef(PlanningMethod) to InvPartPlanningMethod(PlanningMethod) {
      label = "Planning Method";
   }
   reference ServiceRateRef(ServiceRate) to ServiceRate(ServiceRate) {
      label = "Service Rate (%)";
   }
}

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetDescription Text {
   parameter PlanningMethod Text;
}
