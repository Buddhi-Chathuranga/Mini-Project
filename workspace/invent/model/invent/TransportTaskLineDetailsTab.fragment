---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2021-07-28  WaSalk  Bug 160188 (SCZ-15629) Modified order type by removing fetch ORDER_TYPE.
-- 2021-05-05  SBalLK  Bug 159234(SCZ-14685), Renamed the PartNoRef column title "Part No" to "Part" since field display the Part No and Description concatenated.
-- 2021-02-05  ErRalk  SC2020R1-12365, Added ViewConfigurationCommand to TransportTaskLineDetailsList to view configuration details.
-- 2020-09-29  ErRalk  SC2020R1-9867, Modified attribute Destination into enumeration type.
-- 2019-11-26  Hadolk  MFSPRING20-77, Added EngineeringRevision, DrawingNo, DrawingRevision fields and the reference to Part Revision.
-- 2019-09-01  JaThlk  SCXTEND-1998, Replaced the property columnvisible by columnexclude for the field TransportTaskStatusDb.
-- 2019-07-23  ChFolk  SCUXXW4-22440, Replaced fragment TransportTaskLineBaseList with new fragment TransportTaskLineCommands.
-- 2019-06-26  ChFolk  SCUXXW4-16615, Added new list TransportTaskLineDetailsReadOnlyList which is used as a readonly list when transport Task is Executed.
-- 2019-06-25  ChFolk  SCUXXW4-21753, Modified GetPartNos to add ConfigurationId and LocationNo as Parameters.
-- 2019-06-20  ChFolk  SCUXXW4-22440, included fragment TransportTaskLineBaseList which contains the common code for transport task entity and list. Hence removed common methods.
-- 2019-06-11  ChFolk  SCUXXW4-20645, Concatenated some fields and added references to support concatenation.
-- 2019-06-07  ChFolk  SCUXXW4-20645, Added some references and did some concatenate.
-- 2019-05-29  JaThlk  SCUXXW4-19302, Fixed the issue in HandlingUnitIdRef.
-- 2019-05-10  DaZase  SCUXXW4-19710, Added initialcheck to all unbounded actions.
-- 2019-04-26  ChFolk  SCUXXW4-20102, Modified PartNoRef by changing the parameter order.
-- 2019-04-09  ChFolk  SCUXXW4-18870, Modified PartNoRef to include ConfigurationId.
-- 2019-04-05  ChFolk  SCUXXW4-16439, Modified TransportTaskLineDetails to avoid individual get methods in attributes to increase performance.
-- 2019-04-01  ChFolk  SCUXXW4-16439, Modified lov of FromLocationNoRef and validate command of PartNoRef.
-- 2019-04-01  ChFolk  SCUXXW4-17814, Renamed TransportTaskLinesSearchContext as DemandLineStockReservationSearchContext.
-- 2019-03-21  ChFolk  SCUXXW4-14910, Created to move tabs in Transport Task to seperate fragments.
---------------------------------------------------------------------------------
fragment TransportTaskLineDetailsTab;
component INVENT;
layer Core;
description "Details tab in Transport Task which uses to add, delete, and modify transport task lines in the transport task. This tab is also used to perform activities like pick and execute for single parts or parts to be moved out of a handling unit, i.e. a handling unit being partially reserved.
If parts are packed in a handling unit that is included in total on the transport task it is possible to perform activities like pick and execute for that handling unit and all of its content instead for each transport task line. This is done from the aggregated tab.";

include fragment DemandLineStockReservationSearchContext;
include fragment NewTransportTaskDialog;
include fragment IdentifySerialsInMultipleLocationsAssistant;
include fragment TransportTaskLineInitialCheck;
include fragment TransportTaskLineCommands;
include fragment ProjectDetailsFieldSet;
//warningsenabled = ApplyDropOffLocation;
//warningsenabled = RevokeTwoStepTransportTaskLines;
//warningsenabled = GetNewTransportTaskId;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------

----------------------------------- LISTS -----------------------------------
list TransportTaskLineDetailsList for TransportTaskLineDetail {
   orderby = LineNo;
   crudactions {
      delete {
         enabled = [not(selection.TransportTaskSelector.CompletelyExecuted)];
      }
      new {
         enabled = [not(selection.TransportTaskSelector.CompletelyExecuted)];
      }
      edit {
         enabled = [not(selection.TransportTaskSelector.CompletelyExecuted)];
      }
   }
   field LineNo {
      required = [false];
   }
   lov PartNoRef with ReferenceInventoryPartInStockLov25Selector using GetPartNos(FromContract, ConfigurationId, FromLocationNo) {
      description = PartDescription;
      validate command {
         execute {
            if [PartNo != null] {
               call GetTransportTaskLinePartDescription(FromContract, PartNo) into PartDescription;
               if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
               and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
                  call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
                  EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
               }
               call GetUom(FromContract, PartNo) into UoM;
            }
         }
      }
   }
   field ConfigurationId {
      size = Small;
      lovswitch {
         when [PartNo != null] {
            lov ConfigurationIdRef with InventoryPartConfig;
         }
      }
      validate command {
         execute {
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }
   lov FromContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         execute {
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }
   lov FromLocationNoRef with ReferenceInventoryPartInStockLov3Selector using GetLocationNos(FromContract, PartNo, ConfigurationId, FromLocationNo, HandlingUnitId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo) {
      freeinput = [true];
      validate command {
         execute {
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }

   lov ToContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov ToLocationNoRef with ReferenceInventoryLocation17Selector {
      label = "To Location No";
   }
   lov ForwardToLocationNoRef with ReferenceInventoryLocation17Selector;

   lov HandlingUnitIdRef with ReferenceInventoryPartInStockLov4Selector using GetCustomUserWhere(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo) {
      validate command {
         variable HandlingUnitDataStructureVar {
            type = Structure(HandlingUnitDataStructure);
         }
         execute {
            if [HandlingUnitId != null and HandlingUnitId != 0] {
               set Sscc = null;
               set AltHandlingUnitLabelId = null;
               call GetHandlingUnitData(HandlingUnitId, Sscc, AltHandlingUnitLabelId) into HandlingUnitDataStructureVar;
               set HandlingUnitId = HandlingUnitDataStructureVar.HandlingUnitId;
               set Sscc = HandlingUnitDataStructureVar.Sscc;
               set HandlingUnitTypeId = HandlingUnitDataStructureVar.HandlingUnitTypeId;
               set AltHandlingUnitLabelId = HandlingUnitDataStructureVar.AltHandlingUnitLabelId;

               if [HandlingUnitTypeId = null] {
                  alert("The entered value does not correlate to any existing Handling Unit.");
               }
            }
            else {
               set Sscc = null;
               set AltHandlingUnitLabelId = null;
               set HandlingUnitTypeId = null;
               set HandlingUnitTypeDescription = null;
            }
            if [SerialNo != null and SerialNo != "*"] {
               set Quantity = 1;
            }
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }

   field LotBatchNo {
      lovswitch {
         when [LotBatchNo = null] {
            lov LotBatchNoRef with InventoryPartInStockLov4Selector;
         }
         when [true] {
            lov LotBatchNoRef with InventoryPartInStockLov4Selector using GetCustomUserWhere(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo);
         }
      }
      editable = [isNew];
      validate command {
         execute {
            if [SerialNo != null and SerialNo != "*"] {
               set Quantity = 1;
            }
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }

         }
      }
   }
   field SerialNo {
      lovswitch {
         when [SerialNo = null] {
            lov SerialNoRef with InventoryPartInStockLov4Selector;
         }
         when [true] {
            lov SerialNoRef with InventoryPartInStockLov4Selector using GetCustomUserWhere(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo);
         }
      }
      validate command {
         execute {
            set SerialNo = SerialNoRef.SerialNo;
            if [SerialNo != null and SerialNo != "*"] {
               set Quantity = 1;
            }
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }
   field EngChgLevel {
      lovswitch {
         when [EngChgLevel = null] {
            lov EngChgLevelRef with InventoryPartInStockLov4Selector;
         }
         when [true] {
            lov EngChgLevelRef with InventoryPartInStockLov4Selector using GetCustomUserWhere(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo);
         }
      }
      validate command {
         execute {
            if [SerialNo != null and SerialNo != "*"] {
               set Quantity = 1;
            }
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }
   field WaivDevRejNo {
      lovswitch {
         when [WaivDevRejNo = null] {
            lov WaivDevRejNoRef with InventoryPartInStockLov4Selector;
         }
         when [true] {

            lov WaivDevRejNoRef with InventoryPartInStockLov4Selector using GetCustomUserWhere(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo);
         }
      }
      validate command {
         execute {
            if [SerialNo != null and SerialNo != "*"] {
               set Quantity = 1;
            }
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }

         }
      }
   }
   field Quantity;
   measure QtyAvailable(UoM) {
      label = "Qty Available";
      unitexportlabel = "UOM";
   }
   measure CatchQuantity(CatchUoM) {
      editable = [CatchQuantityRequired = 1];
   }
   field CatchQtyRequired;
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.Description;
   }
   field OrderType;
   field OrderTypeDb {
      columnexclude = [true];
      columnvisible = [false];
   }
   field OrderRef1 {
      size = Small;
   }
   field OrderRef2 {
      size = Small;
   }
   field OrderRef3 {
      size = Small;
   }
   field OrderRef4;
   field PickListNo {
      size = Small;
   }
   field ShipmentId;
   field Destination;
   field FromLocationGroup;
   field FromWarehouse;
   field FromBay;
   field FromRow;
   field FromTier;
   field FromBin;
   field ToWarehouse;
   field ToBay;
   field ToRow;
   field ToTier;
   field ToBin;
   fieldset ProjectDetailsFieldSet;
   field ActivitySeq;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeDescription;
      editable = [false];
   }
   field Sscc {
      lovswitch {
         when [Sscc = null] {
            lov SsccRef with ReferenceInventoryPartInStockLov10Selector;
         }
         when [true] {
            lov SsccRef with ReferenceInventoryPartInStockLov10Selector using GetSsccWhere(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq);
         }
      }
      validate command {
         variable HandlingUnitDataStructureVar {
            type = Structure(HandlingUnitDataStructure);
         }
         execute {
            if [Sscc != null] {
               set HandlingUnitId = null;
               set AltHandlingUnitLabelId = null;
               call GetHandlingUnitData(HandlingUnitId, Sscc, AltHandlingUnitLabelId) into HandlingUnitDataStructureVar;
               set HandlingUnitId = HandlingUnitDataStructureVar.HandlingUnitId;
               set Sscc = HandlingUnitDataStructureVar.Sscc;
               set HandlingUnitTypeId = HandlingUnitDataStructureVar.HandlingUnitTypeId;
               set AltHandlingUnitLabelId = HandlingUnitDataStructureVar.AltHandlingUnitLabelId;

               if [HandlingUnitTypeId = null] {
                  alert("The entered value does not correlate to any existing Handling Unit.");
               }
            }
            else {
               if [HandlingUnitId = 0] {
                  set HandlingUnitId = 0;
               }
               else {
                  set HandlingUnitId = null;
               }
               set Sscc = null;
               set AltHandlingUnitLabelId = null;
               set HandlingUnitTypeId = null;
               set HandlingUnitTypeDescription = null;
            }
            if [SerialNo != null and SerialNo != "*"] {
               set Quantity = 1;
            }
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }
   field AltHandlingUnitLabelId {
      lovswitch {
         when [AltHandlingUnitLabelId = null] {
            lov AltHandlingUnitLabelIdRef with ReferenceInventoryPartInStockLov11Selector;
         }
         when [true] {
            lov AltHandlingUnitLabelIdRef with ReferenceInventoryPartInStockLov11Selector using GetAltHuLabelIdWhere(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq);
         }
      }
      validate command {
         variable HandlingUnitDataStructureVar {
            type = Structure(HandlingUnitDataStructure);
         }
         execute {
            if [AltHandlingUnitLabelId != null] {
               set HandlingUnitId = null;
               set Sscc = null;
               call GetHandlingUnitData(HandlingUnitId, Sscc, AltHandlingUnitLabelId) into HandlingUnitDataStructureVar;
               set HandlingUnitId = HandlingUnitDataStructureVar.HandlingUnitId;
               set Sscc = HandlingUnitDataStructureVar.Sscc;
               set HandlingUnitTypeId = HandlingUnitDataStructureVar.HandlingUnitTypeId;
               set AltHandlingUnitLabelId = HandlingUnitDataStructureVar.AltHandlingUnitLabelId;

               if [HandlingUnitTypeId = null] {
                  alert("The entered value does not correlate to any existing Handling Unit.");
               }
            }
            else {
               if [HandlingUnitId = 0] {
                  set HandlingUnitId = 0;
               }
               else {
                  set HandlingUnitId = null;
               }
               set Sscc = null;
               set AltHandlingUnitLabelId = null;
               set HandlingUnitTypeId = null;
               set HandlingUnitTypeDescription = null;
            }
            if [SerialNo != null and SerialNo != "*"] {
               set Quantity = 1;
            }
            if [FromContract != null and PartNo != null and ConfigurationId != null and FromLocationNo != null and LotBatchNo != null
            and SerialNo != null and EngChgLevel != null and WaivDevRejNo != null and ActivitySeq != null and HandlingUnitId != null] {
               call GetQtyAvailableToMove(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo,
               EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) into QtyAvailable;
            }
         }
      }
   }
   field OutermostHandlingUnitId;
   lov OutermostHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Outermost Handling Unit Type";
      description = OutermostHandlingUnitTypeDesc;
      editable = [false];
   }
   field OutermostSscc {
      label = "Outermost SSCC";
   }
   field OutermostAltHuLabelId {
      label = "Outermost Alt Handling Unit Label ID";
   }
   field Level2HandlingUnitId;
   field Level2Sscc;
   field Level2AltHandlingUnitLabelId;
   field TopParentHandlingUnitId;
   lov TopParentHuTypeRef with ReferenceHandlingUnitTypeSelector {
      label = "Top Parent Handling Unit Type";
      description = TopParentHandlingUnitTypeDesc;
      editable = [false];
   }
   field TopParentSscc;
   field TopParentAltHandlingUnitLabelId;
   field PartOwnership;
   field Owner;
   field OwnerName;
   field TransportTaskStatus;
   field WarehouseTaskStarted;
   field CreateDate;
   field TransportTaskStatusDb {
      columnexclude = [true];
   }
   field AvailableToReserve {
      size = Small;
   }
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.EngRevision {
      label = "Engineering Revision No";
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.TechnicalDrawingNo {
      label = "Drawing No";
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.TechDrawingRevisionNo {
      label = "Drawing Revision No";
      editable = [false];
      columnvisible = [false];
   }

   command PickTransportTaskLineCommand;
   command UnpickTransportTaskLineCommand;
   command ExecuteTransportTaskLineCommand;
   command ExecuteTransportTaskLineforSerialsCommand;
   command MoveToNewTrasportTaskCommand;
   command ApplyDropOffLocationCommand;
   command ConvertToDirectTransportTaskCommand;
   @DynamicComponentDependency CFGCHR
   command ViewConfigurationCommand;
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceInventoryPartInStockLov25Selector for InventoryPartInStockLov25 {
   orderby = PartNo, Contract;
   static PartNo;
   static Description;
   static Contract;
}

@Override
selector ReferenceInventoryPartInStockLov3Selector for InventoryPartInStockLov3 {
   orderby = Contract, LocationNo;
   static Contract;
   static PartNo;
   static LocationNo;
   static ConfigurationId;
}


@Override
selector ReferenceInventoryLocation17Selector for InventoryLocation17 {
   orderby = LocationNo, Contract;
   static Contract;
   static LocationNo;
}
--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------

entityset TransportTaskLineDetailSet for TransportTaskLineDetail;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity TransportTaskLineDetail using TransportTaskLine {
   from = "Transport_Task_Line ttl, Inventory_location_API.Get_Location_Details(ttl.FROM_CONTRACT, ttl.FROM_LOCATION_NO) fl, Inventory_location_API.Get_Location_Details(ttl.TO_CONTRACT, ttl.TO_LOCATION_NO) tl, Transport_Task_Line_API.Get_Trans_Task_Line_Details(ttl.TRANSPORT_TASK_ID, ttl.LINE_NO) ttld, Handling_Unit_API.Get_Handling_Unit_Details(ttl.HANDLING_UNIT_ID) hu";
   keys = TransportTaskId, LineNo;

   attribute TransportTaskId Number;
   attribute LineNo Number {
      fetch = "ttl.LINE_NO";
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "ttl.PART_NO";
      editable = [ETag = null];
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(FROM_CONTRACT, PART_NO)";
   }
   attribute ConfigurationId Text {
      fetch = "ttl.CONFIGURATION_ID";
      editable = [ETag = null];
   }
   attribute FromContract Text {
      label = "From Site";
      fetch = "ttl.FROM_CONTRACT";
      editable = [ETag = null];
   }
   attribute FromLocationNo Text {
      fetch = "ttl.FROM_LOCATION_NO";
      editable = [ETag = null];
   }
   attribute ToContract Text {
      label = "To Site";
      editable = [ETag = null];
   }
   attribute ToLocationNo Text {
      fetch = "ttl.TO_LOCATION_NO";
      editable = [true];
   }
   attribute ForawardToLocationNo Text {
      fetch = "ttl.FORWARD_TO_LOCATION_NO";
      editable = [true];
   }
   attribute HandlingUnitId Number {
      fetch = "ttl.HANDLING_UNIT_ID";
      editable = [ETag = null];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      fetch = "ttl.LOT_BATCH_NO";
      editable = [ETag = null];
   }
   attribute SerialNo Text {
      fetch = "ttl.SERIAL_NO";
      editable = [ETag = null];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      fetch = "ttl.ENG_CHG_LEVEL";
      editable = [ETag = null];
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      fetch = "ttl.WAIV_DEV_REJ_NO";
      editable = [ETag = null];
   }
   attribute Quantity Number {
      fetch = "ttl.QUANTITY";
      editable = [true];
   }
   attribute QtyAvailable Number {
      fetch = "NULL";
      editable = [false];
   }
   attribute UoM Text {
      fetch = "ttld.unit_meas";
      label = "UoM";
      editable = [ETag = null];
   }
   attribute CatchQty Number {
      fetch = "ttl.CATCH_QUANTITY";
      editable = [true];
   }
   attribute CatchUoM Text {
      fetch = "ttld.catch_unit_meas";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchQuantityRequired Number {
      fetch = "ttld.catch_qty_required";
      label = "Catch Quantity Required1";
      editable = [false];
   }
   attribute CatchQtyRequired Boolean("TRUE", "FALSE") {
      fetch = "DECODE(ttld.catch_qty_required,0,'FALSE',1,'TRUE')";
      label = "Catch Quantity Required";
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO, SERIAL_NO, LOT_BATCH_NO)";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute OrderType Enumeration(OrderType) {
      label = "Source Ref Type";
      editable = [false];
   }
   attribute OrderTypeDb Text {
      fetch = "ttl.ORDER_TYPE_DB";
      editable = [false];
   }
   attribute OrderRef1 Text {
      fetch = "ttl.ORDER_REF1";
      label = "Source Ref 1";
      editable = [false];
   }
   attribute OrderRef2 Text {
      fetch = "ttl.ORDER_REF2";
      label = "Source Ref 2";
      editable = [false];
   }
   attribute OrderRef3 Text {
      fetch = "ttl.ORDER_REF3";
      label = "Source Ref 3";
      editable = [false];
   }
   attribute OrderRef4 Number {
      fetch = "ttl.ORDER_REF4";
      label = "Source Ref 4";
      editable = [false];
   }
   attribute PickListNo Text {
      fetch = "ttl.PICK_LIST_NO";
      editable = [false];
   }
   attribute ShipmentId Number {
      fetch = "ttl.SHIPMENT_ID";
      editable = [false];
   }
   attribute Destination Enumeration(InventoryPartDestination) {
      fetch = "ttl.DESTINATION_DB";
      editable = [true];
   }
   attribute FromLocationGroup Text {
      fetch = "fl.LOCATION_GROUP";
      editable = [false];
   }
   attribute FromWarehouse Text {
      fetch = "fl.WAREHOUSE";
      label = "From Warehouse";
      editable = [false];
   }
   attribute FromBay Text {
      fetch = "fl.BAY_NO";
      label = "From Bay";
      editable = [false];
   }
   attribute FromRow Text {
      fetch = "fl.ROW_NO";
      label = "From Row";
      editable = [false];
   }
   attribute FromTier Text {
      fetch = "fl.TIER_NO";
      label = "From Tier";
      editable = [false];
   }
   attribute FromBin Text {
      fetch = "fl.BIN_NO";
      label = "From Bin";
      editable = [false];
   }
   attribute ToWarehouse Text {
      fetch = "tl.WAREHOUSE";
      label = "To Warehouse";
      editable = [false];
   }
   attribute ToBay Text {
      fetch = "tl.BAY_NO";
      label = "To Bay";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToRow Text {
      fetch = "tl.ROW_NO";
      label = "To Row";
      editable = [false];
   }
   attribute ToTier Text {
      fetch = "tl.TIER_NO";
      label = "To Tier";
      editable = [false];
   }
   attribute ToBin Text {
      fetch = "tl.BIN_NO";
      label = "To Bin";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "ttl.PROJECT_ID";
      format = uppercase;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "ttl.ACTIVITY_SEQ";
      label = "Activity Sequence";
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "hu.hu_type_id";
      editable = [false];
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "hu.hu_type_desc";
      editable = [false];
   }
   attribute Sscc Text {
      fetch = "hu.sscc";
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      label = "Alt Handling Unit Label ID";
      fetch = "hu.alt_hu_label_id";
      editable = [false];
   }
   attribute OutermostHandlingUnitId Number {
      label = "Outermost Handling Unit ID";
      fetch = "ttld.outermost_hu_id";
      editable = [false];
   }
   attribute OutermostHandlingUnitTypeId Text {
      fetch = "ttld.outermost_hu_type_id";
      editable = [false];
   }
   attribute OutermostHandlingUnitTypeDesc Text {
      fetch = "ttld.outermost_hu_type_desc";
      editable = [false];
   }
   attribute OutermostSscc Text {
      fetch = "ttld.outermost_sscc";
      editable = [false];
   }
   attribute OutermostAltHuLabelId Text {
      fetch = "ttld.outermost_alt_hu_label_id";
      editable = [false];
   }
   attribute Level2HandlingUnitId Text {
      fetch = "hu.level2_hu_id";
      label = "Level 2 Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Level2Sscc Text {
      fetch = "hu.level2_sscc";
      label = "Level 2 SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute Level2AltHandlingUnitLabelId Text {
      fetch = "hu.level2_alt_hu_label_id";
      label = "Level 2 Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "hu.top_parent_hu_id";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "hu.top_parent_hu_type_id";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "hu.top_parent_hu_type_desc";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "hu.top_parent_sscc";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "hu.top_parent_alt_hu_label_id";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Part_Ownership(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner";
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
      editable = [false];
   }
   attribute TransportTaskStatus Enumeration(TransportTaskStatus) {
      editable = [false];
   }
   attribute WarehouseTaskStarted Boolean("TRUE", "FALSE") {
      fetch = "ttld.warehouse_task_started";
      label = "Warehouse Task Started";
      editable = [false];
   }
   attribute CreateDate Date {
      label = "Date Created";
      editable = [false];
   }
   attribute TransportTaskStatusDb Text {
      fetch = "ttl.TRANSPORT_TASK_STATUS_DB";
      label = "Transport Task Status";
      maxlength = 20;
      editable = [false];
   }
   attribute AllowDeviatingAvailCtrlDb Boolean("TRUE", "FALSE") {
      fetch = "ttl.ALLOW_DEVIATING_AVAIL_CTRL_DB";
      label = "Allow Deviating Part Availability Control";
   }
   attribute ReservedBySourceDb Boolean("TRUE", "FALSE") {
      fetch = "ttl.RESERVED_BY_SOURCE_DB";
      label = "Source Reservation";
      editable = [false];
   }
   attribute AvailableToReserve Boolean("TRUE", "FALSE") {
      fetch = "ttld.available_to_reserve";
      label = "Available to Reserve";
      editable = [false];
   }
   attribute NoOfUnidentifiedSerials Number {
      fetch = "ttld.no_of_unidentified_serials";
      label = "No of Unidentified Serials";
      editable = [false];
   }
   reference PartNoRef(FromContract, ConfigurationId, FromLocationNo, PartNo) to InventoryPartInStockLov25(Contract, ConfigurationId, LocationNo, PartNo) {
      label = "Part";
   }
   reference ConfigurationIdRef(FromContract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference FromContractRef(FromContract) to UserAllowedSiteLov(Contract) {
      label = "From Site";
   }
   reference FromLocationNoRef(FromContract, PartNo, ConfigurationId, FromLocationNo) to InventoryPartInStockLov3(Contract, PartNo, ConfigurationId, LocationNo) {
      label = "From Location No";
   }
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Site";
   }
   reference ToLocationNoRef(ToContract, ToLocationNo) to InventoryLocation17(Contract, LocationNo) {
      label = "To Location No";
   }
   reference ForwardToLocationNoRef(ToContract, ForwardToLocationNo) to InventoryLocation17(Contract, LocationNo) {
      label = "Forward to Location No";
   }
   reference HandlingUnitIdRef(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStockLov4(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference LotBatchNoRef(FromContract, PartNo, ConfigurationId, FromLocationNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, LotBatchNo) to InventoryPartInStockLov4(Contract, PartNo, ConfigurationId, LocationNo, HandlingUnitId, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, LotBatchNo) {
      label = "Lot/Batch No";
   }
   reference SerialNoRef(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, EngChgLevel, WaivDevRejNo, ActivitySeq, SerialNo) to InventoryPartInStockLov4(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, HandlingUnitId, EngChgLevel, WaivDevRejNo, ActivitySeq, SerialNo) {
      label = "Serial No";
   }
   reference EngChgLevelRef(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, WaivDevRejNo, ActivitySeq, EngChgLevel) to InventoryPartInStockLov4(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, HandlingUnitId, SerialNo, WaivDevRejNo, ActivitySeq, EngChgLevel);
   reference WaivDevRejNoRef(FromContract, PartNo, ConfigurationId, FromLocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, ActivitySeq, WaivDevRejNo) to InventoryPartInStockLov4(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, HandlingUnitId, SerialNo, EngChgLevel, ActivitySeq, WaivDevRejNo) {
      label = "W/D/R No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference SsccRef(FromContract, PartNo, ConfigurationId, FromLocationNo, HandlingUnitId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, Sscc) to InventoryPartInStockLov10(Contract, PartNo, ConfigurationId, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, Sscc) {
      label = "SSCC";
   }
   reference AltHandlingUnitLabelIdRef(FromContract, AltHandlingUnitLabelId) to InventoryPartInStockLov11(Contract, AltHandlingUnitLabelId) {
      label = "Alt Handling Unit Label ID";
   }
   reference OutermostHandlingUnitTypeIdRef(OutermostHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference TopParentHuTypeRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency MFGSTD
   reference PartRevisionRef(FromContract, PartNo, EngChgLevel) to PartRevision(Contract, PartNo, EngChgLevel);
}

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetTransportTaskLinePartDescription Text {
   parameter Contract Text;
   parameter PartNo Text;
}

function GetUom Text {
   parameter FromContract Text;
   parameter PartNo Text;
}

function GetTransportTaskLineDetails List < Entity(TransportTaskLineDetail) > {
   parameter ShowDetails Enumeration(ShowLineDetails);
   parameter TransportTaskId Number;
   basedon TransportTaskLineDetailSet;
}

function GetHandlingUnitData Structure(HandlingUnitDataStructure) {
   parameter HandlingUnitId Number;
   parameter Sscc Text;
   parameter AltHandlingUnitLabelId Text;
}

function GetQtyAvailableToMove Number {
   parameter FromContract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter FromLocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
}

function GetPartNos List < Entity(InventoryPartInStockLov25) > {
   parameter Contract Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   where = "(CONTRACT = :Contract OR :Contract IS NULL)
   AND(LOCATION_NO = :LocationNo OR :LocationNo IS NULL)
   AND(CONFIGURATION_ID = :ConfigurationId OR :ConfigurationId IS NULL)";
}

function GetLocationNos List < Entity(InventoryPartInStockLov3) > {
   parameter Contract Text;
   parameter PartNo   Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter HandlingUnitId Number;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   where = " LOCATION_NO IN (SELECT LOCATION_NO
                             FROM Inventory_Part_In_Stock_lov4
                             WHERE (CONTRACT = :Contract OR :Contract IS NULL)
                             AND (PART_NO = :PartNo OR :PartNo IS NULL)
                             AND (CONFIGURATION_ID = :ConfigurationId OR :ConfigurationId IS NULL)
                             AND (LOCATION_NO = :LocationNo OR :LocationNo IS NULL)
                             AND (HANDLING_UNIT_ID = :HandlingUnitId or :HandlingUnitId IS NULL)
                             AND (LOT_BATCH_NO = :LotBatchNo or :LotBatchNo IS NULL)
                             AND (SERIAL_NO = :SerialNo or :SerialNo IS NULL)
                             AND (ENG_CHG_LEVEL = :EngChgLevel or :EngChgLevel IS NULL)
                             AND (WAIV_DEV_REJ_NO = :WaivDevRejNo or :WaivDevRejNo IS NULL))";

}

function GetCustomUserWhere List < Entity(InventoryPartInStockLov4) > {
   parameter Contract Text;
   parameter PartNo   Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter HandlingUnitId Number;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;

   where = "((CONTRACT = :Contract OR :Contract IS NULL)
            AND (PART_NO = :PartNo OR :PartNo IS NULL)
            AND (CONFIGURATION_ID = :ConfigurationId OR :ConfigurationId IS NULL)
            AND (LOCATION_NO = :LocationNo OR :LocationNo IS NULL)
            AND (LOT_BATCH_NO = :LotBatchNo OR :LotBatchNo IS NULL)
            AND (HANDLING_UNIT_ID = :HandlingUnitId OR :HandlingUnitId IS NULL)
            AND (SERIAL_NO = :SerialNo OR :SerialNo IS NULL)
            AND (ENG_CHG_LEVEL = :EngChgLevel OR :EngChgLevel IS NULL)
            AND (WAIV_DEV_REJ_NO = :WaivDevRejNo OR :WaivDevRejNo IS NULL))";
}

function GetSsccWhere List < Entity(InventoryPartInStockLov10) > {
   parameter Contract Text;
   parameter PartNo   Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter HandlingUnitId Number;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   where = "((CONTRACT = :Contract OR :Contract IS NULL)
            AND (PART_NO = :PartNo OR :PartNo IS NULL)
            AND (CONFIGURATION_ID = :ConfigurationId OR :ConfigurationId IS NULL)
            AND (LOCATION_NO = :LocationNo OR :LocationNo IS NULL)
            AND (LOT_BATCH_NO = :LotBatchNo OR :LotBatchNo IS NULL)
            AND (HANDLING_UNIT_ID = :HandlingUnitId OR :HandlingUnitId IS NULL)
            AND (SERIAL_NO = :SerialNo OR :SerialNo IS NULL)
            AND (ENG_CHG_LEVEL = :EngChgLevel OR :EngChgLevel IS NULL)
            AND (WAIV_DEV_REJ_NO = :WaivDevRejNo OR :WaivDevRejNo IS NULL)
            AND (ACTIVITY_SEQ = :ActivitySeq OR :ActivitySeq IS NULL))";
}

function GetAltHuLabelIdWhere List < Entity(InventoryPartInStockLov11) > {
   parameter Contract Text;
   parameter PartNo   Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter HandlingUnitId Number;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   where = "((CONTRACT = :Contract OR :Contract IS NULL)
            AND (PART_NO = :PartNo OR :PartNo IS NULL)
            AND (CONFIGURATION_ID = :ConfigurationId OR :ConfigurationId IS NULL)
            AND (LOCATION_NO = :LocationNo OR :LocationNo IS NULL)
            AND (LOT_BATCH_NO = :LotBatchNo OR :LotBatchNo IS NULL)
            AND (HANDLING_UNIT_ID = :HandlingUnitId OR :HandlingUnitId IS NULL)
            AND (SERIAL_NO = :SerialNo OR :SerialNo IS NULL)
            AND (ENG_CHG_LEVEL = :EngChgLevel OR :EngChgLevel IS NULL)
            AND (WAIV_DEV_REJ_NO = :WaivDevRejNo OR :WaivDevRejNo IS NULL)
            AND (ACTIVITY_SEQ = :ActivitySeq OR :ActivitySeq IS NULL))";
}

-------------------------------- STRUCTURES ---------------------------------
structure HandlingUnitDataStructure {
   attribute HandlingUnitId Number;
   attribute Sscc Text;
   attribute AltHandlingUnitLabelId Text;
   attribute HandlingUnitTypeId Text;
   attribute HandlingUnitTypeDesc Text;
}
