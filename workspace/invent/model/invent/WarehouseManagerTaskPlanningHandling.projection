--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-01-26  GrGalk  SC2020R1-12172, Updated the crud operations from Read, StateChange to Update and made the AssignedPriority attribute editable
--  2019-04-24  AwWelk  SCUXXW4-18479, Added the function where clause to GetWarehouseTasks to improve the performance.
--  2018-11-19  KoDelk  SCUXXW4-6540, Converted from frmWarehouseMgrTaskPlanning using MTG Version: 1.32
---------------------------------------------------------------------------------
projection WarehouseManagerTaskPlanningHandling;
component INVENT;
layer Core;
description "Used for searching for pending task queues using a multiple search criteria";
category Users;

include fragment UserAllowedSiteLovSelector;
include fragment WarehouseWorkerLovSelector;
include fragment ParkReasonDialog;
include fragment WarehouseTaskInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseTaskPlanningVirtualSet for WarehouseTaskPlanningVirtual;
entityset WarehouseTaskSet for WarehouseTask;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseTask {
   crud = Update;
   use attributes = Contract, LocationGroup, TaskType, Priority, AssignedPriority, WorkerId, WorkerGroup, NumberOfLines, RequestedDateFinished, ActualDateStarted, Info, SourceRef1, ParkReasonId;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute LocationGroup Text {
      fetch = "location_group";
      label = "Location Group";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute TaskId Number {
      fetch = "task_id";
      label = "Task ID";
      required = [true];
      editable = [false];
   }
   attribute TaskTypeDb Enumeration(WarehouseTaskType) {
      label = "Task Type";
      fetch = "task_type_db";
   }
   attribute TaskType Text {
      label = "Task Type";
      fetch = "task_type";
   }
   attribute Priority Number {
      fetch = "priority";
      label = "Default Priority";
      editable = [false];
   }
   attribute AssignedPriority Number {
      fetch = "assigned_priority";
      label = "Operative Priority";
      editable = [true];
   }
   attribute WorkerId Text {
      fetch = "worker_id";
      label = "Worker ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute WorkerGroup Text {
      fetch = "worker_group";
      label = "Worker Group";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute NumberOfLines Number {
      fetch = "number_of_lines";
      label = "Number of Lines";
      editable = [false];
   }
   attribute RequestedDateFinished Timestamp {
      fetch = "requested_date_finished";
      label = "Requested Finish Date";
      editable = [false];
   }
   attribute TotalPlannedTimeNeeded Number {
      fetch = "Warehouse_Task_API.Get_Total_Planned_Time_Needed(task_id)";
      label = "Total Planned Time Needed";
      editable = [false];
   }
   attribute LatestStartDate Timestamp {
      fetch = "Warehouse_Task_API.Get_Latest_Date_Started(task_id)";
      label = "Latest Start Date";
      editable = [false];
   }
   attribute ActualDateStarted Timestamp {
      fetch = "actual_date_started";
      label = "Actual Start Date";
      editable = [false];
   }
   attribute ExpectedFinishDate Timestamp {
      fetch = "Warehouse_Task_API.Get_Expected_Date_Finished(task_id)";
      label = "Expected Finish Date";
      editable = [false];
   }
   attribute Info Text {
      fetch = "info";
      label = "Source Info";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Source Ref1";
      maxlength = 30;
      editable = [false];
   }
   attribute ParkReasonId Text {
      fetch = "park_reason_id";
      label = "Park Reason";
      maxlength = 100;
      editable = [false];
   }
   reference InventoryLocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
   reference WarehouseTaskParkReasonRef(ParkReasonId) to WarehouseTaskParkReason(ParkReasonId) {
      label = "Park Reason";
   }
   reference WorkerIdRef(Contract, TaskType, LocationGroup, WorkerId) to WarehouseWorkerLov(Contract, TaskType, LocationGroup, WorkerId) {
      label = "Worker";
   }
   reference WorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroup(Contract, WorkerGroup) {
      label = "Worker Group";
   }
}
@Override
entity WarehouseWorker {
   attribute WorkerId Text {
      label = "Worker ID";
   }
}

--------------------------------- VIRTUALS ----------------------------------
virtual WarehouseTaskPlanningVirtual {
   attribute Contract Text;
   attribute TransportTask Boolean {
      required = [true];
   }
   attribute CustomerOrderPickList Boolean {
      required = [true];
   }
   attribute ShopOrderPickList Boolean {
      required = [true];
   }
   attribute Assignment Enumeration(AssignmentEnum) {
      required = [true];
   }
   attribute WorderId Text;
   attribute WorkerGroup Text;
   attribute LocationGroup Text;

   reference UserAllowedSiteLovRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseWorkerRef(Contract, WorderId) to WarehouseWorker(Contract, WorkerId) {
      label = "Worker ID";
   }
   reference WarehouseWorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroup(Contract, WorkerGroup) {
      label = "Worker Group";
   }
   reference InventoryLocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
}
------------------------------- ENUMERATIONS --------------------------------
enumeration AssignmentEnum {
   value = "VIEW_ALL" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "ASSIGNED" {
      identifier = "Assigned";
      label = "Assigned";
   }
   value = "UNASSIGNED" {
      identifier = "Unassigned";
      label = "Unassigned";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetWarehouseTasks List<Entity(WarehouseTask)> {
   parameter Contract Text;
   parameter TransportTask Boolean;
   parameter CustomerOrderPickList Boolean;
   parameter ShopOrderPickList Boolean;
   parameter Assignment Enumeration(AssignmentEnum);
   parameter WorkerId Text;
   parameter WorkerGroup Text;
   parameter LocationGroup Text;
   where = "contract = :Contract AND objstate IN ('Released', 'Planned', 'Started', 'Parked')
   AND (task_type_db = (CASE WHEN :TransportTask = 'TRUE' THEN 'TRANSPORT TASK' ELSE 'NONE' END)
   OR task_type_db = (CASE WHEN :CustomerOrderPickList = 'TRUE' THEN 'CUSTOMER ORDER PICK LIST' ELSE 'NONE' END)
   OR task_type_db = (CASE WHEN :ShopOrderPickList = 'TRUE' THEN 'SHOP ORDER PICK LIST' ELSE 'NONE' END))
   AND (location_group = :LocationGroup OR :LocationGroup IS NULL)
   AND ((:Assignment = 'ASSIGNED' AND ((worker_id = :WorkerId AND :WorkerId IS NOT NULL) OR (worker_group = :WorkerGroup AND :WorkerGroup IS NOT NULL)))
               OR (:Assignment = 'UNASSIGNED' AND worker_id IS NULL AND worker_group IS NULL)
               OR :Assignment = 'VIEW_ALL')";

   basedon WarehouseTaskSet;
}
function GetInventoryLocationGroups List<Entity(InventoryLocationGroup)> {
   parameter Contract Text;
   where = "location_group IN (SELECT location_group FROM inventory_location WHERE  contract = :Contract)";
}
function GetDialogParameters Structure(AssignWorkerStructure) {
   parameter Selection Text;
}
---------------------------------- ACTIONS ----------------------------------
action CompleteWarehouseTask {
   initialcheck implementation;
   ludependencies = WarehouseTask;

   parameter Selection Text;
}
action AssignTasksToWorker {
   initialcheck implementation;
   ludependencies = WarehouseTask;

   parameter Selection Text;
   parameter WorkerId Text;
}
action AssignTasksToWorkerGroup {
   initialcheck implementation;
   ludependencies = WarehouseTask;

   parameter Selection Text;
   parameter WorkerGroup Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure AssignWorkerStructure {
   attribute Contract Text;
   attribute TaskType Text;
   attribute LocationGroup Text;
   attribute WorkerId Text;
   attribute WorkerGroup Text;

   reference WarehouseWorkerRef(Contract, TaskType, LocationGroup, WorkerId) to WarehouseWorkerLov(Contract, TaskType, LocationGroup, WorkerId) {
      label = "Worker";
   }
   reference WarehouseWorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroup(Contract, WorkerGroup) {
      label = "Worker Group";
   }
}
