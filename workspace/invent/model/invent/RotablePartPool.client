--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-01-20  WaSalk  SC2020R1-12100, Modified tab FA Objects and AddSerialsCommand to enable only if ActualPoolQty not equlals to null.
-- 2019-08-27  ChFolk  SCUXXW4-23117, Used Enumeration for RotablePoolAssetType instead of Boolean.
-- 2019-05-02  ChFolk  SCUXXW4-19487, Replaced attribute PartOwnershipDb as PartOwnership.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-12-21  milise  SCUXXW4-6450, Changed name from Individuals to Serials.
-- 2018-11-10  ChFolk  SCUXXW4-5781, Add dialog RemoveFromRotablePoolDialog and group DefineAvailabilityControlGroup to complete command RemoveFromPoolCommand.
-- 2018-11-10  ChFolk  SCUXXW4-4841, Added assistant AddIndividualsToRotablePoolAssistant, list AddRotablePartsList to complete command AddIndividualsCommand.
-- 2018-11-08  ChFolk  SCUXXW4-7257, Included Site tab.
-- 2018-10-24  MiLise  SCUXXW4-6452, Converted from frmRotablePartPool using MTG Version: 1.31
--------------------------------------------------------------------------------------
client RotablePartPool;
component INVENT;
layer Core;
projection RotablePartPoolHandling;
@DynamicComponentDependency ORDER
include fragment CustOrdCust1Selector;
include fragment PartCatalogLovSelector;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency FIXASS
include fragment RotablePartPoolFa;
@DynamicComponentDependency FIXASS
include fragment FaActiveObjectSelector;
@DynamicComponentDependency FIXASS
include fragment RotablePoolFaObjectLovSelector;
include fragment AccountingCodepartASelector;
include fragment AccountingCodepartBSelector;
include fragment AccountingCodepartCSelector;
include fragment AccountingCodepartDSelector;
include fragment AccountingCodepartESelector;
include fragment AccountingCodepartFSelector;
include fragment AccountingCodepartGSelector;
include fragment AccountingCodepartHSelector;
include fragment AccountingCodepartISelector;
include fragment AccountingCodepartJSelector;
warningsenabled = RotablePartPool;
@DynamicComponentDependency FIXASS
warningsenabled = CreateRotablePoolFaObject;


---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.31
// Enterprise Explorer Source: frmRotablePartPool
// Language: en-US

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry RotablePartPoolNavEntry parent InventNavigator.WarehouseManagementRotablePartPool at index 100 {
      label = "Rotable Part Pool";
      page Form home RotablePartPool;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using RotablePartPoolSet {
   label = "Rotable Part Pool";
   startupmode = search;
   selector RotablePartPoolSelector;
   group RotablePartPoolGroup;
   tabs {
      tab {
         label = "Serials";
         list RotablePartPoolSerialsList(RotablePartPoolSerialsArray);
      }
      tab {
         label = "Sites";
         list RotablePartPoolSitesList(RotablePartPoolSitesArray);
      }
      @DynamicComponentDependency FIXASS
      tab {
         visible = [RotablePoolAssetType = "FixedAsset" and ActualPoolQty != null];
         label = "FA Objects";
         list RotablePoolFaObjectList(RotablePoolFaObjectsArray);
      }
   }

}

-------------------------------- ASSISTANTS ---------------------------------
assistant AddIndividualsToRotablePoolAssistant using AddIndividualsToRotablePoolSet {
   label = "Add Serials To Rotable Pool";
   input(RotablePartPoolId, PartNo, DefAvailabilityControlId, OwningCustomerNo, PartOwnership);
   steps {
      step {
         list AddRotablePartsList(AddIndividualsArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [component.AddRotablePartsList.SelectionCount = 1];
      execute {
         call ModifyRotablePartPool(Objkey, RotablePartPoolId, DefAvailabilityControlId);
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

assistant ConnectIndividualAssistant using ConnectIndividualToFaObjectSet {
   label = "Connect Serial to FA Object ${ObjectId}";

   input(RotablePartPoolId, PartNo, AvailabilityControlId, Company, ObjectId);

   steps {
      step {
         list AddIndividualsList(AddIndividualsArray);
      }
      final step {

      }
   }
   finish command {
      enabled = [component.AddIndividualsList.SelectionCount = 1];

      execute {
         @DynamicComponentDependency FIXASS
         call ConnectIndividual(Company, ObjectId, component.AddIndividualsList.Selection, "CONNECT");
      }
   }
}

assistant ReplenishAssistant using ConnectIndividualToFaObjectSet {
   label = "Replenish FA Object ${ObjectId}";

   input(RotablePartPoolId, PartNo, AvailabilityControlId, Company, ObjectId);

   steps {
      step {
         list AddIndividualsList(AddIndividualsArray);
      }
      final step {

      }
   }
   finish command {
      enabled = [component.AddIndividualsList.SelectionCount = 1];

      execute {
         @DynamicComponentDependency FIXASS
         call ConnectIndividual(Company, ObjectId, component.AddIndividualsList.Selection, "REPLENISH");
      }
   }
}

--------------------------------- COMMANDS ----------------------------------
command AddSerialsCommand for InventoryPartInStock {
   label = "Add Serials";
   mode = Global;
   enabled = [TargetQty > ActualPoolQty and RotablePoolAssetType = "InventoryAsset" and ActualPoolQty != null];
   execute {
      assistant AddIndividualsToRotablePoolAssistant(RotablePartPoolId, PartNo, AvailabilityControlId, OwningCustomerNo, PartOwnership) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command RemoveFromPoolCommand for InventoryPartInStock {
   label = "Remove From Pool";
   mode = SingleRecord;
   enabled = [parent.RotablePoolAssetType = "InventoryAsset"];
   variable NewAvailabilityControlIdStr {
      type = Text;
   }
   execute {
      dialog RemoveFromRotablePoolDialog into(NewAvailabilityControlIdStr) {
         when OK {
            call ModifyRotablePartPoolId(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, NewAvailabilityControlIdStr);
         }
         when CANCEL {
            exit;
         }
      }
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector RotablePartPoolSelector for RotablePartPool {
   label = "${RotablePartPoolId} - ${Description}";
   static Description;
   static PartNo;
}

---------------------------------- GROUPS -----------------------------------
group RotablePartPoolGroup for RotablePartPool {
   label = "";

   field RotablePartPoolId {
      label = "Pool ID";
   }
   field Description {
      label = "Pool Description";
   }
   field PartOwnership {
      label = "Ownership";
      size = Small;
   }
   @DynamicComponentDependency ORDER
   lov OwningCustomerNoRef with ReferenceCustOrdCust1Selector {
      label = "Owner";
      size = Small;
   }
   lov PartNoRef with ReferencePartCatalogLovSelector {
      label = "Part";
      description = PartNoRef.Description;
   }
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Default Availability Control";
      description = AvailabilityControlIdRef.Description;
   }
   field RotablePoolAssetType {
      label = "FA Rotable Pool";
      enumerationtrue = "FixedAsset";
 	   enumerationfalse = "InventoryAsset";
      size = Small;
      required = [true];
   }
   field TargetQty {
      size = Small;
      label = "Target Pool Qty";
   }
   field ActualPoolQty {
      size = Small;
      label = "Actual Pool Qty";
   }
   field PoolDiffQty {
      size = Small;
      label = "Pool Diff Qty";
   }
   field NoteText {
      label = "Notes";
      height = small;
      multiline = true;
      size = FullWidth;
   }
   -- Remove after TEUXX-15858 is fixed.
   field DefaultSite {
      visible = [false];
   }
   field CodePartCompany {
      visible = [false];
   }
   field CodeAChar {
      visible = [false];
   }
   field CodeBChar {
      visible = [false];
   }
   field CodeCChar {
      visible = [false];
   }
   field CodeDChar {
      visible = [false];
   }
   field CodeEChar {
      visible = [false];
   }
   field CodeFChar {
      visible = [false];
   }
   field CodeGChar {
      visible = [false];
   }
   field CodeHChar {
      visible = [false];
   }
   field CodeIChar {
      visible = [false];
   }
   field CodeJChar {
      visible = [false];
   }
}

group DefineAvailabilityControlGroup for RemoveFromRotablePoolStructure {
   label = "The serial part will be removed from the pool and returned to stock.";

   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector using GetAvailabilityControlIds {
      label = "Availability Control";
   }
}

----------------------------------- LISTS -----------------------------------
list RotablePartPoolSerialsList for InventoryPartInStock {
   field ContractRef {
      size = Small;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part";
      description = InventoryPartRef.DescriptionInUse;
   }
   field SerialNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field ConfigurationIdRef {
      size = Small;
   }
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Availability Control";
      description = AvailabilityControlIdRef.Description;
   }
   field ConditionCode {
      size = Small;
   }
   field ConditionCodeDescription {
      size = Small;
   }
   lov LocationNoRef with InventoryLocationSelector {
      size = Small;
   }
   field HandlingUnitIdRef {
      label = "Handling Unit ID";
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
   }
   field HandlingUnitIdRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitIdRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   field TopParentHandlingUnitId;
   field TopParentHandlingUnitTypeId {
      size = Small;
   }
   field TopParentHandlingUnitTypeDesc {
      size = Small;
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelId {
      size = Small;
   }
   fieldranking ContractRef, PartNoRef, SerialNo, LotBatchNo, ConfigurationIdRef, AvailabilityControlIdRef, LocationNoRef, HandlingUnitIdRef, EngChgLevel;

   command AddSerialsCommand;
   command RemoveFromPoolCommand;

}

list RotablePartPoolSitesList for RotablePoolSite {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      label = "Site";
      description = ContractRef.ContractDesc;
   }
   field SiteRef.Company {
      label = "Company";
   }
}

list AddRotablePartsList for AddToRotablePoolVirtual {
   editmode = SingleCellEdit;
   field AddIndividual {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part No";
      description = InventoryPartRef.DescriptionInUse;
   }
   field SerialNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field AvailabilityControlIdRef {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   field ConditionCodeRef.Description {
      size = Small;
      label = "Condition Code Description";
   }
   field LocationNo {
      size = Small;
   }
   field HandlingUnitIdRef;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
   }
   field HandlingUnitIdRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitIdRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handing Unit Label ID";
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   field TopParentHandlingUnitId;
   field TopParentHuTypeId {
      size = Small;
   }
   field TopParentHuTypeDesc {
      size = Small;
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHuLabelId {
      size = Small;
   }
   fieldranking Contract, PartNo, SerialNo, LotBatchNo, ConfigurationId, AvailabilityControlIdRef, ConditionCode, ConditionCodeRef.Description, LocationNo;
}



list AddIndividualsList for InventoryPartInStockRot {
   field Contract {
      size = Small;
   }
   field PartNo {
      size = Small;
   }
   field Description2 {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field AvailabilityControlIdRef {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   field ConditionCodeRef.Description {
      size = Small;
      label = "Condition Code Description";
   }
   field LocationNo {
      size = Small;
   }
   field HandlingUnitId;
   field Description3 {
      size = Small;
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field EngChgLevel {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   field WaivDevRejNo {
      size = Small;
   }
   field TopParentHandlingUnitTypeDesc {
      size = Small;
   }
   field TopParentHandlingUnitTypeID {
      size = Small;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentHandlingUnitID;
   field TopParentAltHandlingUnitLabelID {
      size = Small;
   }
   // fieldranking Contract, PartNo, Description2, SerialNo, LotBatchNo, ConfigurationId, AvailabilityControlIdRef, ConditionCode, ConditionCodeRef.Description, LocationNo;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog RemoveFromRotablePoolDialog for RemoveFromRotablePoolStructure {
   label = "Remove from Pool";
   output(AvailabilityControlId);
   group DefineAvailabilityControlGroup;
   command Ok;
   command Cancel;
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

