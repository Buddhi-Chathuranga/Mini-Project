----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2022-01-03  SBalLK  Bug 162023(SCZ-17267), Changed TopParentHandlingUnitTypeIdRef connected description to the TopParentHandlingUnitTypeIdRef
-- 2022-01-03          from TopParentHandlingUnitIdRef(Which does not contain description at all).
-- 2020-01-22  PamPlk  Bug 151796 (SCZ-8367), Added the attribute NoOfUnidentifiedSerials.
-- 2018-06-01  ChFolk  SCUXXW4-6502 Created to include common code from TransportTaskLinesHandling.projection and TransportTaskLines.client
-- 2018-06-13          to be used by both TransportTaskLines and TransportTask.
----------------------------------------------------------------------------------------------------------
fragment TransportTaskLinesList;
component INVENT;
layer Core;
description "fragment uses to keep entity and list details for Transport Task Lines";

include fragment InventoryLocation11Selector;
include fragment ProjectDetailsFieldSet;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------

----------------------------------- LISTS -----------------------------------
list TransportTaskLinesBaseList for TransportTaskLines {
   orderby = TransportTaskId, LineNo;
   crudactions {
      edit {
         enabled = [(TransportTaskStatusDb = "CREATED" or TransportTaskStatusDb = "PICKED") and parent.TransportTaskId = null];
      }
      delete {
         enabled = [TransportTaskStatusDb = "CREATED" and parent.TransportTaskId = null];
      }
   }
   field ParentTransportTaskId {
      columnvisible = [false];
      searchable = false;
   }
   field ParentFixedDb {
      columnvisible = [false];
      searchable = false;
   }
   field TransportTaskIdRef;
   field LineNo;
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part";
      description = InventoryPartRef.DescriptionInUse;
   }
   field ConfigurationIdRef;
   field FixedDb;
   badge TransportTaskStatus {
      label = "Transport Task Status";
      style = TextOnly;
      size = Small;
      emphasis StateCreated = [TransportTaskStatus = "Created"];
      emphasis StateExecuted = [TransportTaskStatus = "Executed"];
      emphasis StatePicked = [TransportTaskStatus = "Picked"];
   }
   field FromContract {
      size = Small;
   }
   field FromLocationNoRef {
      size = Small;
   }
   field ToContract {
      size = Small;
   }
   lov ToLocationNoRef with ReferenceInventoryLocation11Selector {
      size = Small;
   }
   lov ForwardToLocationNoRef with ReferenceInventoryLocationSelector {
      size = Small;
   }
   lov ExtHandlingUnitIdRef with ReferenceHandlingUnitExtendedSelector;
   field LotBatchNo {
      size = Small;
   }
   field SerialNo;
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   measure Quantity(UoM) {
      label = "Quantity";
      unitexportlabel = "UOM";
   }
   measure CatchQuantity(CatchUoM) {
      editable = [CatchQuantityRequired];
      label = "Catch Quantity";
      unitexportlabel = "Catch UOM";
   }
   field CatchQuantityRequired {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.Description;
   }
   field OrderType;
   field OrderTypeDb {
      columnexclude = [true];
      columnvisible = [false];
   }
   field OrderRef1 {
      size = Small;
   }
   field OrderRef2 {
      size = Small;
   }
   field OrderRef3 {
      size = Small;
   }
   field OrderRef4;
   field PickListNo {
      size = Small;
   }
   field ShipmentId;
   field Destination;
   field FromLocationGroup;
   field FromWarehouse;
   field FromBay;
   field FromRow;
   field FromTier;
   field FromBin;
   field ToWarehouse;
   field ToBay;
   field ToRow;
   field ToTier;
   field ToBin;
   field ProjectId;

   fieldset ProjectDetailsFieldSet;
   field ActivitySeq;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
   }
   field HandlingUnitIdRef.Sscc {
      label = "SSCC";
   }
   field HandlingUnitIdRef.AltHandlingUnitLabelId {
      label = "Alt Handling Unit Label ID";
   }
   field OutermostHandlingUnitId;
   lov OuterMostHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Outermost Handling Unit Type";
      description = OuterMostHandlingUnitTypeIdRef.Description;
   }
   field OutermostHandlingUnitIdRef.Sscc {
      label = "Outermost SSCC";
   }
   field OutermostHandlingUnitIdRef.AltHandlingUnitLabelId {
      label = "Outermost Alt Handling Unit Label ID";
   }
   field PartOwnership;
   field Owner;
   field OwnerName;
   field CreateDate {
      showonlydate = [true];
   }
   field WarehouseTaskStarted {
      size = Small;
   }
   field Level2HandlingUnitId;
   field Level2HandlingUnitIdRef.Sscc {
      label = "Level 2 SSCC";
   }
   field Level2HandlingUnitIdRef.AltHandlingUnitLabelId {
      label = "Level 2 Alt Handling Unit Label ID";
   }
   field TopParentHandlingUnitId;
   lov TopParentHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Top Parent Handling Unit Type";
      description = TopParentHandlingUnitTypeIdRef.Description;
   }
   field TopParentHandlingUnitIdRef.Sscc {
      label = "Top Parent SSCC";
   }
   field TopParentHandlingUnitIdRef.AltHandlingUnitLabelId {
      label = "Top Parent Alt Handling Unit Label ID";
   }
   field AvaliableToReserve {
      size = Small;
   }

}

--------------------------------- SELECTORS ---------------------------------

--------------------------- PROJECTION FRAGMENTS ----------------------------
entityset AvailableTransportTaskLinesSet for TransportTaskLines;
entityset TransportTaskLinesSet for TransportTaskLines;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity TransportTaskLines using TransportTaskLine {
   crud = Read, Update, Delete;
   attribute PartNo Text {
      editable = [false];
   }
   attribute FixedDb Boolean("TRUE", "FALSE") {
      fetch = "FIXED_DB";
      label = "Fixed";
   }
   attribute ConfigurationId Text {
      maxlength = 100;
      editable = [false];
   }
   attribute TransportTaskStatus Enumeration(TransportTaskStatus) {
      required = [true];
      editable = [false];
   }
   attribute FromContract Text {
      label = "From Site";
      editable = [false];
   }
   attribute FromLocationNo Text {
      editable = [false];
   }
   attribute ToContract Text {
      label = "To Site";
      editable = [false];
   }
   attribute HandlingUnitId Number;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Rev No";
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      editable = [false];
   }
   attribute UoM Text {
      fetch = "Transport_Task_Line_API.Get_Unit_Meas(TRANSPORT_TASK_ID, LINE_NO)";
      label = "UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchQuantity Number {
      editable = [ETag != null];
   }
   attribute CatchUoM Text {
      fetch = "Transport_Task_Line_API.Get_Catch_Unit_Meas(TRANSPORT_TASK_ID, LINE_NO)";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchQuantityRequired Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Transport_Task_Line_API.Catch_Quantity_Required(TRANSPORT_TASK_ID, LINE_NO),0,'FALSE',1,'TRUE')";
      label = "Catch Quantity Required";
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(PART_NO, SERIAL_NO, LOT_BATCH_NO)";
      label = "Conditon Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute OrderType Enumeration(OrderType) {
      label = "Source Ref Type";
      editable = [false];
   }
   attribute OrderTypeDb Text;
   attribute OrderRef1 Text {
      label = "Source Ref 1";
      editable = [false];
   }
   attribute OrderRef2 Text {
      label = "Source Ref 2";
      editable = [false];
   }
   attribute OrderRef3 Text {
      label = "Source Ref 3";
      editable = [false];
   }
   attribute OrderRef4 Number {
      label = "Source Ref 4";
      editable = [false];
   }
   attribute Destination Enumeration(InventoryPartDestination) {
      editable = [ETag != null];
   }
   attribute FromLocationGroup Text {
      maxlength = 2000;
   }
   attribute FromWarehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(FROM_CONTRACT,FROM_LOCATION_NO)";
      label = "From Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromBay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(FROM_CONTRACT,FROM_LOCATION_NO)";
      label = "From Bay";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromRow Text {
      fetch = "Inventory_Location_API.Get_Row_No(FROM_CONTRACT,FROM_LOCATION_NO)";
      label = "From Row";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromTier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(FROM_CONTRACT,FROM_LOCATION_NO)";
      label = "From Tier";
      maxlength = 2000;
      editable = [false];
   }
   attribute FromBin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(FROM_CONTRACT,FROM_LOCATION_NO)";
      label = "From Bin";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToWarehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(TO_CONTRACT,TO_LOCATION_NO)";
      label = "To Warehouse";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToBay Text {
      fetch = "Inventory_Location_API.Get_Bay_No(TO_CONTRACT,TO_LOCATION_NO)";
      label = "To Bay";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToRow Text {
      fetch = "Inventory_Location_API.Get_Row_No(TO_CONTRACT,TO_LOCATION_NO)";
      label = "To Row";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToTier Text {
      fetch = "Inventory_Location_API.Get_Tier_No(TO_CONTRACT,TO_LOCATION_NO)";
      label = "To Tier";
      maxlength = 2000;
      editable = [false];
   }
   attribute ToBin Text {
      fetch = "Inventory_Location_API.Get_Bin_No(TO_CONTRACT,TO_LOCATION_NO)";
      label = "To Bin";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
   }
   attribute NoOfUnidentifiedSerials Number {
      fetch = "Transport_Task_Line_API.Get_No_Of_Unidentified_Serials(TRANSPORT_TASK_ID, LINE_NO)";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      editable = [false];
   }
   attribute OutermostHandlingUnitId Number {
      label = "Outermost Handling Unit ID";
   }
   attribute OutermostHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(OUTERMOST_HANDLING_UNIT_ID)";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Part_Ownership(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Ownership";
   }
   attribute Owner Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner";
      maxlength = 2000;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(FROM_CONTRACT, PART_NO, CONFIGURATION_ID, FROM_LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute CreateDate Timestamp {
      label = "Date Created";
      required = [true];
   }
   attribute TransportTaskStatusDb Text {
      fetch = "TRANSPORT_TASK_STATUS_DB";
      label = "Transport Task Status";
      maxlength = 20;
      editable = [false];
   }
   attribute WarehouseTaskStarted Boolean("TRUE", "FALSE") {
      fetch = "Transport_Task_Manager_API.Warehouse_Task_Is_Started_Db(TRANSPORT_TASK_ID)";
      label = "Warehouse Task Started";
      editable = [false];
   }
   attribute Level2HandlingUnitId Text {
      fetch = "Handling_Unit_API.Get_Second_Level_Parent_Hu_Id(HANDLING_UNIT_ID)";
      label = "Level 2 Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvaliableToReserve Boolean("TRUE", "FALSE") {
      fetch = "Transport_Task_Line_API.Can_Be_Used_For_Reservation_Db(TRANSPORT_TASK_ID, LINE_NO)";
      label = "Avaliable To Reserve";
      editable = [false];
   }
   attribute UnIdentifiedSerials Number {
      fetch = "Transport_Task_Line_API.Get_No_Of_Unidentified_Serials(TRANSPORT_TASK_ID, LINE_NO)";
   }
   attribute ForwardToWarehouse Text {
      fetch = "Inventory_Location_API.Get_Warehouse(to_contract, forward_to_location_no)";
   }
   attribute ParentTransportTaskId Number {
      fetch = "''";
   }
   attribute ParentFixedDb Text {
      fetch = "''";
   }
   reference TransportTaskIdRef(TransportTaskId) to TransportTask(TransportTaskId) {
      label = "Transport Task ID";
   }
   reference InventoryPartRef(FromContract, PartNo) to InventoryPart(Contract, PartNo);
   reference ConfigurationIdRef(FromContract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference FromLocationNoRef(FromContract, FromLocationNo) to InventoryLocation11(Contract, LocationNo) {
      label = "From Location No";
   }
   reference ToLocationNoRef(ToContract, ToLocationNo) to InventoryLocation11(Contract, LocationNo) {
      label = "To Location No";
   }
   reference ForwardToLocationNoRef(ToContract, ForwardToLocationNo) to InventoryLocation(Contract, LocationNo) {
      label = "Forward to Location No";
   }
   reference ExtHandlingUnitIdRef(HandlingUnitId) to HandlingUnitExtended(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference OutermostHandlingUnitIdRef(OutermostHandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference OuterMostHandlingUnitTypeIdRef(OutermostHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference Level2HandlingUnitIdRef(Level2HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference TopParentHandlingUnitIdRef(TopParentHandlingUnitId) to HandlingUnit(HandlingUnitId);

}
