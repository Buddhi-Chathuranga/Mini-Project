----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-05-13  DaZase  SCUXXW4-19688, Added initialcheck to all unbounded actions.
-- 2019-05-03  ChFolk  SCUXXW4-13755, Added attribute Description and removed attribute RemoveConnectedWarehouses.
-- 2018-11-22  ChFolk  SCUXXW4-7232, Mooved entity RemoteWhseAssortConnect and corresponding methods to the framnet RemoteWarehouseAssortmentList and it is included here.
-- 2018-10-19  ChFolk  SCUXXW4-6447, Added attributes ConnectToSite and RemoteWarehouseExist to control enable disable commands and crud operations.
-- 2018-10-19          Defined references to avoid get methods for description.
-- 2018-08-24  ChFolk  SCUXXW4-6447, Added Command actions.
-- 2018-08-23  SuDelk  SCUXXW4-6447, Started to convert FrmRemoteWarehouseAssortment using MTG Version: 1.25
----------------------------------------------------------------------------------------------------------
projection RemoteWarehouseAssortmentHandling;
component INVENT;
layer Core;
description "Use this API to create a remote warehouse assortment, to prioritize it, to define a list of parts including refill parameters, to set the sites it is valid for, and to connect it to one or several remote warehouses. ";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment RemoteWhseSiteWhseLovSelector;
include fragment RemoteWhseAssortmentLovSelector;
include fragment WarehouseLov5Selector;
include fragment RemoteWarehouseAssortmentList;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset RemoteWhseAssortmentSet for RemoteWhseAssortment;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity RemoteWhseAssortment {
   crud = Create, Read, Update, Delete;
   ludependencies = RemoteWhseAssortSite;

   from = "remote_whse_assortment";
   exec = "REMOTE_WHSE_ASSORTMENT_API";
   keys = AssortmentId {
      where = "ASSORTMENT_ID = :AssortmentId";
   }
   attribute AssortmentId Text {
      fetch = "ASSORTMENT_ID";
      label = "Assortment ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "DESCRIPTION";
      maxlength = 200;
      required = [true];
      editable = [ETag = null];
   }
   attribute Priority Number {
      fetch = "PRIORITY";
      label = "Priority";
      required = [true];
   }
   attribute OrderProcessingType Text {
      fetch = "ORDER_PROCESSING_TYPE";
      label = "Order Processing Type";
      maxlength = 3;
      format = uppercase;
   }
   attribute ValidForAllSitesDb Boolean("TRUE", "FALSE") {
      fetch = "VALID_FOR_ALL_SITES_DB";
      label = "Valid for All Sites";
      editable = [true];
   }
   attribute ContractExists Text {
      fetch = "Remote_Whse_Assort_Site_API.Is_Connected_To_A_Site(ASSORTMENT_ID)";
   }
   attribute ConnectedWarehouseExists Text {
      fetch = "Remote_Whse_Assort_Connect_API.Connected_Warehouse_Exist(ASSORTMENT_ID)";
   }
   attribute ConnectToSite Boolean("TRUE", "FALSE") {
      fetch = "Remote_Whse_Assort_Site_API.Is_Connected_To_A_Site(ASSORTMENT_ID)";
      label = "";
      editable = [false];
   }
   attribute RemoteWarehouseExist Boolean("TRUE", "FALSE") {
      fetch = "Remote_Whse_Assort_Connect_API.Connected_Warehouse_Exist(ASSORTMENT_ID)";
      label = "";
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   reference OrderProcTypeRef(OrderProcessingType) to OrderProcType(ProcessType);
   array PartsArray(AssortmentId) to RemoteWhseAssortPart(AssortmentId);
   array SitesArray(AssortmentId) to RemoteWhseAssortSite(AssortmentId);
   array RemoteWarehouseArray(AssortmentId) to RemoteWarehouseAssortmentConnection(AssortmentId);
}

@Override
entity RemoteWhseAssortPart {
   crud = Create, Read, Update, Delete;
   from = "remote_whse_assort_part";
   exec = "REMOTE_WHSE_ASSORT_PART_API";
   keys = AssortmentId, PartNo {
      where = "ASSORTMENT_ID = :AssortmentId and PART_NO = :PartNo";
   }
   attribute AssortmentId Text {
      fetch = "ASSORTMENT_ID";
      label = "Assortment ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute RefillPointQty Number {
      fetch = "REFILL_POINT_QTY";
      label = "Refill Point Qty";
      required = [true];
   }
   attribute RefillToQty Number {
      fetch = "REFILL_TO_QTY";
      label = "Refill to Qty";
      required = [true];
   }
   attribute RefillSource Enumeration(RemoteWhseRefillSource) {
      fetch = "REFILL_SOURCE_DB";
      label = "Refill Source";
      required = [true];
   }
   attribute RemoveExcessInventoryDb Boolean("TRUE", "FALSE") {
      fetch = "REMOVE_EXCESS_INVENTORY_DB";
      label = "Remove Excess Inventory";
      required = [true];
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo);

}
@Override
entity RemoteWhseAssortSite {
   crud = Create, Read, Update, Delete;
   ludependencies = RemoteWhseAssortment;

   ludependencies = RemoteWarehouseAssortmentConnection;


   from = "remote_whse_assort_site";
   exec = "REMOTE_WHSE_ASSORT_SITE_API";
   keys = AssortmentId, Contract {
      where = "ASSORTMENT_ID = :AssortmentId and CONTRACT = :Contract";
   }
   attribute AssortmentId Text {
      fetch = "ASSORTMENT_ID";
      label = "Assortment ID";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract);
}

---------------------------------- ACTIONS ----------------------------------
action ConnectToAllWarehouses {
   initialcheck implementation;
   parameter AssortmentId Text;
   ludependencies = RemoteWhseAssortConnect;
}
action OptimizeUsingPutawayForAllWarehouses {
   initialcheck implementation;
   parameter AssortmentId Text;
}

------------------------------ Functions -------------------------------
function GetOpTypeDescription Text {
   parameter AssortmentId Text;
}
function CheckConnectedWarehouseExist Text {
   parameter AssortmentId Text;
}
function GetRemoteWarehouse List<Entity(WarehouseLov5)> {
   where = "(REMOTE_WAREHOUSE_DB = 'TRUE')";
}

