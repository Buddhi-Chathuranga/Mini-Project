-----------------------------------------------------------------------------
--
--  Fragment:     InventorySiteHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-06-28  RaMolk  SC21R2-1628, Added DynamicComponentDependency INVPLA InventoryPlanningGroup, IprRefresh Command, SiteIprSingleton
-- 2021-06-14  LEPESE  SC21R2-794, added field CascadPostingDateOption ValuationGroup for SiteInventInfo.
-- 2021-05-11  JiThlk  Bug SCZ-14214, Added new tab Inventory Part Planning, Group InventoryPlanningGroup, attributes IprDeleteRequisitionDb, IprUseReleaseReqDb.
-- 2020-08-13  JiThlk  SC2020R1-9195, Added IprRefresh Command to notify demand plan server.
-- 2020-05-21  BudKLK  Bug 153999(SCZ-9885), Added new field MaxRecords to the group CountingGroup.
-- 2020-01-14  SBalLK  Bug 151810(SCZ-8466), Renamed ExecuteTransportOnlineDb attribute to ExecTranspTaskBackgroundDb.
-- 2019-12-21  SBalLK  Bug 151508(SCZ-7902), Added ExecuteTransportOnlineDb attribute.
-- 2019-08-28  ChFolk  SCUXXW4-23117, Used Enumeration for NegativeOnHand and ExtServiceCostMethod instead of Boolean.
-- 2019-02-01  DaZase  SCUXXW4-6264, Converted from frmInventorySite using MTG Version: 1.34
-----------------------------------------------------------------------------
fragment InventorySiteHandling;
component INVENT;
layer Core;
description "Use this fragment to add warehouse management sub menu for site and to enter basic data with inventory and transport task details for the site";
include fragment CountryOfRegionLovSelector;
@DynamicComponentDependency INVPLA
include fragment IprRefreshActions;
----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------
page SiteInventInfo using CompanySiteSet {
   label = "Warehouse Management";

   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CompanySiteSelector;
   singleton SiteInventSingleton(SiteInventInfoArray) bind CompanySiteSelector;
   group CompanySiteGroup;
   tabs {
      tab {
         label = "General";
         arrange {
            arrange {
               group GeneralInventoryGroup bind SiteInventSingleton;
               group CountingGroup bind SiteInventSingleton;
            }
            arrange {
               group InventoryValuationMethodGroup bind SiteInventSingleton;
               group ValuationGroup bind SiteInventSingleton;
               group SpecialIntrastatDataGroup bind SiteInventSingleton;
            }
         }
         group ClassificationGroup bind SiteInventSingleton;
      }
      tab {
         label = "Automatic Reservation";
         arrange {
            group AutoReserveGroup bind SiteInventSingleton;
            group AutoReservePrioGroup bind SiteInventSingleton;
         }
      }
      tab {
         label = "Transport Task";
         group TransportTaskGroup bind SiteInventSingleton;
         group AutomaticConsolidationGroup bind SiteInventSingleton;
      }
      @DynamicComponentDependency INVPLA
      tab {
         label = "Inventory Part Planning";
         singleton SiteIprSingleton(SiteIprInfoArray) bind CompanySiteSelector;
         group InventoryPlanningGroup bind SiteIprSingleton;
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
// Groups for General Tab
group GeneralInventoryGroup for SiteInventInfo {
   label = "";
   field NegativeOnHand {
      enumerationtrue = "NegativeOnHandAllowed";
      enumerationfalse = "NegativOnHandNotAllowed";
      truelabel = "Yes";
      falselabel = "No";
   }
   field MrbAvailControlIdRef;
   field AvgWorkDaysPerWeek;
   field PickingLeadtime;
   field DefaultQtyCalcRound;
   field PutawayZoneRefillOption;
   field MoveReservationOption {
      when [true] use subset MoveReserved;
   }
   field PickByChoiceOption;

   field UsePartcaDescInventDb;
   field AllowPartlocOwnerMixDb;
}
group CountingGroup for SiteInventInfo {
   label = "Counting";
   field CountDiffAmount;
   field CountDiffPercentage;
   field CountingPrintReportOpt {
      size = Small;
   }
   field MaxCountingLines;
   field FreezeStockCountReportDb;
}
group InventoryValuationMethodGroup for SiteInventInfo {
   label = "Inventory Valuation Method";
   field PurchInvValueMethod;
   field ManufInvValueMethod;
}
group ValuationGroup for SiteInventInfo {
   label = "Valuation";
   field ExtServiceCostMethod {
      enumerationtrue = "IncludeServiceCost";
      enumerationfalse = "ExcludeServiceCost";
      truelabel = "Yes";
      falselabel = "No";
   }
   field InvoiceConsideration;
   field LastActualCostCalc;
   field RounddiffInactivityDays;
   field CostDefaultsManuallyDb;
   field ResetConfigStdCostDb;
   field CascadPostingDateOption;
}
group ClassificationGroup for SiteInventInfo {
   label = "Classification";
   field UpperLimitVeryslowMover;
   field UpperLimitSlowMover;
   field UpperLimitMediumMover;
   field AbcClassPerAssetClassDb {
      size = Small;
   }
}
group SpecialIntrastatDataGroup for SiteInventInfo {
   label = "Special Intrastat Data";
   lov CountryCodeRef with ReferenceCountryOfRegionLovSelector {
      size = Small;
   }
   field CountryCodeRef.Description {
      label = "Country Description";
      size = Small;
   }
   field RegionCodeRef {
      size = Small;
   }
   field RegionCodeRef.RegionName {
      size = Small;
      label = "Region Description";
   }
}

// Group for Automatic Reservation Tab
group AutoReservePrioGroup for SiteInventInfo {
   label = "Priorities";
   field AutoReservePrio1 {
      size = FullWidth;
   }
   field AutoReservePrio2 {
      size = FullWidth;
   }
   field AutoReservePrio3 {
      size = FullWidth;
   }
   field AutoReservePrio4 {
      size = FullWidth;
   }
   field AutoReservePrio5 {
      size = FullWidth;
   }
}
group AutoReserveGroup for SiteInventInfo {
   label = "";
   field AutoReserveHuOptimizedDb {
      size = FullWidth;
   }
   field AutoReserveReceiptTimeDb {
      size = FullWidth;
   }
   field ReservFromTranspTaskDb {
      size = FullWidth;
   }
}

// Groups for Transport Task Tab
group TransportTaskGroup for SiteInventInfo {
   label = "";
   field AutoDropofManTransTaskDb {
      size = Medium;
   }
   field AllowDeviatingAvailCtrlDb {
      size = Medium;
   }
   field ExecTranspTaskBackgroundDb {
      size = Medium;
   }
}
group AutomaticConsolidationGroup for SiteInventInfo {
   label = "Automatic Consolidation";
   field TransportPartConsLevel;
   field TransportRefConsLevel;
   field TransportFromWhseLevel;
   field TransportToWhseLevel;
}

@DynamicComponentDependency INVPLA
group InventoryPlanningGroup for SiteIprInfo {
   label = "Planning";
   field IprActiveDb {
      validate command IprRefresh;
   }
   field IprDeleteRequisitionDb;
   field IprUseReleaseReqDb;

}
----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
@DynamicComponentDependency INVPLA
command IprRefresh for SiteIprInfo {
   variable ResultVar Text;
   execute {
      @DynamicComponentDependency INVPLA
      call IprRefreshAllSites(Contract) into ResultVar;
      if[ResultVar = "SUCCESS"] {
         info("IPR Server Notified");
      }
      else {
         if[ResultVar != ""] {
            info("${ResultVar}");
         }
      }

   }
}


---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

-------------------------------- SINGLETONS ---------------------------------
singleton SiteInventSingleton for SiteInventInfo {
   crudactions {
      edit {
         enabled = [true];
      }
   }

}

@DynamicComponentDependency INVPLA
singleton SiteIprSingleton for SiteIprInfo {
   crudactions {
      edit {
         enabled = [true];
      }
   }

}


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SiteInventInfoSet for SiteInventInfo;
@DynamicComponentDependency INVPLA
entityset SiteIprInfoSet for SiteIprInfo;
------------------------------ ENTITY DETAILS -------------------------------
@Override
@DynamicComponentDependency INVPLA
entity SiteIprInfo {
   crud = Read, Update;
   use attributes = IprActive, IprDeleteRequisition, IprUseReleaseReq;
   attribute IprActiveDb Boolean("TRUE", "FALSE") {
      fetch = "ipr_active_db";
      label = "Inventory Part Planning and Replenishment";
      editable = [ETag != null];
      required = [true];
   }

   attribute IprDeleteRequisitionDb Boolean("TRUE", "FALSE") {
      fetch = "ipr_delete_requisition_db";
      label = "Delete Older Requisitions";
      editable = [ETag != null];
      required = [true];
   }
   attribute IprUseReleaseReqDb Boolean("TRUE", "FALSE") {
      fetch = "ipr_use_release_req_db";
      label = "Use release requisions for planning";
      editable = [ETag != null];
      required = [true];
   }
}
@Override
entity SiteInventInfo {
   crud = Read, Update;
   use attributes = PurchInvValueMethod, ManufInvValueMethod, ExtServiceCostMethod, InvoiceConsideration, LastActualCostCalc, RounddiffInactivityDays, CountDiffAmount, CountDiffPercentage, CountingPrintReportOpt, UpperLimitVeryslowMover, UpperLimitSlowMover, UpperLimitMediumMover, CountryCode, RegionCode, NegativeOnHand, MrbAvailControlId, AvgWorkDaysPerWeek, PickingLeadtime, DefaultQtyCalcRound, PutawayZoneRefillOption, MoveReservationOption, PickByChoiceOption, TransportPartConsLevel, TransportRefConsLevel, TransportFromWhseLevel, TransportToWhseLevel, AutoReservePrio1, AutoReservePrio2, AutoReservePrio3, AutoReservePrio4, AutoReservePrio5, MaxCountingLines, CascadPostingDateOption;
   attribute PurchInvValueMethod Enumeration(InventoryValueMethod) {
      label = "Purchased Parts";
   }
   attribute ManufInvValueMethod Enumeration(InventoryValueMethod) {
      label = "Manufactured Parts";
   }
   attribute ExtServiceCostMethod Enumeration(ExtServiceCostMethod) {
      label = "Include External Service Cost";
      fetch = "ext_service_cost_method_db";
      required = [true];
   }
   attribute InvoiceConsideration Enumeration(InvoiceConsideration) {
      label = "Supplier Invoice Consideration";
   }
   attribute CascadPostingDateOption Enumeration(AdjustPostingDateOption) {
      label = "Posting Date in Transaction Based Cost Adjustments";
   }
   attribute LastActualCostCalc Timestamp {
      label = "Last Period WA Date";
      editable = [ETag = null];
   }
   attribute RounddiffInactivityDays Number {
      label = "Inactive Days For Remaining Stock Value";
   }
   attribute CostDefaultsManuallyDb Boolean("TRUE", "FALSE") {
      fetch = "cost_defaults_manually_db";
      label = "Get Cost Detail Defaults Manually";
      required = [true];
   }
   attribute ResetConfigStdCostDb Boolean("TRUE", "FALSE") {
      fetch = "reset_config_std_cost_db";
      label = "Reset Configuration Standard Cost from Supply Site";
      required = [true];
   }
   attribute CountDiffAmount Number {
      format = ifscurrency;
   }

   attribute MaxCountingLines Number {
      label = "Number of records to be Printed";
   }

   attribute FreezeStockCountReportDb Boolean("TRUE", "FALSE") {
      fetch = "freeze_stock_count_report_db";
      label = "Freeze Stock on Counting Report";
      required = [true];
   }
   attribute UpperLimitVeryslowMover Number {
      maxlength = 32767;
   }
   attribute UpperLimitSlowMover Number {
      maxlength = 32767;
   }
   attribute UpperLimitMediumMover Number {
      maxlength = 32767;
   }
   attribute AbcClassPerAssetClassDb Boolean("TRUE", "FALSE") {
      fetch = "abc_class_per_asset_class_db";
      label = "ABC Classification Per Asset Class";
      required = [true];
   }
   attribute CountryCode Text {
      label = "Country";
   }
   attribute CountryDescription Text {
      fetch = "Iso_Country_API.Get_Description(country_code)";
      label = "Country Description";
      maxlength = 100;
      editable = [false];
   }
   attribute NegativeOnHand Enumeration(NegativeOnHand) {
      fetch = "negative_on_hand_db";
      label = "Negative On Hand Allowed";
      required = [true];
   }
   attribute MrbAvailControlId Text {
      label = "Default Avail Control ID";
   }
   attribute AvgWorkDaysPerWeek Number {
      label = "Average Working Days Per Week";
   }
   attribute PickingLeadtime Number {
      label = "Picking Lead Time";
   }
   attribute DefaultQtyCalcRound Number {
      maxlength = 2;
   }
   attribute PutawayZoneRefillOption Enumeration(PutawayZoneRefillOption) {
      label = "Refill Putaway Zones";
   }
   attribute MoveReservationOption Enumeration(ReservatAdjustmentOption) {
      label = "Move Reserved Stock";
   }
   attribute UsePartcaDescInventDb Boolean("TRUE", "FALSE") {
      fetch = "use_partca_desc_invent_db";
      label = "Use Part Catalog Description for Inventory Part";
      required = [true];
   }
   attribute AllowPartlocOwnerMixDb Boolean("TRUE", "FALSE") {
      fetch = "allow_partloc_owner_mix_db";
      label = "Allow multiple owners for Inventory Part on one Location";
      required = [true];
   }
   attribute PickByChoiceOption Enumeration(ReservatAdjustmentOption) {
      label = "Pick by Choice";
   }

   attribute TransportPartConsLevel Enumeration(TransportPartConsLevel) {
      label = "Part By";
   }
   attribute TransportRefConsLevel Enumeration(TransportRefConsLevel) {
      label = "Source By";
   }
   attribute TransportFromWhseLevel Enumeration(WarehouseStructureLevel) {
      label = "From Location By";
   }
   attribute TransportToWhseLevel Enumeration(WarehouseStructureLevel) {
      label = "To Location By";
   }
   attribute AutoDropofManTransTaskDb Boolean("TRUE", "FALSE") {
      fetch = "auto_dropof_man_trans_task_db";
      label = "Auto Assign Drop-Off Location on Manual Transport Task";
      required = [true];
   }
   attribute AllowDeviatingAvailCtrlDb Boolean("TRUE", "FALSE") {
      fetch = "allow_deviating_avail_ctrl_db";
      label = "Allow Deviating Part Availability Control";
      required = [true];
      editable = [ETag != null];
   }
   attribute ExecTranspTaskBackgroundDb Boolean("TRUE", "FALSE") {
      fetch = "exec_transp_task_background_db";
      label = "Execute Transport Task Background";
      required = [true];
   }
   attribute AutoReservePrio1 Enumeration(InventAutoReservePrio) {
      label = "Priority 1";
   }
   attribute AutoReservePrio2 Enumeration(InventAutoReservePrio) {
      label = "Priority 2";
   }
   attribute AutoReservePrio3 Enumeration(InventAutoReservePrio) {
      label = "Priority 3";
   }
   attribute AutoReservePrio4 Enumeration(InventAutoReservePrio) {
      label = "Priority 4";
   }
   attribute AutoReservePrio5 Enumeration(InventAutoReservePrio) {
      label = "Priority 5";
   }

   attribute AutoReserveHuOptimizedDb Boolean("TRUE", "FALSE") {
      fetch = "auto_reserve_hu_optimized_db";
      label = "Handling Unit Optimization";
      editable = [ETag != null];
      required = [true];
   }
   attribute AutoReserveReceiptTimeDb Boolean("TRUE", "FALSE") {
      fetch = "auto_reserve_receipt_time_db";
      label = "Receipt Date with Timestamp";
      editable = [ETag != null];
      required = [true];
   }
   attribute ReservFromTranspTaskDb Boolean("YES", "NO") {
      fetch = "DECODE(reserv_from_transp_task_db, 'YES', 'TRUE', 'FALSE')";
      label = "Reserve from Transport Task";
      editable = [ETag != null];
      required = [true];
   }
   reference CountryCodeRef(CountryCode) to CountryOfRegionLov(CountryCode) {
      label = "Country";
   }
   reference RegionCodeRef(CountryCode, RegionCode) to CountryRegion(CountryCode, RegionCode) {
      label = "Region Code";
   }
   reference MrbAvailControlIdRef(MrbAvailControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Default Avail Control ID";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

