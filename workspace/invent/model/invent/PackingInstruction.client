----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2020-10-19  JaThlk  Bug 155995(SCZ-12048), Modified NewCommand to set the mode, Global.
-- 2019-06-06  ChFolk  SCUXXW4-22142, Added NewCommand to the tree to allow adding new records into empty page.
-- 2019-04-01  ChFolk  SCUXXW4-6367, Modified NewCommnad as the old code is not working propaly after the new framework changes.
-- 2019-01-14  ChFolk  SCUXXW4-6367, Completed commands DeleteAllNodesCommand and AddSubHandlingUnitCommand. Added new dialog CreateSubHandlingUnitDialog
-- 2019-01-14          which allows to enter new sub node to the packing instruction.
-- 2019-01-11  ChFolk  SCUXXW4-6367, Converted frmPackingInstruction using MTG Version: 1.34.
----------------------------------------------------------------------------------------------------------
client PackingInstruction;
component INVENT;
layer Core;
projection PackingInstructionHandling;

warningsenabled = CreatePackingInstruction, CreateSubHandlingUnit;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry WarehouseMgtPackingInstructionNavEntry parent InventNavigator.WarehouseManagementHandlingUnits at index 300 {
      label = "Packing Instruction";
      tree PackingInstrctionTree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page PackingInstructionDetail using PackingInstructionSet {
   label = "Packing Instruction";
   selector PackingInstructionSelector;
   group PackingInstructionGroup;
   list PackingInstructionNodeList(PackingInstructionDetailsArray) {
      copyoncruddefault(PackingInstructionId) to(PackingInstructionId);

   }
   list PackingInstructionNodeAccessoryList(PackingInstAccessoriesArray) bind PackingInstructionNodeList;

   command NewCommand;
   command DeleteAllNodesCommand;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command NewCommand for PackingInstruction {
   label = "New";
   icon = "new";
   style = IconOnly;
   mode = Global;
   variable NewPackingInstructionIdVar {
      type = Text;
   }
   variable DescriptionVar {
      type = Text;
   }
   execute {
      dialog CreatePackingInstructionDialog into(NewPackingInstructionIdVar, DescriptionVar) {
         when OK {
            call CreatePackingInstruction(NewPackingInstructionIdVar, DescriptionVar);
            set PackingInstructionId = NewPackingInstructionIdVar;
            navigate {
               tree PackingInstrctionTree {
                  filter(PackingInstructionId, PackingInstructionId);
                  treefilter(PackingInstructionId, PackingInstructionId);
               }
            }

         }

      }
   }
}

command DeleteAllNodesCommand for PackingInstruction {
   label = "Delete All Nodes";
   enabled = [NodeExist = 1];
   execute {
      confirm("This will delete all nodes in the current packing instruction.") {
         when OK {
            call RemoveCompleteStructure();
         }
         when CANCEL {
            exit;
         }
      }
   }
}


command AddSubHandlingUnitCommand for PackingInstructionNode {
   label = "Add Sub-Handling Unit";
   mode = SingleRecord;
   enabled = [true];
   variable NewParentNodeIdVar {
      type = Number;
   }
   variable NewHandlingUnitTypeIdVar {
      type = Text;
   }
   variable NewQuantityVar {
      type = Number;
   }
   execute {
      dialog CreateSubHandlingUnitDialog(parent.PackingInstructionId, parent.Description, NodeId) into(NewParentNodeIdVar, NewHandlingUnitTypeIdVar, NewQuantityVar) {
         when OK {
            call CreateSubHandlingUnit(parent.PackingInstructionId, parent.Description, NewParentNodeIdVar, NewHandlingUnitTypeIdVar, NewQuantityVar);
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector PackingInstructionSelector for PackingInstruction {
   label = "${PackingInstructionId} - ${Description}";
   static PackingInstructionId;
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group PackingInstructionGroup for PackingInstruction {
   label = "";
   field PackingInstructionId;
   field Description;
}

group NewPackingInstrctionGroup for PackingInstrctionStructure {
   label = "";
   field PackingInstructionId;
   field Description;
}

group NewSubHandlingUnitGroup for SubHandlingUnitStructure {
   label = "";
   field ParentNodeId {
      size = Small;
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
   }
   field Quantity {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------
list PackingInstructionNodeList for PackingInstructionNode {
   orderby = LevelNo;
   label = "Nodes";

   field LevelNo {
      size = Small;
   }
   field NodeId {
      size = Small;
   }
   lov ParentNodeIdRef with ReferencePackingInstructionNodeSelector {
      freeinput = [true];
      editable = [true];
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
      validate command {
         variable HuTypeDetalStructureVar {
            type = Structure(HandlingUnitTypeDetailStructure);
         }
         execute {
            call GetHandlingUnitTypeDetails(HandlingUnitTypeId) into HuTypeDetalStructureVar;
            copy HuTypeDetalStructureVar into this;
         }
      }
   }
   field Quantity {
      size = Small;
   }
   field AccessoriesExist {
      size = Small;
   }
   field GenerateSsccNoDb {
      size = Small;
   }
   field PrintLabelDb {
      size = Small;
   }
   field NoOfHandlingUnitLabels {
      size = Small;
   }
   field PrintContentLabelDb {
      size = Small;
   }
   field NoOfContentLabels {
      size = Small;
   }
   field PrintShipmentLabelDb {
      size = Small;
   }
   field NoOfShipmentLabels {
      size = Small;
   }
   field MixOfPartNoBlockedDb {
      size = Small;
   }
   field MixOfCondCodeBlockedDb {
      size = Small;
   }
   field MixOfLotBatchBlockedDb {
      size = Small;
   }
   fieldranking LevelNo, NodeId, ParentNodeIdRef, HandlingUnitTypeIdRef, Quantity, AccessoriesExist, NoOfHandlingUnitLabels, NoOfContentLabels, NoOfShipmentLabels;

   command AddSubHandlingUnitCommand;
}

list PackingInstructionNodeAccessoryList for PackingInstructionAccessories {
   label = "Accessories";
   lov HandlingUnitAccessoryIdRef with ReferenceHandlingUnitAccessorySelector {
      label = "Accessory";
      description = HandlingUnitAccessoryIdRef.Description;
   }
   field Quantity;
   field HandlingUnitAccessoryIdRef.UnitCode {
      size = Small;
      label = "UoM for Quantity";
   }
   field HandlingUnitAccessoryIdRef.Weight {
      size = Small;
      label = "Net Weight";
   }
   field HandlingUnitAccessoryIdRef.UomForWeight {
      size = Small;
      label = "UoM for Weight";
   }
   field HandlingUnitAccessoryIdRef.AdditiveVolume {
      size = Small;
      label = "Additive Volume";
   }
   field HandlingUnitAccessoryIdRef.Volume {
      size = Small;
      label = "Outer Volume";
   }
   field HandlingUnitAccessoryIdRef.UomForVolume {
      size = Small;
      label = "UoM for Volume";
   }
   fieldranking HandlingUnitAccessoryIdRef, Quantity, HandlingUnitAccessoryRef.UnitCode, HandlingUnitAccessoryRef.Weight, HandlingUnitAccessoryRef.UomForWeight, HandlingUnitAccessoryRef.AdditiveVolume, HandlingUnitAccessoryRef.Volume, HandlingUnitAccessoryRef.UomForVolume;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CreatePackingInstructionDialog for PackingInstrctionStructure {
   label = "New Packing Instruction";
   output(PackingInstructionId, Description);
   group NewPackingInstrctionGroup;
   command Ok {
      enabled = [PackingInstructionId != null];
   }
   command Cancel;
}

dialog CreateSubHandlingUnitDialog for SubHandlingUnitStructure {
   label = "New Sub Handling Unit";
   input(PackingInstructionId, Description, ParentNodeId);
   output(ParentNodeId, HandlingUnitTypeId, Quantity);
   group NewSubHandlingUnitGroup;
   command Ok {
      enabled = [HandlingUnitTypeId != null and Quantity != null and ParentNodeId != null];
   }
   command Cancel;
}
---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

tree PackingInstrctionTree using PackingInstructionSet {
   label = "Packing Instruction Structure";
   selector PackingInstructionSelector;
   command NewCommand;
   rootnode RootNode {
      label = "Packing Instruction - ${PackingInstructionId}";

      navigate {
         page PackingInstructionDetail {
            filter(PackingInstructionId, PackingInstructionId);

         }
      }
      connections {
         node PackingInstructionChildNode(PackingInstructionDetailsArray) {
            defaultfilter = [ParentNodeId = null];
         }
      }
   }
   node PackingInstructionChildNode for PackingInstructionNode {

      label = "${Quantity} x - ${HandlingUnitTypeId}";
      navigate {
         page PackingInstructionDetail {
            filter(PackingInstructionId, PackingInstructionId);
         }
      }
      iconset {
         icon "box-large";
      }
      connections {
         node AccessoriesNode(PackingInstAccessoriesArray);
         node PackingInstructionChildNode using GetPackingDetails(PackingInstructionId, NodeId);
      }
   }
   node AccessoriesNode for PackingInstructionAccessories {
      label = "${HandlingUnitAccessoryId} Qty: ${Quantity} ${UoM}";
      iconset {
         icon "circle";
      }
   }
}

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

