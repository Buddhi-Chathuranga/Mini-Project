-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-05-13  DaZase  SCUXXW4-19717, Added initialcheck to all unbounded actions.
-- 2018-12-26  KoDelk  SCUXXW4-14286, Created
-----------------------------------------------------------------------------
fragment WarehouseBayTierTab;
component INVENT;
layer Core;
description "Warehouse Tier Tab";

include fragment WarehouseLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseBayLov;
include fragment WarehouseBayTierLovSelector;
include fragment WarehouseBayTierInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command CopyBinsfromTierCommand for WarehouseBayTier {
   label = "Copy Bins from Tier";
   mode = SelectedRecords;
   enabled = [true];
   variable FromContractVar;
   variable FromWarehouseVar;
   variable FromBayVar;
   variable FromTierVar;

   bulkexecute {
      dialog CopyTierStructureDialog(parent.Contract, parent.WarehouseId, parent.BayId)  into(FromContractVar, FromWarehouseVar, FromBayVar, FromTierVar) {
         when OK {
            bulkcall CopyBinsFromTier(FromContractVar, FromWarehouseVar, FromBayVar, FromTierVar, Contract, WarehouseId, BayId, TierId);
            success("Successfully copied bins from tier ${FromTierVar} of bay ${FromBayVar} of warehouse ${FromWarehouseVar} of site ${FromContractVar}.");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CopyTierStructureGroup for CopyTierStructure {
   label = "Copy Bins from";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;
   }

   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      description = WarehouseIdRef.Description;
   }

   lov BayIdRef with ReferenceWarehouseBayLovSelector {
      description = BayIdRef.Description;
   }

   lov TierIdRef with ReferenceWarehouseBayTierLovSelector {
      description = TierIdRef.Description;
   }
}
----------------------------------- LISTS -----------------------------------

list WarehouseBayTiersList for WarehouseBayTier {
   -- TODO: Turn on duplicate after update8 release and fix all boolean issues so the save works, see email from Asieh 19/3 how to fix these issues.
   crudactions {
      duplicate {
         enabled = [false];
      }
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      columnexclude = [parent.luname = "WarehouseBay"];
   }
   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      columnexclude = [parent.luname = "WarehouseBay"];
   }
   field BayIdRef {
      columnexclude = [parent.luname = "WarehouseBay"];
   }
   field TierId {
      validate command {
         execute {
            // If user has not manually updated the Route Order column we keep Route Order value in sync with Tier ID
            if [OldRouteOrder = RouteOrder] {
               set RouteOrder = TierId;
               set OldRouteOrder = RouteOrder;
            }
         }
      }
   }
   field Description;
   field BinWidthCapacity;
   field WarehouseBayTierRef.BinWidthCapacity {
      label = "Bin Width Operative Value";
   }
   field BinWidthSource;
   field BinHeightCapacity;
   field WarehouseBayTierRef.BinHeightCapacity {
      label = "Bin Height Operative Value";
   }
   field BinHeightSource;
   field BinDeptCapacity;
   field WarehouseBayTierRef.BinDeptCapacity {
      label = "Bin Depth Operative Value";
   }
   field BinDepthSource;
   field LengthUoM;
   field BinVolumeCapacity;
   field BinVolumeOperativeValue;
   field BinVolumeSource;
   field VolumeUoM;
   field TierCarryingCapacity;
   field WarehouseBayTierRef.TierCarryingCapacity {
      label = "Tier Carrying Capacity Operative Value";
   }
   field TierCarryingCapacitySource;
   field BinCarryingCapacity;
   field WarehouseBayTierRef.BinCarryingCapacity {
      label = "Bin Carrying Capacity Operative Value";
   }
   field BinCarryingCapacitySource;
   field WeightUoM;
   field BinMinTemperature;
   field WarehouseBayTierRef.BinMinTemperature {
      label = "Min Temperature Operative Value";
   }
   field MinTemperatureSource;
   field BinMaxTemperature;
   field WarehouseBayTierRef.BinMaxTemperature {
      label = "Max Temperature Operative Value";
   }
   field MaxTemperatureSource;
   field TemperatureUoM;
   field BinMinHumidity;
   field WarehouseBayTierRef.BinMinHumidity {
      label = "Min Humidity (%) Operative Value";
   }
   field MinHumiditySource;
   field BinMaxHumidity;
   field WarehouseBayTierRef.BinMaxHumidity {
      label = "Max Humidity (%) Operative Value";
   }
   field MaxHumiditySource;
   field RouteOrder;
   field ReceiptsBlockedDbQuery {
      validate command {
         execute {
            set ReceiptsBlockedDb = ReceiptsBlockedDbQuery;
         }
      }
   }
   field ReceiptsBlockedOn;
   field RcptOccupiedBlockedDbQuery {
      validate command {
         execute {
            set ReceiptToOccupiedBlockedDb = RcptOccupiedBlockedDbQuery;
         }
      }
   }
   field ReceiptToOccupiedBlockedOn;
   field MixPartNoBlockedDbQuery {
      validate command {
         execute {
            set MixOfPartNumberBlockedDb = MixPartNoBlockedDbQuery;
         }
      }
   }
   field MixOfPartNumbersBlockedOn;
   field MixCondCodeBlockedDbQuery {
      validate command {
         execute {
            set MixOfCondCodesBlockedDb = MixCondCodeBlockedDbQuery;
         }
      }
   }
   field MixOfConditionCodesBlockedOn;
   field MixLotNoBlockedDbQuery {
      validate command {
         execute {
            set MixOfLotBatchNoBlockedDb = MixLotNoBlockedDbQuery;
         }
      }
   }
   field MixOfLotBatchNumbersBlockedOn;
   field ExcludStoragReqValDbQuery {
      validate command {
         execute {
            set ExcludeStorageReqValDb = ExcludStoragReqValDbQuery;
         }
      }
   }
   field ValidationExcludedOn;
   field AvailabilityControlIdRef;
   field WarehouseBayTierRef.AvailabilityControlId {
      label = "Default Part Availability Control Operative Value";
   }
   field DefaultPartAvailabilityControlOperativeValueSource;
   field HideInWarehouseNavigator;

   commandgroup CommandGroupCmdGroup {

      command CopyBinsfromTierCommand;

   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CopyTierStructureDialog for CopyTierStructure {
   label = "Copy Bins from Tier";
   input(Contract, WarehouseId, BayId);
   output(Contract, WarehouseId, BayId, TierId);
   group CopyTierStructureGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseBayTier {
   attribute Contract Text {
      label = "Site";
      format = uppercase;
   }
   attribute WarehouseId Text {
      label = "Warehouse ID";
   }
   attribute BayId Text {
      label = "Bay ID";
      format = uppercase;
   }
   attribute TierId Text {
      label = "Tier ID";
      format = uppercase;
      default = "'  -'";
   }
   attribute BinWidthCapacity Number {
      label = "Bin Width";
   }
   attribute BinWidthSource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Width_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Bin Width Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinHeightCapacity Number {
      label = "Bin Height";
   }
   attribute BinHeightSource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Height_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Bin Height Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinDeptCapacity Number {
      label = "Bin Depth";
   }
   attribute BinDepthSource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Dept_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Bin Depth Source";
      maxlength = 100;
      editable = [false];
   }
   attribute LengthUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(CONTRACT))";
      label = "Length UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinVolumeCapacity Number {
      label = "Bin Volume";
   }
   attribute BinVolumeOperativeValue Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Volume_Capacity(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Bin Volume Operative Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinVolumeSource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Volume_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Bin Volume Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute VolumeUoM Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(CONTRACT)";
      label = "Volume UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute TierCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Tier_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Tier Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Bin Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute WeightUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(CONTRACT))";
      label = "Weight UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMinTemperature Number {
      label = "Min Temperature";
   }
   attribute MinTemperatureSource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Min_Temperature_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Min Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMaxTemperature Number {
      label = "Max Temperature";
   }
   attribute MaxTemperatureSource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Max_Temperature_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Max Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute TemperatureUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(CONTRACT))";
      label = "Temperature UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMinHumidity Number {
      label = "Min Humidity";
   }
   attribute MinHumiditySource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Min_Humidity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Min Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMaxHumidity Number {
      label = "Max Humidity";
   }
   attribute MaxHumiditySource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Bin_Max_Humidity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Max Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   attribute ReceiptsBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "RECEIPTS_BLOCKED_DB";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptsBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Tier_API.Get_Receipts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptsBlockedOn Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Receipts_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute ReceiptToOccupiedBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "RECEIPT_TO_OCCUPIED_BLOCKED_DB";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   // Receipt_To_Occupied_Blocked_Db_Query is too long.
   attribute RcptOccupiedBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Tier_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute ReceiptToOccupiedBlockedOn Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Receipt_To_Occup_Blkd_Src(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute MixOfPartNumberBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_PART_NUMBER_BLOCKED_DB";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }
   // Mix_Of_Part_Number_Blocked_Db_Query is too long
   attribute MixPartNoBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Tier_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }

   attribute MixOfPartNumbersBlockedOn Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Mix_Of_Part_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Mix of Part Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixOfCondCodesBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_COND_CODES_BLOCKED_DB";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   // Mix_Of_Cond_Codes_Blocked_Db_Query is too long
   attribute MixCondCodeBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Tier_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Mix of Condition Codes Blocked";
      editable = [false];
   }
   attribute MixOfConditionCodesBlockedOn Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Mix_Of_Cond_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Mix of Condition Codes Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixOfLotBatchNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_LOT_BATCH_NO_BLOCKED_DB";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   // Mix_Of_Lot_Batch_No_Blocked_Db_Query is too long
   attribute MixLotNoBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Tier_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Mix of Lot Batch Numbers Blocked";
      editable = [false];
   }
   attribute MixOfLotBatchNumbersBlockedOn Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Mix_Of_Lot_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Mix of Lot Batch Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute ExcludeStorageReqValDb Boolean("TRUE", "FALSE") {
      fetch = "EXCLUDE_STORAGE_REQ_VAL_DB";
      label = "Exclude Storage Requirement Validation";
      required = [true];
   }
   // Exclude_Storage_Req_Val_Db_Query is too long
   attribute ExcludStoragReqValDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Tier_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Exclude Storage Requirement Validation";
      required = [true];
   }
   attribute ValidationExcludedOn Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Excl_Storage_Req_Val_Src(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Validation Excluded on";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      label = "Default Part Availability Control Tier Value";
   }
   attribute DefaultPartAvailabilityControlOperativeValueSource Text {
      fetch = "Warehouse_Bay_Tier_API.Get_Avail_Control_Id_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Default Part Availability Control Operative Value Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute RouteOrder Text {
      fetch = "ROUTE_ORDER";
      default = "'  -'";
   }
   // If user has not manually updated the Route Order column we keep Route Order value in sync with Bay ID
   // and OldRouteOrder is used to do the comparison.
   attribute OldRouteOrder Text {
      fetch = "ROUTE_ORDER";
      implementationtype = "VARCHAR2(15)";
      default = "'  -'";
   }

   attribute HideInWarehouseNavigator Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Tier_API.Get_Hide_In_Whse_Navigator_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, TIER_ID)";
      label = "Hidden";
      required = [true];
      implementationtype = "VARCHAR2(5)";
   }


   reference WarehouseBayTierRef(Contract, WarehouseId, BayId, TierId) to WarehouseBayTier(Contract, WarehouseId, BayId, TierId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }

   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBay(Contract, WarehouseId, BayId) {
      label = "Bay ID";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Default Part Availability Control Tier Value";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CopyBinsFromTier {
   initialcheck implementation;
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter TierId Text;
   parameter ToContract Text;
   parameter ToWarehouseId Text;
   parameter ToBayId Text;
   parameter ToTierId Text;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------
structure CopyTierStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }

   attribute WarehouseId Text {
      label = "Warehouse";
      maxlength = 15;
   }

   attribute BayId Text {
      label = "Bay";
      maxlength = 5;
   }

   attribute TierId Text {
      label = "Tier";
      maxlength = 5;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse ID";
   }
   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBayLov(Contract, WarehouseId, BayId) {
      label = "Bay ID";
   }
   reference TierIdRef(Contract, WarehouseId, BayId, TierId) to WarehouseBayTierLov(Contract, WarehouseId, BayId, TierId) {
      label = "Tier ID";
   }
}
