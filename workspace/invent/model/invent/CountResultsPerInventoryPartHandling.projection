-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-10-28  DigPlk  SC21R2-2884, Added 'GetSessionIdSelection' function to support IdentifySerialsInLocRepeatAssistant.
-- 2019-07-30  MeAblk  SCUXXW4-23246, Added method ValidateExpirationDate() to validate the expiration date.
-- 2019-07-10  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-07-10  ChFolk  SCUXXW4-22798, Modified Project information by adding get methods to increase performance.
-- 2019-04-25  DaZase  SCUXXW4-19622, Added initialcheck to all unbounded actions.
-- 2018-06-11  DaZase  SCUXXW4-5929, Converted from frmApproveInventoryPart using MTG Version: 1.20
-----------------------------------------------------------------------------
projection CountResultsPerInventoryPartHandling;
component INVENT;
layer Core;
description "Use this API to approve or to cancel rejected counting results, if the counting result has been rejected in Count Per Inventory Part. It is also possible to change the counted quantity. If the counting result is approved, the quantity on hand will be updated with the result from the counting and the part will not be frozen for counting. ";
category Users;
include fragment InventoryPartLocationSelector;
include fragment HandlingUnitLovSelector;
include fragment UserAllowedSiteLovSelector;
// Everything needed for the IdentifySerialsInLocationAssistant
include fragment IdentifySerialsInLocationAssistant;
include fragment TemporaryPartTrackingSerialSelector;
include fragment SequenceGeneratorAssistant;
include fragment IdentifySerialsByBarcodeDynamicAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartConfigurations for InventoryPartConfiguration;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartConfiguration using InventoryPartConfig {
   crud = Read;
   from = "inventory_part_count_result";
   ludependencies = CountingResult;

   attribute PartNo Text {
      maxlength = 100;
      editable = [false];
   }
   attribute Description Text {
      fetch = "DESCRIPTION";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute UnitMeas Text {
      fetch = "UNIT_MEAS";
      label = "Inventory UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute CountVariance Number {
      fetch = "COUNT_VARIANCE";
      label = "Acc Count Diff";
      maxlength = 12;
      editable = [false];
   }
   attribute QtyOnhand Number {
      fetch = "QTY_ONHAND";
      label = "On Hand Qty";
      editable = [false];
   }
   attribute QtyInTransit Number {
      fetch = "QTY_IN_TRANSIT";
      label = "In Transit Qty";
      editable = [false];
   }
   attribute QtyReserved Number {
      fetch = "QTY_RESERVED";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtyInOrdTransit Number {
      fetch = "QTY_IN_ORD_TRANSIT";
      label = "In Order Transit Qty";
      editable = [false];
   }
   attribute EnabledCatchUnitMeas Text {
      fetch = "ENABLED_CATCH_UNIT_MEAS";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute TotalDifferenceQuantity Number {
      fetch = "Counting_Result_API.Get_Total_Difference_Qty(CONTRACT, PART_NO, CONFIGURATION_ID)";
      label = "Total Differenc Quantity";
      editable = [false];
   }

   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "Inventory UoM";
   }
   array CountingResultPartArray(Contract, PartNo, ConfigurationId) to CountingResult(Contract, PartNo, ConfigurationId);
}

@Override
entity CountingResult {
   crud = Read, Update;
   keys = Contract, PartNo, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, CountDate, ConfigurationId {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and LOCATION_NO = :LocationNo and HANDLING_UNIT_ID = :HandlingUnitId and LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and WAIV_DEV_REJ_NO = :WaivDevRejNo and ENG_CHG_LEVEL = :EngChgLevel and COUNT_DATE = :CountDate and CONFIGURATION_ID = :ConfigurationId";
   }
   where = "INV_LIST_NO = '*' and OBJSTATE = 'Rejected'";

   attribute Contract Text {
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyCounted Number {
      label = "Counted Qty";
      maxlength = 0;

   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
      editable = [false];
   }
   attribute QtyDifference Number {
      fetch = "(QTY_COUNTED - QTY_ONHAND)";
      label = "Difference Qty";
      editable = [false];
      updatable = [false];
   }
   attribute DiffAmount Number {
      fetch = "Counting_Result_API.Get_Diff_Amount(CONTRACT,QTY_COUNTED,QTY_ONHAND,INVENTORY_VALUE)";
      label = "Difference Amount";
      format = ifscurrency;
      editable = [false];
      updatable = [false];
   }
   attribute CountDiffAmount Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute DiffPercentage Number {
      fetch = "Counting_Result_API.Get_Diff_Percentage(QTY_COUNTED,QTY_ONHAND)";
      label = "Difference Percentage";
      format = decimal;
      editable = [false];
      updatable = [false];
   }
   attribute CountDiffPercentage Number {
      editable = [false];
   }
   attribute CatchQtyCounted Number {
      label = "Counted Catch Qty";
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty ";
      editable = [false];
   }
   attribute CatchQtyDifference Number {
      fetch = "(CATCH_QTY_COUNTED - CATCH_QTY_ONHAND)";
      label = "Catch Qty Difference";
      editable = [false];
      updatable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   attribute InventoryValue Number {
      required = [true];
      editable = [ETag = null];
      format = ifscurrency;
   }
   attribute WaivDevRejNo Text {
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(Inventory_Part_In_Stock_API.Get_Availability_Control_Id(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID))";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      editable = [false];
   }
   attribute CountDate Timestamp {
      label = "Confirmation Date/Time";
      editable = [false];
   }
   attribute CountUserId Text {
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(PROJECT_ID))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(PROJECT_ID)";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
   }
   attribute TopParenthandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitType Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
      label = "Top Parent Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitlabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute PartTrackingSessionId Number;
   attribute RcptIssuePartTracking Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
      label = "Receipt and Issue Serial Tracking";
      editable = [false];
   }
   attribute InvSerialTracking Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(PART_NO)";
      label = "Inventory Serial Tracking";
      editable = [false];
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference InventoryPartInStockRef(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStock(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnitLov(Contract) {
      label = "Handling Unit ID";
   }
   reference WaivDevRejNoRef(Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo) to InventoryPartLocation(Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo) {
      label = "W/D/R No";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetSessionIdSelection Structure(IdentifySerialsRecStructure) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter QtyNum Text;
   parameter CatchQtyNum Number;
   parameter AssistantTitle Text;
   parameter AssistantContext Text;
   parameter SessionId Text;
}

function CheckPartShortage Boolean {
   parameter Contract Text;
   parameter PartNo Text;
   parameter TotalDifferenceQuantity Number;
}

function GetDifference Structure(DiffAmountAndPercentageStructure) {
   parameter Contract Text;
   parameter QtyCounted Number;
   parameter QtyOnhand Number;
   parameter InventoryValue Number;
}
---------------------------------- ACTIONS ----------------------------------
action CompletePart Boolean {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter TotalDifferenceQuantity Number;
   ludependencies = InventoryPartConfiguration, CountingResult;
}

action CancelPart {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   ludependencies = InventoryPartConfiguration, CountingResult;
}

action ValidateExpirationDate {
   initialcheck none;
   parameter QtyCounted      Number;
   parameter Contract        Text;
   parameter PartNo          Text;
   parameter ConfigurationId Text;
   parameter LocationNo      Text;
   parameter LotBatchNo      Text;
   parameter SerialNo        Text;
   parameter EngChgLevel     Text;
   parameter WaivDevRejNo    Text;
   parameter ActivitySeq     Number;
   parameter HandlingUnitId  Number;

   supportwarnings = [true];

}

-------------------------------- STRUCTURES ---------------------------------
structure DiffAmountAndPercentageStructure {
   attribute DiffAmount Number;
   attribute DiffPercentage Number;
}
