--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-05-22  fgusse  SCUXXW4-20687, Added ludependencies = DocumentText.
-- 2018-05-24  SWiclk  SCUXXW4-6825, Added functions to filter unit types based on length, volume and weight.
-- 2018-05-15  YANILK  SCUXXW4-6825, Converted from tbwHandlingUnitType using MTG Version: 1.17
--------------------------------------------------------------------------------------

projection HandlingUnitTypesHandling;
component INVENT;
layer Core;
description "Use this API to enter and view handling unit types.";
category Users;
// Document Text related fragments
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset HandlingUnitTypes for HandlingUnitType;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity HandlingUnitType {
   crud = Create, Update, Delete, Read;
   ludependencies = DocumentText;

   attribute HandlingUnitCategoryDescription Text {
      fetch = "Handling_Unit_Category_API.Get_Description(HANDLING_UNIT_CATEGORY_ID)";
      label = "Handling Unit Category Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute GenerateSsccNo Boolean("TRUE", "FALSE") {
      label = "Generate SSCC";
   }
   attribute PrintLabel Boolean("TRUE", "FALSE") {
      label = "Print Handling Unit Label";
   }
   attribute PrintContentLabel Boolean("TRUE", "FALSE") {
      label = "Print Handling Unit Content Label";
   }
   attribute PrintShipmentLabel Boolean("TRUE", "FALSE") {
      label = "Print Shipment Handling Unit Label";
   }
   attribute UseHuReservationRanking Boolean("TRUE", "FALSE") {
      label = "Use Handling Unit Reservation Ranking";
   }
   attribute TransportTaskCapacity Number {
      editable = [ETag != null];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   reference HandlingUnitCategoryIdRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category ID";
   }
   reference UomForLengthRef(UomForLength) to IsoUnit(UnitCode) {
      label = "UoM for Length";
   }
   reference UomForVolumeRef(UomForVolume) to IsoUnit(UnitCode) {
      label = "UoM for Volume";
   }
   reference UomForWeightRef(UomForWeight) to IsoUnit(UnitCode) {
      label = "UoM for Weight";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
}

function GetIsoUnitsOfLength List<Entity(IsoUnit)> {
   where = "unit_type_db = 'LENGTH'";
}

function GetIsoUnitsOfVolume List<Entity(IsoUnit)> {
   where = "unit_type_db = 'VOLUME'";
}

function GetIsoUnitsOfWeight List<Entity(IsoUnit)> {
   where = "unit_type_db = 'WEIGHT'";
}


