client CreateMaterialReq;
component INVENT;
layer Core;

--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  201230  BudKLk  SC2020R1-11932, Replaced depreciated property tiltle to label and removed unsued varables.
--  190911  YasMlk  SCFALL19-225, Replaced get methods of programDesc, projectDesc, SubProjectDesc with GetProjectConnectionDescriptions to a single method call.
--  190909  YasMlk  SCFALL19-225, Added get methods for programDesc, projectDesc, SubProjectDesc in ProjectConnectionCmd.
--  180629  Hairlk  SCUXX-3797, Fixed errors raised for undefined Lov selectors in Developer Studio.
--  180702  LaThlk  Bug 142755, Added condition using LinesWithInvalidQty property to the 3rd step of CreateMaterialReqAssistant to be enabled only
--  180702          when there are no any invalid quantities.
--  180619  AyAmlk  SCUXXW4-12298, Fixed errors raised for undefined Lov selectors in Developer Studio.--  170821  niedlk  SCUXX-510, Added advancedview property for the LOVs where needed.
--  170525  niedlk  APPUXX-11563, Removed Requisition Detail entries from the navigator.
--  170428  niedlk  APPUXX-11386, Modified the info message that appears after adding a part to a success message.
--  170419  Dinklk  APPUXX-11313, Modified IssueMaterialAssistant init command to replace multiple server calls by a single server call.
--  170419  Dinklk  APPUXX-11308, Modified CreateMaterialReqAssistant init command to replace multiple server calls by a single server call.
--  170407  Dinklk  APPUXX-8744, Modified IssueMaterialAssistant to incorporate the check for SerialTrOnlyRecIssDb when showing the second step.
--  170405  Dinklk  APPUXX-4869, Added formatting instructions to IntCustomerNo in Step3MatReqGenInfoGroup and Step3IssueMaterialGeneralInfoGroup.
--  170331  Dinklk  APPUXX-10929, Changed IssueMaterialAssistant's first step label.
--  170227  Dinklk  APPUXX-9395, Supply Option is added to MatReqLinesList and MatReqDetailLinesList
--  170221  Dinklk  APPUXX-9117, Move casual user MR code.
--  170221  Dinklk  APPUXX-9117, Added DynamicComponentDependency PROJ to relavent places.
--  170217  Dinklk  APPUXX-9389, Modified MatReqDetailGeneral group to show InternalDestination if DestinationId = null.
--  170127  Dinklk  APPUXX-8707, Improvements needed for issue material assistant after List on assistant is supported.
--  170127  Dinklk  APPUXX-8743, Improvements needed for Create MR Assistant after List on assistant is supported.
--  170124  Dinklk  APPUXX-8622, Implementation of List in Create MR Assistant.
--  170118  Dinklk  APPUXX-8334, Implementation of List in Issue Material Assistant.
--  161230  Dinklk  APPUXX-7539, Column order and field ranking changed for MatReqLinesList.
--  161228  Dinklk  APPUXX-7518, Material Requisition Detail page and ProjectConnectionDialog fine tuning.
--  161201  Dinklk  APPUXX-6871, Modified final step of CreateMaterialReqAssistant and IssueMaterialAssistant.
--  161128  AyAmlk  APPUXX-6747, Modified the assistant to validate the qty field when a string is entered.
--  161124  Dinklk  APPUXX-2836, Modified CreateMaterialReqAssistant and IssueMaterialAssistant to retrieve ProjectConnCodePart and
--  161124          set connected projectId to that code part.
--  161122  Maabse  APPUXX-6544, Prototyped Menu
--  161122  AyAmlk  APPUXX-6242, Altered files to align PR pages with MR pages.
--  161121  Dinklk  APPUXX-3538, Modified IssueMaterialAssistant to navigate back to Casual User Material Requisitions Lobby page when finished.
--  161118  Dinklk  APPUXX-6318, Modified IssueMaterialAssistant to get header and line pre posting information in a single step.
--  161117  Dinklk  APPUXX-6317, Modified CreateMaterialReqAssistant to get header and line pre posting information in a single step.
--  161115  Dinklk  APPUXX-5961, Introduced separate steps to add pre-posting and project connection to Issue Material assistant.
--  161115  Dinklk  APPUXX-2836, Introduced separate steps to add pre-posting and project connection to Create Material Requisition assistant.
--  161102  AyAmlk  APPUXX-5396, Handled the context of the badges.
--  161018  AyAmlk  APPUXX-5396, Added badges for Pre Posting and Project Connection.
--  161017  Dinklk  APPUXX-4800, Modified IssueMaterialAssistant.Step1IssueMaterialGenGroup.PartNoRef to use the entity set IssuePartNoLovs.
--  161014  Dinklk  APPUXX-5397, Modified PrePostingLineCmd to visible command button only if Pre Posting Defined for the selected line.
--  161004  Dinklk  APPUXX-5342, Modified IssueMaterialAssistant to fetch Code Names A to J and show them in respective places.
--  161004  Dinklk  APPUXX-5343, Fetched code names in PrePostingDetail command and passed them to PrePostingDialog and displayed them in respective code part labels.
--  161004  Dinklk  APPUXX-5039, Modified CreateMaterialReqAssistant to fetch Code Names A to J and show them in respective places.
--  160930  Dinklk  APPUXX-5119, Made pre posting dialog to be read only when open from MaterialRequisitionDetailPage.
--  160929  Dinklk  APPUXX-5040, Added editable DestinationId and InternalDestination to IssueMaterialAssistant.Step1IssueMaterialGenGroup.
--  160929  Dinklk  APPUXX-5237, Contract fileld is set as read only for CreateMaterialReqAssistant.Step1MatReqHeadInfoGroup and
--  160929          IssueMaterialAssistant.Step1IssueMaterialGenGroup.
--  160928  Dinklk  Line Code Parts will not be replaced by Header Code Parts if Line Code Parts already contain any value.
--  160928  Dinklk  APPUXX-4870, Removed LineDueDate from CreateMaterialReqAssistant.Step2MatReqPartInfoGroup.
--  160921  Dinklk  APPUXX-4867, Modified IssueMaterialAssistant to set line code parts same as header code parts by default.
--  160919  Dinklk  APPUXX-4867, Modified CreateMaterialReqAssistant to set line code parts same as header code parts by default.
--  160918  Dinklk  APPUXX-4870. Modified CreateMaterialReqAssistant to set LineDueDate same as DueDate by default.
--  160919  Dinklk  APPUXX-4873, Set visibility of Step2MatReqPartInfoGroup.LineConditionCode according to ConditionCodeUsageDb.
--  160919  Dinklk  APPUXX-4865, Added selectors CodeBSelector, CodeCSelector,..., CodeJSelector to display the respective
--  160909          code part descriptions in code part LOVs.
--  160915  Dinklk  APPUXX-4820, Part No and Part Description seperately displyed in MaterialRequisitionDetailPage.MatReqDetailLinesList
--  160915          and MaterialRequisitionLinesPage.MatReqLinesList.
--  160914  Dinklk  APPUXX-4349, Further improvements to Issue Material Assistant.
--  160912  AyAmlk  APPUXX-4654, Enabled Condition Code field only for condition code allowed parts.
--  160909  Hairlk  APPUXX-4632, Added status to lines in Material Requisition Detail page
--  160908  Dinklk  APPUXX-4406, Removed Supply Code from MaterialRequisitionDetailPage.MatReqDetailLinesList.
--  160907  Dinklk  APPUXX-4347, Added a new assistant IssueMaterialAssistant.
--  160831  maabse  APPUXX-4187, Added multiselect = [false] on all lists
--  160621  Dinklk  Added this revision
--  ------  ------  ---------------------------------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {

   entry MaterialReqLobbyEntry parent InventNavigator.WarehouseManagementRequisition at index 800 {
      label = "My Material Requisition";
      lobby "c5e794ed-4f80-4d33-9c28-c62ae0c56a17";
      entry CreateMaterialReqEntry;
      entry MaterialRequisitionLinesEntry;
      entry IssueMaterialEntry;
   }

   entry CreateMaterialReqEntry {
      label = "Create Requisition";
      assistant CreateMaterialReqAssistant;
   }

   entry MaterialRequisitionLinesEntry {
      label = "My Requisitions";
      page MaterialRequisitionLinesPage;
   }

   entry IssueMaterialEntry {
      label = "Issue Material";
      assistant IssueMaterialAssistant;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page MaterialRequisitionDetailPage using MaterialRequisitions {
   label = "Material Requisition Details";
   selector OrderSelector;
   group MatReqDetailGeneralGroup;
   list MatReqDetailLinesList(Lines);
}

page MaterialRequisitionLinesPage using MaterialRequisitionLines {
   label = "Material Requisition Lines";
   list MatReqLinesList {
      details = MaterialRequisitionDetailPage(OrderNo);
   }
}

--------------------------------- ASSISTANT ---------------------------------
assistant CreateMaterialReqAssistant using MaterialReqVirtualSet {
   label = "Create Material Requisition";
   init command {
      variable Details {
         type = Structure(InitDetailsStruct);
      }
      execute {
         call GetAssistantInitInfo("M109", "M107") into Details;
         set Contract = Details.Contract;
         set Company = Details.Company;
         set DueDate = Details.DueDate;
         set ProjectConnCodePart = Details.ProjectConnCodePart;
         set LinesExist = "FALSE";
         set LinesWithInvalidQty = "FALSE";

         set AllowCodeA = Details.AllowCodeA;
         set AllowCodeB = Details.AllowCodeB;
         set AllowCodeC = Details.AllowCodeC;
         set AllowCodeD = Details.AllowCodeD;
         set AllowCodeE = Details.AllowCodeE;
         set AllowCodeF = Details.AllowCodeF;
         set AllowCodeG = Details.AllowCodeG;
         set AllowCodeH = Details.AllowCodeH;
         set AllowCodeI = Details.AllowCodeI;
         set AllowCodeJ = Details.AllowCodeJ;

         set AllowLineCodeA = Details.AllowLineCodeA;
         set AllowLineCodeB = Details.AllowLineCodeB;
         set AllowLineCodeC = Details.AllowLineCodeC;
         set AllowLineCodeD = Details.AllowLineCodeD;
         set AllowLineCodeE = Details.AllowLineCodeE;
         set AllowLineCodeF = Details.AllowLineCodeF;
         set AllowLineCodeG = Details.AllowLineCodeG;
         set AllowLineCodeH = Details.AllowLineCodeH;
         set AllowLineCodeI = Details.AllowLineCodeI;
         set AllowLineCodeJ = Details.AllowLineCodeJ;

         set CodeNameA = Details.CodeNameA;
         set CodeNameB = Details.CodeNameB;
         set CodeNameC = Details.CodeNameC;
         set CodeNameD = Details.CodeNameD;
         set CodeNameE = Details.CodeNameE;
         set CodeNameF = Details.CodeNameF;
         set CodeNameG = Details.CodeNameG;
         set CodeNameH = Details.CodeNameH;
         set CodeNameI = Details.CodeNameI;
         set CodeNameJ = Details.CodeNameJ;
      }
   }

   steps {
      step {
         label = "Add Products";
         description = "Select parts to create a material requisition.";
         list Step1MatReqPartList(PartSet);
      }
      step {
         enabled = [LinesExist = "TRUE"];
         label = "Review Products";
         description = "Review selected parts.";
         list Step2MatReqAddedPartList(AddedPartSet);
      }
      step {
         enabled = [LinesExist = "TRUE" and LinesWithInvalidQty = "FALSE"];
         label = "General Information";
         description = "Specify general information.";
         group Step3MatReqGenInfoGroup;
      }
      @DynamicComponentDependency PROJ
      step {
         enabled = [DueDate != null and IntCustomerNo != null and LinesExist = "TRUE" and LinesWithInvalidQty = "FALSE"];
         label = "Project Information";
         description = "Specify project information.";

         group Step4MatReqProjectConnectionGroup;
         next command {
            execute {
               if [LineProjectId != null] {
                  if [ProjectConnCodePart = "A" and AllowLineCodeA = 1] {
                     set CodeA = LineProjectId;
                  }
                  if [ProjectConnCodePart = "B" and AllowLineCodeB = 1] {
                     set CodeB = LineProjectId;
                  }
                  if [ProjectConnCodePart = "C" and AllowLineCodeC = 1] {
                     set CodeC = LineProjectId;
                  }
                  if [ProjectConnCodePart = "D" and AllowLineCodeD = 1] {
                     set CodeD = LineProjectId;
                  }
                  if [ProjectConnCodePart = "E" and AllowLineCodeE = 1] {
                     set CodeE = LineProjectId;
                  }
                  if [ProjectConnCodePart = "F" and AllowLineCodeF = 1] {
                     set CodeF = LineProjectId;
                  }
                  if [ProjectConnCodePart = "G" and AllowLineCodeG = 1] {
                     set CodeG = LineProjectId;
                  }
                  if [ProjectConnCodePart = "H" and AllowLineCodeH = 1] {
                     set CodeH = LineProjectId;
                  }
                  if [ProjectConnCodePart = "I" and AllowLineCodeI = 1] {
                     set CodeI = LineProjectId;
                  }
                  if [ProjectConnCodePart = "J" and AllowLineCodeJ = 1] {
                     set CodeJ = LineProjectId;
                  }
               }
            }
         }
      }
      step {
         enabled = [DueDate != null and IntCustomerNo != null and LinesExist = "TRUE" and LinesWithInvalidQty = "FALSE"];
         label = "Pre Posting";
         description = "Specify pre posting.";

         group Step5MatReqPrePostingGroup;
      }
      final step {
         description = "Material Requisition ${OrderNo} has been created.";
         command GoToMRDetailCmd;
         command HomeCmd;
      }
      cancelled step {
         description = "Process has been cancelled.";
      }
   }
   finish command {
      enabled = [DueDate != null and IntCustomerNo != null and LinesExist = "TRUE" and LinesWithInvalidQty = "FALSE"];

      execute {
         call FinishCreateMR(Objkey) into OrderNo;
      }
   }

   cancel command {
      execute {
         confirm("Assistant will be cancelled. Do you want to continue?") {
            when OK {
               navigate "lobby/c5e794ed-4f80-4d33-9c28-c62ae0c56a17";
            }
         }
      }
   }

}

assistant IssueMaterialAssistant using IssueMaterialVirtualSet {
   label = "Issue Material";
   init command {
      variable Details {
         type = Structure(InitDetailsStruct);
      }
      execute {
         call GetAssistantInitInfo("M109", "M107") into Details;
         set Contract = Details.Contract;
         set Company = Details.Company;
         set DueDate = Details.DueDate;
         set LineDueDate = DueDate;
         set ProjectConnCodePart = Details.ProjectConnCodePart;
         set LineQtyAdded = "FALSE";

         set AllowCodeA = Details.AllowCodeA;
         set AllowCodeB = Details.AllowCodeB;
         set AllowCodeC = Details.AllowCodeC;
         set AllowCodeD = Details.AllowCodeD;
         set AllowCodeE = Details.AllowCodeE;
         set AllowCodeF = Details.AllowCodeF;
         set AllowCodeG = Details.AllowCodeG;
         set AllowCodeH = Details.AllowCodeH;
         set AllowCodeI = Details.AllowCodeI;
         set AllowCodeJ = Details.AllowCodeJ;

         set AllowLineCodeA = Details.AllowLineCodeA;
         set AllowLineCodeB = Details.AllowLineCodeB;
         set AllowLineCodeC = Details.AllowLineCodeC;
         set AllowLineCodeD = Details.AllowLineCodeD;
         set AllowLineCodeE = Details.AllowLineCodeE;
         set AllowLineCodeF = Details.AllowLineCodeF;
         set AllowLineCodeG = Details.AllowLineCodeG;
         set AllowLineCodeH = Details.AllowLineCodeH;
         set AllowLineCodeI = Details.AllowLineCodeI;
         set AllowLineCodeJ = Details.AllowLineCodeJ;

         set CodeNameA = Details.CodeNameA;
         set CodeNameB = Details.CodeNameB;
         set CodeNameC = Details.CodeNameC;
         set CodeNameD = Details.CodeNameD;
         set CodeNameE = Details.CodeNameE;
         set CodeNameF = Details.CodeNameF;
         set CodeNameG = Details.CodeNameG;
         set CodeNameH = Details.CodeNameH;
         set CodeNameI = Details.CodeNameI;
         set CodeNameJ = Details.CodeNameJ;
      }
   }
   steps {
      step {
         label = "Select Product";
         description = "Select a part to be issued from specific location.";

         group Step1IssueMaterialPartInfoGroup;
         next command {
            execute {
            }
         }
      }
      step {
         enabled = [LinePartNo != null and LocationNo != null];
         label = "Quantity to Issue";
         description = "Specify quantity to issue.";

         list Step2IssueMaterialLocListWithCatchQty(LocationSet) {
            visible = [PartNoRef.CatchUnitEnabledDb = "TRUE" and PartNoRef.SerialTrackingCodeDb = "NOT SERIAL TRACKING" and not(PartNoRef.SerialTrackingCodeDb = "NOT SERIAL TRACKING" and PartNoRef.SerialTrOnlyRecIssDb = "TRUE")];
         }
         list Step2IssueMaterialLocList(LocationSet) {
            visible = [PartNoRef.CatchUnitEnabledDb != "TRUE" and PartNoRef.SerialTrackingCodeDb = "NOT SERIAL TRACKING" and not(PartNoRef.SerialTrackingCodeDb = "NOT SERIAL TRACKING" and PartNoRef.SerialTrOnlyRecIssDb = "TRUE")];
         }
         list Step2IssueMaterialLocListWithSelectSerial(LocationSet) {
            visible = [PartNoRef.CatchUnitEnabledDb != "TRUE" and(PartNoRef.SerialTrackingCodeDb = "SERIAL TRACKING" or(PartNoRef.SerialTrackingCodeDb = "NOT SERIAL TRACKING" and PartNoRef.SerialTrOnlyRecIssDb = "TRUE"))];
         }
         next command {
            execute {
            }
         }
      }
      step {
         enabled = [LinePartNo != null and LocationNo != null and LineQtyAdded = "TRUE"];
         label = "General Information";
         description = "Specify general information.";

         group Step3IssueMaterialGeneralInfoGroup;
         next command {
            execute {
            }
         }
      }
      @DynamicComponentDependency PROJ
      step {
         enabled = [LinePartNo != null and LocationNo != null and IntCustomerNo != null and LineQtyAdded = "TRUE"];
         label = "Project Connection";
         description = "Specify project information.";

         group Step4IssueMaterialProjInfoGroup;
         next command {
            execute {
               if [ProjectId != null] {
                  if [ProjectConnCodePart = "A" and AllowLineCodeA = 1] {
                     set CodeA = ProjectId;
                  }
                  if [ProjectConnCodePart = "B" and AllowLineCodeB = 1] {
                     set CodeB = ProjectId;
                  }
                  if [ProjectConnCodePart = "C" and AllowLineCodeC = 1] {
                     set CodeC = ProjectId;
                  }
                  if [ProjectConnCodePart = "D" and AllowLineCodeD = 1] {
                     set CodeD = ProjectId;
                  }
                  if [ProjectConnCodePart = "E" and AllowLineCodeE = 1] {
                     set CodeE = ProjectId;
                  }
                  if [ProjectConnCodePart = "F" and AllowLineCodeF = 1] {
                     set CodeF = ProjectId;
                  }
                  if [ProjectConnCodePart = "G" and AllowLineCodeG = 1] {
                     set CodeG = ProjectId;
                  }
                  if [ProjectConnCodePart = "H" and AllowLineCodeH = 1] {
                     set CodeH = ProjectId;
                  }
                  if [ProjectConnCodePart = "I" and AllowLineCodeI = 1] {
                     set CodeI = ProjectId;
                  }
                  if [ProjectConnCodePart = "J" and AllowLineCodeJ = 1] {
                     set CodeJ = ProjectId;
                  }
               }
            }
         }
      }
      step {
         enabled = [LinePartNo != null and IntCustomerNo != null and LineQtyAdded = "TRUE"];
         label = "Pre Posting";
         description = "Specify pre posting.";

         group Step5IssueMaterialPrePostingGroup;
      }
      final step {
         description = "Material ${LinePartNo} issued successfully.";
         command HomeCmd;
      }
      cancelled step {
         description = "Process has been cancelled.";
      }
   }
   finish command {
      enabled = [LinePartNo != null and IntCustomerNo != null and LineQtyAdded = "TRUE"];

      execute {
         call FinishIssueMaterial(Objkey) into OrderNo;
      }
   }

   cancel command {
      execute {
         confirm("Assistant will be cancelled. Do you want to continue?") {
            when OK {
               navigate "lobby/c5e794ed-4f80-4d33-9c28-c62ae0c56a17";
            }
         }
      }
   }

}

---------------------------------- DIALOGS ----------------------------------
dialog PrePostingDialog for PreAccountingStruct {
   label = "Pre Posting";
   input(PreAccountingId, Company, CodeA, CodeB, CodeC, CodeD, CodeE, CodeF, CodeG, CodeH, CodeI, CodeJ, ActivitySeq,
   AllowCodeA, AllowCodeB, AllowCodeC, AllowCodeD, AllowCodeE, AllowCodeF, AllowCodeG, AllowCodeH, AllowCodeI, AllowCodeJ,
   CodeNameA, CodeNameB, CodeNameC, CodeNameD, CodeNameE, CodeNameF, CodeNameG, CodeNameH, CodeNameI, CodeNameJ);

   group PrePostingDialogGroup {
      collapsed = [false];
   }

   command Ok {
      enabled = [true];
   }
}

@DynamicComponentDependency PROJ
dialog ProjectConnectionDialog for ProjectConnectionStruct {
   label = "Project Information";
   input(Company, ProgramId, ProjectId, SubProjectId, ActivityNo, ActivitySeq, ProgramDesc, ProjectDesc, SubProjectDesc, ActivityDesc);

   group ProjectConnectionDialogGroup {
      collapsed = [false];
   }

   command Ok {
      enabled = [true];
   }
}

dialog AddPartDialog for AddPartStruct {
   label = "${PartNo} - ${PartDescription}";
   input(PartNo, PartDescription, UnitMeas, ConditionCodeUsageDb);
   output(QtyDue, ConditionCode, ConditionCodeDescription);

   group {
      field QtyDue {
         required = [true];
      }
      static UnitMeas;
      lov ConditionCodeRef with LineConditionCodeSelector {
         label = "Condition Code";
         description = ConditionCodeDescription;
         visible = [ConditionCodeUsageDb = "ALLOW_COND_CODE"];
         required = [false];

         validate command {
            execute {
               call GetConditionCodeDescription(ConditionCode) into ConditionCodeDescription;
            }
         }
      }
   }

   command Ok {
      enabled = [QtyDue > 0];
   }
   command Cancel;
}

--------------------------------- SELECTORS ---------------------------------
selector IntCustomerNoSelector for  IntCustomerLov {
   label = "Internal Customer";
   field IntCustomerNo {
      label = "Internal Customer No";
   }
   field Name {
      label = "Name";
   }
}

selector ContractSelector for ContractLov {
   label = "Site";
   field Contract {
      label = "Site";
   }
   field ContractDesc {
      label = "Site Description";
   }
}

selector InternalDestSelector for InternalDestLov {
   label = "Internal Destination ID";
   field DestinationId {
      label = "Internal Destination ID";
   }
   field Description {
      label = "Description";
   }
}

selector LinePartNoSelector for  LinePartNoLov {
   label = "Part No";
   field PartNo {
      label = "Part No";
   }
   field Contract;
   field Description {
      label = "Description";
   }
}

selector LineConditionCodeSelector for  ConditionCode {
   label = "Condition Code";
   field ConditionCode {
      label = "Condition Code";
   }
   field Description {
      label = "Description";
   }
}

selector OrderSelector for MaterialReq {
   label = "Order No ${OrderNo}";
   static OrderNo;
   static IntCustomerNo {
      label = "Internal Customer";
   }
   badge Status {
      emphasis Info = [true];
      style = TextOnly;
   }
}

selector CodeASelector for CodeALov {
   label = "Code A";
   field Account {
      label = "Code A";
   }
   field Description {
      label = "Description";
   }
}

@Override
selector CodeBSelector for CodeB {
   label = "Code B";
   field CodeB {
      label = "Code B";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeCSelector for CodeC {
   label = "Code C";
   field CodeC {
      label = "Code C";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeDSelector for CodeD {
   label = "Code D";
   field CodeD {
      label = "Code D";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeESelector for CodeE {
   label = "Code E";
   field CodeE {
      label = "Code E";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeFSelector for CodeF {
   label = "Code F";
   field CodeF {
      label = "Code F";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeGSelector for CodeG {
   label = "Code G";
   field CodeG {
      label = "Code G";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeHSelector for CodeH {
   label = "Code H";
   field CodeH {
      label = "Code H";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeISelector for CodeI {
   label = "Code I";
   field CodeI {
      label = "Code I";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@Override
selector CodeJSelector for CodeJ {
   label = "Code J";
   field CodeJ {
      label = "Code J";
   }
   field Description {
      label = "Description";
   }
   static Company {
      visible = [false];
   }
}

@DynamicComponentDependency PROJ
selector LineProgramSelector for LineProgramLov {
   label = "Program";
   field ProgramId;
   field Description;
}

@DynamicComponentDependency PROJ
selector LineProjectSelector for LineProjectLov {
   label = "Project";
   field ProjectId;
   field Name;
   field Description;
}

@DynamicComponentDependency PROJ
selector LineSubProjectSelector for LineSubProjectLov {
   label = "Sub Project";
   field ProjectId;
   field SubProjectId;
   field Description;
}

@DynamicComponentDependency PROJ
selector LineActivityNoSelector for LineActivityNoLov {
   label = "Activity No";
   field ProjectId;
   field SubProjectId;
   field ActivityNo;
   field Description;
   field ActivitySeq;
}

selector LocationNoSelector for LocationNoLov {
   label = "Location No";
   field PartNo;
   field LocationNo;
   field Warehouse;
   field BayNo;
   field RowNo;
   field TierNo;
   field BinNo;
}

selector OrderLineSelector for MaterialReqLine {
   label = "Order No";
   static OrderNo;
   badge Status {
      emphasis Info = [true];
      style = TextOnly;
   }
   static Contract;
}

---------------------------------- GROUPS -----------------------------------
group Step3MatReqGenInfoGroup for MaterialReqVirtual {
   label = "";
   lov IntCustomerNoRef with IntCustomerNoSelector using IntCustomerLovs {
      label = "Internal Customer";
      description = IntCustomerNoRef.Name;
      required = [true];
      format = uppercase;
      maxlength = 10;
   }
   field DueDate {
      required = [true];
   }
   lov InternalDestRef with InternalDestSelector using InternalDestLovs {
      label = "Internal Destination ID";
      advancedview InternalDestinationList;
   }
   field InternalDestination {
      label = "Destination Description";
   }
}

group Step5MatReqPrePostingGroup for MaterialReqVirtual {
   label = "";

   lov CodeARef with CodeASelector {
      label = "${CodeNameA}";
      editable = [AllowCodeA = 1 or AllowLineCodeA = 1];
      description = CodeARef.Description;
      advancedview CodeALovList;
   }
   lov CodeBRef with CodeBSelector {
      label = "${CodeNameB}";
      editable = [AllowCodeB = 1 or AllowLineCodeB = 1];
      description = CodeBRef.Description;
      advancedview CodeBLovList;
   }
   lov CodeCRef with CodeCSelector {
      label = "${CodeNameC}";
      editable = [AllowCodeC = 1 or AllowLineCodeC = 1];
      description = CodeCRef.Description;
      advancedview CodeCLovList;
   }
   lov CodeDRef with CodeDSelector {
      label = "${CodeNameD}";
      editable = [AllowCodeD = 1 or AllowLineCodeD = 1];
      description = CodeDRef.Description;
      advancedview CodeDLovList;
   }
   lov CodeERef with CodeESelector {
      label = "${CodeNameE}";
      editable = [AllowCodeE = 1 or AllowLineCodeE = 1];
      description = CodeERef.Description;
      advancedview CodeELovList;
   }
   lov CodeFRef with CodeFSelector {
      label = "${CodeNameF}";
      editable = [AllowCodeF = 1 or AllowLineCodeF = 1];
      description = CodeFRef.Description;
      advancedview CodeFLovList;
   }
   lov CodeGRef with CodeGSelector {
      label = "${CodeNameG}";
      editable = [AllowCodeG = 1 or AllowLineCodeG = 1];
      description = CodeGRef.Description;
      advancedview CodeGLovList;
   }
   lov CodeHRef with CodeHSelector {
      label = "${CodeNameH}";
      editable = [AllowCodeH = 1 or AllowLineCodeH = 1];
      description = CodeHRef.Description;
      advancedview CodeHLovList;
   }
   lov CodeIRef with CodeISelector {
      label = "${CodeNameI}";
      editable = [AllowCodeI = 1 or AllowLineCodeI = 1];
      description = CodeIRef.Description;
      advancedview CodeILovList;
   }
   lov CodeJRef with CodeJSelector {
      label = "${CodeNameJ}";
      editable = [AllowCodeJ = 1 or AllowLineCodeJ = 1];
      description = CodeJRef.Description;
      advancedview CodeJLovList;
   }
}

@DynamicComponentDependency PROJ
group Step4MatReqProjectConnectionGroup for MaterialReqVirtual {
   label = "";
   lov LineProgramRef with LineProgramSelector using LineProgramLovs {
      label = "Program";
      required = [false];
      description = LineProgramRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineProgramLovList;
   }
   lov LineProjectRef with LineProjectSelector using LineProjectLovs {
      label = "Project";
      required = [false];
      description = LineProjectRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineProjectLovList;
   }
   lov LineSubProjectRef with LineSubProjectSelector using LineSubProjectLovs {
      label = "Sub Project";
      required = [false];
      description = LineSubProjectRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineSubProjectLovList;
   }
   lov LineActivityNoRef with LineActivityNoSelector using LineActivityNoLovs {
      label = "Activity No";
      required = [false];
      description = LineActivityNoRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineActivityNoLovList;
   }
   lov LineActivitySeqRef with LineActivityNoSelector using LineActivityNoLovs {
      label = "Activity Seq";
      required = [false];
      advancedview LineActivityNoLovList;
   }
}

group MatReqDetailGeneralGroup for MaterialReq {
   label = "General";
   lov IntCustomerNoRef with IntCustomerNoSelector {
      editable = [false];
      label = "Internal Customer";
      description = IntCustomerNoRef.Name;
   }
   lov InternalDestRef with InternalDestSelector {
      editable = [false];
      label = "Internal Destination";
      description = InternalDestination;
      visible = [DestinationId != null];
   }
   static InternalDestination {
      visible = [DestinationId = null];
   }
   lov ContractRef with ContractSelector {
      editable = [false];
      label = "Site";
      description = ContractRef.ContractDesc;
   }
   badge Status {
      emphasis Info = [true];
      style = TextOnly;
   }
   static DueDate;
   static DateEntered {
      label = "Created Date";
   }
}

group PrePostingDialogGroup for PreAccountingStruct {
   label = "";
   lov CodeARef with CodeASelector {
      label = "${CodeNameA}";
      //      editable = [AllowCodeA = 1];
      editable = [false];
   }
   lov CodeBRef with CodeBSelector {
      label = "${CodeNameB}";
      //      editable = [AllowCodeB = 1];
      editable = [false];
   }
   lov CodeCRef with CodeCSelector {
      label = "${CodeNameC}";
      //      editable = [AllowCodeC = 1];
      editable = [false];
   }
   lov CodeDRef with CodeDSelector {
      label = "${CodeNameD}";
      //      editable = [AllowCodeD = 1];
      editable = [false];
   }
   lov CodeERef with CodeESelector {
      label = "${CodeNameE}";
      //      editable = [AllowCodeE = 1];
      editable = [false];
   }
   lov CodeFRef with CodeFSelector {
      label = "${CodeNameF}";
      //      editable = [AllowCodeF = 1];
      editable = [false];
   }
   lov CodeGRef with CodeGSelector {
      label = "${CodeNameG}";
      //      editable = [AllowCodeG = 1];
      editable = [false];
   }
   lov CodeHRef with CodeHSelector {
      label = "${CodeNameH}";
      //      editable = [AllowCodeH = 1];
      editable = [false];
   }
   lov CodeIRef with CodeISelector {
      label = "${CodeNameI}";
      //      editable = [AllowCodeI = 1];
      editable = [false];
   }
   lov CodeJRef with CodeJSelector {
      label = "${CodeNameJ}";
      //      editable = [AllowCodeJ = 1];
      editable = [false];
   }
   field ActivitySeq {
      label = "Activity Sequence";
      editable = [false];
   }
}

@DynamicComponentDependency PROJ
group ProjectConnectionDialogGroup for ProjectConnectionStruct {
   label = "";
   lov LineProgramRef with LineProgramSelector using LineProgramLovs {
      label = "Program";
      editable = [false];
      description = ProgramDesc;
   }
   lov LineProjectRef with LineProjectSelector using LineProjectLovs {
      label = "Project";
      editable = [false];
      description = ProjectDesc;
   }
   lov LineSubProjectRef with LineSubProjectSelector using LineSubProjectLovs {
      label = "Sub Project";
      editable = [false];
      description = SubProjectDesc;
   }
   lov LineActivityNoRef with LineActivityNoSelector using LineActivityNoLovs {
      label = "Activity";
      editable = [false];
      description = ActivityDesc;
   }
   lov LineActivitySeqRef with LineActivityNoSelector using LineActivityNoLovs {
      label = "Activity Sequence";
      editable = [false];
   }
}

group Step1IssueMaterialPartInfoGroup for IssueMaterialVirtual {
   label = "";

   field Contract {
      label = "Site";
      editable = [false];
   }
   lov PartNoRef with LinePartNoSelector using IssuePartNoLovs {
      label = "Part";
      required = [true];
      description = PartNoRef.Description;
      format = uppercase;
      maxlength = 25;
      advancedview LinePartList;
   }
   lov LocationNoRef with LocationNoSelector using LocationNoLovs {
      label = "Location No";
      required = [true];
      format = uppercase;
      maxlength = 35;
      advancedview LocationNoLovList;
   }
}

group Step3IssueMaterialGeneralInfoGroup for IssueMaterialVirtual {
   label = "";

   lov IntCustomerNoRef with IntCustomerNoSelector using IntCustomerLovs {
      label = "Internal Customer";
      description = IntCustomerNoRef.Name;
      required = [true];
      format = uppercase;
      maxlength = 10;
   }
   lov InternalDestRef with InternalDestSelector using InternalDestLovs {
      label = "Internal Destination ID";
      advancedview InternalDestinationList;
   }
   field InternalDestination {
      label = "Destination Description";
   }
}

group Step5IssueMaterialPrePostingGroup for IssueMaterialVirtual {
   label = "";

   lov CodeARef with CodeASelector {
      label = "${CodeNameA}";
      editable = [AllowCodeA = 1 or AllowLineCodeA = 1];
      description = CodeARef.Description;
      advancedview CodeALovList;
   }
   lov CodeBRef with CodeBSelector {
      label = "${CodeNameB}";
      editable = [AllowCodeB = 1 or AllowLineCodeB = 1];
      description = CodeBRef.Description;
      advancedview CodeBLovList;
   }
   lov CodeCRef with CodeCSelector {
      label = "${CodeNameC}";
      editable = [AllowCodeC = 1 or AllowLineCodeC = 1];
      description = CodeCRef.Description;
      advancedview CodeCLovList;
   }
   lov CodeDRef with CodeDSelector {
      label = "${CodeNameD}";
      editable = [AllowCodeD = 1 or AllowLineCodeD = 1];
      description = CodeDRef.Description;
      advancedview CodeDLovList;
   }
   lov CodeERef with CodeESelector {
      label = "${CodeNameE}";
      editable = [AllowCodeE = 1 or AllowLineCodeE = 1];
      description = CodeERef.Description;
      advancedview CodeELovList;
   }
   lov CodeFRef with CodeFSelector {
      label = "${CodeNameF}";
      editable = [AllowCodeF = 1 or AllowLineCodeF = 1];
      description = CodeFRef.Description;
      advancedview CodeFLovList;
   }
   lov CodeGRef with CodeGSelector {
      label = "${CodeNameG}";
      editable = [AllowCodeG = 1 or AllowLineCodeG = 1];
      description = CodeGRef.Description;
      advancedview CodeGLovList;
   }
   lov CodeHRef with CodeHSelector {
      label = "${CodeNameH}";
      editable = [AllowCodeH = 1 or AllowLineCodeH = 1];
      description = CodeHRef.Description;
      advancedview CodeHLovList;
   }
   lov CodeIRef with CodeISelector {
      label = "${CodeNameI}";
      editable = [AllowCodeI = 1 or AllowLineCodeI = 1];
      description = CodeIRef.Description;
      advancedview CodeILovList;
   }
   lov CodeJRef with CodeJSelector {
      label = "${CodeNameJ}";
      editable = [AllowCodeJ = 1 or AllowLineCodeJ = 1];
      description = CodeJRef.Description;
      advancedview CodeJLovList;
   }
}

@DynamicComponentDependency PROJ
group Step4IssueMaterialProjInfoGroup for IssueMaterialVirtual {
   label = "";
   lov ProgramRef with LineProgramSelector using LineProgramLovs {
      label = "Program";
      required = [false];
      description = ProgramRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineProgramLovList;
   }
   lov ProjectRef with LineProjectSelector using LineProjectLovs {
      label = "Project";
      required = [false];
      description = ProjectRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineProjectLovList;
   }
   lov SubProjectRef with LineSubProjectSelector using LineSubProjectLovs {
      label = "Sub Project";
      required = [false];
      description = SubProjectRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineSubProjectLovList;
   }
   lov ActivityNoRef with LineActivityNoSelector using LineActivityNoLovs {
      label = "Activity No";
      required = [false];
      description = ActivityNoRef.Description;
      format = uppercase;
      maxlength = 10;
      advancedview LineActivityNoLovList;
   }
   lov ActivitySeqRef with LineActivityNoSelector using LineActivityNoLovs {
      label = "Activity Seq";
      required = [false];
      advancedview LineActivityNoLovList;
   }
}

----------------------------------- LISTS -----------------------------------
list Step1MatReqPartList for LinePartNoLov {
   label = "";
   preselect = [false];
   multiselect = [false];

   field PartNo;
   field Description;
   field Gtin;
   measure AvailableQty(UnitMeas);
   measure NetWeight(WeightUom);
   measure NetVolume(VolumeUom);
   field SupplyCode;

   fieldranking PartNo, Description, AvailableQty, NetWeight, NetVolume, SupplyCode, Gtin;
   command AddPartCmd;
}

list Step2MatReqAddedPartList for PartVirtual {
   label = "";
   preselect = [false];

   static PartNo;
   static Description;
   static Gtin;
   measure QtyDue(UnitMeas) {
      uniteditable = [false];
      required = [true];
   }
   static ConditionCode;
   static ConditionCodeDescription;
   static SupplyCode;

   fieldranking PartNo, Description, QtyDue, ConditionCode, ConditionCodeDescription, SupplyCode, Gtin;
}

list  Step2IssueMaterialLocListWithCatchQty for LocationVirtual {
   label = "";
   editmode = SingleCellEdit;

   measure IssueQty(UnitMeas) {
      uniteditable = [false];
   }
   measure IssueCatchQty(CatchUom) {
      uniteditable = [false];
      required = [true];
   }
   measure AvailQty(UnitMeas) {
      editable = [false];
   }
   static HandlingUnitId;
   static LotBatchNo;
   static ConditionCode;
   static ConditionCodeDescription;
   static EngChgLevel;
   static WaivDevRejNo;
   static ExpirationDate;

   fieldranking IssueQty, IssueCatchQty, AvailQty, LotBatchNo, ConditionCode, ConditionCodeDescription, WaivDevRejNo, ExpirationDate, EngChgLevel, HandlingUnitId;
}

list  Step2IssueMaterialLocList for LocationVirtual {
   label = "";
   editmode = SingleCellEdit;

   measure IssueQty(UnitMeas) {
      uniteditable = [false];
   }
   measure AvailQty(UnitMeas) {
      editable = [false];
   }
   static HandlingUnitId;
   static LotBatchNo;
   static ConditionCode;
   static ConditionCodeDescription;
   static EngChgLevel;
   static WaivDevRejNo;
   static ExpirationDate;

   fieldranking IssueQty, AvailQty, LotBatchNo, ConditionCode, ConditionCodeDescription, WaivDevRejNo, ExpirationDate, EngChgLevel, HandlingUnitId;
}

list  Step2IssueMaterialLocListWithSelectSerial for LocationVirtual {
   label = "";
   editmode = SingleCellEdit;

   field SelectSerial {
      -- Cannot remove required here since we need the toggle control in the list.
      required = [true];
   }
   static HandlingUnitId;
   static LotBatchNo;
   static SerialNo;
   static ConditionCode;
   static ConditionCodeDescription;
   static EngChgLevel;
   static WaivDevRejNo;
   static ExpirationDate;

   fieldranking SelectSerial, SerialNo, LotBatchNo, ConditionCode, ConditionCodeDescription, WaivDevRejNo, ExpirationDate, EngChgLevel, HandlingUnitId;
}

list MatReqDetailLinesList for MaterialReqLine {
   label = "Products";
   multiselect = [false];

   field LineNo;
   field ReleaseNo;
   field PartNo;
   field LinePartNoRef.Description {
      label = "Part Description";
   }
   field Gtin;
   measure QtyDue(UnitMeas) {
      label = "Quantity";
   }
   field DueDate;
   field ConditionCode;
   field LineConditionCodeRef.Description {
      label = "Condition Code Description";
   }
   field SupplyCode;
   badge Status {
      emphasis Info = [true];
      style = TextOnly;
   }
   badge PostingConnectedDb {
      label = "Pre Posting";
      emphasis Success = [PostingConnectedDb = 1];
      visible = [PostingConnectedDb = 1];
      icon = "check";
      style = IconOnly;
   }
   badge ProjectConnectedDb {
      label = "Project Connection";
      emphasis Success = [ProjectConnectedDb = "TRUE"];
      visible = [ProjectConnectedDb = "TRUE"];
      icon = "check";
      style = IconOnly;
   }
   measure QtyShipped(UnitMeas) {
      label = "Issued Qty";
   }

   fieldranking LinePartNoRef.Description, QtyDue, DueDate, PartNo, LineNo, Status, ReleaseNo, QtyShipped, ConditionCode, LineConditionCodeRef.Description, ProjectConnectedDb, PostingConnectedDb, Gtin, SupplyCode;

   command PrePostingDetailCmd;
   @DynamicComponentDependency PROJ
   command ProjectConnectionCmd;
}

list MatReqLinesList for MaterialReqLine {
   label = "Material Requisition Lines";
   multiselect = [false];

   static OrderNo;
   static LineNo;
   static ReleaseNo;
   static Contract;
   static PartNo;
   static LinePartNoRef.Description {
      label = "Part Description";
   }
   static Gtin;
   measure QtyDue(UnitMeas) {
      label = "Quantity";
   }
   static DueDate;
   static ConditionCode;
   static LineConditionCodeRef.Description {
      label = "Condition Code Description";
   }
   static SupplyCode;
   badge Status {
      emphasis Info = [true];
      style = TextOnly;
   }
   measure QtyShipped(UnitMeas) {
      label = "Issued Qty";
      visible = [false];
   }

   fieldranking OrderNo, LinePartNoRef.Description, QtyDue, DueDate, PartNo, LineNo, Status, QtyShipped, ConditionCode, LineConditionCodeRef.Description, ReleaseNo, Gtin, SupplyCode;
}

list InternalDestinationList for InternalDestLov {
   label = "Internal Destination";

   field DestinationId;
   field Description;
}

list LocationNoLovList for LocationNoLov {
   label = "Location";

   static Contract;
   static PartNo;
   static LocationNo;
   static Warehouse;
   static BayNo;
   static RowNo;
   static TierNo;
   static BinNo;
}

list LinePartList for LinePartNoLov {
   label = "";

   field Contract;
   field PartNo;
   field Description;
   measure AvailableQty(UnitMeas);
   field SupplyCode;
}

list CodeALovList for CodeALov {
   label = "";
   field Company;
   field Account;
   field Description;
}

@DynamicComponentDependency PROJ
list LineProgramLovList for LineProgramLov {
   label = "Program";

   static Company;
   static ProgramId;
   static Description;
}

@DynamicComponentDependency PROJ
list LineProjectLovList for LineProjectLov {
   label = "Project";

   static Company;
   static ProgramId;
   static ProjectId;
   static Name;
   static Description;
}

@DynamicComponentDependency PROJ
list LineSubProjectLovList for LineSubProjectLov {
   label = "Sub Project";

   static ProjectId;
   static SubProjectId;
   static Description;
   static Company;
   static ProgramId;
}

@DynamicComponentDependency PROJ
list LineActivityNoLovList for LineActivityNoLov {
   label = "Activity";

   static ProgramId;
   static ProjectId;
   static SubProjectId;
   static ActivityNo;
   static ActivitySeq;
   static Description;
   static Company;
}
--------------------------------- COMMANDS ----------------------------------
command PrePostingDetailCmd for MaterialReqLine {
   label = "Pre Posting";
   visible = [PostingConnectedDb = 1];

   execute {
      dialog PrePostingDialog(PreAccountingId, Company, PreAccountingRef.AccountNo, PreAccountingRef.CodenoB, PreAccountingRef.CodenoC, PreAccountingRef.CodenoD,
      PreAccountingRef.CodenoE, PreAccountingRef.CodenoF, PreAccountingRef.CodenoG, PreAccountingRef.CodenoH, PreAccountingRef.CodenoI, PreAccountingRef.CodenoJ,
      ActivitySeq, AllowCodeA, AllowCodeB, AllowCodeC, AllowCodeD, AllowCodeE, AllowCodeF, AllowCodeG, AllowCodeH, AllowCodeI, AllowCodeJ, CodeNameA, CodeNameB,
      CodeNameC, CodeNameD, CodeNameE, CodeNameF, CodeNameG, CodeNameH, CodeNameI, CodeNameJ) {
         when OK {
            exit OK;
         }
      }
   }
}

@DynamicComponentDependency PROJ
command ProjectConnectionCmd for MaterialReqLine {
   label = "Project Information";
   visible = [ProjectConnectedDb = "TRUE"];
   variable ProjectConnectionDescVar Structure(ProjectConnectionDescStruct);
   execute {
      call GetProjectConnectionDescriptions(ActivitySeq) into ProjectConnectionDescVar;

      dialog ProjectConnectionDialog(Company, ProgramId, ProjectId, SubProjectId, ActivityNo, ActivitySeq, ProjectConnectionDescVar.ProgramDesc, ProjectConnectionDescVar.ProjectDesc, ProjectConnectionDescVar.SubProjectDesc, ActivityDesc) {
         when OK {
            exit OK;
         }
      }
   }
}

command GoToMRDetailCmd {
   label = "View Details";
   execute {
      navigate MaterialRequisitionDetailPage(OrderNo);
   }
}

command HomeCmd {
   label = "Home";
   execute {
      navigate "lobby/c5e794ed-4f80-4d33-9c28-c62ae0c56a17";
   }
}

command AddPartCmd for LinePartNoLov {
   label = "Add Part";
   mode = SingleRecord;

   execute {
      dialog AddPartDialog(PartNo, Description, UnitMeas, ConditionCodeUsageDb) into(QtyDue, ConditionCode, ConditionCodeDescription) {
         when OK {
            call AddPart(Contract, PartNo, parent.Objkey, Description, SupplyCode, ConditionCode, ConditionCodeDescription, UnitMeas, QtyDue);
            success("${PartNo} - ${Description} added.");
         }
      }
   }
}
