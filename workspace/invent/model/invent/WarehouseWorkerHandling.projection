----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2018-05-02  ChFolk  SCUXXW4-5446, Included CopyWarehouseWorkerDialog which is from dlgCopyWarehouseWorker.
-- 2018-04-19  ChFolk  SCUXXW4-6592, Converted from frmWarehouseWorker using MTG Version: 1.16
----------------------------------------------------------------------------------------------------------
projection WarehouseWorkerHandling;
component INVENT;
layer Core;
description "Use this API to enter and to view warehouse workers. The workers are those who perform the warehouse tasks";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseWorkerGroupLovSelector;
include fragment WarehouseWorkerInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseWorkers for WarehouseWorker;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseWorker {
   supportwarnings = [true];
   attribute WorkerId Text {
      maxlength = 100;
   }
   attribute WorkerGroup Text {
      format = uppercase;
   }
   attribute StartDate Date {
      label = "Valid From Date";
   }
   attribute EndDate Date {
      label = "Valid To Date";
   }
   reference WorkerIdRef(WorkerId) to PersonInfo(PersonId) {
      label = "Worker ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroupLov(Contract, WorkerGroup) {
      label = "Worker Group";
   }
   reference CalendarIdRef(CalendarId) to WorkTimeCalendar(CalendarId) {
      label = "Calendar ID";
   }
   array DetailWorkerTaskType(WorkerId, Contract) to WarehouseWorkerTaskType(WorkerId, Contract);
   array DetailWarehouseWorkerLocationGroup(WorkerId, Contract) to WarehouseWorkerLocationGroup(WorkerId, Contract);
   action AddAllLocationGroups {
      ludependencies = WarehouseWorkerLocGroup;
   }
}

@Override
entity WarehouseWorkerTaskType {
   attribute TimeShare Number {
      label = "Planned Time Share";
   }
   attribute ActualTimeShare Number {
      editable = [false];
   }
   attribute EfficencyRate Number {
      label = "Planned Efficiency Rate";
   }
   attribute ActualEfficiencyRate Number {
      fetch = "WAREHOUSE_TASK_TYPE_SETUP_API.Get_Default_Time_Needed(CONTRACT, TASK_TYPE) / ACTUAL_TIME_NEEDED";
      label = "Actual Efficiency Rate";
      editable = [false];
   }
   reference WorkerIdRef(Contract, WorkerId) to WarehouseWorker(Contract, WorkerId) {
      label = "Worker ID";
   }
}

@Override
entity WarehouseWorkerLocationGroup using WarehouseWorkerLocGroup {
   attribute Contract Text {
      label = "Contract";
   }
   attribute LocationGroupDescription Text {
      fetch = "INVENTORY_LOCATION_GROUP_API.Get_Description(LOCATION_GROUP)";
      label = "Location Group Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TimeShare Number {
      label = "Planned Time Share";
   }
   attribute ActualTimeShare Number {
      editable = [false];
   }
   reference LocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetDescription Text {
   parameter LocationGroup Text;
}

function InventoryLocationGroups List<Entity(InventoryLocationGroup)> {
   parameter Contract Text;
   where = "LOCATION_GROUP in (select LOCATION_GROUP from INVENTORY_LOCATION where CONTRACT = :Contract)";
}

function GetCalendarId Text {
   parameter Contract    Text;
   parameter WorkerGroup Text;
}

function DistinctWorkerGroups List<Entity(WarehouseWorkerGroup)> {
   parameter Contract Text;
   where = " WORKER_GROUP in (select DISTINCT WORKER_GROUP from WAREHOUSE_WORKER_GROUP where CONTRACT = :Contract)";
}

-------------------------------- STRUCTURES ---------------------------------
structure CopyWarehouseWorkerStructure {
   attribute FromContract Text {
      maxlength = 100;
   }
   attribute FromWorkerId Text {
      label = "Worker ID";
      maxlength = 20;
      required = [true];
      format = uppercase;
   }
   attribute FromWorkerName Text {
      label = "Worker Name";
      maxlength = 100;
   }
   attribute ValidFrom Date {
      label = "Valid From";
   }
   attribute FromWorkerGroup Text {
      label = "Worker Group";
      maxlength = 20;
      format = uppercase;
   }
   attribute FromCalendarId Text {
      label = "Calendar ID";
      maxlength = 10;
   }
   attribute ToWorkerId Text {
      label = "Worker ID";
      maxlength = 20;
      required = [true];
      format = uppercase;
   }
   attribute ToWorkerName Text {
      label = "Worker Name";
      maxlength = 100;
   }
   attribute ToStartDate Date {
      label = "Valid From";
      required = [true];
   }
   attribute ToWorkerGroup Text {
      label = "Worker Group";
      maxlength = 20;
      required = [true];
      format = uppercase;
   }
   attribute ToCalendarId Text {
      label = "Calendar ID";
      maxlength = 10;
      required = [true];
      format = uppercase;
   }
   attribute ToContract Text {
      label = "Site";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   reference ToWorkerIdRef(ToWorkerId) to PersonInfo(PersonId);
   reference WorkerGroupRef(ToContract, ToWorkerGroup) to WarehouseWorkerGroupLov(Contract, WorkerGroup);
   reference CalendarIdRef(ToCalendarId) to WorkTimeCalendar(CalendarId);
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract);
}

---------------------------------- ACTIONS ----------------------------------
action CopyWorker {
   initialcheck WarehouseWorkerInitialCheck(FromContract, FromWorkerId);
   initialcheck implementation;
   parameter FromContract Text;
   parameter FromWorkerId Text;
   parameter ToWorkerId Text;
   parameter ToContract Text;
   parameter ToStartDate Date;
   parameter ToWorkerGroup Text;
   parameter ToCalendarId Text;
   ludependencies = WarehouseWorker;

}

