-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2022-02-02  BwItLk  SC21R2-7297, Modified WarehouseBayRow entity  by adding TierId, BinId to filter out data in Warehouse Navigator in each level.
--  2020-09-25  JaThlk  SC2020R1-9887, Overrode the virtual CapacitiesAndConditionsVirtual to have the method signature in the projection itself.
--  2019-05-13  DaZase  SCUXXW4-19643, Added initialcheck to all unbounded actions.
--  2019-02-15  bajelk  SCUXXW4-16026, Deleted objstate attribute inside overrided WarehouseRowCapability entity.
--  2019-01-27  bajelk  SCUXXW4-15286, Deleted the "Hidden" status of Storage Capability LOV in Row Values List.
--  2018-11-14  KoDelk  SCUXXW4-6186, Converted from frmInventLocationWarehouseRow using MTG Version 1.31.
--  ----------  ------  --------------------------------------------------------------------------------
projection InventLocationWarehouseRowHandling;
component INVENT;
layer Core;
description "Manage WarehouseBayRow";
category Users;
include fragment ClearStorageCharacteristics;
include fragment InventoryLocationsTab;
include fragment InventoryPartInStockList;
include fragment HandlingUnitsInStockList;
include fragment ModifyCapacitiesAndConditionsAssistant;
include fragment WhRowOperativeCapInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseBayRowSet for WarehouseBayRow;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseBayRow {
   crud = Read, Update;
   use attributes = Description, AvailabilityControlId, RouteOrder, BinWidthCapacity, BinHeightCapacity, BinDeptCapacity, BinVolumeCapacity, RowCarryingCapacity, BinCarryingCapacity, BinMinTemperature, BinMaxTemperature, BinMinHumidity, BinMaxHumidity;
   attribute RowId Text {
      label = "Row";
   }
   attribute TierId Text {
      fetch = "NULL";
   }
   attribute BinId Text {
      fetch = "NULL";
   }
   attribute ReceiptsBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Warehouse_Bay_API.Get_Receipts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID), 'TRUE', 'TRUE', receipts_blocked_db)";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptsBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Receipts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      editable = [false];
   }
   attribute ReceiptsBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Receipts_Blocked_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute ReceiptToOccupiedBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Warehouse_Bay_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT, WAREHOUSE_ID, BAY_ID), 'TRUE', 'TRUE', receipt_to_occupied_blocked_db)";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute ReceiptToOccupiedBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      editable = [false];
   }
   attribute ReceiptToOccupiedBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Receipt_To_Occup_Blkd_Src(contract, warehouse_id, bay_id, row_id)";
      label = "Receipts Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixOfPartNumberBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Warehouse_Bay_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID), 'TRUE', 'TRUE', mix_of_part_number_blocked_db)";
      label = "Mix of Part Numbers Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfPartNumberBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      editable = [false];
   }
   attribute MixOfPartNumberBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Part_Blocked_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Mix Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute MixOfCondCodesBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Warehouse_Bay_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID), 'TRUE', 'TRUE', mix_of_cond_codes_blocked_db)";
      label = "Mix of Condition Codes Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfCondCodesBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      editable = [false];
   }
   attribute MixOfCondCodesBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Cond_Blocked_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Mix Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute MixOfLotBatchNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Warehouse_Bay_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID), 'TRUE', 'TRUE', mix_of_lot_batch_no_blocked_db)";
      label = "Mix of Lot Batch Numbers Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfLotBatchNoBlockedParentDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      editable = [false];
   }
   attribute MixOfLotBatchNoBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Lot_Blocked_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Mix Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute ExcludeStorageReqValDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Warehouse_Bay_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT, WAREHOUSE_ID, BAY_ID), 'TRUE', 'TRUE', exclude_storage_req_val_db)";
      label = "Exclude Storage Requirement Validation";
      editable = [ETag != null];
      required = [true];
   }
   attribute ExcludeStorageReqValParentDb Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      editable = [false];
   }
   attribute ValidationExcludedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Excl_Storage_Req_Val_Src(contract, warehouse_id, bay_id, row_id)";
      label = "Validation Excluded on";
      maxlength = 2000;
      editable = [false];
   }
   attribute HideInWhseNavigatorDb Boolean("TRUE", "FALSE") {
      fetch = "hide_in_whse_navigator_db";
      label = "Hide in Warehouse Navigator";
      required = [true];
   }
   attribute HiddenLevelsExistBelow Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Is_Hidden_In_Structure_Below(contract, warehouse_id,bay_id, row_id, 'FALSE')";
      label = "Hidden Levels Exist Below";
      editable = [false];
      required = [true];
   }
   attribute AvailabilityControlId Text {
      label = "Row Value";
   }
   attribute OperativeValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Availability_Control_Id(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute OperativeValueSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Avail_Control_Id_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinWidthCapacity Number {
      label = "Width";
   }
   attribute BinWidthCapacityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Width_Capacity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute BinWidthSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Width_Capacity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute LengthUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute BinHeightCapacity Number {
      label = "Height";
   }
   attribute BinHeightCapacityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Height_Capacity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute BinHeightSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Height_Capacity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute BinDeptCapacity Number {
      label = "Depth";
   }
   attribute BinDeptCapacityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Dept_Capacity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute BinDepthSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Dept_Capacity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute BinVolumeCapacity Number {
      label = "Volume";
      maxlength = 32767;
   }
   attribute BinVolumeCapacityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Volume_Capacity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute BinVolumeSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Volume_Capacity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(contract)";
      label = "Volume UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute RowCarryingCapacity Number {
      label = "Row";
   }
   attribute RowCarryingCapacityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Row_Carrying_Capacity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute RowCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Row_Carry_Capacity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute BinCarryingCapacity Number {
      label = "Bin";
   }
   attribute BinCarryingCapacityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Carrying_Capacity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute BinCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Carry_Capacity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute BinMinTemperature Number {
      label = "Min Temperature";
   }
   attribute BinMinTemperatureOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Min_Temperature(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute MinTemperatureSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Min_Temperature_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute TemperatureUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute BinMaxTemperature Number {
      label = "Max Temperature";
   }
   attribute BinMaxTemperatureOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Max_Temperature(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute MaxTemperatureSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Max_Temperature_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute BinMinHumidity Number {
      label = "Min Humidity";
   }
   attribute BinMinHumidityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Min_Humidity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute MinHumiditySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Min_Humidity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   attribute HumidityUom Text {
      fetch = "'%'";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute BinMaxHumidity Number {
      label = "Max Humidity";
   }
   attribute BinMaxHumidityOppValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Max_Humidity(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value";
      editable = [false];
   }
   attribute MaxHumiditySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Max_Humidity_Source(contract, warehouse_id, bay_id, row_id)";
      label = "Operative Value Source";
      maxlength = 200;
      editable = [false];
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Row Value";
   }

   array WarehouseBayRowArray(Contract, WarehouseId, BayId, RowId) to WarehouseBayRow(Contract, WarehouseId, BayId, RowId);
   array WarehouseRowHuCapacityArray(Contract, WarehouseId, BayId, RowId) to WarehouseRowHuCapacity(Contract, WarehouseId, BayId, RowId);
   array WarehouseRowCapabilityArray(Contract, WarehouseId, BayId, RowId) to WarehouseRowCapability(Contract, WarehouseId, BayId, RowId);
   array WarehouseBinCapabilityArray(Contract, WarehouseId, BayId, RowId) to WarehouseBinCapability(Contract, WarehouseId, BayId, RowId);
   array WarehouseBayBinArray(Contract, WarehouseId, BayId, RowId) to WarehouseBayBin(Contract, WarehouseId, BayId, RowId);
   array InventoryPartInStockArray(Contract, WarehouseId, BayId, RowId) to InventoryPartInStock(Contract, Warehouse, BayNo, RowNo);

}
@Override
entity WarehouseRowHuCapacity {
   use attributes = BinHuTypeCapacity;
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinHuTypeCapacity Number {
      label = "Bin Capacity";
      required = [true];
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
}
@Override
entity WarehouseRowCapability {
   crud = Create, Read, Delete;
   attribute StorageCapabilityId Text {
      label = "Storage Capability ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute RemovedDb Boolean("TRUE", "FALSE") {
      fetch = "removed_db";
      label = "Removed";
      editable = [false];
      required = [true];
   }
   reference StorageCapabilityIdRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability";
   }
}
@Override
entity WarehouseBinCapability {
   ludependencies = WarehouseRowCapability;
   crud = Read;
   from = "wh_row_operative_cap";
   exec = "WAREHOUSE_BIN_CAPABILITY_API";
   keys = Contract, WarehouseId, BayId, RowId, StorageCapabilityId {
      where = "CONTRACT = :Contract and WAREHOUSE_ID = :WarehouseId and BAY_ID = :BayId and ROW_ID = :RowId and STORAGE_CAPABILITY_ID = :StorageCapabilityId";
   }
   attribute StorageCapabilityId Text {
      label = "Storage Capability ID";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   attribute Source Text {
      fetch = "source";
      label = "Source";
      maxlength = 100;
      editable = [false];
   }
   reference StorageCapabilityIdRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action RemoveCapability {
   initialcheck implementation;
   ludependencies = WarehouseRowCapability, WarehouseBinCapability;

   parameter Selection Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetRowValuesActiveState List<Entity(StorageCapability)> {
   where = "objstate = 'Active'";

}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
@Override
virtual CapacitiesAndConditionsVirtual {
   action SaveCapacityAndConditions {
      ludependencies = WarehouseBayRow;
   }
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
