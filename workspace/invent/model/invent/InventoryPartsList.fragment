--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-13  SBalLK  SC21R2-3223, Modified section InventoryPartList by making Description, PartDescriptionInUse fields as multiline field.
-- 2021-07-26  RasDlk  SC21R2-1023, Renamed the field ExcludeShipPackProposal by ExclShipPackProposal.
-- 2021-07-19  RasDlk  SC21R2-1035, Added the attribute ExcludeShipPackProposal for the InventoryPartList.
-- 2021-06-10  JaThlk  SC21R2-1009, Modified InventoryPartList to add new fields, AbcClassLockedUntil, FreqClassLockedUntil and LifeStageLockedUntil and
-- 2021-06-10          modified InventoryPart entity to remove editable false property in FrequencyClass and LifecycleStage.
-- 2019-08-28  ChFolk  SCUXXW4-23117, Used Enumeration for OnhandAnalysisFlag and CoReserveOnhAnalysFlag instead of Boolean.
-- 2019-07-16  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-05-22  fgusse  SCUXXW4-18441, Added translatable to documenttextcommand, added ludependencies = documenttext.
-- 2019-04-25  ChFolk  SCUXXW4-18441, modified function GetRegionsOfOrigin to add where clause to avoid method in plsvc.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-12-19  SaGeLK  SCUXXW4-5524, Moved the code from InventoryPartsList fragment
--------------------------------------------------------------------------------------

fragment InventoryPartsList;
component INVENT;
layer Core;
description "Use this fragment to display detailed information about Inventory parts.";

include fragment InventoryPartLov18Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment InputUomGroupLovSelector;
include fragment LovCommodityGroup1Selector;
include fragment LovCommodityGroup2Selector;
include fragment TechnicalCoordinatorLovSelector;
include fragment StandardNamesLovSelector;

// Document Text related fragments
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------
command DocumentTextCommand for InventoryPart {
   label = "Document Text";
   enabled = [true];
   variable Label;
   execute {
      set Label = " for Inventory Part - ${PartNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, Label) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

----------------------------------- LISTS -----------------------------------
list InventoryPartList for InventoryPart {

   field PartNo;
   field PartDescriptionInUse {
      multiline = true;
      size = Large;
   }
   field Description {
      multiline = true;
      size = Large;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;
   }
   field TypeCode;
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      size = Small;
      contactwidget {
         enabled = [PlannerBuyer != "*"];
         source = Person;
      }
   }
   field UnitMeas {
      size = Small;
   }
   field CatchUnitMeasRef {
      size = Small;
   }
   lov InputUnitMeasGroupIdRef with ReferenceInputUomGroupLovSelector {
      description = InputUnitMeasGroupIdRef.Description;
   }
   lov PrimeCommodityRef with ReferenceLovCommodityGroup1Selector {
      description = PrimeCommodityRef.Description;
   }
   lov SecondCommodityRef with ReferenceLovCommodityGroup2Selector {
      description = SecondCommodityRef.Description;
   }
   lov AssetClassRef with ReferenceAssetClassSelector {
      description = AssetClassRef.Description;
   }

   lov PartStatusRef with ReferenceInventoryPartStatusParSelector {
      description = PartStatusRef.Description;
   }

   lov AbcClassRef  with ReferenceAbcClassSelector {
      description = AbcClassRef.AbcPercent;
   }
   field AbcClassLockedUntil;
   field FrequencyClass;
   field FreqClassLockedUntil {
      label = "Frequency Class Locked Until";
   }
   field LifecycleStage;
   field LifeStageLockedUntil {
      label = "Lifecycle Stage Locked Until";
   }

   lov HazardCodeRef with ReferenceSafetyInstructionSelector {
      description = HazardCodeRef.Description;
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      description = AccountingGroupRef.Description;
   }

   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }

   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }

   field TypeDesignation {
      size = Small;
   }
   field DimQuality {
      size = Small;
   }
   field NetWeight {
      size = Small;
   }
   field WeightUom {
      size = Small;
   }
   field NetVolume {
      size = Small;
   }
   field VolumeUom {
      size = Small;
   }
   field ExclShipPackProposal;
   field OnHandQty;
   field OnHandCatchQty {
      size = Small;
   }
   field CreateDate;
   field LastActivityDate;

   field DocumentText {
      size = Small;
   }
   field NoteText {
      multiline = true;
   }
   field LeadTimeCode {
      size = Small;
   }
   field PurchLeadtime {
      editable = [LeadTimeCode = "Purchased"];
      validate command {
         execute {

            if [PurchLeadtime != null] {
               set ExpectedLeadtime = PurchLeadtime;
            }
         }
      }
   }
   field EarliestUltdSupplyDate;
   field ManufLeadtime {
      editable = [LeadTimeCode = "Manufactured"];
      validate command {
         execute {
            if [ManufLeadtime != null] {
               set ExpectedLeadtime = ManufLeadtime;
            }
         }
      }
   }
   field ExpectedLeadtime;
   field Supersedes {
      size = Small;
   }
   field SupersededByPart {
      size = Small;
   }
   field DurabilityDay;
   field MinDurabDaysCoDeliv;
   field MinDurabDaysPlanning;
   field MandatoryExpirationDateDb {
      size = Small;
   }
   lov CountryOfOriginRef with ReferenceIsoCountrySelector {
      description = CountryOfOriginRef.Description;
   }
   lov RegionOfOriginRef with ReferenceCountryRegionSelector using GetRegionsOfOrigin(Contract) {
      description = RegionOfOriginRef.RegionName;

   }
   lov CustomsStatisticsNumberRef with  ReferenceCustomsStatisticsNumberSelector {
      description = CustomsStatisticsNumberRef.Description;
   }

   field IntrastatConvFactor;
   field CustomsStatisticsNumberRef.CustomsUnitMeas {
      size = Small;
      label = "Customs UoM";
   }
   lov SupplyChainPartGroupRef with ReferenceSupplyChainPartGroupSelector {
      description = SupplyChainPartGroupRef.Description;
   }

   field SupplyCode {
      size = Small;
   }
   field DopConnection {
      size = Small;
   }
   field DopNetting {
      size = Small;
   }
   lov TechnicalCoordinatorIdRef with ReferenceTechnicalCoordinatorLovSelector {
      size = Small;
   }
   field QtyCalcRounding;
   field Configurable {
      size = Small;
   }
   field InventoryValuationMethod {
      size = Small;
   }
   field InventoryPartCostLevel {
      size = Small;
   }
   field InvoiceConsideration {
      size = Small;
   }
   field ZeroCostFlag {
      size = Small;
   }
   @DynamicComponentDependency COST
   lov PartCostGroupRef with ReferencePartCostGroupSelector {
      description = PartCostGroupRef.Description;
   }

   field ExtServiceCostMethod {
      size = Small;
   }
   field CyclePeriod;
   field CountVariance;
   field CycleCode {
      size = Small;
   }
   field OeAllocAssignFlag {
      size = Small;
   }
   field AutomaticCapabilityCheck {
      size = Small;
   }
   field NegativeOnHand {
      size = Small;
   }
   field OnhandAnalysisFlag {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field CoReserveOnhAnalysFlag {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field ForecastConsumptionFlag {
      size = Small;
   }
   field ShortageFlag {
      size = Small;
   }
   field StockManagement {
      size = Small;
   }
   field PutawayZoneRefillOption {
      size = Small;
      validate command {
         execute {
            call GetPutawayOptions(Contract, PartNo) into PutawayZonesStructure;
            set RefillPutawayZonesOperativeValue = PutawayZonesStructure.OperativeValue;
            set RefillPutawayZonesSource = PutawayZonesStructure.Source;
         }
      }
   }
   field RefillPutawayZonesOperativeValue {
      size = Small;
   }
   field RefillPutawayZonesSource {
      size = Small;
   }
   field StandardPutawayQty;
   lov InventoryPartStdNameRef with ReferenceStandardNamesLovSelector {
      description = InventoryPartStandardName;
      validate command {
         execute {
            call GetStdName(InventoryPartStdNameId) into InventoryPartStandardName;
         }
      }
   }

   field InventoryPartStandardName {
      columnexclude = [true];
   }

   lov PartCatalogStandardNameRef with ReferenceStandardNamesLovSelector {
      description = PartCatalogStandardName;
      editable = [false];
   }

   field GTIN {
      size = Small;
   }
   field GTINSeries {
      size = Small;
   }
   field AlternatePartsExist {
      size = Small;
   }
   field EngAttributeRef {
      size = Small;
   }
   field StorageWidthRequirement {
      label = "Operative Storage Width Requirement";
   }

   field StorageWidthRequirementSource {
      size = Small;
   }
   field StorageHeightRequirement {
      label = "Operative Storage Height Requirement";
   }

   field StorageHeightRequirementSource {
      size = Small;
   }
   field StorageDepthRequirement {
      label = "Operative Storage Depth Requirement";
   }

   field StorageDepthRequirementSource {
      size = Small;
   }
   field UomForLength {
      size = Small;
   }
   field QtyPerVolume;
   field OperativeQtyPerVolume;
   field QtyPerVolumeSource {
      size = Small;
   }
   field UomForVolume {
      size = Small;
   }
   field StorageWeightRequirement {
      label = "Operative Storage Weight Requirement";
   }

   field StorageWeightRequirementSource {
      size = Small;
   }
   field UomForWeight {
      size = Small;
   }
   field MinStorageTemperature {
      label = "Operative Min Storage Temperature";
   }

   field MinStorageTemperatureSource {
      size = Small;
   }
   field MaxStorageTemperature {
      label = "Operative Max Storage Temperature";
   }

   field MaxStorageTemperatureSource {
      size = Small;
   }
   field UomForTemperature {
      size = Small;
   }
   field MinStorageHumidity {
      label = "Operative Min Storage Humidity (%)";
   }

   field MinStorageHumiditySource {
      size = Small;
   }
   field MaxStorageHumidity {
      label = "Operative Max Storage Humidity (%)";
   }

   field MaxStorageHumiditySource {
      size = Small;
   }
   fieldranking PartNo, Description, ContractRef, TypeCode, PlannerBuyerRef, UnitMeasRef, AssetClassRef, AssetClassDescription, PartStatusRef, PartStatusDescription;

   commandgroup DocumentTextCmdGroup {

      command DocumentTextCommand;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartSet for InventoryPart;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPart {
   crud = Read, Update, Delete;
   supportwarnings = [true];
   ludependencies = DocumentText;

   attribute PartDescriptionInUse Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description in Use";
      maxlength = 2000;
      editable = [false];
   }
   attribute Description Text {
      label = "Part Description";
   }
//   attribute SiteDescription Text {
//      fetch = "Site_API.Get_Description(contract)";
//      label = "Site Description";
//      maxlength = 2000;
//      editable = [false];
//   }
   attribute PlannerBuyer Text {
      label = "Planner";
   }
   attribute UnitMeas Text {
      label = "Inventory UoM";
   }
   attribute CatchUnitMeas Text {
      label = "Catch UoM";
   }
   attribute InputUnitMeasGroupId Text {
      label = "Input UoM Group";
   }
   attribute PrimeCommodity Text {
      label = "Commodity Group 1";
      maxlength = 20;
      format = uppercase;
   }
   attribute SecondCommodity Text {
      label = "Commodity Group 2";
      maxlength = 20;
      format = uppercase;
   }
//   attribute AssetClassDescription Text {
//      fetch = "Asset_Class_API.Get_Description(asset_class)";
//      label = "Asset Class Description";
//      maxlength = 2000;
//      required = [true];
//      editable = [ETag = null];
//   }
//   attribute PartStatusDescription Text {
//      fetch = "Inventory_Part_Status_Par_API.Get_Description(part_status)";
//      label = "Part Status Description";
//      maxlength = 2000;
//      required = [true];
//      editable = [ETag = null];
//   }
   attribute AbcClass Text {
      required = [true];
      format = uppercase;
   }
   attribute FrequencyClass Enumeration(InvPartFrequencyClass) {
      required = [true];
   }
   attribute LifecycleStage Enumeration(InvPartLifecycleStage) {
      required = [true];
   }
   attribute AccountingGroup Text {
      format = uppercase;
   }
//   attribute AccountingGroupDescription Text {
//      fetch = "Accounting_Group_API.Get_Description(accounting_group)";
//      label = "Accounting Group Description";
//      maxlength = 2000;
//      editable = [false];
//   }
   attribute PartProductCode Text {
      label = "Product Code";
      format = uppercase;
   }
//   attribute ProductCodeDescription Text {
//      fetch = "Inventory_Product_Code_API.Get_Description(part_product_code)";
//      label = "Product Code Description";
//      maxlength = 2000;
//      editable = [false];
//   }
   attribute PartProductFamily Text {
      label = "Product Family";
      format = uppercase;
   }
//   attribute ProductFamilyDescription Text {
//      fetch = "Inventory_Product_Family_API.Get_Description(part_product_family)";
//      label = "Product Family Description";
//      maxlength = 2000;
//      editable = [false];
//   }
   attribute DimQuality Text {
      label = "Dimension/ Quality";
   }
   attribute NetWeight Number {
      fetch = "Inventory_Part_API.Get_Weight_Net(contract,part_no)";
      label = "Net Weight";
      editable = [ETag = null];
   }
   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "Weight UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute NetVolume Number {
      fetch = "Inventory_Part_API.Get_Volume_Net(contract,part_no)";
      label = "Net Volume";
      editable = [ETag = null];
   }
   attribute VolumeUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Volume(Site_API.Get_Company(contract))";
      label = "Volume UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute OnHandQty Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand(contract, part_no,null)";
      label = "On Hand Qty";
      required = [true];
      editable = [ETag = null];
   }
   attribute OnHandCatchQty Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Sum_Catch_Qty_Onhand(contract, part_no, null, null, null, null, null, null, null, null)";
      label = "On Hand Catch Qty";
      maxlength = 2000;
      editable = [false];
   }
   attribute CreateDate Date {
      label = "Created";
      required = [true];
      editable = [ETag = null];
   }
   attribute LastActivityDate Date {
      label = "Modified";
      required = [true];
      editable = [ETag = null];
   }
   attribute NoteId Number {
      maxlength = 10;

   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE' , 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute LeadTimeCode Enumeration(InvPartLeadTimeCode) {
      editable = [ETag = null];
   }
   attribute PurchLeadtime Number {
      label = "Purchasing Lead Time";
      editable = [ETag != null];
   }
   attribute ManufLeadtime Number {
      label = "Manufacturing Lead Time";
   }
   attribute Supersedes Text {
      label = "Supersedes Part";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SupersededByPart Text {
      fetch = "Inventory_Part_API.Get_Superseded_By(contract, part_no)";
      label = "Superseded By Part";
      maxlength = 25;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute DurabilityDay Number {
      label = "Shelf Life in Days";
      maxlength = 4;
      editable = [ETag = null];
   }
   attribute MinDurabDaysCoDeliv Number {
      label = "Minimum Remaining Days at CO Delivery";
      maxlength = 4;
      editable = [ETag = null];
   }
   attribute MinDurabDaysPlanning Number {
      label = "Minimum Remaining Days for Planning";
      maxlength = 4;
      editable = [ETag = null];
   }
   attribute MandatoryExpirationDateDb Boolean("TRUE", "FALSE") {
      fetch = "mandatory_expiration_date_db";
      label = "Mandatory Expiration Date";
   }
   attribute RegionOfOrigin Text {
      label = "Region Code";
   }
//   attribute SupplyChainPartGroupDescription Text {
//      fetch = "Supply_Chain_Part_Group_API.Get_Description(supply_chain_part_group)";
//      label = "Supply Chain Part Group Description";
//      maxlength = 2000;
//      editable = [false];
//   }
   attribute SupplyCode Enumeration(MaterialRequisSupply.Subset1) {
      label = "Default Mtrl Req Supply";
   }
   attribute TechnicalCoordinatorId Text {
      label = "Tech Coordinator";
   }
   attribute QtyCalcRounding Number {
      maxlength = 2;
   }
   attribute Configurable Boolean {
      fetch = "DECODE( Part_Catalog_API.Get_Configurable_Db(part_no), 'CONFIGURED', 'TRUE' ,'NOT CONFIGURED', 'FALSE')";
      label = "Configurable";
      editable = [false];
   }
   attribute PartCostGroupId Text {
      format = uppercase;
   }
   attribute ExtServiceCostMethod Enumeration(ExtServiceCostMethod) {
      label = "External Service Cost Method";
   }
   attribute CyclePeriod Number {
      label = "Cycle Counting Interval";
      maxlength = 3;
   }
   attribute CountVariance Number {
      label = "Cum Count Diff";
      editable = [ETag = null];
   }
   attribute CycleCode Enumeration(InventoryPartCountType) {
      label = "Cycle Counting";
   }
   attribute OeAllocAssignFlag Enumeration(CustOrdReservationType) {
      label = "Reserve at order entry";
   }
   attribute AutomaticCapabilityCheck Enumeration(CapabilityCheckAllocate) {
      label = "Automatic Capability Check";
      editable = [ETag != null];
   }
   attribute OnhandAnalysisFlag Enumeration(GenYesNo) {
      fetch = "onhand_analysis_flag_db";
      label = "Availability Check";
      editable = [ETag != null];
   }
   attribute CoReserveOnhAnalysFlag Enumeration(GenYesNo) {
      fetch = "co_reserve_onh_analys_flag_db";
      label = "Availability Check at CO Reserve";
      editable = [ETag != null];
   }
   attribute ForecastConsumptionFlag Enumeration(InvPartForecastConsum) {
      label = "Online Consumption";
   }
   attribute PutawayZoneRefillOption Enumeration(PutawayZoneRefillOption) {
      label = "Refill Putaway Zones";
   }
   attribute RefillPutawayZonesOperativeValue Text {
      fetch = "Inventory_Part_API.Get_Putaway_Zone_Refill_Option(contract, part_no)";
      label = "Refill Putaway Zones Operative Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute RefillPutawayZonesSource Text {
      fetch = "Inventory_Part_API.Get_Putaway_Refill_Option_Src(contract,part_no)";
      label = "Refill Putaway Zones Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute StandardPutawayQty Number {
      label = "Std Putaway Qty";
   }
   attribute InventoryPartStdNameId Number {
      fetch = "std_name_id";
      label = "Inventory Part Standard Name ID";
   }
   attribute PartCatalogStdNameId Number {
      label = "Part Catalog Standard Name ID";
      fetch = "Part_Catalog_API.Get_Std_Name_Id(part_no)";
      editable = [false];
   }
   attribute InventoryPartStandardName Text {
      fetch = "Standard_Names_Language_API.Get_Std_Name(null,std_name_id)";
      label = "Inventory Part Standard Name";
      maxlength = 200;
      editable = [false];
   }
   attribute PartCatalogStandardName Text {
      fetch = "Standard_Names_Language_API.Get_Std_Name(null,Part_Catalog_API.Get_Std_Name_Id(part_no))";
      label = "Part Catalog Standard Name";
      maxlength = 200;
      editable = [false];
   }
   attribute GTIN Text {
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(part_no)";
      label = "GTIN";
      maxlength = 14;
      editable = [false];
   }
   attribute GTINSeries Text {
      fetch = "Part_Gtin_API.Get_Gtin_Series(part_no, Part_Gtin_API.Get_Default_Gtin_No(part_no))";
      label = "GTIN Series";
      maxlength = 20;
      editable = [false];
   }
   attribute AlternatePartsExist Boolean("TRUE", "FALSE") {
      fetch = "Inventory_Part_API.Check_If_Alternate_Part(contract, part_no)";
      label = "Alternate Parts Exist";
      editable = [false];
   }
   attribute EngAttribute Text {
      label = "Characteristic Template";
      editable = [ETag = null];
   }

   attribute StorageWidthRequirementSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Width_Req_Source(contract, part_no)";
      label = "Storage Width Requirement Source";
      maxlength = 100;
      editable = [false];
   }
   attribute StorageHeightRequirementSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Height_Req_Source(contract, part_no)";
      label = "Storage Height Requirement Source";
      maxlength = 100;
      editable = [false];
   }
   attribute StorageDepthRequirementSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Depth_Req_Source(contract, part_no)";
      label = "Storage Depth Requirement Source";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForLength Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "UoM for Length";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyPerVolume Number {
      fetch = "Inventory_Part_API.Get_Storage_Volume_Req_Client(contract, part_no)";
      label = "Qty per Volume";
      editable = [false];
   }
   attribute OperativeQtyPerVolume Number {
      fetch = "Inventory_Part_API.Get_Storage_Volume_Req_Oper_Cl(contract, part_no)";
      label = "Operative Qty per Volume";
      editable = [false];
   }
   attribute QtyPerVolumeSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Volume_Req_Source(contract, part_no)";
      label = "Qty per Volume Source";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Volume(Site_API.Get_Company(contract))";
      label = "UoM for Volume";
      maxlength = 2000;
      editable = [false];
   }
   attribute StorageWeightRequirementSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Weight_Req_Source(contract, part_no)";
      label = "Storage Weight Requirement Source";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "UoM for Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinStorageTemperatureSource Text {
      fetch = "Inventory_Part_API.Get_Min_Storage_Temp_Source(contract, part_no)";
      label = "Min Storage Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute MaxStorageTemperatureSource Text {
      fetch = "Inventory_Part_API.Get_Max_Storage_Temp_Source(contract, part_no)";
      label = "Max Storage Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForTemperature Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(contract))";
      label = "UoM for Temperature";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinStorageHumidity Number {
      label = "Min Storage Humidity (%)";
   }
   attribute MinStorageHumiditySource Text {
      fetch = "Inventory_Part_API.Get_Min_Storage_Humid_Source(contract, part_no)";
      label = "Min Storage Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   attribute MaxStorageHumidity Number {
      label = "Max Storage Humidity (%)";
   }
   attribute MaxStorageHumiditySource Text {
      fetch = "Inventory_Part_API.Get_Max_Storage_Humid_Source(contract, part_no)";
      label = "Max Storage Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   reference CustomsStatisticsNumberRef(CustomsStatNo) to CustomsStatisticsNumber(CustomsStatNo) {
      label = "Customs Statistics No";
   }

   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }

   reference CatchUnitMeasRef(CatchUnitMeas) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }
   reference InputUnitMeasGroupIdRef(UnitMeas, InputUnitMeasGroupId) to InputUomGroupLov(UnitCode, InputUnitMeasGroupId) {
      label = "Input UoM Group";
   }
   reference PrimeCommodityRef(PrimeCommodity) to LovCommodityGroup1(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to LovCommodityGroup2(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
   reference PartStatusRef(PartStatus) to InventoryPartStatusPar(PartStatus) {
      label = "Part Status";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference HazardCodeRef(HazardCode) to SafetyInstruction(HazardCode) {
      label = "Safety Code";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference CountryOfOriginRef(CountryOfOrigin) to IsoCountry(CountryCode) {
      label = "Country of Origin";
   }
   reference RegionOfOriginRef(CountryOfOrigin, RegionOfOrigin) to CountryRegion(CountryCode, RegionCode) {
      label = "Region Code";
   }
   reference SupplyChainPartGroupRef(SupplyChainPartGroup) to SupplyChainPartGroup(SupplyChainPartGroup) {
      label = "Supply Chain Part Group";
   }
   reference TechnicalCoordinatorIdRef(TechnicalCoordinatorId) to TechnicalCoordinatorLov(TechnicalCoordinatorId) {
      label = "Tech Coordinator";
   }

   @DynamicComponentDependency COST
   reference PartCostGroupRef(Contract, PartCostGroupId) to PartCostGroup(Contract, PartCostGroupId) {
      label = "Part Cost Group";
   }
   reference InventoryPartStdNameRef(InventoryPartStdNameId) to StandardNamesLov(StdNameId) {
      label = "Inventory Part Standard Name";
   }
   reference PartCatalogStandardNameRef(PartCatalogStdNameId) to StandardNamesLov(StdNameId) {
      label = "Part Catalog Standard Name";
   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Characteristic Template";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetStdName Text {
   parameter StdNameId Number;
}
function GetRegionsOfOrigin List < Entity(CountryRegion) > {
   parameter Contract Text;
   where = "country_code IN (SELECT Company_Site_API.Get_Country_Db(:Contract) FROM Dual)";
}
function GetPutawayOptions Structure(PutawayZonesStructure) {
   parameter Contract Text;
   parameter PartNo Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure PutawayZonesStructure {
   attribute OperativeValue Text;
   attribute Source Text;
}
