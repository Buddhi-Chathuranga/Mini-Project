--------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2020-12-24  UdGnlk  SC2020R1-11774, Modified PartDescription in TransportDelivNoteLine to ediatable false.
-- 2020-12-09  DiJwlk  SC2020R1-11750, Removed action ModifyDateApplied
-- 2020-11-20  JaThlk  GESPRING20-6009, Added DeliveryTerms and ShipViaCode to the ShipAddressInfomationStructure.
-- 2020-07-16  WaSalk  gelr: Added to support Global Extension Functionalities.
---------------------------------------------------------------------------------
projection TransportDeliveryNoteHandling;
component INVENT;
layer Core;
description "This Projection Is for Transport Delivery Note supporting gelr functionality Transport Delivery Note";
category Users;

include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CompanyPublicSelector;
include fragment CompanyAddressLovPubSelector;
include fragment OrderCoordinatorLovSelector;
include fragment ConnectTransactionsAssistant;
--------------------------------- FRAGMENTS ---------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
-- gelr:transport_delivery_note, begin
entityset TransportDeliveryNoteSet for TransportDeliveryNote;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity TransportDeliveryNote {
   ludependencies = TransportDeliveryNote;
   crud = Read, Create, Update;
   keys = DeliveryNoteId;
   supportwarnings = [true];
   attribute Contract Text;
   attribute Company Text {
      fetch = "Site_API.Get_Company(contract)";
   }
   attribute DeliveryAddressNo Text {
      fetch = "delivery_address_no";
   }
   attribute DeliveryFromAddress Text {
      fetch = "Site_API.Get_Description(contract)";
   }
   attribute DeliveryFromCountry Text {
      fetch = "Company_Address_API.Get_Country(company, delivery_address_no)";
   }
   attribute SingleOccurrenceAddress Boolean("TRUE", "FALSE") {
      required = [true];
   }
   @DynamicComponentDependency PURCH
   attribute ShipAddressName2 Text {
      fetch = "DECODE(vendor_no, null, Company_API.Get_Name(recipient_company), Supplier_API.Get_Vendor_Name(vendor_no))";
   }
   attribute ShipAddress3 Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute ShipAddress4 Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute ShipAddress5 Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute ShipAddress6 Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute ShipCountry Text {
      fetch = "ISO_Country_API.Get_Description(ship_country_code)";
   }
   attribute ForwarderAddrId Text {
      fetch = "Forwarder_Info_Address_API.Get_Default_Address(forward_agent_id, Address_Type_Code_API.Decode('DELIVERY'))";
   }
   attribute LineCount Number {
      fetch = "Transport_Deliv_Note_Line_API.Get_Connected_Line_Count__(delivery_note_id)";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract);
   reference CompanyRef(RecipientCompany) to CompanyFinance(Company);
   reference DeliveryReasonIdRef(Company, DeliveryReasonId) to DeliveryReason(Company, DeliveryReasonId);
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to ValidSupplierLov(VendorNo);
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId);
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms);
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode);
   reference CompanyAddressDeliveryFromRef(Company, DeliveryAddressNo) to CompanyAddress(Company, AddressId);
   reference CompanyAddressDeliveryToRef(RecipientCompany, ShipAddressNo) to CompanyAddress(Company, AddressId);
   reference CompanyAddressRef(RecipientCompany, ShipAddressNo) to CompanyAddressLovPub(Company, DeliveryAddress);
   reference VendorAddressRef(VendorNo, ShipAddressNo) to SupplierInfoAddress(SupplierId, AddressId);
   @DynamicComponentDependency PURCH
   reference VendorShipAddressRef(VendorNo, ShipAddressNo) to SupplierAddress(VendorNo, AddrNo);
   reference ForwarderInfoAddressRef(ForwardAgentId, ForwarderAddrId) to ForwarderInfoAddress(ForwarderId, AddressId);
   reference TransportDeliveryNoteRef(DeliveryNoteId) to TransportDeliveryNote(DeliveryNoteId);

   array TransportDelivNoteLineListArray(DeliveryNoteId) to TransportDelivNoteLine(DeliveryNoteId);
}

@Override
entity TransportDelivNoteLine {
   ludependencies = TransportDelivNoteLine, TransportDeliveryNote;
   crud = Read, Update, Delete;
   keys = DeliveryNoteId, TransactionId;
   attribute PartDescription Text {
      fetch = "Part_Catalog_API.Get_Description(part_no)";
      editable = [false];
   }
}
------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------
action GetTransportDeliveryNoteResultKey Number {
   initialcheck implementation;
   ludependencies = TransportDeliveryNote;
   parameter DeliveryNoteId Text;
   parameter DeliveryNoteState Text;
}

action GetPreviewTransportDeliveryNoteResultKey Number {
   initialcheck implementation;
   parameter DeliveryNoteId Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetContractInformation Structure(ContractInfomationStructure) {
   initialcheck implementation;
   ludependencies = TransportDeliveryNote;

   parameter Contract Text;
}

function GetShipAddressInformation Structure(ShipAddressInfomationStructure) {
   initialcheck implementation;
   ludependencies = TransportDeliveryNote;

   parameter VendorNo Text;
   parameter RecipientCompany Text;
   parameter SingleOccurrenceAddress Boolean;
}

function DeliveryReasonType List<Entity(DeliveryReason)> {
   parameter Contract Text;
   where = "COMPANY = Site_API.Get_Company(:Contract)";
}
-------------------------------- STRUCTURES ---------------------------------

structure ContractInfomationStructure {
   attribute Company             Text;
   attribute DeliveryAddressNo   Text;
   attribute DeliveryFromAddress Text;
}

structure ShipAddressInfomationStructure {
   attribute ShipAddressNo Text;
   attribute ShipAddressName Text;
   attribute ShipAddress1 Text;
   attribute ShipAddress2 Text;
   attribute ShipCity Text;
   attribute ShipCounty Text;
   attribute ShipState Text;
   attribute ShipZipCode Text;
   attribute ShipCountryCode Text;
   attribute ShipCountry Text;
   attribute DeliveryTerms Text;
   attribute ShipViaCode Text;
}
-- gelr:transport_delivery_note, end
--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
