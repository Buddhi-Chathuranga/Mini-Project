---------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------------------------
-- 2020-03-16  JaThlk  SCXTEND-2147, Added SequenceNo to support Warehouse Instant View lobby page.
-- 2019-07-10  ChFolk  SCUXXW4-22798, Modified Project information by adding get methods to increase performance.
-- 2018-03-27  JaThlk  SCUXXW4-6767, Converted from tbwCountingResultQuery using MTG Version: 1.15
---------------------------------------------------------------------------------------------------

projection CountResultsHandling;
component INVENT;
layer Core;
description "Use this API to view all counting results for the inventory parts which have been counted. The counting results displayed here both includes inventory parts that has been reported using count reports and not.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLocationSelector;
include fragment InventoryPartLov4Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CountingResults for CountingResult;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CountingResult {
   crud = Read;
   keys = Contract, PartNo, ConfigurationId, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, CountDate, ActivitySeq {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and LOCATION_NO = :LocationNo and HANDLING_UNIT_ID = :HandlingUnitId and LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and WAIV_DEV_REJ_NO = :WaivDevRejNo and ENG_CHG_LEVEL = :EngChgLevel and COUNT_DATE = :CountDate and ACTIVITY_SEQ = :ActivitySeq";
   }
   attribute PartDescription Text {
      fetch = "INVENTORY_PART_API.Get_Description(CONTRACT, PART_NO)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyCounted Number {
      label = "Counted Qty";
   }
   attribute CatchQtyCounted Number {
      label = "Counted Catch Qty";
   }
   attribute CountDiffAmount Number {
      label = "Max Counting Difference Amt";
      format = ifscurrency;
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty";
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO ))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute AvailabilityControlID Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Availability_Control_Id(CONTRACT, PART_NO, '*', LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Availability Control ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(Inventory_Part_In_Stock_API.Get_Availability_Control_Id(CONTRACT, PART_NO, '*', LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID))";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute CountDate Timestamp {
      label = "Confirmation Date/Time";
   }
   attribute DateCompleted Timestamp {
      label = "Approval Date/Time";
   }
   attribute InventoryValue Number {
      label = "Unit Cost";
      required = [true];
      format = ifscurrency;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "PROJECT_PROGRAM_GLOBAL_API.Get_Description(Project_API.Get_Program_Id(PROJECT_ID))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "PROJECT_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      label = "Sub Project Id";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      label = "Activity No";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute InventoryUoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
   }
   attribute SequenceNo Number {
      fetch = "seq";
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq);
   reference SeqRef(InvListNo, Seq) to CountingReportLine(InvListNo, Seq) {
      label = "Seq No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov4(Contract, PartNo) {
      label = "Part No";
   }
   reference InventoryUoMRef(InventoryUoM) to IsoUnit(UnitCode) {
      label = "Inventory UoM";
   }
   reference CatchUoMRef(CatchUoM) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }
   reference WaivDevRejNoRef(Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo) to InventoryPartLocation(Contract, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
      label = "W/D/R No";
   }
}







