--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2018-12-08  KoDelk  SCUXXW4-5946, Converted frmAssortmentDetails using MTG Version: 1.34
---------------------------------------------------------------------------------
projection PartsByAssortmentAndSiteClusterHandling;
component INVENT;
layer Core;
description "View AssortmentStructure";
category Users;
include fragment SiteClusterNodeJoinSelector;
include fragment InventoryPartsList;
include fragment PlanningDetailsForInventoryPartsList;
@DynamicComponentDependency ORDER
include fragment SalesPartsList;
@DynamicComponentDependency PURCH
include fragment PurchasePartsList;
@DynamicComponentDependency PURCH
include fragment SupplierPerPartList;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset AssortmentStructureSet for AssortmentStructure;
entityset AssortmentNodeSet for AssortmentNode;
@DynamicComponentDependency PURCH
entityset PurchasePartSupplierSet for PurchasePartSupplier;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AssortmentStructure {
   crud = Read;
   supportwarnings = [true];
   use attributes = Description, ClassificationStandard;
   attribute AssortmentId Text {
      label = "Assortment";
      maxlength = 100;
      editable = [false];
   }
   reference ClassificationStandardRef(ClassificationStandard) to ClassificationStandard(ClassificationStandard) {
      label = "Classification Standard";
   }
   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }

   array AssortmentRootNodeArray(AssortmentId) to AssortmentNode(AssortmentNodeId);
   array AssortmentNodeArrayChild(AssortmentId, AssortmentId) to AssortmentNode(AssortmentId, ParentNode);
   array AssortmentNodeArrayThis(AssortmentId, AssortmentId) to AssortmentNode(AssortmentId, AssortmentNodeId);
}
@Override
entity AssortmentNode {
   crud = Read;

   use attributes = PartNo, Description, ClassificationPartNo, ParentNode;

   attribute UnitCode Text {
      label = "Classification UoM";
   }
   attribute ClassificationId Text {
      fetch = "Assortment_Structure_API.Get_Classification_Standard(assortment_id)";
   }

   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference ClassificationStandardRef(ClassificationId) to ClassificationStandard(ClassificationStandard) {
      label = "Classification Standard";
   }

   array ChildArray(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, ParentNode);
}

------------------------------- ENUMERATIONS --------------------------------
enumeration FilterType {
   value = "VIEW_ALL" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "FILTER" {
      identifier = "Filter";
      label = "Filter by Site Cluster";
   }
}

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetDefaultSeachContext Structure(AssortmentSearchContextStructure);

function GetInventoryPartsList List<Entity(InventoryPart)> {
   basedon InventoryPartSet;

   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter FilterType Enumeration(FilterType);
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;

   where = "((part_no IN (SELECT part_no
                          FROM assortment_node
                         WHERE part_no IS NOT NULL
                         START WITH assortment_node_id = :AssortmentNodeId
                           AND assortment_id = :AssortmentId
                    CONNECT BY PRIOR assortment_node_id = parent_node
                        AND    PRIOR assortment_id = assortment_id)) AND ((:FilterType = 'VIEW_ALL') OR (contract IN (SELECT contract
                                                                                                                        FROM site_cluster_node
                                                                                                                       WHERE contract IS NOT NULL
                                                                                                                       START WITH site_cluster_node_id = :SiteClusterNodeId
                                                                                                                         AND site_cluster_id = :SiteClusterId
                                                                                                                  CONNECT BY PRIOR site_cluster_node_id = parent_node
                                                                                                                         AND PRIOR site_cluster_id = site_cluster_id))))";
}

function GetInventPartPlanningList List<Entity(InventoryPartPlanning)> {
   basedon InventoryPartPlanningSet;

   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter FilterType Enumeration(FilterType);
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;

   where = "((part_no IN (SELECT part_no
                          FROM assortment_node
                         WHERE part_no IS NOT NULL
                         START WITH assortment_node_id = :AssortmentNodeId
                           AND assortment_id = :AssortmentId
                    CONNECT BY PRIOR assortment_node_id = parent_node
                           AND PRIOR assortment_id = assortment_id))
            AND ((:FilterType = 'VIEW_ALL') OR (contract IN (SELECT contract
                                                               FROM site_cluster_node
                                                              WHERE contract IS NOT NULL
                                                              START WITH site_cluster_node_id = :SiteClusterNodeId
                                                                AND site_cluster_id = :SiteClusterId
                                                         CONNECT BY PRIOR site_cluster_node_id = parent_node
                                                                AND PRIOR site_cluster_id = site_cluster_id)))
            AND (part_no IN (SELECT part_no
                                        FROM assortment_node
                                       WHERE part_no IS NOT NULL
                                       START WITH assortment_node_id = :AssortmentNodeId
                                         AND assortment_id = :AssortmentId
                                  CONNECT BY PRIOR assortment_node_id = parent_node
                                         AND PRIOR assortment_id = assortment_id)))";

}

@DynamicComponentDependency ORDER
function GetSalesPartList List<Entity(SalesPart)> {
   basedon SalesPartSet;

   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter FilterType Enumeration(FilterType);
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;

   where = "((catalog_no IN (SELECT part_no
                             FROM assortment_node
                            WHERE part_no IS NOT NULL
                            START WITH assortment_node_id = :AssortmentNodeId
                              AND assortment_id = :AssortmentId
                       CONNECT BY PRIOR assortment_node_id = parent_node
                              AND PRIOR assortment_id = assortment_id))
              AND ((:FilterType = 'VIEW_ALL') OR (contract IN  (SELECT contract
                                                                  FROM site_cluster_node
                                                                 WHERE contract IS NOT NULL
                                                                 START WITH site_cluster_node_id = :SiteClusterNodeId
                                                                   AND site_cluster_id = :SiteClusterId
                                                            CONNECT BY PRIOR site_cluster_node_id = parent_node
                                                                   AND PRIOR site_cluster_id = site_cluster_id))))";
}

@DynamicComponentDependency PURCH
function GetPurchasePartList List<Entity(PurchasePart)> {
   basedon PurchasePartSet;

   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter FilterType Enumeration(FilterType);
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;

   where = "((part_no IN (SELECT part_no
                          FROM assortment_node
                         WHERE part_no IS NOT NULL
                         START WITH assortment_node_id = :AssortmentNodeId
                           AND assortment_id = :AssortmentId
                    CONNECT BY PRIOR assortment_node_id = parent_node
                           AND PRIOR assortment_id = assortment_id))
            AND ((:FilterType = 'VIEW_ALL') OR (contract IN (SELECT contract
                                                               FROM site_cluster_node
                                                              WHERE contract IS NOT NULL
                                                              START WITH site_cluster_node_id = :SiteClusterNodeId
                                                                AND site_cluster_id = :SiteClusterId
                                                         CONNECT BY PRIOR site_cluster_node_id = parent_node
                                                                AND PRIOR site_cluster_id = site_cluster_id))))";
}

@DynamicComponentDependency PURCH
function GetSuplierForPurchasePartList List<Entity(PurchasePartSupplier)> {
   basedon PurchasePartSupplierSet;

   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter FilterType Enumeration(FilterType);
   parameter SiteClusterId Text;
   parameter SiteClusterNodeId Text;

   where = "((part_no IN (SELECT part_no
                          FROM assortment_node
                         WHERE part_no IS NOT NULL
                         START WITH assortment_node_id = :AssortmentNodeId
                           AND assortment_id = :AssortmentId
                    CONNECT BY PRIOR assortment_node_id = parent_node
                           AND PRIOR assortment_id = assortment_id))
            AND ((:FilterType = 'VIEW_ALL') OR (contract IN (SELECT contract
                                                               FROM site_cluster_node
                                                              WHERE contract IS NOT NULL
                                                              START WITH site_cluster_node_id = :SiteClusterNodeId
                                                                AND site_cluster_id = :SiteClusterId
                                                         CONNECT BY PRIOR site_cluster_node_id = parent_node
                                                                AND PRIOR site_cluster_id = site_cluster_id))))";
}

-------------------------------- STRUCTURES ---------------------------------
structure AssortmentSearchContextStructure {
   attribute FilterType Enumeration(FilterType) {
      required = [true];
   }
   attribute SiteClusterId Text {
      required = [FilterType = "Filter"];
   }
   attribute SiteClusterNodeId Text {
      required = [FilterType = "Filter"];
   }

   reference SiteClusterRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }
   reference SiteClusterNodeRef(SiteClusterId, SiteClusterNodeId) to SiteClusterNodeJoin(SiteClusterId, SiteClusterNodeId) {
      label = "Site Cluster Node";
   }
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

