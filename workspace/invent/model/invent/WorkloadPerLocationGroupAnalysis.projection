--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-04-02  SWiclk  SCUXXW4-6567, Converted from frmWarehouseTaskPlanning using MTG Version: 1.15
--------------------------------------------------------------------------------------
projection WorkloadPerLocationGroupAnalysis;
component INVENT;
layer Core;
description "Use this API to view the entire work load and to compare the time needed to execute the warehouse tasks with the available supply.
             The work is divided into sites, task types, and location groups.";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WorkloadPerLocationGroups for WorkloadPerLocationGroup;

------------------------------ ENTITY DETAILS -------------------------------

query WorkloadPerLocationGroup {
   from = "warehouse_task_type_setup1";
   lu = WarehouseTaskTypeSetup;
   keys = Contract, TaskTypeDb, LocationGroup;

   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      //editable = [false];
      format = uppercase;
   }
   attribute TaskTypeDb Text {
      maxlength = 50;
   }

   attribute TaskType Text {
      maxlength = 200;
   }
   attribute LocationGroup Text {
      fetch = "LOCATION_GROUP";
      label = "Location Group";
      maxlength = 5;
      //editable = [false];
      format = uppercase;
   }
   array DetailWarehouseTaskPlanning(Contract, TaskTypeDb, LocationGroup) to WarehouseTask(Contract, TaskTypeDb, LocationGroup);
}

@Override
entity WarehouseTask {
   crud = Read;
   where = "objstate NOT IN ('Closed', 'Cancelled')";

   use attributes = NumberOfLines;

   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute TaskType Enumeration(WarehouseTaskType) {
      fetch = "TASK_TYPE_DB";
      label = "Task Type";
      required = [true];
      //editable = [ETag = null];
   }
   attribute TaskTypeDb Text {
      fetch = "TASK_TYPE_DB";
   }

   attribute LocationGroup Text {
      fetch = "LOCATION_GROUP";
      label = "Location Group";
      maxlength = 5;
      required = [true];
     //editable = [ETag = null];
      format = uppercase;
   }
   attribute RequestedDateFinished Timestamp {
      fetch = "REQUESTED_DATE_FINISHED";
      label = "Requested Finish Date";
      required = [true];
   }
   attribute NumberOfLines Number {
      fetch = "NUMBER_OF_LINES";
      label = "Number of Lines";
      required = [true];
   }
   attribute TaskId Number {
      fetch = "TASK_ID";
      label = "Task ID";
      required = [true];
      //editable = [false];
   }
   attribute TotalPlannedTimeNeeded Number {
      fetch = "WAREHOUSE_TASK_API.GET_TOTAL_PLANNED_TIME_NEEDED(TASK_ID)";
      label = "Total Planned Time Needed";
      required = [true];
   }
   attribute AccumulatedTimeSupply Number {
      fetch = "Warehouse_Worker_API.Get_Working_Time(CONTRACT, TASK_TYPE, LOCATION_GROUP, REQUESTED_DATE_FINISHED)";
      label = "Accumulated Time Supply";
     // editable = [false];
   }
   attribute Balance Number {
      fetch = "NVL(Warehouse_Worker_API.Get_Working_Time(CONTRACT, TASK_TYPE, LOCATION_GROUP, REQUESTED_DATE_FINISHED),0) - WAREHOUSE_TASK_API.GET_TOTAL_PLANNED_TIME_NEEDED(TASK_ID)";
      label = "Balance";
     // editable = [false];
   }
   attribute AccumulatedPlannedTimeNeeded Number {
      fetch = "WAREHOUSE_TASK_API.GET_TOTAL_PLANNED_TIME_NEEDED(TASK_ID)";
      label = "Accumulated Planned Time Needed (minutes)";
   }

}
