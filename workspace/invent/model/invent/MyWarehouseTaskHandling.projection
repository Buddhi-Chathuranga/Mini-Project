----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2020-05-27  RasDlk  SCSPRING20-689, Added the attribute SenderType to pass it to GetDetailsTab and GetAggregatedTab functions.
-- 2019-05-22  DaZase  SCUXXW4-21400, Added initialcheck to all unbounded actions.
-- 2019-05-21  RasDlk  SCUXXW4-21353, Added the fragment MovePartsIntoShipmentInventoryDialog.
-- 2019-05-16  ErRalk  SCUXXW4-9295, Added CustomerOrderPickList
-- 2019-04-25  SaGelk  SCUXXW4-6345, Converted frmMyWarehouseTask using MTG Version: 1.34
----------------------------------------------------------------------------------------------------------
projection MyWarehouseTaskHandling;
component INVENT;
layer Core;
description "Use this window to view pending tasks (Tasks in status: Released, Started, and Parked) for each worker.";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseWorkerLocGroupLovSelector;
include fragment TransportTask;
include fragment ParkReasonDialog;
@DynamicComponentDependency SHPORD
include fragment MyShopOrderIssuePickLineW;

@DynamicComponentDependency SHPMNT
include fragment ReportPickingOfPickListLineBase;
@DynamicComponentDependency SHPMNT
include fragment MovePartsIntoShipmentInventoryDialog;
include fragment WarehouseTaskInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseWorkerSet for WarehouseWorker;
entityset WarehouseTaskSet for WarehouseTask;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseWorker {
   crud = Read;
   from = "warehouse_worker";
   exec = "WAREHOUSE_WORKER_API";
   keys = WorkerId, Contract {
      where = "WORKER_ID = :WorkerId and CONTRACT = :Contract";
   }
   exclude attributes = CalendarId, EndDate, StartDate, WorkerGroup;
   attribute WorkerId Text {
      fetch = "worker_id";
      label = "Worker Id";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ReadyLinesExist Number {
      fetch = "Warehouse_Task_API.Ready_To_Start_Task_Exist(contract, worker_id)";
   }
   attribute StartedLinesExist Number {
      fetch = "Warehouse_Task_API.Started_Task_Exist(contract, worker_id)";
   }
   @DynamicComponentDependency DISCOM
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "'SITE'";
   }
   reference PersonInfoRef(WorkerId) to PersonInfo(PersonId);
   reference WorkerIdRef(Contract, WorkerId) to WarehouseWorker(Contract, WorkerId) {
      label = "Worker ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   array MyTasksArray(WorkerId, Contract) to WarehouseTask(PossibleWorkerId, Contract);
}

@Override
entity WarehouseTask {
   crud = Read;
   from = "warehouse_task_total";
   exec = "WAREHOUSE_TASK_API";
   keys = Contract, TaskId {
      where = "CONTRACT = :Contract and TASK_ID = :TaskId";
   }
   use attributes = WorkerId, WorkerGroup, LocationGroup, Priority, AssignedPriority, NumberOfLines, RequestedDateFinished, ActualDateStarted, Info, SourceRef1, ParkReasonId;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute PossibleWorkerId Text {
      fetch = "possible_worker_id";
      label = "Possible Worker ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;

   }
   attribute WorkerId Text {
      fetch = "worker_id";
      label = "Worker ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute WorkerGroup Text {
      fetch = "worker_group";
      label = "Worker Group";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute TaskId Number {
      fetch = "task_id";
      label = "Task ID";
      required = [true];
      editable = [false];
   }
   attribute TaskType Enumeration(WarehouseTaskType) {
      fetch = "task_type_db";
      label = "Task Type";
      required = [true];
      editable = [ETag = null];
   }
   attribute LocationGroup Text {
      fetch = "location_group";
      label = "Location Group";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }

   attribute Status Enumeration(WarehouseTaskStatus) {
      fetch = "objstate";
      label = "Status";
      editable = [false];
   }
   attribute Priority Number {
      fetch = "priority";
      label = "Default Priority";
      editable = [false];
   }
   attribute AssignedPriority Number {
      fetch = "assigned_priority";
      label = "Operative Priority";
      editable = [false];
   }
   attribute NumberOfLines Number {
      fetch = "number_of_lines";
      label = "Number of Lines";
      editable = [false];
   }
   attribute RequestedDateFinished Timestamp {
      fetch = "requested_date_finished";
      label = "Requested Finish Date";
      editable = [false];
   }
   attribute TotalPlannedTimeNeededMinutes Number {
      fetch = "Warehouse_Task_API.Get_Total_Planned_Time_Needed(task_id)";
      label = "Total Planned Time Needed (minutes)";
      editable = [false];
   }
   attribute LatestDateStarted Timestamp {
      fetch = "Warehouse_Task_API.Get_Latest_Date_Started(task_id)";
      label = "Latest Start Date";
      editable = [false];
   }
   attribute ActualDateStarted Timestamp {
      fetch = "actual_date_started";
      label = "Actual Start Date";
      editable = [false];
   }
   attribute ActualDateFinished Timestamp {
      fetch = "actual_date_finished";
      label = "Actual Date finished";
      editable = [false];
   }
   attribute ExpectedDateFinished Timestamp {
      fetch = "Warehouse_Task_API.Get_Expected_Date_Finished(task_id)";
      label = "Expected Finish Date";
      editable = [false];
   }
   attribute Info Text {
      fetch = "info";
      label = "Source Info";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Source Ref1";
      maxlength = 30;
      editable = [false];
   }
   attribute Assigned Boolean("TRUE", "FALSE") {
      fetch = "DECODE(worker_id, null, 'FALSE', 'TRUE')";
      label = "Assigned";
      editable = [false];
   }
   attribute ParkReasonId Text {
      fetch = "park_reason_id";
      label = "Park Reason";
      maxlength = 100;
      editable = [false];
   }
   attribute SourceRef1Num Number {
      fetch = "TO_NUMBER(source_ref1)";
      editable = [false];
   }
   attribute ReadyLinesExist Number {
      fetch = "Warehouse_Task_API.Ready_To_Start_Task_Exist(contract, possible_worker_id)";
   }
   attribute StartedLinesExist Number {
      fetch = "Warehouse_Task_API.Started_Task_Exist(contract, possible_worker_id)";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PersonInfoRef(WorkerId) to PersonInfo(PersonId);
   reference WarehouseTaskParkReasonRef(ParkReasonId) to WarehouseTaskParkReason(ParkReasonId);
   reference WorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroup(Contract, WorkerGroup) {
      label = "Worker Group";
   }
   reference LocationGroupRef(WorkerId, Contract, LocationGroup) to WarehouseWorkerLocGroupLov(WorkerId, Contract, LocationGroup) {
      label = "Location Group";
   }

   array WarehouseTaskArray(SourceRef1) to TransportTask(TransportTaskId);
   @DynamicComponentDependency SHPORD
   array WarehouseTaskShopOrderArray(SourceRef1, Contract) to ShopMaterialPickLine(PickListNo, Contract);

   @DynamicComponentDependency SHPMNT
   array CustomerOrderPickListArray(SourceRef1) to ShipmentPickList(PickListNo);

}

------------------------------- ENUMERATIONS --------------------------------

enumeration WarehouseTaskStatus {
   value = "Cancelled" {
      identifier = "Cancelled";
      label = "Cancelled";
   }
   value = "Closed" {
      identifier = "Closed";
      label = "Closed";
   }
   value = "Parked" {
      identifier = "Parked";
      label = "Parked";
   }
   value = "Planned" {
      identifier = "Planned";
      label = "Planned";
   }
   value = "Released" {
      identifier = "Released";
      label = "Released";
   }
   value = "Started" {
      identifier = "Started";
      label = "Started";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action StartSelected {
   initialcheck WarehouseTaskInitialCheck(TaskId);
   ludependencies = WarehouseTask, WarehouseWorker;

   parameter TaskId Number;
   parameter WorkerId Text;
   parameter Status Text;
}

action NewTask {
   initialcheck UserAllowedSite(Contract);
   ludependencies = WarehouseTask, WarehouseWorker;

   parameter Contract Text;
   parameter WorkerId Text;
   parameter PrintTask Number;
}

action Complete {
   initialcheck UserAllowedSite(Contract);
   ludependencies = WarehouseTask, WarehouseWorker;

   parameter Contract Text;
   parameter WorkerId Text;
}
@DynamicComponentDependency SHPORD
action CheckMultipleSerialRecords {
   initialcheck none;
   parameter ShopOrderIssueSelection Text;
}
@DynamicComponentDependency SHPORD
action ExecuteShopOrderPickList {
   initialcheck implementation;
   ludependencies = WarehouseTask, WarehouseWorker;

   parameter ShopOrderIssueSelection Text;
   parameter SessionId Number;
}

--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency SHPMNT
function CompleteWarehouseWorkerCustomer Structure(ReportPickStructure) {
   ludependencies = WarehouseTask, WarehouseWorker;
   parameter Selection Text;
}

@DynamicComponentDependency SHPMNT
function GetPickReportDiffSingleListRecords LongText {
   ludependencies = WarehouseTask, WarehouseWorker;
   parameter PickListNo Text;
   parameter ShowDetails Text;
}
//Get values for child Node for Shop Order
@DynamicComponentDependency SHPORD
function GetMyShopOrderIssueStructure Structure(ShopOrderIssueStructure) {
   parameter ShopOrderIssueSelection Text;
}

//Get values for parent Node for Shop Order
@DynamicComponentDependency SHPORD
function GetShopOrderIssueFromParent Text {
   parameter SourceRef1 Text;
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ShopOrderIssueStructure {
   attribute OrderNo Text;
   attribute ReleaseNo Text;
   attribute SequenceNo Text;
   attribute LineItemNo Number;
   attribute PickListNo Text;
   attribute SessionId Number;
   attribute CatchQtyToIssue Number;
   attribute RcptIssueSerialTrackDb Text;
   attribute PartNo Text;
   attribute SerialNo Text;
   attribute Contract Text;
   attribute ConfigurationId Text;
   attribute LocationNo Text;
   attribute LotBatchNo Text;
   attribute EngChgLevel Text;
   attribute WaivDevRejNo Text;
   attribute ActivitySeq Number;
   attribute HandlingUnitId Number;
   attribute QtyToPick Number;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

