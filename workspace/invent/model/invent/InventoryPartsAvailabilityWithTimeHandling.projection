--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-09-08  MUSHLK  MF21R2-2395, Replaced Order_Supply_Demand_API.Get_Total_Forecast() with Level_1_Forecast_Util_API.Get_Ms_Forecast() in all places.
-- 2021-08-25  JaThlk  SC21R2-2371, Added the SHPORD dynamic dependency to CreateBatchBalance action.
--------------------------------------------------------------------------------------

projection InventoryPartsAvailabilityWithTimeHandling;
component INVENT;
layer Core;
description "This API is used to view supply and demand data and related forecast details based on a selectable time period.";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment InventoryPartLov2Selector;
@DynamicComponentDependency SHPORD
include fragment EditShopOrderDialog;
@DynamicComponentDependency SHPORD
include fragment AdjustSoNeedDateToDemandDialog;
include fragment SupplyDemandDetailsCommands;
include fragment LovCommodityGroup2Selector;
include fragment LovCommodityGroup1Selector;
@DynamicComponentDependency SHPORD
include fragment ShopOrdInitialCheck;
@DynamicComponentDependency SHPORD
include fragment ShopOrderPropInitialCheck;
@DynamicComponentDependency PURCH
include fragment PurchaseOrderLineInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartAvailabilityPlanTimeSet for InventoryPartsAvailabilityPlanning;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------
query InventoryPartsAvailabilityPlanning {
   from = "Inventory_Part_Config_Ext";
   keys = PartNo, Contract, ConfigurationId;

   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      required = [true];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "DESCRIPTION";
      label = "Part Description";
      maxlength = 200;
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 50;
      required = [true];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "TYPE_CODE_DB";
      label = "Part Type";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
      fetch = "qty_on_hand";
      insertable = [false];
      updatable = [false];
   }
   attribute QtyMsForecast Number {
      fetch = "TO_NUMBER(NULL)";
      label = "Master Schedule Forecast";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute ForecastBalance Number {
      fetch = "TO_NUMBER(NULL)";
      label = "Forecast Balance";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute QtySupply Number {
      fetch = "TO_NUMBER(NULL)";
      label = "Supply Qty";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute QtyDemand Number {
      fetch = "TO_NUMBER(NULL)";
      label = "Demand Qty";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute QtyAvailable Number {
      label = "Available Qty";
      fetch = "qty_available";
      insertable = [false];
      updatable = [false];
   }
   attribute QtyUsable Number {
      label = "Usable Qty";
      fetch = "qty_usable";
      insertable = [false];
      updatable = [false];
   }
   attribute PartProductFamily Text {
      label = "Product Family";
      fetch = "part_product_family";
   }
   attribute PlannerBuyer Text {
      label = "Planner";
      fetch = "planner_buyer";
   }
   attribute PartProductCode Text {
      label = "Product Code";
      fetch = "part_product_code";
   }
   attribute AccountingGroup Text {
      label = "Accounting Group";
      fetch = "accounting_group";
   }
   attribute PrimeCommodity Text {
      label = "Commodity Group 1";
      fetch = "prime_commodity";
   }
   attribute SecondCommodity Text {
      label = "Commodity Group 2";
      fetch = "second_commodity";
   }
   attribute DemandBalance Number {
      fetch = "TO_NUMBER(NULL)";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   @DynamicComponentDependency MFGSTD
   attribute LowLevel Number {
      label = "Low Level";
      fetch = "Manuf_Part_Attribute_API.Get_Low_Level(contract,part_no)";
   }
   attribute ScrapFactor Number {
      label = "Scrap Factor (%)";
      fetch = "scrap_factor";
   }
   attribute SafetyStock Number {
      label = "Safety Stock";
      fetch = "safety_stock";
   }
   attribute MinimumLotSize Number {
      label = "Minimum Lot Size";
      fetch = "min_order_qty";
   }
   attribute MaximumLotSize Number {
      label = "Maximum Lot Size";
      fetch = "max_order_qty";
   }
   attribute StandardLotSize Number {
      label = "Standard Lot Size";
      fetch = "std_order_size";
   }
   attribute MultipleLotSize Number {
      label = "Multiple Lot Size ";
      fetch = "mul_order_qty";
   }
   attribute ProjectedQtyIndicator Boolean("Yes", "No") {
      fetch = "'FALSE'";
      insertable = [false];
      updatable = [false];
   }
   attribute UoM Text {
      fetch = "unit_meas";
      label = "UoM";
   }
   attribute SafetyLeadTime Text {
      fetch = "safety_lead_time";
   }
   attribute PlanningMethod Text {
      fetch = "planning_method";
   }
   attribute OrderRequisition Enumeration(InventoryPartSupplyType) {
      fetch = "order_requisition_db";
      label = "Default Supply Type";
   }
   attribute OnHandCatchQty Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand(contract,part_no,null,'CATCH')";
      label = "On Hand Catch Qty";
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
   }
   @DynamicComponentDependency MFGSTD
   attribute PlanManufSupOnDueDate Boolean("TRUE", "FALSE") {
      fetch = "Manuf_Part_Attribute_API.Get_Plan_Manuf_Sup_On_Due_D_Db(contract,part_no)";
      label = "Plan Manufacturing Supply on Due Date";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlanner(PlannerBuyer) {
      label = "Planner";
   }
   reference InventoryPartLovRef(Contract, PartNo) to InventoryPartLov2(Contract, PartNo) {
      label = "Part";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PrimeCommodityRef(PrimeCommodity) to LovCommodityGroup1(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to LovCommodityGroup2(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigurationIdRef(PartNo, ConfigurationId) to ConfigurationSpec(PartNo, ConfigurationId) {
      label = "Configuration";
   }
   reference PlanningMethodRef(PlanningMethod) to InvPartPlanningMethod(PlanningMethod) {
      label = "Planning Method";
   }

   array DetailPlanningArray(PartNo, Contract, ConfigurationId) to OrderSupplyDemandDetailPlanning(PartNo, Contract, ConfigurationId);

}

query OrderSupplyDemandDetailPlanning {
   lu = none;
   from = "Order_Supply_Demand_Ext_Uiv";
   keys = PartNo, Contract, ConfigurationId, SysGuid;
   where = "project_id = '*'";

   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute SysGuid Text {
      fetch = "SYS_GUID()";
   }
   attribute ConfigurationId Text {
      fetch = "Configuration_Id";
   }
   attribute DateRequired Date {
      fetch = "TRUNC(date_required)";
      label = "Due Date";
   }
   attribute DateTimeRequired Timestamp {
      fetch = "date_time_required";
      label = "Due Date";
   }
   attribute OrderSupplyDemandType Text {
      fetch = "order_supply_demand_type";
      label = "Type";
      maxlength = 50;
   }
   attribute QtyDemandKey Number {
      fetch = "DECODE(qty_demand, 0, 0, 1)";
   }
   attribute QtySupplyKey Number {
      fetch = "DECODE(qty_supply, 0, 0, 1)";
   }
   attribute OrderSupplyDemandTypeDb Text {
      fetch = "Order_Supply_Demand_Type_API.Encode(ORDER_SUPPLY_DEMAND_TYPE)";
      maxlength = 30;
      editable = [false];
   }
   attribute StatusDesc Text {
      fetch = "status_desc";
      label = "Status";
      maxlength = 35;
   }
   attribute QtySupply Number {
      fetch = "qty_supply";
      label = "Supply Qty";
   }
   attribute QtyDemand Number {
      fetch = "qty_demand";
      label = "Demand Qty";
   }
   attribute QtyReserved Number {
      fetch = "qty_reserved";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtyPegged Number {
      fetch = "qty_pegged";
      label = "Pegged Qty";
   }
   attribute OrderNo Text {
      fetch = "order_no";
      label = "Order Ref 1";
      maxlength = 40;
      format = uppercase;
   }
   attribute LineNo Text {
      fetch = "line_no";
      label = "Order Ref 2";
      maxlength = 50;
      format = uppercase;
   }
   attribute RelNo Text {
      fetch = "rel_no";
      label = "Order Ref 3";
      maxlength = 40;
      format = uppercase;
   }
   attribute LineItemNo Number {
      fetch = "line_item_no";
      label = "Order Ref 4";
   }
   attribute SourceInfo Text {
      fetch = "info";
      label = "Source Information";
      maxlength = 100;
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 100;
   }
   @DynamicComponentDependency SHPORD
   attribute BalanceId Number {
      fetch = "Batch_Balance_Util_API.Get_Balance_Id(order_no,line_no,rel_no,order_supply_demand_type)";
      label = "Balance ID";
   }
   attribute ProjQty Number {
      label = "Projected Qty";
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_           => contract,
                                                                  part_no_            => part_no,
                                                                  configuration_id_   => configuration_id,
                                                                  qty_type_           => 'ONHAND_PLUS_TRANSIT',
                                                                  ownership_type1_db_ => 'CONSIGNMENT',
                                                                  ownership_type2_db_ => 'COMPANY OWNED',
                                                                  location_type1_db_  => 'PICKING',
                                                                  location_type2_db_  => 'F',
                                                                  location_type3_db_  => 'MANUFACTURING',
                                                                  location_type4_db_  => 'SHIPMENT',
                                                                  include_standard_   =>  'TRUE',
                                                                  include_project_    => 'FALSE',
                                                                  project_id_         => '*') + SUM(qty_supply - qty_demand) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }
   attribute ProjQtyWthoutOnHand Number {
      label = "Projected Qty";
      fetch = "SUM(qty_supply - qty_demand) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }

   attribute ProjQtyFirm Number {
      label = "Projected Qty";
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_           => contract,
                                                                  part_no_            => part_no,
                                                                  configuration_id_   => configuration_id,
                                                                  qty_type_           => 'ONHAND_PLUS_TRANSIT',
                                                                  ownership_type1_db_ => 'CONSIGNMENT',
                                                                  ownership_type2_db_ => 'COMPANY OWNED',
                                                                  location_type1_db_  => 'PICKING',
                                                                  location_type2_db_  => 'F',
                                                                  location_type3_db_  => 'MANUFACTURING',
                                                                  location_type4_db_  => 'SHIPMENT',
                                                                  include_standard_   =>  'TRUE',
                                                                  include_project_    => 'FALSE',
                                                                  project_id_         => '*') + SUM(DECODE(firm_db, 'FALSE',0,qty_supply) - DECODE(firm_db, 'FALSE',0,qty_demand)) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }
   attribute ProjQtyFirmWthoutOnHand Number {
      label = "Projected Qty";
      fetch = "SUM(DECODE(firm_db, 'FALSE',0,qty_supply) - DECODE(firm_db, 'FALSE',0,qty_demand)) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }
   attribute ProjFirmSupplQty Number {
      label = "Projected Qty";
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_           => contract,
                                                                  part_no_            => part_no,
                                                                  configuration_id_   => configuration_id,
                                                                  qty_type_           => 'ONHAND_PLUS_TRANSIT',
                                                                  ownership_type1_db_ => 'CONSIGNMENT',
                                                                  ownership_type2_db_ => 'COMPANY OWNED',
                                                                  location_type1_db_  => 'PICKING',
                                                                  location_type2_db_  => 'F',
                                                                  location_type3_db_  => 'MANUFACTURING',
                                                                  location_type4_db_  => 'SHIPMENT',
                                                                  include_standard_   =>  'TRUE',
                                                                  include_project_    => 'FALSE',
                                                                  project_id_         => '*') + SUM(DECODE(firm_db, 'FALSE',0,qty_supply) - qty_demand) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }
   attribute ProjFirmSupplQtyWthoutOnHand Number {
      label = "Projected Qty";
      fetch = "SUM(DECODE(firm_db, 'FALSE',0,qty_supply) - qty_demand) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }
   attribute ProjFirmDemandQty Number {
      label = "Projected Qty";
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_           => contract,
                                                                  part_no_            => part_no,
                                                                  configuration_id_   => configuration_id,
                                                                  qty_type_           => 'ONHAND_PLUS_TRANSIT',
                                                                  ownership_type1_db_ => 'CONSIGNMENT',
                                                                  ownership_type2_db_ => 'COMPANY OWNED',
                                                                  location_type1_db_  => 'PICKING',
                                                                  location_type2_db_  => 'F',
                                                                  location_type3_db_  => 'MANUFACTURING',
                                                                  location_type4_db_  => 'SHIPMENT',
                                                                  include_standard_   =>  'TRUE',
                                                                  include_project_    => 'FALSE',
                                                                  project_id_         => '*') + SUM(qty_supply - DECODE(firm_db, 'FALSE',0,qty_demand)) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }
   attribute ProjFirmDemandQtyWthoutOnhand Number {
      label = "Projected Qty";
      fetch = "SUM(qty_supply - DECODE(firm_db, 'FALSE',0,qty_demand)) OVER (PARTITION BY contract, part_no, configuration_id ORDER BY date_time_required,qty_demand)";
      insertable = [false];
      updatable = [false];
   }


   attribute FirmDb Boolean("TRUE", "FALSE") {
      fetch = "firm_db";
      insertable = [false];
      updatable = [false];
   }
   attribute ClientFalse Boolean("TRUE", "FALSE") {
      fetch = "'FALSE'";
      insertable = [false];
      updatable = [false];
   }

   @DynamicComponentDependency SHPORD
   attribute SupplyCodeSMADb Text {
      label = "Supply Type";
      insertable = [false];
      updatable = [false];
      fetch = "Shop_Material_Alloc_API.Get_Supply_Code_Db(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
   }

   @DynamicComponentDependency SHPORD
   attribute Soobjstate Text {
      label = "Shop Order State";
      insertable = [false];
      updatable = [false];
      fetch = "Shop_Ord_API.Get_Objstate(ORDER_NO,LINE_NO,REL_NO)";
   }

   @DynamicComponentDependency SHPORD
   attribute ConsumptionItemDb Text {
      label = "Consumption Item";
      insertable = [false];
      updatable = [false];
      fetch = "Shop_Material_Alloc_API.Get_Consumption_Item_Db(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
   }

   @DynamicComponentDependency SHPORD
   attribute OrderCodeDb Text {
      label = "Structure Type";
      insertable = [false];
      updatable = [false];
      fetch = "Shop_Material_Alloc_API.Get_Order_Code_Db(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
   }

   @DynamicComponentDependency ORDER
   attribute SupplyCodeCOLDb Text {
      label = "Supply Code";
      insertable = [false];
      updatable = [false];
      fetch = "Customer_Order_Line_API.Get_Supply_Code_Db(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
   }

   @DynamicComponentDependency ORDER
   attribute RelMtrlPlanning Text {
      label = "Release for Mtrl Planning";
      insertable = [false];
      updatable = [false];
      fetch = "Customer_Order_Line_API.Get_Rel_Mtrl_Planning(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
   }
}

---------------------------------- ACTIONS ----------------------------------
@DynamicComponentDependency MFGVIZ
action CreateVizSessionForShopOrdersPlan Number {
   initialcheck implementation;
   parameter TimeHorizon Number;
   parameter Selection LongText;
}

@DynamicComponentDependency MFGVIZ
action CreateVizSessionForShopOrderOperation Number {
   initialcheck implementation;
   parameter TimeHorizon Number;
   parameter Selection LongText;
}

@DynamicComponentDependency SHPORD
action AdjustShopOrderNeedDate {
   initialcheck ShopOrdInitialCheck(OrderNo, ReleaseNo, SequenceNo);
   ludependencies = InventoryPartsAvailabilityPlanning, OrderSupplyDemandDetailPlanning, ShopOrd;
   supportwarnings = [true];
   parameter OrderNo Text;
   parameter ReleaseNo Text;
   parameter SequenceNo Text;
   parameter OnlyFirmSupplies Boolean;
   parameter OnlyFirmDemands Boolean;
   parameter IncludeUsableQty Boolean;
}

@DynamicComponentDependency SHPORD
action AdjustShopOrderLotSize {
   initialcheck ShopOrdInitialCheck(OrderNo, ReleaseNo, SequenceNo);
   ludependencies = InventoryPartsAvailabilityPlanning, OrderSupplyDemandDetailPlanning, ShopOrd;
   supportwarnings = [true];
   parameter OrderNo Text;
   parameter ReleaseNo Text;
   parameter SequenceNo Text;
   parameter OnlyFirmSupplies Boolean;
   parameter OnlyFirmDemands Boolean;
   parameter IncludeUsableQty Boolean;
   parameter StopAnalysisDate Date;
}

@DynamicComponentDependency SHPORD
action CreateBatchBalance Number {
   initialcheck implementation;
   ludependencies = ShopOrd, ShopOrderProp, PurchaseOrderLine, OrderSupplyDemandDetailPlanning;
   parameter Contract   Text;
   parameter PartNo     Text;
   parameter OrderNo    Text;
   parameter ReleaseNo  Text;
   parameter SequenceNo Text;
   parameter SupplyDemandType Text;
}


--------------------------------- FUNCTIONS ---------------------------------
function GetPageSearchContextDefaults Structure(PageSearchContextStructure);

function GetPartsAvailablityWithTime List<Entity(InventoryPartsAvailabilityPlanning)> {
   parameter TimeHorizon Number;
   parameter IncludeOnlyFirmSupplies Boolean;
   parameter IncludeOnlyFirmDemands Boolean;
   parameter IncludeUsableQty Boolean;
   alterattribute QtySupply {
      fetch = "Order_Supply_Demand_API.Get_Total_Supply(contract, part_no, configuration_id, 'TRUE', 'FALSE',
      '*', NULL,(Site_API.Get_Site_Date(contract)+:TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', only_firm_supplies_=> :IncludeOnlyFirmSupplies)";
   }
   alterattribute QtyDemand {
      fetch = "Order_Supply_Demand_API.Get_Total_Demand(contract, part_no, configuration_id, 'TRUE', 'FALSE', '*', NULL, (Site_API.Get_Site_Date(contract)+:TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', 'FALSE', only_firm_demands_ =>:IncludeOnlyFirmDemands)";
   }
   alterattribute DemandBalance {
      fetch = "DECODE(:IncludeUsableQty, 'TRUE',(Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_           => contract,
                                                                                                   part_no_            => part_no,
                                                                                                   configuration_id_   => configuration_id,
                                                                                                   qty_type_           => 'ONHAND_PLUS_TRANSIT',
                                                                                                   ownership_type1_db_ => 'CONSIGNMENT',
                                                                                                   ownership_type2_db_ => 'COMPANY OWNED',
                                                                                                   location_type1_db_  => 'PICKING',
                                                                                                   location_type2_db_  => 'F',
                                                                                                   location_type3_db_  => 'MANUFACTURING',
                                                                                                   location_type4_db_  => 'SHIPMENT',
                                                                                                   include_standard_   =>  'TRUE',
                                                                                                   include_project_    => 'FALSE',
                                                                                                   project_id_         => '*') + Order_Supply_Demand_API.Get_Total_Supply(contract, part_no, configuration_id, 'TRUE', 'FALSE',
      '*', NULL,(Site_API.Get_Site_Date(contract)+:TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', only_firm_supplies_=> :IncludeOnlyFirmSupplies) - Order_Supply_Demand_API.Get_Total_Demand(contract, part_no, configuration_id, 'TRUE', 'FALSE', '*', NULL, (Site_API.Get_Site_Date(contract)+:TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', 'FALSE', only_firm_demands_ =>:IncludeOnlyFirmDemands)),
      (Order_Supply_Demand_API.Get_Total_Supply(contract, part_no, configuration_id, 'TRUE', 'FALSE',
      '*', NULL,(Site_API.Get_Site_Date(contract) + :TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', only_firm_supplies_=> :IncludeOnlyFirmSupplies) - Order_Supply_Demand_API.Get_Total_Demand(contract, part_no, configuration_id, 'TRUE', 'FALSE', '*', NULL, (Site_API.Get_Site_Date(contract) + :TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', 'FALSE', only_firm_demands_ =>:IncludeOnlyFirmDemands)))";

   }

   @DynamicComponentDependency MASSCH
   alterattribute QtyMsForecast {
      fetch = "Level_1_Forecast_Util_API.Get_Ms_Forecast(contract, part_no, '*', 1, (Site_API.Get_Site_Date(contract)+:TimeHorizon))";
   }

   @DynamicComponentDependency MASSCH
   alterattribute ForecastBalance {
      fetch = "Decode(:IncludeUsableQty, 'TRUE', (Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_             => contract,
                                                                                                   part_no_              => part_no,
                                                                                                   configuration_id_     => configuration_id,
                                                                                                   qty_type_             => 'ONHAND_PLUS_TRANSIT',
                                                                                                   expiration_control_   => 'NOT EXPIRED',
                                                                                                   supply_control_db_    => 'NETTABLE',
                                                                                                   ownership_type1_db_   => 'CONSIGNMENT',
                                                                                                   ownership_type2_db_   => 'COMPANY OWNED',
                                                                                                   location_type1_db_    => 'PICKING',
                                                                                                   location_type2_db_    => 'F',
                                                                                                   location_type3_db_    => 'MANUFACTURING',
                                                                                                   location_type4_db_    => 'SHIPMENT',
                                                                                                   include_standard_     => 'TRUE',
                                                                                                   include_project_      => 'FALSE',
                                                                                                   project_id_           => '*')
      + Order_Supply_Demand_API.Get_Total_Supply(contract, part_no, configuration_id, 'TRUE', 'FALSE',
      '*', NULL,(Site_API.Get_Site_Date(contract)+:TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', only_firm_supplies_=> :IncludeOnlyFirmSupplies)
      - Level_1_Forecast_Util_API.Get_Ms_Forecast(contract, part_no, '*', 1, (Site_API.Get_Site_Date(contract)+:TimeHorizon))) , (Order_Supply_Demand_API.Get_Total_Supply(contract, part_no, configuration_id, 'TRUE', 'FALSE',
      '*', NULL,(SYSDATE+:TimeHorizon), 'ORDER_SUPPLY_DEMAND_EXT', only_firm_supplies_=> :IncludeOnlyFirmSupplies)
      - Level_1_Forecast_Util_API.Get_Ms_Forecast(contract, part_no, '*', 1, (Site_API.Get_Site_Date(contract)+:TimeHorizon))))";
   }
   alterattribute ProjectedQtyIndicator {
      fetch = "Order_Supply_Demand_API.Negative_Projected_Qty_Exists(contract, part_no, configuration_id, '*', :IncludeOnlyFirmSupplies, :IncludeOnlyFirmDemands, :IncludeUsableQty, (Site_API.Get_Site_Date(contract) + :TimeHorizon))";
   }

   basedon InventoryPartAvailabilityPlanTimeSet;
   where = ":TimeHorizon <= 7";
}

-------------------------------- STRUCTURES ---------------------------------
structure PageSearchContextStructure {
   attribute TimeHorizon Number;
   attribute TimeHorizonDate Date;
   attribute SysDate Date;

   attribute IncludeOnlyFirmSupplies Boolean("TRUE", "FALSE") {
      label = "Include Only Firm Supplies";
      required = [true];
   }
   attribute IncludeOnlyFirmDemands Boolean("TRUE", "FALSE") {
      label = "Include Only Firm Demands";
      required = [true];
   }
   attribute IncludeUsableQty Boolean("TRUE", "FALSE") {
      label = "Include Usable Qty in Balance";
      required = [true];
   }
}
--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------