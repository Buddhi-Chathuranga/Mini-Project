--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-11-30  NaLrlk  PR2020R1-367, Removed where condition for GetConnectedParts() function.
--  2020-07-09  AyAmlk  PR2020R1-53, Moved common code in AssortmentHandling and ProcurementCategoryAssortmentHandling to AssortmentCommonObjects fragment.
--  2020-06-25  AyAmlk  PR2020R1-178, Corrected the maxlength of description columns so the entities populated without an error.
--  2020-03-16  AyAmlk  PR2020R1-2, STRATEGIC_PROCUREMENT: Added ProcCategoryAssortment attribute in AssortmentStructure.
--  2019-07-03  MeAblk  SCUXXW4-22545, Created action CreateAssortmentStructure and structure NewAssortmentStructureStructure.
--  2019-05-19  bajelk  SCUXXW4-19062, Added FilterAddedParts action, SelectionList attribute inside ConnectPartsVirtual and ConnectPartsVirtual entityset to implement Part List dialog.
--  2019-05-05  bajelk  SCUXXW4-17990, Added AssortmentRef referance in CopyAssortmentStructureStructure to Copy Campaign dialog.
--  2019-04-30  DaZase  SCUXXW4-19601, Added initialcheck on unbound actions.
--  2019-04-25  ChFolk  SCUXXW4-18402, Modified GetConnectedParts by adding where clause to avoid method call in plsvc.
--  2019-04-11  ChFolk  SCUXXW4-18403, Modified GetAssortmentNodes by adding where clause to avoid method call in plsvc.
--  2019-01-03  bajelk  SCUXXW4-14948, Added SalesLimitationsForOtherAssortmentsExist in Valid for Customers field
--  2018-12-06  bajelk  SCUXXW4-6632, Converted from tbwAssortmentHistory using MTG Version: 1.32 added
--                      Added Assortment Details and Assortment History Details tab windows.
--  2018-11-27  KoDelk  SCUXXW4-5961, Converted from frmWarehouseMgrTaskPlanning using MTG Version: 1.32
---------------------------------------------------------------------------------
projection AssortmentHandling;
component INVENT;
layer Core;
description "Manage AssortmentStructure";
category Users;


--------------------------------- FRAGMENTS ---------------------------------
include fragment AssortmentCommonObjects;
include fragment CreatePartsPerSiteDialog;
@DynamicComponentDependency ORDER
include fragment CustomerAssortmentStructTab;
include fragment CreateGtinAutomaticallyAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset IsoUnits for IsoUnit;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AssortmentStructure {
   array AssortmentRootNodeArray(AssortmentId, AssortmentId) to AssortmentNode(AssortmentId, AssortmentNodeId);
   array AssortmentStructureLevelArray(AssortmentId) to AssortmentStructureLevel(AssortmentId);
   @DynamicComponentDependency ORDER
   array CustomerAssortmentStructArray(AssortmentId) to CustomerAssortmentStruct(AssortmentId);
   array AssortmentHistoryArray(AssortmentId) to AssortmentHistory(AssortmentId);
}

@Override
entity AssortmentHistory {
   crud = Read;
   from = "assortment_history";
   exec = "ASSORTMENT_HISTORY_API";
   keys = AssortmentId, HistoryNo {
      where = "ASSORTMENT_ID = :AssortmentId and HISTORY_NO = :HistoryNo";
   }
   use attributes = MessageText, DateCreated, UserId;
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute HistoryNo Number {
      fetch = "history_no";
      label = "History No";
      required = [true];
      editable = [ETag = null];
   }
   attribute MessageText Text {
      fetch = "message_text";
      label = "Info";
      maxlength = 2000;
      required = [true];
   }
   attribute DateCreated Date {
      fetch = "date_created";
      label = "Modified";
      required = [true];
   }
   attribute UserId Text {
      fetch = "user_id";
      label = "By";
      maxlength = 100;
      required = [true];
   }
}

@Override
entity AssortmentStructureLevel {
   use attributes = Name;
   attribute StructureLevel Number {
      fetch = "structure_level";
      label = "Level";
      required = [true];
      editable = [ETag = null];
   }
   attribute Name Text {
      fetch = "name";
      label = "Level Name";
      maxlength = 200;
      required = [true];
   }
}
------------------------------- ENUMERATIONS --------------------------------
enumeration ConnectedPartTypeEnum {
   enumerationtype = Custom;
   value = "SELECTED" {
      identifier = "SELECTED";
      label = "Connected Parts for Selected Node";
   }
   value = "ALL" {
      identifier = "ALL";
      label = "Connected Parts for All Nodes";
   }
}

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
-- STRATEGIC_PROCUREMENT: Passed ProcCategoryAssortment.
action CreateAssortmentStructure {
   initialcheck none;
   ludependencies = AssortmentStructure;
   supportwarnings = [true];

   parameter AssortmentId Text;
   parameter Description  Text;
   parameter ClassificationStandard Text;
   parameter Notes Text;
   parameter ProcCategoryAssortment Boolean;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetDefaultSeachContext Structure(AssortmentContextSearchStructure);

function GetConnectedParts List<Entity(PartCatalog)> {
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter PartSelection Enumeration(ConnectedPartTypeEnum);
   basedon PartCatalogSet;
}

function GetAssortmentNodes List<Entity(AssortmentNode)> {
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter PartNo Text;
   where = "(parent_node = :AssortmentNodeId OR :AssortmentNodeId = '*')
   AND assortment_id = :AssortmentId
   AND (CASE
          WHEN :PartNo IS NOT NULL AND Assortment_Node_API.Check_Part_Exist_As_Child(:AssortmentId, assortment_node_id, :PartNo) = 1 THEN 1
          WHEN :PartNo IS NULL THEN 1
          ELSE 0 END) = 1";
}

-------------------------------- STRUCTURES ---------------------------------
structure AssortmentContextSearchStructure {
   attribute PartViewType Enumeration(ConnectedPartTypeEnum) {
      required = [true];
   }
   attribute PartNo Text;
}

structure NewAssortmentStructureStructure {
   attribute AssortmentId Text {
      label = "Assortment";
      maxlength = 100;
      format = uppercase;
   }
   attribute Description Text;
   attribute ClassificationStandard Text;
   attribute Notes Text;
   -- STRATEGIC_PROCUREMENT: start
   attribute ProcCategoryAssortment Boolean {
      label = "Procurement Category Assortment";
      required = [true];
   }
   -- STRATEGIC_PROCUREMENT: end

   reference ClassificationStandardRef(ClassificationStandard) to ClassificationStandard(ClassificationStandard) {
      label = "Classification Standard";
   }
}

--------------------------------- VIRTUALS ----------------------------------
@Override
virtual AssortmentVirtual {

   array CreatePartVirtualArray(AssortmentId, ParentNodeId) to CreatePartVirtual(AssortmentId, ParentNodeId);

   action CreatePartNode {
      ludependencies = AssortmentStructure, AssortmentNode, PartCatalog;
   }
}

virtual CreatePartVirtual {
   attribute AssortmentId Text;
   attribute ParentNodeId Text;
   attribute PartNo Text {
      format = uppercase;
      required = [true];
   }
   attribute Description Text {
      required = [true];
   }
   attribute LotTrackingCode Enumeration(PartLotTracking) {
      label = "Log/Batch Tracking";
      required = [true];
   }
   attribute ReceiptIssueSerialTrackDb Boolean {
      label = "Serial Tracking at Receipt and Issue";
      required = [true];
   }
   attribute SerialTrackingCodeDb Enumeration(PartSerialTracking) {
      label = "Inventory Serial Tracking";
      required = [true];
   }
   attribute SerialRule Enumeration(PartSerialRule) {
      required = [true];
   }
   attribute EngSerialTrackingCodeDb Enumeration(PartSerialTracking) {
      label = "After Delivery Serial Tracking";
      required = [true];
   }
   attribute UnitCode Text {
      required = [true];
   }
   attribute CatchUnitEnabledDb Boolean {
      label = "Catch UoM Enabled";
      required = [true];
   }
   attribute InputUnitMeasGroupId Text;
   attribute StdNameId Number;
   attribute ConfigurableDb Enumeration(PartConfiguration) {
      label = "Configurable";
      required = [true];
   }
   attribute ConditionCodeUsageDb Enumeration(ConditionCodeUsage) {
      label = "Allow Condition Code";
      required = [true];
   }
   attribute InfoText Text;
   attribute LotQuantityRule Enumeration(LotQuantityRule) {
      required = [true];
   }
   attribute SubLotRule Enumeration(SubLotRule) {
      required = [true];
   }
   attribute PartMainGroup Text;
   attribute MultilevelTrackingDb Enumeration(MultilevelTracking) {
      label = "Multi Level Tracking";
      required = [true];
   }
   attribute GtinSeries Enumeration(GtinSeries) {
      label = "GTIN Series";
   }
   attribute GtinNo Text {
      label = "GTIN No";
   }
   attribute CreateAutomatically Boolean {
      required = [true];
   }
   attribute NetWeight Number;
   attribute NetWeightUom Text {
      label = "Uom for Net Weight";
   }
   attribute NetVolume Number;
   attribute NetVolumeUom Text {
      label = "Uom for Net Volume";
   }
   attribute FreightFactor Number;

   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "Unit Code";
   }
   reference InputUnitMeasGroupIdRef(UnitCode, InputUnitMeasGroupId) to InputUomGroupLov(UnitCode, InputUnitMeasGroupId) {
      label = "Default Input UoM Group";
   }
   reference StandardNamesRef(StdNameId) to StandardNames(StdNameId) {
      label = "Standard Name";
   }
   reference EngPartMainGroupRef(PartMainGroup) to EngPartMainGroup(PartMainGroup) {
      label = "Part Main Group";
   }
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

