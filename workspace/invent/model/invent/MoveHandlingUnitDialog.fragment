---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2020-05-21  Aabalk  SC2020R1-1686, Added WarehouseId as a parameter to the MoveHandlingUnitDialog. Added ShipLocationNoFilter when moving
-- 2020-05-21          between shipment inventories to filter locations based on whether the warehouse is remote or not.
-- 2019-05-20  DaZase  SCUXXW4-19671, Added initialcheck to all unbounded actions.
-- 2018-12-14  SBalLK  SCUXXW4-4719, Added ludependancy for HandlingUnitSourceInShipmentInventory object in MoveShipmentInventory and
-- 2018-12-14          ReturnShipmentInventory actions to refresh shipmnet related windows.
-- 2018-12-14  ChFolk  SCUXXW4-5594, Added enable condition for MoveHandlingUnitOkCommand.
-- 2018-09-07  MWerse  SCUXXW4-5594, Converted from dlgMoveHandlingUnit using MTG Version: 1.28
---------------------------------------------------------------------------------

fragment MoveHandlingUnitDialog;
component INVENT;
layer Core;
description "Use this dialog to move handling units.";

include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation5Selector;
include fragment InventoryLocation7Selector;
include fragment InventoryLocation11Selector;

----------------------------- CLIENT FRAGMENTS ------------------------------
---------------------------------- DIALOGS ----------------------------------
dialog MoveHandlingUnitDialog for MoveHandlingUnitStructure {
   label = "${DialogLabel}";
   input(HandlingUnitIdList, Contract, FromLocationTypeDb, Action, WarehouseId) {
      command MoveHandlingUnitInitCommand;
   }
   group MoveHandlingUnitGroup;

   commandgroup ButtonCmdGroup {

      command MoveHandlingUnitOkCommand;
      command Cancel;
   }
}

--------------------------------- COMMANDS ----------------------------------
command MoveHandlingUnitOkCommand {
   label = "Ok";
   enabled = [Contract != null and LocationNo != null and Destination != null];

   execute {
      if [FromLocationTypeDb = "SHIPMENT"] {
         if [Action = "RETURN"] {
            @DynamicComponentDependency SHPMNT
            call ReturnShipmentInventory(HandlingUnitIdList, Contract, LocationNo, MoveComment);
         }
         if [Action = "MOVE"] {
            @DynamicComponentDependency SHPMNT
            call MoveShipmentInventory(HandlingUnitIdList, Contract, LocationNo, MoveComment);
         }
      }
      else {
         call MoveInventory(HandlingUnitIdList, Contract, LocationNo, Destination, MoveComment);
      }
      exit OK;
   }
}

command MoveHandlingUnitInitCommand {
   execute {
      call GetDefaultDestination() into Destination;
      if [FromLocationTypeDb = "SHIPMENT" and Action = "RETURN"] {
         set DialogLabel = "Return Handling Unit";
      }
      else {
         set DialogLabel = "Move Handling Unit";
      }
   }
}

---------------------------------- GROUPS -----------------------------------
group MoveHandlingUnitGroup for MoveHandlingUnitStructure {
   label = "";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      editable = [FromLocationTypeDb != "QA" and FromLocationTypeDb != "ARRIVAL"
      and not(FromLocationTypeDb = "SHIPMENT" and Action = "MOVE")
      and not(FromLocationTypeDb = "SHIPMENT" and Action = "RETURN")];
   }
   field LocationNo {

      lovswitch {
         when [FromLocationTypeDb = "SHIPMENT" and Action = "RETURN"] {
            lov LocationNo5Ref with ReferenceInventoryLocation5Selector;
         }
         when [FromLocationTypeDb = "SHIPMENT" and Action = "MOVE"] {
            lov LocationNo7Ref with ReferenceInventoryLocation5Selector using ShipLocationNoFilter(Contract, WarehouseId);
         }
         when [FromLocationTypeDb = "QA" or FromLocationTypeDb = "ARRIVAL"] {
            lov LocationNo11Ref with ReferenceInventoryLocation5Selector;
         }
         when [true] {
            lov LocationNo5Ref with ReferenceInventoryLocation5Selector;
         }
      }
   }
   field Destination {

      editable = [not(FromLocationTypeDb = "SHIPMENT" and Action = "MOVE") and not(FromLocationTypeDb = "SHIPMENT" and Action = "RETURN")];
   }
   field MoveComment;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
-------------------------------- STRUCTURES ---------------------------------
structure MoveHandlingUnitStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      format = uppercase;
   }
   attribute LocationNo Text {
      label = "Location No";
      maxlength = 100;
      format = uppercase;
   }
   attribute MoveComment Text {
      label = "Move Comment";
      maxlength = 100;
   }
   attribute Destination Enumeration(InventoryPartDestination) {
      label = "Destination";
      required = [true];
   }
   attribute FromLocationTypeDb Text;
   attribute HandlingUnitIdList Text;
   attribute Action Text;
   attribute DialogLabel Text;
   attribute WarehouseId Text;

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference LocationNo5Ref(Contract, LocationNo) to InventoryLocation5(Contract, LocationNo) {
      label = "Location No";
   }
   reference LocationNo7Ref(Contract, LocationNo) to InventoryLocation7(Contract, LocationNo) {
      label = "Location No";
   }
   reference LocationNo11Ref(Contract, LocationNo) to InventoryLocation11(Contract, LocationNo) {
      label = "Location No";
   }
}

---------------------------------- ACTIONS ----------------------------------
action MoveInventory {
   initialcheck UserAllowedSite(Contract);
   ludependencies = HandlingUnit;
   parameter HandlingUnitIdList Text;
   parameter Contract Text;
   parameter LocationNo Text;
   parameter Destination Text;
   parameter MoveComment Text;
}

@DynamicComponentDependency SHPMNT
action MoveShipmentInventory {
   initialcheck UserAllowedSite(Contract);
   ludependencies = HandlingUnit, HandlingUnitSourceInShipmentInventory;
   parameter HandlingUnitIdList Text;
   parameter Contract Text;
   parameter LocationNo Text;
   parameter MoveComment Text;
}

@DynamicComponentDependency SHPMNT
action ReturnShipmentInventory {
   initialcheck UserAllowedSite(Contract);
   ludependencies = HandlingUnit, HandlingUnitSourceInShipmentInventory;
   parameter HandlingUnitIdList Text;
   parameter Contract Text;
   parameter LocationNo Text;
   parameter MoveComment Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetDefaultDestination Text;

function ShipLocationNoFilter List < Entity(InventoryLocation7) > {
   parameter Contract Text;
   parameter Warehouse Text;
   where = " ((((Warehouse_API.Get_Remote_Warehouse_Db(contract, warehouse) = 'FALSE') OR
             (warehouse = :Warehouse AND WAREHOUSE_API.GET_REMOTE_WAREHOUSE_DB(contract, warehouse) = 'TRUE'))
             AND (contract = :Contract)) OR (:Contract IS NULL OR :Warehouse IS NULL))";
}