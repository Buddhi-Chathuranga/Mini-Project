---------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------------------------
-- 2019-07-26  ChFolk  SCUXXW4-22798, Modified project information and removed some attributes with get methods to increase performance.
-- 2018-10-19  JaThlk  SCUXXW4-6777, Implemented ResolveShortagesCommand.
-- 2018-06-18  JaThlk  SCUXXW4-11617, Included UserAllowedSiteLovSelector fragment instead of UserAllowedSiteLov.
-- 2018-04-09  JaThlk  SCUXXW4-6777, Converted from tbwCountReportParts using MTG Version: 1.15
---------------------------------------------------------------------------------------------------

projection UnconfirmedCountingReportLinesHandling;
component INVENT;
layer Core;
description "Use this API to view the parts being inventory-counted and the counting report on which they appear.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLov4;
include fragment InventoryPartInStockDelivSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset UnconfirmedCountingReportLines for UnconfirmedCountinReportLine;

---------------------------------- QUERIES ----------------------------------
query UnconfirmedCountinReportLine {
   from = "counting_report_line2";
   lu = CountingReportLine;
   keys = InvListNo, Seq {
      where = "INV_LIST_NO = :InvListNo and SEQ = :Seq ";
   }
   attribute InvListNo Text {
      label = "Count Report No";
      editable = [false];
   }
   attribute Contract Text;
   attribute PartNo Text;

   attribute Seq Number {
      label = "Seq No";
      editable = [false];
   }
   attribute LocationNo Text;
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
   }
   attribute SerialNo Text;
   attribute ConfigurationId Text {
      label = "Configuration ID";
      editable = [false];
   }
   attribute Frozen Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Freeze_Flag(CONTRACT, PART_NO, '*', LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Frozen";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Availability_Control_Id(CONTRACT, PART_NO, '*', LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Availability Control ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute ProjectId Text {
      editable = [false];
      format = uppercase;
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
   }
   attribute TopParentHandlingUnitId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute PartShortageFlag Text {
      fetch = "Inventory_Part_API.Get_Shortage_Flag(CONTRACT,PART_NO)";
   }
   attribute SystemShortageFlag Text {
      fetch = "Mpccom_System_Parameter_API.Get_Parameter_Value1('SHORTAGE_HANDLING')";
   }
   attribute Shortage Text {
      fetch = "Inventory_Part_Shortage_API.Decode('Y')";
   }
   attribute ShortageExist Number {
      fetch = "Shortage_Demand_API.Shortage_Exists(CONTRACT,PART_NO)";
      label = "Shortage Exist";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner";
      maxlength = 2000;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq);
   reference PartNoRef(Contract, PartNo) to InventoryPartLov4(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference HandlingUnitIdRef(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) to InventoryPartInStockDeliv(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
}


