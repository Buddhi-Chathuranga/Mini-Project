----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-02-18  ChFolk  SCUXXW4-16466, Added ludependencies for PackingInstruction.
-- 2019-01-11  ChFolk  SCUXXW4-6367, Converted frmPackingInstruction using MTG Version: 1.34.
----------------------------------------------------------------------------------------------------------
projection PackingInstructionHandling;
component INVENT;
layer Core;
description "Use this API to enter and view packing instructions. It can also be used to add one or several handling unit accessories per node or to add characteristics to the packing instruction";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PackingInstructionSet for PackingInstruction;
entityset PackingInstructionNodeSet for PackingInstructionNode;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PackingInstruction {
   crud = Create, Read, Update, Delete;
   from = "packing_instruction";
   exec = "PACKING_INSTRUCTION_API";
   ludependencies = PackingInstructionNode;
   keys = PackingInstructionId {
      where = "PACKING_INSTRUCTION_ID = :PackingInstructionId";
   }
   attribute PackingInstructionId Text {
      fetch = "packing_instruction_id";
      label = "Packing Instruction ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 200;
      required = [true];
      editable = [true];

   }
   attribute NodeExist Number {
      fetch = "Packing_Instruction_Node_API.Node_Exist(packing_instruction_id)";
      maxlength = 2000;
      editable = [false];
   }
   array PackingInstructionDetailsArray(PackingInstructionId) to PackingInstructionNode(PackingInstructionId);
   action RemoveCompleteStructure {
      ludependencies = PackingInstructionNode;
   }
}

@Override
entity PackingInstructionNode {
   crud = Create, Read, Update, Delete;
   from = "packing_instruction_node";
   exec = "PACKING_INSTRUCTION_NODE_API";
   ludependencies = PackingInstructionNode;

   keys = PackingInstructionId, NodeId {
      where = "PACKING_INSTRUCTION_ID = :PackingInstructionId and NODE_ID = :NodeId";
   }
   attribute LevelNo Text {
      fetch = "level_no";
      label = "Level No";
      maxlength = 100;
      editable = [false];
   }
   attribute PackingInstructionId Text {
      fetch = "packing_instruction_id";
      label = "Packing Instruction ID";
      maxlength = 50;
      required = [true];
      editable = [false];

   }
   attribute NodeId Number {
      fetch = "node_id";
      label = "Node ID";
      editable = [false];
   }
   attribute ParentNodeId Number {
      fetch = "parent_node_id";
      label = "Parent Node ID";
      required = [false];
      editable = [true];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 25;
      required = [true];
      format = uppercase;
   }
   attribute Quantity Number {
      fetch = "quantity";
      label = "No of Units";
      required = [true];
   }
   attribute AccessoriesExist Boolean("TRUE", "FALSE") {
      fetch = "Fnd_Boolean_API.Encode(Pack_Instr_Node_Accessory_API.Accessory_Exist(packing_instruction_id, node_id))";
      label = "Accessories Exist";
      editable = [false];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      fetch = "generate_sscc_no_db";
      label = "Generate SSCC";
   }
   attribute PrintLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_label_db";
      label = "Print Handling Unit Label";
   }
   attribute NoOfHandlingUnitLabels Number {
      fetch = "no_of_handling_unit_labels";
      label = "No of Handling Unit Labels";
      required = [true];
   }
   attribute PrintContentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_content_label_db";
      label = "Print Handling Unit Content Label";
   }
   attribute NoOfContentLabels Number {
      fetch = "no_of_content_labels";
      label = "No of Handling Unit Content Labels";
      required = [true];
   }
   attribute PrintShipmentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_shipment_label_db";
      label = "Print Shipment Handling Unit Label";
   }
   attribute NoOfShipmentLabels Number {
      fetch = "no_of_shipment_labels";
      label = "No of Shipment Handling Unit Labels";
      required = [true];
   }
   attribute MixOfPartNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_part_no_blocked_db";
      label = "Mix of Part Numbers Blocked";
   }
   attribute MixOfCondCodeBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_cond_code_blocked_db";
      label = "Mix of Condition Codes Blocked";
   }
   attribute MixOfLotBatchBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_lot_batch_blocked_db";
      label = "Mix of Lot Batch Numbers Blocked";
   }
   reference ParentNodeIdRef(PackingInstructionId, ParentNodeId) to PackingInstructionNode(PackingInstructionId, NodeId) {
      label = "Parent Node ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   array PackingInstAccessoriesArray(PackingInstructionId, NodeId) to PackingInstructionAccessories(PackingInstructionId, NodeId);
}
@Override
entity PackingInstructionAccessories using PackInstrNodeAccessory {
   crud = Create, Read, Update, Delete;
   from = "pack_instr_node_accessory";
   exec = "PACK_INSTR_NODE_ACCESSORY_API";
   keys = PackingInstructionId, NodeId, HandlingUnitAccessoryId {
      where = "PACKING_INSTRUCTION_ID = :PackingInstructionId and NODE_ID = :NodeId and HANDLING_UNIT_ACCESSORY_ID = :HandlingUnitAccessoryId";
   }
   use attributes = Quantity;
   attribute PackingInstructionId Text {
      fetch = "packing_instruction_id";
      label = "Packing Instruction ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute NodeId Number {
      fetch = "node_id";
      label = "Node ID";
      required = [false];
      editable = [ETag = null];
   }
   attribute HandlingUnitAccessoryId Text {
      fetch = "handling_unit_accessory_id";
      label = "Handling Unit Accessory ID";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Quantity Number {
      fetch = "quantity";
      label = "Quantity";
      required = [true];
   }
   reference HandlingUnitAccessoryIdRef(HandlingUnitAccessoryId) to HandlingUnitAccessory(HandlingUnitAccessoryId);
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CreatePackingInstruction {
   initialcheck none;
   parameter PackingInstructionId Text;
   parameter Description Text;
   supportwarnings = [true];
}

action CreateSubHandlingUnit {
   initialcheck PackingInstructionInitialCheck(PackingInstructionId);
   parameter PackingInstructionId Text;
   parameter Description Text;
   parameter ParentNodeId Number;
   parameter HandlingUnitTypeId Text;
   parameter Quantity Number;
   supportwarnings = [true];
   ludependencies = PackingInstructionNode;
   ludependencies = PackingInstruction;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetParentPackingDetails List<Entity(PackingInstructionNode)> {
   where = "parent_node_id IS NULL";
}

function GetPackingDetails List<Entity(PackingInstructionNode)> {
   parameter PackingInstructionId Text;
   parameter NodeId Number;
   basedon PackingInstructionNodeSet;
   ludependencies = PackingInstructionNode;
}

function GetHandlingUnitTypeDetails Structure(HandlingUnitTypeDetailStructure) {
   parameter HandlingUnitTypeId Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure PackingInstrctionStructure {
   attribute PackingInstructionId Text {
      label = "Packing Instruction ID";
      format = uppercase;
      required = [true];
   }
   attribute Description Text {
      required = [true];
   }
}

structure HandlingUnitTypeDetailStructure {
   attribute GenerateSsccNoDb Boolean;
   attribute PrintLabelDb Boolean;
   attribute NoOfHandlingUnitLabels Number;
   attribute PrintContentLabelDb Boolean;
   attribute NoOfContentLabels Number;
   attribute PrintShipmentLabelDb Boolean;
   attribute NoOfShipmentLabels Number;
}

structure SubHandlingUnitStructure {
   attribute PackingInstructionId Text;
   attribute Description Text;
   attribute ParentNodeId Number {
      label = "Parent Node ID";
   }
   attribute HandlingUnitTypeId Text {
      format = uppercase;
   }
   attribute Quantity Number {
      label = "No of Units";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

