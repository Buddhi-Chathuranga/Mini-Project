-----------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------
-- 2021-10-28  DigPlk  SC21R2-2886, Replaced the functionality of IdentifySerialsInLocAssistant with IdentifySerialsInLocRepeatAssistant.
-- 2021-02-19  WaSalk  SC2020R1-12572, Removed LocalizationControlCenterHandler fragment and InitLocalizationFunctionalitiesCommand
-- 2021-02-19          and added EnabledLccParams to support LCC concept.
-- 2020-03-10  WaSalk  GESPRING20-3756, Added DeliveryReasonId to copyoncruddefault and IssuedQty validate command.
-- 2020-02-14  WaSalk  GeSPRING20-1793, Added LocalizationControlCenterHandler fragment, InitLocalizationFunctionalitiesCommand,
-- 2020-02-14          and lov DelivReasonIdRef to enable WarehouseJournal localization.
-- 2019-05-29  YasMlk  SCUXXW4-21268, Concatenated IDs with related descriptions.
-- 2019-05-27  YasMlk  SCUXXW4-21268, Changed edit mode and Save mode to default.
-- 2019-03-12  JaThlk  SCUXXW4-17128, Added SessionId as an in parameter in IdentifySerialsInLocationAssistant.
-- 2019-02-14  Milise  SCUXXW4-6332, Added Savemode Buffer.
-- 2018-12-31  Sudelk  SCUXXW4-6332, changed the edit mode in the List.
-- 2018-12-24  JaThlk  SCUXXW4-6332, Implemented issuing inventory parts.
-- 2018-11-15  Mwerse  SCUXXW4-6330, Converted from frmIssue using MTG Version: 1.30
------------------------------------------------------------------------------------

client IssueInventoryPart;
component INVENT;
layer Core;
projection IssueInventoryPart;
include fragment InventoryPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment IdentifySerialsInLocationAssistant;
include fragment PrePostingWithoutSourceAssistant;

warningsenabled = InventoryPartConfig;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry IssueInventoryPartNavEntry parent InventNavigator.WarehouseManagementPartHandling at index 300 {
      label = "Issue Inventory Part";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using InventoryPartConfigSet {
   label = "Issue Inventory Part";
   startupmode = search;
// label = "Issue Inventory Part : ${PartNo} ${PartDescription}";
   selector InventoryPartConfigSelector;
   group IssueGroup;
   //group GeneralGroup;
   list PartLocList(PartLocArray) {
      -- gelr: warehouse_journal, begin
      copyoncruddefault(DeliveryReasonId) to(DeliveryReasonId);
      -- gelr: warehouse_journal, end
   }
   //If tabs are created place this list under tab "General"
   commandgroup CommandGroupCmdGroup {

      command InventoryPartAvailabilityPlanCommand;
      @DynamicComponentDependency CFGCHR
      command ViewConfigurationCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command InventoryPartAvailabilityPlanCommand for InventoryPartConfig {
   label = "Inventory Part Availability Planning";
   enabled = [true];
   execute {
      navigate "page/InventoryPartAvailabilityPlanning/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ProjectId eq '*' and ConfigurationId eq $[ConfigurationId]";

   }
}
@DynamicComponentDependency CFGCHR
command ViewConfigurationCommand for InventoryPartConfig {
   label = "View Configuration";
   enabled = [ConfigurationId != "*"];
   execute {
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarMode:$[Mode],
                                                                                                   VarPartNo:$[PartNo],
                                                                                                   VarConfigurationId:$[ConfigurationId],
                                                                                                   VarSupplySite:$[Contract]}";
   }
}
command PrintConditionTagCommand for InventoryPartInStock {
   label = "Print Condition Tag";
   mode = SelectedRecords;
   variable ResultKeyVar {
      type = Text;
   }
   enabled = [count(*, ConditionCode != null) > 0];
   bulkexecute {
      call GetReportResultKeyList(Selection) into ResultKeyVar;
      printdialog ResultKeyVar;
   }
}
command PreProcessCommand for InventoryPartInStock {
   variable SessionIdTemp {
      type = Number;
   }
   variable ReceiptIssueSerialTrackDbVar {
      type = Text;
   }
   variable SerialNoVar {
      type = Text;
   }
   variable PartOwnershipDbVar {
      type = Text;
   }
   variable CodeAVar {
      type = Text;
   }
   variable CodeBVar {
      type = Text;
   }
   variable CodeCVar {
      type = Text;
   }
   variable CodeDVar {
      type = Text;
   }
   variable CodeEVar {
      type = Text;
   }
   variable CodeFVar {
      type = Text;
   }
   variable CodeGVar {
      type = Text;
   }
   variable CodeHVar {
      type = Text;
   }
   variable CodeIVar {
      type = Text;
   }
   variable CodeJVar {
      type = Text;
   }

   execute {
      if [IssuedQty > AvailableQty] {
         error("The quantity issued for part ${PartNo} on site ${Contract} at location ${LocationNo} should not be greater than the available quantity.");
         exit CANCEL;
      }

      set PartOwnershipDbVar = PartOwnershipDb;

      if [PartOwnershipDbVar = "COMPANY OWNED" or PartOwnershipDbVar = "CONSIGNMENT"] {
         call GetCodepartsSettings("M110", parent.Contract) into CodepartsSettingsVar;
         if [CodepartsSettingsVar.AllCodepartsCompiled != "DISABLED"] {

            assistant PrePostingWithoutSourceAssistant(parent.Contract, CodepartsSettingsVar.AccountNo, CodepartsSettingsVar.CodenoB, CodepartsSettingsVar.CodenoC,
            CodepartsSettingsVar.CodenoD, CodepartsSettingsVar.CodenoE, CodepartsSettingsVar.CodenoF, CodepartsSettingsVar.CodenoG,
            CodepartsSettingsVar.CodenoH, CodepartsSettingsVar.CodenoI, CodepartsSettingsVar.CodenoJ)
            into(CodeAVar, CodeBVar, CodeCVar, CodeDVar, CodeEVar, CodeFVar, CodeGVar, CodeHVar, CodeIVar, CodeJVar) {
               when OK {
                  set AccountNo = CodeAVar;
                  set CostCenter = CodeBVar;
                  set CodeC = CodeCVar;
                  set CodeD = CodeDVar;
                  set ObjectNo = CodeEVar;
                  set ProjectNo = CodeFVar;
                  set CodeG = CodeGVar;
                  set CodeH = CodeHVar;
                  set CodeI = CodeIVar;
                  set CodeJ = CodeJVar;
               }
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
      set ReceiptIssueSerialTrackDbVar = ReceiptIssueSerialTrackDb;
      set SerialNoVar = SerialNo;

      if [ReceiptIssueSerialTrackDbVar = "TRUE" and SerialNoVar = "*"] {
         call GetRecordsWithSessionId(parent.Contract, parent.PartNo, parent.ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, IssuedQty, IssuedCatchQty, NULL, NULL, NULL) into IdentifySerialsRecStructure;
         assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
            when OK {
               if [SessionSelection != null and SessionSelection != ""] {
                  set PartTrackSessionId = IdentifySerialsRecStructure.SessionId;
               }
               refresh;
            }
            when CANCEL {
               exit CANCEL;
            }
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryPartConfigSelector for InventoryPartConfig {
   label = "${PartNo} - ${PartNoRef.Description} - ${Contract} - ${ConfigurationId}";
   static PartNo;
   static PartNoRef.Description;
   static Contract;
   static ConfigurationId;
}

---------------------------------- GROUPS -----------------------------------
group IssueGroup for InventoryPartConfig {
   label = "";
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      label = "Part";
      description = PartNoRef.Description;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field Uom {
      size = Small;
      label = "UoM";
   }
   field CatchUom {
      size = Small;
      label = "Catch UoM";
      visible = [(CatchQtyEnabled) and(CatchUom != null)];
   }
   -- gelr: warehouse_journal, begin
   lov DeliveryReasonIdRef with ReferenceDeliveryReasonSelector {
      label = "Delivery Reason";
      description = DeliveryReasonIdRef.Description;
      visible = ["WAREHOUSE_JOURNAL" in EnabledLccParams and EnabledLccParams != ""];
   }
   -- gelr: warehouse_journal, end
}


----------------------------------- LISTS -----------------------------------
list PartLocList for InventoryPartInStock {
   label = "";
   crudactions {
      before command PreProcessCommand;
      update action = IssueInventoryPart;
   }

   field IssuedQty {
      label = "Qty To Issue";

      validate command {
         variable CatchUomVar;

         execute {
            set CatchUomVar = "${parent.CatchUom}";
            if [CatchUomVar != null] {
               if [IssuedQty = AvailableQty] {
                  set IssuedCatchQty = CatchQtyOnhand;
               }
               else {
                  set IssuedCatchQty = null;
               }
            }
            -- gelr: warehouse_journal, begin
            set  DeliveryReasonId = parent.DeliveryReasonId;
            -- gelr: warehouse_journal, end
         }
      }
   }
   field AvailableQty {
      size = Small;
   }
   field IssuedCatchQty {
      label = "Catch Qty To Issue";
      columnexclude = [not((parent.CatchQtyEnabled) and(parent.CatchUom != null))];
   }
   field CatchQtyOnhand {
      columnexclude = [not((parent.CatchQtyEnabled) and(parent.CatchUom != null))];
   }
   field LocationNo {
      size = Small;
   }
   field HandlingUnitIdRef;
   field HandlingUnitIdRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type ID";
   }
   field TypeDescription {
      size = Small;
   }
   field HandlingUnitIdRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitIdRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field Warehouse {
      size = Small;
      label = "Warehouse ID";
   }
   field BayNo {
      size = Small;
      label = "Bay ID";
   }
   field RowNo {
      size = Small;
      label = "Row ID";
   }
   field TierNo {
      size = Small;
      label = "Tier ID";
   }
   field BinNo {
      size = Small;
      label = "Bin ID";
   }
   field ExpirationDate;
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeRef.ConditionCode;
   }
   field WaivDevRejNo {
      size = Small;
   }
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Availability Control";
      description = AvailabilityControlIdRef.Description;
   }
   field EngChgLevel {
      size = Small;
   }
   field TopParentHandlingUnitID;
   lov TopParentHandlingUnitTypeRef with ReferenceHandlingUnitTypeSelector {
      label = "Top Parent Handling Unit Type";
      description = TopParentHandlingUnitTypeRef.Description;
      size = Medium;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelID {
      size = Small;
   }
   field PartOwnershipDb {
      columnexclude = [true];
   }
   field Ownership {
      size = Small;
   }
   field Owner {
      contactwidget {
         enabled = [Owner != null];
         source {
            Customer = [PartOwnershipDb = "CUSTOMER OWNED"];
            Supplier = [PartOwnershipDb = "SUPPLIER OWNED" or PartOwnershipDb = "SUPPLIER LOANED" or PartOwnershipDb = "SUPPLIER RENTED" or PartOwnershipDb = "CONSIGNMENT"];
         }
      }
      size = Small;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   field OwnerName {
      size = Small;
   }
   field ReceiptIssueSerialTrackDb {
      columnexclude = [true];
   }
   field InvTranSource
      {
      label = "Note";
      multiline = true;
   }
      -- gelr: warehouse_journal, begin
   field DeliveryReasonId {
      columnvisible = [false];
   }
   -- gelr: warehouse_journal, end
   fieldranking AvailableQty, CatchQtyOnhand, LocationNo, HandlingUnitIdRef, HandlingUnitIdRef.HandlingUnitTypeId, TypeDescription, HandlingUnitIdRef.Sscc, HandlingUnitIdRef.AltHandlingUnitLabelId, Warehouse, BayNo;
   commandgroup CommandGroupCmdGroup {

      command PrintConditionTagCommand;
   }
}

