----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 190829      SWiclk  SCUXXW4-23758, Added contactwidget to BuyerCodeRef, AuthorizeCodeRef and VendorNoRef.
-- 190619      DiKulk  SCUXXW4-21567, Edited label of RecalcData.
-- 190402      ChFolk  SCUXXW4-18616, Added Dynamic dependency annotaion to RouteIdRef.
-- 181115      RAKUSE  SCUXXW4-5739, Converted dialog 'dlgPSheetOrdProp' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CreateOrderProposal;
component INVENT;
layer Core;
projection CreateOrderProposal;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment LovCommodityGroup2Selector;
include fragment InventoryPartPlannerLovSelector;
include fragment OrderCoordinatorLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent InventNavigator.SupplyChainPlanningPartPlanning at index 500 {
      label = "Create Order Proposal";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      label = "Site";
      format = uppercase;
   }
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      freeinput = [true];
      label = "Part No";
      format = uppercase;
   }
   lov CommodityCodeRef with ReferenceLovCommodityGroup2Selector using SecondCommodityLovFilter {
      freeinput = [true];
      label = "Commodity Group 2";
      format = uppercase;
   }
   lov BuyerCodeRef with ReferenceInventoryPartPlannerLovSelector using BuyerCodeLovFilter {
      freeinput = [true];
      label = "Planner";
      format = uppercase;
      contactwidget {
         enabled = [true];
         source = Person;
      }

   }
   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector using AuthorizeCodeLovFilter {
      freeinput = [true];
      label = "PO Coordinator";
      format = uppercase;
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   @DynamicComponentDependency PURCH
   lov VendorNoRef with ReferencePurchasePartSupplierLovSelector {
      freeinput = [true];
      label = "Supplier ID";
      format = uppercase;
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
   }
   @DynamicComponentDependency DISCOM
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      freeinput = [true];
      label = "Route ID";
      format = uppercase;
   }

}

group Control for TaskVirtual {
   label = "Control";

   field DeleteReq {
      label = "Delete Old Requisitions / Distribution Orders";
      format = uppercase;
   }
   field CreateReq {
      label = "Create Requisitions / Orders";
      format = uppercase;
   }
   field ProcessPur {
      label = "Process Purchased Parts";
      format = uppercase;
   }
   field AllParts {
      label = "Only Parts with Inventory Activity";
      format = uppercase;
   }
   field RecalcData {
      label = "Calculate Planning Data before Creating Order Proposals";
      format = uppercase;
   }
   field ProcessShp {
      label = "Process Manufactured Parts";
      format = uppercase;
   }
   field Periods {
      label = "Periods";
      format = uppercase;
      editable = [RecalcData = true];
   }
}

-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Create Order Proposal";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         -- Init parameters
--! TODO: Map the defult valus recieved in the Params structure to the corresponding projection attribute.
         set Contract = Params.Contract;
         set PartNo = Params.PartNo;
         set SecondCommodity = Params.SecondCommodity;
         set PlannerBuyer = Params.PlannerBuyer;
         set AuthorizeCode = Params.AuthorizeCode;
         set VendorNo = Params.VendorNo;
         set RouteId = Params.RouteId;
         set RecalcData = Params.RecalcData;
         set AllParts = Params.AllParts;
         set CreateReq = Params.CreateReq;
         set ProcessPur = Params.ProcessPur;
         set ProcessShp = Params.ProcessShp;
         set DeleteReq = Params.DeleteReq;
         set Periods = Params.Periods;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         group Control;

         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
