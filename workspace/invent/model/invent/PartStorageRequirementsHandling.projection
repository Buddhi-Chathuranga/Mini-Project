-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-06-19  ErRalk  SC2020R1-7471, Removed unnecessary attribute RemovedDb from PartCatalogCapabilityQuery.
-- 2019-02-21  SAGELK  SCUXXW4-6385, Added  Capacity and Condition Requirements tab
-- 2018-11-30  SAGELK  SCUXXW4-6385, Converted from frmPartCatStorageRequirements using MTG Version: 1.33
--------------------------------------------------------------------------------------
projection PartStorageRequirementsHandling;
component INVENT;
layer Core;
description "Use this API to enter storage requirements for a part catalog record.";
category Users;
include fragment StorageCapacityReqGroupLovSelector;
//Define Storage Volume
include fragment DefineStorageVolumeRequirement;
include fragment WhStorageVolumeLovSelector;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartCatalogInventAttribSet for PartCatalog;
entityset CapacitiesAndConditionsVirtualSet for CapacitiesAndConditionsVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartCatalog {
   crud = Read;

   attribute PartNo Text {
      fetch = "part_no";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "Description";
      maxlength = 200;
      editable = [false];
   }
   array InvPartStorageCapabilityArray(PartNo) to PartCatalogCapability(PartNo);
   array PartCatCapabilityOperativeArray(PartNo) to PartCatalogCapabilityQuery(PartNo);
   array PartCatalogInventAttribArray(PartNo) to PartCatalogInventAttrib(PartNo);
}

@Override
entity PartCatalogInventAttrib {
   crud = Create, Read, Update;
   from = "part_catalog_invent_attrib";
   exec = "PART_CATALOG_INVENT_ATTRIB_API";
   keys = PartNo {
      where = "PART_NO = :PartNo";
   }
   supportwarnings = [true];

   attribute CapacityReqGroupId Text {
      fetch = "capacity_req_group_id";
      label = "Capacity Requirement Group";
      maxlength = 30;
      format = uppercase;
   }
   attribute Description2 Text {
      fetch = "Storage_Capacity_Req_Group_API.Get_Description(capacity_req_group_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConditionReqGroupId Text {
      fetch = "condition_req_group_id";
      label = "Condition Requirement Group";
      maxlength = 30;
      format = uppercase;
   }
   attribute Description3 Text {
      fetch = "Storage_Cond_Req_Group_API.Get_Description(condition_req_group_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute StorageWidthRequirement Number {
      fetch = "storage_width_requirement";
      label = "Width";
   }
   attribute WidthOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Width_Requirement(part_no)";
      label = "Width Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute WidthOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Width_Req_Source(part_no)";
      label = "Width Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForLength Text {
      fetch = "NVL(uom_for_length, Storage_Capacity_Req_Group_API.Get_Uom_For_Length(capacity_req_group_id))";
      label = "Width UoM";
      maxlength = 30;
   }
   attribute StorageHeightRequirement Number {
      fetch = "storage_height_requirement";
      label = "Height";
   }
   attribute HeightOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Height_Requirement(part_no)";
      label = "Height Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute HeightOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Height_Req_Source(part_no)";
      label = "Height Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute StorageDepthRequirement Number {
      fetch = "storage_depth_requirement";
      label = "Depth";
   }
   attribute DepthOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Depth_Requirement(part_no)";
      label = "Depth Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute DepthOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Depth_Req_Source(part_no)";
      label = "Depth Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyPerVolumeOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Volume_Req_Oper_Cl(part_no)";
      label = "Qty Per Volume Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyPerVolumeOperateValueRounded Number {
      fetch = "round(Part_Catalog_Invent_Attrib_API.Get_Storage_Volume_Req_Oper_Cl(part_no), 2)";
      editable = [false];
   }
   attribute QtyPerVolumeOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Volume_Req_Source(part_no)";
      label = "Qty Per Volume Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Uom_For_Volume(part_no)";
      label = "Volume UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute StorageWeightRequirement Number {
      fetch = "storage_weight_requirement";
      label = "Weight";
   }
   attribute WeightOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Weight_Requirement(part_no)";
      label = "Weight Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute WeightOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Storage_Weight_Req_Source(part_no)";
      label = "Weight Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "NVL(uom_for_weight, Storage_Capacity_Req_Group_API.Get_Uom_For_Weight(capacity_req_group_id))";
      label = "Weight UoM";
      maxlength = 30;
   }
   attribute MinStorageTemperature Number {
      fetch = "min_storage_temperature";
      label = "Min Temperature";
   }
   attribute MinTemperatureOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Min_Storage_Temperature(part_no)";
      label = "Min Temperature Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinTemperatureOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Min_Storage_Temp_Source(part_no)";
      label = "Min Temperature Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForTemperature Text {
      fetch = "NVL(uom_for_temperature, Storage_Cond_Req_Group_API.Get_Uom_For_Temperature(condition_req_group_id))";
      label = "Min Temperature UoM";
      maxlength = 30;
   }
   attribute MaxStorageTemperature Number {
      fetch = "max_storage_temperature";
      label = "Max Temperature";
   }
   attribute MaxTemperatureOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Max_Storage_Temperature(part_no)";
      label = "Max Temperature Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute MaxTemperatureOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Max_Storage_Temp_Source(part_no)";
      label = "Max Temperature Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinStorageHumidity Number {
      fetch = "min_storage_humidity";
      label = "Min Humidity";
   }
   attribute MinHumidityOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Min_Storage_Humidity(part_no)";
      label = "Min Humidity Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinHumidityOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Min_Storage_Humid_Source(part_no)";
      label = "Min Humidity Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinHumidityUom Text {
      fetch = "'%'";
      label = "Min Humidity UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute MaxStorageHumidity Number {
      fetch = "max_storage_humidity";
      label = "Max Humidity";
   }
   attribute MaxHumidityOperateValue Number {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Max_Storage_Humidity(part_no)";
      label = "Max Humidity Operate Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute MaxHumidityOperateSource Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Max_Storage_Humid_Source(part_no)";
      label = "Max Humidity Operate Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute StorageVolumeRequirement Number {
      fetch = "1/storage_volume_requirement";

   }
   attribute StorageVolumeRequirementRounded Number {
      fetch = "round(1/storage_volume_requirement,2)";

   }
   attribute UomForVolume Text {
      fetch = "NVL(uom_for_volume, Company_Invent_Info_API.Get_Uom_For_Volume(user_finance_api.get_default_company_func))";
      maxlength = 30;
   }
   attribute CapabilityReqGroupId Text {
      fetch = "capability_req_group_id";
      label = "Capability Requirement Group";
      maxlength = 100;
      format = uppercase;
   }

   reference CapacityReqGroupIdRef(CapacityReqGroupId) to StorageCapacityReqGroupLov(CapacityReqGroupId) {
      label = "Capacity Requirement Group";
   }
   reference ConditionReqGroupIdRef(ConditionReqGroupId) to StorageCondReqGroup(ConditionReqGroupId) {
      label = "Condition Requirement Group";
   }
   reference CapabilityReqGroupIdRef(CapabilityReqGroupId) to StorageCapabilReqGroup(CapabilityReqGroupId) {
      label = "Capability Requirement Group";
   }
}

@Override
entity PartCatalogCapability {
   ludependencies = PartCatalogCapability, PartCatalogInventAttrib;

   crud = Create, Read, Update, Delete;
   from = "part_catalog_capability";
   exec = "PART_CATALOG_CAPABILITY_API";
   keys = PartNo, StorageCapabilityId {
      where = "PART_NO = :PartNo and STORAGE_CAPABILITY_ID = :StorageCapabilityId";
   }
   exclude attributes = Removed;
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute StorageCapabilityId Text {
      fetch = "storage_capability_id";
      label = "Storage Capability ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute RemovedDb Boolean("TRUE", "FALSE") {
      fetch = "removed_db";
      label = "Removed";
      editable = [false];
   }
   reference StorageCapabilityIdRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability ID";
   }
}
@Override
query PartCatalogCapabilityQuery {
   ludependencies = PartCatalogCapability, PartCatalogInventAttrib;
   from = "part_catalog_operative_cap";
   lu = PartCatalogCapability;
   keys = PartNo, StorageCapabilityId {
      where = "PART_NO = :PartNo and STORAGE_CAPABILITY_ID = :StorageCapabilityId";
   }

   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute StorageCapabilityId Text {
      fetch = "storage_capability_id";
      label = "Storage Capability ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Source Text {
      fetch = "source";
      label = "Source of Capability";
      maxlength = 200;
      required = [true];
      editable = [ETag = null];
   }
   reference StorageCapabilityIdRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CreateRemoveCapability {
   initialcheck implementation;
   ludependencies = PartCatalogCapability;
   parameter PartNo Text;
   parameter StorageCapabilityId Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetLengthUomList List<Entity(IsoUnit)> {
   where = "UNIT_TYPE_DB = 'LENGTH'";
}
function GetTemperatureUomList List<Entity(IsoUnit)> {
   where = "UNIT_TYPE_DB = 'TEMPERAT'";
}
function GetWeightUomList List<Entity(IsoUnit)> {
   where = "UNIT_TYPE_DB = 'WEIGHT'";
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual CapacitiesAndConditionsVirtual {
   attribute PartNo Text;
   attribute Width Number;
   attribute Height Number;
   attribute Depth Number;
   attribute Volume Number;

   attribute Weight Number;

   attribute MinTemperature Number;
   attribute MaxTemperature Number;
   attribute MinHumidity Number;
   attribute MaxHumidity Number;

   attribute LengthUom Text;
   attribute VolumeUom Text;
   attribute WeightUom Text;
   attribute TemperatureUom Text;
   attribute HumidityUom Text {
      fetch = "'%'";
      editable = [false];
   }

   reference UomForWeightRef(WeightUom) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference UomForLengthRef(LengthUom) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference UomForTemperatureRef(TemperatureUom) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   action SaveCapacityAndConditions {
      ludependencies = PartCatalog, PartCatalogInventAttrib;
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------



