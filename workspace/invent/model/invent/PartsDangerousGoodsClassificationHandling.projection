
-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-08-28  ChFolk  SCUXXW4-23117, Used Enumeration for ColdSensitive and MarinePollutant instead of Boolean.
-- 2019-07-15  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-03-20  STHOSE  SCUXXW4-7145, Removing Get-methods to use references instead
-- 2018-05-28  SURBLK  SCUXXW4-7145, Converted from tbwPartCatalogInventAttrib using MTG Version: 1.19
-----------------------------------------------------------------------------

projection PartsDangerousGoodsClassificationHandling;
component INVENT;
layer Core;
description "Use this API to view information relevant to transportation of the specified part. Such information includes vital data like the four-digit UN identification number for hazardous parts.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment CopyDangerousGoodsClassificationTemplateAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartCatalogInventAttributes for PartCatalogInventAttribute;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartCatalogInventAttribute using PartCatalogInventAttrib {
   crud = Read, Update;

   attribute ModifiedDate Date {
      editable = [false];
   }
   attribute UnNo Text {
      label = "UN Number";
   }
   attribute NOSDb Boolean("TRUE", "FALSE") {
      fetch = "N_O_S_DB";
      label = "N.O.S.";
   }
   attribute ColdSensitive Enumeration(PartColdSensitive) {
      fetch = "COLD_SENSITIVE_DB";
      label = "Cold Sensitive";
      required = [true];
   }
   attribute TemplatePartDb Boolean("TRUE", "FALSE") {
      fetch = "TEMPLATE_PART_DB";
      label = "Template Part";
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID),'1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute EmSNo Text {
      label = "EMS Number";
   }
   attribute MarinePollutant Enumeration(PartMarinePollutant) {
      fetch = "MARINE_POLLUTANT_DB";
      label = "Marine Pollutant";
      required = [true];
   }
   attribute AdrSubsidiaryRisk1Id Text {
      label = "ADR/RID Subsidiary Risk 1 ID";
   }
   attribute AdrSubsidiaryRisk2Id Text {
      label = "ADR/RID Subsidiary Risk 2 ID";
   }
   attribute AdrLimitedQuantity Text {
      label = "ADR/RID Limited Quantity Code";
   }
   attribute AdrEnvironmentalHazardDb Boolean("TRUE", "FALSE") {
      fetch = "ADR_ENVIRONMENTAL_HAZARD_DB";
      label = "ADR Environmental Hazard";
   }
   attribute IataEnvironmentalHazardDb Boolean("TRUE", "FALSE") {
      fetch = "IATA_ENVIRONMENTAL_HAZARD_DB";
      label = "IATA Environmental Hazard";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part";
   }
   reference HseContractRef(HseContract) to UserAllowedSiteLov(Contract) {
      label = "HSE Site";
   }
   reference ProperShippingNameIdRef(ProperShippingNameId) to ProperShippingName(ProperShippingNameId) {
      label = "Proper Shipping Name ID";
   }
   reference AdditionalShipDescIdRef(AdditionalShipDescId) to AdditionalShippingDesc(AdditionalShippingDescId) {
      label = "Additional Shipping Desc ID";
   }
   reference PackagingGroupIdRef(PackagingGroupId) to PackagingGroup(PackagingGroupId) {
      label = "Packaging Group ID";
   }
   reference PackagingMaterialIdRef(PackagingMaterialId) to PackagingMaterial(PackagingMaterialId) {
      label = "Packaging Material";
   }
   reference ImdgClassIdRef(ImdgClassId) to TransportHazardClass(HazardClass) {
      label = "IMDG Class";
   }
   reference ImdgSubsidiaryRisk1IdRef(ImdgSubsidiaryRisk1Id) to TransportHazardClass(HazardClass) {
      label = "IMDG Subsidiary Risk 1";
   }
   reference ImdgSubsidiaryRisk2IdRef(ImdgSubsidiaryRisk2Id) to TransportHazardClass(HazardClass) {
      label = "IMDG Subsidiary Risk 2";
   }
   reference ImdgLimitedQuantityRef(ImdgLimitedQuantity) to TransportLimitedQuantity(LimitedQuantity) {
      label = "IMDG Limited Quantity Code";
   }
   reference ImdgCommentIdRef(ImdgCommentId) to TransportHazardComment(HazardCommentId) {
      label = "IMDG Comment ID";
   }
   reference AdrRidClassIdRef(AdrRidClassId) to TransportHazardClass(HazardClass) {
      label = "ADR/RID Class";
   }
   reference AdrSubsidiaryRisk1IdRef(AdrSubsidiaryRisk1Id) to TransportHazardClass(HazardClass) {
      label = "ADR/RID Subsidiary Risk 1";
   }
   reference AdrSubsidiaryRisk2IdRef(AdrSubsidiaryRisk2Id) to TransportHazardClass(HazardClass) {
      label = "ADR/RID Subsidiary Risk 2";
   }
   reference AdrLimitedQuantityRef(AdrLimitedQuantity) to TransportLimitedQuantity(LimitedQuantity) {
      label = "ADR/RID Limited Quantity Code";
   }
   reference TunnelCodeRef(TunnelCode) to TunnelCode(TunnelCode) {
      label = "Tunnel Code";
   }
   reference AdrCommentIdRef(AdrCommentId) to TransportHazardComment(HazardCommentId) {
      label = "ADR Comment";
   }
   reference IataDgrClassIdRef(IataDgrClassId) to TransportHazardClass(HazardClass) {
      label = "IATA DGR Class";
   }
   reference IataSubsidiaryRisk1IdRef(IataSubsidiaryRisk1Id) to TransportHazardClass(HazardClass) {
      label = "IATA Subsidiary Risk 1";
   }
   reference IataSubsidiaryRisk2IdRef(IataSubsidiaryRisk2Id) to TransportHazardClass(HazardClass) {
      label = "IATA Subsidiary Risk 2";
   }
   reference IataLimitedQuantityRef(IataLimitedQuantity) to TransportLimitedQuantity(LimitedQuantity) {
      label = "IATA Limited Quantity Code";
   }
   reference IataCommentIdRef(IataCommentId) to TransportHazardComment(HazardCommentId) {
      label = "IATA Comment ID";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetUnNoAndNos Structure(UnNoAndNosStructure) {
   parameter ProperShippingNameId Text;
}

---------------------------------- ACTIONS ----------------------------------


-------------------------------- STRUCTURES ---------------------------------
structure UnNoAndNosStructure {
   attribute UnNo Text;
   attribute Nos Boolean;
}