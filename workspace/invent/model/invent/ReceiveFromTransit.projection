----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2022-02-01  Diablk  SC21R2-7476, Added LatestTransactionId as exclude attribute.
-- 2021-12-14  SBalLK  SC21R2-2833, Added RemoteWarehouse attribute.
-- 2019-07-26  ChFolk  SCUXXW4-22798, Modified project information and removed some attributes with get methods to increase performance.
-- 2019-04-13  SuDelk  SCUXXW4-17954, Made Handling Unit ID and Handling Unit Type read only.
-- 2019-04-05  ChFolk  SCUXXW4-17954, Added action ReceivePartFromTransitUpdate and did some changes to improve performance.
-- 2019-03-28  ChFolk  SCUXXW4-18092, Removed unnecessary dynamic dependency for ActivitySeq which is a key attribute of this entity.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-05-02  ChFolk  SCUXXW4-7227, Converted from tbwRecTransit using MTG Version: 1.16
----------------------------------------------------------------------------------------------------------
projection ReceiveFromTransit;
component INVENT;
layer Core;
description "Use this API to receive parts that are currently in transit";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLov4Selector;
include fragment InventoryLocation19Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartInStocks for InventoryPartInStock;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartInStock {
   crud = Read, Update;
   ludependencies = InventoryPartInStock;
   from = "inventory_part_in_stock_deliv ipsd, Handling_Unit_API.Get_Handling_Unit_Details(ipsd.HANDLING_UNIT_ID) hu";
   where = "FREEZE_FLAG_DB != 'Y'";
   // eventhough these two attrbutes are not in the inventory_part_in_stock_deliv but they exits in inventory_part_in_stock_tab.
   // therefore those two are listed in select list but at runtime it gives invalid identifier error as those two are missing in
   // inventory_part_in_stock_deliv. So to avoid error just add those two attributes as exclude.
   exclude attributes = RotablePartPoolId;
   exclude attributes = CreateDate;
   exclude attributes = LatestTransactionId;

   attribute QtyReceived Number {
      label = "Qty Received";
      fetch = "NULL";
      editable = [true];
   }
   attribute UoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
      label = "UoM";
   }
   attribute CatchQtyReceived Number {
      label = "Catch Qty Received";
      fetch = "NULL";
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
      editable = [false];
   }
   attribute CatchQtyInTransit Number {
      editable = [ETag = null];
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
      editable = [false];
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty";
      editable = [false];
   }
   attribute LocationNo Text {
      label = "To Location No";
   }
   attribute HandlingUnitId Number {
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      editable = [false];
      fetch = "hu.hu_type_id";
   }
   attribute TypeDescription Text {
      fetch = "hu.hu_type_desc";
      editable = [false];
   }
   attribute Sscc Text {
      fetch = "hu.sscc";
      label = "SSCC";
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "hu.alt_hu_label_id";
      label = "Alt HAndling Unit Label ID";
      editable = [false];
   }
   attribute Warehouse Text {
      format = uppercase;
      editable = [false];
   }
   attribute RemoteWarehouse Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Remote_Warehouse_Db(CONTRACT, WAREHOUSE)";
      editable = [false];
   }
   attribute BayNo Text {
      format = uppercase;
      editable = [false];
   }
   attribute RowNo Text {
      format = uppercase;
      editable = [false];
   }
   attribute TierNo Text {
      format = uppercase;
      editable = [false];
   }
   attribute BinNo Text {
      format = uppercase;
      editable = [false];
   }
   attribute ExpirationDate Date {
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute SerialNo Text {
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute WaivDevRejNo Text {
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      format = uppercase;
   }
   attribute TopParentHandlingUnitId Text {
      fetch = "hu.top_parent_hu_id";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySeq Number;
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "hu.top_parent_hu_type_id";

      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "hu.top_parent_hu_type_desc";
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "hu.top_parent_sscc";
      label = "Top Parent SSCC";

      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "hu.top_parent_alt_hu_label_id";
      label = "Top Parent Alt Handling Unit Label ID";
      editable = [false];
   }
   attribute QtyReserved Number {
      label = "Reserved Qty";
      editable = [false];
   }
   attribute Source Text {
      label = "Note";
      editable = [false];
   }
   attribute ShortagesExist Number {
      fetch = "Shortage_Demand_API.Shortage(CONTRACT, PART_NO)";
      label = "Shortages Exist";
      editable = [false];
   }
   attribute PartShortageFlag Text {
      fetch = "Inventory_Part_API.Get_Shortage_Flag(CONTRACT, PART_NO)";
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,OWNING_VENDOR_NO,OWNING_CUSTOMER_NO)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }

   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(OWNING_CUSTOMER_NO))";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute ProjectId Text {
      maxlength = 2000;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "PART_OWNERSHIP_DB";
      label = "Part Ownership";
      maxlength = 20;
      editable = [false];
   }
   attribute SystemShortageFlag Text {
      fetch = "Mpccom_System_Parameter_API.Get_Parameter_Value1('SHORTAGE_HANDLING')";
      label = "System Shortage Flag";
      maxlength = 5;
      editable = [false];
   }
   attribute CatchUnitEnableDb Text {
      fetch = "Part_Catalog_API.Get_Catch_Unit_Enabled_Db(PART_NO)";
      maxlength = 5;
      editable = [false];
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq);
   reference PartNoRef(Contract, PartNo) to InventoryPartLov4(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference UoMRef(UoM) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "To Location No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);

   action ReceivePartFromTransitUpdate {
      parameter QtyReceived Number;
      parameter CatchQtyReceived Number;
      ludependencies = InventoryPartInStock;
      supportwarnings = [true];
   }
}

--------------------------------- FUNCTIONS ---------------------------------

---------------------------------- ACTIONS ----------------------------------
action GetReportResultKeyList Text {
   initialcheck implementation;
   parameter SelectedKeyList Text;
}


