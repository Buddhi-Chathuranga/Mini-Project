----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2020-03-13  JaThlk  SCXTEND-2147, Added ActualDateFinishedTruncated and TaskType to support Warehouse Instant View lobby page.
-- 2020-03-05  JaThlk  SCXTEND-2147, Added RequestedDateFinishedTruncated and TaskTypeDb to support Warehouse Instant View lobby page.
-- 2018-04-09  ChFolk  SCUXXW4-7397, Converted from tbwWarehouseTaskOverview using MTG Version: 1.15
----------------------------------------------------------------------------------------------------------
projection WarehouseTasksHandling;
component INVENT;
layer Core;
description "This API is used to view and to plan the warehouse tasks. It is possible to see a task status and also to change the status.";
category Users;
include fragment WarehouseWorkerLov;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseTasks for WarehouseTask;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseTask {
   crud = Read, Update;
   attribute TaskId Number {
      required = [true];
   }
   attribute Contract Text {
      editable = [ETag = null];
   }
   attribute Priority Number {
      editable = [ETag = null];
   }
   attribute AssignedPriority Number {
      label = "Operative Priority";
      editable = [false];
   }
   attribute WorkerId Text {
      editable = [false];
   }
   attribute WorkerGroup Text {
      editable = [false];
   }
   attribute NumberOfLines Number {
      editable = [ETag = null];
   }
   attribute RequestedDateFinished Timestamp {
      label = "Requested Finish Date";
      editable = [ETag = null];
   }
   attribute TotalPlannedTimeNeeded Number {
      fetch = "WAREHOUSE_TASK_API.GET_TOTAL_PLANNED_TIME_NEEDED(TASK_ID)";
      label = "Total Planned Time Needed";
      required = [true];
      editable = [ETag = null];
   }
   attribute LatestStartDate Timestamp {
      fetch = "WAREHOUSE_TASK_API.GET_LATEST_DATE_STARTED(TASK_ID)";
      label = "Latest Start Date";
      editable = [false];
   }
   attribute ActualDateStarted Timestamp {
      label = "Actual Start Date";
      editable = [ETag = null];
   }
   attribute ExpectedFinishDate Timestamp {
      fetch = "WAREHOUSE_TASK_API.GET_EXPECTED_DATE_FINISHED(TASK_ID)";
      label = "Expected Finish Date";

      editable = [false];
   }
   attribute ActualDateFinished Timestamp {
      label = "Actual Finish Date";
      editable = [ETag = null];
   }
   attribute ActualDateFinishedTruncated Date {
      fetch = "TRUNC(actual_date_finished)";
      label = "Actual Finish Date";
      editable = [ETag = null];
   }
   attribute ActualTimeNeeded Number {
      fetch = "WAREHOUSE_TASK_API.GET_ACTUAL_TIME_NEEDED(TASK_ID)";
      label = "Actual Time Needed";
      editable = [false];
   }
   attribute Info Text {
      label = "Source Info";
      editable = [ETag = null];
   }
   attribute SourceRef1 Text {
      editable = [ETag = null];
   }
   attribute SourceRef2 Text {
      editable = [ETag = null];
   }
   attribute SourceRef3 Text {
      editable = [ETag = null];
   }
   attribute SourceRef4 Text {
      editable = [ETag = null];
   }
   attribute RequestedDateFinishedTruncated Date {
      fetch = "trunc(requested_date_finished)";
   }
   attribute TaskTypeDb Text {
      fetch = "task_type_db";
      editable = [false];
   }
   attribute TaskType Text {
      fetch = "task_type";
      editable = [false];
   }

   reference WorkerIdRef(Contract, TaskType, LocationGroup, WorkerId) to WarehouseWorkerLov(Contract, TaskType, LocationGroup, WorkerId);

   reference WorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroup(Contract, WorkerGroup) {
      label = "Worker Group";
   }
   reference ParkReasonIdRef(ParkReasonId) to WarehouseTaskParkReason(ParkReasonId) {
      label = "Park Reason";
   }
}

