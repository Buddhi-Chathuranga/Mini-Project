-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2022-02-02  BwItLk  SC21R2-7297, Modified SiteInventInfo entity  by adding BayId, RowId, TierId, BinId to filter out data in Warehouse Navigator in each level.
-- 2020-09-25  JaThlk  SC2020R1-9887, Overrode the virtual CapacitiesAndConditionsVirtual to have the method signature in the projection itself.
-- 2018-11-05  KoDelk  SCUXXW4-6547, Converted from frmWarehouseNavigator using MTG Version 1.31.
-- 2018-12-21  KoDelk  SCUXXW4-14230, Moved warehouses command to a tab
-- 2018-12-21  KoDelk  SCUXXW4-14359, Moved Part in stocks and Handling units in stock command to tabs
-----------------------------------------------------------------------------
projection WarehouseNavigatorHandling;
component INVENT;
layer Core;
description "Manage Warehouse Navigator";
category Users;

include fragment CopyWarehousesFromSite;
include fragment ClearStorageCharacteristics;
include fragment WarehousesTab;
include fragment InventoryLocationsTab;
include fragment InventoryPartInStockList;
include fragment HandlingUnitsInStockList;
include fragment ModifyCapacitiesAndConditionsAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SiteSet for Site;
entityset SiteInventInfoSet for SiteInventInfo;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Site {
   crud = Read;
   from = "site_uiv";
   use attributes = Description;
   attribute Contract Text {
      maxlength = 100;
      editable = [false];
   }
   attribute Description Text {
      label = "Site Description";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}
@Override
entity SiteInventInfo {
   crud = Read, Update;
   use attributes = BinWidthCapacity, BinHeightCapacity, BinDeptCapacity, BinVolumeCapacity, BayCarryingCapacity, RowCarryingCapacity, TierCarryingCapacity, BinCarryingCapacity, BinMinTemperature, BinMaxTemperature, BinMinHumidity, BinMaxHumidity;
   attribute Contract Text {
      editable = [false];
   }
   attribute ReceiptsBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "receipts_blocked_db";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptToOccupiedBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "receipt_to_occupied_blocked_db";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute MixOfPartNumberBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_part_number_blocked_db";
      label = "Mix of Part Numbers Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfCondCodesBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_cond_codes_blocked_db";
      label = "Mix of Condition Codes Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfLotBatchNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_lot_batch_no_blocked_db";
      label = "Mix of Lot Batch Numbers Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute ExcludeStorageReqValDb Boolean("TRUE", "FALSE") {
      fetch = "exclude_storage_req_val_db";
      label = "Exclude Storage Requirement Validation";
      editable = [ETag != null];
      required = [true];
   }
   attribute BinWidthCapacity Number {
      label = "Width";
   }
   attribute UomForLength Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute BinHeightCapacity Number {
      label = "Height";
   }
   attribute BinDeptCapacity Number {
      label = "Depth";
   }
   attribute BinVolumeCapacity Number {
      label = "Volume";
   }
   attribute VolumeUom Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(contract)";
      label = "Volume UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BayCarryingCapacity Number {
      label = "Bay";
   }
   attribute UomForWeight Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute RowCarryingCapacity Number {
      label = "Row";
   }
   attribute TierCarryingCapacity Number {
      label = "Tier";
   }
   attribute BinCarryingCapacity Number {
      label = "Bin";
   }
   attribute BinMinTemperature Number {
      label = "Min Temperature";
   }
   attribute UomForTemperature Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(contract))";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute BinMaxTemperature Number {
      label = "Max Temperature";
   }
   attribute BinMinHumidity Number {
      label = "Min Humidity";
   }
   attribute Uom Text {
      fetch = "'%'";
      label = "UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute BinMaxHumidity Number {
      label = "Max Humidity";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   attribute VolumeOppValue Number {
      fetch = "SITE_INVENT_INFO_API.Get_Bin_Volume_Capacity(CONTRACT)";
   }
   attribute WarehouseId Text {
      fetch = "NULL";
   }
   attribute BayId Text {
      fetch = "NULL";
   }
   attribute RowId Text {
      fetch = "NULL";
   }
   attribute TierId Text {
      fetch = "NULL";
   }
   attribute BinId Text {
      fetch = "NULL";
   }

   array SiteInventInfoArray(Contract) to SiteInventInfo(Contract);
   array SiteHuCapacityArray(Contract) to SiteHuCapacity(Contract);
   array SiteStorageCapabilityArray(Contract) to SiteStorageCapability(Contract);
   array WarehouseArray(Contract) to Warehouse(Contract);
   array WarehouseBayBinArray(Contract) to WarehouseBayBin(Contract);
   array InventoryPartInStockArray(Contract) to InventoryPartInStock(Contract);
}

@Override
entity SiteHuCapacity {
   use attributes = BinHuTypeCapacity;
   attribute Description Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinHuTypeCapacity Number {
      label = "Bin Capacity";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
}

@Override
entity SiteStorageCapability {
   crud = Create, Read, Delete;
   attribute Description Text {
      fetch = "STORAGE_CAPABILITY_API.Get_Description(storage_capability_id)";
   }
   reference StorageCapabilityIdRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function GetActiveStorageCapability List<Entity(StorageCapability)> {
   where = "objstate = 'Active'";
}
function GetDefaultSearchContextForSite Structure(SiteSearchContextStructure);

function GetWarehouses List<Entity(Warehouse)> {
   parameter Contract Text;
   parameter DoNotShowHidden Enumeration(ViewTyepeEnum);
   where = "contract = :Contract and (hide_in_whse_navigator_db != :DoNotShowHidden OR :DoNotShowHidden = 'FALSE')";
}

function GetWarehouseBay List<Entity(WarehouseBay)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter DoNotShowHidden Enumeration(ViewTyepeEnum);
   where = "contract = :Contract and warehouse_id = :WarehouseId and (hide_in_whse_navigator_db != :DoNotShowHidden OR :DoNotShowHidden = 'FALSE')";
}

function GetWarehouseBayRow List<Entity(WarehouseBayRow)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter DoNotShowHidden Enumeration(ViewTyepeEnum);
   where = "contract = :Contract and warehouse_id = :WarehouseId and BAY_ID = :BayId and (hide_in_whse_navigator_db != :DoNotShowHidden OR :DoNotShowHidden = 'FALSE')";
}

function GetWarehouseBayTier List<Entity(WarehouseBayTier)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter DoNotShowHidden Enumeration(ViewTyepeEnum);
   where = "contract = :Contract and warehouse_id = :WarehouseId and BAY_ID = :BayId and (hide_in_whse_navigator_db != :DoNotShowHidden OR :DoNotShowHidden = 'FALSE')";
}

function GetWarehouseBayTierBin List<Entity(WarehouseBayBin)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter TierId Text;
   parameter DoNotShowHidden Enumeration(ViewTyepeEnum);
   where = "contract = :Contract and warehouse_id = :WarehouseId and BAY_ID = :BayId and TIER_ID = :TierId and (hide_in_whse_navigator_db != :DoNotShowHidden OR :DoNotShowHidden = 'FALSE')";
}

function GetWarehouseBayRowBin List<Entity(WarehouseBayBin)> {
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter RowId Text;
   parameter DoNotShowHidden Enumeration(ViewTyepeEnum);
   where = "contract = :Contract and warehouse_id = :WarehouseId and BAY_ID = :BayId and ROW_ID = :RowId and (hide_in_whse_navigator_db != :DoNotShowHidden OR :DoNotShowHidden = 'FALSE')";
}
-------------------------------- STRUCTURES ---------------------------------
structure SiteSearchContextStructure {
   attribute DoNotShowHidden Enumeration(ViewTyepeEnum) {
      label = "Visibility";
      required = [true];
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration ViewTyepeEnum {
   value = "FALSE" {
      label = "View All";
   }
   value = "TRUE" {
      label = "Do Not Show Hidden";
   }
}
--------------------------------- VIRTUALS ----------------------------------
@Override
virtual CapacitiesAndConditionsVirtual {
   action SaveCapacityAndConditions {
      ludependencies = SiteInventInfo;
   }
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

