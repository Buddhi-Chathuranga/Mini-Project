-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-16  DiJwlk  SC2020R1-11349, Modified DefineStorageVolumeReqDialog by adding VolumeVar calculation to command Ok.
-- 2019-05-14  DaZase  SCUXXW4-19630, Added initialcheck to all unbounded actions.
-- 2018-09-11  SaGeLK  SCUXXW4-5494, Converted from dlgDefStorageVolumeReq using MTG Version: 1.29
--------------------------------------------------------------------------------------
fragment DefineStorageVolumeRequirement;
component INVENT;
layer Core;
description "Use this dialog box to define the storage requirements for a part.";

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceWhStorageVolumeLovSelector for WhStorageVolumeLov {
   static Contract;
   static WarehouseId;
   static BayId;
   static TierId;
   static RowId;
   static BinId;
   static LocationNo;
   static Volume;
}
---------------------------------- GROUPS -----------------------------------
group DefineStorageVolumeReqGroup for DefineStorageVolumeReqStructure {
   label = " ";

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      editable = [Source != "Inventory_Part"];

      validate command {
         execute {
            call ValidateContract(Contract);
         }
      }
   }
   field LocationNo {
      label = "Location No";
      lovswitch {
         when [Contract != null] {
            lov LocationNoRef with ReferenceWhStorageVolumeLovSelector using GetUserAllowedSites(Contract) {
               hidekey = [true];
               description = LocationNoRef.LocationNo;
            }
         }
         when [true] {
            lov LocationNoRef with ReferenceWhStorageVolumeLovSelector {
               hidekey = [true];
               description = LocationNoRef.LocationNo;

            }
         }
      }
      validate command {
         variable LocationNoExists_ {
            type = Boolean;
         }
         execute {
            call ValidateLocationNo(Contract, LocationNo) into LocationNoExists_;
            if [LocationNoExists_] {
               call GetLocationVolume(Contract, LocationNo) into LocationVolume;
               call GetVolumeUom(Contract) into VolumeUom;
            }
            else {
               if [Contract = null] {
                  set Contract = "";
               }
               warning("Location ${LocationNo} do not exist on site ${Contract}.");
            }

         }
      }
   }
   field LocationVolume {
      editable = [false];
   }
   field VolumeUom {
      size = Small;
      editable = [false];
   }
   field StorageQuantity {
      validate command {
         execute {
            if [StorageQuantity <= 0] {
               warning("This is not a valid quantity!");
               set StorageQuantity = null;
            }
            else {
               call CalculateVolume(StorageQuantity, LocationVolume) into VolumeVar;
            }
         }
      }
   }
}
----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog DefineStorageVolumeReqDialog for DefineStorageVolumeReqStructure {
   label = "Define Storage Volume Requirement";
   input(Source, Contract);

   output(VolumeVar, VolumeUom);
   group DefineStorageVolumeReqGroup;
   commandgroup ButtonCmdGroup {
      command Ok {
         enabled = [StorageQuantity != null and StorageQuantity >= 0];
         execute {
            call CalculateVolume(StorageQuantity, LocationVolume) into VolumeVar;
            exit OK;
         }
      }
      command Cancel;
   }
}
---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action ValidateContract {
   initialcheck implementation;
   parameter Contract Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetUserAllowedSites List < Entity(WhStorageVolumeLov) > {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function GetVolumeUom Text {
   parameter Contract Text;
}
function CalculateVolume Number {
   parameter StorageQuantity Number;
   parameter LocationVolume Number;
}
function ValidateLocationNo Boolean {
   parameter Contract Text;
   parameter LocationNo Text;
}
function GetLocationVolume Number {
   parameter Contract Text;
   parameter LocationNo Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure DefineStorageVolumeReqStructure {
   attribute Source Text {
      required = [false];
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      required = [true];
      format = uppercase;
   }
   attribute LocationNo Text {
      label = "Location No";
      maxlength = 100;
      required = [true];
   }
   attribute LocationVolume Number {
      label = "Volume";
   }
   attribute VolumeUom Text {
      maxlength = 100;
   }
   attribute StorageQuantity Number {
      label = "Quantity per Location";
      required = [true];
   }
   attribute VolumeVar Number;
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference LocationNoRef(LocationNo) to WhStorageVolumeLov(LocationNo) {
      label = "Location No";
   }
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------