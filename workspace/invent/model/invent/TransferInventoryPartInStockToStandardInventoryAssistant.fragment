-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2021-01-26  DiJwlk  SC2020R1-11785, Removed field references to optimize performance.
-- 2020-01-03  NISMLK  MFSPRING20-812, Added field Ownership Transfer Reason to TransferInventoryPartInStockToStandardInventoryAssistant.
-- 2019-08-28  ChFolk  SCUXXW4-23117, Used Enumeration for FreezeFlag instead of Boolean.
-- 2019-05-23  fgusse  SCUXXW4-21039, Added ID for all labels for Warehouse
-- 2019-05-21  DaZase  SCUXXW4-19704, Added initialcheck to all unbounded actions.
-- 2018-10-10  ChFolk  SCUXXW4-5881, Renamed the virtuals to avoid lengthy names.
-- 2018-10-03  ChFolk  SCUXXW4-5881, Created the fragment to dlgTransferToStandardInventory.
-------------------------------------------------------------------------------------------------------
fragment TransferInventoryPartInStockToStandardInventoryAssistant;
component INVENT;
layer Core;
description "Assistant use to move the parts from project inventory to standard inventory";

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant TransferInventoryPartInStockToStandardInventoryAssistant using TransferToStandardInventorySet {
   label = "Transfer to Standard Inventory";
   input(ObjidListArr);
   init command {
      execute {
         set ReportEarnedValues = true;
      }
   }

   steps {
      step {
         group TransferToStandardInventoryGroup;
         list TransferToStdInvList(TransferToStdInvArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      variable ParamValueStr {
         type = Text;
      }
      variable ProceedTransferBool {
         type = Boolean;
      }
      variable ReportEarnedValuesStr {
         type = Text;
      }
      variable BarcodeLabelsVar;
      execute {
         call CheckSystemParameters() into ParamValueStr;
         if [ParamValueStr = null or ParamValueStr = "Y"] {
            set ProceedTransferBool = true;
         }
         if [ParamValueStr = "N"] {
            confirm("Note that inventory transactions and accounting will not be created. See System Parameter Transactions for project transfers.
                     This parameter should only be set to No during an upgrade, when manually transferring project-acquired parts to project inventory.
                     Do you want to continue??") {

               when OK {
                  set ProceedTransferBool = true;
               }
               when CANCEL {
                  set ProceedTransferBool = false;
               }
            }
         }

         if [ProceedTransferBool] {
            if [ReportEarnedValues] {
               set ReportEarnedValuesStr = "TRUE";
            }
            else {
               set ReportEarnedValuesStr = "FALSE";
            }
            call ExecuteMovingStocksToStandardInventory(Objkey, Note, ReportEarnedValuesStr);
            if [PrintBarCodes] {
               stringify(TransferToStdInvList, "CONTRACT=${Contract}^PART_NO=${PartNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CONFIGURATION_ID=${ConfigurationId}^QTY=${QtyToTransfer}^PACK_SIZE=1^", JSON) into BarcodeLabelsVar;
               assistant PrintBarcodeLabelsAssistant(BarcodeLabelsVar) {
                  when OK {
                     exit OK;
                  }
                  when CANCEL {
                     exit;
                  }
               }
            }
         }
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceOwnershipTransferReasonSelector for OwnershipTransferReason {
   label = "";
   badge Objstate {
      style = TextOnly;
      label = "Validity";
      showlabel = false;
      emphasis ValidityHidden = [Objstate = "Hidden"];
      emphasis ValidityBlocked = [Objstate = "Blocked"];
      emphasis ValidityActive = [Objstate = "Active"];
   }
}
---------------------------------- GROUPS -----------------------------------
group TransferToStandardInventoryGroup for TransferToStdInvVirtual {
   label = "";
   field Note;
   field PrintBarCodes {
      size = Small;
   }
   field ReportEarnedValues {
      size = Small;
   }
   lov OwnershipTransferReasonRef with ReferenceOwnershipTransferReasonSelector {
      description = OwnershipTransferReasonRef.Description;
   }
}


----------------------------------- LISTS -----------------------------------
list TransferToStdInvList for StockToStdInvVirtual {
   editmode = SingleCellEdit;
   label = "";
   field Contract {
      size = Small;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part";
      description = InventoryPartRef.DescriptionInUse;
      editable = [false];
   }
   field QtyOnhand;
   field QtyToTransfer;
   field CatchQty {
      required = [CatchQtyRequired and QtyOnhand != QtyToTransfer];
   }
   field CatchQtyRequired;
   field ConfigurationId {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field HandlingUnitIdRef;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
      editable = [false];
   }
   field HandlingUnitIdRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitIdRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   lov ActivitySeqRef with ReferenceActivitySelector {
      label = "Activity";
      description = ActivityDescription;
   }
   @DynamicComponentDependency PROJ
   lov ProjectIdRef with ReferenceProjectSelector {
      label = "Project";
      description = ProjectName;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   lov SubProjectIdRef with ReferenceSubProjectSelector {
      label = "Sub Project";
      description = SubProjectDescription;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   lov ProjectProgramGlobalRef with ReferenceProjectProgramGlobalSelector {
      label = "Program";
      description = ProgramDescription;
   }
   field Warehouse {
      size = Small;
   }
   field BayNo {
      label = "Bay ID";
      size = Small;
   }
   field RowNo {
      label = "Row ID";
      size = Small;
   }
   field TierNo {
      label = "Tier ID";
      size = Small;
   }
   field BinNo {
      label = "Bin ID";
      size = Small;
   }
   field TopParentHandlingUnitId;
   field TopParentHuTypeId {
      size = Small;
   }
   field TopParentHuTypeDesc {
      size = Small;
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHuLabelId {
      size = Small;
   }
   field QtyReserved;
   field QtyInTransit;
//   field FreezeFlagDb {
//      size = Small;
//   }
   field FreezeFlag {
      size = Small;
      enumerationtrue = "Yes";
 	   enumerationfalse = "No";
   }
   field LastActivityDate;
   field LastCountDate;
   field LocationType {
      size = Small;
   }
   field ExpirationDate;
   field ReceiptDate;
   field AvailabilityControlId {
      size = Small;
   }
   fieldranking Contract, PartNo, QtyToTransfer, ConfigurationIdRef, LocationNo, HandlingUnitIdRef, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset TransferToStandardInventorySet for TransferToStdInvVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action ExecuteMovingStocksToStandardInventory {
   initialcheck implementation;
   parameter ParentObjkey Text;
   parameter Note Text;
   parameter ReportEarnedValues Text;
   ludependencies = InventoryPartInStock;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckSystemParameters Text;

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual TransferToStdInvVirtual {
   attribute Note Text {
      label = "Notes";
      maxlength = 25;
   }
   attribute PrintBarCodes Boolean("TRUE", "FALSE") {
      label = "Print Barcodes";
      required = [true];
   }
   attribute ReportEarnedValues Boolean("TRUE", "FALSE") {
      label = "Report Earned Value";
      required = [true];
   }
   attribute ObjidListArr Text {
      label = " ";
      maxlength = 2000;
   }
   attribute OwnershipTransferReasonId Text {
      format = uppercase;
      maxlength = 50;
   }

   array TransferToStdInvArray() to StockToStdInvVirtual();

   reference OwnershipTransferReasonRef(OwnershipTransferReasonId) to OwnershipTransferReason(TransferReasonId) {
      label = "Part Ownership Transfer Reason";
   }
}

virtual StockToStdInvVirtual {
   crud = Read, Update;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute QtyOnhand Number {
      fetch = "qty_onhand";
      label = "On Hand Qty";
      editable = [false];
   }
   attribute QtyToTransfer Number {
      label = "Qty to Transfer";
      required = [true];
      editable = [true];
   }
   attribute CatchQty Number {
      label = "Catch Quantity";
      editable = [true];
   }
   attribute CatchQtyRequired Boolean("TRUE", "FALSE") {
      fetch = "Part_Catalog_API.Get_Catch_Unit_Enabled_Db(PART_NO)";
      label = "Catch Qty Required";
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
      required = [true];
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      required = [true];
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      required = [true];
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      maxlength = 6;
      required = [true];
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      required = [true];
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Seq";
      maxlength = 10;
      required = [true];
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 10;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Warehouse Text {
      fetch = "warehouse";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayNo Text {
      fetch = "bay_no";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "row_no";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierNo Text {
      fetch = "tier_no";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinNo Text {
      fetch = "bin_no";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHuLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyReserved Number {
      fetch = "qty_reserved";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtyInTransit Number {
      fetch = "qty_in_transit";
      label = "In Transit Qty";
      editable = [false];
   }
   attribute FreezeFlagDb Text;
   attribute FreezeFlag Enumeration(GenYesNo) {
      fetch = "freeze_flag_db";
      label = "Frozen";
      required = [true];
      editable = [false];
   }
   attribute LastActivityDate Timestamp {
      fetch = "last_activity_date";
      label = "Last Activity Date";
      editable = [false];
   }
   attribute LastCountDate Timestamp {
      fetch = "last_count_date";
      label = "Latest Count";
      editable = [false];
   }
   attribute LocationType Enumeration(InventoryLocationType) {
      label = "Location Type";
      editable = [false];
   }
   attribute ExpirationDate Timestamp {
      fetch = "expiration_date";
      label = "Expiration Date";
   }
   attribute ReceiptDate Timestamp {
      fetch = "receipt_date";
      label = "Receipt Date";
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, ACTIVITY_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "PROJECT_API.Get_Program_Id(PROJECT_ID)";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(PROJECT_API.Get_Program_Id(PROJECT_ID))";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(PROJECT_ID)";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Sub_Project_API.Get_Description(PROJECT_ID, ACTIVITY_API.Get_Sub_Project_Id(ACTIVITY_SEQ)))";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
   }
   reference InventoryPartRef(PartNo, Contract) to InventoryPart(PartNo, Contract);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProjectProgramGlobalRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


