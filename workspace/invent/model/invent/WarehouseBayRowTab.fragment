-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-11-11  JaThlk  SC2020R1-10536, Rename the column names MixOfLotBatchNumbersBlockedOn and MixOfConditionCodesBlockedOn to MixOfLotBatchNoBlockedOn and MixOfCondCodesBlockedOn
-- 2020-11-11          to avoid the incorrect format error and enabled duplicate. Removed Db suffix of the boolean attributes and the fields.
-- 2019-05-13  DaZase  SCUXXW4-19715, Added initialcheck to all unbounded actions.
-- 2018-12-26  KoDelk  SCUXXW4-14285, Created
-----------------------------------------------------------------------------
fragment WarehouseBayRowTab;
component INVENT;
layer Core;
description "Warehouse Rows Tab";

include fragment WarehouseBayLov;
include fragment WarehouseLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseBayRowLovSelector;
include fragment WarehouseBayRowInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command CopyBinsfromRowCommand for WarehouseBayRow {
   label = "Copy Bins from Row";
   enabled = [true];
   mode = SelectedRecords;
   variable FromContractVar;
   variable FromWarehouseIdVar;
   variable FromBayIdVar;
   variable FromRowIdVar;

   bulkexecute {
      dialog CopyRowStructureDialog into(FromContractVar, FromWarehouseIdVar, FromBayIdVar, FromRowIdVar) {
         when OK {
            bulkcall CopyBinsFromRow(FromContractVar, FromWarehouseIdVar, FromBayIdVar, FromRowIdVar, Contract, WarehouseId, BayId, RowId);
            success("Successfully copied Bins from the Row ${FromRowIdVar} of site ${FromContractVar}.");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CopyRowStructureGroup for CopyRowStructure {
   label = "Copy Bins from";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      label = "Site";
      description = ContractRef.ContractDesc;
   }
   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      label = "Warehouse ID";
      description = WarehouseIdRef.Description;
   }
   lov BayIdRef with ReferenceWarehouseBayLovSelector {
      label = "Bay ID";
      description = BayIdRef.Description;
   }
   lov RowIdRef with ReferenceWarehouseBayRowLovSelector {
      label = "Row ID";
      description = RowIdRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------
list WarehouseBayRowsList for WarehouseBayRow {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      columnexclude = [parent.luname = "WarehouseBay"];
      size = Small;
   }
   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      columnexclude = [parent.luname = "WarehouseBay"];
   }
   lov BayIdRef with ReferenceWarehouseBayLovSelector {
      columnexclude = [parent.luname = "WarehouseBay"];
   }
   field RowId {
      validate command {
         execute {
            if [OldRouteOrder = RouteOrder] {
               set RouteOrder = RowId;
               set OldRouteOrder = RouteOrder;
            }
         }
      }
   }
   field Description;
   field BinWidthCapacity;
   field WarehouseBayRowRef.BinWidthCapacity {
      label = "Bin Depth Operative Value";
   }
   field BinWidthSource;
   field BinHeightCapacity;
   field WarehouseBayRowRef.BinHeightCapacity {
      label = "Bin Height Operative Value";
   }
   field BinHeightSource;
   field BinDeptCapacity;
   field WarehouseBayRowRef.BinDeptCapacity {
      label = "Bin Depth Operative Value";
   }
   field BinDepthSource;
   field LengthUoM;
   field BinVolumeCapacity;
   field BinVolumeOperativeValue;
   field BinVolumeSource;
   field VolumeUoM;
   field RowCarryingCapacity;
   field WarehouseBayRowRef.RowCarryingCapacity {
      label = "Row Carrying Capacity Operative Value";
   }
   field RowCarryingCapacitySource {
      size = Small;
   }
   field BinCarryingCapacity;
   field WarehouseBayRowRef.BinCarryingCapacity {
      label = "Bin Carrying Capacity Operative Value";
   }
   field BinCarryingCapacitySource {
      size = Small;
   }
   field WeightUoM {
      size = Small;
   }
   field BinMinTemperature;
   field WarehouseBayRowRef.BinMinTemperature {
      label = "Min Temperature Operative Value";
   }
   field MinTemperatureSource {
      size = Small;
   }
   field BinMaxTemperature;
   field WarehouseBayRowRef.BinMaxTemperature {
      label = "Max Temperature Operative Value";
   }
   field MaxTemperatureSource {
      size = Small;
   }
   field TemperatureUoM {
      size = Small;
   }
   field BinMinHumidity;
   field WarehouseBayRowRef.BinMinHumidity {
      label = "Min Humidity (%) Operative Value";
   }
   field MinHumiditySource {
      size = Small;
   }
   field BinMaxHumidity;
   field WarehouseBayRowRef.BinMaxHumidity {
      label = "Max Humidity (%) Operative Value";
   }
   field MaxHumiditySource {
      size = Small;
   }
   field RouteOrder {
      size = Small;
   }
   field ReceiptsBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set ReceiptsBlocked = ReceiptsBlockedDbQuery;
         }
      }
   }
   field ReceiptsBlocked {
      columnexclude = [true];
   }
   field ReceiptsBlockedOn {
      size = Small;
   }
   field RcptOccupiedBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set ReceiptToOccupiedBlocked = RcptOccupiedBlockedDbQuery;
         }
      }
   }
   field ReceiptToOccupiedBlocked {
      columnexclude = [true];
   }
   field ReceiptToOccupiedBlockedOn {
      size = Small;
   }
   field MixOfPartBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set MixOfPartNumberBlocked = MixOfPartBlockedDbQuery;
         }
      }
   }
   field MixOfPartNumberBlocked {
      columnexclude = [true];
   }
   field MixofPartNumbersBlockedOn {
      size = Small;
   }
   field MixCondCodeBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set MixOfCondCodesBlocked = MixCondCodeBlockedDbQuery;
         }
      }
   }
   field MixOfCondCodesBlocked {
      columnexclude = [true];
   }
   field MixOfCondCodesBlockedOn {
      size = Small;
   }
   field MixLotNoBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set MixOfLotBatchNoBlocked = MixLotNoBlockedDbQuery;
         }
      }
   }
   field MixOfLotBatchNoBlocked {
      columnexclude = [true];
   }
   field MixOfLotBatchNoBlockedOn {
      size = Small;
   }
   field ExcludStoragReqValDbQuery {
      size = Small;
      validate command {
         execute {
            set ExcludeStorageReqVal = ExcludStoragReqValDbQuery;
         }
      }
   }
   field ExcludeStorageReqVal {
      columnexclude = [true];
   }
   field ValidationExcludedOn;
   field AvailabilityControlIdRef;
   field WarehouseBayRowRef.AvailabilityControlId {
      label = "Default Part Availability Control Operative Value";
   }
   field DefaultPartAvailabilityControlOperativeValueSource {
      size = Small;
   }
   field HideInWharehouseNavigator {
      size = Small;
      label = "Hidden";
   }
   commandgroup CopyBinsfromRowCmdGroup {
      label = "Copy Bins from Row";
      command CopyBinsfromRowCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CopyRowStructureDialog for CopyRowStructure {
   label = "Copy Bins from Row";
   output(Contract, WarehouseId, BayId, RowId);
   group CopyRowStructureGroup;

   commandgroup CopyBinsFromRowCmdGroup {
      label = "Copy Bins from Row";
      command Ok;
      command Cancel;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseBayRow {
   attribute Contract Text {
      label = "Site";
   }
   attribute WarehouseId Text {
      label = "Warehouse ID";
   }
   attribute BayId Text {
      label = "Bay ID";
      format = uppercase;
      default = "'  -'";
   }
   attribute RowId Text {
      label = "Row ID";
      format = uppercase;
      default = "'  -'";
   }
   attribute BinWidthCapacity Number {
      label = "Bin Width";
   }
   attribute BinWidthSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Width_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Bin Width Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinHeightCapacity Number {
      label = "Bin Height";
   }
   attribute BinHeightSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Height_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Bin Height Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinDeptCapacity Number {
      label = "Bin Depth";
   }
   attribute BinDepthSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Dept_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Bin Depth Source";
      maxlength = 100;
      editable = [false];
   }
   attribute LengthUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(CONTRACT))";
      label = "Length UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinVolumeCapacity Number {
      label = "Bin Volume";
   }
   attribute BinVolumeOperativeValue Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Volume_Capacity(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Bin Volume Operative Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinVolumeSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Volume_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Bin Volume Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute VolumeUoM Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(CONTRACT)";
      label = "Volume UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute RowCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Row_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Row Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Bin Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute WeightUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(CONTRACT))";
      label = "Weight UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMinTemperature Number {
      label = "Min Temperature";
   }
   attribute MinTemperatureSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Min_Temperature_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Min Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMaxTemperature Number {
      label = "Max Temperature";
   }
   attribute MaxTemperatureSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Max_Temperature_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Max Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute TemperatureUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(CONTRACT))";
      label = "Temperature UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMinHumidity Number {
      label = "Min Humidity";
   }
   attribute MinHumiditySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Min_Humidity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Min Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMaxHumidity Number {
      label = "Max Humidity";
   }
   attribute MaxHumiditySource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Bin_Max_Humidity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Max Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   attribute ReceiptsBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Get_Receipts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptsBlocked Boolean("TRUE", "FALSE") {
      fetch = "RECEIPTS_BLOCKED_DB";
      label = "Receipts Blocked";
      required = [true];
      // searchable = false;
   }
   attribute ReceiptsBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Receipts_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute RcptOccupiedBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute ReceiptToOccupiedBlocked Boolean("TRUE", "FALSE") {
      fetch = "RECEIPT_TO_OCCUPIED_BLOCKED_DB";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute ReceiptToOccupiedBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Receipt_To_Occup_Blkd_Src(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Receipts Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixOfPartBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }
   attribute MixOfPartNumberBlocked Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_PART_NUMBER_BLOCKED_DB";
      label = "Mix of Part Numbers Blocked";
      required = [true];
      // searchable = false;
   }
   attribute MixofPartNumbersBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Part_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Mix of Part Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixCondCodeBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   attribute MixOfCondCodesBlocked Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_COND_CODES_BLOCKED_DB";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   attribute MixOfCondCodesBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Cond_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Mix of Condition Codes Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixLotNoBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   attribute MixOfLotBatchNoBlocked Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_LOT_BATCH_NO_BLOCKED_DB";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   attribute MixOfLotBatchNoBlockedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Mix_Of_Lot_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Mix of Lot Batch Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute ExcludStoragReqValDbQuery  Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Exclude Storage Requirement Validation";
      required = [true];
   }
   attribute ExcludeStorageReqVal Boolean("TRUE", "FALSE") {
      fetch = "EXCLUDE_STORAGE_REQ_VAL_DB";
      label = "Exclude Storage Requirement Validation";
      required = [true];
      // searchable = false;
   }
   attribute ValidationExcludedOn Text {
      fetch = "Warehouse_Bay_Row_API.Get_Excl_Storage_Req_Val_Src(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Validation Excluded on";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      label = "Default Part Availability Control Row Value";
   }
   attribute DefaultPartAvailabilityControlOperativeValueSource Text {
      fetch = "Warehouse_Bay_Row_API.Get_Avail_Control_Id_Source(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Default Part Availability Control Operative Value Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute RouteOrder Text {
      fetch = "route_order";
      label = "Route Order";
      maxlength = 5;
      required = [true];
      lovcolumn = [true];
      implementationtype = "VARCHAR2(5)";
      default = "'  -'";
   }

   attribute OldRouteOrder Text {
      fetch = "route_order";
      label = "Old Route Order";
      implementationtype = "VARCHAR2(15)";
      default = "'  -'";
   }

   attribute HideInWharehouseNavigator Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_Row_API.Get_Hide_In_Whse_Navigator_Db(CONTRACT, WAREHOUSE_ID, BAY_ID, ROW_ID)";
      label = "Hidden";
      required = [true];
   }

   reference WarehouseBayRowRef(Contract, WarehouseId, BayId, RowId) to WarehouseBayRow(Contract, WarehouseId, BayId, RowId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse ID";
   }
   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBayLov(Contract, WarehouseId, BayId) {
      label = "Bay ID";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Default Part Availability Control Row Value";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CopyBinsFromRow {
   initialcheck implementation;
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter RowId Text;
   parameter ToContract Text;
   parameter ToWarehouseId Text;
   parameter ToBayId Text;
   parameter ToRowId Text;
}
--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------
structure CopyRowStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute WarehouseId Text {
      label = "Warehouse ID";
      maxlength = 15;
   }
   attribute BayId Text {
      label = "Bay ID";
      maxlength = 5;
   }
   attribute RowId Text {
      label = "Row ID";
      maxlength = 5;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse ID";
   }
   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBayLov(Contract, WarehouseId, BayId) {
      label = "Bay ID";
   }
   reference RowIdRef(Contract, WarehouseId, BayId, RowId) to WarehouseBayRowLov(Contract, WarehouseId, BayId, RowId) {
      label = "Row ID";
   }
}