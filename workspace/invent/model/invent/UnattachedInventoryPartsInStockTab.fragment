-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2019-08-27  ChFolk  SCUXXW4-23117, Used Enumeration for FreezeFlag instead of Boolean.
-- 2019-07-24  ChFolk  SCUXXW4-22798, Included fragment ProjectDetailsFieldSet.
-- 2019-06-25  ChFolk  SCUXXW4-19472, Removed concatenation in PartNo and Description as no proper lov view supported with it.
-- 2019-05-23  fgusse  SCUXXW4-21039, Added ID for all labels for Warehouse
-- 2018-03-14  ChFolk  SCUXXW4-17207, Added dynamic dependency where necessary.
-- 2018-11-24  ChFolk  SCUXXW4-6832, Created the fragment for tbwHUInvPartInStockUnattached using MTG Version: 1.33.
-------------------------------------------------------------------------------------------------------
fragment UnattachedInventoryPartsInStockTab;
component INVENT;
layer Core;
description "This is a tab in Handling Unit is used to manually attach inventory part in stock records to the Handling Unit";

@DynamicComponentDependency MFGSTD
include fragment ControlPlanPartRevLovSelector;
include fragment PartAvailabilityControlPubSelector;
include fragment PackAccordingToHandlingUnitCapacityAssistant;
include fragment ConnectInvPartsToHandlingUnitAssistant;
include fragment ProjectDetailsFieldSet;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- MAIN PAGES ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command AttachToHandlingUnitFromUnattachedInvPartInStockCommand for UnattachedInventoryPartsInStock {
   label = "Attach to Handling Unit";
   enabled = [(ParentContract = null and count(Contract) = 1 and count(LocationNo) = 1) or(ParentContract != null and Contract = ParentContract)];
   mode = SelectedRecords;
   variable ParentHuStructureVar {
      type = Structure(ParentHandlingUnitDetailStructure);
   }
   bulkexecute {
      set ConnectedSorceVar = "INVENT";
      call GetStocksToAttachObjids(Selection) into ObjidListVar;
      stringify(records, "PARENT_HANDLING_UNIT_ID=${ParentHandlingUnitId}^PARENT_HANDLING_UNIT_TYPE_ID=${ParentHandlingUnitTypeId}^", JSON) into SelectionVar;
      call GetParentDetails(SelectionVar) into ParentHuStructureVar;

      assistant ConnectInvPartsToHandlingUnitAssistant(ConnectedSorceVar, ParentHuStructureVar.ParentHandlingUnitId, ParentHuStructureVar.ParentHandlingUnitTypeId, ObjidListVar) {
         when OK {
            exit OK;
         }
      }
   }
}
command PackAccToHuCapacityFromUnattachedInvPartInStockCommand for UnattachedInventoryPartsInStock {
   label = "Pack According to Handling Unit Capacity";
   mode = SingleRecord;
   enabled = [AvailableQty > 0 and CatchQtyOnhand = null and(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "SHIPMENT" or LocationTypeDb = "MANUFACTURING")
   and(ReceiptAndIssueSerialTracking = "FALSE" or(ReceiptAndIssueSerialTracking = "TRUE" and SerialNo = "*")) and PartHandlingUnitType != null];
   variable NewhandlingUnitsStr {
      type = Text;
   }
   execute {
      assistant PackAccToHandlingUnitCapacityAssistant(PartNo, PartDescription, Contract, ConfigurationId, LocationNo, LotBatchNo,
      SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, AvailableQty, UnitMeas, ParentHandlingUnitId, null, null, null, null, null) into(NewhandlingUnitsStr) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------
list UnattachedInventoryPartsInStockList for UnattachedInventoryPartsInStock {
   field Contract {
      size = Small;
   }
   field PartNo;
   field PartDescription;

   field ConfigurationIdRef {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   field ConditionCodeDescription {
      size = Small;
   }
   @DynamicComponentDependency MFGSTD
   lov EngChgLevelRef with ReferenceControlPlanPartRevLovSelector {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field ActivitySeq;
   field Warehouse {
      size = Small;
   }
   field BayNo {
      size = Small;
   }
   field RowNo {
      size = Small;
   }
   field TierNo {
      size = Small;
   }
   field BinNo {
      size = Small;
   }
   field RotablePartPoolIdRef {
      size = Small;
   }
   field QtyOnhand;
   field CatchQtyOnhand;
   field UnifiedQtyOnhand;
   field UnifiedCatchQtyOnhand;
   field QtyReserved;
   field UnifiedQtyReserved;
   field QtyInTransit;
   field CatchQtyInTransit;
   field UnifiedQtyInTransit;
   field UnifiedCatchQtyInTransit;
   field AvailableQty;
   field UnitMeas;
   field CatchUom {
      size = Small;
   }
   field UnifiedUom {
      size = Small;
   }
   field UnifiedCatchUom {
      size = Small;
   }
   field FreezeFlag {
      enumerationtrue = "Yes";
 	   enumerationfalse = "No";
      size = Small;
   }
   field LastActivityDate;
   field LastCountDate;
   field LocationType {
      size = Small;
   }
   field LocationTypeDb {
      columnvisible = [false];
   }
   field ReceiptDate;
   lov AvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      label = "Availability Control";
      description = AvailabilityControlIdRef.Description;
   }
   field AvgUnitTransitCost;
   field CountVariance;
   field ExpirationDate;
   field InventoryValue {
      size = Small;
   }
   field TotalInventoryValue {
      size = Small;
   }
   field Currency {
      size = Small;
   }
   field PartOwnership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field PartAcquisitionValue;
   @DynamicComponentDependency ORDER
   field TotalAcquisitionValue;
   @DynamicComponentDependency ORDER
   field AcquisitionCurrency {
      size = Small;
   }
   fieldset ProjectDetailsFieldSet;
   field WarehouseRef.RemoteWarehouse {
      size = Small;
      label = "Remote Warehouse";
   }
   field ParentHandlingUnitId {
      columnexclude = [true];
   }
   field ParentHandlingUnitTypeId {
      columnexclude = [true];
   }
   field ParentContract {
      columnvisible = [false];
   }
   field ParentLocationNo {
      columnvisible = [false];
   }
   command AttachToHandlingUnitFromUnattachedInvPartInStockCommand;
   command PackAccToHuCapacityFromUnattachedInvPartInStockCommand;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset UnattachedInventoryPartsInStockSet for UnattachedInventoryPartsInStock;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity UnattachedInventoryPartsInStock using InventoryPartInStock {
   crud = Read;
   from = "inventory_part_in_stock";
   exec = "INVENTORY_PART_IN_STOCK_API";
   where = "HANDLING_UNIT_ID = 0 AND (QTY_ONHAND - QTY_RESERVED) > 0 AND LOCATION_TYPE_DB NOT IN ('ARRIVAL', 'QA')";
   use attributes = Warehouse, BayNo, RowNo, TierNo, BinNo, RotablePartPoolId, QtyOnhand, CatchQtyOnhand, QtyReserved, QtyInTransit, CatchQtyInTransit, LastActivityDate, LastCountDate, LocationType, ReceiptDate, AvailabilityControlId, AvgUnitTransitCost, CountVariance, ExpirationDate, PartOwnership, ProjectId;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
   }
   attribute PartDescription Text {
      fetch = "INVENTORY_PART_API.Get_Description(CONTRACT, PART_NO)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
   }
   attribute SerialNo Text {
      fetch = "serial_no";
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no ))";
      label = "Condition Code Description";
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R";
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
   }
   attribute Warehouse Text {
      fetch = "warehouse";
      label = "Warehouse ID";
   }
   attribute BayNo Text {
      fetch = "bay_no";
      label = "Bay ID";
   }
   attribute RowNo Text {
      fetch = "row_no";
      label = "Row ID";
   }
   attribute TierNo Text {
      fetch = "tier_no";
      label = "Tier ID";
   }
   attribute BinNo Text {
      fetch = "bin_no";
      label = "Bin ID";
   }
   attribute RotablePartPoolId Text {
      fetch = "rotable_part_pool_id";
      label = "Rotable Part Pool ID";
   }
   attribute QtyOnhand Number {
      fetch = "qty_onhand";
      label = "Qty Onhand";
   }
   attribute CatchQtyOnhand Number {
      fetch = "catch_qty_onhand";
      label = "Catch Qty Onhand";
   }
   attribute UnifiedQtyOnhand Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_onhand,'REMOVE')";
      label = "Unified Qty Onhand";
   }
   attribute UnifiedCatchQtyOnhand Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,catch_qty_onhand,'REMOVE','CATCH')";
      label = "Unified Catch Qty Onhand";
   }
   attribute QtyReserved Number {
      fetch = "qty_reserved";
      label = "Qty Reserved";
   }
   attribute UnifiedQtyReserved Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_reserved,'REMOVE')";
      label = "Unified Qty Reserved";
   }
   attribute QtyInTransit Number {
      fetch = "qty_in_transit";
      label = "Qty In Transit";
   }
   attribute CatchQtyInTransit Number {
      fetch = "catch_qty_in_transit";
      label = "Catch Qty in Transit";
   }
   attribute UnifiedQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,qty_in_transit,'REMOVE')";
      label = "Unified Qty In Transit";
   }
   attribute UnifiedCatchQtyInTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(contract,part_no,catch_qty_in_transit,'REMOVE','CATCH')";
      label = "Unified Catch Qty In Transit";
   }
   attribute AvailableQty Number {
      fetch = "qty_onhand - qty_reserved";
      label = "Available Qty";
   }
   attribute UnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
      label = "UoM";
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
   }
   attribute UnifiedUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(part_no)";
      label = "Unified UoM";
   }
   attribute UnifiedCatchUom Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(part_no,'CATCH')";
      label = "Unified Catch UoM";
   }
   attribute FreezeFlag Enumeration(GenYesNo) {
      fetch = "freeze_flag_db";
      label = "Freeze Flag";
      required = [true];
   }
   attribute LastActivityDate Timestamp {
      fetch = "last_activity_date";
      label = "Last Activity Date";
   }
   attribute LastCountDate Date {
      fetch = "last_count_date";
      label = "Latest Count Date";
   }
   attribute LocationType Enumeration(InventoryLocationType) {
      fetch = "location_type_db";
      label = "Location Type";
   }
   attribute LocationTypeDb Text {
      fetch = "location_type_db";
      label = "Location Type Db";
   }
   attribute ReceiptDate Timestamp {
      fetch = "receipt_date";
      label = "Receipt Date";
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
   }
   attribute AvgUnitTransitCost Number {
      fetch = "avg_unit_transit_cost";
      label = "Avg Unit Transit Cost";
   }
   attribute CountVariance Number {
      fetch = "count_variance";
      label = "Count Variance";
   }
   attribute ExpirationDate Date {
      fetch = "expiration_date";
      label = "Expiration Date";
   }
   attribute InventoryValue Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Company_Owned_Unit_Cost(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id)";
      label = "Inventory Value";
   }
   attribute TotalInventoryValue Text {
      fetch = "(Inventory_Part_In_Stock_API.Get_Company_Owned_Unit_Cost(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id)) * qty_onhand";
      label = "Total Inventory Value";
   }
   attribute Currency Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(contract))";
      label = "Currency";
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "part_ownership_db";
      label = "Ownership";
   }
   attribute Owner Text {
      fetch = "NVL(owning_customer_no,owning_vendor_no)";
      label = "Owner";
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(contract,part_no,configuration_id,location_no,lot_batch_no,serial_no,eng_chg_level,waiv_dev_rej_no,activity_seq, handling_unit_id)";
      label = "Owner Name";
   }
   @DynamicComponentDependency ORDER
   attribute PartAcquisitionValue Number {
      fetch = "Cust_Part_Acq_Value_API.Get_Acquisition_Value(owning_customer_no,part_no,serial_no,lot_batch_no)";
      label = "Part Acquisition Value";
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute TotalAcquisitionValue Number {
      fetch = "qty_onhand*Cust_Part_Acq_Value_API.Get_Acquisition_Value(owning_customer_no,part_no,serial_no,lot_batch_no)";
      label = "Total Acquisition Value";
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute AcquisitionCurrency Text {
      fetch = "Cust_Part_Acq_Value_API.Get_Currency_Code(owning_customer_no,part_no,serial_no,lot_batch_no)";
      label = "Acquisition Currency";
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ReceiptAndIssueSerialTracking Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      label = "Receipt and Issue Serial Tracking";
   }
   attribute PartHandlingUnitType Text {
      fetch = "Part_Handling_Unit_API.Get_Handling_Unit_Type_Id(part_no, Inventory_Part_API.Get_Unit_Meas(contract, part_no))";

   }
   attribute ParentHandlingUnitId Number {
      fetch = "''";
   }
   attribute ParentHandlingUnitTypeId Text {
      fetch = "''";
   }
   attribute ParentContract Text {
      fetch = "''";
   }
   attribute ParentLocationNo Text {
      fetch = "''";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference WarehouseRef(Contract, Warehouse) to Warehouse(Contract, WarehouseId);
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   @DynamicComponentDependency MFGSTD
   reference EngChgLevelRef(Contract, PartNo, EngChgLevel) to ControlPlanPartRevLov(Contract, PartNo, EngChgLevel) {
      label = "Revision No";
   }
   reference RotablePartPoolIdRef(Contract, RotablePartPoolId) to RotablePoolSite(Contract, RotablePartPoolId) {
      label = "Rotable Part Pool ID";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function GetStocksToAttachObjids Text {
   parameter Selection Text;
}

function GetParentDetails Structure(ParentHandlingUnitDetailStructure) {
   parameter Selection Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ParentHandlingUnitDetailStructure {
   attribute ParentHandlingUnitId Number;
   attribute ParentHandlingUnitTypeId Text;
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

