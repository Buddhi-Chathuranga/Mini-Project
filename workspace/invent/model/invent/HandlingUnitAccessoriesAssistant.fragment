-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2019-05-23  ChFolk  SCUXXW4-17145, Changed the label of ExitCommand. Concetenate UOM with respective qty, volume and weight.
-- 2019-05-14  DaZase  SCUXXW4-19631, Added initialcheck to all unbounded actions.
-- 2019-04-02  ChFolk  SCUXXW4-18327, Modified CapacityExceedCheckCommand to pass the parameter without record.
-- 2018-12-26  ChFolk  SCUXXW4-5501, Created the fragment for dlgHandlingUnitAccessories using MTG Version: 1.34.
-------------------------------------------------------------------------------------------------------
fragment HandlingUnitAccessoriesAssistant;
component INVENT;
layer Core;
description "Assistant use to connect any accessories required for a handling unit.";


----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant HandlingUnitAccessoriesAssistant using HandlingUnitAccessoriesSet {
   label = "Handling Unit Accessories";
   input(HandlingUnitId);

   singlestep {
      list AccessoryOnHandlingUnitList(AccessoryOnHandlingUnitArray);
   }
   command ExitCommand;
}

--------------------------------- COMMANDS ----------------------------------
command ExitCommand for HandlingUnitAccessoriesVirtual {
   label = "Close";
   enabled = [not component.AccessoryOnHandlingUnitList.IsDirty];

   execute {
      exit OK;
   }
}

command CapacityExceedCheckCommand for AccessoriesOnHandlingUnit {
   execute {
      call CheckCapacityExceed(HandlingUnitId);
   }
}
--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------
list AccessoryOnHandlingUnitList for AccessoriesOnHandlingUnit {
   label = "";
   editmode = SingleRowEdit;

   crudactions {
      after command CapacityExceedCheckCommand;
   }
   field HandlingUnitId {
      columnexclude = [true];
   }
   lov HandlingUnitAccessoryIdRef with ReferenceHandlingUnitAccessorySelector {
      label = "Handling Unit Accessory";
      description = HandlingUnitAccessoryIdRef.Description;
   }
   measure Quantity(HandlingUnitAccessoryIdRef.UnitCode) {
      label = "Quantity";
      uniteditable = [false];
   }
   measure HandlingUnitAccessoryIdRef.Weight(HandlingUnitAccessoryIdRef.UomForWeight) {
      label = "Net Weight";
   }
   field HandlingUnitAccessoryIdRef.AdditiveVolume {
      label = "Additive Volume";
   }
   measure HandlingUnitAccessoryIdRef.Volume(HandlingUnitAccessoryIdRef.UomForVolume) {
      label = "Outer Volume";
   }

}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------




--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset HandlingUnitAccessoriesSet for HandlingUnitAccessoriesVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AccessoriesOnHandlingUnit using AccessoryOnHandlingUnit {
   crud = Read, Update, Create, Delete;

   from = "accessory_on_handling_unit";
   exec = "ACCESSORY_ON_HANDLING_UNIT_API";
   keys = HandlingUnitId, HandlingUnitAccessoryId {
      where = "HANDLING_UNIT_ID = :HandlingUnitId and HANDLING_UNIT_ACCESSORY_ID = :HandlingUnitAccessoryId";
   }

   use attributes = Quantity;
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
      editable = [ETag = null];
   }
   attribute HandlingUnitAccessoryId Text {
      fetch = "handling_unit_accessory_id";
      label = "Handling Unit Accessory ID";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Quantity Number {
      fetch = "quantity";
      label = "Quantity";
      required = [true];
   }
   reference HandlingUnitAccessoryIdRef(HandlingUnitAccessoryId) to HandlingUnitAccessory(HandlingUnitAccessoryId);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CheckCapacityExceed {
   initialcheck none;
   supportwarnings = [true];
   parameter HandlingUnitId Number;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual HandlingUnitAccessoriesVirtual {
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
   }
   array AccessoryOnHandlingUnitArray(HandlingUnitId) to AccessoriesOnHandlingUnit(HandlingUnitId);
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------