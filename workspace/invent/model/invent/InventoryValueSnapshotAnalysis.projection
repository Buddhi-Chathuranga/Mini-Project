--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-06-19  JaThlk  SCUXXW4-11617, Included UserAllowedSiteLovSelector fragment instead of UserAllowedSiteLov.
-- 2018-04-12  YANILK  SCUXXW4-6990, Converted from tbwInventoryValueSnapshott using MTG Version: 1.15
--------------------------------------------------------------------------------------

projection InventoryValueSnapshotAnalysis;
component INVENT;
layer Core;
description "Use this API to view the current inventory values per site, part number, and inventory part cost level. Unlike the Inventory Value per Period window, it does not display inventory values per period";
category Users;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InventoryValueSnapshots for InventoryValueSnapshot;

------------------------------ ENTITY DETAILS -------------------------------


@Override
query InventoryValueSnapshot {
   from = "inventory_part_value_snapshot";
   keys = Contract, PartNo, ConfigurationId, SerialNo, LotBatchNo, ConditionCode {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and SERIAL_NO = :SerialNo and LOT_BATCH_NO = :LotBatchNo and CONDITION_CODE = :ConditionCode";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "DESCRIPTION";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute LotBatchNo Text {
      fetch = "LOT_BATCH_NO";
      label = "Lot/Batch No";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE";
      label = "Cond Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute UnitMeas Text {
      fetch = "UNIT_MEAS";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute QtyWaivDevRej Number {
      fetch = "QTY_WAIV_DEV_REJ";
      label = "W/D/R Qty";
      editable = [false];
   }
   attribute Quantity Number {
      fetch = "QUANTITY";
      label = "Quantity";
      editable = [false];
   }
   attribute QtyInTransit Number {
      fetch = "QTY_IN_TRANSIT";
      label = "In Transit Qty";
      editable = [false];
   }
   attribute QtyAtCustomer Number {
      fetch = "QTY_AT_CUSTOMER";
      label = "Qty at Customer";
      editable = [false];
   }
   attribute TotalValue Number {
      fetch = "TOTAL_VALUE";
      label = "Total Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute UnitCost Number {
      fetch = "UNIT_COST";
      label = "Unit Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute AbcClass Text {
      fetch = "ABC_CLASS";
      label = "ABC Class";
      maxlength = 1;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "PLANNER_BUYER";
      label = "Planner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AccountingGroup Text {
      fetch = "ACCOUNTING_GROUP";
      label = "Accounting Group";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "PART_PRODUCT_FAMILY";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "PART_PRODUCT_CODE";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute TypeCode Enumeration(InventoryPartType) {
      fetch = "TYPE_CODE_DB";
      label = "Part Type";
      editable = [false];
   }
   attribute PrimeCommodity Text {
      fetch = "PRIME_COMMODITY";
      label = "Commodity Group 1";
      maxlength = 5;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "SECOND_COMMODITY";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute AssetClass Text {
      fetch = "ASSET_CLASS";
      label = "Asset Class";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part No";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlanner(PlannerBuyer) {
      label = "Planner";
   }
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PrimeCommodityRef(PrimeCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference AssetClassRef(AssetClass) to AssetClass(AssetClass) {
      label = "Asset Class";
   }
}

