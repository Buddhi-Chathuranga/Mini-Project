---------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------------------
-- 2021-02-02  BudKlk  SCZ-13375, Increaseed the size of the columns OrderNo, LineNo and RelNo.
-- 2020-10-15  BudKlk  Bug 155905(SC2020R1-10616), Increaseed the size of the columns Line_No and Rel_No.
-- 2019-11-15  JaThlk  SCXTEND-1640, Moved the where condition from the selector to query.
-- 2019-07-26  ChFolk  SCUXXW4-22798, Modified project information to increase performance.
-- 2019-05-21  DaZase  SCUXXW4-19692, Added initialcheck to all unbounded actions.
-- 2019-04-11  JaThlk  SCUXXW4-18463, Added the where clause to GetShortageDemandByPart.
-- 2019-01-09  JaThlk  SCUXXW4-6457, Converted from frmShortageDemand using MTG Version: 1.33
---------------------------------------------------------------------------------------------

projection ResolveShortagesForInventoryPart;
component INVENT;
layer Core;
description "View ShortageDemand";
category Users;
include fragment UserAllowedSiteLovSelector;

---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.33
// Enterprise Explorer Source: frmShortageDemand
// Language: en-US

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ShortageDemandByPartSet for ShortageDemandByPart;
entityset ShortagePartInfoVirtualSet for ShortagePartInfoVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
@Override
query ShortageDemandByPart {
   from = "shortage_demand_by_part";
   keys = PartNo, Contract, PartOwnership, ProjectId, ActivitySeq, ConditionCode, OwnerNo;
   where = "(CASE
             WHEN part_ownership = 'CUSTOMER OWNED' AND owning_customer_no = REPLACE((SUBSTR(objid, INSTR(objid, CHR(31), 1, 3), INSTR(objid, CHR(31), 1, 4) - INSTR(objid, CHR(31), 1, 3)) ),CHR(31), '') THEN 1
             WHEN (part_ownership = 'CONSIGNMENT' OR part_ownership = 'SUPPLIER LOANED') AND owning_vendor_no = REPLACE((SUBSTR(objid, INSTR(objid, CHR(31), 1, 5), INSTR(objid, CHR(31), 1, 6) - INSTR(objid, CHR(31), 1, 5)) ),CHR(31), '') THEN 1
             WHEN part_ownership NOT IN ('CUSTOMER OWNED', 'CONSIGNMENT', 'SUPPLIER LOANED') THEN 1
             ELSE 0 END) = 1";
   ludependencies = InvPartShortageDemand;
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 30;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
   }
   attribute PartOwnership2 Text {
      fetch = "Part_Ownership_API.Decode(part_ownership)";
      label = "Part Ownership";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyToDistribute Number {
      fetch = "inventory_part_in_stock_api.get_inventory_quantity(contract_             => contract,
                                                                  part_no_              => part_no,
                                                                  configuration_id_     => '*',
                                                                  qty_type_             => 'AVAILABLE',
                                                                  expiration_control_   => 'NOT EXPIRED',
                                                                  supply_control_db_    => 'NETTABLE',
                                                                  ownership_type1_db_   => part_ownership,
                                                                  ownership_type2_db_   => DECODE(part_ownership,'COMPANY OWNED','CONSIGNMENT'),
                                                                  owning_customer_no_   => owning_customer_no,
                                                                  owning_vendor_no_     => owning_vendor_no,
                                                                  location_type1_db_    => 'PICKING',
                                                                  location_type2_db_    => 'SHIPMENT',
                                                                  location_type3_db_    => 'F',
                                                                  include_standard_     => DECODE(project_id, '*', 'TRUE', 'FALSE'),
                                                                  include_project_      => DECODE(project_id, '*', 'FALSE', 'TRUE'),
                                                                  activity_seq_         => activity_seq,
                                                                  project_id_           => project_id,
                                                                  condition_code_       => DECODE(condition_code, '*', null, condition_code))";
      label = "Qty to Distribute";
      editable = [false];
   }
   attribute ProjAvailableQty Number {
      fetch = "DECODE(project_id, '*', null, inventory_part_in_stock_api.get_inventory_quantity(contract_              => contract,
                                                                                                part_no_               => part_no,
                                                                                                configuration_id_      => '*',
                                                                                                qty_type_              => 'AVAILABLE',
                                                                                                expiration_control_    => 'NOT EXPIRED',
                                                                                                supply_control_db_     => 'NETTABLE',
                                                                                                ownership_type1_db_    => part_ownership,
                                                                                                ownership_type2_db_    => DECODE(part_ownership,'COMPANY OWNED','CONSIGNMENT'),
                                                                                                owning_customer_no_    => owning_customer_no,
                                                                                                owning_vendor_no_      => owning_vendor_no,
                                                                                                location_type1_db_     => 'PICKING',
                                                                                                location_type2_db_     => 'SHIPMENT',
                                                                                                include_standard_      => DECODE(project_id, '*', 'TRUE', 'FALSE'),
                                                                                                include_project_       => DECODE(project_id, '*', 'FALSE', 'TRUE'),
                                                                                                project_id_            => project_id,
                                                                                                condition_code_        => DECODE(condition_code, '*', null, condition_code)))";
      label = "Proj Available Qty";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "NVL(owning_customer_no,owning_vendor_no)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
   }
   attribute OwnerNo Text {
      fetch = "NVL(NVL(owning_customer_no,owning_vendor_no), 'DUMMY')";
      label = "Owner";
      maxlength = 100;
      editable = [false];
   }
   attribute OwningVendorNo Text {
      fetch = "owning_vendor_no";
      maxlength = 20;
      editable = [false];
   }
   attribute OwningCustomerNo Text {
      fetch = "owning_customer_no";
      maxlength = 20;
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "part_ownership";
      maxlength = 20;
      editable = [false];
   }

   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   array ShortageDemandArray(PartNo, Contract) to ShortageDemand(PartNo, Contract) {
      where = "(((:parent.ProjectId = '*' and :child.ProjectSourced = 'N') or (:parent.ProjectId != '*' and :child.ProjectSourced = 'Y')) and (:child.ActivitySeq = :parent.ActivitySeq) and (:parent.PartOwnership IS NULL or :child.PartOwnership = :parent.PartOwnership) and (:parent.ConditionCode IS NULL or :child.ConditionCode = :parent.ConditionCode) and (:parent.OwningCustomerNo IS NULL or :child.OwningCustomerNo = :parent.OwningCustomerNo) and (:parent.OwningVendorNo IS NULL or :child.OwningVendorNo = :parent.OwningVendorNo))";
   }
}

@Override
entity ShortageDemand using InvPartShortageDemand {
   crud = Read, Update;
   from = "shortage_demand_uiv";
   keys = PartNo, Contract, OrderNo, LineNo, RelNo, LineItemNo;
   keyfetchoncreate = [true];
   supportwarnings = [true];
   attribute QtyShort Number {
      fetch = "qty_short";
      label = "Shortage Qty";
      editable = [false];
   }
   attribute OrderType Text {
      fetch = "order_type";
      label = "Order Type";
      maxlength = 200;
      editable = [false];
   }
   attribute OrderNo Text {
      fetch = "order_no";
      label = "Order Ref 1";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute LineNo Text {
      fetch = "line_no";
      label = "Order Ref 2";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute RelNo Text {
      fetch = "rel_no";
      label = "Order Ref 3";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute LineItemNo Number {
      fetch = "line_item_no";
      label = "Order Ref 4";
      editable = [false];
   }
   attribute DueDate Date {
      fetch = "due_date";
      label = "Planned Due Date";
      editable = [false];
   }
   attribute QtyRequired Number {
      fetch = "qty_required";
      label = "Required Qty";
      editable = [false];
   }
   attribute QtyReserved Number {
      fetch = "qty_reserved";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtyIssued Number {
      fetch = "qty_issued";
      label = "Issued Qty";
      editable = [false];
   }
   attribute StatusDesc Text {
      fetch = "status_desc";
      label = "Line Status";
      maxlength = 35;
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 30;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute OrderClass Text {
      fetch = "order_class";
      label = "Mat Req Class";
      maxlength = 20;
      editable = [false];
   }
   attribute StatusCode Text {
      fetch = "status_code";
      label = "Status";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
   }
   attribute ProjectSourced Text {
      fetch = "project_sourced";
      maxlength = 1;
   }
   attribute QtyToReserve Number {
      label = "Qty to Reserve";
      fetch = "NULL";
      editable = [true];
   }

   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }

   action ReserveQuantity {
      parameter QtyToReserve Number;
      supportwarnings = [true];
      ludependencies = InvPartShortageDemand;
   }

}

---------------------------------- ACTIONS ----------------------------------
action ClearInventoryPartShortages {
   initialcheck ShortageDemandUivInitialCheck(OrderNo, LineNo, RelNo, LineItemNo, OrderType, OrderClass);
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter OrderType Text;
   parameter OrderClass Text;
   ludependencies = InvPartShortageDemand;

}

action ResolveShortageDemand {
   initialcheck implementation;
   parameter ParentObjkey Text;
   supportwarnings = [true];
   ludependencies = ShortageDemandByPart;
   ludependencies = InvPartShortageDemand;

}
--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual ShortagePartInfoVirtual {
   attribute Selection Text;
   attribute PartNo Text;
   attribute Contract Text;
   attribute QtyToDistribute Number;
   array ShortagePartLinesArray(PartNo, Contract) to ShortagePartLinesVirtual(PartNo, Contract);


}

virtual ShortagePartLinesVirtual {
   crud = Read, Update;

   attribute QtyToReserve Number {
      editable = [true];
   }
   attribute QtyShort Number {
      fetch = "qty_short";
      label = "Shortage Qty";
      editable = [false];
   }
   attribute OrderType Text {
      fetch = "order_type";
      label = "Order Type";
      maxlength = 200;
      editable = [false];
   }
   attribute OrderNo Text {
      fetch = "order_no";
      label = "Order Ref 1";
      maxlength = 12;
      editable = [false];
      format = uppercase;
   }
   attribute LineNo Text {
      fetch = "line_no";
      label = "Order Ref 2";
      maxlength = 6;
      editable = [false];
      format = uppercase;
   }
   attribute RelNo Text {
      fetch = "rel_no";
      label = "Order Ref 3";
      maxlength = 6;
      editable = [false];
      format = uppercase;
   }
   attribute LineItemNo Number {
      fetch = "line_item_no";
      label = "Order Ref 4";
      editable = [false];
   }
   attribute DueDate Date {
      fetch = "due_date";
      label = "Planned Due Date";
      editable = [false];
   }
   attribute QtyRequired Number {
      fetch = "qty_required";
      label = "Required Qty";
      editable = [false];
   }
   attribute QtyReserved Number {
      fetch = "qty_reserved";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtyIssued Number {
      fetch = "qty_issued";
      label = "Issued Qty";
      editable = [false];
   }
   attribute StatusDesc Text {
      fetch = "status_desc";
      label = "Line Status";
      maxlength = 35;
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute OrderClass Text {
      fetch = "order_class";
      label = "Mat Req Class";
      maxlength = 20;
      editable = [false];
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------




