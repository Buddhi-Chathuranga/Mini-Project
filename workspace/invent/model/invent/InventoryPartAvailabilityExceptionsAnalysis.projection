--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-05-15  DaZase  SCUXXW4-19646, Added initialcheck to all unbounded actions.
-- 2019-03-14  StHose  SCUXXW4-7075, Getting Project Info using Get calls for performance
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-05-22  SWiclk  SCUXXW4-7075, Implemented the Confirm button action.
-- 2018-05-14  YANILK  SCUXXW4-7075, Converted from tbwOverviewInvPartAvailExc Code using MTG Version: 1.15
--------------------------------------------------------------------------------------

projection InventoryPartAvailabilityExceptionsAnalysis;
component INVENT;
layer Core;
description "Use this API to view the exception messages generated from the Generate Inventory Part Availability Exceptions dialog box.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment IntorderPartLov2Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartsAvailabilityExceptions for InventoryPartsAvailabilityException;


------------------------------ ENTITY DETAILS -------------------------------

@Override
entity InventoryPartsAvailabilityException using InvPartAvailException {
   crud = Read, Update;
   from = "inv_part_avail_exception_all";
   keys = PartNo, Contract, ConfigurationId, ProjectId, ExceptionMessageDb {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and CONFIGURATION_ID = :ConfigurationId and PROJECT_ID = :ProjectId and EXCEPTION_MESSAGE_DB = :ExceptionMessageDb";
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT, PART_NO)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SiteDescription Text {
      fetch = "Site_API.Get_Description(CONTRACT)";
      label = "Site Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute UnitMeas Text {
      fetch = "UNIT_MEAS";
      label = "Inventory UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute ExceptionMessageDb Text {
      fetch = "EXCEPTION_MESSAGE_DB";
      label = "Exception Message";
      maxlength = 20;
      editable = [false];
   }
   attribute TypeCode Text {
      fetch = "TYPE_CODE";
      label = "Part Type";
      maxlength = 100;
      editable = [false];
   }
   attribute ManufLeadtime Text {
      fetch = "MANUF_LEADTIME";
      label = "Manufacturing Lead Time";
      maxlength = 100;
      editable = [false];
   }
   attribute PurchLeadtime Text {
      fetch = "PURCH_LEADTIME";
      label = "Purchasing Lead Time";
      maxlength = 100;
      editable = [false];
   }
   attribute OrderRequisition Text {
      fetch = "ORDER_REQUISITION";
      label = "Default Supply Type";
      maxlength = 100;
      editable = [false];
   }
   attribute PlanningMethod Text {
      fetch = "PLANNING_METHOD";
      label = "Planning Method";
      maxlength = 100;
      editable = [false];
   }
   attribute SecondCommodity Text {
      fetch = "SECOND_COMMODITY";
      label = "Commodity Group 2";
      maxlength = 5;
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "PLANNER_BUYER";
      label = "Planner";
      maxlength = 20;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute PartProductFamily Text {
      fetch = "PART_PRODUCT_FAMILY";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "PART_PRODUCT_CODE";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute PartStatus Text {
      fetch = "PART_STATUS";
      label = "Part Status";
      maxlength = 100;
      editable = [false];
   }
   attribute UnitCost Text {
      fetch = "Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Method(CONTRACT, PART_NO , CONFIGURATION_ID, NULL, NULL)";
      label = "Unit Cost";
      maxlength = 2000;
      editable = [false];
   }
   attribute DateCreated Date {
      label = "Created";
      required = [true];
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
   }
   attribute QtyReserved Number {
      label = "Reserved Qty";
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
   }
   attribute SafetyStock Text {
      fetch = "SAFETY_STOCK";
      label = "Safety Stock";
      maxlength = 100;
      editable = [false];
   }
   attribute SafetyLeadTime Text {
      fetch = "SAFETY_LEAD_TIME";
      label = "Safety Lead Time";
      maxlength = 100;
      editable = [false];
   }
   attribute TotalQtyDemand Number {
      label = "Total Demand Qty";
   }
   attribute TotalQtySupply Number {
      label = "Total Supply Qty";
   }
   attribute ConfirmedDb Boolean("TRUE", "FALSE") {
      fetch = "CONFIRMED_DB";
      label = "Confirmed";
      required = [true];
      editable = [false];
   }
   attribute DateConfirmed Date {
      label = "Confirmation Date";
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute ConfirmedByUserId Text {
      label = "Confirmed By User ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "PROJECT_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   reference ProjectRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   reference PartNoRef(Contract, PartNo) to IntorderPartLov2(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }

   reference SecondCommodityRef(SecondCommodity) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 2";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlanner(BuyerCode) {
      label = "Planner";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
}

---------------------------------- ACTIONS ----------------------------------
action ConfirmMessage {
   initialcheck implementation;
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter ExceptionMessageDb Text;
   parameter ProjectId Text;
   ludependencies = InvPartAvailException;
}
