--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-09-25  JaThlk  SC2020R1-9887, Moved the method signature of SaveCapacityAndConditions to destination projections.
--  2019-02-20  STHOSE  SCUXXW4-6294, Added code for InventoryPart
--  2019-01-03  KoDelk  SCUXXW4-15164, Created
---------------------------------------------------------------------------------
fragment ModifyCapacitiesAndConditionsAssistant;
component INVENT;
layer Core;
description "Use this fragment to impliment modify functionality to capacities and conditions.";

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant ConnectCustomersAssistant using CapacitiesAndConditionsVirtualSet {
   label = "Modify Capacities and Conditions";
   savemode = OnLostFocus;
   input(Source, Contract, WarehouseId, BayId, RowId, TierId, BinId);

   steps {
      step {
         group CapacityGroup;
         group InventoryPartCapacityGroup;
         group CarryingCapacityGroup;
         group StorageConditionGroup;
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {

      execute {
         call SaveCapacityAndConditions();
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

---------------------------------- GROUPS -----------------------------------
group CapacityGroup for CapacitiesAndConditionsVirtual {
   label = "Bin Cubic Capacity";
   visible = [Source != "InventoryPart"];
   measure Width(LengthUom);
   measure Height(LengthUom);
   measure Depth(LengthUom);
   measure Volume(VolumeUom);
}
group InventoryPartCapacityGroup for CapacitiesAndConditionsVirtual {
   label = "Dimension Capacity";
   visible = [Source = "InventoryPart"];
   measure Width(LengthUom);
   measure Height(LengthUom);
   measure Depth(LengthUom);
   field Volume {
      label = "Qty Per Volume";
      validate command {
         execute {
            if [Volume <= 0] {
               set Volume = null;
                -- Avoid division by 0
            }
         }
      }
   }
}
group CarryingCapacityGroup for CapacitiesAndConditionsVirtual {
   label = "Carrying Capacity";

   measure Bay(WeightUom) {
      visible = [Source != "WarehouseBayRow" and Source != "WarehouseBayTier" and Source != "WarehouseBayBin" and Source != "InventoryPart"];
   }
   measure RowValue(WeightUom) {
      visible = [Source != "WarehouseBayTier" and Source != "WarehouseBayBin" and Source != "InventoryPart"];
   }
   measure Tier(WeightUom) {
      visible = [Source != "WarehouseBayRow" and Source != "WarehouseBayBin" and Source != "InventoryPart"];
   }
   measure Bin(WeightUom) {
      visible = [Source != "InventoryPart"];
   }
   measure Weight(WeightUom) {
      visible = [Source = "InventoryPart"];
   }
}
group StorageConditionGroup for CapacitiesAndConditionsVirtual {
   label = "Storage Conditions";

   measure MinTemperature(TemperatureUom);
   measure MaxTemperature(TemperatureUom);
   measure MinHumidity(HumidityUom);
   measure MaxHumidity(HumidityUom);
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CapacitiesAndConditionsVirtualSet for CapacitiesAndConditionsVirtual;

------------------------------ ENTITY DETAILS -------------------------------
virtual CapacitiesAndConditionsVirtual {
   attribute Source Text;
   attribute Contract Text;
   attribute WarehouseId Text;
   attribute BayId Text;
   attribute RowId Text;
   attribute TierId Text;
   attribute BinId Text;
   attribute PartNo Text;
   attribute Width Number;
   attribute Height Number;
   attribute Depth Number;
   attribute Volume Number;
   attribute Bay Number;
   attribute RowValue Number {
      label = "Row";
   }
   attribute Tier Number;
   attribute Bin Number;
   attribute Weight Number;
   attribute MinTemperature Number;
   attribute MaxTemperature Number;
   attribute MinHumidity Number;
   attribute MaxHumidity Number;
   attribute LengthUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(CONTRACT))";
      editable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(CONTRACT)";
      editable = [false];
   }
   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(CONTRACT))";
      editable = [false];
   }
   attribute TemperatureUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(CONTRACT))";
      editable = [false];
   }
   attribute HumidityUom Text {
      fetch = "'%'";
      editable = [false];
   }

}
