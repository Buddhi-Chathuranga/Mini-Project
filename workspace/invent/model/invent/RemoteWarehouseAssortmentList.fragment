----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2019-05-29  fandse  SCUXXW4-21453, Should not be any edit possibility on SitesList and RemoteWarehouseAssortConnectionsList
-- 2019-05-14  DaZase  SCUXXW4-19689, Added initialcheck to all unbounded actions.
-- 2018-11-22  ChFolk  SCUXXW4-7232 Converted tbwRemoteWhseAssortConnections using MTG Version: 1.33.
----------------------------------------------------------------------------------------------------------
fragment RemoteWarehouseAssortmentList;
component INVENT;
layer Core;
description "fragment uses to keep entity and list details for Remote Warehouse Assortment Connections";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- MAIN PAGES ---------------------------------
page List using RemoteWarehouseAssortmentConnectionSet {
   label = "Remote Warehouse Assortment Connections";
   list RemoteWarehouseAssortConnectionsList;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command OptimizeStorageCommand for RemoteWarehouseAssortmentConnection {
   label = "Optimize Storage";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulkcall OptimizeUsingPutaway(Contract, WarehouseId);
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list RemoteWarehouseAssortConnectionsList for RemoteWarehouseAssortmentConnection {
   crudactions {
      new {
         enabled = [parent.ValidForAllSitesDb or(not parent.ValidForAllSitesDb and parent.ConnectToSite)];
      }
      edit {
         enabled = [false];
      }
   }
   lov ContractRef with ReferenceRemoteWhseSiteWhseLovSelector {
      label = "Site";
      description = ContractRef.SiteDescription;
      validate command {
         execute {
            set WarehouseId = ContractRef.WarehouseId;
         }
      }
   }
   field WarehouseId {
      lovswitch {
         when [Contract = null] {
            lov Warehouse1Ref with ReferenceRemoteWhseSiteWhseLovSelector {
               label = "Warehouse";
               description = Warehouse1Ref.Description;
               validate command {
                  execute {
                     set Contract = Warehouse1Ref.Contract;
                  }
               }
            }
         }
         when [true] {
            lov Warehouse2Ref with ReferenceWarehouseLov5Selector using GetWarehouses {
               label = "Warehouse";
               description = Warehouse2Ref.Description;
               validate command {
                  execute {
                     set Contract = Warehouse2Ref.Contract;
                  }
               }
            }
         }
      }
   }

   lov AssortmentIdRef with ReferenceRemoteWhseAssortmentLovSelector {
      label = "Assortment";
      description = AssortmentIdRef.Description;

      validate command {
         execute {
            call GetOrderProcessingTypeDesc(AssortmentId) into OrderProcTypeDesc;
         }
      }
      columnvisible = [parent.WarehouseId != null];
   }
   field RemoteWhseAssortmentRef.Priority {
      size = Small;
      label = "Priority";
      columnvisible = [parent.WarehouseId != null];
   }
   field RemoteWhseAssortmentRef.OrderProcessingType {
      size = Small;
      label = "Order Processing Type";
      columnvisible = [parent.WarehouseId != null];
   }
   field OrderProcTypeDesc {
      size = Small;
      columnvisible = [parent.WarehouseId != null];
   }

   command OptimizeStorageCommand;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset RemoteWarehouseAssortmentConnectionSet for RemoteWarehouseAssortmentConnection;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity RemoteWarehouseAssortmentConnection using RemoteWhseAssortConnect {
   crud = Create, Read, Update, Delete;
   ludependencies = RemoteWhseAssortment;

   from = "remote_whse_assort_connect";
   exec = "REMOTE_WHSE_ASSORT_CONNECT_API";
   keys = Contract, WarehouseId, AssortmentId {
      where = "CONTRACT = :Contract and WAREHOUSE_ID = :WarehouseId and ASSORTMENT_ID = :AssortmentId";
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];

      editable = [ETag = null];
      format = uppercase;
   }
   attribute WarehouseId Text {
      fetch = "warehouse_id";
      label = "Warehouse";
      maxlength = 15;
      insertable = [true];
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Priority Number {
      fetch = "Remote_Whse_Assortment_API.Get_Priority(ASSORTMENT_ID)";
      label = "Priority";
   }
   attribute OrderProcType Text {
      fetch = "Remote_Whse_Assortment_API.Get_Order_Processing_Type(ASSORTMENT_ID)";
      label = "Order Processing Type";
   }
   attribute OrderProcTypeDesc Text {
      fetch = "Remote_Whse_Assortment_API.Get_Order_Processing_Type_Desc(assortment_id)";
      label = "Order Proc Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   reference Warehouse1Ref(AssortmentId, WarehouseId) to RemoteWhseSiteWhseLov(AssortmentId, WarehouseId);
   reference Warehouse2Ref(Contract, WarehouseId) to WarehouseLov5(Contract, WarehouseId);
   reference RemoteWhseAssortmentRef(AssortmentId) to RemoteWhseAssortment(AssortmentId);
   reference ContractRef(AssortmentId, WarehouseId, Contract) to RemoteWhseSiteWhseLov(AssortmentId, WarehouseId, Contract);
   reference AssortmentIdRef(AssortmentId, Contract) to RemoteWhseAssortmentLov(AssortmentId, Contract);

}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action OptimizeUsingPutaway {
   initialcheck implementation;
   parameter Contract Text;
   parameter WarehouseId Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetWarehouses List < Entity(WarehouseLov5) > {
   where = "(remote_warehouse_db = 'TRUE')";
}

function GetOrderProcessingTypeDesc Text {
   parameter AssortmentId Text;
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


