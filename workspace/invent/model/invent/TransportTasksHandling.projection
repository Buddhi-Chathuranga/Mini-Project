---------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ----------------------------------------------------------
-- 2021-07-16  BwItLk  Bug 159883 (SCZ-15225), Modified PrintedFlag to PrintedFlagDb.
-- 2019-06-06  JaThlk  SCUXXW4-21740, Fixed the issue in Identify serials assistant.
-- 2019-05-10  DaZase  SCUXXW4-19712, Added initialcheck to all unbounded actions.
-- 2018-11-04  JaThlk  SCUXXW4-7347, Included SequenceGenerator Assistant
-- 2018-05-04  MWerse  SCUXXW4-7345, Converted from tbwTransportTask using MTG Version: 1.17
---------------------------------------------------------------------------------

projection TransportTasksHandling;
component INVENT;
layer Core;
description "Use this API to view transport tasks. The types of task records displayed in the API are as follows: receipt into stock, change location, and refill of picking location.";
category Users;

include fragment InventoryLocation17Selector;
include fragment InventoryPartInStockLov3Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment IdentifySerialsInMultipleLocationsAssistant;
include fragment TemporaryPartTrackingSerialSelector;
include fragment TransportTaskInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset TransportTasks for TransportTask;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity TransportTask {
   crud = Read, Update, Delete;
   attribute TransportTaskId Number {
      required = [true];
   }
   attribute PartNo Text {
      editable = [ETag = null];
   }
   attribute ConfigurationId Text {
      editable = [ETag = null];
   }
   attribute Description Text {
      fetch = "INVENTORY_PART_API.Get_Description(FROM_CONTRACT,PART_NO)";
      label = "Description";
      maxlength = 200;
      editable = [false];
   }
   attribute FixedDb Boolean("TRUE", "FALSE") {
      fetch = "FIXED_DB";
      label = "Fixed";
      editable = [true];
      required = [true];
   }
   attribute PrintedFlagDb Boolean {
      fetch = "DECODE(PRINTED_FLAG, 1, 'TRUE', 'FALSE')";
      label = "Printed";
      editable = [false];
      required = [true];
   }
   attribute FromContract Text {
      label = "From Site";
      editable = [ETag = null];
   }
   attribute FromLocationNo Text {
      editable = [ETag = null];
   }
   attribute ToContract Text {
      label = "To Site";
      editable = [ETag = null];
   }
   attribute ToLocationNo Text {
      editable = [ETag = null];
   }
   attribute OrderType Enumeration(OrderType) {
      label = "Source Ref Type";
      fetch = "ORDER_TYPE_DB";
      editable = [ETag = null];
   }
   attribute OrderRef1 Text {
      label = "Source Ref 1";
      editable = [ETag = null];
   }
   attribute OrderRef2 Text {
      label = "Source Ref 2";
      editable = [ETag = null];
   }
   attribute OrderRef3 Text {
      label = "Source Ref 3";
      editable = [ETag = null];
   }
   attribute OrderRef4 Number {
      label = "Source Ref 4";
      editable = [ETag = null];
   }
   attribute Destination Enumeration(InventoryPartDestination) {
      fetch = "DESTINATION_DB";
      editable = [ETag = null];
   }
   attribute FromWarehouseId Text {
      label = "From Warehouse";
   }
   attribute FromBayId Text {
      label = "From Bay";
   }
   attribute FromRowId Text {
      label = "From Row";
   }
   attribute FromTierId Text {
      label = "From Tier";
   }
   attribute FromBinId Text {
      label = "From Bin";
   }
   attribute ToWarehouseId Text {
      label = "To Warehouse";
   }
   attribute ToBayId Text {
      label = "To Bay";
   }
   attribute ToRowId Text {
      label = "To Row";
   }
   attribute ToTierId Text {
      label = "To Tier";
   }
   attribute ToBinId Text {
      label = "To Bin";
   }
   attribute CreateDate Timestamp {
      label = "Created Date";
      editable = [false];
   }
   attribute NoofSerialstoIdentify Number {
      fetch = "Transport_Task_API.Get_No_Of_Unidentified_Serials(TRANSPORT_TASK_ID)";
      label = "No of Serials to Identify";
      editable = [false];
   }
   attribute NumberofLines Number {
      fetch = "Transport_Task_Line_API.Count_Lines(TRANSPORT_TASK_ID)";
      label = "Number of Lines";
      editable = [false];
   }
   attribute HasLinesInCreatedStatus Boolean("TRUE", "FALSE") {
      fetch = "Transport_Task_API.Has_Line_In_Status_Created(TRANSPORT_TASK_ID)";
      label = "Has Lines In Created Status";
      editable = [false];
      required = [true];
   }
   attribute HasLinesInPickedStatus Boolean("TRUE", "FALSE") {
      fetch = "Transport_Task_API.Has_Line_In_Status_Picked(TRANSPORT_TASK_ID)";
      label = "Has Lines In Picked Status";
      editable = [false];
      required = [true];
   }
   attribute HasLinesInExecutedStatus Boolean("TRUE", "FALSE") {
      fetch = "Transport_Task_API.Has_Line_In_Status_Executed(TRANSPORT_TASK_ID)";
      label = "Has Lines In Executed Status";
      editable = [false];
      required = [true];
   }
   attribute IsCompletelyExecuted Text {
      fetch = "Transport_Task_API.Is_Completely_Executed_Str(TRANSPORT_TASK_ID)";
      label = "Is Completely Executed";
      maxlength = 100;
      editable = [false];
      required = [true];
   }
   reference PartNoRef(FromContract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ConfigurationIdRef(FromContract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference FromContractRef(FromContract) to UserAllowedSiteLov(Contract) {
      label = "From Site";
   }
   reference FromLocationNoRef(FromContract, PartNo, FromLocationNo) to InventoryPartInStockLov3(Contract, PartNo, ConfigurationId) {
      label = "From Location No";
   }
   reference ToContractRef(ToContract) to UserAllowedSiteLov(Contract) {
      label = "To Site";
   }
   reference ToLocationNoRef(ToContract, ToLocationNo) to InventoryLocation17(Contract, LocationNo) {
      label = "To Location No";
   }
   reference ForwardToLocationNoRef(ToContract, ForwardToLocationNo) to InventoryLocation(Contract, LocationNo) {
      label = "Forward to Location No";
   }
}

---------------------------------- ACTIONS ----------------------------------
action ExecuteAll {
   initialcheck TransportTaskInitialCheck(TransportTaskId);
   parameter TransportTaskId Number;
   parameter PartTrackingSessionId Number;
   ludependencies = TransportTask;
}

action ExecutePicked {
   initialcheck TransportTaskInitialCheck(TransportTaskId);
   parameter TransportTaskId Number;
   parameter PartTrackingSessionId Number;
   ludependencies = TransportTask;
}

action GetReportResultKeyList Text {
   initialcheck implementation;
   parameter SelectedKeyList Text;
   ludependencies = TransportTask;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetStringValue Text {
   parameter NumberValue Number;
}
