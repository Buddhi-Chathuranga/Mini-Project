-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-10-29  UdGnlk  SC2020R1-10497, Rename the columns name MixOfLotBatchNumbersBlockedOn and MixOfConditionCodesBlockedOn to
-- 2020-10-29          MixOfLotBatchNoBlockedOn and MixOfCondCodesBlockedOn to avoid the incorrect format error. Made Duplicate button enable.
-- 2020-10-29          Removed Db suffix from columns ReceiptsBlockedDb, ReceiptToOccupiedBlockedDb, MixOfPartNumberBlockedDb,
-- 2020-10-29          MixOfCondCodesBlockedDb, MixOfLotBatchNoBlockedDb and ExcludeStorageReqValDb.
-- 2019-05-13  DaZase  SCUXXW4-19716, Added initialcheck to all unbounded actions.
-- 2018-12-26  KoDelk  SCUXXW4-14244, Created.
-----------------------------------------------------------------------------
fragment WarehouseBayTab;
component INVENT;
layer Core;
description "Use this fragment to implement warehouse bay list";
include fragment DropOffLocationSelector;
include fragment WarehouseLovSelector;
include fragment WarehouseBayLov;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseBayInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command CopyRowsandTiersfromBayCommand for WarehouseBay {
   label = "Copy Rows and Tiers from Bay";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != "" and BayId != ""];
   variable FromContractVar;
   variable FromWarehouseVar;
   variable FromBayVar;

   bulkexecute {
      dialog CopyBayStructureDialog(parent.Contract, parent.WarehouseId) into(FromContractVar, FromWarehouseVar, FromBayVar) {
         when OK {
            bulkcall CopyRowsTiersFromBay(FromContractVar, FromWarehouseVar, FromBayVar, Contract, WarehouseId, BayId);
            success("Successfully copied rows and tiers from the bay ${FromBayVar} of warehouse ${FromWarehouseVar} of site ${FromContractVar}.");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CopyBayStructureGroup for CopyBayStructure {
   label = "Copy Bays, Rows, Tiers and Bins from";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      label = "Site";
      description = ContractRef.ContractDesc;

   }
   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      label = "Warehouse ID";
      description = WarehouseIdRef.Description;
   }

   lov WarehouseBayRef with ReferenceWarehouseBayLovSelector {
      label = "Bay ID";
      description = WarehouseBayRef.Description;

   }
}

----------------------------------- LISTS -----------------------------------

list WarehouseBaysList for WarehouseBay {

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      columnexclude = [parent.luname = "Warehouse"];
   }
   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      columnexclude = [parent.luname = "Warehouse"];
   }
   field BayId {
      validate command {
         execute {
            // If user has not manually updated the Route Order column we keep Route Order value in sync with Bay ID
            if [OldRouteOrder = RouteOrder] {
               set RouteOrder = BayId;
               set OldRouteOrder = RouteOrder;
            }
         }
      }
   }
   field Description;
   field BinWidthCapacity;
   field WarehouseBayRef.BinWidthCapacity {
      label = "Bin Width Operative Value";
   }
   field BinWidthSource;
   field BinHeightCapacity;
   field WarehouseBayRef.BinHeightCapacity {
      label = "Bin Height Operative Value";
   }
   field BinHeightSource;
   field BinDeptCapacity;
   field WarehouseBayRef.BinDeptCapacity {
      label = "Bin Depth Operative Value";
   }
   field BinDepthSource;
   field LengthUoM;
   field BinVolumeCapacity;
   field BinVolumeOperativeValue;
   field BinVolumeSource;
   field VolumeUoM;
   field BayCarryingCapacity;
   field WarehouseBayRef.BayCarryingCapacity {
      label = "Bay Carrying Capacity Operative Value";
   }
   field BayCarryingCapacitySource;
   field RowCarryingCapacity;
   field WarehouseBayRef.RowCarryingCapacity {
      label = "Row Carrying Capacity Operative Value";
   }
   field RowCarryingCapacitySource;
   field TierCarryingCapacity;
   field WarehouseBayRef.TierCarryingCapacity {
      label = "Tier Carrying Capacity Operative Value";
   }
   field TierCarryingCapacitySource;
   field BinCarryingCapacity;
   field WarehouseBayRef.BinCarryingCapacity {
      label = "Bin Carrying Capacity Operative Value";
   }
   field BinCarryingCapacitySource;
   field WeightUoM;
   field BinMinTemperature;
   field WarehouseBayRef.BinMinTemperature {
      label = "Min Temperature Operative Value";
   }
   field MinTemperatureSource;
   field BinMaxTemperature;
   field WarehouseBayRef.BinMaxTemperature {
      label = "Max Temperature Operative Value";
   }
   field MaxTemperatureSource;
   field TemperatureUoM;
   field BinMinHumidity;
   field WarehouseBayRef.BinMinHumidity {
      label = "Min Humidity (%) Operative Value";
   }
   field MinHumiditySource;
   field BinMaxHumidity;
   field WarehouseBayRef.BinMaxHumidity {
      label = "Max Humidity (%) Operative Value";
   }
   field MaxHumiditySource;
   field RouteOrder;
   field ReceiptsBlockedDbQuery {
      validate command {
         execute {
            set ReceiptsBlocked = ReceiptsBlockedDbQuery;
         }
      }
   }
   field ReceiptsBlockedOn;
   field RcptOccupiedBlockedDbQuery {
      validate command {
         execute {
            set ReceiptToOccupiedBlocked = RcptOccupiedBlockedDbQuery;
         }
      }
   }
   field ReceiptToOccupiedBlockedOn;
   field MixPartNoBlockedDbQuery {
      validate command {
         execute {
            set MixOfPartNumberBlocked = MixPartNoBlockedDbQuery;
         }
      }
   }
   field MixOfPartNumbersBlockedOn;
   field MixCondCodeBlockedDbQuery {
      validate command {
         execute {
            set MixOfCondCodesBlocked = MixCondCodeBlockedDbQuery;
         }
      }
   }
   field MixOfCondCodesBlockedOn;
   field MixLotNoBlockedDbQuery {
      validate command {
         execute {
            set MixOfLotBatchNoBlocked = MixLotNoBlockedDbQuery;
         }
      }
   }
   field MixOfLotBatchNoBlockedOn;
   field ExcludStoragReqValDbQuery {
      validate command {
         execute {
            set ExcludeStorageReqVal = ExcludStoragReqValDbQuery;
         }
      }
   }
   field ValidationExcludedOn;
   lov DropOffLocationNoRef with ReferenceDropOffLocationSelector;
   field DropOffLocationNoRef.LocationName {
      label = "Drop-Off Location No Description";
   }
   field DropOffLocationNoRef.BayNo {
      label = "Drop-Off Bay ID";
   }
   field DropOffLocationNoRef.RowNo {
      label = "Drop-Off Row ID";
   }
   field DropOffLocationNoRef.TierNo {
      label = "Drop-Off Tier ID";
   }
   field DropOffLocationNoRef.BinNo {
      label = "Drop-Off Bin ID";
   }

   field AvailabilityControlIdRef;
   field WarehouseBayRef.AvailabilityControlId {
      label = "Default Part Availability Control Operative Value";
   }
   field DefaultPartAvailabilityControlOperativeValueSource;
   field HideInWharehouseNavigator {
      label = "Hidden";
      size = Small;
   }

   commandgroup CopyBayStructureCmdGroup {
      command CopyRowsandTiersfromBayCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CopyBayStructureDialog for CopyBayStructure {
   label = "Copy Rows and Tiers from Bay";
   input(Contract, WarehouseId);
   output(Contract, WarehouseId, BayId);
   group CopyBayStructureGroup;

   commandgroup CopyBayStructureDialogCmdGroup {
      command Ok;
      command Cancel;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseBay {
   attribute Contract Text {
      label = "Site";
   }
   attribute WarehouseId Text {
      label = "Warehouse ID";
   }
   attribute BayId Text {
      label = "Bay ID";
      format = uppercase;
      default = "'  -'";
   }

   attribute BinWidthCapacity Number {
      label = "Bin Width";
   }
   attribute BinWidthSource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Width_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Bin Width Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinHeightCapacity Number {
      label = "Bin Height";
   }
   attribute BinHeightSource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Height_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Bin Height Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinDeptCapacity Number {
      label = "Bin Depth";
   }
   attribute BinDepthSource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Dept_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Bin Depth Source";
      maxlength = 100;
      editable = [false];
   }
   attribute LengthUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(CONTRACT))";
      label = "Length UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinVolumeCapacity Number {
      label = "Bin Volume";
   }
   attribute BinVolumeOperativeValue Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Volume_Capacity(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Bin Volume Operative Value";
      maxlength = 2000;
      editable = [false];
   }
   attribute BinVolumeSource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Volume_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Bin Volume Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute VolumeUoM Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(CONTRACT)";
      label = "Volume UoM";
      maxlength = 100;

      editable = [false];
   }
   attribute BayCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_API.Get_Bay_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Bay Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute RowCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_API.Get_Row_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Row Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute TierCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_API.Get_Tier_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Tier Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinCarryingCapacitySource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Bin Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
   }
   attribute WeightUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(CONTRACT))";
      label = "Weight UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMinTemperature Number {
      label = "Min Temperature";
   }
   attribute MinTemperatureSource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Min_Temperature_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Min Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMaxTemperature Number {
      label = "Max Temperature";
   }
   attribute MaxTemperatureSource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Max_Temperature_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Max Temperature Source";
      maxlength = 100;
      editable = [false];
   }
   attribute TemperatureUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(CONTRACT))";
      label = "Temperature UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMinHumidity Number {
      label = "Min Humidity (%)";
   }
   attribute MinHumiditySource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Min_Humidity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Min Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   attribute BinMaxHumidity Number {
      label = "Max Humidity (%)";
   }
   attribute MaxHumiditySource Text {
      fetch = "Warehouse_Bay_API.Get_Bin_Max_Humidity_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Max Humidity (%) Source";
      maxlength = 100;
      editable = [false];
   }
   attribute ReceiptsBlocked Boolean("TRUE", "FALSE") {
      fetch = "RECEIPTS_BLOCKED_DB";
      label = "Receipts Blocked";
      required = [true];

   }
   attribute ReceiptsBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Receipts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Receipts Blocked";
      required = [true];
   }
   attribute ReceiptsBlockedOn Text {
      fetch = "Warehouse_Bay_API.Get_Receipts_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute ReceiptToOccupiedBlocked Boolean("TRUE", "FALSE") {
      fetch = "RECEIPT_TO_OCCUPIED_BLOCKED_DB";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   // Receipt_To_Occupied_Blocked_Db_Query is too long.
   attribute RcptOccupiedBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Receipts to Occupied Blocked";
      required = [true];
   }
   attribute ReceiptToOccupiedBlockedOn Text {
      fetch = "Warehouse_Bay_API.Get_Receipt_To_Occup_Blkd_Src(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
   }
   attribute MixOfPartNumberBlocked Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_PART_NUMBER_BLOCKED_DB";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }

   // Mix_Of_Part_Number_Blocked_Db_Query is too long
   attribute MixPartNoBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }

   attribute MixOfPartNumbersBlockedOn Text {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Part_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Mix of Part Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixOfCondCodesBlocked Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_COND_CODES_BLOCKED_DB";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   // Mix_Of_Cond_Codes_Blocked_Db_Query is too long
   attribute MixCondCodeBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   attribute MixOfCondCodesBlockedOn Text {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Cond_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Mix of Condition Codes Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute MixOfLotBatchNoBlocked Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_LOT_BATCH_NO_BLOCKED_DB";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   // Mix_Of_Lot_Batch_No_Blocked_Db_Query is too long
   attribute MixLotNoBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   attribute MixOfLotBatchNoBlockedOn Text {
      fetch = "Warehouse_Bay_API.Get_Mix_Of_Lot_Blocked_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Mix of Lot Batch Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
   }
   attribute ExcludeStorageReqVal Boolean("TRUE", "FALSE") {
      fetch = "EXCLUDE_STORAGE_REQ_VAL_DB";
      label = "Exclude Storage Requirement Validation";
      required = [true];
   }
   // Exclude_Storage_Req_Val_Db_Query is too long
   attribute ExcludStoragReqValDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Exclude Storage Requirement Validation";
      required = [true];
   }
   attribute ValidationExcludedOn Text {
      fetch = "Warehouse_Bay_API.Get_Excl_Storage_Req_Val_Src(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Validation Excluded on";
      maxlength = 2000;
      editable = [false];
   }

   attribute AvailabilityControlId Text {
      label = "Default Part Availability Control Bay Value";
   }
   attribute DefaultPartAvailabilityControlOperativeValueSource Text {
      fetch = "Warehouse_Bay_API.Get_Avail_Control_Id_Source(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Default Part Availability Control Operative Value Source";
      maxlength = 2000;
      editable = [false];
   }
   attribute RouteOrder Text {
      fetch = "ROUTE_ORDER";
      default = "'  -'";
   }
   // If user has not manually updated the Route Order column we keep Route Order value in sync with Bay ID
   // and OldRouteOrder is used to do the comparison.
   attribute OldRouteOrder Text {
      fetch = "ROUTE_ORDER";
      implementationtype = "VARCHAR2(15)";
      default = "'  -'";
   }
   attribute HideInWharehouseNavigator Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_Bay_API.Get_Hide_In_Whse_Navigator_Db(CONTRACT, WAREHOUSE_ID, BAY_ID)";
      label = "Hidden";
      required = [true];
   }

   reference WarehouseBayRef(Contract, WarehouseId, BayId) to WarehouseBay(Contract, WarehouseId, BayId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse ID";
   }
   reference DropOffLocationNoRef(Contract, DropOffLocationNo) to DropOffLocation(Contract, LocationNo) {
      label = "Drop-Off Location No";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Default Part Availability Control Bay Value";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CopyRowsTiersFromBay {
   initialcheck implementation;
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter BayId Text;
   parameter ToContract Text;
   parameter ToWarehouseId Text;
   parameter ToBayId Text;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------
structure CopyBayStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute ContractDescription Text {
      label = "Site Description";
      maxlength = 100;
   }
   attribute WarehouseId Text {
      label = "Warehouse ID";
      maxlength = 15;
   }
   attribute WarehouseDescription Text {
      label = "Warehouse Description";
      maxlength = 100;
   }
   attribute BayId Text {
      label = "Bay ID";
      maxlength = 5;
   }
   attribute BayDescription Text {
      label = "Bay Description";
      maxlength = 100;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse";
   }
   reference WarehouseBayRef(Contract, WarehouseId, BayId) to WarehouseBayLov(Contract, WarehouseId, BayId) {
      label = "Bay ID";
   }
}