----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2020-01-23  Dinklk  MFXTEND-3208, New action is CreateVizSessionForIpap added.
-- 2019-05-15  DaZase  SCUXXW4-19648, Added initialcheck to all unbounded actions.
-- 2019-05-08  ChFolk  SCUXXW4-5991, Added ludependencies for GenerateSnapshot to refresh data in tabs. Removed vertual for search Assistant.
-- 2019-04-10  ChFolk  SCUXXW4-5991, Commented the action CreateInvPartConfigProjectRecord as the assistant is not using now.
-- 2019-04-10  ChFolk  SCUXXW4-18438, Modified functons GetInventoryParts, GetConfigurationIds and GetAvailableProjects by adding where clause.
-- 2019-03-05  ChFolk  SCUXXW4-5991, Added TypeCodeDb as an attribute which is used as a visible condition. Added SnapshotId as a parameter to GenerateSnapshot.
-- 2019-03-02  ChFolk  SCUXXW4-5991, Removed SupplyDemandHeaderInfoStructure. Fetch value to the SnapshotId from the view as now it is pipeling to the view.
-- 2019-02-22  ChFolk  SCUXXW4-7177, Included new fragment PlannablePerPartSummaryTab and added function GetPlannablePerPartSummary.
-- 2019-02-22  ChFolk  SCUXXW4-7172, Included new fragent PlannablePerPartDetailTab and added function GetPlannablePerPartDetail.
-- 2019-02-22  ChFolk  SCUXXW4-7302, Included new fragment SumProcurementPlanningTab and added function GetSumProcurementPlanning.
-- 2019-02-22  ChFolk  SCUXXW4-7182, Included fragment ProcurementPlanningTab and added function GetProcurementPlanning
-- 2019-02-22  ChFolk  SCUXXW4-7297, Included fragment SumDetailedPlanningTab and added function GetSumDetailedPlanning
-- 2019-02-22  ChFolk  SCUXXW4-7317, Include fragment SupplyDemandViewExtTab and Added function GetSupplyDemandDetails.
-- 2019-02-22  ChFolk  SCUXXW4-5991, Converted frmAvailabilityPlanning using MTG Version: 1.34.
----------------------------------------------------------------------------------------------------------
projection InventoryPartAvailabilityPlanningAnalysis;
component INVENT;
layer Core;
description "Use this API  to view the planning information for a part controlled by your company. Therefore, the customer owned and supplier loaned material is not included.
General planning data for the part is displayed in the header area. Detailed planning data as well as supply and demand information, is found on the tabs. To view the supply and
demand situation for a project, you can search for the project specific part with the relevant Project ID. You can also able to view the supply and demand situation of all the
projects and standard inventory for the part by searching with the Hash(#) symbol in the Project ID field.";
category Users;


--------------------------------- FRAGMENTS ---------------------------------
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment InventoryPartLov;
include fragment SupplyDemandViewExtTab;
include fragment SumDetailedPlanningTab;
include fragment ProcurementPlanningTab;
include fragment SumProcurementPlanningTab;
include fragment PlannablePerPartDetailTab;
include fragment PlannablePerPartSummaryTab;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InvPartConfigProjectSet for InvPartConfigProject;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InvPartConfigProject {
   crud = Read;
   from = "Inv_Part_Availability_Planning";
   exec = "INV_PART_CONFIG_PROJECT_API";
   ludependencies = OrderSupplyDemand;
   supportwarnings = [true];
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
      required = [true];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 10;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "Description";
      label = "Part Description";
      editable = [false];
   }
   attribute PlannerBuyer Text {
      fetch = "planner_buyer";
      label = "Planner";
      maxlength = 20;
      editable = [false];
   }
   attribute CostPerUnit Number {
      fetch = "cost_per_unit";
      label = "Cost Per Unit";
      editable = [false];
      format = ifscurrency;
   }
   attribute PlanningMethod Text {
      fetch = "planning_method";
      label = "Planning Method";
      editable = [false];
   }
   attribute TypeCode Text {
      fetch = "type_code";
      label = "Part Type";
      editable = [false];
   }
   attribute TypeCodeDb Text {
      fetch = "Inventory_Part_Type_API.Encode(TYPE_CODE)";
      label = "Part Type Db";
      editable = [false];
   }
   attribute DefaultSupplyType Text {
      fetch = "Inventory_Part_Planning_API.Get_Order_Requisition(CONTRACT, PART_NO)";
      label = "Default Supply Type";
   }
   attribute AlternatePartsExist Boolean("TRUE", "FALSE") {
      fetch = "alternate_part_exist";
      label = "Alternate Parts Exist";
      editable = [false];
   }
   attribute PurchLeadtime Number {
      fetch = "purch_leadtime";
      label = "Purchasing";
      maxlength = 32767;
      editable = [false];
   }
   attribute UnlimitedPurchLeadTime Date {
      fetch = "unlimited_purch_leadtime";
      label = "Unlimited Purch Lead Time";
      editable = [false];
   }
   attribute ManufLeadtime Number {
      fetch = "manuf_leadtime";
      label = "Manufacturing";
      maxlength = 32767;
      editable = [false];
   }
   attribute UnlimitedManufLeadTime Date {
      fetch = "unlimited_manuf_leadtime";
      label = "Unlimited Manuf Lead Time";
      editable = [false];
   }
   attribute ExpectedLeadtime Number {
      fetch = "expected_leadtime";
      label = "Expected";
      maxlength = 32767;
      editable = [false];
   }
   attribute UnlimitedExpectedLeadTime Date {
      fetch = "unlimited_expected_leadtime";
      label = "Unlimited Expected Lead Time";
      editable = [false];
   }
   attribute UnlimitedPickingLeadTime Date {
      fetch = "unlimited_picking_leadtime";
      label = "Unlimited Picking Lead Time";
      editable = [false];
   }
   attribute OnhandQty Number {
      fetch = "NVL(Onhand_Qty, 0)";
      editable = [false];
      updatable = [true];
      insertable = [false];
   }
   attribute InTransitQty Number {
      fetch = "NVL(In_Transit_Qty, 0)";
      editable = [false];
      updatable = [true];
      insertable = [false];
   }
   attribute UsableQty Number {
      fetch = "NVL(Usable_Qty, 0)";
      editable = [false];
      updatable = [true];
      insertable = [false];
   }
   attribute AvailableQty Number {
      fetch = "NVL(Available_Qty, 0)";
      editable = [false];
      updatable = [true];
      insertable = [false];
   }
   attribute UnitMeas Text {
      fetch = "unit_meas";
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute LastYearOut Text {
      fetch = "last_year_out";
      label = "Last Year (Out)";
      editable = [false];
   }
   attribute LastYearIn Number {
      fetch = "last_year_in";
      label = "Last Year (In)";
      editable = [false];
   }
   attribute AbcClass Text {
      fetch = "abc_class";
      label = "ABC Code";
      editable = [false];
   }
   attribute AbcPercent Number {
      fetch = "abc_percent";
      label = "ABC (%)";
      editable = [false];
   }
   attribute CurrentYearOut Number {
      fetch = "current_year_out";
      label = "Current Year (Out)";
      editable = [false];
   }
   attribute CurrentYearIn Number {
      fetch = "current_year_in";
      label = "Current Year (In)";
      editable = [false];
   }
   attribute FrequencyClass Text {
      fetch = "Inventory_Part_API.Get_Frequency_Class(CONTRACT, PART_NO)";
      label = "Frequency Class";
   }
   attribute CarryRate Number {
      fetch = "carry_rate";
      label = "Inventory Interest (%)";
      editable = [false];
   }
   attribute MinOrderQty Number {
      fetch = "min_order_qty";
      label = "Minimum Lot Size";
      editable = [false];
   }
   attribute MaxOrderQty Number {
      fetch = "max_order_qty";
      label = "Maximum Lot Size";
      editable = [false];
   }
   attribute LifecycleStage Text {
      fetch = "Inventory_Part_API.Get_Lifecycle_Stage(CONTRACT, PART_NO)";
      label = "Lifecycle Stage";
   }
   attribute SetupCost Number {
      fetch = "setup_cost";
      label = "Ordering Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute StdOrderSize Number {
      fetch = "std_order_size";
      label = "Standard Lot Size";
      editable = [false];
   }
   attribute MulOrderQty Number {
      fetch = "mul_order_qty";
      label = "Multiple Lot Size";
      editable = [false];
   }
   attribute ShrinkageFac Number {
      fetch = "shrinkage_fac";
      label = "Scrap Factor (%)";
      editable = [false];
   }
   attribute ServiceRate Number {
      fetch = "service_rate";
      label = "Service Rate (%)";
      editable = [false];
   }
   attribute PrimarySupplier Text {
      fetch = "primary_supplier";
      label = "Primary Supplier";
      editable = [false];
   }
   attribute MainVendorName Text {
      fetch = "main_vendor_name";
      label = "Supplier Name";
      editable = [false];
   }
   attribute SafetyStock Number {
      fetch = "safety_stock";
      label = "Safety Stock";
      editable = [false];
   }
   attribute MaxweekSupply Number {
      fetch = "maxweek_supply";
      label = "Order Cover Time";
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      editable = [false];
   }
   attribute SafetyLeadTime Number {
      fetch = "Inventory_Part_Planning_API.Get_Safety_Lead_Time(contract,part_no)";
      label = "Safety Lead Time";
   }
   attribute OrderPointQty Number {
      fetch = "order_point_qty";
      label = "Order Point";
      maxlength = 32767;
      editable = [false];
   }
   attribute LotSize Number {
      fetch = "lot_size";
      label = "Lot Size";
      maxlength = 32767;
      editable = [false];
   }
   attribute DistCalendarId Text {
      fetch = "DIST_CALENDAR_ID";
      updatable = [false];
      insertable = [false];
   }
   attribute ManugfCalendarId Text {
      fetch = "MANUF_CALENDAR_ID";
      updatable = [false];
      insertable = [false];
   }
   attribute SiteDate Date {
      fetch = "SITE_DATE";
      updatable = [false];
      insertable = [false];
   }
   attribute PickingLeadTime Number {
      fetch = "picking_leadtime";
   }
   attribute SnapshotId Number {
      fetch = "snapshot_id";
      editable = [true];
      updatable = [false];
      insertable = [true];
   }
   reference InventoryPartLovRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }

}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

@DynamicComponentDependency PROJ
query OpenProjectSite {
   from = "Open_Project_Site";
   lu = ProjectSite;
   keys = Site, ProjectId;
   ludependencies = OpenProjectSite;
   attribute Site Text {
      format = uppercase;
      lovcolumn = [true];
   }
   attribute ProjectId Text {
      label = "Project ID";
      lovcolumn = [true];
   }
}

---------------------------------- ACTIONS ----------------------------------

action GenerateSnapshot {
   initialcheck implementation;
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter ProjectId Text;
   parameter SnapshotId Number;
   ludependencies = InvPartConfigProject;
   ludependencies = OrderSupplyDemandDetailPlanning;
   ludependencies = SumDetailedPlanning;
   ludependencies = ProcurementPlanning;
   ludependencies = SumProcurementPlanning;
   ludependencies = PlannablePerPartDetail;
   ludependencies = PlannablePerPartSummary;
}

@DynamicComponentDependency MFGVIZ
action CreateVizSessionForIpap Number {
   initialcheck none;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetInventoryParts List<Entity(InventoryPart)> {
   parameter Contract Text;
   where = "(Report_SYS.Parse_Parameter(contract, :Contract) = 'TRUE' OR :Contract IS NULL)";
}

function GetConfigurationIds List<Entity(InventoryPartConfig)> {
   parameter Contract Text;
   parameter PartNo Text;
   where = "(Report_SYS.Parse_Parameter(contract, :Contract) = 'TRUE' OR :Contract IS NULL)
            AND (Report_SYS.Parse_Parameter(part_no, :PartNo) = 'TRUE' OR :PartNo IS NULL)";
}

@DynamicComponentDependency PROJ
function GetAvailableProjects List<Entity(OpenProjectSite)> {
   parameter Contract Text;
   where = "(Report_SYS.Parse_Parameter(site, :Contract) = 'TRUE' OR :Contract IS NULL)";
}

function GetSupplyDemandDetailPlanning List<Entity(OrderSupplyDemandDetailPlanning)> {
   parameter SnapshotId Number;
   basedon OrderSupplyDemandDetailPlanningSet;
   ludependencies = DetailPlanning;
   where = "SNAPSHOT_ID = :SnapshotId";
}

function GetSumDetailedPlanning List<Entity(SumDetailedPlanning)> {
   parameter SnapshotId Number;
   basedon SumDetailedPlanningSet;
   ludependencies = SumDetailedPlanning;
   where = "SNAPSHOT_ID = :SnapshotId";
}

function GetProcurementPlanning List<Entity(ProcurementPlanning)> {
   parameter SnapshotId Number;
   basedon ProcurementPlanningSet;
   ludependencies = ProcurementPlanning;
   where = "SNAPSHOT_ID = :SnapshotId";
}

function GetSumProcurementPlanning List<Entity(SumProcurementPlanning)> {
   parameter SnapshotId Number;
   basedon SumProcurementPlanningSet;
   ludependencies = SumProcurementPlanning;
   where = "SNAPSHOT_ID = :SnapshotId";
}

function GetPlannablePerPartDetail List<Entity(PlannablePerPartDetail)> {
   parameter SnapshotId Number;
   basedon PlannablePerPartDetailSet;
   ludependencies = PlannablePerPartDetail;
   where = "SNAPSHOT_ID = :SnapshotId";
}

function GetPlannablePerPartSummary List<Entity(PlannablePerPartSummary)> {
   parameter SnapshotId Number;
   basedon PlannablePerPartSummarySet;
   ludependencies = PlannablePerPartSummary;
   where = "SNAPSHOT_ID = :SnapshotId";
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
