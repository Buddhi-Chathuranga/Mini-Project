-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2020-10-06  LaDeLK  PR2020R1-242, Removed LOV label 'Assortment', to fetch the label from reference instead.
--  2020-05-28  LaDelk  PR2020R1-145, Added more fields and a message to pop up when deleting a node.
--  2020-05-14  LaDeLK  PR2020R1-46, Created fragment for a list of AssortmentNodes
--  ----------  ------  --------------------------------------------------------------------------------

fragment AssortmentNodesList;
component INVENT;
layer Core;
description "List used to show and add assortment nodes in assortment tree";

--------------------------------- FRAGMENTS ---------------------------------


----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------------- LISTS -----------------------------------
list AssortmentNodesList for AssortmentNode {
   multiselect = [false];
   crudactions {
      before command CrudBeforeCommand;
   }

   lov AssortmentStructureRef with ReferenceAssortmentStructureSelector;
   field AssortmentNodeId;
   field Description;
   lov ParentNodeRef with ReferenceAssortmentNodeSelector using GetParentNodes(AssortmentId, AssortmentNodeId) {
      label = "Parent Node";
      description = ParentNodeRef.Description;
      editable = [AssortmentId != AssortmentNodeId];
   }
   field LevelNumber;
   field LevelName;
}

   --------------------------------- COMMANDS ----------------------------------
command CrudBeforeCommand for AssortmentNode {
   execute {
      if [CrudOperation = "delete"] {
         confirm("Do you want to delete node ${AssortmentNodeId} and all its sub nodes? Please note, that this also removes all defaults defined for the node and its sub nodes.") {
            when CANCEL {
               exit CANCEL;
            }
         }
      }
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset AssortmentNodes for AssortmentNode;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AssortmentNode {
   where = "part_no IS NULL";
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }
   attribute Description Text;
   attribute ParentNode Text {
      required = [AssortmentId != AssortmentNodeId];
   }
   attribute LevelNumber Text {
      fetch = "Assortment_Node_API.Get_Level_No(assortment_id,parent_node)";
      editable = [false];
      label = "Parent Level";
   }
   attribute LevelName Text {
      fetch = "Assortment_Node_API.Get_Node_Level_Description(assortment_id,parent_node)";
      editable = [false];
      label = "Parent Level Description";
   }
   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference ParentNodeRef(AssortmentId, ParentNode) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Parent Node";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetParentNodes List < Entity(AssortmentNode) > {
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   where = "assortment_id = :AssortmentId and (CASE
         WHEN :AssortmentNodeId IS NULL THEN 1
         WHEN :AssortmentId != :AssortmentNodeId and assortment_node_id != :AssortmentNodeId THEN 1
      ELSE 0
   END )=1";
}