-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-01-28  ErRalk  SC21R2-7298, Modified navigation of RegisterArrivalsCommand to filter based on the DestinationWarhouseId.
-- 2021-12-15  SBalLK  SC21R2-2833, Added WarehouseTypeId, AddressType, AddressOwner and AddressId attribute.
-- 2021-11-02  SBalLK  SC21R2-2833, Added InventoryPartsInStockCommand, HandlingUnitsInStockCommand, PartInStockReservationsCommand, TransportTaskLinesCommand,
-- 2021-11-02          RegisterArrivalsCommand and ReceiveFromTransitCommand. Added GetWarehouseKeyCollection() function and WarehouseKeyListStruct structure.
-- 2020-11-10  JeLise  SC2020R1-10317, Removed all XxxDb-attributes and changed the corresponding fields, also added insertable and updatable on all
-- 2020-11-10          attributes using method calls to avoid errors when duplicating.
-- 2020-11-05  JeLise  SC2020R1-10317, Enabled the Duplicate functionality.
-- 2019-10-14  KHVESE  SCSPRING20-538, Added function GetGlobalWarehouseId and column GlobalWarehouseId and validate command for contract and warehouseid.
-- 2019-05-13  DaZase  SCUXXW4-19719, Added initialcheck to all unbounded actions.
-- 2018-12-21  KoDelk  SCUXXW4-14230, Moved Warehouse in to a framnet so it can be reused
-----------------------------------------------------------------------------
fragment WarehousesTab;
component INVENT;
layer Core;
description "Use this fragment to view or enter the warehouses";

include fragment WarehouseLovSelector;
include fragment DropOffLocationSelector;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- MAIN PAGES ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CopyBaysfromWarehouseCommand for Warehouse {
   label = "Copy Bays from Warehouse";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != ""];
   variable FromContractVar;
   variable FromWarehouseIdVar;

   bulkexecute {
      dialog CopyWarehouseStructureDialog into(FromContractVar, FromWarehouseIdVar) {
         when OK {
            bulkcall CopyBaysFromWarehouse(FromContractVar, FromWarehouseIdVar, Contract, WarehouseId);
            success("Successfully copied bays from the warehouse ${FromWarehouseIdVar} of site ${FromContractVar}.");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command InventoryPartsInStockCommand for Warehouse {
   label = "Inventory Parts in Stock";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != ""];

   bulkexecute {
      bulknavigate "page/InventoryPartInStock/List?$filter=Contract eq $[Contract] and Warehouse eq $[WarehouseId]";
   }
}
command HandlingUnitsInStockCommand for Warehouse {
   label = "Handling Units in Stock";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != ""];
   variable WarehouseKeyList {
      type = WarehouseKeyListStruct;
   }

   bulkexecute {
      call GetWarehouseKeyCollection(Selection) into WarehouseKeyList;
      bulknavigate "page/HandlingUnitsInStock/List?searchcontext=ContractList:${WarehouseKeyList.Contract},WarehouseList:${WarehouseKeyList.Warehouse}";
   }
}
command PartInStockReservationsCommand for Warehouse {
   label = "Inventory Part in Stock Reservations";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != ""];

   bulkexecute {
      bulknavigate "page/InventoryPartInStockReservations/List?$filter=Contract eq $[Contract] and Warehouse eq $[WarehouseId]";
   }
}
command TransportTaskLinesCommand for Warehouse {
   label = "Transport Task Lines";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != ""];

   bulkexecute {
      call GetWarehouseKeyCollection(Selection) into WarehouseKeyList;
      bulknavigate "page/TransportTaskLines/List?searchcontext=ContractList:${WarehouseKeyList.Contract},WarehouseList:${WarehouseKeyList.Warehouse}";
   }
}

command RegisterArrivalsCommand for Warehouse {
   label = "Register Arrivals";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != ""];

   bulkexecute {
      bulknavigate "page/RegisterArrivals/List?$filter=Contract eq $[Contract] and DestinationWarehouseId eq $[WarehouseId]";
   }
}

command ReceiveFromTransitCommand for Warehouse {
   label = "Receive from Transit";
   mode = SelectedRecords;
   enabled = [WarehouseId != "" and Contract != ""];

   bulkexecute {
      bulknavigate "page/ReceiveFromTransit/List?$filter=Contract eq $[Contract] and Warehouse eq $[WarehouseId]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CopyWarehouseStructureGroup for CopyWarehouseStructure {
   label = "Copy Bays, Rows, Tiers and Bins from";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      label = "Site";
      description = ContractRef.ContractDesc;

   }
   lov WarehouseIdRef with ReferenceWarehouseLovSelector {
      label = "Warehouse ID";
      description = WarehouseIdRef.Description;

   }
}

----------------------------------- LISTS -----------------------------------

list WarehousesList for Warehouse {
   orderby = WarehouseId;

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      columnexclude = [parent.luname = "SiteInventInfo"];
      size = Small;
      validate command {
         execute {
            call GetGlobalWarehouseId(Contract, WarehouseId) into GlobalWarehouseId;
         }
      }
   }
   field WarehouseId {
      format = uppercase;
      validate command {
         execute {
            call GetGlobalWarehouseId(Contract, WarehouseId) into GlobalWarehouseId;
            if [OldRouteOrder = RouteOrder] {
               set RouteOrder = WarehouseId;
               set OldRouteOrder = RouteOrder;
            }
         }
      }
   }
   field GlobalWarehouseId;
   field Description;
   lov WarehouseTypeIdRef with WarehouseTypeSelector {
      size = Small;
      description = WarehouseTypeIdRef.Description;

   }
   field BinWidthCapacity;
   field WarehouseRef.BinWidthCapacity {
      label = "Bin Width Operative Value";
   }
   field BinWidthSource {
      size = Small;
   }
   field BinHeightCapacity;
   field WarehouseRef.BinHeightCapacity {
      label = "Bin Height Operative Value";
   }
   field BinHeightSource {
      size = Small;
   }
   field BinDeptCapacity;
   field WarehouseRef.BinDeptCapacity {
      label = "Bin Depth Operative Value";
   }
   field BinDepthSource {
      size = Small;
   }
   field LengthUoM {
      size = Small;
   }
   field BinVolumeCapacity;
   field BinVolumeOperativeValue {
      size = Small;
   }
   field BinVolumeSource {
      size = Small;
   }
   field VolumeUoM {
      size = Small;
   }
   field BayCarryingCapacity;
   field WarehouseRef.BayCarryingCapacity {
      label = "Bay Carrying Capacity Operative Value";
   }
   field BayCarryingCapacitySource {
      size = Small;
   }
   field RowCarryingCapacity;
   field WarehouseRef.RowCarryingCapacity {
      label = "Row Carrying Capacity Operative Value";
   }
   field RowCarryingCapacitySource {
      size = Small;
   }
   field TierCarryingCapacity;
   field WarehouseRef.TierCarryingCapacity {
      label = "Tier Carrying Capacity Operative Value";
   }
   field TierCarryingCapacitySource {
      size = Small;
   }
   field BinCarryingCapacity;
   field WarehouseRef.BinCarryingCapacity {
      label = "Bin Carrying Capacity Operative Value";
   }
   field BinCarryingCapacitySource {
      size = Small;
   }
   field WeightUoM {
      size = Small;
   }
   field BinMinTemperature;
   field WarehouseRef.BinMinTemperature {
      label = "Min Temperature Operative Value";
   }
   field MinTemperatureSource {
      size = Small;
   }
   field BinMaxTemperature;
   field WarehouseRef.BinMaxTemperature {
      label = "Max Temperature Operative Value";
   }
   field MaxTemperatureSource {
      size = Small;
   }
   field TemperatureUoM {
      size = Small;
   }
   field BinMinHumidity;
   field WarehouseRef.BinMinHumidity {
      label = "Min Humidity (%) Operative Value";
   }
   field MinHumiditySource {
      size = Small;
   }
   field BinMaxHumidity;
   field WarehouseRef.BinMaxHumidity {
      label = "Max Humidity (%) Operative Value";
   }
   field MaxHumiditySource {
      size = Small;
   }
   field RouteOrder {
      size = Small;
   }
   field ReceiptsBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set ReceiptsBlocked = ReceiptsBlockedDbQuery;
         }
      }
   }
   field ReceiptsBlocked {
      columnexclude = [true];
   }
   field ReceiptsBlockedon2 {
      size = Small;
   }
   field RcptOccupiedBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set ReceiptToOccupiedBlocked = RcptOccupiedBlockedDbQuery;
         }
      }
   }
   field ReceiptToOccupiedBlocked {
      columnexclude = [true];
   }

   field ReceiptsBlockedon3 {
      size = Small;
   }
   field MixOfPartBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set MixOfPartNumberBlocked = MixOfPartBlockedDbQuery;
         }
      }
   }
   field MixOfPartNumberBlocked {
      columnexclude = [true];
   }
   field MixofPartNumbersBlockedon {
      size = Small;
   }
   field MixCondCodeBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set MixOfCondCodesBlocked = MixCondCodeBlockedDbQuery;
         }
      }
   }
   field MixOfCondCodesBlocked {
      columnexclude = [true];
   }
   field MixofConditionCodesBlockedon {
      size = Small;
   }
   field MixLotNoBlockedDbQuery {
      size = Small;
      validate command {
         execute {
            set MixOfLotBatchNoBlocked = MixLotNoBlockedDbQuery;
         }
      }
   }
   field MixOfLotBatchNoBlocked {
      columnexclude = [true];
   }

   field MixofLotBatchNumbersBlockedon {
      size = Small;
   }
   field ExcludStoragReqValDbQuery {
      size = Small;
      validate command {
         execute {
            set ExcludeStorageReqVal = ExcludStoragReqValDbQuery;
         }
      }
   }
   field ExcludeStorageReqVal {
      columnexclude = [true];
   }
   field ValidationExcludedon {
      size = Small;
   }
   lov DropOffLocationNoRef with ReferenceDropOffLocationSelector;
   field DropOffLocationNoRef.LocationName {
      label = "Drop-Off Location No Description";
   }
   field DropOffLocationNoRef.Warehouse {
      size = Small;
      label = "Drop-Off Warehouse ID";
   }
   field DropOffLocationNoRef.BayNo {
      size = Small;
      label = "Drop-Off Bay ID";
   }
   field DropOffLocationNoRef.RowNo {
      size = Small;
      label = "Drop-Off Row ID";
   }
   field DropOffLocationNoRef.TierNo {
      size = Small;
      label = "Drop-Off Tier ID";
   }
   field DropOffLocationNoRef.BinNo {
      size = Small;
      label = "Drop-Off Bin ID";
   }
   field AvailabilityControlIdRef {
      size = Small;
   }
   field AutoRefillPutawayZones {
      size = Small;
   }
   field PutawayDestination {
      size = Small;
   }
   field RemoteWarehouse {
      size = Small;
   }
   field HideInWhseNavigator {
      size = Small;
      label = "Hidden";
   }
   @DynamicComponentDependency DISCOM
   field AddressType {
      columnvisible = [false];
   }
   @DynamicComponentDependency DISCOM
   field AddressOwner {
      columnvisible = [false];
   }
   @DynamicComponentDependency DISCOM
   field AddressId {
      columnvisible = [false];
   }
   commandgroup CopyBaysfromWarehouseCmdGroup {
      label = "Copy Bays from Warehouse";
      command CopyBaysfromWarehouseCommand;
   }
   commandgroup StockDetailsCommandGroup {
      label = "Stock Details";
      command InventoryPartsInStockCommand;
      command HandlingUnitsInStockCommand;
      command PartInStockReservationsCommand;
   }
   commandgroup InboundOutboundGroup {
      label = "Inbound/ Outbound";
      command TransportTaskLinesCommand;
      command RegisterArrivalsCommand;
      command ReceiveFromTransitCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CopyWarehouseStructureDialog for CopyWarehouseStructure {
   label = "Copy Bays from Warehouse";
   output(Contract, WarehouseId);
   group CopyWarehouseStructureGroup;

   commandgroup CopyWarehouseStructureCmdGroup {
      label = "Copy Warehouse Structure";
      command Ok;
      command Cancel;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Warehouse {
   attribute Contract Text {
      label = "Site";
   }
   attribute WarehouseId Text {
      label = "Warehouse ID";
      --format = uppercase;
   }
   attribute WarehouseTypeId Text {
      label = "Warehouse Type";
   }
   attribute BinWidthCapacity Number {
      label = "Bin Width";
   }
   attribute BinWidthSource Text {
      fetch = "Warehouse_API.Get_Bin_Width_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Bin Width Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinHeightCapacity Number {
      label = "Bin Height";
   }
   attribute BinHeightSource Text {
      fetch = "Warehouse_API.Get_Bin_Height_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Bin Height Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinDeptCapacity Number {
      label = "Bin Depth";
   }
   attribute BinDepthSource Text {
      fetch = "Warehouse_API.Get_Bin_Dept_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Bin Depth Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute LengthUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(CONTRACT))";
      label = "Length UoM";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinVolumeCapacity Number {
      label = "Bin Volume";
   }
   attribute BinVolumeOperativeValue Text {
      fetch = "Warehouse_API.Get_Bin_Volume_Capacity(CONTRACT, WAREHOUSE_ID)";
      label = "Bin Volume Operative Value";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinVolumeSource Text {
      fetch = "Warehouse_API.Get_Bin_Volume_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Bin Volume Source";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute VolumeUoM Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(CONTRACT)";
      label = "Volume UoM";
      maxlength = 100;
      // searchable = false;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BayCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Bay_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Bay Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute RowCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Row_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Row Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute TierCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Tier_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Tier Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinCarryingCapacitySource Text {
      fetch = "Warehouse_API.Get_Bin_Carry_Capacity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Bin Carrying Capacity Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute WeightUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(CONTRACT))";
      label = "Weight UoM";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinMinTemperature Number {
      label = "Min Temperature";
   }
   attribute MinTemperatureSource Text {
      fetch = "Warehouse_API.Get_Bin_Min_Temperature_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Min Temperature Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinMaxTemperature Number {
      label = "Max Temperature";
   }
   attribute MaxTemperatureSource Text {
      fetch = "Warehouse_API.Get_Bin_Max_Temperature_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Max Temperature Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute TemperatureUoM Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(CONTRACT))";
      label = "Temperature UoM";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinMinHumidity Number {
      label = "Min Humidity (%)";
   }
   attribute MinHumiditySource Text {
      fetch = "Warehouse_API.Get_Bin_Min_Humidity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Min Humidity (%) Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BinMaxHumidity Number {
      label = "Max Humidity (%)";
   }
   attribute MaxHumiditySource Text {
      fetch = "Warehouse_API.Get_Bin_Max_Humidity_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Max Humidity (%) Source";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ReceiptsBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Receipts_Blocked_Db(CONTRACT, WAREHOUSE_ID)";
      label = "Receipts Blocked";
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute ReceiptsBlockedon2 Text {
      fetch = "Warehouse_API.Get_Receipts_Blocked_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Receipts Blocked on";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute RcptOccupiedBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Receipt_To_Occup_Blockd_Db(CONTRACT, WAREHOUSE_ID)";
      label = "Receipts to Occupied Blocked";
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute ReceiptsBlockedon3 Text {
      fetch = "Warehouse_API.Get_Receipt_To_Occup_Blkd_Src(CONTRACT, WAREHOUSE_ID)";
      label = "Receipts Blocked on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MixOfPartBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Mix_Of_Parts_Blocked_Db(CONTRACT, WAREHOUSE_ID)";
      label = "Mix of Part Numbers Blocked";
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute MixofPartNumbersBlockedon Text {
      fetch = "Warehouse_API.Get_Mix_Of_Part_Blocked_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Mix of Part Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MixCondCodeBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Mix_Of_Cond_Blocked_Db(CONTRACT, WAREHOUSE_ID)";
      label = "Mix of Condition Codes Blocked";
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute MixofConditionCodesBlockedon Text {
      fetch = "Warehouse_API.Get_Mix_Of_Cond_Blocked_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Mix of Condition Codes Blocked on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute MixLotNoBlockedDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Mix_Of_Lot_Blocked_Db(CONTRACT, WAREHOUSE_ID)";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute MixofLotBatchNumbersBlockedon Text {
      fetch = "Warehouse_API.Get_Mix_Of_Lot_Blocked_Source(CONTRACT, WAREHOUSE_ID)";
      label = "Mix of Lot Batch Numbers Blocked on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ExcludStoragReqValDbQuery Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Exclude_Storage_Req_Val_Db(CONTRACT, WAREHOUSE_ID)";
      label = "Exclude Storage Requirement Validation";
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute ValidationExcludedon Text {
      fetch = "Warehouse_API.Get_Excl_Storage_Req_Val_Src(CONTRACT, WAREHOUSE_ID)";
      label = "Validation Excluded on";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DropOffLocationNoDescription Text {
      fetch = "Inventory_Location_API.Get_Location_Name(CONTRACT, DROP_OFF_LOCATION_NO)";
      label = "Drop-Off Location No Description";
      maxlength = 2000;
      insertable = [false];
      updatable = [false];
   }
   attribute DropOffWarehouseID Text {
      fetch = "Inventory_Location_API.Get_Warehouse(CONTRACT, DROP_OFF_LOCATION_NO)";
      label = "Drop-Off Warehouse ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DropOffBayID Text {
      fetch = "Inventory_Location_API.Get_Bay_No(CONTRACT, DROP_OFF_LOCATION_NO)";
      label = "Drop-Off Bay ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DropOffRowID Text {
      fetch = "Inventory_Location_API.Get_Row_No(CONTRACT, DROP_OFF_LOCATION_NO)";
      label = "Drop-Off Row ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DropOffTierID Text {
      fetch = "Inventory_Location_API.Get_Tier_No(CONTRACT, DROP_OFF_LOCATION_NO)";
      label = "Drop-Off Tier ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DropOffBinID Text {
      fetch = "Inventory_Location_API.Get_Bin_No(CONTRACT, DROP_OFF_LOCATION_NO)";
      label = "Drop-Off Bin ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute AvailabilityControlId Text {
      label = "Default Part Availability Control Warehouse Value";
   }
   attribute OldRouteOrder Text {
      fetch = "route_order";
      label = "Old Route Order";
      implementationtype = "VARCHAR2(15)";
   }
   @DynamicComponentDependency DISCOM
   attribute AddressType Enumeration(WarehouseAddressType) {
      fetch = "DECODE(remote_warehouse_db, 'TRUE', Whse_Shipment_Receipt_Info_API.Get_Address_Type_Db(contract, warehouse_id), NULL)";
   }
   @DynamicComponentDependency DISCOM
   attribute AddressOwner Text {
      fetch = "DECODE(remote_warehouse_db, 'TRUE', Whse_Shipment_Receipt_Info_API.Get_Address_Type_Id(contract, warehouse_id), NULL)";
   }
   @DynamicComponentDependency DISCOM
   attribute AddressId Text {
      fetch = "DECODE(remote_warehouse_db, 'TRUE', Whse_Shipment_Receipt_Info_API.Get_Address_Type_Address_Id(contract, warehouse_id), NULL)";
      label = "Address ID";
   }

   reference WarehouseRef(Contract, WarehouseId) to Warehouse(Contract, WarehouseId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference DropOffLocationNoRef(Contract, DropOffLocationNo) to DropOffLocation(Contract, LocationNo) {
      label = "Drop-Off Location No";
   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Default Part Availability Control Warehouse Value";
   }
   reference WarehouseTypeIdRef(WarehouseTypeId) to WarehouseType(WarehouseTypeId) {
      label = "Warehouse Type";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CopyBaysFromWarehouse {
   initialcheck implementation;
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter ToContract Text;
   parameter ToWarehouseId Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetGlobalWarehouseId Text {
   initialcheck none;
   parameter Contract Text;
   parameter WarehouseId Text;
}

function GetWarehouseKeyCollection Structure(WarehouseKeyListStruct) {
   parameter Selection Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure CopyWarehouseStructure {
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute ContractDesc Text {
      label = "Site Description";
      maxlength = 100;
   }
   attribute WarehouseId Text {
      label = "Warehouse";
      maxlength = 15;
   }
   attribute WarehouseDesc Text {
      label = "Warehouse Description";
      maxlength = 100;
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse";
   }
}

structure WarehouseKeyListStruct {
   attribute Contract Text;
   attribute Warehouse Text;
}
