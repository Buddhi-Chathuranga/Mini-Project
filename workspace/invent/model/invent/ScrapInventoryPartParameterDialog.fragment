----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-11-01  DigPlk  SC21R2-5152, Replaced the functionality of IdentifySerialsInLocAssistant with IdentifySerialsInLocRepeatAssistant.
-- 2019-07-03  JaThlk  SCUXXW4-17765, Did the scrap method implementation in the dialog itself.
-- 2019-06-10  JaThlk  SCUXXW4-21721, Changed the enable condition of OK command to consider CatchUnitEnabled.
-- 2019-04-25  fandse  SCUXXW4-17694, Added logic to get default scrap quantity 1 for serials, removed parameter not used in dialog
-- 2019-04-08  ChFolk  SCUXXW4-18744, Added function GetActiveScrapCodes to filter out active scrap codes only.
-- 2018-06-01  ChFolk  SCUXXW4-5786, Included from dlgScrap.
----------------------------------------------------------------------------------------------------------

fragment ScrapInventoryPartParameterDialog;
component INVENT;
layer Core;
description "fragment uses to enter parameters for Scrapping Inventory Parts";
include fragment InventoryPartInStockUivInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------
---------------------------------- GROUPS -----------------------------------
group ScrapGroup for ScrapStructure {
   field QtyScrapped {
      label = "Total Quantity to Scrap";
   }
   field CatchQtyScrapped {
      label = "Catch Quantity to Scrap";
      visible = [CatchUnitEnabled != null];
   }
   lov ScrappingCodeRef with ReferenceScrappingCauseSelector using GetActiveScrapCodes {
      description = ScrappingCodeRef.RejectMessage;
      label = "Scrapping Cause";
      validate command {
         enabled = [true];
         execute {
            if [ScrapCode != null] {
               call GetScrappingCause(ScrapCode) into ScrapCause;
            }
            else {
               set ScrapCause = null;
            }
         }
      }
   }
   field ScrapNote {
      size = Large;
      label = "Note";
   }
   field PrintServiceabilityTag {
      label = "Print Serviceability Tag";
      editable = [true];
      required = [true];
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog ScrapDialog for ScrapStructure {
   label = "Scrap Inputs";
   input(CatchUnitEnabled, QtyScrapped, Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, ReceiptIssueSerialTrackingDb, AvailableQtyToScrap);
   output(QtyScrapped, PrintServiceabilityTag);

   group ScrapGroup;
   command Ok {
      enabled = [QtyScrapped != null and ScrapCode != null];
      variable PrintServiceabilityTagStr {
         type = Text;
      }
      variable SessionIdVar {
         type = Number;
      }
      execute {
         if [QtyScrapped = 0] {
            info("Quantity Scrapped cannot be 0.");
            exit;
         }
         if [QtyScrapped > AvailableQtyToScrap] {
            alert("Quantity Scrapped cannot be greater than qty available ${AvailableQtyToScrap}.");
            exit;
         }
         if [PrintServiceabilityTag] {
            set PrintServiceabilityTagStr = "TRUE";
         }
         else {
            set PrintServiceabilityTagStr = "FALSE";
         }

         if [ReceiptIssueSerialTrackingDb = "TRUE"  and SerialNo = "*"] {
            call GetRecordsWithSessionId(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, QtyScrapped, CatchQtyScrapped, NULL, NULL, NULL) into IdentifySerialsRecStructure;
            assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
               when OK {
                  set SessionIdVar = IdentifySerialsRecStructure.SessionId;
               }
               when CANCEL {
                  exit;
               }
            }
         }
         call ScrapPart(
         Contract,
         PartNo,
         ConfigurationId,
         LocationNo,
         LotBatchNo,
         SerialNo,
         EngChgLevel,
         WaivDevRejNo,
         ActivitySeq,
         HandlingUnitId,
         CatchQtyScrapped,
         QtyScrapped,
         ScrapCode,
         ScrapNote,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         SessionIdVar,
         true,
         PrintServiceabilityTagStr);
         exit OK;
      }
   }
   command Cancel;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
-------------------------------- STRUCTURES ---------------------------------
structure ScrapStructure {
   attribute CatchUnitEnabled Text;
   attribute QtyScrapped Number;
   attribute CatchQtyScrapped Number;
   attribute ScrapCode Text {
      maxlength = 8;
      required = [true];
      format = uppercase;
   }
   attribute ScrapCause Text {
      maxlength = 2000;
   }
   attribute ScrapNote Text {
      maxlength = 2000;
   }
   attribute PrintServiceabilityTag Boolean;
   attribute Contract Text;
   attribute PartNo Text;
   attribute ConfigurationId Text;
   attribute LocationNo Text;
   attribute LotBatchNo Text;
   attribute SerialNo Text;
   attribute EngChgLevel Text;
   attribute WaivDevRejNo Text;
   attribute ActivitySeq Number;
   attribute HandlingUnitId Number;
   attribute PartTrackingSessionId Number;
   attribute AvailableQtyToScrap Number;
   attribute ReceiptIssueSerialTrackingDb Text;

   reference ScrappingCodeRef(ScrapCode) to ScrappingCause(RejectReason);
}

---------------------------------- ACTIONS ----------------------------------
action ScrapPart {
   initialcheck InventoryPartInStockUivInitialCheck(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter CatchQuantity Number;
   parameter Quantity Number;
   parameter ScrapCause Text;
   parameter ScrapNote Text;
   parameter OrderNo Text;
   parameter ReleaseNo Text;
   parameter SequenceNo Text;
   parameter LineItemNo Text;
   parameter OrderType Text;
   parameter PartTrackingSessionId Number;
   parameter DisconZeroStockHandlUnit Boolean;
   parameter PrintServiceabilityTagDb Text;
   ludependencies = InventoryPartInStock;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetActiveScrapCodes List < Entity(ScrappingCause) > {
   where = "OBJSTATE IN ('Active')";
}

function GetScrappingCause Text {
   parameter ScrapCode Text;
}

