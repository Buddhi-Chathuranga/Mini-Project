--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-05-14  DaZase  SCUXXW4-19690, Added initialcheck to all unbounded actions.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2019-01-27  bajelk  SCUXXW4-15462, Add label for RemoteWarehousePartsPlanningList.
-- 2018-12-26  KoDelk  SCUXXW4-14392, Created
--------------------------------------------------------------------------------------
fragment RemoteWarehousePartsPlanningTab;
component INVENT;
layer Core;
description "Use this fragment to impliment the Remote Warehouse Part Planning List";
include fragment RemoteWarehouseSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command RefillPartsCommand for RemoteWarehouseAssortmentPart {
   label = "Refill Parts";
   mode = SelectedRecords;
   // TODO: If request TEUXX-11793 is handled we can remove PlannableQtyNotNull/RefillPointInvQtyNotNull and use the normal attributes here
   enabled = [AppearAsPutawayZoneDb = "TRUE" and PlannableQtyNotNull < RefillPointInvQtyNotNull];
   bulkexecute {
      bulkcall RefillParts(Contract, WarehouseId, PartNo);
   }
}

@DynamicComponentDependency PURCH
command ViewPurchaseRequisitionLinesCommand for RemoteWarehouseAssortmentPart {
   label = "Purchase Requisition Lines";
   mode = SelectedRecords;
   enabled = [RequisitionLineExist = 1];
   bulkexecute {
      bulknavigate "page/PurchaseRequisitionLines/List?$filter= DestinationWarehouseId eq $[WarehouseId] and Contract eq $[Contract] and PartNo eq $[PartNo]";
   }
}

@DynamicComponentDependency PURCH
command ViewPurchaseOrderLinesCommand for RemoteWarehouseAssortmentPart {
   label = "Purchase Order Lines";
   mode = SelectedRecords;
   enabled = [PurchaseOrderLineExist = 1];
   bulkexecute {
      bulknavigate "page/PurchaseOrderLines/List?$filter= DestinationWarehouseId eq $[WarehouseId] and Contract eq $[Contract] and PartNo eq $[PartNo]";
   }
}
// --- Suggestions, based on resolved logic within 'tbwRemoteWhsePartPlanning' ---
// Navigation actions: The following code templates can be verified and used to define the 'execute' section of a command:
//   navigate "page/PurchaseRequisitionLines/List";   // In Enterprise Explorer identifyed as 'tbwRequisitionDetail' (PURCH)
//   navigate "page/PurchaseOrderLines/List";   // In Enterprise Explorer identifyed as 'tbwPurchaseOrderLine' (PURCH)
// -------------

----------------------------------- LISTS -----------------------------------
list RemoteWarehousePartsPlanningList for RemoteWarehouseAssortmentPart {
   label = "Parts";
   field Contract {
      size = Small;
      columnexclude = [parent.luname = "Warehouse"];
   }
   lov WarehouseIdRef with ReferenceRemoteWarehouseSelector {
      size = Small;
      columnexclude = [parent.luname = "Warehouse"];
   }
   field PartNoRef;
   field PartDescription;
   /*field AssortmentIdRef {
      size = Small;
   }*/
   //field AssortmentDescription;
   lov AssortmentIdRef with RemoteWhseAssortmentSelector {
      description = AssortmentIdRef.Description;
      label = "Assortment";
   }
   field RefillPointInvQty {
      size = Small;
   }
   field RefillToInvQty {
      size = Small;
   }
   field OnhandQty {
      size = Small;
   }
   field PlannableQty {
      size = Small;
   }
   field ReservedQty {
      size = Small;
   }
   field InTransitQty {
      size = Small;
   }
   field QtyInboundInvent {
      size = Small;
   }
   field QtyInboundPurch {
      size = Small;
   }
   field QtyOutbound {
      size = Small;
   }
   field Uom {
      size = Small;
   }
   field RemoveExcessInventoryDb {
      size = Small;
      // truelabel = "<Define text to show when field is checked or 'True' will be shown>";
      // falselabel = "<Define text to show when field is checked or 'False' will be shown>";
   }
   field RefillSource;

   commandgroup BaseCommandsCmdGroup {
      label = "Base Commands";
      command RefillPartsCommand;
      @DynamicComponentDependency PURCH
      command ViewPurchaseRequisitionLinesCommand;
      @DynamicComponentDependency PURCH
      command ViewPurchaseOrderLinesCommand;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
query RemoteWarehouseAssortmentPart {
   from = "remote_whse_part_planning";
   lu = RemoteWhseAssortPart;
   keys = Contract, WarehouseId, PartNo {
      where = "CONTRACT = :Contract and WAREHOUSE_ID = :WarehouseId and PART_NO = :PartNo";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute WarehouseId Text {
      fetch = "WAREHOUSE_ID";
      label = "Warehouse";
      maxlength = 15;
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "PART_DESCRIPTION";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute AssortmentId Text {
      editable = [false];
   }
   /*attribute AssortmentDescription Text {
      fetch = "ASSORTMENT_DESCRIPTION";
      label = "Assortment Description";
      maxlength = 200;
      editable = [false];
   }*/
   attribute RefillPointInvQty Number {
      fetch = "REFILL_POINT_INV_QTY";
      label = "Refill Point Qty";
      editable = [false];
   }
   // Added for client command RefillParts enabling check
   attribute RefillPointInvQtyNotNull Number {
      fetch = "NVL(REFILL_POINT_INV_QTY,0)";
      label = "Refill Point Qty";
      editable = [false];
   }
   attribute RefillToInvQty Number {
      fetch = "REFILL_TO_INV_QTY";
      label = "Refill to Qty";
      editable = [false];
   }
   attribute OnhandQty Number {
      fetch = "ONHAND_QTY";
      label = " On Hand Qty";
      editable = [false];
   }
   attribute PlannableQty Number {
      fetch = "PLANNABLE_QTY";
      label = "Plannable Qty";
      editable = [false];
   }
   // Added for client command RefillParts enabling check
   attribute PlannableQtyNotNull Number {
      fetch = "NVL(PLANNABLE_QTY,0)";
      label = "Plannable Qty";
      editable = [false];
   }
   attribute ReservedQty Number {
      fetch = "RESERVED_QTY";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute InTransitQty Number {
      fetch = "IN_TRANSIT_QTY";
      label = "In Transit Qty";
      editable = [false];
   }
   attribute QtyInboundInvent Number {
      fetch = "QTY_INBOUND_INVENT";
      label = "Inbound Qty from Other Warehouses";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyInboundPurch Number {
      fetch = "QTY_INBOUND_PURCH";
      label = "Inbound Qty from Suppliers";
      maxlength = 100;
      editable = [false];
   }
   attribute QtyOutbound Number {
      fetch = "QTY_OUTBOUND";
      label = "Outbound Qty";
      editable = [false];
   }
   attribute Uom Text {
      fetch = "UOM";
      label = "UoM";
      maxlength = 4000;
   }
   attribute RemoveExcessInventoryDb Boolean("TRUE", "FALSE") {
      fetch = "REMOVE_EXCESS_INVENTORY_DB";
      label = "Remove Excess Inventory";
      editable = [false];
   }
   attribute RefillSource Text {
      fetch = "REFILL_SOURCE";
      maxlength = 4000;
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute RequisitionLineExist Number {
      fetch = "Remote_Whse_Assort_Part_API.Req_Line_Exist_For_Warehouse(PART_NO, CONTRACT, WAREHOUSE_ID)";
      label = "Requisition Line Exist";
      // searchable = false;
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute PurchaseOrderLineExist Number {
      fetch = "Remote_Whse_Assort_Part_API.Po_Line_Exist_For_Warehouse(PART_NO, CONTRACT, WAREHOUSE_ID)";
      label = "Purchase Order Line Exist";
      // searchable = false;
      editable = [false];
   }
   // Handling IEE variable sAppearAsPutawayZone as attribute (was set as window variable by ContextMenuInit in IEE)
   attribute AppearAsPutawayZoneDb Text {
      fetch = "Warehouse_API.Get_Appear_As_Putaway_Zone_Db(CONTRACT, WAREHOUSE_ID)";
      label = "Appear As Putaway Zone";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute RemoteWarehouseDb Text;
   reference WarehouseIdRef(Contract, WarehouseId) to RemoteWarehouse(Contract, WarehouseId) {
      label = "Warehouse";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference AssortmentIdRef(AssortmentId) to RemoteWhseAssortment(AssortmentId) {
      label = "Assortment ID";
   }
}


---------------------------------- ACTIONS ----------------------------------
action RefillParts {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter WarehouseId Text;
   parameter PartNo Text;
   //ludependencies = RemoteWhseAssortPart;
}