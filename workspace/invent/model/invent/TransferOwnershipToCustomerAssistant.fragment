-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2021-11-11  DigPlk  SC21R2-5148, Replaced the functionality of IdentifySerialsInLocAssistant with IdentifySerialsInLocRepeatAssistant.
-- 2020-01-09  PAMMLK  MFSPRING20-381, Added an attribute OwnershipTransferReasonId,a reference OwnershipTransferReasonRef
-- 2020-01-09          to TransferOwnershipToCustomerVirtual and lov field to TransferOwnershipToCustomerGroup.
-- 2019-08-28  ChFolk  SCUXXW4-23117, Used Enumeration for FreezeFlag instead of Boolean.
-- 2019-05-23  fgusse  SCUXXW4-21039, Added ID for all labels for Warehouse
-- 2019-05-21  DaZase  SCUXXW4-19705, Added initialcheck to all unbounded actions.
-- 2019-03-12  JaThlk  SCUXXW4-17128, Added SessionId as an in parameter in IdentifySerialsInLocationAssistant.
-- 2018-12-18  ChFolk  SCUXXW4-5866, Included fragments CustOrdCust1Selector and UserAllowedSiteLovSelector.
-- 2018-11-24  ChFolk  SCUXXW4-5866, Used IdentifySerialsInLocAssistant to defined serials.
-- 2018-10-01  ChFolk  SCUXXW4-5866, Created the fragment to dlgTransferOwnershipToCustomer.
-------------------------------------------------------------------------------------------------------
fragment TransferOwnershipToCustomerAssistant;
component INVENT;
layer Core;
description "Use this assistant to transfer customer-owned stock from one customer to another";

@DynamicComponentDependency ORDER
include fragment CustOrdCust1Selector;
include fragment UserAllowedSiteLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant TransferOwnershipToCustomerAssistant using TransferOwnershipToCustomerSet {
   label = "Transfer Ownership between Customers";
   savemode = OnLostFocus;

   input(ObjidListArr);

   steps {
      step {
         group TransferOwnershipToCustomerGroup;
         list InventoryPartInStockTransferToCustomerList(InventoryPartInStockTransferToCustomerArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [ToCustomer != null];
      variable SessionSelection Text;
      variable ReceiptIssueTrackVar {
         type = Structure(ReceiptIssueSerialTrackForCustTransStructure);
      }
      variable PartTrackingSessionIdVar {
         type = Number;
      }
      execute {
         call CheckReceiptIssueSerialTrackForCustTrans(Objkey) into ReceiptIssueTrackVar;

         if [ReceiptIssueTrackVar.RcptIssueSerTrackSelection = "MULTIPLE"] {
            error("Multiple selection of Receipt Issue Serial Tracking lines are not allowed");
         }
         else {
            if [ReceiptIssueTrackVar.RcptIssueSerTrackSelection = "SINGLE"] {
               call GetRecordsWithSessionId(ReceiptIssueTrackVar.Contract,
               ReceiptIssueTrackVar.PartNo,
               ReceiptIssueTrackVar.ConfigurationId,
               ReceiptIssueTrackVar.LocationNo,
               ReceiptIssueTrackVar.LotBatchNo,
               ReceiptIssueTrackVar.EngChgLevel,
               ReceiptIssueTrackVar.WaivDevRejNo,
               ReceiptIssueTrackVar.ActivitySeq,
               ReceiptIssueTrackVar.HandlingUnitId,
               ReceiptIssueTrackVar.QtyOnhand, NULL, NULL, NULL, NULL) into IdentifySerialsRecStructure;
               assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
         }
         call TransferToCustomer(Objkey, ToCustomer, IdentifySerialsRecStructure.SessionId);
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group TransferOwnershipToCustomerGroup for TransferOwnershipToCustomerVirtual {
   label = "";

   @DynamicComponentDependency ORDER
   lov ToCustomerRef with ReferenceCustOrdCust1Selector {
      label = "Customer";
      description = ToCustomerRef.Name;
      contactwidget {
         enabled = [ToCustomer != null];
         source = Customer;
      }
   }
   lov OwnershipTransferReasonRef with ReferenceOwnershipTransferReasonSelector {
      description = OwnershipTransferReasonRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------
list InventoryPartInStockTransferToCustomerList for InventoryPartInStockTransferToCustomerVirtual {
   label = "";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      label = "Site";
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part";
      description = InventoryPartRef.DescriptionInUse;
   }
   field QtyOnhand;
   field QtyReserved;
   field QtyInTransit;
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "Inventory UoM";
   }
   field ConfigurationId {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field ActivitySeq;
   field ConditionCode {
      size = Small;
   }
   field ConditionCodeDescription {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field HandlingUnitId;
   lov HandlingUnitTypeRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeRef.Description;
      editable = [false];
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field PartOwnership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   field Warehouse {
      size = Small;
   }
   field BayNo {
      size = Small;
   }
   field RowNo {
      size = Small;
   }
   field TierNo {
      size = Small;
   }
   field BinNo {
      size = Small;
   }
   field TopParentHandlingUnitId;
   field TopParentHuTypeId {
      size = Small;
   }
   field TopParentHuTypeDesc {
      size = Small;
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHuLabelId {
      size = Small;
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset TransferOwnershipToCustomerSet for TransferOwnershipToCustomerVirtual;

---------------------------------- ACTIONS ----------------------------------
action TransferToCustomer {
   initialcheck implementation;
   parameter ParentObjkey Text;
   parameter ToCustomer Text;
   parameter PartTrackingSessionId Number;
   ludependencies = InventoryPartInStock;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckReceiptIssueSerialTrackForCustTrans Structure(ReceiptIssueSerialTrackForCustTransStructure) {
   parameter ParentObjkey Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure ReceiptIssueSerialTrackForCustTransStructure {
   attribute Contract Text;
   attribute PartNo Text;
   attribute ConfigurationId Text;
   attribute LocationNo Text;
   attribute LotBatchNo Text;
   attribute EngChgLevel Text;
   attribute WaivDevRejNo Text;
   attribute ActivitySeq Number;
   attribute HandlingUnitId Number;
   attribute QtyOnhand Number;
   attribute RcptIssueSerTrackSelection Text;
}

--------------------------------- VIRTUALS ----------------------------------
virtual TransferOwnershipToCustomerVirtual {
   attribute ToCustomer Text {
      label = "To Customer";
      maxlength = 30;
      format = uppercase;
   }
   attribute ObjidListArr Text {
      label = "";
      maxlength = 2000;
   }
   attribute OwnershipTransferReasonId Text {
      maxlength = 50;
      format = uppercase;
   }
   array InventoryPartInStockTransferToCustomerArray() to InventoryPartInStockTransferToCustomerVirtual();
   @DynamicComponentDependency ORDER
   reference ToCustomerRef(ToCustomer) to CustOrdCust1(CustomerNo);
   reference OwnershipTransferReasonRef(OwnershipTransferReasonId) to OwnershipTransferReason(TransferReasonId) {
      label = "Ownership Transfer Reason";
   }
}

virtual InventoryPartInStockTransferToCustomerVirtual {
   crud = Read, Delete;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute QtyOnhand Number {
      fetch = "qty_onhand";
      label = "On Hand Qty";
      required = [true];
      editable = [false];
   }
   attribute QtyReserved Number {
      fetch = "qty_reserved";
      label = "Reserved Qty";
      required = [true];
      editable = [false];
   }
   attribute QtyInTransit Number {
      fetch = "qty_in_transit";
      label = "In Transit Qty";
      required = [true];
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
      required = [true];
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
      required = [true];
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      maxlength = 6;
      required = [true];
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
      required = [true];
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      maxlength = 10;
      required = [true];
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no ))";
      label = "Condition Code Description";
      maxlength = 35;
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
      required = [true];
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "part_ownership_db";
      label = "Ownership";
      editable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "part_ownership_db";
      label = "Ownership";
      maxlength = 100;
      editable = [false];
   }
   attribute Owner Text {
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id)";
      label = "Owner Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "warehouse";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayNo Text {
      fetch = "bay_no";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "row_no";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierNo Text {
      fetch = "tier_no";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinNo Text {
      fetch = "bin_no";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHuTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHuLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute FreezeFlagDb Text;
   attribute FreezeFlag Enumeration(GenYesNo) {
      fetch = "freeze_flag_db";
      label = "Frozen";
      required = [true];
      editable = [false];
   }
   attribute LocationType Text {
      fetch = "location_type";
      label = "Location Type";
      maxlength = 200;
      required = [true];
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute ExpirationDate Timestamp {
      fetch = "expiration_date";
      label = "Expiration Date";
      editable = [false];
   }
   attribute ReceiptIssueSerialTrackDb Text {
      label = "Serial Tracking at Receipt and Issue";
      maxlength = 100;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Handling_Unit_Category_Id(HANDLING_UNIT_TYPE_ID)";
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitCategoryRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract);

}


