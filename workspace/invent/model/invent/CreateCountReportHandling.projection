----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 2021-11-02  JaThlk  SC21R2-2927, Modified TaskVirtual to add the attribute OneReportPerWarehouse and
-- 2021-11-02          modified ParametersStructure to add OneReportPerWarehouse as a parameter.
-- 2020-05-21  BudKLK  Bug 153999 (SCZ-9885), Added funtion GetProcessCount.
-- 2019-10-29  SBalLK  Bug 150714 (SCZ-7569), Added SetLovUserWhereForBin, SetLovUserWhereForLocationGroup functions for filter valid location group types.
-- 2019-07-29  CKumlk  SCUXXW4-21134, Overrided entity 'HandlingUnitType' to rename field labels.
-- 2019-07-26  CKumlk  SCUXXW4-21135, Overrided entity 'Project' to change labels of 'Customer Id' and 'Customer Project Id' fields.
-- 2019-06-11  DaZase  SCUXXW4-12778, Added function SetLovUserWhereForPart.
-- 2018-12-04  RAKUSE  SCUXXW4-5724, Converted dialog 'dlgPSheetCreateCountReport' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
projection CreateCountReportHandling;
component INVENT;
layer Core;
description "Scheduled Task Assistant handling ''Create Count Report''";
category Users;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseLov2Selector;
include fragment WarehouseBayLov2Selector;
include fragment WarehouseBayRowLov2Selector;
include fragment WarehouseBayTierLov2Selector;
include fragment WarehouseBayBinLovSelector;
include fragment InventoryPartLov2Selector;
include fragment LovCommodityGroup2Selector;


------------------------------ ENTITY DETAILS -------------------------------
@Override
@DynamicComponentDependency PROJ
entity Project {
   attribute CustomerId Text {
      label = "Customer ID";
   }
   attribute CustomerProjectId Text {
      label = "Customer Project ID";
   }
}

@Override
entity HandlingUnitType {
   attribute UomForLength Text {
      label = "UoM For Length";
   }
   attribute UomForVolume Text {
      label = "UoM For Volume";
   }
   attribute UomForWeight Text {
      label = "UoM For Weight";
   }
   attribute PrintLabel Enumeration(FndBoolean) {
      lovcolumn = [false];
   }
   attribute PrintShipmentLabel Enumeration(FndBoolean) {
      lovcolumn = [true];
   }
   attribute NoOfHandlingUnitLabels Number {
      lovcolumn = [false];
   }
   attribute NoOfShipmentLabels Number {
      lovcolumn = [true];
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration FrequencyClassEnum {
   value = "VERY SLOW MOVER" {
      identifier = "VerySlowMover";
      label = "Very Slow Mover";
   }
   value = "SLOW MOVER" {
      identifier = "SlowMover";
      label = "Slow Mover";
   }
   value = "MEDIUM MOVER" {
      identifier = "MediumMover";
      label = "Medium Mover";
   }
   value = "FAST MOVER" {
      identifier = "FastMover";
      label = "Fast Mover";
   }
}
enumeration LifeCycleStageEnum {
   value = "DEVELOPMENT" {
      identifier = "Development";
      label = "Development";
   }
   value = "INTRODUCTION" {
      identifier = "Introduction";
      label = "Introduction";
   }
   value = "MATURE" {
      identifier = "Mature";
      label = "Mature";
   }
   value = "DECLINE" {
      identifier = "Decline";
      label = "Decline";
   }
   value = "EXPIRED" {
      identifier = "Expired";
      label = "Expired";
   }
}
-------------------------------- STRUCTURES----------------------------------

@Override
structure ParametersStructure {
   attribute Contract Text;
   attribute CycleCodeDb Enumeration(CyclicCounting);
   attribute WarehouseId Text;
   attribute BayId Text;
   attribute RowId Text;
   attribute TierId Text;
   attribute BinId Text;
   attribute StorageZoneId Text;
   attribute PartNo Text;
   attribute FreezeCodeDb Boolean("Y", "N");
   attribute IncludeAllQtyDb Boolean("Y", "N");
   attribute ProcessCount Number;
   attribute ExcludeSince Number;
   attribute MaxQtyOnhand Number;
   attribute SecondCommodity Text;
   attribute ExcludeCompanyOwned Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeCustomerOwned Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeRotablePool Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeConsignment Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeSupplierLoaned Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeFaRotablePool Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeProjectInventory Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeStandardInventory Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeAttachedToHu Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeNotAttachedToHu Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeSupplierRented Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeCompanyRentalAsset Boolean("EXCLUDE", "INCLUDE");
   attribute ProjectId Text;
   attribute LocationGroup Text;
   attribute AbcClass Text;
   attribute FrequencyClassDb Enumeration(FrequencyClassEnum);
   attribute LifecycleStageDb Enumeration(LifeCycleStageEnum);
   attribute PrintCountReportDb Enumeration(InventReportPrintOption);
   attribute IncludeFullQtyOfHuDb Boolean("Y", "N");
   attribute HandlingUnitTypeId Text;
   attribute TopHandlingUnitTypeId Text;
   attribute HandlingCategoryTypeId Text;
   attribute TopHandlingCategoryTypeId Text;
   attribute OneReportPerWarehouse Boolean("Y", "N");
}

--------------------------------- VIRTUALS ----------------------------------

@Override
virtual TaskVirtual using BatchSchedule {
   attribute Contract Text {
      required = [true];
      format = uppercase;
   }
   attribute CycleCodeDb Enumeration(CyclicCounting) {
      required = [true];
   }
   attribute WarehouseId Text;
   attribute BayId Text;
   attribute RowId Text;
   attribute TierId Text;
   attribute BinId Text;
   attribute StorageZoneId Text;
   attribute PartNo Text {
      format = uppercase;
   }
   attribute FreezeCodeDb Boolean("Y", "N");
   attribute IncludeAllQtyDb Boolean("Y", "N");
   attribute ProcessCount Number;
   attribute ExcludeSince Number;
   attribute MaxQtyOnhand Number;
   attribute SecondCommodity Text {
      format = uppercase;
   }
   attribute ExcludeCompanyOwned Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeCustomerOwned Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeRotablePool Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeConsignment Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeSupplierLoaned Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeFaRotablePool Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeProjectInventory Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeStandardInventory Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeAttachedToHu Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeNotAttachedToHu Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeSupplierRented Boolean("EXCLUDE", "INCLUDE");
   attribute ExcludeCompanyRentalAsset Boolean("EXCLUDE", "INCLUDE");
   attribute ProjectId Text {
      format = uppercase;
   }
   attribute LocationGroup Text {
      format = uppercase;
   }
   attribute AbcClass Text {
      format = uppercase;
   }
   attribute FrequencyClassDb Enumeration(FrequencyClassEnum);
   attribute LifecycleStageDb Enumeration(LifeCycleStageEnum);
   attribute PrintCountReportDb Enumeration(InventReportPrintOption);
   attribute IncludeFullQtyOfHuDb Boolean("Y", "N");
   attribute HandlingUnitTypeId Text {
      format = uppercase;
   }
   attribute TopHandlingUnitTypeId Text {
      format = uppercase;
   }
   attribute HandlingCategoryTypeId Text {
      format = uppercase;
   }
   attribute TopHandlingCategoryTypeId Text {
      format = uppercase;
   }
   attribute OneReportPerWarehouse Boolean("Y", "N");

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov2(Contract, WarehouseId) {
      label = "Warehouse";
   }
   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBayLov2(Contract, WarehouseId, BayId) {
      label = "Bay";
   }
   reference RowIdRef(Contract, WarehouseId, BayId, RowId) to WarehouseBayRowLov2(Contract, WarehouseId, BayId, RowId) {
      label = "Row";
   }
   reference TierIdRef(Contract, WarehouseId, BayId, TierId) to WarehouseBayTierLov2(Contract, WarehouseId, BayId, TierId) {
      label = "Tier";
   }
   reference BinIdRef(Contract, WarehouseId, BayId, RowId, TierId, BinId) to WarehouseBayBinLov(Contract, WarehouseId, BayId, RowId, TierId, BinId) {
      label = "Bin";
   }
   reference StorageZoneIdRef(Contract, StorageZoneId) to StorageZone(Contract, StorageZoneId) {
      label = "Storage Zone";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov2(Contract, PartNo) {
      label = "Part No";
   }
   reference CommodityCodeRef(SecondCommodity) to LovCommodityGroup2(CommodityCode) {
      label = "Commodity Group 2";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   reference LocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      label = "Location Group";
   }
   reference AbcClassRef(AbcClass) to AbcClass(AbcClass) {
      label = "ABC Class";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   reference TopHandlingUnitTypeIdRef(TopHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Top Handling Unit Type ID";
   }
   reference HandlingCategoryTypeIdRef(HandlingCategoryTypeId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category ID";
   }
   reference TopHandlingCategoryTypeIdRef(TopHandlingCategoryTypeId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Top Handling Unit Category ID";
   }

   ---------------------------
   ---

}


function SetLovUserWhereForPart List<Entity(InventoryPartLov2)> {
   where = " EXISTS (SELECT 1 FROM inventory_part_planning ipp
   WHERE inventory_part_lov2.contract = ipp.contract
   AND inventory_part_lov2.part_no = ipp.part_no
   AND ipp.planning_method NOT IN ('K','O','T'))";
}

function SetLovUserWhereForBin List<Entity(WarehouseBayBinLov)> {
   where = "inventory_location_type_db IN ('PICKING','F','MANUFACTURING')";
}

function SetLovUserWhereForLocationGroup List<Entity(InventoryLocationGroup)> {
   where = "inventory_location_type_db IN ( 'PICKING','F','MANUFACTURING')";
}

function GetProcessCount Number {
   parameter Contract Text;
}
