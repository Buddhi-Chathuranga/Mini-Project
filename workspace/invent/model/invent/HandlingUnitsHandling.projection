-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2022-01-19  Aabalk  Bug 162178(SCZ-17421), Modified ShipmentIdRef reference to ShipmentLov from ConsolidatedShipmentLov.
-- 2019-03-15  ChFolk  SCUXXW4-17187, Included dynamic dependency anotations where necessary.
-- 2018-04-12  Mwerse  SCUXXW4-6820, Converted from tbwHandlingUnits using MTG Version: 1.16
-----------------------------------------------------------------------------

projection HandlingUnitsHandling;
component INVENT;
layer Core;
description "Use this API to view information about handling units.";
category Users;
@DynamicComponentDependency SHPMNT
include fragment ShipmentLov;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset HandlingUnits for HandlingUnit;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity HandlingUnit {
   crud = Read, Update, Delete;
   from = "handling_unit_extended";
   ludependencies = DocumentText;
   attribute HandlingUnitId Number {
      required = [true];
   }
   attribute ParentHandlingUnitId Number {
      editable = [ETag = null];
   }
   attribute Contract Text {
      label = "Site";
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute AccessoryExist Boolean("TRUE", "FALSE") {
      fetch = "ACCESSORY_EXIST";
      label = "Accessory Exist";
      editable = [ETag = null];
   }
   attribute Composition Text {
      fetch = "Handling_Unit_API.Get_Composition(HANDLING_UNIT_ID)";
      label = "Composition";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForLength Text {
      editable = [false];
   }
   attribute NetWeight Number {
      fetch = "NET_WEIGHT";
      label = "Net Weight";
      editable = [false];
   }
   attribute TareWeight Number {
      fetch = "TARE_WEIGHT";
      label = "Tare Weight";
      editable = [false];
   }
   attribute OperativeGrossWeight Number {
      fetch = "OPERATIVE_GROSS_WEIGHT";
      label = "Operative Gross Weight";
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "UOM_FOR_WEIGHT";
      label = "Uom for Weight";
      maxlength = 30;
      editable = [false];
   }
   attribute OperativeVolume Number {
      fetch = "OPERATIVE_VOLUME";
      label = "Operative Volume";
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "UOM_FOR_VOLUME";
      label = "Uom for Volume";
      maxlength = 30;
      editable = [false];
   }
   attribute AdditiveVolumeDb Boolean("TRUE", "FALSE") {
      fetch = "ADDITIVE_VOLUME_DB";
      label = "Additive Volume";
      editable = [false];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      fetch = "GENERATE_SSCC_NO_DB";
      label = "Generate SSCC";
      editable = [ETag != null];
      required = [true];
   }
   attribute Sscc Text {
      label = "SSCC";
   }
   attribute PrintLabelDb Boolean("TRUE", "FALSE") {
      fetch = "PRINT_LABEL_DB";
      label = "Print Handling Unit Label";
      editable = [ETag != null];
      required = [true];
   }
   attribute PrintContentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "PRINT_CONTENT_LABEL_DB";
      label = "Print Handling Unit Content Label";
      editable = [ETag != null];
      required = [true];
   }
   attribute PrintShipmentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "PRINT_SHIPMENT_LABEL_DB";
      label = "Print Shipment Handling Unit Label";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfPartNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_PART_NO_BLOCKED_DB";
      label = "Mix of Part Numbers Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfCondCodeBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_COND_CODE_BLOCKED_DB";
      label = "Mix of Condition Code Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MixOfLotBatchBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_LOT_BATCH_BLOCKED_DB";
      label = "Mix of Lot Batch Numbers Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute MaxVolumeCapacity Number {
      fetch = "MAX_VOLUME_CAPACITY";
      label = "Max Volume Capacity";
      editable = [false];
   }
   attribute MaxWeightCapacity Number {
      fetch = "MAX_WEIGHT_CAPACITY";
      label = "Max Weight Capacity";
      editable = [false];
   }
   attribute StackableDb Boolean("TRUE", "FALSE") {
      fetch = "STACKABLE_DB";
      label = "Stackable";
      editable = [false];
   }
   attribute SourceRef1 Text {
      label = "Source Ref 1";
      editable = [ETag = null];
   }
   attribute SourceRef2 Text {
      label = "Source Ref 2";
      editable = [ETag = null];
   }
   attribute SourceRef3 Text {
      label = "Source Ref 3";
      editable = [ETag = null];
   }
   attribute SourceRefType Enumeration(HandlUnitSourceRefType) {
      fetch = "HANDL_UNIT_SOURCE_REF_TYPE_API.Decode(SOURCE_REF_TYPE_DB)";
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute LocationTypeDb Text {
      fetch = "LOCATION_TYPE_DB";
      label = "Location Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute WarehouseId Text {
      fetch = "WAREHOUSE_ID";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayId Text {
      fetch = "BAY_ID";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "ROW_ID";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierId Text {
      fetch = "TIER_ID";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinId Text {
      fetch = "BIN_ID";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute ShipmentId Number {
      editable = [ETag = null];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   exclude attributes = IsInStock;
   attribute HandlingUnitCategoryId Text {
      label = "Handling Unit Category ID";
      fetch = "HANDLING_UNIT_TYPE_API.Get_Handling_Unit_Category_Id(HANDLING_UNIT_TYPE_ID)";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference ParentHandlingUnitIdRef(ParentHandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Parent Handling Unit ID";
   }
   reference UomForLengthRef(UomForLength) to IsoUnit(UnitCode) {
      label = "Uom for Length";
   }
   reference UomForWeightRef(UomForWeight) to IsoUnit(UnitCode) {
      label = "Uom for Weight";
   }
   reference UomForVolumeRef(UomForVolume) to IsoUnit(UnitCode) {
      label = "Uom for Volume";
   }
   @DynamicComponentDependency SHPMNT
   reference ShipmentIdRef(ShipmentId) to ShipmentLov(ShipmentId) {
      label = "Shipment ID";
   }
   reference HandlingUnitCategoryRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category";
   }
}