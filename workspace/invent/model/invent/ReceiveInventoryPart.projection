-----------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------
-- 2021-02-19  WaSalk  SC2020R1-12581, Added EnabledLccParams to support LCC concept and removed fragment LocalizationControlCenterHandler
-- 2021-02-19          and WarehouseJournalEnabled.
-- 2020-12-03  UdGnlk  SCZ-12800, Modified HandlingUnitTypeId column making it editable false not to allow editing.
-- 2020-03-10  WaSalk  GESPRING20-3756, Added DeliveryReasonId to ReceiveInventoryPartInUpdate and ReceiveInventoryPartInCreate actions.
-- 2020-02-17  WaSalk  GESPRING20-1794, Added LocalizationControlCenterHandler fragment, Attrbutes DeliveryReasonId.
-- 2020-02-17          WarehouseJournalEnabled and company to enable Localization WarehouseJournal.
-- 2019-06-21  JaThlk  SCUXXW4-22638, Removed the insertable = [false] property to fix the issue in code parts.
-- 2019-01-02  Yasmlk  SCUXXW4-6301, Implemented action GetReportListDetailsForPrintServiceability.
-- 2018-12-27  JaThlk  SCUXXW4-6301, Converted from frmInvReceipt using MTG Version: 1.34
-----------------------------------------------------------------------------------------

projection ReceiveInventoryPart;
component INVENT;
layer Core;
description "Use this window to manually enter receipts of parts inventory parts with Company Owned or Company Rental Asset ownership. In the upper part of the window, you can search for the part that you want to receive.
Before the receipt is made, it is also in some cases possible to change the inventory value and add a note for the transaction.";
category Users;
include fragment HandlingUnitNoShipmentLovSelector;
include fragment InventoryLocation5Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
include fragment PrePostingWithoutSourceAssistant;
include fragment PrintServiceabilityDialog;
include fragment SerialNumberAssistant;
@DynamicComponentDependency COST
include fragment CostBucketInventLovSelector;
include fragment DefineCostStructureAssistant;
include fragment PrintBarcodeLabelsDialog;
include fragment PrintBarcodeLabelsSingleDialog;
include fragment InventoryPartInitialCheck;
@DynamicComponentDependency MFGSTD
include fragment CreateNewPartRevisionAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------


------------------------------ ENTITY DETAILS -------------------------------


---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.34
// Enterprise Explorer Source: frmInvReceipt
// Language: en-US

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartConfigSet for InventoryPartConfig;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartConfig {
   crud = Read, Update;
   from = "invent_part_config_stockable";
   keys = PartNo, Contract, ConfigurationId {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and CONFIGURATION_ID = :ConfigurationId";
   }
   ludependencies = InventoryPartInStock;

   supportwarnings = [true];
   attribute PartNo Text {
      maxlength = 100;
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute ConfigurationId Text {
      maxlength = 100;
      editable = [false];
   }
   attribute UnitCost Number {
      fetch = "Inventory_Part_Config_API.Get_Inventory_Value_By_Method(contract, part_no, configuration_id)";
      label = "Unit Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute Uom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShortageExist Number {
      fetch = "Shortage_Demand_API.Shortage_Exists(contract, part_no)";
      maxlength = 2000;
      editable = [false];
   }
   attribute ReceiptIssueSerialTrackDb Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      insertable = [false];
   }
   attribute ZeroCostOnly Text {
      fetch = "Inventory_Part_Zero_Cost_API.Decode('O')";
      insertable = [false];
   }
   attribute ZeroCostOnlyFlag Text {
      fetch = "Inventory_Part_API.Get_Zero_Cost_Flag(contract, part_no)";
      insertable = [false];
   }
   attribute SystemShortageFlag Text {
      fetch = "Mpccom_System_Parameter_API.Get_Parameter_Value1('SHORTAGE_HANDLING')";
   }
   attribute Shortage Text {
      fetch = "Inventory_Part_Shortage_API.Decode('Y')";
   }
   attribute PartShortageFlag Text {
      fetch = "Inventory_Part_API.Get_Shortage_Flag( contract, part_no)";
   }

   attribute PrintBarcode Boolean {
      fetch = "NULL";
      editable = [true];
      updatable = [false];
      insertable = [false];
      required = [true];
   }
   attribute InventorySource Text {
      label = "Note";
      fetch = "NULL";
      maxlength = 2000;
      editable = [true];
      updatable = [false];
      insertable = [false];
      required = [true];
   }
    -- gelr: warehouse_journal, begin
   attribute DeliveryReasonId Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(Contract)";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Site_API.Get_Company(Contract))";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   -- gelr: warehouse_journal, end
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   -- gelr: warehouse_journal, begin
   reference DelivReasonIdRef(Company, DeliveryReasonId) to DeliveryReason(Company, DeliveryReasonId);
   -- gelr: warehouse_journal, end
   array PartLocArray(PartNo, Contract, ConfigurationId) to InventoryPartInStock(PartNo, Contract, ConfigurationId);
}
@Override
entity InventoryPartInStock {
   crud = Create, Read, Update;
   from = "inventory_part_in_stock_deliv";
   keys = PartNo, Contract, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, ConfigurationId, ActivitySeq {
      where = "PART_NO = :PartNo and CONTRACT = :Contract and LOCATION_NO = :LocationNo and HANDLING_UNIT_ID = :HandlingUnitId and LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and WAIV_DEV_REJ_NO = :WaivDevRejNo and ENG_CHG_LEVEL = :EngChgLevel and CONFIGURATION_ID = :ConfigurationId and ACTIVITY_SEQ = :ActivitySeq";
   }
   where = "FREEZE_FLAG_DB = 'N' AND ACTIVITY_SEQ = 0";
   use attributes = QtyOnhand, CatchQtyOnhand, ExpirationDate, Warehouse, BayNo, RowNo, TierNo, BinNo, LocationType, AvailabilityControlId, AvgUnitTransitCost, QtyInTransit, QtyReserved, FreezeFlag;
   ludependencies = InventoryPartInStock;
   attribute PartNo Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
      editable = [false];
      insertable = [false];
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty";
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
      editable = [false];
   }
   attribute LocationType Text {
      fetch = "location_type";
      maxlength = 20;
      insertable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      format = uppercase;
   }
   attribute SerialNo Text {
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no )";
      label = "Condition Code";
      maxlength = 10;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute WaivDevRejNo Text {
      format = uppercase;
   }
   attribute AvailabilityControlId Text {
      editable = [false];
      insertable = [false];
   }
   attribute EngChgLevel Text {
      label = "Revision No";
      format = uppercase;
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute Ownership Enumeration(PartOwnership.CompRent) {
      fetch = "DECODE(serial_no, '*', part_ownership_db, DECODE(Part_Serial_Catalog_API.Get_Part_Ownership_Db(part_no, serial_no), 'COMPANY RENTAL ASSET', Part_Serial_Catalog_API.Get_Part_Ownership_Db(part_no, serial_no), part_ownership_db))";
      label = "Ownership";
      editable = [ETag = null];
      default = "Part_Ownership_API.DB_COMPANY_OWNED";
   }
   attribute Owner Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner";
      maxlength = 100;
      editable = [ETag = null];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute AvgUnitTransitCost Number {
      editable = [false];
      insertable = [false];
   }
   attribute QtyInTransit Number {
      label = "In Transit Qty";
      editable = [false];
      insertable = [false];
   }
   attribute QtyReserved Number {
      label = "Reserved Qty";
      editable = [false];
      insertable = [false];
   }
   attribute FreezeFlag Text {
      fetch = "freeze_flag";
      label = "Frozen";
      maxlength = 20;
      editable = [false];
      insertable = [false];
   }
   attribute PartOwnershipDb Text {
      fetch = "part_ownership_db";
      label = "Part Ownership";
      maxlength = 20;
      editable = [false];
      insertable = [false];
   }
   attribute OperationalCondition Text {
      fetch = "operational_condition";
      label = "Operational Condition";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute ActivitySeq Number {
      maxlength = 10;
      required = [true];
   }
   attribute QuantityReceived Number {
      fetch = "NULL";
      editable = [true];
      required = [true];
   }
   attribute CatchQuantityReceived Number {
      fetch = "NULL";
      editable = [true];
   }
   attribute AccountNo Text {
      fetch = "NULL";
   }
   attribute CostCenter Text {
      fetch = "NULL";
   }
   attribute CodeC Text {
      fetch = "NULL";
   }
   attribute CodeD Text {
      fetch = "NULL";
   }
   attribute ObjectNo Text {
      fetch = "NULL";
   }
   attribute ProjectNo Text {
      fetch = "NULL";
   }
   attribute CodeG Text {
      fetch = "NULL";
   }
   attribute CodeH Text {
      fetch = "NULL";
   }
   attribute CodeI Text {
      fetch = "NULL";
   }
   attribute CodeJ Text {
      fetch = "NULL";
   }
   attribute ReceiptIssueSerialTrackDb Text {
      fetch = "NULL";
      insertable = [false];
   }
   attribute SerialObjkey Text {
      fetch = "NULL";
   }
   attribute ZeroCostOnly Text {
      fetch = "Inventory_Part_Zero_Cost_API.Decode('O')";
      insertable = [false];
   }
   attribute ZeroCostOnlyFlag Text {
      fetch = "Inventory_Part_API.Get_Zero_Cost_Flag(contract, part_no)";
      insertable = [false];
   }
   attribute PrintBarcode Text {
      fetch = "NULL";
   }
   attribute InventorySource Text {
      fetch = "NULL";
   }
   attribute CostDetailId Number {
      fetch = "NULL";
   }
   attribute RemoveCostDetails Text {
      fetch = "'FALSE'";
      required = [true];
      insertable = [false];
   }
   -- gelr: warehouse_journal, begin
   attribute DeliveryReasonId Text {
      fetch = "NULL";
   }
   -- gelr: warehouse_journal, end

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation5(Contract, LocationNo) {
      label = "Location No";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnitNoShipmentLov(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference LocationTypeRef(LocationType) to InventoryLocationTypeLov(InventoryLocationType) {
      label = "Location Type";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   @DynamicComponentDependency MFGSTD
   reference EngChgLevelRef(Contract, PartNo, EngChgLevel) to PartRevision(Contract, PartNo, EngChgLevel) {
      label = "Revision No";
   }
   reference PartCatalogRef(PartNo) to PartCatalog(PartNo);
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);

   action ReceiveInventoryPartInUpdate {
      parameter QuantityReceived Number;
      parameter CatchQuantityReceived Number;
      parameter AccountNo Text;
      parameter CostCenter Text;
      parameter CodeC Text;
      parameter CodeD Text;
      parameter ObjectNo Text;
      parameter ProjectNo Text;
      parameter CodeG Text;
      parameter CodeH Text;
      parameter CodeI Text;
      parameter CodeJ Text;
      parameter InventorySource Text;
      parameter CostDetailId Number;
      parameter SerialObjkey Text;
      parameter PrintBarcode Text;
      parameter  ExpirationDate Date;
      parameter DeliveryReasonId Text;
      ludependencies = InventoryPartInStock;
      supportwarnings = [true];
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query InventoryLocationTypeLov {
   from = "inventory_location_type";
   keys = InventoryLocationType;
   attribute InventoryLocationType Text {
      label = "Inventory Location Type";
      lovcolumn = [true];
   }
   attribute Description Text {
      label = "Description";
      lovcolumn = [true];
   }


}

---------------------------------- ACTIONS ----------------------------------

action GetReportResultKeyList Text {
   initialcheck implementation;
   parameter SelectedKeyList Text;
}

action GetReportListDetailsForPrintServiceability Text {
   initialcheck implementation;
   parameter SelectionKeyList Text;
   parameter ServiceabilityStatus Text;
}

action ReceiveInventoryPartInCreate {
   initialcheck InventoryPartInitialCheck(Contract, PartNo);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter SerialNo Text;
   parameter HandlingUnitId Number;
   parameter QuantityReceived Number;
   parameter CatchQuantityReceived Number;
   parameter AccountNo Text;
   parameter CostCenter Text;
   parameter CodeC Text;
   parameter CodeD Text;
   parameter ObjectNo Text;
   parameter ProjectNo Text;
   parameter CodeG Text;
   parameter CodeH Text;
   parameter CodeI Text;
   parameter CodeJ Text;
   parameter InventorySource Text;
   parameter CostDetailId Number;
   parameter ConditionCode Text;
   parameter SerialObjkey Text;
   parameter PrintBarcode Text;
   parameter OwnerName Text;
   parameter Owner Text;
   parameter Ownership Enumeration(PartOwnership);
   parameter ExpirationDate Date;
   parameter DeliveryReasonId Text;
   ludependencies = InventoryPartInStock, InventoryPartConfig;
   supportwarnings = [true];
}


--------------------------------- FUNCTIONS ---------------------------------
function ValidateLocationInfo Structure(WarehouseLocationInfoStructure) {
   parameter Contract Text;
   parameter LocationNo Text;
}
function CheckExist Structure(CheckExistStructure) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter ConditionCode Text;
}
function GetHandlingUnitIds List<Entity(HandlingUnitNoShipmentLov)> {
   parameter Contract Text;
   parameter LocationNo Text;
   where = ":LocationNo IS NULL OR (CONTRACT = :Contract AND LOCATION_NO = :LocationNo)";
}
function GetLocationNos List<Entity(InventoryLocation5)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function GetHandlingUnitLocationNo List<Entity(InventoryLocation5)> {
   parameter Contract Text;
   parameter HandlingUnitId Number;
   where = "CONTRACT = :Contract AND
            ((Handling_Unit_API.Get_Location_No(:HandlingUnitId) IS NOT NULL AND LOCATION_NO = Handling_Unit_API.Get_Location_No(:HandlingUnitId)) OR Handling_Unit_API.Get_Location_No(:HandlingUnitId) IS NULL)";
}
function GetOwnershipDbValue Text {
   parameter OwnershipDbValue Enumeration(PartOwnership);
}

-------------------------------- STRUCTURES ---------------------------------
structure WarehouseLocationInfoStructure {
   attribute Warehouse Text;
   attribute BayNo Text;
   attribute RowNo Text;
   attribute TierNo Text;
   attribute BinNo Text;
   attribute LocationType Text;
}
structure CheckExistStructure {
   attribute LotBatchExist Text;
   attribute StandardCostExist Text;
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

