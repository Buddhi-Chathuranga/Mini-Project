--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2019-08-23  MeAblk  SCUXXW4-23916, Added the search context into the tree in order to correctly populate the connected tabs.
--  2019-06-22  bajelk  SCUXXW4-22553, added colors for badges in AssortmentStructureSelector .
--  2018-05-28  bajelk  SCUXXW4-20131, Added GetSiteClusterNodeId function as required.
--  2018-04-18  bajelk  SCUXXW4-17745, Changed "Parts by Assortment Site and Cluster" header name and navigator name as "Parts by Assortment and Site Cluster"
--  2018-12-08  KoDelk  SCUXXW4-5946, Converted frmAssortmentDetails using MTG Version: 1.34
---------------------------------------------------------------------------------
client PartsByAssortmentAndSiteCluster;
component INVENT;
layer Core;
projection PartsByAssortmentAndSiteClusterHandling;
include fragment InventoryPartsList;
include fragment PlanningDetailsForInventoryPartsList;
@DynamicComponentDependency ORDER
include fragment SalesPartsList;
@DynamicComponentDependency PURCH
include fragment PurchasePartsList;
@DynamicComponentDependency PURCH
include fragment SupplierPerPartList;

warningsenabled = AssortmentStructure;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PartsbyAssortmentandSiteClusterNavEntry parent InventNavigator.PartMasterDataAssortment at index 300 {
      label = "Parts by Assortment and Site Cluster ";
      tree Tree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using AssortmentStructureSet {
   label = "Parts by Assortment and Site Cluster: ${AssortmentId} - ${Description}";
   stateindicator AssortmentStructureStateIndicator;
   editmode = MultiField;
   selector AssortmentStructureSelector;
   group AssortmentStructureGroup;

   tabs {
      tab {
         label = "Inventory Parts";
         list InventoryPartList using GetInventoryPartsList(AssortmentId, AssortmentId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      tab {
         label = "Inventory Part Planning";
         list InventoryPartPlanningOverviewList using GetInventPartPlanningList(AssortmentId, AssortmentId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      tab {
         label = "Classification Detail";
         singleton RootNodeDetailSingleton(AssortmentNodeArrayThis);
         group ClassificationDetailGroup bind RootNodeDetailSingleton;
      }
      @DynamicComponentDependency ORDER
      tab {
         label = "Sales Parts";
         list SalesPartList using GetSalesPartList(AssortmentId, AssortmentId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Purchase Parts";
         list PurchasePartList using GetPurchasePartList(AssortmentId, AssortmentId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Supplier for Purchase Part";
         list SupplierPerPartList using GetSuplierForPurchasePartList(AssortmentId, AssortmentId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId) {
            details = "page/SupplierForPurchasePart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and VendorNo eq $[VendorNo]";
         }
      }
   }
}
page AssortmentNodePage using AssortmentNodeSet {
   label = "Parts by Assortment Site Cluster: ${AssortmentId} - ${Description}";
   stateindicator AssortmentStructureStateIndicator;
   editmode = MultiField;
   selector AssortmentNodeSelector;
   group AssortmentNodeStructureGroup;

   tabs {
      tab {
         label = "Inventory Parts";
         list InventoryPartList using GetInventoryPartsList(AssortmentId, AssortmentNodeId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      tab {
         label = "Inventory Part Planning";
         list InventoryPartPlanningOverviewList using GetInventPartPlanningList(AssortmentId, AssortmentNodeId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      tab {
         label = "Classification Detail";
         group ClassificationDetailGroup;
      }
      @DynamicComponentDependency ORDER
      tab {
         label = "Sales Parts";
         list SalesPartList using GetSalesPartList(AssortmentId, AssortmentNodeId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Purchase Parts";
         list PurchasePartList using GetPurchasePartList(AssortmentId, AssortmentNodeId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId, searchcontext.AssortmentStructureSearchContext.SiteClusterNodeId);
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Supplier for Purchase Part";
         list SupplierPerPartList using GetSuplierForPurchasePartList(AssortmentId, AssortmentNodeId, searchcontext.AssortmentStructureSearchContext.FilterType, searchcontext.AssortmentStructureSearchContext.SiteClusterId) {
            details = "page/SupplierForPurchasePart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and VendorNo eq $[VendorNo]";
         }
      }
   }
}
--------------------------------- SINGLETON ---------------------------------
singleton RootNodeDetailSingleton for AssortmentNode;
-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector AssortmentStructureSelector for AssortmentStructure {
   label = "${AssortmentId} - ${Description} - ${Objstate}";
   static AssortmentId;
   static Description;
   badge Objstate {
      emphasis Complementary7 = [Objstate = "Active"];
      emphasis Complementary2 = [Objstate = "Planned"];
   }
   static ClassificationStandard {
      visible = [ClassificationStandard != null];
   }
   fieldorder = AssortmentId, Description, Objstate, ClassificationStandard;
}
@Override
selector AssortmentNodeSelector for AssortmentNode {
   label = "${Description}";
   static AssortmentId {
      visible = [false];
   }
   static Description;
}
---------------------------------- GROUPS -----------------------------------
group AssortmentStructureGroup for AssortmentStructure {
   label = "Assortment Structure";
   lov AssortmentStructureRef with AssortmentStructureSelector {
      description = Description;
   }
   lov ClassificationStandardRef with ReferenceClassificationStandardSelector {
      description = ClassificationStandardRef.Description;
      searchable = true;
   }
}
group ClassificationDetailGroup for AssortmentNode {
   label = "Classification Detail";
   field ClassificationPartNo;
   field UnitCode;
}
group AssortmentNodeStructureGroup for AssortmentNode {
   label = "Assortment Structure";
   lov AssortmentStructureRef with AssortmentStructureSelector {
      description = AssortmentStructureRef.Description;
   }
   lov ClassificationStandardRef with ReferenceClassificationStandardSelector {
      description = ClassificationStandardRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator AssortmentStructureStateIndicator for AssortmentStructure {
   //! TODO: For each state: Verify, adjust or remove the attributes 'completed' and 'emphasis'.
   state "Planned" {
      completed = 0%;
      emphasis StatePlanned = [Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis StateActive = [Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [Objstate = "Closed"];
   }
}
@Override
stateindicator AssortmentNodeStateIndicator for AssortmentNode {
   state "Planned" {
      completed = 0%;
      emphasis StatePlanned = [AssortmentStructureRef.Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis StateActive = [AssortmentStructureRef.Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [AssortmentStructureRef.Objstate = "Closed"];
   }
}
----------------------------------- TREES -----------------------------------
tree Tree using AssortmentStructureSet {
   label = "Assortment Structure";
   searchcontext AssortmentStructureSearchContext {
      defaults = GetDefaultSeachContext();
   }
   selector AssortmentStructureSelector;
   rootnode RootNode {
      label = "Assortment: ${AssortmentId} - ${Description}";
      navigate {
         page Form {
            filter(AssortmentId, AssortmentId);
         }
      }
      iconset {
         icon "folder-alt";
         emphasis Complementary3 = [true];
      }
      connections {
         node ChildNode(AssortmentNodeArrayChild);
      }
   }
   node ChildNode for AssortmentNode {
      label = "${AssortmentNodeId} - ${Description}";
      orderby = AssortmentNodeId;

      navigate {
         page AssortmentNodePage {
            filter(AssortmentId, AssortmentId);
            filter(AssortmentNodeId, AssortmentNodeId);
         }
      }
      iconset {
         icon "diamon-solid-small" {
            expression = [PartNo != null];
         }
         icon "folder-alt" {
            expression = [PartNo = null];
         }
         emphasis Complementary3 = [true];
      }
      connections {
         node ChildNode(ChildArray);
      }
   }
}

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

------------------------------ SEARCH CONTEXT -------------------------------
searchcontext AssortmentStructureSearchContext for AssortmentSearchContextStructure {
   label = "";
   radiogroup FilterType;
   lov SiteClusterRef with SiteClusterSelector {
      description = SiteClusterRef.Description;
      --   visible = [FilterType = "Filter"];
      validate command {
         execute {
            set SiteClusterNodeId = SiteClusterId;
         }
      }
   }
   lov SiteClusterNodeRef with ReferenceSiteClusterNodeJoinSelector using GetSiteClusterNodeId(SiteClusterId) {
      description = SiteClusterNodeRef.Description;
   --   visible = [FilterType = "Filter"];
   }
}