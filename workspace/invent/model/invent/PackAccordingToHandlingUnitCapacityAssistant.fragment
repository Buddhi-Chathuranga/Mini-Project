-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2018-10-10  ChFolk  SCUXXW4-5636, Renamed the virtuals to avoid lengthy names.
-- 2018-09-21  ChFolk  SCUXXW4-5636, Created the fragment to dlgPackAccToHUCapacity.
-------------------------------------------------------------------------------------------------------
fragment PackAccordingToHandlingUnitCapacityAssistant;
component INVENT;
layer Core;
description "Assistant use to perform automatic packing of one inventory part in stock record to handling units on the lowest level.
             Note that it is only part records that hasn't already been packed into handling units that are available for packing";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant PackAccToHandlingUnitCapacityAssistant using PackAccordingToHandlingUnitCapacitySet {
   label = "Pack According to Handling Unit Capacity";
   input(PartNo, PartDescription, Contract, ConfigurationId, LocationNo, LotBatchNo,
   SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, AvailableQty, UnitMeas, ParentHandlingUnitId,
   SourceRef1, SourceRef2, SourceRef3, SourceRef4, InvTransSourceRefTypeDb);
   output(CreatedHandlingUnits);
   init command {
      variable PartHandlingUnitTypeExistStr {
         type = Text;
      }
      execute {
         call CheckPartHandlingUnitExist(PartNo, UoM) into PartHandlingUnitTypeExistStr;
      }
   }

   steps {
      step {
         group PackAccordingToHandlingUnitCapacityGroup;
         list HandlingUnitTypesList(HandlingUnitTypesArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [LinesReadyToPack = "TRUE"];
      execute {
         call PackAccordingToHandlingUnitCapacity(Objkey) into CreatedHandlingUnits;
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group PackAccordingToHandlingUnitCapacityGroup for PackAccordingToHuCapacityVirtual {
   label = "";
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      label = "Part";
      description = InventoryPartRef.DescriptionInUse;
      editable = [false];
   }
   field Contract {
      size = Small;
      editable = [false];
   }
   field AvailableQty {
      size = Small;
      editable = [false];
   }
   field UnitMeas {
      size = Small;
      editable = [false];
   }
   field ParentHandlingUnitId {
      visible = [ParentHandlingUnitId != null];
      editable = [false];
   }
}


----------------------------------- LISTS -----------------------------------
list HandlingUnitTypesList for PartHandlingUnitVirtual {
   editmode = SingleCellEdit;
   label = "";
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;
   }
   lov HandlingUnitCategoryIdRef with ReferenceHandlingUnitCategorySelector {
      label = "Handling Unit Category";
      description = HandlingUnitCategoryIdRef.Description;
   }
   field MaxQuantityCapacity;
   field Source {
      size = Small;
   }
   field UnitCode {
      size = Small;
   }
   field QtyToPack {
      size = Small;
      validate command {
         execute {
            if [QtyToPack != null] {
               if [QtyToPack < 0] {
                  alert("The Qty to Pack must be greater than 0.");
               }
               else {
                  call GetNoOfHandlingUnits(QtyToPack, MaxQuantityCapacity) into NoOfHandlingUnits;
               }
            }
         }
      }
   }

   field NoOfHandlingUnits {
      size = Small;
      validate command {
         execute {
            if [NoOfHandlingUnits != null] {
               call ValidateNoOfHandlingUnitsAndComputeQtyToPack(NoOfHandlingUnits, MaxQuantityCapacity) into QtyToPack;
            }
         }
      }
   }
}



--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PackAccordingToHandlingUnitCapacitySet for PackAccordingToHuCapacityVirtual;

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action PackAccordingToHandlingUnitCapacity LongText {
   initialcheck implementation;
   parameter ParentObjkey Text;
   ludependencies = UnattachedInventoryPartsInStock, InventoryPartInStock, ReceiptInvLocation;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckPartHandlingUnitExist Text {
   parameter PartNo Text;
   parameter UnitMeas Text;
}

function GetNoOfHandlingUnits Number {
   parameter QtyToPack Number;
   parameter MaxQuantityCapacity Number;
}

function ValidateNoOfHandlingUnitsAndComputeQtyToPack Number {
   parameter NoOfHandlingUnits Number;
   parameter MaxQuantityCapacity Number;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual PackAccordingToHuCapacityVirtual {
   ludependencies = PartHandlingUnitVirtual;
   attribute PartNo Text {
      label = "Part No";
      maxlength = 100;
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
   }
   attribute ConfigurationId Text;
   attribute LocationNo Text;
   attribute LotBatchNo Text;
   attribute SerialNo Text;
   attribute EngChgLevel Text;
   attribute WaivDevRejNo Text;
   attribute ActivitySeq Number;

   attribute AvailableQty Number {
      label = "Available Qty";
   }
   attribute UnitMeas Text {
      label = "UoM";
      maxlength = 100;
   }
   attribute ParentHandlingUnitId Number {
      label = "Parent Handling Unit ID";
   }
   attribute SourceRef1 Text;
   attribute SourceRef2 Text;
   attribute SourceRef3 Text;
   attribute SourceRef4 Text;
   attribute InvTransSourceRefTypeDb Text;
   attribute PartHandlingUnitTypeExist Text;
   attribute LinesReadyToPack Text;
   attribute CreatedHandlingUnits Text;
   array HandlingUnitTypesArray(PartNo, UnitMeas) to PartHandlingUnitVirtual(PartNo, UnitCode);

   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
}

virtual PartHandlingUnitVirtual {
   crud = Read, Update;
   ludependencies = PackAccordingToHuCapacityVirtual;
   attribute PartNo Text {
      label = "Part No";
      required = [true];
   }
   attribute HandlingUnitTypeId Text {
      label = "Handling Unit Type ID";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute HandlingUnitCategoryId Text {
      label = "Handling Unit Category ID";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute MaxQuantityCapacity Number {
      label = "Max Quantity";
      editable = [false];
   }
   attribute Source Text {
      label = "Source";
      maxlength = 200;
      editable = [false];
   }
   attribute UnitCode Text {
      label = "UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute QtyToPack Number {
      label = "Qty to Pack";
      editable = [true];
   }
   attribute NoOfHandlingUnits Number {
      label = "Number of Handling Units";
      editable = [true];
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitCategoryIdRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode);
}

