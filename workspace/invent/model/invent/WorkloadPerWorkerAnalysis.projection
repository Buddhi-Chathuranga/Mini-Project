--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-06-18  JaThlk  SCUXXW4-11617, Included UserAllowedSiteLovSelector fragment instead of UserAllowedSiteLov.
-- 2018-03-20  SWiclk  SCUXXW4-7421, Converted from tbwWarehouseWorkerOverview using MTG Version: 1.15
--------------------------------------------------------------------------------------
projection WorkloadPerWorkerAnalysis;
component INVENT;
layer Core;
description "Use this API to view information about workload of warehouse workers.";
category Users;
include fragment UserAllowedSiteLovSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset WarehouseWorkers for WarehouseWorker;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity WarehouseWorker {
   crud = Read;
   use attributes = WorkerGroup;

   attribute TaskID Number {
      fetch = "Warehouse_Task_API.Get_Started_Task_Id(CONTRACT, WORKER_ID)";
      label = "Task ID";
      editable = [false];
   }
   attribute ExpectedFinishDate Timestamp {
      fetch = "Warehouse_Task_API.Get_Finished_Date(CONTRACT, WORKER_ID)";
      label = "Expected Finish Date";
      editable = [false];
   }
   attribute NoofAssignedTasks Number {
      fetch = "Warehouse_Task_API.Get_Sum_Of_Not_Started_Tasks(CONTRACT, WORKER_ID)";
      label = "No of Assigned Tasks";
      editable = [false];
   }
   attribute TotalPlannedTimemin Number {
      fetch = "Warehouse_Task_API.Get_Sum_Time_Not_Started_Tasks(CONTRACT, WORKER_ID)";
      label = "Total Planned Time (min)";
      editable = [false];
   }
   attribute CalendarId Text {
      editable = [ETag = null];
   }
   attribute StartDate Date {
      label = "Valid From Date";
      editable = [ETag = null];
   }
   attribute EndDate Date {
      label = "Valid To Date";
      editable = [ETag = null];
   }
   reference PersonInfoRef(WorkerId) to PersonInfo(PersonId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WorkerIdRef(Contract, WorkerId) to WarehouseWorker(Contract, WorkerId) {
      label = "Worker ID";
   }
   reference WorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroup(Contract, WorkerGroup) {
      label = "Worker Group";
   }
   reference CalendarIdRef(CalendarId) to WorkTimeCalendar(CalendarId) {
      label = "Calendar ID";
   }
}

