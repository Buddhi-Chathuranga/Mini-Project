-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-04-01  DaZase  SCUXXW4-6955, Converted from tbwInventoryValuePerDetail using MTG Version: 1.34
-- 2018-09-11  HSJOSE  SCUXXW4-6960, Converted from tbwInventoryValuePerDetailLocGrp using MTG Version: 1.28
-- 2018-09-11  HSJOSE  SCUXXW4-6975, Converted from tbwInventoryValuePerLevelLocGrp using MTG Version: 1.28
-- 2018-09-11  HSJOSE  SCUXXW4-6985, Converted from tbwInventoryValuePerPartLocGrp using MTG Version: 1.28
-- 2018-09-11  LEPESE  SCUXXW4-6965, Converted from tbwInventoryValuePerLevel using MTG Version: 1.28
-- 2018-09-11  LEPESE  SCUXXW4-6980, Converted from tbwInventoryValuePerPart using MTG Version: 1.28
-- 2018-09-11  LEPESE  SCUXXW4-6430, Converted from frmQueryInventoryValue using MTG Version: 1.28
-----------------------------------------------------------------------------
client InventoryValuePerPeriod;
component INVENT;
layer Core;
projection InventoryValuePerPeriodAnalysis;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment PrintInventoryValueComparisonAssistant;
include fragment StatisticPeriod2Selector;
include fragment InventoryPartLovSelector;
include fragment InventValuePartLocgrpLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry InventoryValueperPeriodNavEntry parent InventNavigator.FinancialControlAnalysis at index 200 {
      label = "Inventory Value per Period";
      page Form home InventoryValue;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page Form using InventoryValueSet {
   label = "Inventory Value per Period";
   startupmode = search;
   selector InventoryValueSelector;
   group QueryInventoryValueGroup;

   tabs {
      tab {
         label = "Value per Part";
         list InventoryValuePerPartList(InventoryValuePartArray);
      }
      tab {
         label = "Value per Cost Level";
         list InventoryValuePerLevelList(InventoryValueCostLevelArray);
      }
      tab {
         label = "Value per Detail";
         list InventoryValuePerDetailList(InventoryValuePartDetailArray);
      }
      tab {
         label = "Value per Part and Location Group";
         list InventoryValuePerPartLocGrpList(InventoryValuePartLocGrpArray);
      }
      tab {
         label = "Value per Cost Level and Location Group";
         list InventoryValuePerLevelLocGrpList(InventoryValueLevelLocGrpArray);
      }
      tab {
         label = "Value per Detail and Location Group";
         list InventoryValuePerDetailLocGrpList(InventoryValueDetailLocationGroupArray);
      }
   }
   commandgroup CommandGroupCmdGroup {

      @DynamicComponentDependency COST
      command SummarizedInventoryValueRepoCommand;
      command InventoryValueReportCommand;
      command InventoryValueCheckReportCommand;
      command InventoryValueComparisonRepoCommand;
      command AggregateInventoryTransactionCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
@DynamicComponentDependency COST
command SummarizedInventoryValueRepoCommand for InventoryValue {
   label = "Summarized Inventory Value Report";
   enabled = [true];
   execute {
      assistant InvValSumRepAssistant(StatYearNo, StatPeriodNo, Contract) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command InventoryValueReportCommand for InventoryValue {
   label = "Inventory Value Report";
   enabled = [true];
   execute {
      assistant InventoryValueReportAssistant(StatYearNo, StatPeriodNo, Contract) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command InventoryValueCheckReportCommand for InventoryValue {
   label = "Inventory Value Check Report";
   enabled = [true];
   execute {
      assistant InventoryValueCheckReportAssistant(Contract) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command InventoryValueComparisonRepoCommand for InventoryValue {
   label = "Inventory Value Comparison Report";
   enabled = [true];
   execute {
      assistant PrintInventoryValueComparisonAssistant(StatYearNo, StatPeriodNo, Contract, null) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command AggregateInventoryTransactionCommand for InventoryValue {
   label = "Aggregate Inventory Transactions per Period";
   enabled = [true];
   execute {
      navigate "assistant/AggregateInventoryTransactionsperPeriod/TaskAssistant";
   }
}
command PrintInventoryValueReportOk for InventoryValueRepStructure {
   label = "OK";
   enabled = [StatYearNo != null and StatPeriodNo != null and LevelOfDetail != null];
   variable ResultKeyVar;
   execute {
      call GetReportResultKeyInvValRep(StatYearNo, StatPeriodNo, Contract, FromPartNo, ToPartNo, LevelOfDetail, LocationGroup) into ResultKeyVar;
      printdialog ResultKeyVar;
      exit OK;
   }
}

command PrintInventoryValueCheckReportOk for InventoryValueRepStructure {
   label = "OK";
   enabled = [Contract != null and DiffToleranceAmount != null];
   variable ResultKeyVar;
   execute {
      call GetReportResultKeyCheckRep(Contract, DiffToleranceAmount) into ResultKeyVar;
      printdialog ResultKeyVar;
      exit OK;
   }
}

@DynamicComponentDependency COST
command PrintInvValSumRepOk for InvValSumRepStructure {
   label = "OK";
   enabled = [StatYearNo != null and StatPeriodNo != null and Contract != null and
   ((CostSetRef != null or InventoryCostType != null)) and Criteria1 != null];
   variable ResultKeyVar;
   execute {
      call GetReportResultKeyInvValSum(StatYearNo, StatPeriodNo, Contract, InventoryCostType, CostSet, IncludeParts,
      Criteria1, Criteria1From, Criteria1To, Criteria2, Criteria2From, Criteria2To, Criteria3, Criteria3From, Criteria3To,
      Criteria4, Criteria4From, Criteria4To, Criteria5, Criteria5From, Criteria5To) into ResultKeyVar;
      printdialog ResultKeyVar;
      exit OK;
   }
}
command AddCriteriaDialogCommand for InvValSumRepStructure {
   label = "Add Criteria";
   enabled = [Criteria5 = null];
   variable CriteriaVar Enumeration(InventoryValueRepParam);
   variable CriteriaFromVar Text;
   variable CriteriaToVar Text;
   execute {
      dialog AddCriteriaDialog into(CriteriaVar, CriteriaFromVar, CriteriaToVar) {
         when OK {
            if [Criteria1 = null] {
               set Criteria1 = CriteriaVar;
               set Criteria1From = CriteriaFromVar;
               set Criteria1To = CriteriaToVar;
            }
            else {
               if [Criteria2 = null] {
                  set Criteria2 = CriteriaVar;
                  set Criteria2From = CriteriaFromVar;
                  set Criteria2To = CriteriaToVar;
               }
               else {
                  if [Criteria3 = null] {
                     set Criteria3 = CriteriaVar;
                     set Criteria3From = CriteriaFromVar;
                     set Criteria3To = CriteriaToVar;
                  }
                  else {
                     if [Criteria4 = null] {
                        set Criteria4 = CriteriaVar;
                        set Criteria4From = CriteriaFromVar;
                        set Criteria4To = CriteriaToVar;
                     }
                     else {
                        set Criteria5 = CriteriaVar;
                        set Criteria5From = CriteriaFromVar;
                        set Criteria5To = CriteriaToVar;
                     }
                  }
               }
            }
            exit;
         }
      }
   }
}
command RemoveCriteriaCommand for InvValSumRepStructure {
   label = "Remove Last Criteria";
   enabled = [Criteria1 != null];
   execute {
      if [Criteria5 != null] {
         set Criteria5 = null;
         set Criteria5From = null;
         set Criteria5To = null;
      }
      else {
         if [Criteria4 != null] {
            set Criteria4 = null;
            set Criteria4From = null;
            set Criteria4To = null;
         }
         else {
            if [Criteria3 != null] {
               set Criteria3 = null;
               set Criteria3From = null;
               set Criteria3To = null;
            }
            else {
               if [Criteria2 != null] {
                  set Criteria2 = null;
                  set Criteria2From = null;
                  set Criteria2To = null;
               }
               else {
                  set Criteria1 = null;
                  set Criteria1From = null;
                  set Criteria1To = null;
               }
            }
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryValueSelector for InventoryValue {
   label = "${StatYearNo} - ${StatPeriodNo} - ${Contract}";
}

---------------------------------- GROUPS -----------------------------------
group QueryInventoryValueGroup for InventoryValue {
   label = "";
   field StatYearNo {
      size = Small;
   }
   field StatPeriodNoRef {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field CreateDate;
   field LastActivityDate;
   field BaseCurrency {
      size = Small;
   }
   field CompleteFlagDb {
      size = Small;
      showlabel = false;
      truelabel = "Aggregation job completed";
      falselabel = "Aggregation job not completed";
      visible = [CompleteFlagDb = false];
      emphasis Complementary4 = [CompleteFlagDb = false];
   }
   // PPJ.Runtime.Windows.QO.SalQuickTabs 'picTab' is skipped from being processed. Please check and do the needful.
}
group InvValueRepPeriodGroup for InventoryValueRepStructure {
   label = "Statistic Period";
   lov StatYearNoRef with ReferenceStatisticPeriod2Selector;
   field StatPeriodNoRef;
   lov SiteRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      freeinput = [true];
   }
}
group InvValueRepPartGroup for InventoryValueRepStructure {
   label = "Part Selection";
   lov FromPartNoRef with ReferenceInventoryPartLovSelector;
   lov ToPartNoRef with ReferenceInventoryPartLovSelector;
}
group InvValueRepDetailsGroup for InventoryValueRepStructure {
   label = "Report Details";
   lov LocationGroupRef with ReferenceInventValuePartLocgrpLovSelector;
   field LevelOfDetail;
}
group InvValCheckRepGroup for InvValCheckRepStructure {
   label = "Inventory Value Check Report";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field DiffToleranceAmount;
}

group StatisticPeriodGroup for InvValSumRepStructure {
   label = "Statistic Period";
   field StatYearNo {
      size = Small;
   }
   field StatPeriodNoRef {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
}
@DynamicComponentDependency COST
group InvValSumRepGroup for InvValSumRepStructure {
   label = "Simulation Basis";
   field InventoryCostType {
      size = Small;
      editable = [CostSetRef = null];
   }
   field CostSetRef {
      size = Small;
      editable = [InventoryCostType = null];
   }
   field IncludeParts;
}

group AggregationCriteriaGroup1 for InvValSumRepStructure {
   label = "Aggregation Criteria 1";
   field Criteria1;
   field Criteria1From;
   field Criteria1To;
}
group AggregationCriteriaGroup2 for InvValSumRepStructure {
   label = "Aggregation Criteria 2";
   field Criteria2;
   field Criteria2From;
   field Criteria2To;
}
group AggregationCriteriaGroup3 for InvValSumRepStructure {
   label = "Aggregation Criteria 3";
   field Criteria3;
   field Criteria3From;
   field Criteria3To;
}
group AggregationCriteriaGroup4 for InvValSumRepStructure {
   label = "Aggregation Criteria 4";
   field Criteria4;
   field Criteria4From;
   field Criteria4To;
}
group AggregationCriteriaGroup5 for InvValSumRepStructure {
   label = "Aggregation Criteria 5";
   field Criteria5;
   field Criteria5From;
   field Criteria5To;
}
group AggregationCriteriaGroup for CriteriaStructure {
   label = "Aggregation Criteria";
   field Criteria;
   field CriteriaFrom {
      visible = [Criteria != "PartType"];
      lovswitch {
         when [Criteria = "Planner"] {
            lov PlannerFromRef with ReferenceInventoryPartPlannerSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "AccountingGroup"] {
            lov AccountingGroupFromRef with ReferenceAccountingGroupSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "ABCCode"] {
            lov AbcClassFromRef with ReferenceAbcClassSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "ProductFamily"] {
            lov ProductFamilyFromRef with ReferenceInventoryProductFamilySelector {
               freeinput = [true];
            }
         }
         when [Criteria = "ProductCode"] {
            lov ProductCodeFromRef with ReferenceInventoryProductCodeSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "CommodityGroup1" or Criteria = "CommodityGroup2"] {
            lov CommodityFromRef with ReferenceCommodityGroupSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "AssetClass"] {
            lov AssetClassFromRef with ReferenceAssetClassSelector {
               freeinput = [true];
            }
         }
      }
   }
   field CriteriaTo {
      visible = [Criteria != "PartType"];
      lovswitch {
         when [Criteria = "Planner"] {
            lov PlannerToRef with ReferenceInventoryPartPlannerSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "AccountingGroup"] {
            lov AccountingGroupToRef with ReferenceAccountingGroupSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "ABCCode"] {
            lov AbcClassToRef with ReferenceAbcClassSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "ProductFamily"] {
            lov ProductFamilyToRef with ReferenceInventoryProductFamilySelector {
               freeinput = [true];
            }
         }
         when [Criteria = "ProductCode"] {
            lov ProductCodeToRef with ReferenceInventoryProductCodeSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "CommodityGroup1" or Criteria = "CommodityGroup2"] {
            lov CommodityToRef with ReferenceCommodityGroupSelector {
               freeinput = [true];
            }
         }
         when [Criteria = "AssetClass"] {
            lov AssetClassToRef with ReferenceAssetClassSelector {
               freeinput = [true];
            }
         }
      }
   }
   field PartTypeFrom {
      visible = [Criteria = "PartType"];
      validate command {
         execute {
            call GetPartTypeDb(PartTypeFrom) into CriteriaFrom;
         }
      }
   }
   field PartTypeTo {
      visible = [Criteria = "PartType"];
      validate command {
         execute {
            call GetPartTypeDb(PartTypeTo) into CriteriaTo;
         }
      }
   }

}
----------------------------------- LISTS -----------------------------------
list InventoryValuePerPartList for InventoryValuePart {
   lov PartNoRef with ReferenceInventoryPartSelector {
      description = PartNoRef.DescriptionInUse;
   }
   field Quantity;
   field QtyWaivDevRej;
   field QtyInTransit;
   field QtyAtCustomer;
   field UnitMeasRef {
      size = Small;
   }
   field UnitCost;
   field TotalValue;
   field AbcClassRef {
      size = Small;
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      contactwidget {
         enabled = [PlannerBuyerRef != ""];
         source = Person;
      }
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      description = AccountingGroupRef.Description;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }
   field TypeCode;
   lov PrimeCommodityRef with ReferenceCommodityGroupSelector {
      description = PrimeCommodityRef.Description;
   }
   lov SecondCommodityRef with ReferenceCommodityGroupSelector {
      description = SecondCommodityRef.Description;
   }
   lov AssetClassRef with ReferenceAssetClassSelector {
      description = AssetClassRef.Description;
   }
   fieldranking PartNoRef, TotalValue, Quantity, QtyWaivDevRej, QtyInTransit, QtyAtCustomer, UnitMeasRef, UnitCost;
}

list InventoryValuePerLevelList for InventoryValueCostLevel {
   lov PartNoRef with ReferenceInventoryPartSelector {
      description = PartNoRef.DescriptionInUse;
      label = "Inventory Part";
   }
   field ConfigurationIdRef {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   field Quantity;
   field QtyWaivDevRej;
   field QtyInTransit;
   field QtyAtCustomer;
   field UnitMeasRef {
      size = Small;
   }
   field UnitCost;
   field TotalValue;
   field CreateDate;
   field AbcClassRef {
      size = Small;
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      contactwidget {
         enabled = [PlannerBuyerRef != ""];
         source = Person;
      }
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      description = AccountingGroupRef.Description;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }
   field TypeCode;
   lov PrimeCommodityRef with ReferenceCommodityGroupSelector {
      description = PrimeCommodityRef.Description;
   }
   lov SecondCommodityRef with ReferenceCommodityGroupSelector {
      description = SecondCommodityRef.Description;
   }
   lov AssetClassRef with ReferenceAssetClassSelector {
      description = AssetClassRef.Description;
   }
   fieldranking PartNoRef, ConfigurationIdRef, SerialNo, LotBatchNo, ConditionCode, TotalValue, Quantity, QtyWaivDevRej, QtyInTransit, QtyAtCustomer, UnitMeasRef, UnitCost;
}

list InventoryValuePerDetailList for InventoryValuePartDetail {
   lov PartNoRef with ReferenceInventoryPartSelector {
      description = PartNoRef.DescriptionInUse;
   }
   field ConfigurationIdRef {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   @DynamicComponentDependency COST
   field BucketPostingGroupIdRef {
      size = Small;
   }
   field CostSourceIdRef {
      size = Small;
   }
   field TotalValue;
   field CreateDate;
   field AbcClassRef {
      size = Small;
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      contactwidget {
         enabled = [PlannerBuyerRef != ""];
         source = Person;
      }
   }
   field AccountingGroupRef {
      size = Small;
   }
   field PartProductFamilyRef {
      size = Small;
   }
   field PartProductCodeRef {
      size = Small;
   }
   field TypeCode {
      size = Small;
   }
   field PrimeCommodityRef {
      size = Small;
   }
   field SecondCommodityRef {
      size = Small;
   }
   field AssetClassRef {
      size = Small;
   }
   fieldranking PartNoRef, Description, ConfigurationIdRef, SerialNo, LotBatchNo, ConditionCode, BucketPostingGroupIdRef, CostSourceIdRef, TotalValue, CreateDate;
}

list InventoryValuePerPartLocGrpList for InventoryValuePartLocGrp {
   lov PartNoRef with ReferenceInventoryPartSelector {
      description = PartNoRef.DescriptionInUse;
   }
   lov InventoryLocationGroupRef with InventoryLocationGroupSelector {
      description = InventoryLocationGroupRef.Description;
   }
   field Quantity;
   field QtyWaivDevRej;
   field QtyInTransit;
   field QtyAtCustomer;
   field UnitMeasRef {
      size = Small;
   }
   field UnitCost;
   field TotalValue;
   field AbcClassRef {
      size = Small;
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      contactwidget {
         enabled = [PlannerBuyerRef != ""];
         source = Person;
      }
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      description = AccountingGroupRef.Description;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }
   field TypeCode;
   lov PrimeCommodityRef with ReferenceCommodityGroupSelector {
      description = PrimeCommodityRef.Description;
   }
   lov SecondCommodityRef with ReferenceCommodityGroupSelector {
      description = SecondCommodityRef.Description;
   }
   lov AssetClassRef with ReferenceAssetClassSelector {
      description = AssetClassRef.Description;
   }
   fieldranking PartNoRef, LocationGroup, TotalValue, Quantity, QtyWaivDevRej, QtyInTransit, QtyAtCustomer, UnitMeasRef, UnitCost;
}

list InventoryValuePerLevelLocGrpList for InventoryValueLevelLocGrp {
   lov PartNoRef with ReferenceInventoryPartSelector {
      description = PartNoRef.DescriptionInUse;
   }
   field ConfigurationIdRef {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   lov InventoryLocationGroupRef with InventoryLocationGroupSelector {
      description = InventoryLocationGroupRef.Description;
   }
   field Quantity;
   field QtyWaivDevRej;
   field QtyInTransit;
   field QtyAtCustomer;
   field UnitMeasRef {
      size = Small;
   }
   field UnitCost;

   field TotalValue;
   field CreateDate;
   field AbcClassRef {
      size = Small;
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      contactwidget {
         enabled = [PlannerBuyerRef != ""];
         source = Person;
      }
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      description = AccountingGroupRef.Description;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }
   field TypeCode;
   lov PrimeCommodityRef with ReferenceCommodityGroupSelector {
      description = PrimeCommodityRef.Description;
   }
   lov SecondCommodityRef with ReferenceCommodityGroupSelector {
      description = SecondCommodityRef.Description;
   }
   lov AssetClassRef with ReferenceAssetClassSelector {
      description = AssetClassRef.Description;
   }
   fieldranking PartNoRef, ConfigurationIdRef, SerialNo, LotBatchNo, ConditionCode, LocationGroup, TotalValue, Quantity, QtyWaivDevRej, QtyInTransit, QtyAtCustomer, UnitMeasRef, UnitCost;
}
list InventoryValuePerDetailLocGrpList for InventoryValueDetailLocationGroup {
   lov PartNoRef with ReferenceInventoryPartSelector {
      description = PartNoRef.DescriptionInUse;
      label = "Inventory Part";
   }
   field ConfigurationIdRef {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   @DynamicComponentDependency COST
   lov BucketPostingGroupIdRef with ReferenceCostBucketPostingGroupSelector {
      label = "Posting Cost Group";
      description = BucketPostingGroupIdRef.Description;
   }
   lov CostSourceIdRef with ReferenceCostSourceSelector {
      label = "Cost Source";
      description = CostSourceIdRef.Description;
   }
   field LocationGroup {
      size = Small;
   }
   field TotalValue;
   field CreateDate;
   field AbcClassRef {
      size = Small;
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      contactwidget {
         enabled = [PlannerBuyerRef != ""];
         source = Person;
      }
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      description = AccountingGroupRef.Description;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      description = PartProductFamilyRef.Description;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      description = PartProductCodeRef.Description;
   }
   field TypeCode;
   lov PrimeCommodityRef with ReferenceCommodityGroupSelector {
      description = PrimeCommodityRef.Description;
   }
   lov SecondCommodityRef with ReferenceCommodityGroupSelector {
      description = SecondCommodityRef.Description;
   }
   lov AssetClassRef with ReferenceAssetClassSelector {
      description = AssetClassRef.Description;
   }
   fieldranking PartNoRef, ConfigurationIdRef, SerialNo, LotBatchNo, ConditionCode, BucketPostingGroupIdRef, CostSourceIdRef, LocationGroup, TotalValue;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog AddCriteriaDialog for CriteriaStructure {
   label = "Add Criteria";
   output(Criteria, CriteriaFrom, CriteriaTo);
   group AggregationCriteriaGroup;
   command Ok {
      enabled = [Criteria != null and CriteriaFrom != null and CriteriaTo != null];
   }
   command Cancel;
}
-------------------------------- ASSISTANTS ---------------------------------
assistant InventoryValueReportAssistant for InventoryValueRepStructure {
   label = "Inventory Value Report";
   input(StatYearNo, StatPeriodNo, Contract);
   init command {
      execute {
         set LevelOfDetail = "PrintValuesPerPart";
      }
   }
   singlestep {
      group InvValueRepPeriodGroup;
      markdowntext {
         text = "If you leave the Site field empty, all sites available for the user will be included in the report.";
      }
      group InvValueRepPartGroup;
      group InvValueRepDetailsGroup;
   }
   command PrintInventoryValueReportOk;
   command Cancel;
}
assistant InventoryValueCheckReportAssistant for InventoryValueRepStructure {
   label = "Inventory Value Check Report";
   input(Contract);
   singlestep {
      group InvValCheckRepGroup;
   }
   command PrintInventoryValueCheckReportOk;
   command Cancel;
}
@DynamicComponentDependency COST
assistant InvValSumRepAssistant for InvValSumRepStructure {
   label = "Summarized Inventory Value Report";
   input(StatYearNo, StatPeriodNo, Contract);
   singlestep {
      group StatisticPeriodGroup;
      group InvValSumRepGroup;
      markdowntext {
         visible = [Criteria1 = null];
         text = "At least one aggregation criteria must be used.";
      }
      group AggregationCriteriaGroup1 {
         visible = [Criteria1 != null];
      }
      group AggregationCriteriaGroup2 {
         visible = [Criteria2 != null];
      }
      group AggregationCriteriaGroup3
         {
         visible = [Criteria3 != null];
      }
      group AggregationCriteriaGroup4 {
         visible = [Criteria4 != null];
      }
      group AggregationCriteriaGroup5 {
         visible = [Criteria5 != null];
      }
   }
   command PrintInvValSumRepOk;
   command Cancel;
   command AddCriteriaDialogCommand;
   command RemoveCriteriaCommand;
}
---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------

//! TODO: Take necessary steps to handle following construct(s) found in 'frmQueryInventoryValue'


// --- Event Handlers ---
// 1. cbsCompFlag_WindowActions
//    Action: Investigate method content and reimplement logic
// 2. cbsCompFlag_OnSAM_Create
//    Action: Investigate method content and reimplement logic
// 3. menuItem_Summarized_Inquire
//    Action: Investigate method content and reimplement logic
// 4. menuItem_Summarized_Execute
//    Action: Investigate method content and reimplement logic
// 5. menuItem__Inventory_Inquire
//    Action: Investigate method content and reimplement logic
// 6. menuItem__Inventory_Execute
//    Action: Investigate method content and reimplement logic
// 7. menuItem_Inventory_Inquire
//    Action: Investigate method content and reimplement logic
// 8. menuItem_Inventory_Execute
//    Action: Investigate method content and reimplement logic
// 9. menuItem_Inventory_1_Inquire
//    Action: Investigate method content and reimplement logic
// 10. menuItem_Inventory_1_Execute
//    Action: Investigate method content and reimplement logic
// 11. menuItem__Aggregate_Inquire
//    Action: Investigate method content and reimplement logic
// 12. menuItem__Aggregate_Execute
//    Action: Investigate method content and reimplement logic

// --- Methods ---
// 1. SAM_Create
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cbsCompFlag_OnSAM_Create
// 2. SAM_Create
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cbsCompFlag_WindowActions



