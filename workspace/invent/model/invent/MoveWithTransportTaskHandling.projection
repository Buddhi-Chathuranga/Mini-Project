-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-10-28  SeJalk  SC21R2-5234, Modified ObjIds type in MovePartWithTransportTaskVirtual.
-- 2020-04-01  DiJwlk  SCXTEND-4135, Removed data fething for AvailableQty and DueforTransport
-- 2020-01-23  PamPlk  Bug 151796 (SCZ-8367), Removed the data fetching from AvailableQtytoMove.
-- 2019-12-04  Hadolk  MFSPRING20-77, Added the reference to Part Revision.
-- 2019-12-04  Hadolk  MFSPRING20-77, Added the reference to Part Revision.
-- 2019-12-27  JaThlk  SCXTEND-1999, Renamed the WaivDevRejNo label to W/D/R No.
-- 2019-05-20  DaZase  SCUXXW4-19673, Added initialcheck to all unbounded actions.
-- 2019-04-01  ChFolk  SCUXXW4-15162, Added ludependency to InventoryPartInStock for the action MoveWithTransportTask.
-- 2019-03-31  ChFolk  SCUXXW4-15162, Enabled crud create for InventoryPartInStockVirtual.
-- 2018-06-07  MaAuse  SCUXXW4-5604, Converted from dlgMovePartWithTransportTask using MTG Version: 1.19
-----------------------------------------------------------------------------
projection MoveWithTransportTaskHandling;
component INVENT;
layer Core;
description "Use this activity to initiate the move of a part or a handling unit. The part or handling unit will be added to an existing
transport task according to consolidation rules and the handling unit capacity or a new transport task will be created.";
category Users;
include fragment InventoryLocation17Selector;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset MovePartWithTransportTaskSet for MovePartWithTransportTaskVirtual;

--------------------------------- VIRTUALS ----------------------------------

virtual MovePartWithTransportTaskVirtual {
   attribute Contract Text {
      label = "To Site";
      required = [true];
      format = uppercase;
   }
   attribute LocationNo Text {
      label = "To Location No";
      required = [true];
      format = uppercase;
   }
   attribute Destination Enumeration(InventoryPartDestination) {
      label = "Destination";
      required = [true];
      default = "INVENTORY_PART_DESTINATION_API.DB_MOVE_TO_INVENTORY";
   }
   attribute ConnectedSource Text;
   attribute ObjIds LongText {
      inlined = [true];
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "To Site";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation17(Contract, LocationNo) {
      label = "To Location No";
   }
   array PartsToMoveArray(Contract) to InventoryPartInStockVirtual(Contract);

}

virtual InventoryPartInStockVirtual {
   crud = Create, Read, Update;
   attribute PartNo Text {
      fetch = "PART_NO";
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
   }
   attribute Contract Text {
      label = "From Site";
      fetch = "CONTRACT";
   }
   attribute LocationNo Text {
      label = "From Location No";
      fetch = "location_no";
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
   }
   attribute QtyReserved Number {
      fetch = "QTY_RESERVED";
   }
   attribute AvailableQty Number {
      label = "Available Qty";
      editable = [false];
   }
   attribute AvailableQtytoMove Text {
      label = "Available Qty to Move";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyToMove Number {
      fetch = "QTY_TO_MOVE";
      editable = [true];
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
      fetch = "qty_onhand";
      editable = [ETag = null];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      fetch = "lot_batch_no";
   }
   attribute SerialNo Text {
      fetch = "serial_no";
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO)";
      label = "Condition Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO ))";
      label = "Condition Code Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Rev No";
      fetch = "eng_chg_level";
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      fetch = "waiv_dev_rej_no";
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty";
      fetch = "Catch_Qty_Onhand";
      editable = [ETag = null];
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
      maxlength = 20;
      editable = [false];
   }
   attribute SourceRef1 Text {
      fetch = "SOURCE_REF1";
      label = "Source Ref 1";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef2 Text {
      fetch = "SOURCE_REF2";
      label = "Source Ref 2";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef3 Text {
      fetch = "SOURCE_REF3";
      label = "Source Ref 3";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef4 Text {
      fetch = "SOURCE_REF4";
      label = "Source Ref 4";
      maxlength = 50;
      editable = [false];
   }
   attribute ReceiptNo Number {
      fetch = "RECEIPT_NO";
      label = "Receipt No";
      editable = [false];
   }
   attribute SourceRefType Text {
      fetch = "SOURCE_REF_TYPE";
      label = "Source Ref Type";
      maxlength = 200;
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type Db";
      maxlength = 200;
      editable = [false];
   }
   attribute DueforTransport Number {
      label = "Due for Transport";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, ACTIVITY_API.Get_Description(ACTIVITY_SEQ))";
      label = "Activity Description";
      maxlength = 200;
      editable = [false];
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   @DynamicComponentDependency MFGSTD
   reference PartRevisionRef(Contract, PartNo, EngChgLevel) to PartRevision(Contract, PartNo, EngChgLevel);
}

-------------------------------- STRUCTURES ---------------------------------
structure MoveWithTransportTaskStructure {
   attribute QtyMoved Number;
   attribute TotalQtyToMove Number;
}


---------------------------------- ACTIONS ----------------------------------
action MoveWithTransportTask Structure(MoveWithTransportTaskStructure) {
   initialcheck implementation;
   supportwarnings = [true];
   ludependencies = ReceiptInvLocation, ReceiptInfo, InventoryPartInStock;
   parameter ParentObjkey Text;
   parameter Contract Text;
   parameter LocationNo Text;
   parameter Destination Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetLocations List<Entity(InventoryLocation17)> {
   parameter Contract Text;
   parameter ConnectedSource Text;

   where = "CONTRACT = :Contract AND ((:ConnectedSource = 'RECEIPT_STOCK' AND LOCATION_TYPE_DB = 'PICKING') OR (:ConnectedSource = 'INVENT' AND LOCATION_TYPE_DB IN ('PICKING', 'F', 'MANUFACTURING')) OR (:ConnectedSource = 'RECEIPT'))";
}
