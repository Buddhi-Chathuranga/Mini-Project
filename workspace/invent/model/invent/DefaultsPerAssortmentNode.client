--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-02-03  UdGnlk  SC2020R1-12235, Added copyoncruddefault to all the lists.
--  2021-01-27  UdGnlk  SC2020R1-12235, Added ProcCategoryAssortment mandatory field to AssortmentStructure.
--  2019-07-01  Satglk  SCUXXW4-22901, In AssortmentStructureSelector, Objstate style set to TextOnly.
--  2019-06-22  bajelk  SCUXXW4-22553, added colors for badges in AssortmentStructureSelector.
--  2019-04-12  AwWelk  SCUXXW4-16984, reverting the changes made by SCUXXW4-14957 since we will receive a correction through TEUXX-6809.
--  2019-04-10  JaThlk  SCUXXW4-18416, Added the Orderby CharacteristicCode in AssortmentInventCharacteristicsDefaultList.
--  2019-02-18  bajelk  SCUXXW4-14957, Removed Blocked State of Planner field in Inventory part Defaults.
--  2019-01-30  bajelk  SCUXXW4-15493, Changed labels of CurrencyCode and ParallelAccCurrency in CompanyFinance entity.
--  2019-01-27  bajelk  SCUXXW4-15494, Changed label for CurrencyCode in ValidSupplierLovSelector fragment.
--  2019-01-26  AwWelk  SCUXXW4-15908, Made the code review corrections.
--  2019-01-23  bajelk  SCUXXW4-15500, Changed label for Transaction and Status Message attribute in PurchaseStatus entity.
--  2019-01-23  bajelk  SCUXXW4-15501, Changed label for Assortment key in SupplierAssortment entity.
--  2019-01-23  bajelk  SCUXXW4-15502, Changed label for SamplePercent attribute in InspectionRule entity.
--  2018-12-30  AwWelk  SCUXXW4-2945, Added AssortmentPartSupplierDefaultList by converting tbwAssortmentPartSuppDef using MTG Version: 1.34.
--  2018-12-26  bajelk  SCUXXW4-15113, Changed some labels of SalesPriceGroup, SalesPartRebateGroup and SalesPartRebateGroup entities.
--  2018-12-26  bajelk  SCUXXW4-15123, Changed label of Description,OverDeliveryTolerance,OverDelivery attribute inside PurchasePartGroup entity and
--  2018-12-26          Changed label of Descriptiony attribute inside OrderProcType entity.
--  2018-12-26  bajelk  SCUXXW4-15122, Changed label of QcCode attribute inside QualityCtrlAnalystLov query in QualityCtrlAnalystLovSelector fragment and
--  2018-12-26          Changed label of BuyerCode attribute inside PurchaseBuyerLov query in PurchaseBuyerLovSelector fragment
--  2018-12-24  bajelk  SCUXXW4-14997, "Concatenate Characteristics Template" and "Description" fields in both AssortmentInvCharDefEngAttributeRootNodeGroup and AssortmentInvCharDefEngAttributeChildNodeGroup.
--  2018-12-24  bajelk  SCUXXW4-14961, Changed labels for InventoryPartStatusPar entity in Invent component and validated "Block" values in the LOV using function.
--  2018-12-24  bajelk  SCUXXW4-14960, Changed labels for AssetClass entity in Invent component.
--  2018-12-24  bajelk  SCUXXW4-15010, Changed label for SearchType attribute in Characteristic entity which is in MPCCOM
--  2018-12-24  bajelk  SCUXXW4-15007, Changed labels for Site Cluster ID, Level Description, Site Cluster Node ID in SiteClusterNodeJoinSelector fragment
--  2018-12-24  bajelk  SCUXXW4-15006,Changed label for SiteClusterId key in SiteCluster entity which is in MPCCOM.
--  2018-12-23  AwWelk  SCUXXW4-2961, Added converted tbwAssortmentPurchDef using MTG Version: 1.34
--  2018-12-23  bajelk  SCUXXW4-14962, Changed labels for CustomsUnitMeas attribute in CustomsStatisticsNumber entity and PartProductCode key in InventoryProductFamily entity.
--  2018-12-23  bajelk  SCUXXW4-14963,Removed lov Records in Blocked State for the Customs Stat No field, changed lables in CustomsStatisticsNumber entity
--  2018-12-20  AwWelk  SCUXXW4-9627, Added tbwAssortmentSalesDef using  MTG Version: 1.34.
--  2018-12-17  bajelk  SCUXXW4-14900, Added AssortmentPartSupplierDefaultsList in Supplier for Purchase Part Defaults Tab using MTG Version: 1.34
--  2018-12-12  AwWelk  SCUXXW4-6637, Added converted tbwAssortmentInventCharDef using MTG Version: 1.34
--  2018-12-11  AwWelk  SCUXXW4-6647, Added converted tbwAssortmentInventDef using MTG Version: 1.34
--  2018-12-08  AwWelk  SCUXXW4-6074, Converted frmEnterDefaultsPerNode using MTG Version: 1.34
---------------------------------------------------------------------------------

client DefaultsPerAssortmentNode;
component INVENT;
layer Core;
projection DefaultsPerAssortmentNodeHandling;
include fragment CreatePartsPerSiteDialog;
include fragment SiteClusterNodeJoinSelector;
include fragment SiteClusterLevelLovSelector;
include fragment ApplicationCountrySelector;
include fragment TaxCodeCommonSelector;
include fragment OrderCoordinatorLovSelector;
include fragment InventoryPartPlannerLovSelector;
include fragment TechnicalCoordinatorLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
@DynamicComponentDependency PURCH
include fragment AssortmentPartSupplierDefaultsList;
@DynamicComponentDependency ORDER
include fragment AssortmentSalesDefaultsList;
@DynamicComponentDependency PURCH
include fragment AssortmentPurchDefaultList;

warningsenabled = AssortmentStructure;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry DefaultsperAssortmentNodeNavEntry parent InventNavigator.PartMasterDataAssortment at index 200 {
      label = "Defaults per Assortment Node";
      tree Tree;

   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using AssortmentStructureSet {
   label = "Defaults per Assortment Node: ${AssortmentId} - ${Description}";
   stateindicator AssortmentStructureStateIndicator;
   selector AssortmentStructureSelector;
   group AssortmentStructureGroup;

   tabs {
      tab {
         label = "Inventory Part Defaults";
         list AssortmentInventDefaultList(AssortmentInventDefaultArray) {
            copyoncruddefault(AssortmentId) to(AssortmentNodeId);
         }
      }
      tab {
         label = "Inventory Part Characteristics Defaults";
         group EngAttributeRootNodeGroup;
         list AssortmentInventCharacteristicsDefaultList(AssortmentInventoryPartCharacteristicsDefaultArray) {
            copyoncruddefault(AssortmentId) to(AssortmentNodeId);
         }
      }
      @DynamicComponentDependency ORDER
      tab {
         label = "Sales Part Defaults";
         list AssortmentSalesDefaultList(AssortmentSalesDefaultArray) {
            copyoncruddefault(AssortmentId) to(AssortmentNodeId);
         }
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Purchase Part Defaults";
         list AssortmentPurchDefaultList(AssortmentPurchDefaultArray) {
            copyoncruddefault(AssortmentId) to(AssortmentNodeId);
         }
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Supplier for Purchase Part Defaults";
         list AssortmentPartSupplierDefaultList(AssortmentPartSupplierDefaultArray) {
            copyoncruddefault(AssortmentId) to(AssortmentNodeId);
         }
      }
   }
   commandgroup TreeOperationsCmdGroup {
      command CreatePartsPerSiteForRootNodeCommand;
   }
}

page AssortmentNodePage using AssortmentNodeSet {
   label = "Defaults per Assortment Node: ${AssortmentNodeId} - ${Description}";
   stateindicator AssortmentNodeStateIndicator;
   selector AssortmentNodeSelector;
   group DefaultAssortmentNodeGroup;

   tabs {
      tab {
         label = "Inventory Part Defaults";
         list AssortmentInventDefaultList(AssortmentInventDefaultArray) {
            copyoncruddefault(AssortmentId, AssortmentNodeId) to(AssortmentId, AssortmentNodeId);
         }
      }
      tab {
         label = "Inventory Part Characteristics Defaults";
         group EngAttributeChildNodeGroup;
         list AssortmentInventCharacteristicsDefaultList(AssortmentInventoryPartCharacteristicsDefaultArray) {
            copyoncruddefault(AssortmentId, AssortmentNodeId) to(AssortmentId, AssortmentNodeId);
         }
      }
      @DynamicComponentDependency ORDER
      tab {
         label = "Sales Part Defaults";
         list AssortmentSalesDefaultList(AssortmentSalesDefaultArray) {
            copyoncruddefault(AssortmentId, AssortmentNodeId) to(AssortmentId, AssortmentNodeId);
         }
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Purchase Part Defaults";
         list AssortmentPurchDefaultList(AssortmentPurchDefaultArray) {
            copyoncruddefault(AssortmentId, AssortmentNodeId) to(AssortmentId, AssortmentNodeId);
         }
      }
      @DynamicComponentDependency PURCH
      tab {
         label = "Supplier for Purchase Part Defaults";
         list AssortmentPartSupplierDefaultList(AssortmentPartSupplierDefaultArray) {
            copyoncruddefault(AssortmentId, AssortmentNodeId) to(AssortmentId, AssortmentNodeId);
         }
      }
   }

   commandgroup TreeOperationsCmdGroup {
      command CreatePartsPerSiteForChildNodeCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command CreatePartsPerSiteForChildNodeCommand for AssortmentNode {
   label = "Create Parts Per Site";
   enabled = [AssortmentStructureRef.Objstate = "Active"];

   execute {
      assistant CreatePartsPerSiteAssistant(AssortmentId, AssortmentNodeId) {
         when OK {
            success("Part Creation Posted.");
            exit OK;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command CreatePartsPerSiteForRootNodeCommand for AssortmentStructure {
   label = "Create Parts Per Site";
   enabled = [Objstate = "Active"];

   execute {
      assistant CreatePartsPerSiteAssistant(AssortmentId, AssortmentId) {
         when OK {
            success("Part Creation Posted.");
            exit OK;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector AssortmentStructureSelector for AssortmentStructure {
   label = "${AssortmentId} - ${Description} - ${Objstate}";
   static AssortmentId;
   static Description;
   badge Objstate {
      style = TextOnly;
      emphasis Complementary7 = [Objstate = "Active"];
      emphasis Complementary2 = [Objstate = "Planned"];
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------
---------------------------------- GROUPS -----------------------------------
group AssortmentStructureGroup for AssortmentStructure {
   label = "Assortment Information";

   lov AssortmentStructureRef with ReferenceAssortmentStructureSelector {
      description = AssortmentStructureRef.Description;
   }
   lov AssortmentNodeRef with ReferenceAssortmentNodeSelector {
      description = AssortmentNodeRef.Description;
   }
}


group DefaultAssortmentNodeGroup for AssortmentNode {
   label = "Assortment Information";

   lov AssortmentStructureRef with AssortmentStructureSelector {
      description = AssortmentStructureRef.Description;
   }
   lov AssortmentNodeRef with ReferenceAssortmentNodeSelector {
      description = AssortmentNodeRef.Description;
   }
}

group EngAttributeRootNodeGroup for AssortmentStructure {
   label = "General";
   lov CharacteristicTemplateRef with ReferenceCharacteristicTemplateSelector {
      label = "Characteristic Template";
      description = CharacteristicTemplateRef.Description;
      editable = [false];
   }
}

group EngAttributeChildNodeGroup for AssortmentNode {
   label = "General";
   lov CharacteristicTemplateRef with ReferenceCharacteristicTemplateSelector {
      label = "Characteristic Template";
      description = CharacteristicTemplateRef.Description;
      editable = [false];
   }
}

----------------------------------- LISTS -----------------------------------
list AssortmentInventDefaultList for AssortmentInventDefault {
   label = "";
   field AssortmentLevelName {
      size = Small;
   }
   field AssortmentNodeIdRef {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field SiteClusterIdRef {
      size = Small;
   }
   lov SiteClusterNodeIdRef with ReferenceSiteClusterNodeJoinSelector using GetSiteClusterNodeId(SiteClusterIdRef.SiteClusterId) {
      size = Small;
   }
   lov CompanyRef with ReferenceCompanyFinanceSelector {
      size = Small;
   }
   field CountryCodeRef {
      size = Small;
   }
   lov PlannerBuyerRef with ReferenceInventoryPartPlannerLovSelector {
      size = Small;
   }
   field UnitMeasRef {
      size = Small;
   }
   field CatchUnitMeasRef {
      size = Small;
   }
   field TypeCode {
      size = Small;
   }

   field InputUnitMeasGroupIdRef {
      size = Small;
   }
   lov PrimeCommodityRef with ReferenceCommodityGroupSelector {
      size = Small;
   }
   lov SecondCommodityRef with ReferenceCommodityGroupSelector {
      size = Small;
   }
   lov AssetClassRef with AssetClassSelector {
      size = Small;
   }
   lov PartStatusRef with InventoryPartStatusParSelector {
      size = Small;
   }
   field HazardCodeRef {
      size = Small;
   }
   lov AccountingGroupRef with ReferenceAccountingGroupSelector {
      size = Small;
   }
   lov PartProductCodeRef with ReferenceInventoryProductCodeSelector {
      size = Small;
   }
   lov PartProductFamilyRef with ReferenceInventoryProductFamilySelector {
      size = Small;
   }
   field TypeDesignation {
      size = Small;
   }
   field DimQuality {
      size = Small;
   }
   field PurchLeadtime;
   field ManufLeadtime;
   field ExpectedLeadtime;
   field DurabilityDay;
   field MinDurabDaysCoDeliv;
   field MinDurabDaysPlanning;
   lov SupersedesRef with ReferenceInventoryPartLovSelector {
      size = Small;
   }
   field SupplyChainPartGroupRef {
      size = Small;
   }
   field SupplyCode {
      size = Small;
   }
   field DopConnection {
      size = Small;
   }
   field DopNetting {
      size = Small;
   }
   field CountryOfOriginRef {
      size = Small;
   }
   field RegionOfOriginRef {
      size = Small;
   }
   lov CustomsStatNoRef with ReferenceCustomsStatisticsNumberSelector {
      size = Small;
   }
   field IntrastatConvFactor;
   lov TechnicalCoordinatorIdRef with ReferenceTechnicalCoordinatorLovSelector {
      size = Small;
   }
   field QtyCalcRounding;
   field InventoryValuationMethod {
      size = Small;
   }
   field InventoryPartCostLevel {
      size = Small;
   }
   field InvoiceConsideration {
      size = Small;
   }
   field ZeroCostFlag {
      size = Small;
   }
   @DynamicComponentDependency COST
   field PartCostGroupIdRef {
      size = Small;
   }
   field MaxActualCostUpdate;
   field ExtServiceCostMethod {
      size = Small;
   }
   field CycleCode {
      size = Small;
   }
   field CyclePeriod;
   field OeAllocAssignFlag {
      size = Small;
   }
   field AutomaticCapabilityCheck {
      size = Small;
   }
   field NegativeOnHand {
      size = Small;
   }
   field OnhandAnalysisFlag {
      size = Small;
   }
   field CoReserveOnhAnalysFlag {
      size = Small;
   }
   field ForecastConsumptionFlag {
      size = Small;
   }
   field ShortageFlag {
      size = Small;
   }
   field StockManagement {
      size = Small;
   }
   field StdNameIdRef;
   field EstimatedMaterialCost;
   field PlanningMethodRef {
      size = Small;
   }
   field MinOrderQty;
   field MaxOrderQty;
   field MulOrderQty;
   field ShrinkageFac;
   field ServiceRateRef;
   field StdOrderSize;
   field CarryRate;
   field SafetyStock;
   field SafetyLeadTime {
      editable = [not PlanningMethodRef.PlanningMethod in("B", "C", "H", "K", "O", "P", "T")];

      validate command {
         execute {
            if [SafetyLeadTime != null and(SafetyLeadTime < 0)] {
               error("Safety Lead Time must be an integer greater than zero.");
            }
         }
      }
   }
   field OrderPointQty;
   field LotSize;
   field MaxweekSupply;
   field SetupCost;
   field QtyPredictedConsumption;
   field ProposalRelease {
      size = Small;
   }
   field OrderRequisition {
      size = Small;
   }
   field Notes {
      size = Small;
   }
}

list AssortmentInventCharacteristicsDefaultList for AssortmentInventoryPartCharacteristicsDefault {
   label = "Inventory Part Characteristics Defaults";
   orderby = CharacteristicCode;

   crudactions {
      new {
         enabled = [parent.EngAttribute != null];
      }
   }

   field AssortmentLevelName {
      size = Small;
   }
   field AssortmentNodeIdRef {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov SiteClusterIdRef with ReferenceSiteClusterSelector {
      size = Small;
   }
   lov SiteClusterNodeIdRef with ReferenceSiteClusterNodeJoinSelector using GetSiteClusterNodeId(SiteClusterIdRef.SiteClusterId) {
      size = Small;
   }
   lov CompanyRef with ReferenceCompanyFinanceSelector {
      size = Small;
   }
   field CountryCodeRef {
      size = Small;
   }
   lov CharacteristicCodeRef with ReferenceCharacteristicSelector using GetCharacteristicsCode(EngAttribute) {
      size = Small;
      validate command {
         variable ResultVar;
         variable CharTypeVar;

         execute {
            if [CharacteristicCodeRef.CharacteristicCode != null] {
               call ValidateCharacteristicsCode(EngAttribute, CharacteristicCodeRef.CharacteristicCode) into ResultVar;
               if[ResultVar] {
                  call GetCharTypeForCharacteristicsCode(CharacteristicCodeRef.CharacteristicCode) into CharTypeVar;
                  set CharType = CharTypeVar;
                  set AttrValue = null;
               }
            }
         }
      }
   }
//   field DfCharTemplateDescription {
//      label = "Description";
   //   }
   field CharacteristicDescription;
   field AttrValue {
      size = Small;
      lovswitch {
         when [CharType = "DiscreteCharacteristic"] {
            lov AttrValueRef with ReferenceDiscreteCharacValueSelector;
         }
         when [true] {
            lov AttrValueRef2 with ReferenceEmptyReferenceSelector {
               freeinput = [true];
               searchable = false;
            }
         }
      }
   }

   field Uom {
      size = Small;
   }
   field CharacteristicCodeRef.SearchType {
      size = Small;
      label = "Alpha/Num";
   }
   field CharType {
      size = Small;
   }
   field Notes {
      size = Small;
   }
}

@Overtake Core
@DynamicComponentDependency PURCH
selector ReferencePurchasePartGroupSelector for PurchasePartGroup {
   static StatGrp;
   static Description;
   static OverDeliveryTolerance;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator AssortmentStructureStateIndicator for AssortmentStructure {
   state "Planned" {
      completed = 0%;
      emphasis StatePlanned = [Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis StateActive = [Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [Objstate = "Closed"];
   }
}

stateindicator AssortmentNodeStateIndicator for AssortmentNode {
   state "Planned" {
      completed = 0%;
      emphasis StatePlanned = [AssortmentStructureRef.Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis StateActive = [AssortmentStructureRef.Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [AssortmentStructureRef.Objstate = "Closed"];
   }
}

----------------------------------- TREES -----------------------------------
tree Tree using AssortmentStructureSet {
   label = "Defaults per Assortment Node";
   selector AssortmentStructureSelector;

   rootnode RootNode {
      label = "${AssortmentId} - ${Description}";

      navigate {
         page Form {
            filter(AssortmentId, AssortmentId);
         }
      }
      iconset {
         icon "folder-alt";
         emphasis Complementary3 = [true];
      }
      connections {
         node ChildNode using GetAssortmentNodes(AssortmentId, AssortmentId);
      }
   }

   node ChildNode for AssortmentNode {
      label = "${AssortmentNodeId} - ${Description}";
      orderby = AssortmentNodeId;

      navigate {
         page AssortmentNodePage {
            filter(AssortmentId, AssortmentId);
            filter(AssortmentNodeId, AssortmentNodeId);
         }
      }
      iconset {
         icon "diamon-solid-small" {
            expression = [PartNo != null];
         }
         icon "folder-alt" {
            expression = [PartNo = null];
         }
         emphasis Complementary3 = [true];
      }
      connections {
         node ChildNode using GetAssortmentNodes(AssortmentId, AssortmentNodeId);
      }

   }
}

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------