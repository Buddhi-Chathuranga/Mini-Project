--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-04-30  AyAmlk  PR21R2-170, Added missing dynamic dependencies for SRM.
--  2020-11-30  NaLrlk  R2020R1-367, Added entityset PartCatalogSet.
--  2020-08-19  LaDelk  PR2020R1-243, Fixed bug in DisconnectPartsCommand
--  2020-07-09  AyAmlk  PR2020R1-53, Created. Moved common code in AssortmentHandling and ProcurementCategoryAssortmentHandling
--  2020-07-09          to AssortmentCommonObjects fragment.
---------------------------------------------------------------------------------

fragment AssortmentCommonObjects;
component INVENT;
layer Core;
description "This fragment will keep the common elements to support the Assortment and Procurement Category Assortment pages.";

--------------------------------- FRAGMENTS ---------------------------------
include fragment InputUomGroupLovSelector;


----------------------------- CLIENT FRAGMENTS ------------------------------
----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant CreateSubNodesAssistant using AssortmentVirtualSet {
   label = "Create Nodes";
   savemode = OnLostFocus;
   input(AssortmentId, ParentNodeId);

   steps {
      step {
         group AssortmentGroup {
            visible = [false];
         }
         list NewSubNodeList(SubNodeVirtualArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [component.NewSubNodeList.RowCount > 0];

      execute {
         call SaveSubNodes();
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

assistant ConnectPartsAssistant using AssortmentVirtualSet {
   label = "Connect Parts";
   savemode = OnLostFocus;
   input(AssortmentId, ParentNodeId);

   steps {
      step {
         group AssortmentGroup {
            visible = [false];
         }
         list ConnectPartsList(ConnectPartsVirtualArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [component.ConnectPartsList.RowCount > 0];

      execute {
         call ConnectParts();
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

assistant PartListAssistant using ConnectPartsVirtualSet {
   label = "Part List ";
   savemode = OnLostFocus;
   input(AssortmentId);
   output(SelectionList);
   steps {
      step {
         list PartList using GetPartListForNode(AssortmentId);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [component.PartList.SelectionCount > 0];
      execute {
         set SelectionList = component.PartList.Selection;
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

--------------------------------- COMMANDS ----------------------------------
command ActivateCommand for AssortmentNode {
   label = "Set Active";
   enabled = [AssortmentStructureRef.Objstate in("Planned", "Closed")];
   execute {
      call ChangeStatus(AssortmentId, "ACTIVATE");
   }
}

command CloseCommand for AssortmentNode {
   label = "Close";
   enabled = [AssortmentStructureRef.Objstate in("Planned", "Active")];
   execute {
      call ChangeStatus(AssortmentId, "CLOSE");
   }
}

command ChangetoPlannedCommand for AssortmentNode {
   label = "Change to Planned";
   enabled = [AssortmentStructureRef.Objstate in("Active", "Closed")];
   execute {
      call ChangeStatus(AssortmentId, "PLANNED");
   }
}

command CopyAssortmentFromNodeCommand for AssortmentNode {
   label = "Copy Assortment";
   enabled = [true];

   variable NewAssortmentIdVar;
   execute {
      dialog CopyAssortmentDialog(AssortmentId) into(NewAssortmentIdVar) {
         when OK {
            navigate {
               tree Tree {
                  filter(NewAssortmentIdVar, AssortmentId);
               }
            }
            exit OK;
         }
      }
   }
}

command CopyAssortmentCommand for AssortmentStructure {
   label = "Copy Assortment";
   enabled = [true];

   variable NewAssortmentIdVar;
   execute {
      dialog CopyAssortmentDialog(AssortmentId) into(NewAssortmentIdVar) {
         when OK {
            navigate {
               tree Tree {
                  filter(NewAssortmentIdVar, AssortmentId);
               }
            }
            exit OK;
         }
      }
   }
}

command DisconnectPartsCommand for PartCatalog {
   label = "Disconnect Parts";
   mode = SelectedRecords;

   bulkexecute {
      messagebox("", question, "Are you sure you want to disconnect these parts? Please note, that this also removes all defaults defined for these part nodes.") {
         when "Yes" {
            if [selection.AssortmentStructureSelector.AssortmentId != null] {
               call DeleteSubNodes(Selection, selection.AssortmentStructureSelector.AssortmentId);
            }
            else {
               call DeleteSubNodes(Selection, selection.AssortmentNodeSelector.AssortmentId);
            }
         }
         when "No" {
            exit;
         }
      }
   }
}

command CreateSubNodesCommand for AssortmentNode {
   label = "Create Nodes";
   enabled = [PartNo = null];

   execute {
      assistant CreateSubNodesAssistant(AssortmentId, AssortmentNodeId) {
         when OK {
            success("Assortment Nodes Added.");
         }
      }
   }
}

command CreateSubNodesForRootCommand for AssortmentStructure {
   label = "Create Nodes";

   execute {
      assistant CreateSubNodesAssistant(AssortmentId, AssortmentId) {
         when OK {
            success("Assortment Nodes Added.");
         }
      }
   }
}

command RemoveNodeCommand for AssortmentNode {
   label = "Delete Node";

   execute {
      confirm("Do you want to delete node ${AssortmentNodeId} and all its sub nodes? Please note, that this also removes all defaults defined for the node and its sub nodes.") {
         when OK {
            call DeleteAssortmentNode(AssortmentId, AssortmentNodeId);
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CopyAssortmentNodeCommand for AssortmentNode {
   label = "Copy Assortment Node";
   enabled = [PartNo = null];

   variable ToAssortmentIdVar;
   execute {
      dialog CopyAssortmentNodeDialog(AssortmentId, AssortmentNodeId) into(ToAssortmentIdVar) {
         when OK {
            navigate {
               tree Tree {
                  filter(ToAssortmentIdVar, AssortmentId);
               }
            }
         }
      }
   }
}
command MoveAssortmentNodeCommand for AssortmentNode {
   label = "Move Node";

   execute {
      dialog MoveAssortmentNodeDialog(AssortmentId, AssortmentNodeId, AssortmentId) {
         when OK {
            exit OK;
         }
      }
   }
}

command MoveAssortmentNodeInTreeCommand for AssortmentNode {
   variable DestinationNodeIdVar Text;
   variable NodePartNoVar Text;
   variable AssortmetIdVar Text;

   execute {
      set NodePartNoVar = "${destination.PartNo}";
      set AssortmetIdVar = "${source.AssortmentId}";
      if [NodePartNoVar = ""] {
         set DestinationNodeIdVar = "${destination.AssortmentNodeId}";
         if [DestinationNodeIdVar = ""] {
            set DestinationNodeIdVar = "${source.AssortmentId}";
         }
         confirm("Do you want to move node ${source.AssortmentNodeId} and all its sub nodes to node ${DestinationNodeIdVar}?") {
            when OK {
               call MoveAssortmentNode(source.AssortmentId, source.AssortmentNodeId, DestinationNodeIdVar);
               navigate {
                  tree Tree {
                     filter(AssortmetIdVar, AssortmentId);
                  }
               }
               exit OK;
            }
         }
      }
   }
}

command CopyAssortmentNodeForRootCommand for AssortmentStructure {
   label = "Copy Assortment Node";
   enabled = [PartNo = null];

   variable ToAssortmentIdVar;
   execute {
      dialog CopyAssortmentNodeDialog(AssortmentId, AssortmentId) into(ToAssortmentIdVar) {
         when OK {
            navigate {
               tree Tree {
                  filter(ToAssortmentIdVar, AssortmentId);
               }
            }
         }
      }
   }
}

command AssortmnetNodeTranslationCommand {
   label = "Translation";
   mode = Global;
   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'INVENT' and Lu eq 'AssortmentNode'";
   }
}

command TranslationCommand {
   label = "Translation";
   mode = Global;
   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'INVENT' and Lu eq 'AssortmentStructure'";
   }
}

command PartListCommand for ConnectPartsVirtual {
   label = "Part List";
   mode = Global;
   variable SelectionListVar Text;
   variable AddedPartsVar    Text;

   execute {
      assistant PartListAssistant(AssortmentId) into(SelectionListVar) {
         when OK {
            if [SelectionListVar = null] {
               exit;
            }
            else {
               call FilterAddedParts(Objkey, AssortmentId, ParentNodeId, SelectionListVar) into AddedPartsVar;
               if [AddedPartsVar != null] {
                  messagebox("", warning, "Following parts have already been added. ${AddedPartsVar}.")
                     {
                     when "OK" {
                        exit;
                     }
                  }
               }
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector AssortmentStructureSelector for AssortmentStructure {
   label = "${AssortmentId} - ${Description} - ${Objstate}";
   static AssortmentId;
   static Description;
   badge Objstate {
      style = TextOnly;
      emphasis Complementary7 = [Objstate = "Active"];
      emphasis Complementary2 = [Objstate = "Planned"];
   }
   static ClassificationStandard {
      visible = [ClassificationStandard != null];
   }
   fieldorder = AssortmentId, Description, Objstate, ClassificationStandard;
}

@Override
selector AssortmentNodeSelector for AssortmentNode {
   label = "${Description}";
   static AssortmentId {
      visible = [false];
   }
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group AssortmentStructureBaseGroup for AssortmentStructure {
   label = "";

   field AssortmentId {
      size = Small;
   }
   field Description;
   lov ClassificationStandardRef with ReferenceClassificationStandardSelector {
      description = ClassificationStandardRef.Description;
      searchable = true;
   }
   field Notes {
      multiline = true;
      searchable = false;
      size = Medium;
   }
}

group AssortmentNodeInformationBaseGroup for AssortmentNode {
   label = "";

   field AssortmentNodeId {
      size = Small;
   }
   field Description;
   lov PartNoRef with PartCatalogSelector {
      visible = [PartNo != null];
      description = PartDescription;
   }
   field LevelName;
   field ClassificationPartNo {
      visible = [PartNo != null];
      size = Small;
   }
   lov UnitCodeRef with IsoUnitSelector {
      visible = [PartNo != null];
      size = Small;
   }
}

group CopyfromAssortmentStructureGroup for CopyAssortmentStructureStructure {
   label = "Copy from Assortment Structure";
   lov AssortmentRef with ReferenceAssortmentStructureSelector {
      label = "Assortment";
      description = AssortmentRef.Description;
      editable = [false];
   }
}

group NewAssortmentAstructureGroup for CopyAssortmentStructureStructure {
   label = "New Assortment Structure";

   field AssortmentId;
   field Description;
}

group CopyFromAssortmentNodeGroup for CopyAssortmentNodeStructure {
   label = "Copy From";

   lov FromAssortmentStructureRef with AssortmentStructureSelector {
      description = FromAssortmentStructureRef.Description;
      editable = [false];
   }
   lov FromAssortmentNodeRef with AssortmentNodeSelector {
      description = ToAssortmentNodeRef.Description;
      editable = [false];
   }
}

group CopyAssortmentNodeGroup for CopyAssortmentNodeStructure {
   label = "Copy To";

   radiogroup CopyToType {
      showlabel = false;
   }
   field ToAssortmentId {
      size = Small;
      visible = [CopyToType = "New"];
   }
   field Description {
      visible = [CopyToType = "New"];
      required = [CopyToType = "New"];
   }
   lov AssortmentStructureRef with AssortmentStructureSelector {
      description = AssortmentStructureRef.Description;
      visible = [CopyToType = "Copy"];
   }
   lov ToAssortmentNodeRef with AssortmentNodeSelector using GetAssortmentNodeForLov(ToAssortmentId) {
      description = ToAssortmentNodeRef.Description;
      visible = [CopyToType = "Copy"];
      required = [CopyToType = "Copy"];
   }
}

group MoveAssortmentNodeGroup for CopyAssortmentNodeStructure {
   label = "Assortment Structure";

   lov FromAssortmentNodeRef with AssortmentNodeSelector {
      description = FromAssortmentNodeRef.Description;
      editable = [false];
   }
   lov ToAssortmentNodeRef with AssortmentNodeSelector using GetAssortmentNodeForLov(ToAssortmentId) {
      description = ToAssortmentNodeRef.Description;
   }
}

group NewAssortmentStructureBaseGroup for NewAssortmentStructureBaseStructure {
   field AssortmentId {
      required = [true];
   }
   field Description {
      required = [true];
   }
   lov ClassificationStandardRef with ReferenceClassificationStandardSelector {
      description = ClassificationStandardRef.Description;
   }
   field Notes {
      multiline = true;
      size = Large;
   }
}

----------------------------------- LISTS -----------------------------------
list ConnectedPartsBaseList for PartCatalog {
   label = "";

   lov PartCatalogRef with PartCatalogSelector {
      description = Description;
      size = Large;
   }
   field LotTrackingCode {
      size = Small;
   }
   field ReceiptIssueSerialTrackDb {
      size = Small;
   }
   field SerialTrackingCodeDb {
      size = Small;
   }
   field SerialRule {
      size = Small;
   }
   field EngSerialTrackingCodeDb {
      size = Small;
   }
   lov UnitCodeRef with IsoUnitSelector {
      description = UnitCodeRef.Description;
   }
   field CatchUnitEnabledDb {
      size = Small;
   }
   lov InputUnitMeasGroupIdRef with ReferenceInputUomGroupLovSelector {
      size = Small;
   }
   field StandardName {
      size = Small;
   }
   field ConfigurableDb {
      size = Small;
   }
   field ConditionCodeUsageDb {
      size = Small;
   }
   field InfoText;
   field LotQuantityRule {
      size = Small;
   }
   field SubLotRule {
      size = Small;
   }
   lov PartMainGroupRef with EngPartMainGroupSelector {
      description = PartMainGroupRef.Description;
   }
   field MultilevelTrackingDb {
      size = Small;
   }
   field GtinSeries {
      size = Small;
   }
   field Gtin {
      size = Small;
   }
   measure WeightNet(UomForWeightNet);
   measure VolumeNet(UomForVolumeNet);
   field FreightFactor;
}

list NewSubNodeList for SubNodeVirtual {
   label = "New Sub Nodes";

   field AssortmentNodeId {
      validate command {
         variable ResultVar;

         execute {
            call CheckExistAssortmentNodeId(AssortmentId, AssortmentNodeId) into ResultVar;
            if [ResultVar] {
               error("Duplicate node entry.");
               set AssortmentNodeId = "";
            }
         }
      }
   }
   field Description;
   lov CharacteristicTemplateRef with ReferenceCharacteristicTemplateSelector {
      description = CharacteristicTemplateRef.Description;
   }
}

list ConnectPartsList for ConnectPartsVirtual {
   label = "Connect Parts";

   lov PartCatalogRef with ReferencePartCatalogSelector using GetPartListForNode(AssortmentId) {
      description = PartCatalogRef.PartDescription;
      advancedview ConnectedPartsList;
      validate command {
         variable ResultVar;
         execute {
            call CheckPartCatalogExists(PartNo) into ResultVar;
            if [ResultVar = false] {
               error("Part does not exist in Part Catalog");
               set PartNo = "";
            }
         }
      }
   }
   field PartCatalogRef.LotTrackingCode;
   field PartCatalogRef.SerialTrackingCodeDb;
   field PartCatalogRef.SerialRule;
   field PartCatalogRef.EngSerialTrackingCodeDb;
   field PartCatalogRef.UnitCode;
   field PartCatalogRef.CatchUnitEnabledDb;
   field PartCatalogRef.InputUnitMeasGroupId;
   field PartCatalogRef.StandardName;
   field PartCatalogRef.ConfigurableDb;
   field PartCatalogRef.ConditionCodeUsageDb;
   field PartCatalogRef.LotQuantityRule;
   field PartCatalogRef.SubLotRule;
   field PartCatalogRef.PartMainGroup;
   field PartCatalogRef.MultilevelTrackingDb;
   command PartListCommand;
}

list PartList for PartCatalog {
   label = "Part List";
   field PartNo;
   field PartDescription;
   field LotTrackingCode;
   field ReceiptIssueSerialTrackDb;
   field SerialTrackingCodeDb;
   field SerialRule;
   field EngSerialTrackingCodeDb;
   field UnitCode;
   field CatchUnitEnabledDb;
   field InputUnitMeasGroupId;
   field StdNameId;
   field ConfigurableDb;
   field ConditionCodeUsageDb;
   field LotQuantityRule;
   field SubLotRule;
   field PartMainGroup;
   field MultilevelTrackingDb;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CopyAssortmentDialog for CopyAssortmentStructureStructure {
   label = "Copy Assortment";
   input(FromAssortmentId);
   output(AssortmentId);

   group CopyfromAssortmentStructureGroup;
   group NewAssortmentAstructureGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [AssortmentId != null and Description != null];

         execute {
            call CopyAssortment(FromAssortmentId, AssortmentId, Description);
            exit OK;
         }
      }
      command Cancel;
   }
}

dialog CopyAssortmentNodeDialog for CopyAssortmentNodeStructure {
   label = "Copy Assortment Node";
   input(FromAssortmentId, FromAssortmentNodeId);
   output(ToAssortmentId);

   group CopyFromAssortmentNodeGroup;
   group CopyAssortmentNodeGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [ToAssortmentId != null and((CopyToType = "New" and Description != null) or CopyToType = "Copy") and((CopyToType = "Copy" and ToAssortmentNodeId != null) or CopyToType = "New")];

         execute {
            call CopyAssortmentNode(FromAssortmentId, FromAssortmentNodeId, ToAssortmentId, Description, ToAssortmentNodeId, CopyToType);
            exit OK;
         }
      }
      command Cancel;
   }
}

dialog MoveAssortmentNodeDialog for CopyAssortmentNodeStructure {
   label = "Move Assortment Node";
   input(FromAssortmentId, FromAssortmentNodeId, ToAssortmentId);

   group MoveAssortmentNodeGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [ToAssortmentNodeId != null];

         execute {
            messagebox("", question, "Do you want to move node ${FromAssortmentNodeId} and all its sub nodes to node ${ToAssortmentNodeId}?") {
               when YES {
                  call MoveAssortmentNode(FromAssortmentId, FromAssortmentNodeId, ToAssortmentNodeId);
                  exit OK;
               }
               when NO {
                  exit;
               }
            }
         }
      }
      command Cancel;
   }
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator AssortmentStructureStateIndicator for AssortmentStructure {
   state "Planned" {
      completed = 0%;
      emphasis StatePlanned = [Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis StateActive = [Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [Objstate = "Closed"];
   }
}

stateindicator AssortmentNodeStateIndicator for AssortmentNode {
   state "Planned" {
      completed = 0%;
      emphasis StatePlanned = [AssortmentStructureRef.Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis StateActive = [AssortmentStructureRef.Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [AssortmentStructureRef.Objstate = "Closed"];
   }
}

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ConnectPartsVirtualSet for ConnectPartsVirtual;
entityset AssortmentStructureSet for AssortmentStructure;
entityset AssortmentNodeSet for AssortmentNode;
entityset AssortmentVirtualSet for AssortmentVirtual;
entityset PartCatalogSet for PartCatalog;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AssortmentStructure {
   use attributes = Description, ClassificationStandard, Notes;

   attribute AssortmentId Text {
      label = "Assortment";
   }
   reference ClassificationStandardRef(ClassificationStandard) to ClassificationStandard(ClassificationStandard) {
      label = "Classification Standard";
   }
   -- STRATEGIC_PROCUREMENT: start
   @DynamicComponentDependency SRM
   attribute ProcCategoryAssortment Boolean("TRUE", "FALSE") {
      fetch = "proc_category_assortment_db";
      label = "Procurement Category Assortment";
      required = [true];
   }
   -- STRATEGIC_PROCUREMENT: end
}

@Override
entity AssortmentNode {
   crud = Update, Read;
   supportwarnings = [true];
   use attributes = Description, PartNo, ParentNode, EngAttribute, CharacTmpDefinedNode, ClassificationPartNo, UnitCode;
   attribute AssortmentNodeId Text {
      fetch = "assortment_node_id";
      label = "Node";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Node Description";
      maxlength = 200;
      required = [true];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Connected to Part";
      maxlength = 25;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartDescription Text {
      fetch = "Part_Catalog_API.Get_Description(part_no)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute LevelName Text {
      fetch = "Assortment_Node_API.Get_Node_Level_Description(assortment_id,assortment_node_id)";
      label = "Level Name";
      maxlength = 200;
      editable = [false];
   }
   attribute EngAttribute Text {
      fetch = "eng_attribute";
      label = "Template";
      maxlength = 20;
      format = uppercase;
   }
   attribute TemplateDescription Text {
      fetch = "Characteristic_Template_API.Get_Description(eng_attribute)";
      label = "Template Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CharacTmpDefinedNode Text {
      fetch = "charac_tmp_defined_node";
      label = "Template Defined In";
      maxlength = 50;
      editable = [false];
   }
   attribute ClassificationPartNo Text {
      fetch = "classification_part_no";
      label = "Classification Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute UnitCode Text {
      fetch = "unit_code";
      label = "Classification UoM";
      maxlength = 30;
   }
   attribute ClassificationId Text {
      fetch = "Assortment_Structure_API.Get_Classification_Standard(assortment_id)";
   }

   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId);
   reference ClassificationStandardRef(ClassificationId) to ClassificationStandard(ClassificationStandard) {
      label = "Classification Standard";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Connected to Part";
   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Template";
   }
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "Classification UoM";
   }
}

@Override
entity PartCatalog {
   crud = Read;
   use attributes = Description, LotTrackingCode, SerialRule, UnitCode, InputUnitMeasGroupId, StdNameId, InfoText, LotQuantityRule, SubLotRule, PartMainGroup, WeightNet, UomForWeightNet, VolumeNet, UomForVolumeNet, FreightFactor;
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 200;
      required = [true];
   }
   attribute PartDescription Text {
      fetch = "Part_Catalog_API.Get_Description(part_no)";
      label = "Part Description";
      maxlength = 200;
   }
   attribute LotTrackingCode Enumeration(PartLotTracking) {
      fetch = "lot_tracking_code_db";
      label = "Lot/Batch Tracking";
      required = [true];
   }
   attribute ReceiptIssueSerialTrackDb Boolean("TRUE", "FALSE") {
      fetch = "receipt_issue_serial_track_db";
      label = "Serial Tracking at Receipt and Issue";
      required = [true];
   }
   attribute SerialTrackingCodeDb Enumeration(PartSerialTracking) {
      fetch = "serial_tracking_code_db";
      label = "Inventory Serial Tracking";
      required = [true];
   }
   attribute SerialRule Enumeration(PartSerialRule) {
      fetch = "serial_rule_db";
      label = "Serial Rule";
      required = [true];
   }
   attribute EngSerialTrackingCodeDb Enumeration(PartSerialTracking) {
      fetch = "eng_serial_tracking_code_db";
      label = "After Delivery Serial Tracking";
      required = [true];
   }
   attribute UnitCode Text {
      fetch = "unit_code";
      label = "UoM";
      maxlength = 50;
      required = [true];
   }
   attribute CatchUnitEnabledDb Boolean("TRUE", "FALSE") {
      fetch = "catch_unit_enabled_db";
      label = "Catch UoM Enabled";
      required = [true];
   }
   attribute InputUnitMeasGroupId Text {
      fetch = "input_unit_meas_group_id";
      label = "Default Input UoM Group";
      maxlength = 30;
      format = uppercase;
   }
   attribute StdNameId Number {
      fetch = "std_name_id";
      label = "Standard Name ID";
      maxlength = 10;
   }
   attribute StandardName Text {
      fetch = "Standard_Names_Language_API.Get_Std_Name(null,std_name_id)";
      label = "Standard Name";
      maxlength = 200;
   }
   attribute ConfigurableDb Enumeration(PartConfiguration) {
      fetch = "configurable_db";
      label = "Configurable";
      required = [true];
   }
   attribute ConditionCodeUsageDb Enumeration(ConditionCodeUsage) {
      fetch = "condition_code_usage_db";
      label = "Allow Condition Code";
      required = [true];
   }
   attribute InfoText Text {
      fetch = "info_text";
      label = "Info Text";
      maxlength = 2000;
   }
   attribute LotQuantityRule Enumeration(LotQuantityRule) {
      fetch = "lot_quantity_rule_db";
      label = "Lot Quantity Rule";
      required = [true];
   }
   attribute SubLotRule Enumeration(SubLotRule) {
      fetch = "sub_lot_rule_db";
      label = "Sub Lot Rule";
      required = [true];
   }
   attribute PartMainGroup Text {
      fetch = "part_main_group";
      label = "Part Main Group";
      maxlength = 20;
      format = uppercase;
   }
   attribute MultilevelTrackingDb Enumeration(MultilevelTracking) {
      fetch = "multilevel_tracking_db";
      label = "Multi-Level Tracking";
      required = [true];
   }
   attribute GtinSeries Enumeration(GtinSeries) {
      fetch = "Part_Gtin_API.Get_Gtin_Series(part_no, Part_Gtin_API.Get_Default_Gtin_No(part_no))";
      label = "GTIN Series";
   }
   attribute Gtin Text {
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(part_no)";
      label = "GTIN";
      maxlength = 14;
   }
   attribute WeightNet Number {
      fetch = "weight_net";
      label = "Net Weight";
   }
   attribute UomForWeightNet Text {
      fetch = "uom_for_weight_net";
      label = "Weight UoM";
      maxlength = 30;
   }
   attribute VolumeNet Number {
      fetch = "volume_net";
      label = "Net Volume";
   }
   attribute UomForVolumeNet Text {
      fetch = "uom_for_volume_net";
      label = "Volume UoM";
      maxlength = 30;
   }
   attribute FreightFactor Number {
      fetch = "freight_factor";
      label = "Freight Factor";
   }

   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference InputUnitMeasGroupIdRef(UnitCode, InputUnitMeasGroupId) to InputUomGroupLov(UnitCode, InputUnitMeasGroupId) {
      label = "Default Input UoM Group";
   }
   reference PartMainGroupRef(PartMainGroup) to EngPartMainGroup(PartMainGroup) {
      label = "Part Main Group";
   }
   reference PartCatalogRef(PartNo) to PartCatalog(PartNo) {
      label = "Part";
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration CopyToTypeEnum {
   value = "NEW" {
      identifier = "New";
      label = "Create New Assortment";
   }
   value = "COPY" {
      identifier = "Copy";
      label = "Copy to an Existing Assortment";
   }
}

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CopyAssortment {
   initialcheck none;
   parameter FromAssortmentId Text;
   parameter NewAssortmentId Text;
   parameter Description Text;
}

action ChangeStatus {
   initialcheck none;
   ludependencies = AssortmentStructure, AssortmentNode;
   parameter AssortmentId Text;
   parameter Status Text;
}

action DeleteSubNodes {
   initialcheck none;
   ludependencies = AssortmentNode, PartCatalog;
   parameter Selection Text;
   parameter AssortmentId Text;
}

action DeleteAssortmentNode {
   initialcheck none;
   ludependencies = AssortmentStructure, AssortmentNode;
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
}

action CopyAssortmentNode {
   initialcheck none;
   parameter FromAssortmentId Text;
   parameter FromAssortmentNodeId Text;
   parameter ToAssortmentId Text;
   parameter Description Text;
   parameter ToAssortmentNodeId Text;
   parameter CopyToType Enumeration(CopyToTypeEnum);
}

action MoveAssortmentNode {
   initialcheck none;
   ludependencies = AssortmentStructure, AssortmentNode;
   parameter FromAssortmentId Text;
   parameter FromAssortmentNodeId Text;
   parameter ToAssortmentNodeId Text;
}

action FilterAddedParts Text {
   initialcheck none;
   ludependencies = AssortmentVirtual, ConnectPartsVirtual;
   parameter Objkey Text;
   parameter AssortmentId Text;
   parameter ParentNodeId Text;
   parameter SelectionListVar Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckExistAssortmentNodeId Boolean {
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
}

function CheckPartCatalogExists Boolean {
   parameter PartNo Text;
}

function GetAssortmentNodeForLov List < Entity(AssortmentNode) > {
   parameter AssortmentId Text;
   where = "assortment_id = :AssortmentId and part_no IS NULL";
}

function GetPartListForNode List < Entity(PartCatalog) > {
   parameter AssortmentId Text;
   where = "PART_NO not in (select PART_NO from ASSORTMENT_NODE where PART_NO is not null and ASSORTMENT_ID = :AssortmentId)";
}

-------------------------------- STRUCTURES ---------------------------------
structure CopyAssortmentStructureStructure {
   attribute FromAssortmentId Text;
   attribute AssortmentId Text {
      format = uppercase;
      label = "Assortment ID";
      required = [true];
   }
   attribute Description Text {
      required = [true];
   }
   reference AssortmentRef(FromAssortmentId) to AssortmentStructure(AssortmentId);
}

structure CopyAssortmentNodeStructure {
   attribute FromAssortmentId Text;
   attribute FromAssortmentNodeId Text;
   attribute ToAssortmentId Text {
      required = [true];
      format = uppercase;
      label = "New Assortment ID";
   }
   attribute Description Text;
   attribute ToAssortmentNodeId Text {
      label = "Assortment Node ID";
   }
   attribute CopyToType Enumeration(CopyToTypeEnum) {
      required = [true];
   }

   reference AssortmentStructureRef(ToAssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference FromAssortmentStructureRef(FromAssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference FromAssortmentNodeRef(FromAssortmentId, FromAssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Move From Assortment Node";
   }
   reference ToAssortmentNodeRef(ToAssortmentId, ToAssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Move To Assortment Node";
   }
}

structure NewAssortmentStructureBaseStructure {
   attribute AssortmentId Text {
      label = "Assortment";
      maxlength = 100;
      format = uppercase;
   }
   attribute Description Text;
   attribute ClassificationStandard Text;
   attribute Notes Text;


   reference ClassificationStandardRef(ClassificationStandard) to ClassificationStandard(ClassificationStandard) {
      label = "Classification Standard";
   }
}

--------------------------------- VIRTUALS ----------------------------------
virtual AssortmentVirtual {
   attribute AssortmentId Text;
   attribute ParentNodeId Text;

   array SubNodeVirtualArray(AssortmentId, ParentNodeId) to SubNodeVirtual(AssortmentId, ParentNodeId);
   array ConnectPartsVirtualArray(AssortmentId, ParentNodeId) to ConnectPartsVirtual(AssortmentId, ParentNodeId);

   action SaveSubNodes {
      ludependencies = AssortmentStructure, AssortmentNode, PartCatalog;
   }
   action ConnectParts {
      ludependencies = AssortmentStructure, AssortmentNode, PartCatalog;
   }
}

virtual SubNodeVirtual {
   attribute AssortmentId Text;
   attribute ParentNodeId Text;
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
      required = [true];
      format = uppercase;
   }
   attribute Description Text {
      required = [true];
   }
   attribute CharacteristicTemplate Text;

   reference CharacteristicTemplateRef(CharacteristicTemplate) to CharacteristicTemplate(EngAttribute) {
      label = "Characteristic Template";
   }
}

virtual ConnectPartsVirtual {
   attribute AssortmentId Text;
   attribute ParentNodeId Text;
   attribute PartNo Text {
      required = [true];
   }
   attribute SelectionList Text;

   reference PartCatalogRef(PartNo) to PartCatalog(PartNo) {
      label = "Part";
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------