-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-03-02  GrGalk  Bug 157982 (SCZ-12580), Replaced the entity InventoryPartTracing and it's usages with InventoryPartTracingDetail and InventoryPartTracingHeader
-- 2020-07-02  NiAslk  Bug 154562 (SCZ-10484), Modfied fetching TreeId in InventoryTransactionHist.
-- 2019-09-19  ChFolk  SCUXXW4-23854, Modified ViewSourceCommand to support it for Customer Order.
-- 2019-05-10  ChFolk  SCUXXW4-18444, Modified FetchDetailNodes to include where clause to avoid method in plsvc.
-- 2019-01-15  ShKolk  SCUXXW4-6402, Moved projection and client items from InventoryPartOriginTracing and InventoryPartUsageTracing
-----------------------------------------------------------------------------
fragment InventoryPartTracingList;
component INVENT;
layer Core;
description "This fragment contains the common client and projection items of InventoryPartOriginTracing and InventoryPartUsageTracing";
include fragment InventoryLocation19Selector;
include fragment InventoryTransactionCodeLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command QualityControlAnalysisResultInventCommand {
   label = "Quality Control Analysis Result";
   enabled = [AnalysisExist];
   execute {
      navigate "page/AnalysisResult/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and LotBatchNo eq $[LotBatchNo]";
   }
}

command QualityControlAnalysisResultCommand {
   label = "Quality Control Analysis Result";
   variable ProductionLineVar;
   enabled = [SourceApplicationDb = "SHOP-ORDER" or SourceApplicationDb = "PROD-SCH" or SourceApplicationDb = "PUR-ORDER"];
   execute {
      if [SourceApplicationDb = "SHOP-ORDER"] {
         navigate "page/AnalysisResult/Form?$filter=OrderNo eq $[SourceRef1] and ReleaseNo eq $[SourceRef2] and SequenceNo eq $[SourceRef3]";
      }
      if [SourceApplicationDb = "PROD-SCH"] {
         navigate "page/AnalysisResult/Form?$filter=PartNo eq $[PartNo] and ProductionLine eq $[ProductionLineVar] and Contract eq $[Contract]";
      }
      if [SourceApplicationDb = "PUR-ORDER"] {
         navigate "page/AnalysisResult/Form?$filter=OrderNo eq $[SourceRef1] and LineNo eq $[SourceRef2] and ReleaseNo eq $[SourceRef3]";
      }
   }
}
command InventoryTransactionHistoryCommand {
   label = "Inventory Transaction History";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/InventoryTransactionsHistory/List?$filter=TransactionId eq $[TransactionId]";
   }
}
command LotBatchMasterCommand {
   label = "Part Lot Batch";
   mode = SelectedRecords;
   enabled = [LotBatchNo != "*"];
   bulkexecute {
      bulknavigate "page/PartLotBatch/Form?$filter=PartNo eq $[PartNo] and LotBatchNo eq $[LotBatchNo]";
   }
}
command PartSerialCommand {
   label = "Part Serial";
   mode = SelectedRecords;
   enabled = [SerialNo != "*"];
   bulkexecute {
      bulknavigate "page/PartSerial/Form?$filter=PartNo eq $[PartNo] and SerialNo eq $[SerialNo]";
   }
}
command ViewSourceCommand {
   label = "View Source";
   variable ActiveWoVar;
   enabled = [count(SourceApplicationDb) = 1 and(SourceApplicationDb = "SHOP-ORDER" or SourceApplicationDb = "PROD-SCH" or SourceApplicationDb = "PUR-ORDER" or SourceApplicationDb = "CUST-ORDER" or SourceApplicationDb = "CRO" or SourceApplicationDb = "WORK-ORDER")];
   execute {
      if [SourceApplicationDb = "SHOP-ORDER"] {
         call GetShopOrd(SourceRef1, SourceRef2, SourceRef3) into ShopOrdValues;
         if [ShopOrdValues.OrderCode = "A" or ShopOrdValues.OrderCode = "B" or(ShopOrdValues.OrderCode = "F" and ShopOrdValues.MroVisitId != null or(ShopOrdValues.CroNo != null and ShopOrdValues.DispoOrderNo != null))] {
            navigate "page/ShopOrder/Form?$filter=OrderNo eq $[SourceRef1] and ReleaseNo eq $[SourceRef2] and SequenceNo eq $[SourceRef3]";
         }
         else {
            if [ShopOrdValues.OrderCode = "D"] {
               navigate "page/DispositionShopOrder/Tree?$filter=OrderNo eq $[SourceRef1] and ReleaseNo eq $[SourceRef2] and SequenceNo eq $[SourceRef3]";
            }
            else {
               navigate "page/ShopOrder/Form?$filter=OrderNo eq $[SourceRef1] and ReleaseNo eq $[SourceRef2] and SequenceNo eq $[SourceRef3]";
            }
         }
      }
      if [SourceApplicationDb = "PROD-SCH"] {
         navigate "page/ProductionReceipts/List?$filter=ProductionReceiptId eq $[SourceRef1]";
      }
      if [SourceApplicationDb = "PUR-ORDER"] {
         navigate "page/PurchaseOrder/Form?$filter=OrderNo eq $[SourceRef1]";
      }
      if [SourceApplicationDb = "CUST-ORDER"] {
         navigate "page/CustomerOrder/Form?$filter=OrderNo eq $[SourceRef1]";
      }
      if [SourceApplicationDb = "CRO"] {
         navigate "page/ComponentRepairOrder/Form?$filter=CroNo eq $[SourceRef1]";
      }
      if [SourceApplicationDb = "WORK-ORDER"] {
         call IsActiveWo(SourceRef1) into ActiveWoVar;
         if [ActiveWoVar = "TRUE"] {
            navigate "page/frmWorkOrderPrepareTab/Form?$filter=WoNo eq $[SourceRef1]";
         }
         else {
            navigate "page/HistoricalWorkOrder/Form?$filter=WoNo eq $[SourceRef1]";
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector InventoryTransactionHistSelector for InventoryTransactionHist {
   label = "${PartNo} - ${PartDescription} - ${Contract} - ${LotBatchNo} - ${SerialNo} - ${WaivDevRejNo}";
   selectionchanged command GenerateTreeCommand;
   static PartNo;
   static PartDescription;
   static Contract;
   static LotBatchNo;
   static SerialNo;
   static WaivDevRejNo;
}

@Override
selector InventoryPartTracingSelector for InventoryPartTracingHeader {
   label = "${PartNo} - ${PartNoRef.Description} - ${Contract} - ${LotBatchNo} - ${SerialNo} - ${WaivDevRejNo}";
   static TreeId {
      visible = [false];
   }
   static NodeId {
      visible = [false];
   }
   static PartNo;
   static PartNoRef.Description;
   static Contract;
   static LotBatchNo;
   static SerialNo;
   static WaivDevRejNo;
}

---------------------------------- GROUPS -----------------------------------
group InventoryTransactionHistGroup for InventoryTransactionHist {
   label = "";
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      preview = InventoryPartLovCard;
      description = PartDescription;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeDescription;
   }
}

group InventoryPartTracingGroup for InventoryPartTracingHeader {
   label = "";
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      preview = InventoryPartLovCard;
      description = PartNoRef.Description;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeDescription;
   }
}

----------------------------------- LISTS -----------------------------------
list InventoryTransactionTracingList for InventoryTransactionTracing {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      preview = InventoryPartLovCard;
      description = PartNoRef.Description;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeDescription;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRef4 {
      size = Small;
   }
   field Direction {
      size = Small;
   }
   field Quantity;
   field PartNoRef.UnitMeas {
      size = Small;
   }
   field CatchDirection {
      size = Small;
   }
   field CatchQuantity;
   field CatchUom {
      size = Small;
   }
   lov LocationNoRef with ReferenceInventoryLocation19Selector {
      size = Small;
   }
   field LocationNoRef.Warehouse {
      size = Small;
   }
   field TransactionId {
      size = Small;
   }
   lov TransactionCodeRef with ReferenceInventoryTransactionCodeLovSelector {
      description = TransactionCodeRef.Transaction;
   }
   field PartSerialCatalogRef.SuperiorPartNo {
      size = Small;
      columnvisible = [false];
      label = "Superior Part No";
   }
   field PartSerialCatalogRef.SuperiorSerialNo {
      size = Small;
      columnvisible = [false];
      label = "Superior Serial No";
   }
   field DateCreated;
   field DateTimeCreated;
   field Userid {
      size = Small;
   }
   field OwnerID {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   field OwnerName {
      size = Small;
   }
   fieldranking ContractRef, PartNo, ConfigurationId, Direction, Quantity, CatchDirection, TransactionId, TransactionCodeRef, DateCreated, DateTimeCreated;

   commandgroup QcAnalysisCmdGroup {
      command QualityControlAnalysisResultCommand;
   }
   commandgroup NavigationsCmdGroup {
      command InventoryTransactionHistoryCommand;
      command LotBatchMasterCommand;
      command PartSerialCommand;
      command ViewSourceCommand;
   }
}
list InventoryPartTracingList for InventoryPartTracingDetail {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field NodeLevel;
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      preview = InventoryPartLovCard;
      description = PartNoRef.Description;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeDescription;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRef4 {
      size = Small;
   }
   field Direction {
      size = Small;
   }
   field Quantity;
   field PartNoRef.UnitMeas {
      size = Small;
   }
   field CatchDirection {
      size = Small;
   }
   field CatchQuantity;
   field CatchUom {
      size = Small;
   }
   lov LocationNoRef with ReferenceInventoryLocation19Selector {
      size = Small;
   }
   field LocationNoRef.Warehouse {
      size = Small;
   }
   field TransactionId {
      size = Small;
   }
   lov TransactionCodeRef with ReferenceInventoryTransactionCodeLovSelector {
      description = TransactionCodeRef.Transaction;
   }
   field PartSerialCatalogRef.SuperiorPartNo {
      size = Small;
      columnvisible = [false];
      label = "Superior Part No";
   }
   field PartSerialCatalogRef.SuperiorSerialNo {
      size = Small;
      columnvisible = [false];
      label = "Superior Serial No";
   }
   field DateCreated;
   field DateTimeCreated;
   field Userid {
      size = Small;
   }
   field OwnerID {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   field OwnerName {
      size = Small;
   }
   fieldranking ContractRef, PartNo, ConfigurationId, Direction, Quantity, CatchDirection, TransactionId, TransactionCodeRef, DateCreated, DateTimeCreated;

   commandgroup QcAnalysisCmdGroup {
      command QualityControlAnalysisResultCommand;
   }
   commandgroup NavigationsCmdGroup {
      command InventoryTransactionHistoryCommand;
      command LotBatchMasterCommand;
      command PartSerialCommand;
      command ViewSourceCommand;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryTransactionHistSet for InventoryTransactionHist;
entityset InventoryPartTracingHeaderSet for InventoryPartTracingHeader;
entityset InventoryPartTracingDetailSet for InventoryPartTracingDetail;

------------------------------ ENTITY DETAILS -------------------------------
@Override
query InventoryTransactionHist {
   from = "inventory_trans_origin_tracing";
   lu = InventoryTransactionHist;
   keys = Contract, PartNo, SerialNo, LotBatchNo, WaivDevRejNo;
   attribute Contract Text;
   attribute PartNo Text {
      maxlength = 100;
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT,PART_NO)";
   }
   attribute SerialNo Text;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
   }
   attribute ConditionCode Text {
      format = uppercase;
   }
   attribute TreeId Number {
      fetch = "Inventory_Part_Tracing_API.Get_Tree_Id(CONTRACT, PART_NO, SERIAL_NO, LOT_BATCH_NO, WAIV_DEV_REJ_NO)";
      insertable = [false];
      updatable = [false];
   }
   attribute NodeId Number {
      fetch = "0";
   }
   attribute AnalysisExist Boolean("TRUE", "FALSE") {
      fetch = "Inventory_Part_Tracing_API.Analysis_Exist(PART_NO, LOT_BATCH_NO, CONTRACT)";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
}

@Override
entity InventoryPartTracingHeader using InventoryPartTracing {
   where = "TRANSACTION_ID = PARENT_TRANSACTION_ID";
   crud = Read;
   from = "invent_part_tracing_detail";
   keys = TreeId, NodeId {
      where = "TREE_ID = :TreeId AND NODE_ID = :NodeId";
   }
   crud = Read;
   use attributes = ParentNodeId, TransactionId;
   attribute Contract Text {
      label = "Site";
   }
   attribute PartNo Text;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute SerialNo Text;
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
   }
   attribute ConditionCode Text {
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE)";
   }
   attribute SourceRef1 Text {
      label = "Order No";
   }
   attribute SourceRef2 Text {
      label = "Release No";
   }
   attribute SourceRef3 Text {
      label = "Sequence No";
   }
   attribute SourceRef4 Text {
      label = "Line Item No";
   }
   attribute SourceRef Text {
      fetch = "DECODE(source_ref1, NULL, NULL, source_ref1||':'||source_ref2||':'||source_ref3||' - ')";
   }
   attribute SourceApplication Text;
   attribute SourceApplicationDb Text {
      fetch = "source_application_db";
      label = "Source Application";
      maxlength = 20;
      editable = [false];
   }
   attribute AnalysisExist Boolean("TRUE", "FALSE") {
      fetch = "Inventory_Part_Tracing_API.Analysis_Exist(PART_NO, LOT_BATCH_NO, CONTRACT)";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }

   array InventoryTransactionTracingArray(SourceApplicationDb, LotBatchNo, SerialNo, WaivDevRejNo, PartNo, Contract) to InventoryTransactionTracing(SourceApplicationDb, LotBatchNo, SerialNo, WaivDevRejNo, PartNo, Contract) {
      where = "((:child.SourceApplicationDb = 'SHOP-ORDER' AND (:child.SourceRef1 = :parent.SourceRef1 AND :child.SourceRef2 = :parent.SourceRef2 AND :child.SourceRef3 = :parent.SourceRef3 ))
                OR (:child.SourceApplicationDb != 'SHOP-ORDER' AND :child.SourceRef1 =:parent.SourceRef1)
                OR :child.SourceRef1 IS NULL)";
   }
   array InventoryPartTracingArray(TreeId) to InventoryPartTracingDetail(TreeId);
}

@Override
entity InventoryPartTracingDetail using InventoryPartTracing {
   crud = Read;
   from = "invent_part_tracing_detail";
   keys = TreeId, NodeId, TransactionId {
      where = "TREE_ID = :TreeId AND NODE_ID = :NodeId AND TRANSACTION_ID = :TransactionId";
   }
   crud = Read;
   use attributes = ParentNodeId;
   attribute Contract Text {
      label = "Site";
   }
   attribute ParentTransactionId Number;

   attribute PartNo Text;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute SerialNo Text;
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
   }
   attribute ConditionCode Text {
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE)";
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
   }
   attribute SourceRef1 Text {
      label = "Order No";
   }
   attribute SourceRef2 Text {
      label = "Release No";
   }
   attribute SourceRef3 Text {
      label = "Sequence No";
   }
   attribute SourceRef4 Text {
      label = "Line Item No";
   }
   attribute SourceRef Text {
      fetch = "DECODE(source_ref1, NULL, NULL, source_ref1||':'||source_ref2||':'||source_ref3||' - ')";
   }
   attribute Direction Text {
      maxlength = 100;
      required = [true];
   }
   attribute Quantity Number;
   attribute CatchDirection Text {
      maxlength = 100;
      required = [true];
   }
   attribute CatchQuantity Number {
      label = "Catch Qty";
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 2000;
   }
   attribute LocationNo Text;
   attribute TransactionId Number {
      label = "Transaction ID";
   }
   attribute TransactionCode Text;
   attribute DateCreated Date {
      label = "Created";
      required = [true];
   }
   attribute DateTimeCreated Time {
      label = "Creation Time";
   }
   attribute Userid Text {
      label = "Performed by";
   }
   attribute OwnerID Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner ID";
      maxlength = 100;
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute SourceApplication Text;
   attribute SourceApplicationDb Text {
      fetch = "source_application_db";
      label = "Source Application";
      maxlength = 20;
      editable = [false];
   }
   attribute ParentNodeId Number;
   attribute NodeLevel Number {
      label = "Level";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference PartSerialCatalogRef(PartNo, SerialNo) to PartSerialCatalog(PartNo, SerialNo);
   reference TransactionCodeRef(TransactionCode) to InventoryTransactionCodeLov(TransactionCode) {
      label = "Transaction Code";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
}

query InventoryTransactionTracing {
   from = "inventory_transaction_tracing";
   lu = InventoryTransactionHist;
   keys = TransactionId;

   attribute TransactionId Number {
      label = "Transaction ID";
   }

   attribute Contract Text {
      label = "Site";
   }
   attribute PartNo Text;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute SerialNo Text;
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
   }
   attribute ConditionCode Text {
      format = uppercase;
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
   }
   attribute SourceRef1 Text {
      label = "Order No";
   }
   attribute SourceRef2 Text {
      label = "Release No";
   }
   attribute SourceRef3 Text {
      label = "Sequence No";
   }
   attribute SourceRef4 Text {
      label = "Line Item No";
   }
   attribute Direction Text {
      maxlength = 100;
      required = [true];
   }
   attribute Quantity Number;
   attribute CatchDirection Text {
      maxlength = 100;
      required = [true];
   }
   attribute CatchQuantity Number {
      label = "Catch Qty";
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 2000;
   }
   attribute LocationNo Text;
   attribute TransactionCode Text;
   attribute DateCreated Date {
      label = "Created";
      required = [true];
   }
   attribute DateTimeCreated Time {
      label = "Creation Time";
   }
   attribute Userid Text {
      label = "Performed by";
   }
   attribute OwnerID Text {
      fetch = "DECODE(owning_customer_no,null,owning_vendor_no,owning_customer_no)";
      label = "Owner ID";
      maxlength = 100;
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(owning_customer_no,null,Supplier_API.Get_Vendor_Name(owning_vendor_no), Cust_Ord_Customer_API.Get_Name(owning_customer_no))";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute SourceApplication Text;
   attribute SourceApplicationDb Text {
      fetch = "source_application_db";
      label = "Source Application";
      maxlength = 20;
      editable = [false];
   }
   attribute PartTracingDb Text;
   @DynamicComponentDependency QUAMAN
   attribute AnalysisExist Boolean("TRUE", "FALSE") {
      fetch = "Inventory_Analysis_API.Is_Analysis_Exist(PART_NO, LOT_BATCH_NO, CONTRACT)";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference PartSerialCatalogRef(PartNo, SerialNo) to PartSerialCatalog(PartNo, SerialNo);
   reference TransactionCodeRef(TransactionCode) to InventoryTransactionCodeLov(TransactionCode) {
      label = "Transaction Code";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function FetchDetailNodeLevelOne List < Entity(InventoryPartTracingHeader) > {
   basedon InventoryPartTracingHeaderSet;
   parameter TreeId Number;
   from = "invent_part_tracing_detail";
   where = "tree_id = :TreeId
            AND node_level = 1";
}
function FetchDetailNodes List < Entity(InventoryPartTracingHeader) > {
   basedon InventoryPartTracingHeaderSet;
   parameter TreeId Number;
   parameter NodeId Number;
   from = "invent_part_tracing_detail";
   where = "tree_id = :TreeId
          AND   parent_node_id = :NodeId";
}
function FetchNodesList List < Entity(InventoryPartTracingDetail) > {
   basedon InventoryPartTracingDetailSet;
   parameter TreeId Number;
   from = "invent_part_tracing_detail";
   where = "tree_id = :TreeId";
}
function GetShopOrd Structure(ShopOrdValuesStructure) {
   parameter OrderNo Text;
   parameter ReleaseNo Text;
   parameter SequenceNo Text;
}
function IsActiveWo Text {
   parameter OrderNo Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ShopOrdValuesStructure {
   attribute OrderCode Text;
   attribute MroVisitId Text;
   attribute CroNo Text;
   attribute DispoOrderNo Text;
}
