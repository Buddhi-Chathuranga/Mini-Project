-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-05-15  DaZase  SCUXXW4-19657, Added initialcheck to all unbounded actions.
-- 2019-02-19  STHOSE  SCUXXW4-6294, Converted from frmInvPartStorageRequirements using MTG Version: 1.34
-- 2018-10-31  SAGELK  SCUXXW4-6289, Converted from frmInvPartStorageCapability using MTG Version: 1.32
--------------------------------------------------------------------------------------
projection InventoryPartStorageRequirementsHandling;
component INVENT;
layer Core;
description "Use this API to enter storage requirements for an inventory part";
category Users;
include fragment CompanyHavingSiteSelector;
include fragment InventoryPartLov18Selector;
//Define Storage Volume
include fragment DefineStorageVolumeRequirement;
include fragment WhStorageVolumeLovSelector;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartSet for InventoryPart;
entityset CapacitiesAndConditionsVirtualSet for CapacitiesAndConditionsVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPart {
   crud = Read;
   supportwarnings = [true];

   attribute Contract Text {
      fetch = "contract";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
   }
   attribute StorageWidthRequirement Number {
      label = "Width";
   }
   attribute WidthOperateValue Text {
      fetch = "Inventory_Part_API.Get_Storage_Width_Requirement(contract, part_no)";
      label = "Width Operate Value";
      maxlength = 200;
      editable = [false];
   }
   attribute WidthOperateSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Width_Req_Source(contract, part_no)";
      label = "Width Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute WidthUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "Width UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute StorageHeightRequirement Number {
      label = "Height";
   }
   attribute HeightOperateValue Text {
      fetch = "Inventory_Part_API.Get_Storage_Height_Requirement(contract, part_no)";
      label = "Height Operate Value";
      maxlength = 200;
      editable = [false];
   }
   attribute HeightOperateSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Height_Req_Source(contract, part_no)";
      label = "Height Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute HeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "Height UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute StorageDepthRequirement Number {
      label = "Depth";
   }
   attribute DepthOperateValue Text {
      fetch = "Inventory_Part_API.Get_Storage_Depth_Requirement(contract, part_no)";
      label = "Depth Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute DepthOperateSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Depth_Req_Source(contract, part_no)";
      label = "Depth Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute DepthUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(contract))";
      label = "Depth UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute StorageVolumeRequirement Number {
      fetch = "1/storage_volume_requirement";
      label = "Qty Per Volume";
      editable = [false];
   }
   attribute QtyPerVolumeOperateValue Number {
      fetch = "Inventory_Part_API.Get_Storage_Volume_Req_Oper_Cl(contract, part_no)";
      label = "Qty Per Volume Operate Value";
      editable = [false];
   }
   attribute QtyPerVolumeOperateSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Volume_Req_Source(contract, part_no)";
      label = "Qty Per Volume Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(contract)";
      label = "Volume UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute StorageWeightRequirement Number {
      label = "Weight";
   }
   attribute WeightOperateValue Text {
      fetch = "Inventory_Part_API.Get_Storage_Weight_Requirement(contract, part_no)";
      label = "Weight Operate Value";
      maxlength = 200;
      editable = [false];
   }
   attribute WeightOperateSource Text {
      fetch = "Inventory_Part_API.Get_Storage_Weight_Req_Source(contract, part_no)";
      label = "Weight Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(contract))";
      label = "Weight UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute MinStorageTemperature Number {
      label = "Min Temperature";
   }
   attribute MinTemperatureOperateValue Text {
      fetch = "Inventory_Part_API.Get_Min_Storage_Temperature(contract, part_no)";
      label = "Min Temperature Operate Value";
      maxlength = 200;
      editable = [false];
   }
   attribute MinTemperatureOperateSource Text {
      fetch = "Inventory_Part_API.Get_Min_Storage_Temp_Source(contract, part_no)";
      label = "Min Temperature Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute MinTemperatureUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(contract))";
      label = "Min Temperature UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute MaxStorageTemperature Number {
      label = "Max Temperature";
   }
   attribute MaxTemperatureOperateValue Text {
      fetch = "Inventory_Part_API.Get_Max_Storage_Temperature(contract, part_no)";
      label = "Max Temperature Operate Value";
      maxlength = 200;
      // searchable = false;
      editable = [false];
   }
   attribute MaxTemperatureOperateSource Text {
      fetch = "Inventory_Part_API.Get_Max_Storage_Temp_Source(contract, part_no)";
      label = "Max Temperature Operate Source";
      maxlength = 200;
      // searchable = false;
      editable = [false];
   }
   attribute MaxTemperatureUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(contract))";
      label = "Max Temperature UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute MinStorageHumidity Number {
      label = "Min Humidity";
   }
   attribute MinHumidityOperateValue Text {
      fetch = "Inventory_Part_API.Get_Min_Storage_Humidity(contract, part_no)";
      label = "Min Humidity Operate Value";
      maxlength = 200;
      editable = [false];
   }
   attribute MinHumidityOperateSource Text {
      fetch = "Inventory_Part_API.Get_Min_Storage_Humid_Source(contract, part_no)";
      label = "Min Humidity Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute MinHumidityUom Text {
      fetch = "'%'";
      label = "Min Humidity UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute MaxStorageHumidity Number {
      label = "Max Humidity";
   }
   attribute MaxHumidityOperateValue Text {
      fetch = "Inventory_Part_API.Get_Max_Storage_Humidity(contract, part_no)";
      label = "Max Humidity Operate Value";
      maxlength = 200;
      editable = [false];
   }
   attribute MaxHumidityOperateSource Text {
      fetch = "Inventory_Part_API.Get_Max_Storage_Humid_Source(contract, part_no)";
      label = "Max Humidity Operate Source";
      maxlength = 200;
      editable = [false];
   }
   attribute MaxHumidityUom Text {
      fetch = "'%'";
      label = "Max Humidity UoM";
      maxlength = 30;
      // searchable = false;
      editable = [false];
   }
   reference PartNoRef(PartNo, Contract) to InventoryPartLov18(PartNo, Contract) {
      label = "Part";
   }

   array InvPartStorageCapabilityArray(Contract, PartNo) to InventoryPartCapability(Contract, PartNo);
   array InvPartCapabilityOperativeArray(Contract, PartNo) to InventoryPartCapabilityQuery(Contract, PartNo);
   array InvPartStorageArray(Contract, PartNo) to InventoryPart(Contract, PartNo);
}
@Override
entity InventoryPartCapability {
   ludependencies = InventoryPartCapability;
   crud = Create, Read, Delete;
   from = "inventory_part_capability";
   exec = "INVENTORY_PART_CAPABILITY_API";
   keys = Contract, PartNo, StorageCapabilityId {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and STORAGE_CAPABILITY_ID = :StorageCapabilityId";
   }
   exclude attributes = Removed;
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
   }
   attribute StorageCapabilityId Text {
      fetch = "storage_capability_id";
      label = "Storage Capability ID";
      maxlength = 30;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute RemovedDb Boolean("TRUE", "FALSE") {
      fetch = "removed_db";
      label = "Removed";
      editable = [false];
   }
   reference StorageCapabilityRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability ID";
   }
}

@Override
query InventoryPartCapabilityQuery {
   ludependencies = InventoryPartCapability;

   from = "inventory_part_oper_cap_uiv";
   lu = InventoryPartCapability;
   keys = Contract, PartNo, StorageCapabilityId {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and STORAGE_CAPABILITY_ID = :StorageCapabilityId";
   }

   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute StorageCapabilityId Text {
      fetch = "storage_capability_id";
      label = "Storage Capability ID";
      maxlength = 30;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Source Text {
      fetch = "source";
      label = "Source";
      maxlength = 200;
      required = [true];
      editable = [false];
   }
   reference StorageCapabilityRef(StorageCapabilityId) to StorageCapability(StorageCapabilityId) {
      label = "Storage Capability ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action CreateRemoveCapability {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter PartNo Text;
   parameter StorageCapabilityId Text;
   ludependencies = InventoryPartCapability;
}

--------------------------------- FUNCTIONS ---------------------------------
function ActiveStorageCapability List<Entity(StorageCapability)> {
   where = "OBJSTATE = 'Active'";
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual CapacitiesAndConditionsVirtual {
   attribute Contract Text;
   attribute PartNo Text;
   attribute Width Number;
   attribute Height Number;
   attribute Depth Number;
   attribute Volume Number {
      label = "Qty per Volume";

   }
   attribute Weight Number;
   attribute MinTemperature Number;
   attribute MaxTemperature Number;
   attribute MinHumidity Number;
   attribute MaxHumidity Number;
   attribute LengthUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Length(Site_API.Get_Company(CONTRACT))";
      editable = [false];
   }
   attribute VolumeUom Text {
      fetch = "Site_Invent_Info_API.Get_Volume_Uom(CONTRACT)";
      editable = [false];
   }
   attribute WeightUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Weight(Site_API.Get_Company(CONTRACT))";
      editable = [false];
   }
   attribute TemperatureUom Text {
      fetch = "Company_Invent_Info_API.Get_Uom_For_Temperature(Site_API.Get_Company(CONTRACT))";
      editable = [false];
   }
   attribute HumidityUom Text {
      fetch = "'%'";
      editable = [false];
   }
   action SaveCapacityAndConditions {
      ludependencies = InventoryPart;
   }
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------
