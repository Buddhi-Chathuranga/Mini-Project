-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-03-19  JaThlk  SCXTEND-4039, Added the virtual, ConnectPartsToAssortmentNodesVirtual as data source for the command.
-- 2019-04-25  DaZase  SCUXXW4-19613, Added initialcheck to all unbounded actions.
-- 2019-04-25  AwWelk  SCUXXW4-18405, Added the function where clause to AssortmentNodeListArray.
-- 2018-10-19  DaZase  Moved both assistants to this fragment.
-- 2018-10-09  DaZase  SCUXXW4-5354, Converted from dlgConnectPartsByAssortQuery using MTG Version: 1.30
-- 2018-09-24  DaZase  SCUXXW4-5369, Converted from dlgConnectPartsToAssortmentNodes using MTG Version: 1.29
-----------------------------------------------------------------------------
fragment ConnectPartsToAssortmentNodesAssistant;
component INVENT;
layer Core;
description "This activity is used to connect the selected parts to multiple assortments in one go.";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant ConnectPartsToAssortmentNodes using ConnectPartsToAssortmentNodesSet {
   label = "Connect Parts to Assortment Nodes";
   input(PartsList);
   // Tried to change this to a singelstep assistant but then the error handling on ok/finish command left the assistant
   // instead of stay on the assistant, plus Ok button was lit while creating lines.
   steps {
      step {
         group ConnectPartsToAssortmentNodesGroup;
         list AssortmentNodesList(AssortmentNodesArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [true];
      execute {
         call ConnectPartsAssortNodes(Objkey, PartsList) {
            when FAIL {
               if [not(error.Message = null)] {
                  error("${error.Message}");
               }
               // CANCEL so we will stay in this assistant and it will have the same values as before
               exit CANCEL;
            }
            when SUCCESS {
               exit OK;
            }
         }
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }

}

assistant PartsByAssortments for PartsByAssortmentsStructure {
   label = "Parts by Assortments";
   input(AssortmentIdDummy);
   output(SelectionList);
   // TODO: retry to create this a singelstep assistant when component...List.SelectionCount is fixed
   steps {
      step {
         list PartsByAssortmentsList using AssortmentNodeListArray(AssortmentIdDummy);
      }
      final step {

      }
      cancelled step {
      }
   }
   finish command {

      //enabled = [true];
      // TODO: this component.PartsByAssortmentsList.SelectionCount gives errors now when this assistant is
      // opened and stops you from working with it since no Ok/Cancel buttons are visible. If i used enablabed true it works
      // and dont give any errors,  but then Ok is lit even when no lines have been selected which is not what we want here.
      enabled = [component.PartsByAssortmentsList.SelectionCount > 0];
      execute {
         call PackSelectedAssortmList(component.PartsByAssortmentsList.Selection) into SelectionList;
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

command PartsByAssortmentsCommand for ConnectPartsToAssortmentNodesVirtual {
   label = "Parts by Assortments";
   visible = [true];
   mode = Global;
   variable SelectionListStr {
      type = Text;
   }
   variable AssortmentIdDummy;

   execute {

      assistant PartsByAssortments(AssortmentIdDummy) into(SelectionListStr) {
         when OK {
            if [SelectionListStr = null] {
               exit;
            }
            call AddAssortments(Objkey, SelectionListStr);
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }


}
--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group ConnectPartsToAssortmentNodesGroup for ConnectPartsToAssortmentNodesVirtual {
   visible = [false];
   field PartsList;
   // Ifs.Fnd.ApplicationForms.cCommandButton 'cCommandButtonDuplicate' is skipped from being processed. Please check and do the needful.
}

----------------------------------- LISTS -----------------------------------

list AssortmentNodesList for AssortmentNodeVirtual {
   label = "";
   editmode = MultiRowEdit;

   field AssortmentIdRef;

   field AssortmentStructureRef.Objstate {
      size = Small;
      label = "Assortment Status";
   }
   lov AssortmentNodeIdRef with ReferenceAssortmentNodeSelector using GetAssortmentNodes(AssortmentId) {
      //size = Small;
      validate command {
         execute {
            call GetDescription(AssortmentId, AssortmentNodeId) into Description;
         }
      }
   }
   field Description;
   field AssortmentNodeRef.ParentNode {
      //size = Small;
      label = "Parent Node";
   }
   commandgroup CommandGroupCmdGroup {

      command PartsByAssortmentsCommand;
   }
   // fieldranking AssortmentIdRef, AssortmentStructureRef.State, AssortmentNodeIdRef, Description, AssortmentNodeRef.ParentNode;
}


list PartsByAssortmentsList for AssortmentNodeQuery {
   label = "";
   field PartNo;
   field Description;
   field AssortmentId;
   field ParentNode;
   field AssortmentStatus {
      size = Small;
      label = "Assortment Status";
   }
   // the reference dont work now when its a query
   /*
   field AssortmentStructureRef.Objstate {
      size = Small;
      label = "Assortment Status";
   }*/
   /*field AssortmentStructureRef.State {
      size = Small;
      label = "Assortment Status";
   }*/
   // fieldranking PartNo, Description, AssortmentId, ParentNode, AssortmentStructureRef.Objstate;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ConnectPartsToAssortmentNodesSet for ConnectPartsToAssortmentNodesVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query AssortmentNodeQuery {
   from = "assortment_node";
   lu = AssortmentNode;
   keys = PartNo, AssortmentId, ParentNode;
   //where = "PART_NO IS NOT NULL";

   attribute PartNo Text {
      maxlength = 100;
      editable = [false];
   }
   attribute Description Text {
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute AssortmentId Text {
      label = "Assortment ID";
      maxlength = 100;
      editable = [false];
   }
   attribute ParentNode Text {
      maxlength = 100;
      editable = [false];
   }
   attribute AssortmentStatus Text {
      fetch = "Assortment_Structure_API.Get_State(ASSORTMENT_ID)";
      editable = [false];
   }
   // the reference dont work now when its a query
   //reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId);
}

---------------------------------- ACTIONS ----------------------------------
action ConnectPartsAssortNodes {
   initialcheck none;
   parameter Objkey Text;
   parameter PartsList Text;
}

action AddAssortments {
   initialcheck none;
   ludependencies = AssortmentNodeVirtual;
   parameter Objkey Text;
   parameter SelectionList Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetDescription Text {
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
}

function GetAssortmentNodes List < Entity(AssortmentNode) > {
   parameter AssortmentId Text;
   where = "ASSORTMENT_ID = :AssortmentId AND PART_NO IS NULL";
}

function PackSelectedAssortmList Text {
   parameter FullSelection Text;
}

// AssortmentId param is a dummy and not used here, but is necessary since Entity arrays requires a key sent in to them
function AssortmentNodeListArray List < Entity(AssortmentNodeQuery) > {
   parameter AssortmentId Text;
   where = "PART_NO IS NOT NULL";

}
-------------------------------- STRUCTURES ---------------------------------
structure PartsByAssortmentsStructure {
   // AssortmentId is more or less a dummy here
   attribute AssortmentId Text;
   // SelectionList is used an out parameter for Assistant
   attribute SelectionList Text;
}

--------------------------------- VIRTUALS ----------------------------------
// Connect Parts To Assortment Nodes Assistant
virtual ConnectPartsToAssortmentNodesVirtual {
   attribute PartsList Text;
   array AssortmentNodesArray() to AssortmentNodeVirtual();
}

virtual AssortmentNodeVirtual {
   crud = Create, Read, Update, Delete;
   attribute AssortmentId Text {
      label = "Assortment ID";
   }
   attribute AssortmentNodeId Text {
      maxlength = 100;
   }
   attribute Description Text {
      fetch = "Assortment_Node_API.Get_Description(assortment_id, assortment_node_id)";
      maxlength = 100;
      editable = [false];
   }
   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId);
   reference AssortmentNodeRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId);
   reference AssortmentIdRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment ID";
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node ID";
   }
}
