-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2019-04-25  DaZase  SCUXXW4-19620, Added custom initialcheck to action GetResultKeyList.
-- 2018-05-31  DaZase  SCUXXW4-7060, Converted from tbwOverviewCountReports using MTG Version: 1.20
-----------------------------------------------------------------------------
projection CountReportsAnalysis;
component INVENT;
layer Core;
description "Use this API to view all counting reports created for user-connected sites along with the report creation criteria and the creation details. It is possible to open the Count per Count Report, Count Result per Count Report and Count Results windows using the commands provided.";
category Users;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CountingReports for CountingReport;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CountingReport {
   crud = Read;
   attribute CycleCode Enumeration(CyclicCounting) {
      editable = [false];
   }
   attribute IncludeAllQty Enumeration(GenYesNo) {
      fetch = "INCLUDE_ALL_QTY_DB";
      label = "Include All Qty";
      editable = [false];
   }
   attribute FreezeCode Enumeration(InventoryPartFreezeCode) {
      fetch = "FREEZE_CODE_DB";
      label = "Freeze code";
      editable = [false];
   }
   attribute SecondCommodity Text {
      label = "Commodity Group 2";
      format = uppercase;
   }
   attribute ExcludeCompanyOwned Enumeration(CountPartOwnership) {
      fetch = "EXCLUDE_COMPANY_OWNED_DB";
      label = "Exclude Company Owned";
      editable = [false];
   }
   attribute ExcludeConsignment Enumeration(CountPartOwnership) {
      fetch = "EXCLUDE_CONSIGNMENT_DB";
      label = "Exclude Consignment";
      editable = [false];
   }
   attribute ExcludeCustomerOwned Enumeration(CountPartOwnership) {
      fetch = "EXCLUDE_CUSTOMER_OWNED_DB";
      label = "Exclude Customer Owned";
      editable = [false];
   }
   attribute ExcludeSupplierLoaned Enumeration(CountPartOwnership) {
      fetch = "EXCLUDE_SUPPLIER_LOANED_DB";
      label = "Exclude Supplier Loaned";
      editable = [false];
   }
   attribute ExcludeRotablePool Enumeration(CountRotablePart) {
      fetch = "EXCLUDE_ROTABLE_POOL_DB";
      label = "Exclude Rotable Pool";
      editable = [false];
   }
   attribute ExcludeFaRotablePool Enumeration(CountRotablePart) {
      fetch = "EXCLUDE_FA_ROTABLE_POOL_DB";
      label = "Exclude Fa Rotable Pool";
      editable = [false];
   }
   attribute ExcludeStandardInventory Enumeration(GenYesNo) {
      fetch = "EXCLUDE_STANDARD_INVENTORY_DB";
      label = "Exclude Standard Inventory";
      editable = [false];
   }
   attribute ExcludeAttachedToHu Enumeration(GenYesNo) {
      fetch = "exclude_attached_to_hu_db";
      label = "Exclude Attached To HandlingUnit";
      editable = [false];
   }
   attribute ExcludeNotAttachedToHu Enumeration(GenYesNo) {
      fetch = "exclude_not_attached_to_hu_db";
      label = "Exclude Not Attached to Handling Unit";
      editable = [false];
   }
   attribute ExcludeSupplierRented Enumeration(CountPartOwnership) {
      fetch = "EXCLUDE_SUPPLIER_RENTED_DB";
      label = "Exclude Supplier Rented";
      editable = [false];
   }
   attribute ExcludeCompRentalAsset Enumeration(CountPartOwnership) {
      fetch = "EXCLUDE_COMP_RENTAL_ASSET_DB";
      label = "Exclude Company Rental Asset";
      editable = [false];
   }
   attribute ExcludeProjectInventory Enumeration(GenYesNo) {
      fetch = "EXCLUDE_PROJECT_INVENTORY_DB";
      label = "Exclude Project Inventory";
      editable = [false];
   }
   attribute ProjectId Text {
      format = uppercase;
   }
   attribute UnconfirmedLinesExist Boolean("TRUE", "FALSE") {
      fetch = "Counting_Report_Line_API.Check_Unconfirmed_Lines(INV_LIST_NO)";
      label = "Unconfirmed Lines Exist";
      editable = [false];
   }
   attribute RejectedLinesExist Boolean("TRUE", "FALSE") {
      fetch = "Counting_Result_API.Check_Rejected_Report(INV_LIST_NO)";
      label = "Rejected Lines Exist";
      editable = [false];
   }
   attribute DetailReportPrinted Enumeration(GenYesNo) {
      fetch = "DETAIL_REPORT_PRINTED_DB";
      label = "Detailed Report Printed";
      editable = [false];
   }
   attribute AggregatedReportPrintedDb Boolean("Y", "N") {
      fetch = "AGGREGATED_REPORT_PRINTED_DB";
      label = "Aggregated Report Printed";
      editable = [false];
   }
   attribute CreateDate Timestamp {
      label = "Created Date/Time";
      required = [true];
   }
   attribute Userid Text {
      label = "Created By";
      editable = [false];
      format = uppercase;
   }
   attribute CountResultLinesExist Boolean("TRUE", "FALSE") {
      fetch = "Counting_Result_API.Counting_Report_Exist(INV_LIST_NO)";
      label = "Count Result Lines Exist";
      maxlength = 5;
      // searchable = false;
      editable = [false];
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   reference UseridRef(Userid) to FndUser(Identity) {
      label = "Created By";
   }
}


---------------------------------- ACTIONS ----------------------------------
action GetResultKeyList Text {
   initialcheck CountingReportInitialCheck(FullSelection);
   parameter FullSelection Text;
   parameter ReportId Text;
   ludependencies = CountingReport;
}
