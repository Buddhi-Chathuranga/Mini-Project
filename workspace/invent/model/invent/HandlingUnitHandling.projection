----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2020-09-15  DaZase  SC2020R1-7510, Added action ModifyHandingUnitWadaco.
-- 2020-07-28  Aabalk  SCXTEND-4364, Added columns OperativeUnitTareWeight and ManualTareWeight to HandlingUnit entity and renamed label of TareWeight.
-- 2020-03-04  Aabalk  SCXTEND-2300, Added ConnectedPartsExist attribute to HandlingUnit entity to check if a handling unit contains any attached parts.
-- 2020-02-21  ChFolk  SCXTEND-3462, Added reference TopParentHandlingUnitIdRef and modified reference ParentHandlingUnitIdRefhomepage to support lookup for them.
-- 2019-05-06  DaZase  SCUXXW4-19632, Added initialcheck to all unbounded actions. Bound GetHuLabelResultKey and GetHuContentLabelResultKey to HandlingUnit.
-- 2019-04-16  YASMLK  SCUXXW4-18672, Changed fetch statement of SourceRefType in entity HandlingUnit.
-- 2019-02-25  fandse  SCUXXW4-16155, Added PrintHuContentLabelsExist for enabling condition for Print HU Content Label command.
-- 2019-02-14  fandse  SCUXXW4-16155, Removed shipment attribute note needed. Corrected call to Handling_Unit_API.Get_No_Of_Children.
-- 2019-02-13  fandse  SCUXXW4-16155, Added ludependencies to refresh badges for Document Text and Accessories.
-- 2019-02-13  fandse  SCUXXW4-6101, Removed attributes and reference not used from InvPartInStockDetails entity.
-- 2019-02-11  fandse  UXXPERF-27, Performance improvments.
-- 2019-01-25  ChFolk  SCUXXW4-6101, Removed included fragment AddHandlingUnitsAssistant and included new fragment AddToExistingHandlingUnitAssistant
-- 2019-01-23  ChFolk  SCUXXW4-6101, Include fragment CreateNewHandlingUnitAssistant and Removed CreateHandlingUnit and HandlingUnitStructure.
-- 2019-01-09  ChFolk  SCUXXW4-6101, included fragment HandlingUnitTreeViewRepackDialog. Added some attributes to the entity InvPartInStockDetails and AccessoryOnHandlingUnit.
-- 2019-01-03  ChFolk  SCUXXW4-6101, Moved some include fragments to the HandlingUnitsInStockBaseList.
-- 2018-12-31  ChFolk  SCUXXW4-3891, Included fragment UnattachedInventoryPartsInArrivalTab.
-- 2018-12-31  ChFolk  SCUXXW4-6101, Added GetHandlingUnitLabelIds and HandlingUnitStructure to support entering a new Handling Unit.
-- 2018-12-14  fandse  SCUXXW4-7102  Removed fragments already included in the fragment for pre-posting (PrePostingWithoutSourceAssitant).
-- 2018-12-13  ChFolk  SCUXXW4-6101, Include fragments ApplyPackingInstructionAssistant and DocumentText to complete commands
-- 2018-12-13          CreateHuAccordToPackInstructCommand and DocumentTextCommand.
-- 2018-12-08  ChFolk  SCUXXW4-6101, Include ReceiptInventoryLocationArray to support dynamic load of bottom list based on location type.
-- 2018-11-24  ChFolk  SCUXXW4-6101, Converted frmHandlingUnit using MTG Version: 1.33.
----------------------------------------------------------------------------------------------------------
projection HandlingUnitHandling;
component INVENT;
layer Core;
description "Manage HandlingUnit";
category Users;
include fragment HandlingUnitStructureList;
include fragment UnattachedInventoryPartsInStockTab;
@DynamicComponentDependency RCEIPT
include fragment UnattachedInventoryPartsInArrivalTab;

include fragment HandlingUnitLov4Selector;
include fragment HandlingUnitLov5Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation19Selector;
include fragment HandlingUnitExtendedSelector;
include fragment DocumentText;
include fragment ApplyPackingInstructionAssistant;
include fragment HandlingUnitAccessoriesAssistant;
include fragment HandlingUnitTreeViewRepackDialog;
include fragment CreateNewHandlingUnitAssistant;
include fragment AddToExistingHandlingUnitAssistant;
include fragment HandlingUnitExtendedInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset HandlingUnitSet for HandlingUnit;
entityset InventoryPartInStockSet for InvPartInStockDetails;
entityset AccessoryOnHandlingUnitSet for AccessoryOnHandlingUnit;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity HandlingUnit {
   crud = Read, Update, Create, Delete;
   ludependencies = DocumentText, AccessoryOnHandlingUnit, InventoryPartInStock;
   from = "handling_unit_extended";
   exec = "HANDLING_UNIT_API";
   keys = HandlingUnitId {
      where = "HANDLING_UNIT_ID = :HandlingUnitId";
   }
   use attributes = HandlingUnitTypeId, Sscc, AltHandlingUnitLabelId, ParentHandlingUnitId, Contract, LocationNo, LocationType, ShipmentId, Width, Height, Depth, UomForLength, ManualGrossWeight, ManualVolume, SourceRef1, SourceRef2, SourceRef3, NoOfHandlingUnitLabels, NoteId, NoteText;
   attribute HandlingUnitId Number {
      required = [true];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "HANDLING_UNIT_CATEGORY_ID";
      editable = [false];
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "HANDLING_UNIT_TYPE_DESCRIPTION";
      editable = [false];
   }
   attribute HandlingUnitCategoryDescription Text {
      fetch = "HANDLING_UNIT_CATEGORY_DESC";
      editable = [false];
   }
   attribute LocationType Enumeration(InventoryLocationType) {
      fetch = "location_type_db";
      label = "Location Type";
      editable = [false];
   }
   attribute LocationTypeDb Text {
      fetch = "LOCATION_TYPE_DB";
      label = "Location Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute Sscc Text {
      label = "SSCC";
   }
   attribute WarehouseId Text {
      fetch = "WAREHOUSE_ID";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayId Text {
      fetch = "BAY_ID";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowId Text {
      fetch = "ROW_ID";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierId Text {
      fetch = "TIER_ID";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinId Text {
      fetch = "BIN_ID";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "TOP_PARENT_HANDLING_UNIT_ID";
      maxlength = 100;
      editable = [false];
   }
   attribute AccessoryExist Boolean("TRUE", "FALSE") {
      fetch = "ACCESSORY_EXIST";
      label = "Accessories Exist";
      editable = [false];
   }
   attribute Composition Text {
      fetch = "Handling_Unit_API.Get_Composition(HANDLING_UNIT_ID)";
      label = "Composition";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForLength Text {
      label = "Length UoM";
      editable = [ETag != null];
   }
   attribute NetWeight Number {
      fetch = "NET_WEIGHT";
      label = "Net Weight";
      editable = [false];
   }
   attribute ManualTareWeight Number {
      label = "Manual Unit Tare Weight";
   }
   attribute OperativeUnitTareWeight Number {
      editable = [false];
   }
   attribute TareWeight Text {
      label = "Operative Tare Weight";
      editable = [false];
   }
   attribute OperativeGrossWeight Number {
      fetch = "OPERATIVE_GROSS_WEIGHT";
      label = "Operative Gross Weight";
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "UOM_FOR_WEIGHT";
      label = "UoM for Weight";
      maxlength = 30;
      editable = [false];
   }
   attribute OperativeVolume Number {
      fetch = "OPERATIVE_VOLUME";
      label = "Operative Volume";
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "UOM_FOR_VOLUME";
      label = "Volume UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute AdditiveVolumeDb Boolean("TRUE", "FALSE") {
      fetch = "ADDITIVE_VOLUME_DB";
      label = "Additive Volume";
      editable = [false];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      fetch = "GENERATE_SSCC_NO_DB";
      label = "Generate SSCC";
      required = [true];
   }
   attribute PrintLabelDb Boolean("TRUE", "FALSE") {
      fetch = "PRINT_LABEL_DB";
      label = "Print Handling Unit Label";
      required = [true];
   }
   attribute PrintContentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "PRINT_CONTENT_LABEL_DB";
      label = "Print Handling Unit Content Label";
      required = [true];
   }
   attribute MixOfPartNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_PART_NO_BLOCKED_DB";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }
   attribute MixOfCondCodeBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_COND_CODE_BLOCKED_DB";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   attribute MixOfLotBatchBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "MIX_OF_LOT_BATCH_BLOCKED_DB";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   attribute MaxVolumeCapacity Number {
      fetch = "MAX_VOLUME_CAPACITY";
      label = "Max Volume Capacity";
      editable = [false];
   }
   attribute MaxWeightCapacity Number {
      fetch = "MAX_WEIGHT_CAPACITY";
      label = "Max Weight Capacity";
      editable = [false];
   }
   attribute StackableDb Boolean("TRUE", "FALSE") {
      fetch = "STACKABLE_DB";
      label = "Stackable";
      editable = [false];
   }
   attribute IsInStock Boolean("TRUE", "FALSE") {
      fetch = "IS_IN_STOCK";
   }
   attribute SourceRefType Enumeration(HandlUnitSourceRefType) {
      fetch = "SOURCE_REF_TYPE_DB";
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute IsInTransit Boolean("TRUE", "FALSE") {
      fetch = "is_in_transit";
      label = "In Transit";
      editable = [false];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
      required = [true];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "DECODE(note_text, null, 'FALSE', 'TRUE' )";
      label = "Notes";
      editable = [false];
   }
   attribute PrintShipmentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_shipment_label_db";
      label = "Print Handling Unit Shipment Label";
      required = [true];
   }
   attribute NoOfChildren Number {
      fetch = "Handling_Unit_API.Get_No_Of_Children(handling_unit_id)";
   }
   attribute CreateSsccExist Boolean("TRUE", "FALSE") {
      fetch = "Handling_Unit_API.Check_Generate_Sscc_No_Struct(handling_unit_id)";
   }
   attribute PrintHuLabelsExist Boolean("TRUE", "FALSE") {
      fetch = "Handling_Unit_API.Print_Labels_Exist_In_Struct(handling_unit_id)";
   }
   attribute PrintHuContentLabelsExist Boolean("TRUE", "FALSE") {
      fetch = "Handling_Unit_API.Prt_Cnt_Labels_Exist_In_Struct(handling_unit_id)";
   }
   attribute ConnectedPartsExist Boolean {
      fetch = "DECODE(Inventory_Part_In_Stock_API.Check_Handling_Unit_Exist(handling_unit_id), 1, 'TRUE', 'FALSE')";
   }

   array PartInStockNode(HandlingUnitId) to InvPartInStockDetails(HandlingUnitId);
   array HandlingUnitAccessoriesNode(HandlingUnitId) to AccessoryOnHandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitCategoryIdRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
   reference ParentHandlingUnitIdRef(ParentHandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Parent Handling Unit ID";
   }
   reference TopParentHandlingUnitIdRef(TopParentHandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Top Parent Handling Unit ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
   @DynamicComponentDependency SHPMNT
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference UomForLengthRef(UomForLength) to IsoUnit(UnitCode) {
      label = "UoM for Dimensions";
   }
   action GetHuLabelResultKey Text;
   action GetHuContentLabelResultKey Text;

}

@Override
entity InvPartInStockDetails using InventoryPartInStock {
   crud = Read;
   from = "INVENTORY_PART_IN_STOCK_UIV";
   where = "Qty_ONHAND > 0";
   attribute HandlingUnitId Number;
   attribute PartNo  Text;
   attribute PartDescription Text {
      fetch = "INVENTORY_PART_API.Get_Description(contract,part_no)";
      maxlength = 200;
      editable = [false];
   }
   attribute Contract Text;
   attribute ConfigurationId Text;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute SerialNo Text;
   attribute EngChgLevel Text {
      label = "Revision";
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
   }
   attribute ActivitySeq Number;
   attribute QtyOnhand Number;
   attribute QtyReserved Number;
   attribute QtyAvailable Number {
      fetch = "QTY_ONHAND - QTY_RESERVED";
   }
   attribute CatchQtyOnhand Number;
   attribute LocationNo Text {
      label = "Location";
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO)";
   }
   attribute LocationTypeDb Text;
   attribute UoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
   }
   reference PartRef(Contract, PartNo) to InventoryPart(Contract, PartNo)
      {
      label = "Part";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigurationRef(PartNo, ConfigurationId) to ConfigurationSpec(PartNo, ConfigurationId) {
      label = "Configuration";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit";
   }
}

@Override
entity AccessoryOnHandlingUnit {
   crud = Read;
   attribute HandlingUnitId Number {
      editable = [false];
   }
   attribute HandlingUnitAccessoryId Text {
      editable = [false];
   }
   attribute Quantity Number;
   -- Note: needed to add UnitMeas as an attribute instead of using the HandlingUnitAccessoryRef as need to pass the value to the dialog HandlingUnitTreeViewRepack
   -- where the reference is not supported.
   attribute UnitMeas Text {
      fetch = "Handling_Unit_Accessory_API.Get_Unit_Code(handling_unit_accessory_id)";
   }
   reference HandlingUnitAccessoryRef(HandlingUnitAccessoryId) to HandlingUnitAccessory(HandlingUnitAccessoryId) {
      label = "HandlingUnitAccessory";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action ModifyParentHandlingUnit {
   initialcheck DoubleHandlingUnitExtendedInitialCheck(HandlingUnitId, ParentHandlingUnitId);
   supportwarnings = [true];
   ludependencies = HandlingUnit;
   parameter HandlingUnitId Number;
   parameter ParentHandlingUnitId Number;
}
action CopyStructure {
   initialcheck DoubleHandlingUnitExtendedInitialCheck(FromHandlingUnitId, ToHandlingUnitId);
   ludependencies = HandlingUnit;
   supportwarnings = [true];
   parameter FromHandlingUnitId Number;
   parameter ToHandlingUnitId Number;
}

action RemoveHuStructure {
   initialcheck HandlingUnitExtendedInitialCheck(HandlingUnitId);
   parameter HandlingUnitId Number;
   ludependencies = HandlingUnit;
}

action RemoveHandlingUnit {
   initialcheck HandlingUnitExtendedInitialCheck(HandlingUnitId);
   parameter HandlingUnitId Number;
   ludependencies = HandlingUnit;
}

action CreateSsccForHu {
   initialcheck HandlingUnitExtendedInitialCheck(HandlingUnitId);
   parameter HandlingUnitId Number;
   ludependencies = HandlingUnit;
}

action RepackPartInHandlingUnit {
   initialcheck UserAllowedSite(Contract);
   supportwarnings = [true];
   parameter OldHandlingUnitId Number;
   parameter NewHandlingUnitId Number;
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter QtyToMove Number;
   parameter CatchQtyToMove Number;
}

action RepackAccessoryInHandlingUnit {
   initialcheck DoubleHandlingUnitExtendedInitialCheck(OldHandlingUnitId, NewHandlingUnitId);
   supportwarnings = [true];
   parameter OldHandlingUnitId Number;
   parameter NewHandlingUnitId Number;
   parameter HandlingUnitAccessoryId Text;
   parameter QtyToMove Number;
   ludependencies = AccessoryOnHandlingUnit;

}

// Dummy action created for wadaco process DataCaptModifyHndlUnit security
action ModifyHandingUnitWadaco {
   initialcheck none;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetChildHandlingUnits List<Entity(HandlingUnit)> {
   parameter HandlingUnitId Number;
   basedon HandlingUnitSet;
   ludependencies = HandlingUnit;
   where = "parent_handling_unit_id = :HandlingUnitId";
}

function GetHandlingUnitStructure List<Entity(HandlingUnitInStock)> {
   parameter HandlingUnitId Number;
   basedon HandlingUnitInStockSet;
   ludependencies = HandlingUnit;
   where = "handling_unit_id IN (SELECT handling_unit_id
                                 FROM HANDLING_UNIT
                                 CONNECT BY PRIOR handling_unit_id = parent_handling_unit_id
                                 START WITH handling_unit_id = :HandlingUnitId)";
}

function GetDefaultValuesForHuType Structure(HuTypeDetailStructure) {
   parameter HandlingUnitTypeId Text;
}

function GetUnattachedPartInStock List<Entity(UnattachedInventoryPartsInStock)> {
   parameter Contract Text;
   parameter LocationNo Text;
   parameter HandlingUnitId Number;
   parameter HandlingUnitTypeId Text;
   alterattribute ParentHandlingUnitId {
      fetch = ":HandlingUnitId";
   }
   alterattribute ParentHandlingUnitTypeId {
      fetch = ":HandlingUnitTypeId";
   }
   alterattribute ParentContract {
      fetch = ":Contract";
   }
   alterattribute ParentLocationNo {
      fetch = ":LocationNo";
   }
   basedon UnattachedInventoryPartsInStockSet;
   where = "(contract = :Contract OR :Contract IS NULL)
             AND (location_no = :LocationNo OR :LocationNo IS NULL)
             AND HANDLING_UNIT_ID = 0 AND (QTY_ONHAND - QTY_RESERVED) > 0 AND LOCATION_TYPE_DB NOT IN ('ARRIVAL', 'QA')";
}

@DynamicComponentDependency RCEIPT
function GetUnattachedPartInArrival List<Entity(UnattachedReceiptInvLocation)> {
   parameter Contract Text;
   parameter LocationNo Text;
   parameter HandlingUnitId Number;
   parameter HandlingUnitTypeId Text;
   alterattribute ParentHandlingUnitId {
      fetch = ":HandlingUnitId";
   }
   alterattribute ParentHandlingUnitTypeId {
      fetch = ":HandlingUnitTypeId";
   }
   alterattribute ParentContract {
      fetch = ":Contract";
   }
   alterattribute ParentLocationNo {
      fetch = ":LocationNo";
   }
   basedon UnattachedReceiptInvLocationSet;
   where = "(contract = :Contract OR :Contract IS NULL)
            AND   (location_no = :LocationNo OR :LocationNo IS NULL)
            AND   HANDLING_UNIT_ID = 0 AND (QTY_ONHAND - QTY_RESERVED) > 0";
}

-------------------------------- STRUCTURES ---------------------------------
structure HuTypeDetailStructure {
   attribute HandlingUnitCategoryId Text;
   attribute Width Number;
   attribute Height Number;
   attribute Depth Number;
   attribute UomForLength Text;
   attribute UomForVolume Text;
   attribute UomForWeight Text;
   attribute MaxVolumeCapacity Number;
   attribute MaxWeightCapacity Number;
   attribute TareWeight Number;
   attribute AdditiveVolumeDb Boolean;
   attribute StackableDb Boolean;
   attribute GenerateSsccDb Boolean;
   attribute PrintLabelDb Boolean;
   attribute PrintContentLabelDb Boolean;
   attribute PrintShipmentLabelDb Boolean;

}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


