----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-01-13  DigPlk  SC21R2-2885, Replaced IdentifySerialsInLocAssistant with IdentifySerialsInLocRepeatAssistant in
-- 2021-01-13          TransferCompanyOwnedToCompanyRentalAssetCommand.
-- 2021-12-22  GrGalk  SC21R2-6884, Modified the bulknavigate of MoveInventoryPartsCommand to filter the objects only using Objid instead of using all the
-- 2021-12-22          Inventory Part in Stock keys.
-- 2021-12-09  DigPlk  SC21R2-2885, Replaced the functionality of IdentifySerialsInLocAssistant with IdentifySerialsInLocRepeatAssistant.
-- 2021-11-08  SeJalk  SC21R2-5698, Modified GetConnectedObjidsList to action from function.
-- 2021-10-28  SeJalk  SC21R2-5234, Modified NavigatorParamStructure and GetNavigatorParams to set the selection parameter as LongText and changed function to action.
-- 2021-10-21  ErRalk  SC21R2-5226, Modified the enable condition in MoveWithShipmentOrderCommand to differnt types of Site and Remotewarehouse enable conditions.
-- 2021-10-05  ErRalk  SC21R2-2712, Modified RemoteWarehouse attribute to visible as a badge.
-- 2021-09-15  PrRtlk  SC21R2-2759, Added MoveWithShipmentOrderCommand to move inventory parts with shipment order.
-- 2021-01-08  Grgalk  SC2020R1-11768, Changed the label names of ChangeExpirationDateFromInvPartInStockDialog and made field FromExpirationDate uneditable.
-- 2020-08-25  Dijwlk  SC2020R1-9486, Modified InventoryPartInStockList, corrected Description reference of PartNoRef.
-- 2020-03-16  UdGnlk  SCXTEND-3463, Improved performance by replacing references with method calls accordingly.
-- 2020-03-11  RoJalk  SCSPRING20-1930, Modified enable logic in MoveWithTransportTaskCommand and used AvailableQtytoMove.
-- 2020-01-30  SatGlk  SCXTEND-2710, Added longtime format to LastActivityDate, ReceiptDate fields.
-- 2020-03-11  RoJalk  SCSPRING20-1930, Modified enable logic in MoveWithTransportTaskCommand and used AvailableQtytoMove.
-- 2019-12-20  Hadolk  MFSPRING20-77, Added the fields EngRevision, DrawingNo and DrawingRevisionNo and the reference to Part Revision.
-- 2019-07-24  ChFolk  SCUXXW4-22798, Included fragment ProjectDetailsFieldSet and modified project informations to increase performance.
-- 2019-07-16  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2019-07-09  JaThlk  SCUXXW4-22950, Changed the columns order and added get methods to project related attributes for better performance.
-- 2019-07-03  JaThlk  SCUXXW4-17765, Moved the scrap method implementation to ScrapInventoryPartParameterDialog.
-- 2019-06-12  JaThlk  SCUXXW4-21635, Changed the navigate to Handling Units In Stock page to send Handling Unit Id list using search context.
-- 2019-05-31  ChFolk  SCUXXW4-19473, Modified navigation in PackAccordingToPackingInstructionCommand.
-- 2019-05-31  JaThlk  SCUXXW4-21972, Fixed the issue in Query- MRB case by part navigator.
-- 2019-05-27  ChFolk  SCUXXW4-21153, Modified UnattachFromHandlingUnitCommand to use ObjidList as a parameter to the Unatach Handlung Unit Dialog instead of the where clause.
-- 2019-05-14  DaZase  SCUXXW4-19651, Added initialcheck to all unbounded actions.
-- 2019-05-02  fandse  SCUXXW4-17693, Removed Location Details Command, handled via FW list details on each page instead. Changed grouping and naming of command due to this.
-- 2019-04-26  fandse  SCUXXW4-7102, Added correct navigation in the ViewConfigurationCommand.
-- 2019-04-25  fandse  SCUXXW4-17694, Added logic to get default scrap quantity 1 for serials, removed parameter not used in dialog
-- 2019-04-04  milise  SCUXXW4-18022, Replacing of label = "" with showlabel = false
-- 2019-03-31  ChFolk  SCUXXW4-15162, Modified MoveWithTransportTaskCommand to change execute to bulk execute as stringify is only working with it.
-- 2019-03-12  JaThlk  SCUXXW4-17128, Added SessionId as an in parameter in IdentifySerialsInLocationAssistant.
-- 2019-03-07  JaThlk  SCUXXW4-5491, Implemented DefineCostStructureAssistant in TransferCompanyRentalAssetToCompanyOwnedCommand.
-- 2019-02-25  fandse  SCUXXW4-16155, Re-grouping and re-naming to align with Handling Units in Stock, added dynamic depedencies, added navigation to handling unit
-- 2019-01-03  Chfolk  SCUXXW4-7102, Renamed ChangeExpirationDateDialog as ChangeExpirationDateFromInvPartInStockDialog and ChangeExpirationDateStructure as
-- 2018-01-03          ChangeExpirationDateFromInvPartInStockStructure to avoid duplicate names with handling unit in stock.
-- 2018-12-18  ChFolk  SCUXXW4-7102, Moved the entity and list from InventoryPartInStockHandling.projection and InventoryPartinStock.client.
----------------------------------------------------------------------------------------------------------
fragment InventoryPartInStockList;
component INVENT;
layer Core;
description "This fragment contains the entity and list details of Inventory Parts In Stock";

include fragment InventoryPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation19Selector;
include fragment ScrapInventoryPartParameterDialog;
include fragment PrintServiceabilityDialog;
include fragment PrintBarcodeLabelsDialog;
include fragment PrintBarcodeLabelsSingleDialog;
include fragment PackStocksIntoPackingInstructionAssistant;
include fragment AttachPartsToHandlingUnitAssistant;
include fragment IdentifySerialsInLocationAssistant;
include fragment UnattachPartsFromHandlingUnitAssistant;
include fragment PackAccordingToHandlingUnitCapacityAssistant;
include fragment TransferOwnershipToCustomerAssistant;
include fragment TransferInventoryPartInStockToStandardInventoryAssistant;
include fragment ChangeWDRNoAssistant;
include fragment TransferInventoryPartInStockToProjectInventoryAssistant;
@DynamicComponentDependency PURCH
include fragment TransferOwnershipToCompanyAssistant;
include fragment PrePostingWithoutSourceAssistant;
@DynamicComponentDependency COST
include fragment CostBucketInventLovSelector;
include fragment DefineCostStructureAssistant;
include fragment InventoryPartInStockUivInitialCheck;
include fragment ProjectDetailsFieldSet;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------
command ScrapCommand for InventoryPartInStock {
   label = "Scrap";
   mode = SingleRecord;
   enabled = [not FreezeFlagDb and(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "SHIPMENT" or LocationTypeDb = "MANUFACTURING") and
   QtyOnhand > 0 and AvailableQty > 0];
   variable ResultKeyNum {
      type = Number;
   }
   variable CatchUnitEnabledStr {
      type = Text;
   }
   variable QtyScrappedNum {
      type = Number;
   }
   variable CatchQtyScrappedNum {
      type = Number;
   }
   variable ScrapCodeStr {
      type = Text;
   }
   variable ScrapNoteStr {
      type = Text;
   }
   variable PrintServiceabilityTagBool {
      type = Boolean;
   }
   variable PartTrackingSessionIdNum {
      type = Number;
   }
   variable PrintServiceabilityTagStr {
      type = Text;
   }
   variable DefaultQtyScrappedNum {
      type = Number;
   }
   execute {
      if [ActivitySeq != 0] {
         call ValidateActivityState(Selection);
      }
      call GetCatchUnitEnabled(Contract, PartNo) into CatchUnitEnabledStr;
      set DefaultQtyScrappedNum = null;
      if [SerialNo != "*"] {
         set DefaultQtyScrappedNum = 1;
      }

      dialog ScrapDialog(CatchUnitEnabledStr, DefaultQtyScrappedNum, Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, ReceiptIssueSerialTrackDb, QtyOnhand) into(QtyScrappedNum, PrintServiceabilityTagBool) {
         when OK {
            if [PrintServiceabilityTagBool] {
               call GetReportResultKey(PartNo, Contract, SerialNo, LotBatchNo, QtyScrappedNum) into ResultKeyNum;
               printdialog ResultKeyNum;
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command PerformPutawayOnInvPartCommand for InventoryPartInStock {
   label = "Perform Putaway";
   mode = SelectedRecords;
   enabled = [(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "MANUFACTURING") and not FreezeFlagDb and
   RotablePartPoolId = null and AvailabilityControlId != "NOT ALLOWED" and AvailableQty > 0];

   bulkexecute {
      call PerformPutawayOnInvPart(Selection);
   }
}
command MoveInventoryPartsCommand for InventoryPartInStock {
   label = "Move Inventory Parts";
   mode = SelectedRecords;
   enabled = [(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "MANUFACTURING") and QtyOnhand > 0];
   bulkexecute {
      bulknavigate "page/MoveInventoryPart/Form?$filter=ObjId eq $[ObjId]";
   }
}
command MoveWithTransportTaskCommand for InventoryPartInStock {
   label = "Move with Transport Task";
   mode = SelectedRecords;
   enabled = [(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "SHIPMENT" or LocationTypeDb = "MANUFACTURING") and AvailableQtytoMove > 0];
   variable ContractsVar;
   variable ContractVar {
      type = Text;
   }
   variable ObjidListVar {
      type = Text;
   }
   variable ConnectedSorceVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "${Contract}") into ContractsVar;
      set ConnectedSorceVar = "INVENT";
      call GetNavigatorParams(ContractsVar, Selection) into NavigatorParamStructure;
      set ContractVar = NavigatorParamStructure.Contract;
      set ObjidListVar = NavigatorParamStructure.ObjidList;
      navigate "assistant/MoveWithTransportTask/MovePartWithTransportTaskAssistant?$action=InitAssistant{ContractVar: $[ContractVar], ObjidsVar: $[ObjidListVar], ConnectedSourceVar: $[ConnectedSorceVar]}";
   }
}

command MoveWithShipmentOrderCommand for InventoryPartInStock {
   label = "Move with Shipment Order";
   mode = SelectedRecords;
   enabled = [LocationTypeDb = "PICKING" and AvailableQtytoMove > 0 and(count(Contract) = 1) and(not((count(*, RemoteWarehouse = true) >= 1) and count(*, RemoteWarehouse = false) >= 1) and not(count(*, RemoteWarehouse = true) > 1 and count(Warehouse) > 1))];
   variable ObjidListVar Text;
   variable ContractWarehouseVar Text;
   bulkexecute {
      stringify(records, "^CONTRACT=${Contract}^WAREHOUSE=${Warehouse}^IS_REMOTE=${RemoteWarehouse}^", JSON) into ContractWarehouseVar;
      call GetConnectedObjidsList(Selection) into ObjidListVar;
      navigate "assistant/MoveWithShipmentOrderAssistant/MovePartWithShipmentOrderAssistant?$action=InitAssistant{ContractWarehouseSelectionVar: $[ContractWarehouseVar],ObjIdListVar: $[ObjidListVar]}";
   }
}

command ChangeAvailabilityControlIdCommand for InventoryPartInStock {
   label = "Change Availability Control";
   mode = SelectedRecords;
   enabled = [QtyOnhand > 0];
   variable FromAvailabilityControlIdVar {
      type = Text;
   }
   variable ToAvailabilityControlIdVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "${AvailabilityControlId}") into AvailabilityControlIdsVar;
      call GetFromAvailabilityControlId(AvailabilityControlIdsVar) into FromAvailabilityControlIdVar;

      dialog ChangeAvailabilityControlDialog(FromAvailabilityControlIdVar) into(ToAvailabilityControlIdVar) {
         when CANCEL {
            exit;
         }
      }
      bulkcall ModifyAvailabilityControl(Selection, ToAvailabilityControlIdVar);
   }
}
command ChangeWDRCommand for InventoryPartInStock {
   label = "Change W/D/R";
   mode = SingleRecord;
   enabled = [not FreezeFlagDb and(AvailableQty > 0) and(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "MANUFACTURING")];
   execute {
      assistant ChangeWDRNoAssistant(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, PartOwnershipDb, AvailabilityControlId, AvailableQty) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
command ChangeExpirationDateCommand for InventoryPartInStock {
   label = "Change Expiration Date";
   mode = SelectedRecords;
   enabled = [(QtyOnhand > 0 or QtyInTransit > 0) and QtyReserved = 0];
   variable ToExpirationDate;
   bulkexecute {
      call CheckSameExpirationDate(Selection) into FromExpirationDate;
      dialog ChangeExpirationDateFromInvPartInStockDialog(FromExpirationDate) into(ToExpirationDate) {
         when OK {
            bulkcall UpdateExpirationDateOnInvPart(Contract,
            PartNo,
            ConfigurationId,
            LocationNo,
            LotBatchNo,
            SerialNo,
            EngChgLevel,
            WaivDevRejNo,
            ActivitySeq,
            HandlingUnitId,
            ToExpirationDate);
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command AttachToHandlingUnitCommand for InventoryPartInStock {
   label = "Attach to Handling Unit";
   mode = SelectedRecords;
   enabled = [count(Contract) = 1 and count(LocationNo) = 1 and HandlingUnitId = 0 and(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "SHIPMENT" or LocationTypeDb = "MANUFACTURING") and AvailableQty > 0];
   variable ObjidListVar {
      type = Text;
   }
   variable ConnectedSorceVar {
      type = Text;
   }
   bulkexecute {
      set ConnectedSorceVar = "INVENT";
      call GetConnectedObjidsForInvPart(Selection) into ObjidListVar;
      assistant AttachPartsToHandlingUnitAssistant(ConnectedSorceVar, ObjidListVar) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }

      }
   }
}
command UnattachFromHandlingUnitCommand for InventoryPartInStock {
   label = "Unattach from Handling Unit";
   mode = SelectedRecords;
   enabled = [HandlingUnitId != 0 and(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "SHIPMENT" or LocationTypeDb = "MANUFACTURING") and AvailableQty > 0];
   variable ObjidListVar {
      type = Text;
   }
   variable ConnectedSorceVar {
      type = Text;
   }
   bulkexecute {
      if [QtyInTransit > 0] {
         alert("One or more rows were removed due to only having quantity in transit.");
      }
      set ConnectedSorceVar = "INVENT";
      call GetConnectedObjidsForInvPart(Selection) into ObjidListVar;
      assistant UnattachPartsFromHandlingUnitAssistant(ConnectedSorceVar, ObjidListVar, null, true) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command PackAccordingToHandlingUnitCapacityCommand for InventoryPartInStock {
   label = "Pack According to Handling Unit Capacity";
   mode = SingleRecord;
   enabled = [PartHandlingUnitTypeId != null and AvailableQty > 0 and HandlingUnitId = 0 and CatchQtyOnhand = null and(LocationTypeDb = "PICKING" or LocationTypeDb = "F" or LocationTypeDb = "SHIPMENT" or LocationTypeDb = "MANUFACTURING")
   and((SerialNo = "*" and ReceiptIssueSerialTrackDb = "FALSE") or SerialNo != "*")];

   variable NewhandlingUnitsStr {
      type = Text;
   }
   execute {
      assistant PackAccToHandlingUnitCapacityAssistant(PartNo, PartNoRef.Description, Contract, ConfigurationId, LocationNo, LotBatchNo,
      SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, AvailableQty, UoM, null, null, null, null, null, null) into(NewhandlingUnitsStr) {

         when OK {
            if [NewhandlingUnitsStr != null] {
               confirm("The parts have been packed. Do you want to view the created handling units?") {
                  when CANCEL {
                     refresh;
                  }
                  when OK {
                     navigate "page/HandlingUnitsInStock/List?searchcontext=HandlingUnitIdList:$[NewhandlingUnitsStr]";
                  }
               }
            }
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command PackAccordingToPackingInstructionCommand for InventoryPartInStock {
   label = "Pack According to Packing Instruction";
   mode = SelectedRecords;
   enabled = [QtyAvailable != 0 and HandlingUnitId = 0 and CatchQtyOnhand = null and not(LocationTypeDb = "ARRIVAL" or LocationTypeDb = "QA")];

   variable ConnectedSorceVar {
      type = Text;
   }
   variable ObjidListVar {
      type = Text;
   }
   variable NewhandlingUnitsStr {
      type = Text;
   }

   bulkexecute {
      set ConnectedSorceVar = "INVENT";
      call GetConnectedObjidsForInvPart(Selection) into ObjidListVar;

      assistant PackStocksIntoPackingInstructionAssistant(ConnectedSorceVar, ObjidListVar) into(NewhandlingUnitsStr) {
         when OK {
            if [NewhandlingUnitsStr != null] {
               confirm("The parts have been packed. Do you want to view the created handling units?") {
                  when CANCEL {
                     refresh;
                  }
                  when OK {
                     navigate "page/HandlingUnitsInStock/List;searchcontext=HandlingUnitIdList:$[NewhandlingUnitsStr]";
                  }
               }
            }
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command HandlingUnitDetailsCommand for InventoryPartInStock {
   label = "Handling Unit Details";
   mode = SelectedRecords;
   enabled = [HandlingUnitId != 0];
   bulkexecute {
      bulknavigate "tree/HandlingUnit/HandlingUnitStructureTree?$filter=HandlingUnitId eq $[HandlingUnitId]";
   }
}
command TopParentHandlingUnitDetailsCommand for InventoryPartInStock {
   label = "Top Parent Handling Unit Details";
   mode = SelectedRecords;
   enabled = [HandlingUnitId != 0 and TopParentHandlingUnitId != null];
   bulkexecute {
      bulknavigate "tree/HandlingUnit/HandlingUnitStructureTree?$filter=HandlingUnitId eq $[TopParentHandlingUnitId]";
   }
}
command IdentifySerialsCommand for InventoryPartInStock {
   label = "Identify Serials";
   mode = SingleRecord;
   enabled = [SerialNo = "*" and ReceiptIssueSerialTrackDb = "TRUE" and AvailableQty > 0];
   execute {
      call GetRecordsWithSessionId(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, AvailableQty,
      CatchQtyOnhand, NULL, "IDENTIFY_SERIALS_IN_STOCK", NULL) into IdentifySerialsRecStructure;
      assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
         when OK {
            call IdentifySerials(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, IdentifySerialsRecStructure.SessionId);
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command PartSerialCommand for InventoryPartInStock {
   label = "Part Serial";
   mode = SelectedRecords;
   enabled = [QtyOnhand > 0 and SerialNo != "*"];
   bulkexecute {
      bulknavigate "page/PartSerial/Form?$filter=PartNo eq $[PartNo] and SerialNo eq $[SerialNo]";
   }
}
command LotbatchMasterCommand for InventoryPartInStock {
   label = "Part Lot Batch";
   mode = SelectedRecords;
   enabled = [QtyOnhand > 0 and LotBatchNo != "*"];
   bulkexecute {
      bulknavigate "page/PartLotBatch/Form?$filter=PartNo eq $[PartNo] and LotBatchNo eq $[LotBatchNo]";
   }
}
command ViewConfigurationCommand for InventoryPartInStock {
   label = "View Configuration";
   mode = SingleRecord;
   enabled = [ConfigurationId != "*"];
   execute {
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarMode:$[Mode],
                                                                                                   VarPartNo:$[PartNo],
                                                                                                   VarConfigurationId:$[ConfigurationId]}";
   }
}
command ViewReservationsCommand for InventoryPartInStock {
   label = "Reservation Details";
   mode = SingleRecord;
   enabled = [QtyReserved > 0];
   execute {
      navigate "page/InventoryPartInStockReservations/List?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConfigurationId eq $[ConfigurationId] and LocationNo eq $[LocationNo] and LotBatchNo eq $[LotBatchNo] and SerialNo eq $[SerialNo] and EngChgLevel eq $[EngChgLevel] and WaivDevRejNo eq $[WaivDevRejNo] and ActivitySeq eq $[ActivitySeq] and HandlingUnitId eq $[HandlingUnitId]";
   }
}
command TransferOwnershipBetweenCustomersCommand for InventoryPartInStock {
   label = "Transfer Ownership between Customers";
   mode = SelectedRecords;
   enabled = [PartOwnershipDb = "CUSTOMER OWNED"];
   variable ObjidListVar {
      type = Text;
   }
   bulkexecute {
      call GetConnectedObjidsForInvPart(Selection) into ObjidListVar;
      assistant TransferOwnershipToCustomerAssistant(ObjidListVar) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

@DynamicComponentDependency PURCH
command TransferOwnershipToCompanyCommand for InventoryPartInStock {
   label = "Transfer Ownership to Company";
   mode = SelectedRecords;
   enabled = [PartOwnershipDb = "CUSTOMER OWNED" or PartOwnershipDb = "SUPPLIER LOANED"];
   variable ObjidListVar {
      type = Text;
   }

   bulkexecute {
      call GetConnectedObjidsForInvPart(Selection) into ObjidListVar;
      assistant TransferOwnershipToCompanyAssistant(ObjidListVar) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command TransferCompanyOwnedToCompanyRentalAssetCommand for InventoryPartInStock {
   label = "Transfer Company Owned to Company Rental Asset";
   mode = SelectedRecords;

   enabled = [PartOwnershipDb = "COMPANY OWNED" and count(Company) = 1 and(SerialNo != "*" or(SerialNo = "*" and ReceiptIssueSerialTrackDb = "FALSE") or(SerialNo = "*" and count(*, PartNoRef.ReceiptIssueSerialTrackDb = "TRUE") = 1))];
   variable PartTrackingSessionIdNum {
      type = Number;
   }
   variable ProceedTransferBool {
      type = Boolean;
   }
   variable ContractsVar {
      type = Text;
   }
   variable ContractVar {
      type = Text;
   }
   variable CodepartsSettingsVar {
      type = Structure(CodepartsSettingsStructure);
   }
   variable CodeAVar {
      type = Text;
   }
   variable CodeBVar {
      type = Text;
   }
   variable CodeCVar {
      type = Text;
   }
   variable CodeDVar {
      type = Text;
   }
   variable CodeEVar {
      type = Text;
   }
   variable CodeFVar {
      type = Text;
   }
   variable CodeGVar {
      type = Text;
   }
   variable CodeHVar {
      type = Text;
   }
   variable CodeIVar {
      type = Text;
   }
   variable CodeJVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "${Contract}") into ContractsVar;
      call GetAnySelectedContract(ContractsVar) into ContractVar;
      set ProceedTransferBool = true;
      call GetCodepartsSettings("M259", ContractVar) into CodepartsSettingsVar;
      if [CodepartsSettingsVar.AllCodepartsCompiled != "DISABLED"] {
         assistant PrePostingWithoutSourceAssistant(ContractVar, CodepartsSettingsVar.AccountNo, CodepartsSettingsVar.CodenoB, CodepartsSettingsVar.CodenoC,
         CodepartsSettingsVar.CodenoD, CodepartsSettingsVar.CodenoE, CodepartsSettingsVar.CodenoF, CodepartsSettingsVar.CodenoG,
         CodepartsSettingsVar.CodenoH, CodepartsSettingsVar.CodenoI, CodepartsSettingsVar.CodenoJ)
         into(CodeAVar, CodeBVar, CodeCVar, CodeDVar, CodeEVar, CodeFVar, CodeGVar, CodeHVar, CodeIVar, CodeJVar) {
            when CANCEL {
               set ProceedTransferBool = false;
               exit;
            }
         }
      }
      if [ProceedTransferBool] {
         if [ReceiptIssueSerialTrackDb = "TRUE"  and SerialNo = "*" and QtyOnhand > 0] {
            call GetRecordsWithSessionId(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, QtyOnhand, CatchQtyOnhand, NULL, NULL, NULL) into IdentifySerialsRecStructure;
            assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
               when OK {
                  set PartTrackingSessionIdNum = IdentifySerialsRecStructure.SessionId;
               }
               when CANCEL {
                  set ProceedTransferBool = false;
                  exit;
               }
            }
         }
         if [ProceedTransferBool] {
            call TransferToRentalAsset(Selection,
            CodeAVar,
            CodeBVar,
            CodeCVar,
            CodeDVar,
            CodeEVar,
            CodeFVar,
            CodeGVar,
            CodeHVar,
            CodeIVar,
            CodeJVar,
            "TransferToRentalAsset",
            0,
            PartTrackingSessionIdNum);
         }
      }
   }
}

command TransferCompanyRentalAssetToCompanyOwnedCommand for InventoryPartInStock {
   label = "Transfer Company Rental Asset to Company Owned";
   mode = SingleRecord;
   enabled = [PartOwnershipDb = "COMPANY RENTAL ASSET"];
   variable CodepartsSettingsVar {
      type = Structure(CodepartsSettingsStructure);
   }
   variable CodeAVar {
      type = Text;
   }
   variable CodeBVar {
      type = Text;
   }
   variable CodeCVar {
      type = Text;
   }
   variable CodeDVar {
      type = Text;
   }
   variable CodeEVar {
      type = Text;
   }
   variable CodeFVar {
      type = Text;
   }
   variable CodeGVar {
      type = Text;
   }
   variable CodeHVar {
      type = Text;
   }
   variable CodeIVar {
      type = Text;
   }
   variable CodeJVar {
      type = Text;
   }
   variable DefineOkBool {
      type = Boolean;
   }
   variable ProceedTransferBool {
      type = Boolean;
   }
   variable PartTrackingSessionIdNum {
      type = Number;
   }
   variable CostDetailIdNum {
      type = Number;
   }
   execute {
      set ProceedTransferBool = true;
      call GetCodepartsSettings("M260", Contract) into CodepartsSettingsVar;
      if [CodepartsSettingsVar.AllCodepartsCompiled != "DISABLED"] {
         assistant PrePostingWithoutSourceAssistant(Contract, CodepartsSettingsVar.AccountNo, CodepartsSettingsVar.CodenoB, CodepartsSettingsVar.CodenoC,
         CodepartsSettingsVar.CodenoD, CodepartsSettingsVar.CodenoE, CodepartsSettingsVar.CodenoF, CodepartsSettingsVar.CodenoG,
         CodepartsSettingsVar.CodenoH, CodepartsSettingsVar.CodenoI, CodepartsSettingsVar.CodenoJ)
         into(CodeAVar, CodeBVar, CodeCVar, CodeDVar, CodeEVar, CodeFVar, CodeGVar, CodeHVar, CodeIVar, CodeJVar) {
            when CANCEL {
               set ProceedTransferBool = false;
               exit;
            }
         }
      }
      if [ProceedTransferBool] {
         call CheckDefineCostStructure(Contract, PartNo, ConfigurationId, LotBatchNo, SerialNo, ConditionCode) into DefineOkBool;
         if [DefineOkBool] {
            assistant DefineCostStructureAssistant(Contract, PartNo, ConfigurationId, LotBatchNo, SerialNo, ConditionCode, "RENTAL ASSET TRANSFER", null) into(CostDetailIdNum) {
               when CANCEL {
                  set ProceedTransferBool = false;
                  exit;
               }
            }
         }
         if [ProceedTransferBool] {
            set ProceedTransferBool = true;
            if [ReceiptIssueSerialTrackDb = "TRUE"  and SerialNo = "*" and QtyOnhand > 0] {
               call GetRecordsWithSessionId(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, QtyOnhand, CatchQtyOnhand, NULL, NULL, NULL) into IdentifySerialsRecStructure;
               assistant IdentifySerialsInLocRepeatAssistant(IdentifySerialsRecStructure.RemainingSelection, IdentifySerialsRecStructure.Total, null, null) into(SessionSelection) {
                  when OK {
                     set PartTrackingSessionIdNum = IdentifySerialsRecStructure.SessionId;
                  }
                  when CANCEL {
                     set ProceedTransferBool = false;
                     if [DefineOkBool] {
                        call RemoveDetails(CostDetailIdNum);
                     }
                     exit;
                  }
               }
            }
            if [ProceedTransferBool] {

               call TransferFromRentalAsset(Contract,
               PartNo,
               ConfigurationId,
               LocationNo,
               LotBatchNo,
               SerialNo,
               EngChgLevel,
               WaivDevRejNo,
               ActivitySeq,
               HandlingUnitId,
               QtyOnhand,
               CatchQtyOnhand,
               CodeAVar,
               CodeBVar,
               CodeCVar,
               CodeDVar,
               CodeEVar,
               CodeFVar,
               CodeGVar,
               CodeHVar,
               CodeIVar,
               CodeJVar,
               "TransferFromRentalAsset",
               CostDetailIdNum,
               PartTrackingSessionIdNum);
            }
         }
      }
   }
}

command CustomerPartAcquisitionValuesCommand for InventoryPartInStock {
   label = "Customer Part Acquisition Values";
   mode = SelectedRecords;
   enabled = [PartOwnershipDb = "CUSTOMER OWNED"];
   execute {
      navigate "page/CustomerPartAcquisitionValues/List?$filter=PartNo eq $[PartNo] and CustomerNo eq $[Owner] and SerialNo eq $[SerialNo] and LotBatchNo eq $[LotBatchNo]";
   }
}
@DynamicComponentDependency PROJ
command TransferToProjectInventoryCommand for InventoryPartInStock {
   label = "Transfer to Project Inventory";
   mode = SelectedRecords;
   enabled = [(LocationTypeDb != "ARRIVAL" and LocationTypeDb != "QA") and AvailableQty > 0 and count(Company) = 1];
   variable ContractsVar {
      type = Text;
   }
   variable CompanyVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "${Contract}") into ContractsVar;
      call GetSelectedCompany(ContractsVar) into CompanyVar;

      if [CompanyVar != null] {
         if [ActivitySeq != 0] {
            call ValidateActivityState(Selection);
         }
         call GetConnectedObjidsForInvPart(Selection) into ObjidListVar;
         if [ObjidListVar != null] {
            assistant TransferToProjectInventoryAssistant(CompanyVar, ObjidListVar) {
               when OK {
                  exit;
               }
               when CANCEL {
                  exit;
               }
            }
         }
      }

   }
}
@DynamicComponentDependency PROJ
command TransferToStandardInventoryCommand for InventoryPartInStock {
   label = "Transfer to Standard Inventory";
   mode = SelectedRecords;
   enabled = [(ActivitySeq != 0) and(AvailableQty > 0 and LocationTypeDb != "ARRIVAL" and LocationTypeDb != "QA")];
   variable ObjidListVar {
      type = Text;
   }
   bulkexecute {
      call ValidateActivityState(Selection);
      call GetConnectedObjidsForInvPart(Selection) into ObjidListVar;
      if [ObjidListVar != null] {

         assistant TransferInventoryPartInStockToStandardInventoryAssistant(ObjidListVar) {
            when OK {
               exit;
            }
            when CANCEL {
               exit;
            }
         }
      }
   }
}
@DynamicComponentDependency QUAMAN
command ControlPlanCommand for InventoryPartInStock {
   label = "Control Plan";
   enabled = [true];
   execute {
      navigate "page/ControlPlanInventory/Form?$filter=PartNo eq $[PartNo]";
//   mode = SelectedRecords;
//   bulkexecute {
//      bulknavigate "page/ControlPlanInventory/Form?$filter=PartNo eq [$PartNo] and ContractRef eq [$ContractRef]";
   }
}
@DynamicComponentDependency CHMGMT
command CreateMRBCaseCommand for InventoryPartInStock {
   label = "New MRB Case";
   mode = SelectedRecords;
   enabled = [(count(Contract) = 1) and(count(PartNo) = 1) and(count(LocationNo) = 1) and LocationTypeDb != "ARRIVAL" and LocationTypeDb != "QA" and LocationTypeDb != "SHIPMENT"];
   bulkexecute {
      assistant CreateMrbCaseDialog.CreateMrbCaseDialog("InventoryPartInStock", Selection, null, null, null, null, null, SerialNo, LotBatchNo, WaivDevRejNo, ConfigurationId, EngChgLevel, ActivitySeq, HandlingUnitId, null) {
         when OK {
            refresh;
         }
      }
   }
}
@DynamicComponentDependency CHMGMT
command QueryMRBCasesByPartCommand for InventoryPartInStock {
   label = "Query - MRB Cases by Part";
   enabled = [true];
   execute {
      navigate "page/MrbCasesByPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
command PrintServiceabilityTagCommand for InventoryPartInStock {
   label = "Print Serviceability Tag";
   mode = SelectedRecords;
   enabled = [OperationalCondition != "NOT_APPLICABLE"];
   variable ServiceabilityStatusDbVar {
      type = Text;
   }
   variable ScrapStatusVar {
      type = Text;
   }
   variable ReportResulyKeyList {
      type = Text;
   }
   bulkexecute {
      ifany [SerialNo = "*"] {
         set ScrapStatusVar = "FALSE";
         dialog PrintServiceabilityDialog(ScrapStatusVar) into(ServiceabilityStatusDbVar) {
            when CANCEL {
               exit;
            }
         }
      }
      call GetServiceabilityReportResultKey(Selection, ServiceabilityStatusDbVar) into ReportResulyKeyList;
      if [ReportResulyKeyList != null] {
         printdialog ReportResulyKeyList;
      }
   }
}
command PrintBarcodLabelsCommand for InventoryPartInStock {
   label = "Print Barcode Labels";
   mode = SelectedRecords;
   enabled = [count(Contract) = 1 and(component.InventoryPartInStockList.SelectionCount = 1 or SerialNo != "*")];
   bulkexecute {
      stringify(records, "CONTRACT=${Contract}^PART_NO=${PartNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CONFIGURATION_ID=${ConfigurationId}^ACTIVITY_SEQ=${ActivitySeq}^QTY=1^PACK_SIZE=1^", JSON) into SelectionVar;
      ifall [SerialNo != "*"] {
         assistant PrintBarcodeLabelsAssistant(SelectionVar) {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }
         }
      }
      else {
         assistant PrintBarCodeLabelsSingleAssistant(SelectionVar) {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }
         }
      }
   }
}
command InventoryPartBarcodesAnalysisCommand for InventoryPartInStock {
   label = "Barcode Details";
   mode = SingleRecord;
   enabled = [InvPartBarcodeExist = "TRUE"];
   execute {
      navigate "page/InventoryPartBarcodeAnalysis/List?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConfigurationId eq $[ConfigurationId] and SerialNo eq $[SerialNo] and LotBatchNo eq $[LotBatchNo] and EngChgLevel eq $[EngChgLevel] and WaivDevRejNo eq $[WaivDevRejNo] and ActivitySeq eq $[ActivitySeq]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group ChangeExpirationDate for ChangeExpirationDateFromInvPartInStockStructure {
   label = "";
   field FromExpirationDate {
      editable = [false];
   }
   field ToExpirationDate;
}
group FromAvailabilityControlGroup for ChangeAvailabilityControlStructure {
   label = "From Availability Control";
   lov FromAvailabilityControlIdRef with ReferencePartAvailabilityControlSelector {
      showlabel = false;
      editable = [false];
      description = FromAvailabilityControlIdRef.Description;
   }
}

group ToAvailabilityControlGroup for ChangeAvailabilityControlStructure {
   label = "To Availability Control";
   lov ToAvailabilityControlIdRef with ReferencePartAvailabilityControlSelector using AvailableControlIds {
      showlabel = false;
      description = ToAvailabilityControlIdRef.Description;

   }
}

----------------------------------- LISTS -----------------------------------

list InventoryPartInStockList for InventoryPartInStock {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      columnexclude = [parent.luname = "SiteInventInfo" or parent.luname = "Warehouse" or parent.luname = "WarehouseBay" or parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayTier" or parent.luname = "WarehouseBayRow"];
   }
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      label = "Part";
      description = PartNoRef.Description;
      size = Large;
    //  details = InventoryPart(PartNo);
   }
   field ConfigurationIdRef {
      size = Small;
   }
   lov LocationNoRef with ReferenceInventoryLocation19Selector {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field PartSerialCatalogRef {
      size = Small;
      label = "Serial No";
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeDesc;
      label = "Condition Code";
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field ActivitySeq {
      size = Small;
   }
   field Warehouse {
      size = Small;
      columnexclude = [parent.luname = "Warehouse" or parent.luname = "WarehouseBay" or parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayTier" or parent.luname = "WarehouseBayRow"];
   }
   field BayNo {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBay" or parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayRow" or parent.luname = "WarehouseBayTier"];
   }
   field RowNo {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayRow"];
   }
   field TierNo {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBayBin" or parent.luname = "WarehouseBayTier"];
   }
   field BinNo {
      size = Small;
      columnexclude = [parent.luname = "WarehouseBayBin"];
   }
   field RotablePartPoolIdRef {
      size = Small;
   }
   field QtyOnhand {
      size = Small;
   }
   field CatchQtyOnhand {
      size = Small;
   }
   field UnifiedOnHandQty {
      size = Small;
   }
   field UnifiedCatchOnHandQty {
      size = Small;
   }
   field QtyReserved {
      size = Small;
   }
   field UnifiedReservedQty {
      size = Small;
   }
   field QtyInTransit {
      size = Small;
   }
   field CatchQtyInTransit {
      size = Small;
   }
   field UnifiedQtyinTransit {
      size = Small;
   }
   field UnifiedCatchQtyinTransit {
      size = Small;
   }
   field AvailableQty {
      size = Small;
   }
   field UoMRef {
      size = Small;
   }
   field CatchUoMRef {
      size = Small;
   }
   field UnifiedUoMRef {
      size = Small;
   }
   field UnifiedCatchUoMRef {
      size = Small;
   }
   field FreezeFlagDb {
      size = Small;
   }
   field LastActivityDate {
      size = Small;
      format = longtime;
   }
   field LastCountDate {
      size = Small;
   }
   field LocationType {
      size = Small;
   }
   field ReceiptDate {
      size = Small;
      format = longtime;
   }
   lov PartAvailabilityControlRef with ReferencePartAvailabilityControlSelector {
      label = "Availability Control";
      description = PartAvailabilityControlIdDesc;
   }
   field AvgUnitTransitCost {
      size = Small;
   }
   field CountVariance {
      size = Small;
   }
   field ExpirationDate {
      size = Small;
   }
   field UnitCost {
      size = Small;
   }
   field TotalInventoryValue {
      size = Small;
   }
   field BaseCurr {
      label = "Base Currency";
      size = Small;
   }
   field PartOwnership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field PartAcquisitionValue {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field TotalAcquisitionValue {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field AcquisitionCurrency {
      size = Small;
   }
   fieldset ProjectDetailsFieldSet;
   field StructureLevel {
      size = Small;
   }
   field HandlingUnitRef {
      size = Small;
      label = "Handling Unit ID";
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      label = "Handling Unit Type";
      description = HandlingUnitTypeDesc;
   }
   field Sscc {
      size = Small;
      label = "SSCC";
   }
   field AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field TopParentHandlingUnitId {
      size = Small;
   }
   lov TopParentHandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = TopParentHandlingUnitTypeIdDesc;
      label = "Top Parent Handling Unit Type";
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelId {
      size = Small;
   }
   field LocationDescription {
      size = Small;
   }
   field RemoteWarehouse {
      size = Small;
      label = "Remote";
   }
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.EngRevision {
      label = "Engineering Revision No";
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   lov TechnicalDrawingNoRef with ReferenceTechnicalDrawingSelector {
      editable = [false];
      columnvisible = [false];
   }
   @DynamicComponentDependency MFGSTD
   field PartRevisionRef.TechDrawingRevisionNo {
      label = "Drawing Revision No";
      editable = [false];
      columnvisible = [false];
   }
   fieldranking Contract, PartNo, ConfigurationId, LocationNo, HandlingUnitId, QtyOnhand, QtyReserved, QtyInTransit, LotBatchNo, SerialNo;

   commandgroup ScrapCommandGroup {

      command ScrapCommand;
   }
   commandgroup RelocationCommandGroup {
      commandgroup RelocationCommandSubGroup {
         label = "Relocation";
         command PerformPutawayOnInvPartCommand;
         command MoveInventoryPartsCommand;
         command MoveWithTransportTaskCommand;
         command MoveWithShipmentOrderCommand;
      }
   }
   commandgroup AvailabilityCommandGroup {
      commandgroup AvailabilityCommandSubGroup {
         label = "Availability";
         command ChangeAvailabilityControlIdCommand;
         command ChangeWDRCommand;
         command ChangeExpirationDateCommand;
      }
   }
   commandgroup HandlingUnitCommandGroup {
      commandgroup HandlingUnitCommandSubGroup {
         label = "Handling Unit";
         command AttachToHandlingUnitCommand;
         command UnattachFromHandlingUnitCommand;
         command PackAccordingToHandlingUnitCapacityCommand;
         command PackAccordingToPackingInstructionCommand;
         command HandlingUnitDetailsCommand;
         command TopParentHandlingUnitDetailsCommand;
      }
   }
   commandgroup DetailsCommandGroup {
      command ViewConfigurationCommand;
      command ViewReservationsCommand;
      command InventoryPartBarcodesAnalysisCommand;
   }
   commandgroup TrackingCommandGroup {
      commandgroup TrackingCommandSubGroup {
         label = "Tracking";
         command IdentifySerialsCommand;
         command PartSerialCommand;
         command LotbatchMasterCommand;
      }
   }
   commandgroup OwnershipCommandGroup {
      commandgroup OwnershipCommandSubGroup {
         label = "Ownership";
         command TransferOwnershipBetweenCustomersCommand;
         @DynamicComponentDependency PURCH
         command TransferOwnershipToCompanyCommand;
         command TransferCompanyOwnedToCompanyRentalAssetCommand;
         command TransferCompanyRentalAssetToCompanyOwnedCommand;
         command CustomerPartAcquisitionValuesCommand;
      }
   }
   @DynamicComponentDependency PROJ
   commandgroup ProjectCommandGroup {
      commandgroup ProjectCommandSubGroup {
         label = "Project";
         command TransferToProjectInventoryCommand;
         command TransferToStandardInventoryCommand;
      }
   }

   commandgroup QualityCommandGroup {
      commandgroup QualityCommandSubGroup {
         label = "Quality";
         @DynamicComponentDependency QUAMAN
         command ControlPlanCommand;
         @DynamicComponentDependency CHMGMT
         command CreateMRBCaseCommand;
         @DynamicComponentDependency CHMGMT
         command QueryMRBCasesByPartCommand;
      }
   }
   commandgroup PrintCommandGroup {
      commandgroup PrintCommandSubGroup {
         label = "Print";
         command PrintServiceabilityTagCommand;
         command PrintBarcodLabelsCommand;
      }
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog ChangeExpirationDateFromInvPartInStockDialog for ChangeExpirationDateFromInvPartInStockStructure {
   label = "Change Expiration Date";
   input(FromExpirationDate);
   output(ToExpirationDate);
   group ChangeExpirationDate;
   command Ok;
   command Cancel;
}

dialog ChangeAvailabilityControlDialog for ChangeAvailabilityControlStructure {
   label = "Change Availability Control";
   input(FromAvailabilityControlId);
   output(ToAvailabilityControlId);
   group FromAvailabilityControlGroup;
   group ToAvailabilityControlGroup;
   command Ok {
      enabled = [true];
      execute {
         exit OK;
      }
   }
   command Cancel;
}
---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartInStockSet for InventoryPartInStock;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPartInStock {
   crud = Read;
   from = "inventory_part_in_stock_uiv";
   exec = "INVENTORY_PART_IN_STOCK_API";
   keys = Contract, PartNo, ConfigurationId, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq {
      where = "CONTRACT = :Contract and PART_NO = :PartNo and CONFIGURATION_ID = :ConfigurationId and LOCATION_NO = :LocationNo and HANDLING_UNIT_ID = :HandlingUnitId and LOT_BATCH_NO = :LotBatchNo and SERIAL_NO = :SerialNo and ENG_CHG_LEVEL = :EngChgLevel and WAIV_DEV_REJ_NO = :WaivDevRejNo and ACTIVITY_SEQ = :ActivitySeq";
   }
   attribute ObjId Text {
      fetch = "OBJID";
      label = "Objid";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNoDesc Text {
      fetch = "Inventory_Part_API.Get_Description(CONTRACT, PART_NO)";
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute LocationNo Text {
      fetch = "LOCATION_NO";
      label = "Location No";
      maxlength = 35;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute StructureLevel Number {
      fetch = "HANDLING_UNIT_API.Get_Structure_Level(HANDLING_UNIT_ID)";
      label = "Structure Level";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      fetch = "HANDLING_UNIT_ID";
      label = "Handling Unit ID";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
   }
   attribute Sscc Text {
      fetch = "Handling_Unit_API.Get_Sscc(HANDLING_UNIT_ID)";
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Alt_Handling_Unit_Label_Id(HANDLING_UNIT_ID)";
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID)";
   }
   attribute HandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
   }
   attribute QtyOnhand Number {
      fetch = "QTY_ONHAND";
      label = "On Hand Qty";
      required = [true];
   }
   attribute QtyReserved Number {
      fetch = "QTY_RESERVED";
      label = "Reserved Qty";
      required = [true];
   }
   attribute QtyInTransit Number {
      fetch = "QTY_IN_TRANSIT";
      label = "In Transit Qty";
      required = [true];
   }
   attribute AvailableQty Number {
      fetch = "QTY_ONHAND - QTY_RESERVED";
      label = "Available Qty";
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "LOT_BATCH_NO";
      label = "Lot/Batch No";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO )";
      label = "Condition Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDesc Text {
      fetch = "Condition_Code_API.Get_Description(CONDITION_CODE_MANAGER_API.Get_Condition_Code(PART_NO,SERIAL_NO,LOT_BATCH_NO ))";

   }
   attribute EngChgLevel Text {
      fetch = "ENG_CHG_LEVEL";
      label = "Revision No";
      maxlength = 6;
      required = [true];
      editable = [ETag = null];
   }
   attribute WaivDevRejNo Text {
      fetch = "WAIV_DEV_REJ_NO";
      label = "W/D/R No";
      maxlength = 15;
      required = [true];
      editable = [ETag = null];
   }
   attribute ActivitySeq Number {
      fetch = "ACTIVITY_SEQ";
      label = "Activity Sequence";
      required = [true];
      editable = [ETag = null];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSscc Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeIdDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
   }
   attribute Warehouse Text {
      fetch = "WAREHOUSE";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayNo Text {
      fetch = "BAY_NO";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "ROW_NO";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierNo Text {
      fetch = "TIER_NO";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinNo Text {
      fetch = "BIN_NO";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute LocationDescription Text {
      fetch = "Inventory_Location_API.Get_Location_Name(CONTRACT, LOCATION_NO)";
      label = "Location Description";
      maxlength = 200;
      editable = [false];
   }
   attribute RotablePartPoolId Text {
      fetch = "ROTABLE_PART_POOL_ID";
      label = "Rotable Part Pool ID";
      maxlength = 20;
      editable = [ETag != null];
      format = uppercase;
   }
   attribute CatchQtyOnhand Number {
      fetch = "CATCH_QTY_ONHAND";
      label = "On Hand Catch Qty";
   }
   attribute CatchQtyInTransit Number {
      fetch = "CATCH_QTY_IN_TRANSIT";
      label = "Catch Qty in Transit";
      required = [true];
   }
   attribute UoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
      label = "UoM";
      editable = [false];
   }
   attribute CatchUoM Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(CONTRACT,PART_NO)";
      label = "Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute UnifiedOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,QTY_ONHAND,'REMOVE')";
      label = "Unified On Hand Qty";
      editable = [false];
   }
   attribute UnifiedReservedQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,QTY_RESERVED,'REMOVE')";
      label = "Unified Reserved Qty";
      editable = [false];
   }
   attribute UnifiedQtyinTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,QTY_IN_TRANSIT,'REMOVE')";
      label = "Unified Qty in Transit";
      editable = [ETag != null];
   }
   attribute UnifiedUoM Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(PART_NO)";
      label = "Unified UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute UnifiedCatchOnHandQty Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,CATCH_QTY_ONHAND,'REMOVE','CATCH')";
      label = "Unified Catch On Hand Qty";
      editable = [false];
   }
   attribute UnifiedCatchQtyinTransit Number {
      fetch = "Inventory_Part_API.Get_User_Default_Converted_Qty(CONTRACT,PART_NO,CATCH_QTY_IN_TRANSIT,'REMOVE','CATCH')";
      label = "Unified Catch Qty in Transit";
      editable = [ETag != null];
   }
   attribute UnifiedCatchUoM Text {
      fetch = "Inventory_Part_API.Get_User_Default_Unit_Meas(PART_NO,'CATCH')";
      label = "Unified Catch UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute FreezeFlagDb Boolean("Y", "N") {
      fetch = "FREEZE_FLAG_DB";
      label = "Frozen";
      editable = [false];
   }
   attribute LastActivityDate Timestamp {
      fetch = "LAST_ACTIVITY_DATE";
      label = "Last Activity Date";
      editable = [false];
   }
   attribute LastCountDate Date {
      fetch = "LAST_COUNT_DATE";
      label = "Latest Count";
   }
   attribute LocationType Enumeration(InventoryLocationType) {
      fetch = "LOCATION_TYPE_DB";
      label = "Location Type";
      required = [true];
      editable = [ETag = null];
   }
   attribute ReceiptDate Timestamp {
      fetch = "RECEIPT_DATE";
      label = "Receipt Date";
   }
   attribute AvailabilityControlId Text {
      fetch = "AVAILABILITY_CONTROL_ID";
      label = "Availability Control ID";
      maxlength = 25;
      format = uppercase;
   }
   attribute AvgUnitTransitCost Number {
      fetch = "AVG_UNIT_TRANSIT_COST";
      label = "Avg Unit Transit Cost";
      required = [true];
   }
   attribute CountVariance Number {
      fetch = "COUNT_VARIANCE";
      label = "Count Variance";
   }
   attribute ExpirationDate Date {
      fetch = "EXPIRATION_DATE";
      label = "Expiration Date";
   }
   attribute UnitCost Number {
      fetch = "UNIT_COST";
      label = "Unit Cost";
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalInventoryValue Number {
      fetch = "UNIT_COST * QTY_ONHAND";
      label = "Total Inventory Value";
      editable = [false];
      format = ifscurrency;
   }
   attribute BaseCurr Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(CONTRACT))";
      label = "Base Curr";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "PART_OWNERSHIP_DB";
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "NVL(OWNING_CUSTOMER_NO,OWNING_VENDOR_NO)";
      label = "Owner";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(CONTRACT,PART_NO,CONFIGURATION_ID,LOCATION_NO,LOT_BATCH_NO,SERIAL_NO,ENG_CHG_LEVEL,WAIV_DEV_REJ_NO,ACTIVITY_SEQ, HANDLING_UNIT_ID)";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency ORDER
   attribute PartAcquisitionValue Number {
      fetch = "CUST_PART_ACQ_VALUE_API.Get_Acquisition_Value(OWNING_CUSTOMER_NO,PART_NO,SERIAL_NO,LOT_BATCH_NO)";
      label = "Part Acquisition Value";
      editable = [false];
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute TotalAcquisitionValue Number {
      fetch = "QTY_ONHAND*CUST_PART_ACQ_VALUE_API.Get_Acquisition_Value(OWNING_CUSTOMER_NO,PART_NO,SERIAL_NO,LOT_BATCH_NO)";
      label = "Total Acquisition Value";
      editable = [false];
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute AcquisitionCurrency Text {
      fetch = "CUST_PART_ACQ_VALUE_API.Get_Currency_Code(OWNING_CUSTOMER_NO,PART_NO,SERIAL_NO,LOT_BATCH_NO)";
      label = "Acquisition Currency";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute ProjectId Text {
      fetch = "PROJECT_ID";
      label = "Project ID";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartOwnershipDb Text {
      fetch = "PART_OWNERSHIP_DB";
      label = "Ownership";
      maxlength = 100;

      editable = [false];
      format = uppercase;
   }
   attribute LocationTypeDb Text {
      fetch = "LOCATION_TYPE_DB";
      label = "Location Type";
      maxlength = 20;
      editable = [false];
   }
   attribute AvailableQtytoMove Number {
      fetch = "Inv_Part_Stock_Reservation_API.Get_Available_Qty_To_Move(CONTRACT, PART_NO, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, SERIAL_NO,ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, HANDLING_UNIT_ID, QTY_ONHAND, QTY_RESERVED )";
      label = "Available Qty to Move";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperationalCondition Text {
      fetch = "Part_Serial_Catalog_API.Get_Operational_Condition_Db(PART_NO, SERIAL_NO)";
   }
   attribute PartHandlingUnitTypeId Text {
      fetch = "Part_Handling_Unit_API.Get_Handling_Unit_Type_Id(PART_NO, Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO))";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(CONTRACT)";
   }
   attribute InvPartBarcodeExist Text {
      fetch = "Inventory_Part_Barcode_API.Check_Inv_Part_Barcode_Exist(CONTRACT, PART_NO, CONFIGURATION_ID, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ)";
   }
   attribute ReceiptIssueSerialTrackDb Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(PART_NO)";
   }
   attribute PartAvailabilityControlIdDesc Text {
      fetch = "Part_Availability_Control_API.Get_Description(AVAILABILITY_CONTROL_ID)";
   }
   attribute RemoteWarehouse Boolean("TRUE", "FALSE") {
      fetch = "Warehouse_API.Get_Remote_Warehouse_Db(CONTRACT, WAREHOUSE)";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference PartSerialCatalogRef(PartNo, SerialNo) to PartSerialCatalog(PartNo, SerialNo);
   reference PartAvailabilityControlRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference WarehouseRef(Contract, Warehouse) to Warehouse(Contract, WarehouseId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo);
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation19(Contract, LocationNo) {
      label = "Location No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference UoMRef(UoM) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference TopParentHandlingUnitTypeIdRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference RotablePartPoolIdRef(RotablePartPoolId) to RotablePartPool(RotablePartPoolId) {
      label = "Rotable Part Pool ID";
   }
   reference CatchUoMRef(CatchUoM) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }
   reference UnifiedUoMRef(UnifiedUoM) to IsoUnit(UnitCode) {
      label = "Unified UoM";
   }
   reference UnifiedCatchUoMRef(UnifiedCatchUoM) to IsoUnit(UnitCode) {
      label = "Unified Catch UoM";
   }
   @DynamicComponentDependency MFGSTD
   reference PartRevisionRef(Contract, PartNo, EngChgLevel) to PartRevision(Contract, PartNo, EngChgLevel) {
      prefetch TechnicalDrawingNo as TechnicalDrawingNo;
   }
   @DynamicComponentDependency MFGSTD
   reference TechnicalDrawingNoRef(TechnicalDrawingNo) to TechnicalDrawing(DrawingNo) {
      label = "Drawing No";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action PerformPutawayOnInvPart {
   initialcheck implementation;
   supportwarnings = [true];
   parameter Selection Text;
}

action GetReportResultKey Number {
   initialcheck implementation;
   parameter PartNo Text;
   parameter Contract Text;
   parameter SerialNo Text;
   parameter LotBatchNo Text;
   parameter QtyScrapped Number;
}

action UpdateExpirationDateOnInvPart {
   initialcheck InventoryPartInStockUivInitialCheck(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter ExpirationDate Date;
   ludependencies = InventoryPartInStock;
}
action GetServiceabilityReportResultKey Text {
   initialcheck implementation;
   parameter Selection Text;
   parameter ServiceabilityStatusDb Text;
}

action ModifyAvailabilityControl {
   initialcheck implementation;
   parameter Selection Text;
   parameter NewAvailabilityControlId Text;
   ludependencies = InventoryPartInStock;
}
action ValidateActivityState {
   initialcheck none;
   parameter Selection Text;
}
action TransferToRentalAsset {
   initialcheck implementation;
   parameter Selection Text;
   parameter CodeA Text;
   parameter CodeB Text;
   parameter CodeC Text;
   parameter CodeD Text;
   parameter CodeE Text;
   parameter CodeF Text;
   parameter CodeG Text;
   parameter CodeH Text;
   parameter CodeI Text;
   parameter CodeJ Text;
   parameter RentalAssetTransferAction Text;
   parameter CostDetailId Number;
   parameter PartTrackingSessionId Number;
   ludependencies = InventoryPartInStock;
}

action TransferFromRentalAsset {
   initialcheck InventoryPartInStockUivInitialCheck(Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter QtyOnhand Number;
   parameter CatchQtyOnhand Number;
   parameter CodeA Text;
   parameter CodeB Text;
   parameter CodeC Text;
   parameter CodeD Text;
   parameter CodeE Text;
   parameter CodeF Text;
   parameter CodeG Text;
   parameter CodeH Text;
   parameter CodeI Text;
   parameter CodeJ Text;
   parameter RentalAssetTransferAction Text;
   parameter CostDetailId Number;
   parameter PartTrackingSessionId Number;
   ludependencies = InventoryPartInStock;
}

action IdentifySerials {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
   parameter PartTrackingSessionId Number;
   ludependencies = InventoryPartInStock;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetCatchUnitEnabled Text {
   parameter Contract Text;
   parameter PartNo Text;
}
function CheckSameExpirationDate Date {
   parameter Selection Text;
}
function GetFromAvailabilityControlId Text {
   parameter SelectedAvailabilityCtrlIds Text;
}
function AvailableControlIds List < Entity(PartAvailabilityControl) > {
   where = "OBJSTATE = 'Active'";
}
function GetConnectedObjidsForInvPart Text {
   parameter Selection Text;
}
function GetSelectedCompany Text {
   parameter ContractList Text;
}
function GetAnySelectedContract Text {
   parameter ContractList Text;
}
function CheckDefineCostStructure Boolean {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter ConditionCode Text;
}
function CreateSelection Text {
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LocationNo Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter EngChgLevel Text;
   parameter WaivDevRejNo Text;
   parameter ActivitySeq Number;
   parameter HandlingUnitId Number;
}
action GetNavigatorParams Structure(NavigatorParamStructure) {
   initialcheck implementation;
   parameter ContractList Text;
   parameter Selection LongText;
}

action GetConnectedObjidsList Text {
   initialcheck implementation;
   parameter Selection LongText;
}

-------------------------------- STRUCTURES ---------------------------------
structure ChangeExpirationDateFromInvPartInStockStructure {
   attribute FromExpirationDate Date {
      label = "Current";
   }
   attribute ToExpirationDate Date {
      label = "New";
   }
}

structure ChangeAvailabilityControlStructure {
   attribute FromAvailabilityControlId Text;
   attribute ToAvailabilityControlId Text;

   reference FromAvailabilityControlIdRef(FromAvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
   reference ToAvailabilityControlIdRef(ToAvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId);
}

structure NavigatorParamStructure {
   attribute Contract Text;
   attribute ObjidList LongText;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


