-------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------------
-- 2019-05-17  SWiclk  SCUXXW4-19456, Concatenated PartNo-Description and Condition Code-Description.
-- 2019-05-14  DaZase  SCUXXW4-19629, Added initialcheck to all unbounded actions.
-- 2019-03-18  RakAlk  MFUXXW4-14942, Renamed GetInitialValues to GetDefineCostStructureInitialValues to avoid conflicts.
--                     Added DefineCostStructureOkCommandBase command to reuse Ok logic.
--                     Added additional columns to DefineCostStructureVirtual to support repeatable assistant.
-- 2019-02-23  JaThlk  SCUXXW4-5491, Converted from dlgDefineCostStructure using MTG Version: 1.34.
-------------------------------------------------------------------------------------------------------
fragment DefineCostStructureAssistant;
component INVENT;
layer Core;
description "Use this assistant to define the cost structure for parts at direct receipt. You can use the suggested cost structure, create your own structure or click Split to split the total cost per unit amongst lines in the existing structure.
Note that you should always maintain at least one line with a material type cost bucket, even if you do not use cost details.";

@DynamicComponentDependency COST
include fragment CostBucketInventLovSelector;
include fragment TemporaryPartCostDetailInitialCheck;
----------------------------- CLIENT FRAGMENTS ------------------------------
---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.34
// Enterprise Explorer Source: dlgDefineCostStructure
// Language: en-US

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant DefineCostStructureAssistant using DefineCostStructureSet {
   label = "Define Cost Structure";
   input(Contract, PartNo, ConfigurationId, LotBatchNo, SerialNo, ConditionCode, CallingProcess, CostDetailId);
   output(CostDetailId);
   init command {
      execute {
         call GetDefineCostStructureInitialValues(Contract, PartNo, SerialNo, ConditionCode, CallingProcess, CostDetailId) into InitialValuesStructure;
         set PartDescription = InitialValuesStructure.PartDescription;
         set ConditionCode = InitialValuesStructure.ConditionCode;
         set ConditionCodeDescription = InitialValuesStructure.ConditionCodeDescription;
         set CostModuleInstalled = InitialValuesStructure.CostModuleInstalled;
         set SerialLabel = InitialValuesStructure.SerialLabel;
         set CostDetailId = InitialValuesStructure.CostDetailId;
         set Company = InitialValuesStructure.Company;
         set ShopOrderReceipt = InitialValuesStructure.ShopOrderReceipt;
         set GenerateAutomatically = InitialValuesStructure.GenerateAutomatically;
         set PopulateWithCostDetailId = InitialValuesStructure.PopulateWithCostDetailId;
         set CreateNewLine = InitialValuesStructure.CreateNewLine;
      }
   }

   singlestep {
      group DefineCostStructureGroup;
      list CostDetailList(CostDetailArray) {
         visible = [CostModuleInstalled];
      }
   }
   command DefineCostStructureOkCommand;
   command DefineCostStructureCancelCommand;
   command GetDefaultCostCommand;
}



--------------------------------- COMMANDS ----------------------------------

command DefineCostStructureOkCommandBase for DefineCostStructureVirtual {
   label = "OK";
   enabled = [component.CostDetailList.RowCount > 0];
   variable CommandSuccess Boolean;
   execute {
      set CommandSuccess = false;
      if [CostModuleInstalled] {
         call SaveCostDetailStructure(Objkey, Cost, CostModuleInstalled);
         set CommandSuccess = true;
      }
      else {
         if [component.CostDetailList.RowCount > 1] {
            error("The system has created more than one cost record. Only one record is allowed when Costing is not installed.");
         }
         else {
            call SaveCostDetailStructure(Objkey, Cost, CostModuleInstalled);
            set CommandSuccess = true;
         }
      }
   }
}

command DefineCostStructureOkCommand clone DefineCostStructureOkCommandBase {
   label = "OK";
   enabled = [component.CostDetailList.RowCount > 0];
   execute {
      super;
      if[CommandSuccess] {
         exit OK;
      }

   }
}
command DefineCostStructureCancelCommand for DefineCostStructureVirtual {
   label = "Cancel";
   execute {
      call RemoveDetails(CostDetailId);
      exit CANCEL;
   }
}
command GetDefaultCostCommand for DefineCostStructureVirtual {
   label = "Get Defaults";
   visible = [not CostModuleInstalled];
   execute {
      call GenerateDefault(Objkey, Contract, PartNo, ConfigurationId, LotBatchNo, SerialNo, ConditionCode, CostDetailId, CallingProcess);
      exit;
   }
}
command GetDefaultsCommand for TemporaryPartCostDetailVirtual {
   label = "Get Defaults";
   enabled = [not ShopOrderReceipt and CostDetailId != null];
   mode = Global;
   execute {
      if [component.CostDetailList.RowCount > 0] {
         confirm("The existing cost structure will be lost.") {
            when OK {
               call GenerateDefault(Objkey, Contract, PartNo, ConfigurationId, LotBatchNo, SerialNo, ConditionCode, CostDetailId, CallingProcess);
            }
         }
      }
      else {
         call GenerateDefault(Objkey, Contract, PartNo, ConfigurationId, LotBatchNo, SerialNo, ConditionCode, CostDetailId, CallingProcess);
      }
   }
}

command SplitCostCommand for TemporaryPartCostDetailVirtual {
   label = "Split Cost";
   enabled = [not ShopOrderReceipt and CostModuleInstalled and CostDetailId != null];
   mode = Global;
   variable CostInputVar Number;

   execute {
      if [component.CostDetailList.RowCount > 0] {
         confirm("The existing cost structure will be lost.") {
            when OK {
               dialog CostInputDialog into(CostInputVar) {
                  when CANCEL {
                     exit;
                  }
               }
               call GenerateDetailsFromTotal(Objkey, Contract, PartNo, ConfigurationId, CostInputVar, CostDetailId);
            }
         }
      }
      else {
         dialog CostInputDialog into(CostInputVar) {
            when CANCEL {
               exit;
            }
         }
         call GenerateDetailsFromTotal(Objkey, Contract, PartNo, ConfigurationId, CostInputVar, CostDetailId);
      }
   }

}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group DefineCostStructureGroup for DefineCostStructureVirtual {
   label = "";
   computedfield PartNo {
      label = "Part No";
      value = "${PartNo} -  ${PartDescription}";
   }
   field Contract {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      label = "${SerialLabel}";
      size = Small;
   }

   computedfield ConditionCode {
      label = "Condition Code";
      value = "${ConditionCode} -  ${ConditionCodeDescription}";
      visible = [ConditionCode != null];

   }

   field Cost {
      editable = [not CostModuleInstalled];
      visible = [not CostModuleInstalled];
      required = [not CostModuleInstalled];
   }
   computedfield TotalCost {
      label = "Total Cost / Unit";
      value = "#{CostDetailArray.sum(UnitCost)}";
      type = Number;
      format = decimal;
      visible = [CostModuleInstalled];
   }

   field CostModuleInstalled {
      columnexclude = [true];
      visible = [false];
   }
   field CostDetailId {
      columnexclude = [true];
      visible = [false];
   }
}

group InputCostGroup for CostInputStructure {
   label = "";
   field TotalUnitCost;
}
----------------------------------- LISTS -----------------------------------
list CostDetailList for TemporaryPartCostDetailVirtual {
   label = "";
   crudactions {
      new {
         enabled = [CostModuleInstalled];

      }
      delete {
         enabled = [CostModuleInstalled];
      }
   }

   @DynamicComponentDependency COST
   lov CostBucketIdRef with ReferenceCostBucketInventLovSelector {
      size = Small;
      validate command {
         execute {
            call GetDefaultAccYear(Company, Contract, PartNo, CostBucketId) into AccountingYear;
         }
      }
   }
   @DynamicComponentDependency COST
   field CostBucketRef.PostingGroupId {
      size = Small;
      label = "Posting Cost Group ID";
   }
   lov CostSourceIdRef with ReferenceCostSourceSelector {
      size = Small;
      freeinput = [true];
   }
   field AccountingYear {
      size = Small;
   }
   field UnitCost {
      required = [CostModuleInstalled];
   }
   field CostDetailId {
      columnexclude = [true];
   }
   field Contract {
      columnexclude = [true];
   }
   field PartNo {
      columnexclude = [true];
   }
   field Company {
      columnexclude = [true];
   }
   field Generated {
      columnexclude = [true];
   }
   command GetDefaultsCommand;
   command SplitCostCommand;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CostInputDialog for CostInputStructure {
   label = "Split Into Cost Details";
   output(TotalUnitCost);
   group InputCostGroup;
   command Ok;
   command Cancel;
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------



--------------------------- PROJECTION FRAGMENTS ----------------------------

---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.34
// Enterprise Explorer Source: dlgDefineCostStructure
// Language: en-US

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset DefineCostStructureSet for DefineCostStructureVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action GenerateDetailsFromTotal {
   initialcheck UserAllowedSite(Contract);
   parameter Objkey Text;
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter TotalUnitCost Number;
   parameter CostDetailId Number;
   ludependencies = TemporaryPartCostDetailVirtual, DefineCostStructureVirtual;
}

action GenerateDefault {
   initialcheck UserAllowedSite(Contract);
   parameter Objkey Text;
   parameter Contract Text;
   parameter PartNo Text;
   parameter ConfigurationId Text;
   parameter LotBatchNo Text;
   parameter SerialNo Text;
   parameter ConditionCode Text;
   parameter CostDetailId Number;
   parameter CallingProcess Text;
   ludependencies = TemporaryPartCostDetailVirtual, DefineCostStructureVirtual;
}

action SaveCostDetailStructure {
   initialcheck implementation;
   parameter ParentObjkey Text;
   parameter Cost Number;
   parameter CostModuleInstalled Boolean;
   ludependencies = TemporaryPartCostDetailVirtual, DefineCostStructureVirtual;
}

action RemoveDetails {
   initialcheck implementation;
   parameter CostDetailId Number;
   ludependencies = TemporaryPartCostDetailVirtual, DefineCostStructureVirtual;
}

//! TODO: Should be refactored as a function!
action GetDefaultAccYear Text {
   initialcheck none;
   parameter Company Text;
   parameter Contract Text;
   parameter PartNo Text;
   parameter CostBucketId Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetDefineCostStructureInitialValues Structure(DefineCostStructureInitialValuesStructure) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter SerialNo Text;
   parameter ConditionCode Text;
   parameter CallingProcess Text;
   parameter CostDetailId Number;
}


-------------------------------- STRUCTURES ---------------------------------
structure DefineCostStructureInitialValuesStructure {
   attribute PartDescription Text;
   attribute ConditionCode Text;
   attribute ConditionCodeDescription Text;
   attribute CostModuleInstalled Boolean;
   attribute SerialLabel Text;
   attribute CostDetailId Number;
   attribute Company Text;
   attribute ShopOrderReceipt Boolean;
   attribute GenerateAutomatically Text;
   attribute PopulateWithCostDetailId Text;
   attribute CreateNewLine Text;

}



structure CostInputStructure {
   attribute TotalUnitCost Number;
}

--------------------------------- VIRTUALS ----------------------------------
virtual DefineCostStructureVirtual {
   attribute PartNo Text {
      label = "Part No";
      maxlength = 25;
      format = uppercase;
      editable = [false];
   }
   attribute PartDescription Text {
      label = "Description";
      maxlength = 200;
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
      editable = [false];
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
      maxlength = 50;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      maxlength = 20;
      format = uppercase;
      editable = [false];
   }
   attribute SerialNo Text {
      label = "Serial No(s)";
      maxlength = 55;
      format = uppercase;
      editable = [false];
   }
   attribute ConditionCode Text {
      label = "Condition Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      label = "Description";
      maxlength = 100;
      editable = [false];
   }
   attribute Cost Number {
      label = "Total Cost / Unit";
      format = ifscurrency;
   }
   attribute Company Text {
      maxlength = 100;
   }
   attribute CostModuleInstalled Boolean;
   attribute SerialLabel Text;
   attribute CostDetailId Number;
   attribute CallingProcess Text;
   attribute GenerateAutomatically Text;
   attribute PopulateWithCostDetailId Text;
   attribute ShopOrderReceipt Boolean;
   attribute CreateNewLine Text;


   attribute CostDetailIdList Text;
   attribute ParameterList Text;
   attribute NextParameterList Text;
   attribute CallerObjkey Text;


   array CostDetailArray(Contract, PartNo, Company, CostDetailId) to TemporaryPartCostDetailVirtual(Contract, PartNo, Company, CostDetailId);
}


virtual TemporaryPartCostDetailVirtual {
   attribute Contract Text;
   attribute PartNo Text;
   attribute Company Text;
   attribute CostBucketId Text {
      required = [true];
   }
   attribute CostSourceId Text {
      required = [true];
   }
   attribute AccountingYear Text;
   attribute CostDetailId Number;
   attribute UnitCost Number {
      label = "Cost / Unit";
      format = ifscurrency;
   }
   @DynamicComponentDependency COST
   attribute PostingGroupId Text {
      fetch = "Cost_Bucket_API.Get_Posting_Group_Id( contract, cost_bucket_id)";
   }
   attribute CostDetailSeq Text;
   attribute Generated Text;
   attribute CostModuleInstalled Boolean;

   @DynamicComponentDependency COST
   reference CostBucketRef(Contract, CostBucketId) to CostBucket(Contract, CostBucketId);
   @DynamicComponentDependency COST
   reference CostBucketIdRef(Contract, CostBucketId) to CostBucketInventLov(Contract, CostBucketId) {
      label = "Cost Bucket ID";
   }
   reference CostSourceIdRef(Company, CostSourceId) to CostSource(Company, CostSourceId) {
      label = "Cost Source ID";
   }
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

