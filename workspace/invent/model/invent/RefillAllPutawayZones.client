----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 2019-11-13  FRBESE  SCXTEND-1158, Changed TaskAssistantNavEntry navigator entry index from 600 to 1100.
-- 181105      RuLiLk  SCZ-5079, Added group Advance.
-- 181115      RAKUSE  SCUXXW4-5754, Converted dialog 'dlgPSheetRefillAllPutawayZones' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client RefillAllPutawayZones;
component INVENT;
layer Core;
projection RefillAllPutawayZonesHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseLov2Selector;
include fragment WarehouseBayLov2Selector;
include fragment InventoryPartLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent InventNavigator.WarehouseManagementLocation at index 1100 {
      label = "Refill All Putaway Zones";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      freeinput = [true];
      size = Medium;
      format = uppercase;
      description = ContractRef.ContractDesc;
   }
   lov WarehouseIdRef with ReferenceWarehouseLov2Selector {
      freeinput = [true];
      size = Small;
      //description = WarehouseIdRef.Description;
   }
   lov BayIdRef with ReferenceWarehouseBayLov2Selector {
      freeinput = [true];
      size = Small;
      format = uppercase;
      //description = BayIdRef.Description;
   }
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      freeinput = [true];
      size = Medium;
      format = uppercase;
      description = PartNoRef.Description;
   }
}

group Advance for TaskVirtual {
   label = "Advance";
   field OnlyAssortConnParts;
}


-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Refill All Putaway Zones";

   setup InitFromWarehouse {
      variable VarSiteId Text;
      variable VarWarehouseId Text;

      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;

         set Contract = VarSiteId;
         set WarehouseId = VarWarehouseId;
      }
   }
   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;

         if [Contract = null] {
            set Contract = Params.Contract;
            set WarehouseId = Params.WarehouseId;
            set BayId = Params.BayId;
            set PartNo = Params.PartNo;
         }
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         group Advance;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
         navigate back;
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
