-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2022-02-02  BwItLk  SC21R2-7297, Modified GetHandlingUnitInStockDetails by adding BayId, RowId, TierId, BinId to filter out data in Warehouse Navigator in each level.
-- 2020-03-10  JaThlk  SCXTEND-3341, Changed the TierNode datasource to WarehouseBayTier and added additional page filters to the nodes TierBinNode and RowBinNode.
-- 2019-06-27  Satglk  SCUXXW4-21831, Nested View added for InventoryPartInStockForHuList.
-- 2019-06-05  bajelk  SCUXXW4-14437, Added lov field in SiteSelector and Override UserAllowedSiteLovSelector as required.
-- 2019-06-06  JaThlk  SCUXXW4-21526, Removed the card for site in the header.
-- 2019-05-02  fandse  SCUXXW4-17693, Added details navigation for Parts In Stock tab and Handling Units In Stock tab.
-- 2018-11-05  KoDelk  SCUXXW4-6547, Converted from frmWarehouseNavigator using MTG Version 1.31.
-- 2018-12-21  KoDelk  SCUXXW4-14230, Moved warehouses command to a tab
-- 2018-12-21  KoDelk  SCUXXW4-14359, Moved Part in stocks and Handling units in stock command to tabs
-----------------------------------------------------------------------------
client WarehouseNavigator;
component INVENT;
layer Core;
projection WarehouseNavigatorHandling;

include fragment CopyWarehousesFromSite;
include fragment ClearStorageCharacteristics;
include fragment WarehousesTab;
include fragment InventoryLocationsTab;
include fragment InventoryPartInStockList;
include fragment HandlingUnitsInStockList;
include fragment ModifyCapacitiesAndConditionsAssistant;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry WarehouseNavigatorEntry parent InventNavigator.WarehouseManagementLocation at index 100 {
      label = "Warehouse Navigator";
      tree Tree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page SiteLevel using SiteInventInfoSet {
   label = "Warehouse Navigator";
   editmode = MultiField;
   selector SiteInventInfoSelector;
   group InventLocationSiteGroup;
   tabs {
      tab {
         label = "General";
         group TbGeneralGroup;
      }
      tab {
         label = "Capacities and Conditions";
         singleton CapacitiesAndConditionsSingleton(SiteInventInfoArray);
         markdowntext {
            text = "|             | Site Value | Operative Value | UoM |
            | ----------- | ---------: | --------------: | --: |
            | **Bin Cubic Capacity** | | | |
            | Width           | ${BinWidthCapacity} | | ${UomForLength} |
            | Height          | ${BinHeightCapacity} | | ${UomForLength} |
            | Depth           | ${BinDeptCapacity} | | ${UomForLength} |
            | Volume          | ${BinVolumeCapacity} | ${VolumeOppValue} | ${VolumeUom} |
            | **Carrying Capacity** | | | |
            | Bay             | ${BayCarryingCapacity} | | ${UomForWeight} |
            | Row             | ${RowCarryingCapacity} | | ${UomForWeight} |
            | Tier            | ${TierCarryingCapacity} | | ${UomForWeight} |
            | Bin             | ${BinCarryingCapacity} | | ${UomForWeight} |
            | **Storage Conditions** | | | |
            | Min Temperature | ${BinMinTemperature} | | ${UomForTemperature} |
            | Max Temperature | ${BinMaxTemperature} | | ${UomForTemperature} |
            | Min Humidity    | ${BinMinHumidity} | | ${Uom} |
            | Max Humidity    | ${BinMaxHumidity} | | ${Uom} |";
         }
      }
      tab {
         label = "Handling Unit Capacity";
         list SiteHuCapacityList(SiteHuCapacityArray);
      }
      tab {
         label = "Capabilities";
         list SiteStorageCapabilityList(SiteStorageCapabilityArray);
      }
      tab {
         label = "Warehouses";
         list WarehousesList(WarehouseArray);
      }
      tab {
         label = "Locations";
         list WarehouseBayBinList(WarehouseBayBinArray);
      }
      tab {
         label = "Parts In Stock";
         list InventoryPartInStockList(InventoryPartInStockArray) {
            details = "page/QuantityPerLocationDetails/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConfigurationId eq $[ConfigurationId] and LocationNo eq $[LocationNo] and LotBatchNo eq $[LotBatchNo] and SerialNo eq $[SerialNo] and EngChgLevel eq $[EngChgLevel] and WaivDevRejNo eq $[WaivDevRejNo] and ActivitySeq eq $[ActivitySeq] and HandlingUnitId eq $[HandlingUnitId]";
         }
      }
      tab {
         label = "Handling Units In Stock";
         list HandlingUnitsInStockList using GetHandlingUnitInStockDetails(HandlingUnitsSearchContext.ShowHuLevel, Contract, WarehouseId, BayId, RowId, TierId, BinId) {
            details = "tree/HandlingUnit/HandlingUnitStructureTree?$filter=HandlingUnitId eq $[HandlingUnitId]";
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
         }
         list InventoryPartInStockForHuList(InventoryPartsInStockForHuArray) bind HandlingUnitsInStockList {
            display = Nested;
         }
      }
   }

   commandgroup CommandGroupCmdGroup {

      command CopyWarehousesfromSiteCommand;
      command ClearCharsCommand;
   }
}


--------------------------------- COMMANDS ----------------------------------
command CopyWarehousesfromSiteCommand for SiteInventInfo {
   label = "Copy Warehouses from Site";
   execute {
      dialog CopySiteStructureDialog(Contract) {
         when OK {
            exit OK;
         }
      }
   }
}
command ClearCharsCommand for SiteInventInfo {
   label = "Clear Storage Characteristics";
   enabled = [true];
   execute {
      dialog ClearStorageCharacteristicsDialog("Site", Contract, Contract, "", "", "") {
         when OK {
            success("Cleared Storage Characteristics");
         }
      }
   }
}
command EditCapacitiesAndConditionsCommand for SiteInventInfo {
   label = "Edit";
   enabled = [true];
   icon = "edit";
   style = IconOnly;
   execute {
      assistant ConnectCustomersAssistant("SiteInventInfo", Contract, "", "", "", "", "") {
         when OK {
            success("Capacities and Conditions has been saved.");
         }
      }
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

----------------------------------- TREES -----------------------------------
tree Tree using SiteSet {
   label = "Warehouse Navigator";
   searchcontext SiteLevelsPageSearchContext {
      defaults = GetDefaultSearchContextForSite();
   }

   selector SiteSelector;
   rootnode SiteNode {
      label = "${Contract} - ${Description}";

      navigate {
         page SiteLevel {
            filter(Contract, Contract);
         }
      }
      connections {
         node WareHouseNode using GetWarehouses(Contract, SiteLevelsPageSearchContext.DoNotShowHidden);
      }
   }
   node WareHouseNode for Warehouse {
      label = "Warehouse ${WarehouseId}";
      navigate {
         page InventLocationWarehouse.Form {
            filter(WarehouseId, WarehouseId);
            filter(Contract, Contract);
         }
      }
      connections {
         node BayNode using GetWarehouseBay(Contract, WarehouseId, SiteLevelsPageSearchContext.DoNotShowHidden);
      }
   }
   node BayNode for WarehouseBay {
      label = "Bay ${BayId}";
      navigate {
         page InventLocationWarehouseBay.Form {
            filter(Contract, Contract);
            filter(WarehouseId, WarehouseId);
            filter(BayId, BayId);
         }
      }
      connections {
         node RowNode using GetWarehouseBayRow(Contract, WarehouseId, BayId, SiteLevelsPageSearchContext.DoNotShowHidden);
         node TierNode using GetWarehouseBayTier(Contract, WarehouseId, BayId, SiteLevelsPageSearchContext.DoNotShowHidden);
      }
   }
   node RowNode for WarehouseBayRow {
      label = "Row ${RowId}";
      navigate {
         page InventLocationWarehouseRow.Form {
            filter(Contract, Contract);
            filter(WarehouseId, WarehouseId);
            filter(BayId, BayId);
            filter(RowId, RowId);
         }
      }
      connections {
         node RowBinNode using GetWarehouseBayRowBin(Contract, WarehouseId, BayId, RowId, SiteLevelsPageSearchContext.DoNotShowHidden);
      }
   }
   node TierNode for WarehouseBayTier {
      label = "Tier ${TierId}";
      navigate {
         page InventLocationWarehouseTier.Form {
            filter(Contract, Contract);
            filter(WarehouseId, WarehouseId);
            filter(BayId, BayId);
            filter(TierId, TierId);
         }
      }
      connections {
         node TierBinNode using GetWarehouseBayTierBin(Contract, WarehouseId, BayId, TierId, SiteLevelsPageSearchContext.DoNotShowHidden);
      }
   }
   node RowBinNode for WarehouseBayBin {
      label = "Bin ${BinId} (Tier ${TierId})";
      navigate {
         page InventLocationWarehouseLoc.Form {
            filter(Contract, Contract);
            filter(WarehouseId, WarehouseId);
            filter(BayId, BayId);
            filter(RowId, RowId);
            filter(TierId, TierId);
            filter(BinId, BinId);
         }
      }
   }
   node TierBinNode for WarehouseBayBin {
      label = "Bin ${BinId} (Row ${RowId})";
      navigate {
         page InventLocationWarehouseLoc.Form {
            filter(Contract, Contract);
            filter(WarehouseId, WarehouseId);
            filter(BayId, BayId);
            filter(TierId, TierId);
            filter(RowId, RowId);
            filter(BinId, BinId);
         }
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector SiteSelector for Site {
   label = "${Contract} - ${Description}";
   lov ContractRef with UserAllowedSiteLovSelector {
      visible = [false];
   }
   static Description {
      visible = [true];
   }
}
@Override
selector UserAllowedSiteLovSelector for UserAllowedSiteLov {
   label = "${Contract}";
   static Contract;
   static ContractDesc {
      visible = [false];
   }
}
@Override
selector HandlingUnitTypeSelector for HandlingUnitType {
   label = "${Description}";
   static HandlingUnitTypeId;
   static Description;
}
@Override
selector SiteStorageCapabilitySelector for SiteStorageCapability {
   static Description {
      label = "Description";
   }
}

---------------------------------- GROUPS -----------------------------------
group InventLocationSiteGroup for SiteInventInfo {
   label = "Inventory Location Site";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractRef.ContractDesc;
      editable = [false];
   }
}
group TbGeneralGroup for SiteInventInfo {
   field ReceiptsBlockedDb {
      size = Small;
   }
   field ReceiptToOccupiedBlockedDb {
      size = Small;
   }
   field MixOfPartNumberBlockedDb {
      size = Small;
   }
   field MixOfCondCodesBlockedDb {
      size = Small;
   }
   field MixOfLotBatchNoBlockedDb {
      size = Small;
   }
   field ExcludeStorageReqValDb {
      size = Small;
   }
}
group GbReceipt_ControlGroup for SiteInventInfo {
   label = "Receipt Control";
   field ReceiptsBlockedDb {
      size = Small;
   }
   field ReceiptToOccupiedBlockedDb {
      size = Small;
   }
   field MixOfPartNumberBlockedDb {
      size = Small;
   }
   field MixOfCondCodesBlockedDb {
      size = Small;
   }
   field MixOfLotBatchNoBlockedDb {
      size = Small;
   }
   field ExcludeStorageReqValDb {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------

list SiteHuCapacityList for SiteHuCapacity {
   lov HandlingUnitTypeIdRef with HandlingUnitTypeSelector {
      description = Description;
   }
   field BinHuTypeCapacity;
}

list SiteStorageCapabilityList for SiteStorageCapability {
   lov StorageCapabilityIdRef with StorageCapabilitySelector using GetActiveStorageCapability {
      description = Description;
   }
}

------------------------------ SEARCH CONTEXT -------------------------------
searchcontext SiteLevelsPageSearchContext for SiteSearchContextStructure {
   label = "";
   radiogroup DoNotShowHidden;
}

--------------------------------- SINGLETON ---------------------------------
singleton CapacitiesAndConditionsSingleton for SiteInventInfo {
   commandgroup ModifyCommandGroup {
      command EditCapacitiesAndConditionsCommand;
   }
}