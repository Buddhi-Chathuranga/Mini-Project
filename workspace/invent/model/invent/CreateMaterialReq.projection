projection CreateMaterialReq;
component INVENT;
layer Core;
description "Allow casual user to create and view material requisitions for their default site. This will also allow the user to issue material from their default site.";
category Users;
include fragment InventoryPartInitialCheck;


--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210212  DiJwlk  SC2020R1-11549, Removed prefetch in IssueMaterialVirtual to optimize performance
--  190911  YasMlk  SCFALL19-225, Replaced get methods of programDesc, projectDesc, SubProjectDesc with GetProjectConnectionDescriptions to a single method call.
--  190909  YasMlk  SCFALL19-225, Removed projection attributes and added get methods for programDesc, projectDesc, SubProjectDesc as part of aurena improvements.
--  190530  ChFolk  SCUXXW4-21967, Modified array LocationSet to change the parameter from PartNo to LinePartNo.
--  180702  LaThlk  Bug 142755, Added LinesWithInvalidQty property to be used for identifying availability of lines with invalid quantities.
--  170829  niedlk  SCUXX-609, Added missing keys in references.
--  170419  Dinklk  APPUXX-11313, Removed unused function definitions GetContract, GetDueDate, IsAllowedCodepart, GetCompany,
--  170419          GetCodepartFunctionDb, GetCodeName, GetCodeno, CreateMRHeader and GetActivitySeq.
--  170419  Dinklk  APPUXX-11308, Added a new structure InitDetailsStruct and a new function GetAssistantInitInfo.
--  170407  Dinklk  APPUXX-8744, Added a prefetch attribute SerialTrOnlyRecIssDb to IssueMaterialVirtual. Added an attribute ToBeIdentifySerial to LocationVirtual.
--  170407          Added an attribute SerialTrOnlyRecIssDb to LinePartNoLov. Added a parameter ToBeIdentifySerial to MakePartResIssue.
--  170405  Dinklk  APPUXX-4869, Removed formatting instructions of IntCustomerNo in MaterialReqVirtual and IssueMaterialVirtual.
--  170310  Dinklk  APPUXX-10130, Modified LineActivityNoLov and LineSubProjectLov to fetch ProgramId. Modified MaterialReqVirtual
--  170310          to set LineProgramId upon selecting Subproject/ActivityNo/ActivitySeq.
--  170221  Dinklk  APPUXX-9117, Move casual user MR code.
--  170221  Dinklk  APPUXX-9117, Added DynamicComponentDependency PROJ to relavent places.
--  170213  Dinklk  APPUXX-9028, Removed workaround done to reset dependant fields.
--  170208  Dinklk  APPUXX-9227, Modified the action LinePartNoLov.AddPart to set UnitMeas as a not mandatory parameter.
--  170207  Dinklk  APPUXX-9163, Keyword ludependencies has set to the actions FinishCreateMR and FinishIssueMaterial.
--  170127  Dinklk  APPUXX-8707, Improvements needed for issue material assistant after List on assistant is supported.
--  170127  Dinklk  APPUXX-8743, Improvements needed for Create MR Assistant after List on assistant is supported.
--  170124  Dinklk  APPUXX-8622, Implementation of List in Create MR Assistant.
--  170118  Dinklk  APPUXX-8334, Implementation of List in Issue Material Assistant.
--  161228  Dinklk  APPUXX-7518, Material Requisition Detail page and ProjectConnectionDialog fine tuning.
--  161124  Dinklk  APPUXX-2836, Added a new attribute ProjectConnCodePart to MaterialReqAssistantStruct and IssueMaterialAssistantStruct.
--  161124          Declared the function GetCodepartFunctionDb.
--  161122  AyAmlk  APPUXX-6242, Altered files to align PR pages with MR pages.
--  161115  Dinklk  APPUXX-3398, Removed 'delete' capability of the entity MaterialReqLine.
--  161102  AyAmlk  APPUXX-5396, Handled client values of the attributes corresponds to badges.
--  161018  AyAmlk  APPUXX-5396, Fetched DB values for Pre Posting and Project Connection.
--  161017  Dinklk  APPUXX-4800, New entity set IssuePartNoLovs heas been defined.
--  161004  Dinklk  APPUXX-5342, Added code name attributes to IssueMaterialAssistantStruct.
--  161004  Dinklk  APPUXX-5343, Added code name attributes to PreAccountingStruct.
--  161004  Dinklk  APPUXX-5039, Added CodeName parameters to MaterialReqAssistantStruct and declared a function GetCodeName.
--  160929  Dinklk  APPUXX-5040, Added DestinationId and InternalDestination to IssueMaterialAssistantStruct
--  160927  Dinklk  APPUXX-5012, Added Project/Sub Project/Activity validation.
--  160914  Dinklk  APPUXX-4349, Further improvements to Issue Material Assistant.
--  160912  AyAmlk  APPUXX-4654, Fetched ConditionCodeUsage.
--  160908  Dinklk  APPUXX-4348, Added the new action IssueMaterial.
--  160907  Dinklk  APPUXX-4347, Introduced a new structure IssueMaterialAssistantStruct.
--  160905  Dinklk  APPUXX-4360, Entity sets MaterialRequisitions, MaterialRequisitionLines and ROMaterialRequisitionLines
--                  modified to filter records according to logged user.
--  160829  Dinklk  APPUXX-3537, Modified LinePartNoLov.SupplyCode to retrieve from the view itself.
--                  Modified UnitMeas to retrieve from Inventory_Part_API or Purchase_Part_Supplier_API.
--  160621  Dinklk  Added this revision
--  ------  ------  ---------------------------------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

--------------------------------- ENTITYSET ---------------------------------
entityset MaterialReqVirtualSet for MaterialReqVirtual;
entityset IssueMaterialVirtualSet for IssueMaterialVirtual;
entityset IntCustomerLovs for IntCustomerLov;
entityset InternalDestLovs for InternalDestLov;
entityset IssuePartNoLovs for LinePartNoLov {
   where = "Inventory_Part_API.Part_Exist(contract, part_no) = 1";
}
entityset LocationNoLovs for LocationNoLov;
entityset MaterialRequisitions for MaterialReq {
   where = "created_by_user_id = Fnd_Session_API.Get_Fnd_User";
}
entityset MaterialRequisitionLines for MaterialReqLine {
   where = "Material_Requisition_API.Get_Created_By_User_Id(order_class, order_no) = Fnd_Session_API.Get_Fnd_User";
}
@DynamicComponentDependency PROJ
entityset LineProgramLovs for LineProgramLov;
@DynamicComponentDependency PROJ
entityset LineProjectLovs for LineProjectLov;
@DynamicComponentDependency PROJ
entityset LineSubProjectLovs for LineSubProjectLov;
@DynamicComponentDependency PROJ
entityset LineActivityNoLovs for LineActivityNoLov;

---------------------------------- ACTIONS ----------------------------------

 -- Not called from client
action AddModifyCodeParts {
   initialcheck none;
   parameter PreAccountingId Number;
   parameter CodeA Text {
      required = [false];
   }
   parameter CodeB Text {
      required = [false];
   }
   parameter CodeC Text {
      required = [false];
   }
   parameter CodeD Text {
      required = [false];
   }
   parameter CodeE Text {
      required = [false];
   }
   parameter CodeF Text {
      required = [false];
   }
   parameter CodeG Text {
      required = [false];
   }
   parameter CodeH Text {
      required = [false];
   }
   parameter CodeI Text {
      required = [false];
   }
   parameter CodeJ Text {
      required = [false];
   }
   parameter Company Text;
   parameter StrCode Text;
   parameter Contract Text;
}

-- Not called from client
action MakePartResIssue {
   initialcheck InventoryPartInitialCheck(Contract, PartNo);
   parameter OrderClass Text {
      required = [false];
   }
   parameter OrderNo Text {
      required = [false];
   }
   parameter LineNo Text {
      required = [false];
   }
   parameter ReleaseNo Text {
      required = [false];
   }
   parameter LineItemNo Number {
      required = [false];
   }
   parameter PartNo Text {
      required = [false];
   }
   parameter Contract Text {
      required = [false];
   }
   parameter LocationNo Text {
      required = [false];
   }
   parameter LocConfigId Text {
      required = [false];
   }
   parameter LotBatchNo Text {
      required = [false];
   }
   parameter SerialNo Text {
      required = [false];
   }
   parameter WaivDevRejNo Text {
      required = [false];
   }
   parameter EngChgLevel Text {
      required = [false];
   }
   parameter ActivitySeq Number {
      required = [false];
   }
   parameter HandlingUnitId Number {
      required = [false];
   }
   parameter ReserveQry Number {
      required = [false];
   }
   parameter IssueQty Number {
      required = [false];
   }
   parameter IssueCatchQty Number {
      required = [false];
   }
   parameter Info Text {
      required = [false];
   }
   parameter ToBeIdentifySerial Number {
      required = [false];
   }
}

action FinishCreateMR Text {
   initialcheck implementation;
   parameter Objkey Text {
      required = [true];
   }
   ludependencies = MaterialRequisLine;
}

action FinishIssueMaterial Text {
   initialcheck implementation;
   parameter Objkey Text {
      required = [true];
   }
   ludependencies = MaterialRequisLine;
}

action AddPart {
   initialcheck UserAllowedSite(Contract);
   parameter Contract Text;
   parameter PartNo Text;
   parameter Objkey Text;
   parameter Description Text;
   parameter SupplyCode Text;
   parameter ConditionCode Text {
      required = [false];
   }
   parameter ConditionCodeDescription Text {
      required = [false];
   }
   parameter UnitMeas Text {
      required = [false];
   }
   parameter QtyDue Number;
   ludependencies = PartVirtual, MaterialReqVirtual;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetAssistantInitInfo Structure(InitDetailsStruct) {
   parameter StrCode Text;
   parameter StrLineCode Text;
}
@DynamicComponentDependency PROJ
function GetProjectConnectionDescriptions Structure(ProjectConnectionDescStruct) {
   parameter ActivitySeq Number;
}
------------------------------ ENTITY DETAILS -------------------------------
virtual MaterialReqVirtual {
   ludependencies = PartVirtual;

   attribute OrderNo Text;
   attribute OrderClass Text;
   attribute IntCustomerNo Text;
   attribute Wbs Text;
   attribute Company Text;
   attribute Contract Text;
   attribute PreAccountingId Number;
   attribute NoteId Number;
   attribute StatusCode Text;
   attribute DateEntered Date;
   attribute DueDate Date;
   attribute NoteText Text;
   attribute DestinationId Text;
   attribute InternalDestination Text {
      maxlength = 2000;
   }
   attribute TotalValue Number;
   attribute BlankText Text;
   attribute LinesExist Text;
   attribute LinesWithInvalidQty Text;

   attribute CodeA Text;
   attribute CodeB Text;
   attribute CodeC Text;
   attribute CodeD Text;
   attribute CodeE Text;
   attribute CodeF Text;
   attribute CodeG Text;
   attribute CodeH Text;
   attribute CodeI Text;
   attribute CodeJ Text;

   attribute CodeNameA Text;
   attribute CodeNameB Text;
   attribute CodeNameC Text;
   attribute CodeNameD Text;
   attribute CodeNameE Text;
   attribute CodeNameF Text;
   attribute CodeNameG Text;
   attribute CodeNameH Text;
   attribute CodeNameI Text;
   attribute CodeNameJ Text;
   attribute ProjectConnCodePart Text;

   attribute AllowCodeA Number;
   attribute AllowCodeB Number;
   attribute AllowCodeC Number;
   attribute AllowCodeD Number;
   attribute AllowCodeE Number;
   attribute AllowCodeF Number;
   attribute AllowCodeG Number;
   attribute AllowCodeH Number;
   attribute AllowCodeI Number;
   attribute AllowCodeJ Number;

   attribute AllowLineCodeA Number;
   attribute AllowLineCodeB Number;
   attribute AllowLineCodeC Number;
   attribute AllowLineCodeD Number;
   attribute AllowLineCodeE Number;
   attribute AllowLineCodeF Number;
   attribute AllowLineCodeG Number;
   attribute AllowLineCodeH Number;
   attribute AllowLineCodeI Number;
   attribute AllowLineCodeJ Number;

   attribute LineProgramId Text;
   attribute LineProjectId Text;
   attribute LineSubProjectId Text;
   attribute LineActivityNo Text;
   attribute LineActivitySeq Number;

   reference IntCustomerNoRef(IntCustomerNo) to IntCustomerLov(IntCustomerNo);
   reference InternalDestRef(Contract, DestinationId) to InternalDestLov(Contract, DestinationId) {
      copy Description to InternalDestination;
   }
   @DynamicComponentDependency PROJ
   reference LineProgramRef(Company, LineProgramId) to LineProgramLov(Company, ProgramId);
   @DynamicComponentDependency PROJ
   reference LineProjectRef(Company, LineProgramId, LineProjectId) to LineProjectLov(Company, ProgramId, ProjectId);
   @DynamicComponentDependency PROJ
   reference LineSubProjectRef(Company, LineProjectId, LineSubProjectId) to LineSubProjectLov(Company, ProjectId, SubProjectId) {
      copy ProgramId to LineProgramId;
   }
   @DynamicComponentDependency PROJ
   reference LineActivityNoRef(Company, LineProjectId, LineSubProjectId, LineActivityNo) to LineActivityNoLov(Company, ProjectId, SubProjectId, ActivityNo) {
      copy ActivitySeq to LineActivitySeq;
      copy ProgramId to LineProgramId;
   }
   @DynamicComponentDependency PROJ
   reference LineActivitySeqRef(Company, LineProjectId, LineSubProjectId, LineActivityNo, LineActivitySeq) to LineActivityNoLov(Company, ProjectId, SubProjectId, ActivityNo, ActivitySeq) {
      copy ProgramId to LineProgramId;
   }
   reference CodeARef(Company, CodeA) to CodeALov(Company, Account);
   reference CodeBRef(Company, CodeB) to CodeB(Company, CodeB);
   reference CodeCRef(Company, CodeC) to CodeC(Company, CodeC);
   reference CodeDRef(Company, CodeD) to CodeD(Company, CodeD);
   reference CodeERef(Company, CodeE) to CodeE(Company, CodeE);
   reference CodeFRef(Company, CodeF) to CodeF(Company, CodeF);
   reference CodeGRef(Company, CodeG) to CodeG(Company, CodeG);
   reference CodeHRef(Company, CodeH) to CodeH(Company, CodeH);
   reference CodeIRef(Company, CodeI) to CodeI(Company, CodeI);
   reference CodeJRef(Company, CodeJ) to CodeJ(Company, CodeJ);

   array PartSet(Contract) to LinePartNoLov(Contract);
   array AddedPartSet(Contract) to PartVirtual(Contract);
}

virtual PartVirtual {
   crud = Read, Update, Delete;

   attribute Contract Text;
   attribute PartNo Text;
   attribute Description Text {
      label = "Part Description";
   }
   attribute SupplyCode Text {
      label = "Supply Option";
   }
   attribute ConditionCode Text;
   attribute ConditionCodeDescription Text;
   attribute QtyDue Number {
      label = "Quantity";
   }
   attribute UnitMeas Text {
      label = "UoM";
   }

   attribute Gtin Text {
      label = "GTIN";
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(part_no)";
   }
}

virtual IssueMaterialVirtual {
   ludependencies = LocationVirtual;

   attribute OrderNo Text;
   attribute IntCustomerNo Text;
   attribute LinePartNo Text;
   attribute Contract Text;
   attribute Company Text;
   attribute DestinationId Text;
   attribute InternalDestination Text {
      maxlength = 2000;
   }
   attribute DueDate Date;
   attribute LineDueDate Date;
   attribute LocationNo Text;
   attribute LineQtyAdded Text;

   attribute CodeA Text;
   attribute CodeB Text;
   attribute CodeC Text;
   attribute CodeD Text;
   attribute CodeE Text;
   attribute CodeF Text;
   attribute CodeG Text;
   attribute CodeH Text;
   attribute CodeI Text;
   attribute CodeJ Text;
   attribute AllowCodeA Number;
   attribute AllowCodeB Number;
   attribute AllowCodeC Number;
   attribute AllowCodeD Number;
   attribute AllowCodeE Number;
   attribute AllowCodeF Number;
   attribute AllowCodeG Number;
   attribute AllowCodeH Number;
   attribute AllowCodeI Number;
   attribute AllowCodeJ Number;
   attribute CodeNameA Text;
   attribute CodeNameB Text;
   attribute CodeNameC Text;
   attribute CodeNameD Text;
   attribute CodeNameE Text;
   attribute CodeNameF Text;
   attribute CodeNameG Text;
   attribute CodeNameH Text;
   attribute CodeNameI Text;
   attribute CodeNameJ Text;
   attribute ProjectConnCodePart Text;

   attribute AllowLineCodeA Number;
   attribute AllowLineCodeB Number;
   attribute AllowLineCodeC Number;
   attribute AllowLineCodeD Number;
   attribute AllowLineCodeE Number;
   attribute AllowLineCodeF Number;
   attribute AllowLineCodeG Number;
   attribute AllowLineCodeH Number;
   attribute AllowLineCodeI Number;
   attribute AllowLineCodeJ Number;

   attribute ProgramId Text;
   attribute ProjectId Text;
   attribute SubProjectId Text;
   attribute ActivityNo Text;
   attribute ActivitySeq Number;

   attribute LineUnitMeas Text;

   reference IntCustomerNoRef(IntCustomerNo) to IntCustomerLov(IntCustomerNo);
   reference PartNoRef(Contract, LinePartNo) to LinePartNoLov(Contract, PartNo) {
      copy UnitMeas to LineUnitMeas;
   }
   reference InternalDestRef(Contract, DestinationId) to InternalDestLov(Contract, DestinationId) {
      copy Description to InternalDestination;
   }
   reference CodeARef(Company, CodeA) to CodeALov(Company, Account);
   reference CodeBRef(Company, CodeB) to CodeB(Company, CodeB);
   reference CodeCRef(Company, CodeC) to CodeC(Company, CodeC);
   reference CodeDRef(Company, CodeD) to CodeD(Company, CodeD);
   reference CodeERef(Company, CodeE) to CodeE(Company, CodeE);
   reference CodeFRef(Company, CodeF) to CodeF(Company, CodeF);
   reference CodeGRef(Company, CodeG) to CodeG(Company, CodeG);
   reference CodeHRef(Company, CodeH) to CodeH(Company, CodeH);
   reference CodeIRef(Company, CodeI) to CodeI(Company, CodeI);
   reference CodeJRef(Company, CodeJ) to CodeJ(Company, CodeJ);
   reference LocationNoRef(Contract, LinePartNo, LocationNo) to LocationNoLov(Contract, PartNo, LocationNo);
   @DynamicComponentDependency PROJ
   reference ProgramRef(Company, ProgramId) to LineProgramLov(Company, ProgramId);
   @DynamicComponentDependency PROJ
   reference ProjectRef(Company, ProgramId, ProjectId) to LineProjectLov(Company, ProgramId, ProjectId);
   @DynamicComponentDependency PROJ
   reference SubProjectRef(Company, ProjectId, SubProjectId) to LineSubProjectLov(Company, ProjectId, SubProjectId) {
      copy ProgramId to ProgramId;
   }
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(Company, ProjectId, SubProjectId, ActivityNo) to LineActivityNoLov(Company, ProjectId, SubProjectId, ActivityNo) {
      copy ActivitySeq to ActivitySeq;
      copy ProgramId to ProgramId;
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(Company, ProjectId, SubProjectId, ActivityNo, ActivitySeq) to LineActivityNoLov(Company, ProjectId, SubProjectId, ActivityNo, ActivitySeq) {
      copy ProgramId to ProgramId;
   }

   array LocationSet(Contract, LinePartNo) to LocationVirtual(Contract, PartNo);
}

virtual LocationVirtual {
   crud = Read, Update;
   ludependencies = IssueMaterialVirtual;

   attribute PartNo Text;
   attribute Contract Text;
   attribute ConfigurationId Text;
   attribute LocationNo Text;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute SerialNo Text;
   attribute EngChgLevel Text {
      label = "Revision No";
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R";
   }
   attribute ActivitySeq Number;
   attribute HandlingUnitId Number;
   attribute IssueQty Number {
      label = "Qty to Issue";
   }
   attribute IssueCatchQty Number {
      label = "Catch Qty to Issue";
   }
   attribute CatchUom Text;
   attribute AvailQty Number {
      label = "Available Qty";
   }
   attribute UnitMeas Text {
      label = "UoM";
   }
   attribute ExpirationDate Date;
   attribute ConditionCode Text;
   attribute ConditionCodeDescription Text;
   attribute SelectSerial Boolean;
   attribute ToBeIdentifySerial Number;
}

@Override
entity IntCustomerLov using InternalCustomer {
   crud = Read;
   use attributes = Name;
}

@Override
entity MaterialReq using MaterialRequisition {
   crud = Read;

   use attributes = Contract, PreAccountingId, DestinationId, InternalDestination, IntCustomerNo, DueDate, DateEntered;

   attribute Status Text {
      label = "Status";
      fetch = "status_code";
   }
   attribute StatusDb Text {
      label = "Status Db";
      fetch = "status_code_db";
   }

   reference ContractRef(Contract) to ContractLov(Contract);
   reference IntCustomerNoRef(IntCustomerNo) to IntCustomerLov(IntCustomerNo);
   reference InternalDestRef(Contract, DestinationId) to InternalDestLov(Contract, DestinationId);

   array Lines(OrderNo) to MaterialReqLine(OrderNo);
}

@Override
entity MaterialReqLine using MaterialRequisLine {
   crud = Read;

   use attributes = PartNo, PreAccountingId, QtyDue, ConditionCode, ActivitySeq, QtyShipped, UnitMeas;
   attribute Contract Text {
      label = "Site";
   }
   attribute DueDate Date;

   attribute SupplyCode Text {
      label = "Supply Option";
      fetch = "supply_code";
   }
   attribute Status Text {
      label = "Status";
      fetch = "status_code";
   }
   attribute StatusDb Text {
      label = "Status Db";
      fetch = "status_code_db";
   }
   attribute Gtin Text {
      label = "GTIN";
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(part_no)";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(contract)";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Activity_API.Get_Program_Id(activity_seq)";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      fetch = "Activity_API.Get_Project_Id(activity_seq)";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "Activity_API.Get_Sub_Project_Id(activity_seq)";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "Activity_API.Get_Activity_No(activity_seq)";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDesc Text {
      label = "Activity";
      fetch = "Activity_API.Get_Description(activity_seq)";
   }
   attribute InventoryUoM Text {
      label = "Inventory UoM";
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
   }
   attribute CatchUoM Text {
      label = "Catch UoM";
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, part_no)";
   }
   attribute ProjectConnectedDb Text {
      fetch = "NVL2(activity_seq, 'TRUE', 'FALSE')";
   }
   attribute PostingConnectedDb Number {
      fetch = "Pre_Accounting_API.Check_Exist(pre_accounting_id)";
   }
   attribute AllowCodeA Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('A', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeB Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('B', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeC Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('C', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeD Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('D', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeE Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('E', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeF Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('F', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeG Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('G', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeH Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('H', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeI Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('I', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute AllowCodeJ Number {
      fetch = "Pre_Accounting_API.Is_Allowed_Codepart('J', 'M107', '', Site_API.Get_Company(contract))";
   }
   attribute CodeNameA Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'A')";
   }
   attribute CodeNameB Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'B')";
   }
   attribute CodeNameC Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'C')";
   }
   attribute CodeNameD Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'D')";
   }
   attribute CodeNameE Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'E')";
   }
   attribute CodeNameF Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'F')";
   }
   attribute CodeNameG Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'G')";
   }
   attribute CodeNameH Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'H')";
   }
   attribute CodeNameI Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'I')";
   }
   attribute CodeNameJ Text {
      fetch = "Accounting_Code_Parts_API.Get_Code_Name(Site_API.Get_Company(contract), 'J')";
   }

   reference PreAccountingRef(PreAccountingId) to PreAccounting(PreAccountingId);
   reference LinePartNoRef(Contract, PartNo) to LinePartNoLov(Contract, PartNo) {
      copy SupplyCode to SupplyCode;
      copy UnitMeas to UnitMeas;
   }
   reference LineConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
}

---------------------------------- QUERIES ----------------------------------
query ContractLov {
   from = "user_allowed_site_lov";
   lu = UserAllowedSite;
   keys = Contract;

   attribute Contract Text;
   attribute ContractDesc Text;

   attribute Company Text {
      fetch = "Site_API.Get_Company(contract)";
   }
}

query InternalDestLov {
   from = "internal_destination_lov";
   lu = InternalDestination;
   keys = Contract, DestinationId;

   attribute DestinationId Text;
   attribute Contract Text;
   attribute Description Text;
   attribute Objstate Enumeration(InternalDestinationState);
}

query LinePartNoLov {
   from = "inventory_part_lov_mrp";
   lu = InventoryPart;
   where = "Part_Catalog_API.Get_Configurable_Db(part_no) = 'NOT CONFIGURED'";
   keys = Contract, PartNo;

   attribute Contract Text;
   attribute PartNo Text;
   attribute Description Text;
   attribute SupplyCode Text {
      label = "Supply Option";
   }

   attribute UnitMeas Text {
      label = "UoM";
      fetch = "Material_Requis_Line_API.Get_Part_Unit_Meas(contract, part_no)";
   }
   attribute SerialTrOnlyRecIssDb Text {
      fetch = "Part_Catalog_API.Get_Receipt_Issue_Serial_Tr_Db(part_no)";
   }
   attribute SerialTrackingCodeDb Text {
      fetch = "Part_Catalog_API.Get_Serial_Tracking_Code_Db(part_no)";
   }
   attribute LotTrackingCodeDb Text {
      fetch = "Part_Catalog_API.Get_Lot_Tracking_Code_Db(part_no)";
   }
   attribute ConditionCodeUsageDb Text {
      fetch = "Part_Catalog_API.Get_Condition_Code_Usage_Db(part_no)";
   }
   attribute CatchUnitEnabledDb Text {
      fetch = "Part_Catalog_API.Get_Catch_Unit_Enabled_Db(part_no)";
   }
   attribute AvailableQty Number {
      fetch = "Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract, part_no, '*', 'AVAILABLE')";
   }
   attribute NetWeight Number {
      fetch = "Part_Catalog_API.Get_Weight_Net(part_no)";
   }
   attribute WeightUom Text {
      fetch = "Part_Catalog_API.Get_Uom_For_Weight_Net(part_no)";
   }
   attribute NetVolume Number {
      fetch = "Part_Catalog_API.Get_Volume_Net(part_no)";
   }
   attribute VolumeUom Text {
      fetch = "Part_Catalog_API.Get_Uom_For_Volume_Net(part_no)";
   }
   attribute Gtin Text {
      label = "GTIN";
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(part_no)";
   }
}

query CodeALov {
   from = "pre_account_codepart_a_mpccom";
   keys = Company, Account;

   attribute Company Text;
   attribute Account Text;
   attribute Description Text;
}

@DynamicComponentDependency PROJ
query LineProgramLov {
   from = "project_program_lov";
   where = "objstate in ('Active')";
   keys = Company, ProgramId;

   attribute Company Text;
   attribute ProgramId Text;
   attribute Description Text;
}

@DynamicComponentDependency PROJ
query LineProjectLov {
   from = "project_lov";
   keys = Company, ProjectId;
   where = "objstate IN ('Approved', 'Started')
            AND project_id IN (SELECT m.project_id
                                 FROM manual_activity_con_proj m, project_site s
                                WHERE m.project_id = s.project_id
                                  AND m.proj_lu_name_db = 'MTRLREQLINE'
                                  AND m.manual_connection_db = 'ALLOWED'
                                  AND (EXISTS (SELECT 1
                                                 FROM user_allowed_site_pub ua
                                                WHERE s.site = ua.site))
                                  AND (s.site = '' OR '' IS NULL))";

   attribute Company Text;
   attribute ProgramId Text;
   attribute ProjectId Text;
   attribute Name Text;
   attribute Description Text;
}

@DynamicComponentDependency PROJ
query LineSubProjectLov {
   from = "sub_project";
   keys = ProjectId, SubProjectId;

   where = "project_id is not null
            AND Project_API.Get_Objstate(project_id) IN ('Approved', 'Started')
            AND project_id IN (SELECT m.project_id
                                 FROM manual_activity_con_proj m, project_site s
                                WHERE m.project_id = s.project_id
                                  AND m.proj_lu_name_db = 'MTRLREQLINE'
                                  AND m.manual_connection_db = 'ALLOWED'
                                  AND (EXISTS (SELECT 1
                                                 FROM user_allowed_site_pub ua
                                                WHERE s.site = ua.site))
                                  AND (s.site = '' OR '' IS NULL))";

   attribute ProjectId Text;
   attribute SubProjectId Text;
   attribute Description Text;

   attribute Company Text {
      fetch = "Project_API.Get_Company(project_id)";
   }
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(project_id)";
   }
}

@DynamicComponentDependency PROJ
query LineActivityNoLov {
   from = "activity_proj_connect";
   where = "objstate_proj IN ('Approved', 'Started')
            AND project_id IN (SELECT m.project_id
                                 FROM manual_activity_con_proj m, project_site s
                                WHERE m.project_id = s.project_id
                                  AND m.proj_lu_name_db = 'MTRLREQLINE'
                                  AND m.manual_connection_db = 'ALLOWED'
                                  AND (EXISTS (SELECT 1
                                                 FROM user_allowed_site_pub ua
                                                WHERE s.site = ua.site))
                                  AND (s.site = '' OR '' IS NULL))";
   keys = ProjectId, SubProjectId, ActivityNo, ActivitySeq;

   attribute ProgramId Text;
   attribute ProjectId Text;
   attribute SubProjectId Text;
   attribute ActivityNo Text;
   attribute ActivitySeq Number;
   attribute Description Text;

   attribute Company Text {
      fetch = "Project_API.Get_Company(project_id)";
   }
}

query LocationNoLov {
   from = "inventory_part_in_stock_lov29";
   keys = Contract, PartNo, LocationNo;

   attribute Contract Text;
   attribute PartNo Text;
   attribute LocationNo Text;
   attribute Warehouse Text;
   attribute BayNo Text;
   attribute RowNo Text;
   attribute TierNo Text;
   attribute BinNo Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetConditionCodeDescription Text {
   parameter ConditionCode Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure AddPartStruct {
   attribute PartNo Text;
   attribute PartDescription Text;
   attribute QtyDue Number {
      label = "Quantity";
   }
   attribute UnitMeas Text {
      label = "UoM";
   }
   attribute ConditionCodeUsageDb Text;
   attribute ConditionCode Text;
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(condition_code)";
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
}

structure InitDetailsStruct {
   attribute Contract Text;
   attribute Company Text;
   attribute DueDate Date;
   attribute ProjectConnCodePart Text;

   attribute AllowCodeA Number;
   attribute AllowCodeB Number;
   attribute AllowCodeC Number;
   attribute AllowCodeD Number;
   attribute AllowCodeE Number;
   attribute AllowCodeF Number;
   attribute AllowCodeG Number;
   attribute AllowCodeH Number;
   attribute AllowCodeI Number;
   attribute AllowCodeJ Number;

   attribute AllowLineCodeA Number;
   attribute AllowLineCodeB Number;
   attribute AllowLineCodeC Number;
   attribute AllowLineCodeD Number;
   attribute AllowLineCodeE Number;
   attribute AllowLineCodeF Number;
   attribute AllowLineCodeG Number;
   attribute AllowLineCodeH Number;
   attribute AllowLineCodeI Number;
   attribute AllowLineCodeJ Number;

   attribute CodeNameA Text;
   attribute CodeNameB Text;
   attribute CodeNameC Text;
   attribute CodeNameD Text;
   attribute CodeNameE Text;
   attribute CodeNameF Text;
   attribute CodeNameG Text;
   attribute CodeNameH Text;
   attribute CodeNameI Text;
   attribute CodeNameJ Text;
}

structure ProjectConnectionStruct {
   attribute ProgramId Text;
   attribute ProjectId Text;
   attribute SubProjectId Text;
   attribute ActivityNo Text;
   attribute ActivitySeq Number;
   attribute Company Text;
   attribute ProgramDesc Text;
   attribute ProjectDesc Text;
   attribute SubProjectDesc Text;
   attribute ActivityDesc Text;

   @DynamicComponentDependency PROJ
   reference LineProgramRef(Company, ProgramId) to LineProgramLov(Company, ProgramId);
   @DynamicComponentDependency PROJ
   reference LineProjectRef(ProgramId, ProjectId) to LineProjectLov(ProgramId, ProjectId);
   @DynamicComponentDependency PROJ
   reference LineSubProjectRef(ProjectId, SubProjectId) to LineSubProjectLov(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference LineActivityNoRef(ProjectId, SubProjectId, ActivityNo) to LineActivityNoLov(ProjectId, SubProjectId, ActivityNo);
   @DynamicComponentDependency PROJ
   reference LineActivitySeqRef(ProjectId, SubProjectId, ActivitySeq) to LineActivityNoLov(ProjectId, SubProjectId, ActivitySeq);
}

structure PreAccountingStruct {
   attribute PreAccountingId Number;
   attribute CodeA Text;
   attribute CodeB Text;
   attribute CodeC Text;
   attribute CodeD Text;
   attribute CodeE Text;
   attribute CodeF Text;
   attribute CodeG Text;
   attribute CodeH Text;
   attribute CodeI Text;
   attribute CodeJ Text;
   attribute ActivitySeq Number;
   attribute Company Text;

   attribute AllowCodeA Number;
   attribute AllowCodeB Number;
   attribute AllowCodeC Number;
   attribute AllowCodeD Number;
   attribute AllowCodeE Number;
   attribute AllowCodeF Number;
   attribute AllowCodeG Number;
   attribute AllowCodeH Number;
   attribute AllowCodeI Number;
   attribute AllowCodeJ Number;

   attribute CodeNameA Text;
   attribute CodeNameB Text;
   attribute CodeNameC Text;
   attribute CodeNameD Text;
   attribute CodeNameE Text;
   attribute CodeNameF Text;
   attribute CodeNameG Text;
   attribute CodeNameH Text;
   attribute CodeNameI Text;
   attribute CodeNameJ Text;

   reference CodeARef(Company, CodeA) to CodeALov(Company, Account);
   reference CodeBRef(Company, CodeB) to CodeB(Company, CodeB);
   reference CodeCRef(Company, CodeC) to CodeC(Company, CodeC);
   reference CodeDRef(Company, CodeD) to CodeD(Company, CodeD);
   reference CodeERef(Company, CodeE) to CodeE(Company, CodeE);
   reference CodeFRef(Company, CodeF) to CodeF(Company, CodeF);
   reference CodeGRef(Company, CodeG) to CodeG(Company, CodeG);
   reference CodeHRef(Company, CodeH) to CodeH(Company, CodeH);
   reference CodeIRef(Company, CodeI) to CodeI(Company, CodeI);
   reference CodeJRef(Company, CodeJ) to CodeJ(Company, CodeJ);
}

structure ProjectConnectionDescStruct {
   attribute ProgramDesc Text;
   attribute ProjectDesc Text;
   attribute SubProjectDesc Text;
}
