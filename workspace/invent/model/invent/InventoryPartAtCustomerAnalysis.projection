--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-07-24  ChFolk  SCUXXW4-22798, Modified project information to increase performance.
-- 2019-03-13  ChFolk  SCUXXW4-17190, Included dynamic dependency anotations where necessary.
-- 2019-03-07  ChFolk  SCUXXW4-16871, Added dynamic dependency where it is missing.
-- 2018-03-22  SURBLK  SCUXXW4-7072, Converted from tbwOverviewInvPartAtCustomer using MTG Version: 1.15
--------------------------------------------------------------------------------------

projection InventoryPartAtCustomerAnalysis;
component INVENT;
layer Core;
description "Use this API to view information about the inventory parts delivered to customer location via the delivery confirmation, customer consignment or part exchange process types. Parts in inventory part at customer will be company-owned until they are delivery-confirmed, consumed, approved or scrapped by the customer";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InventoryPartAtCustomers for InventoryPartAtCustomer;

------------------------------ ENTITY DETAILS -------------------------------


---------------------------------- QUERIES ----------------------------------

@Override
query InventoryPartAtCustomer {
   from = "inventory_part_at_customer_ovw";
   lu = InventoryPartAtCustomer;
   keys = Contract, PartNo, HandlingUnitId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, CustomerNo, AddrNo, ProcessType {
      where = "expiration_date = :ExpirationDate";

   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute PartDescription Text {
      fetch = "PART_DESCRIPTION";
      label = "Part Description";
      maxlength = 200;
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      maxlength = 100;
   }
   attribute HandlingUnitId Number {
      fetch = "HANDLING_UNIT_ID";
      label = "Handling Unit ID";
      required = [true];
   }
   attribute TypeDescription Text {
      fetch = "HANDLING_UNIT_TYPE_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(HANDLING_UNIT_ID))";
      label = "Type Description";
      maxlength = 2000;
   }
   attribute LotBatchNo Text {
      fetch = "LOT_BATCH_NO";
      label = "Lot/Batch No";
      maxlength = 20;
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE";
      label = "Condition Code";
      maxlength = 10;
      format = uppercase;
   }
   attribute ConditionCodeDesc Text {
      fetch = "CONDITION_CODE_DESC";
      label = "Condition Code Description";
      maxlength = 35;
   }
   attribute EngChgLevel Text {
      fetch = "ENG_CHG_LEVEL";
      label = "Revision No";
      maxlength = 6;
   }
   attribute WaivDevRejNo Text {
      fetch = "WAIV_DEV_REJ_NO";
      label = "W/D/R Number";
      maxlength = 15;
   }
   attribute ActivitySeq Number {
      fetch = "ACTIVITY_SEQ";
      label = "Activity Sequence";
   }
   attribute CustomerNo Text {
      fetch = "CUSTOMER_NO";
      label = "Customer No";
      maxlength = 20;
      format = uppercase;
   }
   attribute CustomerName Text {
      fetch = "CUSTOMER_NAME";
      label = "Customer Name";
      maxlength = 100;
   }
   attribute AddrNo Text {
      fetch = "ADDR_NO";
      label = "Del Addr ID";
      maxlength = 50;
   }
   attribute ExpirationDate Date {
      fetch = "EXPIRATION_DATE";
      label = "Expiration Date";
   }
   attribute ProcessType Enumeration(StockAtCustProcessType) {
      fetch = "PROCESS_TYPE_DB";
      label = "Process Type";
   }
   attribute Quantity Number {
      fetch = "QUANTITY";
      label = "Qty";
   }
   attribute UnitMeas Text {
      fetch = "UNIT_MEAS";
      label = "UoM";
      maxlength = 10;
      format = uppercase;
   }
   attribute UnifiedQty Number {
      fetch = "UNIFIED_QTY";
      label = "Unified Qty";
   }
   attribute UnifiedUom Text {
      fetch = "UNIFIED_UOM";
      label = "Unified UoM";
      maxlength = 10;
      format = uppercase;
   }
   attribute UnitCost Number {
      fetch = "UNIT_COST";
      label = "Unit Cost";
      format = ifscurrency;
   }
   attribute TotalInvCost Number {
      fetch = "TOTAL_INV_COST";
      label = "Total Inventory Value";
      format = ifscurrency;
   }
   attribute BaseCurrency Text {
      fetch = "BASE_CURRENCY";
      label = "Base Currency";
      maxlength = 3;
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Id(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Sub_Project_Description(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Activity_No(ACTIVITY_SEQ))";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Description(ACTIVITY_SEQ))";
      maxlength = 200;
      editable = [false];
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      maxlength = 2000;
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;

   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ProgramIdRef(ProgramId) to ProjectProgramGlobal(ProgramId);
   @DynamicComponentDependency PROJ
   reference SubProjectIdRef(ProjectId, SubProjectId) to SubProject(ProjectId, SubProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityNoRef(ActivitySeq, ActivityNo) to Activity(ActivitySeq, ActivityNo);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
}
