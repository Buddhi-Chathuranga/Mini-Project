----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 190611      DIKULK  SCUXXW4-16899, Changed label of field SerialsOnly.
-- 181204      RAKUSE  SCUXXW4-5719, Converted dialog 'dlgPSheetCleanupInventory' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CleanupofInventory;
component INVENT;
layer Core;
projection CleanupofInventory;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency PROJ
include fragment ProjectLovSelector;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent InventNavigator.WarehouseManagementQuantityinStock at index 400 {
      label = "Cleanup of Inventory";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      freeinput = [true];
      label = "Site";
   }
   @DynamicComponentDependency PROJ
   lov ProjectIdRef with ReferenceProjectLovSelector {
      freeinput = [true];
      label = "Project ID";
   }
   field NumberOfDays;
   field LocationType;
   field SerialsOnly {
      label = "Serial Numbers Only";

   }
   field ConfigurationsOnly;
   field HandlingUnitsOnly;
}


-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Cleanup of Inventory";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         set NumberOfDays = Params.NumberOfDays;
         set Site = Params.Site;
         set ProjectId = Params.ProjectId;
         set LocationType = Params.LocationType;
         set SerialsOnly = Params.SerialsOnly;
         set ConfigurationsOnly = Params.ConfigurationsOnly;
         set HandlingUnitsOnly = Params.HandlingUnitsOnly;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(NumberOfDays != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
