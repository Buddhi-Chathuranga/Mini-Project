-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-06-28  RaMolk  SC21R2-1626, Removed DynamicComponentDependency for INVPLA for IPRActive in InventoryPart and InventoryPartPlanning entities.
-- 2019-08-28  ChFolk  SCUXXW4-23117, Used Enumeration for SafetyStockAuto, OrderPointQtyAuto, LotSizeAuto and SplitManufAcquired instead of Boolean.
-- 2019-03-09  ShKolk  SCUXXW4-6241, Converted from frmInventoryPartPlanning using MTG Version: 1.34
-----------------------------------------------------------------------------
projection InventoryPartPlanningDataHandling;
component INVENT;
layer Core;
description "Use this API to enter part planning data.";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
@DynamicComponentDependency INVPLA
include fragment InventoryPartReplenishmentRefresh;
@DynamicComponentDependency INVPLA
include fragment IPRParametersTab;
@DynamicComponentDependency MFGSTD
include fragment StrategicSafeStockPart;
@DynamicComponentDependency MRP
include fragment DdmrpBufferPartAttrib;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InventoryPartSet for InventoryPart;
entityset InventoryPartPlanningSet for InventoryPartPlanning;
entityset EditPlanningHierarchyVirtualSet for EditPlanningHierarchyVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity InventoryPart {
   crud = Read;
   keys = Contract, PartNo;

   attribute PlanningMethod Text {
      fetch = "Inventory_Part_Planning_API.Get_Planning_Method(contract,part_no)";
   }
   @DynamicComponentDependency MRP
   attribute LogsExist Boolean("TRUE", "FALSE") {
      fetch = "Ddmrp_Log_API.Logs_Exist(contract, part_no)";
      label = "Logs Exist";
      editable = [false];
   }
   attribute IPRActive Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Ipr_Active(contract)";
      editable = [false];
   }
   reference SiteInventInfoRef(Contract) to SiteInventInfo(Contract) {
      label = "Site";
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part No";
   }

   array InventoryPartPlanningArray(Contract, PartNo) to InventoryPartPlanning(Contract, PartNo);
   @DynamicComponentDependency INVPLA
   array InventoryPartInvplaInfoArray(Contract, PartNo) to InventoryPartInvplaInfo(Contract, PartNo);
   @DynamicComponentDependency MRP
   array DdmrpBufferPartAttribArray(Contract, PartNo) to DdmrpBufferPartAttrib(Contract, PartNo);
   @DynamicComponentDependency MRP
   array DdmrpZoneChartDataArray(Contract, PartNo) to DdmrpZoneChartData(Contract, PartNo);
   @DynamicComponentDependency MFGSTD
   array StrategicSafeStockPartArray(Contract, PartNo) to StrategicSafeStockPart(Contract, PartNo);
}

@Override
entity InventoryPartPlanning {
   crud = Read, Update;
   supportwarnings = [true];
   keys = Contract, PartNo;
   use attributes = OrderPointQty, LotSize, MinOrderQty, MaxOrderQty, MulOrderQty, ProposalRelease, SchedCapacity;
   attribute PlanningMethod Text {
      format = uppercase;
   }
   attribute SafetyStock Number {
      maxlength = 11;
   }
   attribute SafetyLeadTime Integer;
   attribute MaxweekSupply Number {
      label = "Order Cover Time";
      maxlength = 11;
   }
   attribute PlanningMethodAutoDb Boolean("TRUE", "FALSE") {
      fetch = "planning_method_auto_db";
      label = "Planning Method";
      required = [true];
   }
   attribute SafetyStockAuto Enumeration(GenYesNo) {
      fetch = "safety_stock_auto_db";
      label = "Safety Stock";
      required = [true];
   }
   attribute OrderPointQtyAuto Enumeration(GenYesNo) {
      fetch = "order_point_qty_auto_db";
      label = "Order Point";
      required = [true];
   }
   attribute LotSizeAuto Enumeration(GenYesNo) {
      fetch = "lot_size_auto_db";
      label = "Lot Size";
      required = [true];
   }
   attribute ShrinkageFac Number {
      label = "Scrap Factor (%)";
   }
   attribute StdOrderSize Number {
      maxlength = 12;
      label = "Std Lot Size";
   }
   attribute OrderRequisition Enumeration(InventoryPartSupplyType) {
      fetch = "order_requisition_db";
      label = "Default Supply Type";
      required = [true];
   }
   attribute QtyPredictedConsumption Number {
      label = "Pred Year Cons Qty";
   }
   attribute LastActivityDate Date {
      label = "Modified";
      editable = [false];
   }
   attribute CarryRate Number {
      label = "Inv. Interest (%)";
   }
   attribute SetupCost Number {
      maxlength = 11;
   }
   attribute ServiceRate Number {
      label = "Service Rate (%)";
      maxlength = 6;
   }
   attribute HierarchyInvInterestRate Text {
      fetch = "Inventory_Part_Planning_API.Get_Inventory_Interest_Rate(contract, part_no)";
      maxlength = 2000;
      editable = [false];
   }
   attribute ServiceLevelRateFromHierarchy Text {
      fetch = "Inventory_Part_Planning_API.Get_Service_Level_Rate(contract, part_no)";
      label = "Service Level Rate from Hierarchy";
      maxlength = 2000;
      editable = [false];
   }
   attribute OrderingCostFromHierarchy Text {
      fetch = "Inventory_Part_Planning_API.Get_Ordering_Cost(contract, part_no)";
      label = "Ordering Cost from Hierarchy";
      maxlength = 2000;
      editable = [false];
   }
   attribute InvInterestRateSource Text {
      fetch = "Inventory_Part_Planning_API.Get_Inv_Interest_Rate_Source(contract, part_no)";
      maxlength = 2000;
      editable = [false];
   }
   attribute ServiceLevelRateSource Text {
      fetch = "Inventory_Part_Planning_API.Get_Service_Level_Rate_Source(contract, part_no)";
      maxlength = 2000;
      editable = [false];
   }
   attribute OrderingCostSource Text {
      fetch = "Inventory_Part_Planning_API.Get_Ordering_Cost_Source(contract, part_no)";
      maxlength = 2000;
      editable = [false];
   }
   attribute SplitManufAcquired Enumeration(SplitManufAcquired) {
      fetch = "split_manuf_acquired_db";
      label = "Manufactured / Acquired Split";
   }
   attribute PercentManufactured Number {
      label = "Manufactured (%)";
   }
   attribute PercentAcquired Number {
      label = "Acquired (%)";
   }
   attribute ManufSupplyType Enumeration(InventoryPartSupplyType.InvPartPlanning) {
      label = "Manufactured Supply Type";
      fetch = "manuf_supply_type_db";
      required = [true];
   }
   attribute AcquiredSupplyType Enumeration(InventoryPartSupplyType.InvPartPlanning) {
      label = "Acquired Supply Type";
      fetch = "acquired_supply_type_db";
      required = [true];
   }
   attribute ForecastPartExist Boolean("TRUE", "FALSE") {
      fetch = "Inventory_Part_API.Check_Any_Forecast_Part_Exist(contract, part_no)";
      label = "Forecast Part Exist";
      editable = [false];
   }
   attribute TransactionStartDate Date {
      fetch = "Inventory_Part_API.Get_Forecast_Trans_Start_Date(contract, part_no)";
      editable = [false];
   }
   attribute PhaseInDate Date {
      fetch = "Inventory_Part_API.Get_Forecast_Phase_In_Date(contract, part_no)";
      editable = [false];
   }
   attribute PhaseOutDate Date {
      fetch = "Inventory_Part_API.Get_Forecast_Phase_Out_Date(contract, part_no)";
      editable = [false];
   }
   attribute ServiceLevel Number {
      fetch = "Inventory_Part_API.Get_Forecast_Service_Level(contract, part_no)";
      maxlength = 2000;
      editable = [false];
   }
   attribute FillRateService Number {
      fetch = "Inventory_Part_API.Get_Forecast_Fill_Rate(contract, part_no)";
      maxlength = 2000;
      editable = [false];
   }
   attribute IPRActive Boolean("TRUE", "FALSE") {
      fetch = "Site_Invent_Info_API.Get_Ipr_Active(contract)";
      editable = [false];
   }
   @DynamicComponentDependency MRP
   attribute LogsExist Boolean("TRUE", "FALSE") {
      fetch = "Ddmrp_Log_API.Logs_Exist(contract, part_no)";
      label = "Logs Exist";
      editable = [false];
   }
   reference PlanningMethodRef(PlanningMethod) to InvPartPlanningMethod(PlanningMethod) {
      label = "Planning Method";
   }

}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
--------------------------------- FUNCTIONS ---------------------------------
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual EditPlanningHierarchyVirtual {
   attribute Contract Text;
   attribute PartNo Text;
   attribute PlanningMethod Text;
   attribute CarryRate Number;
   attribute HierarchyInvInterestRate Text {
      editable = [false];
   }
   attribute InvInterestRateSource Text {
      editable = [false];
   }
   attribute SetupCost Number;
   attribute OrderingCostFromHierarchy Text {
      editable = [false];
   }
   attribute OrderingCostSource Text {
      editable = [false];
   }
   attribute ServiceRate Number;
   attribute ServiceLevelRateFromHierarchy Text {
      editable = [false];
   }
   attribute ServiceLevelRateSource Text {
      editable = [false];
   }

   reference ServiceRateRef(ServiceRate) to ServiceRate(ServiceRate) {
      label = "Service Rate (%)";
   }

   action SavePlanningHierarchy {
      supportwarnings = [true];
      ludependencies = InventoryPartPlanning;
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
