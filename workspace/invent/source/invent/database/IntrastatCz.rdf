-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatCZ.rdf
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  220107  Hahalk  Bug 162020(SC21R2-7000), Added opponent_tax_id and country_of_origin for Export.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  191223  ApWilk  Bug 145333, Removed region of origin and made other required changes according to the new requirements.
--  150803  PrYaLK  Bug 123639, Replaced calls to Company_Invoice_Info_API.Get_Vat_No with Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  150721  PrYaLK  Bug 123199, Modified Report_Overview method to exclude the invoiced value of CO-PURSHIP transaction since it should be 0.
--  150519  ShKolk  Bug 121489, Modified Report_Overview method to exclude the invoiced value of PURSHIP transaction since it should be 0.
--  121016  PraWlk  Bug 105887, Removed SUBSTR to avoid length restriction of customs statistics number description. 
--  121016  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  121012  TiRalk  Bug 102834, Removed xsl report layout definition.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Czech Republic'
--  120925  ShKolk  Merged Bug 102834, Modified net weight, supplementary unit values to display them with correct decimal places.
--  120925          Removed part description and filled the country of origin in despite the Intrastat direction.
--  120202  TiRalk  Bug 100825, Created.
-----------------------------------------------------------------------------
-- 145333, removed region of origin
DEFINE MODULE             = INVENT
DEFINE LU                 = Intrastat
DEFINE PKG                = INTRASTAT_CZ_RPI

DEFINE TABLE              = INVENT_INFO_SERVICES_RPT
DEFINE VIEW               = INTRASTAT_CZ_REP
DEFINE METHOD             = Report_Overview

DEFINE REPORT_TITLE       = S1
DEFINE COMPANY_VAT_NO     = S2
DEFINE BRANCH_NO          = S3
DEFINE COMPANY_NAME       = S4
DEFINE REP_VAT_NO         = S5
DEFINE REP_BRANCH_NO      = S6
DEFINE REP_NAME           = S7
DEFINE REPORTING_PERIOD   = S8
DEFINE CREATION_DATE      = S9
DEFINE CURRENCY_CODE      = S10

DEFINE LINE_NO            = N1
DEFINE CUSTOM_STAT_CODE   = S11
DEFINE COUNTRY_OF_DEST    = S12
DEFINE COUNTRY_OF_ORIGIN  = S13
DEFINE MODE_OF_TRANSPORT  = S14
DEFINE TRANS_NATURE       = S15
DEFINE CUST_STAT_NO_DESC  = S17
DEFINE INVOICE_VALUE      = N4
DEFINE DELIVERY_TERMS     = S16
DEFINE MOVEMENT_CODE      = S21
DEFINE MOVEMENT_CODE_DESC = S22
DEFINE OPPONENT_TAX_ID    = S23
DEFINE STAT_VALUE         = N5
DEFINE NET_WEIGHT         = N2
DEFINE ALTERNATE_QTY      = N3

DEFINE NO_OF_LINES        = N6
DEFINE TOT_INVOICED_VALUE = N7
DEFINE TOT_STAT_VALUE     = N8

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------
-- 145333, removed region of origin
PROMPT Creating report view &VIEW


CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&REPORT_TITLE                         REPORT_TITLE,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&BRANCH_NO                            BRANCH_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&REP_VAT_NO                           REP_VAT_NO,
       H.&REP_BRANCH_NO                        REP_BRANCH_NO,
       H.&REP_NAME                             REP_NAME,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&TOT_INVOICED_VALUE                   TOT_INVOICED_VALUE,
       H.&TOT_STAT_VALUE                       TOT_STAT_VALUE,
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&TRANS_NATURE                         TRANS_NATURE,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&CUSTOM_STAT_CODE                     CUSTOM_STAT_CODE,
       D.&CUST_STAT_NO_DESC                    CUST_STAT_NO_DESC,
       D.&MOVEMENT_CODE                        MOVEMENT_CODE,     
       D.&MOVEMENT_CODE_DESC                   MOVEMENT_CODE_DESC,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALTERNATE_QTY                        ALTERNATE_QTY,
       D.&INVOICE_VALUE                        INVOICE_VALUE,
       D.&STAT_VALUE                           STAT_VALUE,
       D.&DELIVERY_TERMS                       DELIVERY_TERMS,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &TABLE H, &TABLE D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';
   

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report Title^ITEM_NAME=iReportTitle^';   
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Company Tax No:^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Branch No:^ITEM_NAME=iBranchNo^';  
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company Name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..REP_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Representative Tax No:^ITEM_NAME=iRepVatNo^'; 
COMMENT ON COLUMN &VIEW..REP_BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Representative Branch No:^ITEM_NAME=iRepBranchNo^';
COMMENT ON COLUMN &VIEW..REP_NAME IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Representative Name:^ITEM_NAME=iRepName^';   
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting currency code:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of Lines:^ITEM_NAME=iNoOfLines^';
COMMENT ON COLUMN &VIEW..TOT_INVOICED_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value:^ITEM_NAME=iTotInvoicedValue^';
COMMENT ON COLUMN &VIEW..TOT_STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Statistical Value:^ITEM_NAME=iTotStatValue^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..TRANS_NATURE IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Trans.^ITEM_NAME=iTransNature^';
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..CUSTOM_STAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Commodity Code^ITEM_NAME=iCustomStatCode^';
COMMENT ON COLUMN &VIEW..CUST_STAT_NO_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Commodity Code Description^ITEM_NAME=iCustStatCodeDes^';
COMMENT ON COLUMN &VIEW..MOVEMENT_CODE IS                                                           
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Movement Code^ITEM_NAME=iMovementCode^';                
COMMENT ON COLUMN &VIEW..MOVEMENT_CODE_DESC IS                                                      
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Movement Code Description^ITEM_NAME=iMovementCodeDesc^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Opponent Tax Id^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALTERNATE_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAlternateQty^';
COMMENT ON COLUMN &VIEW..INVOICE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvoiceValue^';
COMMENT ON COLUMN &VIEW..STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Statistical Value^ITEM_NAME=iStatValue^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Delivery Terms^ITEM_NAME=iDeliveryTerms^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^';

BEGIN
   Report_SYS.Define_Report_('&VIEW', '&MODULE', '&LU', 'Intrastat Report Czech Republic','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_CZ_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   report_title_          VARCHAR2(50);   
   company_vat_no_       VARCHAR2(14);
   branch_no_            VARCHAR2(3);
   company_name_         VARCHAR2(40);
   rep_vat_no_           VARCHAR2(14);
   rep_branch_no_        VARCHAR2(10);
   rep_name_             VARCHAR2(20);
   end_date_             VARCHAR2(4);
   creation_date_        VARCHAR2(8);
   currency_code_        VARCHAR2(3);
  
   line_no_                NUMBER := 0;
   country_of_destination_ VARCHAR2(3);
   country_of_origin_      VARCHAR2(3);
   transaction_nature_     VARCHAR2(2);
   mode_of_transport_      VARCHAR2(1);
   custom_stat_code_       VARCHAR2(8);
   delivery_terms_         VARCHAR2(5);
   net_weight_             VARCHAR2(13);
   alternate_qty_          VARCHAR2(13);
   invoice_value_          NUMBER;
   statistical_value_      NUMBER;
   rep_curr_rate_          NUMBER;
   tot_invoiced_value_     NUMBER;
   tot_stat_value_         NUMBER;
   no_of_lines_            NUMBER;
   cust_stat_no_des_       VARCHAR2(2000);

   vat_no_               VARCHAR2(50);
   cid_                  NUMBER;
   stmt_                 VARCHAR2(2000);
   cnt_                  NUMBER;
   result_key_           NUMBER;
   row_no_               NUMBER := 1;
   parent_row_no_        NUMBER := 0;
   intrastat_id_         NUMBER;
   intrastat_direction_  VARCHAR2(20);
   rep_curr_code_        VARCHAR2(3);
   country_code_         VARCHAR2(2);   
   notc_dummy_           VARCHAR2(5);
   notc_notfound         EXCEPTION;
   notc_country_         VARCHAR2(6);
   movement_code_        VARCHAR2(2);
   movement_code_desc_   VARCHAR2(100);

   do_xml_                 BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                  BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                    CLOB;
   package_name_           VARCHAR2(100) := 'INTRASTAT_CZ_REP';
   rowkey_                 VARCHAR2(50);

   CURSOR get_head IS
      SELECT company,
             bransch_no,
             representative,
             repr_tax_no,  
             bransch_no_repr,
             begin_date,
             end_date,
             creation_date,
             rep_curr_code,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   
   -- 145333, removed region of origin
   CURSOR get_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,
             il.country_of_origin,
             cn.country_notc,
             il.mode_of_transport,
             il.customs_stat_no,
             il.delivery_terms,
             il.movement_code,
             DECODE (intrastat_direction_, 'EXPORT', il.opponent_tax_id, '' )    opponent_tax_id,
             SUM(il.quantity * il.net_unit_weight)                               net_weight,
             SUM(NVL(il.intrastat_alt_qty,0))                                    alternate_qty,
             SUM(il.quantity * NVL(il.invoiced_unit_price, DECODE(il.transaction, 'PURSHIP',    0, 
                                                                                  'CO-PURSHIP', 0, il.order_unit_price))) * rep_curr_rate_
                                                                                 invoice_value,
             SUM((NVL(il.invoiced_unit_price,NVL(il.order_unit_price,0)) + 
                  NVL(il.unit_add_cost_amount_inv,NVL(il.unit_add_cost_amount,0)) +
                  NVL(il.unit_charge_amount_inv,0) +
                  NVL(il.unit_charge_amount,0)) * il.quantity) * rep_curr_rate_  statistical_value
      FROM   intrastat_line_tab il,country_notc_tab cn
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direction_ 
      AND    rowstate           != 'Cancelled'          
      AND    il.notc = cn.notc      
      AND    cn.country_code = country_code_
      GROUP BY  il.intrastat_direction,
                il.opposite_country,
                il.country_of_origin,
                cn.country_notc,
                il.mode_of_transport,
                il.customs_stat_no,  
                il.delivery_terms,
                il.movement_code,
                DECODE (intrastat_direction_, 'EXPORT', il.opponent_tax_id, '' );

      CURSOR get_notc IS
         SELECT distinct notc
         FROM   intrastat_line_tab
         WHERE  intrastat_id = intrastat_id_;
   
      CURSOR get_country_notc (notc_ VARCHAR2) IS
         SELECT country_notc
         FROM   country_notc_tab
         WHERE  notc = notc_
         AND    country_code = 'CZ'; 

BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   
  
  
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;
   
   FOR headrec_ IN get_head LOOP
      $IF Component_Invoic_SYS.INSTALLED $THEN
         vat_no_ := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(headrec_.company, headrec_.country_code, headrec_.creation_date);
      $ELSE
         NULL;
      $END
            
      IF (substrb(vat_no_, 1, 2) = headrec_.country_code) THEN
         company_vat_no_   := RPAD(NVL(substrb(vat_no_, 3, 12),''),12);
      ELSE
         company_vat_no_   := RPAD(NVL(substrb(vat_no_, 1, 12),''),12);
      END IF;
      
      company_name_     := substrb(Company_API.Get_Name(headrec_.company), 1, 40);
   
      branch_no_        := substrb(headrec_.bransch_no, 1,3);
      
      IF (substrb(headrec_.repr_tax_no, 1, 2) = headrec_.country_code) THEN
         rep_vat_no_   := RPAD(NVL(substrb(headrec_.repr_tax_no, 3, 14),''),14);
      ELSE
         rep_vat_no_   := RPAD(NVL(substrb(headrec_.repr_tax_no, 1, 14),''),14);
      END IF;
               
      rep_branch_no_    := headrec_.bransch_no_repr;
      end_date_         := to_char(headrec_.end_date,'YYMM');
      creation_date_    := to_char(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_code_    := headrec_.rep_curr_code;  
      rep_curr_rate_    := headrec_.rep_curr_rate;
      currency_code_    := rep_curr_code_;
      country_code_     := headrec_.country_code;
      rep_name_         := headrec_.representative;
      rowkey_           := headrec_.rowkey;
   END LOOP;
   
   IF (intrastat_direction_ = 'EXPORT') THEN  
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTCZ: Intrastat Export Report');
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTCZ: Intrastat Import Report');
   END IF;


   IF( currency_code_ NOT IN ('CZK','EUR'))  THEN
       Error_SYS.Record_General(lu_name_, 'NOTCZKEUR: Reporting currency should be CZK or EUR.');	  
   END IF; 

   -- Insert Head details
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', currency_code_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', end_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_NAME', rep_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_BRANCH_NO', rep_branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_VAT_NO', rep_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'BRANCH_NO', branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',rowkey_, '&VIEW');
      Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_CZ_LINES');
   END IF;

   IF (do_rs_) THEN
      INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &REPORT_TITLE, &COMPANY_VAT_NO,
          &COMPANY_NAME, &BRANCH_NO, &REP_VAT_NO, &REP_BRANCH_NO, &REP_NAME,
          &REPORTING_PERIOD, &CREATION_DATE, &CURRENCY_CODE)
      VALUES
         (result_key_, row_no_, parent_row_no_, report_title_,company_vat_no_,
          company_name_, branch_no_, rep_vat_no_, rep_branch_no_, rep_name_,
          end_date_, creation_date_, currency_code_);
         
      parent_row_no_ := row_no_;   
      row_no_ := row_no_ + 1;
   END IF;

   tot_invoiced_value_ := 0;
   tot_stat_value_     := 0;
   
   FOR linerec_ IN get_lines LOOP

      country_of_destination_ := substrb(linerec_.opposite_country, 1,2);
      transaction_nature_     := linerec_.country_notc;
      mode_of_transport_      := linerec_.mode_of_transport;
      custom_stat_code_       := RPAD(substrb(linerec_.customs_stat_no, 1,8),8);
      cust_stat_no_des_       := customs_statistics_number_api.get_description(linerec_.customs_stat_no);
      invoice_value_          := LPAD(ROUND(linerec_.invoice_value),10,'0');
      statistical_value_      := LPAD(ROUND(linerec_.statistical_value),10,'0');
          
      movement_code_          := LPAD(substrb(linerec_.movement_code,1,2), 2);                                
      movement_code_desc_     := Special_Code_Of_Movement_API.Get_Description(country_code_, movement_code_);

      IF SUBSTR(custom_stat_code_, 1, 4) IN ('2844', '2716') THEN
         net_weight_ := '0.001';
      ELSE
         IF linerec_.net_weight IS NULL THEN
            net_weight_ := '0.000';
         ELSE
            IF linerec_.net_weight < 1 AND linerec_.net_weight > 0 THEN
               net_weight_ := ROUND(linerec_.net_weight, 3);
               net_weight_ := 0 || RPAD(SUBSTR(net_weight_,INSTR(net_weight_, '.')), 4, 0);            
            ELSE
               net_weight_ := ROUND(linerec_.net_weight) || '.000';
            END IF;
         END IF;
      END IF;

      IF linerec_.alternate_qty IS NULL THEN
         alternate_qty_ := '0.000';
      ELSE
         IF INSTR(linerec_.alternate_qty, '.') = 0 THEN
            alternate_qty_ := linerec_.alternate_qty || '.000';
         ELSE
            alternate_qty_ := ROUND(linerec_.alternate_qty, 3);
            alternate_qty_ := NVL(SUBSTR(alternate_qty_, 1, INSTR(alternate_qty_, '.')-1), 0) || RPAD(SUBSTR(alternate_qty_, INSTR(alternate_qty_, '.') ), 4, 0);
         END IF;
      END IF;
      
      IF ( linerec_.delivery_terms IN ('EXW','FCA','FAS','FOB')) THEN
         delivery_terms_      := 'K';
      ELSIF (linerec_.delivery_terms IN ('CFR', 'CIF')) THEN
         delivery_terms_      := 'L';
      ELSIF (linerec_.delivery_terms IN ('DAT', 'DAP', 'DDP', 'CPT', 'CIP')) THEN
         delivery_terms_      := 'M';
      ELSE
         delivery_terms_      := 'N';
      END IF;
            
      line_no_ := line_no_ + 1;
      
      IF (intrastat_direction_ = 'EXPORT') THEN 
         IF (linerec_.opponent_tax_id IS NULL) THEN
            linerec_.opponent_tax_id := 'QV123';   
         END IF;
      END IF;
      
      IF (linerec_.country_of_origin IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYORIGIN: The country of origin must be specified for intrastat reporting.');   
      END IF; 
      country_of_origin_   := NVL(RPAD(substrb(linerec_.country_of_origin,1,2),2),LPAD(' ',2));
      
      tot_invoiced_value_ := tot_invoiced_value_ + invoice_value_;           
      tot_stat_value_     := tot_stat_value_ + statistical_value_; 
      
      -- 145333, removed region of origin
      -- insert detail rows
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_CZ_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_,'ALTERNATE_QTY', alternate_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_DEST', country_of_destination_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', country_of_origin_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_STAT_NO_DESC', cust_stat_no_des_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOM_STAT_CODE', custom_stat_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS', delivery_terms_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', invoice_value_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', line_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', mode_of_transport_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MOVEMENT_CODE', movement_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MOVEMENT_CODE_DESC', movement_code_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', net_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUE', statistical_value_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TRANS_NATURE', transaction_nature_);
         IF (intrastat_direction_ = 'EXPORT') THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
         END IF;
         Xml_Record_Writer_SYS.End_Element(xml_,'INTRASTAT_CZ_LINE');
      END IF;
      
      -- 145333, removed region of origin
      IF (do_rs_) THEN
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, &LINE_NO,&COUNTRY_OF_DEST,&COUNTRY_OF_ORIGIN,
             &TRANS_NATURE,&MODE_OF_TRANSPORT,&CUSTOM_STAT_CODE,&CUST_STAT_NO_DESC,&NET_WEIGHT,&ALTERNATE_QTY,
             &INVOICE_VALUE,&STAT_VALUE, &DELIVERY_TERMS, &OPPONENT_TAX_ID,
             &MOVEMENT_CODE, &MOVEMENT_CODE_DESC)
         VALUES
            (result_key_, row_no_, parent_row_no_, line_no_,country_of_destination_,
             country_of_origin_,transaction_nature_,mode_of_transport_,custom_stat_code_,cust_stat_no_des_,
             net_weight_,alternate_qty_,invoice_value_,statistical_value_,delivery_terms_, linerec_.opponent_tax_id,
             movement_code_, movement_code_desc_);
         
         row_no_ := row_no_ + 1;
      END IF;
   END LOOP; 
   
   -- 145333, removed region of origin
   IF (do_rs_) THEN
      IF (row_no_ = 2) THEN
         INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO,&COUNTRY_OF_DEST,&COUNTRY_OF_ORIGIN,
                &TRANS_NATURE,&MODE_OF_TRANSPORT,&CUSTOM_STAT_CODE,&CUST_STAT_NO_DESC,&NET_WEIGHT,&ALTERNATE_QTY,
                &INVOICE_VALUE,&STAT_VALUE,&REPORT_TITLE,&DELIVERY_TERMS, &OPPONENT_TAX_ID,
                &MOVEMENT_CODE, &MOVEMENT_CODE_DESC) 
         VALUES
               (result_key_, row_no_, parent_row_no_, NULL,NULL,NULL,
                NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,report_title_,NULL, NULL, NULL, NULL );
      END IF;
   END IF;

   IF (do_rs_) THEN
      UPDATE &TABLE
      SET    &NO_OF_LINES = line_no_,
             &TOT_INVOICED_VALUE = tot_invoiced_value_,
             &TOT_STAT_VALUE     = tot_stat_value_ 
      WHERE  result_key = result_key_  
      AND    row_no = parent_row_no_;
   END IF;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_CZ_LINES');
      Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', line_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INVOICED_VALUE', ROUND(tot_invoiced_value_));
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_STAT_VALUE', ROUND(tot_stat_value_));
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;
   
EXCEPTION
   WHEN OTHERS THEN
      IF (dbms_sql.is_open (cid_)) THEN
         dbms_sql.close_cursor (cid_);
      END IF;
      RAISE;  
             
END &METHOD;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------






-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------


UNDEFINE MODULE             = INVENT
UNDEFINE LU                 = Intrastat
UNDEFINE PKG                = INTRASTAT_CZ_RPI

UNDEFINE TABLE              = INVENT_INFO_SERVICES_RPT
UNDEFINE VIEW               = INTRASTAT_CZ_REP
UNDEFINE METHOD             = Report_Overview

UNDEFINE REPORT_TITLE       = S1
UNDEFINE COMPANY_VAT_NO     = S2
UNDEFINE BRANCH_NO          = S3
UNDEFINE COMPANY_NAME       = S4
UNDEFINE REP_VAT_NO         = S5
UNDEFINE REP_BRANCH_NO      = S6
UNDEFINE REP_NAME           = S7
UNDEFINE REPORTING_PERIOD   = S8
UNDEFINE CREATION_DATE      = S9
UNDEFINE CURRENCY_CODE      = S10

UNDEFINE LINE_NO            = N1
UNDEFINE CUSTOM_STAT_CODE   = S11
UNDEFINE COUNTRY_OF_DEST    = S12
UNDEFINE COUNTRY_OF_ORIGIN  = S13
UNDEFINE MODE_OF_TRANSPORT  = S14
UNDEFINE TRANS_NATURE       = S15
UNDEFINE CUST_STAT_NO_DESC  = S17
UNDEFINE INVOICE_VALUE      = N4
UNDEFINE DELIVERY_TERMS     = S16
UNDEFINE REGION_CODE        = S19
UNDEFINE REGION_NAME        = S20
UNDEFINE MOVEMENT_CODE      = S21
UNDEFINE MOVEMENT_CODE_DESC = S22
UNDEFINE OPPONENT_TAX_ID    = S23
UNDEFINE STAT_VALUE         = N5
UNDEFINE NET_WEIGHT         = N2
UNDEFINE ALTERNATE_QTY      = N3

UNDEFINE NO_OF_LINES        = N6
UNDEFINE TOT_INVOICED_VALUE = N7
UNDEFINE TOT_STAT_VALUE     = N8
