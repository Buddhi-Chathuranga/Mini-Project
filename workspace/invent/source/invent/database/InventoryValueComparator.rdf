-----------------------------------------------------------------------------
--
--  Logical unit: InventoryValueComparator 
--
--  File:         INVENTORYVALUECOMPARATOR.RDF
--
-- Date     Sign     History
---------------------------------------------------------------------------
-- 141124   DaZase   PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
-- 140716   TiRalk   Bug 117850, Modified report method to print company name properly.
-- 110715   MaEelk   Replaced the usage of inventory_value_comparator with inventory_value_comparator_tab.
-- 101223   Cpeilk   Bug 94543, Corrected view comments by adding missing QFLAGS on CONTRACT, Q_COMPARATOR_TYPE_ID,
-- 101223            Q_CRITERIA, Q_PARTS_SHOW, Q_LOWEST_PARTS. 
-- 090930   ChFolk   Removed unused variables in the package.
-- 070601   ShVese   CID 143134- Added LOV View Reference for stat_year_no and stat_period_no in REPVIEW.
-- 070521   KaDilk   Call 145018, part unit cost rounded to display in the report.
-- 070521   KaDilk   Call 145047.Modified the report method to avoid the Oracle error, 
-- 070521           'GENREPORTIO:Could not generate report'.
-- 070109   KaDilk   LCS Merge, 61493, problems with query dialog
-- 061107   KaDilk   Added some corrections.
-- 060704   KaDilk   Corrections in the Report Method.
-- 060628   KaDilk   Made small changes for column names.
-- 060606   KaDilk   Created.
---------------------------------------------------------------------------

DEFINE MODULE       = INVENT
DEFINE LU           = InventoryValueComparator
DEFINE PKG          = INVENTORY_VALUE_COMPARATOR_RPI

DEFINE TABLE        = INVENT_INFO_SERVICES_RPT 
DEFINE REPVIEW      = INVENTORY_VALUE_COMPARATOR_REP
DEFINE VIEW_RPV     = INVENT_INFO_SERVICES_RPV
DEFINE REPMETHOD    = Report_Printout

DEFINE CONTRACT                = S1
DEFINE CONTRACT_DESC           = S2
DEFINE PART_NO                 = S3
DEFINE PART_DESCRIPTION        = S4
DEFINE CONFIGURATION_ID        = S5
DEFINE UNIT_MEAS               = S6
DEFINE CONDITION_CODE          = S7
DEFINE QUANTITY                = N1
DEFINE COST_PER_UNIT           = N2
DEFINE COMP_VAL_PER_UNIT       = N3
DEFINE TOTAL_INVENTORY_VALUE   = N4
DEFINE TOTAL_COMPARATOR_TYPE_VALUE = N5
DEFINE TOTAL_VALUE_DIFFERENCE  = N6
DEFINE SORT_ATTRIBUTE          = S8
DEFINE ATTR_TOTAL_VAL          = N7
DEFINE ATTR_TOTAL_COMP_VAL     = N8
DEFINE ATTR_TOTAL_VAL_DIFF     = N9
DEFINE TOTAL_VALUE             = N10
DEFINE TOTAL_VALUE_COMPAT      = N11
DEFINE TOTAL_VALUE_DIFF        = N12

PROMPT Creating reports for logical unit &LU

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:    INVENTORY_VALUE_COMPARATOR_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)   := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &REPMETHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Get_Default_Value__ (
   no_ OUT VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS                      
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Inventory Value Comparison Printout
-- Type:       PLSQL1.2
-- Objects:    TABLES = INVENTORY_VALUE_COMPARATOR_RPT
--             VIEW   = INVENTORY_VALUE_COMPARATOR_REP
--             METHOD = INVENTORY_VALUE_COMPARATOR_RPI.Report_Printout
-----------------------------------------------------------------------------

PROMPT Creating report view &REPVIEW

CREATE OR REPLACE VIEW &REPVIEW AS
SELECT   
  RESULT_KEY                      RESULT_KEY,
  ROW_NO                          ROW_NO,
  &CONTRACT                       CONTRACT,
  &CONTRACT_DESC                  CONTRACT_DESC,
  &PART_NO                        PART_NO,
  &PART_DESCRIPTION               PART_DESCRIPTION,
  &CONFIGURATION_ID               CONFIGURATION_ID,
  &UNIT_MEAS                      UNIT_MEAS,
  &CONDITION_CODE                 CONDITION_CODE,
  &QUANTITY                       QUANTITY,
  &COST_PER_UNIT                  COST_PER_UNIT,
  &COMP_VAL_PER_UNIT              COMP_VAL_PER_UNIT,
  &TOTAL_INVENTORY_VALUE          TOTAL_INVENTORY_VALUE,
  &TOTAL_COMPARATOR_TYPE_VALUE    TOTAL_COMPARATOR_TYPE_VALUE,
  &TOTAL_VALUE_DIFFERENCE         TOTAL_VALUE_DIFFERENCE,
  &SORT_ATTRIBUTE                 SORT_ATTRIBUTE,
  &ATTR_TOTAL_VAL                 ATTR_TOTAL_VAL,
  &ATTR_TOTAL_COMP_VAL            ATTR_TOTAL_COMP_VAL,
  &ATTR_TOTAL_VAL_DIFF            ATTR_TOTAL_VAL_DIFF,
  &TOTAL_VALUE                    TOTAL_VALUE,
  &TOTAL_VALUE_COMPAT             TOTAL_VALUE_COMPAT,
  &TOTAL_VALUE_DIFF               TOTAL_VALUE_DIFF,
  0                               Q_STAT_YEAR_NO,
  0                               Q_STAT_PERIOD_NO,
  NULL                            Q_COMPARATOR_TYPE_ID,
  NULL                            Q_CRITERIA,
  NULL                            Q_PARTS_SHOW,
  NULL                            Q_LOWEST_PARTS
FROM &VIEW_RPV 
WITH read only;

COMMENT ON TABLE &REPVIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Inventory Value Comparator^';

COMMENT ON COLUMN &REPVIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &REPVIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &REPVIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site^QUERY=Site:^REF=UserAllowedSiteLov^QFLAGS=MCS--^';
COMMENT ON COLUMN &REPVIEW..CONTRACT_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Site Description^';
COMMENT ON COLUMN &REPVIEW..PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^TITLE=Part No^';
COMMENT ON COLUMN &REPVIEW..PART_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^';
COMMENT ON COLUMN &REPVIEW..CONFIGURATION_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^';
COMMENT ON COLUMN &REPVIEW..UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=U/M^';
COMMENT ON COLUMN &REPVIEW..QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^';
COMMENT ON COLUMN &REPVIEW..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Condition Code^';
COMMENT ON COLUMN &REPVIEW..COST_PER_UNIT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cost Per Unit^';
COMMENT ON COLUMN &REPVIEW..COMP_VAL_PER_UNIT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Comparator Type Value Per Unit^';
COMMENT ON COLUMN &REPVIEW..TOTAL_INVENTORY_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Inventory Value^';
COMMENT ON COLUMN &REPVIEW..TOTAL_COMPARATOR_TYPE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Comparator Type Value^';
COMMENT ON COLUMN &REPVIEW..TOTAL_VALUE_DIFFERENCE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value Difference^';
COMMENT ON COLUMN &REPVIEW..SORT_ATTRIBUTE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sort Attribute^';
COMMENT ON COLUMN &REPVIEW..ATTR_TOTAL_VAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Inventory Value^';
COMMENT ON COLUMN &REPVIEW..ATTR_TOTAL_COMP_VAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Comparator Type Value^';
COMMENT ON COLUMN &REPVIEW..ATTR_TOTAL_VAL_DIFF IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Value Difference^';
COMMENT ON COLUMN &REPVIEW..TOTAL_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value^';
COMMENT ON COLUMN &REPVIEW..TOTAL_VALUE_COMPAT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value Compat^';
COMMENT ON COLUMN &REPVIEW..TOTAL_VALUE_DIFF IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value Diff^';
COMMENT ON COLUMN &REPVIEW..Q_STAT_YEAR_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^QFLAGS=MCS-L^REF=StatisticPeriod2^QUERY=Year:^';
COMMENT ON COLUMN &REPVIEW..Q_STAT_PERIOD_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^QFLAGS=MCS-L^REF=StatisticPeriod3^QUERY=Statistics Period:^';
COMMENT ON COLUMN &REPVIEW..Q_COMPARATOR_TYPE_ID IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^QFLAGS=MCS--^QUERY=Comparator Type ID:^REF=INVENT_VALUE_COMPARAT_TYPE_LOV(CONTRACT)^';
COMMENT ON COLUMN &REPVIEW..Q_CRITERIA IS
   'FLAGS=A----^DATATYPE=STRING(200)^QFLAGS=MCS--^QUERY=Criteria:^ENUMERATE=Inventory_Value_Rep_Param_API.Enumerate^';
COMMENT ON COLUMN &REPVIEW..Q_PARTS_SHOW IS
   'FLAGS=A----^DATATYPE=STRING(20)^QFLAGS=OCS--^QUERY=Include Parts:^QVALUE=:&PKG..Get_Default_Value__^ENUMERATE=Gen_Yes_No_API.Enumerate^';
COMMENT ON COLUMN &REPVIEW..Q_LOWEST_PARTS IS
   'FLAGS=A----^DATATYPE=STRING(20)^QFLAGS=OCS--^QUERY=Comparator Type Value Lowest:^QVALUE=:&PKG..Get_Default_Value__^ENUMERATE=Gen_Yes_No_API.Enumerate^';

BEGIN
   Report_SYS.Define_Report_( '&REPVIEW', '&MODULE', '&LU', 'Inventory Value Comparison', '&TABLE', '&PKG..&REPMETHOD', 8,'','','','PLSQL1.2','TRUE','Warehouse Management','Financial Control');
   Report_SYS.Refresh_('&REPVIEW');
END;   
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     INVENTORY_VALUE_COMPARATOR_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-- Report_Printout:
--
-- Purpose: Extracts information needed for a printout report of
--          inventory value comparator. The parameters are contract, stat_year_no,
--          stat_period_no,comparator type id,criteria, include parts in report and include records
--          where comparator type value is lowest.
-----------------------------------------------------------------------------
PROCEDURE &REPMETHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
  result_key_              NUMBER;
  contract_desc_           VARCHAR2(20);
  in_contract_             VARCHAR2(5);
  in_stat_year_no_         NUMBER;
  in_stat_period_no_       NUMBER;
  in_comparator_type_id_   VARCHAR2(80);
  in_criteria_             VARCHAR2(200);
  logotype_                VARCHAR2(100);  
  company_                 VARCHAR2(20);
  company_name_            VARCHAR2(100);
  do_xml_                  BOOLEAN := Report_SYS.Should_Generate_Xml('&REPVIEW');
  xml_                     CLOB;
  package_name_            VARCHAR2(100) := 'INVENTORY_VALUE_COMPARATOR_REP';
  db_value_                VARCHAR2(20);
  counter_                 NUMBER:=0;
  sort_attribute_          VARCHAR2(20);
  total_value_             NUMBER := 0;
  total_value_compat_      NUMBER := 0;
  total_value_diff_        NUMBER := 0;
  show_lowest_db_          VARCHAR2(1);
  show_parts_db_           VARCHAR2(1);
  no_datatfound_           BOOLEAN := TRUE;
  currency_rounding_       NUMBER;
  unit_cost_round_         NUMBER;
  -- Define PL/SQL tables to group values against the grouping attribute.
  TYPE AtrributeValueTabType       IS TABLE OF VARCHAR2(60)  INDEX BY BINARY_INTEGER;
  TYPE ValueTabType                IS TABLE OF NUMBER  INDEX BY BINARY_INTEGER;

  attribute_value_tab           AtrributeValueTabType;    
  total_value_tab               ValueTabType;     
  total_comparator_value_tab    ValueTabType;     
  total_value_diff_tab          ValueTabType;     

  CURSOR get_part_details IS
     SELECT ivp.part_no                                                                     part_no,
            ivp.configuration_id                                                            configuration_id,
            ivp.condition_code                                                              condition_code,
            (ivp.quantity+ivp.qty_waiv_dev_rej+ivp.qty_in_transit+ivp.qty_at_customer)      total_quantity,
            DECODE (db_value_, 'ABC_CLASS', ivp.ABC_CLASS,
                              'PLANNER_BUYER', ivp.PLANNER_BUYER,
                              'ACCOUNTING_GROUP', ivp.ACCOUNTING_GROUP,
                              'PART_PRODUCT_FAMILY', ivp.PART_PRODUCT_FAMILY,
                              'PART_PRODUCT_CODE', ivp.PART_PRODUCT_CODE,
                              'TYPE_CODE', ivp.TYPE_CODE,
                              'PRIME_COMMODITY', ivp.PRIME_COMMODITY,
                              'SECOND_COMMODITY', ivp.SECOND_COMMODITY,
                              'ASSET_CLASS', ivp.ASSET_CLASS, '')                           sort_attribute,
            ivp.description                                                                 description,
            ivp.unit_meas                                                                   unit_meas,
            ivc.comparison_value                                                            comparator_type_value_per_unit,
            ivp.unit_cost                                                                   unit_cost,
            ivp.total_value                                                                 total_value,
            ivc.comparison_value * 
                            (ivp.quantity+ivp.qty_waiv_dev_rej+ivp.qty_in_transit+ivp.qty_at_customer)    comparator_type_value_total
     FROM  inventory_value_part_cond_ext ivp, inventory_value_comparator_tab ivc
     WHERE ivp.contract = ivc.contract
     AND   ivp.part_no = ivc.part_no
     AND   ivp.configuration_id = ivc.configuration_id
     AND   ivp.condition_code = ivc.condition_code  
     AND   ivp.contract         = in_contract_
     AND   ivp.stat_year_no     = in_stat_year_no_
     AND   ivp.stat_period_no   = in_stat_period_no_
     AND   ivc.comparator_type_id = in_comparator_type_id_
     AND   (((show_lowest_db_ = 'Y') AND (ivp.unit_cost >ivc.comparison_value)) OR (show_lowest_db_ = 'N'))
     ORDER BY sort_attribute;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&REPMETHOD');
   result_key_        := to_number(Client_SYS.Get_Item_Value('RESULT_KEY',report_attr_));

   in_contract_           := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   in_stat_year_no_       := Client_SYS.Get_Item_Value('Q_STAT_YEAR_NO', parameter_attr_);
   in_stat_period_no_     := Client_SYS.Get_Item_Value('Q_STAT_PERIOD_NO', parameter_attr_);
   in_comparator_type_id_ := Client_SYS.Get_Item_Value('Q_COMPARATOR_TYPE_ID', parameter_attr_);
   in_criteria_           := Client_SYS.Get_Item_Value('Q_CRITERIA', parameter_attr_);
   db_value_              := Inventory_Value_Rep_Param_API.Encode(in_criteria_);
   show_lowest_db_        := Gen_Yes_No_API.Encode(Client_SYS.Get_Item_Value('Q_LOWEST_PARTS', parameter_attr_));
   show_parts_db_         := Gen_Yes_No_API.Encode(Client_SYS.Get_Item_Value('Q_PARTS_SHOW', parameter_attr_));

   Site_API.Exist(in_contract_);
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User, in_contract_);
   Statistic_Period_API.Exist(in_stat_year_no_, in_stat_period_no_);

   contract_desc_     := Site_API.Get_Description(in_contract_);
   company_           := Site_API.Get_Company(in_contract_);
   logotype_          := Company_API.Get_Logotype(company_);  
   company_name_      := Site_API.Get_Company_Address_Name(in_contract_);
   Invent_Value_Comparat_Type_Api.Exist(company_,in_comparator_type_id_);
   currency_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_,
                                                                 Company_Finance_API.Get_Currency_Code(company_));

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&REPVIEW',package_name_);
   END IF;

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', in_contract_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESC', contract_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHOW_PARTS', show_parts_db_);
      Xml_Record_Writer_SYS.Start_Element(xml_,'PART_ITEMS');
   END IF;

   FOR parts_rec_ IN get_part_details LOOP
      no_datatfound_ := FALSE;
      IF (sort_attribute_ IS NULL OR NVL(sort_attribute_, ' ') != NVL(parts_rec_.sort_attribute, ' ') )THEN
         IF (counter_ > 0) THEN
            total_value_diff_tab(counter_) := total_value_tab(counter_) - total_comparator_value_tab(counter_); 
         END IF;
       
         counter_                             := counter_ + 1;   
         total_value_tab(counter_)            := 0;
         total_comparator_value_tab(counter_) := 0;
         total_value_diff_tab(counter_)       := 0;
         
         sort_attribute_                      := NVL(parts_rec_.sort_attribute, ' ');
         attribute_value_tab(counter_)        := sort_attribute_;
      END IF;

      total_value_tab(counter_)            := total_value_tab(counter_) + parts_rec_.total_value; 
      total_comparator_value_tab(counter_) := NVL(total_comparator_value_tab(counter_),0) + parts_rec_.comparator_type_value_total; 
      
      total_value_        := total_value_ + parts_rec_.total_value;
      total_value_compat_ := total_value_compat_ + parts_rec_.comparator_type_value_total;
      total_value_diff_   := NVL((total_value_ - total_value_compat_),0);
      unit_cost_round_    := ROUND(parts_rec_.unit_cost,currency_rounding_);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_,'PART_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', parts_rec_.part_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PART_DESCRIPTION', parts_rec_.description);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIGURATION_ID', parts_rec_.configuration_id);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE',parts_rec_.condition_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'QUANTITY',parts_rec_.total_quantity);
         Xml_Record_Writer_SYS.Add_Element(xml_,'UNIT_MEAS',parts_rec_.unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COST_PER_UNIT',unit_cost_round_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_VAL_PER_UNIT',parts_rec_.comparator_type_value_per_unit);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_INVENTORY_VALUE',parts_rec_.total_value);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COMPARATOR_TYPE_VALUE',parts_rec_.comparator_type_value_total);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_VALUE_DIFFERENCE',parts_rec_.total_value - parts_rec_.comparator_type_value_total);
         Xml_Record_Writer_SYS.End_Element(xml_,'PART_ITEM');
      END IF;
   END LOOP;
   
   IF NOT(no_datatfound_) THEN
      total_value_diff_tab(counter_) := total_value_tab(counter_) - total_comparator_value_tab(counter_); 
   END IF;
   IF (do_xml_) THEN 
      Xml_Record_Writer_SYS.End_Element(xml_,'PART_ITEMS');
      Xml_Record_Writer_SYS.Start_Element(xml_,'ATTRIBUTE_TOTALS');
   END IF;
   FOR attr_ IN 1..counter_ LOOP
      IF (do_xml_) THEN 
         Xml_Record_Writer_SYS.Start_Element(xml_,'ATTRIBUTE_TOTAL');
         Xml_Record_Writer_SYS.Add_Element(xml_,'SORT_ATTRIBUTE',in_criteria_ || ' : ' ||attribute_value_tab(attr_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'ATTR_TOTAL_VAL',total_value_tab(attr_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'ATTR_TOTAL_COMP_VAL',total_comparator_value_tab(attr_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'ATTR_TOTAL_VAL_DIFF',total_value_diff_tab(attr_));
         Xml_Record_Writer_SYS.End_Element(xml_,'ATTRIBUTE_TOTAL');
      END IF;
   END LOOP;
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'ATTRIBUTE_TOTALS');
      Xml_Record_Writer_SYS.Start_Element(xml_,'PART_TOTALS');
      Xml_Record_Writer_SYS.Start_Element(xml_,'PART_TOTAL');
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_VALUE',total_value_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_VALUE_COMPAT',total_value_compat_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_VALUE_DIFF',total_value_diff_);
      Xml_Record_Writer_SYS.End_Element(xml_,'PART_TOTAL');
      Xml_Record_Writer_SYS.End_Element(xml_,'PART_TOTALS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&REPVIEW');
      Report_SYS.Finish_Xml_Report('&REPVIEW',result_key_,xml_);
   END IF;
END &REPMETHOD;

-----------------------------------------------------------------------------
-- Get_Default_Value__
--
--    Returns value 'No' which is a clint value of Gen_Yes_No_API.
-----------------------------------------------------------------------------
PROCEDURE Get_Default_Value__ ( no_ OUT VARCHAR2 )
IS  
BEGIN
  General_SYS.Init_Method(lu_name_, '&PKG', 'Get_Default_Value__');
  no_ := Gen_Yes_No_API.Get_Client_Value(1);  
END Get_Default_Value__;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR
-----------------------------------------------------------------------------
-- REPORT TEXTS
-----------------------------------------------------------------------------
BEGIN
    Report_SYS.Define_Report_Text_('&REPVIEW', 'titleTotal', 'Total');
END;
/
COMMIT
/



----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE REPVIEW
UNDEFINE VIEW_RPV
UNDEFINE REPMETHOD
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESC
UNDEFINE PART_NO
UNDEFINE PART_DESCRIPTION
UNDEFINE CONFIGURATION_ID
UNDEFINE UNIT_MEAS
UNDEFINE CONDITION_CODE
UNDEFINE QUANTITY
UNDEFINE COST_PER_UNIT
UNDEFINE COMP_VAL_PER_UNIT
UNDEFINE TOTAL_INVENTORY_VALUE
UNDEFINE TOTAL_COMPARATOR_TYPE_VALUE
UNDEFINE TOTAL_VALUE_DIFFERENCE
UNDEFINE SORT_ATTRIBUTE
UNDEFINE ATTR_TOTAL_VAL
UNDEFINE ATTR_TOTAL_COMP_VAL
UNDEFINE ATTR_TOTAL_VAL_DIFF
UNDEFINE TOTAL_VALUE
UNDEFINE TOTAL_VALUE_COMPAT
UNDEFINE TOTAL_VALUE_DIFF
