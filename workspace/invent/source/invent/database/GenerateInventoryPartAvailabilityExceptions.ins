-------------------------------------------------------------------------------------------- 
-- Export file for Task INV_PART_AVAIL_EXCEPTION_API.GENERATE_EXCEPTION_MESSAGES.
-- 
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  191030  SBalLK  Bug 150737 (SCZ-7216), Added DBPLSQL Block to update PROJECT_ID parameter with '*' where, schedule created with NULL PROJECT_ID.
--  180626  ShPrlk  Bug 142316, Modified the default parameter of the PROJECT_ID from '#' to '*'.
--  171122  BudKlk  Bug 138047, Modified the default parameter of the PROJECT_ID as '#' and mandatory.
--  091030  ShKolk  Bug 86768, Merge IPR to APP75 core.
--  080422  NiBalk  Bug 72596, Modified ARGUMENT_TYPE_DB value from PARAMETER to ATTRIBUTE and
--  080422          removed underscore from all method parameters.
--  050328  IFSAPP  Export file for task INV_PART_AVAIL_EXCEPTION_API.GENERATE_EXCEPTION_MESSAGES.
-------------------------------------------------------------------------------------------- 

PROMPT Register Batch Schedule Method "INV_PART_AVAIL_EXCEPTION_API.GENERATE_EXCEPTION_MESSAGES"
DECLARE
   schedule_method_id_ NUMBER          := NULL;
   seq_no_             NUMBER          := NULL;
   info_msg_           VARCHAR2(32000) := NULL;
BEGIN
-- Construct Main Message
   info_msg_    := Message_SYS.Construct('');
   Message_SYS.Add_Attribute(info_msg_, 'METHOD_NAME', 'INV_PART_AVAIL_EXCEPTION_API.GENERATE_EXCEPTION_MESSAGES');
   Message_SYS.Add_Attribute(info_msg_, 'DESCRIPTION', 'Generate Inventory Part Availability Exceptions');
   Message_SYS.Add_Attribute(info_msg_, 'MODULE', 'INVENT');
   Message_SYS.Add_Attribute(info_msg_, 'SINGLE_EXECUTION_DB', 'FALSE');
   Message_SYS.Add_Attribute(info_msg_, 'ARGUMENT_TYPE_DB', 'ATTRIBUTE');
   Message_SYS.Add_Attribute(info_msg_, 'VALIDATION_METHOD', 'INV_PART_AVAIL_EXCEPTION_API.VALIDATE_PARAMS');
-- Register Batch Schedule Method
   Batch_SYS.Register_Batch_Schedule_Method(schedule_method_id_, info_msg_);
-- Adding parameters
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'CONTRACT', to_char(NULL), 'TRUE', 'User_Allowed_Site_API.Get_Default_Site');
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PROJECT_ID', '*', 'TRUE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PLANNER_BUYER', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'SECOND_COMMODITY', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PART_PRODUCT_FAMILY', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PART_PRODUCT_CODE', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PART_STATUS', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PLANNING_METHOD', '%', 'FALSE', NULL);
END;
/

DECLARE
   schedule_method_id_ NUMBER;
   schedule_method_name_ VARCHAR2(255) := 'INV_PART_AVAIL_EXCEPTION_API.GENERATE_EXCEPTION_MESSAGES';
   
   PROCEDURE Update_Param_If_Null(
      schedule_method_id_ IN NUMBER,
      parameter_name_     IN VARCHAR2,
      parameter_value_    IN VARCHAR2 )
   IS
      CURSOR Get_Valid_Params IS
         SELECT bsp.schedule_id, bsp.seq_no
         FROM   batch_schedule_pub bs, batch_schedule_par_pub bsp
         WHERE  bs.schedule_method_id = schedule_method_id_
         AND    bs.schedule_id        = bsp.schedule_id
         AND    bsp.name              = parameter_name_
         AND    bsp.value IS NULL;
   BEGIN
      FOR rec_ IN Get_Valid_Params LOOP
         Batch_SYS.Modify_Batch_Schedule_Param(rec_.schedule_id, rec_.seq_no, parameter_name_, parameter_value_);
      END LOOP;
   END Update_Param_If_Null;
BEGIN
   schedule_method_id_ := Batch_Schedule_Method_API.Get_Schedule_Method_Id(schedule_method_name_);
   Update_Param_If_Null(schedule_method_id_, 'PROJECT_ID', '*');
END;
/
COMMIT;

