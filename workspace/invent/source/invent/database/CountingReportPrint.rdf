-----------------------------------------------------------------------------
--
--  Logical unit: Counting Report
--
--  Purpose:      Create count report for inventory part
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  220131  ChJalk  SC21R2-7270, Modified Report_Printout to initialize activity_id_ and sub_project_id_.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not 
--  210127          include custom field according to the report definition.
--  180302  MaAuse  STRSC-16691, Added include_full_qty_of_hu, handling_unit_type_id, top_handling_unit_type_id, handling_category_type_id,
--  180302          top_handling_category_type_id, exclude_attached_to_hu_, exclude_not_attached_to_hu_, exclude_supplier_rented_ and exclude_company_rental_asset_.   
--  160603  KhVese  LIM-7128, Added Handling Unit Information to the Report.
--  160316  Jhalse  RDSC-1143, Fixed bug regarding condition code not being set correctly 
--  151029  MaEelk  LIM-3784, Removed pallet_id from the report.
--  150708  MaEelk  LIM-3316, Added Handling Unit ID to the report.
--  141124  DaZase  PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
--  141031  JeLise  Added location_group, abc_class, frequency_class and lifecycle_stage.
--  141028  JeLise  Removed from_warehouse, to_warehouse, from_bay, to_bay, from_part_no and to_part_no and added 
--  141028          selection_warehouse_id, selection_bay_id, selection_row_id, selection_tier_id, selection_bin_id, 
--  141028          storage_zone_id and selection_part_no instead.
--  140716  TiRalk  Bug 117850, Modified report method to print company name properly.
--  140122  TiRalk  Bug 114872, Changed PART_U_M title Unit of Measure to UoM.
--  130731  MaRalk  TIBE-832, Removed global LU constant inst_Project_ and modified Report_Printout 
--  130731          using conditional compilation instead.
--  120821  PraWlk  Custom Fields enabled in the report.
--  111027  NISMLK  SMA-285, Increased eng_chg_level length to STRING(6) in column comments.
--  110920  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  100917  DAYJLK  Bug 89720, Restructured method Report_Printout to use just one cursor instead of two to avoid fetching 
--  100917          the same information twice. Used sorted records in counting_report_line_tab to reuse unchanged 
--  090928  ChFolk  Removed unused variables in the package.
------------------------------------ 14.0.0 -----------------------------------
--  100917          information in subsequent iterations of loops. Performed cleanup by removing obsolete code.
--  091202  PraWlk  Bug 87227, Added archive notes in method Report_Printout to show Count Report No and Site. 
--  091008  NaLrlk  Replaced inventory_location_tab to warehouse_bay_bin_tab.
--  090101  PraWlk  Bug 79478, Modified Report_Printout by adding code to fetch correct values
--  090101          for condition code and condition code description.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  071213  NuVelk  Bug 69872, Modified cursor get_rows_xml and added NVL checks 
--  071213          to make sure that bay_no is handled correctly.
--  070918  NaWilk  Added report text SIGNATURE.
--  070917  WaJalk  Added Part Catalog Notes to report.
--  070917  RoJalk  Modified the logic related to retrival of part related document text.
--  070725  JaBalk  Bug 66647, Modified the cursor get_rows_xml. Removed variables 
--  070725          prev_loc_row_no_, prev_tier_no_ and prev_bin_no_.
--  070411  IsAnlk  Modifed part_note_id_ to get document texts from Part Catalog when centralized description is used. 
--  061106  DaZase  Removed calls to Part_Catalog_API.Get_Enabled_Catch_Unit_Code 
--                  since this is now a public attribute in Inventory_Part instead.
--  061019  IsWilk  Bug 60470, Added code in do_xml_ condition to get the correct Part_Note. 
--  061019          Introduced a new column PART_NOTE in COUNTING_REPORT_PRINT_REP. 
--  061019          Added code to insert Part_note_id into INVENT_INFO_SERVICES_RPT.
--  060810  ChJalk  Modified hard_coded dates to be able to use any calendar.
--  060720  RoJalk  Centralized Part Desc - Use Inventory_Part_API.Get_Description.
--  060601  RoJalk  Enlarge Part Description - Changed view comments.
--  060528  GeKalk  Bug 57927. Added exclude_customer_owned, exclude_supplier_loaned, exclude_consignment
--  060528          exclude_company_owned,exclude_rotable_pool, exclude_fa_rotable_pool, exclude_since and  
--  060528          changed the titles of cycle_code, include_all_qty, freeze_code, process_count and second_commodity. 
--------------------------------------13.4.0-----------------------------------
--  060125  JeLise  Bug 55742, Removed SORT_ORDER in report view and changed the ORDERBY to seq.
--  051216  SuJalk  Changed the parameter VIEW_RPV to REP1TAB in Define_Report_.
--  051213  HoInlk  Bug 54811, Added SORT_ORDER to report view and ORDERBY to report definition.
--  050927  HoInlk  Bug 51652, Modified to use new IID CyclicCounting instead of InventoryPartCountType.
--  050921  NiDalk  Removed unused variables.
--  050912  HoInlk  Bug 53131, Added Location No to report.
--  050401  IsAnlk  Modified part_description to show correct values when using RD.
--  050304  SaJjlk  Added column CATCH_COUNT.
--  050105  SaNalk  Modifications in Report Designer Layout.
--  041007  SaNalk  Converted to Report Designer Layout.Removed Security constraint to view COUNTING_REPORT_PRINT_REP.
--  040930  SaJjlk  Added Catch_Uom to to detail lines.
--  040901  HaPulk  Bug 44975, Added security constraint to view COUNTING_REPORT_PRINT_REP.
--  040726  Samnlk  Added a dynamica call to get the project details.
--  040715  Samnlk  Added new columns to the headder and line
--  040603  NaWilk  Bug 44975, Modified FROM clause in view COUNTING_REPORT_PRINT_REP
----------------------------------- 13.3.0 -------------------------------------
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  030728  KiSalk SP4 Merge.
--  030717  ChFolk  Call ID 100120. Added ROW_NO into the view COUNTING_REPORT_PRINT_REP.
--  030307  ANHOSE  Bug 36101, added include_all_qty in the report header.
--  021112  SaRalk  Bug 33337, Added code which enables to add different logos for different companies.
--  020626  CHJALK  Added Condition Code and Condition Code Description.
--  020603  NASALK  Extension of serial_no from VARCHAR2(15) to VARCHAR2(50)in views.
-------------------------------------------- AD 2002-3 Baseline ----------------------------------
--  000925  JOHESE  Added undefines.
--  000825  PERK    Added configuration_id
--  000414  NISOSE  Added General_SYS.Init_Method in test.
--  990521  FRDI    Order report_rows by seq this order is given by the get_partloc cursor in
--                  inventory_part_lovation_api.Create_Inventory_Count_Impl___.
--  990420  ROOD    Removed Encode of freeze_code and cycle_code during insert.
--                  Other general performance improvements.
--  990309  JOHW    Added contract in function calls according to location in view.
--  971124  GOPE    Added Report_SYS.refresh
--  971106  GOPE    Made Part_U_M 10 characters
--  970908  JOMC    Changed Unit of Measure handling to conform to UoM handling
--                  in Application Services
--  970902  JOMU    Changed to use INVENT_INFO_SERVICES_RPT.  Tables COUNTING_
--                  REPORT_HEADER_RPT and COUNTING_REPORT_DETAIL_RPT made obsolete.
--  970422  MAGN    Added pallet_id in rep2tab view.
--  970405  JOKE    Corrected old table names.
--  970109  MAOR    Changed Freeze_code and Cycle_code to use own IID:s instead of
--                  Gen_Yes_No_API.
--  961214  AnAr    Removed Dbms_Output.Put_Line.
--  961108  MAOR    Changed order of part_no and contract in call to LU
--                  Inventory_Part_API. Also changed name on Get_UnitMeas to be
--                  Get_Unit_Meas.
--  961031  MAOR    Changed name on functions: Inventory_Location_API.Get_Bay,
--                  Get_Row, Get_Tier and Get_Bin to have _No at the end.
--  961015  JOHNI   Added / after commit.
--  961011  GOPE    Removed "/" and drop of view
--  960925  GOPE    Added report title
--  960815  GOPE    Created
--
-----------------------------------------------------------------------------

define MODULE      = INVENT
define LU          = CountingReport
define PKG         = COUNTING_REPORT_RPI

define REP1TAB     = INVENT_INFO_SERVICES_RPT
define REP2TAB     = INVENT_INFO_SERVICES_RPT
define REP1VIEW    = COUNTING_REPORT_PRINT_REP
DEFINE VIEW_RPV    = INVENT_INFO_SERVICES_RPV
define REP1METHOD  = Report_Printout

-- REP1TAB definition
define INV_LIST_NO                   = S1
define HEAD_CONTRACT                 = S2
define SECOND_COMMODITY              = S3
define CYCLE_CODE                    = S4
define USERID                        = S5
define SELECTION_WAREHOUSE_ID        = S6
define SELECTION_BAY_ID              = S7
define SELECTION_ROW_ID              = S8
define SELECTION_TIER_ID             = S9
define SELECTION_BIN_ID              = S10
define STORAGE_ZONE_ID               = S51
define SELECTION_PART_NO             = S11
define FREEZE_CODE                   = S12
define CREATE_DATE                   = D1
define LAST_COUNT_DATE               = D2
define MAX_QTY_ONHAND                = N1
define PROCESS_COUNT                 = N2
define INCLUDE_ALL_QTY               = S31
define HEAD_PROJECT_ID               = S32
define EXCLUDE_STANDARD_INVENTORY    = S33
define EXCLUDE_PROJECT_INVENTORY     = S34
-- REP2TAB definition              
define DETAIL_CONTRACT               = S13
define LOCATION_NO                   = S14
define LOT_BATCH_NO                  = S15
define PART_NO                       = S16
define SERIAL_NO                     = S17
define WAIV_DEV_REJ_NO               = S18
define ENG_CHG_LEVEL                 = S19
define SEQ                           = N3
define WAREHOUSE_ID                  = S21
define BAY_ID                        = S22
define ROW_ID                        = S23
define TIER_ID                       = S24
define BIN_ID                        = S25
define PART_DESCRIPTION              = S26
define PART_U_M                      = S27
define CONFIGURATION_ID              = S28
define CONDITION_CODE                = S29
define CONDITION_CODE_DESCRIPTION    = S30
define PROJECT_ID                    = S37
define SUB_PROJECT_ID                = S39
define ACTIVITY_ID                   = S41
define ACTIVITY_SEQUENCE             = S43
define CATCH_UOM                     = S44
define CATCH_COUNT                   = N4
define EXCLUDE_CUSTOMER_OWNED        = S45
define EXCLUDE_SUPPLIER_LOANED       = S46
define EXCLUDE_CONSIGNMENT           = S47
define EXCLUDE_COMPANY_OWNED         = S48
define EXCLUDE_ROTABLE_POOL          = S49
define EXCLUDE_FA_ROTABLE_POOL       = S50
define EXCLUDE_SINCE                 = N5
define PART_NOTE_ID                  = N6
define PART_CATALOG_NOTES            = S35
define LOCATION_GROUP                = S52
define ABC_CLASS                     = S53
define FREQUENCY_CLASS               = S54
define LIFECYCLE_STAGE               = S55
define STRUCTURE_LEVEL               = N7
define HANDLING_UNIT_ID              = N8
define HANDLING_UNIT_TYPE_ID         = S56
define HU_TYPE_DESCRIPTION           = S57
define HANDLING_UNIT_CATEGORY_ID     = S58
DEFINE HU_CATEGORY_DESCRIPTION       = S59
define SSCC                          = S60
define ALT_HANDLING_UNIT_LABEL_ID    = S61
define COMPOSITION                   = S62
DEFINE WIDTH                         = N9
DEFINE HEIGHT                        = N10
DEFINE DEPTH                         = N11
DEFINE UOM_FOR_LENGTH                = S63
DEFINE NET_WEIGHT                    = N12
DEFINE TARE_WEIGHT                   = N13
DEFINE OPERATIVE_GROSS_WEIGHT        = N14
DEFINE UOM_FOR_WEIGHT                = S64
DEFINE OPERATIVE_VOLUME              = N15
DEFINE UOM_FOR_VOLUME                = S65
DEFINE PRINT_HU                      = S66
DEFINE EXCLUDE_ATTACHED_TO_HU        = S67
DEFINE EXCLUDE_NOT_ATTACHED_TO_HU    = S68
DEFINE EXCLUDE_SUPPLIER_RENTED       = S69
DEFINE EXCLUDE_COMP_RENTAL_ASSET     = S70
DEFINE INCLUDE_FULL_QTY_OF_HU        = S71
DEFINE SEL_HANDLING_UNIT_TYPE_ID     = S72
DEFINE TOP_HANDLING_UNIT_TYPE_ID     = S73
DEFINE HANDLING_CATEGORY_TYPE_ID     = S74
DEFINE TOP_HANDLING_CATEGORY_TYPE_ID = S75
-----------------------------------------------------------------------------
-- TABLES:
-----------------------------------------------------------------------------

PROMPT Creating reports for logical unit &LU

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &REP1METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE test (
   reportKey   IN VARCHAR2,
   invListNo   IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Counting Report Printout
-- Type:       PLSQL1.2
-- Objects:    TABLES = COUNTING_REPORT_HEADER_RPT,
--                      COUNTING_REPORT_DETAIL_RPT,
--             VIEW   = COUNTING_REPORT_PRINT_REP
--             METHOD = COUNTING_REPORT_RPI.Report_Printout
-----------------------------------------------------------------------------
PROMPT Creating report view &REP1VIEW
-- Drop the view before recreating it to make sure the view is created
-- from scratch again
CREATE OR REPLACE VIEW &REP1VIEW AS
SELECT PARENT.RESULT_KEY                                             RESULT_KEY,
       PARENT.ROW_NO                                                 ROW_NO,
       PARENT.&HEAD_CONTRACT                                         HEAD_CONTRACT,
       PARENT.&SECOND_COMMODITY                                      SECOND_COMMODITY,
       PARENT.&CREATE_DATE                                           CREATE_DATE,
       SUBSTR(Cyclic_Counting_API.Decode(PARENT.&CYCLE_CODE),1,40)   CYCLE_CODE,
       PARENT.&USERID                                                USERID,
       PARENT.&SELECTION_WAREHOUSE_ID                                SELECTION_WAREHOUSE_ID,
       PARENT.&SELECTION_BAY_ID                                      SELECTION_BAY_ID,
       PARENT.&SELECTION_ROW_ID                                      SELECTION_ROW_ID,
       PARENT.&SELECTION_TIER_ID                                     SELECTION_TIER_ID,
       PARENT.&SELECTION_BIN_ID                                      SELECTION_BIN_ID,
       PARENT.&STORAGE_ZONE_ID                                       STORAGE_ZONE_ID,
       PARENT.&SELECTION_PART_NO                                     SELECTION_PART_NO,
       PARENT.&MAX_QTY_ONHAND                                        MAX_QTY_ONHAND,
       PARENT.&LAST_COUNT_DATE                                       LAST_COUNT_DATE,
       PARENT.&EXCLUDE_SINCE                                         EXCLUDE_SINCE,
       substr(Gen_Yes_No_API.Decode(PARENT.&FREEZE_CODE),1,20)       FREEZE_CODE,
       PARENT.&PROCESS_COUNT                                         PROCESS_COUNT,
       PARENT.&INV_LIST_NO                                           INV_LIST_NO,
       substr(Gen_Yes_No_API.Decode(PARENT.&INCLUDE_FULL_QTY_OF_HU),1,20) INCLUDE_FULL_QTY_OF_HU,
       PARENT.&SEL_HANDLING_UNIT_TYPE_ID                             SEL_HANDLING_UNIT_TYPE_ID,
       PARENT.&TOP_HANDLING_UNIT_TYPE_ID                             TOP_HANDLING_UNIT_TYPE_ID,
       PARENT.&HANDLING_CATEGORY_TYPE_ID                             HANDLING_CATEGORY_TYPE_ID,
       PARENT.&TOP_HANDLING_CATEGORY_TYPE_ID                         TOP_HANDLING_CATEGORY_TYPE_ID,
       CHILD.&DETAIL_CONTRACT                                        DETAIL_CONTRACT,
       CHILD.&WAREHOUSE_ID                                           WAREHOUSE_ID,
       CHILD.&BAY_ID                                                 BAY_ID,
       CHILD.&ROW_ID                                                 ROW_ID,
       CHILD.&TIER_ID                                                TIER_ID,
       CHILD.&BIN_ID                                                 BIN_ID,
       CHILD.&SEQ                                                    SEQ,
       CHILD.&PART_NO                                                PART_NO,
       CHILD.&PART_DESCRIPTION                                       PART_DESCRIPTION,
       CHILD.&PART_U_M                                               PART_U_M,
       CHILD.&SERIAL_NO                                              SERIAL_NO,
       CHILD.&WAIV_DEV_REJ_NO                                        WAIV_DEV_REJ_NO,
       CHILD.&ENG_CHG_LEVEL                                          ENG_CHG_LEVEL,
       CHILD.&LOT_BATCH_NO                                           LOT_BATCH_NO,
       CHILD.&CONFIGURATION_ID                                       CONFIGURATION_ID,
       CHILD.&CONDITION_CODE                                         CONDITION_CODE,
       CHILD.&CONDITION_CODE_DESCRIPTION                             CONDITION_CODE_DESCRIPTION,
       substr(Gen_Yes_No_API.Decode(PARENT.&INCLUDE_ALL_QTY),1,20)   INCLUDE_ALL_QTY,
       PARENT.&HEAD_PROJECT_ID                                       HEAD_PROJECT_ID,
       substr(Gen_Yes_No_API.Decode(PARENT.&EXCLUDE_STANDARD_INVENTORY),1,20)  EXCLUDE_STANDARD_INVENTORY,
       substr(Gen_Yes_No_API.Decode(PARENT.&EXCLUDE_PROJECT_INVENTORY),1,20)   EXCLUDE_PROJECT_INVENTORY,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_CUSTOMER_OWNED,'EXCLUDE','Y','N')),1,20)  EXCLUDE_CUSTOMER_OWNED,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_SUPPLIER_LOANED,'EXCLUDE','Y','N')),1,20) EXCLUDE_SUPPLIER_LOANED,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_CONSIGNMENT,'EXCLUDE','Y','N')),1,20)     EXCLUDE_CONSIGNMENT,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_COMPANY_OWNED,'EXCLUDE','Y','N')),1,20)   EXCLUDE_COMPANY_OWNED,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_ROTABLE_POOL,'EXCLUDE','Y','N')),1,20)    EXCLUDE_ROTABLE_POOL,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_FA_ROTABLE_POOL,'EXCLUDE','Y','N')),1,20) EXCLUDE_FA_ROTABLE_POOL,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_ATTACHED_TO_HU,'EXCLUDE','Y','N')),1,20) EXCLUDE_ATTACHED_TO_HU,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_NOT_ATTACHED_TO_HU,'EXCLUDE','Y','N')),1,20) EXCLUDE_NOT_ATTACHED_TO_HU,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_SUPPLIER_RENTED,'EXCLUDE','Y','N')),1,20) EXCLUDE_SUPPLIER_RENTED,
       substr(Gen_Yes_No_API.Decode(DECODE(PARENT.&EXCLUDE_COMP_RENTAL_ASSET,'EXCLUDE','Y','N')),1,20) EXCLUDE_COMP_RENTAL_ASSET,
       CHILD.&PROJECT_ID                                             PROJECT_ID,
       CHILD.&SUB_PROJECT_ID                                         SUB_PROJECT_ID,
       CHILD.&ACTIVITY_ID                                            ACTIVITY_ID,
       CHILD.&ACTIVITY_SEQUENCE                                      ACTIVITY_SEQUENCE,
       CHILD.&CATCH_UOM                                              CATCH_UOM,
       CHILD.&CATCH_COUNT                                            CATCH_COUNT,
       CHILD.&LOCATION_NO                                            LOCATION_NO,
       SUBSTR(Document_Text_API.Get_All_Notes(CHILD.&PART_NOTE_ID, '7'), 1, 2000) PART_NOTE,
       CHILD.&PART_CATALOG_NOTES                                     PART_CATALOG_NOTES,
       PARENT.&LOCATION_GROUP                                        LOCATION_GROUP,
       PARENT.&ABC_CLASS                                             ABC_CLASS,
       substr(Inv_Part_Frequency_Class_API.Decode(PARENT.&FREQUENCY_CLASS), 1, 20)                   FREQUENCY_CLASS,
       substr(Inv_Part_Lifecycle_Stage_API.Decode(PARENT.&LIFECYCLE_STAGE), 1, 20)                   LIFECYCLE_STAGE,
       CHILD.&STRUCTURE_LEVEL                                        STRUCTURE_LEVEL,
       CHILD.&HANDLING_UNIT_ID                                       HANDLING_UNIT_ID,
       CHILD.&HANDLING_UNIT_TYPE_ID                                  HANDLING_UNIT_TYPE_ID,
       CHILD.&HU_TYPE_DESCRIPTION                                    HU_TYPE_DESCRIPTION,
       CHILD.&HANDLING_UNIT_CATEGORY_ID                              HANDLING_UNIT_CATEGORY_ID,
       CHILD.&HU_CATEGORY_DESCRIPTION                                HU_CATEGORY_DESCRIPTION,
       CHILD.&SSCC                                                   SSCC,
       CHILD.&ALT_HANDLING_UNIT_LABEL_ID                             ALT_HANDLING_UNIT_LABEL_ID,
       CHILD.&COMPOSITION                                            COMPOSITION,       
       CHILD.&WIDTH                                                  WIDTH,
       CHILD.&HEIGHT                                                 HEIGHT,
       CHILD.&DEPTH                                                  DEPTH,
       CHILD.&UOM_FOR_LENGTH                                         UOM_FOR_LENGTH,
       CHILD.&NET_WEIGHT                                             NET_WEIGHT,
       CHILD.&TARE_WEIGHT                                            TARE_WEIGHT,
       CHILD.&OPERATIVE_GROSS_WEIGHT                                 OPERATIVE_GROSS_WEIGHT,
       CHILD.&UOM_FOR_WEIGHT                                         UOM_FOR_WEIGHT,
       CHILD.&OPERATIVE_VOLUME                                       OPERATIVE_VOLUME,
       CHILD.&UOM_FOR_VOLUME                                         UOM_FOR_VOLUME,
       CHILD.&PRINT_HU                                               PRINT_HU       
FROM   &VIEW_RPV PARENT, &VIEW_RPV CHILD
WHERE  PARENT.RESULT_KEY    = CHILD.RESULT_KEY
AND    PARENT.ROW_NO        = CHILD.PARENT_ROW_NO
AND    PARENT.PARENT_ROW_NO = 0
WITH   read only;

COMMENT ON TABLE &REP1VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Inventory Count Report^';

COMMENT ON COLUMN &REP1VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &REP1VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &REP1VIEW..HEAD_CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Site^';
COMMENT ON COLUMN &REP1VIEW..second_commodity IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Commodity Group 2^';
COMMENT ON COLUMN &REP1VIEW..create_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Creation Date^';
COMMENT ON COLUMN &REP1VIEW..cycle_code IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Part Selection^';
COMMENT ON COLUMN &REP1VIEW..USERID IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Created By^';
COMMENT ON COLUMN &REP1VIEW..SELECTION_WAREHOUSE_ID IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse^';
COMMENT ON COLUMN &REP1VIEW..SELECTION_BAY_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay^';
COMMENT ON COLUMN &REP1VIEW..SELECTION_ROW_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row^';
COMMENT ON COLUMN &REP1VIEW..SELECTION_TIER_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier^';
COMMENT ON COLUMN &REP1VIEW..SELECTION_BIN_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bin^';
COMMENT ON COLUMN &REP1VIEW..storage_zone_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Storage Zone ID^';
COMMENT ON COLUMN &REP1VIEW..SELECTION_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^';
COMMENT ON COLUMN &REP1VIEW..max_qty_onhand IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Max Quantity on Hand^';
COMMENT ON COLUMN &REP1VIEW..last_count_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Exclude Parts Counted Since^';
COMMENT ON COLUMN &REP1VIEW..exclude_since IS
   'FLAGS=A----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &REP1VIEW..freeze_code IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Freeze Part While Counting^';
COMMENT ON COLUMN &REP1VIEW..process_count IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of Records to be Printed^';
COMMENT ON COLUMN &REP1VIEW..INV_LIST_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Count Report No^QUERY=Count Report No^QFLAGS=MCS--^REF=COUNTING_REPORT^';
COMMENT ON COLUMN &REP1VIEW..DETAIL_CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Site^';
COMMENT ON COLUMN &REP1VIEW..WAREHOUSE_ID IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse^';
COMMENT ON COLUMN &REP1VIEW..BAY_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay^';
COMMENT ON COLUMN &REP1VIEW..ROW_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row^';
COMMENT ON COLUMN &REP1VIEW..TIER_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier^';
COMMENT ON COLUMN &REP1VIEW..BIN_ID IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bin^';
COMMENT ON COLUMN &REP1VIEW..SEQ IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sequence No^';
COMMENT ON COLUMN &REP1VIEW..PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^';
COMMENT ON COLUMN &REP1VIEW..PART_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^';
COMMENT ON COLUMN &REP1VIEW..PART_U_M IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=UoM^';
COMMENT ON COLUMN &REP1VIEW..SERIAL_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Serial No^';
COMMENT ON COLUMN &REP1VIEW..WAIV_DEV_REJ_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=W/D/R No^';
COMMENT ON COLUMN &REP1VIEW..ENG_CHG_LEVEL IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Rev No^';
COMMENT ON COLUMN &REP1VIEW..LOT_BATCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lot/Batch^';
COMMENT ON COLUMN &REP1VIEW..CONFIGURATION_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^';
COMMENT ON COLUMN &REP1VIEW..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code^';
COMMENT ON COLUMN &REP1VIEW..CONDITION_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description^';
COMMENT ON COLUMN &REP1VIEW..include_all_qty IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Include All Qty of Part on Location^';
COMMENT ON COLUMN &REP1VIEW..head_project_id IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Project ID^';
COMMENT ON COLUMN &REP1VIEW..exclude_standard_inventory IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Standard Inventory^';
COMMENT ON COLUMN &REP1VIEW..exclude_project_inventory IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Project Inventory^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_CUSTOMER_OWNED IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Customer Owned^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_SUPPLIER_LOANED IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Supplier Loaned^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_CONSIGNMENT IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Consignment^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_COMPANY_OWNED IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Company Owned^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_ROTABLE_POOL IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Rotable Pool^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_FA_ROTABLE_POOL IS
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude FA Rotable Pool^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_ATTACHED_TO_HU IS
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Attached to Handling Unit^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_NOT_ATTACHED_TO_HU IS
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Not Attached to Handling Unit^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_SUPPLIER_RENTED IS
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Supplier Rented^';
COMMENT ON COLUMN &REP1VIEW..EXCLUDE_COMP_RENTAL_ASSET IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Company Rental Asset^';
COMMENT ON COLUMN &REP1VIEW..Project_ID IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Project ID^';
COMMENT ON COLUMN &REP1VIEW..Sub_Project_ID IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Sub Project ID^';
COMMENT ON COLUMN &REP1VIEW..Activity_ID IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Activity ID^';
COMMENT ON COLUMN &REP1VIEW..Activity_Sequence IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Sequence^';
COMMENT ON COLUMN &REP1VIEW..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Catch UoM^';
COMMENT ON COLUMN &REP1VIEW..CATCH_COUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Catch Count^';
COMMENT ON COLUMN &REP1VIEW..LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No^';
COMMENT ON COLUMN &REP1VIEW..PART_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Note^';
COMMENT ON COLUMN &REP1VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Note^';
COMMENT ON COLUMN &REP1VIEW..LOCATION_GROUP IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Location Group^';
COMMENT ON COLUMN &REP1VIEW..ABC_CLASS IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Abc Class^';
COMMENT ON COLUMN &REP1VIEW..FREQUENCY_CLASS IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Frequency Class^';
COMMENT ON COLUMN &REP1VIEW..LIFECYCLE_STAGE IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lifecycle Stage^';
COMMENT ON COLUMN &REP1VIEW..structure_level IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Structure Level^';
COMMENT ON COLUMN &REP1VIEW..handling_unit_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^';
COMMENT ON COLUMN &REP1VIEW..handling_unit_type_id IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Type ID^';
COMMENT ON COLUMN &REP1VIEW..hu_type_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Type Description^';
COMMENT ON COLUMN &REP1VIEW..handling_unit_category_id IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Category ID^';
COMMENT ON COLUMN &REP1VIEW..hu_category_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Category Description^';
COMMENT ON COLUMN &REP1VIEW..sscc IS
   'FLAGS=A----^DATATYPE=STRING(18)^TITLE=SSCC^';
COMMENT ON COLUMN &REP1VIEW..alt_handling_unit_label_id IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN &REP1VIEW..composition IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Composition^';
COMMENT ON COLUMN &REP1VIEW..width
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^';
COMMENT ON COLUMN &REP1VIEW..height
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^';
COMMENT ON COLUMN &REP1VIEW..depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^';
COMMENT ON COLUMN &REP1VIEW..uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Length^';
COMMENT ON COLUMN &REP1VIEW..net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN &REP1VIEW..tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^';
COMMENT ON COLUMN &REP1VIEW..operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Weight^';
COMMENT ON COLUMN &REP1VIEW..uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Weight^';
COMMENT ON COLUMN &REP1VIEW..operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^';
COMMENT ON COLUMN &REP1VIEW..uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Volume^';
COMMENT ON COLUMN &REP1VIEW..print_hu 
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Handling Unit^';
COMMENT ON COLUMN &REP1VIEW..INCLUDE_FULL_QTY_OF_HU 
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Include Full Qty of Handling Unit^';
COMMENT ON COLUMN &REP1VIEW..SEL_HANDLING_UNIT_TYPE_ID 
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Handling Unit Type ID^';
COMMENT ON COLUMN &REP1VIEW..TOP_HANDLING_UNIT_TYPE_ID 
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Top Handling Unit Type ID^';
COMMENT ON COLUMN &REP1VIEW..HANDLING_CATEGORY_TYPE_ID 
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Handling Unit Category ID^';
COMMENT ON COLUMN &REP1VIEW..TOP_HANDLING_CATEGORY_TYPE_ID 
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Top Handling Unit Category ID^';


BEGIN
   Report_SYS.Define_Report_('&REP1VIEW', '&MODULE', '&LU', 'Inventory Count Report', '&REP1TAB', '&PKG..&REP1METHOD', 0,'','','','PLSQL1.2','TRUE','Warehouse Management','Counting');
   Report_SYS.Define_Report_Text_('&REP1VIEW', 'onHand', 'Quantity On Hand');
   Report_SYS.Define_Report_Text_('&REP1VIEW', 'countReport', 'Inventory Count Report');
   Report_SYS.Define_Report_Text_('&REP1VIEW', 'CatchonHand', 'Catch Quantity On Hand');
   Report_SYS.Define_Report_Text_('&REP1VIEW', 'SIGNATURE', 'Signature:');
   Report_SYS.Refresh_('&REP1VIEW');

   -- Addition for Custom Fields 
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&REP1VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&REP1VIEW', 'CountingReport','COUNTING_REPORT_PRINT_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&REP1VIEW', 'WarehouseBayBin','COUNTING_REPORT_PRINT_REP/WAREHOUSE_ITEMS/WAREHOUSE_ITEM/COUNT_ITEMS/COUNT_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&REP1VIEW', 'CountingReportLine','COUNTING_REPORT_PRINT_REP/WAREHOUSE_ITEMS/WAREHOUSE_ITEM/COUNT_ITEMS/COUNT_ITEM');
END;
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     PURCHASE_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-- Report_Printout:
--
-- Purpose: Extracts information needed for a printout report of
--          one count report. The parameter inv_list_no
--          should be a comma separated
--          list containing the counting report no to
--          be printed.
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
PROCEDURE &REP1METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                   NUMBER;
   n0_                           NUMBER := 1;
   n1_                           NUMBER := 1;
   inv_list_no_list_             VARCHAR2(2000);
   row_no_                       NUMBER;
   parent_row_no_                NUMBER := 0;
   parent_row_no2_               NUMBER := 0;
   next_inv_list_no_             &REP1VIEW..INV_LIST_NO%TYPE;
   inventory_part_rec_           Inventory_Part_API.Public_Rec;
   part_description_             &REP1VIEW..PART_DESCRIPTION%TYPE; 
      
   condition_code_               VARCHAR2(10);
   condition_code_description_   VARCHAR2(35);
   sub_project_id_               VARCHAR2(30);
   activity_id_                  VARCHAR2(30);
   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&REP1VIEW');
   do_rs_                        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&REP1VIEW');
   xml_                          CLOB;
   package_name_                 VARCHAR2(100) := 'COUNTING_REPORT_PRINT_REP';

   to_                           NUMBER;
   logotype_                     VARCHAR2(100);
   company_                      VARCHAR2(20);
   company_name_                 VARCHAR2(100);
   catch_uom_                    VARCHAR2(50);
   catch_count_                  NUMBER := 0;
   cycle_code_                   VARCHAR2(40);
   freeze_code_                  VARCHAR2(30);
   include_all_qty_              VARCHAR2(10);
   excl_std_inv_                 VARCHAR2(10);
   excl_prj_Inv_                 VARCHAR2(10);
   prev_warehouse_               VARCHAR2(50):= CHR(132);
   warehouse_                    VARCHAR2(50);
   prev_bay_                     VARCHAR2(30):= CHR(132);
   bay_                          VARCHAR2(30);
   location_                     VARCHAR2(200);
   exclude_customer_owned_       VARCHAR2(20);
   exclude_supplier_loaned_      VARCHAR2(20);
   exclude_consignment_          VARCHAR2(20);
   exclude_company_owned_        VARCHAR2(20);
   exclude_rotable_pool_         VARCHAR2(20);
   exclude_fa_rotable_pool_      VARCHAR2(20);
   exclude_attached_to_hu_       VARCHAR2(20);
   exclude_not_attached_to_hu_   VARCHAR2(20);
   exclude_supplier_rented_      VARCHAR2(20);
   exclude_company_rental_asset_ VARCHAR2(20);
   include_full_qty_of_hu_       VARCHAR2(20);
   handling_unit_type_id_        VARCHAR2(20);
   top_handling_unit_type_id_    VARCHAR2(20);
   handling_category_type_id_    VARCHAR2(20);
   top_handling_category_type_id_ VARCHAR2(20);
   exclude_since_                NUMBER;
   last_count_date_              DATE;
   inv_part_note_id_             NUMBER;
   inv_part_notes_               VARCHAR2(2000);
   partca_part_note_id_          NUMBER;
   partca_part_notes_            VARCHAR2(2000);
   contract_                     VARCHAR2(5);
   archive_notes_                VARCHAR2(2000);
   close_block_                  BOOLEAN:= FALSE;
   previous_contract_            VARCHAR2(25):= CHR(132);
   previous_part_no_             VARCHAR2(25):= CHR(132);

   CURSOR get_header IS
      SELECT Inv_list_no,
             Contract,
             Create_date,
             second_commodity,
             Userid,
             cycle_code,
             warehouse_id,
             bay_id,
             row_id,
             tier_id,
             bin_id,
             storage_zone_id,
             part_no,
             Max_qty_onhand,
             Last_count_date,
             Freeze_code,
             Process_count,
             include_all_qty,
             Project_id,
             exclude_standard_inventory,
             exclude_project_inventory,
             exclude_customer_owned,
             exclude_supplier_loaned,
             exclude_consignment,
             exclude_company_owned,
             exclude_rotable_pool,
             exclude_fa_rotable_pool,
             exclude_attached_to_hu,
             exclude_not_attached_to_hu,
             exclude_supplier_rented,
             exclude_comp_rental_asset,
             include_full_qty_of_hu,
             handling_unit_type_id,
             top_handling_unit_type_id,
             handling_category_type_id,
             top_handling_category_type_id,
             location_group,
             abc_class,
             frequency_class,
             lifecycle_stage,
             rowkey                                                                               
      FROM counting_report_tab
      WHERE inv_list_no = next_inv_list_no_;

   CURSOR get_rows IS
      SELECT crl.Seq,
             crl.Part_no,
             crl.Contract,
             crl.Location_no,
             crl.handling_unit_id,
             il.warehouse_id,
             il.bay_id,
             il.bin_id,
             il.row_id,
             il.tier_id,             
             crl.Lot_batch_no,
             crl.Serial_no,
             crl.Eng_chg_level,
             crl.Waiv_dev_rej_no,
             crl.Configuration_id,
             crl.Project_id,
             crl.Activity_seq,
             crl.rowkey    crl_rowkey,
             il.rowkey     il_rowkey
      FROM counting_report_line_tab crl, warehouse_bay_bin_tab il
      WHERE crl.inv_list_no = next_inv_list_no_
      AND   crl.contract    = il.contract
      AND   crl.location_no = il.location_no
      ORDER BY Seq;
-- The seq is given in the inventory_part_lovation_api.Create_Inventory_Count_Impl___ by the get_partloc cursor.
--to_number(inv_list_no) DESC;
   index_                     BINARY_INTEGER := 0;     
   node_and_ascendants_tab_   Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_id_tab_      Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_rec_         Handling_Unit_API.Public_Rec; 
   structure_level_           NUMBER;                  
   composition_               VARCHAR2(200);
   hu_type_id_                VARCHAR2(200);         
   hu_type_description_       VARCHAR2(200);         
   handling_unit_category_id_ VARCHAR2(25);
   hu_category_description_   VARCHAR2(200);
   net_weight_                NUMBER;
   tare_weight_               NUMBER;
   operative_gross_weight_    NUMBER;
   uom_for_weight_            VARCHAR2(30);
   uom_for_volume_            VARCHAR2(30);
   operative_volume_          NUMBER;
   print_hu_                  VARCHAR2(5);
BEGIN
   -- Initialize
   General_SYS.Init_Method(lu_name_, '&PKG', '&REP1METHOD');

   result_key_       := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   inv_list_no_list_ := Client_SYS.Get_Item_Value('INV_LIST_NO', parameter_attr_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&REP1VIEW', package_name_);
   END IF;

   -- Retrieve data for each INV_LIST_NO in the comma separated inv_list_no_list_ list.
   -- The list must contain at least one object.

   -- Get the position of the next ',' in the list.
   WHILE (n1_ != 0) LOOP
      n1_ := instr(inv_list_no_list_, ',', n0_);
      IF (n1_ = 0) THEN
         next_inv_list_no_ := substr(inv_list_no_list_, n0_);
      ELSE
         next_inv_list_no_ := substr(inv_list_no_list_, n0_, n1_ - n0_);
      END IF;

      EXIT WHEN next_inv_list_no_ IS NULL;

      -- Make sure the inv_list_no exists
      Counting_Report_API.exist(next_inv_list_no_);

      -- Initialize row_no
      row_no_ := 1;

      -- This loop should only retrieve one record
      FOR header_rec_ in get_header LOOP
         contract_ := header_rec_.contract;
         to_       := instr(next_inv_list_no_, ';', 1);
         IF (to_ = 0) AND (next_inv_list_no_  <> '%') THEN
            company_      := Site_API.Get_Company(header_rec_.contract);
            logotype_     := Company_API.Get_Logotype(company_);
            company_name_ := Site_API.Get_Company_Address_Name(contract_);

            IF (logotype_ IS NOT NULL ) THEN
               Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
               Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
            END IF;
         END IF;

         include_all_qty_ := substr(Gen_Yes_No_API.Decode(header_rec_.include_all_qty),1,20);
         excl_std_inv_    := substr(Gen_Yes_No_API.Decode(header_rec_.exclude_standard_inventory),1,20);
         excl_prj_Inv_    := substr(Gen_Yes_No_API.Decode(header_rec_.exclude_project_inventory),1,20);
         
         cycle_code_      := substr(Cyclic_Counting_API.Decode(header_rec_.cycle_code),1,40);
         freeze_code_     := substr(Gen_Yes_No_API.Decode(header_rec_.freeze_code),1,20);
         
         IF (header_rec_.Last_count_date = Database_Sys.last_calendar_date_) THEN
            exclude_since_   := NULL;
            last_count_date_ := NULL;
         ELSE
            exclude_since_   := Site_API.Get_Site_Date(header_rec_.contract) - header_rec_.Last_count_date;
            last_count_date_ := header_rec_.Last_count_date;
         END IF;

         IF (header_rec_.exclude_customer_owned = 'EXCLUDE') THEN
            exclude_customer_owned_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_customer_owned_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;

         IF (header_rec_.exclude_supplier_loaned = 'EXCLUDE') THEN
            exclude_supplier_loaned_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_supplier_loaned_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.exclude_consignment = 'EXCLUDE') THEN
            exclude_consignment_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_consignment_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.exclude_company_owned = 'EXCLUDE') THEN
            exclude_company_owned_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_company_owned_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.exclude_rotable_pool = 'EXCLUDE') THEN
            exclude_rotable_pool_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_rotable_pool_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;

         IF (header_rec_.exclude_fa_rotable_pool = 'EXCLUDE') THEN
            exclude_fa_rotable_pool_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_fa_rotable_pool_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.exclude_attached_to_hu = 'Y') THEN
            exclude_attached_to_hu_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_attached_to_hu_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.exclude_not_attached_to_hu = 'Y') THEN
            exclude_not_attached_to_hu_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_not_attached_to_hu_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.exclude_supplier_rented = 'EXCLUDE') THEN
            exclude_supplier_rented_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_supplier_rented_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.exclude_comp_rental_asset = 'EXCLUDE') THEN
            exclude_company_rental_asset_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            exclude_company_rental_asset_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;
         
         IF (header_rec_.include_full_qty_of_hu = 'Y') THEN
            include_full_qty_of_hu_ := substr(Gen_Yes_No_API.Decode('Y'),1,20);
         ELSE
            include_full_qty_of_hu_ := substr(Gen_Yes_No_API.Decode('N'),1,20);
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INCLUDE_ALL_QTY', include_all_qty_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'HEAD_PROJECT_ID', header_rec_.project_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_STANDARD_INVENTORY', excl_std_inv_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_PROJECT_INVENTORY', excl_prj_Inv_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'HEAD_CONTRACT', header_rec_.contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SECOND_COMMODITY', header_rec_.second_commodity);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CREATE_DATE', header_rec_.create_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CYCLE_CODE', cycle_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'USERID', header_rec_.userid);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SELECTION_WAREHOUSE_ID', header_rec_.warehouse_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SELECTION_BAY_ID', header_rec_.bay_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SELECTION_ROW_ID', header_rec_.row_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SELECTION_TIER_ID', header_rec_.tier_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SELECTION_BIN_ID', header_rec_.bin_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'STORAGE_ZONE_ID', header_rec_.storage_zone_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SELECTION_PART_NO', header_rec_.part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MAX_QTY_ONHAND', header_rec_.Max_qty_onhand);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LAST_COUNT_DATE', last_count_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FREEZE_CODE', freeze_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PROCESS_COUNT', header_rec_.Process_count);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_LIST_NO', next_inv_list_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_CUSTOMER_OWNED', exclude_customer_owned_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_SUPPLIER_LOANED', exclude_supplier_loaned_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_CONSIGNMENT', exclude_consignment_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_COMPANY_OWNED', exclude_company_owned_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_ROTABLE_POOL', exclude_rotable_pool_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_FA_ROTABLE_POOL', exclude_fa_rotable_pool_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_ATTACHED_TO_HU', exclude_attached_to_hu_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_NOT_ATTACHED_TO_HU', exclude_not_attached_to_hu_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_SUPPLIER_RENTED', exclude_supplier_rented_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_COMP_RENTAL_ASSET', exclude_company_rental_asset_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INCLUDE_FULL_QTY_OF_HU', include_full_qty_of_hu_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID',header_rec_.handling_unit_type_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TOP_HANDLING_UNIT_TYPE_ID', header_rec_.top_handling_unit_type_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_CATEGORY_TYPE_ID', header_rec_.handling_category_type_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TOP_HANDLING_CATEGORY_TYPE_ID', header_rec_.top_handling_category_type_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXCLUDE_SINCE', exclude_since_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_GROUP', header_rec_.location_group);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ABC_CLASS', header_rec_.abc_class);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FREQUENCY_CLASS', substr(Inv_Part_Frequency_Class_API.Decode(header_rec_.frequency_class), 1, 20));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LIFECYCLE_STAGE', substr(Inv_Part_Lifecycle_Stage_API.Decode(header_rec_.lifecycle_stage), 1, 20));
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, '&LU', header_rec_.rowkey, '&REP1VIEW');
         END IF;

         IF (do_rs_) THEN
         -- Insert into master table
            INSERT INTO &REP1TAB (
               result_key,
               row_no,
               parent_row_no,
               &INV_LIST_NO,
               &HEAD_CONTRACT,
               &CREATE_DATE,
               &SELECTION_WAREHOUSE_ID,
               &SELECTION_BAY_ID,
               &SELECTION_ROW_ID,
               &SELECTION_TIER_ID,
               &SELECTION_BIN_ID,
               &STORAGE_ZONE_ID,
               &SELECTION_PART_NO,
               &MAX_QTY_ONHAND,
               &LAST_COUNT_DATE,
               &FREEZE_CODE,
               &PROCESS_COUNT,
               &INCLUDE_ALL_QTY,
               &HEAD_PROJECT_ID,
               &EXCLUDE_STANDARD_INVENTORY,
               &EXCLUDE_PROJECT_INVENTORY,
               &CYCLE_CODE,
               &SECOND_COMMODITY,
               &EXCLUDE_CUSTOMER_OWNED,
               &EXCLUDE_SUPPLIER_LOANED,
               &EXCLUDE_CONSIGNMENT,
               &EXCLUDE_COMPANY_OWNED,
               &EXCLUDE_ROTABLE_POOL,
               &EXCLUDE_FA_ROTABLE_POOL,
               &EXCLUDE_ATTACHED_TO_HU,
               &EXCLUDE_NOT_ATTACHED_TO_HU,
               &EXCLUDE_SUPPLIER_RENTED,
               &EXCLUDE_COMP_RENTAL_ASSET,
               &INCLUDE_FULL_QTY_OF_HU,
               &SEL_HANDLING_UNIT_TYPE_ID,
               &TOP_HANDLING_UNIT_TYPE_ID,
               &HANDLING_CATEGORY_TYPE_ID,
               &TOP_HANDLING_CATEGORY_TYPE_ID,
               &LOCATION_GROUP,
               &ABC_CLASS,
               &FREQUENCY_CLASS,
               &LIFECYCLE_STAGE,
               &USERID )
            VALUES (
               result_key_,
               row_no_,
               0,
               next_inv_list_no_,
               header_rec_.contract,
               header_rec_.create_date,
               header_rec_.warehouse_id,
               header_rec_.bay_id,
               header_rec_.row_id,
               header_rec_.tier_id,
               header_rec_.bin_id,
               header_rec_.storage_zone_id,
               header_rec_.part_no,
               header_rec_.Max_qty_onhand,
               header_rec_.Last_count_date,
               header_rec_.freeze_code,
               header_rec_.Process_count,
               header_rec_.include_all_qty,
               header_rec_.project_id,
               header_rec_.exclude_standard_inventory,
               header_rec_.exclude_project_inventory,
               header_rec_.cycle_code,
               header_rec_.second_commodity,
               header_rec_.exclude_customer_owned,
               header_rec_.exclude_supplier_loaned,
               header_rec_.exclude_consignment,
               header_rec_.exclude_company_owned,
               header_rec_.exclude_rotable_pool,
               header_rec_.exclude_fa_rotable_pool,
               header_rec_.exclude_attached_to_hu,
               header_rec_.exclude_not_attached_to_hu,
               header_rec_.exclude_supplier_rented,
               header_rec_.exclude_comp_rental_asset,
               header_rec_.include_full_qty_of_hu,
               header_rec_.handling_unit_type_id,
               header_rec_.top_handling_unit_type_id,
               header_rec_.handling_category_type_id,
               header_rec_.top_handling_category_type_id,
               header_rec_.location_group,
               header_rec_.abc_class,
               header_rec_.frequency_class,
               header_rec_.lifecycle_stage,
               header_rec_.userid );
         END IF;
         -- parent row is current row, row is incremented for next insert
         parent_row_no_ := row_no_;
         row_no_ := row_no_ + 1;

         IF (do_xml_) THEN
             Xml_Record_Writer_SYS.Start_Element(xml_, 'WAREHOUSE_ITEMS');
         END IF;

         -- Retrieve the rows for this counting report
         FOR row_rec_ IN get_rows LOOP
            activity_id_    := '';
            sub_project_id_ := '';
            IF (previous_contract_ != row_rec_.contract) OR (previous_part_no_ != row_rec_.part_no) THEN
               -- Get general data for the part and location
               inventory_part_rec_ := Inventory_Part_API.Get(row_rec_.contract, row_rec_.part_no);
               part_description_   := Inventory_Part_API.Get_Description(row_rec_.contract, row_rec_.part_no); 
               catch_uom_          := inventory_part_rec_.catch_unit_meas;
   
               Inventory_Part_API.Get_All_Notes(partca_part_note_id_,
                                                partca_part_notes_,
                                                inv_part_note_id_,
                                                inv_part_notes_,
                                                row_rec_.contract,
                                                row_rec_.part_no,
                                                Language_SYS.Get_Language,
                                                '7');
            END IF;
            
            condition_code_             := Condition_Code_Manager_API.Get_Condition_Code (row_rec_.part_no,row_rec_.serial_no,row_rec_.lot_batch_no);
            condition_code_description_ := Condition_Code_API.Get_Description(condition_code_);

            IF catch_uom_ IS NOT NULL THEN
               catch_count_ := catch_count_ + 1;
            END IF;

            $IF Component_Proj_Sys.INSTALLED $THEN
               IF (row_rec_.activity_seq > 0) THEN
                  activity_id_    := Activity_API.Get_Activity_No(row_rec_.activity_seq);
                  sub_project_id_ := Activity_api.Get_Sub_Project_Id(row_rec_.activity_seq);   
               END IF;                  
            $END

            warehouse_  := row_rec_.warehouse_id;
            bay_        := row_rec_.bay_id;
            location_   := row_rec_.location_no;

            IF (do_xml_) THEN
               IF ((warehouse_ != prev_warehouse_) OR 
                   (NVL(bay_, CHR(132)) != NVL(prev_bay_, CHR(132)))) THEN
                     IF close_block_ THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'COUNT_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'WAREHOUSE_ITEM');
                        close_block_ := FALSE;
                     END IF;
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'WAREHOUSE_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'WAREHOUSE_ID', Upper(row_rec_.warehouse_id));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'BAY_ID', Upper(row_rec_.bay_id));
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'COUNT_ITEMS');
                     close_block_ := TRUE;
               END IF;

               Xml_Record_Writer_SYS.Start_Element(xml_, 'COUNT_ITEM');
               
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TIER_ID', Upper(row_rec_.tier_id));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'WAREHOUSE_ID', Upper(row_rec_.warehouse_id));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BAY_ID', Upper(row_rec_.bay_id));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BIN_ID', Upper(row_rec_.bin_id));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SEQ', row_rec_.seq);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', row_rec_.part_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_DESCRIPTION', part_description_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_U_M', inventory_part_rec_.unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', row_rec_.serial_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'WAIV_DEV_REJ_NO', row_rec_.waiv_dev_rej_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ENG_CHG_LEVEL', row_rec_.eng_chg_level);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', row_rec_.lot_batch_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIGURATION_ID', row_rec_.configuration_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', condition_code_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROJECT_ID', row_rec_.project_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_PROJECT_ID', sub_project_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_ID', activity_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_SEQUENCE', row_rec_.activity_seq);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DETAIL_CONTRACT', row_rec_.contract);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ROW_ID', Upper(row_rec_.row_id));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM',catch_uom_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_COUNT', catch_count_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO', location_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', row_rec_.handling_unit_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NOTE', inv_part_notes_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_CATALOG_NOTES', partca_part_notes_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CountingReportLine', row_rec_.crl_rowkey, '&REP1VIEW');
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'WarehouseBayBin',    row_rec_.il_rowkey,  '&REP1VIEW');
            END IF;

            IF (do_rs_) THEN
               INSERT INTO &REP2TAB (
                  result_key,
                  row_no,
                  parent_row_no,
                  &SEQ,
                  &PART_NO,
                  &DETAIL_CONTRACT,
                  &LOCATION_NO,
                  &HANDLING_UNIT_ID,
                  &LOT_BATCH_NO,
                  &SERIAL_NO,
                  &ENG_CHG_LEVEL,
                  &WAIV_DEV_REJ_NO,
                  &CONFIGURATION_ID,
                  &WAREHOUSE_ID,
                  &BAY_ID,
                  &ROW_ID,
                  &TIER_ID,
                  &BIN_ID,
                  &PART_DESCRIPTION,
                  &PART_U_M,
                  &CONDITION_CODE,
                  &CONDITION_CODE_DESCRIPTION,
                  &PROJECT_ID,
                  &SUB_PROJECT_ID,
                  &ACTIVITY_ID,
                  &ACTIVITY_SEQUENCE,
                  &CATCH_UOM,
                  &CATCH_COUNT,
                  &PART_NOTE_ID)
               VALUES (
                  result_key_,
                  row_no_,
                  parent_row_no_,
                  row_rec_.seq,
                  row_rec_.part_no,
                  row_rec_.contract,
                  row_rec_.location_no,
                  row_rec_.handling_unit_id,
                  row_rec_.lot_batch_no,
                  row_rec_.serial_no,
                  row_rec_.eng_chg_level,
                  row_rec_.waiv_dev_rej_no,
                  row_rec_.configuration_id,
                  Upper(row_rec_.warehouse_id),
                  Upper(row_rec_.bay_id),
                  Upper(row_rec_.row_id),
                  Upper(row_rec_.tier_id),
                  Upper(row_rec_.bin_id),
                  part_description_,
                  inventory_part_rec_.unit_meas,
                  condition_code_,
                  condition_code_description_,
                  row_rec_.project_id,
                  sub_project_id_,
                  activity_id_,
                  row_rec_.activity_seq,
                  catch_uom_,
                  catch_count_,
                  inv_part_note_id_);
            END IF;

            parent_row_no2_ := row_no_;
            row_no_         := row_no_ + 1;


            IF (row_rec_.handling_unit_id > 0) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNITS');
               END IF;

               node_and_ascendants_tab_ := Handling_Unit_API.Get_Node_And_Ascendants(row_rec_.handling_unit_id);
               node_and_ascendants_tab_ := Handling_Unit_API.Get_Node_Level_Sorted_Units(node_and_ascendants_tab_);
            
               IF (node_and_ascendants_tab_.COUNT > 0) THEN
                  FOR i IN  node_and_ascendants_tab_.FIRST..node_and_ascendants_tab_.LAST LOOP 
                     index_ :=   node_and_ascendants_tab_.COUNT; 
                     
                     handling_unit_rec_          := Handling_Unit_API.Get(node_and_ascendants_tab_(i).handling_unit_id);
                     structure_level_            := Handling_Unit_API.Get_Structure_Level(handling_unit_rec_.handling_unit_id);                  
                     handling_unit_category_id_  := Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_rec_.handling_unit_id);
                     hu_type_description_        := Handling_Unit_Type_API.Get_Description(handling_unit_rec_.handling_unit_type_id);                  
                     handling_unit_category_id_  := Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_rec_.handling_unit_type_id);
                     hu_category_description_    := Handling_Unit_Category_API.Get_Description(handling_unit_category_id_);                 
                     composition_                := Handling_Unit_API.Get_Composition(handling_unit_rec_.handling_unit_id);
                     uom_for_weight_             := Handling_Unit_API.Get_Uom_For_Weight(handling_unit_rec_.handling_unit_id);
                     uom_for_volume_             := Handling_Unit_API.Get_Uom_For_Volume(handling_unit_rec_.handling_unit_id);
                     net_weight_                 := Handling_Unit_API.Get_Net_Weight(handling_unit_rec_.handling_unit_id, uom_for_weight_, 'FALSE');
                     tare_weight_                := Handling_Unit_API.Get_Tare_Weight(handling_unit_rec_.handling_unit_id, uom_for_weight_);
                     operative_gross_weight_     := Handling_Unit_API.Get_Operative_Gross_Weight(handling_unit_rec_.handling_unit_id, uom_for_weight_, 'FALSE');
                     operative_volume_           := Handling_Unit_API.Get_Operative_Volume(handling_unit_rec_.handling_unit_id, uom_for_volume_);
                     IF ((structure_level_ = 1) OR (structure_level_ = 2) OR (i = node_and_ascendants_tab_.LAST)) THEN 
                        print_hu_ := 'TRUE';
                     ELSE 
                        print_hu_ := 'FALSE';
                     END IF ; 
                     
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL', structure_level_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', handling_unit_rec_.handling_unit_id);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID', handling_unit_rec_.handling_unit_type_id);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_TYPE_DESCRIPTION', hu_type_description_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', handling_unit_category_id_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_CATEGORY_DESCRIPTION', hu_category_description_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', handling_unit_rec_.sscc);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', handling_unit_rec_.alt_handling_unit_label_id);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', composition_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', handling_unit_rec_.width);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', handling_unit_rec_.height);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', handling_unit_rec_.depth);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', handling_unit_rec_.uom_for_length);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', net_weight_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', tare_weight_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', operative_gross_weight_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', uom_for_weight_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', operative_volume_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', uom_for_volume_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_HU', print_hu_);                  
                        Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');
                     END IF;
                     
                     IF (do_rs_) THEN                     
                        INSERT INTO &REP2TAB (
                           result_key, row_no, parent_row_no, 
                           &STRUCTURE_LEVEL, &HANDLING_UNIT_ID, &HANDLING_UNIT_TYPE_ID, &HU_TYPE_DESCRIPTION, &HANDLING_UNIT_CATEGORY_ID, &HU_CATEGORY_DESCRIPTION, 
                           &SSCC, &ALT_HANDLING_UNIT_LABEL_ID, &COMPOSITION, &WIDTH, &HEIGHT, &DEPTH, &UOM_FOR_LENGTH, 
                           &NET_WEIGHT, &TARE_WEIGHT, &OPERATIVE_GROSS_WEIGHT, &UOM_FOR_WEIGHT, &OPERATIVE_VOLUME, &UOM_FOR_VOLUME, &PRINT_HU  )
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, 
                           structure_level_, node_and_ascendants_tab_(i).handling_unit_id, handling_unit_rec_.handling_unit_type_id, hu_type_description_, handling_unit_category_id_, hu_category_description_,
                           handling_unit_rec_.sscc, handling_unit_rec_.alt_handling_unit_label_id, composition_, handling_unit_rec_.width, handling_unit_rec_.height, handling_unit_rec_.depth, handling_unit_rec_.uom_for_length,
                           net_weight_, tare_weight_, operative_gross_weight_, uom_for_weight_, operative_volume_, uom_for_volume_, print_hu_);
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNITS');
               END IF;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'COUNT_ITEM');
            END IF;
            
            -- Row is incremented for next insert
            row_no_ := row_no_ + 1;
            
            prev_warehouse_    := warehouse_;
            prev_bay_          := bay_;
            previous_contract_ := row_rec_.contract;
            previous_part_no_  := row_rec_.part_no;
         END LOOP;
         
         IF (do_xml_) THEN
            IF close_block_ THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'COUNT_ITEMS');
               Xml_Record_Writer_SYS.End_Element(xml_, 'WAREHOUSE_ITEM');                        
               close_block_ := FALSE;
            END IF;
            Xml_Record_Writer_SYS.End_Element(xml_, 'WAREHOUSE_ITEMS');
         END IF;
      END LOOP;

      IF (do_xml_) THEN
        Xml_Record_Writer_SYS.End_Element(xml_, '&REP1VIEW');
        Report_SYS.Finish_Xml_Report('&REP1VIEW', result_key_, xml_);
      END IF;

      n0_ := n1_ + 1;
   END LOOP;
   
   -- Set the detail report printed flag in counting report header
   Counting_Report_API.Set_Detailed_Report_Printed(next_inv_list_no_);

   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'COUNTREPNO: Count Report No');
   archive_notes_ := archive_notes_ || ': ' || next_inv_list_no_ || ', ';
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'COUNTREPSITE: Site');
   archive_notes_ := archive_notes_ || ': ' || contract_;
   Archive_API.Set_Notes(archive_notes_);
END &REP1METHOD;

PROCEDURE test (
   reportKey   IN VARCHAR2,
   invListNo   IN VARCHAR2 )
IS
   reportAttr_    VARCHAR2(200);
   parameterAttr_ VARCHAR2(200);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'test');
   Client_SYS.Add_To_Attr('RESULT_KEY', reportKey, reportAttr_);
   Client_SYS.Add_To_Attr('INV_LIST_NO', invListNo, parameterAttr_);
   &REP1METHOD(reportAttr_, parameterAttr_);
END test;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REP1TAB
UNDEFINE REP2TAB
UNDEFINE REP1VIEW
UNDEFINE VIEW_RPV
UNDEFINE REP1METHOD
UNDEFINE INV_LIST_NO
UNDEFINE HEAD_CONTRACT
UNDEFINE SECOND_COMMODITY
UNDEFINE CYCLE_CODE
UNDEFINE USERID
UNDEFINE SELECTION_WAREHOUSE_ID
UNDEFINE SELECTION_BAY_ID
UNDEFINE SELECTION_ROW_ID
UNDEFINE SELECTION_TIER_ID
UNDEFINE SELECTION_BIN_ID
UNDEFINE STORAGE_ZONE_ID
UNDEFINE SELECTION_PART_NO
UNDEFINE FREEZE_CODE
UNDEFINE CREATE_DATE
UNDEFINE LAST_COUNT_DATE
UNDEFINE MAX_QTY_ONHAND
UNDEFINE PROCESS_COUNT
UNDEFINE INCLUDE_ALL_QTY
UNDEFINE HEAD_PROJECT_ID
UNDEFINE EXCLUDE_STANDARD_INVENTORY
UNDEFINE EXCLUDE_PROJECT_INVENTORY
UNDEFINE DETAIL_CONTRACT
UNDEFINE LOCATION_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE PART_NO
UNDEFINE SERIAL_NO
UNDEFINE WAIV_DEV_REJ_NO
UNDEFINE ENG_CHG_LEVEL
UNDEFINE SEQ
UNDEFINE WAREHOUSE_ID
UNDEFINE BAY_ID
UNDEFINE ROW_ID
UNDEFINE TIER_ID
UNDEFINE BIN_ID
UNDEFINE PART_DESCRIPTION
UNDEFINE PART_U_M
UNDEFINE CONFIGURATION_ID
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE PROJECT_ID
UNDEFINE SUB_PROJECT_ID
UNDEFINE ACTIVITY_ID
UNDEFINE ACTIVITY_SEQUENCE
UNDEFINE CATCH_UOM
UNDEFINE CATCH_COUNT
UNDEFINE EXCLUDE_CUSTOMER_OWNED
UNDEFINE EXCLUDE_SUPPLIER_LOANED
UNDEFINE EXCLUDE_CONSIGNMENT
UNDEFINE EXCLUDE_COMPANY_OWNED
UNDEFINE EXCLUDE_ROTABLE_POOL
UNDEFINE EXCLUDE_FA_ROTABLE_POOL
UNDEFINE EXCLUDE_ATTACHED_TO_HU
UNDEFINE EXCLUDE_NOT_ATTACHED_TO_HU
UNDEFINE EXCLUDE_SUPPLIER_RENTED
UNDEFINE EXCLUDE_COMP_RENTAL_ASSET
UNDEFINE EXCLUDE_SINCE
UNDEFINE PART_NOTE_ID
UNDEFINE PART_CATALOG_NOTES
UNDEFINE LOCATION_GROUP
UNDEFINE ABC_CLASS
UNDEFINE FREQUENCY_CLASS
UNDEFINE LIFECYCLE_STAGE
UNDEFINE STRUCTURE_LEVEL
UNDEFINE HANDLING_UNIT_ID
UNDEFINE HANDLING_UNIT_TYPE_ID
UNDEFINE HU_TYPE_DESCRIPTION
UNDEFINE HANDLING_UNIT_CATEGORY_ID
UNDEFINE INCLUDE_FULL_QTY_OF_HU
UNDEFINE SEL_HANDLING_UNIT_TYPE_ID
UNDEFINE TOP_HANDLING_UNIT_TYPE_ID
UNDEFINE HANDLING_CATEGORY_TYPE_ID
UNDEFINE TOP_HANDLING_CATEGORY_TYPE_ID
UNDEFINE HU_CATEGORY_DESCRIPTION
UNDEFINE SSCC
UNDEFINE ALT_HANDLING_UNIT_LABEL_ID
UNDEFINE COMPOSITION
UNDEFINE WIDTH
UNDEFINE HEIGHT
UNDEFINE DEPTH
UNDEFINE UOM_FOR_LENGTH
UNDEFINE NET_WEIGHT
UNDEFINE TARE_WEIGHT
UNDEFINE OPERATIVE_GROSS_WEIGHT
UNDEFINE UOM_FOR_WEIGHT
UNDEFINE OPERATIVE_VOLUME
UNDEFINE UOM_FOR_VOLUME
UNDEFINE PRINT_HU
