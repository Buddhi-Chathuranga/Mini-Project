-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatFI.rdf
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  121016  PraWlk  Bug 105887, Removed SUBSTR to avoid length restriction of customs statistics number description. 
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Finland'
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  090929  PraWlk  Bug 85516, Increased the length of com_code_desc_ to 200.
--  090601  SaWjlk  Bug 83173, Removed the prog text duplications.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  061109  KaDilk  Bug 60521, Removed the lpad function.
--  060908  IsWilk  Removed the qrp entries.
--  060614  LeSvse  Bug 58779, Error found in SP1 work. Corrected xsl file name. 
--  060510  DaZase  Bug 57442 Report Designer handling and Layout added.
--  051216  SuJalk  Changed VIEW_RPV to TABLE in COMMENT ON TABLE.
--  050921  NiDalk  Removed unused variables.
--  050906  JaBalk  Changed the SUBSTRB to SUBSTR and length of variable cust_stat_no_des_ to 35.
--  050107  DiVelk  Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  040924  ChJalk  Bug 46743, Modified the length of the variable cust_stat_no_des_ and assigned only the first
--  040924          35 characters to the variable.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INTRASTAT_FI_REP.
--  040330  UsRalk  Fixed call #113624 regarding printed rep_vat_no_ (Representative Tax No).
--  040301  GeKalk  Replaced substrb with substr for UNICODE modifications.
--  ---------------- EDGE Package Group 3 Unicode Changes --------------------
--  040203  IsWilk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.   
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030801  KeFelk  Performed SP4 Merge. (SP4Only)
--  030423  ThAjlk  Bug 36761, Modified the Cursor get_lines in order to get the correct value for alternate_qty.
--  030423          Added ABS on alternate_qty to prevent getting "-x * -y results" when we multiply with the regular qty. 
--  030124  AnLaSe  Bug fix 34661, replaced constants IMPCOUNTRY and EXPCOUNTRY with unique names.
--  020217  IsAn    A4/Letter conversion.
--  010302  GEKALK  Created.
--  010307  GEKALK  Changed the calculation for statistical_value.
--  010313  GEKALK  Changed the Titles of some fields in the Report.
--                  Added Country_Type and Total_Statistical_Value.
--  010313  GEKALK  Added a new where condition to select lines where rowstate is not equal to Cancelled
--                  from Intrastat_Line_Tab.
--  010314  GEKALK  Added CUST_STAT_NO_DESC and ALTERNATE_MASS to the report.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_FI_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_FI_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define REPORT_TYPE        = S1
define COMPANY_VAT_NO     = S2
define BRANCH_NO          = S3
define COMPANY_NAME       = S4
define REP_VAT_NO         = S5
define REP_BRANCH_NO      = S6
define REP_NAME           = S7
define REPORT_PERIOD      = S8
define CREATION_DATE      = S9
define CURRENCY_CODE      = S10

define LINE_NO            = N1
define COUNTRY_OF_DEST    = S11
define COUNTRY_OF_ORIGIN  = S12
define TRANS_NATURE       = S13
define MODE_OF_TRANSPORT  = S14
define CUSTOM_STAT_CODE   = S15
define CUST_STAT_NO_DESC  = S17
define COUNTRY_TYPE       = S16
define NET_WEIGHT         = N2
define ALTERNATE_QTY      = N3
define ALTERNATE_MASS     = S18
define INVOICE_VALUE      = N4
define STAT_VALUE         = N5
define NO_OF_LINES        = N6
define TOT_INVOICED_VALUE = N7
define TOT_STAT_VALUE     = N8

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&REPORT_TYPE                          REPORT_TYPE,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&BRANCH_NO                            BRANCH_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&REP_VAT_NO                           REP_VAT_NO,
       H.&REP_BRANCH_NO                        REP_BRANCH_NO,
       H.&REP_NAME                             REP_NAME,
       H.&REPORT_PERIOD                        REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&TOT_INVOICED_VALUE                   TOT_INVOICED_VALUE,
       H.&TOT_STAT_VALUE                       TOT_STAT_VALUE,
       H.&COUNTRY_TYPE                         COUNTRY_TYPE,
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&TRANS_NATURE                         TRANS_NATURE,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&CUSTOM_STAT_CODE                     CUSTOM_STAT_CODE,
       D.&CUST_STAT_NO_DESC                    CUST_STAT_NO_DESC,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALTERNATE_QTY                        ALTERNATE_QTY,
       D.&ALTERNATE_MASS                       ALTERNATE_MASS,
       D.&INVOICE_VALUE                        INVOICE_VALUE,
       D.&STAT_VALUE                           STAT_VALUE,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;


COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..REPORT_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Type of Report^ITEM_NAME=iReportType^';
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Company Tax No:^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Branch No:^ITEM_NAME=iBranchNo^';  
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company Name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..REP_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Representative Tax No:^ITEM_NAME=iRepVatNo^'; 
COMMENT ON COLUMN &VIEW..REP_BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Representative Branch No:^ITEM_NAME=iRepBranchNo^';
COMMENT ON COLUMN &VIEW..REP_NAME IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Representative Name:^ITEM_NAME=iRepName^';   
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting currency code:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of Lines :^ITEM_NAME=iNoOfLines^';
COMMENT ON COLUMN &VIEW..TOT_INVOICED_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value :^ITEM_NAME=iTotInvoicedValue^';
COMMENT ON COLUMN &VIEW..TOT_STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Statistical Value :^ITEM_NAME=iTotStatValue^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..COUNTRY_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country Type^ITEM_NAME=iCountryType^';
COMMENT ON COLUMN &VIEW..TRANS_NATURE IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iTransNature^';
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..CUSTOM_STAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Commodity Code^ITEM_NAME=iCustomStatCode^';
COMMENT ON COLUMN &VIEW..CUST_STAT_NO_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Commodity Code Description^ITEM_NAME=iCustStatNoDesc^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALTERNATE_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAlternateQty^';
COMMENT ON COLUMN &VIEW..ALTERNATE_MASS IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Alternative Code ^ITEM_NAME=iAlternateMass^';
COMMENT ON COLUMN &VIEW..INVOICE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced value^ITEM_NAME=iInvoiceValue^';
COMMENT ON COLUMN &VIEW..STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Statistical Value^ITEM_NAME=iStatValue^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';


BEGIN 
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Finland','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_FI_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   report_type_          VARCHAR2(50);   
   company_vat_no_       VARCHAR2(14);
   branch_no_            VARCHAR2(3);
   company_name_         VARCHAR2(40);
   rep_vat_no_           VARCHAR2(14);
   rep_branch_no_        VARCHAR2(10);
   rep_name_             VARCHAR2(20);
   end_date_             VARCHAR2(4);
   creation_date_        VARCHAR2(8);
   currency_code_        VARCHAR2(3);
  
   line_no_                NUMBER := 0;
   country_of_destination_ VARCHAR2(3);
   country_of_origin_      VARCHAR2(3);
   transaction_nature_     VARCHAR2(2);
   mode_of_transport_      VARCHAR2(1);
   custom_stat_code_       VARCHAR2(8);
   net_weight_             NUMBER;
   alternate_qty_          NUMBER;
   invoice_value_          NUMBER;
   statistical_value_      NUMBER;
   rep_curr_rate_          NUMBER;
   tot_invoiced_value_     NUMBER;
   tot_stat_value_         NUMBER;
   cust_stat_no_des_       VARCHAR2(2000);
   alternate_mass_         VARCHAR2(10);

   vat_no_               VARCHAR2(50);
   stmt_                 VARCHAR2(2000);
   result_key_           NUMBER;
   row_no_               NUMBER := 1;
   parent_row_no_        NUMBER := 0;
   intrastat_id_         NUMBER;
   intrastat_direction_  VARCHAR2(20);
   rep_curr_code_        VARCHAR2(3);
   country_code_         VARCHAR2(2);   
   notc_dummy_           VARCHAR2(5);
   notc_notfound         EXCEPTION;
   currency_notfound     EXCEPTION;
   country_type_         VARCHAR2(25);

   do_xml_               BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                  CLOB;
   package_name_         VARCHAR2(100) := 'INTRASTAT_FI_REP';
   rowkey_               VARCHAR2(50);

   CURSOR get_head IS
      SELECT company,
             bransch_no,
             representative,
             repr_tax_no,  
             bransch_no_repr,
             end_date,
             creation_date,
             rep_curr_code,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   CURSOR get_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,
             DECODE(intrastat_direction_, 'IMPORT', il.country_of_origin, '') country_of_origin,
             cn.country_notc,
             il.mode_of_transport,
             il.customs_stat_no,
             il.intrastat_alt_unit_meas,
             SUM(il.quantity * il.net_unit_weight) net_weight,
             SUM(nvl(abs(il.intrastat_alt_qty),0) * il.quantity) alternate_qty,
             SUM(il.quantity * nvl(il.invoiced_unit_price, il.order_unit_price)) * rep_curr_rate_  invoice_value,
             SUM((nvl(il.invoiced_unit_price,nvl(il.order_unit_price,0)) + 
                  nvl(il.unit_add_cost_amount_inv,nvl(il.unit_add_cost_amount,0)) +
                  nvl(il.unit_charge_amount_inv,0) +
                  nvl(il.unit_charge_amount,0)) * il.quantity) * rep_curr_rate_ statistical_value
      FROM   intrastat_line_tab il ,country_notc_tab cn
      WHERE  intrastat_id = intrastat_id_
      AND    rowstate           != 'Cancelled'
      AND    il.notc = cn.notc      
      AND    cn.country_code = country_code_
      AND    intrastat_direction = intrastat_direction_ 
      GROUP BY  il.intrastat_direction,
                il.opposite_country,
                DECODE(intrastat_direction_, 'IMPORT', il.country_of_origin, ''),
                il.mode_of_transport,
                cn.country_notc, 
                il.customs_stat_no,
                il.intrastat_alt_unit_meas;  

      CURSOR get_notc IS
         SELECT distinct notc
         FROM   intrastat_line_tab
         WHERE  intrastat_id = intrastat_id_;
   
      CURSOR get_country_notc (notc_ VARCHAR2) IS
         SELECT country_notc
         FROM   country_notc_tab
         WHERE  notc = notc_
         AND    country_code = 'FI'; 
BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;
   
   FOR headrec_ IN get_head LOOP     
      
      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         -- ifs_assert_safe bmekse 20110309
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;

      IF (SUBSTR(vat_no_, 1, 2) != headrec_.country_code) THEN
         company_vat_no_   := RPAD('FI'||NVL(SUBSTR(vat_no_, 1, 10),''),12);
      ELSE
         company_vat_no_   := RPAD(NVL(SUBSTR(vat_no_, 1, 12),''),12);
      END IF;

      --company_vat_no_   := SUBSTR(vat_no_, 1, 12);
      company_name_     := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 40);
      
      branch_no_        := SUBSTR(headrec_.bransch_no, 1,3);
         
      IF (SUBSTR(headrec_.repr_tax_no, 1, 2) != headrec_.country_code) THEN
         rep_vat_no_   := RPAD('FI'||nvl(SUBSTR(headrec_.repr_tax_no, 1, 12),''),14);
      ELSE
         rep_vat_no_   := RPAD(NVL(SUBSTR(headrec_.repr_tax_no, 1, 14),''),14);
      END IF;
      --rep_vat_no_       := SUBSTR(headrec_.repr_tax_no, 1,14);
         
      rep_branch_no_    := headrec_.bransch_no_repr;
      end_date_         := TO_CHAR(headrec_.end_date,'YYMM');
      creation_date_    := TO_CHAR(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_code_    := headrec_.rep_curr_code;  
      rep_curr_rate_    := headrec_.rep_curr_rate;
      country_code_     := headrec_.country_code;
      rep_name_         := headrec_.representative;
      rowkey_           := headrec_.rowkey;

      IF ( rep_curr_code_ IN ('FIM','EUR')) THEN
         currency_code_         := rep_curr_code_;
      ELSE
         Error_SYS.Record_General(lu_name_, 'WRONGCURRFI: Currency Code :P1 is not a valid currency, only FIM and EUR is acceptable', rep_curr_code_);       
      END IF;

   
   END LOOP;
   
   IF (intrastat_direction_ = 'EXPORT') THEN  
      report_type_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTFI: Intrastat Export Report');
      country_type_ := Language_SYS.Translate_Constant(lu_name_, 'EXPCOUNTRYFI: Country of Destination');
   ELSE
      report_type_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTFI: Intrastat Import Report');
      country_type_ := Language_SYS.Translate_Constant(lu_name_, 'IMPCOUNTRYFI: Country of Dispatch');
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', currency_code_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', end_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_NAME', rep_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_BRANCH_NO', rep_branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_VAT_NO', rep_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'BRANCH_NO', branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_TYPE', country_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TYPE', report_type_); 
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',rowkey_, '&VIEW');

      Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_FI_LINES');
   END IF;
   IF (do_rs_) THEN
      -- Insert Head details
      INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &REPORT_TYPE,&COMPANY_VAT_NO,
          &COMPANY_NAME, &BRANCH_NO, &REP_VAT_NO, &REP_BRANCH_NO, &REP_NAME,
          &REPORT_PERIOD, &CREATION_DATE, &CURRENCY_CODE,&COUNTRY_TYPE)
      VALUES
         (result_key_, row_no_, parent_row_no_, report_type_,company_vat_no_,
          company_name_, branch_no_, rep_vat_no_, rep_branch_no_, rep_name_,
          end_date_, creation_date_, currency_code_,country_type_);
      
      parent_row_no_ := row_no_;   
      row_no_ := row_no_ + 1;
   END IF;

   tot_invoiced_value_ := 0;
   tot_stat_value_     := 0;
   FOR linerec_ IN get_lines LOOP
      
      country_of_destination_ := SUBSTR(linerec_.opposite_country, 1,2);
      transaction_nature_     := linerec_.country_notc;
      mode_of_transport_      := linerec_.mode_of_transport;
      custom_stat_code_       := RPAD(SUBSTR(linerec_.customs_stat_no, 1,8),8);
      cust_stat_no_des_       := Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no);
      net_weight_             := ROUND(linerec_.net_weight);
      alternate_qty_          := ROUND(linerec_.alternate_qty);
      alternate_mass_         := linerec_.intrastat_alt_unit_meas;
      invoice_value_          := ROUND(linerec_.invoice_value);
      statistical_value_      := ROUND(linerec_.statistical_value);
      country_of_origin_      := SUBSTR(linerec_.country_of_origin, 1, 3);
         
      line_no_ := line_no_ + 1;
      
      tot_invoiced_value_ := tot_invoiced_value_ + invoice_value_;           
      tot_stat_value_     := tot_stat_value_ + statistical_value_; 
      
      trace_sys.message('country_type11_'||country_type_);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_FI_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_,'ALTERNATE_MASS', alternate_mass_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ALTERNATE_QTY', alternate_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_DEST', country_of_destination_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', country_of_origin_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_STAT_NO_DESC', cust_stat_no_des_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOM_STAT_CODE', custom_stat_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', invoice_value_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', line_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', mode_of_transport_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', net_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUE', statistical_value_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TRANS_NATURE', transaction_nature_);
         Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_FI_LINE');
      END IF;
      IF (do_rs_) THEN
         -- insert detail rows
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, &LINE_NO,&COUNTRY_OF_DEST,&COUNTRY_OF_ORIGIN,&COUNTRY_TYPE,
             &TRANS_NATURE,&MODE_OF_TRANSPORT,&CUSTOM_STAT_CODE,&CUST_STAT_NO_DESC,&NET_WEIGHT,&ALTERNATE_QTY,
             &ALTERNATE_MASS,&INVOICE_VALUE,&STAT_VALUE,&REPORT_TYPE)
         VALUES
            (result_key_, row_no_, parent_row_no_, line_no_,country_of_destination_,country_of_origin_,country_type_,
             transaction_nature_,mode_of_transport_,custom_stat_code_,cust_stat_no_des_,net_weight_,alternate_qty_,
             alternate_mass_,invoice_value_,statistical_value_,report_type_);
   
         row_no_ := row_no_ + 1;
      END IF;
   END LOOP; 
   
   IF (do_rs_) THEN
      IF (row_no_ = 2) THEN
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, &LINE_NO,&COUNTRY_OF_DEST,&COUNTRY_OF_ORIGIN,&COUNTRY_TYPE,
             &TRANS_NATURE,&MODE_OF_TRANSPORT,&CUSTOM_STAT_CODE,&CUST_STAT_NO_DESC,&NET_WEIGHT,&ALTERNATE_QTY,
             &ALTERNATE_MASS,&INVOICE_VALUE,&STAT_VALUE,&REPORT_TYPE)
         VALUES
            (result_key_, row_no_, parent_row_no_, NULL,NULL,
             NULL,NULL,country_type_,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,report_type_);
      END IF;
   
      UPDATE &TABLE
      SET    &NO_OF_LINES        = line_no_,
             &TOT_INVOICED_VALUE = tot_invoiced_value_,
             &TOT_STAT_VALUE     = tot_stat_value_
      WHERE  result_key = result_key_  
      AND    row_no = parent_row_no_;   
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_FI_LINES');
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_STAT_VALUE', tot_stat_value_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INVOICED_VALUE', tot_invoiced_value_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', line_no_);
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;


 
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE REPORT_TYPE
UNDEFINE COMPANY_VAT_NO
UNDEFINE BRANCH_NO
UNDEFINE COMPANY_NAME
UNDEFINE REP_VAT_NO
UNDEFINE REP_BRANCH_NO
UNDEFINE REP_NAME
UNDEFINE REPORT_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE CURRENCY_CODE
UNDEFINE LINE_NO
UNDEFINE COUNTRY_OF_DEST
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE TRANS_NATURE
UNDEFINE MODE_OF_TRANSPORT
UNDEFINE CUSTOM_STAT_CODE
UNDEFINE CUST_STAT_NO_DESC
UNDEFINE COUNTRY_TYPE
UNDEFINE NET_WEIGHT
UNDEFINE ALTERNATE_QTY
UNDEFINE ALTERNATE_MASS
UNDEFINE INVOICE_VALUE
UNDEFINE STAT_VALUE
UNDEFINE NO_OF_LINES
UNDEFINE TOT_INVOICED_VALUE
UNDEFINE TOT_STAT_VALUE
