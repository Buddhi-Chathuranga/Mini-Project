-----------------------------------------------------------------------------
--
--  Logical unit: HandlingUnitLabelRep
--
--  Report:       HandlingUnitLabel
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is not generated by the model anymore
-----------------------------------------------------------------------------
--    Date    Sign    History
--   ------   -----   -------------------------------------------------------
--   181010   UdGnlk  Bug 144500, Enabled CUSTOM feilds manually. Not by the model. When the report prints from Shipment client
--   181010           it has two entities, HandlingUnit and HandlingUnitHistory. In order to support the report from every client
--   181010           new cursor get_handling_unit_history introduced to HandlingUnitHistory to get the rowkey.
--   181010           Added a condition to check shipment been delivered or not. Therefore added the parameter shpmnt_delivered_ and modified the logic accordingly.         
-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating HANDLING_UNIT_LABEL_RPI specification

CREATE OR REPLACE PACKAGE HANDLING_UNIT_LABEL_RPI AS

module_ CONSTANT VARCHAR2(6) := 'INVENT';
lu_name_ CONSTANT VARCHAR2(25) := 'HandlingUnitLabelRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   handling_unit_id_         IN NUMBER,
   shpmnt_delivered_         IN VARCHAR2)
   RETURN NUMBER;

PROCEDURE Init;

END HANDLING_UNIT_LABEL_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table HANDLING_UNIT_LABEL_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_LABEL_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHPMNT_DELIVERED', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SSCC', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_DESC', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_DESC', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_LABEL_RPT';
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_LABEL_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view HANDLING_UNIT_LABEL_REP

CREATE OR REPLACE VIEW HANDLING_UNIT_LABEL_REP AS
SELECT RESULT_KEY, ROW_NO, PARENT_ROW_NO, ROWVERSION
   ,HANDLING_UNIT_ID,SHPMNT_DELIVERED,SSCC,ALT_HANDLING_UNIT_LABEL_ID,HANDLING_UNIT_TYPE,HANDLING_UNIT_TYPE_DESC,HANDLING_UNIT_CATEGORY_ID,HANDLING_UNIT_CATEGORY_DESC
FROM   HANDLING_UNIT_LABEL_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE HANDLING_UNIT_LABEL_REP
   IS 'LU=HandlingUnitLabelRep^PROMPT=Handling Unit Label^MODULE=INVENT^';

COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.handling_unit_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^QUERY=Handling Unit ID:^QFLAGS=M----^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.shpmnt_delivered
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Shipment Delivered^QUERY=Shpmnt Delivered:^QFLAGS=O----^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.sscc
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=SSCC^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.handling_unit_type
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Handling Unit Type^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.handling_unit_type_desc
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Handling Unit Type Desc^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.handling_unit_category_id
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Handling Unit Category ID^';
COMMENT ON COLUMN HANDLING_UNIT_LABEL_REP.handling_unit_category_desc
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Handling Unit Category Desc^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('HANDLING_UNIT_LABEL_REP', 'INVENT', 'HandlingUnitLabelRep', 'Handling Unit Label', 'HANDLING_UNIT_LABEL_RPT', 'HANDLING_UNIT_LABEL_RPI.Execute_Report', 0,'','','','PLSQL1.2','TRUE','Warehouse Management','Goods Label');
   Report_SYS.Define_Report_Text_('HANDLING_UNIT_LABEL_REP', 'HANDLING_UNIT_LABEL', 'Handling Unit Label');
   Report_SYS.Refresh_('HANDLING_UNIT_LABEL_REP');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('HANDLING_UNIT_LABEL_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('HANDLING_UNIT_LABEL_REP','HandlingUnit','HANDLING_UNIT_LABEL_REP/HANDLING_UNIT_IDS/HANDLING_UNIT');  
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating HANDLING_UNIT_LABEL_RPI implementation

CREATE OR REPLACE PACKAGE BODY HANDLING_UNIT_LABEL_RPI IS

   TYPE binds$ IS RECORD (
      handling_unit_id          NUMBER,
      shpmnt_delivered          VARCHAR2(32000));

   CURSOR get_handling_unit (handling_unit_id_ NUMBER) IS
      SELECT
         hu.handling_unit_id                handling_unit_id,
         hu.sscc                            sscc,
         hu.alt_handling_unit_label_id      Alt_Handling_Unit_Label_Id,
         hu.handling_unit_type_id           handling_unit_type,
         hut.description                    handling_unit_type_desc,
         hut.handling_unit_category_id      handling_unit_category_id,
         huc.description                    handling_unit_category_desc,
         hu.rowkey                          handling_unit_rowkey   
      FROM handling_unit_tab hu, handling_unit_type_tab hut, handling_unit_category_tab huc
      WHERE hu.handling_unit_id = handling_unit_id_
      AND   hu.handling_unit_type_id      = hut.handling_unit_type_id      
      AND   hut.handling_unit_category_id = huc.handling_unit_category_id;
   
   CURSOR get_handling_unit_history (handling_unit_id_ NUMBER) IS
      SELECT
         huh.handling_unit_id                handling_unit_id,
         huh.rowkey                          handling_unit_hist_rowkey   
      FROM handling_unit_history_tab huh
      WHERE huh.handling_unit_id = handling_unit_id_;
-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_handling_unit_         IN get_handling_unit%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO HANDLING_UNIT_LABEL_RPT (
      result_key,
      handling_unit_id,
      shpmnt_delivered,
      sscc,
      alt_handling_unit_label_id,
      handling_unit_type,
      handling_unit_type_desc,
      handling_unit_category_id,
      handling_unit_category_desc,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      nvl(rec_handling_unit_.handling_unit_id,
      binds$_.handling_unit_id),
      binds$_.shpmnt_delivered,
      rec_handling_unit_.sscc,
      rec_handling_unit_.alt_handling_unit_label_id,
      rec_handling_unit_.handling_unit_type,
      rec_handling_unit_.handling_unit_type_desc,
      rec_handling_unit_.handling_unit_category_id,
      rec_handling_unit_.handling_unit_category_desc,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_handling_unit_ BOOLEAN;
   rec_handling_unit_ get_handling_unit%ROWTYPE;
   par_handling_unit_ binds$;
   rec_handling_unit_history get_handling_unit_history%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, 'HANDLING_UNIT_LABEL_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.handling_unit_id     := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('HANDLING_UNIT_ID', parameter_attr_));
   binds$_.shpmnt_delivered     := Client_SYS.Get_Item_Value('SHPMNT_DELIVERED', parameter_attr_); 

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'HANDLING_UNIT_LABEL_REP', 'Handling Unit Label');

   DECLARE
      archive_notes_            VARCHAR2(200);
   BEGIN
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'HANDLINGUNITID: Handling Unit ID:');
      archive_notes_ := archive_notes_ || binds$_.handling_unit_id; 
      Archive_API.Set_Notes(archive_notes_);  
   END;

   has_handling_unit_ := FALSE;
   par_handling_unit_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNIT_IDS');
   OPEN get_handling_unit(binds$_.handling_unit_id);
   LOOP
      FETCH get_handling_unit INTO rec_handling_unit_;
      has_handling_unit_ := get_handling_unit%FOUND OR get_handling_unit%ROWCOUNT > 0;
      EXIT WHEN get_handling_unit%NOTFOUND;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNIT');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_handling_unit_.handling_unit_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SSCC', rec_handling_unit_.sscc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'ALT_HANDLING_UNIT_LABEL_ID', rec_handling_unit_.alt_handling_unit_label_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE', rec_handling_unit_.handling_unit_type);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_DESC', rec_handling_unit_.handling_unit_type_desc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_ID', rec_handling_unit_.handling_unit_category_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_DESC', rec_handling_unit_.handling_unit_category_desc);
      
      OPEN get_handling_unit_history(binds$_.handling_unit_id);
      FETCH get_handling_unit_history INTO rec_handling_unit_history;
      CLOSE get_handling_unit_history;
      
      IF NVL(binds$_.shpmnt_delivered, 'FALSE') = 'FALSE' THEN  
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'HandlingUnit', rec_handling_unit_.handling_unit_rowkey, 'HANDLING_UNIT_LABEL_REP');
      ELSE   
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'HandlingUnitHistory', rec_handling_unit_history.handling_unit_hist_rowkey, 'HANDLING_UNIT_LABEL_REP');
      END IF;
      Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_handling_unit_ => rec_handling_unit_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_handling_unit;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT_IDS');
   binds$_ := par_handling_unit_;
   IF NOT has_handling_unit_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT_LABEL_REP');
   Report_SYS.Finish_Xml_Report('HANDLING_UNIT_LABEL_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_handling_unit%ISOPEN THEN
            CLOSE get_handling_unit;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   handling_unit_id_         IN NUMBER,
   shpmnt_delivered_         IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'HANDLING_UNIT_LABEL_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (handling_unit_id_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', handling_unit_id_, parameter_attr_);
   END IF;
   IF (shpmnt_delivered_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHPMNT_DELIVERED', shpmnt_delivered_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END HANDLING_UNIT_LABEL_RPI;
/
SHOW ERROR
