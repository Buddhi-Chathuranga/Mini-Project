---------------------------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: Upgrade database objects for IFS/Inventory
--           from version 21.1.0 to 21.2.0
--
--  File   : 2120.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  210819   RaMolk  SC21R2-2338, Obsoleted Ipr_Active column FROM Site_Invent_Info_Tab
--  210806   SBalLK  SC21R2-2211, Resolved upgrade issue from GET APP9 UPD17 to Cloud.
--  210803   SBalLK  SC21R2-1426, Added column AUTO_CREATED to WAREHOUSE_TAB for track automatically created warehouses through the WarehouseManager.
--  210730   SBalLK  SC21R2-2078, Resolved upgrade issue from GET APP10 UPD8 to Cloud.
--  210728   RoJalk  Bug 159309(SCZ-15686), Created the index HANDLING_UNIT_HISTORY_IX7 for HANDLING_UNIT_HISTORY_TAB.
--  210727   RasDlk  SC21R2-1035, Renamed the column EXCLUDE_SHIP_PACK_PROPOSAL to EXCL_SHIP_PACK_PROPOSAL in INVENTORY_PART_TAB.
--  210719   ErFelk  SC2020R1-13108, Remove obsolete Intrastat Lithuanian PACKAGES and view. 
--  210719   MaEelk  SC21R2-1884, Added CROSS_BORDER_PART_MOVE_TAB and CROSS_BORDER_PART_MOVE_TAX_PK.
--  210713   RasDlk  SC21R2-1035, Added new column EXCLUDE_SHIP_PACK_PROPOSAL to INVENTORY_PART_TAB.
--  210707   MalLlk  SC21R2-1864, Added column PART_MOVE_TAX_ID to INVENTORY_TRANSACTION_HIST_TAB. Added sequence PART_MOVE_TAX_ID_SEQ.
--  210629   TKAVLK  FI21R2-2112, Added new columns, MOVE_DEST_CONTRACT and MOVE_DEST_LOCATION_NO to INVENTORY_TRANSACTION_HIST_TAB.
--  210614   LEPESE  SC21R2-794, Added column CASCAD_POSTING_DATE_OPTION to SITE_INVENT_INFO_TAB.
--  210614   SBalLK  SC21R2-1204, Added WAREHOUSE_ID_SEQ to create warehouse ID through sequence.
--  210610   WaSalk  SC21R2-1236, Added WAREHOUSE_ID_TMP.
--  210601   JaThlk  SC21R2-1009, Added new columns, ABC_CLASS_LOCKED_UNTIL, LIFE_STAGE_LOCKED_UNTIL and FREQ_CLASS_LOCKED_UNTIL to INVENTORY_PART_TAB.
--  210528   WaSalk  SC21R2-1214, Added USER_WAREHOUSE_ACCESS_TAB.
--  210517   JiThlk  SCZ-14214,remove obsolete view SITE_INVENT_INFO_PUB.
--  210513   hapulk  SC21R2-804, Created Template file. 
--  210308   SBalLK  Issue SC2020R1-12852, Created.
--  210305   apwilk  Bug 156696, Created a new temporary table INTRASTAT_LINE_ALL_TMP
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_1');
PROMPT START upgrading WITH 2120.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------

-- ***** PART_MOVE_TAX_ID_SEQ : Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_2');
PROMPT Creating SEQUENCE PART_MOVE_TAX_ID_SEQ
DECLARE
   sequence_name_ VARCHAR2(30) := 'PART_MOVE_TAX_ID_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'MAXVALUE 9999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/
-- ***** PART_MOVE_TAX_ID_SEQ : End *****

---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

-- ***** INTRASTAT_LINE_ALL_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_3');
PROMPT Creating TEMPORARY TABLE intrastat_line_all_tmp
DECLARE
   table_name_    VARCHAR2(30) := 'INTRASTAT_LINE_ALL_TMP';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   IF (NOT Database_SYS.Table_Exist(table_name_)) THEN
      Database_SYS.Set_Table_Column(columns_, 'intrastat_id','NUMBER','Y');
      Database_SYS.Set_Table_Column(columns_, 'line_no','NUMBER' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'transaction_id','NUMBER','Y');
      Database_SYS.Set_Table_Column(columns_, 'transaction','VARCHAR2(10)','Y');
      Database_SYS.Set_Table_Column(columns_, 'order_type','VARCHAR2(20)','Y');                              
      Database_SYS.Set_Table_Column(columns_, 'contract','VARCHAR2(5)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'part_no','VARCHAR2(25)','Y');
      Database_SYS.Set_Table_Column(columns_, 'part_description','VARCHAR2(2000)','Y');
      Database_SYS.Set_Table_Column(columns_, 'configuration_id','VARCHAR2(50)','Y'); 
      Database_SYS.Set_Table_Column(columns_, 'lot_batch_no','VARCHAR2(20)','Y');
      Database_SYS.Set_Table_Column(columns_, 'serial_no','VARCHAR2(50)','Y');
      Database_SYS.Set_Table_Column(columns_, 'order_ref1','VARCHAR2(12)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'order_ref2','VARCHAR2(4)','Y');
      Database_SYS.Set_Table_Column(columns_, 'order_ref3','VARCHAR2(30)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'order_ref4','NUMBER','Y');
      Database_SYS.Set_Table_Column(columns_, 'inventory_direction','VARCHAR2(1)','Y');
      Database_SYS.Set_Table_Column(columns_, 'quantity','NUMBER','Y');
      Database_SYS.Set_Table_Column(columns_, 'qty_reversed','NUMBER','Y');
      Database_SYS.Set_Table_Column(columns_, 'unit_meas','VARCHAR2(10)','Y');
      Database_SYS.Set_Table_Column(columns_, 'reject_code','VARCHAR2(8)','Y');
      Database_SYS.Set_Table_Column(columns_, 'date_applied','DATE','Y');
      Database_SYS.Set_Table_Column(columns_, 'userid','VARCHAR2(30)','Y');
      Database_SYS.Set_Table_Column(columns_, 'net_unit_weight','NUMBER','Y');
      Database_SYS.Set_Table_Column(columns_, 'customs_stat_no','VARCHAR2(15)','Y');
      Database_SYS.Set_Table_Column(columns_, 'intrastat_alt_qty','NUMBER','Y');
      Database_SYS.Set_Table_Column(columns_, 'intrastat_alt_unit_meas','VARCHAR2(10)','Y');
      Database_SYS.Set_Table_Column(columns_, 'notc','VARCHAR2(2)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'intrastat_direction','VARCHAR2(20)','Y');
      Database_SYS.Set_Table_Column(columns_, 'country_of_origin','VARCHAR2(2)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'intrastat_origin','VARCHAR2(15)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'opposite_country','VARCHAR2(2)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'opponent_number','VARCHAR2(20)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'opponent_name', 'VARCHAR2(4000)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'order_unit_price', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'unit_add_cost_amount', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'unit_charge_amount', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'mode_of_transport', 'VARCHAR2(1)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'invoice_serie', 'VARCHAR2(20)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'invoice_number', 'VARCHAR2(50)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'invoiced_unit_price', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'unit_add_cost_amount_inv', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'unit_charge_amount_inv', 'NUMBER', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'delivery_terms', 'VARCHAR2(5)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'triangulation', 'VARCHAR2(20)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'region_port', 'VARCHAR2(10)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'statistical_procedure', 'VARCHAR2(25)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'rowversion', 'DATE', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'rowstate', 'VARCHAR2(20)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'region_of_origin', 'VARCHAR2(10)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'county', 'VARCHAR2(35)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'return_reason', 'VARCHAR2(8)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'return_material_reason','VARCHAR2(10)' , 'Y');
      Database_SYS.Set_Table_Column(columns_, 'rowkey','VARCHAR2(50)' , 'Y');
      Database_SYS.Set_Table_Column(columns_, 'opponent_type', 'VARCHAR2(20)','Y');
      Database_SYS.Set_Table_Column(columns_, 'movement_code','VARCHAR2(2)','Y');
      Database_SYS.Set_Table_Column(columns_, 'unit_statistical_charge_diff', 'NUMBER' , 'Y');
      Database_SYS.Set_Table_Column(columns_, 'opponent_tax_id', 'VARCHAR2(50)' , 'Y');
      Database_SYS.Set_Table_Column(columns_, 'del_terms_location', 'VARCHAR2(100)' ,'Y');
      Database_SYS.Set_Table_Column(columns_, 'place_of_delivery', 'NUMBER' ,'Y');

      Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);      
   END IF;
END;
/
-- ***** INTRASTAT_LINE_ALL_TMP End *****


-- ***** INTRASTAT_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_4');
PROMPT Make TRANSACTION_TYPE column nullable.
DECLARE
   table_name_    VARCHAR2(30) := 'INTRASTAT_LINE_TAB';
   column_name_   VARCHAR2(30) := 'TRANSACTION_TYPE';
   column_        Database_SYS.ColRec;
BEGIN
   IF(Database_SYS.Column_Exist(table_name_, column_name_)) THEN
      IF(Database_SYS.Get_Column_Nullable(table_name_, column_name_) = 'N') THEN
         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values( column_name_, 'VARCHAR2(20)', 'N',  default_value_ => 'NULL',  keep_default_ => 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, show_info_=> TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values( column_name_, 'VARCHAR2(20)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, show_info_=> TRUE);
      END IF;
   END IF;
END;
/
-- ***** INTRASTAT_LINE_TAB End *****
--   
--  -- gelr:access_ctrl_for_inv_reserv, start
-- **************** USER_WAREHOUSE_ACCESS_TAB Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_5');
PROMPT Creating USER_WAREHOUSE_ACCESS_TAB

DECLARE
   table_name_    VARCHAR2(30) := 'USER_WAREHOUSE_ACCESS_TAB';
   columns_       Database_SYS.ColumnTabType;
BEGIN
      Database_SYS.Set_Table_Column(columns_, 'USER_ID',              'VARCHAR2(30)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT',             'VARCHAR2(5)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID',         'VARCHAR2(15)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'STOCK_RESERV_ALLOWED', 'VARCHAR2(5)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'INVENT_TRANS_ALLOWED', 'VARCHAR2(5)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',           'DATE',         'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY',               'VARCHAR2(50)', 'N', 'sys_guid()');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_6');
PROMPT Adding constraints for USER_WAREHOUSE_ACCESS_TAB   
DECLARE
	index_name_ VARCHAR2(30) := 'USER_WAREHOUSE_ACCESS_PK';
	table_name_ VARCHAR2(30) := 'USER_WAREHOUSE_ACCESS_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'USER_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
	index_name_ VARCHAR2(30) := 'USER_WAREHOUSE_ACCESS_RK';
	table_name_ VARCHAR2(30) := 'USER_WAREHOUSE_ACCESS_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- **************** USER_WAREHOUSE_ACCESS_TAB End ****************
--
-- **************** WAREHOUSE_ID_TMP Start ****************
-- PROMPT Creating TEMPORARY TABLE warehouse_id_tmp
DECLARE
   table_name_    VARCHAR2(30) := 'WAREHOUSE_ID_TMP';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   IF (NOT Database_SYS.Table_Exist(table_name_)) THEN
      Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)','N'); 
      Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);      
   END IF;
END;
/
-- **************** WAREHOUSE_ID_TMP End ****************
-- gelr:access_ctrl_for_inv_reserv, end

-- **************** INVENTORY_PART_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_7');
PROMPT Adding new COLUMNS ABC_CLASS_LOCKED_UNTIL, LIFE_STAGE_LOCKED_UNTIL and FREQ_CLASS_LOCKED_UNTIL into THE TABLE INVENTORY_PART_TAB. 
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ABC_CLASS_LOCKED_UNTIL', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('LIFE_STAGE_LOCKED_UNTIL', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('FREQ_CLASS_LOCKED_UNTIL', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('EXCL_SHIP_PACK_PROPOSAL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- **************** INVENTORY_PART_TAB : End ****************


-- **************** WAREHOUSE_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_8');
PROMPT Adding new column AUTO_CREATED to WAREHOUSE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('AUTO_CREATED', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_9');
PROMPT Creating sequence WAREHOUSE_ID_SEQ for WAREHOUSE_TAB
DECLARE
   sequence_name_ VARCHAR2(30) := 'WAREHOUSE_ID_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/
-- **************** WAREHOUSE_TAB : End ****************


-- **************** SITE_INVENT_INFO_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_10');
PROMPT Adding new COLUMN CASCAD_POSTING_DATE_OPTION TO SITE_INVENT_INFO_TAB. 
DECLARE
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'CASCAD_POSTING_DATE_OPTION', 'VARCHAR2(20)', 'N', '''SYSTEM_DATE''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_11');
PROMPT Obsoleting Ipr_Active FROM Site_Invent_Info_Tab.
DECLARE
   column_             Database_SYS.ColRec;
   table_              VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('IPR_ACTIVE', 'VARCHAR(5)', 'Y');
   Database_SYS.Alter_Table_Column (table_, 'M', column_, TRUE);  
END;
/
-- **************** SITE_INVENT_INFO_TAB : End ****************

-- **************** INVENTORY_TRANSACTION_HIST_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_12');
PROMPT Adding new COLUMN MOVE_DEST_CONTRACT, MOVE_DEST_LOCATION_NO and PART_MOVE_TAX_ID TO INVENTORY_TRANSACTION_HIST_TAB. 
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'MOVE_DEST_CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MOVE_DEST_LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_MOVE_TAX_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/
-- **************** INVENTORY_TRANSACTION_HIST_TAB : End ****************


-- ***** SOURCE_TAX_ITEM_TAB : Start *****
--  
-- Not included the SOURCE_TAX_ITEM_TAB table creation here as there are no additional attributes in INVENT.
--  
-- ***** SOURCE_TAX_ITEM_TAB : End *****

-- **************** CROSS_BORDER_PART_MOVE_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_13');
PROMPT Creating CROSS_BORDER_PART_MOVE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_COUNTRY', 'VARCHAR2(2)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_COUNTRY', 'VARCHAR2(2)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_14');
PROMPT Adding constraints for CROSS_BORDER_PART_MOVE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_PK';
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_COUNTRY');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_COUNTRY');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_RK';
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- **************** CROSS_BORDER_PART_MOVE_TAB : End ****************

-- **************** CROSS_BORDER_PART_MOVE_TAX_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_15');
PROMPT Creating CROSS_BORDER_PART_MOVE_TAX_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAX_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_COUNTRY', 'VARCHAR2(2)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_COUNTRY', 'VARCHAR2(2)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TAX_LINE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CODE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWTYPE', 'VARCHAR2(30)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_16');
PROMPT Adding constraints for CROSS_BORDER_PART_MOVE_TAX_PK
DECLARE
   index_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAX_PK';
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAX_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_COUNTRY');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_COUNTRY');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'TAX_LINE_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAX_RK';
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_PART_MOVE_TAX_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- **************** CROSS_BORDER_PART_MOVE_TAX_TAB : End ****************

-- **************** HANDLING_UNIT_HISTORY_TAB :      Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_17');
PROMPT Adding the index HANDLING_UNIT_HISTORY_IX7 to HANDLING_UNIT_HISTORY_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   index_name_    VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_IX7';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Index(table_name_,   index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- **************** HANDLING_UNIT_HISTORY_TAB :      End ****************


---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_18');
PROMPT Removing obsolete Intrastat Lithuanian PACKAGES.
BEGIN
   Database_SYS.Remove_Package('INTRASTAT_LT_FILE_API', TRUE);
   Database_SYS.Remove_Package('INTRASTAT_LT_RPI', TRUE);
END;
/
---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_19');
PROMPT Removing VIEW SITE_INVENT_INFO_PUB AND INTRASTAT_LT_REP.
BEGIN
   IF Database_SYS.View_Exist('SITE_INVENT_INFO_PUB') THEN
      Database_SYS.Remove_View('SITE_INVENT_INFO_PUB', TRUE);
   END IF; 
   Database_SYS.Remove_View('INTRASTAT_LT_REP', TRUE);
END;
/
---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Timestamp_20');
PROMPT Upgrade statements IN FILE 2120.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2120.upg','Done');
