-----------------------------------------------------------------------------
--
--  Logical unit: InventoryPartStorageRequirementsHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-- 2019-02-19  STHOSE  SCUXXW4-6294, Converted from frmInvPartStorageRequirements using MTG Version: 1.34
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Create_Remove_Capability___ (
   contract_              IN VARCHAR2,
   part_no_               IN VARCHAR2,
   storage_capability_id_ IN VARCHAR2 ) 
IS
   
BEGIN
   Inventory_Part_Capability_API.Create_Removed_Line__(contract_, part_no_, storage_capability_id_);
END Create_Remove_Capability___;

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Capacities_And_Conditions_Virtual_Rec )
IS
   inventory_part_rec_    Inventory_Part_API.Public_Rec;
   new_rec_          Capacities_And_Conditions_Virtual_Rec;
BEGIN
   new_rec_ := rec_;
   inventory_part_rec_        := Inventory_Part_API.Get(rec_.contract, rec_.part_no);

     new_rec_.width              := inventory_part_rec_.storage_width_requirement;
      new_rec_.height            := inventory_part_rec_.storage_height_requirement;
      new_rec_.depth             := inventory_part_rec_.storage_depth_requirement;
      new_rec_.volume            := 1 / inventory_part_rec_.storage_volume_requirement;
      new_rec_.weight            := inventory_part_rec_.storage_weight_requirement;
      new_rec_.min_temperature   := inventory_part_rec_.min_storage_temperature;
      new_rec_.max_temperature   := inventory_part_rec_.max_storage_temperature;
      new_rec_.min_humidity      := inventory_part_rec_.min_storage_humidity;
      new_rec_.max_humidity      := inventory_part_rec_.max_storage_humidity;
   
   super(new_rec_);
END CRUD_Create___;

PROCEDURE Save_Capacity_And_Conditions___ (
      key_ IN Capacities_And_Conditions_Virtual_Key ) 
IS
   rec_                   Capacities_And_Conditions_Virtual_Rec;
   inventory_part_rec_    Inventory_Part_API.Public_Rec;
   inventory_part_key_    Inventory_Part_Key;
   objid_                 VARCHAR2(32000);
   objversion_            VARCHAR2(32000);
   attr_                  VARCHAR2(32000);
   info_                  VARCHAR2(32000);
BEGIN
	rec_  := Get_Record___(key_);
   
   inventory_part_rec_           := Inventory_Part_API.Get(rec_.contract, rec_.part_no);
   inventory_part_key_.contract  := inventory_part_rec_.contract;
   inventory_part_key_.part_no   := inventory_part_rec_.part_no;

   Get_Objid_Objversion_Inventory_Part___(objid_, objversion_, inventory_part_key_);
   Client_SYS.Clear_Attr(attr_);

   IF nvl(TO_CHAR(inventory_part_rec_.storage_width_requirement), 'X') != nvl(TO_CHAR(rec_.width), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_WIDTH_REQUIREMENT', rec_.width, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.storage_height_requirement), 'X') != nvl(TO_CHAR(rec_.height), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_HEIGHT_REQUIREMENT', rec_.height, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.storage_depth_requirement), 'X') != nvl(TO_CHAR(rec_.depth), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_DEPTH_REQUIREMENT', rec_.depth, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.storage_volume_requirement), 'X') != nvl(TO_CHAR(rec_.volume), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_VOLUME_REQUIREMENT', 1 / rec_.volume, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.storage_weight_requirement), 'X') != nvl(TO_CHAR(rec_.weight), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_WEIGHT_REQUIREMENT', rec_.weight, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.min_storage_temperature), 'X') != nvl(TO_CHAR(rec_.min_temperature), 'X') THEN
      Client_SYS.Add_To_Attr('MIN_STORAGE_TEMPERATURE', rec_.min_temperature, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.max_storage_temperature), 'X') != nvl(TO_CHAR(rec_.max_temperature), 'X') THEN
      Client_SYS.Add_To_Attr('MAX_STORAGE_TEMPERATURE', rec_.max_temperature, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.min_storage_humidity), 'X') != nvl(TO_CHAR(rec_.min_humidity), 'X') THEN
      Client_SYS.Add_To_Attr('MIN_STORAGE_HUMIDITY', rec_.min_humidity, attr_);
   END IF;
   IF nvl(TO_CHAR(inventory_part_rec_.max_storage_humidity), 'X') != nvl(TO_CHAR(rec_.max_humidity), 'X') THEN
      Client_SYS.Add_To_Attr('MAX_STORAGE_HUMIDITY', rec_.max_humidity, attr_);
   END IF;

  Inventory_Part_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
   
END Save_Capacity_And_Conditions___;

PROCEDURE Get_Objid_Objversion_Inventory_Part___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Inventory_Part_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  inventory_part
      WHERE contract = key_.contract
      AND   part_no = key_.part_no;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(INVENTORY_PART_API.lu_name_);
END Get_Objid_Objversion_Inventory_Part___;