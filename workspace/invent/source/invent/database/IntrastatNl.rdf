-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatNl.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  220128  ErFelk  Bug 162143(SC21R2-7321), Modified the code so that country notc 2 digit is used for import.
--  210608  ErFelk  Bug 158692(SCZ-14501), Modified the code to include opponent_tax_id , country_of_origin and country notc 1 digit for import
--  210608          2 digit for export.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Netherlands'
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  090601  SaWjlk  Bug 83173, Removed the prog text duplications.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  060908  IsWilk  Removed the qrp entries.
--  060516  DaZase  Bug 57442 Report Designer handling and Layout added.
--  060109  MarSlk  Bug 55277, Introduced variable rounded_invoice_value_ and 
--  060109          assigned the rounded value of invoice_value.The variable has  
--  060109          been used where appropiate. The ROUND function has been 
--  060109          removed in the TOTAL_INV_VALUE and invoice_value_.
--  051216  SuJalk  Changed VIEW_RPV to TABLE in COMMENT ON TABLE.
--  050921  NiDalk  Removed unused variables.
--  050107  DiVelk  Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INTRASTAT_NL_REP.
--  040301  GeKalk  Replaced substrb with substr for UNICODE modifications.
--  ---------------- EDGE Package Group 3 Unicode Changes --------------------
--  040203 NaWalk Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.  
--  040202 NaWalk Removed the fourth variable of DBMS_SQL inside the while loop,for Unicode modification.
--  031016 PrJalk Bug fix 106237, Added procedure Init.
--  020913 MKrase Bug 32565, changed calculation for supplementary_unit in  
--                cursor get_import_lines and get_export_lines.           
--  020217  IsAn  A4/Letter conversion.
--  010322  DaZa  Created using spec 'Functional specification for IID 10219 
--                - Dutch Intrastat File' by Martin Korn.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_NL_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_NL_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define COMPANY_VAT_NO     = S1
define COMPANY_NAME       = S2
define AGENT_VAT_NO       = S3
define AGENT_NAME         = S4
define REPORTING_PERIOD   = S5
define CREATION_DATE      = S6
define CURRENCY_CODE      = S7
define NO_OF_LINES        = N1
define REPORT_TITLE       = S8
define COUNTRY_DEST_TITLE = S9
define TOTAL_INV_VALUE    = N2

define LINE_NO            = N3
define TRANSACT_PERIOD    = S10
define COMMODITY_FLOW     = S11
define COUNTRY_OF_DEST    = S12
define MODE_OF_TRANSPORT  = S13
define TRAFFIC_REGION_PORT = S14
define STAT_PROCEDURE     = S15
define TRANSACTION        = S16
define COMMODITY_CODE     = S17
define MASS               = N4
define SUPPL_UNIT         = N5
define INVOICE_VALUE      = N6
define COUNTRY_OF_ORIGIN  = S18
define OPPONENT_TAX_ID    = S19

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&AGENT_VAT_NO                         AGENT_VAT_NO,
       H.&AGENT_NAME                           AGENT_NAME,       
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE,
       H.&COUNTRY_DEST_TITLE                   COUNTRY_DEST_TITLE,
       H.&TOTAL_INV_VALUE                      TOTAL_INV_VALUE,       
       D.&LINE_NO                              LINE_NO,
       D.&TRANSACT_PERIOD                      TRANSACT_PERIOD,
       D.&COMMODITY_FLOW                       COMMODITY_FLOW,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&TRAFFIC_REGION_PORT                  TRAFFIC_REGION_PORT,
       D.&STAT_PROCEDURE                       STAT_PROCEDURE,
       D.&TRANSACTION                          TRANSACTION,
       D.&COMMODITY_CODE                       COMMODITY_CODE,
       D.&MASS                                 MASS,
       D.&SUPPL_UNIT                           SUPPL_UNIT,
       D.&INVOICE_VALUE                        INVOICE_VALUE,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Company Tax No:^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company Name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..AGENT_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Agent Tax No:^ITEM_NAME=iAgentVatNo^';
COMMENT ON COLUMN &VIEW..AGENT_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Agent Name:^ITEM_NAME=iAgentName^';     
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting currency code:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of lines:^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report title^ITEM_NAME=iReportTitle^';
COMMENT ON COLUMN &VIEW..COUNTRY_DEST_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Country of Destination title^ITEM_NAME=iCountryDestTitle^';                  
COMMENT ON COLUMN &VIEW..TOTAL_INV_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value:^ITEM_NAME=iTotalInvValue^';     
          
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..TRANSACT_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Transaction period^ITEM_NAME=iTransactPeriod^';
COMMENT ON COLUMN &VIEW..COMMODITY_FLOW IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Commodity flow^ITEM_NAME=iCommodityFlow^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of consignment/destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..TRAFFIC_REGION_PORT IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Traffic Region/Port^ITEM_NAME=iTrafficRegionPort^';
COMMENT ON COLUMN &VIEW..STAT_PROCEDURE IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Statistical Procedure^ITEM_NAME=iStatProcedure^';
COMMENT ON COLUMN &VIEW..TRANSACTION IS              
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iTransaction^';
COMMENT ON COLUMN &VIEW..COMMODITY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Commodity Code^ITEM_NAME=iCommodityCode^';
COMMENT ON COLUMN &VIEW..MASS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iMass^';
COMMENT ON COLUMN &VIEW..SUPPL_UNIT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iSupplUnit^';
COMMENT ON COLUMN &VIEW..INVOICE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Value^ITEM_NAME=iInvoiceValue^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN
   IS 'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Country Of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Opponent Tax Id^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';
   

BEGIN 
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Netherlands','&TABLE','&PKG..&METHOD',30,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------ 
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_NL_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE Print_Details (
   row_no_               IN OUT NUMBER,
   file_line_no_         IN OUT NUMBER,  
   xml_                  IN OUT CLOB,
   result_key_           IN NUMBER,
   parent_row_no_        IN NUMBER,     
   intrastat_direction_  IN VARCHAR2,
   transaction_period_   IN VARCHAR2,
   vat_no_               IN VARCHAR2,
   opposite_country_     IN VARCHAR2,
   mode_of_transport_    IN VARCHAR2,
   region_port_          IN VARCHAR2,
   statistical_procedure_ IN VARCHAR2,
   country_notc_         IN VARCHAR2,
   customs_stat_no_      IN VARCHAR2,
   mass_                 IN NUMBER,
   supplementary_unit_   IN NUMBER,
   invoice_value_        IN NUMBER,
   do_xml_               IN BOOLEAN,
   do_rs_                IN BOOLEAN,
   country_Of_Origin_    IN VARCHAR2,
   opponent_tax_id_      IN VARCHAR2 )

IS
   -- Data Record
   commodity_flow_      VARCHAR2(1);
     
BEGIN   

   
   IF (intrastat_direction_ = 'IMPORT') THEN
      commodity_flow_ := '6';  -- import
   ELSE
      commodity_flow_ := '7';  -- export       
   END IF;
   
   file_line_no_ := file_line_no_ + 1;
        
   -- Generate an error if Region/Port is null while mode_of_transport is 1, 4 or 8
   IF ((mode_of_transport_ IN ('1','4','8')) AND (region_port_ IS NULL)) THEN
      Error_SYS.Record_General(lu_name_, 'REGPORTNULL: Some row or rows have empty Traffic Region/Port fields while Mode of Transport is 1, 4, or 8. Traffic Region/Port must have a value in these cases');        
   END IF;         
   
      
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_NL_LINE');
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMMODITY_CODE', SUBSTR(customs_stat_no_, 1, 8));
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMMODITY_FLOW', commodity_flow_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_DEST', SUBSTR(opposite_country_, 1, 3));
      Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', invoice_value_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', file_line_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'MASS', round(mass_));
      Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', mode_of_transport_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_PROCEDURE', statistical_procedure_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUPPL_UNIT', round(supplementary_unit_));
      Xml_Record_Writer_SYS.Add_Element(xml_,'TRAFFIC_REGION_PORT', SUBSTR(region_port_, 1, 2));
      Xml_Record_Writer_SYS.Add_Element(xml_,'TRANSACT_PERIOD', transaction_period_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TRANSACTION', country_notc_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', country_Of_Origin_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', opponent_tax_id_);
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_NL_LINE');
   END IF;

   IF (do_rs_) THEN
      -- insert detail rows
      INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &LINE_NO, &TRANSACT_PERIOD,
          &COMMODITY_FLOW,  &COUNTRY_OF_DEST, 
          &MODE_OF_TRANSPORT, &TRAFFIC_REGION_PORT, &STAT_PROCEDURE,
          &TRANSACTION, &COMMODITY_CODE, &MASS, 
          &SUPPL_UNIT, &INVOICE_VALUE, &COUNTRY_OF_ORIGIN, &OPPONENT_TAX_ID )
      VALUES
         (result_key_, row_no_, parent_row_no_, file_line_no_, transaction_period_,
          commodity_flow_, SUBSTR(opposite_country_, 1, 3),
          mode_of_transport_, SUBSTR(region_port_, 1, 2), statistical_procedure_, 
         country_notc_, SUBSTR(customs_stat_no_, 1, 8), round(mass_), 
          round(supplementary_unit_), invoice_value_, country_Of_Origin_, opponent_tax_id_);
      row_no_ := row_no_ + 1;
   END IF;

END Print_Details;


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS

   -- Preliminary Record
   psi_vat_no_           VARCHAR2(12);
   agent_vat_no_         VARCHAR2(12);  
   review_period_        VARCHAR2(6);
   psi_name_             VARCHAR2(40);
   agent_name_           VARCHAR2(40);   
   creation_date_        VARCHAR2(8);
   currency_             VARCHAR2(3);
   
   file_line_no_         NUMBER := 0;
   
   vat_no_               VARCHAR2(50);
   cid_                  NUMBER;
   stmt_                 VARCHAR2(2000);
   result_key_           NUMBER;
   row_no_               NUMBER := 1;
   parent_row_no_        NUMBER := 0;
   report_title_         VARCHAR2(50);
   intrastat_id_         NUMBER;
   intrastat_direction_  VARCHAR2(20);
   rep_curr_code_        VARCHAR2(3);
   rep_curr_rate_        NUMBER;
   country_code_         VARCHAR2(2);   
   notc_dummy_           VARCHAR2(2);        
   country_destination_title_ VARCHAR2(50);
   sum_invoiced_amount_   NUMBER := 0;
   rounded_invoice_value_ NUMBER := 0;

   do_xml_               BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                  CLOB;
   package_name_         VARCHAR2(100) := 'INTRASTAT_NL_REP';
   rowkey_               VARCHAR2(50);
   

   CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc = notc_
      AND    country_code = 'NL';

   CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             creation_date,
             rep_curr_code,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;

   CURSOR get_import_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,
             il.mode_of_transport,
             il.region_port,
             cn.country_notc,  
             il.customs_stat_no,    
             SUM(il.quantity * il.net_unit_weight) mass,
             SUM(il.quantity * nvl(ABS(il.intrastat_alt_qty),0)) supplementary_unit,
             SUM(il.quantity * nvl(il.invoiced_unit_price, il.order_unit_price)) * rep_curr_rate_ invoice_value
      FROM   intrastat_line_tab il, country_notc_tab cn
      WHERE  il.rowstate = 'Released'
      AND    il.intrastat_id = intrastat_id_
      AND    il.intrastat_direction = 'IMPORT'
      AND    il.notc = cn.notc           
      AND    cn.country_code = country_code_
      GROUP BY  il.intrastat_direction,
                il.opposite_country,
                il.mode_of_transport,
                il.region_port,  
                cn.country_notc, 
                il.customs_stat_no;
            
   CURSOR get_export_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,
             il.mode_of_transport,
             il.region_port,
             DECODE(il.statistical_procedure, 'DELIVERY', '00', 
                                              'BEFORE SUBCONTRACTING','02',
                                              'AFTER SUBCONTRACTING','00','00') statistical_procedure,
             cn.country_notc,  
             il.customs_stat_no,    
             SUM(il.quantity * il.net_unit_weight) mass,
             SUM(il.quantity * nvl(ABS(il.intrastat_alt_qty),0)) supplementary_unit,
             SUM(il.quantity * nvl(il.invoiced_unit_price, il.order_unit_price)) * rep_curr_rate_ invoice_value,
             il.opponent_tax_id,
             il.country_of_origin
      FROM   intrastat_line_tab il, country_notc_tab cn
      WHERE  il.rowstate = 'Released'
      AND    il.intrastat_id = intrastat_id_
      AND    il.intrastat_direction = 'EXPORT'
      AND    il.notc = cn.notc                
      AND    cn.country_code = country_code_
      GROUP BY  il.intrastat_direction,
                il.opposite_country,
                il.mode_of_transport,
                il.region_port,  
                DECODE(il.statistical_procedure, 'DELIVERY', '00', 
                                                 'BEFORE SUBCONTRACTING','02',
                                                 'AFTER SUBCONTRACTING','00','00'),
                cn.country_notc, 
                il.customs_stat_no,
                il.opponent_tax_id,
                il.country_of_origin;               

BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   
   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTNL: Intrastat Export Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'EXPORTCD: Country of Destination');      
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTNL: Intrastat Import Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'IMPORTCD: Country of Dispatch');      
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   -- Preliminary Record
   FOR headrec_ IN get_head LOOP     
      
      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         -- ifs_assert_safe bmekse 20110309
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;

      IF (SUBSTR(vat_no_,1,2) = headrec_.country_code ) THEN
         -- do not include country code in the vat no
         psi_vat_no_ := SUBSTR(NVL(vat_no_,' '), 3, 12);
      ELSE
         psi_vat_no_ := SUBSTR(NVL(vat_no_,' '), 1, 12);
      END IF;    
      psi_name_   := UPPER(SUBSTR(Company_API.Get_Name(headrec_.company), 1, 40));
      IF (SUBSTR(headrec_.repr_tax_no,1,2) = headrec_.country_code) THEN
         -- do not include country code in the vat no
         agent_vat_no_ := SUBSTR(NVL(headrec_.repr_tax_no,' '), 3, 12);               
      ELSE
         agent_vat_no_ := SUBSTR(NVL(headrec_.repr_tax_no,' '), 1, 12);      
      END IF;
      agent_name_   := UPPER(SUBSTR(NVL(Person_Info_API.Get_Name(headrec_.representative),' '), 1, 40));
   
      review_period_ := to_char(headrec_.end_date, 'YYYYMM');              
      creation_date_ := to_char(headrec_.creation_date, 'YYYYMMDD');
      currency_      := headrec_.rep_curr_code;
      rep_curr_rate_ := headrec_.rep_curr_rate;
      country_code_  := headrec_.country_code;
      rowkey_        := headrec_.rowkey;

   END LOOP;

   IF (currency_ NOT IN ('NLG','EUR')) THEN
      Error_SYS.Record_General(lu_name_, 'WRONGCURRNL: Currency Code :P1 is not a valid currency, only NLG and EUR is acceptable', rep_curr_code_);
   END IF;

   IF (do_xml_) THEN      
      Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DEST_TITLE', country_destination_title_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', currency_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', review_period_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AGENT_NAME', agent_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AGENT_VAT_NO', agent_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', psi_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', psi_vat_no_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',rowkey_, '&VIEW');

      Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_NL_LINES');
   END IF;

   IF (do_rs_) THEN
      -- Insert Head details
      INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &COMPANY_VAT_NO,
          &COMPANY_NAME, &AGENT_VAT_NO, &AGENT_NAME, 
          &REPORTING_PERIOD, &CREATION_DATE,
          &CURRENCY_CODE, &REPORT_TITLE, &COUNTRY_DEST_TITLE )
      VALUES
         (result_key_, row_no_, parent_row_no_, psi_vat_no_,
          psi_name_, agent_vat_no_, agent_name_, 
          review_period_, creation_date_,
          currency_, report_title_, country_destination_title_ );   
      parent_row_no_ := row_no_;   
      row_no_ := row_no_ + 1;
   END IF;

   -- Data Records 
   IF (intrastat_direction_ = 'IMPORT') THEN
      FOR linerec_ IN get_import_lines LOOP
         rounded_invoice_value_ := ROUND(linerec_.invoice_value);
         Print_Details(row_no_,
                       file_line_no_,
                       xml_,
                       result_key_,
                       parent_row_no_,   
                       intrastat_direction_,
                       review_period_,
                       vat_no_,
                       linerec_.opposite_country,
                       linerec_.mode_of_transport,
                       linerec_.region_port,
                       '00',
                       linerec_.country_notc,
                       linerec_.customs_stat_no,
                       linerec_.mass,
                       linerec_.supplementary_unit,
                       rounded_invoice_value_,
                       do_xml_,
                       do_rs_ ,
                       NULL,
                       NULL );
         sum_invoiced_amount_ := sum_invoiced_amount_ + rounded_invoice_value_;                       
      END LOOP; 
   END IF;
   IF (intrastat_direction_ = 'EXPORT') THEN
      FOR linerec_ IN get_export_lines LOOP
         IF (linerec_.opponent_tax_id IS NULL) THEN         
            Error_SYS.Record_General(lu_name_, 'NOOPPONENTTAXIDNL: Opponent Tax ID is missing for some lines.');
         END IF;
         IF (linerec_.country_of_origin IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'MISSINGCOUNTRYOFORIGIONNL: Country of Origin is missing for some lines.');
         END IF;
         rounded_invoice_value_ := ROUND(linerec_.invoice_value);
         Print_Details(row_no_,
                       file_line_no_,
                       xml_,
                       result_key_,
                       parent_row_no_,  
                       intrastat_direction_,
                       review_period_,
                       vat_no_,
                       linerec_.opposite_country,
                       linerec_.mode_of_transport,
                       linerec_.region_port,
                       linerec_.statistical_procedure,
                       linerec_.country_notc,
                       linerec_.customs_stat_no,
                       linerec_.mass,
                       linerec_.supplementary_unit,
                       rounded_invoice_value_,
                       do_xml_,
                       do_rs_,
                       linerec_.country_of_origin,
                       linerec_.opponent_tax_id );
         sum_invoiced_amount_ := sum_invoiced_amount_ + rounded_invoice_value_;                       
      END LOOP; 
   END IF;
   
   IF (do_rs_) THEN
      IF (row_no_ = 2) THEN -- no details      
         -- insert blank row
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, &LINE_NO, &TRANSACT_PERIOD,
             &COMMODITY_FLOW, &COUNTRY_OF_DEST, 
             &MODE_OF_TRANSPORT, &TRAFFIC_REGION_PORT, &STAT_PROCEDURE,
             &TRANSACTION, &COMMODITY_CODE, &MASS, &SUPPL_UNIT, &INVOICE_VALUE )
         VALUES
            (result_key_, row_no_, parent_row_no_, NULL, NULL,
             NULL, NULL, 
             NULL, NULL, NULL, 
             NULL, NULL, NULL, NULL, NULL);    
      END IF;
      
      -- update the head with no_of_lines information
      UPDATE &TABLE
      SET    &NO_OF_LINES = file_line_no_,
             &TOTAL_INV_VALUE = sum_invoiced_amount_    
      WHERE  result_key = result_key_
      AND    row_no = parent_row_no_;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_NL_LINES');
      Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', file_line_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_INV_VALUE', sum_invoiced_amount_);
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
   

EXCEPTION
   WHEN OTHERS THEN
      IF (dbms_sql.is_open (cid_)) THEN
         dbms_sql.close_cursor (cid_);
      END IF;
      RAISE;  

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------




----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE COMPANY_VAT_NO
UNDEFINE COMPANY_NAME
UNDEFINE AGENT_VAT_NO
UNDEFINE AGENT_NAME
UNDEFINE REPORTING_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE CURRENCY_CODE
UNDEFINE NO_OF_LINES
UNDEFINE REPORT_TITLE
UNDEFINE COUNTRY_DEST_TITLE
UNDEFINE TOTAL_INV_VALUE
UNDEFINE LINE_NO
UNDEFINE TRANSACT_PERIOD
UNDEFINE COMMODITY_FLOW
UNDEFINE COUNTRY_OF_DEST
UNDEFINE MODE_OF_TRANSPORT
UNDEFINE TRAFFIC_REGION_PORT
UNDEFINE STAT_PROCEDURE
UNDEFINE TRANSACTION
UNDEFINE COMMODITY_CODE
UNDEFINE MASS
UNDEFINE SUPPL_UNIT
UNDEFINE INVOICE_VALUE
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE OPPONENT_TAX_ID