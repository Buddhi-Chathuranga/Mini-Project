-----------------------------------------------------------------------------
--
--  Logical unit: CountPerCountReport
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2022-01-27  JaThlk  SC21R2-7284, Modified CRUD_Create___ to avoid adding count report lines for receipt and issue tracking only parts.
-- 2021-12-23  JaThlk  SC21R2-2942, Added Update_Counted_Qty___ to support counting serial items without specifying serials.
-- 2021-12-17  JaThlk  SC21R2-2932, Added Create_Count_Report_Lines___ and Get_Route_Order_Info___ and methods and overidden CRUD_Create___ and CRUD_Default___
-- 2021-12-17          to support adding count per count report lines.
-- 2021-10-28  DigPlk  SC21R2-2881, Added the function Get_Session_Id_Selection___ to create the selection with session id.
-- 2019-04-26  SWiclk  SCUXXW4-18408, Removed functions Get_Count_Report_Line_Aggregated___() and Get_Count_Report_Line_Details___().
-- 2019-04-25  DaZase  SCUXXW4-19618, Added Counting_Report_Initial_Check___ and Handl_Unit_Stock_Snapshot_Initial_Check___
-- 2019-04-24  DaZase  SCUXXW4-19618, Added bound methods for Get_Result_Key___, Confirm_Line___ and Count_Line_Without_Diff___.
-- 2019-04-17  DaZase  SCUXXW4-14187, Added Get_System_Shortage_Flag___.
-- 2018-11-16  DaZase  SCUXXW4-6149, Added Get_Aggregated_Search_Context_Defaults___, Get_Count_Report_Line_Aggregated___,
-- 2018-11-16          Count_Without_Diff___, Count_As_Zero___
-- 2018-11-08  DaZase  SCUXXW4-6154, Created.
-----------------------------------------------------------------------------

layer Core;

---------------------- Methods for Header -----------------------------------

PROCEDURE Count_All_Lines_Without_Dif___ (
   inv_list_no_  IN VARCHAR2 )
IS
BEGIN
   Counting_Report_Line_API.Count_All_Lines_Without_Diff(inv_list_no_);   
END Count_All_Lines_Without_Dif___;


PROCEDURE Confirm_All_Counted_Lines___ (
   inv_list_no_ IN VARCHAR2 )
IS
BEGIN
   Counting_Report_Line_API.Confirm_All_Counted_Lines(inv_list_no_);   
END Confirm_All_Counted_Lines___;

PROCEDURE Cancel_Counting_Report___ (
   inv_list_no_ IN VARCHAR2 )
IS
BEGIN
   Counting_Report_API.Cancel_Counting_Report(inv_list_no_);   
END Cancel_Counting_Report___;

-- Bound method
FUNCTION Get_Result_Key___ (
	key_ IN Counting_Report_Key,
	report_id_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Get_Result_Key___(key_.inv_list_no, report_id_);
END Get_Result_Key___;

FUNCTION Get_Result_Key___ (
   inv_list_no_ IN VARCHAR2,
   report_id_   IN VARCHAR2 ) RETURN VARCHAR2
IS
   report_attr_         VARCHAR2(2000);
   parameter_attr_      VARCHAR2(2000);

BEGIN    
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', report_id_, report_attr_);
   Client_SYS.Clear_Attr(parameter_attr_);
   Client_SYS.Add_To_Attr('INV_LIST_NO', inv_list_no_, parameter_attr_);
   RETURN Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
END Get_Result_Key___; 

FUNCTION Get_System_Shortage_Flag___  RETURN VARCHAR2
IS 
BEGIN
   RETURN Mpccom_System_Parameter_API.Get_Parameter_Value1('SHORTAGE_HANDLING');
END Get_System_Shortage_Flag___; 

---------------------- Methods for Details Tab ------------------------------

-- Counting Report Line bound method
PROCEDURE Confirm_Line___ (
	key_ IN Counting_Report_Line_Key)
IS
BEGIN
	Confirm_Line___(key_.inv_list_no, key_.seq);
END Confirm_Line___;

-- Counting Report Line Aggregated bound method (from the binded list on aggregated tab)
PROCEDURE Confirm_Line___ (
	key_ IN Counting_Report_Line_Aggregated_Key)
IS
BEGIN
	Confirm_Line___(key_.inv_list_no, key_.seq);
END Confirm_Line___;


PROCEDURE Confirm_Line___ (
   inv_list_no_  IN VARCHAR2,
   seq_          IN NUMBER )
IS
BEGIN  
   Counting_Report_Line_API.Confirm_Line(inv_list_no_, seq_);   
END Confirm_Line___;

-- Counting Report Line bound method
PROCEDURE Count_Line_Without_Diff___ (
	key_ IN Counting_Report_Line_Key,
	inv_qty_onhand_ IN NUMBER,
	inv_catch_qty_onhand_ IN NUMBER)
IS
BEGIN
   Count_Line_Without_Diff___(key_.inv_list_no, key_.seq, inv_qty_onhand_, inv_catch_qty_onhand_);
END Count_Line_Without_Diff___;

-- Counting Report Line Aggregated bound method (from the binded list on aggregated tab)
PROCEDURE Count_Line_Without_Diff___ (
	key_ IN Counting_Report_Line_Aggregated_Key,
	inv_qty_onhand_ IN NUMBER,
	inv_catch_qty_onhand_ IN NUMBER)
IS
BEGIN
	Count_Line_Without_Diff___(key_.inv_list_no, key_.seq, inv_qty_onhand_, inv_catch_qty_onhand_);
END Count_Line_Without_Diff___;


PROCEDURE Count_Line_Without_Diff___ (
   inv_list_no_          IN VARCHAR2,
   seq_                  IN NUMBER,
   inv_qty_onhand_       IN NUMBER,
   inv_catch_qty_onhand_ IN NUMBER )
IS
BEGIN
   Counting_Report_Line_API.Count_Line_Without_Diff(inv_list_no_, seq_, inv_qty_onhand_, inv_catch_qty_onhand_);   
END Count_Line_Without_Diff___;

FUNCTION Get_Details_Search_Context_Defaults___ RETURN Details_Search_Context_Structure_Rec
IS
   search_context_struct_    Details_Search_Context_Structure_Rec;
BEGIN 
   search_context_struct_.Show_Details := 'ShowAll';
   RETURN search_context_struct_;   
END Get_Details_Search_Context_Defaults___;


---------------------- Methods for Aggregated Tab ---------------------------

FUNCTION Get_Aggregated_Search_Context_Defaults___ RETURN Aggregated_Search_Context_Structure_Rec
IS
   search_context_struct_    Aggregated_Search_Context_Structure_Rec;
BEGIN 
   search_context_struct_.Show_Aggregated := 'ShowOnlyTopLevel';
   RETURN search_context_struct_;
END Get_Aggregated_Search_Context_Defaults___;

PROCEDURE Count_Without_Diff___ (
   full_selection_  IN VARCHAR2 )   
IS   
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   attr_                VARCHAR2(32000);
   inv_list_no_         VARCHAR2(15);
   contract_            VARCHAR2(5);
   handling_unit_id_    NUMBER;
   location_no_         VARCHAR2(35);
BEGIN    
   -- Since we cannot for some strange reason get InvListNo and Contract from parent in this command and we cannot fetch them from 
   -- the entity list either since this is bulkexecute command, we have to fetch these 2 values here instead, we only need to 
   -- fetch them one time since they are the same for all selection lines.
   inv_list_no_ :=  Client_SYS.Get_Key_Reference_Value(selection_, 'INV_LIST_NO');
   contract_ := Counting_Report_API.Get_Contract(inv_list_no_);

   Client_SYS.Clear_Attr(attr_); 
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_ := SUBSTR(selection_, 0, INSTR(selection_, ';'));
      handling_unit_id_ :=  Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID');
      location_no_ :=  Client_SYS.Get_Key_Reference_Value(current_selection_, 'LOCATION_NO');

      IF (handling_unit_id_ != 0) THEN
         Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', handling_unit_id_, attr_);
      ELSE
         Client_SYS.Add_To_Attr('LOCATION_NO', location_no_, attr_);   
      END IF;
      selection_ := SUBSTR(selection_, INSTR(selection_, ';') + 1); 
      IF ((LENGTH(attr_) > (32000 - 100)) OR (INSTR(selection_, ';') IS NULL)) THEN 
         Counting_Report_Handl_Unit_API.Count_Hu_Without_Diff(inv_list_no_, contract_, attr_);
         Client_SYS.Clear_Attr(attr_);
      END IF;     
   END LOOP;   

END Count_Without_Diff___;


PROCEDURE Count_As_Zero___ (
   full_selection_  IN VARCHAR2 )   
IS   
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   attr_                VARCHAR2(32000);
   inv_list_no_         VARCHAR2(15);
   contract_            VARCHAR2(5);
   handling_unit_id_    NUMBER;
   location_no_         VARCHAR2(35);
BEGIN    
   -- Since we cannot for some strange reason get InvListNo and Contract from parent in this command and we cannot fetch them from 
   -- the entity list either since this is bulkexecute command, we have to fetch these 2 values here instead, we only need to 
   -- fetch them one time since they are the same for all selection lines.
   inv_list_no_ :=  Client_SYS.Get_Key_Reference_Value(selection_, 'INV_LIST_NO');
   contract_ := Counting_Report_API.Get_Contract(inv_list_no_);

   Client_SYS.Clear_Attr(attr_); 
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_ := SUBSTR(selection_, 0, INSTR(selection_, ';'));
      handling_unit_id_ :=  Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID');
      location_no_ :=  Client_SYS.Get_Key_Reference_Value(current_selection_, 'LOCATION_NO');

      IF (handling_unit_id_ != 0) THEN
         Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', handling_unit_id_, attr_);
      ELSE
         Client_SYS.Add_To_Attr('LOCATION_NO', location_no_, attr_);   
      END IF;
      selection_ := SUBSTR(selection_, INSTR(selection_, ';') + 1); 
      IF ((LENGTH(attr_) > (32000 - 100)) OR (INSTR(selection_, ';') IS NULL)) THEN 
         Counting_Report_Handl_Unit_API.Count_Hu_As_Non_Existing(inv_list_no_, contract_, attr_);
         Client_SYS.Clear_Attr(attr_);
      END IF;     
   END LOOP;   

END Count_As_Zero___;


PROCEDURE Confirm_Aggregated___ (
   full_selection_  IN VARCHAR2 )   
IS   
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   attr_                VARCHAR2(32000);
   inv_list_no_         VARCHAR2(15);
   contract_            VARCHAR2(5);
   handling_unit_id_    NUMBER;
   location_no_         VARCHAR2(35);
BEGIN    
   -- Since we cannot for some strange reason get InvListNo and Contract from parent in this command and we cannot fetch them from 
   -- the entity list either since this is bulkexecute command, we have to fetch these 2 values here instead, we only need to 
   -- fetch them one time since they are the same for all selection lines.
   inv_list_no_ :=  Client_SYS.Get_Key_Reference_Value(selection_, 'INV_LIST_NO');
   contract_ := Counting_Report_API.Get_Contract(inv_list_no_);

   Client_SYS.Clear_Attr(attr_); 
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_ := SUBSTR(selection_, 0, INSTR(selection_, ';'));
      handling_unit_id_ :=  Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID');
      location_no_ :=  Client_SYS.Get_Key_Reference_Value(current_selection_, 'LOCATION_NO');

      IF (handling_unit_id_ != 0) THEN
         Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', handling_unit_id_, attr_);
      ELSE
         Client_SYS.Add_To_Attr('LOCATION_NO', location_no_, attr_);   
      END IF;
      selection_ := SUBSTR(selection_, INSTR(selection_, ';') + 1); 
      IF ((LENGTH(attr_) > (32000 - 100)) OR (INSTR(selection_, ';') IS NULL)) THEN 
         Counting_Report_Handl_Unit_API.Confirm_Handling_Unit(inv_list_no_, contract_, attr_);
         Client_SYS.Clear_Attr(attr_);
      END IF;     
   END LOOP;   

END Confirm_Aggregated___;



FUNCTION Counting_Report_Initial_Check___ (
   inv_list_no_   IN VARCHAR2 ) RETURN BOOLEAN
IS   
   initial_check_  BOOLEAN := FALSE;
   dummy_ NUMBER;
   
   CURSOR check_exist IS
      SELECT 1 
      FROM COUNTING_REPORT
      WHERE inv_list_no = inv_list_no_;
BEGIN
   OPEN check_exist;
   FETCH check_exist INTO dummy_;
   IF (check_exist%FOUND) THEN
      initial_check_ := TRUE;
   END IF;
   CLOSE check_exist;      
   RETURN initial_check_;
END Counting_Report_Initial_Check___;      


FUNCTION Handl_Unit_Stock_Snapshot_Initial_Check___ (
   full_selection_   IN VARCHAR2 ) RETURN BOOLEAN
IS   
   initial_check_       BOOLEAN;
   dummy_               NUMBER;
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
    inv_list_no_        VARCHAR2(15);  
   -- Note: using COUNTING_REPORT view and not snapshot view since it has the user allowed site check on that view that we want checked here
   CURSOR check_exist IS
      SELECT 1 
      FROM COUNTING_REPORT
      WHERE inv_list_no = inv_list_no_;
BEGIN
   -- Looping throu all selection records just be 100% sure we dont get any injected not user allowed sites here
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_ := SUBSTR(selection_, 0, INSTR(selection_, ';'));
      inv_list_no_ :=  Client_SYS.Get_Key_Reference_Value(selection_, 'INV_LIST_NO');

      OPEN check_exist;
      FETCH check_exist INTO dummy_;
      IF (check_exist%FOUND) THEN
         initial_check_ := TRUE;
      ELSE  
         initial_check_ := FALSE;
      END IF;
      CLOSE check_exist; 
      EXIT WHEN NOT initial_check_;
      selection_ := SUBSTR(selection_, INSTR(selection_, ';') + 1); 
    
   END LOOP;    
   RETURN initial_check_;
END Handl_Unit_Stock_Snapshot_Initial_Check___; 


FUNCTION Get_Session_Id_Selection___ (
   contract_            IN VARCHAR2,
   part_no_             IN VARCHAR2,
   configuration_id_    IN VARCHAR2,
   location_no_         IN VARCHAR2,
   lot_batch_no_        IN VARCHAR2,
   eng_chg_level_       IN VARCHAR2,
   waiv_dev_rej_no_     IN VARCHAR2,
   activity_seq_        IN NUMBER,
   handling_unit_id_    IN NUMBER,
   qty_num_             IN VARCHAR2,
   catch_qty_num_       IN NUMBER,
   assistant_title_     IN VARCHAR2,
   assistant_context_   IN VARCHAR2,
   session_id_          IN NUMBER) RETURN Identify_Serials_Rec_Structure_Rec
IS
   new_selection_       VARCHAR2(32000) := NULL;
   req_rec_structure_   Identify_Serials_Rec_Structure_Rec;
   total_               NUMBER:=1;
   new_session_id_      NUMBER;
BEGIN
   IF session_id_ IS NULL THEN 
      new_session_id_ := Temporary_Part_Tracking_API.Get_Next_Session_Id;
   ELSE 
      new_session_id_ := session_id_;
   END IF;
    
   Client_SYS.Add_To_Key_Reference(new_selection_,'CONTRACT',contract_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'PART_NO',part_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'CONFIGURATION_ID',configuration_id_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'LOCATION_NO',location_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'LOT_BATCH_NO',lot_batch_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ENG_CHG_LEVEL',eng_chg_level_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'WAIV_DEV_REJ_NO',waiv_dev_rej_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ACTIVITY_SEQ',activity_seq_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'HANDLING_UNIT_ID',handling_unit_id_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'QTY_TO_PICK',qty_num_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'CATCH_QTY_ISSUE',catch_qty_num_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ASSISTANT_TITLE',assistant_title_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ASSISTANT_CONTEXT',assistant_context_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'SESSION_ID',new_session_id_);

   req_rec_structure_.remaining_selection  := new_selection_;
   req_rec_structure_.total                := total_;
   req_rec_structure_.session_id           := new_session_id_;
   RETURN req_rec_structure_;
END Get_Session_Id_Selection___;


---------------------- Methods for Create Count Report Line Assistant ---------------------------

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Count_Report_Line_Virtual_Rec )
IS
   temp_rec_           Count_Report_Line_Virtual_Rec;
   max_seq_            NUMBER;
   part_catalog_rec_   Part_Catalog_API.Public_Rec;
   CURSOR get_max_sequence_no IS
      SELECT MAX(seq)
      FROM   ${PROJECTION}_COUNT_REPORT_LINE_VIRTUAL_VRT 
      WHERE  inv_list_no        = rec_.inv_list_no
      AND    contract           = rec_.contract;
BEGIN
   
   part_catalog_rec_ := Part_Catalog_API.Get(rec_.part_no);
   
   -- Adding count report line for a receipt and issue tracking only part is not allowed using the assistant. 
   IF (part_catalog_rec_.receipt_issue_serial_track = Fnd_Boolean_API.DB_TRUE AND part_catalog_rec_.serial_tracking_code = Part_Serial_Tracking_API.DB_NOT_SERIAL_TRACKING) THEN
      Error_SYS.Record_General(lu_name_, 'RCPTISSUEONLYNOTALLWD: Inserting count report line for a receipt and issue tracking only part is not allowed');   
   END IF; 
     
   OPEN get_max_sequence_no;
   FETCH get_max_sequence_no INTO max_seq_;
   CLOSE get_max_sequence_no;

   temp_rec_ := rec_;
   IF max_seq_ = 0 OR max_seq_ IS NULL THEN      
      temp_rec_.seq := Counting_Report_Line_API.Get_Max_Sequence_No(rec_.inv_list_no, rec_.contract) + 1;
   ELSE
      temp_rec_.seq := max_seq_ + 1;
   END IF;
   temp_rec_.inv_qty_onhand := NVL(Inventory_Part_In_Stock_API.Get_Qty_Onhand(rec_.contract, 
                                                                              rec_.part_no, 
                                                                              rec_.configuration_id, 
                                                                              rec_.location_no, 
                                                                              rec_.lot_batch_no, 
                                                                              rec_.serial_no, 
                                                                              rec_.eng_chg_level, 
                                                                              rec_.waiv_dev_rej_no, 
                                                                              rec_.activity_seq, 
                                                                              rec_.handling_unit_id), 0);
                                                                      
   temp_rec_.catch_qty_onhand := NVL(Inventory_Part_In_Stock_API.Get_Catch_Qty_Onhand(rec_.contract, 
                                                                                      rec_.part_no, 
                                                                                      rec_.configuration_id, 
                                                                                      rec_.location_no, 
                                                                                      rec_.lot_batch_no, 
                                                                                      rec_.serial_no, 
                                                                                      rec_.eng_chg_level, 
                                                                                      rec_.waiv_dev_rej_no, 
                                                                                      rec_.activity_seq, 
                                                                                      rec_.handling_unit_id), 0);

   super(temp_rec_);
END CRUD_Create___;


PROCEDURE Create_Count_Report_Lines___ (
   key_      IN Count_Report_Header_Virtual_Key)
IS
   parent_key_   Count_Report_Header_Virtual_Key;
   parent_rec_   Count_Report_Header_Virtual_Rec;
   child_key_    Count_Report_Line_Virtual_Key;
   child_rec_    Count_Report_Line_Virtual_Rec;
   user_         VARCHAR2(30) := Fnd_Session_API.Get_Fnd_User;
BEGIN
	parent_key_.objkey := key_.Objkey;
   parent_rec_ := Get_Record___(parent_key_);
   FOR line_rec_ IN Get_Count_Report_Array___(parent_key_) LOOP
      child_key_.objkey := line_rec_.objkey;
      child_rec_ := Get_Record___(child_key_);
       
      Counting_Report_Line_API.New_List_Detail(child_rec_.inv_list_no,
                                               child_rec_.seq,
                                               child_rec_.contract,
                                               child_rec_.part_no,
                                               child_rec_.configuration_id,
                                               child_rec_.location_no,
                                               child_rec_.lot_batch_no,
                                               child_rec_.serial_no,
                                               child_rec_.eng_chg_level,
                                               child_rec_.waiv_dev_rej_no,
                                               child_rec_.activity_seq,
                                               child_rec_.handling_unit_id,
                                               0,
                                               child_rec_.inv_qty_onhand,
                                               child_rec_.catch_qty_onhand,
                                               user_,
                                               child_rec_.warehouse_route_order,
                                               child_rec_.bay_route_order,
                                               child_rec_.row_route_order,
                                               child_rec_.tier_route_order,
                                               child_rec_.bin_route_order);
      CRUD_Delete___(child_rec_);                                   
   END LOOP;   
END Create_Count_Report_Lines___;


FUNCTION Get_Route_Order_Info___ (
   contract_      IN VARCHAR2,
   location_no_   IN VARCHAR2) RETURN Route_Order_Structure_Rec
IS
   warehouse_route_order_ VARCHAR2(15);
   bay_route_order_       VARCHAR2(5);  
   row_route_order_       VARCHAR2(5);  
   tier_route_order_      VARCHAR2(5);  
   bin_route_order_       VARCHAR2(5);  
   rec_                   Route_Order_Structure_Rec;
BEGIN
   Warehouse_Bay_Bin_API.Get_Route_Order_Strings(warehouse_route_order_, bay_route_order_, row_route_order_, tier_route_order_, bin_route_order_, contract_, location_no_);
   rec_.warehouse_route_order := warehouse_route_order_;
   rec_.bay_route_order       := bay_route_order_;
   rec_.row_route_order       := row_route_order_;
   rec_.tier_route_order      := tier_route_order_;
   rec_.bin_route_order       := bin_route_order_;
   RETURN rec_;
END Get_Route_Order_Info___;


@Override
PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Count_Report_Line_Virtual_Rec )
IS

BEGIN
   rec_.handling_unit_id := 0;
   rec_.activity_seq     := 0;
   rec_.configuration_id := '*';
   rec_.lot_batch_no     := '*';
   rec_.waiv_dev_rej_no  := '*';
   rec_.eng_chg_level    := '1';
   rec_.serial_no        := '*';
   super(rec_);
END CRUD_Default___;


PROCEDURE Update_Counted_Qty___ (
   key_                       IN Count_Rep_Line_Serial_Aggregated_Key,
   aggregated_counted_qty_    IN NUMBER,
   aggregated_inv_qty_onhand_ IN NUMBER)
IS
   CURSOR Get_Sequence IS      
      SELECT seq,serial_no
      FROM counting_report_line_tab
      WHERE inv_list_no = key_.inv_list_no
      AND   part_no = key_.part_no  
      AND   contract = key_.contract 
      AND   configuration_id = key_.configuration_id 
      AND   location_no = key_.location_no
      AND   lot_batch_no = key_.lot_batch_no 
      AND   eng_chg_level = key_.eng_chg_level  
      AND   waiv_dev_rej_no = key_.waiv_dev_rej_no 
      AND   activity_seq = key_.activity_seq  
      AND   handling_unit_id = key_.handling_unit_id;
BEGIN
   FOR seq_rec_ IN Get_Sequence LOOP
      IF seq_rec_.serial_no = '*' THEN
         Counting_Report_Line_API.Modify_Counted_Qty(key_.inv_list_no, seq_rec_.seq, aggregated_counted_qty_);
      ELSE   
         IF (aggregated_counted_qty_= aggregated_inv_qty_onhand_) THEN
            Counting_Report_Line_API.Modify_Counted_Qty(key_.inv_list_no, seq_rec_.seq, 1);
         ELSE
            Error_SYS.Record_General(lu_name_, 'INCORRECTCOUNTQTY: The entered quantity for this part does not correspond with the number of serials to be counted. Please review and continue counting on detailed level per serial.');
         END IF;
      END IF;   
   END LOOP;   

END Update_Counted_Qty___;


FUNCTION Get_Existing_Stock_Record_Info___ (
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   location_no_      IN VARCHAR2,
   lot_batch_no_     IN VARCHAR2,
   serial_no_        IN VARCHAR2,
   eng_chg_level_    IN VARCHAR2,
   waiv_dev_rej_no_  IN VARCHAR2,
   activity_seq_     IN NUMBER,
   handling_unit_id_ IN NUMBER) RETURN Existing_Stock_Record_Info_Structure_Rec
IS
   inv_part_in_stock_tab_   Inventory_Part_In_Stock_API.Public_Tab; 
   rec_                     Existing_Stock_Record_Info_Structure_Rec;
BEGIN
   
   inv_part_in_stock_tab_ := Inventory_Part_In_Stock_API.Get_Other_Stock_Loc_Onhand(contract_,
                                                                                    part_no_,
                                                                                    configuration_id_,
                                                                                    location_no_,
                                                                                    lot_batch_no_,
                                                                                    serial_no_,
                                                                                    eng_chg_level_,
                                                                                    waiv_dev_rej_no_,
                                                                                    activity_seq_,
                                                                                    handling_unit_id_);
                                                                                    
   IF inv_part_in_stock_tab_.COUNT = 1  THEN
      rec_.expiration_date         :=  inv_part_in_stock_tab_(1).expiration_date;
      rec_.receipt_date            :=  inv_part_in_stock_tab_(1).receipt_date;
      rec_.availability_control_id :=  inv_part_in_stock_tab_(1).expiration_date;
      rec_.rotable_part_pool_id    :=  inv_part_in_stock_tab_(1).rotable_part_pool_id;
      rec_.catch_qty_onhand        :=  inv_part_in_stock_tab_(1).catch_qty_onhand ;
      rec_.part_ownership          :=  inv_part_in_stock_tab_(1).part_ownership;
      rec_.owning_customer_no      :=  inv_part_in_stock_tab_(1).owning_customer_no;
      rec_.owning_vendor_no        :=  inv_part_in_stock_tab_(1).owning_vendor_no ; 
   ELSIF inv_part_in_stock_tab_.COUNT > 1 THEN
      Error_SYS.Record_General(lu_name_,'INCOSSERIALLOC: Inconsistency found in Serial Location. Contact System Support.');     
   END IF;      
   RETURN rec_;
END Get_Existing_Stock_Record_Info___;
