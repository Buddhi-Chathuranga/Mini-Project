----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatSk.rdf
--
--  Date    Sign    History
--  ------  ------  --------------------------------------------------------
--  211122  ErFelk  Bug 161313(SC21R2-5342), Added opponent_tax_id to the report.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active to
--                  check component ACTIVE/INACTIVE instead of installability.
--  160526  Chgulk  STRLOC-473, Added new Address fields
--  121016  PraWlk  Bug 105887, Removed SUBSTR to avoid length restriction of customs statistics number description. 
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Slovakia'
--  120410  AyAmlk  Bug 100608, Increased the column length of delivery_terms to 5 in view INTRASTAT_SK_REP.
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  100107  Umdolk  Refactoring in Communication Methods in Enterprise.
--  090929  PraWlk  Bug 85516, Increased the length of com_code_desc_  and goods_description_ to 200.
--  090928  ChFolk  Removed un used cursor get_totals.
--  090929  PraWlk  Bug 85516, Increased the length of com_code_desc_  and goods_description_ to 200.
---------------------------------- 14.0.0 ----------------------------------
--  070704  ChBalk  Bug 66078, Assigned only first 35 characters to the variable.
--  070227  KaDilk  Bug 46111, created.
----------------------------------------------------------------------------

DEFINE MODULE             = INVENT
DEFINE LU                 = Intrastat
DEFINE PKG                = INTRASTAT_SK_RPI

DEFINE TABLE              = INVENT_INFO_SERVICES_RPT
DEFINE VIEW               = INTRASTAT_SK_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
DEFINE METHOD             = Report_Overview

DEFINE COMPANY_NAME       = S1  
DEFINE COMPANY_VAT_NO     = S2
DEFINE BRANCH_NO          = S3
DEFINE COMPANY_ADDRESS1   = S4  
DEFINE COMPANY_ADDRESS2   = S5
DEFINE COMPANY_ADDRESS3   = S33 
DEFINE COMPANY_ADDRESS4   = S34 
DEFINE COMPANY_ADDRESS5   = S35 
DEFINE COMPANY_ADDRESS6   = S36 
DEFINE COMPANY_ZIP_CITY   = S6  
DEFINE COMPANY_CONTACT    = S7  
DEFINE REPR_NAME          = S8  
DEFINE REPR_VAT_NO        = S9
DEFINE REPR_BRANCH_NO     = S10  
DEFINE REPR_ADDRESS1      = S11  
DEFINE REPR_ADDRESS2      = S12
DEFINE REPR_ADDRESS3      = S37
DEFINE REPR_ADDRESS4      = S38
DEFINE REPR_ADDRESS5      = S39
DEFINE REPR_ADDRESS6      = S40
DEFINE REPR_ZIP_CITY      = S13 
DEFINE REPR_CONTACT       = S14 
DEFINE REPORT_TYPE        = S15
DEFINE REPORTING_PERIOD   = S16 
DEFINE CREATION_DATE      = S17
DEFINE NO_OF_LINES        = N1
DEFINE REPORT_TITLE       = S18
DEFINE TOT_INVOICED_VALUE = N2
DEFINE TOT_STAT_VALUE     = N3
DEFINE COUNTRY_DEST_TITLE = S19
DEFINE ASSOCIATION_NO     = S20
DEFINE CURRENCY_CODE      = S21

DEFINE LINE_NO            = N4
DEFINE COUNTRY_OF_ORIGIN  = S22
DEFINE COUNTRY_OF_DEST    = S23
DEFINE NOTC               = S24
DEFINE MODE_OF_TRANSPORT  = S25
DEFINE COMMODITY_CODE     = S26
DEFINE COM_CODE_DESC      = S27
DEFINE ALT_UNIT_MEAS      = S28
DEFINE NET_WEIGHT         = N5
DEFINE ALT_MEAS           = N6
DEFINE INVOICED_VALUE     = N7
DEFINE STATISTICAL_VALUE  = N8
DEFINE GOODS_DESCRIPTION  = S29
DEFINE DELIVERY_TERMS     = S30
DEFINE REGION_CODE        = S31
DEFINE REGION_NAME        = S32
DEFINE OPPONENT_TAX_ID    = S41


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:    INTRASTAT_SK_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,       
       H.ROW_NO                                ROW_NO,           
       H.&REPORT_TYPE                          REPORT_TYPE,
       H.&COMPANY_NAME                         COMPANY_NAME,     
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&BRANCH_NO                            BRANCH_NO,
       H.&COMPANY_ADDRESS1                     COMPANY_ADDRESS1, 
       H.&COMPANY_ADDRESS2                     COMPANY_ADDRESS2,
       H.&COMPANY_ADDRESS3                     COMPANY_ADDRESS3,
       H.&COMPANY_ADDRESS4                     COMPANY_ADDRESS4,
       H.&COMPANY_ADDRESS5                     COMPANY_ADDRESS5,
       H.&COMPANY_ADDRESS6                     COMPANY_ADDRESS6,       
       H.&COMPANY_ZIP_CITY                     COMPANY_ZIP_CITY, 
       H.&COMPANY_CONTACT                      COMPANY_CONTACT,
       H.&REPR_NAME                            REPR_NAME,        
       H.&REPR_VAT_NO                          REPR_VAT_NO,
       H.&REPR_BRANCH_NO                       REPR_BRANCH_NO,
       H.&REPR_ADDRESS1                        REPR_ADDRESS1,    
       H.&REPR_ADDRESS2                        REPR_ADDRESS2,
       H.&REPR_ADDRESS3                        REPR_ADDRESS3,
       H.&REPR_ADDRESS4                        REPR_ADDRESS4,
       H.&REPR_ADDRESS5                        REPR_ADDRESS5,
       H.&REPR_ADDRESS6                        REPR_ADDRESS6,       
       H.&REPR_ZIP_CITY                        REPR_ZIP_CITY,       
       H.&REPR_CONTACT                         REPR_CONTACT,       
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,  
       H.&CREATION_DATE                        CREATION_DATE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE, 
       H.&TOT_INVOICED_VALUE                   TOT_INVOICED_VALUE,
       H.&TOT_STAT_VALUE                       TOT_STAT_VALUE,      
       H.&COUNTRY_DEST_TITLE                   COUNTRY_DEST_TITLE,              
       H.&ASSOCIATION_NO                       ASSOCIATION_NO,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       D.&LINE_NO                              LINE_NO,      
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&NOTC                                 NOTC,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&COMMODITY_CODE                       COMMODITY_CODE,
       D.&COM_CODE_DESC                        COM_CODE_DESC,
       D.&GOODS_DESCRIPTION                    GOODS_DESCRIPTION,
       D.&DELIVERY_TERMS                       DELIVERY_TERMS,
       D.&REGION_CODE                          REGION_CODE,
       D.&REGION_NAME                          REGION_NAME,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       D.&ALT_UNIT_MEAS                        ALT_UNIT_MEAS,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_MEAS                             ALT_MEAS,
       D.&INVOICED_VALUE                       INVOICED_VALUE,
       D.&STATISTICAL_VALUE                    STATISTICAL_VALUE,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';    
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Tax No:^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Branch No:^ITEM_NAME=iBranchNo^'; 
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress1^';   
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress2^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress3^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress4^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress5^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress6^';
COMMENT ON COLUMN &VIEW..COMPANY_ZIP_CITY IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyZipCity^';
COMMENT ON COLUMN &VIEW..COMPANY_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company contact:^ITEM_NAME=iCompanyContact^';   
COMMENT ON COLUMN &VIEW..REPR_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative name:^ITEM_NAME=iReprName^';  
COMMENT ON COLUMN &VIEW..REPR_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Tax No:^ITEM_NAME=iReprVatNo^';
COMMENT ON COLUMN &VIEW..REPR_BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Branch No:^ITEM_NAME=iReprBranchNo^';  
COMMENT ON COLUMN &VIEW..REPR_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprAddress1^';   
COMMENT ON COLUMN &VIEW..REPR_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprAddress2^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress3^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress4^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress5^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress6^';
COMMENT ON COLUMN &VIEW..REPR_ZIP_CITY IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprZipCity^';
COMMENT ON COLUMN &VIEW..REPR_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative contact:^ITEM_NAME=iReprContact^';        
COMMENT ON COLUMN &VIEW..REPORT_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Reporting type:^ITEM_NAME=iReportType^';
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of lines:^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report title^ITEM_NAME=iReportTitle^';   
COMMENT ON COLUMN &VIEW..TOT_INVOICED_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value:^ITEM_NAME=iInvoicedValueSum^';
COMMENT ON COLUMN &VIEW..TOT_STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Statistical Value:^ITEM_NAME=iStatisticalValueSum^';   
COMMENT ON COLUMN &VIEW..COUNTRY_DEST_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Country of Destination title^ITEM_NAME=iCountryDestTitle^';                     
COMMENT ON COLUMN &VIEW..ASSOCIATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(200)^ITEM_NAME=iAssociationNo^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting Currency code:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of consignment/destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..NOTC IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iNotc^';  
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..COMMODITY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Commodity Code^ITEM_NAME=iCommodityCode^';
COMMENT ON COLUMN &VIEW..COM_CODE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Commodity Code Description^ITEM_NAME=iComCodeDesc^';  
COMMENT ON COLUMN &VIEW..GOODS_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Goods Description^ITEM_NAME=iGoodsDescription^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Delivery Terms^ITEM_NAME=iDeliveryTerms^';
COMMENT ON COLUMN &VIEW..REGION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Region Code^ITEM_NAME=iRegionCode^';
COMMENT ON COLUMN &VIEW..REGION_NAME IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Region Name^ITEM_NAME=iRegionName^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Opponent Tax Id^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..ALT_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Alt U/M^ITEM_NAME=iAltUnitMeas^';   
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_MEAS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAltMeas^';
COMMENT ON COLUMN &VIEW..INVOICED_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvoicedValue^';
COMMENT ON COLUMN &VIEW..STATISTICAL_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Statistical Value^ITEM_NAME=iStatisticalValue^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Slovakia','&TABLE','&PKG..&METHOD',30,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat');
   -- Addition for Custom Fields ------ 
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_SK_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
  
   file_line_no_              NUMBER := 0;
   vat_no_                    VARCHAR2(50);
   stmt_                      VARCHAR2(2000);  
   result_key_                NUMBER;
   row_no_                    NUMBER := 1;
   parent_row_no_             NUMBER := 0;
   report_title_              VARCHAR2(50);
   intrastat_id_              NUMBER;
   intrastat_direction_       VARCHAR2(20);
   rep_curr_rate_             NUMBER;
   country_code_              VARCHAR2(2);   
   tot_invoiced_value_        NUMBER := 0;
   tot_stat_value_            NUMBER := 0;
   co_addr_id_                VARCHAR2(50);
   repr_addr_id_              VARCHAR2(50);
   report_period_             VARCHAR2(4);
   creation_date_str_         VARCHAR2(8);
   com_code_desc_             VARCHAR2(2000);
   company_name_              VARCHAR2(35);
   company_address6_          VARCHAR2(100);
   company_address5_          VARCHAR2(100);
   company_address4_          VARCHAR2(100);
   company_address3_          VARCHAR2(100);
   company_address2_          VARCHAR2(35);
   company_address1_          VARCHAR2(35);
   company_zip_city_          VARCHAR2(35);
   company_contact_name_      VARCHAR2(35);
   repr_name_                 VARCHAR2(35);
   repr_address6_             VARCHAR2(100);
   repr_address5_             VARCHAR2(100);
   repr_address4_             VARCHAR2(100);
   repr_address3_             VARCHAR2(100);
   repr_address2_             VARCHAR2(35);
   repr_address1_             VARCHAR2(35);
   repr_zip_city_             VARCHAR2(35);
   repr_contact_name_         VARCHAR2(35);
   notc_dummy_                VARCHAR2(2);
   country_destination_title_ VARCHAR2(50); 
   association_no_            VARCHAR2(200);
   report_type_               VARCHAR2(50);
   goods_description_         VARCHAR2(2000);
   country_of_destination_    VARCHAR2(3);
   region_code_               VARCHAR2(10);
   region_name_               VARCHAR2(100);
   dummy_                     NUMBER;

   do_xml_                    BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                     BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                       CLOB;
   package_name_              VARCHAR2(100) := 'INTRASTAT_SK_REP';

   CURSOR get_notc IS
      SELECT DISTINCT notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc         = notc_
      AND    country_code = 'SK';

   CURSOR check_import_null_origin IS
      SELECT 1
      FROM   intrastat_line_tab
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = 'IMPORT'
      AND    country_of_origin IS NULL;

   CURSOR get_head IS
      SELECT company, 
             creation_date,
             end_date,
             company_contact,
             customs_id,
             representative,
             repr_tax_no,
             rep_curr_rate,
             rep_curr_code,
             country_code,
             bransch_no,
             bransch_no_repr,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;

   head_rec_ get_head%ROWTYPE;

   CURSOR get_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,
             DECODE (intrastat_direction_, 'IMPORT', il.country_of_origin, '') country_of_origin,
             cn.country_notc,
             il.mode_of_transport,
             il.customs_stat_no,
             il.delivery_terms,
             il.region_of_origin,
             DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '')  opponent_tax_id,
             SUM (il.quantity * il.net_unit_weight) net_weight_sum,
             SUM (NVL(ABS(il.intrastat_alt_qty),0) * il.quantity) intrastat_alt_qty_sum,
             SUM (il.quantity * NVL(il.invoiced_unit_price,il.order_unit_price)) * rep_curr_rate_ invoiced_amount,
             SUM ((NVL(il.invoiced_unit_price,NVL(il.order_unit_price,0)) + 
                  NVL(il.unit_add_cost_amount_inv,NVL(il.unit_add_cost_amount,0)) +
                  NVL(il.unit_charge_amount_inv,0) +
                  NVL(il.unit_charge_amount,0)) * quantity) * rep_curr_rate_ statistical_value
      FROM   intrastat_line_tab il, country_notc_tab cn
      WHERE  il.intrastat_id        = intrastat_id_
      AND    il.intrastat_direction = intrastat_direction_
      AND    il.rowstate            = 'Released'        
      AND    il.notc                = cn.notc     
      AND    cn.country_code        = country_code_      
      GROUP BY il.intrastat_direction,
               il.opposite_country,
               DECODE (intrastat_direction_, 'IMPORT', il.country_of_origin, ''),
               cn.country_notc,
               il.mode_of_transport,
               il.customs_stat_no,
               il.delivery_terms,
               il.region_of_origin,
               DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '');

BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_          := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_        := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   --Check that country notc have valid values.
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'SKNOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   OPEN get_head;
   FETCH get_head INTO head_rec_;
   CLOSE get_head;
   
   IF (head_rec_.rep_curr_code NOT IN ('SKK','EUR')) THEN
      Error_SYS.Record_General(lu_name_, 'SKWRONGCURR: Currency Code :P1 is not a valid currency, only SKK and EUR is acceptable', head_rec_.rep_curr_code);         
   END IF;

   IF (head_rec_.customs_id IS NULL) THEN
      Error_SYS.Record_General(lu_name_, 'SKNOCUSTOMSID: Customs ID is missing for Intrastat ID :P1.',intrastat_id_);
   END IF;

   --Check that country of origin is not null for imports.
   IF (intrastat_direction_ = 'IMPORT') THEN
      OPEN  check_import_null_origin;
      FETCH check_import_null_origin INTO dummy_;
      IF (check_import_null_origin%FOUND) THEN
         CLOSE check_import_null_origin;
         Error_SYS.Record_General(lu_name_, 'SKIMPMISSCOO: Some import inventory parts have no country of origin');
      END IF;
      CLOSE check_import_null_origin;
   END IF;

   IF (intrastat_direction_ = 'EXPORT') THEN
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'SKREPEXPORT: Intrastat Export Report');
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'SKREPIMPORT: Intrastat Import Report');    
   END IF;

   IF (intrastat_direction_ = 'EXPORT') THEN  
     report_type_ := 'O';
   ELSE
     report_type_ := 'P';
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR headrec_ IN get_head LOOP

      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         -- ifs_assert_safe bmekse 20110309
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;
      
      report_period_     := TO_CHAR(headrec_.end_date, 'YYMM');         
      creation_date_str_ := TO_CHAR(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_rate_     := headrec_.rep_curr_rate;
      country_code_      := headrec_.country_code;
        
      co_addr_id_        := Company_Address_API.Get_Default_Address(headrec_.company, 
                            Address_Type_Code_API.Decode('INVOICE'), headrec_.creation_date);
      company_name_      := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 35);
      company_address6_  := Company_Address_API.Get_Address6(headrec_.company, co_addr_id_);
      company_address5_  := Company_Address_API.Get_Address5(headrec_.company, co_addr_id_);
      company_address4_  := Company_Address_API.Get_Address4(headrec_.company, co_addr_id_);
      company_address3_  := Company_Address_API.Get_Address3(headrec_.company, co_addr_id_);
      company_address2_  := SUBSTR(Company_Address_API.Get_Address2(headrec_.company, co_addr_id_), 1, 35);  
      company_address1_  := SUBSTR(Company_Address_API.Get_Address1(headrec_.company, co_addr_id_), 1, 35);
      company_zip_city_  := SUBSTR(Company_Address_API.Get_Zip_Code(headrec_.company, co_addr_id_), 1, 5) || ' ' ||
                            SUBSTR(Company_Address_API.Get_City(headrec_.company, co_addr_id_), 1, 29);
      company_contact_name_ := SUBSTR(Person_Info_API.Get_Name(headrec_.company_contact), 1, 35);
      
      association_no_    := Customs_Info_API.Get_Association_No (headrec_.customs_id);
  
      IF (headrec_.representative IS NOT NULL) THEN
         repr_addr_id_  := Person_Info_Address_API.Get_Default_Address(headrec_.representative, 
                           Address_Type_Code_API.Decode('VISIT'), headrec_.creation_date);
         repr_name_     := SUBSTR(Person_Info_API.Get_Name(headrec_.representative), 1, 35);
         repr_address6_ := Person_Info_Address_API.Get_Address6(headrec_.representative, repr_addr_id_);
         repr_address5_ := Person_Info_Address_API.Get_Address5(headrec_.representative, repr_addr_id_);
         repr_address4_ := Person_Info_Address_API.Get_Address4(headrec_.representative, repr_addr_id_);
         repr_address3_ := Person_Info_Address_API.Get_Address3(headrec_.representative, repr_addr_id_); 
         repr_address2_ := SUBSTR(Person_Info_Address_API.Get_Address2(headrec_.representative, repr_addr_id_), 1, 35);   
         repr_address1_ := SUBSTR(Person_Info_Address_API.Get_Address1(headrec_.representative, repr_addr_id_), 1, 35);
         repr_zip_city_ := SUBSTR(Person_Info_Address_API.Get_Zip_Code(headrec_.representative, repr_addr_id_), 1, 5) || ' ' ||
                           SUBSTR(Person_Info_Address_API.Get_City(headrec_.representative, repr_addr_id_), 1, 29);
         repr_contact_name_ := SUBSTR(Comm_Method_API.Get_Name_Db('PERSON', headrec_.representative, 1), 1, 35);
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPORT_TITLE', report_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CURRENCY_CODE', headrec_.rep_curr_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CREATION_DATE', creation_date_str_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPORTING_PERIOD', report_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_CONTACT', repr_contact_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ZIP_CITY', repr_zip_city_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_6', repr_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_5', repr_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_4', repr_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_3', repr_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_2', repr_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_1', repr_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_BRANCH_NO', headrec_.bransch_no_repr);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_VAT_NO', headrec_.repr_tax_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_NAME', repr_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_CONTACT', company_contact_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ZIP_CITY', company_zip_city_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_6', company_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_5', company_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_4', company_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_3', company_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_2', company_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_1', company_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BRANCH_NO', headrec_.bransch_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_VAT_NO', vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_NAME', company_name_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',headrec_.rowkey, '&VIEW');

         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_SK_LINES');
      END IF;

      IF (do_rs_) THEN
         --Insert Head details
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, &REPORT_TYPE,
             &COMPANY_NAME, &COMPANY_VAT_NO, &BRANCH_NO,&COMPANY_ADDRESS6,
             &COMPANY_ADDRESS5,&COMPANY_ADDRESS4,&COMPANY_ADDRESS3, &COMPANY_ADDRESS2, 
             &COMPANY_ADDRESS1, &COMPANY_ZIP_CITY, &COMPANY_CONTACT,
             &ASSOCIATION_NO, &CURRENCY_CODE, &REPR_NAME, &REPR_VAT_NO, 
             &REPR_BRANCH_NO,&REPR_ADDRESS6,&REPR_ADDRESS5,
             &REPR_ADDRESS4,&REPR_ADDRESS3, &REPR_ADDRESS2, 
             &REPR_ADDRESS1, &REPR_ZIP_CITY, &REPR_CONTACT,          
             &REPORTING_PERIOD, &CREATION_DATE,
             &REPORT_TITLE, &COUNTRY_DEST_TITLE )
         VALUES
            (result_key_, row_no_, parent_row_no_, report_type_, 
            company_name_, vat_no_, headrec_.bransch_no,company_address6_,company_address5_,
            company_address4_,company_address3_, company_address2_, 
            company_address1_, company_zip_city_, company_contact_name_,
            association_no_, headrec_.rep_curr_code, repr_name_, headrec_.repr_tax_no, 
            headrec_.bransch_no_repr,repr_address6_,repr_address5_,
            repr_address4_,repr_address3_, repr_address2_, 
            repr_address1_, repr_zip_city_, repr_contact_name_,         
            report_period_, creation_date_str_,
            report_title_, country_destination_title_ );   
         parent_row_no_ := row_no_;   
         row_no_ := row_no_ + 1;
      END IF;

      tot_invoiced_value_ := 0;
      tot_stat_value_     := 0;

      --Data Records
      FOR linerec_ IN get_lines LOOP

         file_line_no_           := file_line_no_ + 1;
         com_code_desc_          := Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no);
         goods_description_      := com_code_desc_; 
         country_of_destination_ := SUBSTR(linerec_.opposite_country, 1,2);
         region_code_            := LPAD(SUBSTR(linerec_.region_of_origin,1,2),2);
         region_name_            := Country_Region_API.Get_Region_Name(country_code_, region_code_);

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_SK_LINE');
            
            Xml_Record_Writer_SYS.Add_Element(xml_, 'STATISTICAL_VALUE', round(linerec_.statistical_value));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICED_VALUE', round(linerec_.invoiced_amount));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', round(linerec_.net_weight_sum));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_UNIT_MEAS', round(linerec_.intrastat_alt_qty_sum));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REGION_NAME', region_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REGION_CODE', region_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS', linerec_.delivery_terms);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COM_CODE_DESC', com_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMMODITY_CODE', linerec_.customs_stat_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MODE_OF_TRANSPORT', linerec_.mode_of_transport);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NOTC', linerec_.country_notc);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COUNTRY_OF_DEST', country_of_destination_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', file_line_no_);

            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_SK_LINE');
         END IF;

         IF (do_rs_) THEN
            --Insert detail rows
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, &NOTC,
                &MODE_OF_TRANSPORT, &COMMODITY_CODE, &COM_CODE_DESC,
                &GOODS_DESCRIPTION, &DELIVERY_TERMS, &REGION_CODE, &REGION_NAME, 
                &NET_WEIGHT, &ALT_UNIT_MEAS, 
                &INVOICED_VALUE, &STATISTICAL_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, file_line_no_, 
                linerec_.country_of_origin, country_of_destination_, linerec_.country_notc,
                linerec_.mode_of_transport, linerec_.customs_stat_no, com_code_desc_,
                goods_description_, linerec_.delivery_terms, region_code_,region_name_,
                round(linerec_.net_weight_sum), round(linerec_.intrastat_alt_qty_sum), 
                round(linerec_.invoiced_amount), round(linerec_.statistical_value), linerec_.opponent_tax_id );
            row_no_ := row_no_ + 1;
            END IF;
         -- sums
         tot_invoiced_value_ := tot_invoiced_value_ + linerec_.invoiced_amount;
         tot_stat_value_ := tot_stat_value_ + linerec_.statistical_value;

      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_SK_LINES');

         Xml_Record_Writer_SYS.Add_Element(xml_, 'NO_OF_LINES', file_line_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_STAT_VALUE', round(tot_stat_value_));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOT_INVOICED_VALUE', round(tot_invoiced_value_));
      END IF;
            
      IF (do_rs_) THEN
         IF (row_no_ = 2) THEN       
            --Insert blank row
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, &NOTC,
                &MODE_OF_TRANSPORT, &COMMODITY_CODE, &COM_CODE_DESC,
                &GOODS_DESCRIPTION, &DELIVERY_TERMS, &REGION_CODE, &REGION_NAME, 
                &ALT_MEAS, &NET_WEIGHT, &ALT_UNIT_MEAS, 
                &INVOICED_VALUE, &STATISTICAL_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, NULL, 
                NULL, NULL, NULL,
                NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, 
                NULL, NULL, NULL,
                NULL, NULL, NULL );     
         END IF;
         
         --Update the head with no_of_lines and sums.
         UPDATE &TABLE
         SET    &NO_OF_LINES = file_line_no_,
                &TOT_INVOICED_VALUE = round(tot_invoiced_value_),
                &TOT_STAT_VALUE     = round(tot_stat_value_) 
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;
   END LOOP;

   IF (do_xml_) THEN 
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------




----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE COMPANY_NAME
UNDEFINE COMPANY_VAT_NO
UNDEFINE BRANCH_NO
UNDEFINE COMPANY_ADDRESS1
UNDEFINE COMPANY_ADDRESS2
UNDEFINE COMPANY_ADDRESS3
UNDEFINE COMPANY_ADDRESS4
UNDEFINE COMPANY_ADDRESS5
UNDEFINE COMPANY_ADDRESS6
UNDEFINE COMPANY_ZIP_CITY
UNDEFINE COMPANY_CONTACT
UNDEFINE REPR_NAME
UNDEFINE REPR_VAT_NO
UNDEFINE REPR_BRANCH_NO
UNDEFINE REPR_ADDRESS1
UNDEFINE REPR_ADDRESS2
UNDEFINE REPR_ADDRESS3
UNDEFINE REPR_ADDRESS4
UNDEFINE REPR_ADDRESS5
UNDEFINE REPR_ADDRESS6
UNDEFINE REPR_ZIP_CITY
UNDEFINE REPR_CONTACT
UNDEFINE REPORT_TYPE
UNDEFINE REPORTING_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE NO_OF_LINES
UNDEFINE REPORT_TITLE
UNDEFINE TOT_INVOICED_VALUE
UNDEFINE TOT_STAT_VALUE
UNDEFINE COUNTRY_DEST_TITLE
UNDEFINE ASSOCIATION_NO
UNDEFINE CURRENCY_CODE
UNDEFINE LINE_NO
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE COUNTRY_OF_DEST
UNDEFINE NOTC
UNDEFINE MODE_OF_TRANSPORT
UNDEFINE COMMODITY_CODE
UNDEFINE COM_CODE_DESC
UNDEFINE ALT_UNIT_MEAS
UNDEFINE NET_WEIGHT
UNDEFINE ALT_MEAS
UNDEFINE INVOICED_VALUE
UNDEFINE STATISTICAL_VALUE
UNDEFINE GOODS_DESCRIPTION
UNDEFINE DELIVERY_TERMS
UNDEFINE REGION_CODE
UNDEFINE REGION_NAME
UNDEFINE OPPONENT_TAX_ID
