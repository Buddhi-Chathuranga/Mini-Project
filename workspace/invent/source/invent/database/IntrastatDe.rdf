-----------------------------------------------------------------------------
-- 
--  Logical unit: Intrastat  
--
--  File:         IntrastatDE.rdf
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  220126  ErFelk  Bug 162263(SC21R2-7418), Removed the LPAD of Country_Of_Origin so that the value will display in two digits.
--  211209  ErFelk  Bug 161021(SC21R2-6450), Modified report By removing notc 29, 31, 32, 33 from statistical_value in cursor get_lines.
--  210727  ErFelk  Bug 160291(SCZ-15706), Modified report to handle country of origin for EXPORT and raised an info mesage if it is empty.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  200710  ErFelk  Bug 147354(SCZ-5560), Added field opponent_tax_id to the report.
--  191219  ErFelk  Bug 148659(SCZ-5392), Modified report by adding another condition to check order_unit_price to raise the error ZERONOTALLOWED.
--  191203  ErFelk  Bug 147442(SCZ-4060), Modified report by allowing error messages ORDERUNITPRICE, INVOICEDUNITPRICEZERO and ZERONOTALLOWED to be raised when the direction is EXPORT and IMPORT. 
--  191203  ErFelk  Bug 147120(SCZ-3682), Modified get_lines cursor by changing the calculation of invoiced_amount to consider charge values and
--  191203          subtract the statistical_charge_diff from statistical_value.
--  190821  DaZase  SCUXXW4-23790, Changed missing Intrastat Tax number message to also support Aurena client rework.
--  190125  ErFelk  Bug 145171(SCZ-1783), Modified cursors get_lines and get_line_data by adding rowstate to the where clause. 
--  171220  DiKuLk  Bug 138969, Modified to handle new intrastat tax number. Earlier fetching of vat_no was removed and it was fetched from
--  171220          Company_Distribution_Info_API.Get_Intrastat_Tax_Number() the new method.
--  171218  ApWilk  Bug 139184, Modified the report so that original logic and the logic introduce from Bug 134823 is preserved. This is needed because 
--  171218          some customers do not use the Address setup per country functionality.
--  171011  ErFelk  Bug 137492, Added a new cursor get_line_data so that error messages ORDERUNITPRICE, INVOICEDUNITPRICEZERO and ZERONOTALLOWED could be raised line by line.
--  171011          Modified cursor get_lines so that statistical_value want be zero when having notc 22, 23, 29, 31, 32, 33, and 34.
--  170506  ErFelk  Bug 134823, Modified Report so that field5_ will have the correct region code/state code. It is a German requirement to 
--  170506          have 2 different state codes in Financials and Inventory. Depending on the state presentation, it is required to get the 
--  170506          state name from Finance and validate against the region name in the Region of Origin which is in Invent.
--  150721  PrYaLK  Bug 123199, Modified Report_Overview method to exclude the invoiced value of CO-PURSHIP transaction since it should be 0. 
--  150519  ShKolk  Bug 121489, Modified Report_Overview method to exclude the invoiced value of PURSHIP transaction since it should be 0.
--  150121  KoDelk  Bug 120639, Modified the get_lines cursor not to filter out records which has zero net invoiced price value.
--  150121          Removed the check on feild20_ and feild21_ before inserting the line details.
--  140703  KoDelk  Bug 117074, Modified report method to raise messages when mandatory fields don't have values.
--  130802  MalLlk  Bug 111541, Increased the length of the variable deliv_addr_dummy_ to 50 in method Report_Overview.
--  130626  IsSalk  Bug 106841, Modified cursor get_lines to consider arrival transactions with triangulation when selecting region of origin.  
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Germany'
--  110830  TiRalk  Bug 98710, Modified cursor get_lines to consider rows where invoice or statistical value not equal zero 
--  110830          which means to select the rows with UNRCPT- transaction also to avoid the wrong summation of net weight,
--  110830          invoice value, statistical value and alternative quantity.
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  091007  PraWlk  Bug 85992, Modified the customs_stat_no in cursor get_lines to summarize data
--  091007          according to customs_stat_no.
--  090925  PraWlk  Bug 85992, Removed the spaces of customs_stat_no and modified the length to 8.
--  090529  SaWjlk  Bug 83173, Removed the prog text duplications.
--  080521  SuSalk  Bug 72568, Modified get_lines cursor in the Report_Overview method to exclude 
--  080521          POINV-WIP transaction's value from the invoice value.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  060908  IsWilk  Removed the qrp entries. 
--  060707  Asawlk  Bug 59144, Increase the length of stat_code to show 10 chars.
--  060503  DaZase  Bug 57442 Report Designer handling and Layout added.
--  060126  HoInlk  Bug 54941, Modified values for field16_ to hold only 4 digits in method Create_Output.
--  051216  SuJalk  Changed VIEW_RPV to TABLE in COMMENT ON TABLE.
--  051026  DAYJLK  Bug 53604, Modified the select and group by clauses of cursor get_lines in method Report_Overview to consider PURDIR.
--  051007  KeFelk  Added Site_Invent_Info_Tab to the get_lines cursor.
--  050921  NiDalk  Removed unused variables.
--  050407  SeJalk  Bug 47761, Changed Region_Of_Origin_API to Country_Region_API, Replaced ca.state 
--                  with s.region_code in cursor get_lines and changed the error message NOSITESTAT.
--  050107  DiVelk  Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  041111  ErSolk  Bug 47300, Added new error messages.
--  041101  GaJalk  Bug 47300, Added the company check inside cursors get_lines and
--                  get_delivery_address in Report_Overview.
--  041025  GaJalk  Bug 47300, Modified the cursor get_lines in procedure Report_Overview
--                  and changed an error message.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INTRASTAT_DE_REP.
--  040924  RoJalk  Bug 47126, Modified the cursors get_lines, get_delivery_address 
--  040924          and changed ca.country to ca.country_db. 
--  040325  LoPrlk  Call 113583, Corrected the decode clasus in cursor get_lines in &METHOD.
--  040227  GeKalk  Replaced substrb with substr for UNICODE modifications.
--  040123  NaWalk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.  
--  040121  ChBalk  Bug 38752, Modified the CURSOR get_lines in PROCEDURE Report_Overview 
--  040121          to include the new transaction code PODIRINTEM.
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030901  NaWalk  Performed CR Merge02.
--  030827  SeKalk  Code Review
--  030826  ThGulk  Replaced  Company_Address_Tab with COMPANY_ADDRESS_PUB
--  030820  KiSalk  Performed CR Merge. 
--  030424  SeKalk  Placed the Error_Sys call after the closing of cursor Get_Delivery_Address
--  030326  SeKalk  Replaced occurences of Site_Delivery_Address_tab with Company_Address_tab 
--  030820  KiSalk  ***************** CR Merge Start *************************
--  021120  DaZa    Bug 34138, added extra decode on the view on region/state decode in the view, to handle PODIRSH transactions.
--  020821  DaZa    Bug 32183, added an extra where condition in get_lines cursor, so we now skip rows 
--                  that don't have an invoice or statistical value.
--  020807  DaZa    Bug 30820, made opposite_country and country_of_orgin right justified. 
--                  Added handling so export rows with no invoice or statistic value are not created.                 
--  020619  DaZa    Bug 30248, added extra handling of region_of_origin for export report.
--  020312  DaZa    Bug fix 28308, added ABS on intrastat_alt_qty so we dont get "-x * -y results" when we multiply with the regular qty.
--  020217  IsAn    A4/Letter conversion.
--  150301  MKOR    Several Error messages added
--  140301  Indi    Changed get_line cursor . 
--  020201  Indi    Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_DE_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_DE_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define COMPANY_VAT_NO         = S1
define COMPANY_NAME           = S2
define REPORTING_PERIOD       = S3
define CREATION_DATE          = S4
define CURRENCY_CODE          = S5
define REPORT_TITLE           = S6
define TRANSACT_PERIOD        = S7
define TAX_AUTHORITY          = S8
define COUNTRY_DESTINATION    = S9
define REGION_OF_ORIGIN       = S10
define NATURE_OF_TRANSACTION  = S11
define MODE_OF_TRANSPORT      = S12
define STAT_CODE              = S13
define STAT_PROCEDURE         = S14
define COUNTRY_OF_ORIGIN      = S15
define BRANCH_NO              = S16
define COUNTRYIM              = S17
define REGIONIM               = S18
define REGION_DESC            = S19
define OPPONENT_TAX_ID        = S20
define NO_OF_LINES         = N1
define LINE_NO             = N2
define NET_WEIGHT          = N3
define ALT_QUANTITY        = N4
define INVOICE_VALUE       = N5
define STAT_VALUE          = N6
define TYPE                = N7
define INV_VAL_TOT         = N8
define STAT_VAL_TOT        = N9

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE,
      H.&BRANCH_NO                            BRANCH_NO,
       D.&LINE_NO                              LINE_NO,
       D.&TRANSACT_PERIOD                      TRANSACT_PERIOD,
       D.&TAX_AUTHORITY                        TAX_AUTHORITY,
       D.&COUNTRY_DESTINATION                  COUNTRY_DESTINATION,
       D.&REGION_OF_ORIGIN                     REGION_OF_ORIGIN,
       D.&REGION_DESC                          REGION_DESC,
       D.&NATURE_OF_TRANSACTION                NATURE_OF_TRANSACTION,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&STAT_CODE                             STAT_CODE,
      D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&STAT_PROCEDURE                       STAT_PROCEDURE,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_QUANTITY                         ALT_QUANTITY,
       D.&INVOICE_VALUE                        INVOICE_VALUE,
       D.&STAT_VALUE                           STAT_VALUE,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
      D.&TYPE                                 TYPE,
      D.&COUNTRYIM                            COUNTRYIM,
      D.&REGIONIM                             REGIONIM,
      H.&INV_VAL_TOT                          INV_VAL_TOT,
      H.&STAT_VAL_TOT                          STAT_VAL_TOT,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Company Tax No :^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Branch Number :^ITEM_NAME=iBranchNo^';
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company Name :^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Reporting Period :^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation Date :^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Reporting Currency Code :^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of Lines :^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report Title^ITEM_NAME=iReportTitle^';   
          
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..TRANSACT_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Transaction Period^ITEM_NAME=iTransactPeriod^';
COMMENT ON COLUMN &VIEW..TAX_AUTHORITY IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Federal State Code of Tax Authority:^ITEM_NAME=iTaxAuthority^';
COMMENT ON COLUMN &VIEW..COUNTRY_DESTINATION IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Destination^ITEM_NAME=iCountryOfDestination^';
COMMENT ON COLUMN &VIEW..REGION_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Region of Origin^ITEM_NAME=iRegionOfOrigin^';
COMMENT ON COLUMN &VIEW..REGION_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Region Description^ITEM_NAME=iRegionDesc^';
COMMENT ON COLUMN &VIEW..NATURE_OF_TRANSACTION IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iNatureOfTransaction^';
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..STAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Commodity Code^ITEM_NAME=iStatCode^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..STAT_PROCEDURE IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Stat Procedure^ITEM_NAME=iStatProcedure^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAltQuantity^';
COMMENT ON COLUMN &VIEW..INVOICE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvoiceValue^';
COMMENT ON COLUMN &VIEW..STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Stat Value^ITEM_NAME=iStatValue^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Opponent Tax ID^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..TYPE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Type^ITEM_NAME=iType^';
COMMENT ON COLUMN &VIEW..COUNTRYIM IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Country of Dispatch^ITEM_NAME=iCountryIm^';
COMMENT ON COLUMN &VIEW..REGIONIM IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Region of Destination^ITEM_NAME=iRegionIm^';

COMMENT ON COLUMN &VIEW..INV_VAL_TOT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value :^ITEM_NAME=iInvValTot^';
COMMENT ON COLUMN &VIEW..STAT_VAL_TOT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Statistical Value :^ITEM_NAME=iStatValTot^';

COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';   


BEGIN 
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Germany','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_DE_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS

   -- Header Record
   psi_agent_vat_no_     VARCHAR2(12);
   review_period_        VARCHAR2(6);
   psi_agent_name_       VARCHAR2(40);
   creation_date_        VARCHAR2(8);
   currency_             VARCHAR2(3);
   branch_no_            VARCHAR2(10);
   address_id_           VARCHAR2(50);
   -- Line Record
   transaction_period_     VARCHAR2(6);
   field5_                 VARCHAR2(2);
   field6_              VARCHAR2(3);
   field7_              VARCHAR2(2);
   field8_              VARCHAR2(2);
   field9_              VARCHAR2(1);
   field13_             VARCHAR2(18);
   field15_                VARCHAR2(3);
   field16_                VARCHAR2(8);
   field17_                NUMBER;
   field18_                NUMBER;
   field20_                NUMBER;
   field21_                NUMBER;
   type_                   NUMBER;

   file_line_no_           NUMBER := 0;

   vat_no_               VARCHAR2(50);
   stmt_                 VARCHAR2(2000);
   result_key_           NUMBER;
   row_no_               NUMBER := 1;
   parent_row_no_        NUMBER := 0;
   report_title_         VARCHAR2(50);
   intrastat_id_         NUMBER;
   intrastat_direction_  VARCHAR2(20);
   rep_curr_rate_        NUMBER;
   country_code_         VARCHAR2(2);
   notc_                 VARCHAR2(2);
   notc_dummy_           VARCHAR2(2);
   end_date_             DATE; 
   
   inv_val_tot_          NUMBER:=0;
   stat_val_tot_         NUMBER:=0;
   deliv_addr_dummy_     VARCHAR2(50); 
   region_dummy_         VARCHAR2(1);
   region_desc_          VARCHAR2(100);

   do_xml_               BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                  CLOB;
   package_name_         VARCHAR2(100) := 'INTRASTAT_DE_REP';
   rowkey_               VARCHAR2(50);   
   dummy_                VARCHAR2(1);    
   state_name_           VARCHAR2(35);
   customs_state_        VARCHAR2(35);
   region_code_          VARCHAR2(10);
   state_presentation_db_ VARCHAR2(20);
   

   CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             customs_id,
             bransch_no,
             creation_date,
             rep_curr_code,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,
             il.country_of_origin,
             il.mode_of_transport,
             il.statistical_procedure,
             DECODE(intrastat_direction_, 'IMPORT', DECODE(il.transaction, 'PODIRSH',NVL(il.region_of_origin, sii.region_code),
                                                                           'PURDIR',NVL(il.region_of_origin, sii.region_code),
                                                                           'PODIRINTEM',NVL(il.region_of_origin, sii.region_code),
                                                                           'ARRIVAL', DECODE(il.triangulation, 'TRIANGULATION', NVL(il.region_of_origin, sii.region_code), sii.region_code),
                                                                           sii.region_code),
                                                                           NVL(il.region_of_origin, sii.region_code))   region_code,
             cn.country_notc,
             SUBSTR(REPLACE(il.customs_stat_no,' '),1,8)                                                                customs_stat_no,
             il.contract,
             SUM(il.quantity * il.net_unit_weight)                                                                      mass,
             SUM(NVL(ABS(il.intrastat_alt_qty),0) * il.quantity)                                                        alternative_qty,
             SUM(il.quantity * (NVL(il.invoiced_unit_price, DECODE(il.transaction, 'POINV-WIP',  0,
                                                                                    'PURSHIP',  0,
                                                                                    'CO-PURSHIP',  0, il.order_unit_price)) +
                                NVL(il.unit_charge_amount_inv, 0) +
                                NVL(il.unit_charge_amount, 0))) * rep_curr_rate_                                        invoice_value,
             SUM((DECODE(DECODE(cn.country_notc, 22, 0,
                                                 23, 0,                                                  
                                                 34, 0, il.invoiced_unit_price), 0, il.order_unit_price,
                                                                                 NULL ,il.order_unit_price, il.invoiced_unit_price)+
               NVL(il.unit_add_cost_amount_inv, NVL(il.unit_add_cost_amount, 0)) +
               NVL(il.unit_charge_amount_inv, 0 ) +
               NVL(il.unit_charge_amount, 0) -
               NVL(il.unit_statistical_charge_diff, 0)) * il.quantity) * rep_curr_rate_                               statistical_value,
             DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '')  opponent_tax_id 
      FROM   country_notc_tab cn, company_address_pub ca, site_tab s, intrastat_line_tab il, site_invent_info_tab sii
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direction_
      AND    il.rowstate         = 'Released'
      AND    il.contract         = s.contract
      AND    s.contract          = sii.contract
      AND    s.delivery_address  = ca.address_id
      AND    s.company           = ca.company
      AND    ca.country_db       = country_code_
      AND    il.notc             = cn.notc
      AND    cn.country_code     = country_code_    
      GROUP BY  il.intrastat_direction,
                il.opposite_country,
                il.country_of_origin,
                il.mode_of_transport,
                il.statistical_procedure,
                DECODE(intrastat_direction_, 'IMPORT', DECODE(il.transaction, 'PODIRSH',NVL(il.region_of_origin, sii.region_code),
                                                                              'PURDIR',NVL(il.region_of_origin, sii.region_code),
                                                                              'PODIRINTEM',NVL(il.region_of_origin, sii.region_code),
                                                                              'ARRIVAL', DECODE(il.triangulation, 'TRIANGULATION', NVL(il.region_of_origin, sii.region_code), sii.region_code),
                                                                              sii.region_code),
                                                                              NVL(il.region_of_origin, sii.region_code)),

                cn.country_notc,
                SUBSTR(REPLACE(il.customs_stat_no,' '),1,8),
                DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, ''),
                il.contract;         

    CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;


    CURSOR get_country_notc(notc_ VARCHAR2) IS
      SELECT country_notc
     FROM   country_notc_tab
     WHERE  notc = notc_
     AND    country_code = 'DE';
                                           
   CURSOR get_delivery_address IS
      SELECT distinct s.delivery_address
      FROM   company_address_pub ca, site_tab s, intrastat_line_tab il
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direction_
      AND    il.contract         = s.contract
      AND    s.delivery_address  = ca.address_id
      AND    s.company           = ca.company
      AND    ca.country_db       = country_code_
      AND    ca.state            IS NULL;

   CURSOR check_region_vs_country(region_of_origin_ VARCHAR2, intrastat_direct_ VARCHAR2) IS
      SELECT 1
      FROM   intrastat_line_tab
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direct_
      AND    country_of_origin = 'DE'
      AND    region_of_origin = region_of_origin_;
   
   CURSOR check_contract IS
      SELECT 1
      FROM   intrastat_line_tab
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direction_
      AND    contract IS NULL;
   
   CURSOR get_region_code (field_ VARCHAR2) IS
      SELECT region_code
      FROM country_region_tab
      WHERE country_code = 'DE'
      AND   region_name = field_;
   
   CURSOR get_line_data IS
      SELECT line_no, notc, order_unit_price, invoiced_unit_price
      FROM intrastat_line_tab
      WHERE intrastat_id = intrastat_id_
      AND   intrastat_direction = intrastat_direction_
      AND   rowstate     = 'Released';      
BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_          := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_        := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   
   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN    
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;  

   IF intrastat_direction_ = 'IMPORT' THEN      
      OPEN check_region_vs_country('99', intrastat_direction_);
      FETCH check_region_vs_country INTO region_dummy_;
      IF (check_region_vs_country%FOUND) THEN    
         CLOSE check_region_vs_country;
         Error_SYS.Record_General(lu_name_, 'NOREG99FORDE: At least one intrastat import line have Country of Origin = DE while Region of Origin = 99, this is not valid, use another Country of Origin than DE');   
      END IF;
      CLOSE check_region_vs_country;
   ELSE
      OPEN check_region_vs_country('25', intrastat_direction_);
      FETCH check_region_vs_country INTO region_dummy_;
      IF (check_region_vs_country%FOUND) THEN    
         CLOSE check_region_vs_country;
         Error_SYS.Record_General(lu_name_, 'NOREG25FORDE: At least one intrastat export line have Country of Origin = DE while Region of Origin = 25, this is not valid, use another Country of Origin than DE.');   
      END IF;        
      CLOSE check_region_vs_country;
   END IF;   
   
   OPEN check_contract;
   FETCH check_contract INTO dummy_;
   IF (check_contract%FOUND) THEN    
      CLOSE check_contract;
      Error_SYS.Record_General(lu_name_, 'NOCONTRACTRDF: The site must be specified for intrastat reporting.');   
   END IF;        
   CLOSE check_contract;   
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;
   
   state_presentation_db_ := Enterp_Address_Country_API.Get_State_Presentation_Db('DE');
   -- Preliminary Record
   FOR headrec_ IN get_head LOOP            
      
      vat_no_ := Company_Distribution_Info_API.Get_Intrastat_Tax_Number(headrec_.company); 
 
      IF (vat_no_ IS NULL) THEN
         IF (Fnd_Session_API.Is_Odp_Session) THEN  -- Aurena client
            Error_SYS.Record_General(lu_name_, 'NOVATNO2: Intrastat Tax Number is missing for company :P1 in Supply Chain Information sub menu.',headrec_.company);
         ELSE -- IEE client
            Error_SYS.Record_General(lu_name_, 'NOVATNO: Intrastat Tax Number is missing for company :P1 in Distribution tab.',headrec_.company);
         END IF;
      ELSE            
 
         IF ( SUBSTR(vat_no_,1,2) = headrec_.country_code) THEN 
            psi_agent_vat_no_ :=SUBSTR(NVL(vat_no_,' '), 3, 11); 
         ELSE 
            psi_agent_vat_no_ :=SUBSTR(NVL(vat_no_,' '), 1, 11); 
         END IF;
      END IF;

      psi_agent_name_   := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 40);
      branch_no_        := lpad(SUBSTR(headrec_.bransch_no,1,3),3,'0');
      review_period_    := to_char(headrec_.end_date, 'YYYYMM');         
      creation_date_    := to_char(headrec_.creation_date, 'YYYYMMDD');
      currency_         := headrec_.rep_curr_code;
      rep_curr_rate_    := headrec_.rep_curr_rate;
      country_code_     := headrec_.country_code;
      address_id_       := Customs_Info_Address_API.Get_Default_Address(headrec_.customs_id,
                                       address_type_code_api.decode('INVOICE'),      
                                       headrec_.creation_date);
      end_date_         := headrec_.end_date;      
      rowkey_           := headrec_.rowkey;
      
      IF (headrec_.customs_id IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOCUSTOMSID: Customs ID is missing for Intrastat ID :P1.',intrastat_id_);
      END IF;
      
      IF (state_presentation_db_ IN ('NAMES', 'CODES')) THEN 
         customs_state_    := Customs_Info_Address_API.Get_State(headrec_.customs_id,address_id_);
         IF (customs_state_ IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOCUSTOMSSTATE: State is missing for Customs ID :P1.',headrec_.customs_id);
         END IF; 
      
         state_name_ := '';
         IF (state_presentation_db_ = 'CODES') THEN
            state_name_ := State_Codes_API.Get_State_Name('DE', customs_state_ );
         END IF;
      
         OPEN get_region_code(NVL(state_name_, customs_state_)); 
         FETCH get_region_code INTO region_code_;
         CLOSE get_region_code;
      
         field5_ := LPAD(SUBSTR(region_code_,1,2),2,'0');
      
         IF (field5_ IS NULL) THEN
            -- No matching entry in region of origin.
            Error_SYS.Record_General(lu_name_, 'NOSTATECODE: Incorrect state code when printing. Please check the state code/name of the address of the customs or delivery address of the sites.');
         END IF;
      ELSE
         field5_ := LPAD(SUBSTR(Customs_Info_Address_API.Get_State(headrec_.customs_id,address_id_),1,2),2,'0');
         IF (field5_ IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOCUSTOMSSTATE: State is missing for Customs ID :P1.',headrec_.customs_id);
         END IF;
      END IF;
 
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN  -- im not sure if we will get the client or db value, maybe some decode/encode is needed here
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTDE: Intrastat Export Report');
     type_         := -1;    
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTDE: Intrastat Import Report');
     type_         :=  1;
   END IF;

   IF( currency_ NOT IN ('DEM','EUR'))  THEN
       Error_SYS.Record_General(lu_name_, 'NOTDEMEUR: Reporting currency should be DEM or EUR.');    
   END IF; 

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'TYPE', type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'BRANCH_NO', branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', currency_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', review_period_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', psi_agent_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', psi_agent_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_AUTHORITY', field5_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',rowkey_, '&VIEW');
      -- countryim/regionim are only used for the field labels so there is no need to put any data here
      --Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRYIM', put your value here);
      --Xml_Record_Writer_SYS.Add_Element(xml_,'REGIONIM', put your value here);

      Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_DE_LINES');
   END IF;

   IF (do_rs_) THEN
      -- Insert Head details
      INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &COMPANY_VAT_NO,
          &COMPANY_NAME,&BRANCH_NO, &REPORTING_PERIOD, &CREATION_DATE,
          &CURRENCY_CODE, &REPORT_TITLE,&TYPE )
      VALUES
         (result_key_, row_no_, parent_row_no_, psi_agent_vat_no_,
          psi_agent_name_,branch_no_, review_period_, creation_date_,
          currency_, report_title_,type_ );
      parent_row_no_ := row_no_;            
      row_no_ := row_no_ + 1; 
   END IF;
   
   FOR rec_ IN get_line_data LOOP      
      IF (rec_.notc IN (22,23,34)) THEN
         IF (rec_.order_unit_price = 0) THEN
            Error_SYS.Record_General(lu_name_, 'ORDERUNITPRICE: Net Price/Base cannot be zero for Intrastat Line No :P1 having NOTC :P2.', rec_.line_no, rec_.notc); 
         END IF;
         IF ((rec_.invoiced_unit_price != 0) OR (rec_.invoiced_unit_price IS NULL)) THEN
            Error_SYS.Record_General(lu_name_, 'INVOICEDUNITPRICEZERO: Net Invoiced Price/Base should be zero for Intrastat Line No :P1 having NOTC :P2.', rec_.line_no, rec_.notc);
         END IF;
      END IF;

      IF (rec_.notc = 11) THEN
         IF ((NVL(rec_.invoiced_unit_price, 0) = 0) AND (rec_.order_unit_price = 0)) THEN   
            Error_SYS.Record_General(lu_name_, 'ZERONOTALLOWED: Net Invoiced Price/Base cannot be zero for Intrastat Line No :P1 having NOTC :P2.', rec_.line_no, rec_.notc);
         END IF;
      END IF;      
   END LOOP; 
   
     -- Data Records
   FOR linerec_ IN get_lines LOOP 
      transaction_period_ := to_char(end_date_, 'YYYYMM');    
      field6_             := lpad(linerec_.opposite_country,3,' ');
     field7_             := LPAD(SUBSTR(linerec_.region_code,1,2),2,'0');	   

     IF (intrastat_direction_ = 'EXPORT') THEN
        IF (field7_ IS NULL) THEN
           Error_SYS.Record_General(lu_name_, 'NOREGION: Region of Origin is missing on at least one intrastat export line');            
        END IF; 
        IF (linerec_.opponent_tax_id IS NULL) THEN         
           Error_SYS.Record_General(lu_name_, 'NOOPPONENTTAXID: Opponent Tax ID is missing for some lines.');
        END IF;
     ELSE
        IF field7_ IS NULL THEN
           OPEN get_delivery_address;
           FETCH get_delivery_address INTO deliv_addr_dummy_;    
           CLOSE get_delivery_address; 
           Error_SYS.Record_General(lu_name_, 'NOSITESTAT: Country Code and Region Code are missing for Delivery Address :P1 in Site :P2.',deliv_addr_dummy_, linerec_.contract);
        END IF; 
     END IF;
     IF (linerec_.country_of_origin IS NULL) THEN
        Error_SYS.Record_General(lu_name_, 'NOCOUNTRYORIGIN: The country of origin must be specified for intrastat reporting.');   
     END IF;
     IF (linerec_.customs_stat_no IS NULL) THEN
        Error_SYS.Record_General(lu_name_, 'NOSTATNUMBER: The customs statistics number must be specified for intrastat reporting.');   
     END IF;
     IF (linerec_.mode_of_transport IS NULL) THEN
        Error_SYS.Record_General(lu_name_, 'NOMODETRANS: The mode of transport must be specified for intrastat reporting.'); 
     END IF;     
     
     region_desc_ := Country_Region_API.Get_Region_Name('DE',field7_);

     field8_             := LPAD(linerec_.country_notc,2,'0');
     field9_             := linerec_.mode_of_transport;
     field13_            := linerec_.customs_stat_no;

     IF (intrastat_direction_ = 'EXPORT') THEN
         IF(linerec_.statistical_procedure = 'BEFORE SUBCONTRACTING') THEN
         field16_ := '2200';
      ELSIF(linerec_.statistical_procedure = 'AFTER SUBCONTRACTING') THEN
         field16_ := '1043';
      ELSE
            field16_ :=  '1000';
      END IF;
            
     ELSIF(intrastat_direction_ = 'IMPORT') THEN
         IF(linerec_.statistical_procedure = 'AFTER SUBCONTRACTING') THEN
         field16_ := '4300';
      ELSIF(linerec_.statistical_procedure = 'BEFORE SUBCONTRACTING') THEN
         field16_ := '4322';
      ELSE
            field16_ :=  '4300';
      END IF; 
     END IF;

     field15_   :=  linerec_.country_of_origin;
     field17_   :=  round(linerec_.mass);
     field18_   :=  round(linerec_.alternative_qty);
     field20_   :=  round(linerec_.invoice_value);      
     field21_   :=  round(linerec_.statistical_value);

      file_line_no_  := file_line_no_ + 1;                       
      inv_val_tot_   := inv_val_tot_ + field20_;
      stat_val_tot_  := stat_val_tot_ + field21_;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_DE_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_,'TRANSACT_PERIOD', transaction_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DESTINATION', field6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REGION_OF_ORIGIN', field7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REGION_DESC', region_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NATURE_OF_TRANSACTION', field8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', field9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_CODE', field13_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', field15_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_PROCEDURE', field16_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', field17_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_QUANTITY', field18_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', field20_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUE', field21_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', round(file_line_no_));
         Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_DE_LINE');
      END IF;

      IF (do_rs_) THEN
          -- insert detail rows 
          INSERT INTO &TABLE
              (result_key, row_no, parent_row_no, &LINE_NO, &TRANSACT_PERIOD,
              &TAX_AUTHORITY, &COUNTRY_DESTINATION, &REGION_OF_ORIGIN, 
              &NATURE_OF_TRANSACTION, &MODE_OF_TRANSPORT, &STAT_CODE, &OPPONENT_TAX_ID,
              &STAT_PROCEDURE, &NET_WEIGHT, &ALT_QUANTITY, &INVOICE_VALUE, &STAT_VALUE,&COUNTRY_OF_ORIGIN,&TYPE, &REPORT_TITLE,
              &INV_VAL_TOT, &STAT_VAL_TOT, &REGION_DESC )
          VALUES
             (result_key_, row_no_, parent_row_no_, round(file_line_no_), transaction_period_,
              field5_, field6_, field7_,
              field8_, field9_, field13_, linerec_.opponent_tax_id,
              field16_, field17_,field18_, field20_, field21_,field15_,type_,report_title_,
              inv_val_tot_,stat_val_tot_, region_desc_);
              row_no_ := row_no_ + 1;
      END IF;

   END LOOP;
   

   IF (do_rs_) THEN
      IF (row_no_ = 2) THEN -- no details        
            -- insert blank row
         INSERT INTO &TABLE
             (result_key, row_no, parent_row_no, &LINE_NO, &TRANSACT_PERIOD,
             &TAX_AUTHORITY, &COUNTRY_DESTINATION, &REGION_OF_ORIGIN, 
             &NATURE_OF_TRANSACTION, &MODE_OF_TRANSPORT, &STAT_CODE, &OPPONENT_TAX_ID,
             &STAT_PROCEDURE, &NET_WEIGHT, &ALT_QUANTITY, &INVOICE_VALUE, &STAT_VALUE,&COUNTRY_OF_ORIGIN,&TYPE, &REPORT_TITLE )
         VALUES
            (result_key_, row_no_, parent_row_no_, NULL, NULL,
             NULL, NULL, NULL,
             NULL, NULL, NULL, NULL,
             NULL, NULL,NULL, NULL, NULL,NULL,type_,report_title_);       
      END IF;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_DE_LINES');

      Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VAL_TOT', stat_val_tot_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'INV_VAL_TOT', inv_val_tot_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', file_line_no_);
   END IF;
   
   IF (do_rs_) THEN
      -- update the head with no_of_lines information
      UPDATE &TABLE
      SET    &NO_OF_LINES  = file_line_no_,
             &INV_VAL_TOT  = inv_val_tot_,
             &STAT_VAL_TOT = stat_val_tot_ 
      WHERE  result_key    = result_key_
      AND    row_no        = parent_row_no_;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------




----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE COMPANY_VAT_NO
UNDEFINE COMPANY_NAME
UNDEFINE REPORTING_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE CURRENCY_CODE
UNDEFINE REPORT_TITLE
UNDEFINE TRANSACT_PERIOD
UNDEFINE TAX_AUTHORITY
UNDEFINE COUNTRY_DESTINATION
UNDEFINE REGION_OF_ORIGIN
UNDEFINE NATURE_OF_TRANSACTION
UNDEFINE MODE_OF_TRANSPORT
UNDEFINE STAT_CODE
UNDEFINE STAT_PROCEDURE
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE BRANCH_NO
UNDEFINE COUNTRYIM
UNDEFINE REGIONIM
UNDEFINE OPPONENT_TAX_ID
UNDEFINE NO_OF_LINES
UNDEFINE LINE_NO
UNDEFINE NET_WEIGHT
UNDEFINE ALT_QUANTITY
UNDEFINE INVOICE_VALUE
UNDEFINE STAT_VALUE
UNDEFINE TYPE
UNDEFINE INV_VAL_TOT
UNDEFINE STAT_VAL_TOT
UNDEFINE REGION_DESC
