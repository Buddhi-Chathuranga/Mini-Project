-----------------------------------------------------------------------------
--
--  Logical unit: CountResultsPerInventoryPartHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2021-10-28  DigPlk  SC21R2-2884, Added the function Get_Session_Id_Selection___ to create the selection with session id.
-- 2020-02-17  PamPlk  Bug 152109(SCZ-8448), Modified Validate_Expiration_Date___() method in order to pass an information message when doing a COUNT IN and creating a new stock for a part. 
-- 2019-07-30  MeAblk  SCUXXW4-23246, Added method ValidateExpirationDate() to validate the expiration date.
-- 2019-07-10  JaThlk  SCUXXW4-23055, Removed multiple calls for better performance.
-- 2018-06-11  DaZase  SCUXXW4-5929, Created.
-----------------------------------------------------------------------------

layer Core;


FUNCTION Check_Part_Shortage___ (
   contract_          IN VARCHAR2,
   part_no_           IN VARCHAR2,
   total_difference_quantity_    IN NUMBER ) RETURN BOOLEAN
IS
   system_shortage_flag_ VARCHAR2(200) := Mpccom_System_Parameter_API.Get_Parameter_Value1('SHORTAGE_HANDLING');
   shortage_             VARCHAR2(200) := Inventory_Part_Shortage_API.Decode('Y');
   shortage_exists_      NUMBER := Shortage_Demand_API.Shortage_Exists(contract_, part_no_);
   part_shortage_flag_   VARCHAR2(200) := Inventory_Part_API.Get_Shortage_Flag(contract_, part_no_);   
   return_part_shortage_ BOOLEAN := FALSE;
BEGIN   
   IF (system_shortage_flag_ = 'Y' AND 
       part_shortage_flag_ = shortage_ AND
       shortage_exists_ != 0 AND
       total_difference_quantity_ > 0) THEN
      return_part_shortage_ := TRUE;
   END IF;
   
   RETURN return_part_shortage_;
END Check_Part_Shortage___;   


FUNCTION Complete_Part___ (
   contract_                  IN VARCHAR2,
   part_no_                   IN VARCHAR2,
   configuration_id_          IN VARCHAR2,
   total_difference_quantity_ IN NUMBER )  RETURN BOOLEAN
IS 
BEGIN
   Counting_Result_API.Complete_Part(contract_, part_no_, configuration_id_);
   RETURN Check_Part_Shortage___(contract_, part_no_, total_difference_quantity_);
END Complete_Part___; 
   

PROCEDURE Cancel_Part___ (
   contract_          IN VARCHAR2,
   part_no_           IN VARCHAR2,
   configuration_id_  IN VARCHAR2 )
IS 
BEGIN
   Counting_Result_API.Cancel_Part(contract_, part_no_, configuration_id_);
END Cancel_Part___; 

       
FUNCTION Get_Difference___ (
	contract_        IN VARCHAR2,
	qty_counted_     IN NUMBER,
	qty_onhand_      IN NUMBER,
	inventory_value_ IN NUMBER) RETURN Diff_Amount_And_Percentage_Structure_Rec
IS
   rec_   Diff_Amount_And_Percentage_Structure_Rec;
BEGIN
   rec_.diff_amount := Counting_Result_API.Get_Diff_Amount(contract_, qty_counted_, qty_onhand_, inventory_value_);
   rec_.diff_percentage := Counting_Result_API.Get_Diff_Percentage(qty_counted_, qty_onhand_);
   RETURN rec_;
END Get_Difference___;


PROCEDURE Validate_Expiration_Date___(
   qty_counted_      IN NUMBER,
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   location_no_      IN VARCHAR2,
   lot_batch_no_     IN VARCHAR2,
   serial_no_        IN VARCHAR2,
   eng_chg_level_    IN VARCHAR2,
   waiv_dev_rej_no_  IN VARCHAR2,
   activity_seq_     IN NUMBER,
   handling_unit_id_ IN NUMBER,
   info$_             OUT VARCHAR2 ) 
IS
   mandatory_exp_date_ VARCHAR2(5);
   expiration_date_    DATE;
BEGIN
   mandatory_exp_date_ := Inventory_Part_API.Get_Mandatory_Expiration_Da_Db(contract_, part_no_);
 
   IF  mandatory_exp_date_ = Fnd_Boolean_API.DB_TRUE THEN
      expiration_date_ := Inventory_Part_In_Stock_API.Get_Expiration_Date(contract_, part_no_, configuration_id_, location_no_, lot_batch_no_, 
                                                                          serial_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, handling_unit_id_);
   END IF;
   IF ((mandatory_exp_date_ = Fnd_Boolean_API.DB_TRUE) AND (expiration_date_ IS NULL) AND qty_counted_ != 0) THEN
      Client_Sys.Add_Info(lu_name_, 'EXPIRATIONDATENULL: Expiration date is null for the part. Consider reviewing expiration date for the stock record.');   
   END IF;
   info$_ := Client_SYS.Get_All_Info;
END Validate_Expiration_Date___;


FUNCTION Get_Session_Id_Selection___ (
   contract_            IN VARCHAR2,
   part_no_             IN VARCHAR2,
   configuration_id_    IN VARCHAR2,
   location_no_         IN VARCHAR2,
   lot_batch_no_        IN VARCHAR2,
   eng_chg_level_       IN VARCHAR2,
   waiv_dev_rej_no_     IN VARCHAR2,
   activity_seq_        IN NUMBER,
   handling_unit_id_    IN NUMBER,
   qty_num_             IN VARCHAR2,
   catch_qty_num_       IN NUMBER,
   assistant_title_     IN VARCHAR2,
   assistant_context_   IN VARCHAR2,
   session_id_          IN VARCHAR2) RETURN Identify_Serials_Rec_Structure_Rec
IS
   new_selection_       VARCHAR2(32000) := NULL;
   req_rec_structure_   Identify_Serials_Rec_Structure_Rec;
   total_               NUMBER:=1;
   new_session_id_      NUMBER;
BEGIN

   IF session_id_ IS NULL THEN 
      new_session_id_ := Temporary_Part_Tracking_API.Get_Next_Session_Id;
   ELSE 
      new_session_id_ := session_id_;
   END IF;

    
   Client_SYS.Add_To_Key_Reference(new_selection_,'CONTRACT',contract_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'PART_NO',part_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'CONFIGURATION_ID',configuration_id_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'LOCATION_NO',location_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'LOT_BATCH_NO',lot_batch_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ENG_CHG_LEVEL',eng_chg_level_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'WAIV_DEV_REJ_NO',waiv_dev_rej_no_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ACTIVITY_SEQ',activity_seq_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'HANDLING_UNIT_ID',handling_unit_id_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'QTY_TO_PICK',qty_num_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'CATCH_QTY_ISSUE',catch_qty_num_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ASSISTANT_TITLE',assistant_title_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'ASSISTANT_CONTEXT',assistant_context_);
   Client_SYS.Add_To_Key_Reference(new_selection_,'SESSION_ID',new_session_id_);

   req_rec_structure_.remaining_selection   := new_selection_;
   req_rec_structure_.total                 := total_;
   req_rec_structure_.session_id            := new_session_id_;
   RETURN req_rec_structure_;
END Get_Session_Id_Selection___;



