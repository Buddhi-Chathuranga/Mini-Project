-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatAt.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  210714  Hahalk  Bug 159683(SCZ-15468), Added field opponent_tax_id to the report and visible country of origin for export reports as well.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  160526  Chgulk STRLOC-473, Added new address fields.
--  150721  PrYaLK Bug 123199, Modified Report_Overview method to exclude the invoiced value of CO-PURSHIP transaction since it should be 0.
--  150519  ShKolk Bug 121489, Modified Report_Overview method to exclude the invoiced value of PURSHIP transaction since it should be 0.
--  121016  PraWlk Bug 105887, Removed SUBSTR to avoid length restriction of customs statistics number description.
--  120913  NipKlk Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk Enabled Custom Fields for report 'Intrastat Report Austria'
--  110309  Bmekse DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                 Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  100107  Umdolk efactoring in Communication Methods in Enterprise.
--  090929  PraWlk Bug 85516, Increased the length of com_code_desc_ to 200 characters. 
--  090529  SaWjlk Bug 83173, Removed the prog text duplications.
--  080317  HoInlk Bug 72069, Added missing "ifs_assert_safe" annotations.
--  060908  IsWilk Removed the qrp entries.
--  060516  IsAnlk Enlarge Address - Changed variable definitions.
--  060428  DaZase Bug 57442 Report Designer handling and Layout added.
----------------------------------13.4.0-------------------------------------
--  060124  MarSlk Bug 55277, Introduced variables rounded_statistical_value_,
--  060124         rounded_net_weight_sum_, rounded_alt_qty_sum_ and 
--  060124         assigned the rounded value of statistical_value, 
--  060124         net_weight_sum and intrastat_alt_qty_sum. The variables
--  060124         has been used where appropiate. The ROUND function has been                
--  060124         removed in the STAT_VALUES_SUM,NET_WEIGHT_SUM and ALT_MEAS_SUM .
--  060109  MarSlk Bug 55277, Introduced variable rounded_invoiced_amount_ and 
--  060109         assigned the rounded value of invoiced_amount.The variable has  
--  060109         been used where appropiate. The ROUND function has been 
--  060109         removed in the INV_VALUES_SUM.      
--  051216  SuJalk Changed VIEW_RPV to TABLE in COMMENT ON VIEW.
--  050921  NiDalk Removed unused variables.
--  050906  JaBalk Changed the SUBSTRB to SUBSTR and length of variable com_code_desc_ to 35.
--  050107  DiVelk Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  040610  NaWilk Bug 44975, Modified FROM clause in view INTRASTAT_AT_REP.
--  040924  ChJalk Bug 46743, Modified the length of the variable com_code_desc_ and assigned only the first 35
--  040924         characters to the variable.
--  040227  GeKalk  Replaced substrb with substr for UNICODE modifications.
------------------- EDGE Package Group 3 Unicode Changes --------------------
--  040123  NaWalk Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.  
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  020312  DaZa  Bug fix 28308, added ABS on intrastat_alt_qty so we dont get "-x * -y results" when we multiply with the regular qty.
--  020217  IsAn  A4/Letter conversion.
--  010323  DaZa  Created using spec 'Functional specification for IID 10218 
--                - Austrian Intrastat File' by Martin Korn.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_AT_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_AT_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define COMPANY_NAME       = S1
define COMPANY_VAT_NO     = S2
define COMPANY_ADDRESS1   = S3
define COMPANY_ADDRESS2   = S4
define COMPANY_ADDRESS3   = S27
define COMPANY_ADDRESS4   = S28
define COMPANY_ADDRESS5   = S29
define COMPANY_ADDRESS6   = S30
define COMPANY_ZIP_CITY   = S5
define COMPANY_CONTACT    = S6
define REPR_NAME          = S7
define REPR_VAT_NO        = S8
define REPR_ADDRESS1      = S9
define REPR_ADDRESS2      = S10
define REPR_ADDRESS3      = S31
define REPR_ADDRESS4      = S32
define REPR_ADDRESS5      = S33
define REPR_ADDRESS6      = S34
define REPR_ZIP_CITY      = S11
define REPR_CONTACT       = S12
define CURRENCY_CODE      = S14
define REPORTING_PERIOD   = S15
define CREATION_DATE      = S16
define NO_OF_LINES        = N1
define REPORT_TITLE       = S17
define NET_WEIGHT_SUM     = N2
define ALT_MEAS_SUM       = N3
define INV_VALUES_SUM     = N4
define STAT_VALUES_SUM    = N5
define COUNTRY_DEST_TITLE = S18

define LINE_NO            = N6
define COUNTRY_OF_ORIGIN  = S19
define COUNTRY_OF_DEST    = S20
define NOTC               = S21
define MODE_OF_TRANSPORT  = S22
define COMMODITY_CODE     = S23
define COM_CODE_DESC      = S24
define STAT_PROCEDURE     = S25
define ALT_UNIT_MEAS      = S26
define NET_WEIGHT         = N7
define ALT_MEAS           = N8
define INVOICED_VALUE     = N9
define STATISTICAL_VALUE  = N10
define OPPONENT_TAX_ID    = S13


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&COMPANY_ADDRESS1                     COMPANY_ADDRESS1,
       H.&COMPANY_ADDRESS2                     COMPANY_ADDRESS2,
       H.&COMPANY_ADDRESS3                     COMPANY_ADDRESS3,
       H.&COMPANY_ADDRESS4                     COMPANY_ADDRESS4,
       H.&COMPANY_ADDRESS5                     COMPANY_ADDRESS5,
       H.&COMPANY_ADDRESS6                     COMPANY_ADDRESS6,
       H.&COMPANY_ZIP_CITY                     COMPANY_ZIP_CITY,
       H.&COMPANY_CONTACT                      COMPANY_CONTACT,
       H.&REPR_NAME                            REPR_NAME,
       H.&REPR_VAT_NO                          REPR_VAT_NO,
       H.&REPR_ADDRESS1                        REPR_ADDRESS1,
       H.&REPR_ADDRESS2                        REPR_ADDRESS2,
       H.&REPR_ADDRESS3                        REPR_ADDRESS3,
       H.&REPR_ADDRESS4                        REPR_ADDRESS4,
       H.&REPR_ADDRESS5                        REPR_ADDRESS5,
       H.&REPR_ADDRESS6                        REPR_ADDRESS6,
       H.&REPR_ZIP_CITY                        REPR_ZIP_CITY,       
       H.&REPR_CONTACT                         REPR_CONTACT,       
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE, 
       H.&NET_WEIGHT_SUM                       NET_WEIGHT_SUM,
       H.&ALT_MEAS_SUM                         ALT_MEAS_SUM,
       H.&INV_VALUES_SUM                       INV_VALUES_SUM,
       H.&STAT_VALUES_SUM                      STAT_VALUES_SUM,      
       H.&COUNTRY_DEST_TITLE                   COUNTRY_DEST_TITLE,       
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&NOTC                                 NOTC,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&COMMODITY_CODE                       COMMODITY_CODE,
       D.&COM_CODE_DESC                        COM_CODE_DESC,
       D.&STAT_PROCEDURE                       STAT_PROCEDURE,
       D.&ALT_UNIT_MEAS                        ALT_UNIT_MEAS,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_MEAS                             ALT_MEAS,
       D.&INVOICED_VALUE                       INVOICED_VALUE,
       D.&STATISTICAL_VALUE                    STATISTICAL_VALUE,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Tax No:^ITEM_NAME=iCompanyVatNo^';  
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress1^';   
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress2^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress3^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress4^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress5^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress6^';
COMMENT ON COLUMN &VIEW..COMPANY_ZIP_CITY IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyZipCity^';
COMMENT ON COLUMN &VIEW..COMPANY_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company contact:^ITEM_NAME=iCompanyContact^';   
COMMENT ON COLUMN &VIEW..REPR_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative name:^ITEM_NAME=iReprName^';  
COMMENT ON COLUMN &VIEW..REPR_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Tax No:^ITEM_NAME=iReprVatNo^';  
COMMENT ON COLUMN &VIEW..REPR_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprAddress1^';   
COMMENT ON COLUMN &VIEW..REPR_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprAddress2^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress3^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress4^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress5^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress6^';
COMMENT ON COLUMN &VIEW..REPR_ZIP_CITY IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprZipCity^';
COMMENT ON COLUMN &VIEW..REPR_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative contact:^ITEM_NAME=iReprContact^';     
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting Currency code:^ITEM_NAME=iCurrencyCode^'; 
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of lines:^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report title^ITEM_NAME=iReportTitle^';   
COMMENT ON COLUMN &VIEW..NET_WEIGHT_SUM IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Net Weight:^ITEM_NAME=iNetWeightSum^';
COMMENT ON COLUMN &VIEW..ALT_MEAS_SUM IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Alternative Qty:^ITEM_NAME=iAltMeasSum^';
COMMENT ON COLUMN &VIEW..INV_VALUES_SUM IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value:^ITEM_NAME=iInvoicedValueSum^';
COMMENT ON COLUMN &VIEW..STAT_VALUES_SUM IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Statistical Value:^ITEM_NAME=iStatisticalValueSum^';   
COMMENT ON COLUMN &VIEW..COUNTRY_DEST_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Country of Destination title^ITEM_NAME=iCountryDestTitle^';                    
          
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of consignment/destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..NOTC IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iNotc^';  
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..COMMODITY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Commodity Code^ITEM_NAME=iCommodityCode^';
COMMENT ON COLUMN &VIEW..COM_CODE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Commodity Code Description^ITEM_NAME=iComCodeDesc^';
COMMENT ON COLUMN &VIEW..STAT_PROCEDURE IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Statistical Procedure^ITEM_NAME=iStatProcedure^';
COMMENT ON COLUMN &VIEW..ALT_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Alt U/M^ITEM_NAME=iAltUnitMeas^';   
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_MEAS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAltMeas^';
COMMENT ON COLUMN &VIEW..INVOICED_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvoicedValue^';
COMMENT ON COLUMN &VIEW..STATISTICAL_VALUE IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Statistical Value^ITEM_NAME=iStatisticalValue^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Partner Id^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';
  

BEGIN 
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Austria','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_AT_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
  
   file_line_no_        NUMBER := 0;
   vat_no_               VARCHAR2(50);
   stmt_                 VARCHAR2(2000);
   result_key_           NUMBER;
   row_no_               NUMBER := 1;
   parent_row_no_        NUMBER := 0;
   report_title_         VARCHAR2(50);
   intrastat_id_         NUMBER;
   intrastat_direction_  VARCHAR2(20);
   rep_curr_rate_        NUMBER;
   country_code_         VARCHAR2(2);   
   net_weight_sum_         NUMBER := 0;
   alt_meas_sum_           NUMBER := 0;
   invoiced_values_sum_    NUMBER := 0;
   statistical_values_sum_ NUMBER := 0;
   co_addr_id_             Company_Address_Pub.address_id%TYPE;
   repr_addr_id_           VARCHAR2(50);
   report_period_          VARCHAR2(4);
   creation_date_str_      VARCHAR2(8);
   com_code_desc_          VARCHAR2(2000);
   company_vat_no_         VARCHAR2(35);
   company_name_           VARCHAR2(35);
   company_address6_       VARCHAR2(100);
   company_address5_       VARCHAR2(100);
   company_address4_       VARCHAR2(100);
   company_address3_       VARCHAR2(100);
   company_address2_       VARCHAR2(35);
   company_address1_       VARCHAR2(35);
   company_zip_city_       VARCHAR2(35);
   company_contact_name_   VARCHAR2(35);
   repr_vat_no_            VARCHAR2(35);
   repr_name_              VARCHAR2(35);
   repr_address6_          VARCHAR2(100);
   repr_address5_          VARCHAR2(100);
   repr_address4_          VARCHAR2(100);
   repr_address3_          VARCHAR2(100);
   repr_address2_          VARCHAR2(35);
   repr_address1_          VARCHAR2(35);
   repr_zip_city_          VARCHAR2(35);
   repr_contact_name_      VARCHAR2(35);
   statistical_procedure_  VARCHAR2(10);
   notc_dummy_             VARCHAR2(2);
   country_destination_title_ VARCHAR2(50);  
   rounded_invoiced_amount_   NUMBER := 0;
   rounded_statistical_value_ NUMBER := 0;
   rounded_net_weight_sum_    NUMBER := 0; 
   rounded_alt_qty_sum_       NUMBER := 0;

   do_xml_                 BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                  BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                    CLOB;
   package_name_           VARCHAR2(100) := 'INTRASTAT_AT_REP';



   CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc = notc_
      AND    country_code = 'AT';

   CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             creation_date,
             rep_curr_code,
             bransch_no,
             bransch_no_repr,
             company_contact,
             rep_curr_rate,
             country_code,
             rowkey             
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_lines IS
      SELECT il.opposite_country,
             il.country_of_origin             country_of_origin,
             cn.country_notc,
             il.mode_of_transport,
             il.customs_stat_no,
             il.statistical_procedure,
             il.intrastat_alt_unit_meas,
             SUM(il.quantity * nvl(il.net_unit_weight,0))                                 net_weight_sum,
             SUM(nvl(ABS(il.intrastat_alt_qty),0) * il.quantity)                          intrastat_alt_qty_sum,
             SUM(il.quantity * nvl(il.invoiced_unit_price, DECODE(il.transaction, 'PURSHIP',    0, 
                                                                                  'CO-PURSHIP', 0, il.order_unit_price))) * rep_curr_rate_
                                                                                          invoiced_amount,
             SUM((nvl(il.invoiced_unit_price, nvl(il.order_unit_price,0)) + 
                  nvl(il.unit_add_cost_amount_inv, nvl(il.unit_add_cost_amount,0)) +
                  nvl(il.unit_charge_amount_inv,0) + nvl(il.unit_charge_amount,0)) * 
                  il.quantity) * rep_curr_rate_                                           statistical_value,
             DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '')  opponent_tax_id
      FROM   intrastat_line_tab il, country_notc_tab cn
      WHERE  il.intrastat_id = intrastat_id_
      AND    il.intrastat_direction = intrastat_direction_
      AND    il.rowstate = 'Released'        
      AND    il.notc = cn.notc      
      AND    cn.country_code = country_code_      
      GROUP BY  il.opposite_country,
                il.country_of_origin,
                cn.country_notc,
                il.mode_of_transport,
                il.customs_stat_no,
                il.statistical_procedure,
                il.intrastat_alt_unit_meas,
                DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '');


BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := UPPER(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));    

   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTAT: Intrastat Export Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'EXPORTCD: Country of Destination');      
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTAT: Intrastat Import Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'IMPORTCD: Country of Dispatch');      
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;


   FOR headrec_ IN get_head LOOP     

      IF (headrec_.rep_curr_code NOT IN ('ATS','EUR')) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGCURRAT: Currency Code :P1 is not a valid currency, only ATS and EUR is acceptable', headrec_.rep_curr_code);         
      END IF;
      
      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         -- ifs_assert_safe bmekse 20110309
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;
  
      report_period_ := to_char(headrec_.end_date, 'YYMM');         
      creation_date_str_ := to_char(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_rate_ := headrec_.rep_curr_rate;
      country_code_ := headrec_.country_code;
        
      co_addr_id_ := Company_Address_API.Get_Default_Address(headrec_.company, 
                  Address_Type_Code_API.Decode('INVOICE'), headrec_.creation_date);
      company_vat_no_ :=  SUBSTR(vat_no_, 1, 31) || '-' || NVL(SUBSTR(headrec_.bransch_no,1,3),'000');
      company_name_ := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 35);
      company_address6_ := Company_Address_API.Get_Address6(headrec_.company, co_addr_id_);
      company_address5_ := Company_Address_API.Get_Address5(headrec_.company, co_addr_id_);
      company_address4_ := Company_Address_API.Get_Address4(headrec_.company, co_addr_id_);
      company_address3_ := Company_Address_API.Get_Address3(headrec_.company, co_addr_id_);
      company_address2_ := SUBSTR(Company_Address_API.Get_Address2(headrec_.company, co_addr_id_),1,35);  -- in austria/germany this field is used for extra company name etc
      company_address1_ := SUBSTR(Company_Address_API.Get_Address1(headrec_.company, co_addr_id_),1,35);
      company_zip_city_ := SUBSTR(Company_Address_API.Get_Zip_Code(headrec_.company, co_addr_id_), 1, 5) || ' ' ||
            SUBSTR(Company_Address_API.Get_City(headrec_.company, co_addr_id_), 1, 29);
      company_contact_name_ := SUBSTR(Person_Info_API.Get_Name(headrec_.company_contact), 1, 35);   
  
      IF (headrec_.representative IS NOT NULL) THEN
         repr_addr_id_ := Person_Info_Address_API.Get_Default_Address(headrec_.representative, 
                  Address_Type_Code_API.Decode('VISIT'), headrec_.creation_date);
         repr_vat_no_ :=  SUBSTR(headrec_.repr_tax_no, 1, 31) || '-' || NVL(SUBSTR(headrec_.bransch_no_repr,1,3),'000');
         repr_name_ := SUBSTR(Person_Info_API.Get_Name(headrec_.representative), 1, 35);
         repr_address6_ := Person_Info_Address_API.Get_Address6(headrec_.representative, repr_addr_id_); 
         repr_address5_ := Person_Info_Address_API.Get_Address5(headrec_.representative, repr_addr_id_); 
         repr_address4_ := Person_Info_Address_API.Get_Address4(headrec_.representative, repr_addr_id_); 
         repr_address3_ := Person_Info_Address_API.Get_Address3(headrec_.representative, repr_addr_id_); 
         repr_address2_ := Person_Info_Address_API.Get_Address2(headrec_.representative, repr_addr_id_);   -- in austria/germany this field is used for extra company name etc
         repr_address1_ := Person_Info_Address_API.Get_Address1(headrec_.representative, repr_addr_id_);
         repr_zip_city_ := SUBSTR(Person_Info_Address_API.Get_Zip_Code(headrec_.representative, repr_addr_id_), 1, 5) || ' ' ||
            SUBSTR(Person_Info_Address_API.Get_City(headrec_.representative, repr_addr_id_), 1, 29);
         repr_contact_name_ := SUBSTR(Comm_Method_API.Get_Name_Db('PERSON', headrec_.representative, 1), 1, 35);
      END IF;
         

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DEST_TITLE', country_destination_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_str_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', report_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', headrec_.rep_curr_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_CONTACT', repr_contact_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_ZIP_CITY', repr_zip_city_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_ADDRESS_6', repr_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_ADDRESS_5', repr_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_ADDRESS_4', repr_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_ADDRESS_3', repr_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_ADDRESS_2', repr_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_ADDRESS_1', repr_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_VAT_NO', repr_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_NAME', repr_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_CONTACT', company_contact_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ZIP_CITY', company_zip_city_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_6', company_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_5', company_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_4', company_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_3', company_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_2', company_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_1', company_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',headrec_.rowkey, '&VIEW');

         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_AT_LINES');
      END IF;

      IF (do_rs_) THEN
         -- Insert Head details
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, 
            &COMPANY_NAME, &COMPANY_VAT_NO,&COMPANY_ADDRESS6,
            &COMPANY_ADDRESS5,&COMPANY_ADDRESS4,&COMPANY_ADDRESS3,&COMPANY_ADDRESS2, 
             &COMPANY_ADDRESS1, &COMPANY_ZIP_CITY, &COMPANY_CONTACT,
             &REPR_NAME, &REPR_VAT_NO,&REPR_ADDRESS6,&REPR_ADDRESS5,&REPR_ADDRESS4,
             &REPR_ADDRESS3, &REPR_ADDRESS2, 
             &REPR_ADDRESS1, &REPR_ZIP_CITY, &REPR_CONTACT,          
             &REPORTING_PERIOD, &CREATION_DATE,
             &CURRENCY_CODE, &REPORT_TITLE, &COUNTRY_DEST_TITLE )
         VALUES
            (result_key_, row_no_, parent_row_no_, 
            company_name_, company_vat_no_,company_address6_,company_address5_,
            company_address4_,company_address3_, company_address2_, 
            company_address1_, company_zip_city_, company_contact_name_,
            repr_name_, repr_vat_no_,repr_address6_,repr_address5_,
            repr_address4_,repr_address3_, repr_address2_, 
            repr_address1_, repr_zip_city_, repr_contact_name_,         
            report_period_, creation_date_str_,
            headrec_.rep_curr_code, report_title_, country_destination_title_ );   
         parent_row_no_ := row_no_;   
         row_no_ := row_no_ + 1;
      END IF;

      -- Data Records
      FOR linerec_ IN get_lines LOOP       
         IF (intrastat_direction_ = 'IMPORT') AND (linerec_.country_of_origin IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'IMPMISSCOOAT: Some import inventory parts have no country of origin');
         END IF;       

         IF (intrastat_direction_ = 'IMPORT') THEN
            IF (linerec_.statistical_procedure = 'DELIVERY') THEN
               statistical_procedure_ := '40000';
            ELSIF (linerec_.statistical_procedure = 'BEFORE SUBCONTRACTING') THEN         
               statistical_procedure_ := '51004';
            ELSIF (linerec_.statistical_procedure = 'AFTER SUBCONTRACTING') THEN
               statistical_procedure_ := '61215';         
            END IF;
         ELSE -- export
            IF (linerec_.statistical_procedure = 'DELIVERY') THEN
               statistical_procedure_ := '10000';
            ELSIF (linerec_.statistical_procedure = 'BEFORE SUBCONTRACTING') THEN         
               statistical_procedure_ := '22002';
            ELSIF (linerec_.statistical_procedure = 'AFTER SUBCONTRACTING') THEN
               statistical_procedure_ := '31514';         
            END IF;
         END IF;

         file_line_no_ := file_line_no_ + 1;
         com_code_desc_ := Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no);
         
         IF ((intrastat_direction_ = 'EXPORT') AND (linerec_.opponent_tax_id IS NULL)) THEN         
            Client_SYS.Add_Info(lu_name_, 'NOOPPONENTTAXIDAT: Opponent Tax ID is missing for some lines.');
         END IF;
         
         rounded_invoiced_amount_ := ROUND(linerec_.invoiced_amount);
         rounded_statistical_value_ := ROUND(linerec_.statistical_value); 
         rounded_net_weight_sum_ := ROUND(linerec_.net_weight_sum); 
         rounded_alt_qty_sum_ := ROUND(linerec_.intrastat_alt_qty_sum); 
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_AT_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_DEST', linerec_.opposite_country);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NOTC', linerec_.country_notc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', linerec_.mode_of_transport);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMMODITY_CODE', linerec_.customs_stat_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COM_CODE_DESC', com_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_PROCEDURE', statistical_procedure_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_UNIT_MEAS', linerec_.intrastat_alt_unit_meas);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', rounded_net_weight_sum_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_MEAS', rounded_alt_qty_sum_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICED_VALUE', rounded_invoiced_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STATISTICAL_VALUE', rounded_statistical_value_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', file_line_no_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_AT_LINE');
         END IF;
         
         IF (do_rs_) THEN
            -- insert detail rows
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, &NOTC,
                &MODE_OF_TRANSPORT, &COMMODITY_CODE, &COM_CODE_DESC,
                &STAT_PROCEDURE, &ALT_UNIT_MEAS, 
                &NET_WEIGHT, &ALT_MEAS, 
                &INVOICED_VALUE, &STATISTICAL_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, file_line_no_, 
                linerec_.country_of_origin, linerec_.opposite_country, linerec_.country_notc,
                linerec_.mode_of_transport, linerec_.customs_stat_no, com_code_desc_,
                statistical_procedure_, linerec_.intrastat_alt_unit_meas, 
                rounded_net_weight_sum_, rounded_alt_qty_sum_, 
                rounded_invoiced_amount_, rounded_statistical_value_, linerec_.opponent_tax_id );
            row_no_ := row_no_ + 1;
         END IF;

         -- sums
         net_weight_sum_ := net_weight_sum_ + rounded_net_weight_sum_;
         alt_meas_sum_ :=  alt_meas_sum_ + rounded_alt_qty_sum_;
         invoiced_values_sum_ := invoiced_values_sum_ + rounded_invoiced_amount_;
         statistical_values_sum_ := statistical_values_sum_ + rounded_statistical_value_;

      END LOOP;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_AT_LINES');
      END IF;
     

      IF (do_rs_) THEN
         IF (row_no_ = 2) THEN -- no details      
            -- insert blank row
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, &NOTC,
                &MODE_OF_TRANSPORT, &COMMODITY_CODE, &COM_CODE_DESC,
                &STAT_PROCEDURE, &ALT_UNIT_MEAS, 
                &NET_WEIGHT, &ALT_MEAS, 
                &INVOICED_VALUE, &STATISTICAL_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, NULL, 
                NULL, NULL, NULL,
                NULL, NULL, NULL,
                NULL, NULL, 
                NULL, NULL, 
                NULL, NULL, NULL );     
         END IF;
      END IF;


      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUES_SUM', statistical_values_sum_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INV_VALUES_SUM', invoiced_values_sum_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_MEAS_SUM', alt_meas_sum_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT_SUM', net_weight_sum_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', file_line_no_);
      END IF;
      

      IF (do_rs_) THEN
         -- update the head with no_of_lines and sums
         UPDATE &TABLE
         SET    &NO_OF_LINES = file_line_no_,
                &NET_WEIGHT_SUM = net_weight_sum_,
                &ALT_MEAS_SUM = alt_meas_sum_,
                &INV_VALUES_SUM = invoiced_values_sum_,
                &STAT_VALUES_SUM = statistical_values_sum_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;         
      END IF;
      
   END LOOP;
 
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE METHOD

UNDEFINE COMPANY_NAME       
UNDEFINE COMPANY_VAT_NO     
UNDEFINE COMPANY_ADDRESS1   
UNDEFINE COMPANY_ADDRESS2
UNDEFINE COMPANY_ADDRESS3
UNDEFINE COMPANY_ADDRESS4
UNDEFINE COMPANY_ADDRESS5
UNDEFINE COMPANY_ADDRESS6
UNDEFINE COMPANY_ZIP_CITY   
UNDEFINE COMPANY_CONTACT    
UNDEFINE REPR_NAME          
UNDEFINE REPR_VAT_NO        
UNDEFINE REPR_ADDRESS1     
UNDEFINE REPR_ADDRESS2
UNDEFINE REPR_ADDRESS3 
UNDEFINE REPR_ADDRESS4 
UNDEFINE REPR_ADDRESS5 
UNDEFINE REPR_ADDRESS6 
UNDEFINE REPR_ZIP_CITY      
UNDEFINE REPR_CONTACT      
UNDEFINE CURRENCY_CODE      
UNDEFINE REPORTING_PERIOD   
UNDEFINE CREATION_DATE     
UNDEFINE NO_OF_LINES       
UNDEFINE REPORT_TITLE      
UNDEFINE NET_WEIGHT_SUM    
UNDEFINE ALT_MEAS_SUM     
UNDEFINE INV_VALUES_SUM    
UNDEFINE STAT_VALUES_SUM
UNDEFINE COUNTRY_DEST_TITLE 

UNDEFINE LINE_NO          
UNDEFINE COUNTRY_OF_ORIGIN 
UNDEFINE COUNTRY_OF_DEST   
UNDEFINE NOTC              
UNDEFINE MODE_OF_TRANSPORT 
UNDEFINE COMMODITY_CODE    
UNDEFINE COM_CODE_DESC    
UNDEFINE STAT_PROCEDURE
UNDEFINE ALT_UNIT_MEAS    
UNDEFINE NET_WEIGHT        
UNDEFINE ALT_MEAS          
UNDEFINE INVOICED_VALUE    
UNDEFINE STATISTICAL_VALUE
UNDEFINE OPPONENT_TAX_ID
UNDEFINE VIEW_RPV
