-----------------------------------------------------------------------------
--
--  Logical unit: Inventory Part Shortage.
--
--  File:         INVSHORT.RDF
--
--  Date    Sign    History
--  ------  ----    ----------------------------------------------------------
--  160225  MaEelk  STRSC-524, Codes relates to SHORTAGE_DEMAND_BY_PART were made dynamic since SHORTAGE_DEMAND_BY_PART is created in POST-INSTALLATION now.
--  141124  DaZase  PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
--  140716  TiRalk  Bug 117850, Modified report method to print company name properly.
--  110826  LEPESE  Cleanup of the User Allowed Site implementation and added error message if no matching site.
--  110513  DaZase  Added a count-copy of cursor get_master_xml_with_null_commo named get_master_xml_with_null_count
--  110513          and check for it to avoid the creation of any empty second commodity blocks in the report
--  081215  DAYJLK  Bug 79241, Modified length of variables planner_buyer and 
--  081215          prev_planner_buyer_ to 20 in method Report_Shortage_Per_Part.    
--  080311  SuSalk  Bug 72169, Added invent_info_services_rpt table name instead of view name as a paramater
--  080311          of the Report_SYS.Define_Report_ method call.
--  070521  ChBalk  Restructured Report logic so that commodity group (report parameter) is activated 
--  070521          and report content is now according to the user request.
--  060601  RoJalk  Enlarge Part Description - Changed view comments.
--  060515  JOHESE  Added project id and activity_seq to report suport project inventory
------------------------------------ 13.4.0 ----------------------------------
--  060228  SaNalk  Removed SUBSTRB from view.
--  060130  SaNalk  Modified Report Designer do_xml block.
--  060127  SaNalk  Converted to Report Designer Layout.
--  051222  GeKalk  Added the Japanese Layout.
--  051216  SuJalk  Changed VIEW_RPV to REPTAB in COMMENT ON TABLE REPVIEW.
--  051003	KeFelk  Added Site_Invent_Info_API for Site_API.Get_Picking_Leadtime.
--  050921  NiDalk  Removed unused variables.
--  050815  VeMolk  Modified the calls to the method Inventory_Part_In_Stock_API.Make_Onhand_Analysis in Get_Data__.
--  050802  KaDilk  Bug 50008, Restructured the report to match with Resolve Shortage for Inventory 
--  050802          Parts window.
--  041220  WaJalk  Modified the parameters passed into method Get_Avail_Plan_Qty_Loc_Type.
--  041027  KaDilk  bug 45027, Modified the Procedure Repmethod().
--  041129  JOHESE  Modified calls to Make_Onhand_Analysis
--  041005  JOHESE  Modified call to Get_Avail_Plan_Qty_Loc_Type
--  041004  RoJalk  Bug 46919, Modified Get_Data__ and changed the method calls/parameters
--  041004          to get qty_onhand_,qty_in_shop_ and qty_available_. 
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INVENTORY_PART_SHORTAGE_REP.
--  040126  NaWalk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.
--  031020  MaEelk  Call ID 107742, Modified cursor get_master in Report_Shortage_Per_Part to get only shortage parts.
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030717  ChFolk  Call ID 100120. Added ROW_NO into the view INVENTORY_PART_SHORTAGE_REP.
--  030623  MaGulk  Replaced call to Inventory_Part_In_Stock_API.Get_Shop_Plannable_Qty_Onhand with Inventory_Part_In_Stock_API.Get_Avail_Plan_Qty_Loc_Type
--  021112  SaRalk  Bug 33337, Added code which enables to add different logos for different companies. 
--  020204  MKrase  Bug fix 27739, Extended string length to 20 for PLANNER_BUYER in View comment and for 
--                  planner_ in Procedure &REPMETHOD.
--  000925  JOHESE  Added undefines.
--  000920  JOHESE Changed inventory_part_location_api calls to inventory_part_in_stock_api
--  000428  ANLASE Changed to String(20) in View Comments for show_manuf_parts and show_purch_parts,
--                 added NVLfunction in procedure &RepMethod for site_, second_commodity_from_,
--                 second_commodity_from_ and planner_, removed qvalue=% in view comments for commodity and site.
--  000417  NISOSE Added General_SYS.Init_Method in test.
--  000411  ANHO   Changed call to Inventory_Part_location_API, Get_Total_Qty_Onhand to Get_Inventory_Qty_Onhand
--                 and Get_Total_Qty_Reserved to Get_Inventory_Qty_Reserved.
--  000404  ANLASE Replaced mpccom_system_parameter_API.Get_ParameterValue1 with Site_API.Get_Picking_Leadtime.
--  990919  ROOD   Replaced Utility_SYS.Get_User with Fnd_Session_API.Get_Fnd_User.
--  990304  SHVE   Changed report labels(iDateRequired,iQtyDemand,iQtySupply,
--                 iQtyOnHand, iQtyAvailable).
--  990123  FRDI   Changed Calendar to WORK_TIME_CALENDAR and Changed Sysdate
--                 to site dependent 'sysdate' - Site_API.Get_Site_Date(contract)
--  990119  LEPE   Changed &VIEW3 from INVENTORY_PART_PLANNER to INVENTORY_PART_PLANNER_LOV.
--  980930  JOHW   Removed the last parameter in call Inventory_Part_Location_API.Make_Onhand_Analysis.
--  980416  SHVE   SID 3737: Changed dynamic call to Shop_Material_Alloc_Util_API.Part_Has_Reservation to use
--                 Shop_Material_Alloc_Int_API.Part_Has_Reservation.
--  980225  JOHO   Heat Id 369 change cursor to select dercription instead of status_code from custord_supply_demand.
--  980121  FRDI   Clean up conection to Purchase requisition.
--  971124  GOPE   Added Report_SYS.refresh
--  970904  JOMC   Converted the RDF to use the report table INVENT_INFO_SERVICES_RPT
--  970625  PELA   Added ENUMERATE=Gen_Yes_No_API.Enumerate in View Comments for show_manuf_parts and
--                 show_purch_parts. Removed unnecessary bind variable in Check_Data__.
--  970516  ASBE   BUG 97-0040 Changed call to Customer_Order_Line_API.Check_Part_Contract
--                 to use Part_Exist instead.
--  970311  JOKE   Changed calls to Purchase_Order_reservation due to name
--                 changes in purchase module.
--  961214  AnAr   Changed Calls to dbms_output to Trace_SYS and USER to
--                 Utility_SYS.Get_User.
--  961212  JICE   Changed calls to InventoryPartLocation.
--  961211  JOED   Changed call to Customer_Order_Line_API.Check_Part_Contract_N
--                 to use Part_Exist instead. Changed order of part_no and
--                 contract.
--  961209  MAOR   Changed call to Wo_Order_Line_API.Part_No_Exist_N to use
--                 Part_Exist instead. Changed order of part_no and contract.
--  961108  SHVE   Changed order of contract,part_no to
--                 Purchase_Order_Reservation_api.Check_Part_Reservation.
--  961015  AnAr   Removed ambigious '/' after view creation.
--  960918  AnAr   Moved Tables from Invshort.rdf to Report.Cre .
--  960816  AnAr   Created.
--  960507  MANY   Created as Template for Info Services 1.2 .
--
-----------------------------------------------------------------------------

DEFINE MODULE     = INVENT
DEFINE LU         = InventoryPart
DEFINE PKG        = INVENTORY_PART_SHORTAGE_RPI

DEFINE REPTAB     = INVENT_INFO_SERVICES_RPT
DEFINE REPVIEW    = INVENTORY_PART_SHORTAGE_REP
DEFINE VIEW_RPV   = INVENT_INFO_SERVICES_RPV
DEFINE REPMETHOD  = Report_Shortage_Per_Part

DEFINE VIEW1      = INVENTORY_PART
DEFINE VIEW3      = SHORTAGE_DEMAND_BY_PART

DEFINE CONTRACT             = S1
DEFINE CONTRACT_NAME        = S2
DEFINE PLANNER_BUYER        = S3
DEFINE BUYER_NAME           = S4
DEFINE PART_NO              = S5
DEFINE DESCRIPTION          = S6
DEFINE PART_OWNERSHIP       = S7
DEFINE OWNER                = S8
DEFINE CONDITION_CODE       = S9
DEFINE CONDITION_CODE_DESC  = S10
DEFINE INVENTORY_UOM        = S11
DEFINE SECOND_COMMODITY     = S12
DEFINE PROJECT_ID           = S13

DEFINE SHORTAGE_QUANTITY    = N1
DEFINE ACTIVITY_SEQ         = N2

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     INVENTORY_PART_SHORTAGE_RPI
-----------------------------------------------------------------------------
PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &REPMETHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE test (
   result_key_             VARCHAR2,
   contract_               VARCHAR2,
   second_commodity_from_  VARCHAR2,
   second_commodity_to_    VARCHAR2,
   planner_                VARCHAR2,
   show_manuf_parts_       VARCHAR2,
   show_purch_parts_       VARCHAR2);

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS                      INVENTORY_PART_SHORTAGE_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Shortage Per Part.
-- Type:       PLSQL1.2
-- Objects:    TABLE  = INVENTORY_PART_RPT
--             VIEW   = INVENTORY_PART_SHORTAGE_REP
--             METHOD = INVENTORY_PART_RPI.Report_Shortage_Per_Part
-----------------------------------------------------------------------------

PROMPT Creating report view &REPVIEW

CREATE OR REPLACE VIEW &REPVIEW AS
SELECT   RESULT_KEY                        RESULT_KEY,
         ROW_NO                            ROW_NO,
         &CONTRACT                         CONTRACT,
         &CONTRACT_NAME                    CONTRACT_NAME,
         &PLANNER_BUYER                    PLANNER_BUYER,
         &BUYER_NAME                       BUYER_NAME,
         &PART_NO                          PART_NO,
         &DESCRIPTION                      DESCRIPTION,
         SUBSTR(Part_Ownership_API.Decode(&PART_OWNERSHIP),1,20) PART_OWNERSHIP,
         &OWNER                            OWNER,
         &CONDITION_CODE                   CONDITION_CODE,
         &SHORTAGE_QUANTITY                SHORTAGE_QUANTITY,
         &INVENTORY_UOM                    INVENTORY_UOM,
         &SECOND_COMMODITY                 SECOND_COMMODITY,
         NULL                              SITE,
         NULL                              SECOND_COMMODITY_FROM,
         NULL                              SECOND_COMMODITY_TO,
         NULL                              PLANNER,
         NULL                              SHOW_MANUF_PARTS,
         NULL                              SHOW_PURCH_PARTS,
         &CONDITION_CODE_DESC              CONDITION_CODE_DESC,
         &PROJECT_ID                       PROJECT_ID,
         &ACTIVITY_SEQ                     ACTIVITY_SEQ
FROM     &VIEW_RPV                               
WITH     READ ONLY;


COMMENT ON TABLE &REPVIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Shortage Report^';

COMMENT ON COLUMN &REPVIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &REPVIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &REPVIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Site^ITEM_NAME=iContract^';
COMMENT ON COLUMN &REPVIEW..contract_name IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Name^ITEM_NAME=iContractName^';
COMMENT ON COLUMN &REPVIEW..planner_buyer IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Planner^ITEM_NAME=iPlannerBuyer^';
COMMENT ON COLUMN &REPVIEW..buyer_name IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Planner Name^ITEM_NAME=iBuyerName^';
COMMENT ON COLUMN &REPVIEW..second_commodity IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Second Commodity^ITEM_NAME=iSecondCommodity^';
COMMENT ON COLUMN &REPVIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part Number^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &REPVIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &REPVIEW..part_ownership IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Part Ownership^ITEM_NAME=iPartOwnership^';
COMMENT ON COLUMN &REPVIEW..owner IS 
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Owner^ITEM_NAME=iOwner^';
COMMENT ON COLUMN &REPVIEW..condition_code IS 
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &REPVIEW..condition_code_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Desc^ITEM_NAME=iConditionCodeDesc^';
COMMENT ON COLUMN &REPVIEW..shortage_quantity IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shortage Quantity^ITEM_NAME=iShortageQuantity^';
COMMENT ON COLUMN &REPVIEW..inventory_uom IS
   'FLAGS=A----^DATATYPE=STRING()^TITLE=Inventory U/M^ITEM_NAME=iInventoryUOM^';
COMMENT ON COLUMN &REPVIEW..site IS
   'FLAGS=A----^DATATYPE=STRING(0)^QUERY=Site^REF=USER_ALLOWED_SITE_LOV^QFLAGS=MWS-L^';
COMMENT ON COLUMN &REPVIEW..second_commodity_From IS
   'FLAGS=A----^DATATYPE=STRING(0)^QUERY=Second Commodity From^REF=CommodityGroup^QFLAGS=MCS-L^';
COMMENT ON COLUMN &REPVIEW..second_commodity_To IS
   'FLAGS=A----^DATATYPE=STRING(0)^QUERY=Second Commodity To^REF=CommodityGroup^QFLAGS=MCS-L^';
COMMENT ON COLUMN &REPVIEW..planner IS
   'FLAGS=A----^DATATYPE=STRING(0)^QUERY=Planner^REF=InventoryPartPlanner^QFLAGS=MWS-L^';
COMMENT ON COLUMN &REPVIEW..show_manuf_parts IS
   'FLAGS=A----^DATATYPE=STRING(20)^QUERY=Show Manuf Parts:^ENUMERATE=Gen_Yes_No_API.Enumerate^QFLAGS=MCS--^';
COMMENT ON COLUMN &REPVIEW..show_purch_parts IS
   'FLAGS=A----^DATATYPE=STRING(20)^QUERY=Show Purch Parts:^ENUMERATE=Gen_Yes_No_API.Enumerate^QFLAGS=MCS--^';
COMMENT ON COLUMN &REPVIEW..project_id IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Project ID^ITEM_NAME=iProjectId^';
COMMENT ON COLUMN &REPVIEW..activity_seq IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Sequence^ITEM_NAME=iActivitySeq^';

   
BEGIN
   Report_SYS.Define_Report_('&REPVIEW', '&MODULE', '&LU', 'Shortage Report Per Part', '&REPTAB', '&PKG..&REPMETHOD', 0,'','','','PLSQL1.2','TRUE','Warehouse Management','Warehouse Statistics');
   Report_SYS.Refresh_('&REPVIEW');   
END;
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     INVENTORY_PART_RPI
-----------------------------------------------------------------------------
PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS
-----------------------------------------------------------------------------
-- Purpose: .
-----------------------------------------------------------------------------
PROCEDURE &REPMETHOD ( 
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                   &REPVIEW..RESULT_KEY%TYPE;
   site_                         VARCHAR2(5);
   second_commodity_from_        VARCHAR2(6);
   second_commodity_to_          VARCHAR2(6);
   planner_                      VARCHAR2(20);
   show_manuf_parts_             VARCHAR2(20);
   show_purch_parts_             VARCHAR2(20);
   row_no_                       NUMBER  := 0;
   to_                           NUMBER;
   company_                      VARCHAR2(20);
   logotype_                     VARCHAR2(100);      
   company_name_                 VARCHAR2(100);  
   shortage_quantity_            NUMBER;
   lead_time_code_               VARCHAR2(200);
   yes_                          VARCHAR2(20);
   no_                           VARCHAR2(20);
   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&REPVIEW');
   do_rs_                        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&REPVIEW');
   xml_                          CLOB;
   package_name_                 VARCHAR2(100) := 'INVENTORY_PART_SHORTAGE_REP';
   contract_                     VARCHAR2(5);
   planner_buyer_                VARCHAR2(20);
   second_commodity_             VARCHAR2(6);
   prev_contract_                VARCHAR2(5):= CHR(132);
   prev_planner_buyer_           VARCHAR2(20):= CHR(132);
   prev_second_commodity_        VARCHAR2(6):= CHR(132);
   commodity_                    VARCHAR2(6);
   include_null_                 VARCHAR2(5);
   null_second_commodities_      NUMBER;
   
   CURSOR get_master IS
      SELECT A.part_no,
             A.contract,
             A.condition_code,
             A.part_ownership,
             A.owning_customer_no,
             A.owning_vendor_no,
             A.project_id,
             A.activity_seq,
             B.second_commodity,
             B.planner_buyer,
             B.description,
             B.unit_meas
      FROM &VIEW3 A,&VIEW1 B
      WHERE A.contract = B.contract
      AND   A.part_no  = B.part_no
      AND   B.contract LIKE NVL(site_, '%')
      AND   B.planner_buyer LIKE NVL(planner_, '%')
      AND   B.lead_time_code LIKE NVL(lead_time_code_, '%')
      AND EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE site = b.contract)

   ORDER BY A.contract,B.planner_buyer; 

   CURSOR get_master_xml(contract_ IN VARCHAR2, planner_buyer_ IN VARCHAR2, commodity_ IN VARCHAR2) IS
      SELECT A.part_no,
             A.contract,
             A.condition_code,
             A.part_ownership,
             A.owning_customer_no,
             A.owning_vendor_no,
             A.project_id,
             A.activity_seq,
             B.second_commodity,
             B.planner_buyer,
             B.description,
             B.unit_meas
      FROM &VIEW3 A,&VIEW1 B
      WHERE A.contract = B.contract
      AND   A.part_no  = B.part_no
      AND   B.contract = contract_
      AND   B.planner_buyer LIKE NVL(planner_buyer_, '%')
      AND   B.lead_time_code LIKE NVL(lead_time_code_, '%')
      AND   B.second_commodity = commodity_;

-- Any changes in where statements of cursors get_master_xml_with_null_commo and get_master_xml_with_null_count most be made in both these cursors
   CURSOR get_master_xml_with_null_commo(contract_ IN VARCHAR2, planner_buyer_ IN VARCHAR2) IS
      SELECT A.part_no,
             A.contract,
             A.condition_code,
             A.part_ownership,
             A.owning_customer_no,
             A.owning_vendor_no,
             A.project_id,
             A.activity_seq,
             B.second_commodity,
             B.planner_buyer,
             B.description,
             B.unit_meas
      FROM &VIEW3 A,&VIEW1 B
      WHERE A.contract = B.contract
      AND   A.part_no  = B.part_no
      AND   B.contract = contract_
      AND   B.planner_buyer LIKE NVL(planner_buyer_, '%')
      AND   B.lead_time_code LIKE NVL(lead_time_code_, '%')
      AND   B.second_commodity  IS NULL;

-- Any changes in where statements of cursors get_master_xml_with_null_commo and get_master_xml_with_null_count most be made in both these cursors
   CURSOR get_master_xml_with_null_count(contract_ IN VARCHAR2, planner_buyer_ IN VARCHAR2) IS
      SELECT count(*)
      FROM &VIEW3 A,&VIEW1 B
      WHERE A.contract = B.contract
      AND   A.part_no  = B.part_no
      AND   B.contract = contract_
      AND   B.planner_buyer LIKE NVL(planner_buyer_, '%')
      AND   B.lead_time_code LIKE NVL(lead_time_code_, '%')
      AND   B.second_commodity  IS NULL;

   CURSOR get_commodity_xml(contract_ IN VARCHAR2, planner_buyer_ IN VARCHAR2, commo_from_ VARCHAR2, commo_to_ VARCHAR2) IS
      SELECT A.part_no,
             A.contract,
             A.condition_code,
             A.part_ownership,
             A.owning_customer_no,
             A.owning_vendor_no,
             B.second_commodity,
             B.planner_buyer,
             B.description,
             B.unit_meas
      FROM &VIEW3 A,&VIEW1 B
      WHERE A.contract = B.contract
      AND   A.part_no  = B.part_no
      AND   B.contract = contract_
      AND   B.planner_buyer LIKE NVL(planner_buyer_, '%')
      AND   B.lead_time_code LIKE NVL(lead_time_code_, '%')
      AND   B.second_commodity BETWEEN commo_from_ AND commo_to_
      ORDER BY B.second_commodity;

   CURSOR min_commodity (from_commo_ VARCHAR2) IS
      SELECT MIN(commodity_code)
      FROM commodity_group
      WHERE commodity_code LIKE from_commo_;

   CURSOR max_commodity (to_commo_ VARCHAR2) IS
      SELECT MAX(commodity_code)
      FROM commodity_group
      WHERE commodity_code LIKE to_commo_;
BEGIN
   Trace_SYS.Message('Start &REPMETHOD .');
   General_SYS.Init_Method(lu_name_, '&PKG', '&REPMETHOD');

   result_key_             := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   site_                   := NVL(Client_SYS.Get_Item_Value('SITE', parameter_attr_),'%');
   second_commodity_from_  := NVL(Client_SYS.Get_Item_Value('SECOND_COMMODITY_FROM', parameter_attr_),'%');
   second_commodity_to_    := NVL(Client_SYS.Get_Item_Value('SECOND_COMMODITY_TO', parameter_attr_),'%');
   planner_                := NVL(Client_SYS.Get_Item_Value('PLANNER', parameter_attr_),'%');
   show_manuf_parts_       := Client_SYS.Get_Item_Value('SHOW_MANUF_PARTS', parameter_attr_);
   show_purch_parts_       := Client_SYS.Get_Item_Value('SHOW_PURCH_PARTS', parameter_attr_);
   yes_                    := Gen_Yes_No_API.Get_Client_Value(0);
   no_                     := Gen_Yes_No_API.Get_Client_Value(1);
   
   User_Allowed_Site_API.Exist_With_Wildcard(site_);

   IF (show_manuf_parts_ = yes_) AND (show_purch_parts_ = no_) THEN
      lead_time_code_ := Inv_Part_Lead_Time_Code_API.Get_Client_Value(0);
   ELSIF (show_manuf_parts_ = no_) AND (show_purch_parts_ = yes_) THEN
      lead_time_code_ := Inv_Part_Lead_Time_Code_API.Get_Client_Value(1);
   ELSE 
      lead_time_code_ := '%';
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&REPVIEW',package_name_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHOW_PURCH_PARTS', show_purch_parts_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHOW_MANUF_PARTS', show_manuf_parts_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PLANNER', planner_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SECOND_COMMODITY_TO', second_commodity_to_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SECOND_COMMODITY_FROM', second_commodity_from_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SHORTAGE_HEADS');
   END IF;

   FOR master_ IN get_master LOOP 
      IF ( second_commodity_from_ = '%' AND second_commodity_to_ = '%' ) OR
         ( second_commodity_from_ != '%' AND second_commodity_to_ = '%' AND master_.second_commodity >= second_commodity_from_ ) OR
         ( second_commodity_from_ = '%' AND second_commodity_to_ != '%' AND master_.second_commodity <= second_commodity_to_ ) OR
         ( second_commodity_from_ != '%' AND second_commodity_to_ != '%' AND master_.second_commodity >= second_commodity_from_ AND master_.second_commodity <= second_commodity_to_ ) THEN

         contract_      := master_.contract;
         planner_buyer_ := master_.planner_buyer;
         IF ((contract_ != prev_contract_) OR (planner_buyer_ != prev_planner_buyer_))  THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SHORTAGE_HEAD');
               Xml_Record_Writer_SYS.Add_Element(xml_,'BUYER_NAME', Inventory_Part_Planner_API.Get_Buyer_Name(master_.planner_buyer));
               Xml_Record_Writer_SYS.Add_Element(xml_,'PLANNER_BUYER', master_.planner_buyer);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_NAME', Site_API.Get_Description(master_.contract));
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', master_.contract);
               Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMODITYS');  

               prev_second_commodity_ := 'NULL';
               include_null_ := 'FALSE';

               IF (second_commodity_from_ = '%' AND second_commodity_to_ = '%') THEN
                  include_null_ := 'TRUE';
               END IF;

               OPEN min_commodity(second_commodity_from_);
               FETCH min_commodity INTO second_commodity_from_;
               CLOSE min_commodity;

               OPEN max_commodity(second_commodity_to_);
               FETCH max_commodity INTO second_commodity_to_;
               CLOSE max_commodity;

               FOR commodity_rec_ IN get_commodity_xml(master_.contract, master_.planner_buyer, second_commodity_from_, second_commodity_to_) LOOP
                  second_commodity_ := commodity_rec_.second_commodity;
                  IF (second_commodity_ IS NULL) THEN
                     second_commodity_ := 'NULL';
                  END IF;
                  IF (second_commodity_ != prev_second_commodity_) OR ( (second_commodity_ = 'NULL') AND (prev_second_commodity_ = 'NULL') )  THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMODITY');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'SECOND_COMMODITY', commodity_rec_.second_commodity);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHORTAGE_LINES');

                     FOR xml_rec_ IN get_master_xml(commodity_rec_.contract, commodity_rec_.planner_buyer, commodity_rec_.second_commodity)  LOOP
                        shortage_quantity_ := Shortage_Demand_API.Get_Shortage_Qty(xml_rec_.contract,
                                                                                   xml_rec_.part_no,
                                                                                   xml_rec_.condition_code,
                                                                                   xml_rec_.part_ownership,
                                                                                   xml_rec_.owning_customer_no,
                                                                                   xml_rec_.owning_vendor_no,
                                                                                   xml_rec_.project_id,
                                                                                   xml_rec_.activity_seq);
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SHORTAGE_LINE');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESC', Condition_Code_API.Get_Description(xml_rec_.condition_code));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'SITE', xml_rec_.contract);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_UOM', xml_rec_.unit_meas);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'SHORTAGE_QUANTITY', ROUND(shortage_quantity_, 2));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE', xml_rec_.condition_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'OWNER', NVL(xml_rec_.owning_customer_no, xml_rec_.owning_vendor_no));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PART_OWNERSHIP', Part_Ownership_API.Decode(xml_rec_.part_ownership));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', xml_rec_.description);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', xml_rec_.part_no);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ACTIVITY_SEQ', xml_rec_.activity_seq);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PROJECT_ID', xml_rec_.project_id);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ROW_NO', row_no_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'RESULT_KEY', result_key_);

                        Xml_Record_Writer_SYS.End_Element(xml_, 'SHORTAGE_LINE');
                     END LOOP;
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHORTAGE_LINES');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'COMMODITY');
                  END IF;
                  prev_second_commodity_ := commodity_rec_.second_commodity;
               END LOOP;

               IF (include_null_ = 'TRUE') THEN

                  OPEN get_master_xml_with_null_count(master_.contract, master_.planner_buyer);
                  FETCH get_master_xml_with_null_count INTO null_second_commodities_;
                  CLOSE get_master_xml_with_null_count;
                  -- avoiding the creation of any empty second commodity blocks in the report
                  IF (null_second_commodities_ > 0) THEN

                     Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMODITY');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'SECOND_COMMODITY', '');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHORTAGE_LINES');

                     FOR xml_newrec_ IN get_master_xml_with_null_commo(master_.contract, master_.planner_buyer)  LOOP
                        shortage_quantity_ := Shortage_Demand_API.Get_Shortage_Qty(xml_newrec_.contract,
                                                                                   xml_newrec_.part_no,
                                                                                   xml_newrec_.condition_code,
                                                                                   xml_newrec_.part_ownership,
                                                                                   xml_newrec_.owning_customer_no,
                                                                                   xml_newrec_.owning_vendor_no,
                                                                                   xml_newrec_.project_id,
                                                                                   xml_newrec_.activity_seq);

                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SHORTAGE_LINE');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESC', Condition_Code_API.Get_Description(xml_newrec_.condition_code));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'SITE', xml_newrec_.contract);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_UOM', xml_newrec_.unit_meas);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'SHORTAGE_QUANTITY', ROUND(shortage_quantity_, 2));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE', xml_newrec_.condition_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'OWNER', NVL(xml_newrec_.owning_customer_no, xml_newrec_.owning_vendor_no));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PART_OWNERSHIP', Part_Ownership_API.Decode(xml_newrec_.part_ownership));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', xml_newrec_.description);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', xml_newrec_.part_no);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ACTIVITY_SEQ', xml_newrec_.activity_seq);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PROJECT_ID', xml_newrec_.project_id);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ROW_NO', row_no_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'RESULT_KEY', result_key_);

                        Xml_Record_Writer_SYS.End_Element(xml_, 'SHORTAGE_LINE');
                     END LOOP;

                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHORTAGE_LINES');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'COMMODITY');
                  END IF;
               END IF;

               Xml_Record_Writer_SYS.End_Element(xml_, 'COMMODITYS');
               Xml_Record_Writer_SYS.End_Element(xml_, 'SHORTAGE_HEAD');
            END IF;

            prev_contract_ := master_.contract;
            prev_planner_buyer_ := master_.planner_buyer;
         END IF;

         ----- do the insertion  -----
         IF (do_rs_) THEN
            INSERT INTO &REPTAB 
               (RESULT_KEY,
                ROW_NO,
                PARENT_ROW_NO,
                &CONTRACT,
                &CONTRACT_NAME,
                &PLANNER_BUYER,
                &BUYER_NAME,
                &SECOND_COMMODITY,
                &PART_NO,
                &DESCRIPTION,
                &PART_OWNERSHIP,
                &OWNER,
                &CONDITION_CODE,
                &CONDITION_CODE_DESC,
                &SHORTAGE_QUANTITY,
                &INVENTORY_UOM)
            VALUES
               (result_key_,
                row_no_,
                0,
                master_.contract,
                Site_API.Get_Description(master_.contract),
                master_.planner_buyer,
                Inventory_Part_Planner_API.Get_Buyer_Name(master_.planner_buyer),
                master_.second_commodity,
                master_.part_no,
                master_.description,
                master_.part_ownership,
                NVL(master_.owning_customer_no, master_.owning_vendor_no),
                master_.condition_code,
                Condition_Code_API.Get_Description(master_.condition_code),
                shortage_quantity_,
                master_.unit_meas);
         END IF;
         row_no_ := row_no_ + 1;
      END IF;
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'SHORTAGE_HEADS');
   END IF;

   to_ := instr(site_, ';', 1);
   IF (to_ = 0) AND (site_  <> '%') THEN      
      company_      := Site_API.Get_Company(Upper(site_));       
      logotype_     := Company_API.Get_Logotype(company_);  
      company_name_ := Site_API.Get_Company_Address_Name(site_);

      IF (logotype_ IS NOT NULL ) THEN
         Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
         Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);         
      END IF;
   ELSE
      company_name_ := Site_Text_API.Get_Text('companyName');
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&REPVIEW');
      Report_SYS.Finish_Xml_Report('&REPVIEW',result_key_,xml_);
   END IF;

   Trace_SYS.Message('End &REPMETHOD .');
END &REPMETHOD;

-----------------------------------------------------------------------------
-- Purpose: To Test &REPMETHOD .
-----------------------------------------------------------------------------
PROCEDURE test (
   result_key_             VARCHAR2,
   contract_               VARCHAR2,
   second_commodity_from_  VARCHAR2,
   second_commodity_to_    VARCHAR2,
   planner_                VARCHAR2,
   show_manuf_parts_       VARCHAR2,
   show_purch_parts_       VARCHAR2)
IS
   reportAttr_    VARCHAR2(200);
   parameterAttr_ VARCHAR2(200);
BEGIN
General_SYS.Init_Method(lu_name_, '&PKG', 'test');
Trace_SYS.Message('Start Test.');
   Client_SYS.Add_To_Attr('RESULT_KEY',result_key_,reportAttr_);
   Client_SYS.Add_To_Attr('SITE',contract_, parameterAttr_);
   Client_SYS.Add_To_Attr('SECOND_COMMODITY_FROM',second_commodity_from_, parameterAttr_);
   Client_SYS.Add_To_Attr('SECOND_COMMODITY_TO',second_commodity_to_, parameterAttr_);
   Client_SYS.Add_To_Attr('PLANNER',planner_, parameterAttr_);
   Client_SYS.Add_To_Attr('SHOW_MANUF_PARTS',show_manuf_parts_, parameterAttr_);
   Client_SYS.Add_To_Attr('SHOW_PURCH_PARTS',show_purch_parts_, parameterAttr_);
   &REPMETHOD(reportAttr_,parameterAttr_);
Trace_SYS.Message('End Test.');
END test;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR




----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE REPVIEW
UNDEFINE VIEW_RPV
UNDEFINE REPMETHOD
UNDEFINE VIEW1
UNDEFINE VIEW3
UNDEFINE CONTRACT
UNDEFINE CONTRACT_NAME
UNDEFINE PLANNER_BUYER
UNDEFINE BUYER_NAME
UNDEFINE PART_NO
UNDEFINE DESCRIPTION
UNDEFINE PART_OWNERSHIP
UNDEFINE OWNER
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESC
UNDEFINE INVENTORY_UOM
UNDEFINE SECOND_COMMODITY
UNDEFINE PROJECT_ID
UNDEFINE SHORTAGE_QUANTITY
UNDEFINE ACTIVITY_SEQ
