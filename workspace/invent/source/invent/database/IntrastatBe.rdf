-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatBE.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  190507  ErFelk  Bug 145499(SCZ-2992), Added new fields DELIVERY_TERMS, REGION_CODE, COUNTRY_OF_ORIGIN and OPPONENT_TAX_ID.
--  190507          Removed the charge amounts from the invoice value calculation in get_lines cursor and renamed the statistical_value to invoice_value.
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Belgium'
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  100107  Umdolk  Refactoring in Communication Methods in Enterprise.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  061109  KaDilk  Bug 60521, Removed the lpad function.
--  060207  SaNalk  Modified view INTRASTAT_BE_REP.
--  060206  SaNalk  Converted to Report Designer Layout.
--  051216  SuJalk  Changed VIEW_RPV into TABLE in COMMENT ON TABLE.
--  050921  NiDalk  Removed unused variables.
--  050107  DiVelk  Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INTRASTAT_BE_REP.
--  040227  GeKalk  Replaced substrb with substr for UNICODE modifications.
------------------- EDGE Package Group 3 Unicode Changes --------------------
--  040123  NaWalk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.  
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030801  KeFelk  Performed SP4 Merge. (SP4Only)
--  030124  AnLaSe  Bug fix 34661, replaced constants IMPCOUNTRY and REPEXPORT with unique names.
--  020312  DaZa    Bug fix 28308, added ABS on intrastat_alt_qty so we dont get "-x * -y results" when we multiply with the regular qty.
--  020217  IsAn    A4/Letter conversion.
--  010316  GeKa    Created.
--  -----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_BE_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_BE_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define REPORT_TYPE        = S1
define COMPANY_VAT_NO     = S2
define BRANCH_NO          = S3
define COMPANY_NAME       = S4
define COMPANY_CONTACT    = S5
define AGENT_VAT_NO       = S6
define AGENT_BRANCH_NO    = S7
define AGENT_NAME         = S8
define AGENT_CONTACT      = S9
define REPORT_PERIOD      = S10
define CREATION_DATE      = S11
define CURRENCY_CODE      = S12
define COUNTRY_OF_DEST    = S13
define MODE_OF_TRANSPORT  = S14
define TRANS_NATURE       = S15
define CUSTOM_STAT_CODE   = S16
define COUNTRY_TYPE       = S17
define COUNTRY_OF_ORIGIN  = S18
define OPPONENT_TAX_ID    = S19
define DELIVERY_TERMS     = S20
define REGION_CODE        = S21
define LINE_NO            = N1
define NET_WEIGHT         = N2
define ALTERNATE_QTY      = N3
define INVOICE_VALUE      = N4

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&REPORT_TYPE                          REPORT_TYPE,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&BRANCH_NO                            BRANCH_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&COMPANY_CONTACT                      COMPANY_CONTACT,
       H.&AGENT_VAT_NO                         AGENT_VAT_NO,
       H.&AGENT_BRANCH_NO                      AGENT_BRANCH_NO,
       H.&AGENT_NAME                           AGENT_NAME,
       H.&AGENT_CONTACT                        AGENT_CONTACT,
       H.&REPORT_PERIOD                        REPORT_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&COUNTRY_TYPE                         COUNTRY_TYPE,
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&TRANS_NATURE                         TRANS_NATURE,
       D.&CUSTOM_STAT_CODE                     CUSTOM_STAT_CODE,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALTERNATE_QTY                        ALTERNATE_QTY,
       D.&INVOICE_VALUE                        INVOICE_VALUE,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       D.&DELIVERY_TERMS                       DELIVERY_TERMS,
       D.&REGION_CODE                          REGION_CODE,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..REPORT_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Type of Report^ITEM_NAME=iReportType^';
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Company Tax No :^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Branch No :^ITEM_NAME=iBranchNo^';  
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company Name :^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..COMPANY_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company Contact :^ITEM_NAME=iCompanyContact^';  
COMMENT ON COLUMN &VIEW..AGENT_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Agent Tax No :^ITEM_NAME=iAgentVatNo^'; 
COMMENT ON COLUMN &VIEW..AGENT_BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Agent Branch No:^ITEM_NAME=iAgentBranchNo^';
COMMENT ON COLUMN &VIEW..AGENT_NAME IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Agent Name :^ITEM_NAME=iAgentName^';   
COMMENT ON COLUMN &VIEW..AGENT_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Agent Contact :^ITEM_NAME=iAgentContact^';   
COMMENT ON COLUMN &VIEW..REPORT_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period :^ITEM_NAME=iReportPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date :^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting currency code :^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..COUNTRY_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country Type^ITEM_NAME=iCountryType^';
COMMENT ON COLUMN &VIEW..TRANS_NATURE IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iTransNature^';
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..CUSTOM_STAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Commodity Code^ITEM_NAME=iCustomStatCode^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALTERNATE_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAlternateQty^';
COMMENT ON COLUMN &VIEW..INVOICE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Value^ITEM_NAME=iInvoiceValue^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Country Of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Opponent Tax ID^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Delivery Terms^ITEM_NAME=iDeliveryTerms^';
COMMENT ON COLUMN &VIEW..REGION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Region Codes^ITEM_NAME=iRegionCodes^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';

BEGIN 
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Intrastat Report Belgium', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_BE_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   report_type_            VARCHAR2(50);   
   company_vat_no_         VARCHAR2(14);
   branch_no_              VARCHAR2(3);
   company_name_           VARCHAR2(40);
   company_contact_        VARCHAR2(20);
   agent_vat_no_           VARCHAR2(14);
   agent_branch_no_        VARCHAR2(10);
   agent_name_             VARCHAR2(100);
   agent_contact_          VARCHAR2(100);
   end_date_               VARCHAR2(4);
   creation_date_          VARCHAR2(8);
   currency_code_          VARCHAR2(3);
   line_no_                NUMBER := 0;
   country_of_destination_ VARCHAR2(3);
   transaction_nature_     VARCHAR2(2);
   mode_of_transport_      VARCHAR2(1);
   custom_stat_code_       VARCHAR2(8);
   net_weight_             NUMBER;
   alternate_qty_          NUMBER;   
   rep_curr_rate_          NUMBER;
   vat_no_                 VARCHAR2(50);
   stmt_                   VARCHAR2(2000);
   result_key_             NUMBER;
   row_no_                 NUMBER := 1;
   parent_row_no_          NUMBER := 0;
   intrastat_id_           NUMBER;
   intrastat_direction_    VARCHAR2(20);
   rep_curr_code_          VARCHAR2(3);
   country_code_           VARCHAR2(2);   
   notc_dummy_             VARCHAR2(5);
   notc_notfound           EXCEPTION;
   country_type_           VARCHAR2(25);
   do_xml_                 BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                  BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                    CLOB;
   package_name_           VARCHAR2(100) := 'INTRASTAT_SE_REP';
   rowkey_                 VARCHAR2(50);
   invoice_value_          NUMBER;
   country_of_origin_      VARCHAR2(2);
   opponent_tax_id_        VARCHAR2(50);
   delivery_terms_         VARCHAR2(5);
   region_code_            VARCHAR2(10);


   CURSOR get_head IS
      SELECT company,
             company_contact,
             bransch_no,
             representative,
             repr_tax_no,  
             bransch_no_repr,
             begin_date,
             end_date,
             creation_date,
             rep_curr_code,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   
   --             Removed the charge amounts from the invoice value calculation.
   CURSOR get_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,
             cn.country_notc,
             il.region_of_origin,
             DECODE(il.intrastat_direction, 'EXPORT', il.country_of_origin, '')  country_of_origin,
             il.mode_of_transport,
             il.customs_stat_no,
             SUM(il.quantity * il.net_unit_weight) net_weight,
             SUM(NVL(ABS(il.intrastat_alt_qty),0) * il.quantity) alternate_qty,
             SUM((NVL(il.invoiced_unit_price, NVL(il.order_unit_price,0)) + 
                  NVL(il.unit_add_cost_amount_inv, NVL(il.unit_add_cost_amount,0))) * il.quantity) * rep_curr_rate_ invoice_value,
             DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '')  opponent_tax_id,
             il.delivery_terms
      FROM   intrastat_line_tab il,country_notc_tab cn
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direction_ 
      AND    rowstate           != 'Cancelled'          
      AND    il.notc = cn.notc      
      AND    cn.country_code = country_code_
      GROUP BY  il.intrastat_direction,
                il.opposite_country,
                il.region_of_origin,
                DECODE(il.intrastat_direction, 'EXPORT', il.country_of_origin, ''),
                il.mode_of_transport,
                cn.country_notc, 
                il.customs_stat_no,
                DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, ''),
                il.delivery_terms;  
                
      CURSOR get_notc IS
         SELECT distinct notc
         FROM   intrastat_line_tab
         WHERE  intrastat_id = intrastat_id_;
   
      CURSOR get_country_notc (notc_ VARCHAR2) IS
         SELECT country_notc
         FROM   country_notc_tab
         WHERE  notc = notc_
         AND    country_code = 'BE'; 

BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
      

   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR headrec_ IN get_head LOOP 
      
      --Get the Company Vat Code
      $IF Component_Invoic_SYS.INSTALLED $THEN
         vat_no_ := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(headrec_.company, headrec_.country_code, TRUNC(headrec_.creation_date));
      $END
      
      IF (headrec_.rep_curr_code NOT IN ('EUR')) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGCURRBE: Reporting currency should be EUR.');
      END IF;
      
      IF (vat_no_ IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOCOMPTAXNOBE: Tax number is missing for Company :P1', headrec_.company);
      END IF;
      
      vat_no_ := LPAD(vat_no_, 10, '0');
         
      company_name_     := Company_API.Get_Name(headrec_.company);
   
      branch_no_        := headrec_.bransch_no;
      company_contact_  := headrec_.company_contact;

      IF (SUBSTR(headrec_.repr_tax_no, 1, 2) = headrec_.country_code) THEN
         agent_vat_no_   := rpad(nvl(SUBSTR(headrec_.repr_tax_no, 3, 14),''),14);
      ELSE
         agent_vat_no_   := rpad(nvl(SUBSTR(headrec_.repr_tax_no, 1, 14),''),14);
      END IF;

      agent_name_         := Person_Info_API.Get_Name( headrec_.representative );
      agent_contact_      := Comm_Method_API.Get_Name_Db('PERSON', headrec_.representative, 1);
      agent_branch_no_    := headrec_.bransch_no_repr;
      end_date_           := to_char(headrec_.end_date,'YYMM');
      creation_date_      := to_char(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_code_      := headrec_.rep_curr_code;  
      rep_curr_rate_      := headrec_.rep_curr_rate;
      currency_code_      := rep_curr_code_;
      country_code_       := headrec_.country_code;
      rowkey_             := headrec_.rowkey;
   END LOOP;
   
   IF (intrastat_direction_ = 'EXPORT') THEN  
     report_type_   := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTBE: Intrastat Export Report');
     country_type_  := Language_SYS.Translate_Constant(lu_name_, 'EXPCOUNTRYBE: Country of Destination');
   ELSE
     report_type_   := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTBE: Intrastat Import Report');
     country_type_  := Language_SYS.Translate_Constant(lu_name_, 'IMPCOUNTRYBE: Country of Dispatch');
   END IF;
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', currency_code_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_PERIOD', end_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AGENT_CONTACT', agent_contact_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AGENT_NAME', agent_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AGENT_BRANCH_NO', agent_branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AGENT_VAT_NO', agent_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_CONTACT', company_contact_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'BRANCH_NO', branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TYPE', report_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_TYPE', country_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'ROW_NO', row_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RESULT_KEY', result_key_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',rowkey_, '&VIEW');
      Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_BE_LINES');
   END IF;

   IF (do_rs_) THEN      
      -- Insert Head details
      INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &REPORT_TYPE, &COMPANY_VAT_NO,
          &COMPANY_NAME,&COMPANY_CONTACT, &BRANCH_NO, &AGENT_VAT_NO, &AGENT_BRANCH_NO, &AGENT_NAME,
          &AGENT_CONTACT, &REPORT_PERIOD, &CREATION_DATE, &CURRENCY_CODE,&COUNTRY_TYPE)
      VALUES
         (result_key_, row_no_, parent_row_no_, report_type_,company_vat_no_,
          company_name_, company_contact_, branch_no_, agent_vat_no_, agent_branch_no_, agent_name_,
          agent_contact_, end_date_, creation_date_, currency_code_,country_type_);
   END IF;
   parent_row_no_ := row_no_;   
   row_no_ := row_no_ + 1;
   FOR linerec_ IN get_lines LOOP
      
      IF (linerec_.delivery_terms NOT IN ('EXW','FCA','FAS','FOB','CFR','CIF','CPT','CIP','DDP', 'DAT', 'DAP')) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGDELTERMSBE: Invalid Delivery Terms.');
      END IF;
      IF (intrastat_direction_ = 'EXPORT') THEN   
         IF (linerec_.opponent_tax_id IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'MISSINGOPPTAXIDBE: Opponent Tax ID is missing for some lines.');
         END IF;
         IF (linerec_.country_of_origin IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'MISSINGCOUNTRYOFORIGIONBE: Country of Origin is missing for some lines.');
         END IF;   
      END IF;
      country_of_destination_ := SUBSTR(linerec_.opposite_country, 1,2);
      transaction_nature_     := linerec_.country_notc;
      mode_of_transport_      := linerec_.mode_of_transport;
      custom_stat_code_       := RPAD(SUBSTR(linerec_.customs_stat_no, 1,8),8);
      net_weight_             := ROUND(linerec_.net_weight, 2);
      alternate_qty_          := ROUND(linerec_.alternate_qty, 2);
      invoice_value_          := ROUND(linerec_.invoice_value);      
      country_of_origin_      := linerec_.country_of_origin;
      opponent_tax_id_        := linerec_.opponent_tax_id;
      delivery_terms_         := linerec_.delivery_terms;
      region_code_            := linerec_.region_of_origin;
                  
      line_no_ := line_no_ + 1;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_BE_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', invoice_value_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ALTERNATE_QTY', alternate_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', net_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOM_STAT_CODE', custom_stat_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TRANS_NATURE', transaction_nature_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', mode_of_transport_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_DEST', country_of_destination_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', country_of_origin_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', opponent_tax_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS', delivery_terms_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REGION_CODE', region_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', line_no_);
      END IF;
            
      IF (do_rs_) THEN
         -- insert detail rows
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, &LINE_NO,&COUNTRY_OF_DEST,
             &TRANS_NATURE,&MODE_OF_TRANSPORT,&CUSTOM_STAT_CODE,&NET_WEIGHT,&ALTERNATE_QTY,
             &INVOICE_VALUE,&REPORT_TYPE,&COUNTRY_TYPE,&COUNTRY_OF_ORIGIN,&OPPONENT_TAX_ID,
             &DELIVERY_TERMS,&REGION_CODE)
         VALUES
            (result_key_, row_no_, parent_row_no_, line_no_,country_of_destination_,
             transaction_nature_,mode_of_transport_,custom_stat_code_,
             net_weight_,alternate_qty_, invoice_value_, report_type_,country_type_,
             country_of_origin_, opponent_tax_id_, delivery_terms_, region_code_);
      END IF;
      row_no_ := row_no_ + 1;
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_BE_LINE');
   END LOOP; 
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_BE_LINES');
   END IF;

   IF (row_no_ = 2) THEN
   INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &LINE_NO,&COUNTRY_OF_DEST,
          &TRANS_NATURE,&MODE_OF_TRANSPORT,&CUSTOM_STAT_CODE,
          &NET_WEIGHT,&ALTERNATE_QTY,&INVOICE_VALUE,&REPORT_TYPE,&COUNTRY_TYPE,
          &COUNTRY_OF_ORIGIN,&OPPONENT_TAX_ID,&DELIVERY_TERMS,&REGION_CODE)
   VALUES
         (result_key_, row_no_, parent_row_no_, NULL,NULL,
         NULL,NULL,NULL,NULL,NULL,NULL,report_type_,country_type_,
         country_of_origin_, opponent_tax_id_, delivery_terms_, region_code_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

      
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE REPORT_TYPE
UNDEFINE COMPANY_VAT_NO
UNDEFINE BRANCH_NO
UNDEFINE COMPANY_NAME
UNDEFINE COMPANY_CONTACT
UNDEFINE AGENT_VAT_NO
UNDEFINE AGENT_BRANCH_NO
UNDEFINE AGENT_NAME
UNDEFINE AGENT_CONTACT
UNDEFINE REPORT_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE CURRENCY_CODE
UNDEFINE COUNTRY_TYPE
UNDEFINE LINE_NO
UNDEFINE COUNTRY_OF_DEST
UNDEFINE MODE_OF_TRANSPORT
UNDEFINE TRANS_NATURE
UNDEFINE CUSTOM_STAT_CODE
UNDEFINE NET_WEIGHT
UNDEFINE ALTERNATE_QTY
UNDEFINE INVOICE_VALUE
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE OPPONENT_TAX_ID
UNDEFINE DELIVERY_TERMS
UNDEFINE REGION_CODE
