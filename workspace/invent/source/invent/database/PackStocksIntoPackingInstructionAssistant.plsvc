-----------------------------------------------------------------------------
--
--  Fragment:     PackStocksIntoPackingInstructionAssistant
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  2019-05-31  Chfolk  SCUXXw4-19473, Modified Execute_Packing___ to give correct list of newly created handling units.
--  2019-05-27  ChFolk  SCUXXW4-21153, Modified CRUD_Create___ and Get_Packing_Instruction_Ids___ to avoid concatenate variables in the cursor.
--  2018-09-24  ChFolk  SCUXXW4-5644, Renamed as PackStocksIntoPackingInstructionAssistant.
--  2018-09-07  ChFolk  SCUXXW4-5644, Moved method Get_Connected_Objids___ to InventoryPartInStockHandling.plsvc.
--  2018-09-02  ChFolk  SCUXXW4-5644, Added methods Get_Connected_Objids___, Get_Packing_Instruction_Ids___, Pack_Child_Rec___, Pack_Children___
--  2018-09-02          and Execute_Packing___. Overrided methods CRUD_Create___ and CRUD_Update___ of header and CRUD_Update___ of child. 
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Pack_Stocks_Into_Packing_Instruction_Virtual_Rec )
IS
   line_rec_     Part_In_Stock_Virtual_Rec;
   newrec_       Pack_Stocks_Into_Packing_Instruction_Virtual_Rec;
   CURSOR get_part_stock_info IS
      SELECT contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, 
             activity_seq, handling_unit_id, qty_onhand, qty_reserved, (qty_onhand - qty_reserved) qty_available, source_ref1, source_ref2,
             source_ref3, receipt_no, source_ref_type_db
      FROM   INVENTORY_PART_IN_STOCK_UIV
      WHERE  objid IN (SELECT REGEXP_SUBSTR(rec_.objid_list_arr,'[^,]+', 1, LEVEL) 
                       FROM dual
                       CONNECT BY REGEXP_SUBSTR(rec_.objid_list_arr, '[^,]+', 1, LEVEL) IS NOT NULL);
      
   $IF Component_Rceipt_SYS.INSTALLED $THEN
   CURSOR get_receipt_inv_loc_info IS
      SELECT contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, 
             activity_seq, handling_unit_id, qty_onhand, qty_reserved, (qty_onhand - qty_reserved) qty_available, source_ref1, source_ref2,
             source_ref3, receipt_no, DECODE(SOURCE_REF_TYPE_DB, 'PURCHASE_ORDER', 'PUR ORDER','SHIPMENT_ORDER', 'SHIPMENT_ORDER',NULL) source_ref_type_db
      FROM   RECEIPT_INV_LOCATION_HU
      WHERE  objid IN ( SELECT REGEXP_SUBSTR(rec_.objid_list_arr,'[^,]+', 1, LEVEL) 
                        FROM dual
                        CONNECT BY REGEXP_SUBSTR(rec_.objid_list_arr, '[^,]+', 1, LEVEL) IS NOT NULL);
   $END
   
BEGIN
   newrec_ := rec_;
   newrec_.lines_ready_to_pack := Fnd_Boolean_API.DB_FALSE;
   super(newrec_);
   IF (rec_.connected_source = 'INVENT') THEN
      FOR part_stock_rec_ IN get_part_stock_info LOOP
         line_rec_.objkey        := sys_guid();
         line_rec_.parent_objkey := rec_.objkey;
         line_rec_.contract := part_stock_rec_.contract;
         line_rec_.part_no := part_stock_rec_.part_no;
         line_rec_.configuration_id := part_stock_rec_.configuration_id;
         line_rec_.location_no := part_stock_rec_.location_no;
         line_rec_.lot_batch_no := part_stock_rec_.lot_batch_no;
         line_rec_.serial_no := part_stock_rec_.serial_no;
         line_rec_.eng_chg_level := part_stock_rec_.eng_chg_level;
         line_rec_.waiv_dev_rej_no := part_stock_rec_.waiv_dev_rej_no;
         line_rec_.activity_seq := part_stock_rec_.activity_seq;
         line_rec_.handling_unit_id := part_stock_rec_.handling_unit_id;
         line_rec_.qty_onhand := part_stock_rec_.qty_onhand;
         line_rec_.qty_reserved := part_stock_rec_.qty_reserved;
         line_rec_.available_qty := part_stock_rec_.qty_available;
         line_rec_.source_ref1 := part_stock_rec_.source_ref1;
         line_rec_.source_ref2 := part_stock_rec_.source_ref2;
         line_rec_.source_ref3 := part_stock_rec_.source_ref3;
         line_rec_.receipt_no := part_stock_rec_.receipt_no;
         line_rec_.inv_trans_source_ref_type_db := part_stock_rec_.source_ref_type_db;
         line_rec_.applied := false;
         line_rec_.packing_instruction_id := rec_.packing_instruction_id;
         line_rec_.unit_meas := Inventory_Part_API.Get_Unit_Meas(line_rec_.contract, line_rec_.part_no);
         CRUD_Create___(line_rec_);
      END LOOP;
   ELSE
      $IF Component_Rceipt_SYS.INSTALLED $THEN
      FOR receipt_loc_rec_ IN get_receipt_inv_loc_info LOOP
         line_rec_.objkey        := sys_guid();
         line_rec_.parent_objkey := rec_.objkey;
         line_rec_.contract := receipt_loc_rec_.contract;
         line_rec_.part_no := receipt_loc_rec_.part_no;
         line_rec_.configuration_id := receipt_loc_rec_.configuration_id;
         line_rec_.location_no := receipt_loc_rec_.location_no;
         line_rec_.lot_batch_no := receipt_loc_rec_.lot_batch_no;
         line_rec_.serial_no := receipt_loc_rec_.serial_no;
         line_rec_.eng_chg_level := receipt_loc_rec_.eng_chg_level;
         line_rec_.waiv_dev_rej_no := receipt_loc_rec_.waiv_dev_rej_no;
         line_rec_.activity_seq := receipt_loc_rec_.activity_seq;
         line_rec_.handling_unit_id := receipt_loc_rec_.handling_unit_id;
         line_rec_.qty_onhand := receipt_loc_rec_.qty_onhand;
         line_rec_.qty_reserved := receipt_loc_rec_.qty_reserved;
         line_rec_.available_qty := receipt_loc_rec_.qty_available;
         line_rec_.source_ref1 := receipt_loc_rec_.source_ref1;
         line_rec_.source_ref2 := receipt_loc_rec_.source_ref2;
         line_rec_.source_ref3 := receipt_loc_rec_.source_ref3;
         line_rec_.receipt_no := receipt_loc_rec_.receipt_no;
         line_rec_.inv_trans_source_ref_type_db := receipt_loc_rec_.source_ref_type_db;
         line_rec_.applied := false;
         line_rec_.packing_instruction_id := rec_.packing_instruction_id;
         line_rec_.unit_meas := Inventory_Part_API.Get_Unit_Meas(line_rec_.contract, line_rec_.part_no);
         CRUD_Create___(line_rec_);
      END LOOP;
      $ELSE
         NULL;
      $END
   END IF;
 
END CRUD_Create___;   

@Override
PROCEDURE CRUD_Update___(
   old_ IN Pack_Stocks_Into_Packing_Instruction_Virtual_Rec,
   new_ IN Pack_Stocks_Into_Packing_Instruction_Virtual_Rec )
IS 
   parent_key_              Pack_Stocks_Into_Packing_Instruction_Virtual_Key;
   key_                     Part_In_Stock_Virtual_Key;
   old_child_rec_           Part_In_Stock_Virtual_Rec;
   new_child_rec_           Part_In_Stock_Virtual_Rec;
   update_from_header_      BOOLEAN := TRUE;
   set_lines_ready_to_pick_ BOOLEAN := FALSE;
   new_rec_                 Pack_Stocks_Into_Packing_Instruction_Virtual_Rec;
BEGIN   
   parent_key_.objkey := old_.objkey;
   new_rec_ := new_;  
   IF (NVL(old_.packing_instruction_id, ' ') != NVL(new_.packing_instruction_id, ' ')) THEN
      FOR details_rec_ IN Get_Part_In_Stock_Array___(parent_key_) LOOP
         key_.objkey := details_rec_.objkey;
         old_child_rec_ := Get_Record___(key_);
         new_child_rec_ := old_child_rec_;
         new_child_rec_.packing_instruction_id := new_.packing_instruction_id;
         IF (Packing_Instruction_Node_API.Leaf_Node_For_Part_Exists(new_.packing_instruction_id, old_child_rec_.part_no, old_child_rec_.unit_meas) = Fnd_Boolean_API.DB_TRUE) THEN
            new_child_rec_.applied := TRUE;
            IF (old_child_rec_.qty_to_attach > 0) THEN
               set_lines_ready_to_pick_ := TRUE;
            END IF;   
         ELSE
            new_child_rec_.applied := FALSE;
         END IF;

         CRUD_Update___(old_child_rec_, new_child_rec_, update_from_header_);
      END LOOP;
   END IF;
   IF (set_lines_ready_to_pick_) THEN
      new_rec_.lines_ready_to_pack := Fnd_Boolean_API.DB_TRUE;
   END IF;
   super(old_, new_rec_);
END;

FUNCTION Get_Packing_Instruction_Ids___(
   parent_objkey_ IN VARCHAR2 ) RETURN Objid_Arr
IS
   parent_key_               Pack_Stocks_Into_Packing_Instruction_Virtual_Key;
   child_rec_                Part_In_Stock_Virtual_Rec;
   child_key_                Part_In_Stock_Virtual_Key;
   part_no_array_            VARCHAR2(2000);
   uom_array_                VARCHAR2(2000);
   base_collection_          Objid_Arr := Objid_Arr();
    
   CURSOR get_objids IS
      SELECT objid
      FROM PACKING_INSTRUCTION_WITH_ROOT
      WHERE packing_instruction_id IN (SELECT pin1.packing_instruction_id
                                       FROM  PACKING_INSTRUCTION_NODE pin1
                                       WHERE pin1.packing_instruction_id = packing_instruction_id
                                       AND   (pin1.handling_unit_type_id IN (SELECT handling_unit_type_id FROM PART_HANDLING_UNIT_OPERATIVE phuo 
                                                                            WHERE phuo.part_no IN (SELECT REGEXP_SUBSTR(part_no_array_,'[^,]+', 1, LEVEL) 
                                                                                                   FROM dual
                                                                                                   CONNECT BY REGEXP_SUBSTR(part_no_array_, '[^,]+', 1, LEVEL) IS NOT NULL)
                                                                            AND phuo.unit_code IN (SELECT REGEXP_SUBSTR(uom_array_,'[^,]+', 1, LEVEL) 
                                                                                                   FROM dual
                                                                                                   CONNECT BY REGEXP_SUBSTR(uom_array_, '[^,]+', 1, LEVEL) IS NOT NULL)))
                                       AND NOT EXISTS (SELECT 1
                                                       FROM  PACKING_INSTRUCTION_NODE pin2
                                                       WHERE pin2.packing_instruction_id = pin1.packing_instruction_id
                                                       AND   pin2.parent_node_id = pin1.node_id));
      
    
BEGIN
   parent_key_.objkey := parent_objkey_;   
   FOR details_rec_ IN Get_Part_In_Stock_Array___(parent_key_) LOOP
      child_key_.objkey := details_rec_.objkey;
      child_rec_ := Get_Record___(child_key_);
      IF (part_no_array_ IS NULL) THEN
         part_no_array_ := child_rec_.part_no;         
      ELSE
         part_no_array_ := part_no_array_ || ',' ||child_rec_.part_no;
      END IF;
      IF (uom_array_ IS NULL) THEN
         uom_array_ := child_rec_.unit_meas;         
      ELSE
         uom_array_ := uom_array_ || ',' ||child_rec_.unit_meas;
      END IF;
   END LOOP;
   OPEN get_objids;
   FETCH get_objids BULK COLLECT INTO base_collection_;
   CLOSE get_objids;

   RETURN base_collection_;
END Get_Packing_Instruction_Ids___;

FUNCTION Pack_Child_Rec___ (
   msg_        IN CLOB,
   child_rec_  IN Part_In_Stock_Virtual_Rec ) RETURN CLOB
IS
   new_msg_   CLOB;
BEGIN
   new_msg_ := msg_;
   Message_SYS.Add_Attribute(new_msg_, 'CONTRACT', child_rec_.contract);
   Message_SYS.Add_Attribute(new_msg_, 'PART_NO', child_rec_.part_no);
   Message_SYS.Add_Attribute(new_msg_, 'CONFIGURATION_ID', child_rec_.configuration_id);
   Message_SYS.Add_Attribute(new_msg_, 'LOCATION_NO', child_rec_.location_no);
   Message_SYS.Add_Attribute(new_msg_, 'LOT_BATCH_NO', child_rec_.lot_batch_no);
   Message_SYS.Add_Attribute(new_msg_, 'SERIAL_NO', child_rec_.serial_no);
   Message_SYS.Add_Attribute(new_msg_, 'ENG_CHG_LEVEL', child_rec_.eng_chg_level);
   Message_SYS.Add_Attribute(new_msg_, 'WAIV_DEV_REJ_NO', child_rec_.waiv_dev_rej_no);
   Message_SYS.Add_Attribute(new_msg_, 'ACTIVITY_SEQ', child_rec_.activity_seq);
   Message_SYS.Add_Attribute(new_msg_, 'QTY_ONHAND', child_rec_.qty_to_attach);
   Message_SYS.Add_Attribute(new_msg_, 'SOURCE_REF1', child_rec_.source_ref1);
   Message_SYS.Add_Attribute(new_msg_, 'SOURCE_REF2', child_rec_.source_ref2);
   Message_SYS.Add_Attribute(new_msg_, 'SOURCE_REF3', child_rec_.source_ref3);
   Message_SYS.Add_Attribute(new_msg_, 'SOURCE_REF4', child_rec_.receipt_no);
   Message_SYS.Add_Attribute(new_msg_, 'INV_TRANS_SOURCE_REF_TYPE_DB', child_rec_.inv_trans_source_ref_type_db);
   RETURN new_msg_;
END Pack_Child_Rec___;   
 
FUNCTION Pack_Children___(
   parent_objkey_ IN VARCHAR2 ) RETURN CLOB
IS
   parent_key_           Pack_Stocks_Into_Packing_Instruction_Virtual_Key; 
   child_key_            Part_In_Stock_Virtual_Key;
   current_child_rec_    Part_In_Stock_Virtual_Rec;
   msg_                  CLOB;
BEGIN
   parent_key_.objkey := parent_objkey_;   
   FOR child_rec_ IN Get_Part_In_Stock_Array___(parent_key_) LOOP
      child_key_.objkey := child_rec_.objkey;
      current_child_rec_ := Get_Record___(child_key_);
      IF (current_child_rec_.applied AND current_child_rec_.qty_to_attach > 0) THEN
         msg_ := Pack_Child_Rec___(msg_, current_child_rec_);
      END IF;   
   END LOOP;
   RETURN msg_;
END Pack_Children___;

FUNCTION Execute_Packing___ (
   parent_objkey_           IN VARCHAR2,
   packing_instruction_id_  IN VARCHAR2 ) RETURN CLOB
IS
   out_msg_clob_           CLOB;
   msg_clob_               CLOB;
   message_name_arr_       Message_SYS.name_table;
   message_value_arr_      Message_SYS.line_table;
   count_                  NUMBER := 0;
   created_handling_units_ CLOB; 
BEGIN   
   msg_clob_ := Pack_Children___(parent_objkey_);
   IF (msg_clob_ IS NOT NULL) THEN
      out_msg_clob_ := Handl_Unit_Auto_Pack_Util_API.Pack_Stock_Into_Pack_Instr(msg_clob_, packing_instruction_id_);
   END IF;
   Message_SYS.Get_Attributes(out_msg_clob_, count_, message_name_arr_, message_value_arr_);
   FOR i_ IN 1..count_ LOOP
      IF message_name_arr_(i_) = 'HANDLING_UNIT_ID' THEN
         IF (created_handling_units_ IS NULL) THEN
            created_handling_units_ := message_value_arr_(i_);         
         ELSE
            created_handling_units_ := created_handling_units_ || ';' || message_value_arr_(i_);          
         END IF;   
      END IF;   
   END LOOP;
   RETURN created_handling_units_;
END Execute_Packing___;

@Override
PROCEDURE CRUD_Update___(
   old_                IN Part_In_Stock_Virtual_Rec,
   new_                IN Part_In_Stock_Virtual_Rec,
   update_from_header_ IN BOOLEAN DEFAULT FALSE )
IS
   parent_key_              Pack_Stocks_Into_Packing_Instruction_Virtual_Key; 
   old_parent_rec_          Pack_Stocks_Into_Packing_Instruction_Virtual_Rec;
   new_parent_rec_          Pack_Stocks_Into_Packing_Instruction_Virtual_Rec;
   child_key_               Part_In_Stock_Virtual_Key;
   old_child_rec_           Part_In_Stock_Virtual_Rec;
   set_lines_ready_to_pack_ BOOLEAN := FALSE;
BEGIN
   super(old_, new_); 
   IF (NOT update_from_header_) THEN
      -- The following code should be executed to set the value for lines_ready_to_pack which enables the OK button in the dialog.     
      parent_key_.objkey := old_.parent_objkey;
      old_parent_rec_ := Get_Record___(parent_key_);       
      IF (new_.qty_to_attach > 0 AND new_.applied) THEN
         new_parent_rec_ := old_parent_rec_;
         new_parent_rec_.lines_ready_to_pack := Fnd_Boolean_API.DB_TRUE;     
         CRUD_Update___(old_parent_rec_, new_parent_rec_);
         set_lines_ready_to_pack_ := TRUE;
      ELSE
         FOR line_rec_ IN Get_Part_In_Stock_Array___(parent_key_) LOOP
            child_key_.objkey := line_rec_.objkey;
            old_child_rec_ := Get_Record___(child_key_);
            IF (old_child_rec_.qty_to_attach > 0 AND old_child_rec_.applied) THEN
               new_parent_rec_ := old_parent_rec_;
               new_parent_rec_.lines_ready_to_pack := Fnd_Boolean_API.DB_TRUE;     
               CRUD_Update___(old_parent_rec_, new_parent_rec_);
               set_lines_ready_to_pack_ := TRUE;
               EXIT;
            END IF;   
         END LOOP;    
      END IF;
      IF (NOT set_lines_ready_to_pack_ AND old_parent_rec_.lines_ready_to_pack = Fnd_Boolean_API.DB_TRUE) THEN
         new_parent_rec_ := old_parent_rec_;
         new_parent_rec_.lines_ready_to_pack := Fnd_Boolean_API.DB_FALSE;     
         CRUD_Update___(old_parent_rec_, new_parent_rec_);
      END IF;
   END IF;   
END CRUD_Update___;