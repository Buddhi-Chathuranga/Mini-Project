-----------------------------------------------------------------------------
--
--  Logical unit: IntersiteProfitability
--
--  File:         IntersiteProfitability.rdf
--
--  Date    Sign    History
--  ------  ----    ---------------------------------------------------------
--  141124  DaZase  PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
--  140716  TiRalk  Bug 117850, Modified report method to print company logo and company name properly.
--  130731  MaIklk  TIBE-838, Removed inst_Order_ global constant and used conditional compilation instead.
--  081201  HoInlk  Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  070921  MaHplk  Modified method Report_Intersite_Profitability.
--  060626  Asawlk  Bug 58502, Made necessary changes to show values with correct sign.  
--  060622  MiKulk  Modified the view comments to enable the wild card characters when querying contract and part_no.
--  060307  UsRalk  Modified the cost calculating logic to include customer returns.
--  060306  UsRalk  Added code to handle situation where a sales part does not exist for the given inventory part.
--  060306  UsRalk  Changed the QFLAGS to match current functionality.
--  060301  JOHESE  Changed cursor get_invtrans to use column date_time_created instead of dated
--  050123  SaRalk  Modified ext_sales_sum_ to change the sign after the calculation.
--  050613  AnLaSe  Added handling of NULL values for part_no in dynamic cursor and ext_sales_sum_.
--  050402  AnLaSe  Made calls and cursors to ORDER dynamic.
--  050308  AnLaSe  Call ID 120859. Fetch values for external sales from invoice instead of inventory transactions.
--  041209  AnLaSe  Fetch internal cost of sales from M163.
--  041208  AnLaSe  Renamed the title, added text constant.
--  041202  AnLaSe  Added xml-code.
--  041119  SaNalk  Modified the name of the view in Prompt.
--  041101  AnLaSe  Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = InventoryTransactionHist
define PKG                = INTERSITE_PROFIT_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTERSITE_PROFIT_REP
define METHOD             = Report_Intersite_Profitability

define CONTRACT                   = S1
define PART_NO                    = S2
define STAT_YEAR_NO               = N1
define STAT_PERIOD_NO             = N2
define EXTERNAL_SALES             = N3
define INTERNAL_SALES             = N4
define TOTAL_SALES                = N5
define EXTERNAL_COST_OF_SALES     = N6
define INTERNAL_COST_OF_SALES     = N7
define INTERNAL_PURCHASE_COSTS    = N8
define INTERNAL_PURCHASE_COST_ADJ = N9
define TOTAL_COST_OF_SALES        = N10
define GROSS_PROFIT               = N11
define COST_DIFFERENCE            = N12
define NET_PROFIT                 = N13


PROMPT Creating reports for logical unit &LU

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

-- Drop the view before recreating it to make sure the view is created
-- from scratch again.
CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       &CONTRACT                               CONTRACT,
       to_char(NULL)                           PART_NO,
       &STAT_YEAR_NO                           STAT_YEAR_NO,
       &STAT_PERIOD_NO                         STAT_PERIOD_NO,
       &EXTERNAL_SALES                         EXTERNAL_SALES,
       &INTERNAL_SALES                         INTERNAL_SALES,
       &TOTAL_SALES                            TOTAL_SALES,
       &EXTERNAL_COST_OF_SALES                 EXTERNAL_COST_OF_SALES,
       &INTERNAL_COST_OF_SALES                 INTERNAL_COST_OF_SALES,
       &INTERNAL_PURCHASE_COSTS                INTERNAL_PURCHASE_COSTS,
       &INTERNAL_PURCHASE_COST_ADJ             INTERNAL_PURCHASE_COST_ADJ,
       &TOTAL_COST_OF_SALES                    TOTAL_COST_OF_SALES,
       &GROSS_PROFIT                           GROSS_PROFIT,
       &COST_DIFFERENCE                        COST_DIFFERENCE,
       &NET_PROFIT                             NET_PROFIT
FROM  &TABLE
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Intersite Profitability^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site^ITEM_NAME=iContract^
   ^QUERY=Site:^QFLAGS=MWS-L^STATUS=Enter Site. If many inventory transactions exist, this job may take some time.^REF=USER_ALLOWED_SITE_LOV^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^TITLE=Part No^ITEM_NAME=iPartNo^
   ^QUERY=Part No:^QFLAGS=OWS-L^STATUS=Enter Part No^REF=INVENTORY_PART_LOV(CONTRACT)^';
COMMENT ON COLUMN &VIEW..stat_year_no IS
   'FLAGS=A----^DATATYPE=NUMBER(4)^TITLE=Year:^ITEM_NAME=iStatYearNo^
   ^QUERY=Year:^QFLAGS=MCS--^STATUS=Enter statistical year^REF=STATISTIC_PERIOD2^';
COMMENT ON COLUMN &VIEW..stat_period_no IS
   'FLAGS=A----^DATATYPE=NUMBER(2)^TITLE=Period:^ITEM_NAME=iStatPeriodNo^
   ^QUERY=Period:^QFLAGS=MCS--^STATUS=Enter statistical period^REF=STATISTIC_PERIOD(STAT_YEAR_NO)^';
COMMENT ON COLUMN &VIEW..external_sales IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=External Sales:^ITEM_NAME=iExternalSales^';
COMMENT ON COLUMN &VIEW..internal_sales IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Internal Sales:^ITEM_NAME=iInternalSales^';
COMMENT ON COLUMN &VIEW..total_sales IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Sales:^ITEM_NAME=iTotalSales^';
COMMENT ON COLUMN &VIEW..external_cost_of_sales IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=External Cost of Sales:^ITEM_NAME=iExternalCostOfSales^';
COMMENT ON COLUMN &VIEW..internal_cost_of_sales IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Internal Cost of Sales:^ITEM_NAME=iInternalCostOfSales^';
COMMENT ON COLUMN &VIEW..internal_purchase_costs IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Internal Purchase Costs:^ITEM_NAME=iInternalPurchaseCosts^';
COMMENT ON COLUMN &VIEW..internal_purchase_cost_adj IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Internal Purchase Cost Adjustment:^ITEM_NAME=iInternalPurchaseCostAdj^';
COMMENT ON COLUMN &VIEW..total_cost_of_sales IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Cost of Sales:^ITEM_NAME=iTotalCostOfSales^';
COMMENT ON COLUMN &VIEW..gross_profit IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Profit:^ITEM_NAME=iGrossProfit^';
COMMENT ON COLUMN &VIEW..cost_difference IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cost Difference:^ITEM_NAME=iGrossProfit^';
COMMENT ON COLUMN &VIEW..net_profit IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Profit:^ITEM_NAME=iNetPRofit^';


BEGIN
   Report_SYS.Define_Report_ ('&VIEW', '&MODULE', '&LU', 'Intersite Profitability Report', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Financial Control');
   Report_SYS.Define_Report_Text_('&VIEW', 'HEADING_TITLE', 'Inventory Parts Profit Centre Report');
   Report_SYS.Define_Report_Text_('&VIEW', 'SALES_TITLE', 'Sales');
   Report_SYS.Define_Report_Text_('&VIEW', 'COST_OF_SALES_TITLE', 'Cost Of Sales');
   Report_SYS.Refresh_('&VIEW');
END;
/


-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                NUMBER;
   row_no_                    NUMBER := 1;
   contract_                  VARCHAR2(5);
   part_no_                   VARCHAR2(25);
   year_                      NUMBER;
   period_                    NUMBER;
   from_date_                 DATE;
   to_date_                   DATE;

   ext_sales_sum_             NUMBER := 0;
   int_sales_sum_             NUMBER := 0;
   ext_cost_sales_sum_        NUMBER := 0;
   int_cost_of_sales_sum_     NUMBER := 0;
   int_purchase_cost_sum_     NUMBER := 0;
   int_purchase_cost_adj_sum_ NUMBER := 0;
   cost_difference_           NUMBER := 0;
   ord_conn_return_           NUMBER := 0;
   ord_less_return_           NUMBER := 0;

   total_sales_               NUMBER := 0;
   total_cost_of_sales_       NUMBER := 0;
   gross_profit_              NUMBER := 0;
   net_profit_                NUMBER := 0;

   do_xml_                    BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                     BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                       CLOB;
   package_name_              VARCHAR2(100) := 'INTERSITE_PROFIT_REP';

   company_                   VARCHAR2(80);   
   catalog_no_                VARCHAR2(100);   
   logotype_                  VARCHAR2(100);      
   company_name_              VARCHAR2(100);
   
   CURSOR get_invtrans (c_from_date_ IN DATE, c_to_date_ IN DATE) IS
      SELECT accounting_id
        FROM inventory_transaction_hist_pub
       WHERE (date_time_created  >= c_from_date_)
         AND (date_time_created  <  c_to_date_ + 1)
         AND  contract = contract_
         AND (part_no  = part_no_ OR part_no_ IS NULL);
   
   $IF (Component_Order_SYS.INSTALLED) $THEN
      CURSOR get_ordinvitem (c_from_date_ IN DATE, c_to_date_ IN DATE, c_contract_ IN VARCHAR2, c_company_ IN VARCHAR2, c_catalog_no_ IN VARCHAR2) IS
         SELECT SUM(net_dom_amount)
         FROM CUSTOMER_ORDER_INV_ITEM
         WHERE invoice_id IN (SELECT invoice_id
                              FROM CUSTOMER_ORDER_INV_HEAD
                              WHERE (print_date >= c_from_date_)
                              AND (print_date < c_to_date_ + 1)
                              AND contract    = c_contract_
                              AND company     = c_company_)
         AND contract     = c_contract_
         AND (catalog_no  = c_catalog_no_ OR c_catalog_no_ IS NULL);
   $END
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   contract_   := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   part_no_    := Client_SYS.Get_Item_Value('PART_NO', parameter_attr_);
   year_       := to_number(Client_SYS.Get_Item_Value('STAT_YEAR_NO', parameter_attr_));
   period_     := to_number(Client_SYS.Get_Item_Value('STAT_PERIOD_NO', parameter_attr_));

   Site_API.Exist(contract_);
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User, contract_);

   from_date_ := Statistic_Period_API.Get_Begin_Date(year_, period_);
   to_date_   := Statistic_Period_API.Get_End_Date(year_, period_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   company_ := Site_API.Get_Company(contract_);

   --A different approach is needed to fetch external sales
   $IF (Component_Order_SYS.INSTALLED) $THEN
      catalog_no_ := Sales_Part_API.Get_Catalog_No_For_Part_No( contract_, part_no_ ); 
      -- External sales can occur only if the part is registered as a sales part in the site
      IF NOT ((part_no_ IS NOT NULL) AND (catalog_no_ IS NULL)) THEN       
         -- Fetch with the previously created select statement
         OPEN get_ordinvitem (from_date_, to_date_, contract_, company_, catalog_no_);
         FETCH get_ordinvitem INTO ext_sales_sum_;
         CLOSE get_ordinvitem;                
      END IF;
   $ELSE
      Trace_SYS.Message('Order not installed.');
   $END

   ext_sales_sum_ := NVL(ext_sales_sum_, 0);

   FOR invhist_rec IN get_invtrans(from_date_, to_date_) LOOP
      int_sales_sum_             := int_sales_sum_      + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M159');
      ext_cost_sales_sum_        := ext_cost_sales_sum_ + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M24');
      int_cost_of_sales_sum_     := int_cost_of_sales_sum_ + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M163');
      int_purchase_cost_sum_     := int_purchase_cost_sum_ + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M162');
      int_purchase_cost_adj_sum_ := int_purchase_cost_adj_sum_ + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M165');
      cost_difference_           := cost_difference_ + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M156');
      ord_conn_return_           := ord_conn_return_ + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M25'); /* Cost of Goods Sold, Order Connected Return */
      ord_less_return_           := ord_less_return_ + Mpccom_Accounting_API.Get_Sum_Value(invhist_rec.accounting_id, 'M77'); /* Cost of Goods Sold, Orderless Return       */
   END LOOP;

   int_sales_sum_       := int_sales_sum_ * (-1);
   cost_difference_     := cost_difference_ * (-1);
   /* External cost of sales should be adjusted with what ever the customer has returned */
   ext_cost_sales_sum_  := ext_cost_sales_sum_ + ord_conn_return_ + ord_less_return_;
   total_sales_         := ext_sales_sum_ + int_sales_sum_;
   total_cost_of_sales_ := ext_cost_sales_sum_ + int_cost_of_sales_sum_ + int_purchase_cost_sum_ + int_purchase_cost_adj_sum_;
   
   gross_profit_        := total_sales_   - total_cost_of_sales_;
   net_profit_          := gross_profit_  + cost_difference_;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', part_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_YEAR_NO', year_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_PERIOD_NO', period_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'EXTERNAL_SALES', ext_sales_sum_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'INTERNAL_SALES', int_sales_sum_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_SALES', total_sales_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'EXTERNAL_COST_OF_SALES', ext_cost_sales_sum_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'INTERNAL_COST_OF_SALES', int_cost_of_sales_sum_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'INTERNAL_PURCHASE_COSTS', int_purchase_cost_sum_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'INTERNAL_PURCHASE_COST_ADJ', int_purchase_cost_adj_sum_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COST_OF_SALES', total_cost_of_sales_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_PROFIT', gross_profit_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COST_DIFFERENCE', cost_difference_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'NET_PROFIT', net_profit_);
   END IF;

   IF (do_rs_) THEN
      INSERT INTO &TABLE (
         result_key, row_no,
         PARENT_ROW_NO,
         &CONTRACT, &PART_NO, &STAT_YEAR_NO, &STAT_PERIOD_NO,
         &EXTERNAL_SALES, &INTERNAL_SALES, &TOTAL_SALES,
         &EXTERNAL_COST_OF_SALES, &INTERNAL_COST_OF_SALES, &INTERNAL_PURCHASE_COSTS,
         &INTERNAL_PURCHASE_COST_ADJ, &TOTAL_COST_OF_SALES, &GROSS_PROFIT, &COST_DIFFERENCE, &NET_PROFIT )
      VALUES (
         result_key_, row_no_,
         1,
         contract_, part_no_, year_, period_,
         ext_sales_sum_, int_sales_sum_, total_sales_,
         ext_cost_sales_sum_, int_cost_of_sales_sum_, int_purchase_cost_sum_,
         int_purchase_cost_adj_sum_, total_cost_of_sales_, gross_profit_, cost_difference_, net_profit_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

   logotype_     :=  Company_API.Get_Logotype(company_);
   company_name_ := Site_API.Get_Company_Address_Name(contract_); 

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);         
   END IF;
END &METHOD;


-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE CONTRACT
UNDEFINE PART_NO
UNDEFINE STAT_YEAR_NO
UNDEFINE STAT_PERIOD_NO
UNDEFINE EXTERNAL_SALES
UNDEFINE INTERNAL_SALES
UNDEFINE TOTAL_SALES
UNDEFINE EXTERNAL_COST_OF_SALES
UNDEFINE INTERNAL_COST_OF_SALES
UNDEFINE INTERNAL_PURCHASE_COSTS
UNDEFINE INTERNAL_PURCHASE_COST_ADJ
UNDEFINE TOTAL_COST_OF_SALES
UNDEFINE GROSS_PROFIT
UNDEFINE COST_DIFFERENCE
UNDEFINE NET_PROFIT
