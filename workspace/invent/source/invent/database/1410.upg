----------------------------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: Upgrade of INVENT database objects from release 14.0.0 to 14.1.0.
--
--  File   : 1410.upg
--
--  IFS/Design Template Version 2.3
--
--  Date    Sign    History
--  ------  ------  -------------------------------------------------------------------------
--  210609  JaThlk   SC21R2-1454, Modified Timestamp_116 to remove unnecessary comma to avoid deployment errors.
--  210513  NiDalk   Bug 159243(SCZ-14593), Modified Timestamp_116 to support different sales parts connected to the same inventory part.
--  200205  SBalLK   Bug 152386(SCZ-8795), Modified Timestamp_131 PLSQL block by Removing key concatenation on AssortmentNode and AssortmentStructureLevel LUs and
--  200205           used key search instead.
--  171020  MaAuse   STRSC-13164, Corrected DB Errors.
--  171013  MaAuse   STRSC-11451, Added ORACLE DEFAULT value feature when adding NOT NULL column to a table to improve performance.
--  170809  ChFolk   STRSC-11223, Modified updating columns rowstate and rowversion in COUNTING_RESULT_TAB to avoid oracle error when modifying them as mandatory.
--  170309  RuLiLk   Bug 134646, Removed the Begin End Block in Timestamp_120. Added COMMIT to Timestamp_214 and Timestamp_224.
--  160219  JeLise   STRSC-296, Removed creation of dummy views used by ORDER_SUPPLY_DEMAND_EXT.
--  160126  JeLise   LIM-5984, Removed creation of dummy view PROJECT_RESERVED_MATERIAL_RES.
--  151014  NiDalk   Bug 125206, Removed release_no column size change of SHORT_PART_INCREASE_HIST_TAB.
--  151104  HaPulk   STRSC-298, Removal of Dummy view creation for ORDER_SUPPLY_DEMAND_MS
--  150821  HaPulk   ORA-202,   Renamed INVENTORY_LOCATION_TAB where LCS Bug:105718 is installed but not the cl.sql yet.
--  150313  MaEelk   PRSC-6340, Created the dummy view WO_ORDER_REPAIR_EXT to avoid compilation errors.
--  150120  PraWlk   PRSC-5103, Removed ROWKEY from INVENT_INFO_SERVICES_RPT and index INVENT_INFO_SERVICES_RPT_RK.
--  150116  UdGnlk   PRSC-4500, Removed temporarily added dbms output as the issue is solved by technical team.
--  150113  MaEelk   PRSC-4978, Length of the PART_NO was increased to VARCHAR2(2000) in COUNTING_REPORT_TAB.
--  150113  JeLise   PRSC-4968, Moved insert of data into handling_unit_tab to 1410.upg in ORDER due to upgrade error.
--  141230  PraWlk   PRSC-4787, Updated the null values in column rowtype with 'DUMMY_UPGRADE' and set it mandatory in inventory_part_char_tab.
--  141208  AwWelk   GEN-239, Bundled all adding of columns, making columns mandatory together into one section in COMPANY_INVENT_INFO_TAB.
--  141205  UdGnlk   PRSC-4500, Added dbms output temporarily in order to track the build issue.
--  141122  NipKlk   PRSC-4354, Removed Unnecessary COMMIT for creating index WAREHOUSE_BAY_BIN_UIX2 for the table WAREHOUSE_BAY_BIN_TAB.
--  141204  HaPulk   PRSC-3997, Rename Index WAREHOUSE_BAY_BIN_UIX2 to align with the standard
--  141128  SBalLK   PRSC-3709, Added DELIVERY_TERMS and DEL_TERMS_LOCATION column to the SITE_TO_SITE_LEADTIME_TAB and SITE_TO_SITE_PART_LEADTIME_TAB tables.
--  141126  UdGnlk   PRSC-4388, Modified data updation of INVENTORY_PART_AT_CUSTOMER_TAB from CUSTOMER_CONSIGNMENT_STOCK_TAB.
--  141123  IsSalk   PRSC-1871, Added column RESET_CONFIG_STD_COST to the tables INVENTORY_PART_TAB and SITE_INVENT_INFO_TAB.
--  141122  AwWelk   GEN-232, Modified abc_frequency_lifecycle_tab update statments and table alternations by merging the possible operations.
--  141122  NipKlk   PRSC-4354, Added new unique index WAREHOUSE_BAY_BIN_UIX2 for the table WAREHOUSE_BAY_BIN_TAB on the column LOCATION_SEQUENCE.
--  141105  AwWelk   GEN-184, Modified EXPIRED_TO_MATURE_ISSUES field to EXPIRED_TO_INTRO_ISSUES.
--  141106  LEPESE   PRSC-2214, Added column AVAILABILITY_CONTROL_ID to INVENTORY_TRANSACTION_HIST_TAB.
--  141105  ChBnlk   PRSC-4096, Added new index MATERIAL_REQUIS_LINE_2_IX for the table MATERIAL_REQUIS_LINE_TAB on the column ACTIVITY_SEQ.
--  141030  HaPulk   PRSC-3997, Renamed index PUTAWAY_TO_EMPTY_EVENT_1_IX to align with the standard.
--  141030  MaEelk   PRSC-3299, Added LOCATION_GROUP to the COUNTING_REPORT_TAB.
--  141029  JeLise   PRSC-3299, Added WAREHOUSE_ID, BAY_ID, TIER_ID, ROW_ID, BIN_ID, STORAGE_ZONE_ID, PART_NO, ABC_CLASS, FREQUENCY_CLASS and
--  141029           LIFECYCLE_STAGE to COUNTING_REPORT_TAB.
--  141029  AwWelk   GEN-166, Added DECLINE_DATE, EXPIRED_DATE, DECLINE_ISSUE_COUNTER and EXPIRED_ISSUE_COUNTER to INVENTORY_PART_TAB.
--  141024  AwWeLK   GEN-157, Added DECLINE_TO_MATURE_ISSUES and EXPIRED_TO_MATURE_ISSUES columns to both ASSET_CLASS_TAB and COMPANY_INVENT_INFO_TAB.
--  141022  AwWelk   GEN-42,Added UPPER_LIMIT_VERYSLOW_MOVER to ASSET_CLASS_TAB and SITE_INVENT_INFO_TAB.
--  141008  Erlise   PRSC-3409, Corrected column VOLUME_CAPACITY in table WAREHOUSE_BAY_BIN_TAB.
--  141007  DaZase   PRSC-63, Added new index INVENTORY_PART_BARCODE_IX1 to INVENTORY_PART_BARCODE_TAB.
--  141003  MaEelk   Removed the view existency check when creating PROJECT_RESERVED_MATERIAL_RES in order to stop upgrade errors.
--  140929  ErFelk   PRSC-2674, Added columns DEC_NUMBER_EXPORT, VERSION_EXPORT, DECLARATION_EXPORT, DEC_NUMBER_IMPORT, VERSION_IMPORT and DECLARATION_IMPORT to INTRASTAT_TAB.
--  140925  Erlise   Code clean up.
--  140925  HaPulk   PRSC-2481, Rename Indexes and Constraints
--  140919  AwWelk   GEN-30, Added contract column to ABC_FREQUENCY_LIFECYCLE_TAB and made it a primary key column.
--  140919  LEPESE   PRSC-2518, Created table putaway_to_empty_event_tab.
--  140918  MaEelk   Created the dummy view PROJECT_RESERVED_MATERIAL_RES in order to avoid deployment errors in INV_PART_STOCK_RESERVATION.
--  140912  MeAblk   Added column worker_group into warehouse_task_tab.
--  140911  Erlise   PRSC-2475, Added column RECEIPT_TO_OCCUPIED_BLOCKED to SITE_INVENT_INFO_TAB, WAREHOUSE_TAB, WAREHOUSE_BAY_TAB, WAREHOUSE_BAY_BIN_TAB, WAREHOUSE_BAY_ROW_TAB and WAREHOUSE_BAY_TIER_TAB.
--  140909  MaEelk   Added PARK_REASON_ID to the WAREHOUSE_TASK_TAB.
--  140905  MaEelk   Added WAREHOUSE_TASK_PARK_REASON_TAB to keep parking reasons done in Warehouse Task.
--  140820  MaEelk   Bug 118362, Stopped inserting null values into handling_unit_type_id in HANDLING_UNIT_TAB in order to avoid upgrade errors
--  140804  AwWelk   PRSC-1610, Removed the obsolete view TRANSPORT_TASK_MANAGER_LOCAL_2.
--  140728  AwWelk   PRSC-2011, Removed unsused sequences MPC_DOCUMENT_NO, MPC_PDM_ORDER_NO_SEQ and PT_INTRASTAT_SEQ.
--  140603  MAHPLK   PRSC-454, Modified WAREHOUSE_ID columns of STORAGE_ZONE_DETAIL_TAB as non-mandatory.
--  140509  UdGnlk   PBSC-9031, Merged bug 112507, Added new column ORIGINAL_AMOUNT to table INVENTORY_TRANSACTION_HIST_TAB.
--  140430  AwWelk   PBSC-8696, Made COLUMN SQL_WHERE_EXPRESSION IN SITE_PUTAWAY_ZONE_TAB adn INVENT_PART_PUTAWAY_ZONE_TAB TO nullable since it IS obsoleted.
--  140430           Increased the length of the COLUMN RETURN_REASON of INTRASTAT_LINE_TAB. Modified column PART_NO in COUNTING_REPORT_LINE_TAB as mandatory.
--  140430           Modified column rowversion in asset_class_company_tab and commodity_group_company_tab as mandatory.
--  140428  UdGnlk   PBSC-8604, Move code from PARTCA to INVENT handling of basic data translation removal of storage_capabil_req_group_tab,
--  140428           storage_capacity_req_group_tab and storage_cond_req_group_tab in order to correct upgrade installation issue from APP75.
--  140428  AwWelk   PBSC-8687, Correctly added the PACKING_INSTRUCTION_NODE_1_IX in PACKING_INSTRUCTION_NODE_TAB.
--  140425  AwWelk   PBSC-8601, Moved the COMPANY_INVENT_INFO_TAB corrections before the HANDLING_UNIT_TAB.
--  140424  DipeLK   PBFI-6775, Removed obsolete views which are no longer support for create company flow.
--  140423  SheWlk   PBMF-6350, Added code to create dummy view COMPATIBLE_UNIT_DEMAND_MS. Proper view created when deploying component CMPUNT.
--  140416  Awwelk   PBSC-8301, Updated existing data in site_invent_info_tab and inventory_part_tab by changing
--  140416           enumeration VALUE in field putaway_zone_refill_option from NO_AUTO_REFILL TO NO_REFILL.
--  140320  LEPESE   Adding creation of sequence INVENTORY_PUTAWAY_EVENT_ID. Creating table REMOTE_WHSE_REFILL_EVENT_TAB.
--  140317  MaEelk   Mofified the code inserting data into HANDLING_UNIT_TAB to support an upgrade from APP75 since the column SSCC does not exist in APP5 environment.
--  140313  ShKolk   Add new columns UOM_FOR_LENGTH,NO_OF_HANDLING_UNIT_LABELS to HANDLING_UNIT_TAB. Added columns GENERATE_SSCC_NO, PRINT_LABEL, NO_OF_HANDLING_UNIT_LABELS to HANDLING_UNIT_TYPE_TAB.
--  140313           Added column NO_OF_HANDLING_UNIT_LABELS to PACKING_INSTRUCTION_NODE_TAB.
--  140307  UdGnlk   PBSC-7670, Modified fo upgrade installation.
--  140219  MaEelk   PBSC-6980, Removed PERSON_ID column from the WAREHOUSE_TAB.
--  140212  AwWelk   PBSC-7180, Added missing column PERSON_ID to the WAREHOUSE_TAB.
--  140212  AwWelk   PBSC-7180, Added and set the column PUTAWAY_ZONE_REFILL_SOURCE to NOT NULL in table PART_AVAILABILITY_CONTROL_TAB.
--  140131  Matkse   Added columns nopall_drop_off_location_no and pallet_drop_off_location_no to WAREHOUSE_TAB and WAREHOUSE_BAY_TAB.
--  140108  AwWElk   PBSC-341, Modify column rowversion in warehouse_worker_group_tab as mandatory.
--  131217  ChJalk   PBSC-4862, Removed the referrences to Mrp_Rule as it is being obsoleted. Dropped the view and the package Mrp_Rule_API. Renamed the table to MRP_RULE_TAB_1400
--  131216  ChJalk   PBSC-5017, Reversed the correction done to make the column pallet_id mandotory.
--  131212  DhWelk   Created dummy view COMPATIBLE_UNIT_DEMAND_EXT. Proper view will be created when deploying CMPUNT component. Shows the materials demand for Compatible Units
--  131210  AwWelk   PBSC-240, Modified column rowversion in inventory_part_planner_tab as mandatory.
--  131209  UdGnlk   PBSC-4686, Modified column rowversion in inventory_part_char_tab as mandatory.
--  131114  AwWelk   PBSC-1045, Modified column description in special_code_of_movement_tab as mandatory.
--  131113  Asawlk   PBSC-248, Modified the length of column INVENTORY_VALUATION_METHOD to VARCHAR2(20) and made ROWVERSION mandatory in INVENTORY_TRANSACTION_HIST_TAB.
--  131111  ChJalk   PBSC-222, Modified the columns rowversion, rowstate and triangulation IN INTRASTAT_LINE_TAB to NOT NULL COLUMNS.
--  131111  AwWElk   PBSC-236, Modify column rowversion in inventory_part_in_stock_tab as mandatory.
--  131110  AwWelk   PBSC-305, Modified column internal_delivery_leadtime as mandatory in site_to_site_part_leadtime_tab.
--  131110  AwWelk   PBSC-316, Modified column description as mandatory in supply_chain_part_group_tab.
--  131110  AwWelk   PBSC-232, Modified column rowversion in inventory_part_def_loc_tab as mandatory.
--  131110  AwWelk   PBSC-275, Modified part_no, rowversion columns in material_requis_line_tab to mandatory columns.
--  131108  ChJalk   PBSC-252, Modified the column rowversion IN INVENTORY_VALUE_SIM_LINE_TAB to a NOT NULL COLUMN.
--  131108  ChJalk   PBSC-343, Modified the length of the column STATUS to 20 in WAREHOUSE_WORKER_GRP_TASK_TAB.
--  131108  AwWelk   PBSC-345, Modified column rowversion as mandatory and Modified the length of column worker_id, status in warehouse_worker_task_type_tab.
--  131108  ChJalk   PBSC-244, Modified the column rowversion IN INVENTORY_PRODUCT_CODE_TAB to a NOT NULL COLUMN.
--  131108  Asawlk   PBSC-221, Modified column rowversion in intrastat_tab as mandatory.
--  131108  ChJalk   PBSC-291, Modified the column rowversion IN PART_CATALOG_INVENT_ATTRIB_TAB to a NOT NULL COLUMN.
--  131108  ChJalk   PBSC-278, Modified the column rowversion IN MRP_RULE_TAB to a NOT NULL COLUMN.
--  131108  AwWelk   PBSC-297, Modified column rowversion in safety_instruction_tab as mandatory
--  131108  AwWelk   PBSC-342, Modified the length of column status in warehouse_worker_group_loc_tab.
--  131108  AwWelk   PBSC-274, Modified rowversion column as not nullable columns in material_requisition_tab.
--  131108  AwWelk   PBSC-208, Modified column region_name as mandatory in country_region_tab.
--  131108  AwWelk   PBSC-337, Modified rowstate and rowversion column as not nullable columns in warehouse_task_tab.
--  131108  ChJalk   PBSC-326, Modified the column PALLET_ID IN TRANSPORT_TASK_LINE_TAB to a NOT NULL COLUMN.
--  131108  AwWelk   PBSC-227, Modified rowversion column to a mandatory column in inventory_part_barcode_tab.
--  131108  AwWelk   PBSC-207, Modified rowstate and rowversion column as not nullable columns in counting_result_tab.
--  131108  AwWelk   PBSC-210, Modified description and rowversion columns in customs_statistics_number_tab to mandatory columns.
--  131108  AwWelk   PBSC-253,Modified column rowversion in inventory_value_simulation_tab as mandatory.
--  131108  AwWelk   PBSC-239, Modified column rowversion in inventory_part_period_hist_tab as mandatory.
--  131107  AwWelk   PBSC-276, Modified column rowversion in material_requis_pur_order_tab as mandatory.
--  131107  AwWelk   PBSC-323, Modified column rowversion in transport_task_tab as mandatory.
--  131107  ChJalk   PBSC-277, Modified the column ROWVERSION IN MATERIAL_REQUIS_RESERVAT_TAB to a NOT NULL COLUMN.
--  131107  AwWelk   PBSC-249, Modified complete_flag, rowversion in inventory_value_tab to mandatory columns.
--  131107  ChJalk   PBSC-338, Modifed column length of the columns STATUS and START_IN_STATUS to 20 and ROWVERSION to be NOT NULL in WAREHOUSE_TASK_TYPE_SETUP_TAB.
--  131107  ChJalk   PBSC-301, Modifed column length of the columns NEGATIVE_ON_HAND, PURCH_INV_VALUE_METHOD AND MANUF_INV_VALUE_METHOD to 20 IN SITE_INVENT_INFO_TAB.
--  131107  ChJalk   PBSC-288, Modified column rowversion in PART_AVAILABILITY_CONTROL_TAB as mandatory column. Made the length of the columns
--  131107           PART_SUPPLY_CONTROL, PART_RESERVATION_CONTROL, PART_ORDER_ISSUE_CONTROL, PART_MANUAL_RESERV_CTRL, PART_SCRAP_CONTROL, PART_COUNTING_CONTROL and PART_NOORDER_ISSUE_CONTROL to 20.
--  131107  AwWelk   PBSC-300, Modified the length of release_no column in short_part_increase_hist_tab.
--  131107  AwWelk   PBSC-325, Modified column rowversion in transport_task_line_tab as mandatory.
--  131107  ChJalk   PBSC-242, Modified column ROWVERSION to be NOT NULL in INVENTORY_PART_STATUS_PAR_TAB and updated the column with default value SYSDATE.
--  131106  AwWelk   PBSC-344, Modify column rowversion in warehouse_worker_loc_group_tab as mandatory column.
--  131106  ChJalk   PBSC-209, Modified column ROWSTATE to be NOT NULL in CREATE_PARTS_PER_SITE_HIST_TAB and updated the column with default value.
--  131106  ChJalk   PBSC-340, Modified column ROWVERSION to be NOT NULL in WAREHOUSE_WORKER_TAB and updated the column with default value SYSDATE.
--  131106  ChJalk   PBSC-245, Modified column ROWVERSION to be NOT NULL in INVENTORY_PRODUCT_FAMILY_TAB and updated the column with default value SYSDATE.
--  131106  UdGnlk   PBSC-205, Modified column ROWVERSION with SYSDATE and make it NOT NULL in COUNTING_REPORT_TAB, COUNTING_REPORT_LINE_TAB, INVENTORY_PART_TAB.
--  131106  AwWelk   PBSC-218, Modify column rowversion in inspection_rule_tab as mandatory.
--  131105  AwWelk   PBSC-299, Made the ROWVERSION column in SERVICE_RATE_TAB not null column.
--  131105  AwWelk   PBSC-219, Made the EXTENSION column datatype to NUMBER in INTERNAL_CUSTOMER_TAB.
--  131104  ChJalk   PBSC-241, Modified column ROWVERSION to be NOT NULL in INVENTORY_PART_PLANNING_TAB and updated the column with default value SYSDATE.
--  131105  UdGnlk   PBSC-196, Modified column ROWSTATE and make it NOT NULL in ASSORTMENT_STRUCTURE_TAB.
--  131104  ChJalk   PBSC-251, Modified column ROWVERSION to be NOT NULL in INVENTORY_VALUE_PART_TAB and updated the column with default value SYSDATE.
--  131104  AwWelk   PBSC-304, Modified INTERNAL_DELIVERY_LEADTIME column to a not null column in SITE_TO_SITE_LEADTIME_TAB.
--  131101  UdGnlk   PBSC-182, Modified column ROWVERSION with SYSDATE and make it NOT NULL in ABC_CLASS_TAB, ACCOUNTING_GROUP_TAB, ASSET_CLASS_TAB, COMMODITY_GROUP_TAB.
--  131023  UdGnlk   Modified INVENTORY_PART_AT_CUSTOMER_TAB logic to compare with key list.
--  131018  JeLise   Added column ORDER_PROCESSING_TYPE to REMOTE_WHSE_ASSORTMENT_TAB.
--  131017  Matkse   Added TRANSPORT_TO_WHSE_LEVEL and TRANSPORT_FROM_WHSE_LEVEL to WAREHOUSE_TAB.
--  131007  Matkse   Added PUTAWAY_ZONE_REFILL_SOURCE to PART_AVAILABILITY_CONTROL_TAB.
--  131014  UdGnlk   Merged EBALL_INVENT.cdb.
--  131002  MaEelk   APP8 - SP2 Merged. Added SET_SAFETY_STOCK_TO_ZERO to ABC_FREQUENCY_LIFECYCLE_TAB. Set FALSE to SET_SAFETY_STOCK_TO_ZERO.
--  131002           Added not null column DEFAULT_STATUS to INVENTORY_PART_STATUS_PAR_TAB. Renameed obsolete table INVENTORY_LOCATION_TAB.
--  131002           Removed Obsolete Manual PressObj entries from pres_object_security_tab and pres_object_tab. Removed translations for user defined basic data in InventoryproductCode,
--  131002           InventoryProductFamily, InventoryPartStatusPar and AssetClass, AdditionalShippingDesc, AssortmentNode, AssortmentStructureLevel, AssortmentStructure,
--  131002           CustomsStatisticsNumber, InspectionRule, MrpRule, ProperShippingName, StorageCapability, Substance LUs. Removed region code 99 to add same region code with a new description.
--  131002           Added UNIT_STATISTICAL_CHARGE_DIFF to INTRASTAT_LINE_TAB. Updating the column Std_Name_Id in Inventory_Part_Tab to NULL when it is similar to the Std_Name_Id in Part Catalog.
--  131002           Updated the column Negative_On_Hand in Inventory_Part_Tab to NEG ONHAND NOT OK when it is a serial or lot tracked part in Part Catalog and when the Catch Unit is enabled.
--  131002           Added bin_volume_capacity to BIN_VOLUME_CAPACITY to SITE_INVENT_INFO_TAB,WAREHOUSE_TAB,WAREHOUSE_BAY_TAB,WAREHOUSE_BAY_ROW_TAB,WAREHOUSE_BAY_TIER_TAB. Added volume_capacity to WAREHOUSE_BAY_BIN_TAB.
--  131002           Added columns OWNERSHIP_TRANSFER_POINT, KEEP_ENG_REV_SITE_MOVE, STOCK_CTRL_TYPES_BLOCKED, UOM_FOR_VOLUME, UOM_FOR_WEIGHT, UOM_FOR_LENGTH, UOM_FOR_TEMPERATURE and UOM_FOR_DENSITY to COMPANY_INVENT_INFO_TAB.
--  131002           Increased the length of column CUSTOMS_STAT_NO to VARCHAR2(15) in CUSTOMS_STATISTICS_NUMBER_TAB, INTRASTAT_LINE_TAB, INVENTORY_PART_TAB and ASSORTMENT_INVENT_DEF_TAB
--  130919  MaEelk   TAL_Invent.cdb merged.
--                   Added tables HANDLING_UNIT_TYPE_TAB, HANDLE_UNIT_ACCESSORY_TAB, HANDLING_UNIT_CATEGORY_TAB, CAPACITY_GRP_HANDLING_UNIT_TAB, PART_HANDLING_UNIT_TAB,
--                   STORAGE_ZONE_TAB, STORAGE_ZONE_DETAIL_TAB, HANDLING_UNIT_TAB, ACCESSORY_ON_HANDLING_UNIT_TAB, PACKING_INSTRUCTION_TAB, PACKING_INSTRUCTION_NODE_TAB,
--                   PACK_INSTR_NODE_ACCESSORY_TAB, SSCC_BASIC_DATA_TAB and SSCC_HANDLING_UNIT_TYPE_TAB.
--                   Added columns ROUTE_ID, PICKING_LEADTIME, SHIPMENT_TYPE, SHIP_INVENTORY_LOCATION_NO to SITE_TO_SITE_LEADTIME_TAB.
--                   Added columns ROUTE_ID, PICKING_LEADTIME, SHIPMENT_TYPE, SHIP_INVENTORY_LOCATION_NO to SITE_TO_SITE_PART_LEADTIME_TAB.
--                   Added columns STORAGE_WIDTH_REQUIREMENT, STORAGE_HEIGHT_REQUIREMENT, STORAGE_DEPTH_REQUIREMENT, UOM_FOR_LENGTH, STORAGE_VOLUME_REQUIREMENT, UOM_FOR_VOLUME,
--                   STORAGE_WEIGHT_REQUIREMENT, UOM_FOR_WEIGHT, MIN_STORAGE_TEMPERATURE, MAX_STORAGE_TEMPERATURE, UOM_FOR_TEMPERATURE, MIN_STORAGE_HUMIDITY, MAX_STORAGE_HUMIDITY,
--                   CAPACITY_REQ_GROUP_ID, CONDITION_REQ_GROUP_ID, CAPABILITY_REQ_GROUP_ID to PART_CATALOG_INVENT_ATTRIB_TAB and copying data from PART_CATALOG_TAB
--                   Added not null column to WAREHOUSE_TAB, WAREHOUSE_BAY_TAB, WAREHOUSE_BAY_ROW_TAB, WAREHOUSE_BAY_TIER_TAB, WAREHOUSE_BAY_BIN_TAB
--                   Added new column STORAGE_ZONE_ID to INVENT_PART_PUTAWAY_ZONE_TAB and SITE_PUTAWAY_ZONE_TAB. Created temporary table BIN_IN_BETTER_ZONE_TMP
--                   Added WAREHOUSE_ROUTE_ORDER, BAY_ROUTE_ORDER, ROW_ROUTE_ORDER, TIER_ROUTE_ORDER, BIN_ROUTE_ORDER columns to COUNTING_REPORT_LINE_TMP,
--                   INVENTORY_PART_AVAIL_STOCK_TMP and PUTAWAY_BIN_TMP. Removed  WAREHOUSE, BAY_NO, ROW_NO, TIER_NO, BIN_NO columns from COUNTING_REPORT_LINE_TMP.
--                   Added SHIPMENT_ID to CUSTOMER_ORDER_RES. Did necessary data migrations. Renamed tables PALLET_TYPE_TAB, PALLET_ACCESSORY_TAB and PALLET_TYPE_ACCESSORY_TAB.
--                   Removed packages PALLET_TYPE_API, PALLET_ACCESSORY_API, PALLET_TYPE_ACCESSORY_API and PALLET_TYPE_REUSABILITY_API.
--                   Removed views PALLET_TYPE, PALLET_ACCESSORY and PALLET_TYPE_ACCESSORY
--  130913  CHRALK   CONV-2440, Added dummy view for SUPPLIER_SHIPMENT_RESERVATION.
--  130912  DaZase   Added REMOVE_EXCESS_INVENTORY to REMOTE_WHSE_ASSORT_PART_TAB.
--  130909  RiLase   Added REFILL_SOURCE to REMOTE_WHSE_ASSORT_PART_TAB.
--  130826  Matkse   Added PUTAWAY_DESTINATION to WAREHOUSE_TAB
--  130826  Matkse   Added AUTO_REFILL_PUTAWAY_ZONES to WAREHOUSE_TAB
--  130823  Erlise   Added ALLOW_DEVIATING_AVAIL_CTRL to SITE_INVENT_INFO_TAB.
--  130823  Matkse   Removed ONLY_SCHEDULED_TASK_REFILL from WAREHOUSE_TAB.
--  130821  Matkse   Added PUTAWAY_ZONE_RANKING, PUTAWAY_MAX_BINS_PER_PART and APPEAR_AS_PUTAWAY_ZONE to WAREHOUSE_TAB.
--  130709  Matkse   Added ONLY_SCHEDULED_TASK_REFILL to WAREHOUSE_TAB.
--  130705  Matkse   Added ALLOW_DEVIATING_AVAIL_CTRL to TRANSPORT_TASK_LINE_TAB.
--  130702  RiLase   Added FORWARD_TO_LOCATION_NO to TRANSPORT_TASK_LINE_1_IX.
--  130617  RiLase   Added AUTO_DROPOF_MAN_TRANS_TASK to SITE_INVENT_INFO_TAB. Added view drop for TRANSPORT_TASK_LINE_PUB.
--  130611  RiLase   Added FORWARD_TO_LOCATION_NO to TRANSPORT_TASK_LINE_TAB.
--  130610  RiLase   Added columns NOPALL_DROP_OFF_BAY_ID, NOPALL_DROP_OFF_TIER_ID, NOPALL_DROP_OFF_ROW_ID, NOPALL_DROP_OFF_BIN_ID,
--  130610           PALLET_DROP_OFF_BAY_ID, PALLET_DROP_OFF_TIER_ID, PALLET_DROP_OFF_ROW_ID, PALLET_DROP_OFF_BIN_ID to WAREHOUSE_BAY_TAB.
--  130529  RiLase   Added columns NOPALL_DROP_OFF_WHSE_ID, NOPALL_DROP_OFF_BAY_ID, NOPALL_DROP_OFF_TIER_ID, NOPALL_DROP_OFF_ROW_ID,
--  130529           NOPALL_DROP_OFF_BIN_ID, PALLET_DROP_OFF_WAREHOUSE_ID,PALLET_DROP_OFF_BAY_ID, PALLET_DROP_OFF_TIER_ID, PALLET_DROP_OFF_ROW_ID,
--  130529           PALLET_DROP_OFF_BIN_ID to WAREHOUSE_TAB.
--  130527  Erlise   Added column AVAILABILITY_CONTROL_ID to WAREHOUSE_TAB, WAREHOUSE_BAY_TAB, WAREHOUSE_BAY_BIN_TAB, WAREHOUSE_BAY_ROW_TAB, WAREHOUSE_BAY_TIER_TAB.
--  130429  DaZase   Added creation of table REMOTE_WHSE_ASSORT_CONNECT_TAB.
--  130424  DaZase   Added creation of tables REMOTE_WHSE_ASSORTMENT_TAB, REMOTE_WHSE_ASSORT_PART_TAB
--  130424           and REMOTE_WHSE_ASSORT_SITE_TAB.
--  130419  DaZase   Created. Added column REMOTE_WAREHOUSE to WAREHOUSE_TAB.
-----------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_1');
PROMPT Start upgrading with 1410.upg

------------------------------------------------------------------------------------------
---------------------------- Instructions for upg files ----------------------------------
------------------------------------------------------------------------------------------

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-----" line and a empty line.
-- This section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line explaining what is done by the block.

-- If the Pl/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any Table/Column !

-- Don't forget performance when updating large table !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL commands
-- If possible, try to group several updates together in one statement.

-- For more information refer the "Upgrade Script Standards document and the Performance Guide.

-- Timestamps will be added automatically at the end of the project.


---------------------------------------------------------------------------------------------
--------------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ----------------------
---------------------------------------------------------------------------------------------

-- ****** Transport Task Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_2');
PROMPT Adding columns to TABLE TRANSPORT_TASK_LINE_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_TO_LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('ALLOW_DEVIATING_AVAIL_CTRL', 'VARCHAR(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_3');
PROMPT Creating INDEX TRANSPORT_TASK_LINE_1_IX for TRANSPORT_TASK_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
   index_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_1_IX';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_TASK_STATUS');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'TO_CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'TO_LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_TO_LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ****** Transport Task End ******

-- ****** Remote_Whse_Assortment_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_4');
PROMPT Creating TABLE REMOTE_WHSE_ASSORTMENT_TAB AND constraints.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORTMENT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRIORITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FOR_ALL_SITES', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_PROCESSING_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORTMENT_TAB';
   index_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORTMENT_PK';
   rkidx_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORTMENT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ****** Remote_Whse_Assortment_Tab End ******

-- ****** Remote_Whse_Assort_Site_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_5');
PROMPT Creating TABLE REMOTE_WHSE_ASSORT_SITE_TAB AND constraints.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_SITE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_SITE_TAB';
   index_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_SITE_PK';
   rkidx_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_SITE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ****** Remote_Whse_Assort_Site_Tab End ******

-- ****** Remote_Whse_Assort_Connect_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_6');
PROMPT Creating TABLE REMOTE_WHSE_ASSORT_CONNECT_TAB AND constraints.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_CONNECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_CONNECT_TAB';
   index_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_CONNECT_PK';
   rkidx_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_CONNECT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ****** Remote_Whse_Assort_Connect_Tab End ******

-- ****** Remote_Whse_Assort_Part_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_7');
PROMPT Creating TABLE REMOTE_WHSE_ASSORT_PART_TAB AND constraints.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_PART_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REFILL_POINT_QTY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REFILL_TO_QTY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REFILL_SOURCE', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REMOVE_EXCESS_INVENTORY', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_PART_TAB';
   index_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_PART_PK';
   rkidx_name_ VARCHAR2(30) := 'REMOTE_WHSE_ASSORT_PART_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ****** Remote_Whse_Assort_Part_Tab End ******

-- ****** Supply_Demand_Info_Tmp Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_8');
PROMPT Creating table SUPPLY_DEMAND_INFO_TMP
DECLARE
   table_name_  VARCHAR2(30) := 'SUPPLY_DEMAND_INFO_TMP';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO',                  'VARCHAR2(40)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO',                   'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO',                    'VARCHAR2(40)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO',              'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_SUPPLY_DEMAND_TYPE',  'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',                   'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',                  'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',          'VARCHAR2(50)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_SHORT',                 'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_SUPPLY',                'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_DEMAND',                'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_RESERVED',              'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_PEGGED',                'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION_CODE',            'VARCHAR2(30)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'STATUS_CODE',               'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATE_REQUIRED',             'DATE',           'Y');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',               'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID',                'VARCHAR2(10)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',              'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'INFO',                      'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STATUS_DESC',               'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SORT_ORDER',                'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLY_DEMAND_SOURCE',      'VARCHAR2(30)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SNAPSHOT_ID',               'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                'DATE',           'N');
   Database_SYS.Create_Or_Replace_Table (table_name_, columns_, '&IFSAPP_DATA');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_9');
PROMPT Create new index SUPPLY_DEMAND_INFO_1_IX on SUPPLY_DEMAND_INFO_TMP
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'SUPPLY_DEMAND_INFO_TMP';
   index_name_  VARCHAR2(30)  := 'SUPPLY_DEMAND_INFO_1_IX';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SNAPSHOT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLY_DEMAND_SOURCE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ****** Supply_Demand_Info_Tmp End *****

---------------------------------------------------------------------------------------------

-- ****** Sup_Dem_Plannable_Info_Tmp Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_10');
PROMPT Creating table SUP_DEM_PLANNABLE_INFO_TMP
DECLARE
   table_name_  VARCHAR2(30) := 'SUP_DEM_PLANNABLE_INFO_TMP';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DATE_REQUIRED',             'DATE',           'Y');
   Database_SYS.Set_Table_Column(columns_, 'BALANCE',                   'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'BALANCE_NOT_RESERVED',      'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'BALANCE_NOT_PEGGED',        'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'BALANCE_NOT_RES_NOT_PEG',   'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLY_DEMAND_SOURCE',      'VARCHAR2(30)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SNAPSHOT_ID',               'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                'DATE',           'N');
   Database_SYS.Create_Or_Replace_Table (table_name_, columns_, '&IFSAPP_DATA');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_11');
PROMPT Create new index SUP_DEM_PLANNABLE_INFO_1_IX on SUP_DEM_PLANNABLE_INFO_TMP
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'SUP_DEM_PLANNABLE_INFO_TMP';
   index_name_  VARCHAR2(30)  := 'SUP_DEM_PLANNABLE_INFO_1_IX';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SNAPSHOT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLY_DEMAND_SOURCE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ****** Sup_Dem_Plannable_Info_Tmp End *****


---------------------------------------------------------------------------------------------

-- ***** SITE_TO_SITE_LEADTIME_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_12');
PROMPT Adding columns ROUTE_ID, PICKING_LEADTIME, SHIPMENT_TYPE, SHIP_INVENTORY_LOCATION_NO, DELIVERY_TERMS, DEL_TERMS_LOCATION to SITE_TO_SITE_LEADTIME_TAB.
DECLARE
   column_ Database_SYS.ColRec;
   table_name_  VARCHAR2(30) := 'SITE_TO_SITE_LEADTIME_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROUTE_ID', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_INVENTORY_LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('FORWARD_AGENT_ID', 'VARCHAR2(20)','Y');
   Database_SYS.Alter_Table_Column(table_name_,'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   column_ := Database_SYS.Set_Column_Values('DEL_TERMS_LOCATION', 'VARCHAR2(100)', 'Y' );
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_13');
PROMPT Update NULL values of INTERNAL_DELIVERY_LEADTIME column in SITE_TO_SITE_LEADTIME_TAB with a dummy value

UPDATE site_to_site_leadtime_tab
SET    internal_delivery_leadtime = -999999999999
WHERE  internal_delivery_leadtime IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_14');
PROMPT Modify INTERNAL_DELIVERY_LEADTIME column in SITE_TO_SITE_LEADTIME_TAB a mandatory column

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SITE_TO_SITE_LEADTIME_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('INTERNAL_DELIVERY_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** SITE_TO_SITE_LEADTIME_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SITE_TO_SITE_PART_LEADTIME_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_15');
PROMPT Adding columns ROUTE_ID, PICKING_LEADTIME, SHIPMENT_TYPE, DELIVERY_TERMS, DEL_TERMS_LOCATION to SITE_TO_SITE_PART_LEADTIME_TAB.

DECLARE
   column_ Database_SYS.ColRec;
   table_name_  VARCHAR2(30) := 'SITE_TO_SITE_PART_LEADTIME_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROUTE_ID', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('FORWARD_AGENT_ID', 'VARCHAR2(20)','Y');
   Database_SYS.Alter_Table_Column(table_name_,'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   column_ := Database_SYS.Set_Column_Values('DEL_TERMS_LOCATION', 'VARCHAR2(100)', 'Y' );
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_16');
PROMPT Updating internal_delivery_leadtime in site_to_site_part_leadtime_tab

UPDATE site_to_site_part_leadtime_tab
SET    internal_delivery_leadtime = -999999999999
WHERE  internal_delivery_leadtime IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_17');
PROMPT Modify column internal_delivery_leadtime as mandatory in site_to_site_part_leadtime_tab

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SITE_TO_SITE_PART_LEADTIME_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('INTERNAL_DELIVERY_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** SITE_TO_SITE_PART_LEADTIME_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_18');
PROMPT Creating table HANDLING_UNIT_TYPE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID',      'VARCHAR2(25)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',                'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID',  'VARCHAR2(25)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH',                      'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT',                     'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH',                      'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'VOLUME',                     'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'TARE_WEIGHT',                'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH',             'VARCHAR2(30)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME',             'VARCHAR2(30)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT',             'VARCHAR2(30)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDITIVE_VOLUME',            'VARCHAR2(20)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_VOLUME_CAPACITY',        'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_WEIGHT_CAPACITY',        'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'STACKABLE',                  'VARCHAR2(20)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'COST',                       'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE',              'VARCHAR2(3)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'GENERATE_SSCC_NO',           'VARCHAR2(20)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_LABEL',                'VARCHAR2(20)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'NO_OF_HANDLING_UNIT_LABELS', 'NUMBER',        'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',          'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                     'VARCHAR2(50)',  'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_19');
PROMPT Creating Constraint for HANDLING_UNIT_TYPE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TYPE_TAB';
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_TYPE_PK';
   rkidx_name_ VARCHAR2(30) := 'HANDLING_UNIT_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_20');
PROMPT Upgrading data from package_type_tab and pallet_type_tab to handling_unit_type_tab.
BEGIN
   IF (Database_SYS.Table_Exist('pallet_type_tab')) THEN
      EXECUTE IMMEDIATE
            'BEGIN
                INSERT
                   INTO handling_unit_type_tab (
                      handling_unit_type_id,
                      description,
                      handling_unit_category_id,
                      tare_weight,
                      volume,
                      uom_for_weight,
                      uom_for_volume,
                      additive_volume,
                      stackable,
                      generate_sscc_no,
                      print_label,
                      no_of_handling_unit_labels,
                      rowversion)
                   SELECT pallet_type,
                          NVL(description, pallet_type),
                          ''PALLET'',
                          weight,
                          volume,
                          uom_for_weight,
                          uom_for_volume,
                          ''FALSE'',
                          ''FALSE'',
                          ''FALSE'',
                          ''FALSE'',
                          1,
                          SYSDATE
                   FROM pallet_type_tab p
                   WHERE NOT EXISTS (SELECT 1
                                     FROM handling_unit_type_tab h
                                     WHERE p.pallet_type = h.handling_unit_type_id);
                COMMIT;
             END;';
   END IF;

   IF ((Database_SYS.Table_Exist('package_type_tab')) AND (Database_SYS.Table_Exist('package_type_price_tab'))) THEN
      -- Insert all data from package_type_tab that does not have duplicate id with data from pallet_type_tab
      EXECUTE IMMEDIATE
            'BEGIN
               INSERT
                  INTO handling_unit_type_tab (
                     handling_unit_type_id,
                     description,
                     handling_unit_category_id,
                     tare_weight,
                     volume,
                     uom_for_weight,
                     uom_for_volume,
                     additive_volume,
                     stackable,
                     cost,
                     generate_sscc_no,
                     print_label,
                     no_of_handling_unit_labels,
                     rowversion)
                  SELECT p.package_type,
                         NVL(description, p.package_type),
                         ''PACKAGE'',
                         weight,
                         volume,
                         uom_for_weight,
                         uom_for_volume,
                         ''FALSE'',
                         ''FALSE'',
                         (SELECT pp.price
                          FROM package_type_price_tab pp
                          WHERE p.package_type = pp.package_type
                          AND   sysdate BETWEEN from_date AND to_date),
                         ''FALSE'',
                         ''FALSE'',
                         1,
                         SYSDATE
                  FROM package_type_tab p
                  WHERE NOT EXISTS (SELECT 1
                                    FROM handling_unit_type_tab h
                                    WHERE p.package_type = h.handling_unit_type_id);
                COMMIT;
             END;';
   END IF;

   IF ((Database_SYS.Table_Exist('pallet_type_tab')) AND (Database_SYS.Table_Exist('package_type_tab')) AND (Database_SYS.Table_Exist('package_type_price_tab'))) THEN
      -- Insert all data from package_type_tab that have duplicate id with data from pallet_type_tab
      EXECUTE IMMEDIATE
         'DECLARE
             suffix_ VARCHAR2(15) := ''- UPG DUPLICATE'';
          BEGIN
             INSERT
                INTO handling_unit_type_tab (
                     handling_unit_type_id,
                     description,
                     handling_unit_category_id,
                     tare_weight,
                     volume,
                     uom_for_weight,
                     uom_for_volume,
                     additive_volume,
                     stackable,
                     cost,
                     generate_sscc_no,
                     print_label,
                     no_of_handling_unit_labels,
                     rowversion)
                SELECT p.package_type||suffix_,
                       NVL(description, p.package_type),
                       ''PACKAGE'',
                       weight,
                       volume,
                       uom_for_weight,
                       uom_for_volume,
                       ''FALSE'',
                       ''FALSE'',
                       (SELECT pp.price
                        FROM package_type_price_tab pp
                        WHERE p.package_type = pp.package_type
                        AND   sysdate BETWEEN from_date AND to_date),
                       ''FALSE'',
                       ''FALSE'',
                       1,
                       SYSDATE
                 FROM package_type_tab p
                 WHERE NOT EXISTS (SELECT 1
                                   FROM handling_unit_type_tab h
                                   WHERE p.package_type||suffix_ = h.handling_unit_type_id)
                 AND   EXISTS (SELECT 1
                       FROM pallet_type_tab t
                       WHERE p.package_type = t.pallet_type);
              COMMIT;
           END;';
   END IF;

   -- Set default currency_code where cost is not null
   UPDATE handling_unit_type_tab
   SET currency_code = (SELECT currency_code
                        FROM company_finance_tab
                        WHERE company = User_Profile_SYS.Get_Default('COMPANY', Fnd_Session_API.Get_Fnd_User))
   WHERE cost IS NOT NULL;
   COMMIT;
END;
/
-- ***** HANDLING_UNIT_TYPE_TAB End *****

--------------------------------------------------------------------------------

-- ***** HANDLE_UNIT_ACCESSORY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_21');
PROMPT Creating new table HANDLE_UNIT_ACCESSORY_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'HANDLE_UNIT_ACCESSORY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID', 'VARCHAR2(25)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',                'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_CODE',                  'VARCHAR2(30)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'WEIGHT',                     'NUMBER',        'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT',             'VARCHAR2(30)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'ADDITIVE_VOLUME',            'VARCHAR2(20)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'VOLUME',                     'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME',             'VARCHAR2(30)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',          'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                     'VARCHAR2(50)',  'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_22');
PROMPT Creating Constraint for HANDLE_UNIT_ACCESSORY_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'HANDLE_UNIT_ACCESSORY_TAB';
   index_name_ VARCHAR2(30) := 'HANDLE_UNIT_ACCESSORY_PK';
   rkidx_name_ VARCHAR2(30) := 'HANDLE_UNIT_ACCESSORY_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_23');
PROMPT Upgrading data from pallet_accessory_tab to HANDLE_UNIT_ACCESSORY_TAB.

BEGIN
   IF (Database_SYS.Table_Exist('pallet_accessory_tab')) THEN
      EXECUTE IMMEDIATE
         'BEGIN
             INSERT
                INTO handle_unit_accessory_tab (
                     handling_unit_accessory_id,
                     description,
                     unit_code,
                     weight,
                     volume,
                     uom_for_weight,
                     uom_for_volume,
                     additive_volume,
                     rowversion)
                 SELECT accessory_id, description, ''pcs'', weight, volume, uom_for_weight, uom_for_volume, ''FALSE'', SYSDATE
                 FROM pallet_accessory_tab p
                 WHERE NOT EXISTS (SELECT 1
                                   FROM handle_unit_accessory_tab h
                                   WHERE p.accessory_id = h.handling_unit_accessory_id);
             COMMIT;
          END;';
   END IF;
END;
/

-- ***** HANDLE_UNIT_ACCESSORY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_CATEGORY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_24');
PROMPT Creating new table HANDLING_UNIT_CATEGORY_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_CATEGORY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID', 'VARCHAR2(25)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',               'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                'DATE',          'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                    'VARCHAR2(50)',  'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_25');
PROMPT Creating Constraint for HANDLING_UNIT_CATEGORY_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_CATEGORY_TAB';
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_CATEGORY_PK';
   rkidx_name_ VARCHAR2(30) := 'HANDLING_UNIT_CATEGORY_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_26');
PROMPT Inserting default data into HANDLING_UNIT_CATEGORY_TAB.
BEGIN
   INSERT
      INTO handling_unit_category_tab (
         handling_unit_category_id,
         description,
         rowversion)
      VALUES (
         'PALLET',
         'Pallet',
         SYSDATE);
   -- Insert Data into Basic Data Translations tab
   Basic_Data_Translation_API.Insert_Basic_Data_Translation('INVENT',
                                                            'HandlingUnitCategory',
                                                            'PALLET',
                                                            NULL,
                                                            'Pallet');
   COMMIT;

   INSERT
      INTO handling_unit_category_tab (
         handling_unit_category_id,
         description,
         rowversion)
      VALUES (
         'PACKAGE',
         'Package',
         SYSDATE);
   -- Insert Data into Basic Data Translations tab
   Basic_Data_Translation_API.Insert_Basic_Data_Translation('INVENT',
                                                            'HandlingUnitCategory',
                                                            'PACKAGE',
                                                            NULL,
                                                            'Package');
   COMMIT;

EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;
END;
/

-- ***** HANDLING_UNIT_CATEGORY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PART_CATALOG_INVENT_ATTRIB_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_27');
PROMPT Adding new COLUMNS to PART_CATALOG_INVENT_ATTRIB_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'PART_CATALOG_INVENT_ATTRIB_TAB';
BEGIN
   Database_SYS.Reset_Column_Table (columns_ );
   Database_SYS.Set_Table_Column (columns_, 'STORAGE_WIDTH_REQUIREMENT',  'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'STORAGE_HEIGHT_REQUIREMENT', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'STORAGE_DEPTH_REQUIREMENT',  'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'UOM_FOR_LENGTH',             'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column (columns_, 'STORAGE_VOLUME_REQUIREMENT', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'UOM_FOR_VOLUME',             'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column (columns_, 'STORAGE_WEIGHT_REQUIREMENT', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'UOM_FOR_WEIGHT',             'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column (columns_, 'MIN_STORAGE_TEMPERATURE',    'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'MAX_STORAGE_TEMPERATURE',    'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'UOM_FOR_TEMPERATURE',        'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column (columns_, 'MIN_STORAGE_HUMIDITY',       'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'MAX_STORAGE_HUMIDITY',       'NUMBER',       'Y');
   Database_SYS.Set_Table_Column (columns_, 'CAPACITY_REQ_GROUP_ID',      'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column (columns_, 'CONDITION_REQ_GROUP_ID',     'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column (columns_, 'CAPABILITY_REQ_GROUP_ID',    'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_28');
PROMPT Updating all existing lines in part_catalog_invent_attrib_tab with storage requirement data.
UPDATE part_catalog_invent_attrib_tab ia
   SET (storage_width_requirement,
        storage_height_requirement,
        storage_depth_requirement,
        uom_for_length,
        storage_volume_requirement,
        uom_for_volume,
        storage_weight_requirement,
        uom_for_weight,
        min_storage_temperature,
        max_storage_temperature,
        uom_for_temperature,
        min_storage_humidity,
        max_storage_humidity,
        capacity_req_group_id,
        condition_req_group_id,
        capability_req_group_id) =
       (SELECT pc.storage_width_requirement,
               pc.storage_height_requirement,
               pc.storage_depth_requirement,
               pc.uom_for_length,
               pc.storage_volume_requirement,
               pc.uom_for_volume,
               pc.storage_weight_requirement,
               pc.uom_for_weight,
               pc.min_storage_temperature,
               pc.max_storage_temperature,
               pc.uom_for_temperature,
               pc.min_storage_humidity,
               pc.max_storage_humidity,
               pc.capacity_req_group_id,
               pc.condition_req_group_id,
               pc.capability_req_group_id
        FROM  part_catalog_tab pc
        WHERE ia.part_no = pc.part_no)
   WHERE storage_width_requirement IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_29');
PROMPT Adding existing storage requirement data from part_catalog_tab to part_catalog_invent_attrib_tab
INSERT
   INTO part_catalog_invent_attrib_tab (
      part_no,
      cold_sensitive,
      marine_pollutant,
      n_o_s,
      adr_environmental_hazard,
      iata_environmental_hazard,
      template_part,
      storage_width_requirement,
      storage_height_requirement,
      storage_depth_requirement,
      uom_for_length,
      storage_volume_requirement,
      uom_for_volume,
      storage_weight_requirement,
      uom_for_weight,
      min_storage_temperature,
      max_storage_temperature,
      uom_for_temperature,
      min_storage_humidity,
      max_storage_humidity,
      capacity_req_group_id,
      condition_req_group_id,
      capability_req_group_id,
      rowversion)
   SELECT part_no,
      'NOT COLD SENSITIVE',
      'NOT MARINE POLLUTANT',
      'FALSE',
      'FALSE',
      'FALSE',
      'FALSE',
      storage_width_requirement,
      storage_height_requirement,
      storage_depth_requirement,
      uom_for_length,
      storage_volume_requirement,
      uom_for_volume,
      storage_weight_requirement,
      uom_for_weight,
      min_storage_temperature,
      max_storage_temperature,
      uom_for_temperature,
      min_storage_humidity,
      max_storage_humidity,
      capacity_req_group_id,
      condition_req_group_id,
      capability_req_group_id,
      SYSDATE
   FROM part_catalog_tab pa
   WHERE NOT EXISTS (SELECT 1
                     FROM part_catalog_invent_attrib_tab ia
                     WHERE pa.part_no = ia.part_no)
   AND (uom_for_length IS NOT NULL OR
        uom_for_volume IS NOT NULL OR
        uom_for_weight IS NOT NULL OR
        uom_for_temperature IS NOT NULL OR
        min_storage_humidity IS NOT NULL OR
        max_storage_humidity IS NOT NULL OR
        capacity_req_group_id IS NOT NULL OR
        condition_req_group_id IS NOT NULL OR
        capability_req_group_id IS NOT NULL);
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_30');
PROMPT Updating the column ROWVERSION IN PART_CATALOG_INVENT_ATTRIB_TAB with default value
UPDATE part_catalog_invent_attrib_tab
   SET rowversion = SYSDATE
 WHERE rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_31');
PROMPT Changing COLUMN ROWVERSION to a NOT NULL COLUMN
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'PART_CATALOG_INVENT_ATTRIB_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** PART_CATALOG_INVENT_ATTRIB_TAB End *****

---------------------------------------------------------------------------------------------


-- ***** CAPACITY_GRP_HANDLING_UNIT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_32');
PROMPT Creating new table CAPACITY_GRP_HANDLING_UNIT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CAPACITY_GRP_HANDLING_UNIT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CAPACITY_REQ_GROUP_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_CODE',             'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_QUANTITY_CAPACITY', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',            'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_33');
PROMPT Creating Constraint for CAPACITY_GRP_HANDLING_UNIT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CAPACITY_GRP_HANDLING_UNIT_TAB';
   index_name_ VARCHAR2(30) := 'CAPACITY_GRP_HANDLING_UNIT_PK';
   rkidx_name_ VARCHAR2(30) := 'CAPACITY_GRP_HANDLING_UNIT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CAPACITY_REQ_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CAPACITY_GRP_HANDLING_UNIT_TAB End *****

---------------------------------------------------------------------------------------------


-- ***** PART_HANDLING_UNIT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_34');
PROMPT Creating new table PART_HANDLING_UNIT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PART_HANDLING_UNIT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',               'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_CODE',             'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_QUANTITY_CAPACITY', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',            'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_35');
PROMPT Creating Constraint for PART_HANDLING_UNIT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PART_HANDLING_UNIT_TAB';
   index_name_ VARCHAR2(30) := 'PART_HANDLING_UNIT_PK';
   rkidx_name_ VARCHAR2(30) := 'PART_HANDLING_UNIT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** PART_HANDLING_UNIT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_36');
PROMPT Adding columns to table WAREHOUSE_TAB.
DECLARE
   column_        Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AVAILABILITY_CONTROL_ID',       'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOPALL_DROP_OFF_LOCATION_NO',   'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PALLET_DROP_OFF_LOCATION_NO',   'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_ZONE_RANKING',          'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_MAX_BINS_PER_PART',     'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_FROM_WHSE_LEVEL',     'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER',                   'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_TO_WHSE_LEVEL',       'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_VOLUME_CAPACITY',           'NUMBER',       'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('REMOTE_WAREHOUSE', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('APPEAR_AS_PUTAWAY_ZONE', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('AUTO_REFILL_PUTAWAY_ZONES', 'VARCHAR(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('PUTAWAY_DESTINATION', 'VARCHAR(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('RECEIPT_TO_OCCUPIED_BLOCKED', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);   
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_37');
PROMPT Updating columns in WAREHOUSE_TAB
UPDATE WAREHOUSE_TAB
SET    route_order = warehouse_id
WHERE  route_order IS NULL;
COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_38');
PROMPT Setting columns to NOT NULL in TABLE WAREHOUSE_TAB.
DECLARE
   table_name_   VARCHAR2(30) := 'WAREHOUSE_TAB';
   columns_      Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);   
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER', 'VARCHAR2(15)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


-- ***** WAREHOUSE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_BAY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_39');
PROMPT Adding columns to table WAREHOUSE_BAY_TAB.
DECLARE
   column_        Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'WAREHOUSE_BAY_TAB';
   columns_      Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AVAILABILITY_CONTROL_ID',       'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOPALL_DROP_OFF_LOCATION_NO',   'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PALLET_DROP_OFF_LOCATION_NO',   'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER',                   'VARCHAR2(5)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_VOLUME_CAPACITY',           'NUMBER',       'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('RECEIPT_TO_OCCUPIED_BLOCKED', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_40');
PROMPT Updating columns in table WAREHOUSE_BAY_TAB.
UPDATE warehouse_bay_tab
   SET route_order = bay_id
   WHERE route_order IS NULL;
COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_41');
PROMPT Setting columns to NOT NULL in TABLE WAREHOUSE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


-- ***** WAREHOUSE_BAY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_BAY_ROW_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_42');
PROMPT Adding columns to table WAREHOUSE_BAY_ROW_TAB.
DECLARE
   column_        Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_ROW_TAB';
   columns_      Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AVAILABILITY_CONTROL_ID',     'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER',                 'VARCHAR2(5)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_VOLUME_CAPACITY',         'NUMBER',       'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('RECEIPT_TO_OCCUPIED_BLOCKED', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_43');
PROMPT Updating columns in table WAREHOUSE_BAY_ROW_TAB.
UPDATE warehouse_bay_row_tab
   SET route_order = row_id
   WHERE route_order IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_44');
PROMPT Setting columns to NOT NULL in TABLE WAREHOUSE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_ROW_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


-- ***** WAREHOUSE_BAY_ROW_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_BAY_TIER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_45');
PROMPT Adding columns to table WAREHOUSE_BAY_TIER_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_TIER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AVAILABILITY_CONTROL_ID',     'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER',                 'VARCHAR2(5)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_VOLUME_CAPACITY',         'NUMBER',       'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('RECEIPT_TO_OCCUPIED_BLOCKED', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_46');
PROMPT Updating columns in table WAREHOUSE_BAY_TIER_TAB.
   UPDATE warehouse_bay_tier_tab
   SET route_order = tier_id
   WHERE route_order IS NULL;
   COMMIT;
   
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_47');
PROMPT Setting columns to NOT NULL in TABLE WAREHOUSE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_TIER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** WAREHOUSE_BAY_TIER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_BAY_BIN_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_48');
PROMPT Adding columns to table WAREHOUSE_BAY_BIN_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_BIN_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AVAILABILITY_CONTROL_ID',     'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER',                 'VARCHAR2(5)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'VOLUME_CAPACITY',             'NUMBER',       'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('RECEIPT_TO_OCCUPIED_BLOCKED', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_49');
PROMPT Updating columns in table WAREHOUSE_BAY_BIN_TAB.
   UPDATE warehouse_bay_bin_tab
   SET route_order = bin_id
   WHERE route_order IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_50');
PROMPT Setting columns to NOT NULL in TABLE WAREHOUSE_BAY_BIN_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_BIN_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_51');
PROMPT Create new index on LOCATION_SEQUENCE in WAREHOUSE_BAY_BIN_TAB.
DECLARE
   columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_SEQUENCE');
   Database_SYS.Create_Index('WAREHOUSE_BAY_BIN_TAB', 'WAREHOUSE_BAY_BIN_UX2', columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


-- ***** WAREHOUSE_BAY_BIN_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** STORAGE_ZONE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_52');
PROMPT Creating new TABLE STORAGE_ZONE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'STORAGE_ZONE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',         'VARCHAR2(5)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID',  'VARCHAR2(30)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',      'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',       'DATE',          'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',           'VARCHAR2(50)',  'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_53');
PROMPT Creating Constraint for STORAGE_ZONE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'STORAGE_ZONE_TAB';
   index_name_ VARCHAR2(30) := 'STORAGE_ZONE_PK';
   rkidx_name_ VARCHAR2(30) := 'STORAGE_ZONE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** STORAGE_ZONE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** STORAGE_ZONE_DETAIL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_54');
PROMPT Creating new TABLE STORAGE_ZONE_DETAIL_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'STORAGE_ZONE_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',             'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID',      'VARCHAR2(30)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO',          'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID',         'VARCHAR2(200)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID',               'VARCHAR2(200)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID',              'VARCHAR2(200)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID',               'VARCHAR2(200)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID',               'VARCHAR2(200)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'SQL_WHERE_EXPRESSION', 'VARCHAR2(2000)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',           'DATE',           'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',               'VARCHAR2(50)',   'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_55');
PROMPT Creating Constraint for STORAGE_ZONE_DETAIL_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'STORAGE_ZONE_DETAIL_TAB';
   index_name_ VARCHAR2(30) := 'STORAGE_ZONE_DETAIL_PK';
   rkidx_name_ VARCHAR2(30) := 'STORAGE_ZONE_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID');
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** STORAGE_ZONE_DETAIL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** COMPANY_INVENT_INFO_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_56');
PROMPT Adding new columns to COMPANY_INVENT_INFO_TAB...
DECLARE
   table_name_ VARCHAR2(30):= 'COMPANY_INVENT_INFO_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'OWNERSHIP_TRANSFER_POINT', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'KEEP_ENG_REV_SITE_MOVE'  , 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STOCK_CTRL_TYPES_BLOCKED', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME'          , 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT'          , 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH'          , 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_TEMPERATURE'     , 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_DENSITY'         , 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DECLINE_TO_MATURE_ISSUES', 'NUMBER'      , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRED_TO_INTRO_ISSUES' , 'NUMBER'      , 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_57');
PROMPT Transfering the values of OWNERSHIP_TRANSFER_POINT, KEEP_ENG_REV_SITE_MOVE, STOCK_CTRL_TYPES_BLOCKED,
PROMPT UOM_FOR_VOLUME, UOM_FOR_WEIGHT, UOM_FOR_LENGTH, UOM_FOR_TEMPERATURE and UOM_FOR_DENSITY
PROMPT COMPANY_DISTRIBUTION_INFO_TAB to COMPANY_INVENT_INFO_TAB.
DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'COMPANY_DISTRIBUTION_INFO_TAB';
BEGIN
   -- block to use execute immediate to avoid compilation errors.
   IF (Database_SYS.Column_Exist(table_name_, 'OWNERSHIP_TRANSFER_POINT') AND Database_SYS.Column_Exist(table_name_, 'KEEP_ENG_REV_SITE_MOVE') AND
      Database_SYS.Column_Exist(table_name_, 'STOCK_CTRL_TYPES_BLOCKED') AND Database_SYS.Column_Exist(table_name_, 'UOM_FOR_VOLUME')         AND
      Database_SYS.Column_Exist(table_name_, 'UOM_FOR_WEIGHT')           AND Database_SYS.Column_Exist(table_name_, 'UOM_FOR_LENGTH')         AND
      Database_SYS.Column_Exist(table_name_, 'UOM_FOR_TEMPERATURE')      AND Database_SYS.Column_Exist(table_name_, 'UOM_FOR_DENSITY')) THEN

      stmt_ := 'UPDATE company_invent_info_tab cii
                   SET ownership_transfer_point = (SELECT cdi.ownership_transfer_point FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company),
                       keep_eng_rev_site_move   = (SELECT cdi.keep_eng_rev_site_move   FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company),
                       stock_ctrl_types_blocked = (SELECT cdi.stock_ctrl_types_blocked FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company),
                       uom_for_volume           = (SELECT cdi.uom_for_volume           FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company),
                       uom_for_weight           = (SELECT cdi.uom_for_weight           FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company),
                       uom_for_length           = (SELECT cdi.uom_for_length           FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company),
                       uom_for_temperature      = (SELECT cdi.uom_for_temperature      FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company),
                       uom_for_density          = (SELECT cdi.uom_for_density          FROM company_distribution_info_tab cdi WHERE cdi.company = cii.company)
                 WHERE ownership_transfer_point IS NULL';

      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

UPDATE COMPANY_INVENT_INFO_TAB
   SET DECLINE_TO_MATURE_ISSUES = 1,
       EXPIRED_TO_INTRO_ISSUES  = 1
 WHERE DECLINE_TO_MATURE_ISSUES IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_58');
PROMPT Making new columns IN COMPANY_INVENT_INFO_TAB mandatory...
DECLARE
   table_name_ VARCHAR2(30):= 'COMPANY_INVENT_INFO_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'OWNERSHIP_TRANSFER_POINT', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'KEEP_ENG_REV_SITE_MOVE'  , 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STOCK_CTRL_TYPES_BLOCKED', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME'          , 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT'          , 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH'          , 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_TEMPERATURE'     , 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_DENSITY'         , 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DECLINE_TO_MATURE_ISSUES', 'NUMBER'      , 'N');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRED_TO_INTRO_ISSUES' , 'NUMBER'      , 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** COMPANY_INVENT_INFO_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_59');
PROMPT Creating table HANDLING_UNIT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID',           'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID',      'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_HANDLING_UNIT_ID',    'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID',                'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH',                      'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT',                     'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH',                      'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_GROSS_WEIGHT',        'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'GENERATE_SSCC_NO',           'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_LABEL',                'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_PART_NO_BLOCKED',     'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_LOT_BATCH_BLOCKED',   'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_COND_CODE_BLOCKED',   'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_VOLUME',              'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'SSCC',                       'VARCHAR2(18)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_TRANSPORT_LABEL_ID',     'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH',             'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NO_OF_HANDLING_UNIT_LABELS', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                     'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_60');
PROMPT Creating Constraint for HANDLING_UNIT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   index_name_  VARCHAR2(30) := 'HANDLING_UNIT_PK';
   index1_name_ VARCHAR2(30) := 'HANDLING_UNIT_1_IX';
   rkidx_name_  VARCHAR2(30) := 'HANDLING_UNIT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Index(table_name_, index1_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


-- ***** HANDLING_UNIT_TAB End *****

---------------------------------------------------------------------------------------------


-- ***** ACCESSORY_ON_HANDLING_UNIT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_61');
PROMPT Creating table ACCESSORY_ON_HANDLING_UNIT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ACCESSORY_ON_HANDLING_UNIT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID',           'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY',                   'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                     'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_62');
PROMPT Creating Constraint for ACCESSORY_ON_HANDLING_UNIT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ACCESSORY_ON_HANDLING_UNIT_TAB';
   index_name_ VARCHAR2(30) := 'ACCESSORY_ON_HANDLING_UNIT_PK';
   rkidx_name_ VARCHAR2(30) := 'ACCESSORY_ON_HANDLING_UNIT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_63');
PROMPT Upgrading data from handling_unit_accessory_tab to accessory_on_handling_unit_tab structure on shipment.
BEGIN
   IF (Database_SYS.Table_Exist('handling_unit_accessory_tab')) THEN
      EXECUTE IMMEDIATE
        'DECLARE
         BEGIN
            INSERT
               INTO accessory_on_handling_unit_tab (
                  handling_unit_id,
                  handling_unit_accessory_id,
                  quantity,
                  rowversion)
               SELECT handling_unit_id,
                      accessory_id,
                      quantity,
                      sysdate
               FROM handling_unit_accessory_tab s
               WHERE NOT EXISTS (SELECT 1
                                 FROM accessory_on_handling_unit_tab h
                                 WHERE s.handling_unit_id = h.handling_unit_id);
          END;';
       COMMIT;
   END IF;
END;
/

-- ***** ACCESSORY_ON_HANDLING_UNIT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SITE_PUTAWAY_ZONE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_64');
PROMPT Adding new COLUMN storage_zone_id TO SITE_PUTAWAY_ZONE_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SITE_PUTAWAY_ZONE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('STORAGE_ZONE_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SQL_WHERE_EXPRESSION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('WAREHOUSE_ID', 'VARCHAR2(15)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_65');
PROMPT Updating column SQL_WHERE_EXPRESSION in table SITE_PUTAWAY_ZONE_TAB

BEGIN
   IF (Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'WAREHOUSE_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'BAY_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'ROW_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'TIER_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'BIN_ID')) THEN
      EXECUTE IMMEDIATE
         'DECLARE
            single_quote_ CONSTANT VARCHAR2(1) := CHR(39);
          BEGIN
            UPDATE SITE_PUTAWAY_ZONE_TAB
               SET   sql_where_expression = rtrim(NVL2(warehouse_id, ''warehouse_id = ''|| single_quote_ || warehouse_id || single_quote_ || '' AND '', NULL) ||
                                                  NVL2(bay_id,       ''bay_id = ''      || single_quote_ || bay_id       || single_quote_ || '' AND '', NULL) ||
                                                  NVL2(row_id,       ''row_id = ''      || single_quote_ || row_id       || single_quote_ || '' AND '', NULL) ||
                                                  NVL2(tier_id,      ''tier_id = ''     || single_quote_ || tier_id      || single_quote_ || '' AND '', NULL) ||
                                                  NVL2(bin_id,       ''bin_id = ''      || single_quote_ || bin_id       || single_quote_,            NULL), '' AND '')
             WHERE sql_where_expression IS NULL;
             COMMIT;
          END;';
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_66');
PROMPT Making COLUMN SQL_WHERE_EXPRESSION IN SITE_PUTAWAY_ZONE_TAB TO nullable since it IS obsoleted.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SQL_WHERE_EXPRESSION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column('SITE_PUTAWAY_ZONE_TAB', 'M', column_, TRUE);
END;
/

-- ***** SITE_PUTAWAY_ZONE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INVENT_PART_PUTAWAY_ZONE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_67');
PROMPT Adding new  COLUMN storage_zone_id TO INVENT_PART_PUTAWAY_ZONE_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENT_PART_PUTAWAY_ZONE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('STORAGE_ZONE_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SQL_WHERE_EXPRESSION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('WAREHOUSE_ID', 'VARCHAR2(15)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_68');
PROMPT Updating column SQL_WHERE_EXPRESSION in table INVENT_PART_PUTAWAY_ZONE_TAB

BEGIN
   IF (Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'WAREHOUSE_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'BAY_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'ROW_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'TIER_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'BIN_ID')) THEN
      EXECUTE IMMEDIATE
         'DECLARE
             single_quote_ CONSTANT VARCHAR2(1) := CHR(39);
          BEGIN
             UPDATE INVENT_PART_PUTAWAY_ZONE_TAB
                SET   sql_where_expression =  rtrim(NVL2(warehouse_id,''warehouse_id = '' || single_quote_ || warehouse_id || single_quote_||'' AND '', NULL) ||
                                                    NVL2(bay_id,      ''bay_id = ''       || single_quote_ || bay_id       || single_quote_||'' AND '', NULL) ||
                                                    NVL2(row_id,      ''row_id = ''       || single_quote_ || row_id       || single_quote_||'' AND '', NULL) ||
                                                    NVL2(tier_id,     ''tier_id = ''      || single_quote_ || tier_id      || single_quote_||'' AND '', NULL) ||
                                                    NVL2(bin_id,      ''bin_id = ''       || single_quote_ || bin_id       || single_quote_,          NULL), '' AND '')
              WHERE sql_where_expression IS NULL;
              COMMIT;
           END;';
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_69');
PROMPT Inserting Data INTO STORAGE_ZONE_TAB AND STORAGE_ZONE_DETAIL_TAB FROM SITE_PUTAWAY_ZONE_TAB AND INVENT_PART_PUTAWAY_ZONE_TAB
DECLARE
   stmt_ VARCHAR2(32000);
BEGIN
   IF (Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'WAREHOUSE_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'BAY_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'ROW_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'TIER_ID') AND
       Database_SYS.Column_Exist('SITE_PUTAWAY_ZONE_TAB', 'BIN_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'WAREHOUSE_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'BAY_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'ROW_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'TIER_ID') AND
       Database_SYS.Column_Exist('INVENT_PART_PUTAWAY_ZONE_TAB', 'BIN_ID')) THEN
      stmt_ := 'DECLARE
                  CURSOR get_putaway_zone IS
                     SELECT contract, warehouse_id, bay_id, tier_id, row_id, bin_id, sql_where_expression
                     FROM site_putaway_zone_tab
                     WHERE storage_zone_id IS NULL
                     UNION
                     SELECT contract, warehouse_id, bay_id, tier_id, row_id, bin_id, sql_where_expression
                     FROM invent_part_putaway_zone_tab
                     WHERE storage_zone_id IS NULL;

                  TYPE Putaway_Zone_Tab IS TABLE OF get_putaway_zone%ROWTYPE INDEX BY BINARY_INTEGER;
                  putaway_zone_tab_ Putaway_Zone_Tab;
                  single_quote_     CONSTANT VARCHAR2(1) := CHR(39);
                  string_null_      VARCHAR2(15) := Database_SYS.string_null_;
                BEGIN
                   OPEN  get_putaway_zone;
                   FETCH get_putaway_zone BULK COLLECT INTO putaway_zone_tab_;
                   CLOSE get_putaway_zone;

                   IF (putaway_zone_tab_.COUNT >0) THEN
                      FOR i IN putaway_zone_tab_.FIRST..putaway_zone_tab_.LAST LOOP
                         INSERT
                            INTO storage_zone_tab (
                               contract,
                               storage_zone_id,
                               description,
                               rowversion)
                            VALUES (
                               putaway_zone_tab_(i).contract,
                               i,
                               i,
                               SYSDATE);

                         INSERT
                            INTO storage_zone_detail_tab (
                               contract,
                               storage_zone_id,
                               sequence_no,
                               warehouse_id,
                               bay_id,
                               tier_id,
                               row_id,
                               bin_id,
                               sql_where_expression,
                               rowversion)
                            VALUES (
                               putaway_zone_tab_(i).contract,
                               i,
                               1,
                               putaway_zone_tab_(i).warehouse_id,
                               putaway_zone_tab_(i).bay_id,
                               putaway_zone_tab_(i).tier_id,
                               putaway_zone_tab_(i).row_id,
                               putaway_zone_tab_(i).bin_id,
                               putaway_zone_tab_(i).sql_where_expression,
                               SYSDATE);

                            UPDATE site_putaway_zone_tab
                            SET  storage_zone_id = i
                            WHERE contract             = putaway_zone_tab_(i).contract AND
                                  sql_where_expression = putaway_zone_tab_(i).sql_where_expression AND
                                  storage_zone_id IS NULL;

                            UPDATE invent_part_putaway_zone_tab
                            SET  storage_zone_id = i
                            WHERE contract             = putaway_zone_tab_(i).contract AND
                                  sql_where_expression = putaway_zone_tab_(i).sql_where_expression AND
                                  storage_zone_id IS NULL;

                      END LOOP;
                   END IF;
                END;';

      EXECUTE IMMEDIATE stmt_;
      COMMIT;

   END IF;
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_70');
PROMPT Making new column  storage_zone_id not nullable in SITE_PUTAWAY_ZONE_TAB AND INVENT_PART_PUTAWAY_ZONE_TAB.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('STORAGE_ZONE_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Alter_Table_Column('SITE_PUTAWAY_ZONE_TAB', 'M', column_, TRUE);
   Database_SYS.Alter_Table_Column('INVENT_PART_PUTAWAY_ZONE_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_71');
PROMPT Making COLUMN SQL_WHERE_EXPRESSION IN INVENT_PART_PUTAWAY_ZONE_TAB TO nullable since it IS obsoleted.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SQL_WHERE_EXPRESSION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column('INVENT_PART_PUTAWAY_ZONE_TAB', 'M', column_, TRUE);
END;
/

-- ***** INVENT_PART_PUTAWAY_ZONE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** BIN_IN_BETTER_ZONE_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_72');
PROMPT Creating temporary table BIN_IN_BETTER_ZONE_TMP
DECLARE
   table_name_ VARCHAR2(30):= 'BIN_IN_BETTER_ZONE_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',    'VARCHAR2(35)',    'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

-- ***** BIN_IN_BETTER_ZONE_TMP End *****

---------------------------------------------------------------------------------------------


-- ***** COUNTING_REPORT_LINE_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_73');
PROMPT Added WAREHOUSE_ROUTE_ORDER, BAY_ROUTE_ORDER, ROW_ROUTE_ORDER, TIER_ROUTE_ORDER, BIN_ROUTE_ORDER columns
PROMPT and removed  WAREHOUSE, BAY_NO, ROW_NO, TIER_NO, BIN_NO columns from COUNTING_REPORT_LINE_TMP temporary table.
DECLARE
   table_name_ VARCHAR2(30):= 'COUNTING_REPORT_LINE_TMP';
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('WAREHOUSE', 'VARCHAR2(15)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BAY_NO', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ROW_NO', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TIER_NO', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BIN_NO', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'D', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('WAREHOUSE_ROUTE_ORDER', 'VARCHAR2(15)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BAY_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ROW_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TIER_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BIN_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** COUNTING_REPORT_LINE_TMP End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_AVAIL_STOCK_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_74');
PROMPT Added WAREHOUSE_ROUTE_ORDER, BAY_ROUTE_ORDER, ROW_ROUTE_ORDER, TIER_ROUTE_ORDER,
PROMPT BIN_ROUTE_ORDER COLUMNS to INVENTORY_PART_AVAIL_STOCK_TMP temporary table.
DECLARE
   table_name_ VARCHAR2(30):= 'INVENTORY_PART_AVAIL_STOCK_TMP';
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('WAREHOUSE_ROUTE_ORDER', 'VARCHAR2(15)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BAY_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ROW_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TIER_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BIN_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** INVENTORY_PART_AVAIL_STOCK_TMP End ****

---------------------------------------------------------------------------------------------

-- ***** PUTAWAY_BIN_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_75');
PROMPT Added WAREHOUSE_ROUTE_ORDER, BAY_ROUTE_ORDER, ROW_ROUTE_ORDER, TIER_ROUTE_ORDER,
PROMPT BIN_ROUTE_ORDER COLUMNS to PUTAWAY_BIN_TMP temporary table.
DECLARE
   table_name_ VARCHAR2(30):= 'PUTAWAY_BIN_TMP';
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('WAREHOUSE_ROUTE_ORDER', 'VARCHAR2(15)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BAY_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ROW_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TIER_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BIN_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** PUTAWAY_BIN_TMP End ****

---------------------------------------------------------------------------------------------


-- ***** PACKING_INSTRUCTION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_76');
PROMPT Creating table PACKING_INSTRUCTION_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PACKING_INSTRUCTION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PACKING_INSTRUCTION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',            'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',       'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',           'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_77');
PROMPT Create Constraints PACKING_INSTRUCTION_PK
DECLARE
   table_name_ VARCHAR2(30):= 'PACKING_INSTRUCTION_TAB';
   index_name_ VARCHAR2(30):= 'PACKING_INSTRUCTION_PK';
   rkidx_name_ VARCHAR2(30):= 'PACKING_INSTRUCTION_RK';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PACKING_INSTRUCTION_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX');

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** PACKING_INSTRUCTION_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** PACKING_INSTRUCTION_NODE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_78');
PROMPT Creating table PACKING_INSTRUCTION_NODE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PACKING_INSTRUCTION_NODE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PACKING_INSTRUCTION_ID',     'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NODE_ID',                    'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID',      'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_NODE_ID',             'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY',                   'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'GENERATE_SSCC_NO',           'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_LABEL',                'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_PART_NO_BLOCKED',     'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_LOT_BATCH_BLOCKED',   'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_COND_CODE_BLOCKED',   'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'NO_OF_HANDLING_UNIT_LABELS', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                     'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_79');
PROMPT Create Constraints  and the INDEX PACKING_INSTRUCTION_NODE_1_IX PACKING_INSTRUCTION_NODE_PK

DECLARE
   table_name_  VARCHAR2(30) := 'PACKING_INSTRUCTION_NODE_TAB';
   index_name_  VARCHAR2(30) := 'PACKING_INSTRUCTION_NODE_PK';
   index1_name_ VARCHAR2(30) := 'PACKING_INSTRUCTION_NODE_1_IX';
   rkidx_name_  VARCHAR2(30) := 'PACKING_INSTRUCTION_NODE_RK';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PACKING_INSTRUCTION_ID');
   Database_SYS.Set_Table_Column(columns_, 'NODE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX');

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column (columns_ , 'PACKING_INSTRUCTION_ID');
   Database_SYS.Set_Table_Column (columns_ , 'PARENT_NODE_ID');
   Database_SYS.Create_Index(table_name_, index1_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ***** PACKING_INSTRUCTION_NODE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** PACK_INSTR_NODE_ACCESSORY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_80');
PROMPT Creating table PACK_INSTR_NODE_ACCESSORY_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PACK_INSTR_NODE_ACCESSORY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PACKING_INSTRUCTION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NODE_ID',                'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY',               'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',             'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_81');
PROMPT Create Constraints PACK_INSTR_NODE_ACCESSORY_PK
DECLARE
   table_name_ VARCHAR2(30):= 'PACK_INSTR_NODE_ACCESSORY_TAB';
   index_name_ VARCHAR2(30):= 'PACK_INSTR_NODE_ACCESSORY_PK';
   rkidx_name_ VARCHAR2(30):= 'PACK_INSTR_NODE_ACCESSORY_RK';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PACKING_INSTRUCTION_ID');
   Database_SYS.Set_Table_Column(columns_, 'NODE_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX');

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** PACK_INSTR_NODE_ACCESSORY_TAB End ****
---------------------------------------------------------------------------------------------

-- ***** SSCC_BASIC_DATA_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_82');
PROMPT Creating new TABLE SSCC_BASIC_DATA_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SSCC_BASIC_DATA_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_PREFIX', 'VARCHAR2(9)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'START_VALUE',    'NUMBER(15)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'END_VALUE',      'NUMBER(15)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'NEXT_VALUE',     'NUMBER(15)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',     'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',         'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_83');
PROMPT Create Constraints for SSCC_BASIC_DATA_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SSCC_BASIC_DATA_TAB';
   index_name_ VARCHAR2(30) := 'SSCC_BASIC_DATA_PK';
   rkidx_name_ VARCHAR2(30) := 'SSCC_BASIC_DATA_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_PREFIX');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** SSCC_BASIC_DATA_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** SSCC_HANDLING_UNIT_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_84');
PROMPT Creating new TABLE SSCC_HANDLING_UNIT_TYPE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SSCC_HANDLING_UNIT_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_PREFIX',        'VARCHAR2(9)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'EXTENSION_DIGIT',       'NUMBER(1)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',            'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_85');
PROMPT Create Constraints for SSCC_HANDLING_UNIT_TYPE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SSCC_HANDLING_UNIT_TYPE_TAB';
   index_name_ VARCHAR2(30) := 'SSCC_HANDLING_UNIT_TYPE_PK';
   rkidx_name_ VARCHAR2(30) := 'SSCC_HANDLING_UNIT_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_PREFIX');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_86');
PROMPT Upgrading data from SSCC_PALLET_TYPE_TAB and SSCC_PACKAGE_TYPE_TAB to  SSCC_HANDLING_UNIT_TYPE_TAB.
BEGIN
   IF ((Database_SYS.Table_Exist('sscc_pallet_type_tab')) AND (Database_SYS.Table_Exist('sscc_package_type_tab'))) THEN
      EXECUTE IMMEDIATE
         'DECLARE
             suffix_ VARCHAR2(15) := ''- UPG DUPLICATE'';
          BEGIN
             -- Insert all data from sscc_pallet_type_tab
             INSERT INTO sscc_handling_unit_type_tab (
                    company_prefix,
                    handling_unit_type_id,
                    extension_digit,
                    rowversion)
             SELECT company_prefix,
                    pallet_type,
                    extension_digit,
                    SYSDATE
             FROM sscc_pallet_type_tab pal
             WHERE NOT EXISTS (SELECT 1
                               FROM  sscc_handling_unit_type_tab hu
                               WHERE pal.company_prefix = hu.company_prefix
                               AND   pal.pallet_type = hu.handling_unit_type_id);

             -- Insert all data from package_type_tab that does not have duplicate id with data from pallet_type_tab
             INSERT INTO sscc_handling_unit_type_tab (
                    company_prefix,
                    handling_unit_type_id,
                    extension_digit,
                    rowversion)
             SELECT company_prefix,
                    package_type,
                    extension_digit,
                    SYSDATE
             FROM   sscc_package_type_tab pac
             WHERE NOT EXISTS (SELECT 1
                               FROM  sscc_handling_unit_type_tab hu
                               WHERE pac.company_prefix = hu.company_prefix
                               AND   pac.package_type = hu.handling_unit_type_id);

             -- Insert all data from sscc_package_type_tab that have duplicate id with data from sscc_pallet_type_tab
             INSERT INTO sscc_handling_unit_type_tab (
                    company_prefix,
                    handling_unit_type_id,
                    extension_digit,
                    rowversion)
             SELECT company_prefix,
                    pac.package_type||suffix_,
                    extension_digit,
                    SYSDATE
             FROM sscc_package_type_tab pac
             WHERE NOT EXISTS (SELECT 1
                               FROM  sscc_handling_unit_type_tab hu
                               WHERE pac.company_prefix = hu.company_prefix
                               AND   pac.package_type||suffix_ = hu.handling_unit_type_id)
             AND   EXISTS (SELECT 1
                           FROM  sscc_pallet_type_tab pal
                           WHERE pac.company_prefix = pal.company_prefix
                           AND   pac.package_type = pal.pallet_type);
          END;';
      COMMIT;
   END IF;
END;
/

-- ***** SSCC_HANDLING_UNIT_TYPE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** ABC_FREQUENCY_LIFECYCLE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_87');
PROMPT Adding columns SET_SAFETY_STOCK_TO_ZERO, CONTRACT to table ABC_FREQUENCY_LIFECYCLE_TAB.

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ABC_FREQUENCY_LIFECYCLE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SET_SAFETY_STOCK_TO_ZERO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_88');
PROMPT Inserting default data to set_safety_stock_to_zero and updating contract column with default value

UPDATE abc_frequency_lifecycle_tab
SET    contract                 = NVL(contract, '*'),
       set_safety_stock_to_zero = NVL(set_safety_stock_to_zero, DECODE(planning_method_a_b_swap, 'A','FALSE', NULL))
WHERE  contract IS NULL OR (set_safety_stock_to_zero IS NULL AND planning_method_a_b_swap = 'A');
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_89');
PROMPT Making the contract column not null column and adding it as a primary key column

DECLARE
   column_     Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ABC_FREQUENCY_LIFECYCLE_TAB';
   index_name_ VARCHAR2(30) := 'ABC_FREQUENCY_LIFECYCLE_PK';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'ABC_CLASS');
   Database_SYS.Set_Table_Column(columns_, 'FREQUENCY_CLASS');
   Database_SYS.Set_Table_Column(columns_, 'LIFECYCLE_STAGE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** ABC_FREQUENCY_LIFECYCLE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_STATUS_PAR_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_90');
PROMPT Adding Nullable Column DEFAULT_STATUS in INVENTORY_PART_STATUS_PAR_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_STATUS_PAR_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DEFAULT_STATUS','VARCHAR2(5)','Y' );
   Database_SYS.Alter_Table_Column( table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_91');
PROMPT Inserting the default values for Column DEFAULT_STATUS in INVENTORY_PART_STATUS_PAR_TAB.

UPDATE INVENTORY_PART_STATUS_PAR_TAB
   SET DEFAULT_STATUS = CASE PART_STATUS
                           WHEN 'A' THEN 'TRUE'
                           ELSE 'FALSE'
                        END
 WHERE DEFAULT_STATUS IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_92');
PROMPT Updating the default values for Column ROWVERSION in INVENTORY_PART_STATUS_PAR_TAB.

UPDATE inventory_part_status_par_tab
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_93');
PROMPT making COLUMNS DEFAULT_STATUS AND ROWVERSION in INVENTORY_PART_STATUS_PAR_TAB not nullable.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_STATUS_PAR_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DEFAULT_STATUS','VARCHAR2(5)','N' );
   Database_SYS.Alter_Table_Column( table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE','N' );
   Database_SYS.Alter_Table_Column( table_name_, 'M', column_, TRUE);
END;
/

-- ***** INVENTORY_PART_STATUS_PAR_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMS_STATISTICS_NUMBER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_94');
PROMPT Increasing the length of the column DESCRIPTION and CUSTOMS_STAT_NO of CUSTOMS_STATISTICS_NUMBER_TAB.

DECLARE
   column_ Database_SYS.ColRec;
   table_name VARCHAR2(30) := 'CUSTOMS_STATISTICS_NUMBER_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(2000)');
   Database_SYS.Alter_Table_Column(table_name, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CUSTOMS_STAT_NO', 'VARCHAR2(15)');
   Database_SYS.Alter_Table_Column(table_name, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_95');
PROMPT Update NULL values of description column in customs_statistics_number_tab with a dummy value AND
PROMPT Updating rowversion in customs_statistics_number_tab

UPDATE customs_statistics_number_tab
  SET description  = CASE description
                        WHEN NULL
                           THEN 'DUMMY_UPGRADE'
                        ELSE
                           description
                      END,
        rowversion = CASE rowversion
                        WHEN NULL
                           THEN SYSDATE
                        ELSE
                           rowversion
                      END
WHERE description IS NULL OR rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_96');
PROMPT Modify description,rowversion columns in customs_statistics_number_tab to mandatory columns.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMS_STATISTICS_NUMBER_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(2000)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** CUSTOMS_STATISTICS_NUMBER_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** PRES_OBJECT_SECURITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_97');
PROMPT Removing Obsolete Manual PressObj entries from pres_object_security_tab

DECLARE
   -- Remove Manual security entries.
   PROCEDURE Remove_Pres_Object_Security(
      po_id_      IN VARCHAR2,
      sec_object_ IN VARCHAR2 ) IS
   BEGIN
      DELETE
        FROM pres_object_security_tab
       WHERE UPPER(po_id) = UPPER(po_id_)
         AND UPPER(sec_object) = UPPER(sec_object_)
         AND info_type = 'Manual';
   END Remove_Pres_Object_Security;

BEGIN
   -- Remove Manual security entries that are obsolete.
   Remove_Pres_Object_Security('dlgPSheetCreateCountReport', 'INVENTORY_PART_IN_STOCK_API.Validate_Params');
   Remove_Pres_Object_Security('repINV_PART_ORDER_PNT_REP_REP', 'INV_PART_ORDER_PNT_REP_RPI.Make_Order_Point_Requisitions');
   Remove_Pres_Object_Security('repTRANSPORT_TASK_REP', 'INVENTORY_PART_DESTINATION');
   Remove_Pres_Object_Security('repTRANSPORT_TASK_REP', 'TRANSPORT_TASK_STATUS');
   Remove_Pres_Object_Security('taskInv_Part_Order_Pnt_Rep_Rpi.Make_Order_Point_Req__', 'INV_PART_ORDER_PNT_REP_RPI.Make_Order_Point_Req__');
   Remove_Pres_Object_Security('taskInventory_Part_In_Stock_Api.Create_Count_Report_Deferred__', 'INVENTORY_PART_IN_STOCK_API.Create_Count_Report_Deferred__');
   Remove_Pres_Object_Security('taskInventory_Part_In_Stock_Api.Create_Count_Report_Deferred__', 'INVENTORY_PART_IN_STOCK_API.Validate_Params');
END;

/

-- ***** PRES_OBJECT_SECURITY_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** PRES_OBJECT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_98');
PROMPT Removing Obsolete Manual PressObj entries from pres_object_tab

DECLARE
   -- Remove Manual PresObject entries.
   PROCEDURE Remove_Pres_Object(
      po_id_      IN VARCHAR2 ) IS
   BEGIN
      DELETE
         FROM pres_object_tab
       WHERE UPPER(po_id) = UPPER(po_id_)
         AND info_type = 'Manual';
   END Remove_Pres_Object;

BEGIN
   -- Remove Manual PresObject entries.
   Remove_Pres_Object('taskInv_Part_Order_Pnt_Rep_Rpi.Make_Order_Point_Req__');
   Remove_Pres_Object('taskInventory_Part_In_Stock_Api.Create_Count_Report_Deferred__');
END;

/

-- ***** PRES_OBJECT_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** COUNTRY_REGION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_99');
PROMPT Removing region code 99.

DELETE
FROM  country_region_tab
WHERE country_code = 'DE'
AND   region_code = '99';

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_100');
PROMPT Update NULL values of region_name column in country_region_tab with a dummy VALUE

UPDATE country_region_tab
SET    region_name = 'DUMMY_UPGRADE'
WHERE  region_name IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_101');
PROMPT Modify column region_name as mandatory in country_region_tab

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COUNTRY_REGION_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('REGION_NAME', 'VARCHAR2(100)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** COUNTRY_REGION_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INTRASTAT_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_102');
PROMPT Updating rowversion, rowstate AND triangulation in intrastat_line_tab

UPDATE intrastat_line_tab
SET    rowversion    = CASE
                          WHEN rowversion IS NULL THEN
                             SYSDATE
                          ELSE
                             rowversion
                          END,
       rowstate      = CASE
                          WHEN rowstate IS NULL THEN
                             '<UNDEFINED>'
                          ELSE
                             rowstate
                          END,
       triangulation = CASE
                          WHEN triangulation IS NULL THEN
                             'DUMMY_UPGRADE'
                          ELSE
                             triangulation
                          END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_103');
PROMPT Adding column UNIT_STATISTICAL_CHARGE_DIFF to INTRASTAT_LINE_TAB
PROMPT Increasing the length of the COLUMN CUSTOMS_STAT_NO of INTRASTAT_LINE_TAB
PROMPT Modify COLUMNS rowversion, rowstate AND triangulation in INTRASTAT_LINE_TAB as mandatory

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('UNIT_STATISTICAL_CHARGE_DIFF', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'ADD', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CUSTOMS_STAT_NO', 'VARCHAR2(15)');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', NULL, 'N');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TRIANGULATION', NULL, 'N');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'M', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_104');
PROMPT Increasing the length of the COLUMN RETURN_REASON of INTRASTAT_LINE_TAB

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RETURN_REASON', 'VARCHAR2(10)');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'M', column_, TRUE);
END;
/
-- ***** INTRASTAT_LINE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INVENTOTY_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_105');
PROMPT Increasing the length of column CUSTOMS_STAT_NO to VARCHAR2(15) INVENTORY_PART_TAB

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CUSTOMS_STAT_NO', 'VARCHAR2(15)');
   Database_SYS.Alter_Table_Column('INVENTORY_PART_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_106');
PROMPT Updating the column std_name_id and negative_on_hand of INVENTOTY_PART_TAB.
PROMPT updating column ROWVERSION with SYSDATE in INVENTORY_PART_TAB

UPDATE inventory_part_tab ipt
   SET ipt.std_name_id      = CASE
                                 WHEN (ipt.std_name_id = (SELECT pct.std_name_id
                                                         FROM part_catalog_tab pct
                                                         WHERE pct.part_no = ipt.part_no)) THEN
                                    NULL
                                 ELSE ipt.std_name_id
                              END,
       ipt.negative_on_hand = CASE
                                 WHEN (ipt.negative_on_hand   = 'NEG ONHAND OK'
                                       AND EXISTS (SELECT 1
                                                   FROM part_catalog_tab pct
                                                   WHERE pct.part_no                      = ipt.part_no
                                                   AND (pct.lot_tracking_code          != 'NOT LOT TRACKING' OR
                                                   pct.receipt_issue_serial_track  = 'TRUE'             OR
                                                   pct.catch_unit_enabled    = 'TRUE'))) THEN
                                    'NEG ONHAND NOT OK'
                                 ELSE
                                    ipt.negative_on_hand
                                 END,
       ipt.rowversion       = CASE
                                 WHEN ipt.rowversion IS NULL THEN
                                      SYSDATE
                                 ELSE
                                    ipt.rowversion
                                 END;


COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_107');
PROMPT Make ROWVERSION COLUMN NOT NULL in INVENTORY_PART_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('INVENTORY_PART_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_108');
PROMPT Update changed enumeration VALUE NO_AUTO_REFILL TO NO_REFILL in INVENTORY_PART_TAB

UPDATE inventory_part_tab
SET    putaway_zone_refill_option = 'NO_REFILL'
WHERE  putaway_zone_refill_option = 'NO_AUTO_REFILL';
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_109');
PROMPT Adding DECLINE_DATE, EXPIRED_DATE, DECLINE_ISSUE_COUNTER and EXPIRED_ISSUE_COUNTER
PROMPT TO INVENTORY_PART_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DECLINE_DATE', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('EXPIRED_DATE', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DECLINE_ISSUE_COUNTER', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('EXPIRED_ISSUE_COUNTER', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_110');
PROMPT Adding column RESET_CONFIG_STD_COST to table INVENTORY_PART_TAB.
DECLARE
   column_        Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TAB';
BEGIN   
   column_ := Database_SYS.Set_Column_Values('RESET_CONFIG_STD_COST', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


-- ***** INVENTOTY_PART_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** SITE_INVENT_INFO_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_111');
PROMPT Adding columns to table SITE_INVENT_INFO_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'BIN_VOLUME_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('AUTO_DROPOF_MAN_TRANS_TASK', 'VARCHAR(20)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('ALLOW_DEVIATING_AVAIL_CTRL', 'VARCHAR(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('RECEIPT_TO_OCCUPIED_BLOCKED', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('UPPER_LIMIT_VERYSLOW_MOVER', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('RESET_CONFIG_STD_COST', 'VARCHAR(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_112');
PROMPT Updating the length of the columns NEGATIVE_ON_HAND, PURCH_INV_VALUE_METHOD AND MANUF_INV_VALUE_METHOD to 20 IN SITE_INVENT_INFO_TAB.
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NEGATIVE_ON_HAND', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PURCH_INV_VALUE_METHOD', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MANUF_INV_VALUE_METHOD', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_113');
PROMPT Update changed enumeration VALUE NO_AUTO_REFILL TO NO_REFILL in SITE_INVENT_INFO_TAB

UPDATE site_invent_info_tab
SET    putaway_zone_refill_option = 'NO_REFILL'
WHERE  putaway_zone_refill_option = 'NO_AUTO_REFILL';
COMMIT;

-- ***** SITE_INVENT_INFO_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** ASSORTMENT_INVENT_DEF_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_114');
PROMPT Increasing the length of column CUSTOMS_STAT_NO to VARCHAR2(15) ASSORTMENT_INVENT_DEF_TAB

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CUSTOMS_STAT_NO', 'VARCHAR2(15)');
   Database_SYS.Alter_Table_Column('ASSORTMENT_INVENT_DEF_TAB', 'M', column_, TRUE);
END;
/

-- ***** ASSORTMENT_INVENT_DEF_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_AT_CUSTOMER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_115');
PROMPT Adding columns CONFIGURATION_ID, LOT_BATCH_NO, SERIAL_NO, ENG_CHG_LEVEL, WAIV_DEV_REJ_NO, ACTIVITY_SEQ, CUSTOMER_NO, ADDR_NO, EXPIRATION_DATE, PROCESS_TYPE
PROMPT to inventory_part_at_customer_tab and rename existing column INVENTORY_QTY to QUANTITY.
PROMPT Inserting values to the newly added columns for existing records.
PROMPT Making newly added columns not nullable.
PROMPT Create new primary key constraint replacing the existing one.

DECLARE
   table_name_  VARCHAR2(30) := 'INVENTORY_PART_AT_CUSTOMER_TAB';
   column_      Database_SYS.ColRec;
   columns_     Database_SYS.ColumnTabType;
   current_key_list_   VARCHAR2(200);
   new_key_list_       VARCHAR2(200) := 'PART_NO^CONTRACT^CONFIGURATION_ID^LOT_BATCH_NO^SERIAL_NO^ENG_CHG_LEVEL^WAIV_DEV_REJ_NO^ACTIVITY_SEQ^CUSTOMER_NO^ADDR_NO^EXPIRATION_DATE^PROCESS_TYPE';
   create_constraint_  BOOLEAN := FALSE;

   CURSOR get_key_list IS
   SELECT LISTAGG (cols.column_name, '^') WITHIN GROUP (ORDER BY cols.position )
      FROM user_constraints cons, user_cons_columns cols
      WHERE cols.table_name = table_name_
      AND cons.constraint_type = 'P'
      AND cons.constraint_name = cols.constraint_name
      AND cons.owner = cols.owner
      ORDER BY cols.position;
BEGIN
   IF NOT (Database_SYS.Table_Exist(table_name_)) THEN

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT',           'VARCHAR2(5)',   'N');
      Database_SYS.Set_Table_Column(columns_, 'PART_NO',            'VARCHAR2(25)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'QUANTITY',           'NUMBER',        'N');
      Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',   'VARCHAR2(50)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',       'VARCHAR2(20)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',          'VARCHAR2(50)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',      'VARCHAR2(6)',   'N');
      Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',    'VARCHAR2(15)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',       'NUMBER(10)',    'N');
      Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO',        'VARCHAR2(20)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'ADDR_NO',            'VARCHAR2(50)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE',    'DATE',          'N');
      Database_SYS.Set_Table_Column(columns_, 'PROCESS_TYPE',       'VARCHAR2(21)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',         'DATE',          'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY',             'VARCHAR2(50)',  'Y', '$DEFAULT_NULL$');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_,   '&IFSAPP_DATA',  NULL, TRUE);

      create_constraint_ := TRUE;

   ELSE

      OPEN  get_key_list;
      FETCH get_key_list INTO current_key_list_;
      CLOSE get_key_list;

      IF (current_key_list_ != new_key_list_)  THEN

         IF (NOT Database_SYS.Column_Exist(table_name_, 'QUANTITY')) AND (Database_SYS.Column_Exist(table_name_, 'INVENTORY_QTY')) THEN
            Database_SYS.Rename_Column(table_name_, 'QUANTITY', 'INVENTORY_QTY', TRUE);
         END IF;

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('CONFIGURATION_ID', 'VARCHAR2(50)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('LOT_BATCH_NO', 'VARCHAR2(20)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('SERIAL_NO', 'VARCHAR2(50)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('ENG_CHG_LEVEL', 'VARCHAR2(6)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('WAIV_DEV_REJ_NO', 'VARCHAR2(15)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('ACTIVITY_SEQ', 'NUMBER(10)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('CUSTOMER_NO', 'VARCHAR2(20)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('ADDR_NO', 'VARCHAR2(50)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('EXPIRATION_DATE', 'DATE', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('PROCESS_TYPE', 'VARCHAR2(21)', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
         Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

         EXECUTE IMMEDIATE
         '
         BEGIN
         UPDATE INVENTORY_PART_AT_CUSTOMER_TAB
            SET CONFIGURATION_ID = ''*'',
                LOT_BATCH_NO     = ''*'',
                SERIAL_NO        = ''*'',
                WAIV_DEV_REJ_NO  = ''*'',
                ENG_CHG_LEVEL    = ''1'',
                ACTIVITY_SEQ     = 0,
                CUSTOMER_NO      = ''*'',
                ADDR_NO          = ''*'',
                EXPIRATION_DATE  = Database_SYS.Get_Last_Calendar_Date,
                PROCESS_TYPE     = ''DELIVERY CONFIRMATION''
          WHERE CONFIGURATION_ID IS NULL;
          END;';
         COMMIT;

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('CONFIGURATION_ID', 'VARCHAR2(50)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('LOT_BATCH_NO', 'VARCHAR2(20)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('SERIAL_NO', 'VARCHAR2(50)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('ENG_CHG_LEVEL', 'VARCHAR2(6)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('WAIV_DEV_REJ_NO', 'VARCHAR2(15)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('ACTIVITY_SEQ', 'NUMBER(10)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('CUSTOMER_NO', 'VARCHAR2(20)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('ADDR_NO', 'VARCHAR2(50)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);



         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('EXPIRATION_DATE', 'DATE', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('PROCESS_TYPE', 'VARCHAR2(21)', 'N');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);


         create_constraint_ := TRUE;
       END IF;
   END IF;

   IF (create_constraint_) THEN

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_,'PART_NO');
      Database_SYS.Set_Table_Column(columns_,'CONTRACT');
      Database_SYS.Set_Table_Column(columns_,'CONFIGURATION_ID');
      Database_SYS.Set_Table_Column(columns_,'LOT_BATCH_NO');
      Database_SYS.Set_Table_Column(columns_,'SERIAL_NO');
      Database_SYS.Set_Table_Column(columns_,'ENG_CHG_LEVEL');
      Database_SYS.Set_Table_Column(columns_,'WAIV_DEV_REJ_NO');
      Database_SYS.Set_Table_Column(columns_,'ACTIVITY_SEQ');
      Database_SYS.Set_Table_Column(columns_,'CUSTOMER_NO');
      Database_SYS.Set_Table_Column(columns_,'ADDR_NO');
      Database_SYS.Set_Table_Column(columns_,'EXPIRATION_DATE');
      Database_SYS.Set_Table_Column(columns_,'PROCESS_TYPE');


      Database_SYS.Create_Constraint('INVENTORY_PART_AT_CUSTOMER_TAB', 'INVENTORY_PART_AT_CUSTOMER_PK', columns_, 'P', '&IFSAPP_INDEX');

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY');

      Database_SYS.Create_Constraint('INVENTORY_PART_AT_CUSTOMER_TAB', 'INVENTORY_PART_AT_CUSTOMER_RK', columns_, 'U', '&IFSAPP_INDEX');

   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_116');
PROMPT Import data from customer_consignment_stock_tab.

DECLARE
   stmt_       VARCHAR2(2000);
BEGIN
   IF Database_SYS.Table_Exist('CUSTOMER_CONSIGNMENT_STOCK_TAB') AND Database_SYS.Column_Exist('CUSTOMER_CONSIGNMENT_STOCK_TAB', 'CONSIGNMENT_STOCK_QTY') THEN
      stmt_ := 'INSERT
                   INTO INVENTORY_PART_AT_CUSTOMER_TAB (
                      PART_NO,
                      CONTRACT,
                      CONFIGURATION_ID,
                      LOT_BATCH_NO,
                      SERIAL_NO,
                      ENG_CHG_LEVEL,
                      WAIV_DEV_REJ_NO,
                      ACTIVITY_SEQ,
                      CUSTOMER_NO,
                      ADDR_NO,
                      EXPIRATION_DATE,
                      PROCESS_TYPE,
                      QUANTITY,
                      ROWVERSION)
                     (SELECT SP.PART_NO,
                             SP.CONTRACT,
                             ''*'',
                             ''*'',
                             ''*'',
                             ''1'',
                             ''*'',
                             0,
                             CCS.CUSTOMER_NO,
                             CCS.ADDR_NO,
                             Database_SYS.Get_Last_Calendar_Date,
                             ''CUSTOMER CONSIGNMENT'',
                             SUM(CCS.CONSIGNMENT_STOCK_QTY),
                             SYSDATE
                        FROM CUSTOMER_CONSIGNMENT_STOCK_TAB CCS, SALES_PART_TAB SP
                       WHERE CCS.CATALOG_NO = SP.CATALOG_NO
                         AND CCS.CONTRACT   = SP.CONTRACT
                         AND CCS.CONSIGNMENT_STOCK_QTY IS NOT NULL
                         GROUP BY SP.PART_NO, SP.CONTRACT, CCS.CUSTOMER_NO, CCS.ADDR_NO)';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;
END;
/


-- ***** INVENTORY_PART_AT_CUSTOMER_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** ABC_CLASS_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_117');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN ABC_CLASS_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE ABC_CLASS_TAB
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('ABC_CLASS_TAB', 'M', column_, TRUE);
END;
/
-- ***** ABC_CLASS_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** ACCOUNTING_GROUP_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_118');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN ACCOUNTING_GROUP_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE ACCOUNTING_GROUP_TAB
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('ACCOUNTING_GROUP_TAB', 'M', column_, TRUE);
END;
/
-- ***** ACCOUNTING_GROUP_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** ASSET_CLASS_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_119');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN ASSET_CLASS_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE ASSET_CLASS_TAB
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('ASSET_CLASS_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_120');
PROMPT Adding UPPER_LIMIT_VERYSLOW_MOVER column to the ASSET_CLASS_TAB

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ASSET_CLASS_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('UPPER_LIMIT_VERYSLOW_MOVER', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);
END;
/

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ASSET_CLASS_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DECLINE_TO_MATURE_ISSUES', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('EXPIRED_TO_INTRO_ISSUES', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);
END;
/
-- ***** ASSET_CLASS_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** ASSORTMENT_INV_CHAR_DEF_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_121');
PROMPT updating column ATTR_VALUE AND CHAR_TYPE WITH dummy values AND make it NOT NULL IN ASSORTMENT_INV_CHAR_DEF_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30):= 'ASSORTMENT_INV_CHAR_DEF_TAB';
BEGIN

   UPDATE ASSORTMENT_INV_CHAR_DEF_TAB
      SET attr_value  = CASE
                           WHEN attr_value IS NULL THEN
                              'DUMMY_UPGRADE'
                           ELSE
                              attr_value
                           END,
         char_type    = CASE
                           WHEN char_type IS NULL THEN
                              'DUMMY_UPGRADE'
                           ELSE
                              char_type
                           END;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ATTR_VALUE','VARCHAR2(60)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('CHAR_TYPE','VARCHAR2(30)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** ASSORTMENT_INV_CHAR_DEF_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** ASSORTMENT_STRUCTURE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_122');
PROMPT updating column ROWSTATE AND make it NOT NULL IN ASSORTMENT_STRUCTURE_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE ASSORTMENT_STRUCTURE_TAB
      SET rowstate = '<UNDEFINED>'
    WHERE rowstate IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWSTATE','VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('ASSORTMENT_STRUCTURE_TAB', 'M', column_, TRUE);
END;
/
-- ***** ASSORTMENT_STRUCTURE_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** COMMODITY_GROUP_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_123');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN COMMODITY_GROUP_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE COMMODITY_GROUP_TAB
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('COMMODITY_GROUP_TAB', 'M', column_, TRUE);
END;
/
-- ***** COMMODITY_GROUP_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** COUNTING_REPORT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_124');
PROMPT Adding columns to TABLE COUNTING_REPORT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID',    'VARCHAR2(15)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID',          'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID',         'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID',          'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID',          'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID', 'VARCHAR2(30)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',         'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP',  'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'ABC_CLASS',       'VARCHAR2(1)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'FREQUENCY_CLASS', 'VARCHAR2(20)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'LIFECYCLE_STAGE', 'VARCHAR2(20)',   'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_125');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN COUNTING_REPORT_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE COUNTING_REPORT_TAB
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('COUNTING_REPORT_TAB', 'M', column_, TRUE);
END;
/
-- ***** COUNTING_REPORT_TAB End *****
---------------------------------------------------------------------------------------------


-- ***** COUNTING_REPORT_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_126');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN COUNTING_REPORT_LINE_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE COUNTING_REPORT_LINE_TAB
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('COUNTING_REPORT_LINE_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_127');
PROMPT updating null values in column PART_NO in COUNTING_REPORT_LINE_TAB with DEFAULT values

UPDATE COUNTING_REPORT_LINE_TAB
   SET PART_NO = 'DUMMY_UPGRADE'
 WHERE PART_NO IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_128');
PROMPT Modify column PART_NO in COUNTING_REPORT_LINE_TAB as mandatory
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PART_NO','VARCHAR2(25)', 'N');
   Database_SYS.Alter_Table_Column('COUNTING_REPORT_LINE_TAB', 'M', column_, TRUE);
END;
/
-- ***** COUNTING_REPORT_LINE_TAB End *****
---------------------------------------------------------------------------------------------


-- ***** CRO_EXCHANGE_RESERVATION Start *****
DECLARE
   stmt_   VARCHAR2(2000);
BEGIN
   IF (NOT Database_SYS.View_Exist('CRO_EXCHANGE_RESERVATION')) THEN
      stmt_ := 'CREATE VIEW CRO_EXCHANGE_RESERVATION '                                                                     ||
               '(CRO_NO, LINE_NO, EX_PART_NO, CONTRACT, CONFIGURATION_ID, LOCATION_NO, LOT_BATCH_NO, '                     ||
               'SERIAL_NO, WAIV_DEV_REJ_NO, ENG_CHG_LEVEL, ACTIVITY_SEQ, QTY_ASSIGNED, QTY_RESERVED, LAST_ACTIVITY_DATE) ' ||
               'AS '                                                                                                       ||
               'SELECT NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, SYSDATE '                         ||
               'FROM   DUAL '                                                                                              ||
               'WHERE  1 = 2';
      EXECUTE IMMEDIATE stmt_;

      stmt_ := 'COMMENT ON TABLE CRO_EXCHANGE_RESERVATION IS ''MODULE=IGNORE^''';
      EXECUTE IMMEDIATE stmt_;
   END IF;
END;
/
-- ***** CRO_EXCHANGE_RESERVATION End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_RES Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_129');
PROMPT Adding Shipment Id column to the CUSTOMER_ORDER_RES view

DECLARE
   stmt_   VARCHAR2(4000);
BEGIN
   IF (NOT Database_SYS.Column_Exist('CUSTOMER_ORDER_RES', 'SHIPMENT_ID')) THEN
      stmt_ := 'CREATE OR REPLACE VIEW CUSTOMER_ORDER_RES (' ||
               'ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO, ORDER_SUPPLY_DEMAND_TYPE, PART_NO, CONTRACT, CONFIGURATION_ID ,'||
               'LOCATION_NO, LOT_BATCH_NO, SERIAL_NO, WAIV_DEV_REJ_NO, ENG_CHG_LEVEL, PICK_LIST_NO, ACTIVITY_SEQ, SHIPMENT_ID,'||
               'QTY_RESERVED, LAST_ACTIVITY_DATE) '||
               'AS '||
               'SELECT NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, SYSDATE '||
               'FROM DUAL WHERE 1 = 2';
      EXECUTE IMMEDIATE stmt_;

      stmt_ := 'COMMENT ON TABLE CUSTOMER_ORDER_RES IS ''MODULE=IGNORE^''';
      EXECUTE IMMEDIATE stmt_;
   END IF;
END;
/
-- ***** CUSTOMER_ORDER_RES End ****

---------------------------------------------------------------------------------------------

-- ***** SUPPLIER_SHIPMENT_RESERVATION Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_130');
PROMPT creating dummy VIEW  SUPPLIER_SHIPMENT_RESERVATION
DECLARE
   stmt_   VARCHAR2(2000);
BEGIN
   IF (NOT Database_SYS.View_Exist('SUPPLIER_SHIPMENT_RESERVATION')) THEN
      stmt_ := 'CREATE  VIEW SUPPLIER_SHIPMENT_RESERVATION
                (SHIPMENT_ID,LINE_NO,PART_NO,CONTRACT,CONFIGURATION_ID,LOCATION_NO,LOT_BATCH_NO,SERIAL_NO,ENG_CHG_LEVEL,
                 WAIV_DEV_REJ_NO,ACTIVITY_SEQ,QTY_RESERVED,QTY_PICKED,QTY_SHIPPED,LAST_ACTIVITY_DATE)
                AS
                SELECT 0, 0, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, 0, SYSDATE
                FROM   DUAL
                WHERE  1 = 2';
      EXECUTE IMMEDIATE stmt_;

      stmt_ := 'COMMENT ON TABLE SUPPLIER_SHIPMENT_RESERVATION IS ''MODULE=IGNORE^''';
      EXECUTE IMMEDIATE stmt_;
   END IF;
END;
/

-- ***** SUPPLIER_SHIPMENT_RESERVATION End ****

---------------------------------------------------------------------------------------------

-- ***** LANGUAGE_SYS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_131');
PROMPT Removing translations for user defined basic data.
DECLARE
   CURSOR get_invalid_basic_data IS
      SELECT distinct btr.lu , btr.attribute_key
        FROM BASIC_DATA_TRANSLATION btr
       WHERE btr.system_defined = 'TRUE'
         AND btr.module = 'INVENT'
         AND ((btr.module = 'INVENT' AND btr.lu = 'InventoryProductCode' AND NOT EXISTS (SELECT 1
                                                                                          FROM inventory_product_code_tab ipct
                                                                                         WHERE ipct.part_product_code = btr.attribute_key))

          OR (btr.lu = 'InventoryProductFamily' AND NOT EXISTS (SELECT 1
                                                                  FROM inventory_product_family_tab ipft
                                                                 WHERE ipft.part_product_family = btr.attribute_key))

          OR (btr.lu = 'InventoryPartStatusPar' AND NOT EXISTS (SELECT 1
                                                                  FROM inventory_part_status_par_tab ipst
                                                                 WHERE ipst.part_status = btr.attribute_key))

          OR (btr.lu = 'AssetClass' AND NOT EXISTS (SELECT 1
                                                      FROM asset_class_tab act
                                                     WHERE act.asset_class = btr.attribute_key))
          OR (btr.lu = 'AdditionalShippingDesc' AND NOT EXISTS (SELECT 1
                                                                  FROM Additional_Shipping_Desc_Tab asdt
                                                                 WHERE asdt.additional_shipping_desc_id = btr.attribute_key))

          OR (btr.lu = 'AssortmentNode' AND NOT EXISTS (SELECT 1
                                                          FROM Assortment_Node_Tab anot
                                                         WHERE anot.assortment_id      = SUBSTR(btr.attribute_key, 0, INSTR(btr.attribute_key, '~')-1)
                                                           AND anot.assortment_node_id = SUBSTR(btr.attribute_key, INSTR(btr.attribute_key, '~')+1) ))

          OR (btr.lu = 'AssortmentStructureLevel' AND NOT EXISTS (SELECT 1
                                                                    FROM Assortment_Structure_Level_Tab aslt
                                                                   WHERE aslt.assortment_id   = SUBSTR(btr.attribute_key, 0, INSTR(btr.attribute_key, '~')-1)
                                                                     AND aslt.structure_level = SUBSTR(btr.attribute_key, INSTR(btr.attribute_key, '~')+1) ))

          OR (btr.lu = 'AssortmentStructure' AND NOT EXISTS (SELECT 1
                                                               FROM Assortment_Structure_Tab astt
                                                              WHERE astt.assortment_id = btr.attribute_key))

          OR (btr.lu = 'CustomsStatisticsNumber' AND NOT EXISTS (SELECT 1
                                                                   FROM Customs_Statistics_Number_Tab cusnt
                                                                  WHERE cusnt.customs_stat_no = btr.attribute_key))

          OR (btr.lu = 'InspectionRule' AND NOT EXISTS (SELECT 1
                                                          FROM Inspection_Rule_Tab inrt
                                                         WHERE inrt.inspection_code = btr.attribute_key))

          OR (btr.lu = 'ProperShippingName' AND NOT EXISTS (SELECT 1
                                                              FROM Proper_Shipping_Name_Tab prshnt
                                                             WHERE prshnt.proper_shipping_name_id = btr.attribute_key))

          OR (btr.lu = 'StorageCapability' AND NOT EXISTS (SELECT 1
                                                             FROM Storage_Capability_Tab stcat
                                                             WHERE stcat.storage_capability_id = btr.attribute_key))
          OR (btr.lu = 'StorageCapabilReqGroup'  AND NOT EXISTS (SELECT 1
                                                                 FROM   storage_capabil_req_group_tab scrg
                                                                 WHERE  scrg.capability_req_group_id = btr.attribute_key))
          OR (btr.lu = 'StorageCapacityReqGroup' AND NOT EXISTS (SELECT 1
                                                                 FROM   storage_capacity_req_group_tab scrgt
                                                                 WHERE  scrgt.capacity_req_group_id = btr.attribute_key))
          OR (btr.lu = 'StorageCondReqGroup'     AND NOT EXISTS (SELECT 1
                                                                 FROM   storage_cond_req_group_tab scnrg
                                                                 WHERE  scnrg.condition_req_group_id = btr.attribute_key))
          OR (btr.lu = 'Substance' AND NOT EXISTS (SELECT 1
                                                     FROM Substance_Tab subt
                                                    WHERE subt.substance_no = btr.attribute_key)));
BEGIN
   FOR remrec_ IN get_invalid_basic_data LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation('INVENT', remrec_.lu, remrec_.attribute_key);
   END LOOP;
   COMMIT;
END;
/

-- ***** LANGUAGE_SYS_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_VALUE_PART_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_132');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN INVENTORY_VALUE_PART_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE INVENTORY_VALUE_PART_TAB
      SET rowversion = SYSDATE
    WHERE rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('INVENTORY_VALUE_PART_TAB', 'M', column_, TRUE);
END;
/
-- ***** INVENTORY_VALUE_PART_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_PLANNING_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_133');
PROMPT updating column ROWVERSION WITH SYSDATE AND make it NOT NULL IN INVENTORY_PART_PLANNING_TAB
PROMPT updating column order_requisition with 'R' and make it NOT NULL IN INVENTORY_PART_PLANNING_TAB
PROMPT Making MRP_ORDER_CODE NULLABLE IN INVENTORY_PART_PLANNING_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN

   UPDATE INVENTORY_PART_PLANNING_TAB
      SET  order_requisition = CASE order_requisition
                                  WHEN NULL THEN
                                     'R'
                                  ELSE
                                     order_requisition
                               END,
           rowversion        = CASE rowversion
                                  WHEN NULL THEN
                                     SYSDATE
                                  ELSE
                                     rowversion
                               END
    WHERE order_requisition IS NULL OR rowversion IS NULL;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('ROWVERSION','DATE', 'N');
   Database_SYS.Alter_Table_Column('INVENTORY_PART_PLANNING_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('MRP_ORDER_CODE', 'VARCHAR2(1)','Y');
   Database_SYS.Alter_Table_Column('INVENTORY_PART_PLANNING_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ORDER_REQUISITION','VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('INVENTORY_PART_PLANNING_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_134');
PROMPT Creating Constraint for HANDLING_UNIT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'INVENTORY_PART_PLANNING_TAB';
   index1_name_ VARCHAR2(30) := 'INVENTORY_PART_PLANNING_IX1';
BEGIN
   Database_SYS.Remove_Indexes(table_name_,index1_name_, TRUE);
END;
/
-- ***** INVENTORY_PART_PLANNING_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INTERNAL_CUSTOMER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_135');
PROMPT Updating rowversion in internal_customer_tab

UPDATE internal_customer_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_136');
PROMPT Modify column rowversion in internal_customer_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INTERNAL_CUSTOMER_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_137');
PROMPT Adding column extension_tmp  to move the data from extension in internal_customer_tab
PROMPT Moving data from  extension to extension_tmp in internal_customer_tab and emptying extension VALUES
PROMPT Modify column extension datatype to NUMBER in internal_customer_tab
PROMPT Moving data from  extension_tmp to extension in internal_customer_tab

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INTERNAL_CUSTOMER_TAB';
   stmt_       VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Column_Type(table_name_, 'EXTENSION') != 'NUMBER') THEN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('EXTENSION_TMP', 'NUMBER(5)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);

      stmt_  := 'UPDATE INTERNAL_CUSTOMER_TAB
                  SET   EXTENSION_TMP = EXTENSION,
                        EXTENSION     = NULL
                  WHERE EXTENSION IS NOT NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;

      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('EXTENSION', 'NUMBER(5)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

      stmt_  := 'UPDATE INTERNAL_CUSTOMER_TAB
                  SET   EXTENSION = EXTENSION_TMP
                  WHERE EXTENSION_TMP IS NOT NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
    END IF;
END;
/
-- ***** INTERNAL_CUSTOMER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SERVICE_RATE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_138');
PROMPT Updating rowversion in service_rate_tab

UPDATE service_rate_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_139');
PROMPT Modify column rowversion in service_rate_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SERVICE_RATE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** SERVICE_RATE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INSPECTION_RULE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_140');
PROMPT Updating rowversion in inspection_rule_tab

UPDATE inspection_rule_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_141');
PROMPT Modify column rowversion in inspection_rule_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INSPECTION_RULE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INSPECTION_RULE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PRODUCT_FAMILY_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_142');
PROMPT Updating rowversion in INVENTORY_PRODUCT_FAMILY_TAB

UPDATE inventory_product_family_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_143');
PROMPT Modify column rowversion in INVENTORY_PRODUCT_FAMILY_TAB as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PRODUCT_FAMILY_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INSPECTION_RULE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_WORKER_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_144');
PROMPT Updating rowversion in WAREHOUSE_WORKER_TAB

UPDATE warehouse_worker_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_145');
PROMPT Modify column rowversion in WAREHOUSE_WORKER_TAB as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_WORKER_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INSPECTION_RULE_TAB End *****

---------------------------------------------------------------------------------------------

-- ****** CREATE_PARTS_PER_SITE_HIST_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_146');
PROMPT Updating rowstate in create_parts_per_site_hist_tab

UPDATE create_parts_per_site_hist_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_147');
PROMPT Modify column rowstate as mandatory in create_parts_per_site_hist_tab

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CREATE_PARTS_PER_SITE_HIST_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** CREATE_PARTS_PER_SITE_HIST_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_WORKER_LOC_GROUP_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_148');
PROMPT Updating rowversion in warehouse_worker_loc_group_tab

UPDATE warehouse_worker_loc_group_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_149');
PROMPT Modify column rowversion in warehouse_worker_loc_group_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_WORKER_LOC_GROUP_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** WAREHOUSE_WORKER_LOC_GROUP_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** TRANSPORT_TASK_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_150');
PROMPT Updating rowversion AND pallet_id in transport_task_line_tab

UPDATE transport_task_line_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;



exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_151');
PROMPT Modify COLUMNS rowversion AND pallet_id in transport_task_line_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** TRANSPORT_TASK_LINE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** PART_AVAILABILITY_CONTROL_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_152');
PROMPT Updating the column ROWVERSION IN PART_AVAILABILITY_CONTROL_TAB with default value.

UPDATE part_availability_control_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_153');
PROMPT Updating the length of the columns PART_SUPPLY_CONTROL, PART_RESERVATION_CONTROL, PART_ORDER_ISSUE_CONTROL, PART_MANUAL_RESERV_CTRL, PART_SCRAP_CONTROL,
PROMPT PART_COUNTING_CONTROL and PART_NOORDER_ISSUE_CONTROL to 20 AND modifying the rowstate AS mandatory.
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'PART_AVAILABILITY_CONTROL_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_SUPPLY_CONTROL', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_RESERVATION_CONTROL', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_ORDER_ISSUE_CONTROL', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_MANUAL_RESERV_CTRL', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_SCRAP_CONTROL', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_COUNTING_CONTROL', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_NOORDER_ISSUE_CONTROL', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_154');
PROMPT Adding PUTAWAY_ZONE_REFILL_SOURCE TO TABLE PART_AVAILABILITY_CONTROL_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PART_AVAILABILITY_CONTROL_TAB';
BEGIN  
   column_ := Database_SYS.Set_Column_Values('PUTAWAY_ZONE_REFILL_SOURCE', 'VARCHAR(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


-- ***** PART_AVAILABILITY_CONTROL_TAB Start *****

--------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TASK_TYPE_SETUP_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_155');
PROMPT Updating the column ROWVERSION IN WAREHOUSE_TASK_TYPE_SETUP_TAB with default value

UPDATE warehouse_task_type_setup_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_156');
PROMPT Updating the length of the columns STATUS AND START_IN_STATUS to 20 AND  modifying the rowstate AS mandatory IN WAREHOUSE_TASK_TYPE_SETUP_TAB.
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'WAREHOUSE_TASK_TYPE_SETUP_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('STATUS', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('START_IN_STATUS', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** WAREHOUSE_TASK_TYPE_SETUP_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_VALUE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_157');
PROMPT Update NULL values of complete_flag column in inventory_value_tab with a dummy value AND
PROMPT Updating rowversion in inventory_value_tab

UPDATE inventory_value_tab
SET complete_flag  = CASE complete_flag
                        WHEN NULL
                           THEN 'DUMMY_UPGRADE'
                        ELSE
                           complete_flag
                      END,
        rowversion = CASE rowversion
                        WHEN NULL
                           THEN SYSDATE
                        ELSE
                           rowversion
                        END
WHERE complete_flag IS NULL OR rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_158');
PROMPT Modify description, rowversion columns in inventory_value_tab to mandatory columns.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_VALUE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('COMPLETE_FLAG', 'VARCHAR2(10)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_VALUE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** MATERIAL_REQUIS_RESERVAT_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_159');
PROMPT Updating the column ROWVERSION IN MATERIAL_REQUIS_RESERVAT_TAB with default value and changing it to a NOT NULL COLUMN

UPDATE material_requis_reservat_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_160');
PROMPT Modifying the column ROWVERSION IN MATERIAL_REQUIS_RESERVAT_TAB to a NOT NULL COLUMN
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'MATERIAL_REQUIS_RESERVAT_TAB';
BEGIN


   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** MATERIAL_REQUIS_RESERVAT_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** TRANSPORT_TASK_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_161');
PROMPT Updating rowversion in transport_task_tab

UPDATE transport_task_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_162');
PROMPT Modify column rowversion in transport_task_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** TRANSPORT_TASK_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** MATERIAL_REQUIS_PUR_ORDER_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_163');
PROMPT Updating rowversion in material_requis_pur_order_tab

UPDATE material_requis_pur_order_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_164');
PROMPT Modify column rowversion in material_requis_pur_order_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'MATERIAL_REQUIS_PUR_ORDER_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** MATERIAL_REQUIS_PUR_ORDER_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_PERIOD_HIST_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_165');
PROMPT Updating rowversion in inventory_part_period_hist_tab

UPDATE inventory_part_period_hist_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_166');
PROMPT Modify column rowversion in inventory_part_period_hist_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_PERIOD_HIST_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_PART_PERIOD_HIST_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_VALUE_SIMULATION_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_167');
PROMPT Updating rowversion in inventory_value_simulation_tab

UPDATE inventory_value_simulation_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_168');
PROMPT Modify column rowversion in inventory_value_simulation_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_VALUE_SIMULATION_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_VALUE_SIMULATION_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** COUNTING_RESULT_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_169');
PROMPT Updating rowversion and rowstate in counting_result_tab

UPDATE COUNTING_RESULT_TAB
   SET rowstate  = (CASE
                      WHEN rowstate IS NULL
                         THEN '<UNDEFINED>'
                      ELSE
                         rowstate
                    END),
      rowversion = (CASE
                      WHEN rowversion IS NULL
                        THEN SYSDATE
                      ELSE
                         rowversion
                    END)
WHERE rowstate IS NULL OR rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_170');
PROMPT Modify columns rowversion,rowstate in counting_result_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COUNTING_RESULT_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** COUNTING_RESULT_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_BARCODE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_171');
PROMPT Updating rowversion in inventory_part_barcode_tab

UPDATE inventory_part_barcode_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_172');
PROMPT Modify column rowversion in inventory_part_barcode_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_BARCODE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_173');
PROMPT Creating INDEX INVENTORY_PART_BARCODE_IX1 for INVENTORY_PART_BARCODE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_BARCODE_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_BARCODE_IX1';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ***** INVENTORY_PART_BARCODE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TASK_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_174');
PROMPT Updating rowversion,rowstate columns in warehouse_task_tab

UPDATE warehouse_task_tab
   SET rowstate  = CASE rowstate
                      WHEN NULL
                         THEN '<UNDEFINED>'
                      ELSE
                         rowstate
                    END,
      rowversion = CASE rowversion
                      WHEN NULL
                        THEN SYSDATE
                      ELSE
                         rowversion
                    END
WHERE rowstate IS NULL OR rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_175');
PROMPT Modify column rowversion, rowstate in warehouse_task_tab as mandatory
PROMPT add column PARK_REASON_ID AS a nullable VARCHAR2(100) COLUMN.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('PARK_REASON_ID', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_176');
PROMPT adding column worker_group to warehouse_task_tab

DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('WORKER_GROUP', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('WAREHOUSE_TASK_TAB', 'A', column_, TRUE);
END;
/
-- ***** WAREHOUSE_TASK_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** MATERIAL_REQUISITION_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_177');
PROMPT Updating rowversion in material_requisition_tab

UPDATE material_requisition_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_178');
PROMPT Modify column rowversion in material_requisition_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'MATERIAL_REQUISITION_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** MATERIAL_REQUISITION_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_WORKER_GROUP_LOC_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_179');
PROMPT Modify the length of column status in warehouse_worker_group_loc_tab

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_WORKER_GROUP_LOC_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('STATUS', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** WAREHOUSE_WORKER_GROUP_LOC_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SAFETY_INSTRUCTION_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_180');
PROMPT Updating rowversion in safety_instruction_tab

UPDATE safety_instruction_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_181');
PROMPT Modify column rowversion in safety_instruction_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SAFETY_INSTRUCTION_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** SAFETY_INSTRUCTION_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PRODUCT_CODE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_182');
PROMPT Updating the column ROWVERSION IN INVENTORY_PRODUCT_CODE_TAB with default value

UPDATE inventory_product_code_tab
   SET rowversion = SYSDATE
 WHERE rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_183');
PROMPT Modify column rowversion in INVENTORY_PRODUCT_CODE_TAB as mandatory

DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'INVENTORY_PRODUCT_CODE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_PRODUCT_CODE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INTRASTAT_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_184');
PROMPT Updating rowversion AND rowstate in intrastat_tab.

UPDATE intrastat_tab
   SET rowstate  = CASE rowstate
                      WHEN NULL
                         THEN '<UNDEFINED>'
                      ELSE
                         rowstate
                   END,
       rowversion = CASE rowversion
                       WHEN NULL
                          THEN SYSDATE
                       ELSE
                          rowversion
                    END
 WHERE rowstate IS NULL OR rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_185');
PROMPT Modify rowversion AND rowstate as mandatory in intrastat_tab.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INTRASTAT_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column( table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_186');
PROMPT adding columns DEC_NUMBER_EXPORT, VERSION_EXPORT, DECLARATION_EXPORT, DEC_NUMBER_IMPORT, VERSION_IMPORT and DECLARATION_IMPORT to INTRASTAT_TAB

DECLARE
   column_      Database_SYS.ColRec;
   table_name_  VARCHAR2(30) := 'INTRASTAT_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DEC_NUMBER_EXPORT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('VERSION_EXPORT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DECLARATION_EXPORT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DEC_NUMBER_IMPORT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('VERSION_IMPORT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DECLARATION_IMPORT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE );

END;
/

-- ***** INTRASTAT_TAB End *****


--------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_WORKER_TASK_TYPE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_187');
PROMPT Updating rowversion in warehouse_worker_task_type_tab

UPDATE warehouse_worker_task_type_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_188');
PROMPT Modify column rowversion in warehouse_worker_task_type_tab as mandatory
PROMPT Modify the length of column worker_id, status in warehouse_worker_task_type_tab

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_WORKER_TASK_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('WORKER_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('STATUS', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

END;
/
-- ***** WAREHOUSE_WORKER_TASK_TYPE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_WORKER_GRP_TASK_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_189');
PROMPT Updating the length of the COLUMN STATUS to 20 IN WAREHOUSE_WORKER_GRP_TASK_TAB.
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'WAREHOUSE_WORKER_GRP_TASK_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('STATUS', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** WAREHOUSE_WORKER_GRP_TASK_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_VALUE_SIM_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_190');
PROMPT Updating the column ROWVERSION IN INVENTORY_VALUE_SIM_LINE_TAB with default value
UPDATE inventory_value_sim_line_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_191');
PROMPT Changing ROWVERSION IN INVENTORY_VALUE_SIM_LINE_TAB to a NOT NULL COLUMN
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'INVENTORY_VALUE_SIM_LINE_TAB';
BEGIN

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_VALUE_SIM_LINE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** MATERIAL_REQUIS_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_192');
PROMPT Update NULL values of part_no column in material_requis_line_tab with a dummy value AND
PROMPT Updating rowversion in material_requis_line_tab

UPDATE material_requis_line_tab
SET  part_no    = CASE part_no
                     WHEN NULL
                        THEN 'DUMMY_UPGRADE'
                     ELSE
                        part_no
                   END,
     rowversion = CASE rowversion
                     WHEN NULL
                        THEN SYSDATE
                     ELSE
                        rowversion
                     END
WHERE part_no IS NULL OR rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_193');
PROMPT Modify part_no, rowversion columns in material_requis_line_tab to mandatory columns.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'MATERIAL_REQUIS_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_194');
PROMPT Create new index on ACTIVITY_SEQ in MATERIAL_REQUIS_LINE_TAB.

DECLARE
   columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Create_Index('MATERIAL_REQUIS_LINE_TAB', 'MATERIAL_REQUIS_LINE_IX2', columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   COMMIT;
END;
/
-- ***** MATERIAL_REQUIS_LINE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_DEF_LOC_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_195');
PROMPT Updating rowversion in inventory_part_def_loc_tab

UPDATE inventory_part_def_loc_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_196');
PROMPT Modify column rowversion in inventory_part_def_loc_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_DEF_LOC_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_PART_DEF_LOC_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SUPPLY_CHAIN_PART_GROUP_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_197');
PROMPT Updating description in supply_chain_part_group_tab

UPDATE supply_chain_part_group_tab
SET    description = 'DUMMY_UPGRADE'
WHERE  description IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_198');
PROMPT Modify column description as mandatory in supply_chain_part_group_tab

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SUPPLY_CHAIN_PART_GROUP_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(35)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** SUPPLY_CHAIN_PART_GROUP_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_IN_STOCK_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_199');
PROMPT Updating rowversion in inventory_part_in_stock_tab

UPDATE inventory_part_in_stock_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_200');
PROMPT Modify column rowversion in inventory_part_in_stock_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_PART_IN_STOCK_TAB End *****

---------------------------------------------------------------------------------------------
-- ***** INVENTORY_TRANSACTION_HIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_201');
PROMPT Modify column length of inventory_valuation_method to 20 in inventory_transaction_hist_tab.
PROMPT Adding COLUMNS ORIGINAL_AMOUNT AND AVAILABILITY_CONTROL_ID to table INVENTORY_TRANSACTION_HIST_TAB.

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_VALUATION_METHOD', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORIGINAL_AMOUNT'           , 'NUMBER'      , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AVAILABILITY_CONTROL_ID'   , 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_202');
PROMPT Updating rowversion in inventory_transaction_hist_tab.

UPDATE inventory_transaction_hist_tab
   SET rowversion = SYSDATE
 WHERE rowversion IS NULL;
 COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_203');
PROMPT Modify rowversion as mandatory in inventory_transaction_hist_tab.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column( table_name_, 'M', column_, TRUE);
END;
/
-- ***** INVENTORY_TRANSACTION_HIST_TAB End *****

--  --------------------------------------------------------------------------------------------

-- ***** SPECIAL_CODE_OF_MOVEMENT_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_204');
PROMPT Updating description in special_code_of_movement_tab

UPDATE special_code_of_movement_tab
SET    description = 'DUMMY_UPGRADE'
WHERE  description IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_205');
PROMPT Modify column description in special_code_of_movement_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SPECIAL_CODE_OF_MOVEMENT_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(100)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** SPECIAL_CODE_OF_MOVEMENT_TAB End *****

--  --------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_PLANNER_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_206');
PROMPT Updating rowversion in inventory_part_planner_tab

UPDATE inventory_part_planner_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_207');
PROMPT Modify column rowversion in inventory_part_planner_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_PLANNER_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** INVENTORY_PART_PLANNER_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_CHAR_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_208');
PROMPT Updating rowversion in inventory_part_char_tab.

UPDATE inventory_part_char_tab
   SET rowversion = SYSDATE
 WHERE rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_209');
PROMPT Modify rowversion as mandatory in inventory_part_char_tab.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_CHAR_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column( table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_210');
PROMPT Updating rowtype in inventory_part_char_tab.

UPDATE inventory_part_char_tab
   SET rowtype = 'DUMMY_UPGRADE'
 WHERE rowtype IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_211');
PROMPT Modify rowtype as mandatory in inventory_part_char_tab.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_CHAR_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWTYPE', 'VARCHAR2(30)', 'N');
   Database_SYS.Alter_Table_Column( table_name_, 'M', column_, TRUE);
END;
/
-- ***** INVENTORY_PART_CHAR_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_WORKER_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_212');
PROMPT Updating rowversion in warehouse_worker_group_tab.

UPDATE warehouse_worker_group_tab
   SET rowversion = SYSDATE
 WHERE rowversion IS NULL;
 COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_213');
PROMPT Modify rowversion as mandatory in warehouse_worker_group_tab.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_WORKER_GROUP_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column( table_name_, 'M', column_, TRUE);
END;
/
-- ***** WAREHOUSE_WORKER_GROUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ASSET_CLASS_COMPANY_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_214');
PROMPT updating null values in column rowversion in asset_class_company_tab with SYSDATE

UPDATE asset_class_company_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_215');
PROMPT Modify column rowversion in asset_class_company_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ASSET_CLASS_COMPANY_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** ASSET_CLASS_COMPANY_TAB End *****

----------------------------------------------------------------------------------------------

-- ***** COMMODITY_GROUP_COMPANY_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_216');
PROMPT updating null values in column rowversion in commodity_group_company_tab with SYSDATE

UPDATE commodity_group_company_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_217');
PROMPT Modify column rowversion in commodity_group_company_tab as mandatory

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COMMODITY_GROUP_COMPANY_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** COMMODITY_GROUP_COMPANY_TAB End *****

--  --------------------------------------------------------------------------------------------

-- ***** REMOTE_WHSE_REFILL_EVENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_218');
PROMPT Creating TABLE REMOTE_WHSE_REFILL_EVENT_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_EVENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_STARTED', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_TAB';
   index_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_PK';
   rkidx_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_EVENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_219');
PROMPT Creating INDEX REMOTE_WHSE_REFILL_EVENT_1_IX for REMOTE_WHSE_REFILL_EVENT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_TAB';
   index_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_1_IX';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_STARTED');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ***** REMOTE_WHSE_REFILL_EVENT_TAB End *****

--  --------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TASK_PARK_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_220');
PROMPT Creating TABLE WAREHOUSE_TASK_PARK_REASON_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_PARK_REASON_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PARK_REASON_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_PARK_REASON_TAB';
   index_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_PARK_REASON_PK';
   rkidx_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_PARK_REASON_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PARK_REASON_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WAREHOUSE_TASK_PARK_REASON_TAB End *****

--  --------------------------------------------------------------------------------------------

-- ***** PUTAWAY_TO_EMPTY_EVENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_221');
PROMPT Creating TABLE PUTAWAY_TO_EMPTY_EVENT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT'         , 'VARCHAR2(5)' , 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID'     , 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID'           , 'VARCHAR2(5)' , 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID'          , 'VARCHAR2(5)' , 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID'           , 'VARCHAR2(5)' , 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID'           , 'VARCHAR2(5)' , 'N');
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_EVENT_ID' , 'NUMBER'      , 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_STARTED', 'DATE'        , 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION'       , 'DATE'        , 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY'           , 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_222');
PROMPT Create Constraints for PUTAWAY_TO_EMPTY_EVENT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_TAB';
   index_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_PK';
   rkidx_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT'        );
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID'    );
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID'          );
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID'         );
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID'          );
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID'          );
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_EVENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_223');
PROMPT Creating INDEX PUTAWAY_TO_EMPTY_EVENT_IX1 for PUTAWAY_TO_EMPTY_EVENT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_TAB';
   index_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_IX1';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_STARTED');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ***** PUTAWAY_TO_EMPTY_EVENT_TAB End *****

---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES  ----------------------------------------
---------------------------------------------------------------------------------------------

-- Handling Unit sequence to start with the next number from the old handling_package_seq
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_224');
PROMPT Creating Sequence handling_unit_seq
BEGIN
   IF (Database_SYS.Object_Exist('HANDLING_PACKAGE_SEQ', 'SEQUENCE') ) THEN
      EXECUTE IMMEDIATE 'BEGIN Database_SYS.Create_Sequence(''HANDLING_UNIT_SEQ'',
                                                            ''INCREMENT BY 1 START WITH ''|| HANDLING_PACKAGE_SEQ.nextval ||'' NOMAXVALUE MINVALUE 1 NOCYCLE NOCACHE NOORDER'');
                         END;';
   ELSE
      Database_SYS.Create_Sequence('HANDLING_UNIT_SEQ',
                                   'INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1 NOCYCLE NOCACHE NOORDER');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_225');
PROMPT Creating Sequence INVENTORY_PUTAWAY_SEQUENCE_ID
BEGIN
   Database_SYS.Create_Sequence('INVENTORY_PUTAWAY_EVENT_ID', 'INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1 NOCYCLE NOCACHE NOORDER');
END;
/

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_226');
PROMPT Renaming obsolete tables PALLET_TYPE_TAB, PALLET_ACCESSORY_TAB, PALLET_TYPE_ACCESSORY_TAB, INVENTORY_LOCATION_TAB.
BEGIN
   Database_SYS.Rename_Table('PALLET_ACCESSORY_TAB',      'PALLET_ACCESSORY_1410',       TRUE);
   Database_SYS.Rename_Table('PALLET_TYPE_ACCESSORY_TAB', 'PALLET_TYPE_ACCESSORY_1410',  TRUE);

   IF Database_SYS.Table_Exist('INVENTORY_LOCATION_1400') THEN
      -- LCS Bug:105718 is installed. But, Inventcl.sql is not run yet
      Database_SYS.Rename_Table('INVENTORY_LOCATION_1400', 'INVENTORY_LOCATION_1410', TRUE);
   ELSE
      Database_SYS.Rename_Table('INVENTORY_LOCATION_TAB', 'INVENTORY_LOCATION_1410', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_227');
PROMPT Renaming obsolete table MRP_RULE_TAB.
BEGIN
   Database_SYS.Remove_Constraints ('MRP_RULE_TAB', 'MRP_RULE_RK');
   Database_SYS.Remove_Constraints ('MRP_RULE_TAB', 'MRP_RULE_PK');
   Database_SYS.Rename_Table('MRP_RULE_TAB',              'MRP_RULE_TAB_1410',            TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_228');
PROMPT Removing ROWKEY from INVENT_INFO_SERVICES_RPT
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWKEY', 'VARCHAR2(50)', 'Y');
   Database_Sys.Alter_Table_Column ('INVENT_INFO_SERVICES_RPT', 'DROP', column_);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_229');
PROMPT Removing index INVENT_INFO_SERVICES_RPT_RK
BEGIN
   Database_SYS.Remove_Indexes('INVENT_INFO_SERVICES_RPT', 'INVENT_INFO_SERVICES_RPT_RK');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_230');
PROMPT Creating view INVENT_INFO_SERVICES_RPV again to reflect the changes.

CREATE OR REPLACE VIEW INVENT_INFO_SERVICES_RPV AS
SELECT *
FROM   invent_info_services_rpt t
WHERE  EXISTS (SELECT 1
               FROM   allowed_report a
               WHERE  a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE INVENT_INFO_SERVICES_RPV
      IS 'LU=InventoryPart^PROMPT=Invent Info Services^MODULE=INVENT^';

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_231');
PROMPT Drop temporary tables ORDER_SUPPLY_DEMAND_TMP, ORDER_SUPPLY_DEMAND_EXT_TMP, CUSTORD_SUPPLY_DEMAND_TMP,
PROMPT ORD_SUP_DEM_PLANNABLE_TMP, ORD_SUP_DEM_EXT_PLANNABLE_TMP, CUSTORD_SUP_DEM_PLANNABLE_TMP and INTRASTAT_FILE_TEMP
BEGIN
   Database_SYS.Remove_Table('ORDER_SUPPLY_DEMAND_TMP', TRUE);
   Database_SYS.Remove_Table('ORDER_SUPPLY_DEMAND_EXT_TMP', TRUE);
   Database_SYS.Remove_Table('CUSTORD_SUPPLY_DEMAND_TMP', TRUE);
   Database_SYS.Remove_Table('ORD_SUP_DEM_PLANNABLE_TMP', TRUE);
   Database_SYS.Remove_Table('ORD_SUP_DEM_EXT_PLANNABLE_TMP', TRUE);
   Database_SYS.Remove_Table('CUSTORD_SUP_DEM_PLANNABLE_TMP', TRUE);
   Database_SYS.Remove_Table('INTRASTAT_FILE_TEMP', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_232');
PROMPT Remove obsolete packages PALLET_TYPE_API, PALLET_ACCESSORY_API, PALLET_TYPE_ACCESSORY_API, PALLET_TYPE_REUSABILITY_API.

BEGIN
   Database_SYS.Remove_Package('PALLET_TYPE_API',             TRUE);
   Database_SYS.Remove_Package('PALLET_ACCESSORY_API',        TRUE);
   Database_SYS.Remove_Package('PALLET_TYPE_ACCESSORY_API',   TRUE);
   Database_SYS.Remove_Package('PALLET_TYPE_REUSABILITY_API', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_233');
PROMPT Remove obsolete package MRP_RULE_API

BEGIN
   Database_SYS.Remove_Package('MRP_RULE_API', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_234');
PROMPT Remove obsolete views PALLET_TYPE, PALLET_ACCESSORY, PALLET_TYPE_ACCESSORY.

BEGIN
   Database_SYS.Remove_View('PALLET_TYPE',             TRUE);
   Database_SYS.Remove_View('PALLET_ACCESSORY',        TRUE);
   Database_SYS.Remove_View('PALLET_TYPE_ACCESSORY',   TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_235');
PROMPT Dropping views inventory_part_value_intermed, invepart_value_detail_intermed, inventory_part_at_cust_local_1,
PROMPT TRANSPORT_TASK_LINE_PUB and TRANSPORT_TASK_MANAGER_LOCAL_2.

BEGIN
   Database_SYS.Remove_View('INVENTORY_PART_VALUE_INTERMED');
   Database_SYS.Remove_View('INVEPART_VALUE_DETAIL_INTERMED');
   Database_SYS.Remove_View('INVENTORY_PART_AT_CUST_LOCAL_1');
   Database_SYS.Remove_View('TRANSPORT_TASK_LINE_PUB', TRUE);
   Database_SYS.Remove_View('TRANSPORT_TASK_MANAGER_LOCAL_2', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_236');
PROMPT Remove obsolete VIEW mrp_rule.

BEGIN
   Database_SYS.Remove_View('MRP_RULE');
END;
/
-- Removing obsolete views which are no longer support for create company flow
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_237');
PROMPT Removing obsolete VIEWS IN CREATE company flow
BEGIN
   Database_SYS.Remove_View('COMPANY_INVENT_INFO_CPT', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE SEQUENCES ------------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_238');
PROMPT Removed unsused sequences MPC_DOCUMENT_NO, MPC_PDM_ORDER_NO_SEQ and PT_INTRASTAT_SEQ.
BEGIN
   Database_SYS.Remove_Sequence('MPC_DOCUMENT_NO', TRUE);
   Database_SYS.Remove_Sequence('MPC_PDM_ORDER_NO_SEQ', TRUE);
   Database_SYS.Remove_Sequence('PT_INTRASTAT_SEQ', TRUE);
END;
/


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_239');
PROMPT Rename Indexes/Constraints
BEGIN
   Database_SYS.Rename_Index('ASSORTMENT_NODE_1_IX', 'ASSORTMENT_NODE_IX1', TRUE);

   Database_SYS.Rename_Index('COUNTING_REPORT_LINE_1_IX', 'COUNTING_REPORT_LINE_IX1', TRUE);
   Database_SYS.Rename_Index('COUNTING_REPORT_LINE_2_IX', 'COUNTING_REPORT_LINE_IX2', TRUE);

   Database_SYS.Rename_Index('COUNTING_RESULT_1_IX', 'COUNTING_RESULT_IX1', TRUE);
   Database_SYS.Rename_Index('COUNTING_RESULT_2_IX', 'COUNTING_RESULT_IX2', TRUE);
   Database_SYS.Rename_Index('COUNTING_RESULT_3_IX', 'COUNTING_RESULT_IX3', TRUE);

   Database_SYS.Rename_Index('HANDLING_UNIT_1_IX', 'HANDLING_UNIT_IX1', TRUE);

   Database_SYS.Rename_Index('INTRASTAT_LINE_IX' , 'INTRASTAT_LINE_IX1', TRUE);
   Database_SYS.Rename_Index('INTRASTAT_LINE2_IX', 'INTRASTAT_LINE_IX2', TRUE);
   Database_SYS.Rename_Index('INTRASTAT_LINE3_IX', 'INTRASTAT_LINE_IX3', TRUE);
   Database_SYS.Rename_Index('INTRASTAT_LINE4_IX', 'INTRASTAT_LINE_IX4', TRUE);
   Database_SYS.Rename_Index('INTRASTAT_LINE5_IX', 'INTRASTAT_LINE_IX5', TRUE);
   Database_SYS.Rename_Index('INTRASTAT_LINE6_IX', 'INTRASTAT_LINE_IX6', TRUE);

   Database_SYS.Rename_Index('INVENTORY_PART_1_IX', 'INVENTORY_PART_IX1', TRUE);
   Database_SYS.Rename_Index('INVENTORY_PART_2_IX', 'INVENTORY_PART_SX1', TRUE);
   Database_SYS.Rename_Index('INVENTORY_PART_3_IX', 'INVENTORY_PART_IX2', TRUE);

   Database_SYS.Rename_Index('INVENTORY_PART_FIFO_DETAIL1_IX', 'INVENTORY_PART_FIFO_DETAIL_IX1', TRUE);
   Database_SYS.Rename_Index('INVENTORY_PART_FIFO_ISSUE_1_IX', 'INVENTORY_PART_FIFO_ISSUE_IX1', TRUE);
   Database_SYS.Rename_Index('INVENTORY_PART_FIFO_UNISS_1_IX', 'INVENTORY_PART_FIFO_UNISS_IX1', TRUE);

   Database_SYS.Rename_Index('INVENTORY_PART_IN_STOCK_1_IX', 'INVENTORY_PART_IN_STOCK_IX1', TRUE);

   Database_SYS.Rename_Index('INVENTORY_PART_IN_TRANSIT_1_IX', 'INVENTORY_PART_IN_TRANSIT_IX1', TRUE);

   Database_SYS.Rename_Index('INVENTORY_PART_LOC_PALLET_1_IX', 'INVENTORY_PART_LOC_PALLET_IX1', TRUE);

   Database_SYS.Rename_Index('INVENTORY_PART_PERIOD_HIST1_IX', 'INVENTORY_PART_PERIOD_HIST_IX1', TRUE);

   IF Database_SYS.Get_Index_Columns ('INVENTORY_PART_PLANNING_TAB', 'INVENTORY_PART_PLANNING_IX2') = 'CONTRACT' THEN
      Database_SYS.Rename_Index('INVENTORY_PART_PLANNING_IX2', 'INVENTORY_PART_PLANNING_IX1', TRUE);
   END IF;

   IF Database_SYS.Get_Index_Columns ('INVENTORY_PART_PLANNING_TAB', 'INVENTORY_PART_PLANNING_IX3') = 'PLANNING_METHOD' THEN
      Database_SYS.Rename_Index('INVENTORY_PART_PLANNING_IX3', 'INVENTORY_PART_PLANNING_IX2', TRUE);
   END IF;

   Database_SYS.Rename_Index('INVENTORY_PART_UNIT_COST_1_IX', 'INVENTORY_PART_UNIT_COST_IX1', TRUE);
   Database_SYS.Rename_Index('INVENTORY_PART_UNIT_COST_2_IX', 'INVENTORY_PART_UNIT_COST_IX2', TRUE);

   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_COST1_IX', 'INVENTORY_TRANSACTION_COST_IX1', TRUE);

   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIST1_IX', 'INVENTORY_TRANSACTION_HIST_IX1', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIST2_IX', 'INVENTORY_TRANSACTION_HIST_IX2', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIST3_IX', 'INVENTORY_TRANSACTION_HIST_IX3', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIST4_IX', 'INVENTORY_TRANSACTION_HIST_IX4', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIST6_IX', 'INVENTORY_TRANSACTION_HIST_IX5', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIST9_IX', 'INVENTORY_TRANSACTION_HIST_IX6', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIS10_IX', 'INVENTORY_TRANSACTION_HIST_IX7', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIS11_IX', 'INVENTORY_TRANSACTION_HIST_IX8', TRUE);
   Database_SYS.Rename_Index('INVENTORY_TRANSACTION_HIS12_IX', 'INVENTORY_TRANSACTION_HIST_IX9', TRUE);

   Database_SYS.Rename_Index('INVENT_TRANS_INTERCONNECT_1_IX', 'INVENT_TRANS_INTERCONNECT_IX1', TRUE);

   Database_SYS.Rename_Index('MATERIAL_REQUIS_LINE_1_IX', 'MATERIAL_REQUIS_LINE_IX1', TRUE);

   Database_SYS.Rename_Index('SUPPLY_DEMAND_INFO_1_IX', 'SUPPLY_DEMAND_INFO_IX1', TRUE);

   Database_SYS.Rename_Index('SUP_DEM_PLANNABLE_INFO_1_IX', 'SUP_DEM_PLANNABLE_INFO_IX1', TRUE);

   Database_SYS.Rename_Index('PACKING_INSTRUCTION_NODE_1_IX', 'PACKING_INSTRUCTION_NODE_IX1', TRUE);

   Database_SYS.Rename_Index('PRE_INVENT_TRANS_AVG_COST_1_IX', 'PRE_INVENT_TRANS_AVG_COST_IX1', TRUE);

   Database_SYS.Rename_Index('REMOTE_WHSE_REFILL_EVENT_1_IX', 'REMOTE_WHSE_REFILL_EVENT_IX1', TRUE);

   Database_SYS.Rename_Index('ROTABLE_PART_POOL_1_IX', 'ROTABLE_PART_POOL_IX1', TRUE);

   Database_SYS.Rename_Index('SERIAL_NO_RESERVATION_1_IX', 'SERIAL_NO_RESERVATION_IX1', TRUE);

   Database_SYS.Rename_Index('TEMPORARY_PART_COST_DETAIL_UIX', 'TEMPORARY_PART_COST_DETAIL_UX1', TRUE);

   Database_SYS.Rename_Index('TRANSPORT_TASK_1_IX', 'TRANSPORT_TASK_IX1', TRUE);

   Database_SYS.Rename_Index('TRANSPORT_TASK_LINE_1_IX', 'TRANSPORT_TASK_LINE_IX1', TRUE);
   Database_SYS.Rename_Index('TRANSPORT_TASK_LINE_2_IX', 'TRANSPORT_TASK_LINE_IX2', TRUE);
   Database_SYS.Rename_Index('TRANSPORT_TASK_LINE_3_IX', 'TRANSPORT_TASK_LINE_IX3', TRUE);
   Database_SYS.Rename_Index('TRANSPORT_TASK_LINE_4_IX', 'TRANSPORT_TASK_LINE_IX4', TRUE);

   Database_SYS.Rename_Index('WAREHOUSE_BAY_BIN_UIX', 'WAREHOUSE_BAY_BIN_UX1', TRUE);

   Database_SYS.Rename_Index('WAREHOUSE_TASK_1_IX', 'WAREHOUSE_TASK_IX1', TRUE);
   Database_SYS.Rename_Index('WAREHOUSE_TASK_2_IX', 'WAREHOUSE_TASK_IX2', TRUE);

   Database_SYS.Rename_Constraint('COUNTRY_REGION_TAB', 'COUNTRY_REGION_TAB_PK', 'COUNTRY_REGION_PK', TRUE);
   Database_SYS.Rename_Constraint('INVENTORY_PART_BARCODE_TAB', 'BARCODE_ID_PK', 'INVENTORY_PART_BARCODE_PK', TRUE);
   Database_SYS.Rename_Constraint('SPECIAL_CODE_OF_MOVEMENT_TAB', 'SPECIAL_CODE_MOVEMENT_TAB_PK', 'SPECIAL_CODE_OF_MOVEMENT_PK', TRUE);
   Database_SYS.Rename_Constraint('SPECIAL_CODE_OF_MOVEMENT_TAB', 'SPECIAL_CODE_MOVEMENT_TAB_RK', 'SPECIAL_CODE_OF_MOVEMENT_RK', TRUE);
END;
/

---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Timestamp_240');
PROMPT Upgrade statements in file 1410.upg end here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1410.upg','Done');


