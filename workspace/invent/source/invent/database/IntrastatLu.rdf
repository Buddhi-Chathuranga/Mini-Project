-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatLu.rdf
--
--  Date    Sign     History
--  ------  ----     --------------------------------------------------------
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  200120  ErFelk  Bug 151857(SCZ-8500), Modified cursor get_lines by removing charges when calculating the statistical_value.
--  191206  ChJalk  Bug 150820(SCZ-7228), Created Intrastat report for country Luxembourg.
-----------------------------------------------------------------------------

define MODULE                = INVENT
define LU                    = Intrastat
define PKG                   = INTRASTAT_LU_RPI

define TABLE                 = INVENT_INFO_SERVICES_RPT
define VIEW                  = INTRASTAT_LU_REP
define VIEW_RPV              = INVENT_INFO_SERVICES_RPV
define METHOD                = Report_Overview

define INTRASTAT_DIRECTION   = S1
define INTRASTAT_ID          = N1
define STAT_VAL_TOT          = N2
define INV_VAL_TOT           = N3
define TYPE                  = N4
define REPORT_TITLE          = S2
define NO_OF_LINES           = N5
define CURRENCY_CODE         = S3
define CREATION_DATE         = S4
define REPORTING_PERIOD      = S5
define COMPANY_NAME          = S6
define COMPANY_VAT_NO        = S7
define REPR_NAME             = S8
define REPR_VAT_NO           = S9
define COUNTRY_DEST_TITLE    = S10
define LINE_NO               = N6
define COUNTRY_OF_ORIGIN     = S11
define NATURE_OF_TRANSACTION = S12
define MODE_OF_TRANSPORT     = S13
define STAT_CODE             = S14
define NET_WEIGHT            = N7
define ALT_QUANTITY          = N8
define INVOICE_VALUE         = N9
define STAT_VALUE            = N10
define PARTNER_VAT_NO        = S15
define COM_CODE_DESC         = S16
define COUNTRY_DESTINATION   = S17
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                        RESULT_KEY,
       H.ROW_NO                            ROW_NO,
       H.&INTRASTAT_DIRECTION              INTRASTAT_DIRECTION,
       H.&INTRASTAT_ID                     INTRASTAT_ID,
       H.&STAT_VAL_TOT                     STAT_VAL_TOT,
       H.&INV_VAL_TOT                      INV_VAL_TOT, 
       H.&TYPE                             TYPE,
       H.&REPORT_TITLE                     REPORT_TITLE,
       H.&NO_OF_LINES                      NO_OF_LINES,
       H.&CURRENCY_CODE                    CURRENCY_CODE,
       H.&CREATION_DATE                    CREATION_DATE,
       H.&REPORTING_PERIOD                 REPORTING_PERIOD, 
       H.&COMPANY_NAME                     COMPANY_NAME,      
       H.&COMPANY_VAT_NO                   COMPANY_VAT_NO,
       H.&REPR_NAME                        REPR_NAME,
       H.&REPR_VAT_NO                      REPR_VAT_NO,
       H.&COUNTRY_DEST_TITLE               COUNTRY_DEST_TITLE,
       H.&COUNTRY_DESTINATION              COUNTRY_DESTINATION,
       D.&LINE_NO                          LINE_NO,
       D.&COUNTRY_OF_ORIGIN                COUNTRY_OF_ORIGIN,
       D.&NATURE_OF_TRANSACTION            NATURE_OF_TRANSACTION,       
       D.&MODE_OF_TRANSPORT                MODE_OF_TRANSPORT,
       D.&STAT_CODE                        STAT_CODE,
       D.&NET_WEIGHT                       NET_WEIGHT,
       D.&ALT_QUANTITY                     ALT_QUANTITY,
       D.&INVOICE_VALUE                    INVOICE_VALUE,
       D.&STAT_VALUE                       STAT_VALUE,
       D.&PARTNER_VAT_NO                   PARTNER_VAT_NO,
       D.&COM_CODE_DESC                    COM_CODE_DESC
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..intrastat_direction
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Intrastat Direction^QUERY=Intrastat Direction:^QFLAGS=M-S--^REF=IntrastatDirection^STATUS=Enter Intrastat Direction^';
COMMENT ON COLUMN &VIEW..intrastat_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Intrastat ID^QUERY=Intrastat ID:^QFLAGS=M-S--^REF=Intrastat^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..stat_val_tot
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Statistical Value :^';
COMMENT ON COLUMN &VIEW..inv_val_tot
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value :^';
COMMENT ON COLUMN &VIEW..type
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Type^';
COMMENT ON COLUMN &VIEW..report_title
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Report Title^';
COMMENT ON COLUMN &VIEW..no_of_lines
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of Lines :^';
COMMENT ON COLUMN &VIEW..currency_code
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Reporting Currency Code :^';
COMMENT ON COLUMN &VIEW..creation_date
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Creation Date :^';
COMMENT ON COLUMN &VIEW..reporting_period
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Reporting Period :^';
COMMENT ON COLUMN &VIEW..company_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Company Name :^';
COMMENT ON COLUMN &VIEW..company_vat_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Company Tax No :^';
COMMENT ON COLUMN &VIEW..repr_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Representative Name:^';
COMMENT ON COLUMN &VIEW..repr_vat_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Representative Tax No:^';
COMMENT ON COLUMN &VIEW..country_dest_title
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Country of Destination title^';
COMMENT ON COLUMN &VIEW..country_destination
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Country Destination^';
COMMENT ON COLUMN &VIEW..line_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^';
COMMENT ON COLUMN &VIEW..country_of_origin
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Country Of Origin^';
COMMENT ON COLUMN &VIEW..nature_of_transaction
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Nature Of Transaction^';
COMMENT ON COLUMN &VIEW..mode_of_transport
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Mode Of Transport^';
COMMENT ON COLUMN &VIEW..stat_code
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Commodity Code^';
COMMENT ON COLUMN &VIEW..net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN &VIEW..alt_quantity
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^';
COMMENT ON COLUMN &VIEW..invoice_value
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^';
COMMENT ON COLUMN &VIEW..stat_value
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Stat Value^';
COMMENT ON COLUMN &VIEW..partner_vat_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Partner VAT No^';   
COMMENT ON COLUMN &VIEW..com_code_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Commodity Code Description^';

BEGIN 
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Intrastat Report Luxembourg', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Supply Chain','Intrastat');
   -- Addition for Custom Fields ------ 
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_LU_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
  
   file_line_no_              NUMBER := 0;
   type_                      NUMBER;
   vat_no_                    VARCHAR2(50);
   stmt_                      VARCHAR2(2000);
   result_key_                NUMBER;
   row_no_                    NUMBER := 1;
   parent_row_no_             NUMBER := 0;
   report_title_              VARCHAR2(50);
   intrastat_id_              NUMBER;
   intrastat_direction_       VARCHAR2(20);
   rep_curr_rate_             NUMBER;
   country_code_              VARCHAR2(2);   
   statistical_values_sum_    NUMBER := 0;
   report_period_             VARCHAR2(4);
   creation_date_str_         VARCHAR2(8);
   com_code_desc_             VARCHAR2(2000);
   company_vat_no_            VARCHAR2(35);
   company_name_              VARCHAR2(35);
   repr_vat_no_               VARCHAR2(35);
   repr_name_                 VARCHAR2(35);
   notc_dummy_                VARCHAR2(2);  
   country_destination_title_ VARCHAR2(50);  
   rounded_statistical_value_ NUMBER := 0;
   inv_val_tot_               NUMBER := 0;
   stat_val_tot_              NUMBER := 0;
   do_xml_                    BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                     BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                       CLOB;
   package_name_              VARCHAR2(100) := 'INTRASTAT_LU_REP';

   CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc = notc_
      AND    country_code = 'LU';

   CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             creation_date,
             rep_curr_code,
             bransch_no,
             bransch_no_repr,
             company_contact,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_lines IS
      SELECT il.intrastat_direction,             
             DECODE(intrastat_direction_, 'IMPORT', il.country_of_origin, '')                                     country_of_origin,
             cn.country_notc,
             il.mode_of_transport,
             SUBSTR(REPLACE(il.customs_stat_no,' '),1,8)                                                          customs_stat_no,
             SUM(il.quantity * il.net_unit_weight)                                                                mass,
             SUM(NVL(ABS(il.intrastat_alt_qty),0) * il.quantity)                                                  alternative_qty,
             SUM(il.quantity * NVL(il.invoiced_unit_price, il.order_unit_price)) * rep_curr_rate_                 invoice_value,
             SUM((NVL(il.invoiced_unit_price, NVL(il.order_unit_price,0)) + 
                  NVL(il.unit_add_cost_amount_inv, NVL(il.unit_add_cost_amount,0))) * il.quantity) * rep_curr_rate_   statistical_value,                                                                                                     
             DECODE(intrastat_direction_, 'EXPORT',il.opponent_tax_id, '')                                        partner_vat_no,
             il.opposite_country                                                                                  opposite_country
      FROM   country_notc_tab cn, intrastat_line_tab il
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direction_
      AND    il.rowstate         = 'Released'      
      AND    il.notc             = cn.notc
      AND    cn.country_code     = country_code_
      GROUP BY  il.intrastat_direction,                
                DECODE(intrastat_direction_, 'IMPORT', il.country_of_origin, ''),
                il.mode_of_transport,                                
                cn.country_notc,                                            
                SUBSTR(REPLACE(il.customs_stat_no,' '),1,8),                
                DECODE(intrastat_direction_, 'EXPORT',il.opponent_tax_id, ''),
                il.opposite_country ; 

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   
   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN    
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTLU: Intrastat Export Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'EXPORTCD: Country of Destination'); 
      type_ := -1;
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTLU: Intrastat Import Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'IMPORTCD: Country of Dispatch');      
      type_ := 1;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR headrec_ IN get_head LOOP      
      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;
        
      report_period_ := to_char(headrec_.end_date, 'YYMM');         
      creation_date_str_ := to_char(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_rate_ := headrec_.rep_curr_rate;
      country_code_ := headrec_.country_code;      

      company_vat_no_ :=  SUBSTR(vat_no_, 1, 31) || '-' || SUBSTR(headrec_.bransch_no, 1, 3);
      company_name_ := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 35); 
  
      IF (headrec_.representative IS NOT NULL) THEN
         repr_vat_no_ :=  SUBSTR(headrec_.repr_tax_no, 1, 31) || '-' || SUBSTR(headrec_.bransch_no_repr, 1, 3);
         repr_name_ := SUBSTR(Person_Info_API.Get_Name(headrec_.representative), 1, 35);
      END IF; 

      -- Insert Head details
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'TYPE', type_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_str_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', report_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_NAME', repr_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_VAT_NO', repr_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', headrec_.rep_curr_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DEST_TITLE', country_destination_title_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',headrec_.rowkey, '&VIEW');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_LU_LINES');         
      END IF;

      IF (do_rs_) THEN
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, 
             &COMPANY_NAME, &COMPANY_VAT_NO, 
             &REPR_NAME, &REPR_VAT_NO,           
             &REPORTING_PERIOD, &CREATION_DATE, &TYPE,
             &CURRENCY_CODE, &REPORT_TITLE, &COUNTRY_DEST_TITLE )
         VALUES
            (result_key_, row_no_, parent_row_no_, 
            company_name_, company_vat_no_, 
            repr_name_, repr_vat_no_,          
            report_period_, creation_date_str_, type_,
            headrec_.rep_curr_code, report_title_, country_destination_title_ );   
      END IF;

      parent_row_no_ := row_no_;   
      row_no_ := row_no_ + 1;

      -- Data Records
      FOR linerec_ IN get_lines LOOP
         file_line_no_ := file_line_no_ + 1;
         com_code_desc_ := Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no);
         IF (linerec_.statistical_value < 1) THEN
            rounded_statistical_value_ := 1;
         ELSE
            rounded_statistical_value_ := ROUND(linerec_.statistical_value);
         END IF;
         -- insert detail rows
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_LU_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', file_line_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DESTINATION', linerec_.opposite_country);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NATURE_OF_TRANSACTION', linerec_.country_notc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', linerec_.mode_of_transport);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COM_CODE_DESC', com_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_CODE', linerec_.customs_stat_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', REPLACE(TO_CHAR(ROUND(linerec_.mass, 3)), '.', ','));
            Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_QUANTITY', ROUND(linerec_.alternative_qty));
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', ROUND(linerec_.invoice_value));
            Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUE', rounded_statistical_value_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PARTNER_VAT_NO', linerec_.partner_vat_no);
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_LU_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &NATURE_OF_TRANSACTION,
                &MODE_OF_TRANSPORT, &STAT_CODE, &NET_WEIGHT, 
                &ALT_QUANTITY, &INVOICE_VALUE, &STAT_VALUE, 
                &PARTNER_VAT_NO )
            VALUES
               (result_key_, row_no_, parent_row_no_, file_line_no_, 
                linerec_.country_of_origin, linerec_.country_notc,
                linerec_.mode_of_transport, linerec_.customs_stat_no, ROUND(linerec_.mass),
                ROUND(linerec_.alternative_qty), ROUND(linerec_.invoice_value), 
                rounded_statistical_value_, linerec_.partner_vat_no );
         END IF;

         row_no_ := row_no_ + 1;

         -- sums
         inv_val_tot_   := inv_val_tot_ + ROUND(linerec_.invoice_value);
         stat_val_tot_  := stat_val_tot_ + rounded_statistical_value_;

      END LOOP;

      IF (row_no_ = 2) THEN -- no details      
         -- insert blank row
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_LU_LINE');
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_LU_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &NATURE_OF_TRANSACTION,
                &MODE_OF_TRANSPORT, &STAT_CODE, &NET_WEIGHT, 
                &ALT_QUANTITY, &INVOICE_VALUE, &STAT_VALUE, 
                &PARTNER_VAT_NO )
            VALUES
               (result_key_, row_no_, parent_row_no_, NULL, 
                NULL, NULL,
                NULL, NULL, NULL,
                NULL, NULL, NULL,
                NULL);
         END IF;
      END IF;
      
      -- update the head with no_of_lines and sums
      IF (do_rs_) THEN
         UPDATE &TABLE
         SET    &NO_OF_LINES = file_line_no_,
                &INV_VAL_TOT = inv_val_tot_,
                &STAT_VAL_TOT = stat_val_tot_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_LU_LINES');
         Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', file_line_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INV_VAL_TOT', round(inv_val_tot_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VAL_TOT', round(stat_val_tot_));
      END IF;
   END LOOP;
 
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


  



----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE INTRASTAT_DIRECTION
UNDEFINE INTRASTAT_ID
UNDEFINE STAT_VAL_TOT
UNDEFINE INV_VAL_TOT 
UNDEFINE REPORT_TITLE
UNDEFINE NO_OF_LINES 
UNDEFINE CURRENCY_CODE
UNDEFINE CREATION_DATE
UNDEFINE REPORTING_PERIOD
UNDEFINE COMPANY_NAME
UNDEFINE COMPANY_VAT_NO
UNDEFINE REPR_NAME
UNDEFINE REPR_VAT_NO
UNDEFINE COUNTRY_DEST_TITLE
UNDEFINE LINE_NO
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE NATURE_OF_TRANSACTION
UNDEFINE MODE_OF_TRANSPORT
UNDEFINE STAT_CODE
UNDEFINE NET_WEIGHT
UNDEFINE ALT_QUANTITY
UNDEFINE INVOICE_VALUE
UNDEFINE STAT_VALUE
UNDEFINE PARTNER_VAT_NO
UNDEFINE COM_CODE_DESC
UNDEFINE TYPE
