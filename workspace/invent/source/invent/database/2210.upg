---------------------------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: Upgrade database objects for for IFS/Inventory
--           from version 21.2.0 to 22.1.0
--
--  File   : 2210.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  220131   SBalLK  SC21R2-7470, Added INVENTORY_TRANS_HIST_IX11 index and renamed the existing unreleased INVENTORY_TRANS_HIST_IX11 into INVENTORY_TRANS_HIST_IX12.
--  220118   LEPESE  SCZ-17236, added temporary table invent_part_bin_ranking_tmp and unique index invent_part_bin_ranking_ux1.
--  220117   RoJalk  SC21R2-2756, Added the project_id to INVENTORY_PART_IN_TRANSIT_TAB.
--  220113   JaThlk  SC21R2-2932, Changed index counting_report_line_ix1 into counting_report_line_ux1 by adding inv_list_no and making the index unique.
--  220111   JaThlk  SC21R2-2932, Added the route order information in COUNTING_REPORT_LINE_TAB where route order information does not exist.
--  220105   MaEelk  SC21R2-6993, Added new column ERROR_DESC to PART_MOVE_TAX_ACCOUNTING_TAB.
--  220103   LEPESE  SC21R2-2766, Added sequence PUTAWAY_SESSION_ID_SEQ. Dropped temporary tables FREE_BAY_CARRYING_CAP_TMP, FREE_BIN_CARRYING_CAPACITY_TMP,
--  220103           FREE_BIN_VOLUME_CAPACITY_TMP, FREE_ROW_CARRYING_CAP_TMP, FREE_TIER_CARRYING_CAP_TMP and recreated them as persistent storage tables with 
--  220103           the same names. Created tables INVENT_PART_PUTAWAY_ZONE_TMP and PUTAWAY_ZONE_BIN_TMP. Created temporary tables HANDL_UNIT_CHARACTERISTICS_TMP
--  220103           and HANDL_UNIT_PART_CONTENT_TMP. Dropped obsolete temporary tables BIN_IN_BETTER_ZONE_TMP and PUTAWAY_BIN_TMP. 
--  211220   MaEelk  SC21R2-6775, Key changed in PART_MOVE_TAX_ACCOUNTING_TAB.
--  211215   NiRalk  SC21R2-5530, gelr:brazilian_specific_attributes, Added Acquisition Reason to INVENT.
--  211211   JaThlk  SC21R2-2932, Added warehouse_route_order, bay_route_order, row_route_order, tier_route_order, bin_route_order to COUNTING_REPORT_LINE_TAB.
--  211203   SBalLK  SC21R2-6433, Added APPROV_HANDL_UNIT_LOCATION_TMP and HANDLING_UNIT_DETAILS_TMP table related Implementation.
--  211126   NiRalk  SC21R2-5523, Added StatisticalCode,AcquisitionOrigin and AcquisitionReasonId columns to the INVENTORY_PART_TAB.
--  211124   Asawlk  SC21R2-6105, Create new index inventory_part_avail_stock_ix1 for inventory_part_avail_stock_tmp
--  211118   DaZase  SC21R2-5917, Added SNAPSHOT_GENERATED to HU_SNAPSHOT_FOR_REFRESH_TAB.
--  211108   SBalLK  SC21R2-2833, Added WAREHOUSE_TYPE_TAB related implementation.
--  210917   Asawlk  SC21R2-2770, Created cross_border_tax_trans_tmp and cross_border_tax_trans_tmp_ux1.
--  210914   MaEelk  SC21R2-2750, Created PART_MOVE_TAX_ACCOUNTING_TAB and its constraints.
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_1');
PROMPT START upgrading WITH 2210.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------

DECLARE
   sequence_name_ VARCHAR2(30) := 'PUTAWAY_SESSION_ID_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/

---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

-- ***** PART_MOVE_TAX_ACCOUNTING_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_2');
PROMPT Creating PART_MOVE_TAX_ACCOUNTING_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'PART_MOVE_TAX_ACCOUNTING_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TAX_ITEM_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STR_CODE', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'EVENT_CODE', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNT_NO', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_B', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_C', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_D', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_E', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_F', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_G', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_H', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_I', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CODENO_J', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_YEAR', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_PERIOD', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VOUCHER_NO', 'NUMBER(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VOUCHER_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VOUCHER_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEBIT_CREDIT', 'VARCHAR2(1)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALUE', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE', 'VARCHAR2(3)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CURR_AMOUNT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARALLEL_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATE_APPLIED', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USERID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ERROR_DESC', 'VARCHAR2(2000)', 'Y');   
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_3');
PROMPT Adding constraints for PART_MOVE_TAX_ACCOUNTING_TAB  

DECLARE
   index_name_ VARCHAR2(30) := 'PART_MOVE_TAX_ACCOUNTING_PK';
   table_name_ VARCHAR2(30) := 'PART_MOVE_TAX_ACCOUNTING_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'TAX_ITEM_ID');
   Database_SYS.Set_Table_Column(columns_, 'SEQ');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'PART_MOVE_TAX_ACCOUNTING_RK';
   table_name_ VARCHAR2(30) := 'PART_MOVE_TAX_ACCOUNTING_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** PART_MOVE_TAX_ACCOUNTING_TAB End *****

-- ***** INVENTORY_TRANSACTION_HIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_4');
PROMPT Adding inventory_trans_hist_ix11 non unique index to inventory_transaction_hist_tab.
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_TRANS_HIST_IX11';
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_5');
PROMPT Adding index INVENTORY_TRANS_HIST_IX12 for INVENTORY_TRANSACTION_HIST_TAB  

DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_TRANS_HIST_IX12';
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_MOVE_TAX_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENTORY_TRANSACTION_HIST_TAB End *****
 
-- ***** CROSS_BORDER_TAX_TRANS_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_6');
PROMPT Creating CROSS_BORDER_TAX_TRANS_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_TAX_TRANS_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID', 'NUMBER', 'N');   
   Database_SYS.Set_Table_Column(columns_, 'ORIGINAL_TRANSACTION_ID', 'NUMBER', 'Y');   
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_MOVE_TAX_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_MOVE_TAX_DIRECTION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_7');
PROMPT Adding unique index CROSS_BORDER_TAX_TRANS_TMP_UX1 for CROSS_BORDER_TAX_TRANS_TMP  
DECLARE
   index_name_ VARCHAR2(30) := 'CROSS_BORDER_TAX_TRANS_TMP_UX1';
   table_name_ VARCHAR2(30) := 'CROSS_BORDER_TAX_TRANS_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** CROSS_BORDER_TAX_TRANS_TMP End 

-- ***** WAREHOUSE_TAB : START *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_8');
PROMPT Adding WAREHOUSE_TYPE_ID non mandatory column in to the WAREHOUSE_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('WAREHOUSE_TYPE_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, show_info_ => TRUE);   
END;
/
-- ***** WAREHOUSE_TAB : END *****

-- ***** WAREHOUSE_TYPE_TAB : START *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_9');
PROMPT Adding WAREHOUSE_TYPE_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TYPE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_TYPE_ID', 'VARCHAR2(30)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',       'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',        'DATE',          'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',            'VARCHAR2(50)',  'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE',          'VARCHAR2(20)',  'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_10');
PROMPT Creating WAREHOUSE_TYPE_PK primary key on WAREHOUSE_TYPE_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_TYPE_PK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TYPE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_11');
PROMPT Creating WAREHOUSE_TYPE_RK rowkey key on WAREHOUSE_TYPE_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_TYPE_RK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TYPE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** WAREHOUSE_TYPE_TAB : END *****

-- ***** INVENTORY_PART_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_12');
PROMPT Adding ACQUISITION_REASON_ID,ACQUISITION_ORIGIN AND STATISTICAL_CODE TO TABLE INVENTORY_PART_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_REASON_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_ORIGIN', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STATISTICAL_CODE', 'VARCHAR2(15)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
-- ***** INVENTORY_PART_TAB End *****
-- ***** HU_SNAPSHOT_FOR_REFRESH_TAB : START *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_13');
PROMPT Adding SNAPSHOT_GENERATED TO HU_SNAPSHOT_FOR_REFRESH_TAB. 
DECLARE
   table_name_ VARCHAR2(30) := 'HU_SNAPSHOT_FOR_REFRESH_TAB';
   column_     Installation_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SNAPSHOT_GENERATED', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, show_info_ => TRUE);
END;
/
-- ***** HU_SNAPSHOT_FOR_REFRESH_TAB : END *****

-- ***** INVENTORY_PART_AVAIL_STOCK_TMP : START *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_14');
PROMPT Creating new index inventory_part_avail_stock_ix1 for inventory_part_avail_stock_tmp
BEGIN   
   DECLARE
      index_name_ VARCHAR2(30) := 'INVENTORY_PART_AVAIL_STOCK_IX1';
      table_name_ VARCHAR2(30) := 'INVENTORY_PART_AVAIL_STOCK_TMP';
      columns_    Database_SYS.ColumnTabType;
   BEGIN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'HOMOGENEOUS_HANDLING_UNIT_ID');
      Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END;   
END;   
/
-- ***** INVENTORY_PART_AVAIL_STOCK_TMP : END *****

-- ***** APPROV_HANDL_UNIT_LOCATION_TMP : START *****
DECLARE
   table_name_ VARCHAR2(30) := 'APPROV_HANDL_UNIT_LOCATION_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'TO_CONTRACT',      'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'TO_LOCATION_NO',   'VARCHAR2(35)', 'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'APPROV_HANDL_UNIT_LOCATION_IX1';
   table_name_ VARCHAR2(30) := 'APPROV_HANDL_UNIT_LOCATION_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'TO_CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'TO_LOCATION_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** APPROV_HANDL_UNIT_LOCATION_TMP : END *****

-- ***** HANDLING_UNIT_DETAILS_TMP : START *****
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_DETAILS_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID',           'NUMBER',        'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID',      'VARCHAR2(25)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'HU_TYPE_DESCRIPTION',        'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID',  'VARCHAR2(25)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'CATEGORY_DESCRIPTION',       'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STRUCTURE_LEVEL',            'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPOSITION',                'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SSCC',                       'VARCHAR2(18)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID', 'VARCHAR2(25)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH',                      'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT',                     'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH',                      'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH',             'VARCHAR2(30)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT',             'VARCHAR2(30)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME',             'VARCHAR2(30)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT',                 'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'TARE_WEIGHT',                'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_GROSS_WEIGHT',     'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_VOLUME',           'NUMBER',        'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_DETAILS_IX1';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_DETAILS_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** HANDLING_UNIT_DETAILS_TMP : END *****

-- ***** COUNTING_REPORT_LINE_TAB : START *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_15');
PROMPT Adding new columns WAREHOUSE_ROUTE_ORDER, BAY_ROUTE_ORDER, ROW_ROUTE_ORDER, TIER_ROUTE_ORDER, BIN_ROUTE_ORDER to COUNTING_REPORT_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('WAREHOUSE_ROUTE_ORDER', 'VARCHAR2(15)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('BAY_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROW_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TIER_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('BIN_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_16');
PROMPT Updating route order information in counting_report_line_tab.
UPDATE counting_report_line_tab crl
SET (warehouse_route_order,
     bay_route_order,
     row_route_order,
     tier_route_order,
     bin_route_order) =
     (SELECT (SELECT route_order FROM warehouse_tab
               WHERE contract = wbb.contract AND warehouse_id = wbb.warehouse_id),
             (SELECT route_order FROM warehouse_bay_tab
               WHERE contract = wbb.contract AND warehouse_id = wbb.warehouse_id AND bay_id = wbb.bay_id),
             (SELECT route_order FROM warehouse_bay_row_tab
               WHERE contract = wbb.contract AND warehouse_id = wbb.warehouse_id AND bay_id = wbb.bay_id AND row_id  = wbb.row_id),
             (SELECT route_order FROM warehouse_bay_tier_tab
               WHERE contract = wbb.contract AND warehouse_id = wbb.warehouse_id AND bay_id = wbb.bay_id AND tier_id = wbb.tier_id),
              wbb.route_order
        FROM  warehouse_bay_bin_tab wbb
       WHERE  crl.contract     = wbb.contract
         AND  crl.location_no  = wbb.location_no)
WHERE warehouse_route_order IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_17');
PROMPT Creating unique index COUNTING_REPORT_LINE_UX1 for table COUNTING_REPORT_LINE_TAB
DECLARE
   new_index_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_UX1';
   old_index_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_IX1';
   table_name_     VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Remove_Indexes( table_name_, old_index_name_);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'INV_LIST_NO');
   Database_SYS.Create_Index(table_name_, new_index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** COUNTING_REPORT_LINE_TAB : END *****

-- ***** ACQUISITION_REASON_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_18');
PROMPT Creating TABLE ACQUISITION_REASON_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ACQUISITION_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_REASON_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'EXTERNAL_USE_TYPE', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_19');
PROMPT ADD INDEX ACQUISITION_REASON_PK FOR COLUMN ROWKEY IN ACQUISITION_REASON_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'ACQUISITION_REASON_PK';
   table_name_ VARCHAR2(30) := 'ACQUISITION_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_REASON_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_20');
PROMPT ADD INDEX ACQUISITION_REASON_RK FOR COLUMN ROWKEY IN ACQUISITION_REASON_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'ACQUISITION_REASON_RK';
   table_name_ VARCHAR2(30) := 'ACQUISITION_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** ACQUISITION_REASON_TAB End *****

-- ***** FREE_BAY_CARRYING_CAP_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_21');
PROMPT Removing temporary TABLE FREE_BAY_CARRYING_CAP_TMP TO be recreated AS a persistent storage TABLE
-- Table needs to be dropped to be changed from temporary to persistent...
BEGIN
   Database_SYS.Remove_Table('FREE_BAY_CARRYING_CAP_TMP', TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_22');
PROMPT Recreating FREE_BAY_CARRYING_CAP_TMP AS a persistent storage TABLE
DECLARE
   table_name_ VARCHAR2(30) := 'FREE_BAY_CARRYING_CAP_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FREE_CARRYING_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRELIMINARY_CONSUMPTION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_23');
PROMPT Creating INDEX FREE_BAY_CARRYING_CAP_TMP_IX1 FOR TABLE FREE_BAY_CARRYING_CAP_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'FREE_BAY_CARRYING_CAP_TMP_IX1';
   table_name_ VARCHAR2(30) := 'FREE_BAY_CARRYING_CAP_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** FREE_BAY_CARRYING_CAP_TMP End *****

-- ***** FREE_BIN_CARRYING_CAPACITY_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_24');
PROMPT Removing temporary TABLE FREE_BIN_CARRYING_CAPACITY_TMP TO be recreated AS a persistent storage TABLE
-- Table needs to be dropped to be changed from temporary to persistent...
BEGIN
   Database_SYS.Remove_Table('FREE_BIN_CARRYING_CAPACITY_TMP', TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_25');
PROMPT Recreating FREE_BIN_CARRYING_CAPACITY_TMP AS a persistent storage TABLE
DECLARE
   table_name_ VARCHAR2(30) := 'FREE_BIN_CARRYING_CAPACITY_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FREE_CARRYING_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRELIMINARY_CONSUMPTION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_26');
PROMPT Creating INDEX FREE_BIN_CARRYING_CAP_TMP_IX1 FOR TABLE FREE_BIN_CARRYING_CAPACITY_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'FREE_BIN_CARRYING_CAP_TMP_IX1';
   table_name_ VARCHAR2(30) := 'FREE_BIN_CARRYING_CAPACITY_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** FREE_BIN_CARRYING_CAPACITY_TMP End *****

-- ***** FREE_BIN_VOLUME_CAPACITY_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_27');
PROMPT Removing temporary TABLE FREE_BIN_VOLUME_CAPACITY_TMP TO be recreated AS a persistent storage TABLE
-- Table needs to be dropped to be changed from temporary to persistent...
BEGIN
   Database_SYS.Remove_Table('FREE_BIN_VOLUME_CAPACITY_TMP', TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_28');
PROMPT Recreating FREE_BIN_VOLUME_CAPACITY_TMP AS a persistent storage TABLE
DECLARE
   table_name_ VARCHAR2(30) := 'FREE_BIN_VOLUME_CAPACITY_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FREE_VOLUME_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRELIMINARY_CONSUMPTION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_29');
PROMPT Creating INDEX FREE_BIN_VOLUME_CAP_TMP_IX1 FOR TABLE FREE_BIN_VOLUME_CAPACITY_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'FREE_BIN_VOLUME_CAP_TMP_IX1';
   table_name_ VARCHAR2(30) := 'FREE_BIN_VOLUME_CAPACITY_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** FREE_BIN_VOLUME_CAPACITY_TMP End *****

-- ***** FREE_ROW_CARRYING_CAP_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_30');
PROMPT Removing temporary TABLE FREE_ROW_CARRYING_CAP_TMP TO be recreated AS a persistent storage TABLE
-- Table needs to be dropped to be changed from temporary to persistent...
BEGIN
   Database_SYS.Remove_Table('FREE_ROW_CARRYING_CAP_TMP', TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_31');
PROMPT Recreating FREE_ROW_CARRYING_CAP_TMP AS a persistent storage TABLE
DECLARE
   table_name_ VARCHAR2(30) := 'FREE_ROW_CARRYING_CAP_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FREE_CARRYING_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRELIMINARY_CONSUMPTION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_32');
PROMPT Creating INDEX FREE_ROW_CARRYING_CAP_TMP_IX1 FOR TABLE FREE_ROW_CARRYING_CAP_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'FREE_ROW_CARRYING_CAP_TMP_IX1';
   table_name_ VARCHAR2(30) := 'FREE_ROW_CARRYING_CAP_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** FREE_ROW_CARRYING_CAP_TMP End *****

-- ***** FREE_TIER_CARRYING_CAP_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_33');
PROMPT Removing temporary TABLE FREE_TIER_CARRYING_CAP_TMP TO be recreated AS a persistent storage TABLE
-- Table needs to be dropped to be changed from temporary to persistent...
BEGIN
   Database_SYS.Remove_Table('FREE_TIER_CARRYING_CAP_TMP', TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_34');
PROMPT Recreating FREE_TIER_CARRYING_CAP_TMP AS a persistent storage TABLE
DECLARE
   table_name_ VARCHAR2(30) := 'FREE_TIER_CARRYING_CAP_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FREE_CARRYING_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRELIMINARY_CONSUMPTION', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_35');
PROMPT Creating INDEX FREE_TIER_CARRYING_CAP_TMP_IX1 FOR TABLE FREE_TIER_CARRYING_CAP_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'FREE_TIER_CARRYING_CAP_TMP_IX1';
   table_name_ VARCHAR2(30) := 'FREE_TIER_CARRYING_CAP_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** FREE_TIER_CARRYING_CAP_TMP End *****

-- ***** INVENT_PART_PUTAWAY_ZONE_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_36');
PROMPT Creating TABLE INVENT_PART_PUTAWAY_ZONE_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'INVENT_PART_PUTAWAY_ZONE_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_DB', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_BINS_PER_PART', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RANKING', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_37');
PROMPT Creating INDEX INV_PART_PUTAWAY_ZONE_TMP_IX1 FOR TABLE INVENT_PART_PUTAWAY_ZONE_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'INV_PART_PUTAWAY_ZONE_TMP_IX1';
   table_name_ VARCHAR2(30) := 'INVENT_PART_PUTAWAY_ZONE_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** INVENT_PART_PUTAWAY_ZONE_TMP End *****

-- ***** PUTAWAY_ZONE_BIN_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_38');
PROMPT Creating TABLE PUTAWAY_ZONE_BIN_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'PUTAWAY_ZONE_BIN_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REJECTED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'IN_USE', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'IN_PRELIMINARY_USE', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ROUTE_ORDER', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ROUTE_ORDER', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPT_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MIN_TEMPERATURE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_TEMPERATURE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MIN_HUMIDITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_HUMIDITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SIZES_AND_CONDITIONS_APPROVED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CAPABILITIES_APPROVED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NUMBER_OF_CAPABILITIES', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_39');
PROMPT Creating INDEX PUTAWAY_ZONE_BIN_TMP_IX1 FOR TABLE PUTAWAY_ZONE_BIN_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'PUTAWAY_ZONE_BIN_TMP_IX1';
   table_name_ VARCHAR2(30) := 'PUTAWAY_ZONE_BIN_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_40');
PROMPT Creating UNIQUE INDEX PUTAWAY_ZONE_BIN_TMP_IX2 FOR TABLE PUTAWAY_ZONE_BIN_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'PUTAWAY_ZONE_BIN_TMP_IX2';
   table_name_ VARCHAR2(30) := 'PUTAWAY_ZONE_BIN_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PUTAWAY_SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** PUTAWAY_ZONE_BIN_TMP End *****



-- ***** HANDL_UNIT_CHARACTERISTICS_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_41');
PROMPT Creating temporary TABLE HANDL_UNIT_CHARACTERISTICS_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'HANDL_UNIT_CHARACTERISTICS_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT_REQUIREMENT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH_REQUIREMENT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH_REQUIREMENT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_GROSS_WEIGHT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_VOLUME', 'NUMBER', 'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/
-- ***** HANDL_UNIT_CHARACTERISTICS_TMP End *****

-- ***** HANDL_UNIT_PART_CONTENT_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_42');
PROMPT Creating temporary TABLE HANDL_UNIT_PART_CONTENT_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'HANDL_UNIT_PART_CONTENT_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION_CODE', 'VARCHAR2(10)', 'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_43');
PROMPT Creating UNIQUE INDEX HANDL_UNIT_PART_CONTEN_TMP_IX1 FOR temporary TABLE HANDL_UNIT_PART_CONTENT_TMP
DECLARE
   index_name_ VARCHAR2(30) := 'HANDL_UNIT_PART_CONTEN_TMP_IX1';
   table_name_ VARCHAR2(30) := 'HANDL_UNIT_PART_CONTENT_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION_CODE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** HANDL_UNIT_PART_CONTENT_TMP End *****

-- ***** INVENTORY_PART_IN_TRANSIT_TAB START *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_44');
PROMPT Adding PROJECT_ID non mandatory column in to the INVENTORY_PART_IN_TRANSIT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PROJECT_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, show_info_ => TRUE);   
END;
/
-- ***** INVENTORY_PART_IN_TRANSIT_TAB END *****


-- ***** INVENT_PART_BIN_RANKING_TMP START *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_45');
PROMPT Adding TABLE INVENT_PART_BIN_RANKING_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'INVENT_PART_BIN_RANKING_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RANKING', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDL_UNIT_RESERVATION_RANKING', 'NUMBER', 'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_46');
PROMPT Adding INDEX INVENT_PART_BIN_RANKING_UX1
DECLARE
   index_name_ VARCHAR2(30) := 'INVENT_PART_BIN_RANKING_UX1';
   table_name_ VARCHAR2(30) := 'INVENT_PART_BIN_RANKING_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** INVENT_PART_BIN_RANKING_TMP END *****


---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_47');
PROMPT Dropping obsolete temporary TABLES BIN_IN_BETTER_ZONE_TMP AND PUTAWAY_BIN_TMP
BEGIN
   Database_SYS.Remove_Table('BIN_IN_BETTER_ZONE_TMP', TRUE );
   Database_SYS.Remove_Table('PUTAWAY_BIN_TMP', TRUE );
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Timestamp_48');
PROMPT Upgrade statements IN FILE 2210.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2210.upg','Done');
