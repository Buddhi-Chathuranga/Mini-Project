-----------------------------------------------------------------------------
--
--  Logical unit: InventoryValue
--
--  File:         InventoryValueSumRep.RDF
--  Version:      Foundation1 2.2
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  181113  HSjose  SCUXXW4-5564, Improved error messages for criteria validations. 
--  180206  ChFolk  STRSC-16471, Removed view inventory_value_sum_local_1 and Modified cursor get_quantities to mo thevw logic of view to the cursor.
--  141124  DaZase  PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
--  140716  TiRalk  Bug 117850, Modified report method to print company name properly.
--  130805  MaRalk  TIBE-893, Removed global variables do_xml_, do_rs_, xml_, package_name_ and 
--  130805          added inside Report_Overview method.
--  130709  AyAmlk  Bug 111136, Modified Report_Overview() by changing the CURSOR to use type_code_db instead
--  130709          of type_code since db value is sent in the parameter_attr_.
--  110804  PraWlk  Bug 97733, Removed consecutive ': ' from notes_long_ and added it prior to the value.
--  091111  PraWlk  Bug 86998, Removed description from the cursor get_parts since it is no longer used.
--  090121  HoInlk  Bug 79846, Removed length restrictions of number variables year_ and period_.
--  080818  NiBalk  Bug 75708, Modified Report_Overview(), by splitting the cursor get_value into 
--  080818          two cursors get_total_value and get_quantities.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  070529  ChBalk  Moved Xml_Record_Writer_SYS.Create_Report_Header after all the Error_SYSs 
--  070529          to avoid report preview error.
--  070528  ChBalk  Added Site_API.Exist to validate user entered contract.
--  070521  LEPESE  Changed datasource for cursor get_value from inventory_value_part_tab to 
--  070521          view inventory_value_sum_local_1.
--  061025  LEPESE  Added view inventory_value_sum_local_1. The purpose of this view is to solve
--  061025          that has arised since location_group is new key in inventory_value_part_tab.
--  061025          Replaced data source inventory_value_part_tab with inventory_value_sum_local_1
--  061025          in cursor get_value.
--  060601  RoJalk  Enlarge Part Description - Changed view comments.
--------------------------------------13.4.0-----------------------------------
--  051122  LEPESE  Major redesign because of new keys in inventory_value_part_tab and
--  051122          values moved to new table invent_value_part_detail_tab.
--  051116  NiDalk  Corrected a small error of XML tag closing.
--  050905  NiDalk  Changed to Report Designer Layout.
--  040603  NaWilk  Bug 44975, Modified FROM clause in view INVENTORY_VALUE_SUM_REP 
--  040129  NaWalk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.  
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  021112  SaRalk  Bug 33337, Added code which enables to add different logos for different companies. 
--  020129  RoAnse  Added (qty_waiv_dev_rej_ * NVL(cost_price_,0) in calculation for inventory_value_.
--  010509  JSAnse  Added if-statement to secure that both cost_type and cost_set are not NULL.
--  000928  JOHW    Changed prompt from Configuration Id to Configuration ID.
--  000925  JOHESE  Added undefines.
--  000925  JOHW    Added configuration_id.
--  000816  LEPE    Changed to fetch latest_purchase_price and average_purchase_price
--                  via function calls to Inventory_Part_Config_API.
--  990919  ROOD    Replaced Utility_SYS.Get_User with Fnd_Session_API.Get_Fnd_User.
--  990910  ANHO    Added General_SYS.Init_Method.
--  990610  ROOD    Changed the validation of cost set.
--  990324  SHVE    Added validations for all the input parameters.
--  990310  FRDI    Added text for report layout.                   
--  990213  DAZA    Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = InventoryValue
define PKG                = INVENTORY_VALUE_SUM_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INVENTORY_VALUE_SUM_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define PART_NO                           = S1
define QTY_WAIV_DEV_REJ                  = N1
define QUANTITY                          = N2
define INVENTORY_VALUE                   = N3
define UNIT_MEAS                         = S3
define CRITERIA_1                        = S4
define CRITERIA_2                        = S5
define CRITERIA_3                        = S6
define CRITERIA_4                        = S7
define CRITERIA_5                        = S8
define CRITERIA_1_VALUE                  = S9
define CRITERIA_2_VALUE                  = S10
define CRITERIA_3_VALUE                  = S11
define CRITERIA_4_VALUE                  = S12
define CRITERIA_5_VALUE                  = S13
define ALL_PARTS_DB                      = S14
define CONFIGURATION_ID                  = S15
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       NULL                                    YEAR,
       NULL                                    PERIOD,
       NULL                                    CONTRACT,
       NULL                                    INVENTORY_COST_TYPE,
       NULL                                    COST_SET,
       NULL                                    ALL_PARTS,
       &CRITERIA_1                             CRITERIA_1,
       &CRITERIA_1_VALUE                       CRITERIA_1_VALUE,
       NULL                                    CRITERIA_1_FROM,
       NULL                                    CRITERIA_1_TO,
       &CRITERIA_2                             CRITERIA_2,
       &CRITERIA_2_VALUE                       CRITERIA_2_VALUE,
       NULL                                    CRITERIA_2_FROM,
       NULL                                    CRITERIA_2_TO,
       &CRITERIA_3                             CRITERIA_3,
       &CRITERIA_3_VALUE                       CRITERIA_3_VALUE,
       NULL                                    CRITERIA_3_FROM,
       NULL                                    CRITERIA_3_TO,
       &CRITERIA_4                             CRITERIA_4,
       &CRITERIA_4_VALUE                       CRITERIA_4_VALUE,
       NULL                                    CRITERIA_4_FROM,
       NULL                                    CRITERIA_4_TO,
       &CRITERIA_5                             CRITERIA_5,
       &CRITERIA_5_VALUE                       CRITERIA_5_VALUE,
       NULL                                    CRITERIA_5_FROM,
       NULL                                    CRITERIA_5_TO,
       &PART_NO                                PART_NO,
       &CONFIGURATION_ID                       CONFIGURATION_ID,
       &QTY_WAIV_DEV_REJ                       QTY_WAIV_DEV_REJ,
       &QUANTITY                               QUANTITY,
       &INVENTORY_VALUE                        INVENTORY_VALUE,
       &UNIT_MEAS                              UNIT_MEAS,
       &ALL_PARTS_DB                           ALL_PARTS_DB
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..year IS
   'FLAGS=A----^DATATYPE=NUMBER(4)^QUERY=Year:^QFLAGS=MCS--^STATUS=Enter Year in format YYYY^';
COMMENT ON COLUMN &VIEW..period IS
   'FLAGS=A----^DATATYPE=NUMBER(2)^QUERY=Period:^STATUS=Enter Period in format MM^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^QUERY=Site:^QFLAGS=MCS--^REF=USER_ALLOWED_SITE_LOV^STATUS=Choose a Site^';
COMMENT ON COLUMN &VIEW..inventory_cost_type IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Inventory Cost Type:^ENUMERATE=Inventory_Cost_Type_API.Enumerate^QFLAGS=OCS--^STATUS=Choose a Inventory Cost Type^';
COMMENT ON COLUMN &VIEW..cost_set IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Cost Set:^REF=COST_SET(CONTRACT)^QFLAGS=OCS--^STATUS=Choose a Cost Set^';
COMMENT ON COLUMN &VIEW..all_parts IS
   'FLAGS=A----^DATATYPE=STRING^QUERY=All Parts:^STATUS=Show parts with sums or only sums^QFLAGS=MCS--^ENUMERATE=Gen_Yes_No_API.Enumerate^';
COMMENT ON COLUMN &VIEW..criteria_1 IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 1:^ENUMERATE=Inventory_Value_Rep_Param_API.Enumerate^QFLAGS=MCS--^TITLE=Criteria 1^ITEM_NAME=iCriteria1^';
COMMENT ON COLUMN &VIEW..criteria_1_value IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Criteria 1 Value^ITEM_NAME=iCriteria1Value^';
COMMENT ON COLUMN &VIEW..criteria_1_from IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 1 From Value:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..criteria_1_to IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 1 To Value:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..criteria_2 IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 2:^ENUMERATE=Inventory_Value_Rep_Param_API.Enumerate^QFLAGS=OCS--^TITLE=Criteria 2^ITEM_NAME=iCriteria2^';
COMMENT ON COLUMN &VIEW..criteria_2_value IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Criteria 2 Value^ITEM_NAME=iCriteria2Value^';
COMMENT ON COLUMN &VIEW..criteria_2_from IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 2 From Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..criteria_2_to IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 2 To Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..criteria_3 IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 3:^ENUMERATE=Inventory_Value_Rep_Param_API.Enumerate^QFLAGS=OCS--^TITLE=Criteria 3^ITEM_NAME=iCriteria3^';
COMMENT ON COLUMN &VIEW..criteria_3_value IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Criteria 3 Value^ITEM_NAME=iCriteria3Value^';
COMMENT ON COLUMN &VIEW..criteria_3_from IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 3 From Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..criteria_3_to IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 3 To Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..criteria_4 IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 4:^ENUMERATE=Inventory_Value_Rep_Param_API.Enumerate^QFLAGS=OCS--^TITLE=Criteria 4^ITEM_NAME=iCriteria4^';
COMMENT ON COLUMN &VIEW..criteria_4_value IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Criteria 4 Value^ITEM_NAME=iCriteria4Value^';
COMMENT ON COLUMN &VIEW..criteria_4_from IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 4 From Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..criteria_4_to IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 4 To Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..criteria_5 IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 5:^ENUMERATE=Inventory_Value_Rep_Param_API.Enumerate^QFLAGS=OCS--^TITLE=Criteria 5^ITEM_NAME=iCriteria5^';
COMMENT ON COLUMN &VIEW..criteria_5_value IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Criteria 5 Value^ITEM_NAME=iCriteria5Value^';
COMMENT ON COLUMN &VIEW..criteria_5_from IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 5 From Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..criteria_5_to IS
   'FLAGS=A----^DATATYPE=STRING(200)^QUERY=Criteria 5 To Value:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^TITLE=Part No^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &VIEW..configuration_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Configuration ID^REF=InventoryPartConfig(contract, part_no)^TITLE=Configuration ID^ITEM_NAME=iConfigurationId^';
COMMENT ON COLUMN &VIEW..qty_waiv_dev_rej IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Qty Waiv Dev Rej^TITLE=Qty Waiv Dev Rej^ITEM_NAME=iQtyWaivDevRej^';
COMMENT ON COLUMN &VIEW..quantity IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Quantity^TITLE=Quantity^ITEM_NAME=iQuantity^';
COMMENT ON COLUMN &VIEW..inventory_value IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Inventory Value^TITLE=Inventory Value^ITEM_NAME=iInventoryValue^';
COMMENT ON COLUMN &VIEW..unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Unit of measure^TITLE=U/M^ITEM_NAME=iUnitMeas^';
COMMENT ON COLUMN &VIEW..all_parts_db IS
   'FLAGS=A----^DATATYPE=STRING(1)^PROMPT=All Parts Db^TITLE=All Parts Db^ITEM_NAME=iAllPartsDb^';

BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Summarized Inventory Value Report', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Warehouse Management','Financial Control');
   Report_SYS.Define_Report_Text_( '&VIEW', 'txTotalFor', 'Total for' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txTotalValue', 'Total Value' );
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_       NUMBER;
   row_no_           NUMBER := 1;
   year_             NUMBER;
   period_           NUMBER;
   site_             VARCHAR2(5); 
   cost_type_db_     VARCHAR2(30) := NULL;   
   cost_set_         NUMBER := NULL; 
   all_parts_db_     VARCHAR2(1);
   qty_waiv_dev_rej_ &VIEW..QTY_WAIV_DEV_REJ%TYPE;
   quantity_         &VIEW..QUANTITY%TYPE;
   total_value_      &VIEW..INVENTORY_VALUE%TYPE;
   inventory_value_  &VIEW..INVENTORY_VALUE%TYPE;
   notes_long_       VARCHAR2(2000);
   archive_notes_    VARCHAR2(200);
   stmt_             VARCHAR2(2000);
   cost_price_       NUMBER;
   cost_installed_   BOOLEAN;
   
   do_xml_           BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_            BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_              CLOB;
   package_name_     VARCHAR2(100) := 'INVENTORY_VALUE_SUM_REP';
   
   TYPE ClientNameTabType IS TABLE OF VARCHAR2(200) INDEX BY BINARY_INTEGER;
   TYPE DbNameTabType     IS TABLE OF VARCHAR2(30)  INDEX BY BINARY_INTEGER;
   TYPE ValueTabType      IS TABLE OF VARCHAR2(50)  INDEX BY BINARY_INTEGER;

   -- The following 4 tables are used to store the selected criterias and 
   -- their from and to values. Valid upper bound for these tables are defined
   -- by the value of no_of_criterias_entered_ variable.
   client_name_tab   ClientNameTabType;  
   db_name_tab       DbNameTabType;
   value_from_tab    ValueTabType;
   value_to_tab      ValueTabType;
   no_of_criterias_entered_ BINARY_INTEGER;

   -- These 2 tables are holds min and max values, which are used for the 
   -- static WHERE clause in the cursor below. Upper bound for these 2 
   -- tables are always 9 i.e. the number of possible criterias defined 
   -- in LU InventoryValueRepParam
   static_from_tab   ValueTabType;
   static_to_tab     ValueTabType;

   company_             VARCHAR2(20);
   logotype_            VARCHAR2(100);      
   company_name_        VARCHAR2(100); 

   criteria1_value_     VARCHAR2(200);
   criteria2_value_     VARCHAR2(200);
   criteria3_value_     VARCHAR2(200);
   criteria4_value_     VARCHAR2(200);
   criteria5_value_     VARCHAR2(200);
   
   -- Inventory Part cursor
   CURSOR get_parts IS
      SELECT DECODE (db_name_tab(1), 'ABC_CLASS', ABC_CLASS,
                                     'PLANNER_BUYER', PLANNER_BUYER,
                                     'ACCOUNTING_GROUP', ACCOUNTING_GROUP,
                                     'PART_PRODUCT_FAMILY', PART_PRODUCT_FAMILY,
                                     'PART_PRODUCT_CODE', PART_PRODUCT_CODE,
                                     'TYPE_CODE', TYPE_CODE,
                                     'PRIME_COMMODITY', PRIME_COMMODITY,
                                     'SECOND_COMMODITY', SECOND_COMMODITY,
                                     'ASSET_CLASS', ASSET_CLASS, '') sort_value_1,
             DECODE (db_name_tab(2), 'ABC_CLASS', ABC_CLASS,
                                     'PLANNER_BUYER', PLANNER_BUYER,
                                     'ACCOUNTING_GROUP', ACCOUNTING_GROUP,
                                     'PART_PRODUCT_FAMILY', PART_PRODUCT_FAMILY,
                                     'PART_PRODUCT_CODE', PART_PRODUCT_CODE,
                                     'TYPE_CODE', TYPE_CODE,
                                     'PRIME_COMMODITY', PRIME_COMMODITY,
                                     'SECOND_COMMODITY', SECOND_COMMODITY,
                                     'ASSET_CLASS', ASSET_CLASS, '') sort_value_2,
             DECODE (db_name_tab(3), 'ABC_CLASS', ABC_CLASS,
                                     'PLANNER_BUYER', PLANNER_BUYER,
                                     'ACCOUNTING_GROUP', ACCOUNTING_GROUP,
                                     'PART_PRODUCT_FAMILY', PART_PRODUCT_FAMILY,
                                     'PART_PRODUCT_CODE', PART_PRODUCT_CODE,
                                     'TYPE_CODE', TYPE_CODE,
                                     'PRIME_COMMODITY', PRIME_COMMODITY,
                                     'SECOND_COMMODITY', SECOND_COMMODITY,
                                     'ASSET_CLASS', ASSET_CLASS, '') sort_value_3,
             DECODE (db_name_tab(4), 'ABC_CLASS', ABC_CLASS,
                                     'PLANNER_BUYER', PLANNER_BUYER,
                                     'ACCOUNTING_GROUP', ACCOUNTING_GROUP,
                                     'PART_PRODUCT_FAMILY', PART_PRODUCT_FAMILY,
                                     'PART_PRODUCT_CODE', PART_PRODUCT_CODE,
                                     'TYPE_CODE', TYPE_CODE,
                                     'PRIME_COMMODITY', PRIME_COMMODITY,
                                     'SECOND_COMMODITY', SECOND_COMMODITY,
                                     'ASSET_CLASS', ASSET_CLASS, '') sort_value_4,
             DECODE (db_name_tab(5), 'ABC_CLASS', ABC_CLASS,
                                     'PLANNER_BUYER', PLANNER_BUYER,
                                     'ACCOUNTING_GROUP', ACCOUNTING_GROUP,
                                     'PART_PRODUCT_FAMILY', PART_PRODUCT_FAMILY,
                                     'PART_PRODUCT_CODE', PART_PRODUCT_CODE,
                                     'TYPE_CODE', TYPE_CODE,
                                     'PRIME_COMMODITY', PRIME_COMMODITY,
                                     'SECOND_COMMODITY', SECOND_COMMODITY,
                                     'ASSET_CLASS', ASSET_CLASS, '') sort_value_5,
             part_no,
             unit_meas
      FROM   INVENTORY_PART
      WHERE  contract = site_
      AND    (static_from_tab(1) IS NULL OR (abc_class BETWEEN static_from_tab(1) AND static_to_tab(1)))
      AND    (static_from_tab(2) IS NULL OR (planner_buyer BETWEEN static_from_tab(2) AND static_to_tab(2)))
      AND    (static_from_tab(3) IS NULL OR (accounting_group BETWEEN static_from_tab(3) AND static_to_tab(3)))
      AND    (static_from_tab(4) IS NULL OR (part_product_family BETWEEN static_from_tab(4) AND static_to_tab(4)))
      AND    (static_from_tab(5) IS NULL OR (part_product_code BETWEEN static_from_tab(5) AND static_to_tab(5)))
      AND    (static_from_tab(6) IS NULL OR (type_code_db BETWEEN static_from_tab(6) AND static_to_tab(6)))
      AND    (static_from_tab(7) IS NULL OR (prime_commodity BETWEEN static_from_tab(7) AND static_to_tab(7)))
      AND    (static_from_tab(8) IS NULL OR (second_commodity BETWEEN static_from_tab(8) AND static_to_tab(8)))
      AND    (static_from_tab(9) IS NULL OR (asset_class BETWEEN static_from_tab(9) AND static_to_tab(9)))
      ORDER BY sort_value_1, sort_value_2, sort_value_3, sort_value_4, sort_value_5;
  
   CURSOR get_quantities (site_             IN VARCHAR2,
                          year_             IN NUMBER,
                          period_           IN NUMBER,
                          part_no_          IN VARCHAR2,
                          configuration_id_ IN VARCHAR2) IS
      SELECT SUM(qty_waiv_dev_rej)                                       qty_waiv_dev_rej,
            (SUM(quantity) + SUM(qty_in_transit) + SUM(qty_at_customer)) quantity
      FROM   inventory_value_part_tab
      WHERE  contract        = site_
        AND stat_year_no     = year_
        AND stat_period_no   = period_
        AND part_no          = part_no_
        AND configuration_id = configuration_id_
      GROUP BY contract, stat_year_no, stat_period_no, part_no, configuration_id;
         
   CURSOR get_total_value (site_             IN VARCHAR2,
                           year_             IN NUMBER,
                           period_           IN NUMBER,
                           part_no_          IN VARCHAR2,
                           configuration_id_ IN VARCHAR2) IS
      SELECT NVL(SUM(total_value), 0)                     total_value
        FROM invent_value_part_detail_tab
       WHERE contract         = site_
         AND stat_year_no     = year_
         AND stat_period_no   = period_
         AND part_no          = part_no_
         AND configuration_id = configuration_id_;

   CURSOR get_configurations (contract_ IN VARCHAR2,
                              part_no_  IN VARCHAR2) IS
      SELECT DISTINCT CASE ip.inventory_part_cost_level_db
                         WHEN 'COST PER PART' THEN '*'
                         ELSE ipc.configuration_id END configuration_id
      FROM inventory_part_config_pub ipc, inventory_part_pub ip
      WHERE ip.contract = contract_
        AND ip.contract = ipc.contract
        AND ip.part_no  = part_no_
        AND ip.part_no  = ipc.part_no;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   -- fetching inparameters
   result_key_   := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   year_         := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('YEAR', parameter_attr_));
   period_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('PERIOD', parameter_attr_));
   site_         := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   Site_API.Exist(site_);

   cost_type_db_ := Nvl(Inventory_Cost_Type_API.Encode(Client_SYS.Get_Item_Value('INVENTORY_COST_TYPE', parameter_attr_)),
                     Client_SYS.Get_Item_Value('INVENTORY_COST_TYPE', parameter_attr_));

   cost_set_     := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('COST_SET', parameter_attr_));
   all_parts_db_ := Gen_Yes_No_API.Encode(Client_SYS.Get_Item_Value('ALL_PARTS', parameter_attr_));

   -- Check if COST LU's are installed
   IF (Transaction_SYS.Logical_Unit_Is_Active('CostInt') AND 
       Transaction_SYS.Logical_Unit_Is_Active('CostSet')) THEN
      cost_installed_ := TRUE;
   ELSE
      cost_installed_ := FALSE;
   END IF;

   IF (site_ IS NULL) THEN
      Error_SYS.Record_General(lu_name_,'SITENULL: Site has to be entered.');
   END IF;
   
   IF (year_ IS NULL) THEN
      Error_SYS.Record_General(lu_name_,'YEARNULL: Statistic year has to be entered.');
   END IF;
   
   IF (period_ IS NULL) THEN
      Error_SYS.Record_General(lu_name_,'PERIODNULL: Statistic period has to be entered.');
   END IF;

   Site_API.Exist(site_);
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User, site_);

   Statistic_Period_API.Exist(year_, period_);
      
    -- Stop executing if both cost_type and cost_set are not NULL
   IF ((cost_type_db_ IS NOT NULL) AND (cost_set_ IS NOT NULL)) THEN
      Error_SYS.Record_General(lu_name_,'BOICTANDCS: You can only select either a Cost Type or a Cost Set.');
   END IF;

   -- Stop executing if cost_type and cost_set are NULL
   IF (cost_type_db_ IS NULL) AND (cost_set_ IS NULL) THEN
      Error_SYS.Record_General(lu_name_,'NOICTANDCS: Either Cost Type or Cost Set must have a value.');
   END IF;

   IF (cost_type_db_ NOT IN ('INVENTORY VALUE','LATEST PURCHASE PRICE','AVERAGE PURCHASE PRICE')) THEN
       Error_Sys.Record_General(lu_name_, 'INVALIDCOSTYPE: Not a valid Inventory Cost Type.');
   END IF;

   --check for a valid cost set           
   IF cost_set_ IS NOT NULL THEN
      IF cost_installed_ THEN
         stmt_ := 'BEGIN Cost_Set_API.Exist(:site,:cost_set);
                   END;';
         -- ifs_assert_safe HoInlk 20080317
         EXECUTE IMMEDIATE stmt_ 
            USING IN site_,
                  IN cost_set_;
      ELSE
         Error_SYS.Record_General(lu_name_, 'NOCOSTING: Since Costing is not installed you can not specify a Cost Set. Specify only Inventory Cost Type.');
      END IF;
   END IF;
  
   -- initializing arrays
   FOR i IN 1..9 LOOP
      static_from_tab(i) := NULL;
      static_to_tab(i)   := NULL;
   END LOOP;
   FOR i IN 1..5 LOOP
      client_name_tab(i) := NULL;
      db_name_tab(i)     := NULL;
      value_from_tab(i)  := NULL;
      value_to_tab(i)    := NULL;
   END LOOP;

  no_of_criterias_entered_ := 0;

   -- fetching criterias and their range values
   FOR counter IN  1..5 LOOP
      IF (counter = 1) THEN
         client_name_tab(1) := Client_SYS.Get_Item_Value('CRITERIA_1', parameter_attr_);
         IF (client_name_tab(1) IS NOT NULL) THEN
            Inventory_Value_Rep_Param_API.Exist(client_name_tab(1));
            db_name_tab(1)    := Inventory_Value_Rep_Param_API.Encode(client_name_tab(1));
            value_from_tab(1) := Client_SYS.Get_Item_Value('CRITERIA_1_FROM', parameter_attr_); 
            value_to_tab(1)   := Client_SYS.Get_Item_Value('CRITERIA_1_TO', parameter_attr_); 
            IF (value_from_tab(1) IS NULL OR value_to_tab(1) IS NULL) THEN
               Error_SYS.Record_General(lu_name_,'FROMTOVALUE: Both From and To values have to be entered for selected criteria.');
            END IF;
         END IF;
      ELSIF (counter = 2) THEN
         client_name_tab(2) := Client_SYS.Get_Item_Value('CRITERIA_2', parameter_attr_);
         IF (client_name_tab(2) IS NOT NULL) THEN
            Inventory_Value_Rep_Param_API.Exist(client_name_tab(2));
            db_name_tab(2)    := Inventory_Value_Rep_Param_API.Encode(client_name_tab(2));
            value_from_tab(2) := Client_SYS.Get_Item_Value('CRITERIA_2_FROM', parameter_attr_); 
            value_to_tab(2)   := Client_SYS.Get_Item_Value('CRITERIA_2_TO', parameter_attr_); 
            IF (value_from_tab(2) IS NULL OR value_to_tab(2) IS NULL) THEN
               Error_SYS.Record_General(lu_name_,'FROMTOVALUE: Both From and To values have to be entered for selected criteria.');
            END IF;
         END IF;
      ELSIF (counter = 3) THEN
         client_name_tab(3) := Client_SYS.Get_Item_Value('CRITERIA_3', parameter_attr_);
         IF (client_name_tab(3) IS NOT NULL) THEN
            Inventory_Value_Rep_Param_API.Exist(client_name_tab(3));
            db_name_tab(3)    := Inventory_Value_Rep_Param_API.Encode(client_name_tab(3));
            value_from_tab(3) := Client_SYS.Get_Item_Value('CRITERIA_3_FROM', parameter_attr_); 
            value_to_tab(3)   := Client_SYS.Get_Item_Value('CRITERIA_3_TO', parameter_attr_); 
            IF (value_from_tab(3) IS NULL OR value_to_tab(3) IS NULL) THEN
               Error_SYS.Record_General(lu_name_,'FROMTOVALUE: Both From and To values have to be entered for selected criteria.');
            END IF;
         END IF;
      ELSIF (counter = 4) THEN
         client_name_tab(4) := Client_SYS.Get_Item_Value('CRITERIA_4', parameter_attr_);
         IF (client_name_tab(4) IS NOT NULL) THEN
            Inventory_Value_Rep_Param_API.Exist(client_name_tab(4));
            db_name_tab(4)    := Inventory_Value_Rep_Param_API.Encode(client_name_tab(4));
            value_from_tab(4) := Client_SYS.Get_Item_Value('CRITERIA_4_FROM', parameter_attr_); 
            value_to_tab(4)   := Client_SYS.Get_Item_Value('CRITERIA_4_TO', parameter_attr_); 
            IF (value_from_tab(4) IS NULL OR value_to_tab(4) IS NULL) THEN
               Error_SYS.Record_General(lu_name_,'FROMTOVALUE: Both From and To values have to be entered for selected criteria.');
            END IF;
         END IF;
      ELSIF (counter = 5) THEN
         client_name_tab(5) := Client_SYS.Get_Item_Value('CRITERIA_5', parameter_attr_);
         IF (client_name_tab(5) IS NOT NULL) THEN
            Inventory_Value_Rep_Param_API.Exist(client_name_tab(5));
            db_name_tab(5)    := Inventory_Value_Rep_Param_API.Encode(client_name_tab(5));
            value_from_tab(5) := Client_SYS.Get_Item_Value('CRITERIA_5_FROM', parameter_attr_); 
            value_to_tab(5)   := Client_SYS.Get_Item_Value('CRITERIA_5_TO', parameter_attr_); 
            IF (value_from_tab(5) IS NULL OR value_to_tab(5) IS NULL) THEN
               Error_SYS.Record_General(lu_name_,'FROMTOVALUE: Both From and To values have to be entered for selected criteria.');
            END IF;
         END IF;
      END IF;
      EXIT WHEN client_name_tab(counter) IS NULL;
      no_of_criterias_entered_ := counter;
   END LOOP;

  IF (no_of_criterias_entered_ = 0) THEN
     Error_SYS.Record_General(lu_name_,'ONECRITERIA: At least one criteria has to be entered!');
  END IF;

   -- wildcard check
   FOR counter IN 1..no_of_criterias_entered_ LOOP
      IF (INSTR(value_from_tab(counter),'%') > 0) OR (INSTR(value_to_tab(counter),'%') > 0) THEN
         Error_SYS.Record_General(lu_name_,'NOWILDC: No Wildcards allowed in Criteria values');
      END IF;
   END LOOP;

   -- Changing static FROM and TO values to the values entered by the user as selection 
   -- criteria, this enables to write static WHERE clause irrespective of the users selection
   FOR counter IN 1..no_of_criterias_entered_ LOOP
      IF (db_name_tab(counter)= 'ABC_CLASS') THEN
         static_from_tab(1) := value_from_tab(counter);
         static_to_tab(1)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'PLANNER_BUYER') THEN
         static_from_tab(2) := value_from_tab(counter);
         static_to_tab(2)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'ACCOUNTING_GROUP') THEN
         static_from_tab(3) := value_from_tab(counter);
         static_to_tab(3)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'PART_PRODUCT_FAMILY') THEN
         static_from_tab(4) := value_from_tab(counter);
         static_to_tab(4)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'PART_PRODUCT_CODE') THEN
         static_from_tab(5) := value_from_tab(counter);
         static_to_tab(5)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'TYPE_CODE') THEN
         static_from_tab(6) := value_from_tab(counter);
         static_to_tab(6)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'PRIME_COMMODITY') THEN
         static_from_tab(7) := value_from_tab(counter);
         static_to_tab(7)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'SECOND_COMMODITY') THEN
         static_from_tab(8) := value_from_tab(counter);
         static_to_tab(8)   := value_to_tab(counter);
      ELSIF (db_name_tab(counter)= 'ASSET_CLASS') THEN
         static_from_tab(9) := value_from_tab(counter);
         static_to_tab(9)   := value_to_tab(counter);
      END IF;
   END LOOP;

   -- Set report notes displayed in the InfoServices archive
   notes_long_ := Language_SYS.Translate_Constant(lu_name_, 'YEAR: Year');
   notes_long_ := notes_long_ || ': '|| year_ || ', '; 
   notes_long_ := notes_long_ || Language_SYS.Translate_Constant(lu_name_, 'PERIOD: Period');
   notes_long_ := notes_long_ || ': '|| period_ || ', ';
   notes_long_ := notes_long_ || Language_SYS.Translate_Constant(lu_name_, 'SITE: Site');
   notes_long_ := notes_long_ || ': '|| site_ || ', ';
   notes_long_ := notes_long_ || Language_SYS.Translate_Constant(lu_name_, 'CRITERIAS: Criterias');
   FOR counter IN 1..no_of_criterias_entered_ LOOP
      IF (client_name_tab(counter) IS NOT NULL) THEN
         notes_long_ := notes_long_ || TO_CHAR(counter) || ') '|| client_name_tab(counter);
         notes_long_ := notes_long_ || ': ' || value_from_tab(counter) || ' - ' || value_to_tab(counter) || '  ';
      END IF;
   END LOOP;
   archive_notes_ := SUBSTR(notes_long_,1,200);
   Archive_API.Set_Notes(archive_notes_);
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'ALL_PARTS', all_parts_db_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_1_ITEMS');
   END IF;

   criteria1_value_ := NULL;
   criteria2_value_ := NULL;    
   criteria3_value_ := NULL;   
   criteria4_value_ := NULL;   
   criteria5_value_ := NULL;

   -- inventory part loop
   FOR partrec_ IN get_parts LOOP
      FOR config_rec_ IN get_configurations (site_, partrec_.part_no) LOOP
         OPEN get_quantities (site_, year_, period_, partrec_.part_no, config_rec_.configuration_id);
         -- fetch quantities for the part  
         FETCH get_quantities INTO qty_waiv_dev_rej_, quantity_;

         IF (get_quantities%FOUND) THEN
              OPEN get_total_value(site_, year_, period_, partrec_.part_no, config_rec_.configuration_id);
              -- fetch inventory value for the part
              FETCH get_total_value INTO total_value_;
              CLOSE get_total_value;

            -- calculation of inventory value depending of cost type and cost set
            IF (cost_set_ IS NULL) AND (cost_type_db_ IS NOT NULL) THEN
               IF (cost_type_db_ = 'INVENTORY VALUE') THEN
                  inventory_value_ := total_value_;
               ELSIF (cost_type_db_ = 'LATEST PURCHASE PRICE') THEN
                  inventory_value_ := quantity_ * Inventory_Part_Config_API.Get_Latest_Purchase_Price(site_, partrec_.part_no, '*');
               ELSIF (cost_type_db_ = 'AVERAGE PURCHASE PRICE') THEN
                  inventory_value_ := quantity_ * Inventory_Part_Config_API.Get_Average_Purchase_Price(site_, partrec_.part_no, '*');
               END IF;
            ELSE -- cost set always overrides the above calculations
               IF cost_installed_ THEN
                  stmt_ := 'BEGIN :cost_price := Cost_Int_API.Get_Total_Cost_Per_Cost_Set(:contract, :part_no, :cost_set);
                            END;';
                  -- ifs_assert_safe HoInlk 20080317
                  EXECUTE IMMEDIATE stmt_
                     USING OUT cost_price_,
                           IN  site_,
                           IN  partrec_.part_no,
                           IN  cost_set_;
               ELSE
                  -- This case should never have to occur since the checks earlier should prevent it.
                  cost_price_ := 0;
               END IF;
               inventory_value_ := (quantity_ * NVL(cost_price_,0)) + (qty_waiv_dev_rej_ * NVL(cost_price_,0));
            END IF;

            IF (do_xml_) THEN
               IF (row_no_ != 1) THEN
                  IF (no_of_criterias_entered_ = 5) THEN
                     IF (criteria1_value_ != partrec_.sort_value_1) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_1_ITEM');
                     ELSIF (criteria2_value_ != partrec_.sort_value_2) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                     ELSIF (criteria3_value_ != partrec_.sort_value_3)  THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                     ELSIF (criteria4_value_ != partrec_.sort_value_4)  THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                     ELSIF (criteria5_value_ != partrec_.sort_value_5) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                     END IF;
                  END IF;

                  IF (no_of_criterias_entered_ = 4) THEN
                     IF (criteria1_value_ != partrec_.sort_value_1) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_1_ITEM');
                     ELSIF (criteria2_value_ != partrec_.sort_value_2) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                     ELSIF (criteria3_value_ != partrec_.sort_value_3)  THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                     ELSIF (criteria4_value_ != partrec_.sort_value_4)  THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                     END IF;
                  END IF;

                  IF (no_of_criterias_entered_ = 3) THEN
                     IF (criteria1_value_ != partrec_.sort_value_1) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_1_ITEM');
                     ELSIF (criteria2_value_ != partrec_.sort_value_2) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                     ELSIF (criteria3_value_ != partrec_.sort_value_3)  THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                     END IF;
                  END IF;

                  IF (no_of_criterias_entered_ = 2) THEN
                     IF (criteria1_value_ != partrec_.sort_value_1) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_1_ITEM');
                     ELSIF (criteria2_value_ != partrec_.sort_value_2) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                     END IF;
                  END IF;

                  IF (no_of_criterias_entered_ = 1) THEN
                     IF (criteria1_value_ != partrec_.sort_value_1) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEMS');
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_1_ITEM');
                     END IF;
                  END IF;
               END IF;

               IF (no_of_criterias_entered_ = 1) THEN
                  IF (criteria1_value_ != partrec_.sort_value_1 OR criteria1_value_ IS NULL ) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_1_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1', client_name_tab(1));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1_VALUE', partrec_.sort_value_1);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_ITEMS');
                  END IF;
               END IF;

               IF (no_of_criterias_entered_ = 2) THEN
                  IF (criteria1_value_ != partrec_.sort_value_1 OR criteria1_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_1_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1', client_name_tab(1));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1_VALUE', partrec_.sort_value_1);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEMS');
                     criteria2_value_ := NULL;
                  END IF;
                  IF (criteria2_value_ != partrec_.sort_value_2 OR criteria2_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2', client_name_tab(2));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2_VALUE', partrec_.sort_value_2);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_ITEMS');
                  END IF;
               END IF;

               IF (no_of_criterias_entered_ = 3) THEN
                  IF (criteria1_value_ != partrec_.sort_value_1 OR criteria1_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_1_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1', client_name_tab(1));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1_VALUE', partrec_.sort_value_1);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEMS');
                     criteria2_value_ := NULL;
                  END IF;

                  IF (criteria2_value_ != partrec_.sort_value_2 OR criteria2_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2', client_name_tab(2));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2_VALUE', partrec_.sort_value_2);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEMS');
                     criteria3_value_ := NULL;
                  END IF;

                  IF (criteria3_value_ != partrec_.sort_value_3 OR criteria3_value_ IS NULL)  THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_3', client_name_tab(3));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_3_VALUE', partrec_.sort_value_3);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_ITEMS');
                  END IF;
               END IF;

               IF (no_of_criterias_entered_ = 4) THEN
                  IF (criteria1_value_ != partrec_.sort_value_1 OR criteria1_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_1_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1', client_name_tab(1));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1_VALUE', partrec_.sort_value_1);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEMS');
                     criteria2_value_ := NULL;
                  END IF;

                  IF (criteria2_value_ != partrec_.sort_value_2 OR criteria2_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2', client_name_tab(2));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2_VALUE', partrec_.sort_value_2);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEMS');
                     criteria3_value_ := NULL;
                  END IF;

                  IF (criteria3_value_ != partrec_.sort_value_3 OR criteria3_value_ IS NULL)  THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_3', client_name_tab(3));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_3_VALUE', partrec_.sort_value_3);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEMS');
                     criteria4_value_ := NULL;
                  END IF;

                  IF (criteria4_value_ != partrec_.sort_value_4 OR criteria4_value_ IS NULL)  THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_4', client_name_tab(4));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_4_VALUE', partrec_.sort_value_4);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEMS');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEM');
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_ITEMS');
                  END IF;
               END IF;

               IF (no_of_criterias_entered_ = 5) THEN
                  IF (criteria1_value_ != partrec_.sort_value_1 OR criteria1_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_1_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1', client_name_tab(1));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_1_VALUE', partrec_.sort_value_1);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEMS');
                     criteria2_value_ := NULL;
                  END IF;

                  IF (criteria2_value_ != partrec_.sort_value_2 OR criteria2_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_2_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2', client_name_tab(2));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_2_VALUE', partrec_.sort_value_2);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEMS');
                     criteria3_value_ := NULL;
                  END IF;

                  IF (criteria3_value_ != partrec_.sort_value_3 OR criteria3_value_ IS NULL)  THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_3_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_3', client_name_tab(3));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_3_VALUE', partrec_.sort_value_3);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEMS');
                     criteria4_value_ := NULL;
                  END IF;


                  IF (criteria4_value_ != partrec_.sort_value_4 OR criteria4_value_ IS NULL)  THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_4_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_4', client_name_tab(4));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_4_VALUE', partrec_.sort_value_4);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEMS');
                     criteria5_value_ := NULL;
                  END IF;

                  IF (criteria5_value_ != partrec_.sort_value_5 OR criteria5_value_ IS NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CRITERIA_5_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_5', client_name_tab(5));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CRITERIA_5_VALUE', partrec_.sort_value_5);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_ITEMS');
                  END IF;
               END IF;

               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', partrec_.part_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIGURATION_ID', config_rec_.configuration_id);
               Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_WAIV_DEV_REJ', qty_waiv_dev_rej_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'QUANTITY', quantity_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_VALUE', inventory_value_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'UNIT_MEAS', partrec_.unit_meas);
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEM');
            END IF;

            IF (do_rs_) THEN
               INSERT INTO &TABLE
                  (result_key, row_no, parent_row_no,
                   &CRITERIA_1, &CRITERIA_2, &CRITERIA_3, &CRITERIA_4, &CRITERIA_5,
                   &CRITERIA_1_VALUE, &CRITERIA_2_VALUE, &CRITERIA_3_VALUE, &CRITERIA_4_VALUE, &CRITERIA_5_VALUE,
                   &PART_NO, &CONFIGURATION_ID, &QTY_WAIV_DEV_REJ, &QUANTITY, 
                   &INVENTORY_VALUE, &UNIT_MEAS, &ALL_PARTS_DB)
               VALUES
                  (result_key_, row_no_, row_no_, 
                   client_name_tab(1), client_name_tab(2), client_name_tab(3), client_name_tab(4), client_name_tab(5),
                   partrec_.sort_value_1, partrec_.sort_value_2, partrec_.sort_value_3, partrec_.sort_value_4, partrec_.sort_value_5,
                   partrec_.part_no, config_rec_.configuration_id, qty_waiv_dev_rej_, quantity_,
                   inventory_value_, partrec_.unit_meas, all_parts_db_);
            END IF;
            row_no_ := row_no_ + 1;
            criteria1_value_ := partrec_.sort_value_1;
            criteria2_value_ := partrec_.sort_value_2;    
            criteria3_value_ := partrec_.sort_value_3;   
            criteria4_value_ := partrec_.sort_value_4;   
            criteria5_value_ := partrec_.sort_value_5; 
         END IF;  -- FOUND
         CLOSE get_quantities;
      END LOOP;
   END LOOP;

   IF (do_xml_) THEN
      IF (row_no_ != 1) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_ITEMS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_5_ITEMS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_4_ITEMS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_3_ITEMS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_2_ITEMS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_1_ITEM');
      END IF;
      Xml_Record_Writer_SYS.End_Element(xml_, 'CRITERIA_1_ITEMS');
   END IF;

   company_      := Site_API.Get_Company(site_);       
   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := Site_API.Get_Company_Address_Name(site_);

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE PART_NO
UNDEFINE QTY_WAIV_DEV_REJ
UNDEFINE QUANTITY
UNDEFINE INVENTORY_VALUE
UNDEFINE UNIT_MEAS
UNDEFINE CRITERIA_1
UNDEFINE CRITERIA_2
UNDEFINE CRITERIA_3
UNDEFINE CRITERIA_4
UNDEFINE CRITERIA_5
UNDEFINE CRITERIA_1_VALUE
UNDEFINE CRITERIA_2_VALUE
UNDEFINE CRITERIA_3_VALUE
UNDEFINE CRITERIA_4_VALUE
UNDEFINE CRITERIA_5_VALUE
UNDEFINE ALL_PARTS_DB
UNDEFINE CONFIGURATION_ID
UNDEFINE VIEW_RPV
