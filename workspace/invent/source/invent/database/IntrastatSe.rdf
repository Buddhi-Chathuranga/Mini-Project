-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatSe.rdf
--
--  Date    Sign     History
--  ------  ----     --------------------------------------------------------
--  211206  Hahalk  Bug 161177(SC21R2-6451), Added field opponent_tax_id and country of origin for export reports.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  140130  IsSalk  Bug 114770, Modified Report_Overview() to report weight up to three decimals with comma as the decimal symbol
--  140130          and to display statistical_value in integers with 1 as the minimum value.
--  121016  PraWlk  Bug 105887, Removed SUBSTR to avoid length restriction of customs statistics number description. 
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Sweden'
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  090929  PraWlk  Bug 85516, Increased the length of com_code_desc_ to 200. 
--  090601  SaWjlk  Bug 83173, Removed the prog text duplications.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  070308  MaMalk  Bug 63484, Modified the cursor get_lines in method Report_Overview 
--  070308          to exclude charges from statistical_value. 
-------------------------13.4.0----------------------------------------------    
--  060131  NiDalk  Added necessary code for Report Designer layout.
--  060124  MarSlk  Bug 55277, Introduced variable rounded_statistical_value_ and 
--  060124          assigned the rounded value of statistical_value.The variable has  
--  060124          been used where appropiate. The ROUND function has been 
--  060124          removed in the STAT_VALUES_SUM.
--  051216  SuJalk  Changed VIEW_RPV to TABLE in COMMENT ON TABLE.   
--  050921  NiDalk  removed unused variables.
--  050906  JaBalk  Changed the SUBSTRB to SUBSTR and length of variable com_code_desc_ to 35.
--  050107  DiVelk  Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  040924  ChJalk  Bug 46743, Modified the length of the variable com_code_desc_ and assigned only the first
--  040924          35 characters to the variable.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INTRASTAT_SE_REP.
--  040301  GeKalk  Replaced substrb with substr for UNICODE modifications.
--  ---------------- EDGE Package Group 3 Unicode Changes --------------------
--  040203  NaWalk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.  
--  040202  NaWalk  Removed the fourth variable of DBMS_SQL inside the loop,for Unicode modification.
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  020613  JOHESE   Bug fix 29284, Removed column mode_of_transport from the report
--  020312  DaZa     Bug fix 28308, added ABS on intrastat_alt_qty so we dont get "-x * -y results" when we multiply with the regular qty.
--  020217  IsAn     A4/Letter conversion.
--  010322  DaZa     Created using spec 'Functional specification for IID 10230 
--                   - Swedish Intrastat File' by Martin Korn.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_SE_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_SE_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define COMPANY_NAME       = S1
define COMPANY_VAT_NO     = S2
define REPR_NAME          = S3
define REPR_VAT_NO        = S4
define CURRENCY_CODE      = S5
define REPORTING_PERIOD   = S6
define CREATION_DATE      = S7
define CURRENCY_CODE      = S8
define NO_OF_LINES        = N1
define REPORT_TITLE       = S9
define STAT_VALUES_SUM    = N2
define COUNTRY_DEST_TITLE = S10

define LINE_NO            = N3
define COUNTRY_OF_DEST    = S11
define NOTC               = S12
define COMMODITY_CODE     = S14
define COM_CODE_DESC      = S15
define NET_WEIGHT         = N4
define ALT_MEAS           = N5
define STATISTICAL_VALUE  = N6
define OPPONENT_TAX_ID    = S16
define COUNTRY_OF_ORIGIN  = S17


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&REPR_NAME                            REPR_NAME,
       H.&REPR_VAT_NO                          REPR_VAT_NO,     
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE, 
       H.&STAT_VALUES_SUM                      STAT_VALUES_SUM,      
       H.&COUNTRY_DEST_TITLE                   COUNTRY_DEST_TITLE,       
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&NOTC                                 NOTC,       
       D.&COMMODITY_CODE                       COMMODITY_CODE,
       D.&COM_CODE_DESC                        COM_CODE_DESC,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_MEAS                             ALT_MEAS,
       D.&STATISTICAL_VALUE                    STATISTICAL_VALUE,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Tax No:^ITEM_NAME=iCompanyVatNo^';   
COMMENT ON COLUMN &VIEW..REPR_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative name:^ITEM_NAME=iReprName^';  
COMMENT ON COLUMN &VIEW..REPR_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Tax No:^ITEM_NAME=iReprVatNo^';     
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting Currency code:^ITEM_NAME=iCurrencyCode^'; 
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of lines:^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report title^ITEM_NAME=iReportTitle^';   
COMMENT ON COLUMN &VIEW..STAT_VALUES_SUM IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total invoiced value:^ITEM_NAME=iStatisticalValueSum^';
COMMENT ON COLUMN &VIEW..COUNTRY_DEST_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Country of Destination title^ITEM_NAME=iCountryDestTitle^';                        
          
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of consignment/destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..NOTC IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iNotc^';  
COMMENT ON COLUMN &VIEW..COMMODITY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Commodity Code^ITEM_NAME=iCommodityCode^';
COMMENT ON COLUMN &VIEW..COM_CODE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Commodity Code Description^ITEM_NAME=iComCodeDesc^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_MEAS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAltMeas^';
COMMENT ON COLUMN &VIEW..STATISTICAL_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iStatisticalValue^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Partner Id^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';
   

BEGIN 
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Intrastat Report Sweden', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Supply Chain','Intrastat');
   -- Addition for Custom Fields ------ 
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_SE_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
  
   file_line_no_        NUMBER := 0;
   vat_no_               VARCHAR2(50);
   stmt_                 VARCHAR2(2000);
   result_key_           NUMBER;
   row_no_               NUMBER := 1;
   parent_row_no_        NUMBER := 0;
   report_title_         VARCHAR2(50);
   intrastat_id_         NUMBER;
   intrastat_direction_  VARCHAR2(20);
   rep_curr_rate_        NUMBER;
   country_code_         VARCHAR2(2);   
   statistical_values_sum_ NUMBER := 0;
   report_period_          VARCHAR2(4);
   creation_date_str_      VARCHAR2(8);
   com_code_desc_          VARCHAR2(2000);
   company_vat_no_         VARCHAR2(35);
   company_name_           VARCHAR2(35);
   repr_vat_no_            VARCHAR2(35);
   repr_name_              VARCHAR2(35);
   notc_dummy_             VARCHAR2(2);  
   country_destination_title_ VARCHAR2(50);  
   rounded_statistical_value_ NUMBER := 0;

   do_xml_                 BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                  BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                    CLOB;
   package_name_           VARCHAR2(100) := 'INTRASTAT_SE_REP';

   CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc = notc_
      AND    country_code = 'SE';

   CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             creation_date,
             rep_curr_code,
             bransch_no,
             bransch_no_repr,
             company_contact,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;


   CURSOR get_lines IS
      SELECT il.opposite_country,
             DECODE(il.intrastat_direction, 'EXPORT', il.country_of_origin, '')    country_of_origin,
             cn.country_notc,             
             il.customs_stat_no,
             SUM(il.quantity * il.net_unit_weight) net_weight_sum,
             SUM(ABS(il.intrastat_alt_qty) * il.quantity) intrastat_alt_qty_sum,
             SUM((NVL(il.invoiced_unit_price, NVL(il.order_unit_price,0)) + 
             NVL(il.unit_add_cost_amount_inv, NVL(il.unit_add_cost_amount,0))) * 
             il.quantity) * rep_curr_rate_ statistical_value,
             DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '')  opponent_tax_id
        FROM intrastat_line_tab il, country_notc_tab cn
       WHERE il.intrastat_id = intrastat_id_
         AND il.intrastat_direction = intrastat_direction_
         AND il.rowstate = 'Released'        
         AND il.notc = cn.notc      
         AND cn.country_code = country_code_    
    GROUP BY il.opposite_country, DECODE(il.intrastat_direction, 'EXPORT', il.country_of_origin, ''), cn.country_notc, il.customs_stat_no, DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, ''); 

BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   
   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN    
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTSE: Intrastat Export Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'EXPORTCD: Country of Destination');      
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTSE: Intrastat Import Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'IMPORTCD: Country of Dispatch');      
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR headrec_ IN get_head LOOP     
      
      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         -- ifs_assert_safe bmekse 20110309
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;
        
      report_period_ := to_char(headrec_.end_date, 'YYMM');         
      creation_date_str_ := to_char(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_rate_ := headrec_.rep_curr_rate;
      country_code_ := headrec_.country_code;      

      company_vat_no_ :=  SUBSTR(vat_no_, 1, 31) || '-' || SUBSTR(headrec_.bransch_no, 1, 3);
      company_name_ := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 35); 
  
      IF (headrec_.representative IS NOT NULL) THEN
         repr_vat_no_ :=  SUBSTR(headrec_.repr_tax_no, 1, 31) || '-' || SUBSTR(headrec_.bransch_no_repr, 1, 3);
         repr_name_ := SUBSTR(Person_Info_API.Get_Name(headrec_.representative), 1, 35);
      END IF; 

      -- Insert Head details
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_str_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', report_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_NAME', repr_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPR_VAT_NO', repr_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', headrec_.rep_curr_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DEST_TITLE', country_destination_title_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',headrec_.rowkey, '&VIEW');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_SE_LINES');         
      END IF;

      IF (do_rs_) THEN
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, 
             &COMPANY_NAME, &COMPANY_VAT_NO, 
             &REPR_NAME, &REPR_VAT_NO,           
             &REPORTING_PERIOD, &CREATION_DATE,
             &CURRENCY_CODE, &REPORT_TITLE, &COUNTRY_DEST_TITLE )
         VALUES
            (result_key_, row_no_, parent_row_no_, 
            company_name_, company_vat_no_, 
            repr_name_, repr_vat_no_,          
            report_period_, creation_date_str_,
            headrec_.rep_curr_code, report_title_, country_destination_title_ );   
      END IF;

      parent_row_no_ := row_no_;   
      row_no_ := row_no_ + 1;

      -- Data Records
      FOR linerec_ IN get_lines LOOP       

         file_line_no_ := file_line_no_ + 1;
         com_code_desc_ := Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no);
         
         IF (intrastat_direction_ = 'EXPORT') THEN
            IF (linerec_.opponent_tax_id IS NULL) THEN
               Error_SYS.Record_General(lu_name_, 'NOOPPONENTTAXIDSE: Opponent Tax ID is missing for some lines.');
            END IF;
            IF (linerec_.country_of_origin IS NULL) THEN
               Error_SYS.Record_General(lu_name_, 'NOCOUNTRYORIGIN: The country of origin must be specified for intrastat reporting.');   
            END IF;
         END IF;
         
         IF (linerec_.statistical_value < 1) THEN
            rounded_statistical_value_ := 1;
         ELSE
            rounded_statistical_value_ := ROUND(linerec_.statistical_value);
         END IF;
         -- insert detail rows
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_SE_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', file_line_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_DEST', linerec_.opposite_country);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NOTC', linerec_.country_notc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COM_CODE_DESC', com_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', REPLACE(TO_CHAR(ROUND(linerec_.net_weight_sum, 3)), '.', ','));
            Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_MEAS', round(linerec_.intrastat_alt_qty_sum));
            Xml_Record_Writer_SYS.Add_Element(xml_,'STATISTICAL_VALUE', rounded_statistical_value_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMMODITY_CODE', linerec_.customs_stat_no);
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_SE_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, &NOTC,
                &COMMODITY_CODE, &COM_CODE_DESC,
                &NET_WEIGHT, &ALT_MEAS, 
                &STATISTICAL_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, file_line_no_, 
                linerec_.country_of_origin, linerec_.opposite_country, linerec_.country_notc,
                linerec_.customs_stat_no, com_code_desc_,
                round(linerec_.net_weight_sum), round(linerec_.intrastat_alt_qty_sum), 
                rounded_statistical_value_, linerec_.opponent_tax_id );
         END IF;

         row_no_ := row_no_ + 1;

         -- sums
         statistical_values_sum_ := statistical_values_sum_ + rounded_statistical_value_;

      END LOOP;

      IF (row_no_ = 2) THEN -- no details      
         -- insert blank row
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_SE_LINE');
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_SE_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, &NOTC,
                &COMMODITY_CODE, &COM_CODE_DESC,
                &NET_WEIGHT, &ALT_MEAS, &STATISTICAL_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, NULL, 
                NULL, NULL, NULL,
                NULL, NULL,
                NULL, NULL, NULL, NULL );
         END IF;
      END IF;
      
      -- update the head with no_of_lines and sums
      IF (do_rs_) THEN
         UPDATE &TABLE
         SET    &NO_OF_LINES = file_line_no_,
                &STAT_VALUES_SUM = statistical_values_sum_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_SE_LINES');
         Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', file_line_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUES_SUM', round(statistical_values_sum_));
      END IF;
   END LOOP;
 
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


  



----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE COMPANY_NAME
UNDEFINE COMPANY_VAT_NO
UNDEFINE REPR_NAME
UNDEFINE REPR_VAT_NO
UNDEFINE CURRENCY_CODE
UNDEFINE REPORTING_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE NO_OF_LINES
UNDEFINE REPORT_TITLE
UNDEFINE STAT_VALUES_SUM
UNDEFINE COUNTRY_DEST_TITLE
UNDEFINE LINE_NO
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE COUNTRY_OF_DEST
UNDEFINE NOTC
UNDEFINE COMMODITY_CODE
UNDEFINE COM_CODE_DESC
UNDEFINE NET_WEIGHT
UNDEFINE ALT_MEAS
UNDEFINE STATISTICAL_VALUE
UNDEFINE OPPONENT_TAX_ID
