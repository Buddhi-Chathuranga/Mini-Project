-----------------------------------------------------------------------------
--
--  Fragment:     IdentifySerialsInMultipleLocationsAssistant
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  190710  JaThlk  SCUXXW4-23055, Removed unnecessary methods.
--  190410  JaThlk  SCUXXW4-18434, Moved the where clause for SerialNo to projection file from plsvc file.
--  181208  JaThlk  SCUXXW4-5516, Renamed Temp_Part_Tracking_For_Multi_Loc_Serials_Virtual as Temp_Part_Track_Multi_Loc_Serials_Virtual to prevent exceeding characters limit in usages.
--  181129  JaThlk  SCUXXW4-5516, Implemented Barcode ID command button and changed the method name from Get_Part_Info___ to Get_Part_Info_For_Multi_Loc___.
--  181122  Chfolk  SCUXXW4-5516, Renamed Get_Catch_Uom as Get_Catch_Uom_For_Multi_Loc_Serials___, Create_Lines___ as Create_Lines_For_Multi_Loc_Serials___, Catch_Unit_Info_Structure_Rec as Catch_Unit_Info_For_Multi_Loc_Serials_Structure_Rec
--  181122          to distinguish methods names in IdentifySerialsInLocationAssistant and IdentifySerialsInMultipleLocationsAssistant.
--  180828  JaThlk  SCUXXW4-5516, Added the method Get_Part_Info___ to return a common structure.
--  180810  JaThlk  SCUXXW4-5516, Created.
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Temp_Part_Track_Multi_Loc_Serials_Virtual_Rec )
IS
   identification_context_  VARCHAR2(25) := '';

BEGIN   
   super(rec_);
   IF (NOT (rec_.generated)) OR (rec_.generated IS NULL) THEN  
   Temporary_Part_Tracking_API.New(rec_.session_id, rec_.serial_no, rec_.catch_qty, rec_.contract, rec_.part_no, identification_context_);
   END IF;
END CRUD_Create___;  

@Override
PROCEDURE CRUD_Update___(
   old_ IN Temp_Part_Track_Multi_Loc_Serials_Virtual_Rec,
   new_ IN Temp_Part_Track_Multi_Loc_Serials_Virtual_Rec )
IS
   
BEGIN
   Temporary_Part_Tracking_API.Modify_Catch_Qty(new_.session_id, new_.serial_no, new_.catch_qty);
   super(old_, new_);

END CRUD_Update___;

@Override
PROCEDURE CRUD_Delete___(   
   rec_ IN Temp_Part_Track_Multi_Loc_Serials_Virtual_Rec )
IS

BEGIN
    Temporary_Part_Tracking_API.Remove(rec_.session_id, rec_.serial_no);  
    super(rec_);
       
END CRUD_Delete___;


FUNCTION Get_Part_Description___ (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   part_description_ VARCHAR2(100);
BEGIN
   part_description_ := Inventory_Part_API.Get_Description(contract_, part_no_);
   RETURN part_description_;
END Get_Part_Description___;


FUNCTION Get_Session_Id_In_Multi_Loc___ RETURN NUMBER
IS
   session_id_ NUMBER;
BEGIN
   session_id_ := Temporary_Part_Tracking_API.Get_Next_Session_Id;
   RETURN session_id_;
END Get_Session_Id_In_Multi_Loc___;


FUNCTION Get_Catch_Uom_For_Multi_Loc_Serials___ (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 ) RETURN Catch_Unit_Info_For_Multi_Loc_Serials_Structure_Rec
IS
   rec_ Catch_Unit_Info_For_Multi_Loc_Serials_Structure_Rec;
   catch_uom_ VARCHAR2(32);
   catch_unit_enabled_  VARCHAR2(5);
BEGIN
   IF (Part_Catalog_API.Get_Catch_Unit_Enabled_Db(part_no_) = 'TRUE') THEN
      catch_unit_enabled_ := 'TRUE';
      catch_uom_ := Inventory_Part_API.Get_Catch_Unit_Meas(contract_, part_no_);
   ELSE
      catch_unit_enabled_ := 'FALSE';
      catch_uom_ := NULL;
   END IF;
      rec_.catch_uom := catch_uom_;
      rec_.catch_unit_enabled := catch_unit_enabled_;
   RETURN rec_;
END Get_Catch_Uom_For_Multi_Loc_Serials___;


PROCEDURE Create_Lines_For_Multi_Loc_Serials___ (
   parent_objkey_   IN  VARCHAR2,
   serial_list_     IN  CLOB,
   session_id_      IN  NUMBER,
   contract_        IN  VARCHAR2,
   part_no_         IN  VARCHAR2,  
   lot_batch_no_    IN  VARCHAR2,
   info$_           OUT VARCHAR2) 
IS
   serial_no_list_   CLOB := CONCAT(serial_list_, Client_SYS.record_separator_);
   line_rec_         Temp_Part_Track_Multi_Loc_Serials_Virtual_Rec;
   serial_no_        VARCHAR2(50);
   serial_no_attr_   VARCHAR2(32000);
   catch_qty_        NUMBER;
BEGIN  
   WHILE (INSTR(serial_no_list_, Client_SYS.record_separator_) > 0) LOOP
      serial_no_ := substr(serial_no_list_, 0, INSTR(serial_no_list_, Client_SYS.record_separator_) - 1);
      line_rec_.objkey                    := sys_guid();
      line_rec_.parent_objkey             := parent_objkey_;
      line_rec_.serial_no                 := serial_no_;
      line_rec_.session_id                := session_id_;
      line_rec_.contract                  := contract_;
      line_rec_.part_no                   := part_no_;
      line_rec_.lot_batch_no              := lot_batch_no_;
      line_rec_.generated                 := true;
         
      IF serial_no_attr_ IS NULL THEN
         serial_no_attr_ := serial_no_;
      ELSE
         serial_no_attr_ := serial_no_attr_ || Client_SYS.record_separator_ || serial_no_;
      END IF;
      CRUD_Create___(line_rec_);
      serial_no_list_ := SUBSTR(serial_no_list_, (INSTR(serial_no_list_, Client_SYS.record_separator_) + 1)); 
   END LOOP;
   info$_ := Temporary_Part_Tracking_API.New_Clob(serial_no_attr_, session_id_, catch_qty_, contract_, part_no_); 
END Create_Lines_For_Multi_Loc_Serials___;


PROCEDURE Insert_Lines_For_Multi_Loc_Serials___ (
   parent_objkey_      IN VARCHAR2,
   session_id_var_     IN NUMBER,
   session_id_         IN NUMBER,
   contract_           IN VARCHAR2,
   part_no_            IN VARCHAR2 ) 
IS
  rec_  Temp_Part_Track_Multi_Loc_Serials_Virtual_Rec;
  CURSOR Get_Serial_Numbers IS
  SELECT *
  FROM temporary_part_tracking_tab
  WHERE session_id = session_id_var_;
BEGIN
   FOR linerec_ IN Get_Serial_Numbers LOOP
      rec_.objkey                    := sys_guid();
      rec_.parent_objkey             := parent_objkey_;
      rec_.serial_no                 := linerec_.serial_no;
      rec_.session_id                := session_id_;
      rec_.contract                  := contract_;
      rec_.part_no                   := part_no_;
      rec_.generated                 := true;
      CRUD_Create___(rec_);
   END LOOP;
END Insert_Lines_For_Multi_Loc_Serials___;


FUNCTION Get_Barcode_Info_For_Multi_Loc___ (
   parent_session_id_  IN NUMBER) RETURN Barcode_Info_For_Multi_Loc_Structure_Rec
IS
   rec_               Barcode_Info_For_Multi_Loc_Structure_Rec;
   session_id_temp_   NUMBER;
BEGIN
   session_id_temp_           := Get_Session_Id_In_Multi_Loc___;
	rec_.session_id            := session_id_temp_;
   rec_.session_id_str        := TO_CHAR(session_id_temp_);
   rec_.parent_session_id_str := TO_CHAR(parent_session_id_);
	RETURN rec_;
END Get_Barcode_Info_For_Multi_Loc___;


FUNCTION Get_Info_For_Multi_Loc_Serials___ (
	contract_ IN VARCHAR2,
	part_no_  IN VARCHAR2,
	ref_type_ IN VARCHAR2) RETURN Initial_Info_Multi_Loc_Serials_Structure_Rec
IS
   catch_info_rec_   Catch_Unit_Info_For_Multi_Loc_Serials_Structure_Rec;
   rec_              Initial_Info_Multi_Loc_Serials_Structure_Rec;

BEGIN
   catch_info_rec_ := Get_Catch_Uom_For_Multi_Loc_Serials___(contract_, part_no_);
   rec_.part_description := Get_Part_Description___(contract_, part_no_);   
   rec_.catch_uom := catch_info_rec_.catch_uom;
   rec_.catch_unit_enabled := catch_info_rec_.catch_unit_enabled;
   rec_.ref_type := Order_Supply_Demand_Type_API.Decode(ref_type_);
   rec_.session_id := Temporary_Part_Tracking_API.Get_Next_Session_Id;
   RETURN rec_;
END Get_Info_For_Multi_Loc_Serials___;
