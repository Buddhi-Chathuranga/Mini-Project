-----------------------------------------------------------------------------
--
--  Logical unit: INVENT
--
--  File:         SERVICEABILITY_TAG_REP.RDF
--  Version:      Foundation1 2.2
--
--  Date    Sign   History
--  ------  ------ ----------------------------------------------------------
--  211006  SBalLk SC21R2-3202, Modified Report_Overview() method to use LotBatchMaster LU public rec instead parameter method to fetch order reference. 
--  190319  Asawlk Bug 147444(SCZ-3818), Modified method Report_Overview to fetch correct manufacturer and manufacturer part no
--  190319         from purchase order line when the report is printed for non-tracked and lot tracked parts. 
--  170502  jagrno Moved all VIM specific logic to LU's in component VIM. Replaced term "Task" with new term "Event".
--  160711  ChJalk Bug 130277, Modified the report method to enable adding different logos for different companies.
--  160622  jagrno Replaced Maint_Task_API with Maint_Event_API.
--  160606  jagrno Replaced Maint_Task_Type_API with Maint_Event_Type_API.
--  160601  jagrno Modified code due to renamed attributes in LU SerialOrderHist.
--  150825  NaSalk AFT-1539, Rephrased the error message for NOPRINTNOTAPPL and removed extra space after the message constant.
--  130808  MaRalk TIBE-904, Removed global LU constants vim_part_master_serial_inst_, oper_per_part_inst_, 
--  130808         ser_oper_log_hist_inst_, vim_serial_struc_inst_, vim_serial_inst_, life_limit_inst_, serial_life_limit_inst_, 
--  130808         op_life_limit_inst_, op_per_part_lu_inst_, maint_task_inst_, ser_order_hist_inst_, vim_serial_hist_inst_
--  130808         and modified method Report_Overview using conditional compilation instead.
--  110530  TiRalk Bug 104413, Modified the report to show the parameters in Order report dialog.
--  110602  MaEelk Modified the code to fetch the current location code of the serial in VIM instead of the location code of the serial removed from. 
--  110530  ShKolk Added NVL to SERIAL_NO and LOT_BATCH_NO. Removed inserting duplicate LOT_BATCH_NO to xml report.
--  110526  ShKolk Added General_SYS for Report_Overview().
--  110307  BhKalk BBIRD-2001 Serviceability tag report review and changes.
--  110112  ReSelk BBIRD-1521 Corrected error
--  101011  ReSelk BB10- added error message for print serviceability tag when operational status is not Applicable.
--  100819  ReSelk BBIRD-757- Truncated task_remark to 120 characters and added 3 dots if its longer than 120.
--  100811  ImFelk BBIRD-753: Correction to retrieve maint task data when the task is in the history.
--  100802  ReSelk BB10- Created.  
-----------------------------------------------------------------------------

DEFINE MODULE             = INVENT
DEFINE LU                 = InventoryTransactionHist
DEFINE PKG                = SERVICEABILITY_TAG_RPI

DEFINE TABLE              = INFO_SERVICES_RPT
DEFINE RAWVIEW            = INFO_SERVICES_RPV
DEFINE VIEW               = SERVICEABILITY_TAG_REP
DEFINE METHOD             = Report_Overview

DEFINE STATUS                            = s1
DEFINE PART_NO                           = s2
DEFINE SERIAL_NO                         = s3
DEFINE MANUFACTURER_NO                   = s4
DEFINE MANU_PART_NO                      = s5
DEFINE LOT_BATCH_NO                      = s6
DEFINE LIFE_LIMITED                      = s7
DEFINE REMAINING_LIFE                    = s8
DEFINE TASK_NO                           = s9
DEFINE TASK_INFO                         = s10
DEFINE TASK_REMARKS                      = s11
DEFINE DESCRIPTION                       = s12
DEFINE LLP_OPER_PARAM1                   = s13
DEFINE LLP_OPER_PARAM2                   = s14
DEFINE LLP_OPER_VALUE1                   = s15
DEFINE LLP_OPER_VALUE2                   = s16
DEFINE LLP_CALENDAR                      = s17
DEFINE ORDER_NO                          = s18
DEFINE REMOVED_FROM_PART_NO              = s19
DEFINE REMOVED_FROM_TSN                  = s20
DEFINE REMOVED_FROM_LOCATION             = s21
DEFINE REMOVED_FROM_POSITION             = s22
DEFINE REMOVED_FROM_MECH_SIG             = s23
DEFINE STATUS_DB                         = s24
DEFINE LLP_OPER_REMAIN_VALUE1            = s25
DEFINE LLP_OPER_REMAIN_VALUE2            = s26

DEFINE TSN                               = s27
DEFINE TSO                               = s28
DEFINE CSN                               = s29
DEFINE CSO                               = s30
DEFINE QUANTITY                          = n5
DEFINE MAX_REPAIRS                       = n6
DEFINE REMAINING_REPAIRS                 = n7

DEFINE CALENDAR_END_DATE                 = d1 
DEFINE ORDER_DATE                        = d2 
DEFINE REMOVED_FROM_DATE                 = d3
DEFINE EXPIRY_DATE                       = d4

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Refreshing RPV view &RAWVIEW

BEGIN
Report_SYS.Refresh_RPV_View ('&RAWVIEW', '&TABLE');
END;
/

PROMPT Creating report view &VIEW
-- Renamed the column TASK_REMARKS to REMARK since report parameter is used as REMARK.
-- Added QFLAGS to PartNo, SerialNo, LotBatchNo, Status, Quantity, TaskNo, Remarks.
-- Added Enumeration to status.
CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       &PART_NO                                PART_NO,
       &SERIAL_NO                              SERIAL_NO,
       &MANUFACTURER_NO                        MANUFACTURER_NO,
       &MANU_PART_NO                           MANU_PART_NO,
       &LOT_BATCH_NO                           LOT_BATCH_NO,
       &STATUS                                 STATUS,
       &STATUS_DB                              STATUS_DB,
       &TSN                                    TSN,
       &TSO                                    TSO,
       &CSN                                    CSN,
       &CSO                                    CSO,
       &TASK_NO                                TASK_NO,
       &TASK_INFO                              TASK_INFO,
       &TASK_REMARKS                           REMARK,
       &DESCRIPTION                            DESCRIPTION,
       &LLP_OPER_PARAM1                        LLP_OPER_PARAM1,
       &LLP_OPER_PARAM2                        LLP_OPER_PARAM2,
       &LLP_OPER_VALUE1                        LLP_OPER_VALUE1,
       &LLP_OPER_VALUE2                        LLP_OPER_VALUE2,
       &CALENDAR_END_DATE                      CALENDAR_END_DATE,
       &LLP_CALENDAR                           LLP_CALENDAR,
       &MAX_REPAIRS                            MAX_REPAIRS,
       &REMAINING_REPAIRS                      REMAINING_REPAIRS,
       &ORDER_NO                               ORDER_NO,
       &ORDER_DATE                             ORDER_DATE,
       &QUANTITY                               QUANTITY,
       &REMOVED_FROM_PART_NO                   REMOVED_FROM_PART_NO,
       &REMOVED_FROM_TSN                       REMOVED_FROM_TSN,
       &REMOVED_FROM_LOCATION                  REMOVED_FROM_LOCATION,
       &REMOVED_FROM_DATE                      REMOVED_FROM_DATE,
       &REMOVED_FROM_POSITION                  REMOVED_FROM_POSITION,
       &REMOVED_FROM_MECH_SIG                  REMOVED_FROM_MECH_SIG,
       &EXPIRY_DATE                            EXPIRY_DATE,
       &LLP_OPER_REMAIN_VALUE1                 LLP_OPER_REMAIN_VALUE1,
       &LLP_OPER_REMAIN_VALUE2                 LLP_OPER_REMAIN_VALUE2
FROM  &RAWVIEW
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^
   ^METHOD=&PKG..&METHOD^MODE=PLSQL1.2^TABLE=&TABLE^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part Number^TITLE=Part Number:^ITEM_NAME=iPartNo^QUERY=Part No:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..serial_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Serial No^TITLE=Serial No:^ITEM_NAME=iSerialNo^QUERY=Serial No:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..manufacturer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Manufacturer^TITLE=Manufacturer:^ITEM_NAME=iManufacturerNo^';
COMMENT ON COLUMN &VIEW..manu_part_no IS
   'FLAGS=A----^DATATYPE=STRING(80)/UPPERCASE^PROMPT=Manufacturer Part Number^TITLE=Manufacturer Part Number:^ITEM_NAME=iManuPartNo^';
COMMENT ON COLUMN &VIEW..lot_batch_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Lot/Batch Number^TITLE=Lot/Batch Number:^ITEM_NAME=iLotBatchNo^QUERY=Lot/Batch Number:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..status IS
   'FLAGS=A----^TITLE=Status:^ITEM_NAME=iStatus^DATATYPE=STRING(30)^QUERY=Status:^QFLAGS=OCS--^ENUMERATE=SERVICEABILITY_STATUS_API.Enumerate^';
COMMENT ON COLUMN &VIEW..status_db IS
   'FLAGS=A----^TITLE=Status Db:^ITEM_NAME=iStatusDb^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..tsn IS
   'FLAGS=A----^TITLE=TSN:^ITEM_NAME=iTsn^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..tso IS
   'FLAGS=A----^TITLE=TSO:^ITEM_NAME=iTso^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..csn IS
   'FLAGS=A----^TITLE=CSN:^ITEM_NAME=iCsn^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..cso IS
   'FLAGS=A----^TITLE=CSO:^ITEM_NAME=iCso^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..task_no IS
   'FLAGS=A----^TITLE=Event No:^ITEM_NAME=iTaskNo^DATATYPE=STRING(20)^QUERY=Event No:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..task_info IS
   'FLAGS=A----^TITLE=Removed on Event No ^ITEM_NAME=iTaskInfo^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..remark IS
   'FLAGS=A----^TITLE=Event Remarks:^ITEM_NAME=iRemark^DATATYPE=STRING(2000)^QUERY=Event Remarks:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Part Description^TITLE=Part Description:^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..llp_oper_param1 IS
   'FLAGS=A----^TITLE=Llp Oper Param1^ITEM_NAME=iLlpOperParam1^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..llp_oper_param2 IS
   'FLAGS=A----^TITLE=Llp Oper Param2^ITEM_NAME=iLlpOperParam2^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..llp_oper_value1 IS
   'FLAGS=A----^TITLE=Llp Oper Value1^ITEM_NAME=iLlpOperValue1^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..llp_oper_value2 IS
   'FLAGS=A----^TITLE=Llp Oper Value2^ITEM_NAME=iLlpOperValue2^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..calendar_end_date IS
   'FLAGS=A----^TITLE=Calendar End Date:^ITEM_NAME=iCalendarEndDate^DATATYPE=DATE^';
COMMENT ON COLUMN &VIEW..llp_calendar IS
   'FLAGS=A----^TITLE=Calendar (Months):^ITEM_NAME=iLlpCalendar^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..max_repairs IS
   'FLAGS=A----^TITLE=Max No of Repairs:^ITEM_NAME=iMaxRepairs^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..remaining_repairs IS
   'FLAGS=A----^TITLE=Remaining Repairs:^ITEM_NAME=iRemainingRepairs^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^TITLE=On Order No:^ITEM_NAME=iOrderNo^DATATYPE=STRING(20)^';
COMMENT ON COLUMN &VIEW..order_date IS
   'FLAGS=A----^TITLE=Order Date:^ITEM_NAME=iOrderDate^DATATYPE=DATE^';
COMMENT ON COLUMN &VIEW..quantity IS
   'FLAGS=A----^TITLE=Quantity:^ITEM_NAME=iQuantity^DATATYPE=NUMBER^QUERY=Quantity:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..removed_from_part_no IS
   'FLAGS=A----^TITLE=Vehicle ID/Assy P/N - S/N:^ITEM_NAME=iRemovedFromPartNo^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..removed_from_tsn IS
   'FLAGS=A----^TITLE=TSN:^ITEM_NAME=iRemovedFromTsn^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..removed_from_location IS
   'FLAGS=A----^TITLE=Location:^ITEM_NAME=iRemovedFromLocation^DATATYPE=STRING(10)^';
COMMENT ON COLUMN &VIEW..removed_from_date IS
   'FLAGS=A----^TITLE=Date:^ITEM_NAME=iRemovedFromDate^DATATYPE=DATE^';
COMMENT ON COLUMN &VIEW..removed_from_position IS
   'FLAGS=A----^TITLE=Position:^ITEM_NAME=iRemovedFromPosition^DATATYPE=STRING(10)^';
COMMENT ON COLUMN &VIEW..removed_from_mech_sig IS
   'FLAGS=A----^TITLE=Mech. Signature:^ITEM_NAME=iRemovedFromMechSig^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..expiry_date IS
   'FLAGS=A----^TITLE=Expiry Date:^ITEM_NAME=iExpiryDate^DATATYPE=DATE^';
COMMENT ON COLUMN &VIEW..llp_oper_remain_value1 IS
   'FLAGS=A----^TITLE=Llp Oper Remain Value1^ITEM_NAME=iLlpOperRemainValue1^DATATYPE=STRING(30)^';
COMMENT ON COLUMN &VIEW..llp_oper_remain_value2 IS
   'FLAGS=A----^TITLE=Llp Oper Remain Value2^ITEM_NAME=iLlpOperRemainValue2^DATATYPE=STRING(30)^';


BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Serviceability Tag', '&TABLE', '&PKG..&METHOD', 0 ,'','','','PLSQL1.2','TRUE','Warehouse Management','Goods Label');
   Report_SYS.Refresh_('&VIEW');
END;
/

BEGIN
   -- Report Text
   Report_SYS.Define_Report_Text_( '&VIEW', 'LIFELIMIT'     , 'Life Limit' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'REMAININGLIFE' , 'Remaining Life' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'REMOVEDFROM'   , 'REMOVED FROM' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSTALLEDIN'   , 'INSTALLED IN' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSVEHICALID'  , 'Vehicle ID/Assy P/N - S/N:');
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSTSN'        , 'TSN:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSLOCATION'   , 'Location:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSDATE'       , 'Date:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSPOSITION'   , 'Position:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSMECHSIG'    , 'Mechanic Signature:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSPARTNO'     , 'NHA Part Number:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'INSSERIAL'     , 'NHA Serial Number:' );
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                  NUMBER;

   do_xml_                      BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                       BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                         CLOB;
   package_name_                VARCHAR2(100) := 'SERVICEABILITY_TAG_REP';
   
   status_db_                  VARCHAR2(30);
   status_                     VARCHAR2(30);
   part_no_                    VARCHAR2(25);
   part_desc_                  VARCHAR2(200);
   serial_no_                  VARCHAR2(50);
   manufacturer_no_            VARCHAR2(20);
   manu_part_no_               VARCHAR2(80);
   lot_batch_no_               VARCHAR2(20);
   tsn_info_                   VARCHAR2(50);
   tso_info_                   VARCHAR2(50);
   csn_info_                   VARCHAR2(50);
   cso_info_                   VARCHAR2(50);
   task_no_                    VARCHAR2(30);
   task_info_                  VARCHAR2(100);
   quantity_                   NUMBER;
   task_remarks_               VARCHAR2(2000);
   llp_calendar_               NUMBER;
   calendar_end_date_          DATE;
   max_no_of_repairs_          NUMBER;
   remaining_repairs_          NUMBER;
   llp_param1_                 iso_unit.unit_code%TYPE;
   llp_param_limit1_           NUMBER;
   llp_param_remain1_          NUMBER;
   llp_param2_                 iso_unit.unit_code%TYPE;
   llp_param_limit2_           NUMBER;
   llp_param_remain2_          NUMBER;
   order_no_                   VARCHAR2(30);
   is_vim_serial_              VARCHAR2(5) := 'FALSE';
   
   removed_from_part_no_       VARCHAR2(100);
   removed_from_tsn_info_      VARCHAR2(50);
   removed_from_location_      VARCHAR2(30);
   removed_from_date_          DATE;
   removed_from_position_      VARCHAR2(30);
   removed_from_mech_sig_      VARCHAR2(30);
   line_count_                 NUMBER;
   expiration_date_            DATE;
   part_rec_                   Part_Serial_Catalog_API.Public_Rec;
   contract_                   VARCHAR2(5);
   company_id_                 VARCHAR2(20);
   logotype_                   VARCHAR2(100);
   company_name_               VARCHAR2(100);
   $IF Component_Purch_SYS.INSTALLED $THEN
      po_line_part_rec_        Purchase_Order_Line_Part_API.Public_Rec;
   $END
   order_type_db_              VARCHAR2(30);
   order_type_                 VARCHAR2(200);
   order_ref1_                 VARCHAR2(30);
   order_ref2_                 VARCHAR2(30);
   order_ref3_                 VARCHAR2(30);
   order_ref4_                 VARCHAR2(30); 
   lot_batch_rec_              Lot_Batch_master_API.Public_Rec;

   CURSOR get_expiration_date(part_no_ VARCHAR2, serial_no_ VARCHAR2, lot_batch_no_ VARCHAR2) IS
      SELECT   t.expiration_date
      FROM     inventory_transaction_hist_pub t
      WHERE    t.part_no   = part_no_
      AND      t.serial_no = serial_no_
      AND      t.lot_batch_no = lot_batch_no_
      ORDER BY t.date_time_created DESC;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   
   status_db_     :=  Client_SYS.Get_Item_Value('STATUS'       , parameter_attr_);
   part_no_       :=  Client_SYS.Get_Item_Value('PART_NO'      , parameter_attr_);
   serial_no_     :=  Client_SYS.Get_Item_Value('SERIAL_NO'    , parameter_attr_);
   lot_batch_no_  :=  Client_SYS.Get_Item_Value('LOT_BATCH_NO' , parameter_attr_);
   quantity_      :=  Client_SYS.Get_Item_Value('QUANTITY'     , parameter_attr_);
   contract_      :=  Client_SYS.Get_Item_Value('CONTRACT'     , parameter_attr_);
   -- For Non-tracked parts, poline references are passed if the 'dlgPrintServTag' is open in the context of purchasing/receipt.
   order_type_    :=  Client_SYS.Get_Item_Value('SOURCE_REF_TYPE'  , parameter_attr_);    
   order_type_db_ :=  Client_SYS.Get_Item_Value('SOURCE_REF_TYPE_DB'  , parameter_attr_);
   order_ref1_    :=  Client_SYS.Get_Item_Value('SOURCE_REF1'  , parameter_attr_);
   order_ref2_    :=  Client_SYS.Get_Item_Value('SOURCE_REF2'  , parameter_attr_);
   order_ref3_    :=  Client_SYS.Get_Item_Value('SOURCE_REF3'  , parameter_attr_);
   part_desc_     :=  Part_Catalog_API.Get_Description(part_no_);
   
   ---------------------------------------------
   -- Fetch general information for all statuses
   ---------------------------------------------
   -- Db value should be fetched when report views from the Order reports dialog. 
   IF status_db_ IS NOT NULL AND status_db_ NOT IN ('SCRAPPED', 'SERVICEABLE', 'UNSERVICEABLE') THEN
      status_db_ := Serviceability_Status_API.Encode(status_db_);
   END IF;
   IF (serial_no_ IS NULL) AND (lot_batch_no_ IS NULL) THEN
      -----------------------------------------
      -- Non-tracked parts
      -----------------------------------------
      status_ := Serviceability_Status_API.Decode(status_db_);      
      -- For Non-tracked parts try to get the manufacturer information from poline.
      $IF Component_Purch_SYS.INSTALLED $THEN 
         IF (NVL(order_type_db_, Logistics_Source_Ref_Type_API.Encode(order_type_)) = Logistics_Source_Ref_Type_API.DB_PURCHASE_ORDER) THEN
            po_line_part_rec_ := Purchase_Order_Line_Part_API.Get(order_ref1_, order_ref2_, order_ref3_);
            manufacturer_no_  := po_line_part_rec_.manufacturer_id;
            manu_part_no_     := po_line_part_rec_.manufacturer_part_no;            
         END IF;   
      $END   
      IF (manufacturer_no_ IS NULL) THEN  
         IF (Part_Manufacturer_API.Not_Preferred_Manuf_Exist(part_no_) = 'FALSE') THEN
            manufacturer_no_ := Part_Manufacturer_API.Get_Preferred_Manufacturer(part_no_);
            line_count_ := Part_Manu_Part_No_API.Get_Manu_Part_Count(part_no_, manufacturer_no_);
            --
            IF (line_count_ = 1) THEN
               manu_part_no_ := Part_Manu_Part_No_API.Get_Preferred_Manu_Part(part_no_,manufacturer_no_);
            END IF;
         END IF;
      END IF;   
   ELSIF (serial_no_ IS NOT NULL) THEN
      -----------------------------------------
      -- Serial Parts
      -----------------------------------------
      part_rec_ := Part_Serial_Catalog_API.Get(part_no_, serial_no_);
      --
      IF (status_db_ = 'SCRAPPED') THEN
         status_ := Serviceability_Status_API.Decode(status_db_);
      ELSE
         IF (part_rec_.operational_status = 'SCRAPPED') THEN
            status_ := Serviceability_Status_API.Decode('SCRAPPED');
            status_db_ := 'SCRAPPED';
         ELSE
            IF (part_rec_.operational_condition = 'NOT_APPLICABLE') THEN
               Error_SYS.Record_General(lu_name_, 'NOPRINTNOTAPPL: Serviceability tag cannot be printed for serial no :P1 of part :P2 since the operational condition is Not Applicable.', serial_no_, part_no_);
            ELSIF (part_rec_.operational_condition = 'NON_OPERATIONAL') THEN
               status_db_ := 'UNSERVICEABLE';
            ELSIF (part_rec_.operational_condition = 'OPERATIONAL') THEN
               status_db_ := 'SERVICEABLE';
            END IF;
            status_ := Serviceability_Status_API.Decode(status_db_);
         END IF;
      END IF;
      --
      manufacturer_no_ := part_rec_.manufacturer_no; 
      manu_part_no_ := part_rec_.manu_part_no;
      --
      $IF Component_Vim_SYS.INSTALLED $THEN
         is_vim_serial_ := Vim_Serial_API.Serial_No_Exist(part_no_, serial_no_); 
      $END
      --
      IF (is_vim_serial_ = 'TRUE') THEN
         -----------------------------------------
         -- The serial is controlled in VIM
         -----------------------------------------
         $IF Component_Vim_Sys.INSTALLED $THEN
            Vim_Serial_Util_API.Get_Serv_Tag_Info (
               tsn_info_ => tsn_info_,
               tso_info_ => tso_info_,
               csn_info_ => csn_info_,
               cso_info_ => cso_info_,
               llp_calendar_ => llp_calendar_,
               calendar_end_date_ => calendar_end_date_,
               llp_param1_ => llp_param1_,
               llp_param_limit1_ => llp_param_limit1_,
               llp_param_remain1_ => llp_param_remain1_,
               llp_param2_ => llp_param2_,
               llp_param_limit2_ => llp_param_limit2_,
               llp_param_remain2_ => llp_param_remain2_,
               max_no_of_repairs_ => max_no_of_repairs_,
               remaining_repairs_ => remaining_repairs_,
               part_no_ => part_no_,
               serial_no_ => serial_no_,
               part_rec_ => part_rec_);
         $ELSE
            NULL;
         $END
      ELSE
         -----------------------------------------
         -- The serial is not controlled in VIM
         -----------------------------------------
         IF (manufacturer_no_ IS NULL OR manufacturer_no_ = '') THEN
            IF (Part_Manufacturer_API.Not_Preferred_Manuf_Exist(part_no_) = 'FALSE') THEN
               manufacturer_no_ := Part_Manufacturer_API.Get_Preferred_Manufacturer(part_no_);
            END IF;
         END IF;
         --
         IF (manu_part_no_ IS NULL OR manu_part_no_ = '') THEN
            line_count_ := Part_Manu_Part_No_API.Get_Manu_Part_Count(part_no_, manufacturer_no_);
            IF (line_count_ = 1) THEN
               manu_part_no_ := Part_Manu_Part_No_API.Get_Preferred_Manu_Part(part_no_,manufacturer_no_);
            END IF;
         END IF;
      END IF;
   ELSE
      --------------------
      -- Lot tracked parts 
      --------------------
      -- For Lot tracked parts try to get the manufacturer information from the poline using the order_ref values in lot batch master.
      lot_batch_rec_ := Lot_Batch_Master_API.Get(part_no_, lot_batch_no_);
      IF (lot_batch_rec_.order_type = Order_Type_API.DB_PURCHASE_ORDER) THEN
         $IF Component_Purch_SYS.INSTALLED $THEN
            po_line_part_rec_ := Purchase_Order_Line_Part_API.Get(lot_batch_rec_.order_ref1, lot_batch_rec_.order_ref2, lot_batch_rec_.order_ref3);
            manufacturer_no_  := po_line_part_rec_.manufacturer_id;
            manu_part_no_     := po_line_part_rec_.manufacturer_part_no;
         $ELSE
            Error_SYS.Component_Not_Exist('PURCH');            
         $END
      END IF;
      -- Get the default manufacturer information from part catalog.
      IF (manufacturer_no_ IS NULL) THEN
         IF (Part_Manufacturer_API.Not_Preferred_Manuf_Exist(part_no_) = 'FALSE') THEN
            manufacturer_no_ := Part_Manufacturer_API.Get_Preferred_Manufacturer(part_no_);
            line_count_ := Part_Manu_Part_No_API.Get_Manu_Part_Count(part_no_, manufacturer_no_);
            
            IF (line_count_ = 1) THEN
               manu_part_no_ := Part_Manu_Part_No_API.Get_Preferred_Manu_Part(part_no_,manufacturer_no_);
            END IF;
         END IF;         
      END IF;   
   END IF;

   ----------------------------------------------------------
   -- Fetch additonal information for status "Unserviceable"
   -- as well as information for "Removed From Order No" section
   ----------------------------------------------------------
   $IF Component_Vim_Sys.INSTALLED $THEN
      task_no_ := Client_SYS.Get_Item_Value('TASK_NO', parameter_attr_);
      Serial_Order_Hist_Util_API.Get_Serv_Tag_Info (
         event_info_ => task_info_,
         event_remarks_ => task_remarks_,
         order_no_ => order_no_,
         removed_from_part_no_ => removed_from_part_no_,
         removed_from_tsn_info_ => removed_from_tsn_info_,
         removed_from_location_ => removed_from_location_,
         removed_from_date_ => removed_from_date_,
         removed_from_position_ => removed_from_position_,
         removed_from_mech_sig_ => removed_from_mech_sig_,
         part_no_ => part_no_,
         serial_no_ => serial_no_,
         event_no_ => task_no_,
         serviceability_status_ => status_db_);
      IF (task_remarks_ IS NULL) THEN
         task_remarks_ := Client_SYS.Get_Item_Value('REMARK', parameter_attr_);
      END IF;
   $ELSE
      NULL;
   $END
      
   ----------------------------------------------------------
   -- Fetch expiration_date
   ----------------------------------------------------------
   OPEN get_expiration_date(part_no_,serial_no_, lot_batch_no_);
   FETCH get_expiration_date INTO expiration_date_;
   CLOSE get_expiration_date;

   ----------------------------------------------------------
   -- Truncating long fields
   --  - Add trailing dots '...' if the info is too long.
   ----------------------------------------------------------
   IF (length(task_remarks_) > 120) THEN
      task_remarks_ := substr(task_remarks_, 0, 120) || '...';
   END IF;

   IF (length(part_desc_) > 50) THEN
      part_desc_ := substr(part_desc_, 0, 50) || '...';
   END IF;

   IF (length(manu_part_no_) > 50) THEN
      manu_part_no_ := substr(manu_part_no_, 0, 50) || '...';
   END IF;

   ----------------------------------------------------------
   -- Add information to the report
   ----------------------------------------------------------
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);

      Xml_Record_Writer_SYS.Start_Element(xml_, 'SERVICEABILITY_TAGS');
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SERVICEABILITY_TAG');
     
      Xml_Record_Writer_SYS.Add_Element(xml_,'STATUS'          , UPPER(status_));
      Xml_Record_Writer_SYS.Add_Element(xml_,'STATUS_DB'       , status_db_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TASK_NO'         , task_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TASK_INFO'       , task_info_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TASK_REMARKS'    , task_remarks_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO'         , part_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION'     , part_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'MANUFACTURER_NO' , manufacturer_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'MANU_PART_NO'    , manu_part_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SERIAL_NO'       , NVL(serial_no_,'*'));
      Xml_Record_Writer_SYS.Add_Element(xml_,'LOT_BATCH_NO'    , NVL(lot_batch_no_,'*'));
      Xml_Record_Writer_SYS.Add_Element(xml_,'QUANTITY'        , quantity_);

      Xml_Record_Writer_SYS.Add_Element(xml_,'TSN', tsn_info_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TSO', tso_info_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CSN', csn_info_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CSO', cso_info_);

      Xml_Record_Writer_SYS.Add_Element(xml_,'LLP_CALENDAR'       , llp_calendar_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CALENDAR_END_DATE'  , calendar_end_date_);

      Xml_Record_Writer_SYS.Add_Element(xml_,'LLP_OPER_PARAM_1', llp_param1_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'LLP_OPER_PARAM_2', llp_param2_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'LLP_OPER_VALUE_1', llp_param_limit1_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'LLP_OPER_VALUE_2', llp_param_limit2_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'LLP_OPER_REMAIN_VALUE_1', llp_param_remain1_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'LLP_OPER_REMAIN_VALUE_2', llp_param_remain2_);

      Xml_Record_Writer_SYS.Add_Element(xml_,'MAX_REPAIRS'        , max_no_of_repairs_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REMAINING_REPAIRS'  , remaining_repairs_);

      Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO'              , order_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REMOVED_FROM_PART_NO'  , removed_from_part_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REMOVED_FROM_TSN'      , removed_from_tsn_info_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REMOVED_FROM_LOCATION' , removed_from_location_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'REMOVED_FROM_DATE'     , removed_from_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REMOVED_FROM_POSITION' , removed_from_position_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REMOVED_FROM_MECH_SIG' , removed_from_mech_sig_);

      Xml_Record_Writer_SYS.Add_Element(xml_,'EXPIRY_DATE', expiration_date_);

      Xml_Record_Writer_SYS.End_Element(xml_, 'SERVICEABILITY_TAG');
      Xml_Record_Writer_SYS.End_Element(xml_, 'SERVICEABILITY_TAGS');

      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
   IF (do_rs_) THEN
      INSERT INTO &TABLE (
         RESULT_KEY, PARENT_ROW_NO, ROW_NO, &STATUS, &STATUS_DB, &TASK_NO, &TASK_INFO, &TASK_REMARKS,
         &PART_NO, &DESCRIPTION, &MANUFACTURER_NO, &MANU_PART_NO, &SERIAL_NO, &LOT_BATCH_NO, &QUANTITY,
         &TSN, &TSO, &CSN, &CSO, &LLP_CALENDAR, &CALENDAR_END_DATE, &LLP_OPER_PARAM1, &LLP_OPER_PARAM2,
         &LLP_OPER_VALUE1, &LLP_OPER_VALUE2, &LLP_OPER_REMAIN_VALUE1, &LLP_OPER_REMAIN_VALUE2, &MAX_REPAIRS,
         &REMAINING_REPAIRS, &ORDER_NO, &REMOVED_FROM_PART_NO, &REMOVED_FROM_TSN, &REMOVED_FROM_LOCATION,
         &REMOVED_FROM_DATE, &REMOVED_FROM_POSITION, &REMOVED_FROM_MECH_SIG, &EXPIRY_DATE)
                            
      VALUES (result_key_, 1, 1, UPPER(status_), status_db_, task_no_, task_info_, task_remarks_,
              part_no_, part_desc_, manufacturer_no_, manu_part_no_, NVL(serial_no_,'*'), NVL(lot_batch_no_,'*'), quantity_,
              tsn_info_, tso_info_, csn_info_, cso_info_, llp_calendar_, calendar_end_date_, llp_param1_, llp_param2_,
              llp_param_limit1_, llp_param_limit2_, llp_param_remain1_, llp_param_remain2_, max_no_of_repairs_,
              remaining_repairs_, order_no_, removed_from_part_no_, removed_from_tsn_info_, removed_from_location_,
              removed_from_date_, removed_from_position_, removed_from_mech_sig_, expiration_date_);
              
   END IF;   
   IF (contract_ IS NOT NULL) THEN      
      company_id_ := Site_API.Get_Company(contract_);
      logotype_ := Company_API.Get_Logotype(company_id_);    
      company_name_ := Site_API.Get_Company_Address_Name(contract_);
      
      IF (logotype_ IS NOT NULL ) THEN         
         Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
         Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
      END IF;
   END IF;
END &METHOD;

END &PKG;
/
SHOW ERROR

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE RAWVIEW
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE STATUS
UNDEFINE PART_NO
UNDEFINE SERIAL_NO
UNDEFINE MANUFACTURER_NO
UNDEFINE MANU_PART_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE LIFE_LIMITED
UNDEFINE REMAINING_LIFE
UNDEFINE TASK_NO
UNDEFINE TASK_INFO
UNDEFINE TASK_REMARKS
UNDEFINE DESCRIPTION
UNDEFINE LLP_OPER_PARAM1
UNDEFINE LLP_OPER_PARAM2
UNDEFINE LLP_OPER_VALUE1
UNDEFINE LLP_OPER_VALUE2
UNDEFINE LLP_CALENDAR
UNDEFINE ORDER_NO
UNDEFINE REMOVED_FROM_PART_NO
UNDEFINE REMOVED_FROM_TSN
UNDEFINE REMOVED_FROM_LOCATION
UNDEFINE REMOVED_FROM_POSITION
UNDEFINE REMOVED_FROM_MECH_SIG
UNDEFINE STATUS_DB
UNDEFINE LLP_OPER_REMAIN_VALUE1
UNDEFINE LLP_OPER_REMAIN_VALUE2
UNDEFINE TSN
UNDEFINE TSO
UNDEFINE CSN
UNDEFINE CSO
UNDEFINE QUANTITY
UNDEFINE MAX_REPAIRS
UNDEFINE REMAINING_REPAIRS
UNDEFINE CALENDAR_END_DATE
UNDEFINE ORDER_DATE
UNDEFINE REMOVED_FROM_DATE
UNDEFINE EXPIRY_DATE
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------
