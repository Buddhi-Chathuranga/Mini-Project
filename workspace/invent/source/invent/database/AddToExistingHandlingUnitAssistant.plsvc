-----------------------------------------------------------------------------
--
--  Fragment:     AddToExistingHandlingUnitAssistant
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ---------  ------  ---------------------------------------------------------
--  2020-10-08  RasDlk  SC2020R1-10347, Removed the method CRUD_Default___ and set the default value for quantity in the projection.
--  2019-05-13  ChFolk  SCUXXW4-6101, Create new method Validate_Pkg_Instruction___.
--  2019-01-24  ChFolk  SCUXXW4-6101, Created
--------------------------------------------------------------------------------

layer Core;

PROCEDURE Add_To_Existing_Handling_Unit___ (
   parent_handling_unit_id_  IN  NUMBER,
   shipment_id_              IN  NUMBER,
   source_ref_type_db_       IN  VARCHAR2,
   source_ref1_              IN  VARCHAR2,
   source_ref2_              IN  VARCHAR2,
   source_ref3_              IN  VARCHAR2,
   add_handling_unit_option_ IN  VARCHAR2,
   parent_objkey_            IN  VARCHAR2,
   info$_                    OUT VARCHAR2 ) 
IS
   parent_key_                Add_To_Existing_Handling_Unit_Virtual_Key;
   hu_type_child_key_         Add_Handling_Unit_Types_Virtual_Key;
   hu_type_child_rec_         Add_Handling_Unit_Types_Virtual_Rec;
   new_hu_type_rec_           Add_Handling_Unit_Types_Virtual_Rec;
   pkg_instruct_child_key_    Add_Packing_Instructions_Virtual_Key;
   pkg_instruct_child_rec_    Add_Packing_Instructions_Virtual_Rec;
   handling_unit_id_          NUMBER;
   add_handling_unit_         BOOLEAN := FALSE;
BEGIN
   -- Security
   $IF Component_Shpmnt_SYS.INSTALLED $THEN
   IF (shipment_id_ IS NOT NULL) THEN
      Shipment_Initial_Check___(shipment_id_);
   END IF;     
   $END   
   parent_key_.objkey := parent_objkey_;
   IF (add_handling_unit_option_ = 'UsingHuType') THEN 
      FOR line_rec_ IN Get_Add_Handling_Unit_Types_Array___(parent_key_) LOOP
         hu_type_child_key_.objkey := line_rec_.objkey;
         hu_type_child_rec_ := Get_Record___(hu_type_child_key_);
         new_hu_type_rec_ := hu_type_child_rec_;
         FOR i_ IN 1..hu_type_child_rec_.no_of_units LOOP           
            Handling_Unit_API.New(handling_unit_id_          => new_hu_type_rec_.handling_unit_id, 
                                  handling_unit_type_id_     => hu_type_child_rec_.handling_unit_type_id, 
                                  parent_handling_unit_id_   => parent_handling_unit_id_, 
                                  shipment_id_               => shipment_id_,
                                  source_ref_type_db_        => source_ref_type_db_,
                                  source_ref1_               => source_ref1_,
                                  source_ref2_               => source_ref2_,
                                  source_ref3_               => source_ref3_);
            add_handling_unit_ := TRUE;                      
         END LOOP;
         IF (add_handling_unit_) THEN
            CRUD_Update___(hu_type_child_rec_, new_hu_type_rec_);
         END IF;   
      END LOOP;
      IF (add_handling_unit_) THEN
         info$_ := Handling_Unit_API.Get_Max_Capacity_Exceeded_Info(parent_handling_unit_id_);
      END IF;   
   ELSIF (add_handling_unit_option_ = 'UsingPackingInstruction') THEN
      FOR line_rec_ IN Get_Add_Packing_Instructions_Array___(parent_key_) LOOP
         pkg_instruct_child_key_.objkey := line_rec_.objkey;
         pkg_instruct_child_rec_ := Get_Record___(pkg_instruct_child_key_);    
         IF (parent_handling_unit_id_ IS NULL AND shipment_id_ IS NOT NULL) THEN
            $IF Component_Shpmnt_SYS.INSTALLED $THEN
               Shipment_API.Add_Empty_Handl_Unit_Structure(shipment_id_, pkg_instruct_child_rec_.packing_instruction_id , pkg_instruct_child_rec_.quantity);
            $ELSE
               NULL;
            $END   
         ELSE
            FOR i_ IN 1..pkg_instruct_child_rec_.quantity LOOP
               Packing_Instruction_API.Create_Handling_Unit_Structure(handling_unit_id_        => handling_unit_id_,
                                                                      packing_instruction_id_  => pkg_instruct_child_rec_.packing_instruction_id,
                                                                      parent_handling_unit_id_ => parent_handling_unit_id_);
            END LOOP;
         END IF;   
      END LOOP;
   END IF;   
END Add_To_Existing_Handling_Unit___;


PROCEDURE Clear_Handling_Unit_Type_Details___ (
   parent_objkey_ IN VARCHAR2 ) 
IS
   parent_key_         Add_To_Existing_Handling_Unit_Virtual_Key;
   child_key_          Add_Handling_Unit_Types_Virtual_Key;
   child_rec_          Add_Handling_Unit_Types_Virtual_Rec;
   delete_child_rec_   Add_Handling_Unit_Types_Virtual_Rec;
BEGIN
   parent_key_.objkey := parent_objkey_;
   FOR line_rec_ IN Get_Add_Handling_Unit_Types_Array___(parent_key_) LOOP
      child_key_.objkey := line_rec_.objkey;
      child_rec_ := Get_Record___(child_key_);
      delete_child_rec_ := child_rec_;     
      CRUD_Delete___(delete_child_rec_);
   END LOOP;
END Clear_Handling_Unit_Type_Details___;


PROCEDURE Clear_Packing_Instruction_Details___ (
   parent_objkey_ IN VARCHAR2 ) 
IS
   parent_key_         Add_To_Existing_Handling_Unit_Virtual_Key;
   child_key_          Add_Packing_Instructions_Virtual_Key;
   child_rec_          Add_Packing_Instructions_Virtual_Rec;
   delete_child_rec_   Add_Packing_Instructions_Virtual_Rec;
BEGIN 
   parent_key_.objkey := parent_objkey_;
   FOR line_rec_ IN Get_Add_Packing_Instructions_Array___(parent_key_) LOOP
      child_key_.objkey := line_rec_.objkey;
      child_rec_ := Get_Record___(child_key_);
      delete_child_rec_ := child_rec_;     
      CRUD_Delete___(delete_child_rec_);
   END LOOP;
END Clear_Packing_Instruction_Details___;

PROCEDURE Validate_Pkg_Instruction___ (
   packing_instruction_id_  IN VARCHAR2 )
IS
BEGIN
   Packing_Instruction_API.Exist(packing_instruction_id_);
END Validate_Pkg_Instruction___;