-----------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: File for upgrading Inventory Versions 14.1.0-GET, 15.0.0-GET to IFS CLOUD
--
--  File   : GET_TO_CLOUD.UPG
--
--  IFS/Design Template Version 2.3
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  220210  JaThlk  SC21R2-7776, Modified Timestamp_39 to avoid installation errors by changing the query to dynamic.
--  210929  WaSalk  SC21R2-2390, Added section to remove records if stock_reserv_allowed and invent_trans_allowed equals to false in user_warehouse_access_tab.
--  210910  Niralk  SC21R2-2676, Added Secton 2.3 and 3.3.
--  210730  SBalLK  SC21R2-2078, Resolved upgrade issue from GET APP10 UPD8 to Cloud.
--  210629  TKAVLK  FI21R2-2112, Update MOVE_DEST_CONTRACT and MOVE_DEST_LOCATION_NO columns in INVENTORY_TRANSACTION_HIST_TAB.
--  210622  LEPESE  SC21R2-794 Moved setting of localization parameter into the core solution.
--  210528  WaSalk   SC21R2-1214, Renamed USER_INVENTORY_TAB and columns USERID ,WAREHOUSE, CTR_RESERV_DETAIL, CTR_TRANS_DETAIL and updated
--  210528           the values of CTR_RESERV_DETAIL, CTR_TRANS_DETAIL.
--  210512  WaSalk   SC21R2-1141, Added GET UPD 6 to UPD11 support CDB changes to GET_TO_CLOUD.upg
--  210510  WaSalk   SC21R2-1137, Modified name, internal comments and sections relevant to GET_TO_CLOUD.UPG.
--  210217  WaSalk   SC2020R1-12569, Changed Database_SYS.Create_Or_Replace_Table to Database_SYS.Create_Table in section 1 and 2.
--  201121   WaSalk  SC2020R1-11431, Changed Component version as IFS Cloud 21.1.0 and reflected upg file name accordingly.
--  201002   Asawlk  SC2021R1-318, Modified the source ref information of order type Work Order to Work Task references which 
--  201002           existed in APP10 verson in transport_task_line_tab. The data created before APP10 version will be handled 
--  201002           in a post SQL file in WO module.
--  200826   SBalLK  GESPRING20-537, Changed CPA_CODE, PAYMENT_WAY, PREVIOUS_INTRASTAT_PERIOD, REF_INVOICE_SERIE, REF_INVOICE_NUMBER,
--  200826           REF_INVOICE_DATE columns to SERVICE_STATISTICAL_CODE, SERVICE_PAYMENT_WAY, PREV_INTRASTAT_INVOIC_DATE, REFERENCE_INVOICE_SERIE,
--  200826           REFERENCE_INVOICE_NUMBER , REFERENCE_INVOICE_DATE in INTRASTAT_LINE_TAB. Changed INTRASTAT_COUNTRY_TRANS_TAB table to align with
--  200826           core implementation. Removed unwanted enum packages.
--  200825  MalLlk  GESPRING20-5423, Upgrade transaction_code column value in inventory_transaction_hist_tab when upgrading  
--  200825          from 14.1.0-GET or 15.0.0-GET versions. Free of charge implentataion is moved to core and will use standard 
--  200825          transaction codes 'OESHIP' and 'OERETURN'.
--  200525  WaSalk  Renamed few columns in TRANSPORT_DELIV_NOTE_LINE_TAB and TRANSPORT_DELIVERY_NOTE_TAB.
--  191230  WaSalk  Added AutoUpdateDateApplied Enumeration values to COMPANY_INVENT_INFO_TAB
--  191028  Kusplk  Cretaed
-----------------------------------------------------------------------------

SET SERVEROUTPUT ON

DEFINE MODULE = 'INVENT'
DEFINE GET9VERSION  = 14.1.0-GET
DEFINE GET10VERSION  = 15.0.0-GET

------------------------------------------------------------------------------------------

-- Instructions for upg files:

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-" line and a empty line.
-- The section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- The "start tag" (in this case "Example_Tab"), should be placed in "List of upgrade sections".
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line.

-- If the Pl block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
-- If the Pl block not has DML instructions, there should not be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any column in an upgrade file !

-- Don't forget performance when updating large tabled !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL update
-- If possible, try to put several updates together in one statement.

-----------------------------------------------------------------------------------------

-- LIST OF  SECTIONS 

-- SECTION 1 - Handling Upgrade from GET9 to GET10 RTM
--    List of upgrade sections - site_to_site_leadtime_tab
--                               inventory_part_tab
--                               customs_declaration_no_wdr_tab
--                               invent_trans_report_type_tab
--                               material_requisition_tab
--                               transport_delivery_note_tab
--                               jpk_int_tran_order_tab
-- SECTION 2 - Handling Upgrade from GET10 RTM to GET10 UPD6  
--    2.1 List of upgrade sections From GET10 RTM to GET10 UPD6
--                               inventory_transaction_hist_tab
--                               company_invent_info_tab
--                               intrastat_line_tab
--                               transport_delivery_note_tab
--                               pt_product_category_tab
--                               inventory_part_tab
--    2.2 List of upgrade sections From GET10 RTM to GET10 UPD11
--                               transport_delivery_note_tab
--    2.3 List of upgrade sections From GET10 UPD11 to GET10 UPD13
--  
-- SECTION 3 - Spring related GET DB Changes
--    3.1 List of upgrade sections 21R1
--    3.2 List of upgrade sections 21R2
--    3.3 List of upgrade sections 22R1

-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION1 : Handling Upgrade from GET9 to GET10 RTM Start Here -------------
-----------------------------------------------------------------------------------------
-- Content in GET10 RTM Cdb file is included in this section
-----------------------------------------------------------------------------------------


-- ***** site_to_site_leadtime_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_1');
PROMPT Adding column torg13_required to site_to_site_leadtime_tab
DECLARE
	columns_         Database_SYS.ColumnTabType;
	table_name_ VARCHAR2(30) := 'SITE_TO_SITE_LEADTIME_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Set_Table_Column(columns_, 'TORG13_REQUIRED', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table (table_name_, columns_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_2');
PROMPT Updating columns with default values
DECLARE
   stmt_       VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      IF(Database_SYS.Column_Exist('SITE_TO_SITE_LEADTIME_TAB', 'TORG13_REQUIRED')) THEN
         stmt_ := 'UPDATE site_to_site_leadtime_tab
                    SET   torg13_required = ''FALSE''
                 WHERE torg13_required IS NULL';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** site_to_site_leadtime_tab End *****

-----------------------------------------------------------------------------------------

-- ***** inventory_part_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_3');
PROMPT Adding column customs_decl_no_level to inventory_part_tab
DECLARE
	table_name_ VARCHAR2(30) := 'INVENTORY_PART_TAB';
	column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      column_ := Database_SYS.Set_Column_Values('CUSTOMS_DECL_NO_LEVEL', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_4');
PROMPT Updating data in column customs_decl_no_level of inventory_part_tab
DECLARE
   stmt_       VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      IF(Database_SYS.Column_Exist('INVENTORY_PART_TAB', 'CUSTOMS_DECL_NO_LEVEL')) THEN
         stmt_ := 'UPDATE inventory_part_tab
                     SET customs_decl_no_level = ''NOT_USED''
                  WHERE customs_decl_no_level IS NULL';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/
-- ***** inventory_part_tab End *****

-----------------------------------------------------------------------------------------

-- ***** customs_declaration_no_wdr_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_5');
PROMPT Creating table customs_declaration_no_wdr_tab
DECLARE
	table_name_ VARCHAR2(30) := 'CUSTOMS_DECLARATION_NO_WDR_TAB';
	columns_    Database_SYS.ColumnTabType;
	column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT',               'VARCHAR2(5)',  'N');
      Database_SYS.Set_Table_Column(columns_, 'PART_NO',                'VARCHAR2(25)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',        'VARCHAR2(15)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'CUSTOMS_DECLARATION_NO', 'VARCHAR2(30)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'COUNTRY_OF_ORIGIN',      'VARCHAR2(2)',  'Y');
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',             'DATE',         'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                 'VARCHAR2(50)', 'N', 'sys_guid()');
      Database_SYS.Create_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_6');
PROMPT Creating PK Constraint for table customs_declaration_no_wdr_tab
DECLARE
	index_name_ VARCHAR2(30) := 'CUSTOMS_DECLARATION_NO_WDR_PK';
	table_name_ VARCHAR2(30) := 'CUSTOMS_DECLARATION_NO_WDR_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
      Database_SYS.Set_Table_Column(columns_, 'PART_NO');
      Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_7');
PROMPT Creating RK Constraint for table customs_declaration_no_wdr_tab
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMS_DECLARATION_NO_WDR_RK';
   table_name_ VARCHAR2(30) := 'CUSTOMS_DECLARATION_NO_WDR_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** customs_declaration_no_wdr_tab End *****

-----------------------------------------------------------------------------------------

-- ***** invent_trans_report_type_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_8');
PROMPT Adding column default_ru_source_doc to invent_trans_report_type_tab
DECLARE
	table_name_ VARCHAR2(30) := 'INVENT_TRANS_REPORT_TYPE_TAB';
	column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      column_ := Database_SYS.Set_Column_Values('DEFAULT_RU_SOURCE_DOC', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_9');
PROMPT Updating data in column DEFAULT_RU_SOURCE_DOC of INVENT_TRANS_REPORT_TYPE_TAB
DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      IF(Database_SYS.Column_Exist('INVENT_TRANS_REPORT_TYPE_TAB', 'DEFAULT_RU_SOURCE_DOC')) THEN
         stmt_ := 'UPDATE invent_trans_report_type_tab
                     SET default_ru_source_doc = ''FALSE''
                  WHERE default_ru_source_doc IS NULL';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_10');
PROMPT Adding new column layout_id to invent_trans_report_type_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INVENT_TRANS_REPORT_TYPE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'LAYOUT_ID', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** invent_trans_report_type_tab End *****

-----------------------------------------------------------------------------------------

-- ***** material_requisition_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_11');
PROMPT Adding column requirement_order_id to material_requisition_tab
DECLARE
   table_name_  VARCHAR2(30) := 'MATERIAL_REQUISITION_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      column_ := Database_SYS.Set_Column_Values('REQUIREMENT_ORDER_ID', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** material_requisition_tab End *****

-----------------------------------------------------------------------------------------

-- ***** transport_delivery_note_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_12');
PROMPT Adding column label_text to transport_delivery_note_tab
DECLARE
   table_name_  VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('LABEL_TEXT', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_ , 'A', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** transport_delivery_note_tab End *****

-----------------------------------------------------------------------------------------

-- ***** jpk_int_tran_order_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_13');
PROMPT Creating Table jpk_int_tran_order_tab.
DECLARE
	table_name_ VARCHAR2(30) := 'JPK_INT_TRAN_ORDER_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'INT_TRANSFER_ORDER_NO', 'VARCHAR2(30)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'FROM_CONTRACT', 'VARCHAR2(5)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'FROM_LOCATION_NO', 'VARCHAR2(35)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'TO_CONTRACT', 'VARCHAR2(5)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'TO_LOCATION_NO', 'VARCHAR2(35)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
      Database_SYS.Create_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_14');
PROMPT Adding PK constraint for jpk_int_tran_order_tab
DECLARE
   index_name_ VARCHAR2(30) := 'JPK_INT_TRAN_ORDER_PK';
   table_name_ VARCHAR2(30) := 'JPK_INT_TRAN_ORDER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INT_TRANSFER_ORDER_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_15');
PROMPT Adding FK constraint for jpk_int_tran_order_tab
DECLARE
	index_name_ VARCHAR2(30) := 'JPK_INT_TRAN_ORDER_RK';
	table_name_ VARCHAR2(30) := 'JPK_INT_TRAN_ORDER_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** jpk_int_tran_order_tab End *****
------------------------------------------------------------------------------------------
                                    
-----------------------------------------------------------------------------------------
------------- SECTION1 : Handling Upgrade from GET9 to GET10 RTM Ends Here --------------
-----------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------
------------- SECTION2.1 : Handling Upgrade from GET10 RTM to GET10 UPD6 Starts Here ----
------------- NOTE       : Support cdb files from GET10 RTM until UPD6               ----
-----------------------------------------------------------------------------------------

-- ***** INVENTORY_TRANSACTION_HIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_16');
PROMPT Increasing length of inventory_transaction_hist_tab.alt_del_note_no to 50 chars.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('ALT_DEL_NOTE_NO', 'VARCHAR2(50)');
      Database_SYS.Alter_Table_Column('INVENTORY_TRANSACTION_HIST_TAB', 'M', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** INVENTORY_TRANSACTION_HIST_TAB End *****

---------------------------------------------------------------------------------------------
-- ***** company_invent_info_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_17');
PROMPT Modify length of a column in company_invent_info_tab
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_INVENT_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      -- gelr:service_statistics_no, begin
      column_ := Database_SYS.Set_Column_Values('CPA_CODE', 'VARCHAR2(15)');   
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      -- gelr:service_statistics_no, end
      -- gelr:italy_intrastat, start
      Database_SYS.Rename_Column( table_name_, 'NEXT_IT_INTRASTAT_FILE_NO', 'NEXT_INTRASTAT_FILE_NO');
      -- gelr:italy_intrastat, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- ***** company_invent_info_tab End *****

---------------------------------------------------------------------------------------------

-- ***** intrastat_line_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_18');
PROMPT Modify length of a column in intrastat_line_tab
DECLARE
   table_name_ VARCHAR2(30) := 'INTRASTAT_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      -- gelr:service_statistics_no, begin
      column_ := Database_SYS.Set_Column_Values('CPA_CODE', 'VARCHAR2(15)');   
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      -- gelr:service_statistics_no, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- gelr:italy_intrastat, start
DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      stmt_ := 'UPDATE intrastat_line_tab
                SET adjust_to_prev_intrastat = DECODE(adjust_to_prev_intrastat, NULL, ''N'', adjust_to_prev_intrastat),
                    advance_transaction      = DECODE(advance_transaction,      NULL, ''N'', advance_transaction)
                WHERE adjust_to_prev_intrastat IS NULL
                OR    advance_transaction IS NULL';
      
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

DECLARE
   table_name_ VARCHAR2(30) := 'INTRASTAT_LINE_TAB';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Column_Exist(table_name_, 'CPA_CODE')) THEN
         Database_SYS.Rename_Column(table_name_, 'SERVICE_STATISTICAL_CODE', 'CPA_CODE', show_info_ => TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'PAYMENT_WAY')) THEN
         Database_SYS.Rename_Column(table_name_, 'SERVICE_PAYMENT_WAY', 'PAYMENT_WAY', show_info_ => TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'OPPOSITE_COUNTRY_CURR_AMOUNT')) THEN
         Database_SYS.Rename_Column(table_name_, 'OPPOSITE_COUNTRY_CURR_AMT', 'OPPOSITE_COUNTRY_CURR_AMOUNT', show_info_ => TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'PREVIOUS_INTRASTAT_PERIOD')) THEN
         Database_SYS.Rename_Column(table_name_, 'PREV_INTRASTAT_INVOIC_DATE', 'PREVIOUS_INTRASTAT_PERIOD', show_info_ => TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'REF_INVOICE_SERIE')) THEN
         Database_SYS.Rename_Column(table_name_, 'REFERENCE_INVOICE_SERIE', 'REF_INVOICE_SERIE', show_info_ => TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'REF_INVOICE_NUMBER')) THEN
         Database_SYS.Rename_Column(table_name_, 'REFERENCE_INVOICE_NUMBER', 'REF_INVOICE_NUMBER', show_info_ => TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'REF_INVOICE_DATE')) THEN
         Database_SYS.Rename_Column(table_name_, 'REFERENCE_INVOICE_DATE', 'REF_INVOICE_DATE', show_info_ => TRUE);
      END IF;

      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'ADJUST_TO_PREV_INTRASTAT', 'VARCHAR2(5)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ADVANCE_TRANSACTION',      'VARCHAR2(5)', 'N');
      Database_SYS.Alter_Table(table_name_, columns_, show_info_ => TRUE);
   END IF;
END;
/

DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      stmt_ := 'UPDATE intrastat_line_tab
                SET adjust_to_prev_intrastat = DECODE(adjust_to_prev_intrastat, ''Y'', ''TRUE'', ''FALSE''),
                    advance_transaction      = DECODE(advance_transaction,      ''Y'', ''TRUE'', ''FALSE'')
                WHERE adjust_to_prev_intrastat IN (''Y'', ''N'')
                OR    advance_transaction IN (''Y'', ''N'')';
      
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/
-- gelr:italy_intrastat, end
-- ***** intrastat_line_tab End *****

---------------------------------------------------------------------------------------------

-- ***** transport_delivery_note_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_19');
PROMPT Adding columns movement_type, transport_doc_number and at_code to table transport_delivery_note_tab
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      column_ := Database_SYS.Set_Column_Values('MOVEMENT_TYPE', 'VARCHAR2(30)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      column_ := Database_SYS.Set_Column_Values('TRANSPORT_DOC_NUMBER', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  
      column_ := Database_SYS.Set_Column_Values('AT_CODE', 'VARCHAR2(200)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** transport_delivery_note_tab End *****

---------------------------------------------------------------------------------------------

-- ***** pt_product_category_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_20');
PROMPT Creating table pt_product_category_tab
DECLARE
   table_name_ VARCHAR2(30) := 'PT_PRODUCT_CATEGORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
	   Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'PRODUCT_CATEGORY', 'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
      Database_SYS.Create_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);    
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_21');
PROMPT Creating Primary Key constraint on pt_product_category_tab 
DECLARE
   table_name_ VARCHAR2(30) := 'PT_PRODUCT_CATEGORY_TAB';
   columns_    Database_SYS.ColumnTabType;
   index_name_ VARCHAR2(30):= 'PT_PRODUCT_CATEGORY_PK';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'COMPANY');
      Database_SYS.Set_Table_Column(columns_, 'PRODUCT_CATEGORY');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_22');
PROMPT Creating Row Key constraint on pt_product_category_tab 
DECLARE
   index_name_ VARCHAR2(30) := 'PT_PRODUCT_CATEGORY_RK';
   table_name_ VARCHAR2(30) := 'PT_PRODUCT_CATEGORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** pt_product_category_tab End *****

---------------------------------------------------------------------------------------------

-- ***** inventory_part_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_23');
PROMPT Adding column product_category to table inventory_part_tab
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      column_ := Database_SYS.Set_Column_Values('PRODUCT_CATEGORY', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** inventory_part_tab End *****

-- gelr:italy_intrastat, start

DECLARE
   table_name_ VARCHAR2(30) := 'INTRASTAT_COUNTRY_TRANS_TAB';
   columns_ Database_SYS. ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Table_Exist(table_name_)) THEN
         IF(Database_SYS.Column_Exist(table_name_, 'NOTC_CODE' )) THEN
            Database_SYS.Rename_Column(table_name_, 'NOTC', 'NOTC_CODE', show_info_ => TRUE);
         END IF;
         IF(Database_SYS.Column_Exist(table_name_, 'AMOUNTS_SIGN' )) THEN
            Database_SYS.Rename_Column(table_name_, 'INTRASTAT_AMOUNT_SIGN', 'AMOUNTS_SIGN', show_info_ => TRUE);
         END IF;

         Database_SYS.Reset_Column_Table(columns_);
         Database_SYS.Set_Table_Column(columns_, 'INCLUDED', 'VARCHAR2(5)', 'N' );
         Database_SYS.Set_Table_Column(columns_, 'INTRASTAT_DIRECTION', 'VARCHAR2(20)', 'Y');
         database_SYS.Alter_Table(table_name_, columns_, show_info_ => TRUE);

         Database_SYS.Rename_Table(table_name_, 'MPCCOM_TRANS_CODE_COUNTRY_TAB', show_info_ => TRUE);
      END IF;
   END IF;
END;
/

DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      stmt_ := 'UPDATE MPCCOM_TRANS_CODE_COUNTRY_TAB
                SET   intrastat_direction = UPPER(intrastat_direction)
                WHERE intrastat_direction IN (''Export'', ''Import'')';
   
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/
-- gelr:italy_intrastat, end


-- ***** removing obsolete packages AND views Start *****

-----------------------------------------------------------------------------------------
------------- SECTION2.1 : Handling Upgrade from GET10 RTM to GET10 UPD6 Ends Here ------
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION2.2 : Handling Upgrade from GET10 RTM to GET10 UPD11 Starts Here ---
------------- NOTE       : Support cdb files from GET10 RTM until UPD11 -------
-----------------------------------------------------------------------------------------

-- ***** transport_delivery_note_tab Start *****
--  
-- gelr:tr_edispatch_note
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_24');
PROMPT Adding columns TRANSPORT_DOC_NUMBER, DRIVER, VEH_LICENSE_PLATE1, VEH_LICENSE_PLATE2 and, VEH_LICENSE_PLATE3 to TRANSPORT_DELIVERY_NOTE_TAB      
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_TAB';
	columns_                       Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_DOC_NUMBER', 'VARCHAR2(50)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'DRIVER', 'VARCHAR2(20)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'VEH_LICENSE_PLATE1', 'VARCHAR2(8)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'VEH_LICENSE_PLATE2', 'VARCHAR2(8)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'VEH_LICENSE_PLATE3', 'VARCHAR2(8)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'E_DISPATCH_NOTE_STATE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'UUID', 'VARCHAR2(40)', 'Y');
      Database_SYS.Alter_Table('TRANSPORT_DELIVERY_NOTE_TAB', columns_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;   
END;
/
-- gelr:tr_edispatch_note

-- ***** transport_delivery_note_tab End *****

-----------------------------------------------------------------------------------------
------------- SECTION2.2 : Handling Upgrade from GET10 RTM to GET10 UPD11 Ends Here -----
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION2.3 : Handling Upgrade from GET10 UPD11 to GET10 UPD13 Starts Here ----
------------- NOTE     : Support cdb files from GET10 UPD11 until UPD13                                                         -------
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
------------- SECTION2.3 : Handling Upgrade from GET10 UPD11 to GET10 UPD13 Ends Here ------
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION3.1 : Handling Upgrade from 21R1 related GET DB Changes Starts Here-
-----------------------------------------------------------------------------------------

-- ***** Company_Invent_Info_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_25');
PROMPT renaming column INV_TRANS_DATE_APPLIED of COMPANY_INVENT_INFO_TAB to AUTO_UPDATE_DATE_APPLIED
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_INVENT_INFO_TAB';
   column_     VARCHAR2(30) := 'INV_TRANS_DATE_APPLIED';  
BEGIN
   IF ( Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Column_Exist(table_name_,column_)) THEN
         IF NOT(Database_SYS.Column_Exist(table_name_,'AUTO_UPDATE_DATE_APPLIED')) THEN
            Database_SYS.Rename_Column(table_name_, 'AUTO_UPDATE_DATE_APPLIED', column_, TRUE);
         END IF;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_26');
PROMPT value modification OF AutoUpdateDateApplied Enumeration   
DECLARE 
   stmt_ VARCHAR2(2000);
BEGIN 
   IF ( Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Column_Exist( 'COMPANY_INVENT_INFO_TAB', 'AUTO_UPDATE_DATE_APPLIED' )) THEN
         stmt_ := 'UPDATE COMPANY_INVENT_INFO_TAB t
                     SET t.auto_update_date_applied  = CASE t.auto_update_date_applied
                                             WHEN ''STANDARD'' THEN ''NO_UPDATE''
                                             WHEN ''DELIVERY'' THEN ''PRINT_DATE''
                                             WHEN ''TRANSPORT'' THEN ''TRANSPORT_DATE''
                                             ELSE t.Auto_Update_Date_Applied
                  END';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- ***** Company_Invent_Info_tab End *****

-- ***** TRANSPORT_DELIVERY_NOTE_TAB Begin *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_27');
PROMPT Rename columns DELNOTE_NO, ALT_DELNOTE_NO, WEIGHT, NET_WEIGHT in TRANSPORT_DELIVERY_NOTE_TAB
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN 
      new_column_name_ := 'DELIVERY_NOTE_ID';
      old_column_name_ := 'DELNOTE_NO';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'ALT_DELIVERY_NOTE_ID';
      old_column_name_ := 'ALT_DELNOTE_NO';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'GROSS_WEIGHT';
      old_column_name_ := 'WEIGHT';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'NET_WEIGHT';
      old_column_name_ := 'WEIGHT_NET';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'SINGLE_OCCURRENCE_ADDRESS';
      old_column_name_ := 'SHIP_ADDR_FLAG';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'SHIP_ADDRESS_NO';
      old_column_name_ := 'SHIP_ADDR_NO';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'SHIP_ADDRESS_NAME';
      old_column_name_ := 'SHIP_ADDR_NAME';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;   
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- ***** TRANSPORT_DELIVERY_NOTE_TAB End *****

-- ***** TRANSPORT_DELIV_NOTE_LINE_TAB Begin *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_28');
PROMPT Rename columns DELNOTE_NO in TRANSPORT_DELIV_NOTE_LINE_TAB
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'TRANSPORT_DELIV_NOTE_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN 
      new_column_name_ := 'DELIVERY_NOTE_ID';
      old_column_name_ := 'DELNOTE_NO';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- ***** TRANSPORT_DELIV_NOTE_LINE_TAB End *****

-- gelr:free_of_charge, begin
-- ***** INVENTORY_TRANSACTION_HIST_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_29');
PROMPT upgrade transaction_code column values in inventory_transaction_hist_tab
DECLARE
   stmt_       VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      stmt_ := 'UPDATE inventory_transaction_hist_tab
                   SET transaction_code = (
                        CASE transaction_code
                           WHEN ''OESHIP-FOC'' THEN ''OESHIP''
                           WHEN ''OERET-FOC''  THEN ''OERETURN''
                           ELSE transaction_code
                        END )
                   WHERE transaction_code IN (''OESHIP-FOC'', ''OERET-FOC'')';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- ***** INVENTORY_TRANSACTION_HIST_TAB End *****
-- gelr:free_of_charge, end
-- 

-- **************** TRANSPORT_TASK_LINE_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_30');
PROMPT Update work order references as work task references in transport_task_line_tab .

UPDATE TRANSPORT_TASK_LINE_TAB
SET ORDER_REF1 = ORDER_REF2,
    ORDER_REF2 = ORDER_REF3,
    ORDER_REF3 = ORDER_REF4,
    ORDER_REF4 = TO_CHAR(NULL),
    ORDER_TYPE = 'WORK_TASK' 
WHERE ORDER_TYPE = 'WORK ORDER'
AND TRANSPORT_TASK_STATUS IN ('CREATED','PICKED')
AND ORDER_REF2 != '*';

COMMIT;
-- **************** TRANSPORT_TASK_LINE_TAB : End ****************

-- gelr:italy_intrastat, start
DECLARE
BEGIN
   Database_SYS.Remove_Package('SERVICE_WAY_API',         show_info_ => true);
   Database_SYS.Remove_Package('SERVICE_PAYMENT_WAY_API', show_info_ => true);
   Database_SYS.Remove_Package('INTRASTAT_COUNTRY_TRANS_API', show_info_ => true);
END;
/
-- gelr:italy_intrastat, end

-----------------------------------------------------------------------------------------
------------- SECTION3.1: Handling Upgrade from 21R1 related GET DB Changes Ends Here ---
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION3.2: Handling Upgrade from 21R2 related GET DB Changes Starts Here -
-----------------------------------------------------------------------------------------
-- gelr:access_ctrl_for_inv_reserv, start
-- **************** USER_WAREHOUSE_ACCESS_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_31');
PROMPT Updating data in column CTR_RESERV_DETAIL and CTR_TRANS_DETAIL of USER_INVENTORY_TAB
DECLARE
   stmt_         VARCHAR2(2000);
   table_name_   VARCHAR2(30) := 'USER_INVENTORY_TAB';

BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Table_Exist(table_name_))THEN
         stmt_ := 'UPDATE user_inventory_tab
                    SET ctr_reserv_detail = (CASE ctr_reserv_detail
                           WHEN ''YES'' THEN ''TRUE''
                           WHEN ''NO''  THEN ''FALSE''
                           ELSE ctr_reserv_detail
                        END),
                        ctr_trans_detail = (CASE ctr_trans_detail
                           WHEN ''YES'' THEN ''TRUE''
                           WHEN ''NO''  THEN ''FALSE''
                           ELSE ctr_trans_detail
                        END)'; 
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_32');
PROMPT Rename USER_INVENTORY_TAB to USER_WAREHOUSE_ACCESS_TAB

DECLARE
   new_table_name_   VARCHAR2(30):= 'USER_WAREHOUSE_ACCESS_TAB';
   old_table_name_   VARCHAR2(30):= 'USER_INVENTORY_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF NOT(Database_SYS.Table_Exist(new_table_name_))AND Database_SYS.Table_Exist(old_table_name_) THEN
         Database_SYS.Rename_Table(old_table_name_, new_table_name_, FALSE, TRUE, TRUE, TRUE, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_33');
PROMPT Rename columns USERID, WAREHOUSE, CTR_RESERV_DETAIL, CTR_TRANS_DETAIL in USER_WAREHOUSE_ACCESS_TAB
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'USER_WAREHOUSE_ACCESS_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN 
      new_column_name_ := 'USER_ID';
      old_column_name_  := 'USERID';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'WAREHOUSE_ID';
      old_column_name_ := 'WAREHOUSE';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'STOCK_RESERV_ALLOWED';
      old_column_name_ := 'CTR_RESERV_DETAIL';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'INVENT_TRANS_ALLOWED';
      old_column_name_ := 'CTR_TRANS_DETAIL';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
-- **************** USER_WAREHOUSE_ACCESS_TAB : End ****************
-- gelr:access_ctrl_for_inv_reserv, end


-- **************** SITE_INVENT_INFO_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_34');
PROMPT Adding new COLUMN CASCAD_POSTING_DATE_OPTION TO SITE_INVENT_INFO_TAB. 
DECLARE
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'CASCAD_POSTING_DATE_OPTION', 'VARCHAR2(20)', 'N', '''SYSTEM_DATE''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_35');
PROMPT Moving setting OF localization parameter HU_APPLIED_DATE_PO_MATCHING INTO the core solution
BEGIN
   UPDATE site_invent_info_tab a
      SET a.cascad_posting_date_option = 'TRANS_APPLIED_DATE'
      WHERE a.contract IN (SELECT b.contract
                             FROM site_tab b, company_localization_info_tab c
                             WHERE b.company         = c.company
                             AND   c.parameter       = 'HU_APPLIED_DATE_PO_MATCHING'
                             AND   c.parameter_value = 'TRUE');
   COMMIT;    
END;
/
-- **************** SITE_INVENT_INFO_TAB : End ****************

-- **************** INVENTORY_TRANSACTION_HIST_TAB : Start ****************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_36');
PROMPT Adding new COLUMN MOVE_DEST_CONTRACT and MOVE_DEST_LOCATION_NO TO INVENTORY_TRANSACTION_HIST_TAB. 
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'MOVE_DEST_CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MOVE_DEST_LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_37');
PROMPT Rename TABLE JPK_INT_TRAN_ORDER_TAB
BEGIN
   IF (Database_SYS.Table_Exist('JPK_INT_TRAN_ORDER_TAB')) THEN
      Database_SYS.Rename_Table('JPK_INT_TRAN_ORDER_TAB', 'JPK_INT_TRAN_ORDER_2120', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_38');
PROMPT Move JPK_INT_TRAN_ORDER_TAB data INTO INVENTORY_TRANSACTION_HIST_TAB
DECLARE
   stmt_         VARCHAR2(2000);
   table_name_   VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Table_Exist('JPK_INT_TRAN_ORDER_2120')) THEN
         IF (Database_SYS.Column_Exist(table_name_,'MOVE_DEST_CONTRACT') AND Database_SYS.Column_Exist(table_name_,'MOVE_DEST_LOCATION_NO')) THEN
            stmt_ := 'UPDATE inventory_transaction_hist_tab t
                      SET  (t.move_dest_contract, t.move_dest_location_no) = (SELECT j.to_contract, j.to_location_no
                                                                              FROM  jpk_int_tran_order_2120 j
                                                                              WHERE t.transaction_id = j.int_transfer_order_no)
                      WHERE EXISTS (SELECT 1
                                    FROM jpk_int_tran_order_2120 r
                                    WHERE t.transaction_id = r.int_transfer_order_no )';
            EXECUTE IMMEDIATE stmt_;
            COMMIT;
         END IF;
      END IF;
   END IF;
END;
/
-- **************** INVENTORY_TRANSACTION_HIST_TAB : End ****************

-----------------------------------------------------------------------------------------
------------- SECTION3.2: Handling Upgrade from 21R2 related GET DB Changes Ends Here ---
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION3.3: Handling Upgrage from 22R1 related GET DB Changes Starts Here -
-----------------------------------------------------------------------------------------

-- **************** USER_WAREHOUSE_ACCESS_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_39');
PROMPT Remove RECORD IF STOCK_RESERV_ALLOWED AND INVENT_TRANS_ALLOWED equals TO FALSE IN USER_WAREHOUSE_ACCESS_TAB
DECLARE
   stmt_         VARCHAR2(2000);
   table_name_   VARCHAR2(30):= 'USER_WAREHOUSE_ACCESS_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Table_Exist(table_name_)) THEN
         stmt_ := 'DELETE FROM user_warehouse_access_tab 
                         WHERE stock_reserv_allowed = ''FALSE'' 
                           AND invent_trans_allowed = ''FALSE''';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- **************** USER_WAREHOUSE_ACCESS_TAB : End ****************
-----------------------------------------------------------------------------------------
------------- SECTION3.3: Handling Upgrage from 22R1 related GET DB Changes Ends Here ---
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Timestamp_40');
PROMPT Upgrade statements in file Invent GET_TO_CLOUD.upg end here
-- Nothing is allowed to be placed below here

UNDEFINE MODULE
UNDEFINE GET9VERSION
UNDEFINE GET10VERSION

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','GET_TO_CLOUD.upg','Done');


