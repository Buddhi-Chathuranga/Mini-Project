-----------------------------------------------------------------------------
--
--  Logical unit: Transport Task
--
--  File:         TransportTask.RDF
--  Version:      Foundation1 3.0.0 Beta
--
--  Note: We removed the custom field support on the transport task lines data collection cursor get_line since it broke the grouping 
--        of serial lines which is an important part of this report design. If you need to use custom fields you have re-add objkey 
--        to this cursor as a customer adaptation or create a new report.
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  211130  SBalLK  SC21R2-6433, Modified &Method to optimize the performance on print transport task report with handling units.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  160607  DaZase  LIM-5333, Added a several new handling unit connected fields and a new handling unit block to report. Renamed Get_Line_And_Serails___ to Get_Line_And_Serials___.
--  160601  DaZase  LIM-7459, Removed custom field support on cursor get_line since it breaks the serial grouping (after talks with Leif).
--  151028  Maeelk  LIM-4367, Removed pallet handling logic from the code.
--  150601  RasDlk  Bug 121318, Modified Report_Transport_Task() to enable translations for Custom Field Enumerations.
--  150131  MeAblk  PRSC-5906, Modified the method call Transport_Task_API.Get_To_Contract__ to refer the public method.
--  150127  IsSalk  Bug 120755, Enabled custom fields for the report. 
--  141126  KoDelk  Bug 119905, Added user allowed site filteration.
--  130826  GayDLK  Bug 111888, Modified methods Get_Line_And_Serails___, Get_Pallet_Line_And_Serails___ and 
--  130826          Report_Transport_Task in order to fetch the condition code for serial tracked and Pallet 
--  130826          parts correctly. 
--  120426  MalLlk  Modified methods Get_Line_And_Serails___ and Get_Pallet_Line_And_Serails___ to increase 
--  120426          the length of the variable concat_serial_nos_.
--  120214  MalLlk  Handled concatanated serials upto 20000 characters.
--  120202  MalLlk  Modified the cursor get_header to get the location info using Transport_Task_API Get methods.
--  120124  MalLlk  Added methods Get_Line_And_Serails___ and Get_Pallet_Line_And_Serails___ and
--  120124          modified the logic to display serial nos together if all the other information equal.
--  120119  MalLlk  Restructured the report to add all the required fields to nopallet and pallet lines.
--  111230  LEPESE  Changed cursor get_header to fetch consolidation data from line level. 
--  111028  NISMLK  SMA-285, Increased eng_chg_level length to STRING(6) in column comments.
--  110804  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the value.
--  110228  ChJalk  Used transport_task_tab instead of transport_task base view in cursors. 
--  090102  MalLlk  Bug 79023, Added FROM_UNIT_MEAS and TO_UNIT_MEAS.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  060720  RoJalk  Centralized Part Desc - Use Inventory_Part_API.Get_Description.
--  060601  RoJalk  Enlarge Part Description - Changed view comments.
--------------------------------------13.4.0-----------------------------------
--  051216  SuJalk  Changed the parameter VIEW_RPV to TABLE in Define_Report_. 
--  041217  DaZase  Removed references to the Qrp files.
--  040816  DaZase  Report Designer, New layout and adjustments.
--  040701  DaZase  Project Inventory: Added PROJECT_ID, SUB_PROJECT_ID, ACTIVITY_ID AND ACTIVITY_SEQ.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view TRANSPORT_TASK_REP.
------------------------------------ 13.3.0 ----------------------------------
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030717  ChFolk  Call ID 100120. Added ROW_NO into the view TRANSPORT_TASK_REP.
--  020627  CHJALK  Added Condition Code and Condition Code Description.
--  020603  NASALK  Extension of serial_no  from VARCHAR2(15) to VARCHAR2(50)in views.
------------------------------- AD 2002-3 Baseline ----------------------------------
--  001221  JOHW    Corrected printout of palllets.
--  001214  JOHW    Added refresh after creating the view.
--  001212  JOHW    Now it is possible to print unlimited number of pallets.
--  000928  JOHW    Changed prompt from Configuration Id to Configuration ID.
--  000925  JOHESE  Added undefines.
--  000907  JOHW    Added configuration id.
--  000219  ROOD    Added call to Transport_Task_API.Set_Printed__. 
--                  Modified QFLAGS and fetching of pallet_flag_.
--  000207  PELA    Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = TransportTask
define PKG                = TRANSPORT_TASK_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = TRANSPORT_TASK_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Transport_Task

--Header from Transport_Task
define TRANSPORT_TASK_ID          = N1
define CREATE_DATE                = D1
define FROM_CONTRACT              = S2
define FROM_LOCATION_NO           = S3
define FROM_LOCATION_GROUP        = S4
define FROM_LOCATION_TYPE         = S5
define FROM_WAREHOUSE             = S6
define FROM_BAY_NO                = S7
define FROM_ROW_NO                = S8
define FROM_TIER_NO               = S9
define FROM_BIN_NO                = S10
define TO_CONTRACT                = S11
define TO_LOCATION_NO             = S12
define TO_LOCATION_GROUP          = S13
define TO_LOCATION_TYPE           = S14
define TO_WAREHOUSE               = S15
define TO_BAY_NO                  = S16
define TO_ROW_NO                  = S17
define TO_TIER_NO                 = S18
define TO_BIN_NO                  = S19
define PART_NO                    = S20
define PART_DESCRIPTION           = S21
define DESTINATION                = S22
define NOTE_TEXT                  = S23
define CONFIGURATION_ID           = S24

--Transport_Task_Line
define LINE_NO                    = N3
define LINE_PART_NO               = S25
define LINE_PART_DESCRIPTION      = S26
define LINE_CONFIGURATION_ID      = S27
define LINE_STATUS                = S28
define LINE_FROM_CONTRACT         = S29
define LINE_FROM_LOCATION_NO      = S30
define LINE_FROM_LOCATION_GROUP   = S31
define LINE_FROM_LOCATION_TYPE    = S32
define LINE_FROM_WAREHOUSE        = S33
define LINE_FROM_BAY_NO           = S34
define LINE_FROM_ROW_NO           = S35
define LINE_FROM_TIER_NO          = S36
define LINE_FROM_BIN_NO           = S37
define LINE_FROM_UNIT_MEAS        = S38
define LINE_TO_CONTRACT           = S39
define LINE_TO_LOCATION_NO        = S40
define LINE_TO_LOCATION_GROUP     = S41
define LINE_TO_LOCATION_TYPE      = S42
define LINE_TO_WAREHOUSE          = S43
define LINE_TO_BAY_NO             = S44
define LINE_TO_ROW_NO             = S45
define LINE_TO_TIER_NO            = S46
define LINE_TO_BIN_NO             = S47
define LINE_LOT_BATCH_NO          = S48
define LINE_CONDITION_CODE        = S50   
define LINE_CONDITION_CODE_DESC   = S51
define LINE_ENG_CHG_LEVEL         = S52
define LINE_WAIV_DEV_REJ_NO       = S53
define LINE_PROJECT_ID            = S54
define LINE_SUB_PROJECT_ID        = S55   
define LINE_ACTIVITY_ID           = S56   
define LINE_ACTIVITY_SEQ          = N4
define LINE_QUANTITY              = N5
define OUTERMOST_HANDLING_UNIT_ID = N6
define OUTERMOST_SSCC             = S57
define OUTERMOST_ALT_HU_LABEL_ID  = S58

define LINE_SERIAL_NO             = S90
define LINE_SERIAL_NO_PART2       = S91
define LINE_SERIAL_NO_PART3       = S92
define LINE_SERIAL_NO_PART4       = S93
define LINE_SERIAL_NO_PART5       = S94

-- Handling Unit Structure Level
define HU_STRUCTURE_LEVEL        = N7
define HU_HANDLING_UNIT_ID       = N8
define HU_HANDLING_UNIT_TYPE_ID  = S59
define HU_HANDLING_UNIT_CATEGORY = S60
define HU_SSCC                   = S61
define HU_ALT_HANDLING_UNIT_LABEL_ID = S62
define HU_COMPOSITION            = S63
define HU_PRINT_LEVEL_FLAG       = S64
define HU_TYPE_DESCRIPTION       = S65
define HU_CATEGORY_DESCRIPTION   = S66
define HU_WIDTH                  = N9
define HU_HEIGHT                 = N10
define HU_DEPTH                  = N11
define HU_UOM_FOR_LENGTH         = S67
define HU_NET_WEIGHT             = N12
define HU_TARE_WEIGHT            = N13
define HU_OPERATIVE_GROSS_WEIGHT = N14
define HU_UOM_FOR_WEIGHT         = S68 
define HU_OPERATIVE_VOLUME       = N15 
define HU_UOM_FOR_VOLUME         = S69

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       D.ROW_NO                                DETAIL_ROW_NO,
       H.&TRANSPORT_TASK_ID                    TRANSPORT_TASK_ID,     
       H.&CREATE_DATE                          CREATE_DATE,           
       H.&FROM_CONTRACT                        FROM_CONTRACT,
       H.&FROM_LOCATION_NO                     FROM_LOCATION_NO,      
       H.&FROM_LOCATION_GROUP                  FROM_LOCATION_GROUP,   
       H.&FROM_LOCATION_TYPE                   FROM_LOCATION_TYPE,    
       H.&FROM_WAREHOUSE                       FROM_WAREHOUSE,        
       H.&FROM_BAY_NO                          FROM_BAY_NO,           
       H.&FROM_ROW_NO                          FROM_ROW_NO,           
       H.&FROM_TIER_NO                         FROM_TIER_NO,          
       H.&FROM_BIN_NO                          FROM_BIN_NO,           
       H.&TO_CONTRACT                          TO_CONTRACT,           
       H.&TO_LOCATION_NO                       TO_LOCATION_NO,        
       H.&TO_LOCATION_GROUP                    TO_LOCATION_GROUP,     
       H.&TO_LOCATION_TYPE                     TO_LOCATION_TYPE,      
       H.&TO_WAREHOUSE                         TO_WAREHOUSE,
       H.&TO_BAY_NO                            TO_BAY_NO,             
       H.&TO_ROW_NO                            TO_ROW_NO,             
       H.&TO_TIER_NO                           TO_TIER_NO,            
       H.&TO_BIN_NO                            TO_BIN_NO,             
       H.&PART_NO                              PART_NO,               
       H.&PART_DESCRIPTION                     PART_DESCRIPTION,      
       H.&DESTINATION                          DESTINATION,           
       H.&NOTE_TEXT                            NOTE_TEXT,
       H.&CONFIGURATION_ID                     CONFIGURATION_ID,
       D.&LINE_NO                              LINE_NO,
       D.&LINE_PART_NO                         LINE_PART_NO,
       D.&LINE_PART_DESCRIPTION                LINE_PART_DESCRIPTION,
       D.&LINE_CONFIGURATION_ID                LINE_CONFIGURATION_ID,
       D.&LINE_STATUS                          LINE_STATUS,
       D.&LINE_FROM_CONTRACT                   LINE_FROM_CONTRACT,
       D.&LINE_FROM_LOCATION_NO                LINE_FROM_LOCATION_NO,
       D.&LINE_FROM_LOCATION_GROUP             LINE_FROM_LOCATION_GROUP,
       D.&LINE_FROM_LOCATION_TYPE              LINE_FROM_LOCATION_TYPE,
       D.&LINE_FROM_WAREHOUSE                  LINE_FROM_WAREHOUSE,
       D.&LINE_FROM_BAY_NO                     LINE_FROM_BAY_NO,
       D.&LINE_FROM_ROW_NO                     LINE_FROM_ROW_NO,
       D.&LINE_FROM_TIER_NO                    LINE_FROM_TIER_NO,
       D.&LINE_FROM_BIN_NO                     LINE_FROM_BIN_NO,
       D.&LINE_FROM_UNIT_MEAS                  LINE_FROM_UNIT_MEAS,
       D.&LINE_TO_CONTRACT                     LINE_TO_CONTRACT,
       D.&LINE_TO_LOCATION_NO                  LINE_TO_LOCATION_NO,
       D.&LINE_TO_LOCATION_GROUP               LINE_TO_LOCATION_GROUP,
       D.&LINE_TO_LOCATION_TYPE                LINE_TO_LOCATION_TYPE,
       D.&LINE_TO_WAREHOUSE                    LINE_TO_WAREHOUSE,
       D.&LINE_TO_BAY_NO                       LINE_TO_BAY_NO,
       D.&LINE_TO_ROW_NO                       LINE_TO_ROW_NO,
       D.&LINE_TO_TIER_NO                      LINE_TO_TIER_NO,
       D.&LINE_TO_BIN_NO                       LINE_TO_BIN_NO,
       D.&LINE_LOT_BATCH_NO                    LINE_LOT_BATCH_NO,
       D.&LINE_SERIAL_NO                       LINE_SERIAL_NO,
       D.&LINE_SERIAL_NO_PART2                 LINE_SERIAL_NO_PART2,
       D.&LINE_SERIAL_NO_PART3                 LINE_SERIAL_NO_PART3,
       D.&LINE_SERIAL_NO_PART4                 LINE_SERIAL_NO_PART4,
       D.&LINE_SERIAL_NO_PART5                 LINE_SERIAL_NO_PART5,
       D.&LINE_CONDITION_CODE                  LINE_CONDITION_CODE,
       D.&LINE_CONDITION_CODE_DESC             LINE_CONDITION_CODE_DESC,
       D.&LINE_ENG_CHG_LEVEL                   LINE_ENG_CHG_LEVEL,
       D.&LINE_WAIV_DEV_REJ_NO                 LINE_WAIV_DEV_REJ_NO,
       D.&LINE_PROJECT_ID                      LINE_PROJECT_ID,
       D.&LINE_SUB_PROJECT_ID                  LINE_SUB_PROJECT_ID,
       D.&LINE_ACTIVITY_ID                     LINE_ACTIVITY_ID,
       D.&LINE_ACTIVITY_SEQ                    LINE_ACTIVITY_SEQ,
       D.&LINE_QUANTITY                        LINE_QUANTITY,
       D.&OUTERMOST_HANDLING_UNIT_ID           OUTERMOST_HANDLING_UNIT_ID,
       D.&OUTERMOST_SSCC                       OUTERMOST_SSCC,
       D.&OUTERMOST_ALT_HU_LABEL_ID            OUTERMOST_ALT_HU_LABEL_ID,
       D.&HU_STRUCTURE_LEVEL                   HU_STRUCTURE_LEVEL,
       D.&HU_HANDLING_UNIT_ID                  HU_HANDLING_UNIT_ID,
       D.&HU_HANDLING_UNIT_TYPE_ID             HU_HANDLING_UNIT_TYPE_ID,
       D.&HU_HANDLING_UNIT_CATEGORY            HU_HANDLING_UNIT_CATEGORY,
       D.&HU_SSCC                              HU_SSCC,
       D.&HU_ALT_HANDLING_UNIT_LABEL_ID        HU_ALT_HANDLING_UNIT_LABEL_ID,
       D.&HU_COMPOSITION                       HU_COMPOSITION,
       D.&HU_PRINT_LEVEL_FLAG                  HU_PRINT_LEVEL_FLAG,
       D.&HU_TYPE_DESCRIPTION                  HU_TYPE_DESCRIPTION,
       D.&HU_CATEGORY_DESCRIPTION              HU_CATEGORY_DESCRIPTION,
       D.&HU_WIDTH                             HU_WIDTH,
       D.&HU_HEIGHT                            HU_HEIGHT,
       D.&HU_DEPTH                             HU_DEPTH,
       D.&HU_UOM_FOR_LENGTH                    HU_UOM_FOR_LENGTH,
       D.&HU_NET_WEIGHT                        HU_NET_WEIGHT,
       D.&HU_TARE_WEIGHT                       HU_TARE_WEIGHT,
       D.&HU_OPERATIVE_GROSS_WEIGHT            HU_OPERATIVE_GROSS_WEIGHT,
       D.&HU_UOM_FOR_WEIGHT                    HU_UOM_FOR_WEIGHT,
       D.&HU_OPERATIVE_VOLUME                  HU_OPERATIVE_VOLUME,
       D.&HU_UOM_FOR_VOLUME                    HU_UOM_FOR_VOLUME
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..transport_task_id IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Transport Task ID^TITLE=Transport Task ID^ITEM_NAME=iTransportTaskId^QUERY=Transport Task ID^STATUS=Transport Task Id^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..create_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^PROMPT=Create Date^TITLE=Create Date^ITEM_NAME=iCreateDate^';
COMMENT ON COLUMN &VIEW..from_contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=From Contract^TITLE=Site^ITEM_NAME=iFromContract^';
COMMENT ON COLUMN &VIEW..from_location_no IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^PROMPT=From Location No^REF=InventoryLocation(from_contract)^TITLE=Location No^ITEM_NAME=iFromLocationNo^';
COMMENT ON COLUMN &VIEW..from_location_group IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=From Location Group^TITLE=Location Group^ITEM_NAME=iFromLocationGroup^';
COMMENT ON COLUMN &VIEW..from_location_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=From Location Type^TITLE=Location Type^ITEM_NAME=iFromLocationType^';
COMMENT ON COLUMN &VIEW..from_warehouse IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=From Warehouse^TITLE=Warehouse^ITEM_NAME=iFromWarehouse^';
COMMENT ON COLUMN &VIEW..from_bay_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=From Bay No^TITLE=Bay No^ITEM_NAME=iFromBayNo^';
COMMENT ON COLUMN &VIEW..from_row_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=From Row No^TITLE=Row No^ITEM_NAME=iFromRowNo^';
COMMENT ON COLUMN &VIEW..from_tier_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=From Tier No^TITLE=Tier No^ITEM_NAME=iFromTierNo^';
COMMENT ON COLUMN &VIEW..from_bin_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=From Bin No^TITLE=Bin No^ITEM_NAME=iFromBinNo^';
COMMENT ON COLUMN &VIEW..to_contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=To Contract^TITLE=Site^ITEM_NAME=iToContract^';
COMMENT ON COLUMN &VIEW..to_location_no IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^PROMPT=To Location No^REF=InventoryLocation(to_contract)^TITLE=Location No^ITEM_NAME=iToLocationNo^';
COMMENT ON COLUMN &VIEW..to_location_group IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=To Location Group^TITLE=Location Group^ITEM_NAME=iToLocationGroup^';
COMMENT ON COLUMN &VIEW..to_location_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=To Location Type^TITLE=Location Type^ITEM_NAME=iToLocationType^';
COMMENT ON COLUMN &VIEW..to_warehouse IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=To Warehouse^TITLE=Warehouse^ITEM_NAME=iToWarehouse^';
COMMENT ON COLUMN &VIEW..to_bay_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=To Bay No^TITLE=Bay No^ITEM_NAME=iToBayNo^';
COMMENT ON COLUMN &VIEW..to_row_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=To Row No^TITLE=Row No^ITEM_NAME=iToRowNo^';
COMMENT ON COLUMN &VIEW..to_tier_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=To Tier No^TITLE=Tier No^ITEM_NAME=iToTierNo^';
COMMENT ON COLUMN &VIEW..to_bin_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=To Bin No^TITLE=Bin No^ITEM_NAME=iToBinNo^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^TITLE=Part No^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &VIEW..part_description IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Part Description^TITLE=Part Description^ITEM_NAME=iPartDescription^';
COMMENT ON COLUMN &VIEW..destination IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Destination^REF=InventoryPartDestination^TITLE=Destination^ITEM_NAME=iDestination^';
COMMENT ON COLUMN &VIEW..note_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^PROMPT=Note Text^TITLE=Note Text^ITEM_NAME=iNoteText^';
COMMENT ON COLUMN &VIEW..configuration_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Configuration ID^TITLE=Configuration ID^ITEM_NAME=iConfigurationId^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Line No^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..line_part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Line Part No^TITLE=Part No^ITEM_NAME=iLinePartNo^';
COMMENT ON COLUMN &VIEW..line_part_description IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Line Part Description^TITLE=Part Description^ITEM_NAME=iLinePartDescription^';
COMMENT ON COLUMN &VIEW..line_configuration_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Line Configuration ID^TITLE=Configuration ID^ITEM_NAME=iLineConfigurationId^';
COMMENT ON COLUMN &VIEW..line_status IS
'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Line Status^REF=TransportTaskStatus^TITLE=Status^ITEM_NAME=iLineStatus^';
COMMENT ON COLUMN &VIEW..line_from_contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Line From Contract^TITLE=Site^ITEM_NAME=iLineFromContract^';
COMMENT ON COLUMN &VIEW..line_from_location_no IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^PROMPT=Line From Location No^REF=InventoryLocation(line_from_contract)^TITLE=Location No^ITEM_NAME=iLineFromLocationNo^';
COMMENT ON COLUMN &VIEW..line_from_location_group IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Line From Location Group^TITLE=Location Group^ITEM_NAME=iLineFromLocationGroup^';
COMMENT ON COLUMN &VIEW..line_from_location_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Line From Location Type^TITLE=Location Type^ITEM_NAME=iLineFromLocationType^';
COMMENT ON COLUMN &VIEW..line_from_warehouse IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=Line From Warehouse^TITLE=Warehouse^ITEM_NAME=iLineFromWarehouse^';
COMMENT ON COLUMN &VIEW..line_from_bay_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line From Bay No^TITLE=Bay No^ITEM_NAME=iLineFromBayNo^';
COMMENT ON COLUMN &VIEW..line_from_row_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line From Row No^TITLE=Row No^ITEM_NAME=iLineFromRowNo^';
COMMENT ON COLUMN &VIEW..line_from_tier_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line From Tier No^TITLE=Tier No^ITEM_NAME=iLineFromTierNo^';
COMMENT ON COLUMN &VIEW..line_from_bin_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line From Bin No^TITLE=Bin No^ITEM_NAME=iLineFromBinNo^';
COMMENT ON COLUMN &VIEW..line_from_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Line From Unit Meas^TITLE=Unit^ITEM_NAME=iLineFromUnitMeas^';
COMMENT ON COLUMN &VIEW..line_to_contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Line To Contract^TITLE=Site^ITEM_NAME=iLineToContract^';
COMMENT ON COLUMN &VIEW..line_to_location_no IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^PROMPT=Line To Location No^REF=InventoryLocation(line_to_contract)^TITLE=Location No^ITEM_NAME=iLineToLocationNo^';
COMMENT ON COLUMN &VIEW..line_to_location_group IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Line To Location Group^TITLE=Location Group^ITEM_NAME=iLineToLocationGroup^';
COMMENT ON COLUMN &VIEW..line_to_location_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Line To Location Type^TITLE=Location Type^ITEM_NAME=iLineToLocationType^';
COMMENT ON COLUMN &VIEW..line_to_warehouse IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=Line To Warehouse^TITLE=Warehouse^ITEM_NAME=iLineToWarehouse^';
COMMENT ON COLUMN &VIEW..line_to_bay_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line To Bay No^TITLE=Bay No^ITEM_NAME=iLineToBayNo^';
COMMENT ON COLUMN &VIEW..line_to_row_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line To Row No^TITLE=Row No^ITEM_NAME=iLineToRowNo^';
COMMENT ON COLUMN &VIEW..line_to_tier_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line To Tier No^TITLE=Tier No^ITEM_NAME=iLineToTierNo^';
COMMENT ON COLUMN &VIEW..line_to_bin_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Line To Bin No^TITLE=Bin No^ITEM_NAME=iLineToBinNo^';
COMMENT ON COLUMN &VIEW..line_lot_batch_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Line Lot Batch No^TITLE=Lot Batch No^ITEM_NAME=iLineLotBatchNo^';
COMMENT ON COLUMN &VIEW..line_serial_no IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^PROMPT=Line Serial No^TITLE=Serial No^ITEM_NAME=iLineSerialNo^';
COMMENT ON COLUMN &VIEW..line_serial_no_part2 IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^PROMPT=Line Serial No Part 2^TITLE=Serial No^ITEM_NAME=iLineSerialNoPart2^';
COMMENT ON COLUMN &VIEW..line_serial_no_part3 IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^PROMPT=Line Serial No Part 3^TITLE=Serial No^ITEM_NAME=iLineSerialNoPart3^';
COMMENT ON COLUMN &VIEW..line_serial_no_part4 IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^PROMPT=Line Serial No Part 4^TITLE=Serial No^ITEM_NAME=iLineSerialNoPart4^';
COMMENT ON COLUMN &VIEW..line_serial_no_part5 IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^PROMPT=Line Serial No Part 5^TITLE=Serial No^ITEM_NAME=iLineSerialNoPart5^';
COMMENT ON COLUMN &VIEW..line_condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Line Condition Code^TITLE=Condition Code^ITEM_NAME=iLineConditionCode^';
COMMENT ON COLUMN &VIEW..line_condition_code_desc IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Line Condition Code Desc^TITLE=Condition Code Description^ITEM_NAME=iLineConditionCodeDesc^';
COMMENT ON COLUMN &VIEW..line_eng_chg_level IS
   'FLAGS=A----^DATATYPE=STRING(6)/UPPERCASE^PROMPT=Line Eng Chg Level^TITLE=EC^ITEM_NAME=iLineEngChgLevel^';
COMMENT ON COLUMN &VIEW..line_waiv_dev_rej_no IS
   'FLAGS=A----^DATATYPE=STRING(15)/UPPERCASE^PROMPT=Line Waiv Dev Rej No^TITLE=W/D/R No^ITEM_NAME=iLineWaivDevRejNo^';
COMMENT ON COLUMN &VIEW..line_project_id IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Line Project ID^TITLE=Project ID^ITEM_NAME=iLineProjectId^';
COMMENT ON COLUMN &VIEW..line_sub_project_id IS
   'FLAGS=A----^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Line Sub Project ID^TITLE=Sub Project ID^ITEM_NAME=iLineSubProjectId^';
COMMENT ON COLUMN &VIEW..line_activity_id IS
   'FLAGS=A----^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Line Activity ID^TITLE=Activity ID^ITEM_NAME=iLineActivityId^';
COMMENT ON COLUMN &VIEW..line_activity_seq IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Line Activity Seq^TITLE=Activity Sequence^ITEM_NAME=iLineActivitySeq^';
COMMENT ON COLUMN &VIEW..line_quantity IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Line Quantity^TITLE=Quantity^ITEM_NAME=iLineQuantity^';
COMMENT ON COLUMN &VIEW..outermost_handling_unit_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Outermost Handling Unit ID^TITLE=Outermost Handling Unit ID^ITEM_NAME=iOutermostHandlingUnitId^';
COMMENT ON COLUMN &VIEW..outermost_sscc
   IS 'FLAGS=A----^DATATYPE=STRING(18)^PROMPT=Outermost Sscc^TITLE=Outermost SSCC^ITEM_NAME=iOutermostSscc^';
COMMENT ON COLUMN &VIEW..outermost_alt_hu_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Outermost Alt Hu Label ID^TITLE=Outermost Alt Handling Unit Label ID^ITEM_NAME=iOutermostAltHuLabelId^';
COMMENT ON COLUMN &VIEW..hu_structure_level
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Structure Level^TITLE=Structure Level^ITEM_NAME=iHuStructureLevel^';
COMMENT ON COLUMN &VIEW..hu_handling_unit_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Handling Unit ID^TITLE=Handling Unit ID^ITEM_NAME=iHuHandlingUnitId^';
COMMENT ON COLUMN &VIEW..hu_handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Hu Handling Unit Type ID^TITLE=Type ID^ITEM_NAME=iHuHandlingUnitTypeId^';
COMMENT ON COLUMN &VIEW..hu_handling_unit_category
   IS 'FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Hu Handling Unit Category^TITLE=Category^ITEM_NAME=iHuHandlingUnitCategory^';
COMMENT ON COLUMN &VIEW..hu_sscc
   IS 'FLAGS=A----^DATATYPE=STRING(18)^PROMPT=Hu Sscc^TITLE=SSSC^ITEM_NAME=iHuSscc^';
COMMENT ON COLUMN &VIEW..hu_alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Hu Alt Handling Unit Label ID^TITLE=Alt Handling Unit Label ID^ITEM_NAME=iHuAltHandlingUnitLabelId^';
COMMENT ON COLUMN &VIEW..hu_composition
   IS 'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Hu Composition^TITLE=Composition^ITEM_NAME=iHuComposition^';
COMMENT ON COLUMN &VIEW..hu_print_level_flag
   IS 'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Hu Print Level Flag^TITLE=Print Level Flag^ITEM_NAME=iHuPrintLevelFlag^';
COMMENT ON COLUMN &VIEW..hu_type_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Hu Type Description^TITLE=Type Description^ITEM_NAME=iHuTypeDescription^';
COMMENT ON COLUMN &VIEW..hu_category_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Hu Category Description^TITLE=Category Description^ITEM_NAME=iHuCategoryDescription^';
COMMENT ON COLUMN &VIEW..hu_width
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Width^TITLE=Width^ITEM_NAME=iHuWidth^';
COMMENT ON COLUMN &VIEW..hu_height
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Height^TITLE=Height^ITEM_NAME=iHuHeight^';
COMMENT ON COLUMN &VIEW..hu_depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Depth^TITLE=Depth^ITEM_NAME=iHuDepth^';
COMMENT ON COLUMN &VIEW..hu_uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Hu Uom For Length^TITLE=Uom For Length^ITEM_NAME=iHuUomForLength^';
COMMENT ON COLUMN &VIEW..hu_net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Net Weight^TITLE=Net Weight^ITEM_NAME=iHuNetWeight^';
COMMENT ON COLUMN &VIEW..hu_tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Tare Weight^TITLE=Tare Weight^ITEM_NAME=iHuTareWeight^';
COMMENT ON COLUMN &VIEW..hu_operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Operative Gross Weight^TITLE=Operative Gross Weight^ITEM_NAME=iHuOperativeGrossWeight^';
COMMENT ON COLUMN &VIEW..hu_uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Hu Uom For Weight^TITLE=Uom For Weight^ITEM_NAME=iHuUomForWeight^';
COMMENT ON COLUMN &VIEW..hu_operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Hu Operative Volume^TITLE=Operative Volume^ITEM_NAME=iHuOperativeVolume^';
COMMENT ON COLUMN &VIEW..hu_uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Hu Uom For Volume^TITLE=Uom For Volume^ITEM_NAME=iHuUomForVolume^';



BEGIN
   Report_SYS.Define_Report_( '&VIEW', '&MODULE', '&LU', 'Transport Task', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Warehouse Management','Warehouse Operations');
   Report_SYS.Define_Report_Text_( '&VIEW', 'TRANSPORT_FROM_TITLE', 'Transport From' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'TRANSPORT_TO_TITLE', 'Transport To' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'PART_INFO_TITLE', 'Part Info' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'PROJECT_RELATED_INFO_TITLE', 'Project Related Info' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'TRACKING_INFO_TITLE', 'Tracking Info' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'HANDLING_UNIT_TITLE', 'Handling Unit Info' );
   
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'TransportTask', 'TRANSPORT_TASK_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'TransportTaskLine', 'TRANSPORT_TASK_REP/TASK_LINES/TASK_LINE');

   Report_SYS.Refresh_('&VIEW');   
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE Get_Line_And_Serials___(line_no_               OUT NUMBER,
                                  serial_nos_            OUT VARCHAR2,
                                  condition_code_        OUT VARCHAR2,
                                  transport_task_id_     IN  NUMBER,
                                  part_no_               IN  VARCHAR2, 
                                  configuration_id_      IN  VARCHAR2, 
                                  lot_batch_no_          IN  VARCHAR2, 
                                  waiv_dev_rej_no_       IN  VARCHAR2, 
                                  eng_chg_level_         IN  VARCHAR2, 
                                  project_id_            IN  VARCHAR2, 
                                  activity_seq_          IN  NUMBER, 
                                  transport_task_status_ IN  VARCHAR2, 
                                  from_contract_         IN  VARCHAR2, 
                                  from_location_no_      IN  VARCHAR2, 
                                  to_contract_           IN  VARCHAR2, 
                                  to_location_no_        IN  VARCHAR2 )
IS
   CURSOR get_line_no_serials IS
      SELECT line_no, serial_no
      FROM   Transport_Task_Line
      WHERE  transport_task_id      = transport_task_id_
      AND    serial_no             != '*'
      AND    part_no                = part_no_
      AND    configuration_id       = configuration_id_
      AND    lot_batch_no           = lot_batch_no_
      AND    waiv_dev_rej_no        = waiv_dev_rej_no_
      AND    eng_chg_level          = eng_chg_level_
      AND    (project_id            = project_id_ OR project_id_ IS NULL)
      AND    activity_seq           = activity_seq_
      AND    transport_task_status  = transport_task_status_
      AND    from_contract          = from_contract_
      AND    from_location_no       = from_location_no_
      AND    to_contract            = to_contract_
      AND    to_location_no         = to_location_no_;

   concat_serial_nos_   VARCHAR2(32000) := NULL;
   display_line_no_     NUMBER;
   first_serial_no_     BOOLEAN := TRUE;
   display_condition_code_ VARCHAR2(10) := NULL;
BEGIN
   FOR rec_ IN get_line_no_serials LOOP
      IF (first_serial_no_ = TRUE) THEN
         concat_serial_nos_ := rec_.serial_no;
         display_line_no_   := rec_.line_no;
         display_condition_code_ := Condition_Code_Manager_API.Get_Condition_Code (part_no_, rec_.serial_no, lot_batch_no_);
         first_serial_no_   := FALSE;
      ELSIF (first_serial_no_ = FALSE AND LENGTH(concat_serial_nos_ || '; ' || rec_.serial_no) < 20000) THEN
         concat_serial_nos_ := concat_serial_nos_ || '; ' || rec_.serial_no;
         IF (display_condition_code_ IS NOT NULL) THEN
            IF(NVL(Condition_Code_Manager_API.Get_Condition_Code (part_no_, rec_.serial_no, lot_batch_no_), Database_SYS.string_null_) != display_condition_code_) THEN
               display_condition_code_ := NULL;
            END IF;
         END IF;
         display_line_no_   := NULL;
      END IF;     
   END LOOP;
   
   line_no_    := display_line_no_;
   serial_nos_ := concat_serial_nos_;
   condition_code_ := display_condition_code_;
END Get_Line_And_Serials___;

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_              NUMBER;
   row_no_             		 NUMBER := 1;
   parent_row_no_      		 NUMBER := 0;
   language_code_      		 VARCHAR2(4);
   archive_notes_      		 VARCHAR2(200);
   transport_task_id_  		 NUMBER;
   npl_condition_code_    	 VARCHAR2(10);
   npl_condition_code_desc_ VARCHAR2(35);
   npl_sub_prj_id_          VARCHAR2(30);
   npl_activity_id_         VARCHAR2(30);
   stmt_                    VARCHAR2(2000);
   npl_serial_nos_          VARCHAR2(32000);
   npl_serial_nos_part2_    VARCHAR2(32000);
   npl_serial_nos_part3_    VARCHAR2(32000);
   npl_serial_nos_part4_    VARCHAR2(32000);
   npl_serial_nos_part5_    VARCHAR2(32000);
   npl_line_no_             NUMBER;
   npl_from_location_type_  VARCHAR2(20);
   npl_to_location_type_    VARCHAR2(20);
   part_description_        VARCHAR2(200);
   npl_part_description_    VARCHAR2(200);
   npl_from_unit_meas_      VARCHAR2(10);    

   npl_from_location_rec_   Inventory_Location_API.Public_Rec;
   npl_to_location_rec_     Inventory_Location_API.Public_Rec;

   package_name_            VARCHAR2(100) := 'TRANSPORT_TASK_REP';
   do_xml_                  BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                   BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                     CLOB;

   parent_row_no2_               NUMBER;
   outermost_sscc_               VARCHAR2(18);
   outermost_alt_handl_label_id_ VARCHAR2(25);
   node_and_ascendants_tab_      Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_rec_            Handling_Unit_API.Public_Rec; 
   last_level_                   NUMBER;
   print_level_flag_             VARCHAR2(10);
   hu_details_temp_rec_          handling_unit_details_tmp%ROWTYPE;

   CURSOR get_header IS
      SELECT transport_task_id,
             create_date,
             Transport_Task_API.Get_Destination__          (transport_task_id) destination,
             Transport_Task_API.Get_Part_No__              (transport_task_id) part_no,
             Transport_Task_API.Get_Configuration_Id__     (transport_task_id) configuration_id,
             Transport_Task_API.Get_From_Contract__        (transport_task_id) from_contract,
             Transport_Task_API.Get_From_Location_No__     (transport_task_id) from_location_no,
             Transport_Task_API.Get_From_Location_Group__  (transport_task_id) from_location_group,
             Transport_Task_API.Get_From_Location_Type__   (transport_task_id) from_location_type,
             Transport_Task_API.Get_From_Warehouse_id__    (transport_task_id) from_warehouse_id,
             Transport_Task_API.Get_From_Bay_Id__          (transport_task_id) from_bay_id,
             Transport_Task_API.Get_From_Tier_Id__         (transport_task_id) from_tier_id,
             Transport_Task_API.Get_From_Row_Id__          (transport_task_id) from_row_id,
             Transport_Task_API.Get_From_Bin_Id__          (transport_task_id) from_bin_id,
             Transport_Task_API.Get_To_Contract            (transport_task_id) to_contract,
             Transport_Task_API.Get_To_Location_No__       (transport_task_id) to_location_no,
             Transport_Task_API.Get_To_Location_Group__    (transport_task_id) to_location_group,
             Transport_Task_API.Get_To_Location_Type__     (transport_task_id) to_location_type,
             Transport_Task_API.Get_To_Warehouse_Id__      (transport_task_id) to_warehouse_id,
             Transport_Task_API.Get_To_Bay_Id__            (transport_task_id) to_bay_id,
             Transport_Task_API.Get_To_Tier_Id__           (transport_task_id) to_tier_id,
             Transport_Task_API.Get_To_Row_Id__            (transport_task_id) to_row_id,
             Transport_Task_API.Get_To_Bin_Id__            (transport_task_id) to_bin_id,
             note_text,
             rowkey
      FROM   Transport_Task_tab
      WHERE transport_task_id = transport_task_id_;

   CURSOR get_line IS
      SELECT line_no,
             part_no,
             lot_batch_no,    
             serial_no,       
             waiv_dev_rej_no, 
             eng_chg_level,   
             project_id,
             activity_seq,                
             quantity,
             configuration_id,
             transport_task_status,
             from_contract,
             from_location_no,
             to_contract,
             to_location_no,
             handling_unit_id,
             outermost_handling_unit_id
      FROM   Transport_Task_Line
      WHERE  transport_task_id = transport_task_id_
      AND    serial_no = '*' 
      UNION
      SELECT -1 line_no,
             part_no,
             lot_batch_no,
             NULL serial_no,
             waiv_dev_rej_no, 
             eng_chg_level,   
             project_id,
             activity_seq,                
             SUM(quantity) quantity,
             configuration_id,
             transport_task_status,
             from_contract,
             from_location_no,
             to_contract,
             to_location_no,
             handling_unit_id,
             outermost_handling_unit_id
      FROM   Transport_Task_Line
      WHERE  transport_task_id = transport_task_id_
      AND    serial_no != '*'
      GROUP BY lot_batch_no,
             waiv_dev_rej_no, 
             eng_chg_level,   
             project_id,
             activity_seq,
             part_no,
             configuration_id,
             transport_task_status,
             from_contract,
             from_location_no,
             to_contract,
             to_location_no,
             handling_unit_id,
             outermost_handling_unit_id;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   transport_task_id_ := Client_SYS.Get_Item_Value('TRANSPORT_TASK_ID', parameter_attr_);
   Trace_SYS.Message('Result key: '||result_key_||' transport_task_id: '||transport_task_id_);

   language_code_ := Language_SYS.Get_Language;

   -- Set report language
   Archive_API.Set_Language(language_code_);
      
   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'TRANSPORTTASKID: Transport Task Id');
   archive_notes_ := archive_notes_ || ': '|| To_Char(transport_task_id_);
   Archive_API.Set_Notes(archive_notes_);
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
   END IF;   

   FOR rec IN get_header LOOP

      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), rec.from_contract);
      
      IF (rec.from_contract IS NOT NULL) THEN
         IF (rec.part_no IS NOT NULL) THEN
            part_description_    := Inventory_Part_API.Get_Description(rec.from_contract, rec.part_no);
         END IF;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TRANSPORT_TASK_ID', transport_task_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CREATE_DATE', rec.create_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_CONTRACT', rec.from_contract);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_LOCATION_NO', rec.from_location_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_LOCATION_GROUP', rec.from_location_group);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_LOCATION_TYPE', rec.from_location_type);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_WAREHOUSE', rec.from_warehouse_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_BAY_NO', rec.from_bay_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_ROW_NO', rec.from_row_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_TIER_NO', rec.from_tier_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_BIN_NO', rec.from_bin_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_CONTRACT', rec.to_contract);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_LOCATION_NO', rec.to_location_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_LOCATION_GROUP', rec.to_location_group);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_LOCATION_TYPE', rec.to_location_type);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_WAREHOUSE', rec.to_warehouse_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_BAY_NO', rec.to_bay_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_ROW_NO', rec.to_row_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_TIER_NO', rec.to_tier_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_BIN_NO', rec.to_bin_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', rec.part_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_DESCRIPTION', part_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DESTINATION', rec.destination);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NOTE_TEXT', rec.note_text);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIGURATION_ID', rec.configuration_id);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'TransportTask', rec.rowkey, '&VIEW', language_code_);   
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &TABLE (
            result_key, row_no, parent_row_no,
            &TRANSPORT_TASK_ID,      
            &CREATE_DATE,            
            &FROM_CONTRACT,          
            &FROM_LOCATION_NO,       
            &FROM_LOCATION_GROUP,    
            &FROM_LOCATION_TYPE,     
            &FROM_WAREHOUSE,         
            &FROM_BAY_NO,            
            &FROM_ROW_NO,            
            &FROM_TIER_NO,           
            &FROM_BIN_NO,            
            &TO_CONTRACT,            
            &TO_LOCATION_NO,         
            &TO_LOCATION_GROUP,      
            &TO_LOCATION_TYPE,       
            &TO_WAREHOUSE,           
            &TO_BAY_NO,              
            &TO_ROW_NO,              
            &TO_TIER_NO,             
            &TO_BIN_NO,              
            &PART_NO,                
            &PART_DESCRIPTION,       
            &DESTINATION,            
            &NOTE_TEXT,
            &CONFIGURATION_ID )
         VALUES (
            result_key_, row_no_, 0,
            transport_task_id_,    
            rec.create_date,                        
            rec.from_contract,        
            rec.from_location_no,     
            rec.from_location_group,  
            rec.from_location_type,
            rec.from_warehouse_id,
            rec.from_bay_id,
            rec.from_row_id,
            rec.from_tier_id,
            rec.from_bin_id,
            rec.to_contract,          
            rec.to_location_no,       
            rec.to_location_group,    
            rec.to_location_type,
            rec.to_warehouse_id,
            rec.to_bay_id,
            rec.to_row_id,
            rec.to_tier_id,
            rec.to_bin_id,
            rec.part_no,              
            part_description_,     
            rec.destination,          
            rec.note_text,
            rec.configuration_id);

         parent_row_no_ := row_no_;
         row_no_ := row_no_ + 1;
      END IF;
            
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TASK_LINES');
      END IF;            
      
      FOR rec_line_ IN get_line LOOP

         IF (rec_line_.line_no = -1) THEN
            Get_Line_And_Serials___(npl_line_no_, 
                                    npl_serial_nos_,
                                    npl_condition_code_,
                                    transport_task_id_, 
                                    rec_line_.part_no, 
                                    rec_line_.configuration_id, 
                                    rec_line_.lot_batch_no, 
                                    rec_line_.waiv_dev_rej_no,  
                                    rec_line_.eng_chg_level, 
                                    rec_line_.project_id, 
                                    rec_line_.activity_seq, 
                                    rec_line_.transport_task_status, 
                                    rec_line_.from_contract, 
                                    rec_line_.from_location_no, 
                                    rec_line_.to_contract, 
                                    rec_line_.to_location_no);
         ELSE
            npl_line_no_    := rec_line_.line_no;
            npl_serial_nos_ := rec_line_.serial_no;
            npl_condition_code_ := NULL; 
         END IF;

         IF((Transaction_SYS.Logical_Unit_Is_Active('Activity')) AND (rec_line_.activity_seq != 0)) THEN
            stmt_ := '
               BEGIN
                  :sub_project_id := Activity_API.Get_Sub_Project_id(:Activity_seq);
               END;';
               -- ifs_assert_safe MalLlk 20120112
               EXECUTE IMMEDIATE stmt_
                    USING OUT npl_sub_prj_id_,
                          IN rec_line_.activity_seq;
                 stmt_ := '
               BEGIN
                  :activity_id := Activity_API.Get_Activity_No(:Activity_seq);
               END;';
               -- ifs_assert_safe MalLlk 20120112
               EXECUTE IMMEDIATE stmt_
                    USING OUT npl_activity_id_,
                          IN rec_line_.activity_seq;
         END IF;

         npl_part_description_    := Inventory_Part_API.Get_Description(rec_line_.from_contract, rec_line_.part_no);

         npl_from_unit_meas_      := Inventory_Part_API.Get_Unit_Meas(rec_line_.from_contract, rec_line_.part_no);
   
         npl_from_location_rec_   := Inventory_Location_API.Get(rec_line_.from_contract, rec_line_.from_location_no);
         npl_to_location_rec_     := Inventory_Location_API.Get(rec_line_.to_contract, rec_line_.to_location_no);
   
         npl_from_location_type_  := Inventory_Location_API.Get_Location_Type(rec_line_.from_contract, rec_line_.from_location_no);
         npl_to_location_type_    := Inventory_Location_API.Get_Location_Type(rec_line_.to_contract, rec_line_.to_location_no);
         
         IF (npl_condition_code_ IS NULL) THEN
            IF NOT (INSTR(npl_serial_nos_, ';') > 0) THEN
               npl_condition_code_      := Condition_Code_Manager_API.Get_Condition_Code (rec_line_.part_no, 
                                                                                          rec_line_.serial_no, 
                                                                                          rec_line_.lot_batch_no);
            END IF;
         END IF;

         npl_condition_code_desc_ := Condition_Code_API.Get_Description(npl_condition_code_);
         IF (rec_line_.outermost_handling_unit_id > 0) THEN
            outermost_sscc_ := Handling_Unit_APi.Get_Sscc(rec_line_.outermost_handling_unit_id);
            outermost_alt_handl_label_id_ := Handling_Unit_APi.Get_Alt_Handling_Unit_Label_Id(rec_line_.outermost_handling_unit_id);
         ELSE
            outermost_sscc_ := NULL;
            outermost_alt_handl_label_id_ := NULL;
         END IF;
                  
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'TASK_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', npl_line_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_PART_NO', rec_line_.part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_PART_DESCRIPTION', npl_part_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_CONFIGURATION_ID', rec_line_.configuration_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_STATUS', rec_line_.transport_task_status);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_CONTRACT', rec_line_.from_contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_LOCATION_NO', rec_line_.from_location_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_LOCATION_GROUP', npl_from_location_rec_.location_group);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_LOCATION_TYPE', npl_from_location_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_WAREHOUSE', npl_from_location_rec_.warehouse);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_BAY_NO', npl_from_location_rec_.bay_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_ROW_NO', npl_from_location_rec_.row_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_TIER_NO', npl_from_location_rec_.tier_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_BIN_NO', npl_from_location_rec_.bin_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_FROM_UNIT_MEAS', npl_from_unit_meas_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_CONTRACT', rec_line_.to_contract);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_LOCATION_NO', rec_line_.to_location_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_LOCATION_GROUP', npl_to_location_rec_.location_group);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_LOCATION_TYPE', npl_to_location_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_WAREHOUSE', npl_to_location_rec_.warehouse);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_BAY_NO', npl_to_location_rec_.bay_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_ROW_NO', npl_to_location_rec_.row_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_TIER_NO', npl_to_location_rec_.tier_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_TO_BIN_NO', npl_to_location_rec_.bin_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_LOT_BATCH_NO', rec_line_.lot_batch_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SERIAL_NO', npl_serial_nos_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_CONDITION_CODE', npl_condition_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_CONDITION_CODE_DESC', npl_condition_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ENG_CHG_LEVEL', rec_line_.eng_chg_level);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_WAIV_DEV_REJ_NO', rec_line_.waiv_dev_rej_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_PROJECT_ID', rec_line_.project_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SUB_PROJECT_ID', npl_sub_prj_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ACTIVITY_ID', npl_activity_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ACTIVITY_SEQ', rec_line_.activity_seq);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_QUANTITY', rec_line_.quantity);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OUTERMOST_HANDLING_UNIT_ID', rec_line_.outermost_handling_unit_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OUTERMOST_SSCC', outermost_sscc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OUTERMOST_ALT_HU_LABEL_ID', outermost_alt_handl_label_id_);
            --Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'TransportTaskLine', rec_line_.objkey, '&VIEW', language_code_);  -- removed since we cant support custom fields here 
         END IF;

         IF (do_rs_) THEN
            -- The concatenated Serial IDs are stored in few columns, if it exceeds the length limit.
            npl_serial_nos_part2_ := NULL;
            npl_serial_nos_part3_ := NULL; 
            npl_serial_nos_part4_ := NULL; 
            npl_serial_nos_part5_ := NULL;

            IF (LENGTH(npl_serial_nos_) > 4000) THEN
               npl_serial_nos_part2_ := SUBSTR(npl_serial_nos_, 4001);
               npl_serial_nos_       := SUBSTR(npl_serial_nos_, 1, 4000);

               IF (LENGTH(npl_serial_nos_part2_) > 4000) THEN
                  npl_serial_nos_part3_ := SUBSTR(npl_serial_nos_part2_, 4001);
                  npl_serial_nos_part2_ := SUBSTR(npl_serial_nos_part2_, 1, 4000);

                  IF (LENGTH(npl_serial_nos_part3_) > 4000) THEN
                     npl_serial_nos_part4_ := SUBSTR(npl_serial_nos_part3_, 4001);
                     npl_serial_nos_part3_ := SUBSTR(npl_serial_nos_part3_, 1, 4000);

                     IF (LENGTH(npl_serial_nos_part4_) > 4000) THEN
                        npl_serial_nos_part5_ := SUBSTR(npl_serial_nos_part4_, 4001, 4000);
                        npl_serial_nos_part4_ := SUBSTR(npl_serial_nos_part4_, 1, 4000);
                     END IF;
                  END IF;
               END IF;
            END IF;

            INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &LINE_NO,
               &LINE_PART_NO,
               &LINE_PART_DESCRIPTION,
               &LINE_CONFIGURATION_ID,
               &LINE_STATUS,
               &LINE_FROM_CONTRACT,
               &LINE_FROM_LOCATION_NO,
               &LINE_FROM_LOCATION_GROUP,
               &LINE_FROM_LOCATION_TYPE,
               &LINE_FROM_WAREHOUSE,
               &LINE_FROM_BAY_NO,
               &LINE_FROM_ROW_NO,
               &LINE_FROM_TIER_NO,
               &LINE_FROM_BIN_NO,
               &LINE_FROM_UNIT_MEAS,
               &LINE_TO_CONTRACT,
               &LINE_TO_LOCATION_NO,
               &LINE_TO_LOCATION_GROUP,
               &LINE_TO_LOCATION_TYPE,
               &LINE_TO_WAREHOUSE,
               &LINE_TO_BAY_NO,
               &LINE_TO_ROW_NO,
               &LINE_TO_TIER_NO,
               &LINE_TO_BIN_NO,
               &LINE_LOT_BATCH_NO,
               &LINE_SERIAL_NO,
               &LINE_SERIAL_NO_PART2,
               &LINE_SERIAL_NO_PART3,
               &LINE_SERIAL_NO_PART4,
               &LINE_SERIAL_NO_PART5,
               &LINE_CONDITION_CODE,
               &LINE_CONDITION_CODE_DESC,
               &LINE_ENG_CHG_LEVEL,
               &LINE_WAIV_DEV_REJ_NO,
               &LINE_PROJECT_ID,
               &LINE_SUB_PROJECT_ID,
               &LINE_ACTIVITY_ID,
               &LINE_ACTIVITY_SEQ,
               &LINE_QUANTITY,
               &OUTERMOST_HANDLING_UNIT_ID,
               &OUTERMOST_SSCC,
               &OUTERMOST_ALT_HU_LABEL_ID)
            VALUES (
               result_key_, row_no_, parent_row_no_,
               npl_line_no_,
               rec_line_.part_no,
               npl_part_description_,
               rec_line_.configuration_id,
               rec_line_.transport_task_status,
               rec_line_.from_contract,
               rec_line_.from_location_no,
               npl_from_location_rec_.location_group,
               npl_from_location_type_,
               npl_from_location_rec_.warehouse,
               npl_from_location_rec_.bay_no,
               npl_from_location_rec_.row_no,
               npl_from_location_rec_.tier_no,
               npl_from_location_rec_.bin_no,
               npl_from_unit_meas_,
               rec_line_.to_contract,
               rec_line_.to_location_no,
               npl_to_location_rec_.location_group,
               npl_to_location_type_,
               npl_to_location_rec_.warehouse,
               npl_to_location_rec_.bay_no,
               npl_to_location_rec_.row_no,
               npl_to_location_rec_.tier_no,
               npl_to_location_rec_.bin_no,
               rec_line_.lot_batch_no,
               npl_serial_nos_,
               npl_serial_nos_part2_, 
               npl_serial_nos_part3_, 
               npl_serial_nos_part4_, 
               npl_serial_nos_part5_,
               npl_condition_code_,
               npl_condition_code_desc_,
               rec_line_.eng_chg_level,
               rec_line_.waiv_dev_rej_no,
               rec_line_.project_id,
               npl_sub_prj_id_,
               npl_activity_id_,
               rec_line_.activity_seq,
               rec_line_.quantity, 
               rec_line_.outermost_handling_unit_id,
               outermost_sscc_,
               outermost_alt_handl_label_id_);

            parent_row_no2_ := row_no_;
            row_no_ := row_no_ + 1;
         END IF;         

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNITS');
         END IF;

         -- Handling Unit Structure Level
         IF (rec_line_.handling_unit_id > 0) THEN
            node_and_ascendants_tab_ := Handling_Unit_API.Get_Node_And_Ascendants(rec_line_.handling_unit_id);
            last_level_ := node_and_ascendants_tab_.FIRST;

            FOR i IN REVERSE node_and_ascendants_tab_.FIRST..node_and_ascendants_tab_.LAST LOOP
               -- Controlling which lines will be printed on Report Designer layout, only first, second and last level should be printed, 
               -- if there are more they will be added to the xml but not printed
               IF (i IN (node_and_ascendants_tab_.LAST, node_and_ascendants_tab_.LAST-1, last_level_)) THEN
                  print_level_flag_ := 'TRUE';
               ELSE
                  print_level_flag_ := 'FALSE';
               END IF;
               
               hu_details_temp_rec_ := Handling_Unit_API.Get_Hu_Details_From_Tmp(node_and_ascendants_tab_(i).handling_unit_id);
               IF (hu_details_temp_rec_.handling_unit_id IS NULL) THEN
                  handling_unit_rec_                              := Handling_Unit_API.Get(node_and_ascendants_tab_(i).handling_unit_id);
                  hu_details_temp_rec_.handling_unit_id           := node_and_ascendants_tab_(i).handling_unit_id;
                  hu_details_temp_rec_.handling_unit_type_id      := handling_unit_rec_.handling_unit_type_id;
                  hu_details_temp_rec_.hu_type_description        := Handling_Unit_Type_API.Get_Description(hu_details_temp_rec_.handling_unit_type_id);
                  hu_details_temp_rec_.handling_unit_category_id  := Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(hu_details_temp_rec_.handling_unit_type_id);
                  hu_details_temp_rec_.category_description       := Handling_Unit_Category_API.Get_Description(hu_details_temp_rec_.handling_unit_category_id);
                  hu_details_temp_rec_.structure_level            := Handling_Unit_API.Get_Structure_Level(hu_details_temp_rec_.handling_unit_id);
                  hu_details_temp_rec_.composition                := Handling_Unit_API.Get_Composition(hu_details_temp_rec_.handling_unit_id);
                  hu_details_temp_rec_.sscc                       := handling_unit_rec_.sscc;
                  hu_details_temp_rec_.alt_handling_unit_label_id := handling_unit_rec_.alt_handling_unit_label_id;
                  hu_details_temp_rec_.width                      := handling_unit_rec_.width;
                  hu_details_temp_rec_.height                     := handling_unit_rec_.height;
                  hu_details_temp_rec_.depth                      := handling_unit_rec_.depth;
                  hu_details_temp_rec_.uom_for_length             := handling_unit_rec_.uom_for_length;
                  hu_details_temp_rec_.uom_for_weight             := Handling_Unit_API.Get_Uom_For_Weight(hu_details_temp_rec_.handling_unit_id);
                  hu_details_temp_rec_.uom_for_volume             := Handling_Unit_API.Get_Uom_For_Volume(hu_details_temp_rec_.handling_unit_id);
                  hu_details_temp_rec_.net_weight                 := Handling_Unit_API.Get_Net_Weight(hu_details_temp_rec_.handling_unit_id, hu_details_temp_rec_.uom_for_weight, apply_freight_factor_ => 'FALSE');
                  hu_details_temp_rec_.tare_weight                := Handling_Unit_API.Get_Tare_Weight(hu_details_temp_rec_.handling_unit_id, hu_details_temp_rec_.uom_for_weight);
                  hu_details_temp_rec_.operative_gross_weight     := Handling_Unit_API.Get_Operative_Gross_Weight(hu_details_temp_rec_.handling_unit_id, hu_details_temp_rec_.uom_for_weight, apply_freight_factor_ => 'FALSE');
                  hu_details_temp_rec_.operative_volume           := Handling_Unit_API.Get_Operative_Volume(hu_details_temp_rec_.handling_unit_id, hu_details_temp_rec_.uom_for_volume);
                  
                  Handling_Unit_API.Save_Hu_Details_Into_Tmp(hu_details_temp_rec_);
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_STRUCTURE_LEVEL',            hu_details_temp_rec_.structure_level);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HANDLING_UNIT_ID',           hu_details_temp_rec_.handling_unit_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HANDLING_UNIT_TYPE_ID',      hu_details_temp_rec_.handling_unit_type_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HANDLING_UNIT_CATEGORY',     hu_details_temp_rec_.handling_unit_category_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_SSCC',                       hu_details_temp_rec_.sscc);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_ALT_HANDLING_UNIT_LABEL_ID', hu_details_temp_rec_.alt_handling_unit_label_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_COMPOSITION',                hu_details_temp_rec_.composition);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_PRINT_LEVEL_FLAG',           print_level_flag_);
                  -- Extra elements that will not be used in our Layout but can be used by customers
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_TYPE_DESCRIPTION',           hu_details_temp_rec_.hu_type_description);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_CATEGORY_DESCRIPTION',       hu_details_temp_rec_.category_description);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_WIDTH',                      hu_details_temp_rec_.width);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HEIGHT',                     hu_details_temp_rec_.height);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_DEPTH',                      hu_details_temp_rec_.depth);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_UOM_FOR_LENGTH',             hu_details_temp_rec_.uom_for_length);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_NET_WEIGHT',                 hu_details_temp_rec_.net_weight);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_TARE_WEIGHT',                hu_details_temp_rec_.tare_weight);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_OPERATIVE_GROSS_WEIGHT',     hu_details_temp_rec_.operative_gross_weight);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_UOM_FOR_WEIGHT',             hu_details_temp_rec_.uom_for_weight);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_OPERATIVE_VOLUME',           hu_details_temp_rec_.operative_volume);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_UOM_FOR_VOLUME',             hu_details_temp_rec_.uom_for_volume);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');
               END IF;

               -- RS insert for handling unit structure level
               IF (do_rs_) THEN                     
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, 
                     &HU_STRUCTURE_LEVEL, &HU_HANDLING_UNIT_ID, &HU_HANDLING_UNIT_TYPE_ID, &HU_TYPE_DESCRIPTION, &HU_HANDLING_UNIT_CATEGORY, &HU_CATEGORY_DESCRIPTION, 
                     &HU_SSCC, &HU_ALT_HANDLING_UNIT_LABEL_ID, &HU_COMPOSITION, &HU_WIDTH, &HU_HEIGHT, &HU_DEPTH, &HU_UOM_FOR_LENGTH, 
                     &HU_NET_WEIGHT, &HU_TARE_WEIGHT, &HU_OPERATIVE_GROSS_WEIGHT, &HU_UOM_FOR_WEIGHT, &HU_OPERATIVE_VOLUME, &HU_UOM_FOR_VOLUME, &HU_PRINT_LEVEL_FLAG  )
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, 
                     hu_details_temp_rec_.structure_level, hu_details_temp_rec_.handling_unit_id,           hu_details_temp_rec_.handling_unit_type_id,  hu_details_temp_rec_.hu_type_description, hu_details_temp_rec_.handling_unit_category_id, hu_details_temp_rec_.category_description,
                     hu_details_temp_rec_.sscc,            hu_details_temp_rec_.alt_handling_unit_label_id, hu_details_temp_rec_.composition,            hu_details_temp_rec_.width,               hu_details_temp_rec_.height,                    hu_details_temp_rec_.depth,                hu_details_temp_rec_.uom_for_length,
                     hu_details_temp_rec_.net_weight,      hu_details_temp_rec_.tare_weight,                hu_details_temp_rec_.operative_gross_weight, hu_details_temp_rec_.uom_for_weight,      hu_details_temp_rec_.operative_volume,          hu_details_temp_rec_.uom_for_volume,       print_level_flag_);

                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         ELSE  -- Add handling unit block plus 1 empty structure line
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_STRUCTURE_LEVEL', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HANDLING_UNIT_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HANDLING_UNIT_TYPE_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HANDLING_UNIT_CATEGORY', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_SSCC', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_ALT_HANDLING_UNIT_LABEL_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_COMPOSITION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_PRINT_LEVEL_FLAG', 'TRUE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_TYPE_DESCRIPTION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_CATEGORY_DESCRIPTION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_WIDTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_HEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_DEPTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_UOM_FOR_LENGTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_NET_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_TARE_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_OPERATIVE_GROSS_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_UOM_FOR_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_OPERATIVE_VOLUME', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HU_UOM_FOR_VOLUME', '');
               Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');
            END IF;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNITS');
            Xml_Record_Writer_SYS.End_Element(xml_, 'TASK_LINE');
         END IF;
      END LOOP;
      Handling_Unit_API.Clear_Hu_Details_From_Tmp;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'TASK_LINES');
      END IF;

   END LOOP;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;   
   
   -- Update the Transport Task.
   Transport_Task_API.Set_Printed__(transport_task_id_);
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD

UNDEFINE TRANSPORT_TASK_ID
UNDEFINE CREATE_DATE
UNDEFINE FROM_CONTRACT 
UNDEFINE FROM_LOCATION_NO   
UNDEFINE FROM_LOCATION_GROUP  
UNDEFINE FROM_LOCATION_TYPE  
UNDEFINE FROM_WAREHOUSE      
UNDEFINE FROM_BAY_NO  
UNDEFINE FROM_ROW_NO   
UNDEFINE FROM_TIER_NO  
UNDEFINE FROM_BIN_NO
UNDEFINE TO_CONTRACT
UNDEFINE TO_LOCATION_NO
UNDEFINE TO_LOCATION_GROUP
UNDEFINE TO_LOCATION_TYPE 
UNDEFINE TO_WAREHOUSE     
UNDEFINE TO_BAY_NO        
UNDEFINE TO_ROW_NO        
UNDEFINE TO_TIER_NO       
UNDEFINE TO_BIN_NO        
UNDEFINE PART_NO          
UNDEFINE PART_DESCRIPTION 
UNDEFINE DESTINATION      
UNDEFINE NOTE_TEXT       
UNDEFINE CONFIGURATION_ID

UNDEFINE LINE_NO         
UNDEFINE LINE_PART_NO    
UNDEFINE LINE_PART_DESCRIPTION 
UNDEFINE LINE_CONFIGURATION_ID  
UNDEFINE LINE_STATUS      
UNDEFINE LINE_FROM_CONTRACT     
UNDEFINE LINE_FROM_LOCATION_NO   
UNDEFINE LINE_FROM_LOCATION_GROUP 
UNDEFINE LINE_FROM_LOCATION_TYPE  
UNDEFINE LINE_FROM_WAREHOUSE     
UNDEFINE LINE_FROM_BAY_NO       
UNDEFINE LINE_FROM_ROW_NO     
UNDEFINE LINE_FROM_TIER_NO    
UNDEFINE LINE_FROM_BIN_NO    
UNDEFINE LINE_FROM_UNIT_MEAS 
UNDEFINE LINE_TO_CONTRACT    
UNDEFINE LINE_TO_LOCATION_NO     
UNDEFINE LINE_TO_LOCATION_GROUP  
UNDEFINE LINE_TO_LOCATION_TYPE 
UNDEFINE LINE_TO_WAREHOUSE 
UNDEFINE LINE_TO_BAY_NO
UNDEFINE LINE_TO_ROW_NO 
UNDEFINE LINE_TO_TIER_NO   
UNDEFINE LINE_TO_BIN_NO
UNDEFINE LINE_LOT_BATCH_NO
UNDEFINE LINE_CONDITION_CODE     
UNDEFINE LINE_CONDITION_CODE_DESC 
UNDEFINE LINE_ENG_CHG_LEVEL  
UNDEFINE LINE_WAIV_DEV_REJ_NO  
UNDEFINE LINE_PROJECT_ID   
UNDEFINE LINE_SUB_PROJECT_ID   
UNDEFINE LINE_ACTIVITY_ID     
UNDEFINE LINE_ACTIVITY_SEQ   
UNDEFINE LINE_QUANTITY

UNDEFINE LINE_SERIAL_NO
UNDEFINE LINE_SERIAL_NO_PART2
UNDEFINE LINE_SERIAL_NO_PART3
UNDEFINE LINE_SERIAL_NO_PART4
UNDEFINE LINE_SERIAL_NO_PART5
