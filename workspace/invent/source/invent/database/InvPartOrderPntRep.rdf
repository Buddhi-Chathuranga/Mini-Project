-----------------------------------------------------------------------------
--
--  Logical unit: Inventory Part Order Point Requisitions
--
--  File:         ORDPNT.RDF
--
--  Date    Sign    History
--  ------  ----    --------------------------------------------------------
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not 
--  210127          include custom field according to the report definition.
--  150630  MatKse  Added Q_VENDOR_NO and Q_ROUTE_ID to INV_PART_ORDER_PNT_REP_REP.
--  121220  NaLrlk  Modified Create_Report_Line to include ownership parameters in method call Inventory_Part_In_Stock_API.Get_Inventory_Quantity.
--  130516  PraWlk  Bug 110057, Enabled custom fields for the report.
--  120731  SBalLK  Bug 101597, Modified Create_Report_Line() to get location specific document phrase id table and for enhance code readability.
--  120618  SBallk  Bug 103080, Modified to print document phrases in line level.
--  120110  PraWlk  Modified Create_Report_Line() byy removing oattribute order_date_.
--  080318  NuVelk  Bug 72129, Called Report_SYS.Define_Report_ with report_mode_ parameter set to 'LOG'
--  080318          to prevent the report being listed in Info services -> Order reports.
--  070723  RaKalk  Removed japanese layout
--  070703  RaKalk  Converted to report designer layout.
--  060601  RoJalk  Enlarge Part Description - Changed view comments.
------------------------------------- 13.4.0 -------------------------------
--  060213  DaZase  Added japanese layout.
--  060103  JOHESE  Removed exception handling and fixded data type error in Create_Report_Line
--  060103  JaJalk  Since the schedule tasks have been restructured, removed the following obsolete methods
--  060103          Make_Order_Point_Requisitions, Make_Order_Point_Req_Shell__ and Test which were used to create the Schedule tasks.
--  051216  SuJalk  Changed the VIEW_RPV to REP1TAB in COMMENT ON REPVIEW. 
--  050921  NiDalk  Removed unused variables.
--  050628  HaPulk  Fixed invalid usage of General_SYS.Init_Method.
--  050217  HaPulk  Changed method Create_Report_Line as public and removed method Make_Order_Point_Req__.
--  050111  HoInlk  Bug 48618, Modified the planner_buyer column comment, changed title Planner/Buyer: to Planner:
--  040920  JOHESE  Modified calls to Inventory_Part_In_Stock_API
--  040920  JOHESE  Modified call to Inventory_Part_In_Stock_API.Get_Avail_Plan_Qty_Loc_Type
--  040913  IsWilk  Modified the PROCEDURE Make_Order_Point_Req__ .  
--  040908  IsWilk  Modified the PROCEDURE Make_Order_Point_Req__ to fetch the correct values to the report.  
--  040903  IsWilk  Modified the PROCEDURE Make_Order_Point_Req__ to fetch the 
--  040903          correct values from client to the attributes CREATE_REQ and DELETE_REQ. 
--  040831  IsWilk  Modified the PROCEDURE Make_Order_Point_Req__ to fetch user from FND_SESSION_API.Get_Fnd_User .
--  040809  IsWilk  Modified the PROCEDURE Make_Order_Point_Req__ to correct the dynamic calls.
--  040707  KaDilk  Bug 45057, Get the work_days from the site_tab instead of mpccom_defaults_tab.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INV_PART_ORDER_PNT_REP_REP.
--  040428  IsWilk  Rewrote the DBMS_SQL to Native dynamic SQL inside FOR LOOPs.
--  040202  NaWalk  Remove the fourth parameter of the DBMS_SQL.bind_variable.
------------------------------------ 13.3.0 ----------------------------------
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030918  KiSalk  Bug 103280, For attribute string for Print_Job_Contents_API.New_Instance, 
--  030918          changed value for attribute 'LAYOUT_NAME' to 'ordpnt.qrp' from report_id_ in Make_Order_Point_Req__.
--  030915  ErSolk  Bug 37733, Made changes to sort the Order Proposal printout.
--  030704  MaEelk  Replaced the call Inventory_Part_In_Stock_API.Get_Inventory_Qty_Onhand 
--  030704          with Inventory_Part_In_Stock_API.Get_Inventory_Quantity in Create_Report_Line___.
--  030623  MaGulk  Replaced call to Inventory_Part_In_Stock_API.Get_Plannable_Qty_Onhand with Inventory_Part_In_Stock_API.Get_Avail_Plan_Qty_Loc_Type
--  021121  AnHose  Bug 34260, Made some changes in the correction of bug 27126, because that correction 
--  021121          caused performance problems.
--  021118  SaRalk  Bug 33337, Moved the code from Make_Order_Point_Requisitions to Make_Order_Point_Req__.
--  021114  MiKulk  Bug 34105, Reversed the correction of bugs 28243 and 31207.
--  021112  SaRalk  Bug 33337, Added code which enables to add different logos for different companies. 
--  020924  LEPESE  ***************** IceAge Merge Start *********************
--  020625  WaJalk  Bug 31207, Modified the procedure Make_Order_Point_Req__. 
--  020515  WaJalk  Bug 28243, Modified the procedure Make_Order_Point_Req__.  
--  020924  LEPESE  ***************** IceAge Merge End ***********************
--  020816  LEPESE  Replaced use of Inventory_Part_Config_API.Get_Inventory_Value_By_Method
--                  to instead use Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Config.
--  **********************  AD Baseline  ***********************************************
--  020404  JaBalk  Bug Fix 28243, Remove all corrections.
--  020331  JaBalk  Bug Fix 28243, Modified the proc:Make_Order_Point_Req__.
--  020330  JaBalk  Bug Fix 28243, Modified the proc:Make_Order_Point_Req__.
--  020328  Thajlk  Bug fix 28243, Modified the PROCEDURE Make_Order_Point_Req__. 
--  020314  RaSilk  Bug Fix 27126, Changed the WHERE clause of the cursor get_parts_ in  Make_Order_Point_Req__ method
--  010626  DaJolk  Bug fix 22570, Changed length of buyer_name_ to 100 in PROC Create_Report_Line___.
--  010423  JSAnse  Bug fix 21156, commented the define and undefine of REPMETHOD, further changes made in PresObjectScan.ins  
--  010110  SHVE    Changed Create_Report_Line___ to accept configuration_id as a part of the attribute string.
--  000925  JOHESE  Added undefines.
--  000925  PaLj    CTO-adaptions calls to Order_Supply_Demand_API now requires a configuration_id('*').
--  000919  JOHESE  Changed inventory_part_location calls to inventory_part_in_stock
--  000616  ANLASE  Added define REPMETHOD Make_Order_Point_Requisitions to enable security scanning.
--  000417  NISOSE  Added General_SYS.Init_Method in Test.
--  000414  NISOSE  Cleaned-up General_SYS.Init_Method.
--  000411  ANHO    Changed call Inventory_Part_location_API.Get_Total_Qty_Onhand to
--                  Inventory_Part_location_API.Get_Inventory_Qty_Onhand.
--  000321  LEPE    Added EXCEPTION part to Make_Order_Point_Req__ for closing cursors.
--  000217  SHVE    Changed the batch scheduling parameter in Make_Order_Point_Requisitions
--                  to handle db values.
--  990919  ROOD    Replaced Utility_SYS.Get_User with Fnd_Session_API.Get_Fnd_User.
--  990826  ROOD    Removed the special handling of expense parts when getting qty_onhand
--                  from InventoryPartLocation in Make_Order_Point_Req__.
--  990601  SHVE    Corrected the Language_Sys.Translate_Constant message in Make_Order_Point_Req__.
--  990512  ROOD    Made the process behave in a the same way as other similar processes concerning
--                  mainly the handling of second_commodity.
--  990510  ROOD    Changed call to Modify_Stockfactors since the parameters have been changed.
--  990504  DAZA    Performance tuning. Changed main cursor to use table and joins instead of view
--                  and pl-methods, removed pl-code from insert.
--  990319  SHVE    Increased the size of authorize code from 5 to 20.
--  990315  FRDI    Added Create_Report_Line___ in order to print all requisitions/orders created
--                  created in Get_Order_Supply_Demands, minor changes in Make_Order_Point_Req__.
--  990203  DAZA    Added stock_management_db = 'SYSTEM MANAGED INVENTORY' to
--                  cursor get_parts.
--  990201  DAZA    Removed check of inactive_obs_flag_db and changed call
--                  Inventory_Part_Status_Par_API.Get_Supply_Flag to
--                  Get_Supply_Flag_Db. Cleaned up cursor get_parts a little.
--  990129  FRDI    Changed Sysdate to site dependent 'sysdate' - Site_API.Get_Site_Date(contract)
--  981126  FRDI    Full precision for UOM, opend up variables
--                  number(12,4) to number in  Make_Order_Point_Req__.
--  981124  FRDI    SID 7589 - Correct criteria for Order proposal ie. cursor in Make_Order_Point_Req___
--  980821  JOHW    Removed parameter mrp_order_code in call to Inventory_Part_Planning_API.Modify_Stockfactors
--  980417  FRDI    SID 3715 - Added description to batch processes.
--  980407  SHVE    SID 2939: Changed title requisition no to Requisition/Order No
--  980319  TOOS    Changed handling of all_parts in Make_Order_Point_Req__ and
--                  corrected som labels on the report
--  980317  JOHNI   Improved fault tolerance. Batch will not stop if something goes
--                  wrong with one part, error is logged.
--  980302  SHVE    Improvements in report layout.
--  971124  GOPE    Added Report_SYS.refresh
--  971030  LEPE    Added a shell procedure Make_Order_Point_Req_Shell__ to make it possible to
--                  run even the scheduled executions via deferred_call.
--  971023  JOKE    Tuned Make_Order_Point_Req__ for better performance.
--  971021  GOPE    Removed "commit" "rollback" stmt in the loop.
--  970908  JOMC    Changed Unit of Measure handling to conform to UoM handling
--                  in Application Services
--  970905  JOMC    Converted the RDF to use the report table INVENT_INFO_SERVICES_RPT
--  970718  ASBE    BUG 97-0077 Incorrect date on printout. Added column
--                  WANTED_RECEIPT_DATE.
--  970529  GOPE    Change call to remove requisition from purchase
--  970424  FRMA    Added parameters process_pur and process_shp in method
--                  Make_Order_Point_Reservations. Added removal of requisitions
--                  for manufactured parts. Replaced purchase_leadtime with leadtime
--                  depending on if part is manufactured or purchased.
--  970311  MAGN    Changed from order of printing batchjob in infoservices to
--                  printing them automatically.
--  970115  FRMA    Values used in insert into report table, should be fetch
--                  from cursor, insted of using parameters (They may be NULL).
--  970110  FRMA    Removed call to Inventory_Part_API.Get_Production_Flags.
--  970110  FRMA    Changed cursor in Make_Order_Poiint_Req_.
--  961219  MNYS    Changed call Mpccom_Defaults_API.Get_Defaults to
--                  Mpccom_Defaults_API.Get_Number_Value.
--  961214  MAOR    Changed Get_Db_Value to Get_Client_Value
--  961214  JICE    Changed more calls to InventoryPartLocation.
--  961213  HP      Changed Authorized_Batch_User to Authorized.
--  961213  JICE    Changed calls to InventoryPartLocation.
--  961211  HP      Removed references to USER.
--                  Added error checking to Make_Order_Point_Req__.
--  961210  PEKR    View Order_Supply_Demand replaced with method calls in
--                  procedure Make_Order_Point_Req__.
--  961205  HP      Added some parameters to Make_Order_Point_Requisitions.
--                  Added call to Inventory_Part_Planning_API.Modify_Stockfactors
--                  and a few other to get parameters for that.
--  961128  SHVE    Changed order of parameters in call to Purchase_Requis_Line.
--  961108  JICE    Changed call to InventoryPartPlanning.
--  961030  MAOR    Changed LU name to InventoryPart.
--  961015  SHVE    Added user as a parameter to call to
--                  Order_Supply_Demand_API.Get_Order_Supply_Demands
--  961015  MAOR    Added batch_user in call to Make_Order_Point_Requisitions
--                  and Make_Order_Point_Req__.
--  961001  AnAr    Added dynamic call to Purchase_Part_Api.
--  960917  AnAr    Created.
--  960507  MANY    Created as Template for Info Services 1.2
--
-----------------------------------------------------------------------------

define MODULE     = INVENT
define LU         = InventoryPart
define PKG        = INV_PART_ORDER_PNT_REP_RPI

define REP1TAB    = INVENT_INFO_SERVICES_RPT
define REPVIEW    = INV_PART_ORDER_PNT_REP_REP
DEFINE VIEW_RPV   = INVENT_INFO_SERVICES_RPV

define VIEW1      = Inventory_Part

define DOC_ID     = '8'

define CONTRACT                   = S1
define CONTRACT_DESCRIPTION       = S2
define PLANNER_BUYER              = S3
define BUYER_NAME                 = S4
define SECOND_COMMODITY           = S5
define PART_NO                    = S6
define DESCRIPTION                = S7
define UNIT_MEAS                  = S8
define PURCH_LEADTIME             = N1
define MPR_ORDER_CODE             = S9
define SAFETY_STOCK               = N2
define ORDER_POINT                = N3
define QTY_ONHAND                 = N4
define ORDER_PURCH                = N5
define QTY_ALLOCATED              = N6
define QTY_ORDERED                = N7
define ORDER_DATE                 = D1
define NOTE_ID                    = N8
define NOTE_ID_PURCH              = N9
define WANTED_RECEIPT_DATE        = D2
define ORDER_QTY                  = N10
define TOTAL_COST                 = N11
define QTY_PREDICTED              = N12
define REQUISITION_NO             = S10
define DOCUMENT_PHRASE            = S11


-----------------------------------------------------------------------------
-- TABLES:                    Inv_Part_Order_Pnt_Rep_Rpt
-----------------------------------------------------------------------------
-- Report.Cre

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     Inv_Part_Order_Pnt_Rep_Rpi
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE Create_Report_Line (
   attrib_             IN     VARCHAR2,
   result_key_         IN     NUMBER,
   rows_fetched_       IN OUT NUMBER,
   xml_                IN OUT CLOB, 
   contract_           IN     VARCHAR2,
   part_no_            IN     VARCHAR2,
   part_description_   IN     VARCHAR2,
   unit_meas_          IN     VARCHAR2,
   purch_leadtime_     IN     NUMBER,
   planner_buyer_      IN     VARCHAR2,
   second_commodity_   IN     VARCHAR2,
   mrp_order_code      IN     VARCHAR2,
   safety_stock_       IN     VARCHAR2,
   order_point_qty_    IN     NUMBER,
   order_qty_          IN     NUMBER,
   qty_predicted_      IN     NUMBER,
   qty_supply_         IN     NUMBER,
   qty_demand_         IN     NUMBER,
   note_id_            IN     NUMBER,
   note_id_purch_      IN     NUMBER,
   create_new_header_  IN     VARCHAR2,
   close_old_header_   IN     VARCHAR2);

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS                      Inv_Part_Order_Pnt_Rep_Rep
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Inventory Order Report
-- Type:       LOG
-- Objects:    TABLE= Inv_Part_Order_Pnt_Rep_Rpt
--             VIEW = Inv_Part_Order_Pnt_Rep_Rep
-----------------------------------------------------------------------------

--   substr(&CONTRACT||','||&PLANNER_BUYER||','||&SECOND_COMMODITY||','||Inventory_Part_API.Get_Lead_Time_Code(&contract, &part_no),1,2000)      BREAK_GROUP,

PROMPT Creating report view &REPVIEW

CREATE OR REPLACE VIEW &REPVIEW AS
SELECT RESULT_KEY                    RESULT_KEY,
       ROW_NO                        ROW_NO,
       &DOCUMENT_PHRASE              DOCUMENT_PHRASE,
       substr(&CONTRACT||','||&PLANNER_BUYER||','||&SECOND_COMMODITY||','||Inventory_Part_API.Get_Lead_Time_Code(&contract, &part_no),1,2000)      BREAK_GROUP,
       &CONTRACT                     CONTRACT,
       &CONTRACT_DESCRIPTION         CONTRACT_DESCRIPTION,
       &PLANNER_BUYER                PLANNER_BUYER,
       &BUYER_NAME                   BUYER_NAME,
       &SECOND_COMMODITY             SECOND_COMMODITY,
       substr(COMMODITY_GROUP_API.Get_Description(&SECOND_COMMODITY),1,35)      COMMODITY_DESC,
       &PART_NO                      PART_NO,
       &DESCRIPTION                  DESCRIPTION,
       Inventory_Part_API.Get_Lead_Time_Code(&contract, &part_no) LEAD_TIME_CODE,
       &UNIT_MEAS                    UNIT_MEAS,
       &PURCH_LEADTIME               PURCH_LEADTIME,
       &MPR_ORDER_CODE               MPR_ORDER_CODE,
       &SAFETY_STOCK                 SAFETY_STOCK,
       &ORDER_POINT                  ORDER_POINT,
       &QTY_ONHAND                   QTY_ONHAND,
       &ORDER_PURCH                  ORDER_PURCH,
       &QTY_ALLOCATED                QTY_ALLOCATED,
       &QTY_ORDERED                  QTY_ORDERED,
       &ORDER_DATE                   ORDER_DATE,
       substr(Document_Text_API.Get_All_Notes(&note_id,&DOC_ID),1,2000)         NOTE,
       substr(Document_Text_API.Get_All_Notes(&note_id_purch,&DOC_ID),1,2000)   NOTE_PURCH,
       &WANTED_RECEIPT_DATE          WANTED_RECEIPT_DATE,
       &ORDER_QTY                    ORDER_QTY,
       &TOTAL_COST                   TOTAL_COST,
       &QTY_PREDICTED                QTY_PREDICTED,
       &REQUISITION_NO               REQUISITION_NO,
       NULL                          Q_CONTRACT,
       NULL                          Q_PART_NO,
       NULL                          Q_SECOND_COMMODITY,
       NULL                          Q_PLANNER_BUYER,
       TO_DATE(NULL)                 Q_ORDER_DATE,
       NULL                          Q_CREATE_REQ,
       NULL                          Q_DELETE_REQ,
       NULL                          Q_AUTHORIZE_CODE,
       NULL                          Q_RECALC_DATA,
       TO_NUMBER(NULL)               Q_PERIODS,
       NULL                          Q_ALL_PARTS,
       NULL                          Q_PROCESS_PUR,
       NULL                          Q_PROCESS_SHP,
       NULL                          Q_VENDOR_NO,
       NULL                          Q_ROUTE_ID
FROM   &VIEW_RPV
WITH   read only;

COMMENT ON TABLE &REPVIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Inventory Order Report^';

COMMENT ON COLUMN &REPVIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &REPVIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';   
COMMENT ON COLUMN &REPVIEW..document_phrase
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Phrase^';
COMMENT ON COLUMN &REPVIEW..break_group IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Break Group^ITEM_NAME=iBreakGroup^';
COMMENT ON COLUMN &REPVIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Site:^ITEM_NAME=iSite^';
COMMENT ON COLUMN &REPVIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Site Name^ITEM_NAME=iSiteName^';
COMMENT ON COLUMN &REPVIEW..lead_time_code IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Acquisition Type:^ITEM_NAME=iLeadTimeCode^';
COMMENT ON COLUMN &REPVIEW..planner_buyer IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Planner:^ITEM_NAME=iPlanner^';
COMMENT ON COLUMN &REPVIEW..buyer_name IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Planner Name^ITEM_NAME=iPlannerName^';
COMMENT ON COLUMN &REPVIEW..second_commodity IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Commodity Group 2:^ITEM_NAME=iCommodityGroup^';
COMMENT ON COLUMN &REPVIEW..commodity_desc IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Commodity Desc^ITEM_NAME=iCommodityDesc^';
COMMENT ON COLUMN &REPVIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part Number^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &REPVIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &REPVIEW..unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=U/M^ITEM_NAME=iUnitMeas^';
COMMENT ON COLUMN &REPVIEW..purch_leadtime IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Lead Time^ITEM_NAME=iPurchLeadtime^';
COMMENT ON COLUMN &REPVIEW..mpr_order_code IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=MRP Code^ITEM_NAME=iMprOrderCode^';
COMMENT ON COLUMN &REPVIEW..safety_stock IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Safety Stock^ITEM_NAME=iSafetyStock^';
COMMENT ON COLUMN &REPVIEW..order_point IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Point^ITEM_NAME=iOrderPoint^';
COMMENT ON COLUMN &REPVIEW..qty_onhand IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty Onhand^ITEM_NAME=iQtyOnhand^';
COMMENT ON COLUMN &REPVIEW..order_purch IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty Awaited^ITEM_NAME=iOrderPurch^';
COMMENT ON COLUMN &REPVIEW..qty_allocated IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty Allocated^ITEM_NAME=iQtyAllocated^';
COMMENT ON COLUMN &REPVIEW..qty_ordered IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty Proposed^ITEM_NAME=iQtyProposed^';
COMMENT ON COLUMN &REPVIEW..order_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Due Date^ITEM_NAME=iOrderDate^';
COMMENT ON COLUMN &REPVIEW..note IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Note^ITEM_NAME=iNote^';
COMMENT ON COLUMN &REPVIEW..note_purch IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Note^ITEM_NAME=iNotePurch^';
COMMENT ON COLUMN &REPVIEW..wanted_receipt_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Wanted Receipt Date^ITEM_NAME=iWantedReceiptDate^';
COMMENT ON COLUMN &REPVIEW..order_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Point Qty^ITEM_NAME=iOrderQty^';
COMMENT ON COLUMN &REPVIEW..total_cost IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cost^ITEM_NAME=iTotalCost^';
COMMENT ON COLUMN &REPVIEW..qty_predicted IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Predict Consumption^ITEM_NAME=iQtyPredicted^';
COMMENT ON COLUMN &REPVIEW..requisition_no IS
   'FLAGS=A----^DATATYPE=VARCHAR2(12)^TITLE=Requisition/Order No^ITEM_NAME=iRequisitionNo^';
COMMENT ON COLUMN &REPVIEW..q_contract IS
   'FLAGS=A----^DATATYPE=STRING(5)^QUERY=Site^';
COMMENT ON COLUMN &REPVIEW..q_part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^QUERY=Part Number^';
COMMENT ON COLUMN &REPVIEW..q_second_commodity IS
   'FLAGS=A----^DATATYPE=STRING(25)^QUERY=Commodity Group 2^';
COMMENT ON COLUMN &REPVIEW..q_planner_buyer IS
   'FLAGS=A----^DATATYPE=STRING(3)^QUERY=Planner^';
COMMENT ON COLUMN &REPVIEW..q_order_date IS
   'FLAGS=A----^DATATYPE=DATE^QUERY=Planned Date^';
COMMENT ON COLUMN &REPVIEW..q_create_req IS
   'FLAGS=A----^DATATYPE=STRING(2000)^QUERY=Create Requisitions/Order^';
COMMENT ON COLUMN &REPVIEW..q_delete_req IS
   'FLAGS=A----^DATATYPE=STRING(2000)^QUERY=Delete Requisitions^';
COMMENT ON COLUMN &REPVIEW..q_authorize_code IS
   'FLAGS=A----^DATATYPE=STRING(20)^QUERY=PO Coordinator^';
COMMENT ON COLUMN &REPVIEW..q_recalc_data IS
   'FLAGS=A----^DATATYPE=STRING(35)^QUERY=Calculate Planning Data^';
COMMENT ON COLUMN &REPVIEW..q_periods IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Periods^';
COMMENT ON COLUMN &REPVIEW..q_all_parts IS
   'FLAGS=A----^DATATYPE=STRING(35)^QUERY=Only parts with activity^';
COMMENT ON COLUMN &REPVIEW..q_process_pur IS
   'FLAGS=A----^DATATYPE=STRING(35)^QUERY=Process purchased parts^';
COMMENT ON COLUMN &REPVIEW..q_process_shp IS
   'FLAGS=A----^DATATYPE=STRING(35)^QUERY=Process manufactured parts^';
COMMENT ON COLUMN &REPVIEW..q_vendor_no IS
   'FLAGS=A----^DATATYPE=STRING(20)^QUERY=Supplier ID^';
COMMENT ON COLUMN &REPVIEW..q_route_id IS
   'FLAGS=A----^DATATYPE=STRING(12)^QUERY=Route ID^';
BEGIN   
   Report_SYS.Define_Report_('&REPVIEW', '&MODULE', '&LU', 'Inventory Order Report', '&REP1TAB', '&PKG..Create_Report_Line', 0, NULL, NULL, NULL, 'LOG','TRUE','Warehouse Management','Warehouse Operations');
   Report_SYS.Refresh_('&REPVIEW');
   -- Adding custom fields
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&REPVIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&REPVIEW','InventoryPartPlanning','INV_PART_ORDER_PNT_REP_REP/ORDER_POINT_HEADERS/ORDER_POINT_HEADER/ORDER_POINT_DETAILS/ORDER_POINT_DETAIL');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&REPVIEW','InventoryPart','INV_PART_ORDER_PNT_REP_REP/ORDER_POINT_HEADERS/ORDER_POINT_HEADER/ORDER_POINT_DETAILS/ORDER_POINT_DETAIL');
END;
/


-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     Inv_Part_Order_Pnt_Rep_Rpi
-----------------------------------------------------------------------------
PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS 
 
-----------------------------------------------------------------------------
-- Purpose:                   Make Order Point Requisitions
-----------------------------------------------------------------------------
PROCEDURE Create_Report_Line (
   attrib_             IN     VARCHAR2,
   result_key_         IN     NUMBER,
   rows_fetched_       IN OUT NUMBER,
   xml_                IN OUT CLOB, 
   contract_           IN     VARCHAR2,
   part_no_            IN     VARCHAR2,
   part_description_   IN     VARCHAR2,
   unit_meas_          IN     VARCHAR2,
   purch_leadtime_     IN     NUMBER,
   planner_buyer_      IN     VARCHAR2,
   second_commodity_   IN     VARCHAR2,
   mrp_order_code      IN     VARCHAR2,
   safety_stock_       IN     VARCHAR2,
   order_point_qty_    IN     NUMBER,
   order_qty_          IN     NUMBER,
   qty_predicted_      IN     NUMBER,
   qty_supply_         IN     NUMBER,
   qty_demand_         IN     NUMBER,
   note_id_            IN     NUMBER,
   note_id_purch_      IN     NUMBER,
   create_new_header_  IN     VARCHAR2,
   close_old_header_   IN     VARCHAR2 )
IS
   ptr_                    NUMBER;
   name_                   VARCHAR2(30);
   info_                   VARCHAR2(2000);
   value_                  VARCHAR2(2000);
   t_contract_             VARCHAR2(5);
   t_part_no_              VARCHAR2(35);
   requisition_no_         VARCHAR2(100);
   qty_ordered_            NUMBER;
   total_cost_             NUMBER;
   date_req_               DATE;
   contract_desc_          VARCHAR2(25);
   buyer_name_             VARCHAR2(100);
   qty_onhand_             NUMBER;
   configuration_id_       VARCHAR2(50);
   do_xml_                 BOOLEAN := Report_SYS.Should_Generate_Xml('&REPVIEW');
   do_rs_                  BOOLEAN := Report_SYS.Should_Generate_Result_Set('&REPVIEW');
   language_code_          VARCHAR2(4);
   phrase_text_            VARCHAR2(2000);
   phrase_on_document_tab_ Phrase_On_Document_API.Phrase_Id_Tab;
   row_no_                 NUMBER := 0;

   ip_rowkey_              VARCHAR2(50);
   ipp_rowkey_             VARCHAR2(50);

   CURSOR get_rowkeys IS
      SELECT ip.rowkey, ipp.rowkey
        FROM inventory_part_planning_tab ipp, inventory_part_tab ip
       WHERE ipp.contract = ip.contract
         AND ipp.part_no  = ip.part_no
         AND ip.contract = t_contract_
         AND ip.part_no = t_part_no_;
BEGIN 
   General_SYS.Init_Method(lu_name_, 'INV_PART_ORDER_PNT_REP_RPI', 'Create_Report_Line');
   ptr_  := NULL;
   info_ := 'ATTRERR: Error in INV_PART_ORDER_PNT_REP_RPI.Make_Order_Point_Req__ when unpacking:  :P1 .';

   IF(create_new_header_ = 'Y') THEN
      IF (do_xml_) THEN
         IF close_old_header_ = 'Y' THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_POINT_DETAILS');
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_POINT_HEADER');
         END IF;
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_POINT_HEADER');
         Xml_Record_Writer_SYS.Add_Element(xml_,'LEAD_TIME_CODE', Inventory_Part_API.Get_Lead_Time_Code(contract_, part_no_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMMODITY_DESC', Commodity_Group_API.Get_Description(second_commodity_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'SECOND_COMMODITY', second_commodity_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BUYER_NAME', Inventory_Part_Planner_API.Get_Buyer_Name(planner_buyer_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'PLANNER_BUYER', planner_buyer_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', Site_API.Get_Description(contract_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);

         language_code_ := Language_Sys.Get_Language;
         IF (language_code_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
            END IF;
            
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab( 'ORDPNT', NULL, contract_);
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrase_text_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrase_text_ IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrase_text_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REP1TAB (
                                              result_key, row_no, parent_row_no, &DOCUMENT_PHRASE )
                        VALUES (
                                result_key_, rows_fetched_, 0, phrase_text_);
                     END IF;
                     rows_fetched_ := rows_fetched_ + 1;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
            END IF;
         END IF;
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_POINT_DETAILS');
      END IF;
   END IF;

   LOOP  
      IF (Client_SYS.Get_Next_From_Attr(attrib_, ptr_, name_,value_)) THEN
         Trace_SYS.Message(name_||'-'||value_);
         IF (name_ = 'CONTRACT') THEN
            t_contract_ := value_;
         ELSIF (name_ != 'CONTRACT')OR ( t_contract_ !=  contract_)  THEN
            -- Logg the error in F1
            Trace_SYS.Message('CONTRACT'||name_||','||value_);
            Transaction_SYS.Set_Status_Info( Language_SYS.Translate_Constant(lu_name_,info_,'CONTRACT'));
            EXIT;
         END IF;
      ELSE
         Trace_SYS.Message('CONTRACT');
         EXIT;
      END IF;
      IF (Client_SYS.Get_Next_From_Attr(attrib_, ptr_, name_,value_)) THEN                  
         Trace_SYS.Message(name_||'-'||value_);
         IF (name_ = 'PART_NO') THEN
            t_part_no_ := value_;
         ELSIF (name_ != 'PART_NO') OR (t_part_no_ !=  part_no_) THEN
            -- Logg the error in F1
            Trace_SYS.Message('PART_NO');
            Transaction_SYS.Set_Status_Info( Language_SYS.Translate_Constant(lu_name_,info_,'PART_NO'));
            EXIT;          
         END IF;
      ELSE
         Trace_SYS.Message('PART_NO');
         EXIT;
      END IF;
      OPEN get_rowkeys;
      FETCH get_rowkeys INTO ip_rowkey_, ipp_rowkey_;
      CLOSE get_rowkeys;

      -- Configuration_id will not be printed out in the report but is a part of the 
      -- attribute string for future use of it
      IF (Client_SYS.Get_Next_From_Attr(attrib_, ptr_, name_,value_)) THEN 
        Trace_SYS.Message(name_||'-'||value_);
        IF (name_ = 'CONFIGURATION_ID') THEN
            configuration_id_ := value_;
         ELSE
            -- Logg the error in F1
            Trace_SYS.Message('CONFIGURATION_ID');
            Transaction_SYS.Set_Status_Info( Language_SYS.Translate_Constant(lu_name_,info_,'CONFIGURATION_ID'));
            EXIT;          
          END IF;
      ELSE
         Trace_SYS.Message('CONFIGURATION_ID');
         EXIT;
      END IF;
      
      IF (Client_SYS.Get_Next_From_Attr(attrib_, ptr_, name_,value_)) THEN         
         Trace_SYS.Message(name_);
         IF (name_ = 'REQUISITION_NO') THEN
            requisition_no_  := value_; 
         ELSE
            Trace_SYS.Message('REQUISITION_NO');
            -- Logg the error in F1
            Transaction_SYS.Set_Status_Info( Language_SYS.Translate_Constant(lu_name_,info_,'REQUISITION_NO'));
            EXIT;           
         END IF;
      ELSE
         Trace_SYS.Message('REQUISITION_NO');
         EXIT;
      END IF;
      IF (Client_SYS.Get_Next_From_Attr(attrib_, ptr_, name_,value_ )) THEN         
         Trace_SYS.Message(name_);
         IF (name_ = 'QTY_ORDERED') THEN
            qty_ordered_:= Client_SYS.Attr_Value_To_Number(value_);
         ELSE 
            Trace_SYS.Message('QTY_ORDERED');
            -- Logg the error in F1
            Transaction_SYS.Set_Status_Info( Language_SYS.Translate_Constant(lu_name_,info_,'QTY_ORDERED'));
            EXIT;
         END IF;
      ELSE
         Trace_SYS.Message('QTY_ORDERED');
         EXIT;
      END IF;
      IF (Client_SYS.Get_Next_From_Attr(attrib_, ptr_, name_,value_ )) THEN
         Trace_SYS.Message(name_);
         IF (name_ = 'DATE_REQ') THEN
            date_req_:= Client_SYS.Attr_Value_To_Date(value_);
         ELSE
            Trace_SYS.Message('DATE_REQ');
            -- Logg the error in F1
            Transaction_SYS.Set_Status_Info( Language_SYS.Translate_Constant(lu_name_,info_,'DATE_REQ'));
            EXIT;
         END IF;
      ELSE
         Trace_SYS.Message('DATE_REQ');
         EXIT;
      END IF;
      Trace_SYS.Message('got:'||requisition_no_||' . '||qty_ordered_||' . '||date_req_);
      --
      -- Get total cost from InventoryPartCost, cost set 1.
      --
      total_cost_ := Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Config(contract_,part_no_,'*');
      Trace_SYS.Message('Inventory Part Cost data - total_cost_ = '||to_char(total_cost_));

      contract_desc_ := Site_API.Get_Description(contract_);
      buyer_name_    := Inventory_Part_Planner_API.Get_Buyer_Name(planner_buyer_);

      -- Order proposal should only work for non configured parts
      qty_onhand_ := Inventory_Part_In_Stock_API.Get_Inventory_Quantity(contract_             => contract_,
                                                                        part_no_              => part_no_,
                                                                        configuration_id_     => '*',
                                                                        qty_type_             => 'ONHAND',
                                                                        ownership_type1_db_   => Part_Ownership_API.DB_COMPANY_OWNED,
                                                                        ownership_type2_db_   => Part_Ownership_API.DB_CONSIGNMENT,
                                                                        location_type1_db_    => 'PICKING',
                                                                        location_type2_db_    => 'F',
                                                                        location_type3_db_    => 'MANUFACTURING',
                                                                        location_type4_db_    => 'SHIPMENT',
                                                                        include_standard_     => 'TRUE',
                                                                        include_project_      => 'FALSE');
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_POINT_DETAIL');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_ORDERED', qty_ordered_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_ALLOCATED', qty_demand_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_PURCH', qty_supply_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_ONHAND', NVL(qty_onhand_,0));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_POINT', order_point_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SAFETY_STOCK', safety_stock_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'MPR_ORDER_CODE', mrp_order_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PURCH_LEADTIME', purch_leadtime_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'UNIT_MEAS', unit_meas_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', part_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', part_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REQUISITION_NO', requisition_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_PREDICTED', qty_predicted_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_COST', total_cost_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_QTY', order_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WANTED_RECEIPT_DATE', date_req_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NOTE_PURCH', Document_Text_API.Get_All_Notes(note_id_purch_,&DOC_ID));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NOTE', Document_Text_API.Get_All_Notes(note_id_, &DOC_ID));
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'InventoryPartPlanning', ipp_rowkey_, '&REPVIEW');
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'InventoryPart', ip_rowkey_, '&REPVIEW');

         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_POINT_DETAIL');
      END IF;

      IF (do_rs_) THEN
         INSERT INTO &REP1TAB
                     (RESULT_KEY,
                      ROW_NO,
                      PARENT_ROW_NO,
                      &CONTRACT,
                      &CONTRACT_DESCRIPTION,
                      &PLANNER_BUYER,
                      &BUYER_NAME,
                      &SECOND_COMMODITY,
                      &PART_NO,
                      &DESCRIPTION,
                      &UNIT_MEAS,
                      &PURCH_LEADTIME,
                      &MPR_ORDER_CODE,
                      &SAFETY_STOCK,
                      &ORDER_POINT,
                      &QTY_ONHAND,
                      &ORDER_PURCH,
                      &QTY_ALLOCATED,
                      &QTY_ORDERED,
                      &NOTE_ID,
                      &NOTE_ID_PURCH,
                      &WANTED_RECEIPT_DATE,
                      &ORDER_QTY,
                      &TOTAL_COST,
                      &QTY_PREDICTED,
                      &REQUISITION_NO)
                  VALUES
                     (result_key_,
                      rows_fetched_,
                      1,
                      contract_,
                      contract_desc_,
                      planner_buyer_,
                      buyer_name_,
                      second_commodity_,
                      part_no_,
                      part_description_,
                      unit_meas_,
                      purch_leadtime_,
                      mrp_order_code,
                      safety_stock_,
                      order_point_qty_,
                      NVL(qty_onhand_,0),
                      qty_supply_,
                      qty_demand_,
                      qty_ordered_,
                      note_id_,
                      note_id_purch_,
                      date_req_,
                      order_qty_,
                      total_cost_,
                      qty_predicted_,
                      requisition_no_);
         --Transaction_Statement_Approved GanNLK 20120125
         COMMIT;
      END IF;
      rows_fetched_ := rows_fetched_ + 1;
   END LOOP;
END Create_Report_Line;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR


UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REP1TAB
UNDEFINE REPVIEW
--UNDEFINE REPMETHOD
UNDEFINE VIEW1
UNDEFINE DOC_ID
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE PLANNER_BUYER
UNDEFINE BUYER_NAME
UNDEFINE SECOND_COMMODITY
UNDEFINE PART_NO
UNDEFINE DESCRIPTION
UNDEFINE UNIT_MEAS
UNDEFINE PURCH_LEADTIME
UNDEFINE MPR_ORDER_CODE
UNDEFINE SAFETY_STOCK
UNDEFINE ORDER_POINT
UNDEFINE QTY_ONHAND
UNDEFINE ORDER_PURCH
UNDEFINE QTY_ALLOCATED
UNDEFINE QTY_ORDERED
UNDEFINE ORDER_DATE
UNDEFINE NOTE_ID
UNDEFINE NOTE_ID_PURCH
UNDEFINE WANTED_RECEIPT_DATE
UNDEFINE ORDER_QTY
UNDEFINE TOTAL_COST
UNDEFINE QTY_PREDICTED
UNDEFINE REQUISITION_NO
UNDEFINE VIEW_RPV
UNDEFINE DOCUMENT_PHRASE
