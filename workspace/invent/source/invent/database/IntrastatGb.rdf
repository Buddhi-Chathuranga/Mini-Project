-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File:         IntrastatGb.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  160526  Chgulk  STRLOC-473, Added new address fields.
--  121016  PraWlk  Bug 105887, Removed SUBSTR to avoid length restriction of customs statistics number description. 
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Great Britain'
--  120410  AyAmlk  Bug 100608, Increased the column length of delivery_terms to 5 in view INTRASTAT_GB_REP.
--  120221  TiRalk  Bug 100356, Modified CURSOR get_lines by altering invoiced_amount to include charge amounts.
--  110323  PraWlk  Bug 95757, Modified Report_Overview() by adding delivery terms DAT and DAP to the cursor get_lines.
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  101110  GayDLK  Bug 94088, Added two new delivery terms 'DAF' and 'FCA' to the DECODE function in 
--  101110          SELECT and GROUP BY clauses of the get_lines CURSOR.
--  090929  PraWlk  Bug 85516, Increased the length of commodity_code_desc_ to 200.
--  090601  SaWjlk  Bug 83173, Removed the prog text duplications.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  060908  IsWilk  Removed the qrp entries.
--  060823  DaZase  Added COUNTRY_DEST_TITLE to the xml clob.
--  060515  IsAnlk  Enlarge Address - Changed variable definitions.
--  060511  DaZase  Bug 57442 Report Designer handling and Layout added.
---------------------------------13.4.0--------------------------------------
--  060110  MarSlk  Bug 55277, Introduced variable rounded_invoiced_amount_ and 
--  060110          assigned the rounded value of invoiced_amount.The variable has  
--  060110          been used where appropiate. The ROUND function has been 
--  060110          removed in the TOTAL_INV_VALUE.
--  060106  RoJalk Bug 55090, Modified the get_lines cursor in Report_Overview
--  060106         to include additional cost amount in invoiced_amount calculation. 
--  051216  SuJalk  Changed VIEW_RPV to TABLE in COMMENT ON TABLE.
--  050921  NiDalk  Removed unused variables.
--  050906  JaBalk  Changed the SUBSTRB to SUBSTR and length of variable commodity_code_desc_ to 35.
--  050107  DiVelk  Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  040924  ChJalk  Bug 46743, Modified the length of the variable commodity_code_desc_ and assigned only the
--  040924          first 35 characters to the variable.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INTRASTAT_GB_REP.
--  040301  GeKalk  Replaced substrb with substr for UNICODE modifications.
--  ---------------- EDGE Package Group 3 Unicode Changes --------------------
--  040203  NaWalk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.  
--  040202  NaWalk  Removed the fourth variable of DBMS_SQL inside the loop,for Unicode modification.
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  020312  DaZa  Bug fix 28308, added ABS on intrastat_alt_qty so we dont get "-x * -y results" when we multiply with the regular qty.
--  020217  IsAn  A4/Letter conversion.
--  010322  DaZa  Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_GB_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_GB_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define COMPANY_NAME       = S1
define COMPANY_VAT_NO     = S2
define COMPANY_ADDRESS1   = S3
define COMPANY_ADDRESS2   = S4
define COMPANY_ADDRESS3   = S24
define COMPANY_ADDRESS4   = S25
define COMPANY_ADDRESS5   = S26
define COMPANY_ADDRESS6   = S27
define COMPANY_CITY_ZIP   = S5
define REPR_NAME          = S6
define REPR_VAT_NO        = S7
define REPR_ADDRESS1      = S8
define REPR_ADDRESS2      = S9
define REPR_ADDRESS3      = S28
define REPR_ADDRESS4      = S29
define REPR_ADDRESS5      = S30
define REPR_ADDRESS6      = S31
define REPR_CITY_ZIP      = S10
define CURRENCY_CODE      = S11
define REPORTING_PERIOD   = S12
define CREATION_DATE      = S13
define CURRENCY_CODE      = S14
define NO_OF_LINES        = N1
define REPORT_TITLE       = S15
define COUNTRY_DEST_TITLE = S16
define TOTAL_INV_VALUE    = N2

define LINE_NO            = N3
define COUNTRY_OF_ORIGIN  = S17
define COUNTRY_OF_DEST    = S18
define NOTC               = S19
define MODE_OF_TRANSPORT  = S20
define COMMODITY_CODE     = S21
define COMMODITY_CODE_DESC = S22
define DELIVERY_TERMS     = S23
define NET_WEIGHT         = N4
define ALT_QTY            = N5
define INVOICED_VALUE     = N6


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&COMPANY_ADDRESS1                     COMPANY_ADDRESS1,
       H.&COMPANY_ADDRESS2                     COMPANY_ADDRESS2,
       H.&COMPANY_ADDRESS3                     COMPANY_ADDRESS3,
       H.&COMPANY_ADDRESS4                     COMPANY_ADDRESS4,
       H.&COMPANY_ADDRESS5                     COMPANY_ADDRESS5,
       H.&COMPANY_ADDRESS6                     COMPANY_ADDRESS6,
       H.&COMPANY_CITY_ZIP                     COMPANY_CITY_ZIP,
       H.&REPR_NAME                            REPR_NAME,
       H.&REPR_VAT_NO                          REPR_VAT_NO,
       H.&REPR_ADDRESS1                        REPR_ADDRESS1,
       H.&REPR_ADDRESS2                        REPR_ADDRESS2,
       H.&REPR_ADDRESS3                        REPR_ADDRESS3,
       H.&REPR_ADDRESS4                        REPR_ADDRESS4,
       H.&REPR_ADDRESS5                        REPR_ADDRESS5,
       H.&REPR_ADDRESS6                        REPR_ADDRESS6,
       H.&REPR_CITY_ZIP                        REPR_CITY_ZIP,       
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE, 
       H.&COUNTRY_DEST_TITLE                   COUNTRY_DEST_TITLE,
       H.&TOTAL_INV_VALUE                      TOTAL_INV_VALUE,
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&NOTC                                 NOTC,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&COMMODITY_CODE                       COMMODITY_CODE,
       D.&COMMODITY_CODE_DESC                  COMMODITY_CODE_DESC,
       D.&DELIVERY_TERMS                       DELIVERY_TERMS,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_QTY                              ALT_QTY,
       D.&INVOICED_VALUE                       INVOICED_VALUE,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Tax No and Branch No:^ITEM_NAME=iCompanyVatNo^';  
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress1^';   
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress2^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress3^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress4^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress5^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress6^';
COMMENT ON COLUMN &VIEW..COMPANY_CITY_ZIP IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyCityZip^';
COMMENT ON COLUMN &VIEW..REPR_NAME IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative name:^ITEM_NAME=iReprName^';  
COMMENT ON COLUMN &VIEW..REPR_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Tax No and Branch No:^ITEM_NAME=iReprVatNo^';  
COMMENT ON COLUMN &VIEW..REPR_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprAddress1^';   
COMMENT ON COLUMN &VIEW..REPR_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprAddress2^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress3^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress4^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress5^';
COMMENT ON COLUMN &VIEW..REPR_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Address:^ITEM_NAME=iReprAddress6^';
COMMENT ON COLUMN &VIEW..REPR_CITY_ZIP IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Representative Address:^ITEM_NAME=iReprCityZip^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting Currency code:^ITEM_NAME=iCurrencyCode^'; 
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of lines:^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report title^ITEM_NAME=iReportTitle^';   
COMMENT ON COLUMN &VIEW..COUNTRY_DEST_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Country of Destination title^ITEM_NAME=iCountryDestTitle^';                  
COMMENT ON COLUMN &VIEW..TOTAL_INV_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value:^ITEM_NAME=iTotalInvValue^';
   
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Dispatch^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..NOTC IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iNotc^';  
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..COMMODITY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Commodity Code^ITEM_NAME=iCommodityCode^';
COMMENT ON COLUMN &VIEW..COMMODITY_CODE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Commodity Code Description^ITEM_NAME=iCommodityCodeDesc^';   
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Delivery Terms^ITEM_NAME=iDeliveryTerms^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Quantity^ITEM_NAME=iAltQty^';
COMMENT ON COLUMN &VIEW..INVOICED_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvoicedValue^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';
   

BEGIN 
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Great Britain','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_GB_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
  
   file_line_no_              NUMBER := 0;
   vat_no_                    VARCHAR2(50);
   stmt_                      VARCHAR2(2000);
   result_key_                NUMBER;
   row_no_                    NUMBER := 1;
   parent_row_no_             NUMBER := 0;
   report_title_              VARCHAR2(50);
   intrastat_id_              NUMBER;
   intrastat_direction_       VARCHAR2(20);
   rep_curr_rate_             NUMBER;
   country_code_              VARCHAR2(2);   
   co_addr_id_                Company_Address_Pub.address_id%TYPE;
   repr_addr_id_              VARCHAR2(50);
   report_period_             VARCHAR2(4);
   creation_date_str_         VARCHAR2(8);
   company_vat_no_            VARCHAR2(35);
   company_name_              VARCHAR2(35);
   company_address6_          VARCHAR2(100);
   company_address5_          VARCHAR2(100);
   company_address4_          VARCHAR2(100);
   company_address3_          VARCHAR2(100);
   company_address2_          VARCHAR2(35);
   company_address1_          VARCHAR2(35);
   company_city_zip_          VARCHAR2(35);
   repr_vat_no_               VARCHAR2(35);
   repr_name_                 VARCHAR2(35);
   repr_address6_             VARCHAR2(100);
   repr_address5_             VARCHAR2(100);
   repr_address4_             VARCHAR2(100);
   repr_address3_             VARCHAR2(100);
   repr_address2_             VARCHAR2(35);
   repr_address1_             VARCHAR2(35);
   repr_city_zip_             VARCHAR2(35);
   notc_dummy_                VARCHAR2(2); 
   commodity_code_desc_       VARCHAR2(2000);
   country_destination_title_ VARCHAR2(50);
   sum_invoiced_amount_       NUMBER := 0;
   rounded_invoiced_amount_   NUMBER := 0;

   do_xml_                    BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                     BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                       CLOB;
   package_name_              VARCHAR2(100) := 'INTRASTAT_GB_REP';

   CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc = notc_
      AND    country_code = 'GB';   

   CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             creation_date,
             rep_curr_code,
             bransch_no,
             bransch_no_repr,
             company_contact,
             rep_curr_rate,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;


   CURSOR get_lines IS
      SELECT il.customs_stat_no,
             DECODE(il.delivery_terms, 'EXW','EXW', 
                                       'FOB','FOB',
                                       'FAS','FAS',
                                       'CIF','CIF',
                                       'DEQ','DEQ',
                                       'DES','DES',
                                       'CPT','CPT',
                                       'CIP','CIP',
                                       'CFR','CFR',
                                       'DAF','DAF',
                                       'FCA','FCA',
                                       'DDU','DDU',
                                       'DDP','DDP',
                                       'DAT','DAT',
                                       'DAP','DAP','XXX') delivery_terms,
             cn.country_notc,                
             il.opposite_country,
             DECODE(intrastat_direction_, 'IMPORT', il.country_of_origin, '') country_of_origin,
             il.mode_of_transport,
             SUM(il.quantity * il.net_unit_weight)                            net_weight_sum,
             SUM(ABS(il.intrastat_alt_qty) * il.quantity)                     intrastat_alt_qty_sum,
             SUM((NVL(il.invoiced_unit_price, il.order_unit_price) +
             NVL(il.unit_add_cost_amount_inv, NVL(il.unit_add_cost_amount,0)) +
             NVL(il.unit_charge_amount_inv,0) + NVL(il.unit_charge_amount,0)) * il.quantity ) * rep_curr_rate_ invoiced_amount
      FROM   intrastat_line_tab il, country_notc_tab cn
      WHERE  il.intrastat_id = intrastat_id_
      AND    il.intrastat_direction = intrastat_direction_
      AND    il.rowstate = 'Released'        
      AND    il.notc = cn.notc      
      AND    cn.country_code = country_code_      
      GROUP BY  il.customs_stat_no,
                DECODE(il.delivery_terms, 'EXW','EXW', 
                                          'FOB','FOB',
                                          'FAS','FAS',
                                          'CIF','CIF',
                                          'DEQ','DEQ',
                                          'DES','DES',
                                          'CPT','CPT',
                                          'CIP','CIP',
                                          'CFR','CFR',
                                          'DAF','DAF',
                                          'FCA','FCA',
                                          'DDU','DDU',
                                          'DDP','DDP',
                                          'DAT','DAT',
                                          'DAP','DAP','XXX'),
                cn.country_notc,                
                il.opposite_country,
                DECODE(intrastat_direction_, 'IMPORT', il.country_of_origin, ''),
                il.mode_of_transport;


BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_          := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_        := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN 
      report_title_              := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTGB: INTRASTAT Export Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'EXPORTCD: Country of Destination');
   ELSE
      report_title_              := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTGB: INTRASTAT Import Report');
      country_destination_title_ := Language_SYS.Translate_Constant(lu_name_, 'IMPORTCD: Country of Dispatch');
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR headrec_ IN get_head LOOP           
      -- check currency
      IF (headrec_.rep_curr_code != 'GBP') THEN
         Error_SYS.Record_General(lu_name_, 'WRONGCURRGB: Currency Code :P1 is not a valid currency, only GBP is acceptable', headrec_.rep_curr_code);
      END IF;
   
      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         -- ifs_assert_safe bmekse 20110309
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;

      -- Remove any country code in the vat numbers
      IF (SUBSTR(vat_no_,1,2) = headrec_.country_code ) THEN
         -- do not include country code in the vat no
         company_vat_no_ := SUBSTR(NVL(vat_no_,' '), 3, 12);
      ELSE
         company_vat_no_ := SUBSTR(NVL(vat_no_,' '), 1, 12);
      END IF;    
      IF (SUBSTR(headrec_.repr_tax_no,1,2) = country_code_) THEN
         -- do not include country code in the vat no
         repr_vat_no_ := SUBSTR(NVL(headrec_.repr_tax_no,' '), 3, 12);               
      ELSE
         repr_vat_no_ := SUBSTR(NVL(headrec_.repr_tax_no,' '), 1, 12);      
      END IF;
  
      report_period_     := TO_CHAR(headrec_.end_date, 'YYMM');         
      creation_date_str_ := TO_CHAR(headrec_.creation_date, 'YYYYMMDD');
      rep_curr_rate_     := headrec_.rep_curr_rate;
      country_code_      := headrec_.country_code;

      IF (headrec_.bransch_no IS NOT NULL) THEN
         company_vat_no_ :=  SUBSTR(company_vat_no_, 1, 12) || '-' || SUBSTR(headrec_.bransch_no, 1, 3);
      END IF;
      co_addr_id_       := Company_Address_API.Get_Default_Address(headrec_.company, 
                                          Address_Type_Code_API.Decode('INVOICE'), headrec_.creation_date);
      company_name_     := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 35);
      company_address1_ := SUBSTR(Company_Address_API.Get_Address1(headrec_.company, co_addr_id_), 1, 35);
      company_address2_ := SUBSTR(Company_Address_API.Get_Address2(headrec_.company, co_addr_id_), 1, 35); 
      company_address3_ := Company_Address_API.Get_Address3(headrec_.company, co_addr_id_);
      company_address4_ := Company_Address_API.Get_Address4(headrec_.company, co_addr_id_);
      company_address5_ := Company_Address_API.Get_Address5(headrec_.company, co_addr_id_);
      company_address6_ := Company_Address_API.Get_Address6(headrec_.company, co_addr_id_);      
      company_city_zip_ := SUBSTR(Company_Address_API.Get_City(headrec_.company, co_addr_id_), 1, 29) || ' ' ||
                           SUBSTR(Company_Address_API.Get_Zip_Code(headrec_.company, co_addr_id_), 1, 5);
  
      IF (headrec_.representative IS NOT NULL) THEN
         IF (headrec_.bransch_no_repr IS NOT NULL) THEN
            repr_vat_no_ :=  SUBSTR(repr_vat_no_, 1, 12) || '-' || SUBSTR(headrec_.bransch_no_repr, 1, 3);      
         END IF;
         repr_addr_id_  := Person_Info_Address_API.Get_Default_Address(headrec_.representative, 
                                       Address_Type_Code_API.Decode('VISIT'), headrec_.creation_date);
         repr_name_     := SUBSTR(Person_Info_API.Get_Name(headrec_.representative), 1, 35);
         repr_address1_ := SUBSTR(Person_Info_Address_API.Get_Address1(headrec_.representative, repr_addr_id_), 1, 35);
         repr_address2_ := SUBSTR(Person_Info_Address_API.Get_Address2(headrec_.representative, repr_addr_id_), 1, 35);
         repr_address3_ := Person_Info_Address_API.Get_Address3(headrec_.representative, repr_addr_id_);  
         repr_address4_ := Person_Info_Address_API.Get_Address4(headrec_.representative, repr_addr_id_);  
         repr_address5_ := Person_Info_Address_API.Get_Address5(headrec_.representative, repr_addr_id_);  
         repr_address6_ := Person_Info_Address_API.Get_Address6(headrec_.representative, repr_addr_id_);          
         repr_city_zip_ := SUBSTR(Person_Info_Address_API.Get_City(headrec_.representative, repr_addr_id_), 1, 29) || ' ' ||
                           SUBSTR(Person_Info_Address_API.Get_Zip_Code(headrec_.representative, repr_addr_id_), 1, 5);
      END IF;
         
      IF (do_xml_) THEN         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPORT_TITLE', report_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CREATION_DATE', creation_date_str_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPORTING_PERIOD', report_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CURRENCY_CODE', headrec_.rep_curr_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_CITY_ZIP', repr_city_zip_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_6', repr_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_5', repr_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_4', repr_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_3', repr_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_2', repr_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_ADDRESS_1', repr_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_VAT_NO', repr_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPR_NAME', repr_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_CITY_ZIP', company_city_zip_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_6', company_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_5', company_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_4', company_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_3', company_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_2', company_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS_1', company_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_VAT_NO', company_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_NAME', company_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COUNTRY_DEST_TITLE', country_destination_title_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',headrec_.rowkey, '&VIEW');

         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_GB_LINES');
      END IF;
      IF (do_rs_) THEN
         -- Insert Head details
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, 
             &COMPANY_NAME, &COMPANY_VAT_NO, &COMPANY_ADDRESS1, 
             &COMPANY_ADDRESS2,&COMPANY_ADDRESS3,&COMPANY_ADDRESS4,
             &COMPANY_ADDRESS5,&COMPANY_ADDRESS6, &COMPANY_CITY_ZIP,
             &REPR_NAME, &REPR_VAT_NO,&REPR_ADDRESS6,&REPR_ADDRESS5,
             &REPR_ADDRESS4,&REPR_ADDRESS3, &REPR_ADDRESS2, 
             &REPR_ADDRESS1, &REPR_CITY_ZIP,           
             &REPORTING_PERIOD, &CREATION_DATE,
             &CURRENCY_CODE, &REPORT_TITLE, &COUNTRY_DEST_TITLE )
         VALUES
            (result_key_, row_no_, parent_row_no_, 
             company_name_, company_vat_no_, company_address1_, 
             company_address2_,company_address3_,company_address4_,
             company_address5_,company_address6_, company_city_zip_,
             repr_name_, repr_vat_no_,repr_address6_,repr_address5_,
             repr_address4_,repr_address3_, repr_address2_, 
             repr_address1_, repr_city_zip_,          
             report_period_, creation_date_str_,
             headrec_.rep_curr_code, report_title_, country_destination_title_ );   
         parent_row_no_ := row_no_;   
         row_no_        := row_no_ + 1;
      END IF;

      -- Data Records
      FOR linerec_ IN get_lines LOOP       
         file_line_no_            := file_line_no_ + 1;
         commodity_code_desc_     := Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no);
         rounded_invoiced_amount_ := ROUND(linerec_.invoiced_amount);

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_GB_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_QTY', round(linerec_.intrastat_alt_qty_sum));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMMODITY_CODE', SUBSTR(linerec_.customs_stat_no,1,8));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMMODITY_CODE_DESC', commodity_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COUNTRY_OF_DEST', linerec_.opposite_country);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS', linerec_.delivery_terms);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICED_VALUE', rounded_invoiced_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', file_line_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MODE_OF_TRANSPORT', linerec_.mode_of_transport);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', ROUND(linerec_.net_weight_sum));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NOTC', linerec_.country_notc);
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_GB_LINE');
         END IF;

         IF (do_rs_) THEN
            -- insert detail rows
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, 
                &NOTC, &MODE_OF_TRANSPORT, 
                &COMMODITY_CODE, &COMMODITY_CODE_DESC, &DELIVERY_TERMS,
                &NET_WEIGHT, &ALT_QTY, 
                &INVOICED_VALUE )
            VALUES
               (result_key_, row_no_, parent_row_no_, file_line_no_, 
                linerec_.country_of_origin, linerec_.opposite_country, 
                linerec_.country_notc, linerec_.mode_of_transport, 
                SUBSTR(linerec_.customs_stat_no,1,8), commodity_code_desc_, linerec_.delivery_terms,
                ROUND(linerec_.net_weight_sum), round(linerec_.intrastat_alt_qty_sum), 
                rounded_invoiced_amount_ );
            row_no_ := row_no_ + 1;
         END IF;

         sum_invoiced_amount_ := sum_invoiced_amount_ + rounded_invoiced_amount_;
      END LOOP;
      
      IF (do_rs_) THEN
         IF (row_no_ = 2) THEN -- no details      
            -- insert blank row
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_ORIGIN, &COUNTRY_OF_DEST, 
                &NOTC, &MODE_OF_TRANSPORT, 
                &COMMODITY_CODE, &DELIVERY_TERMS,
                &NET_WEIGHT, &ALT_QTY, 
                &INVOICED_VALUE )
            VALUES
               (result_key_, row_no_, parent_row_no_, NULL, 
                NULL, NULL, 
                NULL, NULL, 
                NULL, NULL,
                NULL, NULL, 
                NULL );     
         END IF;
         
         -- update the head with no_of_lines and sum
         UPDATE &TABLE
         SET    &NO_OF_LINES = file_line_no_,
                &TOTAL_INV_VALUE = sum_invoiced_amount_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
   
      END IF;
   END LOOP; 

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_GB_LINES');
      Xml_Record_Writer_SYS.Add_Element(xml_, 'NO_OF_LINES', file_line_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_INV_VALUE', sum_invoiced_amount_);
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------





----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE COMPANY_NAME
UNDEFINE COMPANY_VAT_NO
UNDEFINE COMPANY_ADDRESS1
UNDEFINE COMPANY_ADDRESS2
UNDEFINE COMPANY_ADDRESS3
UNDEFINE COMPANY_ADDRESS4
UNDEFINE COMPANY_ADDRESS5
UNDEFINE COMPANY_ADDRESS6
UNDEFINE COMPANY_CITY_ZIP
UNDEFINE REPR_NAME
UNDEFINE REPR_VAT_NO
UNDEFINE REPR_ADDRESS1
UNDEFINE REPR_ADDRESS2
UNDEFINE REPR_ADDRESS3
UNDEFINE REPR_ADDRESS4
UNDEFINE REPR_ADDRESS5
UNDEFINE REPR_ADDRESS6
UNDEFINE REPR_CITY_ZIP
UNDEFINE CURRENCY_CODE
UNDEFINE REPORTING_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE NO_OF_LINES
UNDEFINE REPORT_TITLE
UNDEFINE COUNTRY_DEST_TITLE
UNDEFINE TOTAL_INV_VALUE
UNDEFINE LINE_NO
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE COUNTRY_OF_DEST
UNDEFINE NOTC
UNDEFINE MODE_OF_TRANSPORT
UNDEFINE COMMODITY_CODE
UNDEFINE COMMODITY_CODE_DESC
UNDEFINE DELIVERY_TERMS
UNDEFINE NET_WEIGHT
UNDEFINE ALT_QTY
UNDEFINE INVOICED_VALUE
