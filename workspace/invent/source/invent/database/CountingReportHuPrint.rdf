-----------------------------------------------------------------------------
--
--  Logical unit: CountingReportHuRep
--
--  Report:       CountingReportHuPrint
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating COUNTING_REPORT_HU_RPI specification

CREATE OR REPLACE PACKAGE COUNTING_REPORT_HU_RPI AS

module_ CONSTANT VARCHAR2(6) := 'INVENT';
lu_name_ CONSTANT VARCHAR2(25) := 'CountingReportHuRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   inv_list_no_              IN VARCHAR2)
   RETURN NUMBER;

PROCEDURE Init;

END COUNTING_REPORT_HU_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table COUNTING_REPORT_HU_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_HU_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INV_LIST_NO', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATE_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SECOND_COMMODITY', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'USERID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CYCLE_CODE', 'VARCHAR2(40)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_QTY_ONHAND', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LAST_COUNT_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_SINCE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FREEZE_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_COUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INCLUDE_ALL_QTY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_STANDARD_INVENTORY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_PROJECT_INVENTORY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_CUSTOMER_OWNED', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_SUPPLIER_LOANED', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_CONSIGNMENT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_COMPANY_OWNED', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_ROTABLE_POOL', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_FA_ROTABLE_POOL', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_ATTACHED_TO_HU', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_NOT_ATTACHED_TO_HU', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_SUPPLIER_RENTED', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_COMP_RENTAL_ASSET', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INCLUDE_FULL_QTY_OF_HU', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SEL_HANDLING_UNIT_TYPE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TOP_HANDLING_UNIT_TYPE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_CATEGORY_TYPE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TOP_HANDLING_CATEGORY_TYPE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ABC_CLASS', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FREQUENCY_CLASS', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LIFECYCLE_STAGE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SEQ', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_DESCRIPTION', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION_CODE', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION_CODE_DESCRIPTION', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQUENCE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUB_PROJECT_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_UOM', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NOTE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_CATALOG_NOTES', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_UOM', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ROUTE_ORDER', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ROUTE_ORDER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPLETE_HU', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STRUCTURE_LEVEL', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_DESC', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_DESC', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SSCC', 'VARCHAR2(18)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPOSITION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TARE_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_HANDLING_UNIT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_HU_RPT';
   index_name_ VARCHAR2(30) := 'COUNTING_REPORT_HU_PRINT_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view COUNTING_REPORT_HU_REP

CREATE OR REPLACE VIEW COUNTING_REPORT_HU_REP AS
SELECT RESULT_KEY, ROW_NO, PARENT_ROW_NO, ROWVERSION
   ,INV_LIST_NO
   ,CONTRACT
   ,CREATE_DATE
   ,SECOND_COMMODITY
   ,USERID
   ,CYCLE_CODE
   ,WAREHOUSE_ID
   ,BAY_ID
   ,ROW_ID
   ,TIER_ID
   ,BIN_ID
   ,STORAGE_ZONE_ID
   ,PART_NO
   ,MAX_QTY_ONHAND
   ,LAST_COUNT_DATE
   ,EXCLUDE_SINCE
   ,FREEZE_CODE
   ,PROCESS_COUNT
   ,INCLUDE_ALL_QTY
   ,PROJECT_ID
   ,EXCLUDE_STANDARD_INVENTORY
   ,EXCLUDE_PROJECT_INVENTORY
   ,EXCLUDE_CUSTOMER_OWNED
   ,EXCLUDE_SUPPLIER_LOANED
   ,EXCLUDE_CONSIGNMENT
   ,EXCLUDE_COMPANY_OWNED
   ,EXCLUDE_ROTABLE_POOL
   ,EXCLUDE_FA_ROTABLE_POOL
   ,EXCLUDE_ATTACHED_TO_HU
   ,EXCLUDE_NOT_ATTACHED_TO_HU
   ,EXCLUDE_SUPPLIER_RENTED
   ,EXCLUDE_COMP_RENTAL_ASSET
   ,INCLUDE_FULL_QTY_OF_HU
   ,SEL_HANDLING_UNIT_TYPE_ID
   ,TOP_HANDLING_UNIT_TYPE_ID
   ,HANDLING_CATEGORY_TYPE_ID
   ,TOP_HANDLING_CATEGORY_TYPE_ID
   ,LOCATION_GROUP
   ,ABC_CLASS
   ,FREQUENCY_CLASS
   ,LIFECYCLE_STAGE
   ,HANDLING_UNIT_ID
   ,LOCATION_NO
   ,SEQ
   ,PART_DESCRIPTION
   ,CONFIGURATION_ID
   ,LOT_BATCH_NO
   ,SERIAL_NO
   ,ENG_CHG_LEVEL
   ,WAIV_DEV_REJ_NO
   ,CONDITION_CODE
   ,CONDITION_CODE_DESCRIPTION
   ,ACTIVITY_SEQUENCE
   ,SUB_PROJECT_ID
   ,ACTIVITY_ID
   ,PART_UOM
   ,PART_NOTE
   ,PART_CATALOG_NOTES
   ,CATCH_UOM
   ,WAREHOUSE_ROUTE_ORDER
   ,BAY_ROUTE_ORDER
   ,ROW_ROUTE_ORDER
   ,TIER_ROUTE_ORDER
   ,BIN_ROUTE_ORDER
   ,COMPLETE_HU
   ,STRUCTURE_LEVEL
   ,HANDLING_UNIT_TYPE_ID
   ,HANDLING_UNIT_TYPE_DESC
   ,HANDLING_UNIT_CATEGORY_ID
   ,HANDLING_UNIT_CATEGORY_DESC
   ,SSCC
   ,ALT_HANDLING_UNIT_LABEL_ID
   ,COMPOSITION
   ,WIDTH
   ,HEIGHT
   ,DEPTH
   ,UOM_FOR_LENGTH
   ,NET_WEIGHT
   ,TARE_WEIGHT
   ,OPERATIVE_GROSS_WEIGHT
   ,UOM_FOR_WEIGHT
   ,OPERATIVE_VOLUME
   ,UOM_FOR_VOLUME
   ,PRINT_HANDLING_UNIT
   
FROM   COUNTING_REPORT_HU_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE COUNTING_REPORT_HU_REP
   IS 'LU=CountingReportHuRep^PROMPT=Counting Report Hu Print^MODULE=INVENT^';

COMMENT ON COLUMN COUNTING_REPORT_HU_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.inv_list_no
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Count Report No^QUERY=Inv List No:^QFLAGS=M-S--^REF=COUNTING_REPORT/NOCHECK^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.contract
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Site^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.create_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Create Date^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.second_commodity
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Second Commodity^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.userid
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=User ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.cycle_code
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Cycle Code^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.warehouse_id
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.bay_id
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.row_id
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.tier_id
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.bin_id
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bin^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.storage_zone_id
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Storage Zone ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.part_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part No^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.max_qty_onhand
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Max Qty Onhand^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.last_count_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Last Count Date^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_since
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Exclude Since^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.freeze_code
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Freeze Code^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.process_count
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Process Count^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.include_all_qty
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Include All Qty^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.project_id
   IS 'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Project ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_standard_inventory
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Standard Inventory^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_project_inventory
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Project Inventory^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_customer_owned
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Exclude Customer Owned^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_supplier_loaned
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Supplier Loaned^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_consignment
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Consignment^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_company_owned
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Company Owned^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_rotable_pool
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Rotable Pool^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_fa_rotable_pool
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Fa Rotable Pool^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_attached_to_hu
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Attached To Handling Unit^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_not_attached_to_hu
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Not Attached To Handling Unit^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_supplier_rented
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Supplier Rented^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.exclude_comp_rental_asset
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Exclude Company Rental Asset^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.include_full_qty_of_hu
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Include full qty of Handling Unit^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.sel_handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Handling Unit Type ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.top_handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Top Handling Unit Type ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.handling_category_type_id
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Handling Unit Category ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.top_handling_category_type_id
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Top Handling Unit Category ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.location_group
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Location Group^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.abc_class
   IS 'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Abc Class^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.frequency_class
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Frequency Class^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.lifecycle_stage
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lifecycle Stage^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.handling_unit_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.location_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Location No^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.seq
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sequence No^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.part_description
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Part Description^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.configuration_id
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Configuration ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.lot_batch_no
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Lot/Batch^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.serial_no
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Serial No^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.eng_chg_level
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Rev No^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.waiv_dev_rej_no
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=W/D/R No^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.condition_code
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Condition Code^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.condition_code_description
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Condition Code Description^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.activity_sequence
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Sequence^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.sub_project_id
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Sub Project ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.activity_id
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Activity ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.part_uom
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=UoM^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.part_note
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Note^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.part_catalog_notes
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.catch_uom
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Catch UoM^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.warehouse_route_order
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse Route Order^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.bay_route_order
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay Route Order^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.row_route_order
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row Route Order^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.tier_route_order
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier Route Order^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.bin_route_order
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bin Route Order^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.complete_hu
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Complete Handling Unit^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.structure_level
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Structure Level^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Type ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.handling_unit_type_desc
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Type Description^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.handling_unit_category_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Category ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.handling_unit_category_desc
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Category Description^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.sscc
   IS 'FLAGS=A----^DATATYPE=STRING(18)^TITLE=SSCC^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.composition
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Composition^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.width
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.height
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Length^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Weight^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Weight^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Volume^';
COMMENT ON COLUMN COUNTING_REPORT_HU_REP.print_handling_unit
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Handling Unit^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('COUNTING_REPORT_HU_REP', 'INVENT', 'CountingReportHuRep', 'Inventory Count Report Handling Unit', 'COUNTING_REPORT_HU_RPT', 'COUNTING_REPORT_HU_RPI.Execute_Report', 0,'','','','PLSQL1.2','TRUE','Warehouse Management','Counting');
   Report_SYS.Define_Report_Text_('COUNTING_REPORT_HU_REP', 'CATCHONHAND', 'Counted Catch Quantity');
   Report_SYS.Define_Report_Text_('COUNTING_REPORT_HU_REP', 'COUNTREPORT', 'Inventory Count Report Handling Unit');
   Report_SYS.Define_Report_Text_('COUNTING_REPORT_HU_REP', 'ONHAND', 'Counted Quantity');
   Report_SYS.Define_Report_Text_('COUNTING_REPORT_HU_REP', 'COUNT_WITHOUT_DIFF', 'Exists');
   Report_SYS.Define_Report_Text_('COUNTING_REPORT_HU_REP', 'COUNT_AS_DOES_NOT_EXIST', 'Does Not Exist');
   Report_SYS.Define_Report_Text_('COUNTING_REPORT_HU_REP', 'SIGNATURE', 'Signature:');
   Report_SYS.Refresh_('COUNTING_REPORT_HU_REP');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('COUNTING_REPORT_HU_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('COUNTING_REPORT_HU_REP','CountingReport','COUNTING_REPORT_HU_REP/COUNT_REPORT/COUNT_REPORT');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating COUNTING_REPORT_HU_RPI implementation

CREATE OR REPLACE PACKAGE BODY COUNTING_REPORT_HU_RPI IS

   TYPE binds$ IS RECORD (
      inv_list_no               VARCHAR2(32000),
      handling_unit_id          NUMBER);

   CURSOR get_count_report (inv_list_no_ VARCHAR2) IS
      SELECT inv_list_no                                                                inv_list_no,
             contract                                                                   contract,
             create_date                                                                create_date,
             second_commodity                                                           second_commodity,
             userid                                                                     userid,
             SUBSTR(Cyclic_Counting_API.Decode(cycle_code),1,40)                        cycle_code,
             warehouse_id                                                               warehouse_id,
             bay_id                                                                     bay_id,
             row_id                                                                     row_id,
             tier_id                                                                    tier_id,
             bin_id                                                                     bin_id,
             storage_zone_id                                                            storage_zone_id,
             part_no                                                                    part_no,
             max_qty_onhand                                                             max_qty_onhand,
             last_count_date                                                            last_count_date,
             NULL                                                                       exclude_since,
             Gen_Yes_No_API.Decode(freeze_code)                                         freeze_code,
             process_count                                                              process_count,
             Gen_Yes_No_API.Decode(include_all_qty)                                     include_all_qty,
             project_id                                                                 Project_id,
             Gen_Yes_No_API.Decode(exclude_standard_inventory)                          exclude_standard_inventory,
             Gen_Yes_No_API.Decode(exclude_project_inventory)                           exclude_project_inventory,
             Gen_Yes_No_API.Decode(DECODE(exclude_customer_owned,'EXCLUDE','Y','N'))    exclude_customer_owned,
             Gen_Yes_No_API.Decode(DECODE(exclude_supplier_loaned,'EXCLUDE','Y','N'))   exclude_supplier_loaned,
             Gen_Yes_No_API.Decode(DECODE(exclude_consignment,'EXCLUDE','Y','N'))       exclude_consignment,
             Gen_Yes_No_API.Decode(DECODE(exclude_company_owned,'EXCLUDE','Y','N'))     exclude_company_owned,
             Gen_Yes_No_API.Decode(DECODE(exclude_rotable_pool,'EXCLUDE','Y','N'))      exclude_rotable_pool,
             Gen_Yes_No_API.Decode(DECODE(exclude_fa_rotable_pool,'EXCLUDE','Y','N'))   exclude_fa_rotable_pool,
             Gen_Yes_No_API.Decode(DECODE(exclude_attached_to_hu,'EXCLUDE','Y','N'))    exclude_attached_to_hu,
             Gen_Yes_No_API.Decode(DECODE(exclude_not_attached_to_hu,'EXCLUDE','Y','N'))exclude_not_attached_to_hu,
             Gen_Yes_No_API.Decode(DECODE(exclude_supplier_rented,'EXCLUDE','Y','N'))   exclude_supplier_rented,
             Gen_Yes_No_API.Decode(DECODE(exclude_comp_rental_asset,'EXCLUDE','Y','N')) exclude_comp_rental_asset,
             Gen_Yes_No_API.Decode(include_full_qty_of_hu)                              include_full_qty_of_hu,
             handling_unit_type_id                                                      sel_handling_unit_type_id,
             top_handling_unit_type_id                                                  top_handling_unit_type_id,
             handling_category_type_id                                                  handling_category_type_id,
             top_handling_category_type_id                                              top_handling_category_type_id,
             location_group                                                             location_group,
             abc_class                                                                  abc_class,
             frequency_class                                                            frequency_class,
             lifecycle_stage                                                            lifecycle_stage,
             rowkey                                                                     rowkey                                                                               
      FROM counting_report_tab
      WHERE inv_list_no = inv_list_no_;

   CURSOR get_count_item (inv_list_no_ VARCHAR2) IS
      SELECT       inv_list_no                       inv_list_no,
                   to_number(handling_unit_id)       handling_unit_id,
                   contract                          contract,
                   location_no                       location_no,  
                   to_number(seq)                    seq,   
                   part_no                           part_no,
                   NULL                              part_description,   
                   configuration_id                  configuration_id,
                   lot_batch_no                      lot_batch_no, 
                   serial_no                         serial_no, 
                   eng_chg_level                     eng_chg_level, 
                   waiv_dev_rej_no                   waiv_dev_rej_no, 
                   to_number(activity_sequence)      activity_sequence,
                   NULL                              condition_code,
                   NULL                              condition_code_description,   
                   NULL                              project_id,   
                   NULL                              sub_project_id,   
                   NULL                              activity_id,   
                   NULL                              part_uom,   
                   NULL                              catch_uom,   
                   NULL                              part_note,   
                   NULL                              part_catalog_notes,
                   warehouse_id                      warehouse_id,
                   bay_id                            bay_id,
                   row_id                            row_id,
                   tier_id                           tier_id,
                   bin_id                            bin_id,
                   warehouse_route_order             warehouse_route_order,
                   bay_route_order                   bay_route_order,
                   row_route_order                   row_route_order,
                   tier_route_order                  tier_route_order,
                   bin_route_order                   bin_route_order,
                   complete_hu                       complete_hu                  
            FROM  Counting_Report_Hu_Print  
            WHERE inv_list_no = inv_list_no_
            ORDER BY contract,
                  Utility_SYS.String_To_Number(warehouse_route_order),
                  upper(warehouse_route_order),
                  Utility_SYS.String_To_Number(bay_route_order),
                  upper(decode(bay_route_order,  ' -', Database_SYS.Get_Last_Character, bay_route_order)),
                  Utility_SYS.String_To_Number(row_route_order),
                  upper(decode(row_route_order,  ' -', Database_SYS.Get_Last_Character, row_route_order)),
                  Utility_SYS.String_To_Number(tier_route_order),
                  upper(decode(tier_route_order, ' -', Database_SYS.Get_Last_Character, tier_route_order)),
                  Utility_SYS.String_To_Number(bin_route_order),
                  upper(decode(bin_route_order,  ' -', Database_SYS.Get_Last_Character, bin_route_order)),
                  location_no ASC, seq ASC;

   CURSOR get_handling_unit (handling_unit_id_ NUMBER) IS
      SELECT   handling_unit_id                                                                handling_unit_id, 
               count(handling_unit_id) OVER()-level+1                                          structure_level,
               handling_unit_type_id                                                           handling_unit_type_id,
               NULL                                                                            handling_unit_type_desc, 
               NULL                                                                            handling_unit_category_id,
               NULL                                                                            handling_unit_category_desc,
               sscc                                                                            sscc,
               alt_handling_unit_label_id                                                      alt_handling_unit_label_id,
               NULL                                                                            composition, 
               width                                                                           width,
               height                                                                          height,
               depth                                                                           depth,
               uom_for_length                                                                  uom_for_length,
               NULL                                                                            uom_for_weight,
               NULL                                                                            uom_for_volume,
               NULL                                                                            net_weight,
               NULL                                                                            tare_weight,
               NULL                                                                            operative_gross_weight,
               NULL                                                                            operative_volume,
               'FALSE'                                                                         print_handling_unit
      FROM             handling_unit_tab
      CONNECT BY PRIOR parent_handling_unit_id = handling_unit_id
      START WITH       handling_unit_id = handling_unit_id_   
      ORDER BY         structure_level;

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_count_report_          IN get_count_report%ROWTYPE DEFAULT NULL,
   rec_count_item_            IN get_count_item%ROWTYPE DEFAULT NULL,
   rec_handling_unit_         IN get_handling_unit%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO COUNTING_REPORT_HU_RPT (
      result_key,
      inv_list_no,
      contract,
      create_date,
      second_commodity,
      userid,
      cycle_code,
      warehouse_id,
      bay_id,
      row_id,
      tier_id,
      bin_id,
      storage_zone_id,
      part_no,
      max_qty_onhand,
      last_count_date,
      exclude_since,
      freeze_code,
      process_count,
      include_all_qty,
      project_id,
      exclude_standard_inventory,
      exclude_project_inventory,
      exclude_customer_owned,
      exclude_supplier_loaned,
      exclude_consignment,
      exclude_company_owned,
      exclude_rotable_pool,
      exclude_fa_rotable_pool,
      exclude_attached_to_hu,
      exclude_not_attached_to_hu,
      exclude_supplier_rented,
      exclude_comp_rental_asset,
      include_full_qty_of_hu,
      sel_handling_unit_type_id,
      top_handling_unit_type_id,
      handling_category_type_id,
      top_handling_category_type_id,
      location_group,
      abc_class,
      frequency_class,
      lifecycle_stage,
      handling_unit_id,
      location_no,
      seq,
      part_description,
      configuration_id,
      lot_batch_no,
      serial_no,
      eng_chg_level,
      waiv_dev_rej_no,
      condition_code,
      condition_code_description,
      activity_sequence,
      sub_project_id,
      activity_id,
      part_uom,
      part_note,
      part_catalog_notes,
      catch_uom,
      warehouse_route_order,
      bay_route_order,
      row_route_order,
      tier_route_order,
      bin_route_order,
      complete_hu,
      structure_level,
      handling_unit_type_id,
      handling_unit_type_desc,
      handling_unit_category_id,
      handling_unit_category_desc,
      sscc,
      alt_handling_unit_label_id,
      composition,
      width,
      height,
      depth,
      uom_for_length,
      net_weight,
      tare_weight,
      operative_gross_weight,
      uom_for_weight,
      operative_volume,
      uom_for_volume,
      print_handling_unit,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      nvl(rec_count_item_.inv_list_no,
      nvl(rec_count_report_.inv_list_no,
      binds$_.inv_list_no)),
      nvl(rec_count_item_.contract,
      rec_count_report_.contract),
      rec_count_report_.create_date,
      rec_count_report_.second_commodity,
      rec_count_report_.userid,
      rec_count_report_.cycle_code,
      nvl(rec_count_item_.warehouse_id,
      rec_count_report_.warehouse_id),
      nvl(rec_count_item_.bay_id,
      rec_count_report_.bay_id),
      nvl(rec_count_item_.row_id,
      rec_count_report_.row_id),
      nvl(rec_count_item_.tier_id,
      rec_count_report_.tier_id),
      nvl(rec_count_item_.bin_id,
      rec_count_report_.bin_id),
      rec_count_report_.storage_zone_id,
      nvl(rec_count_item_.part_no,
      rec_count_report_.part_no),
      rec_count_report_.max_qty_onhand,
      rec_count_report_.last_count_date,
      rec_count_report_.exclude_since,
      rec_count_report_.freeze_code,
      rec_count_report_.process_count,
      rec_count_report_.include_all_qty,
      nvl(rec_count_item_.project_id,
      rec_count_report_.project_id),
      rec_count_report_.exclude_standard_inventory,
      rec_count_report_.exclude_project_inventory,
      rec_count_report_.exclude_customer_owned,
      rec_count_report_.exclude_supplier_loaned,
      rec_count_report_.exclude_consignment,
      rec_count_report_.exclude_company_owned,
      rec_count_report_.exclude_rotable_pool,
      rec_count_report_.exclude_fa_rotable_pool,
      rec_count_report_.exclude_attached_to_hu,
      rec_count_report_.exclude_not_attached_to_hu,
      rec_count_report_.exclude_supplier_rented,
      rec_count_report_.exclude_comp_rental_asset,
      rec_count_report_.include_full_qty_of_hu,
      rec_count_report_.sel_handling_unit_type_id,
      rec_count_report_.top_handling_unit_type_id,
      rec_count_report_.handling_category_type_id,
      rec_count_report_.top_handling_category_type_id,
      rec_count_report_.location_group,
      rec_count_report_.abc_class,
      rec_count_report_.frequency_class,
      rec_count_report_.lifecycle_stage,
      nvl(rec_handling_unit_.handling_unit_id,
      rec_count_item_.handling_unit_id),
      rec_count_item_.location_no,
      rec_count_item_.seq,
      rec_count_item_.part_description,
      rec_count_item_.configuration_id,
      rec_count_item_.lot_batch_no,
      rec_count_item_.serial_no,
      rec_count_item_.eng_chg_level,
      rec_count_item_.waiv_dev_rej_no,
      rec_count_item_.condition_code,
      rec_count_item_.condition_code_description,
      rec_count_item_.activity_sequence,
      rec_count_item_.sub_project_id,
      rec_count_item_.activity_id,
      rec_count_item_.part_uom,
      rec_count_item_.part_note,
      rec_count_item_.part_catalog_notes,
      rec_count_item_.catch_uom,
      rec_count_item_.warehouse_route_order,
      rec_count_item_.bay_route_order,
      rec_count_item_.row_route_order,
      rec_count_item_.tier_route_order,
      rec_count_item_.bin_route_order,
      rec_count_item_.complete_hu,
      rec_handling_unit_.structure_level,
      rec_handling_unit_.handling_unit_type_id,
      rec_handling_unit_.handling_unit_type_desc,
      rec_handling_unit_.handling_unit_category_id,
      rec_handling_unit_.handling_unit_category_desc,
      rec_handling_unit_.sscc,
      rec_handling_unit_.alt_handling_unit_label_id,
      rec_handling_unit_.composition,
      rec_handling_unit_.width,
      rec_handling_unit_.height,
      rec_handling_unit_.depth,
      rec_handling_unit_.uom_for_length,
      rec_handling_unit_.net_weight,
      rec_handling_unit_.tare_weight,
      rec_handling_unit_.operative_gross_weight,
      rec_handling_unit_.uom_for_weight,
      rec_handling_unit_.operative_volume,
      rec_handling_unit_.uom_for_volume,
      rec_handling_unit_.print_handling_unit,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   objid_list$_              VARCHAR2(32000);
   TYPE objid_array$ IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
   objid_array$_             objid_array$;
   objid_index$_             NUMBER := -1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_count_report_ BOOLEAN;
   rec_count_report_ get_count_report%ROWTYPE;
   TYPE cur_count_report IS REF CURSOR;
   cur_count_report_ cur_count_report;
   txt_count_report_ VARCHAR2(32000) :=
     'SELECT inv_list_no                                                                inv_list_no,
             contract                                                                   contract,
             create_date                                                                create_date,
             second_commodity                                                           second_commodity,
             userid                                                                     userid,
             SUBSTR(Cyclic_Counting_API.Decode(cycle_code),1,40)                        cycle_code,
             warehouse_id                                                               warehouse_id,
             bay_id                                                                     bay_id,
             row_id                                                                     row_id,
             tier_id                                                                    tier_id,
             bin_id                                                                     bin_id,
             storage_zone_id                                                            storage_zone_id,
             part_no                                                                    part_no,
             max_qty_onhand                                                             max_qty_onhand,
             last_count_date                                                            last_count_date,
             NULL                                                                       exclude_since,
             Gen_Yes_No_API.Decode(freeze_code)                                         freeze_code,
             process_count                                                              process_count,
             Gen_Yes_No_API.Decode(include_all_qty)                                     include_all_qty,
             project_id                                                                 Project_id,
             Gen_Yes_No_API.Decode(exclude_standard_inventory)                          exclude_standard_inventory,
             Gen_Yes_No_API.Decode(exclude_project_inventory)                           exclude_project_inventory,
             Gen_Yes_No_API.Decode(DECODE(exclude_customer_owned,''EXCLUDE'',''Y'',''N''))    exclude_customer_owned,
             Gen_Yes_No_API.Decode(DECODE(exclude_supplier_loaned,''EXCLUDE'',''Y'',''N''))   exclude_supplier_loaned,
             Gen_Yes_No_API.Decode(DECODE(exclude_consignment,''EXCLUDE'',''Y'',''N''))       exclude_consignment,
             Gen_Yes_No_API.Decode(DECODE(exclude_company_owned,''EXCLUDE'',''Y'',''N''))     exclude_company_owned,
             Gen_Yes_No_API.Decode(DECODE(exclude_rotable_pool,''EXCLUDE'',''Y'',''N''))      exclude_rotable_pool,
             Gen_Yes_No_API.Decode(DECODE(exclude_fa_rotable_pool,''EXCLUDE'',''Y'',''N''))   exclude_fa_rotable_pool,
             Gen_Yes_No_API.Decode(DECODE(exclude_attached_to_hu,''EXCLUDE'',''Y'',''N''))    exclude_attached_to_hu,
             Gen_Yes_No_API.Decode(DECODE(exclude_not_attached_to_hu,''EXCLUDE'',''Y'',''N''))exclude_not_attached_to_hu,
             Gen_Yes_No_API.Decode(DECODE(exclude_supplier_rented,''EXCLUDE'',''Y'',''N''))   exclude_supplier_rented,
             Gen_Yes_No_API.Decode(DECODE(exclude_comp_rental_asset,''EXCLUDE'',''Y'',''N'')) exclude_comp_rental_asset,
             Gen_Yes_No_API.Decode(include_full_qty_of_hu)                              include_full_qty_of_hu,
             handling_unit_type_id                                                      sel_handling_unit_type_id,
             top_handling_unit_type_id                                                  top_handling_unit_type_id,
             handling_category_type_id                                                  handling_category_type_id,
             top_handling_category_type_id                                              top_handling_category_type_id,
             location_group                                                             location_group,
             abc_class                                                                  abc_class,
             frequency_class                                                            frequency_class,
             lifecycle_stage                                                            lifecycle_stage,
             rowkey                                                                     rowkey                                                                               
      FROM counting_report_tab
      WHERE inv_list_no = inv_list_no_';
   par_count_report_ binds$;
   has_count_item_ BOOLEAN;
   rec_count_item_ get_count_item%ROWTYPE;
   par_count_item_ binds$;
   has_handling_unit_ BOOLEAN;
   rec_handling_unit_ get_handling_unit%ROWTYPE;
   par_handling_unit_ binds$;
BEGIN
   General_SYS.Init_Method(lu_name_, 'COUNTING_REPORT_HU_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   objid_list$_                 := Client_SYS.Get_Item_Value('OBJID_LIST', parameter_attr_);
   binds$_.inv_list_no          := Client_SYS.Get_Item_Value('INV_LIST_NO', parameter_attr_); 
   IF (objid_list$_ IS NOT NULL) THEN
      FOR i IN 0 .. (length(objid_list$_)/18)-1 LOOP
         objid_array$_(i) := chartorowid(substr(objid_list$_,(i*18)+1, 18));
      END LOOP;
   END IF;

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'COUNTING_REPORT_HU_REP', 'Inventory Count Report Handling Unit');

   DECLARE
         company_rec_                 Company_API.Public_Rec;
   BEGIN
         Counting_Report_API.Set_Aggregated_Report_Printed(binds$_.inv_list_no);   
         company_rec_ := Company_API.Get(Site_API.Get_Company(Counting_Report_API.Get_Contract(binds$_.inv_list_no)));
         IF (company_rec_.logotype IS NOT NULL) THEN
            Archive_Variable_API.Set_Object(TO_NUMBER(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_)), 'rhSysLogo', company_rec_.logotype);
            Archive_Variable_API.Set_Variable(TO_NUMBER(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_)), 'companyName', company_rec_.name);
         END IF;
      END;

   has_count_report_ := FALSE;
   par_count_report_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'COUNT_REPORT');
   IF (objid_list$_ IS NULL) THEN
      OPEN get_count_report(binds$_.inv_list_no);
   END IF;
   LOOP
      IF (objid_list$_ IS NULL) THEN
         FETCH get_count_report INTO rec_count_report_;
      ELSE
         objid_index$_ := objid_index$_+1;
         EXIT WHEN objid_index$_ > objid_array$_.LAST;
         OPEN cur_count_report_ FOR 'SELECT * FROM ('||txt_count_report_||') WHERE objid = :objid' USING objid_array$_(objid_index$_);
         FETCH cur_count_report_ INTO rec_count_report_;
         has_count_report_ := cur_count_report_%FOUND;
         CLOSE cur_count_report_;
      END IF;
      IF (objid_list$_ IS NULL) THEN
         has_count_report_ := get_count_report%FOUND OR get_count_report%ROWCOUNT > 0;
         EXIT WHEN get_count_report%NOTFOUND;
      END IF;
      DECLARE
         archive_notes_             VARCHAR2(2001);
         oe_rel_no_                 VARCHAR2(4);
         oe_line_no_                VARCHAR2(4);
         oe_line_item_no_           NUMBER;
      BEGIN
         IF (rec_count_report_.last_count_date = Database_Sys.last_calendar_date_) THEN
            rec_count_report_.exclude_since   := NULL;
            rec_count_report_.last_count_date := NULL;
         ELSE
            rec_count_report_.exclude_since   := Site_API.Get_Site_Date(rec_count_report_.contract) - rec_count_report_.last_count_date;
            rec_count_report_.last_count_date := rec_count_report_.last_count_date;
         END IF;
              
         archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'COUNTREPNO: Count Report No');
         archive_notes_ := archive_notes_ || ': ' || binds$_.inv_list_no || ', ';
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'COUNTREPSITE: Site');
         archive_notes_ := archive_notes_ || ': ' || rec_count_report_.contract;
         Archive_API.Set_Notes(archive_notes_);
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'COUNT_REPORT');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'INV_LIST_NO', rec_count_report_.inv_list_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT', rec_count_report_.contract);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CREATE_DATE', rec_count_report_.create_date);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SECOND_COMMODITY', rec_count_report_.second_commodity);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'USERID', rec_count_report_.userid);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CYCLE_CODE', rec_count_report_.cycle_code);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'WAREHOUSE_ID', rec_count_report_.warehouse_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'BAY_ID', rec_count_report_.bay_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'ROW_ID', rec_count_report_.row_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TIER_ID', rec_count_report_.tier_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'BIN_ID', rec_count_report_.bin_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'STORAGE_ZONE_ID', rec_count_report_.storage_zone_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_count_report_.part_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'MAX_QTY_ONHAND', rec_count_report_.max_qty_onhand);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LAST_COUNT_DATE', rec_count_report_.last_count_date);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_SINCE', rec_count_report_.exclude_since);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'FREEZE_CODE', rec_count_report_.freeze_code);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PROCESS_COUNT', rec_count_report_.process_count);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'INCLUDE_ALL_QTY', rec_count_report_.include_all_qty);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PROJECT_ID', rec_count_report_.project_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_STANDARD_INVENTORY', rec_count_report_.exclude_standard_inventory);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_PROJECT_INVENTORY', rec_count_report_.exclude_project_inventory);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_CUSTOMER_OWNED', rec_count_report_.exclude_customer_owned);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_SUPPLIER_LOANED', rec_count_report_.exclude_supplier_loaned);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_CONSIGNMENT', rec_count_report_.exclude_consignment);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_COMPANY_OWNED', rec_count_report_.exclude_company_owned);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_ROTABLE_POOL', rec_count_report_.exclude_rotable_pool);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_FA_ROTABLE_POOL', rec_count_report_.exclude_fa_rotable_pool);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_ATTACHED_TO_HU', rec_count_report_.exclude_attached_to_hu);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_NOT_ATTACHED_TO_HU', rec_count_report_.exclude_not_attached_to_hu);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_SUPPLIER_RENTED', rec_count_report_.exclude_supplier_rented);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXCLUDE_COMP_RENTAL_ASSET', rec_count_report_.exclude_comp_rental_asset);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'INCLUDE_FULL_QTY_OF_HU', rec_count_report_.include_full_qty_of_hu);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SEL_HANDLING_UNIT_TYPE_ID', rec_count_report_.sel_handling_unit_type_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TOP_HANDLING_UNIT_TYPE_ID', rec_count_report_.top_handling_unit_type_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_CATEGORY_TYPE_ID', rec_count_report_.handling_category_type_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TOP_HANDLING_CATEGORY_TYPE_ID', rec_count_report_.top_handling_category_type_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOCATION_GROUP', rec_count_report_.location_group);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'ABC_CLASS', rec_count_report_.abc_class);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'FREQUENCY_CLASS', rec_count_report_.frequency_class);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LIFECYCLE_STAGE', rec_count_report_.lifecycle_stage);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'CountingReport', rec_count_report_.rowkey, 'COUNTING_REPORT_HU_REP');
      has_count_item_ := FALSE;
      par_count_item_ := binds$_;
      binds$_.inv_list_no := rec_count_report_.inv_list_no;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'COUNT_ITEMS');
      OPEN get_count_item(rec_count_report_.inv_list_no);
      LOOP
         FETCH get_count_item INTO rec_count_item_;
         has_count_item_ := get_count_item%FOUND OR get_count_item%ROWCOUNT > 0;
         EXIT WHEN get_count_item%NOTFOUND;
         DECLARE
                 inv_part_note_id_           NUMBER;
                 inv_part_notes_             VARCHAR2(2000);
                 partca_part_note_id_        NUMBER;
                 partca_part_notes_          VARCHAR2(2000);
               
               BEGIN
                  rec_count_item_.part_description := Inventory_Part_API.Get_Description(rec_count_item_.contract,rec_count_item_.part_no);
                  IF (rec_count_item_.part_no IS NOT NULL) THEN
                     rec_count_item_.condition_code := Condition_Code_Manager_API.Get_Condition_Code(rec_count_item_.part_no,rec_count_item_.serial_no,rec_count_item_.lot_batch_no);   
                  END IF;
                  rec_count_item_.condition_code_description := Condition_Code_API.Get_Description(rec_count_item_.condition_code);  
                  $IF Component_Proj_SYS.INSTALLED $THEN
                     rec_count_item_.project_id := Activity_API.Get_Project_Id(rec_count_item_.activity_sequence);
                     rec_count_item_.sub_project_id := Activity_API.Get_Sub_Project_Id(rec_count_item_.activity_sequence);   
                     rec_count_item_.activity_id := Activity_API.Get_Activity_No(rec_count_item_.activity_sequence);   
                  $END
                  rec_count_item_.part_uom := Inventory_Part_API.Get_Unit_Meas(rec_count_item_.contract,rec_count_item_.part_no);   
                  rec_count_item_.catch_uom := Inventory_Part_API.Get_Catch_Unit_Meas(rec_count_item_.contract,rec_count_item_.part_no);   
                  Inventory_Part_API.Get_All_Notes(partca_part_note_id_,
                                                   partca_part_notes_,
                                                   inv_part_note_id_,
                                                   inv_part_notes_,
                                                   rec_count_item_.contract,
                                                   rec_count_item_.part_no,
                                                   Language_SYS.Get_Language,
                                                  '7');
                  rec_count_item_.part_note := inv_part_notes_;
                  rec_count_item_.part_catalog_notes := partca_part_notes_;
               END;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'COUNT_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'INV_LIST_NO', rec_count_item_.inv_list_no);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_count_item_.handling_unit_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT', rec_count_item_.contract);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOCATION_NO', rec_count_item_.location_no);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'SEQ', rec_count_item_.seq);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_count_item_.part_no);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_DESCRIPTION', rec_count_item_.part_description);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONFIGURATION_ID', rec_count_item_.configuration_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOT_BATCH_NO', rec_count_item_.lot_batch_no);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'SERIAL_NO', rec_count_item_.serial_no);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'ENG_CHG_LEVEL', rec_count_item_.eng_chg_level);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'WAIV_DEV_REJ_NO', rec_count_item_.waiv_dev_rej_no);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONDITION_CODE', rec_count_item_.condition_code);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONDITION_CODE_DESCRIPTION', rec_count_item_.condition_code_description);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'ACTIVITY_SEQUENCE', rec_count_item_.activity_sequence);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PROJECT_ID', rec_count_item_.project_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'SUB_PROJECT_ID', rec_count_item_.sub_project_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'ACTIVITY_ID', rec_count_item_.activity_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_UOM', rec_count_item_.part_uom);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NOTE', rec_count_item_.part_note);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_CATALOG_NOTES', rec_count_item_.part_catalog_notes);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'CATCH_UOM', rec_count_item_.catch_uom);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'WAREHOUSE_ID', rec_count_item_.warehouse_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'BAY_ID', rec_count_item_.bay_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'ROW_ID', rec_count_item_.row_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'TIER_ID', rec_count_item_.tier_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'BIN_ID', rec_count_item_.bin_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'WAREHOUSE_ROUTE_ORDER', rec_count_item_.warehouse_route_order);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'BAY_ROUTE_ORDER', rec_count_item_.bay_route_order);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'ROW_ROUTE_ORDER', rec_count_item_.row_route_order);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'TIER_ROUTE_ORDER', rec_count_item_.tier_route_order);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'BIN_ROUTE_ORDER', rec_count_item_.bin_route_order);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPLETE_HU', rec_count_item_.complete_hu);
         has_handling_unit_ := FALSE;
         par_handling_unit_ := binds$_;
         binds$_.handling_unit_id := rec_count_item_.handling_unit_id;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNITS');
         OPEN get_handling_unit(rec_count_item_.handling_unit_id);
         LOOP
            FETCH get_handling_unit INTO rec_handling_unit_;
            has_handling_unit_ := get_handling_unit%FOUND OR get_handling_unit%ROWCOUNT > 0;
            EXIT WHEN get_handling_unit%NOTFOUND;
            BEGIN
               rec_handling_unit_.handling_unit_type_desc := Handling_Unit_Type_API.Get_Description(rec_handling_unit_.handling_unit_type_id);
               rec_handling_unit_.handling_unit_category_id := Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(rec_handling_unit_.handling_unit_type_id);
               rec_handling_unit_.handling_unit_category_desc := Handling_Unit_Category_API.Get_Description(rec_handling_unit_.handling_unit_category_id);
               rec_handling_unit_.composition := Handling_Unit_API.Get_Composition(rec_handling_unit_.handling_unit_id);
               rec_handling_unit_.uom_for_weight := Handling_Unit_API.Get_Uom_For_Weight(rec_handling_unit_.handling_unit_id);
               rec_handling_unit_.uom_for_volume := Handling_Unit_API.Get_Uom_For_Volume(rec_handling_unit_.handling_unit_id);
               rec_handling_unit_.net_weight := Handling_Unit_API.Get_Net_Weight(rec_handling_unit_.handling_unit_id, rec_handling_unit_.uom_for_weight, 'FALSE');
               rec_handling_unit_.tare_weight := Handling_Unit_API.Get_Tare_Weight(rec_handling_unit_.handling_unit_id, rec_handling_unit_.uom_for_weight);
               rec_handling_unit_.operative_gross_weight := Handling_Unit_API.Get_Operative_Gross_Weight(rec_handling_unit_.handling_unit_id, rec_handling_unit_.uom_for_weight, 'FALSE');
               rec_handling_unit_.operative_volume := Handling_Unit_API.Get_Operative_Volume(rec_handling_unit_.handling_unit_id, rec_handling_unit_.uom_for_volume);
               IF (rec_handling_unit_.structure_level in (1,2) OR rec_handling_unit_.handling_unit_id = binds$_.handling_unit_id) THEN 
                  rec_handling_unit_.print_handling_unit := 'TRUE';
               END IF; 
            END;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNIT');
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'STRUCTURE_LEVEL', rec_handling_unit_.structure_level);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_handling_unit_.handling_unit_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_ID', rec_handling_unit_.handling_unit_type_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_DESC', rec_handling_unit_.handling_unit_type_desc);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_ID', rec_handling_unit_.handling_unit_category_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_DESC', rec_handling_unit_.handling_unit_category_desc);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'SSCC', rec_handling_unit_.sscc);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ALT_HANDLING_UNIT_LABEL_ID', rec_handling_unit_.alt_handling_unit_label_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPOSITION', rec_handling_unit_.composition);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'WIDTH', rec_handling_unit_.width);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HEIGHT', rec_handling_unit_.height);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'DEPTH', rec_handling_unit_.depth);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_LENGTH', rec_handling_unit_.uom_for_length);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'NET_WEIGHT', rec_handling_unit_.net_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'TARE_WEIGHT', rec_handling_unit_.tare_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_GROSS_WEIGHT', rec_handling_unit_.operative_gross_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_WEIGHT', rec_handling_unit_.uom_for_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_VOLUME', rec_handling_unit_.operative_volume);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_VOLUME', rec_handling_unit_.uom_for_volume);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PRINT_HANDLING_UNIT', rec_handling_unit_.print_handling_unit);
            Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT');
            Add_Result_Row___(result_key$_,
                              binds$_ => binds$_,
                              rec_count_report_ => rec_count_report_,
                              rec_count_item_ => rec_count_item_,
                              rec_handling_unit_ => rec_handling_unit_,
                              row_no$_ => row_no$_);
         END LOOP;
         CLOSE get_handling_unit;
         Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNITS');
         binds$_ := par_handling_unit_;
         IF NOT has_handling_unit_ THEN
            Add_Result_Row___(result_key$_,
                              binds$_ => binds$_,
                              rec_count_report_ => rec_count_report_,
                              rec_count_item_ => rec_count_item_,
                              row_no$_ => row_no$_);
         END IF;

         Xml_Record_Writer_SYS.End_Element(xml$_, 'COUNT_ITEM');
      END LOOP;
      CLOSE get_count_item;
      Xml_Record_Writer_SYS.End_Element(xml$_, 'COUNT_ITEMS');
      binds$_ := par_count_item_;
      IF NOT has_count_item_ THEN
         Add_Result_Row___(result_key$_,
                           binds$_ => binds$_,
                           rec_count_report_ => rec_count_report_,
                           row_no$_ => row_no$_);
      END IF;

      Xml_Record_Writer_SYS.End_Element(xml$_, 'COUNT_REPORT');
      EXIT;
   END LOOP;
   IF (objid_list$_ IS NULL) THEN
      CLOSE get_count_report;
   END IF;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'COUNT_REPORT');
   binds$_ := par_count_report_;
   IF NOT has_count_report_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'COUNTING_REPORT_HU_REP');
   Report_SYS.Finish_Xml_Report('COUNTING_REPORT_HU_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_count_report%ISOPEN THEN
            CLOSE get_count_report;
         END IF;
         IF get_count_item%ISOPEN THEN
            CLOSE get_count_item;
         END IF;
         IF get_handling_unit%ISOPEN THEN
            CLOSE get_handling_unit;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   inv_list_no_              IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'COUNTING_REPORT_HU_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (inv_list_no_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INV_LIST_NO', inv_list_no_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END COUNTING_REPORT_HU_RPI;
/
SHOW ERROR