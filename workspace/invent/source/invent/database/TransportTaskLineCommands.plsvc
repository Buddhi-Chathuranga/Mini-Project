-----------------------------------------------------------------------------
--
--  Fragment:     TransportTaskLineCommands
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ---------  ------  ---------------------------------------------------------
-- 2019-07-23  ChFolk  SCUXXW4-22440 Created.
--------------------------------------------------------------------------------

layer Core;

PROCEDURE Pick_Transport_Task_Line___ (
   transport_task_id_   IN NUMBER,
   line_no_             IN NUMBER )
IS
BEGIN
   Transport_Task_Line_API.Pick(transport_task_id_, line_no_);
END Pick_Transport_Task_Line___;

PROCEDURE Unpick_Transport_Task_Line___ (
   transport_task_id_   IN NUMBER,
   line_no_             IN NUMBER )
IS
BEGIN
   Transport_Task_Line_API.Unpick(transport_task_id_, line_no_);
END Unpick_Transport_Task_Line___;

PROCEDURE Execute_Transport_Task_Lines___ (  
   selected_key_list_         IN VARCHAR2,
   part_tracking_session_id_  IN NUMBER ) 
IS   
   selection_          VARCHAR2(32000) := CONCAT(selected_key_list_, ';');
   inv_event_id_       NUMBER;   
   transport_task_id_  NUMBER;
   line_no_            NUMBER;
  
BEGIN 
   inv_event_id_ := Inventory_Event_Manager_API.Get_Next_Inventory_Event_Id;   
   WHILE (INSTR(selection_, ';') > 0) LOOP      
      transport_task_id_ := Client_SYS.Get_Key_Reference_Value(selection_, 'TRANSPORT_TASK_ID');
      line_no_ := Client_SYS.Get_Key_Reference_Value(selection_, 'LINE_NO');
      Transport_Task_Line_Initial_Check___(transport_task_id_, line_no_);
      Inventory_Event_Manager_API.Set_Session_Id(inv_event_id_);      
      Transport_Task_Line_API.Execute(transport_task_id_, line_no_, part_tracking_session_id_);
      selection_ := SUBSTR(selection_, (INSTR(selection_, ';') + 1));
   END LOOP;   
   Inventory_Event_Manager_API.Finish(inv_event_id_);   
END Execute_Transport_Task_Lines___;

PROCEDURE Execute_Transport_Task_Lines_For_Serials___ (  
   transport_task_id_         IN NUMBER,
   line_no_                   IN NUMBER,
   part_tracking_session_id_  IN NUMBER ) 
IS   
   inv_event_id_       NUMBER;   
  
BEGIN 
   inv_event_id_ := Inventory_Event_Manager_API.Get_Next_Inventory_Event_Id;   
   Inventory_Event_Manager_API.Set_Session_Id(inv_event_id_);
   Transport_Task_Line_API.Execute(transport_task_id_, line_no_, part_tracking_session_id_);
   Inventory_Event_Manager_API.Finish(inv_event_id_);   
   
END Execute_Transport_Task_Lines_For_Serials___;

FUNCTION Move_To_New_Transport_Task___ (
   new_transport_task_id_ IN NUMBER,
   set_to_fixed_          IN BOOLEAN,
   print_transport_task_  IN BOOLEAN,
   selection_             IN VARCHAR2 ) RETURN VARCHAR2 
IS
   key_list_            VARCHAR2(32000) := CONCAT(selection_, ';');
   transport_task_id_   NUMBER;
   line_no_             NUMBER;
   task_fixed_          VARCHAR2(5) := 'FALSE';
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER;
   result_key_list_     VARCHAR2(5000);
   end_user_            VARCHAR2(200) := Fnd_Session_API.Get_Fnd_User;
   
BEGIN
   IF set_to_fixed_ THEN
      task_fixed_ := 'TRUE';
   END IF;   
   
   WHILE (INSTR(key_list_, ';') > 0) LOOP      
      Client_SYS.Clear_attr(parameter_attr_);
      transport_task_id_ := Client_SYS.Get_Key_Reference_Value(key_list_, 'TRANSPORT_TASK_ID');
      line_no_ := Client_SYS.Get_Key_Reference_Value(key_list_, 'LINE_NO');
      Transport_Task_Line_Initial_Check___(transport_task_id_, line_no_);
      Transport_Task_Line_API.Move(transport_task_id_, line_no_, new_transport_task_id_, 'TRUE', task_fixed_ ,'FALSE', task_fixed_);
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));
      
      IF (print_transport_task_) THEN
         Client_SYS.Add_To_Attr('TRANSPORT_TASK_ID', new_transport_task_id_,   parameter_attr_);
         Client_SYS.Clear_Attr(report_attr_);
         Client_SYS.Add_To_Attr('REPORT_ID', 'TRANSPORT_TASK_REP', report_attr_);
         result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, end_user_);
         
         IF (result_key_list_ IS NULL) THEN
            result_key_list_ := result_key_;
         ELSE
            result_key_list_ := result_key_list_ || ',' || result_key_;
         END IF;         
      END IF;      
   END LOOP; 
   RETURN result_key_list_;
END Move_To_New_Transport_Task___;

PROCEDURE Apply_Drop_Off_Location___ (
   transport_task_id_ IN  NUMBER,
   line_no_           IN  NUMBER,
   info$_             OUT VARCHAR2)
IS  
BEGIN
   Transport_Task_Line_API.Apply_Drop_Off_Location(info$_, transport_task_id_, line_no_);  
END Apply_Drop_Off_Location___;

PROCEDURE Revoke_Two_Step_Transport_Task_Lines___ (
   transport_task_id_ IN NUMBER,
   line_no_           IN NUMBER,
   info$_             OUT VARCHAR2 )
IS  
BEGIN
   Transport_Task_Line_API.Revoke_Two_Step_Transport_Task(info$_, transport_task_id_, line_no_);
END Revoke_Two_Step_Transport_Task_Lines___;

FUNCTION Get_New_Transport_Task_Id___ (
	info$_ OUT VARCHAR2) RETURN NUMBER
IS
   objid_               VARCHAR2(2000);
   objversion_          VARCHAR2(2000);
   attr_                VARCHAR2(2000);
   transport_task_id_   NUMBER;
BEGIN
	Transport_Task_API.New__(info$_, objid_, objversion_, attr_, 'PREPARE');
   transport_task_id_ := Client_SYS.Get_Item_Value('TRANSPORT_TASK_ID', attr_);
   RETURN transport_task_id_;
END Get_New_Transport_Task_Id___;

FUNCTION Convert_Transport_Task_Id_And_Line_No___ (
   transport_task_id_   IN NUMBER,
   line_no_             IN NUMBER) RETURN Type_Conversion_Structure_Rec
IS  
   structure_  Type_Conversion_Structure_Rec;
BEGIN
   structure_.transport_task_id := TO_CHAR(transport_task_id_);
   structure_.line_no := TO_CHAR(line_no_);

RETURN structure_;
END Convert_Transport_Task_Id_And_Line_No___;
