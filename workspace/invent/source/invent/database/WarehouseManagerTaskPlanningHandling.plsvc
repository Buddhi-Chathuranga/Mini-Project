-----------------------------------------------------------------------------
--
--  Logical unit: WarehouseManagerTaskPlanningHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2019-04-24  AwWelk  SCUXXW4-18479, Removed the function Get_Warehouse_Tasks___ and added function where clause to improve the performance.
--  2018-11-19  KoDelk  SCUXXW4-6540, Converted from frmWarehouseMgrTaskPlanning using MTG Version: 1.32
-----------------------------------------------------------------------------

layer Core;
PROCEDURE Complete_Warehouse_Task___ (
   selection_ IN VARCHAR2 ) 
IS
   task_id_       NUMBER;
   contract_      VARCHAR2(10);
   worker_list_   VARCHAR2(32000) := '';
BEGIN
   FOR rec_ IN (SELECT regexp_substr(selection_ ,'[^;]+', 1, LEVEL) AS rec_ FROM dual CONNECT BY regexp_substr(selection_, '[^;]+', 1, LEVEL) IS NOT NULL) LOOP
      task_id_    := to_number(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TASK_ID'));
      Warehouse_Task_Initial_Check___(task_id_);
      
      IF contract_ IS NULL THEN
         contract_   := Warehouse_Task_API.Get_Contract(task_id_);
      END IF;
      worker_list_   := worker_list_||Warehouse_Task_API.Get_Worker_Id(task_id_)||Client_SYS.field_separator_;
   END LOOP;
   Warehouse_Task_API.Complete_Started_Tasks__(contract_, worker_list_);
END Complete_Warehouse_Task___;

FUNCTION Get_Dialog_Parameters___(
   selection_ IN VARCHAR2 )  RETURN Assign_Worker_Structure_Rec
IS
   return_val_ Assign_Worker_Structure_Rec;
   task_id_    NUMBER;
BEGIN
   FOR rec_ IN (SELECT regexp_substr(selection_ ,'[^;]+', 1, LEVEL) AS rec_ FROM dual CONNECT BY regexp_substr(selection_, '[^;]+', 1, LEVEL) IS NOT NULL) LOOP
      task_id_                   := to_number(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TASK_ID'));
      return_val_.contract       := Warehouse_Task_API.Get_Contract(task_id_);
      return_val_.task_type      := Warehouse_Task_API.Get_Task_Type(task_id_);
      return_val_.location_group := Warehouse_Task_API.Get_Location_Group(task_id_);
      
      IF task_id_ IS NOT NULL AND return_val_.contract IS NOT NULL THEN
         RETURN return_val_;
      END IF;
   END LOOP;
   RETURN return_val_;
END Get_Dialog_Parameters___;

PROCEDURE Assign_Tasks_To_Worker___ (
   selection_ IN VARCHAR2,
   worker_id_ IN VARCHAR2 ) 
IS
   task_id_list_  VARCHAR2(32000);
   task_id_       NUMBER;
BEGIN
   FOR rec_ IN (SELECT regexp_substr(selection_ ,'[^;]+', 1, LEVEL) AS rec_ FROM dual CONNECT BY regexp_substr(selection_, '[^;]+', 1, LEVEL) IS NOT NULL) LOOP
      task_id_    := to_number(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TASK_ID'));
      Warehouse_Task_Initial_Check___(task_id_);
      
      task_id_list_  := task_id_list_||Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TASK_ID')||Client_SYS.field_separator_;
   END LOOP;
   Warehouse_Task_API.Assign_Tasks_To_Worker__(task_id_list_, worker_id_);
END Assign_Tasks_To_Worker___;

PROCEDURE Assign_Tasks_To_Worker_Group___ (
   selection_    IN VARCHAR2,
   worker_group_ IN VARCHAR2 ) 
IS
   task_id_list_  VARCHAR2(32000);
   task_id_       NUMBER;
BEGIN
   FOR rec_ IN (SELECT regexp_substr(selection_ ,'[^;]+', 1, LEVEL) AS rec_ FROM dual CONNECT BY regexp_substr(selection_, '[^;]+', 1, LEVEL) IS NOT NULL) LOOP
      task_id_    := to_number(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TASK_ID'));
      Warehouse_Task_Initial_Check___(task_id_);
      
      task_id_list_  := task_id_list_||Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TASK_ID')||Client_SYS.field_separator_;
   END LOOP;
   
   Warehouse_Task_API.Assign_Tasks_To_Worker_Group__(task_id_list_, worker_group_);
END Assign_Tasks_To_Worker_Group___;