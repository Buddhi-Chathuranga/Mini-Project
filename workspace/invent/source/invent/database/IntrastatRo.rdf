-----------------------------------------------------------------------------
-- 
--  Logical unit: Intrastat  
--
--  File:         IntrastatRO.rdf
--
--  Date    Sign     History
--  ------  ----     ---------------------------------------------------------------------------------------------------
--  210127  SBalLK   Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127           custom field according to the report definition.
--  160526  Chgulk   STRLOC-473, Added new Address fields
--  151111  PrYaLK   Bug 121643, Added field OPPONENT_TAX_ID to the report.
--  151111           Modified the length of the variable company_name_ (Not relevant to this bug).
--  150803  PrYaLK   Bug 123639, Replaced calls to Company_Invoice_Info_API.Get_Vat_No with Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  150721  PrYaLK   Bug 123199, Modified Report_Overview method to exclude the invoiced value of CO-PURSHIP transaction since it should be 0.
--  150519  ShKolk   Bug 121489, Modified Report_Overview method to exclude the invoiced value of PURSHIP transaction since it should be 0.
--  131022  Hiralk   CAHOOK-2182, Replaced Person_Info_Comm_Method_API with Comm_Method_API.
--  120913  NipKlk   Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  121010  Tiralk   Bug 101052, Created.
-----------------------------------------------------------------------------------------------------------------------

DEFINE MODULE                    = INVENT
DEFINE LU                        = Intrastat
DEFINE PKG                       = INTRASTAT_RO_RPI

DEFINE TABLE                     = INVENT_INFO_SERVICES_RPT
DEFINE VIEW                      = INTRASTAT_RO_REP
DEFINE VIEW_RPV                  = INVENT_INFO_SERVICES_RPV
DEFINE METHOD                    = Report_Overview

DEFINE COMPANY_NAME              = S1  
DEFINE COMPANY_VAT_NO            = S2
DEFINE BRANCH_NO                 = S3
DEFINE COMPANY_ADDRESS_1         = S4  
DEFINE COMPANY_ADDRESS_2         = S5
DEFINE COMPANY_ADDRESS_3         = S24 
DEFINE COMPANY_ADDRESS_4         = S25 
DEFINE COMPANY_ADDRESS_5         = S26 
DEFINE COMPANY_ADDRESS_6         = S27 
DEFINE COMPANY_ZIP_CITY          = S6  
DEFINE COMPANY_CONTACT           = S7  
DEFINE COM_CONTACT_EMAIL         = S8  
DEFINE COM_CONTACT_PHONE         = S9
DEFINE COM_CONTACT_FAX           = S10  
DEFINE REPORTING_PERIOD          = S11
DEFINE CREATION_DATE             = S12
DEFINE REPORT_TITLE              = S13
DEFINE CURRENCY_CODE             = S14
DEFINE NATURE_OF_TRANSACTION_A   = S15
DEFINE NATURE_OF_TRANSACTION_B   = S16
DEFINE DELIVERY_TERMS            = S17
DEFINE MODE_OF_TRANSPORT         = S18
DEFINE COUNTRY_OF_ORIGIN         = S19
DEFINE ALT_UNIT_MEAS             = S20
DEFINE COMMODITY_CODE            = S21
DEFINE COUNTRY_OF_DEST           = S22
DEFINE OPPONENT_TAX_ID           = S23

DEFINE NO_OF_LINES               = N1
DEFINE WEIGHT_VAL_TOT            = N2
DEFINE INV_VAL_TOT               = N3
DEFINE STAT_VAL_TOT              = N4
DEFINE LINE_NO                   = N5
DEFINE NET_WEIGHT                = N6
DEFINE ALT_QUANTITY              = N7
DEFINE INVOICE_VALUE             = N8
DEFINE STAT_VALUE                = N9

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,       
       H.ROW_NO                                ROW_NO,           
       H.&COMPANY_NAME                         COMPANY_NAME,     
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&BRANCH_NO                            BRANCH_NO,
       H.&COMPANY_ADDRESS_1                    COMPANY_ADDRESS_1, 
       H.&COMPANY_ADDRESS_2                    COMPANY_ADDRESS_2,
       H.&COMPANY_ADDRESS_3                    COMPANY_ADDRESS_3,
       H.&COMPANY_ADDRESS_4                    COMPANY_ADDRESS_4,
       H.&COMPANY_ADDRESS_5                    COMPANY_ADDRESS_5,
       H.&COMPANY_ADDRESS_6                    COMPANY_ADDRESS_6,       
       H.&COMPANY_ZIP_CITY                     COMPANY_ZIP_CITY, 
       H.&COMPANY_CONTACT                      COMPANY_CONTACT,
       H.&COM_CONTACT_EMAIL                    COM_CONTACT_EMAIL,        
       H.&COM_CONTACT_PHONE                    COM_CONTACT_PHONE,
       H.&COM_CONTACT_FAX                      COM_CONTACT_FAX,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,  
       H.&CREATION_DATE                        CREATION_DATE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE, 
       H.&WEIGHT_VAL_TOT                       WEIGHT_VAL_TOT,
       H.&INV_VAL_TOT                          INV_VAL_TOT,
       H.&STAT_VAL_TOT                         STAT_VAL_TOT,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       D.&LINE_NO                              LINE_NO,
       D.&NATURE_OF_TRANSACTION_A              NATURE_OF_TRANSACTION_A,
       D.&NATURE_OF_TRANSACTION_B              NATURE_OF_TRANSACTION_B,
       D.&DELIVERY_TERMS                       DELIVERY_TERMS,
       D.&MODE_OF_TRANSPORT                    MODE_OF_TRANSPORT,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_QUANTITY                         ALT_QUANTITY,
       D.&ALT_UNIT_MEAS                        ALT_UNIT_MEAS,
       D.&INVOICE_VALUE                        INVOICE_VALUE,
       D.&STAT_VALUE                           STAT_VALUE,
       D.&COMMODITY_CODE                       COMMODITY_CODE,
       D.&COUNTRY_OF_DEST                      COUNTRY_OF_DEST,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company name:^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Tax No:^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Branch No:^ITEM_NAME=iBranchNo^'; 
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS_1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress1^';   
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS_2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress2^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress3^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress4^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress5^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress6^';
COMMENT ON COLUMN &VIEW..COMPANY_ZIP_CITY IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyZipCity^';
COMMENT ON COLUMN &VIEW..COMPANY_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company contact:^ITEM_NAME=iCompanyContact^';   
COMMENT ON COLUMN &VIEW..COM_CONTACT_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Email:^ITEM_NAME=iCompanyContactEmail^';  
COMMENT ON COLUMN &VIEW..COM_CONTACT_PHONE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Phone:^ITEM_NAME=iCompanyContactPhone^';
COMMENT ON COLUMN &VIEW..COM_CONTACT_FAX IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Fax:^ITEM_NAME=iCompanyContactFax^';  
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation date:^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of lines:^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report title^ITEM_NAME=iReportTitle^';   
COMMENT ON COLUMN &VIEW..WEIGHT_VAL_TOT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Net Weight :^ITEM_NAME=iWeightValTot^';
COMMENT ON COLUMN &VIEW..INV_VAL_TOT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value :^ITEM_NAME=iInvValTot^';
COMMENT ON COLUMN &VIEW..STAT_VAL_TOT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Statistical Value :^ITEM_NAME=iStatValTot^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting Currency code:^ITEM_NAME=iCurrencyCode^';
          
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..NATURE_OF_TRANSACTION_A IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction A^ITEM_NAME=iNatureOfTransaction^';
COMMENT ON COLUMN &VIEW..NATURE_OF_TRANSACTION_B IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction B^ITEM_NAME=iNatureOfTransaction^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Delivery Terms^ITEM_NAME=iDeliveryTerms^'; 
COMMENT ON COLUMN &VIEW..MODE_OF_TRANSPORT IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Mode of Transport^ITEM_NAME=iModeOfTransport^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAltQuantity^';
COMMENT ON COLUMN &VIEW..ALT_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative UoM^ITEM_NAME=iAltUnitMeas^';
COMMENT ON COLUMN &VIEW..INVOICE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvoiceValue^';
COMMENT ON COLUMN &VIEW..STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Statistical Value^ITEM_NAME=iStatValue^';
COMMENT ON COLUMN &VIEW..COMMODITY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Commodity Code^ITEM_NAME=iCommodityCode^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_DEST IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Country of Destination^ITEM_NAME=iCountryIm^';

COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Opponent Tax ID^ITEM_NAME=iOpponentTaxId^';


BEGIN 
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Romania','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_RO_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
  
   file_line_no_              NUMBER := 0;
   vat_no_                    VARCHAR2(50);
   stmt_                      VARCHAR2(2000);
   result_key_                NUMBER;
   row_no_                    NUMBER := 1;
   parent_row_no_             NUMBER := 0;
   report_title_              VARCHAR2(50);
   intrastat_id_              NUMBER;
   intrastat_direction_       VARCHAR2(20);
   rep_curr_rate_             NUMBER;
   country_code_              VARCHAR2(2);   
   statistical_values_sum_    NUMBER := 0;
   invoice_values_sum_        NUMBER := 0;
   net_weight_sum_            NUMBER := 0;
   report_period_             VARCHAR2(7);
   creation_date_str_         VARCHAR2(10);
   company_vat_no_            VARCHAR2(35);
   company_name_              VARCHAR2(40);
   notc_dummy_                VARCHAR2(2); 
   rounded_statistical_value_ NUMBER := 0;
   rounded_invoiced_amount_   NUMBER := 0;
   rounded_net_weight_        NUMBER := 0;
   co_addr_id_                Company_Address_Pub.address_id%TYPE;
   company_address6_          VARCHAR2(100);
   company_address5_          VARCHAR2(100);
   company_address4_          VARCHAR2(100);
   company_address3_          VARCHAR2(100);
   company_address2_          VARCHAR2(35);
   company_address1_          VARCHAR2(35);
   company_zip_city_          VARCHAR2(35);
   company_contact_name_      VARCHAR2(35);
   person_phone_              VARCHAR2(200);
   person_fax_                VARCHAR2(200);
   person_email_              VARCHAR2(200);
   notc_a_                    VARCHAR2(2);
   notc_b_                    VARCHAR2(3);
   alt_quantity_              NUMBER;

   do_xml_                    BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                     BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                       CLOB;
   package_name_              VARCHAR2(100) := 'INTRASTAT_RO_REP';

   CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc = notc_
      AND    country_code = 'RO';

   CURSOR get_head IS
      SELECT company,
             creation_date,
             company_contact,
             bransch_no,
             rep_curr_code,
             rep_curr_rate,
             country_code,
             end_date,
             begin_date,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_lines IS
      SELECT    il.intrastat_direction,
                il.opposite_country,
                DECODE (intrastat_direction_, 'IMPORT', il.country_of_origin, '')                     country_of_origin,
                cn.country_notc,
                il.mode_of_transport,
                SUBSTR(REPLACE(il.customs_stat_no,' '),1,8)                                           customs_stat_no,
                il.delivery_terms,
                il.intrastat_alt_unit_meas,
                SUM (il.quantity * il.net_unit_weight)                                                net_weight_sum,
                SUM (NVL(ABS(il.intrastat_alt_qty),0) * il.quantity)                                  intrastat_alt_qty_sum,
                SUM (il.quantity * NVL(il.invoiced_unit_price, DECODE(il.transaction, 'PURSHIP',    0,
                                                                                      'CO-PURSHIP', 0, il.order_unit_price))) * rep_curr_rate_
                                                                                                      invoiced_amount,
                SUM((NVL(il.invoiced_unit_price,NVL(il.order_unit_price,0)) +
                     NVL(il.unit_add_cost_amount_inv,NVL(il.unit_add_cost_amount,0)) +
                     NVL(il.unit_charge_amount_inv,0) +
                     NVL(il.unit_charge_amount,0)) * quantity) * rep_curr_rate_                       statistical_value,
                opponent_tax_id
      FROM     intrastat_line_tab il, country_notc_tab cn
      WHERE    il.intrastat_id        = intrastat_id_
      AND      il.intrastat_direction = intrastat_direction_
      AND      il.rowstate            = 'Released'
      AND      il.notc                = cn.notc
      AND      cn.country_code        = country_code_
      GROUP BY il.intrastat_direction,
               il.opposite_country,
               cn.country_notc,
               il.mode_of_transport,
               SUBSTR(REPLACE(il.customs_stat_no,' '),1,8),
               il.delivery_terms,
               il.intrastat_alt_unit_meas,
               DECODE (intrastat_direction_, 'IMPORT', il.country_of_origin, ''),
               opponent_tax_id;

BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_ := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));

   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN    
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOROCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTRO: Intrastat Export Report');
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTRO: Intrastat Import Report');
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR headrec_ IN get_head LOOP
      IF (headrec_.rep_curr_code NOT IN ('RON')) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGCURR: Reporting currency should be RON.');
      END IF;
      
      $IF Component_Invoic_SYS.INSTALLED $THEN
         vat_no_ := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(headrec_.company, headrec_.country_code, headrec_.creation_date);
      $ELSE
         NULL;
      $END
      
      IF vat_no_ IS NULL THEN
         Error_SYS.Record_General(lu_name_, 'NOROCOMPVATNO: TAX number is missing for company :P1.',headrec_.company);
      END IF;
  
      report_period_ := to_char(headrec_.end_date, 'YYYY') || '-' || to_char(headrec_.end_date, 'MM');         
      creation_date_str_ := to_char(headrec_.creation_date, 'YYYY') || '-' || to_char(headrec_.creation_date, 'MM') || '-' || to_char(headrec_.creation_date, 'DD');
      
      rep_curr_rate_ := headrec_.rep_curr_rate;
      country_code_ := headrec_.country_code;      

      company_vat_no_   :=  SUBSTR(vat_no_, 1, 10);
      co_addr_id_       := Company_Address_API.Get_Default_Address(headrec_.company, 
                           Address_Type_Code_API.Decode('INVOICE'), headrec_.creation_date);
      company_name_     := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 40);
      company_address6_ := Company_Address_API.Get_Address6(headrec_.company, co_addr_id_);
      company_address5_ := Company_Address_API.Get_Address5(headrec_.company, co_addr_id_);
      company_address4_ := Company_Address_API.Get_Address4(headrec_.company, co_addr_id_);
      company_address3_ := Company_Address_API.Get_Address3(headrec_.company, co_addr_id_);
      company_address2_ := Company_Address_API.Get_Address2(headrec_.company, co_addr_id_);  
      company_address1_ := Company_Address_API.Get_Address1(headrec_.company, co_addr_id_);
      company_zip_city_ := SUBSTR(Company_Address_API.Get_Zip_Code(headrec_.company, co_addr_id_), 1, 5) || ' ' ||
                           SUBSTR(Company_Address_API.Get_City(headrec_.company, co_addr_id_), 1, 29);
      IF headrec_.company_contact IS NULL THEN
         Error_SYS.Record_General(lu_name_, 'NOPERSON: Company contact is missing for company :P1.', headrec_.company);
      ELSE
         company_contact_name_ := SUBSTR(Person_Info_API.Get_Name(headrec_.company_contact), 1, 35);
         person_email_ := Comm_Method_API.Get_Default_Value('PERSON', headrec_.company_contact, 'E_MAIL' , NULL ,headrec_.creation_date);
         person_phone_ := Comm_Method_API.Get_Default_Value('PERSON', headrec_.company_contact, 'PHONE', NULL,headrec_.creation_date);
         IF person_phone_ IS NULL THEN
            Error_SYS.Record_General(lu_name_, 'NOCONTACTPHONE: Phone number is missing for company contact :P1.', headrec_.company_contact);
         END IF;
         person_fax_ := Comm_Method_API.Get_Default_Value('PERSON', headrec_.company_contact, 'FAX' , NULL, headrec_.creation_date);
      END IF;

      -- Insert Head details
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_str_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', report_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_CONTACT', company_contact_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ZIP_CITY', company_zip_city_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_6', company_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_5', company_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_4', company_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_3', company_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_2', company_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS_1', company_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BRANCH_NO', headrec_.bransch_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', headrec_.rep_curr_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COM_CONTACT_EMAIL', person_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COM_CONTACT_PHONE', person_phone_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COM_CONTACT_FAX', person_fax_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat', headrec_.rowkey, '&VIEW');

         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_RO_LINES');
      END IF;

      IF (do_rs_) THEN
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, 
             &COMPANY_NAME, &COMPANY_VAT_NO, 
             &COMPANY_CONTACT, &COMPANY_ZIP_CITY,&COMPANY_ADDRESS_6,&COMPANY_ADDRESS_5,
             &COMPANY_ADDRESS_4,&COMPANY_ADDRESS_3, &COMPANY_ADDRESS_2, &COMPANY_ADDRESS_1,           
             &BRANCH_NO, &REPORTING_PERIOD, &CREATION_DATE,
             &CURRENCY_CODE, &REPORT_TITLE, 
             &COM_CONTACT_EMAIL, &COM_CONTACT_PHONE, &COM_CONTACT_FAX )
         VALUES
            (result_key_, row_no_, parent_row_no_, 
            company_name_, company_vat_no_, 
            company_contact_name_, company_zip_city_,company_address6_,company_address5_,
            company_address4_,company_address3_, company_address2_, company_address1_,
            headrec_.bransch_no, report_period_, creation_date_str_,
            headrec_.rep_curr_code, report_title_,
            person_email_, person_phone_, person_fax_ );   
      END IF;

      parent_row_no_ := row_no_;   
      row_no_ := row_no_ + 1;

      -- Data Records
      FOR linerec_ IN get_lines LOOP
         IF linerec_.customs_stat_no IS NULL THEN
            Error_SYS.Record_General(lu_name_, 'NOROCUSTSTAT: Customs statistics number is missing for some lines.');
         END IF;
         IF linerec_.delivery_terms IS NULL THEN
            Error_SYS.Record_General(lu_name_, 'NORODELTERMS: Delivery term is missing for some lines.');
         ELSIF (linerec_.delivery_terms NOT IN ('EXW', 'FCA', 'FAS', 'FOB', 'CFR', 'CIF', 'CPT', 'CIP', 'DAT', 'DDP')) THEN
            linerec_.delivery_terms    := 'XXX';
         END IF;
         IF linerec_.mode_of_transport IS NULL THEN
            Error_SYS.Record_General(lu_name_, 'NOROMODETRANS: Mode of transport is missing for some lines.');
         END IF;

         IF linerec_.intrastat_direction = 'EXPORT' AND linerec_.opposite_country IS NULL THEN
            Error_SYS.Record_General(lu_name_, 'NOROOPPOSITECOUNTRY: Opposite country is mandatory for export lines. Values are missing for some export lines.');
         END IF;

         IF linerec_.intrastat_direction = 'IMPORT' AND linerec_.country_of_origin IS NULL THEN
            Error_SYS.Record_General(lu_name_, 'NOROCOUNTRYOFORIGIN: Country of Origin is mandatory for import lines. Values are missing for some import lines.');
         END IF;

         IF ((linerec_.opponent_tax_id IS NULL) AND (intrastat_direction_ = 'EXPORT')) THEN
            Error_SYS.Record_General(lu_name_, 'NOOPPONENTTAXID: Opponent tax ID is missing in some export lines and is required for Intrastat export report.');
         END IF;

         file_line_no_ := file_line_no_ + 1;
         
         notc_a_ := SUBSTR(linerec_.country_notc, -2, 1);
         IF notc_a_ IS NULL THEN
            notc_a_ := linerec_.country_notc;
            notc_b_ := NULL;
         ELSE
            notc_b_ := SUBSTR(linerec_.country_notc, -1, 1);
            notc_b_ := notc_a_ || '.' || notc_b_;
         END IF;
         rounded_statistical_value_ := CEIL(linerec_.statistical_value);
         rounded_invoiced_amount_ := CEIL(linerec_.invoiced_amount);
         rounded_net_weight_ := ROUND(linerec_.net_weight_sum);
         IF linerec_.intrastat_alt_qty_sum < 1 AND linerec_.intrastat_alt_qty_sum > 0 THEN
            alt_quantity_ := 1;
         ELSE
            alt_quantity_ := ROUND(linerec_.intrastat_alt_qty_sum);
         END IF;

         -- insert detail rows
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_,'INTRASTAT_RO_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', file_line_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_DEST', linerec_.opposite_country);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NATURE_OF_TRANSACTION_A', notc_a_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NATURE_OF_TRANSACTION_B', notc_b_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS', linerec_.delivery_terms);
            Xml_Record_Writer_SYS.Add_Element(xml_,'MODE_OF_TRANSPORT', linerec_.mode_of_transport);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', rounded_net_weight_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMMODITY_CODE', linerec_.customs_stat_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_QUANTITY', alt_quantity_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_UNIT_MEAS', linerec_.intrastat_alt_unit_meas);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', rounded_invoiced_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUE', rounded_statistical_value_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
            Xml_Record_Writer_SYS.End_Element(xml_,'INTRASTAT_RO_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_DEST, &COUNTRY_OF_ORIGIN, 
                &NATURE_OF_TRANSACTION_A, &NATURE_OF_TRANSACTION_B,
                &COMMODITY_CODE, &ALT_QUANTITY, &ALT_UNIT_MEAS,
                &DELIVERY_TERMS, &MODE_OF_TRANSPORT,
                &NET_WEIGHT, &STAT_VALUE, &INVOICE_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, file_line_no_, 
                linerec_.opposite_country, linerec_.country_of_origin,
                notc_a_, notc_b_,
                linerec_.customs_stat_no, alt_quantity_, linerec_.intrastat_alt_unit_meas, 
                linerec_.delivery_terms, linerec_.mode_of_transport,
                rounded_net_weight_, rounded_statistical_value_, rounded_invoiced_amount_, linerec_.opponent_tax_id );
         END IF;

         row_no_ := row_no_ + 1;

         -- sums
         statistical_values_sum_ := statistical_values_sum_ + rounded_statistical_value_;
         invoice_values_sum_ := invoice_values_sum_ + rounded_invoiced_amount_;
         net_weight_sum_ := net_weight_sum_ + rounded_net_weight_;

      END LOOP;

      IF (row_no_ = 2) THEN -- no details      
         -- insert blank row
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_RO_LINE');
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_RO_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_OF_DEST, &COUNTRY_OF_ORIGIN, 
                &NATURE_OF_TRANSACTION_A, &NATURE_OF_TRANSACTION_B,
                &COMMODITY_CODE, &ALT_QUANTITY, &ALT_UNIT_MEAS,
                &DELIVERY_TERMS, &MODE_OF_TRANSPORT,
                &NET_WEIGHT, &STAT_VALUE, &INVOICE_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, NULL, 
                NULL, NULL,
                NULL, NULL,
                NULL, NULL, NULL,
                NULL, NULL, 
                NULL, NULL, NULL, NULL );  
         END IF;
      END IF;
      
      -- update the head with no_of_lines and sums
      IF (do_rs_) THEN
         UPDATE &TABLE
         SET    &NO_OF_LINES     = file_line_no_,
                &STAT_VAL_TOT    = statistical_values_sum_,
                &INV_VAL_TOT     = invoice_values_sum_,
                &WEIGHT_VAL_TOT  = net_weight_sum_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_,'INTRASTAT_RO_LINES');
         Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', file_line_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INV_VAL_TOT', ROUND(invoice_values_sum_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VAL_TOT', ROUND(statistical_values_sum_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_VAL_TOT', ROUND(net_weight_sum_));
      END IF; 
   END LOOP;
 
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF; 

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
----------------------------------------------------------------------------- 

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE COMPANY_NAME              
UNDEFINE COMPANY_VAT_NO            
UNDEFINE BRANCH_NO                 
UNDEFINE COMPANY_ADDRESS_1          
UNDEFINE COMPANY_ADDRESS_2
UNDEFINE COMPANY_ADDRESS_3
UNDEFINE COMPANY_ADDRESS_4
UNDEFINE COMPANY_ADDRESS_5
UNDEFINE COMPANY_ADDRESS_6
UNDEFINE COMPANY_ZIP_CITY          
UNDEFINE COMPANY_CONTACT           
UNDEFINE COM_CONTACT_EMAIL                 
UNDEFINE COM_CONTACT_PHONE               
UNDEFINE COM_CONTACT_FAX            
UNDEFINE REPORTING_PERIOD          
UNDEFINE CREATION_DATE             
UNDEFINE REPORT_TITLE              
UNDEFINE CURRENCY_CODE             
UNDEFINE NATURE_OF_TRANSACTION_A   
UNDEFINE NATURE_OF_TRANSACTION_B   
UNDEFINE DELIVERY_TERMS            
UNDEFINE MODE_OF_TRANSPORT         
UNDEFINE COUNTRY_OF_ORIGIN         
UNDEFINE ALT_UNIT_MEAS             
UNDEFINE COMMODITY_CODE            
UNDEFINE COUNTRY_OF_DEST
UNDEFINE NO_OF_LINES               
UNDEFINE WEIGHT_VAL_TOT            
UNDEFINE INV_VAL_TOT               
UNDEFINE STAT_VAL_TOT              
UNDEFINE LINE_NO                   
UNDEFINE NET_WEIGHT                
UNDEFINE ALT_QUANTITY              
UNDEFINE INVOICE_VALUE             
UNDEFINE STAT_VALUE
UNDEFINE OPPONENT_TAX_ID
