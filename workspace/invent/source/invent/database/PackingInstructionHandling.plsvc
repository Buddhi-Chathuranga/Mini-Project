-----------------------------------------------------------------------------
--
--  Logical unit: PackingInstructionHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2019-01-14  ChFolk  SCUXXW4-6367, Added methods Remove_Complete_Structure___ and Create_Sub_Handling_Unit___.
--  2019-01-11  ChFolk  SCUXXW4-6367, Created.
---------------------------------------------------------------------------------

layer Core;

PROCEDURE Create_Packing_Instruction___ (
   packing_instruction_id_ IN  VARCHAR2,
   description_            IN  VARCHAR2,
   info$_                  OUT VARCHAR2 ) 
IS
   objid_           VARCHAR2(20);
   objversion_      VARCHAR2(100);
   attr_            VARCHAR2(2000);  
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', packing_instruction_id_, attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', description_, attr_);
   Packing_Instruction_API.new__(info$_, objid_, objversion_, attr_, 'DO');   
END Create_Packing_Instruction___;


FUNCTION Get_Packing_Details___(
   packing_instruction_id_ IN VARCHAR2,
   node_id_                IN NUMBER )  RETURN Objid_Arr
IS
   base_collection_   Objid_Arr := Objid_Arr();
   quantity_   NUMBER;
   
   CURSOR get_child_details IS
      SELECT objid, quantity, parent_node_id, handling_unit_type_id
      FROM PACKING_INSTRUCTION_NODE
      WHERE packing_instruction_id = packing_instruction_id_
      AND parent_node_id = node_id_;                 
 
 BEGIN   
    FOR rec_ IN get_child_details LOOP
      IF rec_.quantity = 1 THEN
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;        
      ELSIF (rec_.quantity > 1) THEN            
         quantity_ := rec_.quantity;         
         WHILE quantity_ > 0 LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
            quantity_ := quantity_ - 1;
         END LOOP;   
      END IF;   
   END LOOP;
   
   RETURN base_collection_;
END Get_Packing_Details___;

FUNCTION Get_Handling_Unit_Type_Details___(
   handling_unit_type_id_ IN VARCHAR2 )  RETURN Handling_Unit_Type_Detail_Structure_Rec
IS
   hu_type_details_      Handling_Unit_Type_Detail_Structure_Rec;
   hu_type_rec_          Handling_Unit_Type_API.Public_Rec;
BEGIN
   hu_type_rec_ := Handling_Unit_Type_API.Get(handling_unit_type_id_);
   hu_type_details_.generate_sscc_no_db := CASE hu_type_rec_.generate_sscc_no WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                           ELSE FALSE END;
   hu_type_details_.print_label_db := CASE hu_type_rec_.print_label WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                           ELSE FALSE END;
   hu_type_details_.no_of_handling_unit_labels := hu_type_rec_.no_of_handling_unit_labels;                                              
   hu_type_details_.print_content_label_db := CASE hu_type_rec_.print_content_label WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                           ELSE FALSE END;
   hu_type_details_.no_of_content_labels := hu_type_rec_.no_of_content_labels;                                              
   hu_type_details_.print_shipment_label_db := CASE hu_type_rec_.print_shipment_label WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                           ELSE FALSE END;
   hu_type_details_.no_of_shipment_labels := hu_type_rec_.no_of_shipment_labels;                                              
    
   RETURN hu_type_details_;
   
END Get_Handling_Unit_Type_Details___;
                                           
PROCEDURE Create_Sub_Handling_Unit___ (
   packing_instruction_id_ IN  VARCHAR2,
   description_            IN  VARCHAR2,
   parent_node_id_         IN  NUMBER,
   handling_unit_type_id_  IN  VARCHAR2,
   quantity_               IN  NUMBER,
   info$_                  OUT VARCHAR2) 
IS
   objid_           VARCHAR2(20);
   objversion_      VARCHAR2(100);
   attr_            VARCHAR2(2000);
   hu_type_rec_     Handling_Unit_Type_API.Public_Rec;
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', packing_instruction_id_, attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', description_, attr_);
   Client_SYS.Add_To_Attr('PARENT_NODE_ID', parent_node_id_, attr_);
   Client_SYS.Add_To_Attr('HANDLING_UNIT_TYPE_ID', handling_unit_type_id_, attr_);
   Client_SYS.Add_To_Attr('QUANTITY', quantity_, attr_);
   hu_type_rec_ := Handling_Unit_Type_API.Get(handling_unit_type_id_);
   Client_SYS.Add_To_Attr('GENERATE_SSCC_NO_DB', hu_type_rec_.generate_sscc_no, attr_);
   Client_SYS.Add_To_Attr('MIX_OF_PART_NO_BLOCKED_DB', Fnd_Boolean_API.DB_FALSE, attr_);
   Client_SYS.Add_To_Attr('MIX_OF_LOT_BATCH_BLOCKED_DB', Fnd_Boolean_API.DB_FALSE, attr_);
   Client_SYS.Add_To_Attr('MIX_OF_COND_CODE_BLOCKED_DB', Fnd_Boolean_API.DB_FALSE, attr_);
   Client_SYS.Add_To_Attr('PRINT_LABEL_DB', hu_type_rec_.print_label, attr_);
   Client_SYS.Add_To_Attr('NO_OF_HANDLING_UNIT_LABELS', hu_type_rec_.no_of_handling_unit_labels, attr_);
   Client_SYS.Add_To_Attr('PRINT_CONTENT_LABEL_DB', hu_type_rec_.print_content_label, attr_);
   Client_SYS.Add_To_Attr('NO_OF_CONTENT_LABELS', hu_type_rec_.no_of_content_labels, attr_);
   Client_SYS.Add_To_Attr('PRINT_SHIPMENT_LABEL_DB', hu_type_rec_.print_shipment_label, attr_);
   Client_SYS.Add_To_Attr('NO_OF_SHIPMENT_LABELS', hu_type_rec_.no_of_shipment_labels, attr_);
   Packing_Instruction_Node_API.New__(info$_, objid_, objversion_, attr_, 'DO');
END Create_Sub_Handling_Unit___;                                           
                                         
PROCEDURE Remove_Complete_Structure___ (
	key_ IN Packing_Instruction_Key)
IS
BEGIN
	Packing_Instruction_Node_API.Remove_Complete_Structure(key_.packing_instruction_id);
END Remove_Complete_Structure___;

FUNCTION Packing_Instruction_Initial_Check___ (
   packing_instruction_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   found_ BOOLEAN := FALSE;
   dummy_ NUMBER;
   
   CURSOR check_record IS
      SELECT 1
      FROM  PACKING_INSTRUCTION
      WHERE packing_instruction_id = packing_instruction_id_;
BEGIN
   OPEN check_record;
   FETCH check_record INTO dummy_;
   IF check_record%FOUND THEN 
      found_ := TRUE;
   END IF ;
   CLOSE check_record;
   RETURN found_;   
END Packing_Instruction_Initial_Check___;

PROCEDURE Packing_Instruction_Initial_Check___ (
   packing_instruction_id_ IN VARCHAR2 )
IS
BEGIN
   IF (NOT (Packing_Instruction_Initial_Check___(packing_instruction_id_))) THEN
      Error_SYS.Appl_Failure(lu_name_, err_source_ => 'Packing_Instruction_Initial_Check___(packing_instruction_id_)');
   END IF;
END Packing_Instruction_Initial_Check___;
