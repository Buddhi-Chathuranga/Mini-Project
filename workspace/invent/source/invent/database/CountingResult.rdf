-----------------------------------------------------------------------------
--
--  Logical unit: Counting Result
--
--  Purpose:      Create count result for inventory part
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  151019  MaEelk  LIM-3785, Removed pallet_id from the report
--  150708  MaEelk  LIM-3316, Added Handling Unit ID to the report.
--  141124  DaZase  PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
--  140716  TiRalk  Bug 117850, Modified report method to print company name properly.
--  130731  MaRalk  TIBE-834, Removed global LU constant inst_Project_ and modified Report_Printout 
--  130731          using conditional compilation instead.
--  111027  NISMLK  SMA-285, Increased eng_chg_level length to STRING(6) in column comments.
--  110804  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the value.
--  110228  ChJalk  Used counting_result_tab instead of counting_result base view in cursors.  
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  061106  DaZase  Removed call to Part_Catalog_API.Get_Enabled_Catch_Unit_Code 
--                  since this is now a public attribute in Inventory_Part instead.
--  060720  RoJalk  Centralized Part Desc - Use Inventory_Part_API.Get_Description.
--  060601  RoJalk  Enlarge Part Description - Changed view comments.
--------------------------------------13.4.0---------------------------------
--  051216  SuJalk  Changed the parameter VIEW_RPV to TAB in Define_Report_.
--  050921  NiDalk  Removed unused variables.
--  041011  SaNalk  Converted to Report Designer Layout.
--  041005  HaPulk  Removed security constraint from view COUNTING_RESULT_REP. 
--  040929  SaJjlk  Added catch_uom to detail lines.
--  040901  HaPulk  Bug 44975, Added security constraint to view COUNTING_RESULT_REP. 
--  040726  Samnlk  Added a dynamica call to get the project details.
--  040720  Samnlk  Added new detail lines project_id,sub_project_id,activity_id,activity_sequence.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view COUNTING_RESULT_REP.
----------------------------------- 13.3.0 -------------------------------------
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030731  MaGulk  Merged SP4
--  030514  ErSolk  Bug 37242, Made changes to overcome error when printing 'Count Control Report'.
--  021112  SaRalk  Bug 33337, Added code which enables to add different logos for different companies. 
--  020626  CHJALK  Added Condition Code and Condition Code Description.
--  020603  NASALK  Extension of serial_no  from VARCHAR2(15) to VARCHAR2(50)in views.
------------------------------- AD 2002-3 Baseline ----------------------------------
--  000925  JOHESE  Added undefines.
--  000828  PaLj  CTO-adaptions. Configuration Id added.
--  000302  ANHO  Removed reference on inv_list_no.
--  000214  PELA  Created.
-----------------------------------------------------------------------------

define MODULE      = INVENT
define LU          = CountingResult
define PKG         = COUNTING_RESULT_RPI

define TAB       = INVENT_INFO_SERVICES_RPT
define VIEW      = COUNTING_RESULT_REP
DEFINE VIEW_RPV  = INVENT_INFO_SERVICES_RPV
define METHOD    = Report_Printout

-- REPTAB definition
define INV_LIST_NO           = S1
define CONTRACT              = S2
define LOCATION_NO           = S3
define LOT_BATCH_NO          = S4
define PART_NO               = S5
define SERIAL_NO             = S6
define WAIV_DEV_REJ_NO       = S7
define ENG_CHG_LEVEL         = S8
define SEQ                   = N1
define WAREHOUSE             = S10
define BAY_NO                = S11
define ROW_NO                = S12
define TIER_NO               = S13
define BIN_NO                = S14
define PART_DESCRIPTION      = S15
define PART_UOM              = S16
define CONFIGURATION_ID      = S17
define CONDITION_CODE        = S18
define CONDITION_CODE_DESCRIPTION = S19
define PROJECT_ID            = S20
define SUB_PROJECT_ID        = S21
define ACTIVITY_ID           = S22
define ACTIVITY_SEQUENCE     = S23
define CATCH_UOM             = S24
define HANDLING_UNIT_ID      = N2

-----------------------------------------------------------------------------
-- TABLES:
-----------------------------------------------------------------------------

PROMPT Creating reports for logical unit &LU

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_ CONSTANT VARCHAR2(6)   := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS                      
-----------------------------------------------------------------------------


PROMPT Creating report view &VIEW

-- Drop the view before recreating it to make sure the view is created
-- from scratch again
CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                                              RESULT_KEY,
       &INV_LIST_NO                                            INV_LIST_NO,
       &CONTRACT                                               CONTRACT,
       &WAREHOUSE                                              WAREHOUSE,
       &BAY_NO                                                 BAY_NO,      
       &ROW_NO                                                 ROW_NO,   
       &TIER_NO                                                TIER_NO,     
       &BIN_NO                                                 BIN_NO,   
       &SEQ                                                    SEQ,
       &PART_NO                                                PART_NO,
       &PART_DESCRIPTION                                       PART_DESCRIPTION,
       &CONFIGURATION_ID                                       CONFIGURATION_ID,
       &PART_UOM                                               PART_UOM,      
       &SERIAL_NO                                              SERIAL_NO,
       &WAIV_DEV_REJ_NO                                        WAIV_DEV_REJ_NO,
       &ENG_CHG_LEVEL                                          ENG_CHG_LEVEL,
       &LOT_BATCH_NO                                           LOT_BATCH_NO,
       &CONDITION_CODE                                         CONDITION_CODE,
       &CONDITION_CODE_DESCRIPTION                             CONDITION_CODE_DESCRIPTION,
       &PROJECT_ID                                             PROJECT_ID,
       &SUB_PROJECT_ID                                         SUB_PROJECT_ID,
       &ACTIVITY_ID                                            ACTIVITY_ID,
       &ACTIVITY_SEQUENCE                                      ACTIVITY_SEQUENCE,
       &CATCH_UOM                                              CATCH_UOM,
       &HANDLING_UNIT_ID                                       HANDLING_UNIT_ID
FROM   &VIEW_RPV t 
WITH   read only;

COMMENT ON TABLE &view IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Counting Result^';

COMMENT ON COLUMN &view..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &view..INV_LIST_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=Inv List No^TITLE=Count Report No^ITEM_NAME=iInvListNo^QUERY=Count Report No^QFLAGS=MCS--^';
COMMENT ON COLUMN &view..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Contract^TITLE=Site^ITEM_NAME=iContract^';
COMMENT ON COLUMN &view..WAREHOUSE IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=Warehouse^TITLE=Warehouse^ITEM_NAME=iWarehouse^';
COMMENT ON COLUMN &view..BAY_NO IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Bay No^TITLE=Bay^ITEM_NAME=iBayNo^';
COMMENT ON COLUMN &view..ROW_NO IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Row No^TITLE=Row^ITEM_NAME=iRowNo^';
COMMENT ON COLUMN &view..TIER_NO IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Tier No^TITLE=Tier^ITEM_NAME=iTierNo^';
COMMENT ON COLUMN &view..BIN_NO IS
   'FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Bin No^TITLE=Bin^ITEM_NAME=iBinNo^';
COMMENT ON COLUMN &view..SEQ IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Seq^TITLE=Sequence No^ITEM_NAME=iSeq^';
COMMENT ON COLUMN &view..PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Part No^TITLE=Part No^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &view..PART_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Part Description^TITLE=Description^ITEM_NAME=iPartDescription^';
COMMENT ON COLUMN &view..CONFIGURATION_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Configuration ID^TITLE=Configuration ID^ITEM_NAME=iConfigurationId^';
COMMENT ON COLUMN &view..PART_UOM IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Part Uom^TITLE=UoM^ITEM_NAME=iPartUom^';
COMMENT ON COLUMN &view..SERIAL_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Serial No^TITLE=Serial No^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &view..WAIV_DEV_REJ_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=Waiv Dev Rej No^TITLE=W/D/R No^ITEM_NAME=iWaivDevRejNo^';
COMMENT ON COLUMN &view..ENG_CHG_LEVEL IS
   'FLAGS=A----^DATATYPE=STRING(6)^PROMPT=Eng Chg Level^TITLE=EC^ITEM_NAME=iEngChgLevel^';
COMMENT ON COLUMN &view..LOT_BATCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Lot Batch No^TITLE=Lot/Batch^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &view..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^PROMPT=Condition Code^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &view..CONDITION_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Condition Code Description^TITLE=Condition Code Description^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &view..Project_ID IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Project ID^TITLE=Project ID^ITEM_NAME=iProjectId^';
COMMENT ON COLUMN &view..Sub_Project_ID IS
   'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Sub Project ID^TITLE=Sub Project ID^ITEM_NAME=iSubProjectId^';
COMMENT ON COLUMN &view..Activity_ID IS
   'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Activity ID^TITLE=Activity ID^ITEM_NAME=iActivityId^';
COMMENT ON COLUMN &view..Activity_Sequence IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Activity Sequence^TITLE=Activity Sequence^ITEM_NAME=iActivitySequence^';
COMMENT ON COLUMN &view..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Catch Uom^TITLE=Catch UoM^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &view..HANDLING_UNIT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Handling Unit ID^TITLE=Handling Unit ID^ITEM_NAME=iHandlingUnitId^';

BEGIN
   Report_SYS.Define_Report_( '&VIEW', '&MODULE', '&LU', 'Control Counting Report', '&TAB', '&PKG..&METHOD', 8,'','','','PLSQL1.2','TRUE','Warehouse Management','Counting');
   Report_SYS.Refresh_('&view');   
end;   
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     PURCHASE_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-- Report_Printout:
--
-- Purpose: Extracts information needed for a printout report of
--          one count report. The parameter inv_list_no
--          should be a comma separated 
--          list containing the counting report no to
--          be printed. 
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER;
   row_no_                     NUMBER := 0;
   parent_row_no_              NUMBER := 0;
   inv_list_no_                &view..INV_LIST_NO%TYPE;
   inventory_location_rec_     Inventory_Location_API.Public_Rec;
   inventory_part_rec_         Inventory_Part_API.Public_Rec;
   language_code_              VARCHAR2(4);
   archive_notes_              VARCHAR2(200);
                              
   condition_code_             VARCHAR2(10);
   condition_code_description_ VARCHAR2(35);

   to_                         NUMBER;
   logotype_                   VARCHAR2(100);   
   company_                    VARCHAR2(20);
   company_name_               VARCHAR2(100);  
   
   temp_contract_              VARCHAR2(5);
   sub_project_id_             VARCHAR2(35);
   activity_id_                VARCHAR2(35);
   catch_uom_                  VARCHAR2(50);
   part_description_           &VIEW..PART_DESCRIPTION%TYPE; 
   
   $IF Component_Proj_Sys.INSTALLED $THEN
      activity_rec_           Activity_API.Public_Rec; 
   $END
   
   do_xml_       BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_          CLOB;
   package_name_ VARCHAR2(100) := 'COUNTING_RESULT_REP';
                           
   CURSOR get_contract IS
      SELECT contract
      FROM   counting_result_tab
      WHERE  inv_list_no = inv_list_no_
      AND    rowstate = 'Rejected';

   CURSOR get_record IS
      SELECT inv_list_no,
             contract,
             location_no,
             seq,
             part_no,
             configuration_id,
             serial_no,
             waiv_dev_rej_no,
             eng_chg_level,
             lot_batch_no,
             Activity_seq,
             Project_id,
             handling_unit_id
      FROM   counting_result_tab
      WHERE  inv_list_no = inv_list_no_
      AND    rowstate = 'Rejected';

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_  := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   inv_list_no_ := Client_SYS.Get_Item_Value('INV_LIST_NO', parameter_attr_);
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
   END IF;

   language_code_ := Language_SYS.Get_Language;

   -- Set report language
   Archive_API.Set_Language(language_code_);
      
   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'INVLISTNO: Inv List No');
   archive_notes_ := archive_notes_ || ': '|| inv_list_no_;
   Archive_API.Set_Notes(archive_notes_);

   trace_sys.message('inv_list_no: '||inv_list_no_);

   OPEN get_contract;
   FETCH get_contract INTO temp_contract_;
   IF (get_contract %FOUND) THEN
      to_ := instr(inv_list_no_, ';', 1);
      IF (to_ = 0) AND (inv_list_no_  <> '%') THEN      
         company_      := Site_API.Get_Company(temp_contract_);
         logotype_     := Company_API.Get_Logotype(company_);  
         company_name_ := Site_API.Get_Company_Address_Name(temp_contract_);
      
         IF (logotype_ IS NOT NULL ) THEN
            Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
            Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
         END IF;
      END IF; 
   END IF;
   CLOSE get_contract;

   Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEMS'); 

   IF (do_xml_) THEN   
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEM');
      Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_LIST_NO', inv_list_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT', temp_contract_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'COUNT_ITEMS');
   END IF;

   FOR rec_ in get_record LOOP
      inventory_location_rec_     := Inventory_Location_API.Get(rec_.contract, rec_.location_no);
      inventory_part_rec_         := Inventory_Part_API.Get(rec_.contract, rec_.part_no);
      part_description_           := Inventory_Part_API.Get_Description(rec_.contract, rec_.part_no);

      condition_code_             := Condition_Code_Manager_API.Get_Condition_Code (rec_.part_no,rec_.serial_no,rec_.lot_batch_no);
      condition_code_description_ := Condition_Code_API.Get_Description(condition_code_);
      catch_uom_                  := inventory_part_rec_.catch_unit_meas;
      
      $IF Component_Proj_Sys.INSTALLED $THEN
         activity_rec_   := Activity_API.Get(rec_.activity_seq);             
         sub_project_id_ := activity_rec_.sub_project_id;
         activity_id_    := activity_rec_.activity_no; 
      $END
      
      IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'COUNT_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAREHOUSE', Upper(inventory_location_rec_.warehouse));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BAY_NO', Upper(inventory_location_rec_.bay_no));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ROW_NO', Upper(inventory_location_rec_.row_no));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TIER_NO', Upper(inventory_location_rec_.tier_no));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BIN_NO', Upper(inventory_location_rec_.bin_no));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SEQ', rec_.seq);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', rec_.part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_DESCRIPTION', part_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIGURATION_ID', rec_.configuration_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_UOM', inventory_part_rec_.unit_meas);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', rec_.serial_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAIV_DEV_REJ_NO', rec_.waiv_dev_rej_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ENG_CHG_LEVEL', rec_.eng_chg_level);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', rec_.lot_batch_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', condition_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PROJECT_ID', rec_.project_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_PROJECT_ID', sub_project_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_ID', activity_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_SEQUENCE', rec_.activity_seq);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM', catch_uom_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', rec_.handling_unit_id);
            Xml_Record_Writer_SYS.End_Element(xml_, 'COUNT_ITEM');
      END IF;
      IF (do_rs_) THEN 
         INSERT INTO &TAB (
            result_key, 
            row_no, 
            parent_row_no, 
            &SEQ,
            &PART_NO,
            &CONFIGURATION_ID,
            &CONTRACT,
            &LOCATION_NO,
            &LOT_BATCH_NO,
            &SERIAL_NO,
            &ENG_CHG_LEVEL,
            &WAIV_DEV_REJ_NO,
            &WAREHOUSE, 
            &BAY_NO,
            &ROW_NO,
            &TIER_NO,
            &BIN_NO,
            &PART_DESCRIPTION,
            &PART_UOM,
            &INV_LIST_NO,
            &CONDITION_CODE,       
            &CONDITION_CODE_DESCRIPTION,
            &PROJECT_ID,
            &SUB_PROJECT_ID,
            &ACTIVITY_ID,
            &ACTIVITY_SEQUENCE,
            &CATCH_UOM,
            &HANDLING_UNIT_ID)         
         VALUES (
            result_key_, 
            row_no_, 
            parent_row_no_, 
            rec_.seq,
            rec_.part_no,
            rec_.configuration_id,
            rec_.contract,
            rec_.location_no,
            rec_.lot_batch_no,
            rec_.serial_no,
            rec_.eng_chg_level,
            rec_.waiv_dev_rej_no,
            Upper(inventory_location_rec_.warehouse),
            Upper(inventory_location_rec_.bay_no),
            Upper(inventory_location_rec_.row_no),
            Upper(inventory_location_rec_.tier_no),
            Upper(inventory_location_rec_.bin_no),
            part_description_,
            inventory_part_rec_.unit_meas,
            rec_.inv_list_no,
            condition_code_,
            condition_code_description_,
            rec_.project_id,
            sub_project_id_,
            activity_id_,
            rec_.activity_seq,
            catch_uom_,
            rec_.handling_unit_id);
      END IF;
      -- Row is incremented for next insert
      row_no_ := row_no_ + 1;

   END LOOP;
   IF (do_xml_) THEN

      Xml_Record_Writer_SYS.End_Element(xml_, 'COUNT_ITEMS');
      Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEM');
     Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEMS');
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORT TEXTS
-----------------------------------------------------------------------------
BEGIN
    Report_SYS.Define_Report_Text_('&VIEW', 'onHand', 'Quantity On Hand');
    Report_SYS.Define_Report_Text_('&VIEW', 'signature', 'Signature:');
    Report_SYS.Define_Report_Text_('&VIEW', 'CatchonHand', 'Catch Quantity On Hand');
END;
/




----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TAB
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE INV_LIST_NO
UNDEFINE CONTRACT
UNDEFINE LOCATION_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE PART_NO
UNDEFINE SERIAL_NO
UNDEFINE WAIV_DEV_REJ_NO
UNDEFINE ENG_CHG_LEVEL
UNDEFINE SEQ
UNDEFINE WAREHOUSE
UNDEFINE BAY_NO
UNDEFINE ROW_NO
UNDEFINE TIER_NO
UNDEFINE BIN_NO
UNDEFINE PART_DESCRIPTION
UNDEFINE PART_UOM
UNDEFINE CONFIGURATION_ID
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE PROJECT_ID
UNDEFINE SUB_PROJECT_ID
UNDEFINE ACTIVITY_ID
UNDEFINE ACTIVITY_SEQUENCE
UNDEFINE CATCH_UOM
UNDEFINE HANDLING_UNIT_ID
