-----------------------------------------------------------------------------
--
--  Logical unit : InventTransactionReport
--
--  File         : InventTransactionReport.rdf
--  Version      : Base Functionality 4.0.0 
--
--  Date    Sign    History                      
--  ------  ------  -----------------------------------------------------------
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not
--  210127          include custom field according to the report definition.
--  201218  DiJwlk  SC2020R1-11630, Added custom fields support for the view InventTransactionReport for the report.
--  160622  reanpl  STRLOC-394, Added handling of new address attributes
--  150512  IsSalk  KES-402, Renamed usages of order_no, release_no, sequence_no, line_item_no, order_type attributes of 
--  150512          InventoryTransactionHist to source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type.
--  141124  DaZase  PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
--  140716  TiRalk  Bug 117850, Modified report method to print company name properly.
--  130730  UdGnlk  TIBE-869, Removed the global variables and moved to the method. Modified dynamic code to conditional compilation.
--  121207  MalLlk  Bug 106997, Modified Report_Invent_Transactions() to fetch company currency and currency rounding.
--  121207          Changed the way for calculating the total posting value.  
--  110406  AmPalk  Bug 96562, Added do_rs_ sections. 
--  110510  Asawlk  Bug 96752, Modified Report_Invent_Transactions() to deduct 'TRANSIBAL' and 'PRICEDIFF' 
--  110510          values when calculating the total posting value.
--  110228  ChJalk  Used invent_transaction_report_tab and inventory_transaction_hist_tab instead of invent_transaction_report base view and inventory_transaction_hist in cursors respectively.
--  090403  SaWjlk  Bug 81437, modifed the size of the data type of company_addr_id_
--  090325  SaWjlk  Bug 81437, Site_API.Get_Delivery_Address() was used to assign the value to company_addr_id_
--  090107  NaWilk  Bug 79623, Added code which enables to add different logos for different companies. 
--  081201  HoInlk  Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  080103  NuVelk  Bug 70164, Made changes to the value Quantity to limit 
--  080103          the maximum no of digits to 23 as shown on windows client.
--  080102  HaPulk  Bug 70254, Added report notes displayed in the InfoServices archive.
--  070530  NiDalk  Modified view comments of SCRAPPING_CAUSE_DESC to modify title.
--  061109  MiErlk  Rewrote Customer_Order_API,Customer_Order_Address_API, Supplier_Address_API and Purchase_Order_API method calls as dynamic calls.
--  061030  NaLrlk  Added Number Series Column to the report header section.
--  060901  MiErlk  Added Transaction Code & Order Ref 4 to the detail section, Changed label Doc No in to Report ID.
--  060901          Made the value show only Absolute number. Changed method to fetch the value in to Mpccom_Accounting_API.Get_Total_Cost.
--  060825  MiErlk  Added Transaction ID to the detail section.
--  060824  MiErlk  Added a method call to find the Source Document Number.
--  060803  NaWilk  Used Inventory_Part_API.Get_Description instead of public rec.
--  060717  MiErlk  Created.
-----------------------------------------------------------------------------

DEFINE MODULE             = INVENT
DEFINE LU                 = InventTransactionReport
DEFINE PKG                = INVENT_TRANSACTION_REPORT_RPI

DEFINE TABLE              = INVENT_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
DEFINE VIEW               = INVENT_TRANSACTION_REPORT_REP
DEFINE METHOD             = Report_Invent_Transactions

DEFINE TRANSACTION_REPORT_ID = S1
DEFINE REPORT_TYPE_ID        = S2
DEFINE DESCRIPTION           = S3
DEFINE REPORT_DATE_CREATED   = D1
DEFINE COMPANY_NAME          = S4
DEFINE DELIVERY_ADDRESS1     = S5
DEFINE DELIVERY_ADDRESS2     = S6
DEFINE DELIVERY_ADDRESS3     = S7
DEFINE DELIVERY_ADDRESS4     = S8
DEFINE DELIVERY_ADDRESS5     = S9
DEFINE PARTY_NAME            = S10
DEFINE PARTY_ADDRESS1        = S11
DEFINE PARTY_ADDRESS2        = S12
DEFINE PARTY_ADDRESS3        = S13
DEFINE PARTY_ADDRESS4        = S14
DEFINE PARTY_ADDRESS5        = S15
DEFINE ORDER_TYPE            = S16
DEFINE ORD_TYPE_DB           = S17
DEFINE CONTRACT              = S18
DEFINE WAREHOUSE             = S19
DEFINE SEQ                   = N1
DEFINE TRANSACTION_ID        = N2
DEFINE TRANSACTION_CODE      = S20
DEFINE PART_NO               = S21
DEFINE PART_DESCRIPTION      = S22
DEFINE ORDER_NO              = S23
DEFINE LINE_NO               = S24
DEFINE RELEASE_NO            = S25
DEFINE LINE_ITEM_NO          = N3
DEFINE NOTE_TEXT             = S26
DEFINE DATE_APPLIED          = D2
DEFINE DATE_CREATED          = D3
DEFINE LOCATION_NO           = S27
DEFINE SERIAL_NO             = S28
DEFINE LOT_BATCH_NO          = S29
DEFINE WAIV_DEV_REJ_NO       = S30
DEFINE SOURCE_DOCUMENT_NO    = N4
DEFINE QUANTITY              = N5
DEFINE UNIT_MEAS             = S31
DEFINE COST                  = N6
DEFINE VALUE                 = N7
DEFINE SCRAPPING_CAUSE_DESC  = S32
DEFINE NUMBER_SERIES         = N8
DEFINE DELIVERY_ADDRESS6     = S33
DEFINE DELIVERY_ADDRESS7     = S34
DEFINE DELIVERY_ADDRESS8     = S35
DEFINE DELIVERY_ADDRESS9     = S36
DEFINE DELIVERY_ADDRESS10    = S37
DEFINE PARTY_ADDRESS6        = S38
DEFINE PARTY_ADDRESS7        = S39
DEFINE PARTY_ADDRESS8        = S40
DEFINE PARTY_ADDRESS9        = S41
DEFINE PARTY_ADDRESS10       = S42

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

--PROMPT Refreshing RPV view &VIEW_RPV

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       PARENT_ROW_NO                           PARENT_ROW_NO,
       &TRANSACTION_REPORT_ID                  TRANSACTION_REPORT_ID,
       &REPORT_TYPE_ID                         REPORT_TYPE_ID,
       &DESCRIPTION                            DESCRIPTION,
       &REPORT_DATE_CREATED                    REPORT_DATE_CREATED,
       &COMPANY_NAME                           COMPANY_NAME,
       &DELIVERY_ADDRESS1                      DELIVERY_ADDRESS1,
       &DELIVERY_ADDRESS2                      DELIVERY_ADDRESS2,
       &DELIVERY_ADDRESS3                      DELIVERY_ADDRESS3,
       &DELIVERY_ADDRESS4                      DELIVERY_ADDRESS4,
       &DELIVERY_ADDRESS5                      DELIVERY_ADDRESS5,
       &DELIVERY_ADDRESS6                      DELIVERY_ADDRESS6,
       &DELIVERY_ADDRESS7                      DELIVERY_ADDRESS7,
       &DELIVERY_ADDRESS8                      DELIVERY_ADDRESS8,
       &DELIVERY_ADDRESS9                      DELIVERY_ADDRESS9,
       &DELIVERY_ADDRESS10                     DELIVERY_ADDRESS10,
       &PARTY_NAME                             PARTY_NAME,
       &PARTY_ADDRESS1                         PARTY_ADDRESS1,
       &PARTY_ADDRESS2                         PARTY_ADDRESS2,
       &PARTY_ADDRESS3                         PARTY_ADDRESS3,
       &PARTY_ADDRESS4                         PARTY_ADDRESS4,
       &PARTY_ADDRESS5                         PARTY_ADDRESS5,
       &PARTY_ADDRESS6                         PARTY_ADDRESS6,
       &PARTY_ADDRESS7                         PARTY_ADDRESS7,
       &PARTY_ADDRESS8                         PARTY_ADDRESS8,
       &PARTY_ADDRESS9                         PARTY_ADDRESS9,
       &PARTY_ADDRESS10                        PARTY_ADDRESS10,
       &ORDER_TYPE                             ORDER_TYPE,
       &ORD_TYPE_DB                            ORD_TYPE_DB,
       &ORDER_NO                               ORDER_NO,
       &CONTRACT                               CONTRACT,
       &WAREHOUSE                              WAREHOUSE,
       &SEQ                                    SEQ,
       &TRANSACTION_ID                         TRANSACTION_ID,
       &TRANSACTION_CODE                       TRANSACTION_CODE,
       &PART_NO                                PART_NO,
       &PART_DESCRIPTION                       PART_DESCRIPTION,
       &LINE_NO                                LINE_NO,
       &RELEASE_NO                             RELEASE_NO,
       &LINE_ITEM_NO                           LINE_ITEM_NO,
       &NOTE_TEXT                              NOTE_TEXT,
       &DATE_APPLIED                           DATE_APPLIED,
       &DATE_CREATED                           DATE_CREATED,
       &LOCATION_NO                            LOCATION_NO,
       &SERIAL_NO                              SERIAL_NO,
       &LOT_BATCH_NO                           LOT_BATCH_NO,
       &WAIV_DEV_REJ_NO                        WAIV_DEV_REJ_NO,
       &SOURCE_DOCUMENT_NO                     SOURCE_DOCUMENT_NO,
       &QUANTITY                               QUANTITY,
       &UNIT_MEAS                              UNIT_MEAS,
       &COST                                   COST,
       &VALUE                                  VALUE,
       &SCRAPPING_CAUSE_DESC                   SCRAPPING_CAUSE_DESC,
       &NUMBER_SERIES                          NUMBER_SERIES
FROM  &VIEW_RPV 
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^
   ^METHOD=&PKG..&METHOD^MODE=PLSQL1.2^TABLE=&TABLE^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..TRANSACTION_REPORT_ID IS 
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Report ID:^QUERY=Transaction Report ID:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..REPORT_TYPE_ID IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Document Type^';
COMMENT ON COLUMN &VIEW..DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Description^';
COMMENT ON COLUMN &VIEW..REPORT_DATE_CREATED IS 
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Doc Date^';
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS 
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Name^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Receipient Address1^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Receipient Address2^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Receipient Address3^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Receipient Address4^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Receipient Address5^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Receipient Address6^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Receipient Address7^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Receipient Address8^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Receipient Address9^';
COMMENT ON COLUMN &VIEW..DELIVERY_ADDRESS10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Receipient Address10^';
COMMENT ON COLUMN &VIEW..PARTY_NAME IS 
   'FLAGS=AMIUL^DATATYPE=STRING(100)^TITLE=Party Name^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Party Address1^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Party Address2^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Party Address3^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Party Address4^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Party address5^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Party address6^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Party address7^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Party address8^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Party address9^';
COMMENT ON COLUMN &VIEW..PARTY_ADDRESS10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Party address10^';
COMMENT ON COLUMN &VIEW..ORDER_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Order Type:^';
COMMENT ON COLUMN &VIEW..ORD_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Order Type DB:^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Order Ref 1^';
COMMENT ON COLUMN &VIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^';
COMMENT ON COLUMN &VIEW..WAREHOUSE IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse:^';
COMMENT ON COLUMN &VIEW..SEQ IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Seq.^';
COMMENT ON COLUMN &VIEW..TRANSACTION_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Transaction ID^';
COMMENT ON COLUMN &VIEW..TRANSACTION_CODE IS 
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Transaction Code^';
COMMENT ON COLUMN &VIEW..PART_NO IS 
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^TITLE=Part No^';
COMMENT ON COLUMN &VIEW..PART_DESCRIPTION IS 
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Part Description^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Order Ref 2^';
COMMENT ON COLUMN &VIEW..RELEASE_NO IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Order Ref 3^'; 
COMMENT ON COLUMN &VIEW..LINE_ITEM_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Ref 4^';
COMMENT ON COLUMN &VIEW..NOTE_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Note: ^';
COMMENT ON COLUMN &VIEW..DATE_APPLIED IS 
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date Applied^';
COMMENT ON COLUMN &VIEW..DATE_CREATED IS 
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date Created^';
COMMENT ON COLUMN &VIEW..LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location^';
COMMENT ON COLUMN &VIEW..SERIAL_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Serial No^';
COMMENT ON COLUMN &VIEW..LOT_BATCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lot/Batch No^';
COMMENT ON COLUMN &VIEW..WAIV_DEV_REJ_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=W/D/R NO^PROMPT=W/D/R No^';    
COMMENT ON COLUMN &VIEW..SOURCE_DOCUMENT_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Source Doc.No^';
COMMENT ON COLUMN &VIEW..QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty^';
COMMENT ON COLUMN &VIEW..UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=U/M^';
COMMENT ON COLUMN &VIEW..COST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cost^';
COMMENT ON COLUMN &VIEW..VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Value^';
COMMENT ON COLUMN &VIEW..SCRAPPING_CAUSE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Scrap Cause/Return Reason^';
COMMENT ON COLUMN &VIEW..NUMBER_SERIES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number Series:^';

BEGIN
   Report_SYS.Refresh_('&VIEW');
   Report_SYS.Define_Report_( '&VIEW', '&MODULE', '&LU', 'Inventory Transaction Report', '&TABLE', '&PKG..&METHOD', 0,'','','','PLSQL1.2','TRUE','Warehouse Management','Financial Control');
   Report_SYS.Define_Report_Text_('&VIEW', 'Company_Title'  ,'Company:' );
   Report_SYS.Define_Report_Text_('&VIEW', 'Receiver_Title' ,'Receiver:');
   Report_SYS.Define_Report_Text_('&VIEW', 'Supply_Title'   ,'Supplier:');

   Report_SYS.Define_Report_Text_('&VIEW', 'Performed_By_Title'   ,'Performed By:');
   Report_SYS.Define_Report_Text_('&VIEW', 'Accepted_By_Title'   ,'Accepted By:');
   Report_SYS.Define_Report_Text_('&VIEW', 'Date_Title'   ,'Date:');
   Report_SYS.Define_Report_Text_('&VIEW', 'Signature_Title'   ,'Signature:');
   
   ----- Custom Fields Support------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','InventTransactionReport','INVENT_TRANSACTION_REPORT_REP');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

   

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   do_xml_       BOOLEAN       := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_        BOOLEAN       := Report_SYS.Should_Generate_Result_Set('&VIEW');   
   xml_          CLOB;
   package_name_ VARCHAR2(100) := 'INVENT_TRANSACTION_REPORT_REP';
   
   result_key_             NUMBER;
   row_no_                 NUMBER := 1;
   seq_no_                 NUMBER := 1;
   parent_row_no_          NUMBER;

   transaction_report_id_  VARCHAR2(120);
   number_series_          NUMBER;
   description_            &VIEW..DESCRIPTION%TYPE;

   report_type_id_         &VIEW..REPORT_TYPE_ID%TYPE;
   report_date_created_    &VIEW..REPORT_DATE_CREATED%TYPE;
   company_id_             VARCHAR2(20);
   contract_               &VIEW..CONTRACT%TYPE;
   warehouse_              &VIEW..WAREHOUSE%TYPE;
   note_text_              &VIEW..NOTE_TEXT%TYPE;
   order_no_               &VIEW..ORDER_NO%TYPE;
   
   company_name_           &VIEW..COMPANY_NAME%TYPE;
   company_addr_id_        VARCHAR2(50);
   delivery_address_1_     &VIEW..DELIVERY_ADDRESS1%TYPE;
   delivery_address_2_     &VIEW..DELIVERY_ADDRESS2%TYPE;
   delivery_address_3_     &VIEW..DELIVERY_ADDRESS3%TYPE;
   delivery_address_4_     &VIEW..DELIVERY_ADDRESS4%TYPE;
   delivery_address_5_     &VIEW..DELIVERY_ADDRESS5%TYPE;
   delivery_address_6_     &VIEW..DELIVERY_ADDRESS6%TYPE;
   delivery_address_7_     &VIEW..DELIVERY_ADDRESS7%TYPE;
   delivery_address_8_     &VIEW..DELIVERY_ADDRESS8%TYPE;
   delivery_address_9_     &VIEW..DELIVERY_ADDRESS9%TYPE;
   delivery_address_10_    &VIEW..DELIVERY_ADDRESS10%TYPE;

   transaction_id_         NUMBER;
   order_type_             &VIEW..ORDER_TYPE%TYPE;
   ord_type_db_            &VIEW..ORD_TYPE_DB%TYPE;

   party_id_               VARCHAR2(80);
   party_name_             &VIEW..PARTY_NAME%TYPE;
   party_address_1_        &VIEW..PARTY_ADDRESS1%TYPE;
   party_address_2_        &VIEW..PARTY_ADDRESS2%TYPE;
   party_address_3_        &VIEW..PARTY_ADDRESS3%TYPE;
   party_address_4_        &VIEW..PARTY_ADDRESS4%TYPE;
   party_address_5_        &VIEW..PARTY_ADDRESS5%TYPE;
   party_address_6_        &VIEW..PARTY_ADDRESS6%TYPE;
   party_address_7_        &VIEW..PARTY_ADDRESS7%TYPE;
   party_address_8_        &VIEW..PARTY_ADDRESS8%TYPE;
   party_address_9_        &VIEW..PARTY_ADDRESS9%TYPE;
   party_address_10_       &VIEW..PARTY_ADDRESS10%TYPE;
   vendor_addr_no_         Supplier_Info_Address_Public.address_id%TYPE;

   invent_trans_hist_rec_  Inventory_Transaction_Hist_API.Public_Rec;
   invent_part_rec_        Inventory_Part_API.Public_Rec;
   cost_                   &VIEW..COST%TYPE;
   value_                  &VIEW..VALUE%TYPE;
   scrapping_cause_desc_   &VIEW..SCRAPPING_CAUSE_DESC%TYPE;
   print_cost_db_          VARCHAR2(10);
   connected_trans_id_     NUMBER;

   archive_notes_          VARCHAR2(250);
   quantity_               &VIEW..QUANTITY%TYPE;
   logotype_               VARCHAR2(100);

   company_currency_       VARCHAR2(3);
   currency_rounding_      NUMBER;
   rowkey_                &VIEW..NOTE_TEXT%TYPE;

   CURSOR get_header_data     IS
      SELECT report_type_id,
             number_series,
             report_date_created, 
             company,
             contract, 
             warehouse, 
             note_text,
             order_no,
             print_cost,
             rowkey
      FROM   invent_transaction_report_tab 
      WHERE  transaction_report_id = transaction_report_id_;

   CURSOR get_connected_tranaction_id IS
      SELECT transaction_id
      FROM   inventory_transaction_hist_tab 
      WHERE  transaction_report_id = transaction_report_id_ ;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_            := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   transaction_report_id_ := Client_SYS.Get_Item_Value('TRANSACTION_REPORT_ID', parameter_attr_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;
   
      OPEN  get_header_data;
      FETCH get_header_data INTO report_type_id_, number_series_, report_date_created_, company_id_, contract_, warehouse_, note_text_, order_no_, print_cost_db_, rowkey_;
      CLOSE get_header_data;

      company_name_       := Site_API.Get_Company_Address_Name(contract_);
      company_currency_   := Company_Finance_API.Get_Currency_Code(company_id_);
      currency_rounding_  := Currency_Code_API.Get_Currency_Rounding(company_id_, company_currency_);
      description_        := Invent_Trans_Report_Type_API.Get_Description(company_id_, report_type_id_);
      company_addr_id_    := Site_API.Get_Delivery_Address(contract_);
      delivery_address_1_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,1);
      delivery_address_2_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,2);
      delivery_address_3_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,3);
      delivery_address_4_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,4);
      delivery_address_5_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,5);
      delivery_address_6_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,6);
      delivery_address_7_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,7);
      delivery_address_8_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,8);
      delivery_address_9_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,9);
      delivery_address_10_ := Company_Address_API.Get_Line(company_id_,company_addr_id_,10);
   
      IF (order_no_ IS NOT NULL) THEN
         OPEN  get_connected_tranaction_id;
         FETCH get_connected_tranaction_id INTO transaction_id_ ;
         CLOSE get_connected_tranaction_id;

         order_type_   := Inventory_Transaction_Hist_API.Get_Source_Ref_Type(transaction_id_ );
         ord_type_db_  := Order_Type_API.Encode(order_type_);

         IF (ord_type_db_ = 'CUST ORDER') THEN
            $IF (Component_ORDER_SYS.INSTALLED) $THEN
                party_id_        := Customer_Order_API.Get_Customer_No(order_no_);
                party_address_1_ := Customer_Order_Address_API.Get_Addr_2(order_no_);
                party_address_2_ := Customer_Order_Address_API.Get_Addr_3(order_no_);
                party_address_3_ := Customer_Order_Address_API.Get_Addr_4(order_no_);
                party_address_4_ := Customer_Order_Address_API.Get_Addr_5(order_no_);
                party_address_5_ := Customer_Order_Address_API.Get_Addr_6(order_no_);
                party_name_      := Customer_Info_API.Get_Name(party_id_);
            $ELSE
               NULL;
            $END
         ELSIF (ord_type_db_ = 'PUR ORDER')  THEN
            $IF (Component_PURCH_SYS.INSTALLED) $THEN
                party_id_       := Purchase_Order_API.Get_Vendor_No(order_no_);
                vendor_addr_no_ := Supplier_Address_API.Get_Address_No(party_id_, Address_Type_Code_API.Decode('DELIVERY'));
                
                party_name_     := Supplier_Info_API.Get_Name(party_id_);
                Type_Generic_Address_API.Get_All_Address_Lines('SUPPLIER',
                                                            party_address_1_,
                                                            party_address_2_,
                                                            party_address_3_,
                                                            party_address_4_,
                                                            party_address_5_,
                                                            party_address_6_,
                                                            party_address_7_,
                                                            party_address_8_,
                                                            party_address_9_,
                                                            party_address_10_,
                                                            party_id_,
                                                            vendor_addr_no_,
                                                            remove_empty_ => 'FALSE');
            $ELSE
               NULL;
            $END          
         END IF;
      END IF;
      
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'REPORTID: Report ID');
      archive_notes_ := archive_notes_ || ': ' || transaction_report_id_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'NUMSEQ: Number Series');
      archive_notes_ := archive_notes_ || ': ' || TO_CHAR(number_series_) || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'REPTYPE: Report Type');
      archive_notes_ := archive_notes_ || ': ' || report_type_id_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'CONTRACT: Site');
      archive_notes_ := archive_notes_ || ': ' || contract_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'WAREHOUSE: Warehouse');
      archive_notes_ := archive_notes_ || ': ' || warehouse_ ;
      Archive_API.Set_Notes(archive_notes_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TYPE_ID'             ,report_type_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'NUMBER_SERIES'              ,number_series_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION'                ,description_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'TRANSACTION_REPORT_ID'      ,transaction_report_id_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_DATE_CREATED'        ,report_date_created_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME'               ,company_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_1'         ,delivery_address_1_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_2'         ,delivery_address_2_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_3'         ,delivery_address_3_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_4'         ,delivery_address_4_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_5'         ,delivery_address_5_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_6'         ,delivery_address_6_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_7'         ,delivery_address_7_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_8'         ,delivery_address_8_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_9'         ,delivery_address_9_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_ADDRESS_10'        ,delivery_address_10_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_NAME'                 ,party_name_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_1'            ,party_address_1_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_2'            ,party_address_2_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_3'            ,party_address_3_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_4'            ,party_address_4_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_5'            ,party_address_5_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_6'            ,party_address_6_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_7'            ,party_address_7_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_8'            ,party_address_8_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_9'            ,party_address_9_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARTY_ADDRESS_10'           ,party_address_10_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_TYPE'                 ,order_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'ORD_TYPE_DB'                ,ord_type_db_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO'                   ,order_no_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT'                   ,contract_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'WAREHOUSE'                  ,warehouse_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'NOTE_TEXT'                  ,note_text_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'InventTransactionReport', rowkey_, '&VIEW');
      Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_TRANSACTION_REPORTS');
   END IF;

   IF (do_rs_) THEN         
     INSERT INTO &TABLE (
        result_key,
        parent_row_no, 
        row_no, 
        &REPORT_TYPE_ID,
        &NUMBER_SERIES,
        &DESCRIPTION,
        &TRANSACTION_REPORT_ID,
        &REPORT_DATE_CREATED,
        &COMPANY_NAME,
        &DELIVERY_ADDRESS1,
        &DELIVERY_ADDRESS2,
        &DELIVERY_ADDRESS3,
        &DELIVERY_ADDRESS4,
        &DELIVERY_ADDRESS5,
        &DELIVERY_ADDRESS6,
        &DELIVERY_ADDRESS7,
        &DELIVERY_ADDRESS8,
        &DELIVERY_ADDRESS9,
        &DELIVERY_ADDRESS10,
        &PARTY_NAME,
        &PARTY_ADDRESS1,
        &PARTY_ADDRESS2,
        &PARTY_ADDRESS3,
        &PARTY_ADDRESS4,
        &PARTY_ADDRESS5,
        &PARTY_ADDRESS6,
        &PARTY_ADDRESS7,
        &PARTY_ADDRESS8,
        &PARTY_ADDRESS9,
        &PARTY_ADDRESS10,
        &ORDER_TYPE,
        &ORD_TYPE_DB,
        &ORDER_NO,
        &CONTRACT,
        &WAREHOUSE,
        &NOTE_TEXT )
     VALUES (
        result_key_, 
        0,
        row_no_, 
        report_type_id_,
        number_series_, 
        description_,
        transaction_report_id_, 
        report_date_created_,
        company_name_,
        delivery_address_1_,
        delivery_address_2_,
        delivery_address_3_,
        delivery_address_4_,
        delivery_address_5_,
        delivery_address_6_,
        delivery_address_7_,
        delivery_address_8_,
        delivery_address_9_,
        delivery_address_10_,
        party_name_,
        party_address_1_, 
        party_address_2_,
        party_address_3_,
        party_address_4_,
        party_address_5_,
        party_address_6_,
        party_address_7_,
        party_address_8_,
        party_address_9_,
        party_address_10_,
        order_type_,
        ord_type_db_,
        order_no_,
        contract_,
        warehouse_,
        note_text_);

        parent_row_no_ := row_no_;
        row_no_ := row_no_ + 1;
   END IF;
   
   FOR rec_ IN get_connected_tranaction_id LOOP
      invent_trans_hist_rec_ := Inventory_Transaction_Hist_API.Get(rec_.transaction_id);
      invent_part_rec_       := Inventory_Part_API.Get(contract_, invent_trans_hist_rec_.part_no);
      connected_trans_id_    := Invent_Trans_Interconnect_API.Get_Connected_Transaction_Id(rec_.transaction_id ,'INTERSITE TRANSFER' );
      quantity_              := TO_NUMBER(SUBSTR(TO_CHAR(invent_trans_hist_rec_.quantity), 1, 23));

      IF print_cost_db_ = 'TRUE'  THEN
         cost_  := Inventory_Transaction_Hist_API.Get_Cost(rec_.transaction_id );
         value_ := ROUND(cost_ * invent_trans_hist_rec_.quantity, currency_rounding_);
      END IF;

      scrapping_cause_desc_  := Scrapping_Cause_API.Get_Reject_Message(invent_trans_hist_rec_.reject_code ); 
	  
      IF (do_xml_) THEN 
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_TRANSACTION_REPORT');
         Xml_Record_Writer_SYS.Add_Element(xml_,'SEQ'                  , seq_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TRANSACTION_ID'       , rec_.transaction_id);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TRANSACTION_CODE'     , invent_trans_hist_rec_.transaction_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO'              , invent_trans_hist_rec_.part_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PART_DESCRIPTION'     , Inventory_Part_API.Get_Description(contract_, invent_trans_hist_rec_.part_no));
         Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO'             , invent_trans_hist_rec_.source_ref1);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO'              , invent_trans_hist_rec_.source_ref2);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RELEASE_NO'           , invent_trans_hist_rec_.source_ref3);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO'         , invent_trans_hist_rec_.source_ref4);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_CREATED'         , TRUNC(invent_trans_hist_rec_.date_time_created));
         Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_APPLIED'         , invent_trans_hist_rec_.date_applied);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LOCATION_NO'          , invent_trans_hist_rec_.location_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SERIAL_NO'            , invent_trans_hist_rec_.serial_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LOT_BATCH_NO'         , invent_trans_hist_rec_.lot_batch_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WAIV_DEV_REJ_NO'      , invent_trans_hist_rec_.waiv_dev_rej_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_DOCUMENT_NO'   , Inventory_Transaction_Hist_API.Get_Transaction_Report_Id(connected_trans_id_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'QUANTITY'             , quantity_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'UNIT_MEAS'            , invent_part_rec_.unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COST'                 , cost_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'VALUE'                , value_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SCRAPPING_CAUSE_DESC' , scrapping_cause_desc_);
         Xml_Record_Writer_SYS.End_Element(xml_,'INVENT_TRANSACTION_REPORT');
      END IF;

      IF (do_rs_) THEN         
         INSERT INTO &TABLE (
            result_key,
            parent_row_no, 
            row_no, 
            &SEQ,
            &TRANSACTION_ID,
            &TRANSACTION_CODE,
            &PART_NO,
            &PART_DESCRIPTION,
            &ORDER_NO,
            &LINE_NO,
            &RELEASE_NO,
            &LINE_ITEM_NO,
            &DATE_CREATED,
            &DATE_APPLIED,
            &LOCATION_NO,
            &SERIAL_NO,
            &LOT_BATCH_NO,
            &WAIV_DEV_REJ_NO,
            &SOURCE_DOCUMENT_NO,
            &QUANTITY, 
            &UNIT_MEAS,
            &COST,
            &VALUE,
            &SCRAPPING_CAUSE_DESC )
         VALUES (
            result_key_, 
            parent_row_no_,
            row_no_,
            seq_no_, 
            rec_.transaction_id, 
            invent_trans_hist_rec_.transaction_code, 
            invent_trans_hist_rec_.part_no, 
            Inventory_Part_API.Get_Description(contract_, invent_trans_hist_rec_.part_no),
            invent_trans_hist_rec_.source_ref1, 
            invent_trans_hist_rec_.source_ref2, 
            invent_trans_hist_rec_.source_ref3, 
            invent_trans_hist_rec_.source_ref4, 
            TRUNC(invent_trans_hist_rec_.date_time_created), 
            invent_trans_hist_rec_.date_applied, 
            invent_trans_hist_rec_.location_no, 
            invent_trans_hist_rec_.serial_no, 
            invent_trans_hist_rec_.lot_batch_no, 
            invent_trans_hist_rec_.waiv_dev_rej_no, 
            Inventory_Transaction_Hist_API.Get_Transaction_Report_Id(connected_trans_id_), 
            quantity_, 
            invent_part_rec_.unit_meas, 
            cost_, 
            value_, 
            scrapping_cause_desc_);

         row_no_ := row_no_ +1;
       END IF;
      
      seq_no_ := seq_no_ + 1;
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_TRANSACTION_REPORTS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

   logotype_ := Company_API.Get_Logotype(company_id_);    

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF; 

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

UNDEFINE MODULE
UNDEFINE LU    
UNDEFINE PKG   
UNDEFINE TABLE 
UNDEFINE VIEW  
UNDEFINE VIEW_RPV
UNDEFINE METHOD  

UNDEFINE TRANSACTION_REPORT_ID = S1
UNDEFINE REPORT_TYPE_ID        = S2
UNDEFINE DESCRIPTION           = S3
UNDEFINE REPORT_DATE_CREATED   = D1
UNDEFINE COMPANY_NAME          = S4
UNDEFINE DELIVERY_ADDRESS1     = S5
UNDEFINE DELIVERY_ADDRESS2     = S6
UNDEFINE DELIVERY_ADDRESS3     = S7
UNDEFINE DELIVERY_ADDRESS4     = S8
UNDEFINE DELIVERY_ADDRESS5     = S9
UNDEFINE DELIVERY_ADDRESS6
UNDEFINE DELIVERY_ADDRESS7
UNDEFINE DELIVERY_ADDRESS8
UNDEFINE DELIVERY_ADDRESS9
UNDEFINE DELIVERY_ADDRESS10
UNDEFINE PARTY_NAME            = S10
UNDEFINE PARTY_ADDRESS1        = S11
UNDEFINE PARTY_ADDRESS2        = S12
UNDEFINE PARTY_ADDRESS3        = S13
UNDEFINE PARTY_ADDRESS4        = S14
UNDEFINE PARTY_ADDRESS5        = S15
UNDEFINE PARTY_ADDRESS6
UNDEFINE PARTY_ADDRESS7
UNDEFINE PARTY_ADDRESS8
UNDEFINE PARTY_ADDRESS9
UNDEFINE PARTY_ADDRESS10
UNDEFINE ORDER_TYPE            = S16
UNDEFINE ORD_TYPE_DB           = S17
UNDEFINE CONTRACT              = S18
UNDEFINE WAREHOUSE             = S19
UNDEFINE SEQ                   = N1
UNDEFINE TRANSACTION_ID        = N2
UNDEFINE TRANSACTION_CODE      = S20
UNDEFINE PART_NO               = S21
UNDEFINE PART_DESCRIPTION      = S22
UNDEFINE ORDER_NO              = S23
UNDEFINE LINE_NO               = S24
UNDEFINE RELEASE_NO            = S25
UNDEFINE LINE_ITEM_NO          = N3
UNDEFINE NOTE_TEXT             = S26
UNDEFINE DATE_APPLIED          = D2
UNDEFINE DATE_CREATED          = D3
UNDEFINE LOCATION_NO           = S27
UNDEFINE SERIAL_NO             = S28
UNDEFINE LOT_BATCH_NO          = S29
UNDEFINE WAIV_DEV_REJ_NO       = S30
UNDEFINE SOURCE_DOCUMENT_NO    = N4
UNDEFINE QUANTITY              = N5
UNDEFINE UNIT_MEAS             = S31
UNDEFINE COST                  = N6
UNDEFINE VALUE                 = N7
UNDEFINE SCRAPPING_CAUSE_DESC  = S32
UNDEFINE NUMBER_SERIES         = N8


