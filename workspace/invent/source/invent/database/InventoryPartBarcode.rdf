-----------------------------------------------------------------------------
--
--  Logical unit: InventoryPartBarcode
--
--  File:         INVENTORYPARTBARCODE.RDF
--  Version:      Foundation1 2.2
--
--  LAYOUT NOTE: When you add or remove something from the layout (both Qrp and Xsl) please make sure
--               that the size/height of each barcode block is the same, this report is suppose to show 4 barcode
--               labels on each paper. So you might have to resize the rows and space between the rows if you add
--               or remove something from this report.
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  200326  ChBnlk  Bug 153064 (SCZ-9649), Changed the fetching of company_name_ to solve dynamic dependency issues.
--  200323  ChBnlk  Bug 152438 (SCZ-8969), Added company_name_ and logotype_ to the report.
--  170810  JoAnSe  STRMF-11797, Added parameter pick_list_no_ in call to Shop_Ord_API.Update_Printed_Flag.
--  170127  JeLise  LIM-10539, Corrected call to Shop_Ord_API.Update_Printed_Flag.
--  160729  PrYaLK  Bug 129954, Modified Report_Overview() by adding CONTRACT as a parameter along with BARCODE_ID to validate
--  160729          the barcode ids and filtering relevant data when printing barcode reports.
--  140217  NipKlk  Bug 115400, Enabled custom fields for the report.
--  140108  Hasplk  PBMF-3178, Added logic to update shop order header with barcode report printed flag.
--  130807  AyAmlk  Bug 111718, Modified Report_Overview() to remove the white space added before the semi colon
--  130807          so that the constant added to the language file will not be removed.
--  121006  CHINLK  Bug 100362, Modified Report_Overview to add archive_notes_ when report is associated with shop orders.
--  111027  NISMLK  SMA-285, Increased eng_chg_level length to STRING(6) in column comments.
--  060206  HoInlk  Bug 55187, Moved retrieval of condition code to first loop.
--  060124  Asawlk  Bug 55187, Modified Report_Overview method to improve the performace
--  060124          of the cursor get_rec.
--  051216  SuJalk  Changed the parameter VIEW_RPV to TABLE in Define_Report_.
--  041217  DaZase  Removed references to the Qrp files.
--  040823  DaZase  Report Designer, New layout and adjustments.
--                  Also removed the break group on barcode_id in Qrp file to avoid column
--                  breaks on new barcodes to get better paper usage (4 barcodes per paper).
--  040621  DaZase  Project Inventory: added activity_seq and project_id.
--  040610  NaWilk  Bug 44975, Modified FROM clause in view INVENTORY_PART_BARCODE_REP.
------------------------------------ 13.3.0 ----------------------------------
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  020627  SuAmlk  Added Condition Code and Condition Code Description.
--  020603  NASALK  Extension of serial_no  from VARCHAR2(15) to VARCHAR2(50)in views.
------------------------------- AD 2002-3 Baseline ----------------------------------
--  000925  JOHESE  Added undefines.
--  000809  PERK  Added CONFIGURATION_ID
--  991218  FRDI  Added 'NUMBER_OF_COPIES' and an error message if no barcode id is sent.
--  990910  FRDI  Added General_SYS.Init_Method to Report_Overview for security.
--  990119  ANHO  Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = InventoryPartBarcode
define PKG                = INVENTORY_PART_BARCODE_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INVENTORY_PART_BARCODE_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define BARCODE_ID                        = N1
define PART_NO                           = S1
define LOT_BATCH_NO                      = S2
define SERIAL_NO                         = S3
define WAIV_DEV_REJ_NO                   = S4
define ENG_CHG_LEVEL                     = S5
define ORIGIN_PACK_SIZE                  = N2
define CONFIGURATION_ID                  = S6
define CONDITION_CODE                    = S7
define CONDITION_CODE_DESCRIPTION        = S8
define ACTIVITY_SEQ                      = N3
define PROJECT_ID                        = S9
define CONTRACT                          = S10

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       &CONTRACT                               CONTRACT,
       &BARCODE_ID                             BARCODE_ID,
       &PART_NO                                PART_NO,
       &LOT_BATCH_NO                           LOT_BATCH_NO,
       &SERIAL_NO                              SERIAL_NO,
       &WAIV_DEV_REJ_NO                        WAIV_DEV_REJ_NO,
       &ENG_CHG_LEVEL                          ENG_CHG_LEVEL,
       &ORIGIN_PACK_SIZE                       ORIGIN_PACK_SIZE,
       &CONFIGURATION_ID                       CONFIGURATION_ID,
       '*' || lpad(to_char(&BARCODE_ID), 12, '0') || '*'   PACKAGE_BARCODE,
       &CONDITION_CODE                         CONDITION_CODE,
       &CONDITION_CODE_DESCRIPTION             CONDITION_CODE_DESCRIPTION,
       &ACTIVITY_SEQ                           ACTIVITY_SEQ,
       &PROJECT_ID                             PROJECT_ID
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^REF=USER_ALLOWED_SITE_LOV^TITLE=Site:^ITEM_NAME=iContract^QUERY=Site:^QFLAGS=M-S--^';
COMMENT ON COLUMN &VIEW..barcode_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Barcode ID^QUERY=Barcode ID:^ITEM_NAME=iBarcodeId^QFLAGS=-C---^REF=INVENTORY_PART_BARCODE_LOV(CONTRACT)^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^REF=InventoryPart(contract)^TITLE=Part No:^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &VIEW..lot_batch_no IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Lot Batch No^TITLE=Lot Batch No:^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..serial_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Serial No^TITLE=Serial No:^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..waiv_dev_rej_no IS
   'FLAGS=A----^DATATYPE=STRING(15)^PROMPT=W/D/R No^TITLE=Waiv Dev Rej No:^ITEM_NAME=iWaivDevRejNo^';
COMMENT ON COLUMN &VIEW..eng_chg_level IS
   'FLAGS=A----^DATATYPE=STRING(6)^PROMPT=EC^TITLE=Eng Chg Level:^ITEM_NAME=iEngChgLevel^';
COMMENT ON COLUMN &VIEW..origin_pack_size IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Origin Pack Size^TITLE=Origin Pack Size:^ITEM_NAME=iOriginPackSize^';
COMMENT ON COLUMN &VIEW..configuration_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Configuration ID^TITLE=Configuration ID:^ITEM_NAME=iConfigurationId^';
COMMENT ON COLUMN &VIEW..package_barcode IS
   'FLAGS=A----^DATATYPE=STRING(14)^PROMPT=Barcode^TITLE=Barcode^ITEM_NAME=iPackageBarcode^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Condition Code^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Condition Code Description^TITLE=Condition Code Description^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..activity_seq IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Activity Sequence^TITLE=Activity Sequence:^ITEM_NAME=iActivitySeq^';
COMMENT ON COLUMN &VIEW..project_id IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Project ID^TITLE=Project ID:^ITEM_NAME=iProjectId^';

BEGIN
   Report_SYS.Define_Report_( '&VIEW', '&MODULE', '&LU', 'Inventory Part Barcode', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Warehouse Management','Goods Label');
   Report_SYS.Refresh_('&VIEW');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','InventoryPartBarcode','INVENTORY_PART_BARCODE_REP/BARCODE_LINES/BARCODE_LINE');   
END;
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER;
   row_no_                     NUMBER := 1;
   barcode_id_                 VARCHAR2(32000);
   tmp_string_                 VARCHAR2(2000);
   number_of_copies_           NUMBER;

   condition_code_    	       VARCHAR2(10);
   condition_code_description_ VARCHAR2(35);

   do_xml_                     BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                      BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                        CLOB;
   package_name_               VARCHAR2(100) := 'INVENTORY_PART_BARCODE_REP';
   barcode_                    NUMBER;
   end_                        NUMBER;
   archive_notes_              VARCHAR2(2000);
   order_no_                   VARCHAR2(12);
   release_no_                 VARCHAR2(4);
   sequence_no_                VARCHAR2(4);
   contract_                   VARCHAR2(5);
   company_                    VARCHAR2(20);
   logotype_                   VARCHAR2(100);
   company_name_               VARCHAR2(100);

   CURSOR get_rec (contract_   IN VARCHAR2,
                   barcode_id_ IN NUMBER) IS
      SELECT barcode_id,
             part_no,
             lot_batch_no,
             serial_no,
             waiv_dev_rej_no,
             eng_chg_level,
             origin_pack_size,
             configuration_id,
             activity_seq,
             project_id,
             contract,
             rowkey
      FROM inventory_part_barcode_tab
      WHERE barcode_id = barcode_id_
      AND   contract = contract_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   barcode_id_       := Client_SYS.Get_Item_Value('BARCODE_ID', parameter_attr_);
   tmp_string_       := Client_SYS.Get_Item_Value('NUMBER_OF_COPIES', parameter_attr_);
   number_of_copies_ := Client_SYS.Attr_Value_To_Number(tmp_string_);

   order_no_         := Client_SYS.Get_Item_Value('SHOP_ORDER_NO', parameter_attr_);
   release_no_       := Client_SYS.Get_Item_Value('RELEASE_NO', parameter_attr_);
   sequence_no_      := Client_SYS.Get_Item_Value('SEQUENCE_NO', parameter_attr_);
   contract_         := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);   
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User, contract_);
   
   IF (order_no_ IS NOT NULL) THEN
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'REPINVPTBRCD: Shop Order');
      archive_notes_ := archive_notes_|| ' : '||order_no_ ||'/'||release_no_||'/'||sequence_no_;
      Archive_API.Set_Notes(archive_notes_);
   END IF;

   IF  barcode_id_ IS NULL OR contract_ IS NULL THEN
      Error_SYS.Record_General('&LU', 'BARCODEREPEMPT: No data found.');
   END IF;
   If number_of_copies_ < 1 OR number_of_copies_ IS NULL then
      number_of_copies_ :=1;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'BARCODE_LINES');
   END IF;

   -- To make sure the barcode id list ends with a semi colon.
   barcode_id_ := barcode_id_||';';

   LOOP
      end_ := INSTR (barcode_id_, ';', 1, 1);
      barcode_ := TO_NUMBER(SUBSTR (barcode_id_, 1,  (end_ - 1)));
      EXIT WHEN barcode_ IS NULL;
      barcode_id_ := SUBSTR(barcode_id_, (end_ + 1), LENGTH(barcode_id_));
      Inventory_Part_Barcode_API.Exist(contract_, barcode_);

      FOR row_rec_ IN get_rec(contract_, barcode_) LOOP
         condition_code_             := Condition_Code_Manager_API.Get_Condition_Code (row_rec_.part_no,row_rec_.serial_no,row_rec_.lot_batch_no);
         condition_code_description_ := Condition_Code_API.Get_Description(condition_code_);        
         
         FOR index_ IN 1 .. number_of_copies_ LOOP
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'BARCODE_LINE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PROJECT_ID', row_rec_.project_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BARCODE_ID', row_rec_.barcode_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', row_rec_.part_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', row_rec_.lot_batch_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', row_rec_.serial_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'WAIV_DEV_REJ_NO', row_rec_.waiv_dev_rej_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ENG_CHG_LEVEL', row_rec_.eng_chg_level);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ORIGIN_PACK_SIZE', row_rec_.origin_pack_size);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIGURATION_ID', row_rec_.configuration_id);
   --            Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_BARCODE', put_your_value_here); not used since RD don't need *-signs in the beginning and end of the barcodestring
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', condition_code_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_SEQ', row_rec_.activity_seq);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'InventoryPartBarcode', row_rec_.rowkey, '&VIEW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT', row_rec_.contract);
               Xml_Record_Writer_SYS.End_Element(xml_, 'BARCODE_LINE');
            END IF;
            
            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key,
                  parent_row_no,
                  row_no,
                  &CONTRACT,
                  &BARCODE_ID,
                  &PART_NO,
                  &LOT_BATCH_NO,
                  &SERIAL_NO,
                  &WAIV_DEV_REJ_NO,
                  &ENG_CHG_LEVEL,
                  &ORIGIN_PACK_SIZE,
                  &CONFIGURATION_ID,
                  &CONDITION_CODE,
                  &CONDITION_CODE_DESCRIPTION,
                  &ACTIVITY_SEQ,
                  &PROJECT_ID)
               VALUES (
                  result_key_,
                  1,
                  row_no_,
                  row_rec_.contract,
                  row_rec_.barcode_id,
                  row_rec_.part_no,
                  row_rec_.lot_batch_no,
                  row_rec_.serial_no,
                  row_rec_.waiv_dev_rej_no,
                  row_rec_.eng_chg_level,
                  row_rec_.origin_pack_size,
                  row_rec_.configuration_id,
                  condition_code_,
                  condition_code_description_,
                  row_rec_.activity_seq,
                  row_rec_.project_id);

                  -- Row is incremented for next insert
                  row_no_ := row_no_ + 1;
            END IF;
         END LOOP;
      END LOOP;
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'BARCODE_LINES');
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);

      $IF Component_Shpord_SYS.INSTALLED $THEN
         IF (order_no_ IS NOT NULL AND release_no_ IS NOT NULL AND sequence_no_ IS NOT NULL) THEN
            Shop_Ord_API.Update_Printed_Flag(order_no_           => order_no_, 
                                             release_no_         => release_no_, 
                                             sequence_no_        => sequence_no_, 
                                             printed_flag_       => 'BARCODE_LABEL',
                                             operation_no_list_  => NULL,
                                             op_work_type_list_  => NULL,
                                             pick_list_no_       => NULL,
                                             history_new_value_  => NULL, 
                                             history_result_key_ => result_key_,
                                             note_text_          => NULL);
         END IF;
      $END
   END IF;
   
   company_      := Site_API.Get_Company(contract_); 
   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := Site_API.Get_Company_Address_Name(contract_);

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE BARCODE_ID
UNDEFINE PART_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE SERIAL_NO
UNDEFINE WAIV_DEV_REJ_NO
UNDEFINE ENG_CHG_LEVEL
UNDEFINE ORIGIN_PACK_SIZE
UNDEFINE CONFIGURATION_ID
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE ACTIVITY_SEQ
UNDEFINE PROJECT_ID
UNDEFINE CONTRACT
