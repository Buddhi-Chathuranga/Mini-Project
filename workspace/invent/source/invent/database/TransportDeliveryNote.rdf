-----------------------------------------------------------------------------
--
--  Logical unit: TransportDeliveryNoteRep
--
--  Report:       TransportDeliveryNote
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating TRANSPORT_DELIVERY_NOTE_RPI specification

CREATE OR REPLACE PACKAGE TRANSPORT_DELIVERY_NOTE_RPI AS

module_ CONSTANT VARCHAR2(6) := 'INVENT';
lu_name_ CONSTANT VARCHAR2(25) := 'TransportDeliveryNoteRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   delivery_note_id_         IN VARCHAR2,
   preliminary_              IN VARCHAR2)
   RETURN NUMBER;

PROCEDURE Init;

END TRANSPORT_DELIVERY_NOTE_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table TRANSPORT_DELIVERY_NOTE_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_NOTE_ID', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRELIMINARY', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_DELIVERY_NOTE_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AUTHORIZE_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AUTHORIZE_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECIPIENT_COMPANY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECIPIENT_COMPANY_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VENDOR_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VENDOR_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_AGENT_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_AGENT_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDRESS_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDRESS_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDR_1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDR_2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDR_3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDR_4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDR_5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDR_6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_ADDR_7', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_TERMS', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_TERMS_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_VIA_CODE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_VIA_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_REASON_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DOCUMNET_FOOTER', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_REASON_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LABEL_NOTE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATE_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDRESS_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDRESS_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDR_1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDR_2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDR_3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDR_4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDR_5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDR_6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FROM_ADDR_7', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS_POSITION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SINGLE_OCCURRENCE_ADDRESS', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS_NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_7', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STATUS', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VOLUME', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DOCUMENT_PHRASE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PAGE_FOOTER_1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PAGE_FOOTER_2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PAGE_FOOTER_3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PAGE_FOOTER_4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_CODE', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_DELIVERED', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_MEAS', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO_NOTES', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMS_STAT_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COLUMN_1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COLUMN_2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COLUMN_3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COLUMN_4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COLUMN_5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COLUMN_6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COLUMN_7', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT1', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT2', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT3', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT4', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT5', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT6', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT7', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT8', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT9', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT10', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT11', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT12', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT13', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT14', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT15', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT16', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT17', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT18', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT19', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT20', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT21', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT22', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT23', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT24', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT25', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT26', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT27', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT28', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT29', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT30', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT31', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT32', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT33', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT34', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT35', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT36', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT37', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT38', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT39', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT40', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'IS_FREE_TEXT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_RPT';
   index_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view TRANSPORT_DELIVERY_NOTE_REP

CREATE OR REPLACE VIEW TRANSPORT_DELIVERY_NOTE_REP AS
SELECT RESULT_KEY, ROW_NO, PARENT_ROW_NO, ROWVERSION
   ,DELIVERY_NOTE_ID,PRELIMINARY,ALT_DELIVERY_NOTE_ID,CONTRACT,CONTRACT_DESC,AUTHORIZE_CODE,AUTHORIZE_NAME,RECIPIENT_COMPANY,RECIPIENT_COMPANY_NAME,VENDOR_NO,VENDOR_NAME,FORWARD_AGENT_ID,FORWARD_AGENT_NAME,FORWARD_ADDRESS_NO,FORWARD_ADDRESS_NAME,FORWARD_ADDR_1,FORWARD_ADDR_2,FORWARD_ADDR_3,FORWARD_ADDR_4,FORWARD_ADDR_5,FORWARD_ADDR_6,FORWARD_ADDR_7,DELIVERY_TERMS,DELIVERY_TERMS_DESC,SHIP_VIA_CODE,SHIP_VIA_DESC,DELIVERY_REASON_ID,DOCUMNET_FOOTER,DELIVERY_REASON_DESC,LABEL_NOTE,CREATE_DATE,TRANSPORT_DATE,FROM_ADDRESS_NO,FROM_ADDRESS_NAME,FROM_ADDR_1,FROM_ADDR_2,FROM_ADDR_3,FROM_ADDR_4,FROM_ADDR_5,FROM_ADDR_6,FROM_ADDR_7,ADDRESS_POSITION,SINGLE_OCCURRENCE_ADDRESS,SHIP_ADDRESS_NO,SHIP_ADDRESS_NAME,SHIP_ADDR_1,SHIP_ADDR_2,SHIP_ADDR_3,SHIP_ADDR_4,SHIP_ADDR_5,SHIP_ADDR_6,SHIP_ADDR_7,STATUS,GROSS_WEIGHT,NET_WEIGHT,VOLUME,DOCUMENT_PHRASE,PAGE_FOOTER_1,PAGE_FOOTER_2,PAGE_FOOTER_3,PAGE_FOOTER_4,TRANSACTION_ID,TRANSACTION_CODE,PART_NO,PART_DESC,QTY_DELIVERED,UNIT_MEAS,LOT_BATCH_NO,SERIAL_NO,PART_NO_NOTES,CUSTOMS_STAT_NO,COLUMN_1,COLUMN_2,COLUMN_3,COLUMN_4,COLUMN_5,COLUMN_6,COLUMN_7,TEXT1,TEXT2,TEXT3,TEXT4,TEXT5,TEXT6,TEXT7,TEXT8,TEXT9,TEXT10,TEXT11,TEXT12,TEXT13,TEXT14,TEXT15,TEXT16,TEXT17,TEXT18,TEXT19,TEXT20,TEXT21,TEXT22,TEXT23,TEXT24,TEXT25,TEXT26,TEXT27,TEXT28,TEXT29,TEXT30,TEXT31,TEXT32,TEXT33,TEXT34,TEXT35,TEXT36,TEXT37,TEXT38,TEXT39,TEXT40,IS_FREE_TEXT
FROM   TRANSPORT_DELIVERY_NOTE_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE TRANSPORT_DELIVERY_NOTE_REP
   IS 'LU=TransportDeliveryNoteRep^PROMPT=Transport Delivery Note^MODULE=INVENT^TITLETEXT=Transport Delivery Note^';

COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.delivery_note_id
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Delivery Note^QUERY=Delivery Note Id:^QFLAGS=M-S--^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.preliminary
   IS 'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Preliminary^QUERY=Preliminary:^QFLAGS=O-S--^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.alt_delivery_note_id
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Alt Delivery Note ID^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.contract
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Contract^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.contract_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Contract Desc^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.authorize_code
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Authorize Code^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.authorize_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Authorize Name^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.recipient_company
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Recipient Company^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.recipient_company_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Recipient Company Name^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.vendor_no
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Vendor No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.vendor_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Vendor Name^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_agent_id
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Forward Agent:^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_agent_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Agent Name^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_address_no
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Forward Address No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_address_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Address Name^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_addr_1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Addr1^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_addr_2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Addr2^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_addr_3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Addr3^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_addr_4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Addr4^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_addr_5
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Addr5^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_addr_6
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Addr6^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.forward_addr_7
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Addr7^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.delivery_terms
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Delivery Terms^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.delivery_terms_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Delivery Terms Desc^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_via_code
   IS 'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Ship Via Code^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_via_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Via Desc^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.delivery_reason_id
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Delivery Reason ID^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.documnet_footer
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Documnet Footer^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.delivery_reason_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Delivery Reason Desc^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.label_note
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Label Note^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.create_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Create Date^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.transport_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Transport Date^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_address_no
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=From Address No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_address_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Delivery Site:^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_addr_1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=From Addr1^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_addr_2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=From Addr2^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_addr_3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=From Addr3^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_addr_4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=From Addr4^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_addr_5
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=From Addr5^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_addr_6
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=From Addr6^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.from_addr_7
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=From Addr7^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.address_position
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Address Position^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.single_occurrence_address
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Single Occurrence Address^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_address_no
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Ship Address No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_address_name
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address:^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_addr_1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Addr1^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_addr_2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Addr2^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_addr_3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Addr3^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_addr_4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Addr4^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_addr_5
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Addr5^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_addr_6
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Addr6^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.ship_addr_7
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Ship Addr7^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.status
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Status^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Weight^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Volume^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.document_phrase
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Phrase^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.page_footer_1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Page Footer1^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.page_footer_2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Page Footer2^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.page_footer_3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Page Footer3^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.page_footer_4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Page Footer4^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.transaction_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Transaction ID^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.transaction_code
   IS 'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Transaction Code^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.part_no
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.part_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Desc^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.qty_delivered
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty Delivered^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.unit_meas
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Unit Meas^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.lot_batch_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Lot Batch No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.serial_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Serial No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.part_no_notes
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part No Notes^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.customs_stat_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customs Stat No^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.column_1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Column1^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.column_2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Column2^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.column_3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Column3^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.column_4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Column4^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.column_5
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Column5^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.column_6
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Column6^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.column_7
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Column7^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text1
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text1^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text2
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text2^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text3
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text3^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text4
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text4^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text5
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text5^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text6
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text6^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text7
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text7^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text8
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text8^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text9
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text9^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text10
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text10^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text11
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text11^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text12
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text12^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text13
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text13^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text14
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text14^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text15
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text15^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text16
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text16^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text17
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text17^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text18
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text18^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text19
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text19^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text20
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text20^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text21
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text21^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text22
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text22^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text23
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text23^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text24
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text24^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text25
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text25^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text26
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text26^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text27
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text27^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text28
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text28^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text29
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text29^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text30
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text30^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text31
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text31^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text32
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text32^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text33
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text33^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text34
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text34^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text35
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text35^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text36
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text36^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text37
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text37^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text38
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text38^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text39
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text39^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.text40
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text40^';
COMMENT ON COLUMN TRANSPORT_DELIVERY_NOTE_REP.is_free_text
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Is Free Text^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('TRANSPORT_DELIVERY_NOTE_REP', 'INVENT', 'TransportDeliveryNoteRep', 'Transport Delivery Note', 'TRANSPORT_DELIVERY_NOTE_RPT', 'TRANSPORT_DELIVERY_NOTE_RPI.Execute_Report', 0);
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'DELIVNOTE_TITLE', 'Delivery Note');
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'PAGE_FOOTER_TITLES', 'Visit Adress,Invoice Adress,Phone,Fax,Bank Giro,Postal Giro,VAT Number');
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'EXTRA_TITLES', 'Signature:,Second forwarding agent:,Receiver signature:,Date:');
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'LONG_TEXT_TITLE', 'It is guaranteed that the content of the delivery is above described in a complete and detailed way with the proper descriptions and that it is classified according the law (packaged, labelled and well conditioned) to be transported in accordance with the international and local requirements.');
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'PRELIM', 'Preliminary');
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'ERP_NO_TEXT', 'Processed by certificate program No');
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'PRINTING_TEXT', 'Document issued for Formation purposes');
   Report_SYS.Define_Report_Text_('TRANSPORT_DELIVERY_NOTE_REP', 'NOT_AN_INVOICE', 'This document is not an invoice');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('TRANSPORT_DELIVERY_NOTE_REP');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating TRANSPORT_DELIVERY_NOTE_RPI implementation

CREATE OR REPLACE PACKAGE BODY TRANSPORT_DELIVERY_NOTE_RPI IS

   TYPE binds$ IS RECORD (
      delivery_note_id          VARCHAR2(32000),
      preliminary               VARCHAR2(32000),
      alt_delivery_note_id      VARCHAR2(32000),
      contract                  VARCHAR2(32000),
      contract_desc             VARCHAR2(32000),
      authorize_code            VARCHAR2(32000),
      authorize_name            VARCHAR2(32000),
      recipient_company         VARCHAR2(32000),
      recipient_company_name    VARCHAR2(32000),
      vendor_no                 VARCHAR2(32000),
      vendor_name               VARCHAR2(32000),
      forward_agent_id          VARCHAR2(32000),
      forward_agent_name        VARCHAR2(32000),
      forward_address_no        VARCHAR2(32000),
      forward_address_name      VARCHAR2(32000),
      forward_addr1             VARCHAR2(32000),
      forward_addr2             VARCHAR2(32000),
      forward_addr3             VARCHAR2(32000),
      forward_addr4             VARCHAR2(32000),
      forward_addr5             VARCHAR2(32000),
      forward_addr6             VARCHAR2(32000),
      forward_addr7             VARCHAR2(32000),
      delivery_terms            VARCHAR2(32000),
      delivery_terms_desc       VARCHAR2(32000),
      ship_via_code             VARCHAR2(32000),
      ship_via_desc             VARCHAR2(32000),
      delivery_reason_id        VARCHAR2(32000),
      documnet_footer           VARCHAR2(32000),
      delivery_reason_desc      VARCHAR2(32000),
      label_note                VARCHAR2(32000),
      create_date               VARCHAR2(32000),
      transport_date            VARCHAR2(32000),
      from_address_no           VARCHAR2(32000),
      from_address_name         VARCHAR2(32000),
      from_addr1                VARCHAR2(32000),
      from_addr2                VARCHAR2(32000),
      from_addr3                VARCHAR2(32000),
      from_addr4                VARCHAR2(32000),
      from_addr5                VARCHAR2(32000),
      from_addr6                VARCHAR2(32000),
      from_addr7                VARCHAR2(32000),
      address_position          NUMBER,
      single_occurrence_address VARCHAR2(32000),
      ship_address_no           VARCHAR2(32000),
      ship_address_name         VARCHAR2(32000),
      ship_addr1                VARCHAR2(32000),
      ship_addr2                VARCHAR2(32000),
      ship_addr3                VARCHAR2(32000),
      ship_addr4                VARCHAR2(32000),
      ship_addr5                VARCHAR2(32000),
      ship_addr6                VARCHAR2(32000),
      ship_addr7                VARCHAR2(32000),
      status                    VARCHAR2(32000),
      gross_weight              NUMBER,
      net_weight                NUMBER,
      volume                    NUMBER,
      document_phrase           VARCHAR2(32000),
      page_footer1              VARCHAR2(32000),
      page_footer2              VARCHAR2(32000),
      page_footer3              VARCHAR2(32000),
      page_footer4              VARCHAR2(32000),
      page_footer               VARCHAR2(32000));

   CURSOR get_transaction_line (delivery_note_id_ VARCHAR2, contract_ VARCHAR2) IS
      SELECT transaction_id        transaction_id,
             transaction_type_db   transaction_type_db,
             NULL                  transaction_code,
             NULL                  part_no,
             NULL                  part_desc,
             NULL                  qty_delivered,
             NULL                  unit_meas,
             NULL                  lot_batch_no,
             NULL                  serial_no,
             NULL                  part_no_notes,
             NULL                  customs_stat_no,
             contract_             contract
      FROM transport_deliv_note_line
      WHERE delivery_note_id = delivery_note_id_;

   CURSOR get_page_footer_row (page_footer_ VARCHAR2) IS
      SELECT
         NULL            column1,   
         NULL            column2,   
         NULL            column3,   
         NULL            column4,   
         NULL            column5,   
         NULL            column6,   
         NULL            column7,
         page_footer_    page_footer
      FROM dual;

   CURSOR get_document_footer IS
         SELECT NULL text1, NULL text2, NULL text3, NULL text4, NULL text5, NULL text6, NULL text7, NULL text8, NULL text9, NULL text10, 
             NULL text11, NULL text12, NULL text13, NULL text14, NULL text15, NULL text16, NULL text17, NULL text18, NULL text19, NULL text20, 
             NULL text21, NULL text22, NULL text23, NULL text24, NULL text25, NULL text26, NULL text27, NULL text28, NULL text29, NULL text30, 
             NULL text31, NULL text32, NULL text33, NULL text34, NULL text35, NULL text36, NULL text37, NULL text38, NULL text39, NULL text40, 
             NULL is_free_text
      FROM DUAL
      ;

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_transaction_line_      IN get_transaction_line%ROWTYPE DEFAULT NULL,
   rec_page_footer_row_       IN get_page_footer_row%ROWTYPE DEFAULT NULL,
   rec_document_footer_       IN get_document_footer%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO TRANSPORT_DELIVERY_NOTE_RPT (
      result_key,
      delivery_note_id,
      preliminary,
      alt_delivery_note_id,
      contract,
      contract_desc,
      authorize_code,
      authorize_name,
      recipient_company,
      recipient_company_name,
      vendor_no,
      vendor_name,
      forward_agent_id,
      forward_agent_name,
      forward_address_no,
      forward_address_name,
      forward_addr_1,
      forward_addr_2,
      forward_addr_3,
      forward_addr_4,
      forward_addr_5,
      forward_addr_6,
      forward_addr_7,
      delivery_terms,
      delivery_terms_desc,
      ship_via_code,
      ship_via_desc,
      delivery_reason_id,
      documnet_footer,
      delivery_reason_desc,
      label_note,
      create_date,
      transport_date,
      from_address_no,
      from_address_name,
      from_addr_1,
      from_addr_2,
      from_addr_3,
      from_addr_4,
      from_addr_5,
      from_addr_6,
      from_addr_7,
      address_position,
      single_occurrence_address,
      ship_address_no,
      ship_address_name,
      ship_addr_1,
      ship_addr_2,
      ship_addr_3,
      ship_addr_4,
      ship_addr_5,
      ship_addr_6,
      ship_addr_7,
      status,
      gross_weight,
      net_weight,
      volume,
      document_phrase,
      page_footer_1,
      page_footer_2,
      page_footer_3,
      page_footer_4,
      transaction_id,
      transaction_code,
      part_no,
      part_desc,
      qty_delivered,
      unit_meas,
      lot_batch_no,
      serial_no,
      part_no_notes,
      customs_stat_no,
      column_1,
      column_2,
      column_3,
      column_4,
      column_5,
      column_6,
      column_7,
      text1,
      text2,
      text3,
      text4,
      text5,
      text6,
      text7,
      text8,
      text9,
      text10,
      text11,
      text12,
      text13,
      text14,
      text15,
      text16,
      text17,
      text18,
      text19,
      text20,
      text21,
      text22,
      text23,
      text24,
      text25,
      text26,
      text27,
      text28,
      text29,
      text30,
      text31,
      text32,
      text33,
      text34,
      text35,
      text36,
      text37,
      text38,
      text39,
      text40,
      is_free_text,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      nvl(binds$_.delivery_note_id,
      binds$_.delivery_note_id),
      nvl(binds$_.preliminary,
      binds$_.preliminary),
      binds$_.alt_delivery_note_id,
      binds$_.contract,
      binds$_.contract_desc,
      binds$_.authorize_code,
      binds$_.authorize_name,
      binds$_.recipient_company,
      binds$_.recipient_company_name,
      binds$_.vendor_no,
      binds$_.vendor_name,
      binds$_.forward_agent_id,
      binds$_.forward_agent_name,
      binds$_.forward_address_no,
      binds$_.forward_address_name,
      binds$_.forward_addr1,
      binds$_.forward_addr2,
      binds$_.forward_addr3,
      binds$_.forward_addr4,
      binds$_.forward_addr5,
      binds$_.forward_addr6,
      binds$_.forward_addr7,
      binds$_.delivery_terms,
      binds$_.delivery_terms_desc,
      binds$_.ship_via_code,
      binds$_.ship_via_desc,
      binds$_.delivery_reason_id,
      binds$_.documnet_footer,
      binds$_.delivery_reason_desc,
      binds$_.label_note,
      binds$_.create_date,
      binds$_.transport_date,
      binds$_.from_address_no,
      binds$_.from_address_name,
      binds$_.from_addr1,
      binds$_.from_addr2,
      binds$_.from_addr3,
      binds$_.from_addr4,
      binds$_.from_addr5,
      binds$_.from_addr6,
      binds$_.from_addr7,
      binds$_.address_position,
      binds$_.single_occurrence_address,
      binds$_.ship_address_no,
      binds$_.ship_address_name,
      binds$_.ship_addr1,
      binds$_.ship_addr2,
      binds$_.ship_addr3,
      binds$_.ship_addr4,
      binds$_.ship_addr5,
      binds$_.ship_addr6,
      binds$_.ship_addr7,
      binds$_.status,
      binds$_.gross_weight,
      binds$_.net_weight,
      binds$_.volume,
      binds$_.document_phrase,
      binds$_.page_footer1,
      binds$_.page_footer2,
      binds$_.page_footer3,
      binds$_.page_footer4,
      rec_transaction_line_.transaction_id,
      rec_transaction_line_.transaction_code,
      rec_transaction_line_.part_no,
      rec_transaction_line_.part_desc,
      rec_transaction_line_.qty_delivered,
      rec_transaction_line_.unit_meas,
      rec_transaction_line_.lot_batch_no,
      rec_transaction_line_.serial_no,
      rec_transaction_line_.part_no_notes,
      rec_transaction_line_.customs_stat_no,
      rec_page_footer_row_.column1,
      rec_page_footer_row_.column2,
      rec_page_footer_row_.column3,
      rec_page_footer_row_.column4,
      rec_page_footer_row_.column5,
      rec_page_footer_row_.column6,
      rec_page_footer_row_.column7,
      rec_document_footer_.text1,
      rec_document_footer_.text2,
      rec_document_footer_.text3,
      rec_document_footer_.text4,
      rec_document_footer_.text5,
      rec_document_footer_.text6,
      rec_document_footer_.text7,
      rec_document_footer_.text8,
      rec_document_footer_.text9,
      rec_document_footer_.text10,
      rec_document_footer_.text11,
      rec_document_footer_.text12,
      rec_document_footer_.text13,
      rec_document_footer_.text14,
      rec_document_footer_.text15,
      rec_document_footer_.text16,
      rec_document_footer_.text17,
      rec_document_footer_.text18,
      rec_document_footer_.text19,
      rec_document_footer_.text20,
      rec_document_footer_.text21,
      rec_document_footer_.text22,
      rec_document_footer_.text23,
      rec_document_footer_.text24,
      rec_document_footer_.text25,
      rec_document_footer_.text26,
      rec_document_footer_.text27,
      rec_document_footer_.text28,
      rec_document_footer_.text29,
      rec_document_footer_.text30,
      rec_document_footer_.text31,
      rec_document_footer_.text32,
      rec_document_footer_.text33,
      rec_document_footer_.text34,
      rec_document_footer_.text35,
      rec_document_footer_.text36,
      rec_document_footer_.text37,
      rec_document_footer_.text38,
      rec_document_footer_.text39,
      rec_document_footer_.text40,
      rec_document_footer_.is_free_text,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_transaction_line_ BOOLEAN;
   rec_transaction_line_ get_transaction_line%ROWTYPE;
   par_transaction_line_ binds$;
   has_page_footer_row_ BOOLEAN;
   rec_page_footer_row_ get_page_footer_row%ROWTYPE;
   par_page_footer_row_ binds$;
   has_document_footer_ BOOLEAN;
   rec_document_footer_ get_document_footer%ROWTYPE;
   par_document_footer_ binds$;
BEGIN
   General_SYS.Init_Method(lu_name_, 'TRANSPORT_DELIVERY_NOTE_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.delivery_note_id     := Client_SYS.Get_Item_Value('DELIVERY_NOTE_ID', parameter_attr_); 
   binds$_.preliminary          := Client_SYS.Get_Item_Value('PRELIMINARY', parameter_attr_); 

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'TRANSPORT_DELIVERY_NOTE_REP', 'Transport Delivery Note');

   DECLARE
      company_          VARCHAR2(20);
      language_code_    VARCHAR2(6);
      archive_notes_    VARCHAR2(200);
      forwarder_addr_   Forwarder_Info_Address_API.Public_Rec;
      from_addr_        Company_Address_API.Public_Rec;
      supp_addr_        Supplier_Info_Address_API.Public_Rec;
      comp_addr_        Company_Address_API.Public_Rec;
      ship_name_        VARCHAR2(2000);
      ship_address1_    VARCHAR2(35);
      ship_address2_    VARCHAR2(35);
      ship_zip_code_    VARCHAR2(35);
      ship_city_        VARCHAR2(35);
      ship_state_       VARCHAR2(35);
      ship_county_      VARCHAR2(35);
      ship_country_     VARCHAR2(2000);
      transport_doc_series_      VARCHAR2(30);
      saft_pt_movement_type_     VARCHAR2(30); 
   
      CURSOR get_header IS
         SELECT *
         FROM transport_delivery_note
         WHERE delivery_note_id = binds$_.delivery_note_id;
      header_rec_   get_header%ROWTYPE;
   
   BEGIN
      Transport_Delivery_Note_API.Exist(binds$_.delivery_note_id);
      
      OPEN get_header;
      FETCH get_header INTO header_rec_;
      CLOSE get_header;
   
      company_ := Site_API.Get_Company(header_rec_.contract);
      IF (Company_API.Get_Positioning_Type(company_) = 'LEFT' )THEN
         binds$_.address_position := 1;
      ELSE
         binds$_.address_position := 0;
      END IF;
   
      -- Set report language
      language_code_ := Fnd_Session_API.Get_Language;
      Archive_API.Set_Language(language_code_);
   
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'DELIVNOTENO: Delivery Note No');
      archive_notes_ := archive_notes_ || ': '|| binds$_.delivery_note_id || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ALTDELIVNOTENO: Alternative Delivery Note No');
      archive_notes_ := archive_notes_ || ': '|| header_rec_.alt_delivery_note_id;
      
      Archive_API.Set_Notes(archive_notes_);
      
      binds$_.alt_delivery_note_id    := header_rec_.alt_delivery_note_id;
      binds$_.contract             := header_rec_.contract;
      binds$_.contract_desc         := Site_API.Get_Description(header_rec_.contract);
      binds$_.authorize_code        := header_rec_.authorize_code;
      binds$_.authorize_name        := Order_Coordinator_API.Get_Name(header_rec_.authorize_code);
      binds$_.recipient_company     := header_rec_.recipient_company;
      binds$_.recipient_company_name := Company_API.Get_Name(header_rec_.recipient_company);
      binds$_.vendor_no             := header_rec_.vendor_no;
      binds$_.vendor_name           := Supplier_Info_API.Get_Name(header_rec_.vendor_no);
      
      binds$_.forward_agent_id     := header_rec_.forward_agent_id;
      IF (header_rec_.forward_agent_id IS NOT NULL) THEN
         binds$_.forward_agent_name   := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
         binds$_.forward_address_no   := Forwarder_Info_Address_API.Get_Id_By_Type(header_rec_.forward_agent_id, binds$_.forward_address_no);
         binds$_.forward_address_name := binds$_.forward_agent_name;
         forwarder_addr_ := Forwarder_Info_Address_API.Get(header_rec_.forward_agent_id, binds$_.forward_address_no);
         binds$_.forward_addr1       := forwarder_addr_.address1;
         binds$_.forward_addr2       := forwarder_addr_.address2;
         binds$_.forward_addr3       := forwarder_addr_.zip_code;
         binds$_.forward_addr4       := forwarder_addr_.city;
         binds$_.forward_addr5       := forwarder_addr_.state;
         binds$_.forward_addr6       := forwarder_addr_.county;
         binds$_.forward_addr7       := Iso_Country_API.Get_Description(forwarder_addr_.country);
      END IF;
      
      
      binds$_.delivery_terms      := header_rec_.delivery_terms;
      binds$_.delivery_terms_desc  := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms);
      binds$_.ship_via_code        := header_rec_.ship_via_code;
      binds$_.ship_via_desc        := Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code);
      binds$_.delivery_reason_id   := header_rec_.delivery_reason_id;
      binds$_.delivery_reason_desc := Delivery_reason_API.Get_Description(company_, header_rec_.delivery_reason_id);
      binds$_.label_note          := header_rec_.label_text;
      
      binds$_.create_date    := header_rec_.create_date;
      binds$_.transport_date := header_rec_.transport_date;
      
      binds$_.from_address_no   := header_rec_.delivery_address_no;
      binds$_.from_address_name := binds$_.contract_desc;
      from_addr_ := Company_Address_API.Get(company_, header_rec_.delivery_address_no);
      binds$_.from_addr1       := from_addr_.address1;
      binds$_.from_addr2       := from_addr_.address2;
      binds$_.from_addr3       := from_addr_.zip_code;
      binds$_.from_addr4       := from_addr_.city;
      binds$_.from_addr5       := from_addr_.state;
      binds$_.from_addr6       := from_addr_.county;
      binds$_.from_addr7       := Iso_Country_API.Get_Description(from_addr_.country);
      
      binds$_.single_occurrence_address := header_rec_.single_occurrence_address_db;
      IF (header_rec_.single_occurrence_address_db = Fnd_Boolean_API.DB_FALSE) THEN
         binds$_.ship_address_no   := header_rec_.ship_address_no;
         IF (header_rec_.vendor_no IS NOT NULL)THEN
            ship_name_ := Supplier_Info_API.Get_Name(header_rec_.vendor_no);
            supp_addr_ := Supplier_Info_Address_API.Get(header_rec_.vendor_no, header_rec_.ship_address_no);
         ELSE
            ship_name_ := Company_API.Get_Name(header_rec_.recipient_company);
            comp_addr_ := Company_Address_API.Get(header_rec_.recipient_company, header_rec_.ship_address_no);
         END IF;
         ship_address1_    := NVL(comp_addr_.address1, supp_addr_.address1);
         ship_address2_    := NVL(comp_addr_.address2, supp_addr_.address2);
         ship_zip_code_    := NVL(comp_addr_.zip_code, supp_addr_.zip_code);
         ship_city_        := NVL(comp_addr_.city, supp_addr_.city);
         ship_state_       := NVL(comp_addr_.state, supp_addr_.state);
         ship_county_      := NVL(comp_addr_.county, supp_addr_.county);
         ship_country_     := Iso_Country_API.Get_Description(NVL(comp_addr_.country, supp_addr_.country));
      END IF;
      binds$_.ship_address_name := NVL(ship_name_, header_rec_.ship_address_name);
      binds$_.ship_addr1    := NVL(ship_address1_, header_rec_.ship_address1);
      binds$_.ship_addr2    := NVL(ship_address2_, header_rec_.ship_address2);
      binds$_.ship_addr3    := NVL(ship_zip_code_, header_rec_.ship_zip_code);
      binds$_.ship_addr4    := NVL(ship_city_, header_rec_.ship_city);
      binds$_.ship_addr5    := NVL(ship_state_, header_rec_.ship_state);
      binds$_.ship_addr6    := NVL(ship_county_, header_rec_.ship_county);
      binds$_.ship_addr7    := NVL(ship_country_, Iso_Country_API.Get_Description(header_rec_.ship_country_code));
      
      IF header_rec_.objstate = 'Cancelled' THEN
         binds$_.status := header_rec_.state;
      END IF;   
      binds$_.gross_weight := header_rec_.gross_weight;
      binds$_.net_weight   := header_rec_.net_weight;
      binds$_.volume      := header_rec_.volume;
   
      -- Retrieve the document phrase(s) if any
      -- The phrases are concatenated into one single string
      binds$_.document_phrase := Mpccom_Phrase_Text_API.Get_All_Phrases(language_code_, '3');
      $IF Component_Invoic_SYS.INSTALLED $THEN
         binds$_.page_footer1 := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 1), '^', chr(9));
         binds$_.page_footer2 := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 2), '^', chr(9));
         binds$_.page_footer3 := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 3), '^', chr(9));
         binds$_.page_footer4 := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 4), '^', chr(9));
      $END
   END;
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'DELIVERY_NOTE_ID', binds$_.delivery_note_id);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'ALT_DELIVERY_NOTE_ID', binds$_.alt_delivery_note_id);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'PRELIMINARY', binds$_.preliminary);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT', binds$_.contract);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT_DESC', binds$_.contract_desc);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'AUTHORIZE_CODE', binds$_.authorize_code);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'AUTHORIZE_NAME', binds$_.authorize_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECIPIENT_COMPANY', binds$_.recipient_company);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECIPIENT_COMPANY_NAME', binds$_.recipient_company_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'VENDOR_NO', binds$_.vendor_no);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'VENDOR_NAME', binds$_.vendor_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_AGENT_ID', binds$_.forward_agent_id);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_AGENT_NAME', binds$_.forward_agent_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDRESS_NO', binds$_.forward_address_no);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDRESS_NAME', binds$_.forward_address_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDR_1', binds$_.forward_addr1);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDR_2', binds$_.forward_addr2);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDR_3', binds$_.forward_addr3);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDR_4', binds$_.forward_addr4);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDR_5', binds$_.forward_addr5);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDR_6', binds$_.forward_addr6);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_ADDR_7', binds$_.forward_addr7);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'DELIVERY_TERMS', binds$_.delivery_terms);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'DELIVERY_TERMS_DESC', binds$_.delivery_terms_desc);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_VIA_CODE', binds$_.ship_via_code);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_VIA_DESC', binds$_.ship_via_desc);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'DELIVERY_REASON_ID', binds$_.delivery_reason_id);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'DOCUMNET_FOOTER', binds$_.documnet_footer);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'DELIVERY_REASON_DESC', binds$_.delivery_reason_desc);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'LABEL_NOTE', binds$_.label_note);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'CREATE_DATE', binds$_.create_date);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'TRANSPORT_DATE', binds$_.transport_date);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDRESS_NO', binds$_.from_address_no);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDRESS_NAME', binds$_.from_address_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDR_1', binds$_.from_addr1);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDR_2', binds$_.from_addr2);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDR_3', binds$_.from_addr3);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDR_4', binds$_.from_addr4);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDR_5', binds$_.from_addr5);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDR_6', binds$_.from_addr6);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FROM_ADDR_7', binds$_.from_addr7);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'ADDRESS_POSITION', binds$_.address_position);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SINGLE_OCCURRENCE_ADDRESS', binds$_.single_occurrence_address);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDRESS_NO', binds$_.ship_address_no);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDRESS_NAME', binds$_.ship_address_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDR_1', binds$_.ship_addr1);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDR_2', binds$_.ship_addr2);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDR_3', binds$_.ship_addr3);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDR_4', binds$_.ship_addr4);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDR_5', binds$_.ship_addr5);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDR_6', binds$_.ship_addr6);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIP_ADDR_7', binds$_.ship_addr7);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'STATUS', binds$_.status);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'GROSS_WEIGHT', binds$_.gross_weight);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'NET_WEIGHT', binds$_.net_weight);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'VOLUME', binds$_.volume);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'DOCUMENT_PHRASE', binds$_.document_phrase);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'PAGE_FOOTER_1', binds$_.page_footer1);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'PAGE_FOOTER_2', binds$_.page_footer2);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'PAGE_FOOTER_3', binds$_.page_footer3);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'PAGE_FOOTER_4', binds$_.page_footer4);

   has_transaction_line_ := FALSE;
   par_transaction_line_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'TRANSACTION_LINES');
   OPEN get_transaction_line(binds$_.delivery_note_id, binds$_.contract);
   LOOP
      FETCH get_transaction_line INTO rec_transaction_line_;
      has_transaction_line_ := get_transaction_line%FOUND OR get_transaction_line%ROWCOUNT > 0;
      EXIT WHEN get_transaction_line%NOTFOUND;
      DECLARE
         contract_   transport_delivery_note_tab.contract%TYPE;
         inventory_rec_  Inventory_Transaction_Hist_API.Public_Rec; 
         Part_rec_        Inventory_Part_API.Public_Rec;
         $IF Component_Mfgstd_SYS.INSTALLED $THEN
            operation_rec_   Operation_History_API.Public_Rec;
         $END
      BEGIN
         IF rec_transaction_line_.transaction_type_db = Transport_Transaction_Type_API.DB_INVENTORY THEN
            inventory_rec_ := Inventory_Transaction_Hist_API.Get(rec_transaction_line_.transaction_id);
            Part_rec_      := Inventory_Part_API.Get(rec_transaction_line_.contract, rec_transaction_line_.part_no);
            rec_transaction_line_.part_no        := inventory_rec_.Part_No;
            rec_transaction_line_.part_desc      := Inventory_Part_API.Get_Description(rec_transaction_line_.contract, rec_transaction_line_.part_no);
            rec_transaction_line_.unit_meas      := Part_rec_.Unit_Meas;
            rec_transaction_line_.qty_delivered  := inventory_rec_.Quantity;
            rec_transaction_line_.lot_batch_no    := inventory_rec_.Lot_Batch_No;
            rec_transaction_line_.serial_no      := inventory_rec_.Serial_No;
            rec_transaction_line_.customs_stat_no := Part_rec_.Customs_Stat_No;
            rec_transaction_line_.part_no_notes   := Document_Text_API.Get_All_Notes(Part_rec_.Note_Id, '3');
         ELSE
            $IF Component_Shpord_SYS.INSTALLED AND Component_Mfgstd_SYS.INSTALLED $THEN
               operation_rec_ := Operation_History_API.Get(rec_transaction_line_.transaction_id);
               rec_transaction_line_.part_no       := operation_rec_.part_no;
               rec_transaction_line_.qty_delivered :=  Shop_Order_Operation_API.Get_Outside_Qty_Shipped(operation_rec_.order_no, operation_rec_.release_no, operation_rec_.sequence_no, operation_rec_.operation_no);
            $ELSE
               NULL;
            $END
            $IF Component_Purch_SYS.INSTALLED $THEN
               rec_transaction_line_.part_desc    := Purchase_Part_API.Get_Description(rec_transaction_line_.contract, rec_transaction_line_.part_no);
               rec_transaction_line_.unit_meas    := Purchase_Part_API.Get_Default_Buy_Unit_Meas(rec_transaction_line_.contract, rec_transaction_line_.part_no);
               rec_transaction_line_.part_no_notes := Document_Text_API.Get_All_Notes(Purchase_Part_API.Get_Note_Id(rec_transaction_line_.contract, rec_transaction_line_.part_no), '3');
            $END
            
         END IF;
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'TRANSACTION_LINE');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TRANSACTION_ID', rec_transaction_line_.transaction_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TRANSACTION_CODE', rec_transaction_line_.transaction_code);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_transaction_line_.part_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_DESC', rec_transaction_line_.part_desc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'QTY_DELIVERED', rec_transaction_line_.qty_delivered);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'UNIT_MEAS', rec_transaction_line_.unit_meas);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOT_BATCH_NO', rec_transaction_line_.lot_batch_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SERIAL_NO', rec_transaction_line_.serial_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO_NOTES', rec_transaction_line_.part_no_notes);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CUSTOMS_STAT_NO', rec_transaction_line_.customs_stat_no);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'TRANSACTION_LINE');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_transaction_line_ => rec_transaction_line_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_transaction_line;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'TRANSACTION_LINES');
   binds$_ := par_transaction_line_;

   has_page_footer_row_ := FALSE;
   par_page_footer_row_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW_1');
   OPEN get_page_footer_row(binds$_.page_footer1);
   LOOP
      FETCH get_page_footer_row INTO rec_page_footer_row_;
      has_page_footer_row_ := get_page_footer_row%FOUND OR get_page_footer_row%ROWCOUNT > 0;
      EXIT WHEN get_page_footer_row%NOTFOUND;
      DECLARE
         j_                 NUMBER := 1;
         temp_index1_       NUMBER;
         temp_index2_       NUMBER;
         pagefoot_length_   NUMBER;
         no_more_values_    BOOLEAN := FALSE;
         substr_length_     NUMBER;
      BEGIN
         IF rec_page_footer_row_.page_footer IS NOT NULL THEN
            pagefoot_length_ := LENGTH(rec_page_footer_row_.page_footer);
            WHILE j_ < 8  LOOP
               IF j_ = 1 THEN
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_+1);
               ELSE
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_-1);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
               END IF;
               
               IF temp_index1_ = 0 THEN
                  rec_page_footer_row_.column1  := SUBSTR(Substr(rec_page_footer_row_.page_footer, 1, pagefoot_length_), 1, 100);
                  EXIT;
               ELSE
                  IF temp_index2_ = 0 THEN
                     substr_length_  := pagefoot_length_;
                     no_more_values_ := TRUE;
                  ELSE
                     substr_length_ := temp_index2_-(temp_index1_+1);
                  END IF;
                  
                  IF j_ = 1 THEN
                     rec_page_footer_row_.column1 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, 1, temp_index1_-1), 1, 100);
                  ELSIF j_ = 2 THEN
                     rec_page_footer_row_.column2 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 3 THEN
                     rec_page_footer_row_.column3 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 4 THEN
                     rec_page_footer_row_.column4 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 5 THEN
                     rec_page_footer_row_.column5 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 6 THEN
                     rec_page_footer_row_.column6 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 7 THEN
                     rec_page_footer_row_.column7 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  END IF;
               END IF;
               j_ := j_ + 1;
               EXIT WHEN no_more_values_;
            END LOOP;
         END IF;
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_1', rec_page_footer_row_.column1);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_2', rec_page_footer_row_.column2);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_3', rec_page_footer_row_.column3);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_4', rec_page_footer_row_.column4);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_5', rec_page_footer_row_.column5);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_6', rec_page_footer_row_.column6);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_7', rec_page_footer_row_.column7);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_page_footer_row_ => rec_page_footer_row_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_page_footer_row;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW_1');
   binds$_ := par_page_footer_row_;

   has_page_footer_row_ := FALSE;
   par_page_footer_row_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW_2');
   OPEN get_page_footer_row(binds$_.page_footer2);
   LOOP
      FETCH get_page_footer_row INTO rec_page_footer_row_;
      has_page_footer_row_ := get_page_footer_row%FOUND OR get_page_footer_row%ROWCOUNT > 0;
      EXIT WHEN get_page_footer_row%NOTFOUND;
      DECLARE
         j_                 NUMBER := 1;
         temp_index1_       NUMBER;
         temp_index2_       NUMBER;
         pagefoot_length_   NUMBER;
         no_more_values_    BOOLEAN := FALSE;
         substr_length_     NUMBER;
      BEGIN
         IF rec_page_footer_row_.page_footer IS NOT NULL THEN
            pagefoot_length_ := LENGTH(rec_page_footer_row_.page_footer);
            WHILE j_ < 8  LOOP
               IF j_ = 1 THEN
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_+1);
               ELSE
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_-1);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
               END IF;
               
               IF temp_index1_ = 0 THEN
                  rec_page_footer_row_.column1  := SUBSTR(Substr(rec_page_footer_row_.page_footer, 1, pagefoot_length_), 1, 100);
                  EXIT;
               ELSE
                  IF temp_index2_ = 0 THEN
                     substr_length_  := pagefoot_length_;
                     no_more_values_ := TRUE;
                  ELSE
                     substr_length_ := temp_index2_-(temp_index1_+1);
                  END IF;
                  
                  IF j_ = 1 THEN
                     rec_page_footer_row_.column1 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, 1, temp_index1_-1), 1, 100);
                  ELSIF j_ = 2 THEN
                     rec_page_footer_row_.column2 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 3 THEN
                     rec_page_footer_row_.column3 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 4 THEN
                     rec_page_footer_row_.column4 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 5 THEN
                     rec_page_footer_row_.column5 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 6 THEN
                     rec_page_footer_row_.column6 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 7 THEN
                     rec_page_footer_row_.column7 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  END IF;
               END IF;
               j_ := j_ + 1;
               EXIT WHEN no_more_values_;
            END LOOP;
         END IF;
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_1', rec_page_footer_row_.column1);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_2', rec_page_footer_row_.column2);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_3', rec_page_footer_row_.column3);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_4', rec_page_footer_row_.column4);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_5', rec_page_footer_row_.column5);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_6', rec_page_footer_row_.column6);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_7', rec_page_footer_row_.column7);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_page_footer_row_ => rec_page_footer_row_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_page_footer_row;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW_2');
   binds$_ := par_page_footer_row_;

   has_page_footer_row_ := FALSE;
   par_page_footer_row_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW_3');
   OPEN get_page_footer_row(binds$_.page_footer3);
   LOOP
      FETCH get_page_footer_row INTO rec_page_footer_row_;
      has_page_footer_row_ := get_page_footer_row%FOUND OR get_page_footer_row%ROWCOUNT > 0;
      EXIT WHEN get_page_footer_row%NOTFOUND;
      DECLARE
         j_                 NUMBER := 1;
         temp_index1_       NUMBER;
         temp_index2_       NUMBER;
         pagefoot_length_   NUMBER;
         no_more_values_    BOOLEAN := FALSE;
         substr_length_     NUMBER;
      BEGIN
         IF rec_page_footer_row_.page_footer IS NOT NULL THEN
            pagefoot_length_ := LENGTH(rec_page_footer_row_.page_footer);
            WHILE j_ < 8  LOOP
               IF j_ = 1 THEN
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_+1);
               ELSE
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_-1);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
               END IF;
               
               IF temp_index1_ = 0 THEN
                  rec_page_footer_row_.column1  := SUBSTR(Substr(rec_page_footer_row_.page_footer, 1, pagefoot_length_), 1, 100);
                  EXIT;
               ELSE
                  IF temp_index2_ = 0 THEN
                     substr_length_  := pagefoot_length_;
                     no_more_values_ := TRUE;
                  ELSE
                     substr_length_ := temp_index2_-(temp_index1_+1);
                  END IF;
                  
                  IF j_ = 1 THEN
                     rec_page_footer_row_.column1 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, 1, temp_index1_-1), 1, 100);
                  ELSIF j_ = 2 THEN
                     rec_page_footer_row_.column2 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 3 THEN
                     rec_page_footer_row_.column3 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 4 THEN
                     rec_page_footer_row_.column4 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 5 THEN
                     rec_page_footer_row_.column5 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 6 THEN
                     rec_page_footer_row_.column6 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 7 THEN
                     rec_page_footer_row_.column7 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  END IF;
               END IF;
               j_ := j_ + 1;
               EXIT WHEN no_more_values_;
            END LOOP;
         END IF;
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_1', rec_page_footer_row_.column1);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_2', rec_page_footer_row_.column2);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_3', rec_page_footer_row_.column3);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_4', rec_page_footer_row_.column4);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_5', rec_page_footer_row_.column5);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_6', rec_page_footer_row_.column6);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_7', rec_page_footer_row_.column7);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_page_footer_row_ => rec_page_footer_row_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_page_footer_row;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW_3');
   binds$_ := par_page_footer_row_;

   has_page_footer_row_ := FALSE;
   par_page_footer_row_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW_4');
   OPEN get_page_footer_row(binds$_.page_footer4);
   LOOP
      FETCH get_page_footer_row INTO rec_page_footer_row_;
      has_page_footer_row_ := get_page_footer_row%FOUND OR get_page_footer_row%ROWCOUNT > 0;
      EXIT WHEN get_page_footer_row%NOTFOUND;
      DECLARE
         j_                 NUMBER := 1;
         temp_index1_       NUMBER;
         temp_index2_       NUMBER;
         pagefoot_length_   NUMBER;
         no_more_values_    BOOLEAN := FALSE;
         substr_length_     NUMBER;
      BEGIN
         IF rec_page_footer_row_.page_footer IS NOT NULL THEN
            pagefoot_length_ := LENGTH(rec_page_footer_row_.page_footer);
            WHILE j_ < 8  LOOP
               IF j_ = 1 THEN
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_+1);
               ELSE
                  temp_index1_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_-1);
                  temp_index2_ := INSTR(rec_page_footer_row_.page_footer, CHR(9),1,j_);
               END IF;
               
               IF temp_index1_ = 0 THEN
                  rec_page_footer_row_.column1  := SUBSTR(Substr(rec_page_footer_row_.page_footer, 1, pagefoot_length_), 1, 100);
                  EXIT;
               ELSE
                  IF temp_index2_ = 0 THEN
                     substr_length_  := pagefoot_length_;
                     no_more_values_ := TRUE;
                  ELSE
                     substr_length_ := temp_index2_-(temp_index1_+1);
                  END IF;
                  
                  IF j_ = 1 THEN
                     rec_page_footer_row_.column1 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, 1, temp_index1_-1), 1, 100);
                  ELSIF j_ = 2 THEN
                     rec_page_footer_row_.column2 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 3 THEN
                     rec_page_footer_row_.column3 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 4 THEN
                     rec_page_footer_row_.column4 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 5 THEN
                     rec_page_footer_row_.column5 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 6 THEN
                     rec_page_footer_row_.column6 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  ELSIF j_ = 7 THEN
                     rec_page_footer_row_.column7 := SUBSTR(SUBSTR(rec_page_footer_row_.page_footer, temp_index1_+1, substr_length_), 1, 100);
                  END IF;
               END IF;
               j_ := j_ + 1;
               EXIT WHEN no_more_values_;
            END LOOP;
         END IF;
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_1', rec_page_footer_row_.column1);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_2', rec_page_footer_row_.column2);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_3', rec_page_footer_row_.column3);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_4', rec_page_footer_row_.column4);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_5', rec_page_footer_row_.column5);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_6', rec_page_footer_row_.column6);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COLUMN_7', rec_page_footer_row_.column7);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_page_footer_row_ => rec_page_footer_row_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_page_footer_row;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'PAGE_FOOTER_ROW_4');
   binds$_ := par_page_footer_row_;

   has_document_footer_ := FALSE;
   par_document_footer_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'DOCUMENT_FOOTERS1');
   OPEN get_document_footer;
   LOOP
      FETCH get_document_footer INTO rec_document_footer_;
      has_document_footer_ := get_document_footer%FOUND OR get_document_footer%ROWCOUNT > 0;
      EXIT WHEN get_document_footer%NOTFOUND;
      DECLARE
         row_                           NUMBER;
         column_title_                  Footer_Connection_API.footer_arr;
         column_text_                   Footer_Connection_API.footer_arr;
         f_title_                       Footer_Connection_API.t_varchar2;     
         f_text_                        Footer_Connection_API.t_varchar2;
         company_                       VARCHAR(20);
         language_code_                 VARCHAR2(6);
      BEGIN
         -- Note: Document Footer for report
         company_:= Site_API.Get_Company(par_document_footer_.contract); 
         language_code_ := Fnd_Session_API.Get_Language;
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_, 'TRANSPORT_DELIVERY_NOTE_REP', par_document_footer_.contract)) THEN
            Footer_Connection_API.Get_Footer_Details(row_, column_title_, column_text_, company_, 'TRANSPORT_DELIVERY_NOTE_REP', par_document_footer_.contract, language_code_);
            FOR i IN 0..row_ LOOP
               Xml_Record_Writer_SYS.Start_Element(xml$_, 'DOCUMENT_FOOTER');
               f_title_  := column_title_(i);
               f_text_   := column_text_(i);
               FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                  Xml_Record_Writer_SYS.Add_Element(xml$_, f_title_(n), f_text_(n));
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml$_, 'DOCUMENT_FOOTER');
            END LOOP;
         END IF; 
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'DOCUMENT_FOOTER');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT1', rec_document_footer_.text1);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT2', rec_document_footer_.text2);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT3', rec_document_footer_.text3);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT4', rec_document_footer_.text4);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT5', rec_document_footer_.text5);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT6', rec_document_footer_.text6);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT7', rec_document_footer_.text7);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT8', rec_document_footer_.text8);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT9', rec_document_footer_.text9);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT10', rec_document_footer_.text10);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT11', rec_document_footer_.text11);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT12', rec_document_footer_.text12);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT13', rec_document_footer_.text13);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT14', rec_document_footer_.text14);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT15', rec_document_footer_.text15);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT16', rec_document_footer_.text16);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT17', rec_document_footer_.text17);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT18', rec_document_footer_.text18);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT19', rec_document_footer_.text19);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT20', rec_document_footer_.text20);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT21', rec_document_footer_.text21);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT22', rec_document_footer_.text22);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT23', rec_document_footer_.text23);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT24', rec_document_footer_.text24);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT25', rec_document_footer_.text25);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT26', rec_document_footer_.text26);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT27', rec_document_footer_.text27);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT28', rec_document_footer_.text28);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT29', rec_document_footer_.text29);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT30', rec_document_footer_.text30);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT31', rec_document_footer_.text31);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT32', rec_document_footer_.text32);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT33', rec_document_footer_.text33);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT34', rec_document_footer_.text34);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT35', rec_document_footer_.text35);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT36', rec_document_footer_.text36);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT37', rec_document_footer_.text37);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT38', rec_document_footer_.text38);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT39', rec_document_footer_.text39);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TEXT40', rec_document_footer_.text40);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'IS_FREE_TEXT', rec_document_footer_.is_free_text);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'DOCUMENT_FOOTER');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_document_footer_ => rec_document_footer_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_document_footer;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'DOCUMENT_FOOTERS1');
   binds$_ := par_document_footer_;
   IF NOT has_transaction_line_ AND NOT has_page_footer_row_ AND NOT has_page_footer_row_ AND NOT has_page_footer_row_ AND NOT has_page_footer_row_ AND NOT has_document_footer_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'TRANSPORT_DELIVERY_NOTE_REP');
   Report_SYS.Finish_Xml_Report('TRANSPORT_DELIVERY_NOTE_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_transaction_line%ISOPEN THEN
            CLOSE get_transaction_line;
         END IF;
         IF get_page_footer_row%ISOPEN THEN
            CLOSE get_page_footer_row;
         END IF;
         IF get_document_footer%ISOPEN THEN
            CLOSE get_document_footer;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   delivery_note_id_         IN VARCHAR2,
   preliminary_              IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'TRANSPORT_DELIVERY_NOTE_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (delivery_note_id_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_NOTE_ID', delivery_note_id_, parameter_attr_);
   END IF;
   IF (preliminary_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRELIMINARY', preliminary_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END TRANSPORT_DELIVERY_NOTE_RPI;
/
SHOW ERROR