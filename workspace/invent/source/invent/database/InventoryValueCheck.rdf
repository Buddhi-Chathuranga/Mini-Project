-----------------------------------------------------------------------------
--
--  Logical unit: InventoryValue
--
--  File:         TEMPLATE.RDF
--  Version:      Foundation1 2.2
--
--  Date    Sign   History
--  ------  ----   -----------------------------------------------------------
--  200824  RoJalk SC2020R1-9252, Modified the cursor get_lot_serial_transit_qty and added a condition to include only COMPANY OWNED.
--  180209  ChFolk STRSC-16472, Removed view inventory_value_check_local_1 and get_value and Added merged to logic in view to new cursors
--  180209         get_total_qty and get_total_value. 
--  141124  DaZase PRSC-4337, Replaced call to Company_Address_Deliv_Info_API.Get_Address_Name with Site_API.Get_Company_Address_Name.
--  140716  TiRalk Bug 117850, Modified report method to print company name properly.
--  130805  MaRalk TIBE-889, Removed global variables do_xml_, do_rs_, xml_, package_name_ and  
--  130805         added inside Report_Overview method. Removed global LU constant inst_InventoryPartAtCustomer_ 
--  130805         and modified same method using conditional compilation instead.
--  130410  Asawlk EBALL-37, Modified Report_Overview() to call the Inventory_Part_At_Customer_API.Get_Our_Total_Qty_At_Customer() with 
--  130410         correct parameters. 
--  130322  Asawlk EBALL-37, Modified Report_Overview method to make the call to Inventory_Part_At_Customer_API static. Also removed the 
--  130322         constant inst_InventoryPartAtCustomer_. 
--  110826  LEPESE Added call to User_Allowed_Site_API.Exist().
--  100409  MaRalk Removed NVL for stock.part_ownership_db from the where condition in cursor get_lot_serial_quantity in Report_Overview method.
--  100409         Removed join with inventory_location_pub in the same cursor.
--  100401  MaRalk Modified cursor get_lot_serial_quantity in Report_Overview method to remove the usage of INVENTORY_PART_STOCK_OWNER_PUB view.
--------------------------------------- 14.0.0 --------------------------------
--  080317  HoInlk Bug 72069, Added missing "ifs_assert_safe" annotations.
--  070528  ChBalk Added Site_API.Exist to validate user entered contract.
--  061025  LEPESE Added view inventory_value_check_local_1. The purpose of this view is to solve
--  061025         that has arised since location_group is new key in inventory_value_part_tab.
--  061025         Replaced data source inventory_value_part_tab with inventory_value_check_local_1
--  061025         in cursor get_value.
--  051122  LEPESE A lot of changes in the main method due to the new LU structure in InventoryValue.
--  051122         Cursor get_value completely redesigned. Also added cursor
--  051122         get_lot_serial_transit_qty to correct missing quantities from the transit object.
--  050922  NiDalk Small adjustment in the main method.
--  050921  NiDalk Removed unused variables.
--  050908  NiDalk Changed to Report Designer layout.
--  050329  JOHESE Replaced call to Customer_Consignment_Stock_API.Get_Sum_Consignment_Stock_Qty
--                 with Inventory_Part_At_Customer_Api.Get_Our_Total_Qty_At_Customer call to include
--                 parts in consignment as well as parts awaiting delivery confirmation.
--  040610  NaWilk Bug 44975, Modified FROM clause in view INVENTORY_VALUE_CHECK_REP.
--  040428  IsWilk Rewrote the DBMS_SQL to Native dynamic SQL inside FOR LOOPs.  
------------------------------------ 13.3.0 ----------------------------------
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  030917  LEPESE Complete redesign to adapt report to new part cost levels, to FA rotable pools
--                 and to new types of externally owned stock. Also restructured code to increase
--                 readability and performance.
--  030321 DayJlk  Changed View INVENTORY_PART_LOC_CONSIGN to INVENTORY_PART_STOCK_OWNER_PUB 
--  030321         in subquery of cursor get_sum in Method Report_Overview.    
--  **************************  TAKEOFF-2  *****************************************
--  021112  SaRalk Bug 33337, Added code which enables to add different logos for different companies. 
--  020816  LEPESE  Replaced use of Inventory_Part_Config_API.Get_Inventory_Value_By_Method
--                  to instead use Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Config.
--  **********************  AD Baseline  ***********************************************
--  011004  SuSalk Bug 24658 fix,Extend the length of 'Company' to VARCHAR2(20).
--  000928  JOHW   Changed prompt from Configuration Id to Configuration ID.
--  000922  JOHW   Added configuration_id.
--  000417  SHVE   Replaced reference to obsolete method Inventory_Part_API.Get_Inventory_Value
--                 with Inventory_Part_API.Get_Inventory_Value_By_Method.
--  990407  JOHW   Added new text labels and changed titles.
--  990401  JOHW   Added new column qty_in_transit and qty_at_customer.
--  990318  JOHW   Added Qty_In_Transit from inventor part location.
--  990222  JOHW   Changed title in view comment to Last Activity Date.
--  990218  JOHW   Changed check on date to Last_Activity_Date and added
--                 currency_rounding on diff_result_.
--  990215  JOHW   Added Diff_Result.
--  990212  JOHW   Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = InventoryValue
define PKG                = INVENTORY_VALUE_CHECK_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INVENTORY_VALUE_CHECK_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define CONTRACT                          = S1
define STAT_YEAR_NO                      = N1
define STAT_PERIOD_NO                    = N2
define LAST_ACTIVITY_DATE                = D1
define PART_NO                           = S2
define CONFIGURATION_ID                  = S3
define VALUE_QTY                         = N3
define VALUE_TOTAL_STANDARD              = N4
define VALUE_TOTAL_VALUE                 = N5
define NEW_QTY                           = N6
define NEW_TOTAL_STANDARD                = N7
define NEW_TOTAL_VALUE                   = N8
define DIFF_RESULT                       = N9

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       &contract                               CONTRACT,
       &stat_year_no                           STAT_YEAR_NO,
       &stat_period_no                         STAT_PERIOD_NO,
       &last_activity_date                     LAST_ACTIVITY_DATE,
       &part_no                                PART_NO,
       &configuration_id                       CONFIGURATION_ID,
       &value_qty                              VALUE_QTY,
       &value_total_standard                   VALUE_TOTAL_STANDARD,
       &value_total_value                      VALUE_TOTAL_VALUE,
       &new_qty                                NEW_QTY,
       &new_total_standard                     NEW_TOTAL_STANDARD,
       &new_total_value                        NEW_TOTAL_VALUE,
       &diff_result                            DIFF_RESULT,
       null                                    DIFF_TOLERANCE_AMOUNT
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^REF=User_Allowed_Site_LOV^TITLE=Site:^ITEM_NAME=iContract^QUERY=Site:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..stat_year_no IS
   'FLAGS=A----^DATATYPE=NUMBER(4)^PROMPT=Stat Year No^TITLE=Year No:^ITEM_NAME=iStatYearNo^';
COMMENT ON COLUMN &VIEW..stat_period_no IS
   'FLAGS=A----^DATATYPE=NUMBER(2)^PROMPT=Stat Period No^REF=StatisticPeriod(stat_year_no)^TITLE=Period No:^ITEM_NAME=iStatPeriodNo^';
COMMENT ON COLUMN &VIEW..last_activity_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^PROMPT=Last Activity Date^TITLE=Last Activity Date:^ITEM_NAME=iLastActivityDate^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^TITLE=Part No^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &VIEW..configuration_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Configuration ID^REF=InventoryPartConfig(contract, part_no)^TITLE=Configuration ID^ITEM_NAME=iConfigurationId^';
COMMENT ON COLUMN &VIEW..value_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Inventory Value Quantity^TITLE=Quantity^ITEM_NAME=iValueQty^';
COMMENT ON COLUMN &VIEW..value_total_standard IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Inventory Value Total Standard^TITLE=Total Standard^ITEM_NAME=iValueTotalStandard^';
COMMENT ON COLUMN &VIEW..value_total_value IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Inventory Value Total Value^TITLE=Total Value^ITEM_NAME=iValueTotalValue^';
COMMENT ON COLUMN &VIEW..new_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Quantity^TITLE=Quantity^ITEM_NAME=iNewQty^';
COMMENT ON COLUMN &VIEW..new_total_standard IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Standard^TITLE=Total Standard^ITEM_NAME=iNewTotalStandard^';
COMMENT ON COLUMN &VIEW..new_total_value IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Value^TITLE=Total Value^ITEM_NAME=iNewTotalValue^';
COMMENT ON COLUMN &VIEW..diff_result IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Diff Result^TITLE=Difference^ITEM_NAME=iDiffResult^';
COMMENT ON COLUMN &VIEW..diff_tolerance_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Diff tolerance amount:^QFLAGS=MCS--^';

BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Inventory Value Check Report', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Warehouse Management','Financial Control');
   Report_SYS.Define_Report_Text_( '&VIEW', 'txInventoryValue', 'Calculated using Inventory Transactions' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txNewValue', 'Calculated using Cost * Quantity' );
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                NUMBER;
   row_no_                    NUMBER := 1;
   contract_                  VARCHAR2(5);
   diff_tolerance_amount_     NUMBER;
   total_qty_at_customer_     NUMBER;
   stat_year_no_              NUMBER;
   stat_period_no_            NUMBER;
   old_part_                  BOOLEAN;
   last_activity_date_        DATE;
   value_total_standard_      NUMBER;
   value_total_quantity_      NUMBER;
   value_total_value_         NUMBER;
   actual_total_standard_     NUMBER;
   actual_total_quantity_     NUMBER;
   actual_total_value_        NUMBER;
   now_                       DATE;
   diff_result_               NUMBER;
   currency_rounding_         NUMBER;
   company_                   VARCHAR2(20);
   diff_result_round_         NUMBER;
   inventory_value_           NUMBER;
   inventory_part_rec_        Inventory_Part_API.Public_Rec;
   local_configuration_id_    VARCHAR2(50); 
   logotype_                  VARCHAR2(100);      
   company_name_              VARCHAR2(100);
   qty_to_deliv_confirm_      NUMBER;
   qty_in_consignment_        NUMBER;
   qty_in_exchange_           NUMBER;
   do_xml_                    BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                     BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                       CLOB;
   package_name_              VARCHAR2(100) := 'INVENTORY_VALUE_CHECK_REP';
   
   CURSOR  get_ground (contract_ IN VARCHAR2) IS
     SELECT stat_year_no, stat_period_no, last_activity_date 
     FROM inventory_value_tab
     where contract = contract_
     AND ((stat_year_no * 100) + stat_period_no) = 
         (select max((stat_year_no * 100) + stat_period_no) from inventory_value_tab
            where contract = contract_);  
  
   CURSOR get_total_qty(stat_year_no_     IN NUMBER,
                        stat_period_no_   IN NUMBER,
                        contract_         IN VARCHAR2,
                        part_no_          IN VARCHAR2,
                        configuration_id_ IN VARCHAR2) IS
      SELECT SUM(SUM(quantity) + SUM(qty_in_transit) + SUM(qty_at_customer) + SUM(qty_waiv_dev_rej)) total_quantity
        FROM inventory_value_part_tab ivp
       WHERE contract         = contract_     
         AND stat_year_no     = stat_year_no_
         AND stat_period_no   = stat_period_no_
         AND part_no          = part_no_
         AND configuration_id = configuration_id_
      GROUP BY contract, stat_year_no, stat_period_no, part_no, configuration_id;
   
   CURSOR get_total_value(stat_year_no_     IN NUMBER,
                          stat_period_no_   IN NUMBER,
                          contract_         IN VARCHAR2,
                          part_no_          IN VARCHAR2,
                          configuration_id_ IN VARCHAR2 ) IS
      SELECT NVL(SUM(total_value),0)   total_value
        FROM invent_value_part_detail_tab
       WHERE contract         = contract_
         AND stat_year_no     = stat_year_no_
         AND stat_period_no   = stat_period_no_
         AND part_no          = part_no_
         AND configuration_id = configuration_id_                 
      GROUP BY contract, stat_year_no, stat_period_no, part_no, configuration_id;
            
   CURSOR get_configurations (contract_ IN VARCHAR2) IS
      SELECT part_no, configuration_id
      FROM   inventory_part_config_pub
      WHERE  contract = contract_;

   CURSOR get_lot_serial_quantity (contract_         IN VARCHAR2,
                                   part_no_          IN VARCHAR2,
                                   configuration_id_ IN VARCHAR2) IS
      SELECT lot_batch_no, serial_no, configuration_id,
             SUM(stock.qty_onhand + stock.qty_in_transit) quantity
       FROM  inventory_part_in_stock_pub    stock,
             rotable_part_pool_tab          pool
      WHERE  stock.part_ownership_db = 'COMPANY OWNED'
        AND  stock.rotable_part_pool_id = pool.rotable_part_pool_id (+)
        AND  NVL(pool.rotable_pool_asset_type,'INVENTORY ASSET') = 'INVENTORY ASSET'
        AND (stock.configuration_id = configuration_id_ OR configuration_id_ IS NULL)
        AND  stock.contract         = contract_
        AND  stock.part_no          = part_no_
      GROUP BY lot_batch_no, serial_no, configuration_id;

   CURSOR get_lot_serial_transit_qty (contract_         IN VARCHAR2,
                                      part_no_          IN VARCHAR2,
                                      configuration_id_ IN VARCHAR2) IS
      SELECT lot_batch_no,
             serial_no,
             configuration_id,
             SUM(quantity) qty_in_transit
      FROM inventory_part_in_transit_tab
      WHERE part_ownership  = 'COMPANY OWNED'
      AND contract          = contract_
      AND part_no           = part_no_
      AND (configuration_id = configuration_id_ OR configuration_id_ IS NULL)
      GROUP BY lot_batch_no, serial_no, configuration_id;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   
   result_key_            := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY',
                                                                                       report_attr_));
   contract_              := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   diff_tolerance_amount_ := Client_SYS.Get_Item_Value('DIFF_TOLERANCE_AMOUNT', parameter_attr_);
   company_               := Site_API.Get_Company(contract_);
   currency_rounding_     := Currency_Code_API.Get_Currency_Rounding(company_,
                                                                     Company_Finance_API.Get_Currency_Code(
                                                                                         company_));
   Site_API.Exist(contract_);
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User, contract_);

   OPEN get_ground(contract_);
   FETCH get_ground INTO stat_year_no_, stat_period_no_, last_activity_date_;
   CLOSE get_ground; 

   now_ := Site_API.Get_Site_Date(contract_);

   IF (now_ - last_activity_date_) > 1 THEN
      Error_SYS.Record_General(lu_name_, 'CHECKBATCH: The inventory value was calculated more than 1 day ago.');
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEMS');
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEM');
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_YEAR_NO', stat_year_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_PERIOD_NO', stat_period_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'LAST_ACTIVITY_DATE', last_activity_date_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_VALUE_ITEMS');
   END IF;
   
   FOR config_rec_ IN get_configurations(contract_) LOOP
      actual_total_standard_ := 0;
      actual_total_quantity_ := 0;
      actual_total_value_    := 0;

      IF (config_rec_.configuration_id = '*') THEN
         Inventory_Part_At_Customer_API.Get_Our_Total_Qty_At_Customer(qty_to_deliv_confirm_,
                                                                      qty_in_consignment_,
                                                                      qty_in_exchange_,
                                                                      contract_,
                                                                      config_rec_.part_no);
         total_qty_at_customer_ := NVL(qty_to_deliv_confirm_, 0) + NVL(qty_in_consignment_, 0) + NVL(qty_in_exchange_, 0); 

         inventory_value_       := Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Method(
                                                             contract_,
                                                             config_rec_.part_no,
                                                             config_rec_.configuration_id,
                                                             NULL,
                                                             NULL);

         actual_total_quantity_ := total_qty_at_customer_;
         actual_total_value_    := inventory_value_ * total_qty_at_customer_;
      END IF;

      inventory_part_rec_ := Inventory_Part_API.Get(contract_, config_rec_.part_no);

      IF (inventory_part_rec_.inventory_part_cost_level = 'COST PER PART') THEN
         local_configuration_id_ := NULL;
      ELSE
         local_configuration_id_ := config_rec_.configuration_id;
      END IF;

      FOR lot_serial_rec_ IN get_lot_serial_quantity(contract_,
                                                     config_rec_.part_no,
                                                     local_configuration_id_) LOOP

         inventory_value_ := Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Method(
                                                          contract_,
                                                          config_rec_.part_no,
                                                          lot_serial_rec_.configuration_id,
                                                          lot_serial_rec_.lot_batch_no,
                                                          lot_serial_rec_.serial_no);

         actual_total_quantity_ := actual_total_quantity_ + lot_serial_rec_.quantity;
         actual_total_value_    := actual_total_value_ +
                                   (inventory_value_ * lot_serial_rec_.quantity);
      END LOOP;

      FOR lot_serial_rec_ IN get_lot_serial_transit_qty(contract_,
                                                        config_rec_.part_no,
                                                        local_configuration_id_) LOOP

         inventory_value_ := Inventory_Part_Unit_Cost_API.Get_Inventory_Value_By_Method(
                                                          contract_,
                                                          config_rec_.part_no,
                                                          lot_serial_rec_.configuration_id,
                                                          lot_serial_rec_.lot_batch_no,
                                                          lot_serial_rec_.serial_no);

         actual_total_quantity_ := actual_total_quantity_ + lot_serial_rec_.qty_in_transit;
         actual_total_value_    := actual_total_value_ +
                                   (inventory_value_ * lot_serial_rec_.qty_in_transit);

      END LOOP;
      IF (actual_total_quantity_ != 0) THEN
         actual_total_standard_ := actual_total_value_ / actual_total_quantity_;
      END IF;
      
      OPEN get_total_qty(stat_year_no_,
                         stat_period_no_,
                         contract_,
                         config_rec_.part_no,
                         NVL(local_configuration_id_,'*'));
      FETCH get_total_qty INTO value_total_quantity_;
      CLOSE get_total_qty;
      
      OPEN get_total_value(stat_year_no_,
                           stat_period_no_,
                           contract_,
                           config_rec_.part_no,
                           NVL(local_configuration_id_,'*'));
      FETCH get_total_value INTO value_total_value_;      
      IF (get_total_value%notfound) THEN
         old_part_ := FALSE;
      ELSE
         old_part_ := TRUE;
      END IF;
      CLOSE get_total_value;
      IF (value_total_quantity_ = 0) THEN
         value_total_standard_ := value_total_value_;
      ELSE
         value_total_standard_ := value_total_value_ / value_total_quantity_;        
      END IF;
      
      IF (old_part_) THEN
         diff_result_       := abs(actual_total_value_ - value_total_value_);
         diff_result_round_ := round(diff_result_, currency_rounding_);

         IF (diff_result_round_ > diff_tolerance_amount_) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_VALUE_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', config_rec_.part_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIGURATION_ID', NVL(local_configuration_id_,'*'));
               Xml_Record_Writer_SYS.Add_Element(xml_,'VALUE_QTY', value_total_quantity_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'VALUE_TOTAL_STANDARD', value_total_standard_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'VALUE_TOTAL_VALUE', value_total_value_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'NEW_QTY', actual_total_quantity_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'NEW_TOTAL_STANDARD', actual_total_standard_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'NEW_TOTAL_VALUE', actual_total_value_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'DIFF_RESULT', diff_result_round_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_VALUE_ITEM');
            END IF;

            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                 RESULT_KEY,         
                 ROW_NO,
                 PARENT_ROW_NO,             
                 &CONTRACT,
                 &STAT_YEAR_NO,
                 &STAT_PERIOD_NO,   
                 &PART_NO,
                 &CONFIGURATION_ID,
                 &LAST_ACTIVITY_DATE,           
                 &VALUE_QTY,
                 &VALUE_TOTAL_STANDARD,
                 &VALUE_TOTAL_VALUE,
                 &NEW_QTY,
                 &NEW_TOTAL_STANDARD,
                 &NEW_TOTAL_VALUE,
                 &DIFF_RESULT )
               VALUES (
                 result_key_,
                 row_no_,
                 row_no_,
                 contract_,
                 stat_year_no_,
                 stat_period_no_,
                 config_rec_.part_no,
                 config_rec_.configuration_id,
                 last_activity_date_,
                 value_total_quantity_,
                 value_total_standard_,
                 value_total_value_,
                 actual_total_quantity_,
                 actual_total_standard_,
                 actual_total_value_,
                 diff_result_round_);
            END IF;
         END IF;
      END IF;

      row_no_ := row_no_ + 1;
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_VALUE_ITEMS');
      Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEM');
      Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEMS');
   END IF;
   
   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := Site_API.Get_Company_Address_Name(contract_);

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR




-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE CONTRACT
UNDEFINE STAT_YEAR_NO
UNDEFINE STAT_PERIOD_NO
UNDEFINE LAST_ACTIVITY_DATE
UNDEFINE PART_NO
UNDEFINE CONFIGURATION_ID
UNDEFINE VALUE_QTY
UNDEFINE VALUE_TOTAL_STANDARD
UNDEFINE VALUE_TOTAL_VALUE
UNDEFINE NEW_QTY
UNDEFINE NEW_TOTAL_STANDARD
UNDEFINE NEW_TOTAL_VALUE
UNDEFINE DIFF_RESULT
