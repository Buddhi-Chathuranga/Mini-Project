---------------------------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: Upgrade database objects for IFS/Inventory Version
--           from version 15.0.0 to 21.1.0
--
--  File   : 2110.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  201121   WaSalk  SC2020R1-11431, Changed Component version as IFS Cloud 21.1.0 and reflected upg file name accordingly.
--  201009   WaSalk  SC2020R1-10522, Modified CreateDate in TRANSPORT_DELIVERY_NOTE_TAB as not nullable.
--  201002   Asawlk  SC2021R1-318, Modified the source ref information of order type Work Order to Work Task references which 
--  201002           existed in APP10 verson in transport_task_line_tab. The data created before APP10 version will be handled 
--  201002           in a post SQL file in WO module.
--  200929   AyAmlk  PR2020R1-330, STRATEGIC_PROCUREMENT: Added PROC_CATEGORY_ASSORTMENT into ASSORTMENT_STRUCTURE_TAB correctly to UPG.
--  200826   SBalLK  GESPRING20-537, Added NEXT_IT_INTRASTAT_FILE_NO, SERVICE_STATISTICAL_CODE columns to COMPANY_INVENT_INFO_TAB and INVOICE_DATE, 
--  200826           SERVICE_STATISTICAL_CODE, SERVICE_WAY, SERVICE_PAYMENT_WAY, OPPOSITE_COUNTRY_CURR_CODE, OPPOSITE_COUNTRY_CURR_AMOUNT,
--  200826           ADJUST_TO_PREVIOUS_INTRASTAT, PREVIOUS_INTRASTAT_PERIOD, ADVANCE_TRANSACTION, PAYMENT_METHOD, REFERENCE_INVOICE_SERIE,
--  200826           REFERENCE_INVOICE_NUMBER, REFERENCE_INVOICE_DATE, PROTOCOL_NO for INTRASTAT_LINE_TAB to enable italy intrastat functionality.
--  200826           Added MPCCOM_TRANS_CODE_COUNTRY_TAB section.
--  200824   RoJalk  SC2020R1-9252, Added key columns ACTIVITY_SEQ, PART_OWNERSHIP, OWNING_CUSTOMER_NO, OWNING_VENDOR_NO, DELIV_NO, SHIPMENT_ID, SHIPMENT_LINE_NO,
--  200824           and columns RECEIVING_SOURCE_REF1, RECEIVING_SOURCE_REF2, RECEIVING_SOURCE_REF3, RECEIVING_SOURCE_REF4, RECEIVING_SOURCE_REF_TYPE to INVENTORY_PART_IN_TRANSIT_TAB.
--  200730   Aabalk  SCXTEND-4364, Added new number column OPERATIVE_UNIT_TARE_WEIGHT to table HANDLING_UNIT_HISTORY_TAB.
--  200729   ErRalk  SC2020R1-1033, Added PICK_BY_CHOICE_BLOCKED column to INVENTORY_PART_RESERVATION_TAB.
--  200707   Asawlk  Bug 154701(SCZ-10587), Created. 
--  200701   BudKlk  SCXTEND-4457, Added a new enumeration type column ORDER_PROPOSAL_TRIGGER to COMPANY_INVENT_INFO_TAB.
--  200522   BudKLK  Bug 153999 (SCZ-9885), Added new column MAX_COUNTING_LINES to SITE_INVENT_INFO_TAB. 
--  200520   WaSalk  GESPRING20-4348,Added TRANSPORT_DELIVERY_NOTE_TAB and TRANSPORT_DELIV_NOTE_LINE_TAB.
--  200406   SWiclk  SC2020R1-1900, Merged CDBs from 180405_141159_Invent to 200316_PR2020R1-2_Invent.
--  200316   Aabalk  Bug 152790(SCZ-8697), Created.
--  200217   DiHelk  GESPRING20-1803, WAREHOUSE_JOURNAL_TAB added
--  200214   WaSalk  GESPRING20-1793, Added DELIVERY_REASON_ID to INVENTORY_PART_CONFIG_TAB
--  200205   kusplk  GESPRING20-1802, Added DELIVERY_REASON_ID, ALT_DEL_NOTE_NO and DEL_NOTE_DATE to INVENTORY_TRANSACTION_HIST_TAB
--  200114   SBalLK  Bug 151810(SCZ-8466), Created.
--  200103   ErFelk  Bug 145333, Added CONSOLIDATION_FLAG to INTRASTAT_TAB.
--  200103   apwilk  Bug 145333, Czech movement codes descriptions were updated from this bug. Therefore removed the 
--  200103           Czech entry of ZV from the special_code_of_movement_tab and insert the new descriptions 
--  200103           through SpecialCodeOfMovement.ins
--  200102   NISMLK  MFSPRING20-710, Added OWNERSHIP_TRANSFER_REASON_ID column to INVENTORY_TRANSACTION_HIST_TAB.
--  191230   WaSalk  Added AutoUpdateDateApplied Enumeration values to COMPANY_INVENT_INFO_TAB
--  191217   JoAnSe  MFSPRING20-700 Add columns ownrshp_trans_reason_mand and ownrshp_trans_reason_mtr
--                   to company_invent_info_tab
--  191216   JoAnSe  Added rowstate column to OWNERSHIP_TRANSFER_REASON_TAB.
--  191213   JoAnSe  MFSPRING20-698 Added OWNERSHIP_TRANSFER_REASON_TAB and constraints
--  191121   AsHelk  Created
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_1');
PROMPT START upgrading WITH 2110.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

-- ***** OWNERSHIP_TRANSFER_REASON_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_2');
PROMPT Create OWNERSHIP_TRANSFER_REASON_TAB and constraints.

DECLARE
   table_name_ VARCHAR2(30) := 'OWNERSHIP_TRANSFER_REASON_TAB';
   index_name_ VARCHAR2(30) := 'OWNERSHIP_TRANSFER_REASON_PK';
   index_rk_   VARCHAR2(30) := 'OWNERSHIP_TRANSFER_REASON_RK';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSFER_REASON_ID', 'VARCHAR2(50)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION'       , 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION'        , 'DATE',          'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY'            , 'VARCHAR2(50)',  'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE'          , 'VARCHAR2(20)',  'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSFER_REASON_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_rk_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** OWNERSHIP_TRANSFER_REASON_TAB End *****

-- ***** COMPANY_INVENT_INFO_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_3');
PROMPT Add columns OWNRSHP_TRANS_REASON_MAND and OWNRSHP_TRANS_REASON_MTR to COMPANY_INVENT_INFO_TAB

DECLARE
   table_name_  VARCHAR2(30) := 'COMPANY_INVENT_INFO_TAB';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OWNRSHP_TRANS_REASON_MAND', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'OWNRSHP_TRANS_REASON_MTR',  'VARCHAR2(50)',  'Y');
   -- gelr:italy_intrastat, start
   Database_SYS.Set_Table_Column(columns_, 'NEXT_IT_INTRASTAT_FILE_NO', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERVICE_STATISTICAL_CODE',  'VARCHAR2(15)', 'Y');
   -- gelr:italy_intrastat, end
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_4');
PROMPT Adding columns to COMPANY_INVENT_INFO_TAB
DECLARE
   table_name_    VARCHAR2(30) := 'COMPANY_INVENT_INFO_TAB';
   column_        Database_SYS.ColRec;   
BEGIN   

   column_ := Database_SYS.Set_Column_Values ('AUTO_UPDATE_DATE_APPLIED', 'VARCHAR2(20)', 'N','''NO_UPDATE''',keep_default_ => 'N');
   Database_SYS.Alter_Table_Column ( table_name_, 'A', column_, TRUE);
END;                                                                       
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_5');
PROMPT Adding column ORDER_PROPOSAL_TRIGGER to table COMPANY_INVENT_INFO_TAB and make it a mandatory column.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ORDER_PROPOSAL_TRIGGER', 'VARCHAR2(30)', 'N', '''STOCK BELOW ORDER POINT''', keep_default_ => 'N' );
   Database_SYS.Alter_Table_Column('COMPANY_INVENT_INFO_TAB', 'A', column_, TRUE);     
END;
/

-- ***** COMPANY_INVENT_INFO_TAB End *****
-- ***** INVENTORY_TRANSACTION_HIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_6');
PROMPT Add column OWNERSHIP_TRANSFER_REASON_ID to INVENTORY_TRANSACTION_HIST_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   columns_    Database_SYS.ColumnTabType;   
BEGIN   
   Database_SYS.Reset_Column_Table(columns_);   
   Database_SYS.Set_Table_Column(columns_, 'OWNERSHIP_TRANSFER_REASON_ID', 'VARCHAR2(50)', 'Y');   
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);   
END;
/

-- ***** INVENTORY_TRANSACTION_HIST_TAB End *****

-- ***** INVENTORY_PART_IN_TRANSIT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_7');
PROMPT Adding COLUMNS DELIVERING_WAREHOUSE_ID, RECEIVING_WAREHOUSE_ID, ACTIVITY_SEQ, PART_OWNERSHIP, OWNING_CUSTOMER_NO, OWNING_VENDOR_NO, DELIV_NO, SHIPMENT_ID, SHIPMENT_LINE_NO,  
PROMPT RECEIVING_SOURCE_REF1, RECEIVING_SOURCE_REF2, RECEIVING_SOURCE_REF3, RECEIVING_SOURCE_REF4, RECEIVING_SOURCE_REF_TYPE to INVENTORY_PART_IN_TRANSIT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DELIVERING_WAREHOUSE_ID', 'VARCHAR2(15)', 'N', '''*''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RECEIVING_WAREHOUSE_ID', 'VARCHAR2(15)', 'N', '''*''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ACTIVITY_SEQ', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_OWNERSHIP', 'VARCHAR2(20)', 'N', '''COMPANY OWNED''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('OWNING_CUSTOMER_NO', 'VARCHAR2(20)', 'N', '''*''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('OWNING_VENDOR_NO', 'VARCHAR2(20)', 'N', '''*''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DELIV_NO', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_LINE_NO', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RECEIVING_SOURCE_REF1', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RECEIVING_SOURCE_REF2', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RECEIVING_SOURCE_REF3', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RECEIVING_SOURCE_REF4', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RECEIVING_SOURCE_REF_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_8');
PROMPT Recreating the primary key constraint INVENTORY_PART_IN_TRANSIT_PK including DELIVERING_WAREHOUSE_ID and RECEIVING_WAREHOUSE_ID
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_PK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DELIVERING_CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERING_WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVING_WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'PART_OWNERSHIP');
   Database_SYS.Set_Table_Column(columns_, 'OWNING_CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_, 'OWNING_VENDOR_NO');
   Database_SYS.Set_Table_Column(columns_, 'DELIV_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_LINE_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENTORY_PART_IN_TRANSIT_TAB End *****
  
-- ***** DELIVERY_REASON_TAB Begin *****

-- gelr:warehouse_journal, begin
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_9');
PROMPT Creating table DELIVERY_REASON_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'DELIVERY_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY',             'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_REASON_ID',  'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION',         'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',          'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',              'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_10');
PROMPT Creating constraint DELIVERY_REASON_PK
DECLARE
   index_name_ VARCHAR2(30) := 'DELIVERY_REASON_PK';
   table_name_ VARCHAR2(30) := 'DELIVERY_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_REASON_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_11');
PROMPT Creating constraint DELIVERY_REASON_RK
DECLARE
   index_name_ VARCHAR2(30) := 'DELIVERY_REASON_RK';
   table_name_ VARCHAR2(30) := 'DELIVERY_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_12');
PROMPT Adding DELIVERY_REASON_ID, ALT_DEL_NOTE_NO and DEL_NOTE_DATE to INVENTORY_TRANSACTION_HIST_TAB
DECLARE
   table_name_    VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';         
   columns_       Database_SYS.ColumnTabType;
BEGIN
   -- gelr:warehouse_journal, begin
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_REASON_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_DEL_NOTE_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEL_NOTE_DATE', 'DATE', 'Y');   
   -- gelr:warehouse_journal, end
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);         
END;
/
-- ***** DELIVERY_REASON_TAB End *****

--*************WAREHOUSE_JOURNAL_TAB Start*************

-- gelr:warehouse_journal, start

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_13');
PROMPT Adding table WAREHOUSE_JOURNAL_TAB
DECLARE
	table_name_ VARCHAR2(30) := 'WAREHOUSE_JOURNAL_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'COMPANY',                       'VARCHAR2(20)',  'N');
	Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_YEAR',               'NUMBER',         'N');
	Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_PERIOD',             'NUMBER',         'N');
	Database_SYS.Set_Table_Column(columns_, 'START_BALANCE',                 'NUMBER',         'N');
	Database_SYS.Set_Table_Column(columns_, 'END_BALANCE',                   'NUMBER',         'N');
	Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID',                'NUMBER',         'N');
	Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_ID',                 'NUMBER',         'Y');
	Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_CODE',              'VARCHAR2(10)',   'N');
	Database_SYS.Set_Table_Column(columns_, 'PART_NO',                       'VARCHAR2(25)',   'N');
	Database_SYS.Set_Table_Column(columns_, 'CONTRACT',                      'VARCHAR2(5)',    'N');
	Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',              'VARCHAR2(50)',   'N');
	Database_SYS.Set_Table_Column(columns_, 'DIRECTION',                     'VARCHAR2(1)',    'N');
	Database_SYS.Set_Table_Column(columns_, 'QUANTITY',                      'NUMBER',         'N');
	Database_SYS.Set_Table_Column(columns_, 'CATCH_DIRECTION',               'VARCHAR2(1)',    'Y');
	Database_SYS.Set_Table_Column(columns_, 'CATCH_QUANTITY',                'NUMBER',         'Y');
	Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',                   'VARCHAR2(35)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP',                'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',                  'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',                     'VARCHAR2(50)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'CONDITION_CODE',                'VARCHAR2(10)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',               'VARCHAR2(15)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',                 'VARCHAR2(6)',    'Y');
	Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE',               'DATE',           'Y');
	Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1',                   'VARCHAR2(50)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2',                   'VARCHAR2(50)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3',                   'VARCHAR2(50)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4',                   'VARCHAR2(50)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5',                   'VARCHAR2(50)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE',               'VARCHAR2(50)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED',                  'DATE',           'N');
	Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_CREATED',             'DATE',           'Y');
	Database_SYS.Set_Table_Column(columns_, 'SOURCE',                        'VARCHAR2(2000)', 'Y');
	Database_SYS.Set_Table_Column(columns_, 'USERID',                        'VARCHAR2(30)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'DATE_APPLIED',                  'DATE',           'N');
	Database_SYS.Set_Table_Column(columns_, 'PARTSTAT_FLAG',                 'VARCHAR2(1)',    'Y');
	Database_SYS.Set_Table_Column(columns_, 'VALUESTAT_FLAG',                'VARCHAR2(1)',    'Y');
	Database_SYS.Set_Table_Column(columns_, 'REJECT_CODE',                   'VARCHAR2(8)',    'Y');
	Database_SYS.Set_Table_Column(columns_, 'PART_OWNERSHIP',                'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'OWNING_CUSTOMER_NO',            'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'OWNING_VENDOR_NO',              'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'PREVIOUS_PART_OWNERSHIP',       'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'PREVIOUS_OWNING_CUST_NO',       'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'PREVIOUS_OWNING_VENDOR_NO',     'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID',                    'VARCHAR2(10)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',                  'NUMBER',         'Y');
	Database_SYS.Set_Table_Column(columns_, 'REPORT_EARNED_VALUE',           'VARCHAR2(5)',    'Y');
	Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_REPORT_ID',         'VARCHAR2(30)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'MODIFY_DATE_APPLIED_DATE',      'DATE',           'Y');
	Database_SYS.Set_Table_Column(columns_, 'MODIFY_DATE_APPLIED_USER',      'VARCHAR2(30)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_REASON_ID',            'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'ALT_DEL_NOTE_NO',               'VARCHAR2(20)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'DEL_NOTE_DATE',                 'DATE',           'Y');
	Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                    'DATE',           'N');
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                        'VARCHAR2(50)',   'N', 'sys_guid()');
	Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_14');
PROMPT Adding constraints for WAREHOUSE_JOURNAL_TAB
DECLARE
	index_name_ VARCHAR2(30) := 'WAREHOUSE_JOURNAL_PK';
	table_name_ VARCHAR2(30) := 'WAREHOUSE_JOURNAL_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
	index_name_ VARCHAR2(30) := 'WAREHOUSE_JOURNAL_RK';
	table_name_ VARCHAR2(30) := 'WAREHOUSE_JOURNAL_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- gelr:warehouse_journal, end

--*************WAREHOUSE_JOURNAL_TAB End*************

--*************WAREHOUSE_BAY_BIN_TAB Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_15');
PROMPT Created the Index WAREHOUSE_BAY_BIN_UX1. 
DECLARE
   table_name_        VARCHAR2(30) := 'WAREHOUSE_BAY_BIN_TAB';   
   index_name_        VARCHAR2(30) := 'WAREHOUSE_BAY_BIN_UX1';
   columns_           Database_SYS.ColumnTabType;
BEGIN 
   Database_SYS.Reset_Column_Table (columns_);
   Database_SYS.Set_Table_Column (columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column (columns_, 'CONTRACT');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);  
END;
/
--*************WAREHOUSE_BAY_BIN_TAB End*************


--*************WAREHOUSE_TASK_TAB Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_16');
PROMPT All pallet related task type records will be updated to non pallet related task types in WAREHOUSE_TASK_TAB

DECLARE 
BEGIN   
      UPDATE warehouse_task_tab
         SET task_type = CASE task_type
                            WHEN 'CUSTOMER ORDER PALLET PICK LIST' THEN 'CUSTOMER ORDER PICK LIST'
                            WHEN 'PALLET TRANSPORT TASK'           THEN 'TRANSPORT TASK'
                            ELSE task_type
                         END
      WHERE task_type IN ('CUSTOMER ORDER PALLET PICK LIST', 'PALLET TRANSPORT TASK');
      COMMIT;

      DELETE warehouse_worker_grp_task_tab
      WHERE task_type IN ('CUSTOMER ORDER PALLET PICK LIST', 'PALLET TRANSPORT TASK');
      COMMIT;

      DELETE warehouse_task_type_setup_tab
      WHERE task_type IN ('CUSTOMER ORDER PALLET PICK LIST', 'PALLET TRANSPORT TASK');
      COMMIT;

      DELETE warehouse_worker_task_type_tab
      WHERE task_type IN ('CUSTOMER ORDER PALLET PICK LIST', 'PALLET TRANSPORT TASK');
      COMMIT;
  
END;
/
--*************WAREHOUSE_TASK_TAB End*************

--*************SSCC_BASIC_DATA_TAB Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_17');
PROMPT Increasing the length of the column COMPANY_PREFIX of SSCC_BASIC_DATA_TAB.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('COMPANY_PREFIX', 'VARCHAR2(12)');
   Database_SYS.Alter_Table_Column('SSCC_BASIC_DATA_TAB', 'M', column_, TRUE);      
END;
/
--*************SSCC_BASIC_DATA_TAB End*************

--*************SSCC_HANDLING_UNIT_TYPE_TAB Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_18');
PROMPT Increasing the length of the column COMPANY_PREFIX of SSCC_HANDLING_UNIT_TYPE_TAB.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN     
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('COMPANY_PREFIX', 'VARCHAR2(12)');
   Database_SYS.Alter_Table_Column('SSCC_HANDLING_UNIT_TYPE_TAB', 'M', column_, TRUE);     
END;
/
--*************SSCC_HANDLING_UNIT_TYPE_TAB End*************

--*************INV_PART_AVAIL_SUM_QTY_TMP Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_19');
PROMPT Creating TABLE INV_PART_AVAIL_SUM_QTY_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'INV_PART_AVAIL_SUM_QTY_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN       
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'SNAPSHOT_ID',                    'NUMBER',       'N');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT',                       'VARCHAR2(5)',  'Y');
      Database_SYS.Set_Table_Column(columns_, 'PART_NO',                        'VARCHAR2(25)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',               'VARCHAR2(50)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID',                     'VARCHAR2(10)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'ONHAND_QTY',                     'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'IN_TRANSIT_QTY',                 'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'USABLE_QTY',                     'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAILABLE_QTY',                  'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE',                  'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_NOT_RES',          'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_NOT_PEG',          'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_NOT_RES_PEG',      'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_PROC',             'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_NOT_RES_PROC',     'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_NOT_PEG_PROC',     'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_NOT_RES_PEG_PROC', 'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_CO',               'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'AVAIL_BALANCE_NOT_RES_CO',       'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'DIST_CALENDAR_ID',               'VARCHAR2(10)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'MANUF_CALENDAR_ID',              'VARCHAR2(10)', 'Y');
      Database_SYS.Set_Table_Column(columns_, 'SITE_DATE',                      'DATE',         'Y');
      Database_SYS.Set_Table_Column(columns_, 'PICKING_LEADTIME',               'NUMBER',       'Y');
      Database_SYS.Set_Table_Column(columns_, 'STOP_ANALYSIS_DATE',             'DATE',         'Y');
      Database_SYS.Set_Table_Column(columns_, 'STOP_ANALYSIS_DATE_EXP',         'DATE',         'Y');
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                     'DATE',         'N');
      Database_SYS.Create_Or_Replace_Table (table_name_, columns_, '&IFSAPP_DATA');  
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_20');
PROMPT Creating indexes for TABLE INV_PART_AVAIL_SUM_QTY_TMP
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INV_PART_AVAIL_SUM_QTY_TMP';
   index_name_ VARCHAR2(30) := 'INV_PART_AVAIL_SUM_QTY_IX1';
BEGIN
	  Database_SYS.Reset_Column_Table(columns_);
	  Database_SYS.Set_Table_Column(columns_, 'SNAPSHOT_ID');
	  Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX'); 
END;
/

--*************INV_PART_AVAIL_SUM_QTY_TMP End*************

--*************STORAGE_ZONE_DETAIL_TAB Start*************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_21');
PROMPT Inceasing length of the SQL_WHERE_EXPRESSION Column in STORAGE_ZONE_DETAIL_TAB
DECLARE
   table_name_    VARCHAR2(30) := 'STORAGE_ZONE_DETAIL_TAB';
   column_        Database_SYS.ColRec;
BEGIN
	Database_SYS.Reset_Column(column_);
    column_ := Database_SYS.Set_Column_Values('SQL_WHERE_EXPRESSION', 'VARCHAR2(4000)', 'N');
    Database_SYS.Alter_Table_Column(table_name_, 'MODIFY', column_, true);
END;
/
--*************STORAGE_ZONE_DETAIL_TAB End*************

--*************INVENTORY_PART_IN_STOCK_TAB Start*************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_22');
PROMPT Adding LATEST_TRANSACTION_ID non-mandatory column to the INVENTORY_PART_IN_STOCK_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('LATEST_TRANSACTION_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);   
END;
/

--*************INVENTORY_PART_IN_STOCK_TAB End*************

--*************INTRASTAT_LINE_ALL_TMP Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_23');
PROMPT Creating TEMPORARY TABLE intrastat_line_all_tmp

DECLARE
   table_name_    VARCHAR2(30) := 'INTRASTAT_LINE_ALL_TMP';
   columns_       Database_SYS.ColumnTabType;
BEGIN         
   Database_SYS.Set_Table_Column(columns_, 'intrastat_id','NUMBER','Y');
   Database_SYS.Set_Table_Column(columns_, 'line_no','NUMBER' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'transaction_id','NUMBER','Y');
   Database_SYS.Set_Table_Column(columns_, 'transaction','VARCHAR2(10)','Y');
   Database_SYS.Set_Table_Column(columns_, 'order_type','VARCHAR2(20)','Y');                              
   Database_SYS.Set_Table_Column(columns_, 'contract','VARCHAR2(5)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'part_no','VARCHAR2(25)','Y');
   Database_SYS.Set_Table_Column(columns_, 'part_description','VARCHAR2(2000)','Y');
   Database_SYS.Set_Table_Column(columns_, 'configuration_id','VARCHAR2(50)','Y'); 
   Database_SYS.Set_Table_Column(columns_, 'lot_batch_no','VARCHAR2(20)','Y');
   Database_SYS.Set_Table_Column(columns_, 'serial_no','VARCHAR2(50)','Y');
   Database_SYS.Set_Table_Column(columns_, 'order_ref1','VARCHAR2(12)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'order_ref2','VARCHAR2(4)','Y');
   Database_SYS.Set_Table_Column(columns_, 'order_ref3','VARCHAR2(30)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'order_ref4','NUMBER','Y');
   Database_SYS.Set_Table_Column(columns_, 'inventory_direction','VARCHAR2(1)','Y');
   Database_SYS.Set_Table_Column(columns_, 'quantity','NUMBER','Y');
   Database_SYS.Set_Table_Column(columns_, 'qty_reversed','NUMBER','Y');
   Database_SYS.Set_Table_Column(columns_, 'unit_meas','VARCHAR2(10)','Y');
   Database_SYS.Set_Table_Column(columns_, 'reject_code','VARCHAR2(8)','Y');
   Database_SYS.Set_Table_Column(columns_, 'date_applied','DATE','Y');
   Database_SYS.Set_Table_Column(columns_, 'userid','VARCHAR2(30)','Y');
   Database_SYS.Set_Table_Column(columns_, 'net_unit_weight','NUMBER','Y');
   Database_SYS.Set_Table_Column(columns_, 'customs_stat_no','VARCHAR2(15)','Y');
   Database_SYS.Set_Table_Column(columns_, 'intrastat_alt_qty','NUMBER','Y');
   Database_SYS.Set_Table_Column(columns_, 'intrastat_alt_unit_meas','VARCHAR2(10)','Y');
   Database_SYS.Set_Table_Column(columns_, 'notc','VARCHAR2(2)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'intrastat_direction','VARCHAR2(20)','Y');
   Database_SYS.Set_Table_Column(columns_, 'country_of_origin','VARCHAR2(2)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'intrastat_origin','VARCHAR2(15)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'opposite_country','VARCHAR2(2)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'opponent_number','VARCHAR2(20)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'opponent_name', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'order_unit_price', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'unit_add_cost_amount', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'unit_charge_amount', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'mode_of_transport', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'invoice_serie', 'VARCHAR2(20)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'invoice_number', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'invoiced_unit_price', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'unit_add_cost_amount_inv', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'unit_charge_amount_inv', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'delivery_terms', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'triangulation', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'region_port', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'statistical_procedure', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'rowversion', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'rowstate', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'region_of_origin', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'county', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'return_reason', 'VARCHAR2(8)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'return_material_reason','VARCHAR2(10)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'rowkey','VARCHAR2(50)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'opponent_type', 'VARCHAR2(20)','Y');
   Database_SYS.Set_Table_Column(columns_, 'movement_code','VARCHAR2(2)','Y');
   Database_SYS.Set_Table_Column(columns_, 'unit_statistical_charge_diff', 'NUMBER' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'opponent_tax_id', 'VARCHAR2(50)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'del_terms_location', 'VARCHAR2(100)' ,'Y');
   Database_SYS.Set_Table_Column(columns_, 'place_of_delivery', 'NUMBER' ,'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/
--*************INTRASTAT_LINE_ALL_TMP End*************

--*************WAREHOUSE_TAB Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_24');
PROMPT ADD COLUMN GLOBAL_WAREHOUSE_ID in WAREHOUSE_TAB
DECLARE
   table_name_    VARCHAR2(30) := 'WAREHOUSE_TAB';
   column_name_   VARCHAR2(30) := 'GLOBAL_WAREHOUSE_ID';
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values(column_name_, 'VARCHAR2(50)');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_25');
PROMPT ADD INDEX WAREHOUSE_UX1 FOR COLUMN GLOBAL_WAREHOUSE_ID IN WAREHOUSE_TAB
DECLARE
   table_name_    VARCHAR2(30) := 'WAREHOUSE_TAB';
   column_name_   VARCHAR2(30) := 'GLOBAL_WAREHOUSE_ID';
   index_name_    VARCHAR2(30) := 'WAREHOUSE_UX1';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table (columns_);
   Database_SYS.Set_Table_Column(columns_, 'GLOBAL_WAREHOUSE_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);       
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_26');
PROMPT update GLOBAL_WAREHOUSE_ID vlaues in WAREHOUSE_TAB
DECLARE
   table_name_    VARCHAR2(30) := 'WAREHOUSE_TAB';
   column_name_   VARCHAR2(30) := 'GLOBAL_WAREHOUSE_ID';
   separator_     VARCHAR2(10);

   CURSOR get_warehouses IS
   SELECT contract, warehouse_id, global_warehouse_id
      FROM warehouse_tab
      WHERE global_warehouse_id IS NULL
      FOR UPDATE;
BEGIN
   FOR rec_ IN get_warehouses LOOP
	 separator_ := '-';
	 LOOP
		BEGIN
		   UPDATE warehouse_tab 
			  SET global_warehouse_id = rec_.contract||separator_||UPPER(rec_.warehouse_id)
			  WHERE contract = rec_.contract 
			  AND   warehouse_id = rec_.warehouse_id;
		   EXIT;
		EXCEPTION
		   WHEN dup_val_on_index THEN
			  separator_ := separator_ || '-';
		END;
	 END LOOP;
   END LOOP;
   COMMIT;      
    
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_27');
PROMPT SET COLUMN GLOBAL_WAREHOUSE_ID TO not-nullable COLUMN IN WAREHOUSE_TAB
DECLARE
   table_name_    VARCHAR2(30) := 'WAREHOUSE_TAB';
   column_name_   VARCHAR2(30) := 'GLOBAL_WAREHOUSE_ID';
   columns_       Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table (columns_);
   Database_SYS.Set_Table_Column(columns_, 'GLOBAL_WAREHOUSE_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);     
END;
/

--*************WAREHOUSE_TAB End*************

--*************INV_LOCATION_CAPABILITY_TMP Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_28');
PROMPT Creating 'INV_LOCATION_CAPABILITY_TMP' temporary table.

DECLARE
   table_name_ VARCHAR2(30) := 'INV_LOCATION_CAPABILITY_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_CAPABILITY_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',           'VARCHAR2(35)', 'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);   
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_29');
PROMPT Creating 'INV_LOCATION_CAPABILITY_IX1' index on 'INV_LOCATION_CAPABILITY_TMP' temporary table.

DECLARE
   index_name_ VARCHAR2(30) := 'INV_LOCATION_CAPABILITY_IX1';
   table_name_ VARCHAR2(30) := 'INV_LOCATION_CAPABILITY_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_CAPABILITY_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--*************INV_LOCATION_CAPABILITY_TMP End*************

--*************ASSORTMENT_STRUCTURE_TAB Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_30');
PROMPT Adding column PROC_CATEGORY_ASSORTMENT into the table ASSORTMENT_STRUCTURE_TAB.
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PROC_CATEGORY_ASSORTMENT', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('ASSORTMENT_STRUCTURE_TAB', 'A', column_, TRUE);
END;
/

--*************ASSORTMENT_STRUCTURE_TAB End*************

--*************TRANSPORT_DELIVERY_NOTE_TAB Start*************

-- gelr:transport_delivery_note, begin

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_31');
PROMPT Adding table 'TRANSPORT_DELIVERY_NOTE_TAB';
DECLARE
	table_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_NOTE_ID',          'VARCHAR2(15)',  'N');
	Database_SYS.Set_Table_Column(columns_, 'ALT_DELIVERY_NOTE_ID',      'VARCHAR2(50)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'CONTRACT',                  'VARCHAR2(5)',   'N');
	Database_SYS.Set_Table_Column(columns_, 'AUTHORIZE_CODE',            'VARCHAR2(20)',  'N');
	Database_SYS.Set_Table_Column(columns_, 'RECIPIENT_COMPANY',         'VARCHAR2(20)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'VENDOR_NO',                 'VARCHAR2(20)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'FORWARD_AGENT_ID',          'VARCHAR2(20)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_TERMS',            'VARCHAR2(5)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_VIA_CODE',             'VARCHAR2(3)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_REASON_ID',        'VARCHAR2(20)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'CREATE_DATE',               'DATE',          'N');
	Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_DATE',            'DATE',          'Y');
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_ADDRESS_NO',       'VARCHAR2(50)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SINGLE_OCCURRENCE_ADDRESS', 'VARCHAR2(20)',  'N');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS_NO',           'VARCHAR2(50)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS_NAME',         'VARCHAR2(100)', 'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS1',             'VARCHAR2(35)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS2',             'VARCHAR2(35)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_ZIP_CODE',             'VARCHAR2(35)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_CITY',                 'VARCHAR2(35)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_STATE',                'VARCHAR2(35)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_COUNTY',               'VARCHAR2(35)',  'Y');
	Database_SYS.Set_Table_Column(columns_, 'SHIP_COUNTRY_CODE',         'VARCHAR2(2)',   'Y');
	Database_SYS.Set_Table_Column(columns_, 'GROSS_WEIGHT',              'NUMBER',        'Y');
	Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT',                'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'VOLUME',                    'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'LABEL_TEXT',                'VARCHAR2(2000)','Y');
	Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                'DATE',          'N');
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                    'VARCHAR2(50)',  'N', 'sys_guid()');
	Database_SYS.Set_Table_Column(columns_, 'ROWSTATE',                  'VARCHAR2(20)',  'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_32');
PROMPT Adding constraints for TRANSPORT_DELIVERY_NOTE_TAB
DECLARE
	index_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_PK';
	table_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_NOTE_ID');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
	index_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_RK';
	table_name_ VARCHAR2(30) := 'TRANSPORT_DELIVERY_NOTE_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

--*************TRANSPORT_DELIVERY_NOTE_TAB end*************

--*************TRANSPORT_DELIV_NOTE_LINE_TAB begin*************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_33');
PROMPT Adding table TRANSPORT_DELIV_NOTE_LINE_TAB
DECLARE
	table_name_ VARCHAR2(30) := 'TRANSPORT_DELIV_NOTE_LINE_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_NOTE_ID',       'VARCHAR2(15)', 'N');
	Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID',   'NUMBER',       'N');
	Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_TYPE', 'VARCHAR2(20)', 'N');
	Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',       'DATE',         'N');
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY',           'VARCHAR2(50)', 'N', 'sys_guid()');
	Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_34');
PROMPT Adding constraints for TRANSPORT_DELIV_NOTE_LINE_TAB
DECLARE
	index_name_ VARCHAR2(30) := 'TRANSPORT_DELIV_NOTE_LINE_PK';
	table_name_ VARCHAR2(30) := 'TRANSPORT_DELIV_NOTE_LINE_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'DELIVERY_NOTE_ID');
	Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
	index_name_ VARCHAR2(30) := 'TRANSPORT_DELIV_NOTE_LINE_RK';
	table_name_ VARCHAR2(30) := 'TRANSPORT_DELIV_NOTE_LINE_TAB';
	columns_    Database_SYS.ColumnTabType;
BEGIN
	Database_SYS.Reset_Column_Table(columns_);
	Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
	Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- gelr:transport_delivery_note, end

--*************TRANSPORT_DELIV_NOTE_LINE_TAB end*************

-- ***** INVENTORY_PART_RESERVATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_35');
PROMPT Adding new COLUMN PICK_BY_CHOICE_BLOCKED to INVENTORY_PART_RESERVATION_TAB 

DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PICK_BY_CHOICE_BLOCKED', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/
-- ***** INVENTORY_PART_RESERVATION_TAB End *****

-- gelr:italy_intrastat, start
-- **************** INTRASTAT_LINE_TAB : Start *****************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_36');
PROMPT Adding italy intrastat functionality related columns to INTRASTAT_LINE_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INTRASTAT_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_DATE',                 'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERVICE_STATISTICAL_CODE',     'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERVICE_WAY',                  'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERVICE_PAYMENT_WAY',          'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPPOSITE_COUNTRY_CURR_CODE',   'VARCHAR2(3)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPPOSITE_COUNTRY_CURR_AMT',    'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADJUST_TO_PREV_INTRASTAT',     'VARCHAR2(5)',  'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'PREV_INTRASTAT_INVOIC_DATE',   'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADVANCE_TRANSACTION',          'VARCHAR2(5)',  'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'PAYMENT_METHOD',               'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REFERENCE_INVOICE_SERIE',      'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REFERENCE_INVOICE_NUMBER',     'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REFERENCE_INVOICE_DATE',       'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'PROTOCOL_NO',                  'NUMBER',       'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- **************** INTRASTAT_LINE_TAB : End *****************

-- **************** MPCCOM_TRANS_CODE_COUNTRY_TAB : Start ****************

DECLARE
   table_name_ VARCHAR2(30) := 'MPCCOM_TRANS_CODE_COUNTRY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_CODE',      'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COUNTRY_CODE',          'VARCHAR2(2)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'INCLUDED',              'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'INTRASTAT_DIRECTION',   'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOTC',                  'VARCHAR2(2)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'INTRASTAT_AMOUNT_SIGN', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',            'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'MPCCOM_TRANS_CODE_COUNTRY_PK';
   table_name_ VARCHAR2(30) := 'MPCCOM_TRANS_CODE_COUNTRY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_CODE');
   Database_SYS.Set_Table_Column(columns_, 'COUNTRY_CODE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'MPCCOM_TRANS_CODE_COUNTRY_RK';
   table_name_ VARCHAR2(30) := 'MPCCOM_TRANS_CODE_COUNTRY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- **************** MPCCOM_TRANS_CODE_COUNTRY_TAB : End ****************
-- gelr:italy_intrastat, end

-- **************** INTRASTAT_TAB : Start ****************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_37');
PROMPT ADDing new COLUMN Consolidation_flag TO Intrastat_Tab.

DECLARE
   table_name_    VARCHAR2(30) := 'INTRASTAT_TAB';
   column_        Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CONSOLIDATION_FLAG', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');      
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );        
END;
/

-- **************** INTRASTAT_TAB : End ****************

-- **************** SITE_INVENT_INFO_TAB : Start ****************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_38');
PROMPT Adding not nullable column EXEC_TRANSP_TASK_BACKGROUND to SITE_INVENT_INFO_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('EXEC_TRANSP_TASK_BACKGROUND', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_39');
PROMPT Move necessary data to new EXEC_TRANSP_TASK_BACKGROUND column.
DECLARE
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
   column_     Database_SYS.ColRec;
   stmt_       VARCHAR2(2000);
BEGIN
   -- Note: The condition is to avoid errors if the column doesn't exist in the customer environment   
   IF (Database_SYS.Column_Exist(table_name_, 'EXECUTE_TRANSPORT_ONLINE')) THEN         
      stmt_ := 'UPDATE site_invent_info_tab
                SET   exec_transp_task_background = ''TRUE''
                WHERE execute_transport_online    = ''FALSE''';
         
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_40');
PROMPT Making EXECUTE_TRANSPORT_ONLINE COLUMN nullable if EXISTS.
DECLARE
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
   column_     Database_SYS.ColRec;
   stmt_       VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'EXECUTE_TRANSPORT_ONLINE')) THEN         
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('EXECUTE_TRANSPORT_ONLINE', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_41');
PROMPT Adding nullable column MAX_COUNTING_LINES to SITE_INVENT_INFO_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MAX_COUNTING_LINES', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- **************** SITE_INVENT_INFO_TAB : End ****************

-- **************** HANDLING_UNIT_HISTORY_TAB : Start ****************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_42');
PROMPT Adding nullable NUMBER column MANUAL_TARE_WEIGHT to HANDLING_UNIT_HISTORY_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MANUAL_TARE_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_43');
PROMPT Adding number column OPERATIVE_UNIT_TARE_WEIGHT to table HANDLING_UNIT_HISTORY_TAB.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('OPERATIVE_UNIT_TARE_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('HANDLING_UNIT_HISTORY_TAB', 'A', column_, TRUE);
END;
/
-- **************** HANDLING_UNIT_HISTORY_TAB : End ****************

-- **************** HANDLING_UNIT_TAB : Start ****************

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_44');
PROMPT Adding nullable NUMBER column MANUAL_TARE_WEIGHT to HANDLING_UNIT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MANUAL_TARE_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_45');
PROMPT Updating IS_IN_STOCK column for handling units having value for LOCATION_NO
BEGIN  
   UPDATE handling_unit_tab
      SET is_in_stock = 'TRUE'
   WHERE is_in_stock = 'FALSE'
      AND location_no IS NOT NULL;
   COMMIT;    
END;
/

-- **************** HANDLING_UNIT_TAB : End ****************

-- **************** SPECIAL_CODE_OF_MOVEMENT_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_46');
PROMPT Removing ZV entries from the special_code_of_movement_tab. 
BEGIN
   DELETE
      FROM special_code_of_movement_tab
   WHERE country_code  = 'CZ'
      AND movement_code = 'ZV';
   COMMIT;       
END;
/
-- **************** SPECIAL_CODE_OF_MOVEMENT_TAB : End ****************

-- **************** TRANSPORT_TASK_LINE_TAB : Start ****************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_47');
PROMPT Update work order references as work task references in transport_task_line_tab .

UPDATE TRANSPORT_TASK_LINE_TAB
SET ORDER_REF1 = ORDER_REF2,
    ORDER_REF2 = ORDER_REF3,
    ORDER_REF3 = ORDER_REF4,
    ORDER_REF4 = TO_CHAR(NULL),
    ORDER_TYPE = 'WORK_TASK' 
WHERE ORDER_TYPE = 'WORK ORDER'
AND TRANSPORT_TASK_STATUS IN ('CREATED','PICKED')
AND ORDER_REF2 != '*';

COMMIT;
-- **************** TRANSPORT_TASK_LINE_TAB : End ****************



---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_48');
PROMPT Renaming obsolete tables CREATE_MATERIAL_REQ_T1, CREATE_MATERIAL_REQ_T2, CREATE_MATERIAL_REQ_T3 AND CREATE_MATERIAL_REQ_T4
DECLARE
BEGIN
   Database_SYS.Rename_Table('CREATE_MATERIAL_REQ_T1', 'CREATE_MATERIAL_REQ_T1_1500', TRUE);
   Database_SYS.Rename_Table('CREATE_MATERIAL_REQ_T2', 'CREATE_MATERIAL_REQ_T2_1500', TRUE);
   Database_SYS.Rename_Table('CREATE_MATERIAL_REQ_T3', 'CREATE_MATERIAL_REQ_T3_1500', TRUE);
   Database_SYS.Rename_Table('CREATE_MATERIAL_REQ_T4', 'CREATE_MATERIAL_REQ_T4_1500', TRUE);

END;
/


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_49');
PROMPT Removing obsolete views INVENTORY_PART_IN_TRANSIT_DEL, SALES_QUOTATION_LINE_MS2, PROMISE_INVENTORY_SIM, MAINT_TASK_OPER_MATR_ALLOC1, Handling_Unit_Top_Shipment_Pub and PACKING_INSTRUCTION_LOV. 

BEGIN
   Database_SYS.Remove_View('INVENTORY_PART_IN_TRANSIT_DEL', TRUE);
   Database_SYS.Remove_View('SALES_QUOTATION_LINE_MS2',    TRUE);
   Database_SYS.Remove_View('PROMISE_INVENTORY_SIM',       TRUE);
   Database_SYS.Remove_View('MAINT_TASK_OPER_MATR_ALLOC1', TRUE);
   Database_SYS.Remove_View('Handling_Unit_Top_Shipment_Pub', TRUE);
   Database_SYS.Remove_View('PACKING_INSTRUCTION_LOV', TRUE);

END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------

--*************WAREHOUSE_BAY_BIN_TAB Start*************
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_50');
PROMPT Remove constraint with mismatching index WAREHOUSE_BAY_BIN_UIX. 
DECLARE
   table_name_        VARCHAR2(30) := 'WAREHOUSE_BAY_BIN_TAB';
   constraint_name_   VARCHAR2(30) := 'WAREHOUSE_BAY_BIN_UIX';
BEGIN       
      Database_SYS.Remove_Constraints(table_name_, constraint_name_, TRUE);       
END;
/
--*************WAREHOUSE_BAY_BIN_TAB End*************
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TRIGGERS  ----------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_51');
PROMPT Removing obsolete triggers INVENTORY_PART_SDD3, INVENTORY_PART_SDI3 and INVENTORY_PART_SDU3
BEGIN   
      Database_SYS.Remove_Trigger('INVENTORY_PART_SDD3', TRUE);
      Database_SYS.Remove_Trigger('INVENTORY_PART_SDI3', TRUE);
      Database_SYS.Remove_Trigger('INVENTORY_PART_SDU3', TRUE);
      COMMIT;  
END;
/


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Timestamp_52');
PROMPT Upgrade statements IN FILE 2110.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','2110.upg','Done');
