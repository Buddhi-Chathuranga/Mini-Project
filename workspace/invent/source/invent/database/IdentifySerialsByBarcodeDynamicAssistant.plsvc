-----------------------------------------------------------------------------
--
--  Fragment:     IdentifySerialsByBarcodeDynamicAssistant
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181119  JaThlk  SCUXXW4-5506, Created.
-----------------------------------------------------------------------------

layer Core;


FUNCTION Validate_Barcode_Id___ (
   contract_        IN VARCHAR2,
   barcode_id_      IN NUMBER,
   part_no_         IN VARCHAR2,
   config_id_       IN VARCHAR2,
   lot_batch_no_    IN VARCHAR2,
   eng_chg_level_   IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   activity_seq_    IN NUMBER ) RETURN VARCHAR2
IS
   serial_no_     VARCHAR2(50);
BEGIN
   serial_no_ := Inventory_Part_Barcode_API.Get_Serial_No(contract_, barcode_id_, part_no_, config_id_, lot_batch_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_);
   RETURN serial_no_;
END Validate_Barcode_Id___;


FUNCTION Post_Answer_With_Result___ (
   contract_                IN VARCHAR2,
   data_item_value_         IN VARCHAR2,
   part_no_                 IN VARCHAR2,
   config_id_               IN VARCHAR2,
   lot_batch_no_            IN VARCHAR2,
   eng_chg_level_           IN VARCHAR2,
   waiv_dev_rej_no_         IN VARCHAR2,
   activity_seq_            IN VARCHAR2,
   session_id_str_          IN VARCHAR2,
   parent_session_id_str_   IN VARCHAR2) RETURN Fnd_Dynamic_Next_Step_Rec
IS
   next_step_                 Fnd_Dynamic_Next_Step_Rec;
   session_id_                NUMBER;
   newrec_                    temporary_part_tracking_tab%ROWTYPE;
   parent_session_id_         NUMBER;
   serial_no_                 VARCHAR2(50);   
BEGIN

   session_id_ := TO_NUMBER(session_id_str_); 
   parent_session_id_ := TO_NUMBER(parent_session_id_str_);
   
   IF data_item_value_ IS NOT NULL AND Is_Barcode_Id_Number___(data_item_value_) = 'TRUE' THEN
      serial_no_ := Validate_Barcode_Id___(contract_, to_number(data_item_value_), part_no_, config_id_, lot_batch_no_, eng_chg_level_, waiv_dev_rej_no_, to_number(activity_seq_));
      IF serial_no_ IS NOT NULL THEN         
         Temporary_Part_Tracking_API.New(parent_session_id_, serial_no_, NULL , contract_, part_no_, '');
         newrec_.rowversion := sysdate;
         newrec_.rowkey := sys_guid();
         newrec_.session_id := session_id_;
         newrec_.serial_no := serial_no_;
         INSERT
         INTO temporary_part_tracking_tab
         VALUES newrec_;
         next_step_.default_value := 'DataItemValue:';
      ELSE
         next_step_.default_value := '${DataItemValue}';
      END IF;   
   END IF;
   next_step_.next_step := 1;

   RETURN next_step_;
END Post_Answer_With_Result___;


FUNCTION Generate_Process_Setup_Steps___(
   contract_              IN VARCHAR2,
   part_no_               IN VARCHAR2,
   config_id_             IN VARCHAR2,
   lot_batch_no_          IN VARCHAR2,
   eng_chg_level_         IN VARCHAR2,
   waiv_dev_rej_no_       IN VARCHAR2,
   activity_seq_          IN VARCHAR2,
   session_id_str_        IN VARCHAR2,
   parent_session_id_str_ IN VARCHAR2 ) RETURN Fnd_Dynamic_Assist_Setup_Rec
IS
   process_rec_   Fnd_Dynamic_Assist_Setup_Rec;
BEGIN

   process_rec_.label                  := 'Identify By Barcode';
   process_rec_.description            := 'Process : Identify Serials by barcode';
   process_rec_.init_meta_function     := 'GenerateInitCommands(SessionIdStr=''${SessionIdStr}'')';
   process_rec_.steps_meta_function    := 'GenerateProcessSteps(Contract=''${Contract}'',PartNo=''${PartNo}'',ConfigId=''${ConfigId}'',LotBatchNo=''${LotBatchNo}'',EngChgLevel=''${EngChgLevel}'',WaivDevRejNo=''${WaivDevRejNo}'',ActivitySeq=''${ActivitySeq}'',SessionIdStr=''${SessionIdStr}'',ParentSessionIdStr=''${ParentSessionIdStr}'')';
   process_rec_.number_of_steps        := 3;

   RETURN process_rec_;
END Generate_Process_Setup_Steps___;


FUNCTION Generate_Init_Commands___(
   session_id_str_ IN VARCHAR2 )  RETURN Fnd_Dynamic_Command_Def_Arr
IS
   init_command_arr_ Fnd_Dynamic_Command_Def_Arr := Fnd_Dynamic_Command_Def_Arr();
   init_cmd_         Fnd_Dynamic_Command_Def_Rec;
BEGIN

   init_command_arr_.extend();
   init_cmd_.method     := 'set';
   init_cmd_.assign     := 'SessionIdStr';
   init_cmd_.arg_name   := 'value';
   init_cmd_.arg_value  := session_id_str_;
   init_command_arr_(1) := init_cmd_;
   RETURN init_command_arr_;
END Generate_Init_Commands___;


FUNCTION Generate_Process_Steps___(
   contract_              IN VARCHAR2,
   part_no_               IN VARCHAR2,
   config_id_             IN VARCHAR2,
   lot_batch_no_          IN VARCHAR2,
   eng_chg_level_         IN VARCHAR2,
   waiv_dev_rej_no_       IN VARCHAR2,
   activity_seq_          IN VARCHAR2,
   session_id_str_        IN VARCHAR2,
   parent_session_id_str_ IN VARCHAR2 )  RETURN Fnd_Dynamic_Assist_Step_Arr
IS
   arr_             Fnd_Dynamic_Assist_Step_Arr := Fnd_Dynamic_Assist_Step_Arr();
   steps_           Fnd_Dynamic_Assist_Step_Rec;
   no_of_steps_     NUMBER := 1;
BEGIN
   WHILE no_of_steps_ < 3  LOOP
      steps_ := Generate_Step_Strucure___(no_of_steps_, arr_, contract_, part_no_, config_id_, lot_batch_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, session_id_str_, parent_session_id_str_);
      no_of_steps_ := no_of_steps_ + 1;   
   END LOOP;
   RETURN arr_;
END Generate_Process_Steps___;


FUNCTION Generate_Step_Strucure___ (
   step_count_            IN OUT NUMBER,
   arr_                   IN OUT Fnd_Dynamic_Assist_Step_Arr,
   contract_              IN     VARCHAR2,
   part_no_               IN     VARCHAR2,
   config_id_             IN     VARCHAR2,
   lot_batch_no_          IN     VARCHAR2,
   eng_chg_level_         IN     VARCHAR2,
   waiv_dev_rej_no_       IN     VARCHAR2,
   activity_seq_          IN     VARCHAR2,
   session_id_str_        IN     VARCHAR2,
   parent_session_id_str_ IN     VARCHAR2 ) RETURN Fnd_Dynamic_Assist_Step_Rec
IS
   steps_               Fnd_Dynamic_Assist_Step_Rec;
BEGIN
   steps_.label                  := 'Barcode ID:';
   steps_.step_label             := 'Press Next';
   steps_.description            := 'Description : My Desc';
   steps_.entity                 := 'TemporaryPartTracking';
   steps_.visible                := TRUE;
   steps_.name                   := 'Enter Value';
   steps_.bind_attribute         := 'DataItemValue';
   IF step_count_ = 2 THEN
      steps_.enabled             := FALSE;
   ELSE
      steps_.enabled             := TRUE;   
   END IF;
   steps_.save_action            := 'PostAnswerWithResult';
   steps_.save_action_parameters := 'Contract:${Contract},DataItemValue:${DataItemValue},PartNo:${PartNo},ConfigId:${ConfigId},LotBatchNo:${LotBatchNo},EngChgLevel:${EngChgLevel},WaivDevRejNo:${WaivDevRejNo},ActivitySeq:${ActivitySeq},SessionIdStr:${SessionIdStr},ParentSessionIdStr:${ParentSessionIdStr}';
   steps_.terminate_allowed      := TRUE;
   steps_.required               := TRUE;
   steps_.datatype               := 'TEXT';
   arr_.extend();
   arr_(step_count_) := steps_;
	RETURN steps_;
END Generate_Step_Strucure___;


FUNCTION Is_Barcode_Id_Number___(
   value_ IN  VARCHAR2) RETURN VARCHAR2
IS
   number_type_   NUMBER;   
BEGIN
   number_type_ := TO_NUMBER(value_);
   RETURN 'TRUE';
   EXCEPTION
      WHEN VALUE_ERROR THEN
      RETURN 'FALSE';
END Is_Barcode_Id_Number___;