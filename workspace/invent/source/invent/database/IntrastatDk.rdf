-----------------------------------------------------------------------------
-- 
--  Logical unit: Intrastat  
--
--  File:         IntrastatDK.rdf
--
--  Date    Sign    History
--  ------  ----    ---------------------------------------------------------
--  211207  Hahalk  Bug 161186(SC21R2-6469), Added field opponent_tax_id and country of origin for export reports.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  201008  OsAllk  SC2020R1-10267, Replaced Transaction_SYS.Logical_Unit_Is_Installed with Logical_Unit_Is_Active 
--                  to check component ACTIVE/INACTIVE instead of installability.
--  121016  PraWlk  Bug 105887, Removed SUBSTR to avoid length restriction of customs statistics number description. 
--  120913  NipKlk  Bug 102537, Used the Intrastat_Direction_API.Encode() method to get the db values from client value.
--  120821  RuLiLk  Enabled Custom Fields for report 'Intrastat Report Denmark'
--  110309  Bmekse  DF-917 Replaced calls to Company_Invoice_Info_API.Get_Vat_No with 
--                  Tax_Liability_Countries_API.Get_Tax_Id_Number.
--  090929  PraWlk  Bug 85516, Increased the length of cust_stat_no_des_ to 200. 
--  090529  SaWjlk  Bug 83173, Removed the prog text duplications.
--  080317  HoInlk  Bug 72069, Added missing "ifs_assert_safe" annotations.
--  060908  IsWilk  Removed the qrp entries.
--  060614  LeSvse  Bug 58779, Error found in SP1 work. Corrected xls file name. 
--  060509  DaZase  Bug 57442 Report Designer handling and Layout added.
--  051216  SuJalk  Changed VIEW_RPV to TABLE in COMMENT ON TABLE.
--  050921  NiDalk  Removed unused variables.
--  050906  JaBalk  Changed the SUBSTRB to SUBSTR and length of variable cust_stat_no_des_ to 35.
--  050107  DiVelk  Bug 48877, Converted value of 'intrastat_direction_' to uppercase.
--  040924  ChJalk Bug 46743, Modified the length of the variable cust_stat_no_des_ and assigned only the first 
--  040924         35 characters to the variable. 
--  040610  NaWilk Bug 44975, Modified FROM clause in view INTRASTAT_DK_REP.
--  040308  KaDilk Bug 42922, Round up the net_weight_ value to its upper limit,if 0<net_weight_< 1.
--  040301  GeKalk  Replaced substrb with substr for UNICODE modifications.
--  040202  IsWilk  Rewrote the DBMS_SQL to Native dynamic SQL for Unicode modification.
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  020322  DaZa  Bug fix 28308, added ABS on intrastat_alt_qty so we dont get "-x * -y results" when we multiply with the regular qty.
--  020320  CaSt  Bug 28679, Modified calculation of alternative_qty in cursor get_lines.
--  020217  IsAn  A4/Letter conversion.
--  260201  Indi  Created.
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = Intrastat
define PKG                = INTRASTAT_DK_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = INTRASTAT_DK_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Overview

define COMPANY_VAT_NO     = S1
define COMPANY_NAME       = S2
define REPORTING_PERIOD   = S3
define CREATION_DATE      = S4
define CURRENCY_CODE      = S5
define REPORT_TITLE       = S6
define REP_VAT_NO         = S7
define REP_BRANCH_NO      = S8
define REP_NAME           = S9
define COUNTRY_DEST       = S10
define NOTC               = S11
define CUST_STAT_NO       = S12
define CUST_STAT_NO_DESC  = S13
define BRANCH_NO          = S16
define COUNTRYIM          = S17

define NO_OF_LINES         = N1
define LINE_NO             = N2
define NET_WEIGHT          = N3
define ALT_QTY             = N4
define INV_VALUE           = N5
define STAT_VALUE          = N6
define TYPE                = N7
define INV_VAL_TOT         = N8
define OPPONENT_TAX_ID     = S18
define COUNTRY_OF_ORIGIN   = S19



-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6)   := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                ROW_NO,
       H.&COMPANY_VAT_NO                       COMPANY_VAT_NO,
       H.&COMPANY_NAME                         COMPANY_NAME,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&CREATION_DATE                        CREATION_DATE,
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&NO_OF_LINES                          NO_OF_LINES,
       H.&REPORT_TITLE                         REPORT_TITLE,      
       H.&BRANCH_NO                            BRANCH_NO,       
       H.&REP_VAT_NO                           REP_VAT_NO,
       H.&REP_BRANCH_NO                        REP_BRANCH_NO,
       H.&REP_NAME                             REP_NAME,   
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_DEST                         COUNTRY_DEST,           
       D.&NOTC                                 NOTC,
       D.&CUST_STAT_NO                         CUST_STAT_NO,
       D.&CUST_STAT_NO_DESC                    CUST_STAT_NO_DESC,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_QTY                              ALT_QTY,
       D.&INV_VALUE                            INV_VALUE,
       D.&STAT_VALUE                           STAT_VALUE,
       D.&TYPE                                 TYPE,
       H.&INV_VAL_TOT                          INV_VAL_TOT, 
       D.&COUNTRYIM                            COUNTRYIM,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY    = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..COMPANY_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Company Tax No :^ITEM_NAME=iCompanyVatNo^';
COMMENT ON COLUMN &VIEW..BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Branch Number :^ITEM_NAME=iBranchNo^';
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company Name :^ITEM_NAME=iCompanyName^';  
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Reporting Period :^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..CREATION_DATE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Creation Date :^ITEM_NAME=iCreationDate^';
COMMENT ON COLUMN &VIEW..REP_VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Representative Tax No :^ITEM_NAME=iRepVatNo^';
COMMENT ON COLUMN &VIEW..REP_BRANCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Representative Branch No :^ITEM_NAME=iRepBranchNo^';
COMMENT ON COLUMN &VIEW..REP_NAME IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Representative Name :^ITEM_NAME=iRepName^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Reporting Currency Code :^ITEM_NAME=iCurrencyCode^';

COMMENT ON COLUMN &VIEW..NO_OF_LINES IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Number of Lines :^ITEM_NAME=iNoOfLines^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report Title^ITEM_NAME=iReportTitle^';   
          
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_DEST IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Destination^ITEM_NAME=iCountryDest^';
COMMENT ON COLUMN &VIEW..NOTC IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=inotc^';
COMMENT ON COLUMN &VIEW..CUST_STAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Commodity Code^ITEM_NAME=iCustomStatCode^';
COMMENT ON COLUMN &VIEW..CUST_STAT_NO_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Commodity Code Description^ITEM_NAME=iCustStatCodeDes^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAltQty^';
COMMENT ON COLUMN &VIEW..INV_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvValue^';
COMMENT ON COLUMN &VIEW..STAT_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Statistical Value^ITEM_NAME=iStatValue^';
COMMENT ON COLUMN &VIEW..TYPE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Type^ITEM_NAME=iType^';
COMMENT ON COLUMN &VIEW..INV_VAL_TOT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value :^ITEM_NAME=iInvValTot^';
COMMENT ON COLUMN &VIEW..COUNTRYIM IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Country of Dispatch^ITEM_NAME=iCountryIm^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Partner Id^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';   

BEGIN 
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Intrastat Report Denmark','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Supply Chain','Intrastat'); 
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_DK_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS


   company_vat_no_         VARCHAR2(50);
   company_name_           VARCHAR2(40);
   branch_no_              VARCHAR2(10);
   review_period_          VARCHAR2(8);         
   creation_date_          VARCHAR2(10);
   currency_               VARCHAR2(3);
   rep_curr_rate_           NUMBER;
   country_code_           VARCHAR2(2);
   rep_vat_no_             VARCHAR2(50);
   rep_branc_no_            VARCHAR2(10);
   rep_name_            VARCHAR2(100); 

   country_of_dest_        INTRASTAT_LINE_TAB.opposite_country%TYPE;
   notc_                   INTRASTAT_LINE_TAB.notc%TYPE;   
   notc_dummy_             VARCHAR2(2);       
   cust_stat_no_           INTRASTAT_LINE_TAB.CUSTOMS_STAT_NO%TYPE; 
   cust_stat_no_des_       VARCHAR2(2000);
   net_weight_             NUMBER;
   alt_qty_                NUMBER;
   inv_value_              NUMBER;
   stat_val_               NUMBER;       
   file_line_no_           NUMBER:=0;  

   vat_no_                 VARCHAR2(50);   
   stmt_                   VARCHAR2(2000);
   result_key_             NUMBER;
   row_no_                 NUMBER := 1;
   parent_row_no_          NUMBER := 0;
   report_title_           VARCHAR2(50);
   intrastat_id_           NUMBER;
   intrastat_direction_    VARCHAR2(20);
   type_                   NUMBER;  
   inv_val_tot_            NUMBER:=0;

   do_xml_                 BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                  BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                    CLOB;
   package_name_           VARCHAR2(100) := 'INTRASTAT_DK_REP';
   rowkey_                 VARCHAR2(50);

                            
  CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             customs_id,
             bransch_no,
             creation_date,
             rep_curr_code,
             rep_curr_rate,
             bransch_no_repr,
             country_code,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;

  CURSOR get_lines IS
      SELECT il.intrastat_direction,
             il.opposite_country,                          
             cn.country_notc,            
             il.customs_stat_no,                 
             SUM(il.quantity * il.net_unit_weight) mass,
             SUM(il.quantity * nvl(ABS(il.intrastat_alt_qty),0)) alternative_qty,
             SUM(il.quantity * nvl(il.invoiced_unit_price, il.order_unit_price)) * rep_curr_rate_ invoice_value,
             SUM((nvl(il.invoiced_unit_price, il.order_unit_price)+
               nvl(il.unit_add_cost_amount_inv, nvl(il.unit_add_cost_amount,0))+
               nvl(il.unit_charge_amount_inv,0)+nvl(il.unit_charge_amount,0))*il.quantity)*rep_curr_rate_ statistical_value,
             DECODE(il.intrastat_direction, 'EXPORT', il.country_of_origin, '')     country_of_origin,
             DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '')  opponent_tax_id
      FROM   intrastat_line_tab il, country_notc_tab cn
      WHERE  intrastat_id        = intrastat_id_
      AND    intrastat_direction = intrastat_direction_ 
      AND    il.notc             = cn.notc      
      AND    cn.country_code     = country_code_
      AND    rowstate            = 'Released'          
      GROUP BY  il.intrastat_direction,
                il.opposite_country,
                cn.country_notc,           
                il.customs_stat_no,
                DECODE(il.intrastat_direction, 'EXPORT', il.country_of_origin, ''),
                DECODE(il.intrastat_direction, 'EXPORT', il.opponent_tax_id, '');

 CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;


 CURSOR get_country_notc(notc_ VARCHAR2) IS
      SELECT country_notc
     FROM   country_notc_tab
     WHERE  notc = notc_
     AND    country_code = 'DK';

 
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_          := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_        := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN    
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTC: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;
   
   -- Preliminary Record
   FOR headrec_ IN get_head LOOP    
      IF (Transaction_SYS.Logical_Unit_Is_Active('TaxLiabilityCountries')) THEN
         stmt_ := 'BEGIN :vat_no := Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(:company, :country, TRUNC(:creation_date)); END;';
         
         -- ifs_assert_safe bmekse 20110309
         EXECUTE IMMEDIATE stmt_ 
            USING OUT vat_no_,
                  IN  headrec_.company,
                  IN  headrec_.country_code,
                  IN  headrec_.creation_date;
      END IF;
      
      IF( SUBSTR(vat_no_,1,2) = headrec_.country_code) THEN
         company_vat_no_   := SUBSTR(NVL(vat_no_,' '), 3, 8);
      ELSE
         company_vat_no_   := SUBSTR(NVL(vat_no_,' '), 1, 8);
      END IF;
      
      company_name_     := SUBSTR(Company_API.Get_Name(headrec_.company), 1, 40);
      branch_no_        := headrec_.bransch_no;
      review_period_    := to_char(headrec_.end_date, 'YYYYMM');         
      creation_date_    := to_char(headrec_.creation_date, 'YYYYMMDD');
      currency_         := headrec_.rep_curr_code;
      rep_curr_rate_    := headrec_.rep_curr_rate;
      country_code_     := headrec_.country_code;
      rep_vat_no_     := headrec_.repr_tax_no;
      rep_branc_no_   := headrec_.bransch_no_repr;
      rep_name_       := person_info_api.get_name(headrec_.representative);  
      rowkey_         := headrec_.rowkey;
      
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN  -- im not sure if we will get the client or db value, maybe some decode/encode is needed here
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTDK: Intrastat Export Report');
      type_         := -1;
   ELSE
      report_title_ := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTDK: Intrastat Import Report');
      type_         := 1;   
   END IF;

   IF (do_xml_) THEN
      -- countryim are only used for the field label so there is no need to put any data here
      --Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRYIM', put_your_value_here);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TYPE', type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_NAME', rep_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_BRANCH_NO', rep_branc_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REP_VAT_NO', rep_vat_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'BRANCH_NO', branch_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', currency_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CREATION_DATE', creation_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', review_period_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_vat_no_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat',rowkey_, '&VIEW');

      Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_DK_LINES');
   END IF;
   IF (do_rs_) THEN
      -- Insert Head details
      INSERT INTO &TABLE
         (result_key, row_no, parent_row_no, &COMPANY_VAT_NO,
          &COMPANY_NAME,&BRANCH_NO, &REPORTING_PERIOD, &CREATION_DATE,
          &REP_VAT_NO,&REP_BRANCH_NO,&REP_NAME,&CURRENCY_CODE,&REPORT_TITLE,&TYPE )
      VALUES
         (result_key_, row_no_, parent_row_no_, company_vat_no_,
          company_name_,branch_no_, review_period_, creation_date_,rep_vat_no_,
          rep_branc_no_,rep_name_,currency_, report_title_,type_ );     
      parent_row_no_ := row_no_; 
      row_no_ := row_no_ + 1; 
   END IF;

     -- Data Records
   
   FOR linerec_ IN get_lines LOOP 
     country_of_dest_        := linerec_.opposite_country;
     notc_                   := linerec_.country_notc;     
     cust_stat_no_           := linerec_.customs_stat_no; 
     cust_stat_no_des_       := Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no);
     net_weight_             := linerec_.mass;
     alt_qty_                := round(linerec_.alternative_qty);
     inv_value_              := round(linerec_.invoice_value);
     inv_val_tot_            := inv_val_tot_ + inv_value_;
     stat_val_               := round(linerec_.statistical_value);             
     file_line_no_           := file_line_no_ + 1;   
     
     IF ( net_weight_ BETWEEN 0 AND 1 ) THEN
        net_weight_ := CEIL(net_weight_);
     ELSE
        net_weight_ := ROUND(net_weight_);
     END IF;
     
      IF (intrastat_direction_ = 'EXPORT') THEN
         IF (linerec_.opponent_tax_id IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOOPPONENTTAXIDDK: Opponent Tax ID is missing for some lines.');
         END IF;
         IF (linerec_.country_of_origin IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOCOUNTRYORIGIN: The country of origin must be specified for intrastat reporting.');   
         END IF;
      END IF;
     
     IF (do_xml_) THEN
        Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_DK_LINE');
        Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_QTY', alt_qty_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DEST', country_of_dest_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_STAT_NO', cust_stat_no_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_STAT_NO_DESC', cust_stat_no_des_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'INV_VALUE', inv_value_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', round(file_line_no_));
        Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', net_weight_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'NOTC', notc_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_VALUE', stat_val_);
        Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);
        Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
        Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_DK_LINE');
     END IF;
     IF (do_rs_) THEN
        -- insert detail rows
        INSERT INTO &TABLE
             (result_key, row_no, parent_row_no, &LINE_NO, &COUNTRY_DEST,
             &NOTC, &CUST_STAT_NO, &CUST_STAT_NO_DESC, 
             &NET_WEIGHT, &ALT_QTY, &INV_VALUE,&STAT_VALUE, &COUNTRY_OF_ORIGIN, &OPPONENT_TAX_ID, &REPORT_TITLE,&TYPE,&INV_VAL_TOT )
         VALUES
            (result_key_, row_no_, parent_row_no_, round(file_line_no_), country_of_dest_,
             notc_, cust_stat_no_, cust_stat_no_des_,
             net_weight_, alt_qty_, inv_value_,stat_val_, linerec_.country_of_origin, linerec_.opponent_tax_id, report_title_,type_,inv_val_tot_);
             row_no_ := row_no_ + 1;
     END IF;
   END LOOP;
   
   IF (do_rs_) THEN

      IF (row_no_ = 2) THEN -- no details        
            -- insert blank row
         INSERT INTO &TABLE
             (result_key, row_no, parent_row_no, &LINE_NO, &COUNTRY_DEST,
             &NOTC, &CUST_STAT_NO, &CUST_STAT_NO_DESC, 
             &NET_WEIGHT, &ALT_QTY, &INV_VALUE,&STAT_VALUE, &COUNTRY_OF_ORIGIN, &OPPONENT_TAX_ID, &REPORT_TITLE,&TYPE,&INV_VAL_TOT )
         VALUES
            (result_key_, row_no_, parent_row_no_, NULL, NULL,
             NULL, NULL, NULL,
             NULL, NULL, NULL,NULL, NULL, NULL, report_title_,type_,0);
      END IF;
      -- update the head with no_of_lines information
      UPDATE &TABLE
      SET    &NO_OF_LINES     = file_line_no_, 
             &INV_VAL_TOT     = inv_val_tot_
      WHERE  result_key       = result_key_
      AND    row_no           = parent_row_no_; 
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_DK_LINES');
      Xml_Record_Writer_SYS.Add_Element(xml_,'INV_VAL_TOT', inv_val_tot_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_LINES', file_line_no_);
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
  
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------




----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE COMPANY_VAT_NO
UNDEFINE COMPANY_NAME
UNDEFINE REPORTING_PERIOD
UNDEFINE CREATION_DATE
UNDEFINE CURRENCY_CODE
UNDEFINE REPORT_TITLE
UNDEFINE REP_VAT_NO
UNDEFINE REP_BRANCH_NO
UNDEFINE REP_NAME
UNDEFINE COUNTRY_DEST
UNDEFINE NOTC
UNDEFINE CUST_STAT_NO
UNDEFINE CUST_STAT_NO_DESC
UNDEFINE BRANCH_NO
UNDEFINE COUNTRYIM
UNDEFINE NO_OF_LINES
UNDEFINE LINE_NO
UNDEFINE NET_WEIGHT
UNDEFINE ALT_QTY
UNDEFINE INV_VALUE
UNDEFINE STAT_VALUE
UNDEFINE TYPE
UNDEFINE INV_VAL_TOT
UNDEFINE COUNTRY_OF_ORIGIN 
UNDEFINE OPPONENT_TAX_ID
