-----------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: Add Snapshot Metadata Related to FactInventoryValue
--
--  File   : SnapshotMetaData_InventBIFactInventoryValue.ins
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  --------------------------------------------------
--  170908   SBalLK  Bug 136790, Modified multi-line comment sign (/**/) to have them in individual lines for avoid errors when deploy using SQL Plus. 
--  150703   AyAmlk  BOULDER-1950, Replicate the changes correspond to the 
--  150703           IdColumnName property in the model.
--  150408   meablk  BOULDER-951, Created.
--  ------   ------  --------------------------------------------------
-----------------------------------------------------------------------------

DEFINE MODULE            = INVENT
DEFINE ENTITY_ID         = FACT_INVENTORY_VALUE
DEFINE IS_FACT           = TRUE
DEFINE MVB_VIEW          = INVENTORY_VALUE_PART_MVB
DEFINE MVS_VIEW          = INVENTORY_VALUE_PART_MVS
DEFINE MVT_TABLE         = INVENTORY_VALUE_PART_MVT
DEFINE LU                = BiFactInventoryValue
DEFINE MVS_CRITERIA      =  ""
DEFINE LOG_MESSAGE       = "****** Incremental Load Entity &ENTITY_ID ******"
DEFINE LOG_SOURCE_ID     = "Entity &ENTITY_ID"

PROMPT ================================================================
PROMPT   Start Installing MV info of entity &ENTITY_ID in component &MODULE
PROMPT ================================================================

BEGIN
   IS_IMPORT_LOG_UTIL_API.Log_Message_Source(dbms_session.unique_session_id,
                                              '&LOG_MESSAGE',
                                              Is_Import_Log_Util_API.log_type_start,
                                              '&LOG_SOURCE_ID');
END;
/

PROMPT Backup MV Information of &ENTITY_ID
DECLARE
   rec_    IS_ENTITY_MV_INFO_API.New_Rec;
BEGIN
   rec_.entity_id      := '&ENTITY_ID';
   rec_.is_fact_entity := &IS_FACT;
   IS_ENTITY_MV_INFO_API.Backup_Entity(rec_);
END;
/

----------------------------------------------------------------------------------------------
-- Define basic information for fact &ENTITY_ID in component &MODULE
-- i.e. name of snapshot table, MVB and MVS view names, specific columns,
-- if delete is supported and the incremental fetch statement.
--  Attributes:
--    entity_id                    - The identity of the fact or dimension entity
--    is_fact_entity               - Set to "TRUE" if facte entity, else "FALSE"
--    mv_table_name                - Name of the snapshot table for this entity
--    mvb_view_name                - Name of the base view that is used to fetch entity information
--    mvs_view_name                - Name of the source view that is used to feth entity information
--    refresh_mode_db              - Defined the refresh mode. Can be one of
--                                     Is_Mv_Refresh_Mode_API.DB_INCREMENTAL if incremental load is supported
--                                     Is_Mv_Refresh_Mode_API.DB_FULL if only full load is supported
--    mvt_created_date_column_name - Name of column in snapshot table that defines the created date
--    id_column_name               - Column that defines a unique identifier, typically the
--                                   the concatenated keys
--    supports_delete              - Set to "TRUE" if the entity should support delete from the
--                                   snapshot table of records not available in the source
--    incr_fetch_stmt              - Statement to be used by the framework to fetch
--                                   incremental portion based on highest level parent tables
--    notes                        - Can be used to specify limations or any other information that
--                                   is helpful for the end user
----------------------------------------------------------------------------------------------

PROMPT Install MV info of fact &ENTITY_ID in component &MODULE
DECLARE
   rec_    IS_ENTITY_MV_INFO_API.New_Rec;
BEGIN
   rec_.entity_id                      := '&ENTITY_ID';
   rec_.is_fact_entity                 := &IS_FACT;
   rec_.mv_table_name                  := '&MVT_TABLE';
   rec_.mvb_view_name                  := '&MVB_VIEW';
   rec_.mvs_view_name                  := NULL;
   rec_.refresh_mode_db                := 'INCREMENTAL';
   rec_.mvt_created_date_column_name   := 'MVT_CREATED_DT';
   rec_.id_column_name                 := 'ID';
   rec_.supports_delete                := FALSE;
   rec_.incr_fetch_stmt                := 
      'SELECT * from INVENTORY_VALUE_PART_MVS f 
       WHERE EXISTS ( 
          SELECT 1 FROM <INVENTORY_VALUE_PART_TAB> s1 
          WHERE  f.contract_key         = s1.contract
          AND    f.stat_year_no_key     = s1.stat_year_no
          AND    f.stat_period_no_key   = s1.stat_period_no
          AND    f.part_no_key          = s1.part_no
          AND    f.configuration_id_key = s1.configuration_id
          AND    f.lot_batch_no_key     = s1.lot_batch_no
          AND    f.serial_no_key        = s1.serial_no
          AND    f.condition_code_key   = s1.condition_code
          AND    f.location_group_key   = s1.location_group)
      UNION
       SELECT * from INVENTORY_VALUE_PART_MVS f
       WHERE EXISTS ( 
          SELECT 1 FROM <INVENT_VALUE_PART_DETAIL_TAB> s2 
          WHERE  f.contract_key         = s2.contract
          AND    f.stat_year_no_key     = s2.stat_year_no
          AND    f.stat_period_no_key   = s2.stat_period_no
          AND    f.part_no_key          = s2.part_no
          AND    f.configuration_id_key = s2.configuration_id
          AND    f.lot_batch_no_key     = s2.lot_batch_no
          AND    f.serial_no_key        = s2.serial_no
          AND    f.condition_code_key   = s2.condition_code)';
   rec_.notes                          := NULL; 
   IS_ENTITY_MV_INFO_API.Insert_New(rec_);
END;
/

----------------------------------------------------------------------------------------------
-- Install predefined MVS critera to be used when creating MVS view
-- NOTE: These conditions are normally supplied via IEE forms
-- Start by defining the criteria id and attach it to the entity
--
--  Attributes:
--    entity_id           - The identity of the fact or dimension entity
--    is_fact_entity      - Set to "TRUE" if facte entity, else "FALSE"
--    criteria_set_id     - Identity of the criteria set with conditions to be used
--                          when creating the MVS view
----------------------------------------------------------------------------------------------

/*
PROMPT Install filter conditions for fact &ENTITY_ID in component &MODULE
DECLARE
   rec_   IS_ENTITY_MV_CRITERIA_API.New_Rec;   
BEGIN
   rec_.entity_id                 := '&ENTITY_ID';
   rec_.is_fact_entity            := &IS_FACT;
   rec_.criteria_set_id           := '&MVS_CRITERIA';
   IS_ENTITY_MV_CRITERIA_API.Insert_New(rec_);
END;
/
*/

----------------------------------------------------------------------------------------------
-- Next - install conditions to the MVS Criteria Id
--
--  Attributes:
--    entity_id           - The identity of the fact or dimension entity
--    is_fact_entity      - Set to "TRUE" if facte entity, else "FALSE"
--    criteria_set_id     - Identity of the criteria set with conditions to be used
--                          when creating the MVS view
--    condition_no        - Sequence number for current condition
--    name_is_expression  - Set to "TRUE" if column_name is an Oracle SQL Expression
--                          "FALSE" if column_name represents a column in the MVB view
--    column_name         - Column name in MVB view that the condition applies to
--                          Can be an Oracle SQL expression
--    operator_db         - Db value of valid SQL operation, e.g. Is_Emvc_Operator_API.DB_NOT_EQUAL_TO
--                          Please refer to package Is_Emvc_Operator_API
--    condition_value     - Conditional value
--                          If data type is NUMBER the supplied string value must be convertable to NUMBER
--                          If data type is DATE it muste be supplied using the Client_SYS format
----------------------------------------------------------------------------------------------

/*
PROMPT Install filter condition details for fact &ENTITY_ID in component &MODULE
DECLARE
   rec_   IS_ENTITY_MV_CRITERIA_DET_API.New_Rec;   
BEGIN
  
   rec_.entity_id                 := '&ENTITY_ID';
   rec_.is_fact_entity            := &IS_FACT;
   rec_.criteria_set_id           := '&MVS_CRITERIA';
   rec_.condition_no              := 1;
   rec_.name_is_expression        := TRUE;
   rec_.column_name               := 'EXTRACT (YEAR FROM PLANNED_DELIVERY_DATE)';
   rec_.data_type_db              := Fnd_Data_Type_API.DB_NUMBER;
   rec_.operator_db               := Is_Emvc_Operator_API.DB_IN;
   rec_.condition_value           := '2011,2012,2013,2014';
   IS_ENTITY_MV_CRITERIA_DET_API.Insert_New(rec_);
   
   IS_ENTITY_MV_INFO_API.Set_MVS_Criteria_Set_Id(rec_.entity_id, rec_.is_fact_entity, '&MVS_CRITERIA');
END;
/
*/

----------------------------------------------------------------------------------------------
-- Create FINAL(MVS) source view to be used when refreshing the MV table
----------------------------------------------------------------------------------------------

PROMPT Create MVS view &MVS_VIEW for fact &ENTITY_ID in component &MODULE
BEGIN
   IS_MV_UTIL_API.Create_Mvs_View('&ENTITY_ID', &IS_FACT, '&MVS_VIEW');
END;
/

----------------------------------------------------------------------------------------------
-- Install all source tables for current entity, i.e. a structure of
-- related tables needed to trace changes for the entity. For each
-- source the following attributes are defined:
--   entity_id          - The identity of the fact or dimension entity
--   is_fact_entity     - Set to "TRUE" if facte entity, else "FALSE"
--   source_table_name  - Name of source table to be checked for changes
--   master_table_name  - Name of master table in the dependency structure. NULL if source_table_name
--                        is the highest level parent table
--   mv_chk_name        - Referense to a Materialized View used to check MAX rowversion in source_table_name
--   mod_date_column    - Name of column in source_table_name or source_table_view that represents
--                        the rowversion in DATE format
--   dynamic_dependency - Set to "TRUE" if the source_table_name belongs to a dynamically dependent component
--                        Else set to "FALSE"
--   dynamic_module     - Name of the dynamic component. Only to be defined if dynamic_dependency:=TRUE
----------------------------------------------------------------------------------------------

PROMPT Install MV source info for fact &ENTITY_ID in component &MODULE
DECLARE
   rec_    IS_ENTITY_MV_SOURCE_API.New_Rec;
BEGIN
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.source_table_name     := 'INVENTORY_VALUE_PART_TAB';
   rec_.master_table_name     := NULL;
   rec_.mv_chk_name           := 'INVENTORY_VALUE_PART_CMV';
   rec_.mod_date_column       := 'ROWVERSION';
   rec_.dynamic_dependency    := FALSE;
   rec_.dynamic_module        := NULL;
   IS_ENTITY_MV_SOURCE_API.Insert_New(rec_);    
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.source_table_name     := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.master_table_name     :=  NULL;
   rec_.mv_chk_name           := 'INVENT_VALUE_PART_DETAIL_CMV';
   rec_.mod_date_column       := 'ROWVERSION';
   rec_.dynamic_dependency    := FALSE;
   rec_.dynamic_module        := NULL;
   IS_ENTITY_MV_SOURCE_API.Insert_New(rec_); 
END;
/

----------------------------------------------------------------------------------------------
-- Install source views to be considered when processing a source table
-- Attributes:
--   entity_id          - The identity of the fact or dimension entity
--   is_fact_entity     - Set to "TRUE" if facte entity, else "FALSE"
--   source_table_name  - Name of source table to be checked for changes
--   row_no             - Sequence number
--   source_table_view  - Name of a view that can be used to fetch the keys affecting a parent table.
--                        If source_table_view is specified, it will be used instead of source_table_name
----------------------------------------------------------------------------------------------
   
/*
PROMPT Install info about source views for fact &ENTITY_ID in component &MODULE
DECLARE
   rec_    IS_ENTITY_MV_SOURCE_VIEW_API.New_Rec;
BEGIN
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.source_table_name     := '';
   rec_.row_no                := 1;
   rec_.source_table_view     := '';
   IS_ENTITY_MV_SOURCE_VIEW_API.Insert_New(rec_);
END;
/
*/

----------------------------------------------------------------------------------------------
-- Install key columns for all source tables acting as parent in the dependency structure
-- Attributes:
--   entity_id          - The identity of the fact or dimension entity
--   is_fact_entity     - Set to "TRUE" if facte entity, else "FALSE"
--   table_name         - Name of the parent table
--   column_name        - Name of the key column in the source table or view
--   entity_column_name - Corresponsing name in the entity (MVB,MVS views or MVT table)
--   col_no             - Column sequence
----------------------------------------------------------------------------------------------

PROMPT Install key columns for all parent source tables FOR entity &ENTITY_ID in component &MODULE
DECLARE
   rec_    IS_ENTITY_MV_SRC_MAST_COL_API.New_Rec;
BEGIN
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'CONTRACT';
   rec_.entity_column_name    := 'CONTRACT_KEY';
   rec_.col_no                := 1;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_); 
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'STAT_YEAR_NO';
   rec_.entity_column_name    := 'STAT_YEAR_NO_KEY';
   rec_.col_no                := 2;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_); 
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'STAT_PERIOD_NO';
   rec_.entity_column_name    := 'STAT_PERIOD_NO_KEY';
   rec_.col_no                := 3;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'PART_NO';
   rec_.entity_column_name    := 'PART_NO_KEY';
   rec_.col_no                := 4;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'CONFIGURATION_ID';
   rec_.entity_column_name    := 'CONFIGURATION_ID_KEY';
   rec_.col_no                := 5;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'LOT_BATCH_NO';
   rec_.entity_column_name    := 'LOT_BATCH_NO_KEY';
   rec_.col_no                := 6;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'SERIAL_NO';
   rec_.entity_column_name    := 'SERIAL_NO_KEY';
   rec_.col_no                := 7;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'CONDITION_CODE';
   rec_.entity_column_name    := 'CONDITION_CODE_KEY';
   rec_.col_no                := 8;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENTORY_VALUE_PART_TAB';
   rec_.column_name           := 'LOCATION_GROUP';
   rec_.entity_column_name    := 'LOCATION_GROUP_KEY';
   rec_.col_no                := 9;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   ----------------------------------------------------------------------------------
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'CONTRACT';
   rec_.entity_column_name    := 'CONTRACT_KEY';
   rec_.col_no                := 1;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_); 
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'STAT_YEAR_NO';
   rec_.entity_column_name    := 'STAT_YEAR_NO_KEY';
   rec_.col_no                := 2;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_); 
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'STAT_PERIOD_NO';
   rec_.entity_column_name    := 'STAT_PERIOD_NO_KEY';
   rec_.col_no                := 3;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'PART_NO';
   rec_.entity_column_name    := 'PART_NO_KEY';
   rec_.col_no                := 4;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'CONFIGURATION_ID';
   rec_.entity_column_name    := 'CONFIGURATION_ID_KEY';
   rec_.col_no                := 5;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'LOT_BATCH_NO';
   rec_.entity_column_name    := 'LOT_BATCH_NO_KEY';
   rec_.col_no                := 6;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'SERIAL_NO';
   rec_.entity_column_name    := 'SERIAL_NO_KEY';
   rec_.col_no                := 7;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
   
   rec_.entity_id             := '&ENTITY_ID';
   rec_.is_fact_entity        := &IS_FACT;
   rec_.table_name            := 'INVENT_VALUE_PART_DETAIL_TAB';
   rec_.column_name           := 'CONDITION_CODE';
   rec_.entity_column_name    := 'CONDITION_CODE_KEY';
   rec_.col_no                := 8;
   IS_ENTITY_MV_SRC_MAST_COL_API.Insert_New(rec_);
END;
/

----------------------------------------------------------------------------------------------
-- Install MV source info for dimension &ENTITY_ID
----------------------------------------------------------------------------------------------
-- Install columns that defines how a child table is connected to a parent table.
-- Changes in the child table will be used to find the keys in the parent table by joining
-- the two tables using the column connections in this section
-- Attributes:
--   entity_id          - The identity of the fact or dimension entity
--   is_fact_entity     - Set to "TRUE" if facte entity, else "FALSE"
--   child_table_name   - Name of child/source table that triggers fetch of keys in the parent table
--   join_no            - Join sequence no
--   join_type          - Type of join. Can be one of:
--                          Is_Entity_Mv_Src_Join_Type_API.DB_COLUMN_TO_COLUMN
--                          Is_Entity_Mv_Src_Join_Type_API.DB_COLUMN_TO_CONSTANT
--                          Is_Entity_Mv_Src_Join_Type_API.DB_CONSTANT_TO_COLUMN
--                          Is_Entity_Mv_Src_Join_Type_API.DB_CONSTANT_TO_CONSTANT
--                        Defines how the join is performed between the parent and the child
--                        Column-To-Column is the most common case. e.g.
--                          master_table_name.master_column_name = child_table_name.child_column_name
--                        If Column-To-Constant is specified, it means that the join is defined by
--                        using a constant for the child, e.g.
--                          master_table_name.master_column_name = child_constant
--                        If Constant-To-Column is specified, it means that the join is defined by
--                        using a constant for the master, e.g.
--                          master_constant = child_table_name.child_column_name
--                        Constant-To-Constant means using a constant for both parent and child
--   child_column_name  - Name of column in child table or associated source views
--   master_table_name  - Name of master/parent table
--   master_column_name - Name of column in master/parent table
--   child_constant     - Value of child constant defined as a string.
--                        Only to be supplied for join types DB_COLUMN_TO_CONSTANT and DB_CONSTANT_TO_CONSTANT.
--   child_constant_type  - Data type for child constant. Can be one of:
--                                Fnd_Data_Type_API.DB_NUMBER
--                                Fnd_Data_Type_API.DB_STRING
--                                Fnd_Data_Type_API.DB_DATE
--   master_constant      - Value of parent constant defined as a string.
--                          Only to be supplied for join types DB_CONSTANT_TO_COLUMN and DB_CONSTANT_TO_CONSTANT.
--   master_constant_type - Data type for master constant. Can be one of:
--                                Fnd_Data_Type_API.DB_NUMBER
--                                Fnd_Data_Type_API.DB_STRING
--                                Fnd_Data_Type_API.DB_DATE
--
--                         For both child_constant and master_constant apply that if the constant data type is NUMBER the
--                         constant must be defined such that a conversion to number is possible.
--                         If the constant data type is date, it is necessary to define the date according to the
--                         standard client format, e.g. "YYYY-MM-DD-HH24.MI.SS"
----------------------------------------------------------------------------------------------

/*
PROMPT Install MV SOURCE detail info for entity &ENTITY_ID in component &MODULE
DECLARE
   rec_    IS_ENTITY_MV_SOURCE_DETAIL_API.New_Rec;
BEGIN   
   rec_.entity_id                       := '&ENTITY_ID';
   rec_.is_fact_entity                  := &IS_FACT;
   rec_.child_table_name                := '';
   rec_.join_no                         := 1;
   rec_.join_type                       := Is_Entity_Mv_Src_Join_Type_API.DB_COLUMN_TO_COLUMN;
   rec_.child_column_name               := '';
   rec_.master_table_name               := '';
   rec_.master_column_name              := '';
   rec_.child_constant                  := NULL;
   rec_.child_constant_type             := NULL;
   rec_.master_constant                 := NULL;
   rec_.master_constant_type            := NULL;
   IS_ENTITY_MV_SOURCE_DETAIL_API.Insert_New(rec_);
END;
/
*/

----------------------------------------------------------------------------------------------
-- Perform post validations of the metadata for this entity
----------------------------------------------------------------------------------------------

PROMPT Post validate entity &ENTITY_ID
DECLARE
   rec_  IS_ENTITY_MV_INFO_API.New_Rec;
BEGIN
   rec_.entity_id      := '&ENTITY_ID';
   rec_.is_fact_entity := &IS_FACT;
   IS_ENTITY_MV_INFO_API.Post_Validate_Entity(rec_);
END;
/

----------------------------------------------------------------------------------------------
-- Output log statitsics and finalize
----------------------------------------------------------------------------------------------

BEGIN
   TRACE_SYS.Set_Trace_Output(1);
   IS_IMPORT_LOG_UTIL_API.Output_Stats_And_Finish(dbms_session.unique_session_id,
                                                   '&LOG_MESSAGE',
                                                   '&LOG_SOURCE_ID');
   TRACE_SYS.Set_Trace_Output(0);
END;
/

COMMIT;

UNDEFINE MODULE
UNDEFINE ENTITY_ID   
UNDEFINE IS_FACT 
UNDEFINE MVB_VIEW    
UNDEFINE MVS_VIEW    
UNDEFINE MVT_TABLE    
UNDEFINE LU          
UNDEFINE LOG_MESSAGE
UNDEFINE LOG_SOURCE_ID



