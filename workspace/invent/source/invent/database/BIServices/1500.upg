---------------------------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: File for upgrade BI Services
--
--  File   : 1500.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  210224   MalLlk  SC2020R1-12682, Modified Materialized View creation to support Oracle Edition-Based Redefinition.
--  160118   JeLise  Created.
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_1');
PROMPT START upgrading WITH 1500.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_MV Start *****

DEFINE MV         = INVENTORY_PART_MV
DEFINE TAB1       = INVENTORY_PART_TAB
DEFINE TAB2       = SITE_TAB

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_2');
PROMPT Create Materialized View &MV
DECLARE
   stmt_            VARCHAR2(32000);
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := '&MV';
   index_name_      VARCHAR2(30);
   constraint_name_ VARCHAR2(30);
BEGIN
   dbms_output.put_line('Primary key cascade drop ON &MV');
   Database_SYS.Remove_All_Cons_And_Idx('&MV', TRUE);

   dbms_output.put_line('Drop Materialized View &MV');
   Database_SYS.Remove_Materialized_View('&MV', TRUE);

   dbms_output.put_line('Create Materialized View &MV');
   stmt_ :=
      'CREATE MATERIALIZED VIEW &MV
       TABLESPACE &IFSAPP_DATA
       BUILD DEFERRED
       USING NO INDEX
       REFRESH COMPLETE ON DEMAND
	   EVALUATE USING CURRENT EDITION
       AS
       SELECT contract||''^''||part_no                                           id,
              contract                                                           contract,
              part_no                                                            code,
              '' ''                                                              part_desc,
              type_code                                                          type_code,
              unit_meas                                                          unit_meas,
              Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, part_no)  catch_unit_meas,
              prime_commodity                                                    prime_commodity,
              second_commodity                                                   second_commodity,
              part_status                                                        part_status,
              abc_class                                                          abc_class,
              part_product_code                                                  product_code,
              part_product_family                                                product_family,
              supply_chain_part_group                                            supply_chain_part_group,
              inventory_valuation_method                                         inventory_valuation_method,
              inventory_part_cost_level                                          inventory_part_cost_level,
              invoice_consideration                                              invoice_consideration,
              part_cost_group_id                                                 part_cost_group_id,
              Inventory_Part_Planning_API.Get_Planning_Method(contract, part_no) mrp_order_code,
              accounting_group                                                   accounting_group,
              asset_class                                                        asset_class,
              hazard_code                                                        hazard_code,
              lifecycle_stage                                                    lifecycle_stage,
              planner_buyer                                                      planner_buyer
       FROM   &TAB1
       UNION  ALL
       SELECT contract||''^''||''#''                                             id,
              contract                                                           contract,
              NULL                                                               code,
              NULL                                                               part_desc,
              NULL                                                               type_code,
              NULL                                                               unit_meas,
              NULL                                                               catch_unit_meas,
              NULL                                                               prime_commodity,
              NULL                                                               second_commodity,
              NULL                                                               part_status,
              NULL                                                               abc_class,
              NULL                                                               product_code,
              NULL                                                               product_family,
              NULL                                                               supply_chain_part_group,
              NULL                                                               inventory_valuation_method,
              NULL                                                               inventory_part_cost_level,
              NULL                                                               invoice_consideration,
              NULL                                                               part_cost_group_id,
              NULL                                                               mrp_order_code,
              NULL                                                               accounting_group,
              NULL                                                               asset_class,
              NULL                                                               hazard_code,
              NULL                                                               lifecycle_stage,
              NULL                                                               planner_buyer
       FROM   &TAB2
       UNION  ALL
       SELECT ''#''||''^''||''#''                                                id,
              NULL                                                               contract,
              NULL                                                               code,
              NULL                                                               part_desc,
              NULL                                                               type_code,
              NULL                                                               unit_meas,
              NULL                                                               catch_unit_meas,
              NULL                                                               prime_commodity,
              NULL                                                               second_commodity,
              NULL                                                               part_status,
              NULL                                                               abc_class,
              NULL                                                               product_code,
              NULL                                                               product_family,
              NULL                                                               supply_chain_part_group,
              NULL                                                               inventory_valuation_method,
              NULL                                                               inventory_part_cost_level,
              NULL                                                               invoice_consideration,
              NULL                                                               part_cost_group_id,
              NULL                                                               mrp_order_code,
              NULL                                                               accounting_group,
              NULL                                                               asset_class,
              NULL                                                               hazard_code,
              NULL                                                               lifecycle_stage,
              NULL                                                               planner_buyer
       FROM   BI_DUAL_TAB
       ';
   EXECUTE IMMEDIATE stmt_;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_3');
PROMPT Create constraints and index(s) on Materialized View &MV
DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := '&MV';
   index_name_      VARCHAR2(30);
   constraint_name_ VARCHAR2(30);
BEGIN
   constraint_name_ := table_name_ || '_PK';
   Database_SYS.Set_Table_Column (columns_ , 'ID');
   Database_Sys.Create_Constraint(table_name_,
                                  constraint_name_,
                                  columns_,
                                  'P',
                                  '&IFSAPP_INDEX',
                                  NULL,
                                  TRUE,
                                  TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX1';
   Database_SYS.Set_Table_Column (columns_ , 'CONTRACT');
   Database_SYS.Set_Table_Column (columns_ , 'CODE');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

END;
/

UNDEFINE MV
UNDEFINE TAB1
UNDEFINE TAB2

-- ***** INVENTORY_PART_MV End *****

---------------------------------------------------------------------------------------------

-- ***** INSPECTION_CODE_MV Start *****

DEFINE MV         = INSPECTION_CODE_MV
DEFINE TAB1       = INSPECTION_RULE_TAB

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_4');
PROMPT Create Materialized View &MV
DECLARE
   stmt_            VARCHAR2(32000);
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := '&MV';
   index_name_      VARCHAR2(30);
   constraint_name_ VARCHAR2(30);
BEGIN
   dbms_output.put_line('Primary key cascade drop ON &MV');
   Database_SYS.Remove_All_Cons_And_Idx('&MV', TRUE);

   dbms_output.put_line('Drop Materialized View &MV');
   Database_SYS.Remove_Materialized_View('&MV', TRUE);

   dbms_output.put_line('Create Materialized View &MV');
   stmt_ :=
      'CREATE MATERIALIZED VIEW &MV
       TABLESPACE &IFSAPP_DATA
       BUILD DEFERRED
       USING NO INDEX
       REFRESH COMPLETE ON DEMAND
	   EVALUATE USING CURRENT EDITION
       AS
       SELECT inspection_code id,
              inspection_code code,
              '' ''           description,
              inspection_type inspection_type,
              sample_percent  inspection_percent
       FROM   &TAB1
       UNION ALL
       SELECT ''#''           id,
              NULL            code,
              NULL            description,
              NULL            inspection_type,
              NULL            inspection_percent
       FROM BI_DUAL_TAB
       ';
   EXECUTE IMMEDIATE stmt_;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_5');
PROMPT Create constraints and index(s) on Materialized View &MV
DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := '&MV';
   index_name_      VARCHAR2(30);
   constraint_name_ VARCHAR2(30);
BEGIN
   constraint_name_ := table_name_ || '_PK';
   Database_SYS.Set_Table_Column (columns_ , 'ID');
   Database_Sys.Create_Constraint(table_name_,
                                  constraint_name_,
                                  columns_,
                                  'P',
                                  '&IFSAPP_INDEX',
                                  NULL,
                                  TRUE,
                                  TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_UX1';
   Database_SYS.Set_Table_Column (columns_, 'CODE');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'U',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

END;
/

UNDEFINE MV
UNDEFINE TAB1

-- ***** INSPECTION_CODE_MV End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_VALUE_PART_MVT Start *****

DEFINE MVT_TABLE   = INVENTORY_VALUE_PART_MVT
DEFINE LU          = BiFactInventoryValue

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_6');
PROMPT Create snapshot table &MVT_TABLE
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := '&MVT_TABLE';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_,'CONTRACT_KEY', 'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_,'STAT_YEAR_NO_KEY', 'NUMBER',   'N');
   Database_SYS.Set_Table_Column(columns_,'STAT_PERIOD_NO_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_,'PART_NO_KEY', 'VARCHAR2(25)',  'N');
   Database_SYS.Set_Table_Column(columns_,'CONFIGURATION_ID_KEY', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_,'LOT_BATCH_NO_KEY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_,'SERIAL_NO_KEY', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_,'CONDITION_CODE_KEY', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_,'LOCATION_GROUP_KEY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_,'QTY_WAIV_DEV_REJ', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'QTY_IN_TRANSIT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'QTY_AT_CUSTOMER', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'VENDOR_OWNED_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'TOTAL_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'PART_NO', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'CONFIGURATION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'LOT_BATCH_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SERIAL_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'LOCATION_GROUP', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'UNIT_COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_COMPANY_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_SITE_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_INVENTORY_PART_ID', 'VARCHAR2(31)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_CONDITION_CODE_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_IV_DATE_CREATED_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_STATISTIC_PERIOD_ID', 'VARCHAR2(81)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_RPD_COMPANY_PERIOD_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_RPD_PERIOD_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COMPANY', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SITE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'INVENTORY_PART', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'CONDITION_CODE', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'STAT_YEAR_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'STAT_PERIOD_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'IV_DATE_CREATED', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'REPORTING_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ID', 'VARCHAR2(268)', 'N');
   Database_SYS.Set_Table_Column(columns_,'MVT_CREATED_DT', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_7');
PROMPT Create constraint and index(s) on snapshot table &MVT_TABLE
DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := '&MVT_TABLE';
   index_name_      VARCHAR2(30);
   constraint_name_ VARCHAR2(30);

BEGIN
   constraint_name_ := table_name_ || '_PK';
   Database_SYS.Set_Table_Column (columns_ , 'contract_key');
   Database_SYS.Set_Table_Column (columns_ , 'stat_year_no_key');
   Database_SYS.Set_Table_Column (columns_ , 'stat_period_no_key');
   Database_SYS.Set_Table_Column (columns_ , 'part_no_key');
   Database_SYS.Set_Table_Column (columns_ , 'configuration_id_key');
   Database_SYS.Set_Table_Column (columns_ , 'lot_batch_no_key');
   Database_SYS.Set_Table_Column (columns_ , 'serial_no_key');
   Database_SYS.Set_Table_Column (columns_ , 'condition_code_key');
   Database_SYS.Set_Table_Column (columns_ , 'location_group_key');
   Database_Sys.Create_Constraint(table_name_,
                                  constraint_name_,
                                  columns_,
                                  'P',
                                  '&IFSAPP_INDEX',
                                  NULL,
                                  TRUE,
                                  TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX1';
   Database_SYS.Set_Table_Column (columns_, 'DIM_COMPANY_ID');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX2';
   Database_SYS.Set_Table_Column (columns_, 'DIM_SITE_ID');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX3';
   Database_SYS.Set_Table_Column (columns_, 'DIM_INVENTORY_PART_ID');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX4';
   Database_SYS.Set_Table_Column (columns_, 'DIM_CONDITION_CODE_ID');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                               NULL,
                               TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

UNDEFINE MVT_TABLE
UNDEFINE LU

-- ***** INVENTORY_VALUE_PART_MVT End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_VALUE_PART_CMV Start *****

DEFINE MV_NAME       = INVENTORY_VALUE_PART_CMV
DEFINE SOURCE_TABLE  = INVENTORY_VALUE_PART_TAB

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_8');
PROMPT Create CHK_MV VIEWS
DECLARE
   stmt_            VARCHAR2(32000);
BEGIN
   Database_SYS.Remove_Materialized_View('&MV_NAME',TRUE);
   stmt_ :=
   'CREATE MATERIALIZED VIEW &MV_NAME
    BUILD DEFERRED
    USING NO INDEX
    REFRESH COMPLETE ON DEMAND
	EVALUATE USING CURRENT EDITION
    AS
    SELECT MAX(ROWVERSION) MAX_ROWVERSION
    FROM &SOURCE_TABLE';

   EXECUTE IMMEDIATE stmt_;

   IS_MV_REFRESH_INFO_API.Clear_Refresh_Info('&MV_NAME');
END;
/

UNDEFINE MV_NAME
UNDEFINE SOURCE_TABLE

-- ***** INVENTORY_VALUE_PART_MVT End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_VALUE_PART_CMV Start *****

DEFINE MV_NAME       = INVENT_VALUE_PART_DETAIL_CMV
DEFINE SOURCE_TABLE  = INVENT_VALUE_PART_DETAIL_TAB

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_9');
PROMPT Create &MV_NAME
DECLARE
   stmt_            VARCHAR2(32000);
BEGIN
   Database_SYS.Remove_Materialized_View('&MV_NAME',TRUE);
   stmt_ :=
   'CREATE MATERIALIZED VIEW &MV_NAME
    BUILD DEFERRED
    USING NO INDEX
    REFRESH COMPLETE ON DEMAND
	EVALUATE USING CURRENT EDITION
    AS
    SELECT MAX(ROWVERSION) MAX_ROWVERSION
    FROM &SOURCE_TABLE';

   EXECUTE IMMEDIATE stmt_;

   IS_MV_REFRESH_INFO_API.Clear_Refresh_Info('&MV_NAME');
END;
/

UNDEFINE MV_NAME
UNDEFINE SOURCE_TABLE

-- ***** INVENTORY_VALUE_PART_CMV End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_TURNOVER_MVT Start *****

DEFINE MVT_TABLE   = INVENTORY_TURNOVER_MVT
DEFINE LU          = BiFactInventoryTurnover

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_10');
PROMPT Create table &MVT_TABLE
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := '&MVT_TABLE';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_,'PART_NO_KEY', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_,'CONTRACT_KEY', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_,'CONFIGURATION_ID_KEY', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_,'STAT_YEAR_NO_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_,'STAT_PERIOD_NO_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_,'BEG_BALANCE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_ADJUST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_ISSUES', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_ABNORMAL_ISSUES', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_ISSUES_WITH_ABNORMAL', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_RECEIPTS', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ADJUSTED_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ISSUED_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ISSUED_ABNORMAL_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ISSUED_WITH_ABNORMAL_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'RECEIVED_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'QTY_ONHAND', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'INVENTORY_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ISSUED_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ISSUED_ABNORMAL_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'TURNOVER_RATE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'TURNOVER_RATE_WITH_ABNORMAL', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'CONFIGURATION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_COMPANY_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_SITE_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_INVENTORY_PART_ID', 'VARCHAR2(31)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_IT_DATE_CREATED_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_SECOND_COMMODITY_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_STAT_PERIOD_ID', 'VARCHAR2(81)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_RPD_COMPANY_PERIOD_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_RPD_PERIOD_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COMPANY', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SITE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'INVENTORY_PART', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SECOND_COMMODITY', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'STAT_YEAR_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'STAT_PERIOD_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'IT_DATE_CREATED', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'REPORTING_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ID', 'VARCHAR2(164)', 'N');
   Database_SYS.Set_Table_Column(columns_,'MVT_CREATED_DT', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_11');
PROMPT Create constraint and index(s) on snapshot table &MVT_TABLE
DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := '&MVT_TABLE';
   index_name_      VARCHAR2(30);
   constraint_name_ VARCHAR2(30);
BEGIN
   constraint_name_ := table_name_ || '_PK';
   Database_SYS.Set_Table_Column (columns_ , 'part_no_key');
   Database_SYS.Set_Table_Column (columns_ , 'contract_key');
   Database_SYS.Set_Table_Column (columns_ , 'configuration_id_key');
   Database_SYS.Set_Table_Column (columns_ , 'stat_year_no_key');
   Database_SYS.Set_Table_Column (columns_ , 'stat_period_no_key');
   Database_Sys.Create_Constraint(table_name_,
                                  constraint_name_,
                                  columns_,
                                  'P',
                                  '&IFSAPP_INDEX',
                                  NULL,
                                  TRUE,
                                  TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX1';
   Database_SYS.Set_Table_Column (columns_, 'dim_company_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX2';
   Database_SYS.Set_Table_Column (columns_, 'dim_site_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX3';
   Database_SYS.Set_Table_Column (columns_, 'dim_inventory_part_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX4';
   Database_SYS.Set_Table_Column (columns_, 'dim_second_commodity_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

END;
/

UNDEFINE MVT_TABLE
UNDEFINE LU

-- ***** INVENTORY_TURNOVER_MVT End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_PERIOD_HIST_CMV Start *****

DEFINE MV_NAME       = INVENTORY_PART_PERIOD_HIST_CMV
DEFINE SOURCE_TABLE  = INVENTORY_PART_PERIOD_HIST_TAB

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_12');
PROMPT Creating VIEW &MV_NAME
DECLARE
   stmt_            VARCHAR2(32000);
BEGIN
   Database_SYS.Remove_Materialized_View('&MV_NAME',TRUE);
   stmt_ :=
   'CREATE MATERIALIZED VIEW &MV_NAME
    BUILD DEFERRED
    USING NO INDEX
    REFRESH COMPLETE ON DEMAND
	EVALUATE USING CURRENT EDITION
    AS
    SELECT MAX(ROWVERSION) MAX_ROWVERSION
    FROM &SOURCE_TABLE';

   EXECUTE IMMEDIATE stmt_;

   IS_MV_REFRESH_INFO_API.Clear_Refresh_Info('&MV_NAME');
END;
/

UNDEFINE MV_NAME
UNDEFINE SOURCE_TABLE

-- ***** INVENTORY_PART_PERIOD_HIST_CMV End *****

---------------------------------------------------------------------------------------------

-- ***** INVENT_TRANS_HIST_MVT Start *****

DEFINE MVT_TABLE   = INVENT_TRANS_HIST_MVT
DEFINE LU          = BiFactInventTransHist

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_13');
PROMPT Create snapshot table &MVT_TABLE
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := '&MVT_TABLE';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_,'TRANSACTION_ID_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_,'QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'QUANTITY_CHANGE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'CATCH_QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'INVENTORY_COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SUM_UNIT_COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'TOTAL_COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_TRANSACTION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_DECREASE_TRANSACTION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_INCREASE_TRANSACTION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COUNT_UNAFFECTED_TRANSACTION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'TRANSACTION_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'CONFIGURATION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'LOT_BATCH_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SERIAL_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'WAIV_DEV_REJ_NO', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ENG_CHG_LEVEL', 'VARCHAR2(6)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SOURCE_REF1', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SOURCE_REF2', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SOURCE_REF3', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SOURCE_REF4', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SOURCE_REF5', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SOURCE_REF_TYPE', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'USERID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SOURCE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIRECTION', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_COMPANY_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_SITE_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_INVENTORY_PART_ID', 'VARCHAR2(31)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_MPCCOM_TRANSACTION_CODE_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_INVENTORY_LOCATION_ID', 'VARCHAR2(41)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_CONDITION_CODE_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_SCRAPPING_CAUSE_ID', 'VARCHAR2(8)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_RETURN_CAUSE_ID', 'VARCHAR2(8)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_PROJECT_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_ACTIVITY_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_STATISTIC_PERIOD_ID', 'VARCHAR2(81)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_ITH_DATE_CREATED_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_ITH_DATE_APPLIED_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_ITH_EXPIRATION_DATE_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_RPD_COMPANY_PERIOD_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'DIM_RPD_PERIOD_ID', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'COMPANY', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SITE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'INVENTORY_PART', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'MPCCOM_TRANSACTION_CODE', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'INVENTORY_LOCATION', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'CONDITION_CODE', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'SCRAPPING_CAUSE', 'VARCHAR2(8)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'RETURN_CAUSE', 'VARCHAR2(8)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'PROJECT', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ACTIVITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'STAT_YEAR', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'STAT_PERIOD', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ITH_DATE_CREATED', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ITH_DATE_APPLIED', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ITH_EXPIRATION_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'REPORTING_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_,'ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_,'MVT_CREATED_DT', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_14');
PROMPT Create constraint and index(s) on snapshot table &MVT_TABLE
DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := '&MVT_TABLE';
   index_name_      VARCHAR2(30);
   constraint_name_ VARCHAR2(30);
BEGIN
   constraint_name_ := table_name_ || '_PK';
   Database_SYS.Set_Table_Column (columns_, 'transaction_id_key');
   Database_Sys.Create_Constraint( table_name_,
                                   constraint_name_,
                                   columns_,
                                   'P',
                                   '&IFSAPP_INDEX',
                                   NULL,
                                   TRUE,
                                   TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX1';
   Database_SYS.Set_Table_Column (columns_ , 'dim_company_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX2';
   Database_SYS.Set_Table_Column (columns_ , 'dim_site_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX3';
   Database_SYS.Set_Table_Column (columns_ , 'dim_inventory_part_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX4';
   Database_SYS.Set_Table_Column (columns_ , 'dim_mpccom_transaction_code_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX5';
   Database_SYS.Set_Table_Column (columns_ , 'dim_inventory_location_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX6';
   Database_SYS.Set_Table_Column (columns_ , 'dim_condition_code_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX7';
   Database_SYS.Set_Table_Column (columns_ , 'dim_scrapping_cause_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX8';
   Database_SYS.Set_Table_Column (columns_ , 'dim_project_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

   index_name_ := table_name_ || '_IX9';
   Database_SYS.Set_Table_Column (columns_ , 'dim_activity_id');
   Database_Sys.Create_Index( table_name_,
                              index_name_,
                              columns_,
                              'N',
                              '&IFSAPP_INDEX',
                              NULL,
                              TRUE,
                              TRUE);
   Database_SYS.Reset_Column_Table(columns_);

END;
/

UNDEFINE MVT_TABLE
UNDEFINE LU

-- ***** INVENT_TRANS_HIST_MVT End *****

---------------------------------------------------------------------------------------------

-- ***** INVENT_TRANS_HIST_CMV Start *****

DEFINE MV_NAME       = INVENT_TRANS_HIST_CMV
DEFINE SOURCE_TABLE  = INVENTORY_TRANSACTION_HIST_TAB

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_15');
PROMPT Creating VIEW &MV_NAME
DECLARE
   stmt_            VARCHAR2(32000);
BEGIN
   -- Remove INV_TRANS_HIST_CHK_MV if exists. Replaced it by INVENT_TRANS_HIST_CMV.
   IF Database_SYS.Mtrl_View_Exist('INV_TRANS_HIST_CHK_MV') THEN
      Database_SYS.Remove_Materialized_View('INV_TRANS_HIST_CHK_MV',TRUE);
   END IF;

   Database_SYS.Remove_Materialized_View('&MV_NAME',TRUE);
   stmt_ :=
   'CREATE MATERIALIZED VIEW &MV_NAME
    BUILD DEFERRED
    USING NO INDEX
    REFRESH COMPLETE ON DEMAND
	EVALUATE USING CURRENT EDITION
    AS
    SELECT MAX(ROWVERSION) MAX_ROWVERSION
    FROM &SOURCE_TABLE';

   EXECUTE IMMEDIATE stmt_;

   IS_MV_REFRESH_INFO_API.Clear_Refresh_Info('&MV_NAME');
END;
/

UNDEFINE MV_NAME
UNDEFINE SOURCE_TABLE

-- ***** INVENT_TRANS_HIST_CMV End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_TRANSACTION_COST_CMV Start *****

DEFINE MV_NAME       = INVENTORY_TRANSACTION_COST_CMV
DEFINE SOURCE_TABLE  = INVENTORY_TRANSACTION_COST_TAB

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_16');
PROMPT Creating VIEW &MV_NAME
DECLARE
   stmt_            VARCHAR2(32000);
BEGIN
   Database_SYS.Remove_Materialized_View('&MV_NAME',TRUE);
   stmt_ :=
   'CREATE MATERIALIZED VIEW &MV_NAME
    BUILD DEFERRED
    USING NO INDEX
    REFRESH COMPLETE ON DEMAND
	EVALUATE USING CURRENT EDITION
    AS
    SELECT MAX(ROWVERSION) MAX_ROWVERSION
    FROM &SOURCE_TABLE';

   EXECUTE IMMEDIATE stmt_;

   IS_MV_REFRESH_INFO_API.Clear_Refresh_Info('&MV_NAME');
END;
/

UNDEFINE MV_NAME
UNDEFINE SOURCE_TABLE

-- ***** INVENT_TRANS_HIST_CMV End *****

---------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_17');
PROMPT Upgrade statements IN FILE 1500.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Done');

