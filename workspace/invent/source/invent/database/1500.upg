----------------------------------------------------------------------------------------------
--  Module : INVENT
--
--  Purpose: Upgrade of INVENT database objects from release 14.1.0 to 15.0.0.
--
--  File   : 1500.upg
--
--  IFS/Design Template Version 2.3
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------------------------
--  200707  Asawlk  Bug 154701(SCZ-10587), Modified the way how IS_IN_STOCK attribute in HANDLING_UNIT_TAB gets updated. Also modified the definition of NOTE_ID
--  200707          column in HANDLING_UNIT_TAB. 
--  180301  MaAuse  STRSC-16691, Modified COUNTING_REPORT_TAB by adding new columns EXCLUDE_SUPPLIER_RENTED and EXCLUDE_COMP_RENTAL_ASSET.
--  180227  LEPESE  STRSC-16627, Merged updates of NOTE_ID and IS_IN_STOCK on HANDLING_UNIT_TAB into one Update statement for performance.
--  180214  MaRalk  STRSC-17005, Moved insertion of the new column is_in_stock into the same block which already having    
--  180214          introducing of other new columns to HANDLING_UNIT_TAB. Modified data insertion from PALLET_TAB to HANDLING_UNIT_TAB accordingly. 
--  180206  mwerse  STRSC-16627, Added column is_in_stock to handling_unit_tab. Created index HANDLING_UNIT_IX9.
--  180209  ChFolk  STRSC-16472, Removed view INVENTORY_VALUE_CHECK_LOCAL_1.
--  180206  ChFolk  STRSC-16471, Removed view INVENTORY_VALUE_SUM_LOCAL_1.
--  180131  LEPESE  STRSC-16619, Added column HANDLING_UNIT_ID to table INVENT_PART_OFFLINE_MOVE_TAB and index INVENT_PART_OFFLINE_MOVE_IX1.
--  180119  LEPESE  STRSC-15959, Added tables SITE_HU_CAPACITY_TAB, WAREHOUSE_HU_CAPACITY_TAB, WAREHOUSE_BAY_HU_CAPACITY_TAB, WAREHOUSE_TIER_CAPACITY_TAB,
--  180119          WAREHOUSE_ROW_HU_CAPACITY_TAB, WAREHOUSE_BIN_HU_CAPACITY_TAB.
--  180116  SBalLK  Bug 139589, Changed INVENTORY_TRANSACTION_HIST_IX2 and INVENTORY_TRANSACTION_HIST_IX9 index spaces to accept user define space instead of hard coded IFSAPP_INDEX.
--  180105  ChFolk  STRSC-15533, Added new index creation TRANSPORT_TASK_LINE_IX4 in TRANSPORT_TASK_LINE_TAB this replaced the
--  180105          the previos remove index for the same nam as new index creation supports for replace existing index with the same name.
--  171204  MWERSE  STRSC-11918, Added column SPLIT_BY_HU_CAPACITY  to TRANSPORT_TASK_TAB and column TRANSPORT_TASK_CAPACITY to HANDLING_UNIT_TYPE_TAB.
--  171128  DAYJLK  STRSC-13918, Added column RESERV_FROM_TRANSP_TASK to SITE_INVENT_INFO_TAB.
--  171127  LEPESE  STRSC-14755, Added column rowstate to index warehouse_task_ix1.
--  171123  Chfose  STRSC-12760, Removed temporary table SESSION_INVENTORY_EVENT_TMP (Replaced with App_Context_SYS).
--  171116  DiKuLk  Bug 138403, Updated location_group and transit_location_group columns in inventory_transaction_hist_tab.
--  171115  MaRalk  STRSC-14042, Added column NOTE_TEXT to HANDLING_UNIT_HISTORY_TAB. 
--  171113  MaRalk  STRSC-14039, Added column NOTE_TEXT to HANDLING_UNIT_TAB. 
--  171111  MaRalk  STRSC-14037, Added column NOTE_TEXT to HANDLING_UNIT_TYPE_TAB. 
--  171106  MaRalk  STRSC-12070, Added column NOTE_ID to HANDLING_UNIT_HISTORY_TAB. 
--  171026  MaRalk  STRSC-12065, Added mandatory column NOTE_ID to HANDLING_UNIT_TAB and updated the records. 
--  171026          Modified data insertion from PALLET_TAB to HANDLING_UNIT_TAB accordingly.  
--  171024  MaRalk  STRSC-12063, Added mandatory column NOTE_ID to HANDLING_UNIT_TYPE_TAB and updated the records. 
--  171024          Modified insertion of 'PALLET' handling unit type accordingly.
--  171023  ChFolk  STRSC-6, Created new table INV_PART_CONFIG_PROJECT_TAB and related indexes.
--  171019  LEPESE  STRSC-13187, Created temporary table INVENTORY_PART_IN_STOCK_TMP.
--  171011  RoJalk  STRSC-12287, Added the column DATE_CREATED to INVENTORY_PICK_LIST_TAB.
--  171011  RoJalk  STRSC-12182, Added the column LOCATION_GROUP to INVENTORY_PICK_LIST_TAB.
--  170912  ChFolk  STRSC-11923, Modified COUNTING_REPORT_TAB by removing HANDLING_UNIT_SELECTION and adding EXCLUDE_ATTACHED_TO_HU and EXCLUDE_NOT_ATTACHED_TO_HU.
--  170823  Chfose  Added USE_HU_RESERVATION_RANKING to HANDLING_UNIT_TYPE_TAB.
--  170823          Added HANDL_UNIT_RESERVATION_RANKING to SITE_PUTAWAY_ZONE_TAB & INVENT_PART_PUTAWAY_ZONE_TAB.
--  170821  ChFolk  STRSC-11366, Added new column INCLUDE_FULL_QTY_OF_HU into COUNTING_REPORT_TAB.
--  170821  ChFolk  STRSC-11367, Changed the default value of HANDLING_UNIT_SELECTION in COUNTING_REPORT_TAB to PARTS ATTACHED AND NOT ATTACHED TO HANDLING UNITS. 
--  170817  Chfose  STRSC-11357, Removed TRANSP_TASK_FOR_HU_REFRESH & COUNT_REPO_FOR_HU_REFRESH blocks.
--  170814  NISMLK  STRMF-13524, Added PARENT_NODE_ID and changed column name LINE_NO to NODE_ID in INVENTORY_PART_TRACING_TAB.
--  180809  ChFolk  STRSC-11223, Added updating columns rowstate and rowversion in COUNTING_RESULT_TAB which caused oracle error in 1410.upg  
--  170721  ChFolk  STRSC-11002, Added HANDLING_UNIT_SELECTION, HANDLING_UNIT_TYPE_ID, TOP_HANDLING_UNIT_TYPE_ID, HANDLING_CATEGORY_TYPE_ID and TOP_HANDLING_CATEGORY_TYPE_ID into COUNTING_REPORT_TAB.
--  170703  Chfose  STRSC-8920, Added new table HU_SNAPSHOT_FOR_REFRESH_TAB & new temporary table SESSION_INVENTORY_EVENT_TMP.
--  170628  IzShlk  STRSC-9317, Added validity (rowstate) to INVENTORY_PART_STATUS_PAR_TAB
--  170628  IzShlk  STRSC-9318, Added validity (rowstate) to INVENTORY_TEMPLATE_PART_TAB.
--  170523  AwWelk  STRSC-8620, Added IPR_ACTIVE NOT NULL column to COMPANY_INVENT_INFO_TAB and SITE_INVENT_INFO_TAB. The correct default
--  170523          value for these columns will be placed from a post script depending on whether INVPLA installed or not. .
--  170511  UdGnlk  LIM-11443, Adding PICK_LIST_NO and SHIPMENT_ID to TRANSPORT_TASK_LINE_IX3 index.
--  170511          Moved adding of rowstate column on HANDLING_UNIT_CATEGORY_TAB to a place before new inserts are being made into this table.
--  170511          Added column exists condition to MANUF_PART_ATTRIBUTE_TAB column SCHED_CAPACITY.
--  170511          Made USE_ZONE_RANK_AUTO_RESERV in SITE_INVENT_INFO_TAB statement execute immediate to avoid deployment error.
--  170505  LEPESE  LIM-11461, Moved adding of rowstate column on PART_AVAILABILITY_CONTROL_TAB to a place before new inserts are being made into this table.
--  170428  Erlise  LIM-9384, Removed basic data translations for 2 wadaco-processes.
--  170407  MaEelk  STRSC-7031, INVENT_INFO_SERVICES_RPT_PK was moved to IFSAPP_REPORT_INDEX if it is specified in another Tablespace.
--  170404  MaEelk  STRSC-6919, Removed obsolete views INVENT_PART_IN_STOCK_NOPAL_LOV, BAY_NOPALL_DROP_OFF_LOCATION, NOPALL_DROP_OFF_LOCATION,
--  170404          NOPALL_DROP_OFF_LOV, INV_PART_STOCK_RESERVATION_PUB, ORDER_SUPPLY_DEMAND_SUM_PROJ2.
--  170403  LEPESE  STRSC-6919,  Added index TRANSP_TASK_FOR_HU_REFRESH_IX1.
--  170329  DaZase  LIM-10352, Removed obsolete package DATA_CAPTURE_COUNT_REPORT_API.
--  170328  DaZase  LIM-11233, Removed obsolete package DATA_CAPT_PROC_TRANS_TASK_API.
--  170327  MaRalk  LIM-10984, Created index INVENTORY_PICK_LIST_IX1 on INVENTORY_PICK_LIST_TAB.
--  170327          Modified index INVENTORY_PART_RESERVATION_IX2 by adding shipment_id, fully_picked
--  170327          and removed index INVENTORY_PART_RESERVATION_IX4 on INVENTORY_PART_RESERVATION_TAB.
--  170308  RoJalk  LIM-11068, Added column SHIP_INVENTORY_LOCATION_NO to INVENTORY_PICK_LIST_TAB.
--  170306  LEPESE  LIM-3740, Made obsolete COLUMN USE_ZONE_RANK_AUTO_RESERV in SITE_INVENT_INFO_TAB nullable.
--  170302  LEPESE  LIM-3740, Added columns auto_reserve_prio1, auto_reserve_prio1 .. auto_reserve_prio5 to site_invent_info_tab.
--  170302          Added column homogeneous_hu_receipt_date to inventory_part_avail_stock_tmp.
--  170301  UdGnlk  LIM-10870, Added RESERVED_BY_SOURCE column to TRANSPORT_TASK_LINE_TAB to distinguish move of reserved and move of stock.
--  170222  RoJalk  LIM-9881, Created INVENTORY_PART_RESERVATION_IX1,INVENTORY_PART_RESERVATION_IX2,INVENTORY_PART_RESERVATION_IX3,
--  170222          INVENTORY_PART_RESERVATION_IX4 on INVENTORY_PART_RESERVATION_TAB. Added FULLY_PICKED to INVENTORY_PART_RESERVATION_TAB.
--  170209  MaEelk  STRSC-5375, Added 'HAS_STOCK_RESERVATION', 'PRINT_CONTENT_LABEL', 'PRINT_SHIPMENT_LABEL', 'NO_OF_CONTENT_LABELS'  and 'NO_OF_SHIPMENT_LABELS'
--  170209          to the direct insert statement of the HANDLING_UNIT_TAB.
--  170207  MaEelk  STRSC-5375, passed keep_default_ => 'N' to Database_SYS.Set_Column_Values calls when assigning DEFAULT values to the NOT NULL columns.
--  170125  Chfose  LIM-8752, Created COUNTING_REPORT_LINE_IX4 in COUNTING_REPORT_LINE_TAB.
--  161017  khvese  LIM-10221, Added column PICK_BY_CHOICE_OPTION to SITE_INVENT_INFO_TAB
--  170103  MaEelk  LIM-10119, Added PICK_LIST_NO and SHIPMENT_ID to TRANSPORT_TASK_LINE_TAB.
--  161220  Chfose  STRSC-5075, Modified the length of LINE_NO in SHORT_PART_INCREASE_HIST_TAB to 12.
--  161220  UdGnlk  LIM_10045, Created ACCESSORY_ON_HU_HISTORY_TAB and its indexes. Its copying data from ACCESSORY_ON_HANDLING_UNIT_TAB when shipment is closed.
--  161219  Chfose  LIM-10069, Added new column PROCESS_CONTROL and new index HANDL_UNIT_STOCK_SNAPSHOT_IX1 to HANDL_UNIT_STOCK_SNAPSHOT_TAB.
--  161118  VISALK  STRMF-8219, Added SAFETY_LEAD_TIME into SITE_TO_SITE_PART_LEADTIME_TAB and SITE_TO_SITE_LEADTIME_TAB.
--  161118  MaEelk  LIM-9193, Created HANDLING_UNIT_HISTORY_TAB and indexes. This an exact copy of Handling_Unit_Tab
--  161118          and some additional information take from Get methods. It stores data of Handling Units belongs to closed Shipments.
--  161118  NISMLK  STRMF-8211, Added column SAFETY_LEAD_TIME to INVENTORY_PART_PLANNING_TAB, ASSET_CLASS_TAB and ASSORTMENT_INVENT_DEF_TAB.
--  161108  RoJalk  LIM-9412, Renamed PICK_LIST_NO sequence in ORDER to INVENT_PICK_LIST_NO_SEQ and moved to INVENT.
--  16110           If PICK_LIST_NO does not exists created INVENT_PICK_LIST_NO_SEQ.
--  161108  Jhalse  LIM-9188, Added location_type to HANDLING_UNIT_TAB, filled with correct data and added index for the column.
--  161025  RoJalk  LIM-9010, Created the table INVENTORY_PICK_LIST_TAB.
--  161020  DaZase  LIM-7326, Added columns PRINT_CONTENT_LABEL, PRINT_SHIPMENT_LABEL, NO_OF_CONTENT_LABELS and NO_OF_SHIPMENT_LABELS to PACKING_INSTRUCTION_NODE_TAB.
--  161019  UdGnlk  LIM-8619, Added attribute MOVE_RESERVATION_OPTION to SITE_INVENT_INFO_TAB.
--  161013  MaIklk  LIM-9183, Added section for INVENTORY_PART_RESERVATION_TAB table creation.
--  161011  UdGnlk  LIM-8759, Added columns PRINT_CONTENT_LABEL, PRINT_SHIPMENT_LABEL, NO_OF_CONTENT_LABELS and NO_OF_SHIPMENT_LABELS to HANDLING_UNIT_TYPE_TAB.
--  161011          Added columns PRINT_CONTENT_LABEL, PRINT_SHIPMENT_LABEL, NO_OF_CONTENT_LABELS and NO_OF_SHIPMENT_LABELS to HANDLING_UNIT_TAB.
--  161006  LEPESE  LIM-9167, Added column MANDATORY_EXPIRATION_DATE to INVENTORY_PART_TAB.
--  161005  Chfose  LIM-3661, Added INVENTORY_TRANS_HIST_IX10 to INVNETORY_TRANSACTION_HIST_TAB.
--  161004  DaZase  LIM-7717, Added DETAIL_REPORT_PRINTED and AGGREGATED_REPORT_PRINTED to COUNTING_REPORT_TAB.
--  160928  DaZase  LIM-7717, Added COUNTING_PRINT_REPORT_OPT to SITE_INVENT_INFO_TAB.
--  160921  SBalLK  Bug 129839, Added CONFIRMED column to COUNTING_REPORT_LINE_TAB and make the column as key column.
--  160905  RALASE  Added new column SOURCE_REF_PART_QTY to HANDLING_UNIT_TAB
--  160905  Dinklk  APPUXX-4360, Added new column CREATED_BY_USER_ID to MATERIAL_REQUISITION_TAB.
--  160905          Added an non-unique index to CREATED_BY_USER_ID of MATERIAL_REQUISITION_TAB.
--  160901  IzShlk  STRSC-4007, Added new column FREEZE_STOCK_COUNT_REPORT to SITE_INVENT_INFO_TAB.
--  160810  LEPESE  LIM-7596, Added column HAS_STOCK_RESERVATION to HANDLING_UNIT_TAB. Created index HANDLING_UNIT_IX7.
--  160713  RaKalk  LIM-7860, Added Connection_ref columns to HANDLING_UNIT_TAB.
--  160622  ChFolk  STRSC-1952, Added validity (rowstate) to TECHNICAL_COORDINATOR_TAB and update ROWSTATE from existing column BLOCKED_FOR_USE and made it to nullable.
--  160527  DAYJLK  STRSC-726, Ownership information on part serial records modified to reflect ownership information in Inventory Part In Stock.
--  160525  UdGnlk  STRSC-2289, Modified by moving the primary key creation of COUNTING_RESULT_TAB to avoid duplicate values.
--  160524  LEPESE  LIM-7474, Added columns CONTRACT and LOCATION_NO to HANDLING_UNIT_TAB. Created indexes HANDLING_UNIT_IX4 and HANDLING_UNIT_IX5.
--  160524  PrYaLK  Bug 129061, Added a new index on INVENTORY_LOCATION_TYPE in INVENTORY_LOCATION_GROUP_TAB.
--  160520  LEPESE  LIM-7363, renamed PUTAWAY_EVENT_ID columns into INVENTORY_EVENT_ID for tables HANDLING_UNIT_FOR_REFRESH_TAB and TRANSP_TASK_FOR_HU_REFRESH_TAB
--  160520  LEPESE  LIM-7363, added new sequence INVENTORY_EVENT_ID_SEQ.
--  160518  LEPESE  LIM-7363, added table HANDLING_UNIT_FOR_REFRESH_TAB.
--  160511  Chfose  Added Outermost_HU_Id column and added indexes for is_inside_hu_id and handling_unit_id
--  160511          to handling_unit_aggregation_tmp.
--  160511  LEPESE  LIM-7363, added table TRANSP_TASK_FOR_HU_REFRESH_TAB.
--  160429  TiRalk  STRSC-1787, Added rowstate to STORAGE_CAPABILITY_TAB to handle data validity.
--  160428  ManWlk  STRMF-4032, Added INVENTORY_PART_TRACING_TAB table and constraints and INVENTORY_PART_TRACING_SEQ sequence.
--  160421  JanWse  STRSC-1743, Added validity (rowstate) to PART_MOVE_ACKNOWLDG_REASON_TAB
--  160421  JanWse  STRSC-1741, Added validity (rowstate) to PART_AVAILABILITY_CONTROL_TAB
--  160420  SudJlk  STRSC-1750, Added validity (rowstate) to INVENTORY_PRODUCT_FAMILY_TAB
--  160419  SudJlk  STRSC-1749, Added validity (rowstate) to ASSET_CLASS_TAB.
--  160419  JanWse  STRSC-1766, Added validity (rowstate) to HANDLING_UNIT_CATEGORY_TAB
--  160419  JanWse  STRSC-1765, Added validity (rowstate) to WAREHOUSE_TASK_PARK_REASON_TAB
--  160418  SudJlk  STRSC-1748, Added validity (rowstate) to COMMODITY_GROUP_TAB.
--  160418  SudJlk  STRSC-1741, Added validity (rowstate) to ACCOUNTING_GROUP_TAB.
--  160415  JanWse  STRSC-1761, Added validity (rowstate) to PROPER_SHIPPING_NAME_TAB
--  160414  JanWse  STRSC-1760, Added validity (rowstate) to ADDITIONAL_SHIPPING_DESC_TAB
--  160414  JanWse  STRSC-1758, Added validity (rowstate) to PACKAGING_GROUP_TAB
--  160414  JanWse  STRSC-1757, Added validity (rowstate) to TRANSPORT_HAZARD_CLASS_TAB
--  160414  JanWse  STRSC-1759, Added validity (rowstate) to TRANSPORT_HAZARD_COMMENT_TAB
--  160414  JanWse  STRSC-1755, Added validity (rowstate) to TRANSPORT_LIMITED_QUANTITY_TAB
--  160414  JanWse  STRSC-1756, Added validity (rowstate) to PACKAGING_MATERIAL_TAB
--  160414  JanWse  STRSC-1754, Added validity (rowstate) to TUNNEL_CODE_TAB
--  160414  JanWse  STRSC-1752, Added validity (rowstate) to INVENT_VALUE_COMPARAT_TYPE_TAB
--  160414  JanWse  STRSC-1752, Added validity (rowstate) to INTERNAL_CUSTOMER_TAB
--  160414  JanWse  STRSC-1746, Added validity (rowstate) to SAFETY_INSTRUCTION_TAB
--  160412  JanWse  STRSC-1745, Added validity (rowstate) to CUSTOMS_STATISTICS_NUMBER_TAB
--  160412  JanWse  STRSC-1744, Added validity (rowstate) to INTERNAL_DESTINATION_TAB
--  160412  RaKalk  MATP-2090, Added sched_capacity to InventoryPartPlanning.
--  160411  JanWse  STRSC-1742, Added validity (rowstate) to CLASSIFICATION_STANDARD_TAB
--  160408  SudJlk  STRSC-1751, Added validity (rowstate) to INVENTORY_PRODUCT_CODE_TAB.
--  160407  SudJlk  STRSC-1740, Added validity (rowstate) to INSPECTION_RULE_TAB.
--  160406  JanWse  Added validity (rowstate) to SUPPLY_CHAIN_PART_GROUP
--  160329  Chfose  LIM-6169, Added HANDL_UNIT_STOCK_SNAPSHOT_TAB & INV_PART_STOCK_SNAPSHOT_TAB, Removed HANDLING_UNIT_AGGR_RESULT_TMP & HANDLING_UNIT_AGGR_REMAIN_TMP.
--  160310  AyAmlk  Bug 127208, Modified ROWKEY column properties of TRANS_REVAL_EVENT_TAB and TRANS_REVAL_EVENT_SHPORD_TAB by setting
--  160310          the default value as SYS_GUID() and making the column not null-able.
--  160303  LEPESE  LIM-5995, added column homogen_handl_unit_parent_id to inventory_part_avail_stock_tmp.
--  160219  JeLise  STRSC-523, Removed creation of dummy view PM_MATR_DEMAND_EXT.
--  160219  HaPulk  STRSC-1217, Removed obsolete package INVENT_WAVELINK_UTIL_API.
--  160215  ChJalk  Bug 127136, Named the columns to add the data when inserting values into the table INSPECTION_RULE_TAB.
--  160211  UdGnlk  LIM-6262, Added tables HANDLING_UNIT_AGGR_RESULT_TMP and HANDLING_UNIT_AGGR_REMAIN_TMP. Added temporary table HANDLING_UNIT_AGGREGATION_TMP.
--  160211          Added indexes HANDLING_UNIT_AGGR_RESULT_IX1, HANDLING_UNIT_AGGR_RESULT_IX2, HANDLING_UNIT_AGGR_RESULT_IX3, HANDLING_UNIT_AGGR_REMAIN_IX1
--  160211          HANDLING_UNIT_AGGR_REMAIN_IX2. Added sequence HANDLING_UNIT_AGGR_ID_SEQ.
--  160210  MaEelk  LIM-STRSC-1157, Corrected the compilation occured in the block written to upgrade drop_off_location_no in WAREHOUSE_TAB
--  160122  LEPESE  LIM-5995, added column sum_location_quantity to inventory_part_avail_stock_tmp.
--  160122  LEPESE  LIM-5994, added column homogeneous_hu_expiration_date to inventory_part_avail_stock_tmp.
--  160114  LEPESE  LIM-3742, added columns partial_hu_node_qty, partial__handling_unit_id and partial_hu_node_level to inventory_part_avail_stock_tmp.
--  160112  JeLise  STRSC-791, Changed the order of some tables due to errors caused by missing columns.
--  160112  LEPESE  LIM-3742, added columns homogenous_hu_node_qty, homogeneous__handling_unit_id and homogeneous_hu_node_level to inventory_part_avail_stock_tmp.
--  151208  NiDalk  Bug 125206, Increased the size of the column RELEASE_NO of SHORT_PART_INCREASE_HIST_TAB to 30.
--  151129  MaEelk   STRSC-502, Merged Bug 125921 to STRIKE.
--  151129           Used PLSQL without going for a direct update to avoid performance issues.
--  151126  JeLise  LIM-4470, Removed obsolete view WAREHOUSE_TASK_TYPE_NO_PALLET
--  151126  MaEelk  LIM-4472, Removed INVENT_PART_PALLET_REFILL,INVENT_PART_PALLET_REFILL_API,
--  151126           INVENT_PART_PALLET_REFILL_RK and  INVENT_PART_PALLET_REFILL_PK.
--  151126           Renamed INVENT_PART_PALLET_REFILL_TAB.
--  151125  JeLise  LIM-4932, Removed obsolete package Pallet_State_API.
--  151125  Chfose  LIM-4471, Removed obsolete views Inventory_Part_In_Stock_Nopal, Invent_Part_In_Stock_Nopal_Lov and Counting_Report_Line_Nopal
--  151124  UdGnlk  LIM-4612, Modified to obsolete pallet_tab and inventory_part_loc_pallet_tab.
--  151120  JeLise  LIM-4369, Renamed column nopall_drop_off_location_no to drop_off_location_no in WAREHOUSE_TAB and WAREHOUSE_BAY_TAB.
--  151117  JeLise  STRSC-400, Merged cdb files from Update1.
--  151117          Added dummy view PM_MATR_DEMAND_EXT. Increasing the length of the column PART_DESCRIPTION of INTRASTAT_LINE_TAB.
--  151117          Adding column CONTRACT to primary key constraint of INVENTORY_PART_BARCODE_TAB.
--  151117          Creating INDEX INVENTORY_PART_IN_TRANSIT_IX2 ON INVENTORY_PART_IN_TRANSIT_TAB.
--  151117          Create new tables TRANS_REVAL_EVENT_TAB and TRANS_REVAL_EVENT_SHPORD_TAB.
--  151117          Creating TABLE INV_PART_CONFIG_MANUF_DIFF_TAB. Inserting system defined inpection code into INSPECTION_RULE_TAB
--  151117          Adding TRANSPORT_LEADTIME to SITE_TO_SITE_LEADTIME_TAB AND SITE_TO_SITE_PART_LEADTIME_TAB.
--  151117          Creating INVENT_PART_OFFLINE_MOVE_TAB table. Creating PART_MOVE_ACKNOWLDG_REASON_TAB table.
--  151117          Added new columns SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4,
--  151117          SOURCE_REF5, SOURCE_REF_TYPE, ALT_SOURCE_REF5 TO INVENTORY_TRANSACTION_HIST_TAB
--  151117          and do the data upgrade of SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE
--  151117          by in ORDER_NO, RELEASE_NO, SEQUENCE_NO, LINE_ITEM_NO and ORDER_TYPE  in INVENTORY_TRANSACTION_HIST_TAB.
--  151117          Remove obsolete view LEVEL_1_PROJ_FORECAST_EXT.
--  151117          Update the shipment_id column with the shipment_id value connected to the top parent node in HANDLING_UNIT_TAB.
--  151117  JeLise  LIM-4600, Changed default data in insert into PART_AVAILABILITY_CONTROL_TAB.
--  151112  Chfose  LIM-4623, Added sequence TRANS_REVAL_EVENT_ID_SEQ.
--  151111  PrYaLK  STRSC-168, (Merge Bug 121643), Adding new column OPPONENT_TAX_ID into INTRASTAT_LINE_TAB.
--  151106  Chfose  LIM-4353, Removed obsolete package Inventory_Part_Loc_Pallet_RPI and view Inventory_Part_Loc_Pallet_REP.
--  151104  MaEelk  LIM-4367, ROWTYPE was made nullable in TRANSPORT_TASK_LINE_TAB.
--  151104          Removed obsolete packages TRANSPORT_TASK_LINE_NOPALL_API AND TRANSPORT_TASK_LINE_PALLET_API.
--  151104          Removed obsolete views TRANSPORT_TASK_LINE_NOPALL, TRANSPORT_TASK_LINE_NOPALL_PUB and TRANSPORT_TASK_LINE_PALLET.
--  151103  UdGnlk  LIM-3750, INVENTORY_TRANSACTION_HIST_TAB upgrade for pallet, column pallet id will be obsolete.
--  151102  UdGnlk  LIM-4403, INVENTORY_PART_TAB upgrade for pallet, made PALLET_HANDLED a nullable column.
--  151102  UdGnlk  LIM-3746, InventoryPartLocPallet upgrade since INVENTORY_PART_LOC_PALLET_TAB will be drop in order to support handling unit
--  151102          functionality. Remove the section of adding HANDLING_UNIT_ID. Adding and updating data to INVENTORY_PART_IN_STOCK_TAB.
--  151102  UdGnlk  LIM-3671, Seperate sections to HANDLING_UNIT_TYPE_TAB and HANDLING_UNIT_CATEGORY_TAB.
--  151030  MaEelk  LIM-3787, Updated the HANDLING_UNIT_ID of the TRANSPORT_TASK_LINE_TAB using the HANDLING UNIT IDs matched to the corresponding PALLET_ID.
--  151030          PALLET_ID was made nullable.
--  151030  MaEelk  LIM-3784, Updated the HANDLING_UNIT_ID of the COUNTING_RESULT_TAB using the HANDLING UNIT IDs matched to the corresponding PALLET_ID.
--  151030          PALLET_ID was made nullable.
--  151030  MaEelk  LIM-3786, Dropped the column PALLET_ID from COUNTING_REPORT_LINE_TMP
--  151030  MaEelk  LIM-3784, Updated the HANDLING_UNIT_ID of the COUNTING_REPORT_LINE_TAB
--  151030          using the HANDLING UNIT IDs matched to the corresponding PALLET_ID.
--  151030          PALLET_ID was made nullable. Removed the obsolete view COUNTING_REPORT_LINE_PALL.
--  151030  UdGnlk  LIM-3671, Pallet upgrade since PALLET_TAB will be drop in order to support handling unit functionality.
--  151028  PrYaLK  STRSC-209, (Merge Bug 124575), Adding new column DEL_TERMS_LOCATION and PLACE_OF_DELIVERY into INTRASTAT_LINE_TAB.
--  151022  JeLise  LIM-3893, Updates done to support the removal of pallet location types. Updates are done in PART_AVAILABILITY_CONTROL_TAB,
--  151022          WAREHOUSE_BAY_BIN_TAB, INVENTORY_LOCATION_GROUP_TAB, INVENTORY_PART_IN_STOCK_TAB and INVENTORY_PART_DEF_LOC_TAB.
--  151020  Chfose  Added removal of obsolete pallet specific views: Inventory_Location18, 22, 23, 24, Inventory_Location_Group_Lov,
--  151020          Pallet_Drop_Off_Location, Bay_Pallet_Drop_Off_Location and PALLET_DROP_OFF_LOV.
--  151016  PrYaLK  STRSC-46, (Merge Bug 121011), Added new SEQUENCE SI_INTRASTAT_SEQ.
--  151008  ChFolk  STRSC-22, Added new column ARRIVAL_ROUTE_ID into SITE_TO_SITE_LEADTIME_TAB and SITE_TO_SITE_PART_LEADTIME_TAB.
--  150831  UdGnlk  LIM-3601, Modified the Database_SYS command to Alter_Table_Column.
--  150813  Chfose  LIM-3532, Added new temporary table HANDLING_UNIT_TMP.
--  150626  MaEelk  LIM-3333, Renames ALT_TRANSPORT_LABEL_ID as ALT_HANDLING_UNIT_LABEL_ID on handling_unit_tab.
--  150428  MaEelk  Made the upg re-runnable.
--  150416  LEPESE  LIM-88, added index handling_unit_ix2 for parent_handling_unit_id.
--  150414  LEPESE  LIM-88, added handling_unit_id as new column in inventory_transaction_hist_tab.
--  150414  JeLise  LIM-78, Added handling_unit_id as new key column in inventory_part_in_transit_tab.
--  150414  JeLise  LIM-63, Added handling_unit_id as new key column in inventory_part_at_customer_tab.
--  150414  Chfose  LIM-53, Added handling_unit_id to COUNTING_REPORT_LINE_IX1.
--  150410  LEPESE  LIM-77, added index inventory_part_in_stock_ix2.
--  150410  LEPESE  LIM-77, added column handling_unit_id to inventory_part_avail_stock_tmp.
--  150409  Chfose  LIM-58, Added new key column handling_unit_id to counting_result_tab.
--  150408  LEPESE  LIM-77, added column handling_unit_id to counting_report_line_tmp.
--  150407  Chfose  LIM-53, Added handling_unit_id as new column in counting_report_line_tab.
--  150407  JeLise  LIM-93, Added handling_unit_id as new key column in material_requis_reservat_tab.
--  150402  LEPESE  LIM-75, added key column handling_unit_id to inventory_part_in_stock_tab.
-----------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_1');
PROMPT Start upgrading with 1500.upg

------------------------------------------------------------------------------------------
---------------------------- Instructions for upg files ----------------------------------
------------------------------------------------------------------------------------------

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-----" line and a empty line.
-- This section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line explaining what is done by the block.

-- If the Pl/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any Table/Column !

-- Don't forget performance when updating large table !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL commands
-- If possible, try to group several updates together in one statement.

-- For more information refer the "Upgrade Script Standards document and the Performance Guide.

-- Timestamps will be added automatically at the end of the project.


---------------------------------------------------------------------------------------------
--------------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ----------------------
---------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_2');
PROMPT Renaming column ALT_TRANSPORT_LABEL_ID TO ALT_HANDLING_UNIT_LABEL_ID in HANDLING_UNIT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
BEGIN
   IF (NOT Database_SYS.Column_Exist(table_name_, 'ALT_HANDLING_UNIT_LABEL_ID')) AND (Database_SYS.Column_Exist(table_name_, 'ALT_TRANSPORT_LABEL_ID')) THEN
      Database_SYS.Rename_Column(table_name_, 'ALT_HANDLING_UNIT_LABEL_ID', 'ALT_TRANSPORT_LABEL_ID', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_3');
PROMPT Adding CONTRACT, LOCATION_NO, HAS_STOCK_RESERVATION, SOURCE_REF_PART_QTY, NOTE_ID and IS_IN_STOCK to HANDLING_UNIT_TAB
PROMPT Adding column PRINT_CONTENT_LABEL, PRINT_SHIPMENT_LABEL to HANDLING_UNIT_TAB.
PROMPT Adding column NO_OF_CONTENT_LABELS, NO_OF_SHIPMENT_LABELS to HANDLING_UNIT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HAS_STOCK_RESERVATION', 'VARCHAR2(5)' , 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SOURCE_REF_PART_QTY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRINT_CONTENT_LABEL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRINT_SHIPMENT_LABEL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_OF_CONTENT_LABELS', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_OF_SHIPMENT_LABELS', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('LOCATION_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N', 'note_id.NEXTVAL', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  
   
   Database_SYS.Reset_Column(column_);   
   column_ := Database_SYS.Set_Column_Values('NOTE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('IS_IN_STOCK', 'VARCHAR2(5)' , 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_4');
PROMPT Adding ORDER_REF COLUMNS TO HANDLING_UNIT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX6';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_5');
PROMPT Creating new index HANDLING_UNIT_IX2 for PARENT_HANDLING_UNIT_ID
DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX2';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PARENT_HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_6');
PROMPT Creating new index HANDLING_UNIT_IX3 for ALT_HANDLING_UNIT_LABEL_ID in HANDLING_UNIT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX3';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

DECLARE
   CURSOR get_shipment_structure_roots IS
      SELECT handling_unit_id, shipment_id
        FROM handling_unit_tab
       WHERE shipment_id IS NOT NULL
         AND parent_handling_unit_id IS NULL;

   PROCEDURE Update_Children (
      parent_handling_unit_id_ IN NUMBER,
      shipment_id_             IN NUMBER )
   IS
      CURSOR get_children IS
         SELECT handling_unit_id
           FROM handling_unit_tab
          WHERE parent_handling_unit_id = parent_handling_unit_id_
            AND shipment_id IS NULL;
   BEGIN
      FOR child_rec_ IN get_children LOOP
         UPDATE handling_unit_tab
            SET shipment_id = shipment_id_
          WHERE handling_unit_id = child_rec_.handling_unit_id;

         Update_Children(child_rec_.handling_unit_id, shipment_id_);
      END LOOP;
   END Update_Children;
BEGIN
   FOR root_rec_ IN get_shipment_structure_roots LOOP
      Update_Children(root_rec_.handling_unit_id, root_rec_.shipment_id);
   END LOOP;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_7');
PROMPT Inserting Data INTO HANDLING_UNIT_TAB FROM PALLET_TAB
BEGIN
   IF (Database_SYS.Table_Exist('PALLET_TAB')) THEN
      EXECUTE IMMEDIATE
         'DECLARE
            suffix_   VARCHAR2(15) := '' - UPGRADE'';
         BEGIN
            INSERT
               INTO handling_unit_tab (
                      handling_unit_id,
                      handling_unit_type_id,
                      generate_sscc_no,
                      print_label,
                      mix_of_part_no_blocked,
                      mix_of_lot_batch_blocked,
                      mix_of_cond_code_blocked,
                      alt_handling_unit_label_id,
                      uom_for_length,
                      no_of_handling_unit_labels,
                      contract,
                      location_no,
                      location_type,
                      has_stock_reservation,
                      print_content_label,
                      print_shipment_label,
                      no_of_content_labels,
                      no_of_shipment_labels,
                      note_id,
                      is_in_stock,
                      rowversion)
               SELECT
                       handling_unit_seq.nextval,
                       ''PALLET'',
                       ''FALSE'',
                       ''FALSE'',
                       ''FALSE'',
                       ''FALSE'',
                       ''FALSE'',
                       pt.pallet_id||suffix_,
                       ''m'',
                       1,
                       (select distinct contract      from inventory_part_loc_pallet_tab iplp where iplp.pallet_id = pt.pallet_id and iplp.qty_onhand != 0),
                       (select distinct location_no   from inventory_part_loc_pallet_tab iplp where iplp.pallet_id = pt.pallet_id and iplp.qty_onhand != 0),
                       (select distinct location_type from inventory_part_in_stock_tab ipis where exists (select 1
                                                                                                     from inventory_part_loc_pallet_tab iplp
                                                                                                     where iplp.contract = ipis.contract
                                                                                                     and iplp.pallet_id = pt.pallet_id
                                                                                                      and iplp.location_no = ipis.location_no
                                                                                                      and iplp.qty_onhand != 0 )),
                       ''FALSE'',
                       ''FALSE'',
                       ''FALSE'',
                       1,
                       1,
                       note_id.NEXTVAL,
                       ''FALSE'',
                       SYSDATE
                       FROM pallet_tab pt
                       WHERE NOT EXISTS (SELECT 1
                                           FROM handling_unit_tab hu
                                           WHERE pt.pallet_id||suffix_ = hu.alt_handling_unit_label_id);
               COMMIT;
         END;   ';
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_8');
PROMPT Updating IS_IN_STOCK column
UPDATE handling_unit_tab
   SET is_in_stock = DECODE(location_no, NULL, 'FALSE', 'TRUE');
COMMIT;

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX4';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX5';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SSCC');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX7';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HAS_STOCK_RESERVATION');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX8';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_9');
PROMPT Creating new index HANDLING_UNIT_IX9 with IS_IN_STOCK
DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_IX9';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'IS_IN_STOCK');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** HANDLING_UNIT_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_IN_STOCK_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_10');
PROMPT Adding HANDLING_UNIT_ID TO INVENTORY_PART_IN_STOCK_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_11');
PROMPT Recreating the primary key constraint INVENTORY_PART_IN_STOCK_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_PK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_12');
PROMPT Creating NEW INDEX INVENTORY_PART_IN_STOCK_IX2 FOR handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_IX2';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_13');
PROMPT Inserting Data INTO INVENTORY_PART_IN_STOCK_TAB if pallet information FROM INVENTORY_PART_LOC_PALLET_TAB and PALLET_TAB does exists.
BEGIN
   IF ((Database_SYS.Table_Exist('PALLET_TAB')) AND (Database_SYS.Table_Exist('INVENTORY_PART_LOC_PALLET_TAB'))) THEN
   EXECUTE IMMEDIATE
         'DECLARE
            suffix_   VARCHAR2(15) := '' - UPGRADE'';
         BEGIN
            INSERT
               INTO inventory_part_in_stock_tab (
                  part_no,
                  contract,
                  configuration_id,
                  location_no,
                  lot_batch_no,
                  serial_no,
                  eng_chg_level,
                  waiv_dev_rej_no,
                  activity_seq,
                  handling_unit_id,
                  avg_unit_transit_cost,
                  freeze_flag,
                  last_activity_date,
                  location_type,
                  qty_in_transit,
                  qty_onhand,
                  qty_reserved,
                  warehouse,
                  bay_no,
                  row_no,
                  tier_no,
                  bin_no,
                  count_variance,
                  expiration_date,
                  last_count_date,
                  receipt_date,
                  source,
                  availability_control_id,
                  create_date,
                  rotable_part_pool_id,
                  catch_qty_in_transit,
                  catch_qty_onhand,
                  project_id,
                  part_ownership,
                  owning_customer_no,
                  owning_vendor_no,
                  rowversion )
               SELECT
                     iplp.part_no,
                     iplp.contract,
                     iplp.configuration_id,
                     iplp.location_no,
                     iplp.lot_batch_no,
                     iplp.serial_no,
                     iplp.eng_chg_level,
                     iplp.waiv_dev_rej_no,
                     iplp.activity_seq,
                     hu.handling_unit_id,
                     ipis.avg_unit_transit_cost,
                     ipis.freeze_flag,
                     ipis.last_activity_date,
                     ipis.location_type,
                     ipis.qty_in_transit,
                     iplp.qty_onhand,
                     CASE pt.pallet_state
                        WHEN ''RESERVED'' THEN iplp.qty_onhand
                        ELSE 0
                        END,
                     ipis.warehouse,
                     ipis.bay_no,
                     ipis.row_no,
                     ipis.tier_no,
                     ipis.bin_no,
                     ipis.count_variance,
                     ipis.expiration_date,
                     ipis.last_count_date,
                     ipis.receipt_date,
                     ipis.source,
                     ipis.availability_control_id,
                     ipis.create_date,
                     ipis.rotable_part_pool_id,
                     ipis.catch_qty_in_transit,
                     ipis.catch_qty_onhand,
                     ipis.project_id,
                     ipis.part_ownership,
                     ipis.owning_customer_no,
                     ipis.owning_vendor_no,
                     iplp.rowversion
                  FROM pallet_tab pt, handling_unit_tab hu, inventory_part_loc_pallet_tab iplp, inventory_part_in_stock_tab ipis
                  WHERE iplp.pallet_id      = pt.pallet_id
                  AND pt.pallet_id||suffix_ = hu.alt_handling_unit_label_id
                  AND iplp.part_no          = ipis.part_no
                  AND iplp.contract         = ipis.contract
                  AND iplp.configuration_id = ipis.configuration_id
                  AND iplp.location_no      = ipis.location_no
                  AND iplp.lot_batch_no     = ipis.lot_batch_no
                  AND iplp.serial_no        = ipis.serial_no
                  AND iplp.eng_chg_level    = ipis.eng_chg_level
                  AND iplp.waiv_dev_rej_no  = ipis.waiv_dev_rej_no
                  AND iplp.activity_seq     = ipis.activity_seq
                  AND 0                     = ipis.handling_unit_id
                   AND NOT EXISTS (SELECT 1
                                     FROM inventory_part_in_stock_tab ipis
                                     WHERE iplp.part_no          = ipis.part_no
                                      AND iplp.contract          = ipis.contract
                                      AND iplp.configuration_id  = ipis.configuration_id
                                      AND iplp.location_no       = ipis.location_no
                                      AND iplp.lot_batch_no      = ipis.lot_batch_no
                                      AND iplp.serial_no         = ipis.serial_no
                                      AND iplp.eng_chg_level     = ipis.eng_chg_level
                                      AND iplp.waiv_dev_rej_no   = ipis.waiv_dev_rej_no
                                      AND iplp.activity_seq      = ipis.activity_seq
                                      AND hu.handling_unit_id    = ipis.handling_unit_id);

            COMMIT;
         END;   ';
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_14');
PROMPT Modifying Data in INVENTORY_PART_IN_STOCK_TAB for the record handling_unit_id = 0
BEGIN
   IF (Database_SYS.Table_Exist('INVENTORY_PART_LOC_PALLET_TAB')) THEN
   EXECUTE IMMEDIATE
      'BEGIN
         UPDATE inventory_part_in_stock_tab ipis1
         SET  ipis1.expiration_date         = NULL,
              ipis1.availability_control_id = NULL,
              ipis1.part_ownership          = NULL,
              ipis1.owning_vendor_no        = NULL,
              ipis1.owning_customer_no      = NULL,
              ipis1.qty_onhand              = 0,
              ipis1.qty_reserved            = 0,
              ipis1.qty_in_transit          = 0,
              ipis1.catch_qty_onhand        = 0,
              ipis1.catch_qty_in_transit    = 0
         WHERE ipis1.handling_unit_id = 0
         AND ipis1.qty_onhand = (SELECT SUM(ipis2.qty_onhand)
                                  FROM inventory_part_in_stock_tab ipis2
                                 WHERE ipis2.part_no           = ipis1.part_no
                                   AND ipis2.contract          = ipis1.contract
                                   AND ipis2.configuration_id  = ipis1.configuration_id
                                   AND ipis2.location_no       = ipis1.location_no
                                   AND ipis2.lot_batch_no      = ipis1.lot_batch_no
                                   AND ipis2.serial_no         = ipis1.serial_no
                                   AND ipis2.eng_chg_level     = ipis1.eng_chg_level
                                   AND ipis2.waiv_dev_rej_no   = ipis1.waiv_dev_rej_no
                                   AND ipis2.activity_seq      = ipis1.activity_seq
                                   AND ipis2.handling_unit_id != 0)
         AND EXISTS( SELECT 1
                     FROM  inventory_part_loc_pallet_tab iplp
                     WHERE iplp.part_no          = ipis1.part_no
                       AND iplp.contract         = ipis1.contract
                       AND iplp.configuration_id = ipis1.configuration_id
                       AND iplp.location_no      = ipis1.location_no
                       AND iplp.lot_batch_no     = ipis1.lot_batch_no
                       AND iplp.serial_no        = ipis1.serial_no
                       AND iplp.eng_chg_level    = ipis1.eng_chg_level
                       AND iplp.waiv_dev_rej_no  = ipis1.waiv_dev_rej_no
                       AND iplp.activity_seq     = ipis1.activity_seq
                       AND 0                     = ipis1.handling_unit_id);
         COMMIT;
      END;   ';
   END IF;
END;
/
-- ***** INVENTORY_PART_IN_STOCK_TAB End *****

------------------------------------------------------------------------------------------

-- ***** MATERIAL_REQUIS_RESERVAT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_15');
PROMPT Adding HANDLING_UNIT_ID TO MATERIAL_REQUIS_RESERVAT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'MATERIAL_REQUIS_RESERVAT_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_16');
PROMPT Recreating the primary key constraint MATERIAL_REQUIS_RESERVAT_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'MATERIAL_REQUIS_RESERVAT_PK';
   table_name_ VARCHAR2(30) := 'MATERIAL_REQUIS_RESERVAT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'RELEASE_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_CLASS');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** MATERIAL_REQUIS_RESERVAT_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_AVAIL_STOCK_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_17');
PROMPT Adding NEW COLUMNS TO INVENTORY_PART_AVAIL_STOCK_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_AVAIL_STOCK_TMP';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID'              , 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('HOMOGENEOUS_HU_NODE_QTY'       , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('HOMOGENEOUS_HANDLING_UNIT_ID'  , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('HOMOGEN_HANDL_UNIT_PARENT_ID'  , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('HOMOGENEOUS_HU_NODE_LEVEL'     , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PARTIAL_HU_NODE_LEVEL'         , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PARTIAL_HU_NODE_QTY'           , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PARTIAL_HANDLING_UNIT_ID'      , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('HOMOGENEOUS_HU_EXPIRATION_DATE', 'DATE'  , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('HOMOGENEOUS_HU_RECEIPT_DATE'   , 'DATE'  , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SUM_LOCATION_QUANTITY'         , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('HOMOGENEOUS_HU_ZONE_RANKING'   , 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** INVENTORY_PART_AVAIL_STOCK_TMP End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_AT_CUSTOMER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_18');
PROMPT Adding HANDLING_UNIT_ID TO INVENTORY_PART_AT_CUSTOMER_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_AT_CUSTOMER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_19');
PROMPT Recreating the primary key constraint INVENTORY_PART_AT_CUSTOMER_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_AT_CUSTOMER_PK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_AT_CUSTOMER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_NO');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE');
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_TYPE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_20');
PROMPT Creating new index INVENTORY_PART_AT_CUSTOMER_IX1 for handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_AT_CUSTOMER_IX1';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_AT_CUSTOMER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENTORY_PART_AT_CUSTOMER_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_IN_TRANSIT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_21');
PROMPT Adding HANDLING_UNIT_ID TO INVENTORY_PART_IN_TRANSIT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_22');
PROMPT Recreating the primary key constraint INVENTORY_PART_IN_TRANSIT_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_PK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DELIVERING_CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_23');
PROMPT Creating new index INVENTORY_PART_IN_TRANSIT_IX2 for part_no and serial_no
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_IX2';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_24');
PROMPT Creating new index INVENTORY_PART_IN_TRANSIT_IX3 for handling_unit_id
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_TRANSIT_IX3';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENTORY_PART_IN_TRANSIT_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_TRANSACTION_HIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_25');
PROMPT Adding HANDLING_UNIT_ID TO INVENTORY_TRANSACTION_HIST_TAB
PROMPT Add New columns SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF5, SOURCE_REF_TYPE, ALT_SOURCE_REF5 TO INVENTORY_TRANSACTION_HIST_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SOURCE_REF1', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SOURCE_REF2', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SOURCE_REF3', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SOURCE_REF4', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SOURCE_REF5', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SOURCE_REF_TYPE', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ALT_SOURCE_REF5', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_26');
PROMPT Modifying Data related to handling unit id from nullable column pallet id in INVENTORY_TRANSACTION_HIST_TAB
PROMPT nullable column pallet id in INVENTORY_TRANSACTION_HIST_TAB will be obsolete
BEGIN
   IF (Database_SYS.Column_Exist('INVENTORY_TRANSACTION_HIST_TAB', 'PALLET_ID')) THEN
      EXECUTE IMMEDIATE
      'DECLARE
         suffix_   VARCHAR2(15) := '' - UPGRADE'';
      BEGIN
         UPDATE inventory_transaction_hist_tab ith
            SET ith.handling_unit_id = CASE ith.pallet_id
                                          WHEN ''*''  THEN 0
                                          ELSE (SELECT hu.handling_unit_id
                                                   FROM handling_unit_tab hu
                                                   WHERE hu.alt_handling_unit_label_id = ith.pallet_id ||suffix_)
                                       END
         WHERE pallet_id IS NOT NULL;
      END;   ';
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_27');
PROMPT Update columns SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE in INVENTORY_TRANSACTION_HIST_TAB.
DECLARE
   stmt_ VARCHAR2(4000);
BEGIN
   IF Database_SYS.Column_Exist('INVENTORY_TRANSACTION_HIST_TAB', 'ORDER_NO') THEN
      stmt_ := 'UPDATE inventory_transaction_hist_tab
                  SET source_ref1     = order_no,
                      source_ref2     = release_no,
                      source_ref3     = sequence_no,
                      source_ref4     = line_item_no,
                      source_ref_type = order_type
                WHERE (order_no     IS NOT NULL AND source_ref1     IS NULL)
                   OR (release_no   IS NOT NULL AND source_ref2     IS NULL)
                   OR (sequence_no  IS NOT NULL AND source_ref3     IS NULL)
                   OR (line_item_no IS NOT NULL AND source_ref4     IS NULL)
                   OR (order_type   IS NOT NULL AND source_ref_type IS NULL)';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_28');
PROMPT Creating INDEX INVENTORY_TRANSACTION_HIST_IX2 for INVENTORY_TRANSACTION_HIST_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_IX2';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_29');
PROMPT Creating INDEX INVENTORY_TRANSACTION_HIST_IX9 for INVENTORY_TRANSACTION_HIST_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_IX9';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ALT_SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'ALT_SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'ALT_SOURCE_REF3');
   Database_SYS.Set_Table_Column(columns_, 'ALT_SOURCE_REF4');
   Database_SYS.Set_Table_Column(columns_, 'ALT_SOURCE_REF5');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_30');
PROMPT Creating INDEX INVENTORY_TRANS_HIST_IX10 for INVENTORY_TRANSACTION_HIST_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TRANSACTION_HIST_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_TRANS_HIST_IX10';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', 'IFSAPP_INDEX');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_31');
PROMPT Update location_group and transit_location_group of RETPODSINT transactions  
BEGIN
   UPDATE inventory_transaction_hist_tab
   SET location_group         = 'INT ORDER TRANSIT',
       transit_location_group = 'INT ORDER TRANSIT'
   WHERE transaction_code     = 'RETPODSINT'
   AND location_group IS NULL;
   COMMIT;
END;
/
-- ***** INVENTORY_TRANSACTION_HIST_TAB End *****

------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_TYPE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_32');
PROMPT Adding column PRINT_CONTENT_LABEL, PRINT_SHIPMENT_LABEL to HANDLING_UNIT_TYPE_TAB.
PROMPT Adding column NO_OF_CONTENT_LABELS, NO_OF_SHIPMENT_LABELS to HANDLING_UNIT_TYPE_TAB.
PROMPT Adding columns USE_HU_RESERVATION_RANKING, NOTE_ID to HANDLING_UNIT_TYPE_TAB.
PROMPT Adding columns TRANSPORT_TASK_CAPACITY to HANDLING_UNIT_TYPE_TAB.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'HANDLING_UNIT_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRINT_CONTENT_LABEL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRINT_SHIPMENT_LABEL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_OF_CONTENT_LABELS', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_OF_SHIPMENT_LABELS', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('USE_HU_RESERVATION_RANKING', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 
   
   Database_SYS.Reset_Column(column_);   
   column_ := Database_SYS.Set_Column_Values('NOTE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);    
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TRANSPORT_TASK_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_33');
PROMPT Inserting Data INTO HANDLING_UNIT_TYPE_TAB if pallet information does not exists
BEGIN
   INSERT
      INTO handling_unit_type_tab (
         handling_unit_type_id,
         description,
         handling_unit_category_id,
         additive_volume,
         stackable,
         generate_sscc_no,
         print_label,
         no_of_handling_unit_labels,
         print_content_label,
         no_of_content_labels,
         print_shipment_label,
         no_of_shipment_labels,
         use_hu_reservation_ranking,
         note_id,
         rowversion)
      VALUES (
         'PALLET',
         'Pallet',
         'PALLET',
         'TRUE',
         'FALSE',
         'FALSE',
         'FALSE',
         1,
         'FALSE',
         1,
         'FALSE',
         1,
         'FALSE',
         note_id.NEXTVAL,
         SYSDATE );
   COMMIT;
   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_34');
PROMPT Updating NOTE_ID column in HANDLING_UNIT_TYPE_TAB.
UPDATE HANDLING_UNIT_TYPE_TAB
SET    NOTE_ID = note_id.NEXTVAL
WHERE  NOTE_ID = 0;
COMMIT;

-- ***** HANDLING_UNIT_TYPE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_CATEGORY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_35');
PROMPT ADD ROWSTATE to HANDLING_UNIT_CATEGORY_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_CATEGORY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_36');
PROMPT Inserting Data INTO HANDLING_UNIT_CATEGORY_TAB if pallet information does not EXISTS
BEGIN
   INSERT
      INTO handling_unit_category_tab (
           handling_unit_category_id,
           description,
           rowstate,
           rowversion)
     VALUES (
         'PALLET',
         'Pallet',
         'Active',
         SYSDATE );
   COMMIT;
   EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;
END;
/
-- ***** HANDLING_UNIT_CATEGORY_TAB End *****

------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_37');
PROMPT Create temporary table HANDLING_UNIT_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_ , 'HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'NODE_LEVEL',       'NUMBER', 'N');
   Database_SYS.Create_Temporary_Table (table_name_, columns_);
END;
/

-- ***** HANDLING_UNIT_TMP End *****
--
------------------------------------------------------------------------------------------

-- ***** COUNTING_REPORT_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_38');
PROMPT Adding HANDLING_UNIT_ID, CONFIRMED TO COUNTING_REPORT_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   IF( NOT Database_SYS.Column_Exist(table_name_, 'CONFIRMED' )) THEN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('CONFIRMED', 'VARCHAR2(5)', 'N', '''TRUE''', NULL, 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'ADD', column_, TRUE);

      ----------------------------------------------------------------------
      --- This code block should stay as one single unit.                ---
      --- This introduce to avoid performance issue in consecutive runs. ---
      ----------------------------------------------------------------------
      DECLARE
      BEGIN
         EXECUTE IMMEDIATE 'BEGIN
                               UPDATE COUNTING_REPORT_LINE_TAB crl
                               SET    CONFIRMED = ''FALSE''
                               WHERE NOT EXISTS (SELECT 1
                                                 FROM   COUNTING_RESULT_TAB cr
                                                 WHERE  cr.INV_LIST_NO = crl.INV_LIST_NO
                                                 AND    cr.SEQ = crl.SEQ );
                               COMMIT;
                            END;';
      END;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_39');
PROMPT Recreating the index COUNTING_REPORT_LINE_IX1 now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_IX1';
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_40');
PROMPT Creating index on CONFIRMED column.
DECLARE
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
   index_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_IX3';
   columns_     Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONFIRMED');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_41');
PROMPT Creating index on INV_LIST_NO & HANDLING_UNIT_ID.
DECLARE
   index_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_IX4';
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INV_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_42');
PROMPT Updating HANDLING_UNIT_ID of the COUNTING_REPORT_LINE_TAB using the HANDLING_UNIT_IDs FROM THE HANDLING_UNIT_TAB that match the PALLET_IDs

DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'PALLET_ID')) THEN

      stmt_ := 'UPDATE counting_report_line_tab
                SET    handling_unit_id = (SELECT handling_unit_id
                                           FROM   handling_unit_tab
                                           WHERE  alt_handling_unit_label_id = pallet_id || '' - UPGRADE'')
                WHERE  pallet_id != ''*''
                AND    HANDLING_UNIT_ID = 0';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_43');
PROMPT Making PALLET_ID column  nullable in COUNTING_REPORT_LINE_TAB

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


-- ***** COUNTING_REPORT_LINE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** COUNTING_REPORT_LINE_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_44');
PROMPT Adding HANDLING_UNIT_ID TO COUNTING_REPORT_LINE_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_LINE_TMP';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_45');
PROMPT Dropping PALLET_ID from COUNTING_REPORT_LINE_TMP
BEGIN
   Database_SYS.Alter_Table_Column('COUNTING_REPORT_LINE_TMP', 'DROP COLUMN', Database_SYS.Set_Column_Values ('PALLET_ID'));
END;
/

-- ***** COUNTING_REPORT_LINE_TMP End *****

------------------------------------------------------------------------------------------

-- ***** COUNTING_RESULT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_46');
PROMPT Adding HANDLING_UNIT_ID TO COUNTING_RESULT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'COUNTING_RESULT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_47');
PROMPT Updating HANDLING_UNIT_ID of the COUNTING_RESULT_TAB using the HANDLING_UNIT_IDs FROM THE HANDLING_UNIT_TAB that match the PALLET_IDs

DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'COUNTING_RESULT_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'PALLET_ID')) THEN

      stmt_ := 'UPDATE counting_result_tab
                SET    handling_unit_id = (SELECT handling_unit_id
                                           FROM   handling_unit_tab
                                           WHERE  alt_handling_unit_label_id = pallet_id || '' - UPGRADE'')
                WHERE  pallet_id != ''*''
                AND    HANDLING_UNIT_ID = 0';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_48');
PROMPT Updating rowversion and rowstate in counting_result_tab

UPDATE COUNTING_RESULT_TAB
   SET rowstate  = (CASE
                      WHEN rowstate IS NULL
                         THEN '<UNDEFINED>'
                      ELSE
                         rowstate
                    END),
      rowversion = (CASE
                      WHEN rowversion IS NULL
                        THEN SYSDATE
                      ELSE
                         rowversion
                    END)
WHERE rowstate IS NULL OR rowversion IS NULL;
COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_49');
PROMPT Recreating the primary key constraint COUNTING_RESULT_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'COUNTING_RESULT_PK';
   table_name_ VARCHAR2(30) := 'COUNTING_RESULT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'COUNT_DATE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_50');
PROMPT Making PALLET_ID column  nullable in COUNTING_RESULT_TAB

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'COUNTING_RESULT_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', NULL, 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** COUNTING_RESULT_TAB End *****

------------------------------------------------------------------------------------------

-- ***** TRANSPORT_TASK_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_51');
PROMPT Adding HANDLING_UNIT_ID TO TRANSPORT_TASK_LINE_TAB
PROMPT Making ROWTYPE column  nullable in TRANSPORT_TASK_LINE_TAB
PROMPT Adding RESERVED_BY_SOURCE column TO TRANSPORT_TASK_LINE_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PICK_LIST_NO', 'VARCHAR2(15)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('RESERVED_BY_SOURCE', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWTYPE', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_52');
PROMPT Recreating the index TRANSPORT_TASK_LINE_IX1 now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_IX1';
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_TASK_STATUS');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'TO_CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'TO_LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_TO_LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_53');
PROMPT Recreating the index TRANSPORT_TASK_LINE_IX2 now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_IX2';
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_TASK_STATUS');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'FROM_CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'FROM_LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_54');
PROMPT Recreating index TRANSPORT_TASK_LINE_IX3 including attributes PICK_LIST_NO and SHIPMENT_ID.
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
   index_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_IX3';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_REF1');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_REF2');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_REF3');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_REF4');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_TASK_STATUS');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_55');
PROMPT Updating HANDLING_UNIT_ID of the TRANSPORT_TASK_LINE_TAB using the HANDLING_UNIT_IDs FROM THE HANDLING_UNIT_TAB that match the PALLET_IDs
PROMPT Updating data to column RESERVED_BY_SOURCE in TRANSPORT_TASK_LINE_TAB

DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'PALLET_ID')) THEN

      stmt_ := 'UPDATE transport_task_line_tab
                SET    handling_unit_id = (SELECT handling_unit_id
                                           FROM   handling_unit_tab
                                           WHERE  alt_handling_unit_label_id = pallet_id || '' - UPGRADE'')
                WHERE  pallet_id != ''*''
                AND    HANDLING_UNIT_ID = 0';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;

   UPDATE transport_task_line_tab
      SET reserved_by_source = Fnd_Boolean_API.DB_TRUE
      WHERE order_type       = 'WORK ORDER'
      AND reserved_by_source = Fnd_Boolean_API.DB_FALSE;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_56');
PROMPT Creating new index TRANSPORT_TASK_LINE_IX4 with handling_unit_id and transport_task_status
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_TAB';
   index_name_ VARCHAR2(30) := 'TRANSPORT_TASK_LINE_IX4';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'TRANSPORT_TASK_STATUS');   
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** TRANSPORT_TASK_LINE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** TRANSPORT_TASK_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_57');
PROMPT Adding SPLIT_BY_HU_CAPACITY column to TRANSPORT_TASK_TAB.*/
DECLARE
   table_name_   VARCHAR2(30) := 'TRANSPORT_TASK_TAB';
   column_       Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SPLIT_BY_HU_CAPACITY', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** TRANSPORT_TASK_TAB End *****

------------------------------------------------------------------------------------------

-- ***** SITE_TO_SITE_LEADTIME_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_58');
PROMPT Adding new columns Arrival_ROUTE_ID, TRANSPORT_LEADTIME into SITE_TO_SITE_LEADTIME_TAB.

DECLARE
   table_name_ VARCHAR2(30) := 'SITE_TO_SITE_LEADTIME_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ARRIVAL_ROUTE_ID', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TRANSPORT_LEADTIME', 'NUMBER', 'N', 0, keep_default_=> 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SAFETY_LEAD_TIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );
END;
/

-- ***** SITE_TO_SITE_LEADTIME_TAB End *****

------------------------------------------------------------------------------------------

-- ***** SITE_TO_SITE_PART_LEADTIME_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_59');
PROMPT Adding new columns Arrival_ROUTE_ID, TRANSPORT_LEADTIME, SAFETY_LEAD_TIME into SITE_TO_SITE_PART_LEADTIME_TAB.

DECLARE
   table_name_ VARCHAR2(30) := 'SITE_TO_SITE_PART_LEADTIME_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ARRIVAL_ROUTE_ID', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TRANSPORT_LEADTIME', 'NUMBER', 'N', 0, keep_default_=> 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SAFETY_LEAD_TIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE );
END;
/
-- ***** SITE_TO_SITE_PART_LEADTIME_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INTRASTAT_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_60');
PROMPT Adding new column DEL_TERMS_LOCATION and PLACE_OF_DELIVERY into INTRASTAT_LINE_TAB.

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DEL_TERMS_LOCATION', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PLACE_OF_DELIVERY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_61');
PROMPT Adding OPPONENT_TAX_ID column to INTRASTAT_LINE_TAB.

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('OPPONENT_TAX_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'ADD', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_62');
PROMPT Increasing the length of the column PART_DESCRIPTION of INTRASTAT_LINE_TAB.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PART_DESCRIPTION', 'VARCHAR2(2000)');
   Database_SYS.Alter_Table_Column('INTRASTAT_LINE_TAB', 'M', column_, TRUE);
END;
/

-- ***** INTRASTAT_LINE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_63');
PROMPT Making PALLET_HANDLED column nullable AND adding MANDATORY_EXPIRATION_DATE IN INVENTORY_PART_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_HANDLED', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MANDATORY_EXPIRATION_DATE', 'VARCHAR2(5)' , 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END;
/

-- ***** INVENTORY_PART_TAB End *****

------------------------------------------------------------------------------------------

-- ***** PART_AVAILABILITY_CONTROL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_64');
PROMPT ADD ROWSTATE to PART_AVAILABILITY_CONTROL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'PART_AVAILABILITY_CONTROL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** PART_AVAILABILITY_CONTROL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** Updates to support removal of pallet related location types  Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_65');
PROMPT Inserting default data into PART_AVAILABILITY_CONTROL_TAB.
BEGIN
   INSERT
      INTO part_availability_control_tab (
         availability_control_id,
         description,
         part_supply_control,
         part_order_issue_control,
         part_reservation_control,
         part_manual_reserv_ctrl,
         part_scrap_control,
         part_counting_control,
         part_movement_control,
         part_noorder_issue_control,
         putaway_zone_refill_source,
         rowstate,
         rowversion )
      VALUES (
         'PALLET_BUFFER_1500_UPG',
         'Applied to Pallet Buffer locations in upgrade',
         'NETTABLE',
         'NOT ORDER ISSUE',
         'NOT AUTO RESERVATION',
         'NOT_MANUAL_RESERV',
         'SCRAPPABLE',
         'ALLOW REDUCING',
         'ALL ALLOWED',
         'NON-ORDER ISSUE',
         'FALSE',
         'Active',
         SYSDATE );
   -- Insert Data into Basic Data Translations tab
   Basic_Data_Translation_API.Insert_Basic_Data_Translation('INVENT',
                                                            'PartAvailabilityControl',
                                                            'PALLET_BUFFER_1500_UPG',
                                                            NULL,
                                                            'Applied to Pallet Buffer locations in upgrade');
   COMMIT;
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;
END;
/

BEGIN
   INSERT
      INTO part_availability_control_tab (
         availability_control_id,
         description,
         part_supply_control,
         part_order_issue_control,
         part_reservation_control,
         part_manual_reserv_ctrl,
         part_scrap_control,
         part_counting_control,
         part_movement_control,
         part_noorder_issue_control,
         putaway_zone_refill_source,
         rowstate,
         rowversion )
      VALUES (
         'PALLET_DELIVERY_1500_UPG',
         'Applied to Pallet Delivery locations in upgrade',
         'NETTABLE',
         'NOT ORDER ISSUE',
         'NOT AUTO RESERVATION',
         'NOT_MANUAL_RESERV',
         'NOT SCRAPPABLE',
         'NOT ALLOW REDUCING',
         'ALL ALLOWED',
         'NOT NON-ORDER ISSUE',
         'FALSE',
         'Active',
         SYSDATE );
   -- Insert Data into Basic Data Translations tab
   Basic_Data_Translation_API.Insert_Basic_Data_Translation('INVENT',
                                                            'PartAvailabilityControl',
                                                            'PALLET_DELIVERY_1500_UPG',
                                                            NULL,
                                                            'Applied to Pallet Delivery locations in upgrade');
   COMMIT;
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_66');
PROMPT Update WAREHOUSE_BAY_BIN_TAB with AVAILABILITY_CONTROL_ID for all pallet buffer and pallet delivery location groups in WAREHOUSE_BAY_BIN_TAB
PROMPT Update RECEIPT_TO_OCCUPIED_BLOCKED for all pallet location groups in WAREHOUSE_BAY_BIN_TAB
UPDATE warehouse_bay_bin_tab wbb
SET availability_control_id     = CASE (SELECT inventory_location_type
                                        FROM inventory_location_group_tab ilg1
                                        WHERE wbb.location_group = ilg1.location_group)
                                     WHEN 'BUFFER'   THEN NVL(availability_control_id, 'PALLET_BUFFER_1500_UPG')
                                     WHEN 'DELIVERY' THEN NVL(availability_control_id, 'PALLET_DELIVERY_1500_UPG')
                                     ELSE availability_control_id
                                  END,
    receipt_to_occupied_blocked = CASE (SELECT inventory_location_type
                                        FROM inventory_location_group_tab ilg3
                                        WHERE wbb.location_group = ilg3.location_group)
                                     WHEN 'PALLET' THEN 'TRUE'
                                     ELSE receipt_to_occupied_blocked
                                  END
WHERE EXISTS (SELECT 1
              FROM inventory_location_group_tab ilg2
              WHERE ilg2.location_group = wbb.location_group
              AND   inventory_location_type in ('BUFFER', 'DELIVERY', 'PALLET'));
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_67');
PROMPT Adding new column INVENTORY_LOCATION_TYPE_1410 to INVENTORY_LOCATION_GROUP_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_LOCATION_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('INVENTORY_LOCATION_TYPE_1410', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_68');
PROMPT All pallet related location type records will be updated in INVENTORY_LOCATION_GROUP_TAB. The new column INVENTORY_LOCATION_TYPE_1410
PROMPT will get the value from INVENTORY_LOCATION_TYPE and INVENTORY_LOCATION_TYPE will be updated to non pallet related location types
UPDATE inventory_location_group_tab
   SET inventory_location_type_1410 = inventory_location_type,
       inventory_location_type      = CASE inventory_location_type
                                         WHEN 'PALLET ARRIVAL' THEN 'ARRIVAL'
                                         WHEN 'PALLET QUALITY' THEN 'QA'
                                         WHEN 'DEEP'           THEN 'PICKING'
                                         WHEN 'PALLET'         THEN 'PICKING'
                                         WHEN 'BUFFER'         THEN 'PICKING'
                                         WHEN 'DELIVERY'       THEN 'PICKING'
                                         ELSE inventory_location_type
                                      END
WHERE inventory_location_type IN ('PALLET ARRIVAL', 'PALLET QUALITY', 'DEEP', 'PALLET', 'BUFFER', 'DELIVERY');
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_69');
PROMPT All pallet related location type records will be updated to non pallet related location types in INVENTORY_PART_IN_STOCK_TAB
UPDATE inventory_part_in_stock_tab
   SET availability_control_id = CASE location_type
                                    WHEN 'BUFFER'   THEN NVL(availability_control_id, 'PALLET_BUFFER_1500_UPG')
                                    WHEN 'DELIVERY' THEN NVL(availability_control_id, 'PALLET_DELIVERY_1500_UPG')
                                    ELSE availability_control_id
                                 END,
       location_type           = CASE location_type
                                    WHEN 'PALLET ARRIVAL' THEN 'ARRIVAL'
                                    WHEN 'PALLET QUALITY' THEN 'QA'
                                    WHEN 'DEEP'           THEN 'PICKING'
                                    WHEN 'PALLET'         THEN 'PICKING'
                                    WHEN 'BUFFER'         THEN 'PICKING'
                                    WHEN 'DELIVERY'       THEN 'PICKING'
                                    ELSE location_type
                                 END
WHERE location_type IN ('PALLET ARRIVAL', 'PALLET QUALITY', 'DEEP', 'PALLET', 'BUFFER', 'DELIVERY');
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_70');
PROMPT All pallet related location type records will be updated to non pallet related location types in INVENTORY_PART_DEF_LOC_TAB
UPDATE inventory_part_def_loc_tab
   SET location_type = CASE location_type
                          WHEN 'PALLET ARRIVAL' THEN 'ARRIVAL'
                          WHEN 'PALLET QUALITY' THEN 'QA'
                          WHEN 'DELIVERY'       THEN 'PICKING'
                          ELSE location_type
                       END
WHERE location_type IN ('PALLET ARRIVAL', 'PALLET QUALITY', 'DELIVERY');
COMMIT;

-- ***** Updates to support removal of pallet related location types  End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_BARCODE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_71');
PROMPT Adding column CONTRACT to primary key constraint of INVENTORY_PART_BARCODE_TAB
DECLARE
   columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'BARCODE_ID');
   Database_SYS.Create_Constraint('INVENTORY_PART_BARCODE_TAB', 'INVENTORY_PART_BARCODE_PK', columns_, 'P', '&IFSAPP_INDEX' );
END;
/

-- ***** INVENTORY_PART_BARCODE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** TRANS_REVAL_EVENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_72');
PROMPT Create table TRANS_REVAL_EVENT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_TAB';
   columns_    Database_SYS.ColumnTabType;
   stmt_       VARCHAR2(4000);
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EVENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PURCH_ORDER_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PURCH_LINE_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PURCH_RELEASE_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PURCH_RECEIPT_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PURCH_CHARGE_SEQUENCE_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_COMPANY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PURCH_RECEIPT_COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AVERAGE_INVOICE_PRICE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PURCH_PRICE_DIFF_PER_UNIT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLIER_INVOICE_CANCELLED', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXTERNAL_DIRECT_DELIVERY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_ORDER_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_RELEASE_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_SEQUENCE_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_LINE_ITEM_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'USER_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_STARTED', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_FINISHED', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_ONLINE_FINISHED', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_UPDATE_COUNTER', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REVALUATION_IMPOSSIBLE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   -- NOTE: A condition was added to check whether the table exists as we cannot execute the UPDATE otherwise. Then a condition is added
   --       to check whether the ROWKEY is disabled to update the column and alter the column properties by passing 'D' for keep_default_.
   IF Database_SYS.Table_Exist(table_name_) THEN
      IF Database_SYS.Is_Rowkey_Enabled_Table(table_name_) = 'FALSE' THEN

         stmt_ := 'UPDATE TRANS_REVAL_EVENT_TAB
                   SET ROWKEY = ROWID
                   WHERE ROWKEY IS NULL';
         EXECUTE IMMEDIATE stmt_;

         Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'SYS_GUID()', NULL, 'D');
      END IF;
   ELSE
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'SYS_GUID()');
   END IF;

   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_73');
PROMPT Create constraint for TRANS_REVAL_EVENT_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_PK';
   rkidx_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_RK';
   table_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EVENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** TRANS_REVAL_EVENT_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** TRANS_REVAL_EVENT_SHPORD_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_74');
PROMPT Create table TRANS_REVAL_EVENT_SHPORD_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_SHPORD_TAB';
   columns_    Database_SYS.ColumnTabType;
   stmt_       VARCHAR2(4000);
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EVENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_ORDER_NO', 'VARCHAR2(12)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_RELEASE_NO', 'VARCHAR2(4)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_SEQUENCE_NO', 'VARCHAR2(4)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_CREATED', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   -- NOTE: A condition was added to check whether the table exists as we cannot execute the UPDATE otherwise. Then a condition is added
   --       to check whether the ROWKEY is disabled to update the column and alter the column properties by passing 'D' for keep_default_.
   IF Database_SYS.Table_Exist(table_name_) THEN
      IF Database_SYS.Is_Rowkey_Enabled_Table(table_name_) = 'FALSE' THEN

         stmt_ := 'UPDATE TRANS_REVAL_EVENT_SHPORD_TAB
                   SET ROWKEY = ROWID
                   WHERE ROWKEY IS NULL';
         EXECUTE IMMEDIATE stmt_;

         Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'SYS_GUID()', NULL, 'D');
      END IF;
   ELSE
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'SYS_GUID()');
   END IF;

   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_75');
PROMPT Create constraint for TRANS_REVAL_EVENT_SHPORD_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_SHPORD_PK';
   rkidx_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_SHPORD_RK';
   table_name_ VARCHAR2(30) := 'TRANS_REVAL_EVENT_SHPORD_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EVENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_RELEASE_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHPORD_SEQUENCE_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** TRANS_REVAL_EVENT_SHPORD_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INV_PART_CONFIG_MANUF_DIFF_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_76');
PROMPT Creating TABLE INV_PART_CONFIG_MANUF_DIFF_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INV_PART_CONFIG_MANUF_DIFF_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_YEAR', 'VARCHAR2(4)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COST_BUCKET_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COST_SOURCE_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACCUMULATED_MANUF_DIFF', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_77');
PROMPT Adding INDEXES TO INV_PART_CONFIG_MANUF_DIFF_TAB table
DECLARE
   index_name_ VARCHAR2(30) := 'INV_PART_CONFIG_MANUF_DIFF_PK';
   table_name_ VARCHAR2(30) := 'INV_PART_CONFIG_MANUF_DIFF_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_YEAR');
   Database_SYS.Set_Table_Column(columns_, 'COST_BUCKET_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'COST_SOURCE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INV_PART_CONFIG_MANUF_DIFF_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INSPECTION_RULE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_78');
PROMPT Inserting system defined inpection code into  INSPECTION_RULE_TAB
DECLARE
   dummy_ NUMBER;

   CURSOR check_exist IS
      SELECT 1
      FROM INSPECTION_RULE_TAB
      WHERE INSPECTION_CODE = 'ACCEPTANCE SAMPLING';
BEGIN
   OPEN check_exist;
   FETCH check_exist INTO dummy_;
   IF (check_exist%NOTFOUND) THEN
      CLOSE check_exist;

      INSERT INTO INSPECTION_RULE_TAB (INSPECTION_CODE, DESCRIPTION, SAMPLE_PERCENT, INSPECTION_TYPE, ROWVERSION, ROWKEY) VALUES ('ACCEPTANCE SAMPLING', 'Acceptance Sampling', 100, 'PERCENT', SYSDATE, SYS_GUID());

      COMMIT;
   ELSE
      CLOSE check_exist;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_79');
PROMPT ADD ROWSTATE to SUPPLY_CHAIN_PART_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INSPECTION_RULE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** INSPECTION_RULE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** INVENT_PART_OFFLINE_MOVE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_80');
PROMPT Creating INVENT_PART_OFFLINE_MOVE_TAB table
DECLARE
   table_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EXTERNAL_OFFLINE_MOVE_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'INTERNAL_OFFLINE_MOVE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FROM_CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TO_CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FROM_LOCATION_NO', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TO_LOCATION_NO', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL', 'VARCHAR2(6)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIRST_SYNC_USER_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FIRST_SYNC_DATE_TIME', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SECOND_SYNC_USER_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SECOND_SYNC_DATE_TIME', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ERROR_DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACKNOWLEDGE_REASON_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACKNOWLEDGE_NOTE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MOVE_EXECUTION_DATE_TIME', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_81');
PROMPT Creating INVENT_PART_OFFLINE_MOVE_PK constraint
DECLARE
   index_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_PK';
   table_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'EXTERNAL_OFFLINE_MOVE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_82');
PROMPT Creating INVENT_PART_OFFLINE_MOVE_RK constraint
DECLARE
   index_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_RK';
   table_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_83');
PROMPT Creating INVENT_PART_OFFLINE_MOVE_UX1 index
DECLARE
   index_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_UX1';
   table_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INTERNAL_OFFLINE_MOVE_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_84');
PROMPT Creating INVENT_PART_OFFLINE_MOVE_IX1 index
DECLARE
   index_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_IX1';
   table_name_ VARCHAR2(30) := 'INVENT_PART_OFFLINE_MOVE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'FROM_CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'FROM_LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENT_PART_OFFLINE_MOVE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** PART_MOVE_ACKNOWLDG_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_85');
PROMPT Creating PART_MOVE_ACKNOWLDG_REASON_TAB table
DECLARE
   table_name_ VARCHAR2(30) := 'PART_MOVE_ACKNOWLDG_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ACKNOWLEDGE_REASON_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_86');
PROMPT Creating PART_MOVE_ACKNOWLDG_REASON_PK constraint
DECLARE
   index_name_ VARCHAR2(30) := 'PART_MOVE_ACKNOWLDG_REASON_PK';
   table_name_ VARCHAR2(30) := 'PART_MOVE_ACKNOWLDG_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ACKNOWLEDGE_REASON_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_87');
PROMPT Creating PART_MOVE_ACKNOWLDG_REASON_RK constraint
DECLARE
   index_name_ VARCHAR2(30) := 'PART_MOVE_ACKNOWLDG_REASON_RK';
   table_name_ VARCHAR2(30) := 'PART_MOVE_ACKNOWLDG_REASON_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** PART_MOVE_ACKNOWLDG_REASON_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_88');
PROMPT Renaming column nopall_drop_off_location_no to drop_off_location_no in WAREHOUSE_TAB.
BEGIN
   IF (NOT Database_SYS.Column_Exist('WAREHOUSE_TAB', 'DROP_OFF_LOCATION_NO')) AND (Database_SYS.Column_Exist('WAREHOUSE_TAB', 'NOPALL_DROP_OFF_LOCATION_NO')) THEN
      Database_SYS.Rename_Column('WAREHOUSE_TAB', 'DROP_OFF_LOCATION_NO', 'NOPALL_DROP_OFF_LOCATION_NO', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_89');
PROMPT Upgrade drop_off_location_no in WAREHOUSE_TAB.
DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Column_Exist('WAREHOUSE_TAB', 'PALLET_DROP_OFF_LOCATION_NO')) THEN
      stmt_ := 'UPDATE warehouse_tab
                SET drop_off_location_no = NVL(drop_off_location_no, pallet_drop_off_location_no)
                WHERE pallet_drop_off_location_no IS NOT NULL';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

-- ***** WAREHOUSE_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_BAY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_90');
PROMPT Renaming column nopall_drop_off_location_no to drop_off_location_no in WAREHOUSE_BAY_TAB.
BEGIN
   IF (NOT Database_SYS.Column_Exist('WAREHOUSE_BAY_TAB', 'DROP_OFF_LOCATION_NO')) AND (Database_SYS.Column_Exist('WAREHOUSE_BAY_TAB', 'NOPALL_DROP_OFF_LOCATION_NO')) THEN
      Database_SYS.Rename_Column('WAREHOUSE_BAY_TAB', 'DROP_OFF_LOCATION_NO', 'NOPALL_DROP_OFF_LOCATION_NO', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_91');
PROMPT Upgrade drop_off_location_no in WAREHOUSE_BAY_TAB.
DECLARE
   stmt_ VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Column_Exist('WAREHOUSE_BAY_TAB', 'PALLET_DROP_OFF_LOCATION_NO')) THEN
      stmt_ := 'UPDATE warehouse_bay_tab
                SET drop_off_location_no = NVL(drop_off_location_no, pallet_drop_off_location_no)
                WHERE pallet_drop_off_location_no IS NOT NULL';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

-- ***** WAREHOUSE_BAY_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** SHORT_PART_INCREASE_HIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_92');
PROMPT Increasing the size of the column RELEASE_NO of SHORT_PART_INCREASE_HIST_TAB to 30.
DECLARE
   columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RELEASE_NO', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table('SHORT_PART_INCREASE_HIST_TAB', columns_, TRUE);
END;
/

-- ***** SHORT_PART_INCREASE_HIST_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** HANDL_UNIT_STOCK_SNAPSHOT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_93');
PROMPT Adding new table HANDL_UNIT_STOCK_SNAPSHOT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'HANDL_UNIT_STOCK_SNAPSHOT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE',  'VARCHAR2(20)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',         'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',      'VARCHAR2(35)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'OUTERMOST',        'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'OUTERMOST_HU_ID',  'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_CONTROL',  'VARCHAR2(200)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',       'DATE',           'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',           'VARCHAR2(50)',   'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_94');
PROMPT Creating constraints FOR HANDL_UNIT_STOCK_SNAPSHOT_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'HANDL_UNIT_STOCK_SNAPSHOT_PK';
   rkidx_name_ VARCHAR2(30) := 'HANDL_UNIT_STOCK_SNAPSHOT_RK';
   table_name_ VARCHAR2(30) := 'HANDL_UNIT_STOCK_SNAPSHOT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_95');
PROMPT Creating new index HANDL_UNIT_STOCK_SNAPSHOT_IX1 in HANDL_UNIT_STOCK_SNAPSHOT_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'HANDL_UNIT_STOCK_SNAPSHOT_IX1';
   table_name_ VARCHAR2(30) := 'HANDL_UNIT_STOCK_SNAPSHOT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'PROCESS_CONTROL');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** HANDL_UNIT_STOCK_SNAPSHOT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INV_PART_STOCK_SNAPSHOT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_96');
PROMPT Adding new TABLE INV_PART_STOCK_SNAPSHOT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INV_PART_STOCK_SNAPSHOT_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5',      'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE',  'VARCHAR2(20)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',         'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',          'VARCHAR2(25)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',      'VARCHAR2(35)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',     'VARCHAR2(20)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',        'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',  'VARCHAR2(15)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',    'VARCHAR2(6)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',     'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY',         'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',       'DATE',           'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',           'VARCHAR2(50)',   'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_97');
PROMPT Creating constraints FOR INV_PART_STOCK_SNAPSHOT_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'INV_PART_STOCK_SNAPSHOT_PK';
   rkidx_name_ VARCHAR2(30) := 'INV_PART_STOCK_SNAPSHOT_RK';
   table_name_ VARCHAR2(30) := 'INV_PART_STOCK_SNAPSHOT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INV_PART_STOCK_SNAPSHOT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_AGGREGATION_TMP Start *****

DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_AGGREGATION_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HAS_BEEN_CHECKED',       'VARCHAR2(5)',    'N', '''FALSE''');
   Database_SYS.Set_Table_Column(columns_, 'AGGREGATION_NEEDED',     'VARCHAR2(5)',    'N', '''FALSE''');
   Database_SYS.Set_Table_Column(columns_, 'OUTERMOST',              'VARCHAR2(5)',    'N', '''TRUE''');
   Database_SYS.Set_Table_Column(columns_, 'OUTERMOST_HU_ID',        'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'IS_INSIDE_HU_ID',        'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',                'VARCHAR2(25)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',               'VARCHAR2(5)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',       'VARCHAR2(50)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',            'VARCHAR2(35)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',           'VARCHAR2(20)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',              'VARCHAR2(50)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',          'VARCHAR2(6)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',        'VARCHAR2(15)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',           'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID',       'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY',               'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'NODE_LEVEL',             'NUMBER',         'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_AGGREGATION_IX1';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_AGGREGATION_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'IS_INSIDE_HU_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_AGGREGATION_IX2';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_AGGREGATION_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** HANDLING_UNIT_AGGREGATION_TMP End *****

---------------------------------------------------------------------------------------------

-- ***** SUPPLY_CHAIN_PART_GROUP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_98');
PROMPT ADD ROWSTATE to SUPPLY_CHAIN_PART_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SUPPLY_CHAIN_PART_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SUPPLY_CHAIN_PART_GROUP End *****
---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PRODUCT_CODE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_99');
PROMPT ADD ROWSTATE to INVENTORY_PRODUCT_CODE_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PRODUCT_CODE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** INVENTORY_PRODUCT_CODE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CLASSIFICATION_STANDARD_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_100');
PROMPT ADD ROWSTATE to CLASSIFICATION_STANDARD_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'CLASSIFICATION_STANDARD_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** CLASSIFICATION_STANDARD_TAB End *****


-- ***** INVENTORY_PART_PLANNING_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_101');
PROMPT Adding SAFETY_LEAD_TIME AND SCHED_CAPACITY TO INVENTORY_PART_PLANNING_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_PLANNING_TAB';
   columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SAFETY_LEAD_TIME', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'SCHED_CAPACITY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_102');
PROMPT Copying values to SCHED_CAPACITY column from MANUF_PART_ATTRIBUTE_TAB
BEGIN
   IF Database_SYS.Table_Exist('MANUF_PART_ATTRIBUTE_TAB') AND
      Database_SYS.Column_Exist('MANUF_PART_ATTRIBUTE_TAB','SCHED_CAPACITY') THEN
      EXECUTE IMMEDIATE
         'UPDATE INVENTORY_PART_PLANNING_TAB pl
            SET pl.SCHED_CAPACITY = (SELECT attr.SCHED_CAPACITY FROM MANUF_PART_ATTRIBUTE_TAB attr WHERE attr.contract = pl.contract AND attr.part_no = pl.part_no)
          WHERE pl.SCHED_CAPACITY IS NULL
            AND EXISTS (SELECT 1 FROM MANUF_PART_ATTRIBUTE_TAB attr WHERE attr.contract = pl.contract AND attr.part_no = pl.part_no)';

   END IF;

   UPDATE INVENTORY_PART_PLANNING_TAB
      SET SCHED_CAPACITY = 'I'
    WHERE SCHED_CAPACITY IS NULL;

   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_103');
PROMPT Make SCHED_CAPACITY NOT NULL
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_PLANNING_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SCHED_CAPACITY', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** INVENTORY_PART_PLANNING_TAB End *****

-- ***** ASSORTMENT_INVENT_DEF_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_104');
PROMPT Adding column SAFETY_LEAD_TIME to ASSORTMENT_INVENT_DEF_TAB.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'ASSORTMENT_INVENT_DEF_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SAFETY_LEAD_TIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** ASSORTMENT_INVENT_DEF_TAB End *****
--
---------------------------------------------------------------------------------------------

-- ***** INTERNAL_DESTINATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_105');
PROMPT ADD ROWSTATE to INTERNAL_DESTINATION_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INTERNAL_DESTINATION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** INTERNAL_DESTINATION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMS_STATISTICS_NUMBER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_106');
PROMPT ADD ROWSTATE to CUSTOMS_STATISTICS_NUMBER_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMS_STATISTICS_NUMBER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** CUSTOMS_STATISTICS_NUMBER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SAFETY_INSTRUCTION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_107');
PROMPT ADD ROWSTATE to SAFETY_INSTRUCTION_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SAFETY_INSTRUCTION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SAFETY_INSTRUCTION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INTERNAL_CUSTOMER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_108');
PROMPT ADD ROWSTATE to INTERNAL_CUSTOMER_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INTERNAL_CUSTOMER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** INTERNAL_CUSTOMER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INVENT_VALUE_COMPARAT_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_109');
PROMPT ADD ROWSTATE to INVENT_VALUE_COMPARAT_TYPE_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENT_VALUE_COMPARAT_TYPE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** INVENT_VALUE_COMPARAT_TYPE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** TUNNEL_CODE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_110');
PROMPT ADD ROWSTATE to TUNNEL_CODE_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'TUNNEL_CODE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** TUNNEL_CODE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PACKAGING_MATERIAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_111');
PROMPT ADD ROWSTATE to PACKAGING_MATERIAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'PACKAGING_MATERIAL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** PACKAGING_MATERIAL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** TRANSPORT_LIMITED_QUANTITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_112');
PROMPT ADD ROWSTATE to TRANSPORT_LIMITED_QUANTITY_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_LIMITED_QUANTITY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** TRANSPORT_LIMITED_QUANTITY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** TRANSPORT_HAZARD_COMMENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_113');
PROMPT ADD ROWSTATE to TRANSPORT_HAZARD_COMMENT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_HAZARD_COMMENT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** TRANSPORT_HAZARD_COMMENT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** TRANSPORT_HAZARD_CLASS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_114');
PROMPT ADD ROWSTATE to TRANSPORT_HAZARD_CLASS_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSPORT_HAZARD_CLASS_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** TRANSPORT_HAZARD_CLASS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ADDITIONAL_SHIPPING_DESC_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_115');
PROMPT ADD ROWSTATE to ADDITIONAL_SHIPPING_DESC_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'ADDITIONAL_SHIPPING_DESC_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** ADDITIONAL_SHIPPING_DESC_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PACKAGING_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_116');
PROMPT ADD ROWSTATE to PACKAGING_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'PACKAGING_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** PACKAGING_GROUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PROPER_SHIPPING_NAME_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_117');
PROMPT ADD ROWSTATE to PROPER_SHIPPING_NAME_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'PROPER_SHIPPING_NAME_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** PROPER_SHIPPING_NAME_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** COMMODITY_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_118');
PROMPT ADD ROWSTATE to COMMODITY_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'COMMODITY_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** COMMODITY_GROUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ACCOUNTING_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_119');
PROMPT ADD ROWSTATE to ACCOUNTING_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'ACCOUNTING_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** ACCOUNTING_GROUP_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** ASSET_CLASS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_120');
PROMPT Adding columns SAFETY_LEAD_TIME and ROWSTATE to ASSET_CLASS_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'ASSET_CLASS_TAB';
   columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SAFETY_LEAD_TIME', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE',         'VARCHAR2(20)', 'N',  '''Active''', keep_default_ => 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/
-- ***** ASSET_CLASS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TASK_PARK_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_121');
PROMPT ADD ROWSTATE to WAREHOUSE_TASK_PARK_REASON_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_PARK_REASON_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** WAREHOUSE_TASK_PARK_REASON_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** INVENTORY_PRODUCT_FAMILY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_122');
PROMPT ADD ROWSTATE to INVENTORY_PRODUCT_FAMILY_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PRODUCT_FAMILY_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** INVENTORY_PRODUCT_FAMILY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PART_MOVE_ACKNOWLDG_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_123');
PROMPT ADD ROWSTATE to PART_MOVE_ACKNOWLDG_REASON_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'PART_MOVE_ACKNOWLDG_REASON_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** PART_MOVE_ACKNOWLDG_REASON_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_TRACING_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_124');
PROMPT Adding new table INVENTORY_PART_TRACING_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TRACING_TAB';
   columns_    Database_SYS.ColumnTabType;   
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TREE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NODE_ID', 'NUMBER', 'N');   
   Database_SYS.Set_Table_Column(columns_, 'PARENT_NODE_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NODE_LEVEL', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_125');
PROMPT Creating INVENTORY_PART_TRACING_PK constraint
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_TRACING_PK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TRACING_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'TREE_ID');
   Database_SYS.Set_Table_Column(columns_, 'NODE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_126');
PROMPT Creating INVENTORY_PART_TRACING_RK constraint
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_TRACING_RK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_TRACING_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENTORY_PART_TRACING_TAB End *****
-------------------------------------------------------------------------------------------------------------
--
-- ***** STORAGE_CAPABILITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_127');
PROMPT ADD ROWSTATE to STORAGE_CAPABILITY_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'STORAGE_CAPABILITY_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** STORAGE_CAPABILITY_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_FOR_REFRESH_TAB Start *****

DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_FOR_REFRESH_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_EVENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_CREATED', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_FOR_REFRESH_PK';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_FOR_REFRESH_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_EVENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_FOR_REFRESH_RK';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_FOR_REFRESH_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_FOR_REFRESH_IX1';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_FOR_REFRESH_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_CREATED');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** HANDLING_UNIT_FOR_REFRESH_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** PUTAWAY_TO_EMPTY_EVENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_128');
PROMPT Renaming column PUTAWAY_EVENT_ID TO INVENTORY_EVENT_ID in PUTAWAY_TO_EMPTY_EVENT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_TAB';
BEGIN
   IF (NOT Database_SYS.Column_Exist(table_name_, 'INVENTORY_EVENT_ID')) AND (Database_SYS.Column_Exist(table_name_, 'PUTAWAY_EVENT_ID')) THEN
      Database_SYS.Rename_Column(table_name_, 'INVENTORY_EVENT_ID', 'PUTAWAY_EVENT_ID', TRUE);
   END IF;
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_PK';
   table_name_ VARCHAR2(30) := 'PUTAWAY_TO_EMPTY_EVENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_EVENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** PUTAWAY_TO_EMPTY_EVENT_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** REMOTE_WHSE_REFILL_EVENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_129');
PROMPT Renaming column PUTAWAY_EVENT_ID TO INVENTORY_EVENT_ID in REMOTE_WHSE_REFILL_EVENT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_TAB';
BEGIN
   IF (NOT Database_SYS.Column_Exist(table_name_, 'INVENTORY_EVENT_ID')) AND (Database_SYS.Column_Exist(table_name_, 'PUTAWAY_EVENT_ID')) THEN
      Database_SYS.Rename_Column(table_name_, 'INVENTORY_EVENT_ID', 'PUTAWAY_EVENT_ID', TRUE);
   END IF;
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_PK';
   table_name_ VARCHAR2(30) := 'REMOTE_WHSE_REFILL_EVENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_EVENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** REMOTE_WHSE_REFILL_EVENT_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_LOCATION_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_130');
PROMPT Create new index on INVENTORY_LOCATION_TYPE in INVENTORY_LOCATION_GROUP_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_LOCATION_GROUP_IX1';
   table_name_ VARCHAR2(30) := 'INVENTORY_LOCATION_GROUP_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_LOCATION_TYPE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENTORY_LOCATION_GROUP_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** PART_SERIAL_CATALOG_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_131');
PROMPT Update of part ownership information in PART_SERIAL_CATALOG_TAB
BEGIN
   UPDATE part_serial_catalog_tab psc
      SET part_ownership    = 'COMPANY OWNED',
         owning_customer_no = NULL,
         owning_vendor_no   = NULL
      WHERE EXISTS (SELECT 1
                      FROM inventory_part_in_stock_tab ipis
                     WHERE ipis.part_no        = psc.part_no
                       AND ipis.serial_no      = psc.serial_no
                       AND (ipis.qty_onhand    = 1 OR ipis.qty_in_transit = 1)
                       AND ipis.part_ownership = 'COMPANY OWNED')
      AND psc.part_ownership = 'CUSTOMER OWNED';

   COMMIT;
END;
/

-- ***** PART_SERIAL_CATALOG_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** TECHNICAL_COORDINATOR_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_132');
PROMPT Adding ROWSTATE to TECHNICAL_COORDINATOR_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'TECHNICAL_COORDINATOR_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'TECHNICAL_COORDINATOR_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'BLOCKED_FOR_USE')) THEN
      stmt_ := 'UPDATE technical_coordinator_tab
                SET    rowstate = CASE
                                    WHEN (blocked_for_use = ''TRUE'') THEN
                                       ''Blocked''
                                    ELSE
                                       ''Active''
                                    END
                WHERE  rowstate IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_133');
PROMPT Update ROWSTATE to NOT NULL and BLOCKED_FOR_USE to NULL
DECLARE
   table_name_ VARCHAR2(30) := 'TECHNICAL_COORDINATOR_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** TECHNICAL_COORDINATOR_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_PLANNER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_134');
PROMPT Adding ROWSTATE to INVENTORY_PART_PLANNER_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_PLANNER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'INVENTORY_PART_PLANNER_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'BLOCKED_FOR_USE')) THEN
      stmt_ := 'UPDATE inventory_part_planner_tab
                SET    rowstate = CASE
                                    WHEN (blocked_for_use = ''TRUE'') THEN
                                       ''Blocked''
                                    ELSE
                                       ''Active''
                                    END
                WHERE  rowstate IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_135');
PROMPT Update ROWSTATE to NOT NULL and BLOCKED_FOR_USE to NULL
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_PLANNER_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** INVENTORY_PART_PLANNER_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SITE_INVENT_INFO_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_136');
PROMPT Adding NEW COLUMNS to SITE_INVENT_INFO_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('FREEZE_STOCK_COUNT_REPORT',  'VARCHAR2(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('COUNTING_PRINT_REPORT_OPT', 'VARCHAR2(20)', 'N', '''DETAILED''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('MOVE_RESERVATION_OPTION', 'VARCHAR2(20)', 'N', '''NOT_ALLOWED''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICK_BY_CHOICE_OPTION', 'VARCHAR2(20)', 'N', '''NOT_ALLOWED''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AUTO_RESERVE_PRIO1', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AUTO_RESERVE_PRIO2', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AUTO_RESERVE_PRIO3', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AUTO_RESERVE_PRIO4', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AUTO_RESERVE_PRIO5', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AUTO_RESERVE_HU_OPTIMIZED',  'VARCHAR2(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AUTO_RESERVE_RECEIPT_TIME',  'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
	   
   -- This default value for IPR_ACTIVE will get changed from a post installation script,
   -- depending on whether the INVPLA module installed or not.
   column_ := Database_SYS.Set_Column_Values('IPR_ACTIVE',  'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RESERV_FROM_TRANSP_TASK',  'VARCHAR2(20)', 'N', '''NO''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_137');
PROMPT Assigning VALUES TO the AUTO_RESERVE_PRIO1..5 COLUMNS IN site_invent_info_tab.
DECLARE
BEGIN
   IF Database_SYS.Column_Exist('SITE_INVENT_INFO_TAB','USE_ZONE_RANK_AUTO_RESERV') THEN
      EXECUTE IMMEDIATE
      'UPDATE site_invent_info_tab
         SET auto_reserve_prio1 = CASE use_zone_rank_auto_reserv WHEN ''TRUE'' THEN ''PUTAWAY_ZONE_RANKING'' ELSE ''EXPIRATION_DATE''     END,
             auto_reserve_prio2 = CASE use_zone_rank_auto_reserv WHEN ''TRUE'' THEN ''EXPIRATION_DATE''      ELSE ''RECEIPT_DATE''        END,
             auto_reserve_prio3 = CASE use_zone_rank_auto_reserv WHEN ''TRUE'' THEN ''RECEIPT_DATE''         ELSE ''HANDLING_UNIT_QTY''   END,
             auto_reserve_prio4 = CASE use_zone_rank_auto_reserv WHEN ''TRUE'' THEN ''HANDLING_UNIT_QTY''    ELSE ''HANDLING_UNIT_LEVEL'' END,
             auto_reserve_prio5 = CASE use_zone_rank_auto_reserv WHEN ''TRUE'' THEN ''HANDLING_UNIT_LEVEL''  ELSE NULL                    END
         WHERE auto_reserve_prio1 IS NULL';
         COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_138');
PROMPT Making obsolete COLUMN USE_ZONE_RANK_AUTO_RESERV IN SITE_INVENT_INFO_TAB INTO nullable.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SITE_INVENT_INFO_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_ZONE_RANK_AUTO_RESERV', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** SITE_INVENT_INFO_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** MATERIAL_REQUISITION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_139');
PROMPT Adding  CREATED_BY_USER_ID to MATERIAL_REQUISITION_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'MATERIAL_REQUISITION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CREATED_BY_USER_ID',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_140');
PROMPT Creating an index MATERIAL_REQUISITION_IX1 for column CREATED_BY_USER_ID of MATERIAL_REQUISITION_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'MATERIAL_REQUISITION_IX1';
   table_name_ VARCHAR2(30) := 'MATERIAL_REQUISITION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CREATED_BY_USER_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** MATERIAL_REQUISITION_TAB End *****


--------------------------------------------------------------------------------------------

-- ***** COUNTING_REPORT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_141');
PROMPT Adding  FREEZE_STOCK_COUNT_REPORT and COUNTING_PRINT_REPORT_OPT to COUNTING_REPORT_TAB.
PROMPT Adding  EXCLUDE_ATTACHED_TO_HU, EXCLUDE_NOT_ATTACHED_TO_HU, HANDLING_UNIT_TYPE_ID, TOP_HANDLING_UNIT_TYPE_ID, HANDLING_CATEGORY_TYPE_ID and TOP_HANDLING_CATEGORY_TYPE_ID into COUNTING_REPORT_TAB.
PROMPT Adding  EXCLUDE_SUPPLIER_RENTED AND EXCLUDE_COMP_RENTAL_ASSET INTO COUNTING_REPORT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'COUNTING_REPORT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);

   column_ := Database_SYS.Set_Column_Values('DETAIL_REPORT_PRINTED', 'VARCHAR2(20)', 'N', '''N''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('AGGREGATED_REPORT_PRINTED', 'VARCHAR2(20)', 'N', '''N''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('INCLUDE_FULL_QTY_OF_HU', 'VARCHAR2(1)', 'N', '''N''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('TOP_HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('HANDLING_CATEGORY_TYPE_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('TOP_HANDLING_CATEGORY_TYPE_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('EXCLUDE_ATTACHED_TO_HU', 'VARCHAR2(1)', 'N', '''N''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('EXCLUDE_NOT_ATTACHED_TO_HU', 'VARCHAR2(1)', 'N', '''N''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('EXCLUDE_SUPPLIER_RENTED', 'VARCHAR2(20)', 'N', '''INCLUDE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('EXCLUDE_COMP_RENTAL_ASSET', 'VARCHAR2(20)', 'N', '''INCLUDE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** COUNTING_REPORT_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_RESERVATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_142');
PROMPT creating INVENTORY_PART_RESERVATION_TAB table.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL', 'VARCHAR2(6)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QTY_RESERVED', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QTY_PICKED', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QTY_ISSUED', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_QTY_PICKED', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_QTY_ISSUED', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LAST_ACTIVITY_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FULLY_PICKED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_143');
PROMPT creating PRIMARY KEY OF INVENTORY_PART_RESERVATION_TAB table.
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_PK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_144');
PROMPT creating UNIQUE CONSTRAINT for INVENTORY_PART_RESERVATION_TAB table
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_RK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_145');
PROMPT Creating index INVENTORY_PART_RESERVATION_IX1 on SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4 and SOURCE_REF_TYPE.
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_IX1';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_146');
PROMPT Creating index INVENTORY_PART_RESERVATION_IX2 on PICK_LIST_NO for INVENTORY_PART_RESERVATION_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_IX2';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'FULLY_PICKED');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_147');
PROMPT Creating index INVENTORY_PART_RESERVATION_IX3 on SHIPMENT_ID.
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_IX3';
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INVENTORY_PART_RESERVATION_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INVENTORY_PICK_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_148');
PROMPT creating INVENTORY_PICK_LIST_TAB table.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PICK_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO',               'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID',                'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRINTED',                    'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',                   'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_INVENTORY_LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP',             'VARCHAR2(5)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'DATE_CREATED',               'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                     'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_149');
PROMPT creating PRIMARY KEY OF INVENTORY_PICK_LIST_TAB table.
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PICK_LIST_PK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PICK_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_150');
PROMPT creating UNIQUE CONSTRAINT for INVENTORY_PICK_LIST_TAB table
DECLARE
   index_name_ VARCHAR2(30) := 'INVENTORY_PICK_LIST_RK';
   table_name_ VARCHAR2(30) := 'INVENTORY_PICK_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_151');
PROMPT Creating index INVENTORY_PICK_LIST_IX1 on SHIPMENT_ID and PRINTED for INVENTORY_PICK_LIST_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PICK_LIST_TAB';
   index_name_ VARCHAR2(30) := 'INVENTORY_PICK_LIST_IX1';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'PRINTED');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** INVENTORY_PICK_LIST_TAB End *****

------------------------------------------------------------------------------------------


-- ***** PACKING_INSTRUCTION_NODE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_152');
PROMPT Adding column PRINT_CONTENT_LABEL, PRINT_SHIPMENT_LABEL to PACKING_INSTRUCTION_NODE_TAB.
PROMPT Adding column NO_OF_CONTENT_LABELS, NO_OF_SHIPMENT_LABELS to PACKING_INSTRUCTION_NODE_TAB.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'PACKING_INSTRUCTION_NODE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRINT_CONTENT_LABEL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRINT_SHIPMENT_LABEL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_OF_CONTENT_LABELS', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_OF_SHIPMENT_LABELS', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

END;
/
-- ***** PACKING_INSTRUCTION_NODE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** HANDLING_UNIT_HISTORY_TAB Start *****

DECLARE
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'GENERATE_SSCC_NO', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_LABEL', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_CONTENT_LABEL', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_SHIPMENT_LABEL', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_PART_NO_BLOCKED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_LOT_BATCH_BLOCKED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MIX_OF_COND_CODE_BLOCKED', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SSCC', 'VARCHAR2(18)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NO_OF_HANDLING_UNIT_LABELS', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NO_OF_CONTENT_LABELS', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NO_OF_SHIPMENT_LABELS', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_PART_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HAS_STOCK_RESERVATION', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STRUCTURE_LEVEL', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPOSITION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADJUSTED_NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TARE_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADJUST_OPERAT_GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATEGORY_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDITIVE_VOLUME', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_VOLUME_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_WEIGHT_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STACKABLE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'NOTE_TEXT', 'VARCHAR2(2000)', 'Y');   
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_PK';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_RK';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_IX1';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_IX2';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PARENT_HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_IX3';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_IX4';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_IX5';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SSCC');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_IX6';
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** HANDLING_UNIT_HISTORY_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** ACCESSORY_ON_HU_HISTORY_TAB Start *****

DECLARE
   table_name_ VARCHAR2(30) := 'ACCESSORY_ON_HU_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO',                'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID',           'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY',                   'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                 'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                     'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'ACCESSORY_ON_HU_HISTORY_PK';
   table_name_ VARCHAR2(30) := 'ACCESSORY_ON_HU_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE_NO');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ACCESSORY_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'ACCESSORY_ON_HU_HISTORY_RK';
   table_name_ VARCHAR2(30) := 'ACCESSORY_ON_HU_HISTORY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** ACCESSORY_ON_HU_HISTORY_TAB End *****

--------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------

-- ****** LANGUAGE_SYS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_153');
PROMPT Removing WADACO process COUNT_PER_COUNT_REPORT from basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'COUNT_PER_COUNT_REPORT';
   path_search_    VARCHAR2(40) := '%_INVENT.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'INVENT';   

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_154');
PROMPT Removing WADACO process PROCESS_TRANSPORT_TASK from basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'PROCESS_TRANSPORT_TASK';
   path_search_    VARCHAR2(40) := '%_INVENT.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'INVENT';   

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

-- ****** LANGUAGE_SYS_TAB End *****

-------------------------------------------------------------------------------------------------

-- ***** INVENT_INFO_SERVICES_RPT Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_155');
PROMPT CHANGE THE TABLESPACE TO IFSAPP_REPORT_INDEX IF THE INDEX INVENT_INFO_SERVICES_RPT_PK IS created ON another TABLESPACE.
BEGIN
   IF (Database_SYS.Get_Tablespace_Name('INVENT_INFO_SERVICES_RPT_PK') <> ('&IFSAPP_REPORT_INDEX')) THEN
      Database_Sys.Move_Object('INVENT_INFO_SERVICES_RPT_PK', '&IFSAPP_REPORT_INDEX', TRUE);
   END IF;
END;
/

-- ***** NVENT_INFO_SERVICES_RPT End *****
 
--------------------------------------------------------------------------------------------

-- ***** COMPANY_INVENT_INFO_TAB Start *****
-- This default value for IPR_ACTIVE will get changed from a post installation script,
-- depending on whether the INVPLA module installed or not.
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_156');
PROMPT Adding IPR_ACTIVE flag TO COMPANY_INVENT_INFO_TAB
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'COMPANY_INVENT_INFO_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('IPR_ACTIVE', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** COMPANY_INVENT_INFO_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** INVENTORY_TEMPLATE_PART_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_157');
PROMPT ADD ROWSTATE to INVENTORY_TEMPLATE_PART_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_TEMPLATE_PART_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** INVENTORY_TEMPLATE_PART_TAB End *****

-----------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_STATUS_PAR_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_158');
PROMPT ADD ROWSTATE to INVENTORY_PART_STATUS_PAR_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_STATUS_PAR_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** INVENTORY_PART_STATUS_PAR_TAB End *****

-----------------------------------------------------------------------------------------------

-- ***** HU_SNAPSHOT_FOR_REFRESH_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_159');
PROMPT Adding new table HU_SNAPSHOT_FOR_REFRESH_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'HU_SNAPSHOT_FOR_REFRESH_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_EVENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATE_TIME_CREATED', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HU_SNAPSHOT_FOR_REFRESH_PK';
   table_name_ VARCHAR2(30) := 'HU_SNAPSHOT_FOR_REFRESH_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF5');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_EVENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'HU_SNAPSHOT_FOR_REFRESH_RK';
   table_name_ VARCHAR2(30) := 'HU_SNAPSHOT_FOR_REFRESH_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** HU_SNAPSHOT_FOR_REFRESH_TAB End *****

-----------------------------------------------------------------------------------------------

-- ***** SITE_PUTAWAY_ZONE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_160');
PROMPT Adding HANDL_UNIT_RESERVATION_RANKING to SITE_PUTAWAY_ZONE_TAB.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'SITE_PUTAWAY_ZONE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDL_UNIT_RESERVATION_RANKING', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_161');
PROMPT set HANDL_UNIT_RESERVATION_RANKING to same value as RANKING in SITE_PUTAWAY_ZONE_TAB and make it mandatory.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'SITE_PUTAWAY_ZONE_TAB';
BEGIN
   UPDATE SITE_PUTAWAY_ZONE_TAB
      SET handl_unit_reservation_ranking = ranking
    WHERE handl_unit_reservation_ranking IS NULL;
   COMMIT;
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDL_UNIT_RESERVATION_RANKING', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** SITE_PUTAWAY_ZONE_TAB End *****

-----------------------------------------------------------------------------------------------

-- ***** INVENTORY_PART_IN_STOCK_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_162');
PROMPT Creating temporary table INVENTORY_PART_IN_STOCK_TMP.

DECLARE
   table_name_ VARCHAR2(30) := 'INVENTORY_PART_IN_STOCK_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT'        , 'VARCHAR2(5)' , 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO'         , 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO'     , 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO'    , 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO'       , 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL'   , 'VARCHAR2(6)' , 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO' , 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ'    , 'NUMBER'      , 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER'      , 'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

-- ***** INVENTORY_PART_IN_STOCK_TMP End *****

-----------------------------------------------------------------------------------------------

-- ***** INVENT_PART_PUTAWAY_ZONE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_163');
PROMPT Adding HANDL_UNIT_RESERVATION_RANKING to INVENT_PART_PUTAWAY_ZONE_TAB.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'INVENT_PART_PUTAWAY_ZONE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDL_UNIT_RESERVATION_RANKING', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_164');
PROMPT set HANDL_UNIT_RESERVATION_RANKING to same value as RANKING in INVENT_PART_PUTAWAY_ZONE_TAB and make it mandatory.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'INVENT_PART_PUTAWAY_ZONE_TAB';
BEGIN
   UPDATE INVENT_PART_PUTAWAY_ZONE_TAB
      SET handl_unit_reservation_ranking = ranking
    WHERE handl_unit_reservation_ranking IS NULL;
   COMMIT;
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDL_UNIT_RESERVATION_RANKING', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** INVENT_PART_PUTAWAY_ZONE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TASK_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_165');
PROMPT Adding column rowstate to index warehouse_task_ix1...
DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_IX1';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TASK_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1');
   Database_SYS.Set_Table_Column(columns_, 'TASK_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WAREHOUSE_TASK_TAB End *****

------------------------------------------------------------------------------------------

-- ***** INV_PART_CONFIG_PROJECT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_166');
PROMPT Starting 171023_STRSC-6_Invent.cdb

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_167');
PROMPT Creating INV_PART_CONFIG_PROJECT_TAB.

DECLARE
   table_name_ VARCHAR2(30) := 'INV_PART_CONFIG_PROJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_168');
PROMPT Creating primary key CONSTRAINT

DECLARE
   index_name_ VARCHAR2(30) := 'INV_PART_CONFIG_PROJECT_PK';
   table_name_ VARCHAR2(30) := 'INV_PART_CONFIG_PROJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_169');
PROMPT Creating rowkey INDEX 

DECLARE
   index_name_ VARCHAR2(30) := 'INV_PART_CONFIG_PROJECT_RK';
   table_name_ VARCHAR2(30) := 'INV_PART_CONFIG_PROJECT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** INV_PART_CONFIG_PROJECT_TAB End *****

------------------------------------------------------------------------------------------

-- ***** SITE_HU_CAPACITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_170');
PROMPT Creating table SITE_HU_CAPACITY_TAB...

DECLARE
   table_name_ VARCHAR2(30) := 'SITE_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_HU_TYPE_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'SITE_HU_CAPACITY_PK';
   table_name_ VARCHAR2(30) := 'SITE_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'SITE_HU_CAPACITY_RK';
   table_name_ VARCHAR2(30) := 'SITE_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** SITE_HU_CAPACITY_TAB End *****

------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_HU_CAPACITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_171');
PROMPT Creating table WAREHOUSE_HU_CAPACITY_TAB...

DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_HU_TYPE_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_HU_CAPACITY_PK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_HU_CAPACITY_RK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WAREHOUSE_HU_CAPACITY_TAB End *****

------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_BAY_HU_CAPACITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_172');
PROMPT Creating table WAREHOUSE_BAY_HU_CAPACITY_TAB...

DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_HU_TYPE_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_HU_CAPACITY_PK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_HU_CAPACITY_RK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BAY_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WAREHOUSE_BAY_HU_CAPACITY_TAB End *****

------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_TIER_HU_CAPACITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_173');
PROMPT Creating table WAREHOUSE_TIER_HU_CAPACITY_TAB...

DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TIER_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_HU_TYPE_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_TIER_HU_CAPACITY_PK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TIER_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_TIER_HU_CAPACITY_RK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_TIER_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WAREHOUSE_TIER_HU_CAPACITY_TAB End *****

------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_ROW_HU_CAPACITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_174');
PROMPT Creating table WAREHOUSE_ROW_HU_CAPACITY_TAB...

DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_ROW_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_HU_TYPE_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_ROW_HU_CAPACITY_PK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_ROW_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_ROW_HU_CAPACITY_RK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_ROW_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WAREHOUSE_ROW_HU_CAPACITY_TAB End *****

------------------------------------------------------------------------------------------

-- ***** WAREHOUSE_BIN_HU_CAPACITY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_175');
PROMPT Creating table WAREHOUSE_BIN_HU_CAPACITY_TAB...

DECLARE
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BIN_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BIN_HU_TYPE_CAPACITY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_BIN_HU_CAPACITY_PK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BIN_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   index_name_ VARCHAR2(30) := 'WAREHOUSE_BIN_HU_CAPACITY_RK';
   table_name_ VARCHAR2(30) := 'WAREHOUSE_BIN_HU_CAPACITY_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** WAREHOUSE_BIN_HU_CAPACITY_TAB End *****

------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES  ----------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_176');
PROMPT Creating Sequence SI_INTRASTAT_SEQ
BEGIN
   Database_SYS.Create_Sequence('SI_INTRASTAT_SEQ', 'MAXVALUE 999999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_177');
PROMPT Creating Sequence TRANS_REVAL_EVENT_ID_SEQ
BEGIN
   Database_SYS.Create_Sequence('TRANS_REVAL_EVENT_ID_SEQ', 'MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_178');
PROMPT Creating INTERNAL_OFFLINE_MOVE_ID sequence
BEGIN
   IF NOT(Database_SYS.Object_Exist('INTERNAL_OFFLINE_MOVE_ID','SEQUENCE')) THEN
      Database_SYS.Create_Sequence('INTERNAL_OFFLINE_MOVE_ID', 'INCREMENT BY 1 START WITH 1', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_179');
PROMPT Creating INVENTORY_PART_TRACING_SEQ sequence
BEGIN
   Database_SYS.Create_Sequence('INVENTORY_PART_TRACING_SEQ', 'INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_180');
PROMPT Creating INVENTORY_EVENT_ID_SEQ sequence
BEGIN
   Database_SYS.Create_Sequence('INVENTORY_EVENT_ID_SEQ', 'MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_181');
PROMPT Creating INVENT_PICK_LIST_NO_SEQ sequence
BEGIN
   IF (Database_SYS.Object_Exist('PICK_LIST_NO', 'SEQUENCE') ) THEN
      Database_SYS.Rename_Sequence('PICK_LIST_NO', 'INVENT_PICK_LIST_NO_SEQ');
   ELSE
      Database_SYS.Create_Sequence('INVENT_PICK_LIST_NO_SEQ', 'MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_182');
PROMPT Creating HANDLING_UNIT_HISTORY_SEQ sequence
DECLARE
   sequence_name_ VARCHAR2(30) := 'HANDLING_UNIT_HISTORY_SEQ';
BEGIN
   Database_SYS.Create_Sequence(sequence_name_, 'MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_183');
PROMPT Renaming obsolete TABLE INVENTORY_LOCATION_1400 if EXISTS
PROMPT Renaming obsolete table INVENT_PART_PALLET_REFILL_TAB
BEGIN
   IF Database_SYS.Table_Exist('INVENTORY_LOCATION_1400') THEN
      -- LCS Bug:105718 is installed. But, Inventcl.sql is not run yet
      Database_SYS.Rename_Table('INVENTORY_LOCATION_1400', 'INVENTORY_LOCATION_1410', TRUE);
   END IF;
   Database_SYS.Rename_Table('INVENT_PART_PALLET_REFILL_TAB', 'INVENT_PART_PALLET_REFILL_1500', TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_184');
PROMPT Renaming obsolete table pallet_tab
BEGIN
   Database_SYS.Remove_Constraints ('PALLET_TAB', 'PALLET_RK');
   Database_SYS.Remove_Constraints ('PALLET_TAB', 'PALLET_PK');
   Database_SYS.Rename_Table('PALLET_TAB', 'PALLET_1500', TRUE);
END;
/
---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_185');
PROMPT Remove obsolete packages...
BEGIN
   Database_SYS.Remove_Package('TRANSPORT_TASK_LINE_NOPALL_API', TRUE);
   Database_SYS.Remove_Package('TRANSPORT_TASK_LINE_PALLET_API', TRUE);
   Database_SYS.Remove_Package('INVENT_PART_PALLET_REFILL_API',  TRUE);
   Database_SYS.Remove_Package('PALLET_API',                     TRUE);
   Database_SYS.Remove_Package('INVENTORY_PART_LOC_PALLET_API',  TRUE);
   Database_SYS.Remove_Package('INVENTORY_PART_LOC_PALLET_RPI',  TRUE);
   Database_SYS.Remove_Package('PALLET_STATE_API',               TRUE);
   Database_SYS.Remove_Package('INVENT_WAVELINK_UTIL_API',       TRUE);
   Database_SYS.Remove_Package('DATA_CAPT_PROC_TRANS_TASK_API',  TRUE);
   Database_SYS.Remove_Package('DATA_CAPTURE_COUNT_REPORT_API',  TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_186');
PROMPT Remove obsolete VIEWS Inventory_Location18, Inventory_Location22, Inventory_Location23, Inventory_location24,
PROMPT Inventory_Location_Group_Lov, Pallet_Drop_Off_Location, Bay_Pallet_Drop_Off_Location AND PALLET_DROP_OFF_LOV.
PROMPT Remove obsolete views TRANSPORT_TASK_LINE_NOPALL, TRANSPORT_TASK_LINE_NOPALL_PUB, TRANSPORT_TASK_LINE_PALLET AND
PROMPT INVENTORY_PART_LOC_PALLET_REP.
PROMPT Remove obsolete view LEVEL_1_PROJ_FORECAST_EXT
PROMPT Remove obsolete views PALLET, PALLET_PUB
PROMPT Remove obsolete views related TO Lu INVENTORY_PART_LOC_PALLET
PROMPT Remove obsolete VIEWS Counting_Report_Line_Nopal, Inventory_Part_in_Stock_Nopal_Lov AND Inventory_Part_In_Stock_Nopal
PROMPT Remove obsolete view INVENT_PART_PALLET_REFILL
PROMPT Remove obsolete view WAREHOUSE_TASK_TYPE_NO_PALLET
PROMPT Remove obsolete VIEW BAY_NOPALL_DROP_OFF_LOCATION
PROMPT Remove obsolete VIEW NOPALL_DROP_OFF_LOCATION
PROMPT Remove obsolete VIEW NOPALL_DROP_OFF_LOV
PROMPT Remove obsolete VIEW INV_PART_STOCK_RESERVATION_PUB
PROMPT Remove obsolete VIEW ORDER_SUPPLY_DEMAND_SUM_PROJ2
PROMPT Remove obsolete VIEWs INVENTORY_VALUE_SUM_LOCAL_1 AND INVENTORY_VALUE_CHECK_LOCAL_1.

BEGIN
   Database_SYS.Remove_View('Inventory_Location18');
   Database_SYS.Remove_View('Inventory_Location22');
   Database_SYS.Remove_View('Inventory_Location23');
   Database_SYS.Remove_View('Inventory_Location24');
   Database_SYS.Remove_View('Inventory_Location_Group_Lov');
   Database_SYS.Remove_View('Pallet_Drop_Off_Location');
   Database_SYS.Remove_View('Bay_Pallet_Drop_Off_Location');
   Database_SYS.Remove_View('PALLET_DROP_OFF_LOV');
   Database_SYS.Remove_View('COUNTING_REPORT_LINE_PALL',              TRUE);
   Database_SYS.Remove_View('TRANSPORT_TASK_LINE_NOPALL',             TRUE);
   Database_SYS.Remove_View('TRANSPORT_TASK_LINE_NOPALL_PUB',         TRUE);
   Database_SYS.Remove_View('TRANSPORT_TASK_LINE_PALLET',             TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_LOC_PALLET_REP',          TRUE);
   Database_SYS.Remove_View('LEVEL_1_PROJ_FORECAST_EXT');
   Database_SYS.Remove_View('PALLET',   TRUE);
   Database_SYS.Remove_View('PALLET_PUB',   TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_LOC_PALLET',   TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_LOC_PALLET_PUB',   TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_LOC_PALLET_AV',   TRUE);
   Database_SYS.Remove_View('PALLET_NO_END_DATE_LOV',   TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_LOC_PALLET_LOC',   TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_LOC_PALLET_RES',   TRUE);
   Database_SYS.Remove_View('INVENT_PART_LOC_PAL_MOV_LOV',   TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_LOC_PALLET_LOV',   TRUE);
   Database_SYS.Remove_View('INVENTORY_PART_IN_STOCK_NOPAL');
   Database_SYS.Remove_View('INVENT_PART_IN_STOCK_NOPAL_LOV', TRUE);
   Database_SYS.Remove_View('COUNTING_REPORT_LINE_NOPAL');
   Database_SYS.Remove_View('INVENT_PART_PALLET_REFILL',              TRUE);
   Database_SYS.Remove_View('COUNTING_REPORT_LINE_NOPAL');
   Database_SYS.Remove_View('WAREHOUSE_TASK_TYPE_NO_PALLET');
   Database_SYS.Remove_View('BAY_NOPALL_DROP_OFF_LOCATION', TRUE);
   Database_SYS.Remove_View('NOPALL_DROP_OFF_LOCATION', TRUE);
   Database_SYS.Remove_View('NOPALL_DROP_OFF_LOV', TRUE);
   Database_SYS.Remove_View('INV_PART_STOCK_RESERVATION_PUB', TRUE);
   Database_SYS.Remove_View('ORDER_SUPPLY_DEMAND_SUM_PROJ2', TRUE);
   Database_SYS.Remove_View('INVENTORY_VALUE_SUM_LOCAL_1', TRUE);
   Database_SYS.Remove_View('INVENTORY_VALUE_CHECK_LOCAL_1', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE SEQUENCES --------------------------------------
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_187');
PROMPT Removed sequences PALLET_ID
BEGIN
   Database_SYS.Remove_Sequence('PALLET_ID', TRUE);
   Database_SYS.Remove_Sequence('INVENTORY_PUTAWAY_EVENT_ID', TRUE);
END;
/


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Timestamp_188');
PROMPT Upgrade statements in file 1500.upg end here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('INVENT','1500.upg','Done');



