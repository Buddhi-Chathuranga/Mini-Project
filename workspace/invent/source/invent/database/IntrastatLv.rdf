-----------------------------------------------------------------------------
--
--  Logical unit: Intrastat
--
--  File   : IntrastatLv.rdf
--
--  IFS Developer Studio Template Version 2.6
--
--  Date    Sign     History
--  ------  ----     -------------------------------------------------------------------
--  211130  ErFelk  Bug 161322(SC21R2-5666), Added opponent_tax_id and country_of_origin to Export. Limited customs_stat_no to 8 digit.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  200519  ErFelk  Bug 153598(SCZ-9687), Created Intrastat report for country Latvia.
----------------------------------------------------------------------------------------
DEFINE MODULE      = INVENT
DEFINE LU          = Intrastat
DEFINE PKG         = INTRASTAT_LV_RPI

DEFINE TABLE       = INVENT_INFO_SERVICES_RPT
DEFINE VIEW        = INTRASTAT_LV_REP
DEFINE VIEW_RPV    = INVENT_INFO_SERVICES_RPV
DEFINE METHOD      = Report_Overview

DEFINE REPORT_TITLE              = S1
DEFINE REPORT_CODE               = S2  
DEFINE ASSOCIATION_NO            = S3
DEFINE COMPANY_NAME              = S4
DEFINE COMPANY_ADDRESS1          = S5  
DEFINE COMPANY_ADDRESS2          = S6  
DEFINE COMPANY_ZIP_CITY          = S7
DEFINE COMPANY_PHONE             = S8
DEFINE CURRENCY_CODE             = S9
DEFINE REPORTING_PERIOD          = S10
DEFINE COMPANY_CONTACT           = S11  
DEFINE COMP_CONTACT_PHONE        = S12
DEFINE COUNTRY_OF_ORIGIN         = S13
DEFINE COUNTRY_DESTINATION       = S14
DEFINE NATURE_OF_TRANSACTION     = S15
DEFINE STAT_CODE                 = S16
DEFINE STAT_CODE_DESC            = S17
DEFINE OPPONENT_TAX_ID           = S18

DEFINE LINE_NO                   = N1
DEFINE NET_WEIGHT                = N2
DEFINE ALT_QUANTITY              = N3
DEFINE INVOICE_VALUE             = N4
DEFINE TOT_INVOICED_VALUE        = N5
DEFINE TOT_NET_WEIGHT            = N6

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG SPECIFICATION

CREATE OR REPLACE PACKAGE &PKG IS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report VIEW &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,       
       H.ROW_NO                                ROW_NO, 
       H.&REPORT_TITLE                         REPORT_TITLE, 
       H.&REPORT_CODE                          REPORT_CODE,
       H.&ASSOCIATION_NO                       ASSOCIATION_NO, 
       H.&COMPANY_NAME                         COMPANY_NAME,             
       H.&COMPANY_ADDRESS1                     COMPANY_ADDRESS1, 
       H.&COMPANY_ADDRESS2                     COMPANY_ADDRESS2, 
       H.&COMPANY_ZIP_CITY                     COMPANY_ZIP_CITY,
       H.&COMPANY_PHONE                        COMPANY_PHONE, 
       H.&CURRENCY_CODE                        CURRENCY_CODE,
       H.&REPORTING_PERIOD                     REPORTING_PERIOD,
       H.&COMPANY_CONTACT                      COMPANY_CONTACT,               
       H.&COMP_CONTACT_PHONE                   COMP_CONTACT_PHONE,       
       H.&TOT_INVOICED_VALUE                   TOT_INVOICED_VALUE,
       H.&TOT_NET_WEIGHT                       TOT_NET_WEIGHT,       
       D.&LINE_NO                              LINE_NO,
       D.&COUNTRY_OF_ORIGIN                    COUNTRY_OF_ORIGIN,
       D.&COUNTRY_DESTINATION                  COUNTRY_DESTINATION,
       D.&NATURE_OF_TRANSACTION                NATURE_OF_TRANSACTION,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&ALT_QUANTITY                         ALT_QUANTITY,
       D.&INVOICE_VALUE                        INVOICE_VALUE,
       D.&STAT_CODE                            STAT_CODE,
       D.&STAT_CODE_DESC                       STAT_CODE_DESC,
       D.&OPPONENT_TAX_ID                      OPPONENT_TAX_ID,
       NULL                                    INTRASTAT_ID,
       NULL                                    INTRASTAT_DIRECTION
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY 
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';  
COMMENT ON COLUMN &VIEW..REPORT_TITLE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Report title^ITEM_NAME=iReportTitle^';
COMMENT ON COLUMN &VIEW..REPORT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Code^ITEM_NAME=iReportCode^';
COMMENT ON COLUMN &VIEW..ASSOCIATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Association No:^ITEM_NAME=iAssociationNo^';
COMMENT ON COLUMN &VIEW..COMPANY_NAME IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Company name:^ITEM_NAME=iCompanyName^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS1 IS
'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress1^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Address:^ITEM_NAME=iCompanyAddress2^';
COMMENT ON COLUMN &VIEW..COMPANY_ZIP_CITY IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Zip City:^ITEM_NAME=iCompanyZipCity^';
COMMENT ON COLUMN &VIEW..COMPANY_PHONE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company Phone:^ITEM_NAME=iCompanyPhone^';
COMMENT ON COLUMN &VIEW..CURRENCY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Reporting Currency code:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..REPORTING_PERIOD IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Reporting period:^ITEM_NAME=iReportingPeriod^';
COMMENT ON COLUMN &VIEW..COMPANY_CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Company contact:^ITEM_NAME=iCompanyContact^';
COMMENT ON COLUMN &VIEW..COMP_CONTACT_PHONE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Phone:^ITEM_NAME=iCompanyContactPhone^';
COMMENT ON COLUMN &VIEW..TOT_INVOICED_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Invoiced Value:^ITEM_NAME=iTotInvoicedValue^'; 
COMMENT ON COLUMN &VIEW..TOT_NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Net Weight:^ITEM_NAME=iTotNetWeight^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country of Origin^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..COUNTRY_DESTINATION IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Country of Destination^ITEM_NAME=iCountryOfDest^';
COMMENT ON COLUMN &VIEW..NATURE_OF_TRANSACTION IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Nature of Transaction^ITEM_NAME=iNatureOfTransaction^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..ALT_QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Alternative Qty^ITEM_NAME=iAltQuantity^';
COMMENT ON COLUMN &VIEW..INVOICE_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Value^ITEM_NAME=iInvoiceValue^';
COMMENT ON COLUMN &VIEW..STAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(8)^TITLE=Commodity Code^ITEM_NAME=iCommodityCode^';
COMMENT ON COLUMN &VIEW..STAT_CODE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Commodity Code Description^ITEM_NAME=iCommodityCodeDesc^';
COMMENT ON COLUMN &VIEW..OPPONENT_TAX_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Opponent Tax Id^ITEM_NAME=iOpponentTaxId^';
COMMENT ON COLUMN &VIEW..INTRASTAT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^REF=Intrastat^QUERY=Intrastat ID:^QFLAGS=MCS--^STATUS=Enter Intrastat ID^';
COMMENT ON COLUMN &VIEW..INTRASTAT_DIRECTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^REF=IntrastatDirection^QUERY=Intrastat Direction:^QFLAGS=MCS--^STATUS=Enter Intrastat Direction^';


BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Intrastat Report Latvia', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Supply Chain','Intrastat');
   -- Addition for Custom Fields ------ 
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Intrastat','INTRASTAT_LV_REP');
   Report_SYS.Refresh_('&VIEW');
END;
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_ NUMBER;
   row_no_     NUMBER := 1;
   parent_row_no_             NUMBER := 0;   
   intrastat_direction_       VARCHAR2(6);
   intrastat_id_              NUMBER;     
   report_title_              VARCHAR2(50);
   report_code_               VARCHAR2(50);
   association_no_            VARCHAR2(50);   
   report_period_             VARCHAR2(7);
   comp_address_id_           VARCHAR2(50);
   company_name_              VARCHAR2(100);
   company_zip_city_          VARCHAR2(35);
   company_address_rec_       Company_Address_API.Public_Rec;
   company_address2_          VARCHAR2(35);
   company_address1_          VARCHAR2(35);
   company_phone_             VARCHAR2(200);
   company_contact_name_      VARCHAR2(100);
   contact_person_phone_      VARCHAR2(200); 
   notc_                      VARCHAR2(2); 
   tot_invoiced_value_        NUMBER := 0;
   tot_net_weight_            NUMBER := 0;
   country_code_              VARCHAR2(2);
   rep_curr_rate_             NUMBER;   
   notc_dummy_                VARCHAR2(2);
   do_xml_                    BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                     BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                       CLOB;
   package_name_              VARCHAR2(100) := 'INTRASTAT_LV_REP';
   net_mass_                  NUMBER;
   contact_person_address_id_ VARCHAR2(50);
   file_line_no_              NUMBER := 0;
   
   -- Get all the header details
   CURSOR get_head IS
      SELECT company,
             representative,
             repr_tax_no,  
             end_date,
             customs_id,
             bransch_no,
             creation_date,
             rep_curr_code,
             rep_curr_rate,
             begin_date,
             country_code,
             company_contact,
             rowkey
      FROM   intrastat_tab
      WHERE  intrastat_id = intrastat_id_;
   
   -- Get all the line details
   
   CURSOR get_lines IS
      SELECT i.intrastat_direction,
             SUBSTR(i.customs_stat_no, 1, 8)                                                           customs_stat_no,
             i.country_of_origin,
             i.opposite_country,             
             cn.country_notc,
             SUM((NVL(i.invoiced_unit_price, NVL(i.order_unit_price,0)) + 
                  NVL(i.unit_add_cost_amount_inv, NVL(i.unit_add_cost_amount,0))) * i.quantity) * rep_curr_rate_ invoiced_amount,
             SUM(i.quantity * i.net_unit_weight) net_weight_sum,
             SUM(NVL(ABS(i.intrastat_alt_qty),0)* i.quantity) alternative_qty,
             DECODE(i.intrastat_direction, 'EXPORT', i.opponent_tax_id, '')  opponent_tax_id
      FROM   intrastat_line_tab i ,country_notc_tab cn
      WHERE  intrastat_id = intrastat_id_
      AND    intrastat_direction = intrastat_direction_
      AND    rowstate           != 'Cancelled'
      AND    i.notc = cn.notc      
      AND    cn.country_code = 'LV'
      GROUP BY  i.intrastat_direction,
                SUBSTR(i.customs_stat_no, 1, 8),               
                i.country_of_origin,
				    i.opposite_country,               
                cn.country_notc,
                DECODE(i.intrastat_direction, 'EXPORT', i.opponent_tax_id, '');
                
   CURSOR get_notc IS
      SELECT distinct notc
      FROM   intrastat_line_tab
      WHERE  intrastat_id = intrastat_id_;
   
   CURSOR get_country_notc (notc_ VARCHAR2) IS
      SELECT country_notc
      FROM   country_notc_tab
      WHERE  notc = notc_
      AND    country_code = 'LV';
   
   CURSOR get_line_info IS
      SELECT il.intrastat_direction,
             il.country_of_origin,
             il.customs_stat_no
      FROM intrastat_line_tab il
      WHERE il.intrastat_id = intrastat_id_
      AND   il.intrastat_direction = intrastat_direction_;
   
BEGIN
   
   result_key_          := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   intrastat_id_        := to_number(Client_SYS.Get_Item_Value('INTRASTAT_ID', parameter_attr_));
   intrastat_direction_ := Intrastat_Direction_API.Encode(Client_SYS.Get_Item_Value('INTRASTAT_DIRECTION', parameter_attr_));
   
   -- check that country notc have valid values
   FOR notc_rec_ IN get_notc LOOP
      OPEN get_country_notc(notc_rec_.notc);
      FETCH get_country_notc INTO notc_dummy_;
      IF (get_country_notc%NOTFOUND) THEN    
         CLOSE get_country_notc;
         Error_SYS.Record_General(lu_name_, 'NOCOUNTRYNOTCLV: This country is missing an entry for NOTC :P1 in table COUNTRY_NOTC_TAB. Contact your system administrator.', notc_rec_.notc);   
      END IF;        
      CLOSE get_country_notc;  
   END LOOP;

   IF (intrastat_direction_ = 'EXPORT') THEN
      report_title_     := Language_SYS.Translate_Constant(lu_name_, 'REPEXPORTLV: Intrastat Export Report');
      report_code_  := 'Izvedums-2A';
   ELSE
      report_title_     := Language_SYS.Translate_Constant(lu_name_, 'REPIMPORTLV: Intrastat Import Report');
      report_code_  := 'Ievedums-1A';
   END IF;
   
   FOR rec_ IN get_line_info LOOP
      IF (rec_.intrastat_direction = 'IMPORT') THEN
         IF (rec_.country_of_origin IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'MISSINGCOUNTRYOFORIGIONLV: Country of Origin is missing for some lines.');
         END IF;
      END IF;
      IF (rec_.customs_stat_no IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOCUSTSTATLV: Customs statistics number is missing for some lines.');
      END IF;      
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;
   
   FOR headrec_ IN get_head LOOP
      IF (headrec_.rep_curr_code NOT IN ('EUR')) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGCURRLV: Reporting currency should be EUR.');
      END IF;
      
      association_no_  := Company_API.Get_Association_No(headrec_.company);
      IF (association_no_ IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOASSOCIATIONNOLV: Association number is missing for company :P1.', headrec_.company);
      END IF;
      
      report_period_    := to_char(headrec_.end_date, 'YYYY') || '-' || to_char(headrec_.end_date, 'MM');
      rep_curr_rate_    := headrec_.rep_curr_rate;
      country_code_     := headrec_.country_code;      

      comp_address_id_  := Company_Address_API.Get_Default_Address(headrec_.company, 
                                                                   Address_Type_Code_API.Decode('INVOICE'),
                                                                   headrec_.creation_date);
      IF (comp_address_id_ IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOCOMPADDRLV: There is no default invoice address for the company.');
      END IF;
      
      company_phone_    := Comm_Method_API.Get_Value('COMPANY', headrec_.company, Comm_Method_Code_API.Decode('PHONE'), 1, comp_address_id_, SYSDATE);
            
      company_name_         := Company_API.Get_Name(headrec_.company);
      company_address_rec_  := Company_Address_API.Get(headrec_.company, comp_address_id_);
      company_address1_     := company_address_rec_.address1;
      company_address2_     := company_address_rec_.address2;      
      company_zip_city_     := SUBSTR(company_address_rec_.zip_code, 1, 5) || ' ' || SUBSTR(company_address_rec_.city, 1, 29);
      
      IF (headrec_.company_contact IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOPERSONLV: Company contact is missing for company :P1.', headrec_.company);
      ELSE
         company_contact_name_ := Person_Info_API.Get_Name(headrec_.company_contact);
         contact_person_address_id_ := Person_Info_Address_API.Get_Default_Address(headrec_.company_contact, Address_Type_Code_API.Decode('CORRESPONDENCE'));         
         contact_person_phone_ := Comm_Method_API.Get_Value('PERSON', headrec_.company_contact, Comm_Method_Code_API.Decode('PHONE'), 1, contact_person_address_id_, SYSDATE);         
      END IF;
      
      -- Insert Head details
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_TITLE', report_title_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_CODE', report_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REPORTING_PERIOD', report_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ASSOCIATION_NO', association_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_NAME', company_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS1', company_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDRESS2', company_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ZIP_CITY', company_zip_city_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', headrec_.rep_curr_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_CONTACT', company_contact_name_);           
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_CONTACT_PHONE', contact_person_phone_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PHONE', company_phone_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Intrastat', headrec_.rowkey, '&VIEW');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_LV_LINES');
      END IF;

      IF (do_rs_) THEN
         INSERT INTO &TABLE
            (result_key, row_no, parent_row_no, 
            &COMPANY_NAME, &ASSOCIATION_NO, &COMPANY_CONTACT, 
            &COMPANY_ZIP_CITY, &COMPANY_ADDRESS1, &COMPANY_ADDRESS2,           
            &REPORTING_PERIOD, &CURRENCY_CODE, &REPORT_TITLE, 
            &REPORT_CODE, &COMP_CONTACT_PHONE )
         VALUES
            (result_key_, row_no_, parent_row_no_, 
            company_name_, association_no_, company_contact_name_,
            company_zip_city_, company_address1_, company_address2_,
            report_period_, headrec_.rep_curr_code, report_title_, 
            report_code_, contact_person_phone_);   
      END IF;

      parent_row_no_ := row_no_;   
      row_no_ := row_no_ + 1;
      
      -- Data Records
      FOR linerec_ IN get_lines LOOP         
         
         IF (linerec_.net_weight_sum > 0) THEN
            net_mass_ := ROUND(linerec_.net_weight_sum);          
         ELSE
            net_mass_ := 0;
         END IF;  
         
         file_line_no_           := file_line_no_ + 1;
         
         -- insert detail rows
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_,'INTRASTAT_LV_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', file_line_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_DESTINATION', linerec_.opposite_country);            
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN', linerec_.country_of_origin);              
            Xml_Record_Writer_SYS.Add_Element(xml_,'NATURE_OF_TRANSACTION', linerec_.country_notc); 
            Xml_Record_Writer_SYS.Add_Element(xml_,'NET_WEIGHT', net_mass_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_CODE', linerec_.customs_stat_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STAT_CODE_DESC', Customs_Statistics_Number_API.Get_Description(linerec_.customs_stat_no));
            Xml_Record_Writer_SYS.Add_Element(xml_,'OPPONENT_TAX_ID', linerec_.opponent_tax_id);
            
            IF (linerec_.alternative_qty IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_QUANTITY', ROUND(linerec_.alternative_qty));
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'ALT_QUANTITY', linerec_.alternative_qty);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_VALUE', ROUND(linerec_.invoiced_amount));              
            Xml_Record_Writer_SYS.End_Element(xml_,'INTRASTAT_LV_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_DESTINATION, &COUNTRY_OF_ORIGIN, 
                &NATURE_OF_TRANSACTION, 
                &STAT_CODE, &ALT_QUANTITY,
                &NET_WEIGHT, &INVOICE_VALUE, &OPPONENT_TAX_ID )
            VALUES
               (result_key_, row_no_, parent_row_no_, file_line_no_, 
                linerec_.opposite_country, linerec_.country_of_origin,
                linerec_.country_notc, linerec_.customs_stat_no, linerec_.alternative_qty,
                ROUND(linerec_.net_weight_sum), ROUND(linerec_.invoiced_amount), linerec_.opponent_tax_id );
         END IF;

         row_no_ := row_no_ + 1;

         --Totals         
         tot_invoiced_value_     := tot_invoiced_value_ + ROUND(linerec_.invoiced_amount);
         tot_net_weight_         := tot_net_weight_ + ROUND(linerec_.net_weight_sum);
      END LOOP;
      
      
      IF (row_no_ = 2) THEN -- no details      
         -- insert blank row
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INTRASTAT_LV_LINE');
            Xml_Record_Writer_SYS.End_Element(xml_, 'INTRASTAT_LV_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no, &LINE_NO, 
                &COUNTRY_DESTINATION, &COUNTRY_OF_ORIGIN, 
                &NATURE_OF_TRANSACTION, &STAT_CODE, &ALT_QUANTITY,
                &NET_WEIGHT, &INVOICE_VALUE )
            VALUES
               (result_key_, row_no_, parent_row_no_, NULL, 
                NULL, NULL,
                NULL, NULL,
                NULL, NULL, NULL );  
         END IF;
      END IF;
      
      -- update the head with no_of_lines and sums
      IF (do_rs_) THEN
         UPDATE &TABLE
         SET    &TOT_INVOICED_VALUE  = ROUND(tot_invoiced_value_),
                &TOT_NET_WEIGHT      = ROUND(tot_net_weight_)
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_,'INTRASTAT_LV_LINES');
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INVOICED_VALUE', ROUND(tot_invoiced_value_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_NET_WEIGHT', ROUND(tot_net_weight_));
      END IF; 
   END LOOP;
 
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;  
   
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE REPORT_TITLE     
UNDEFINE REPORT_CODE    
UNDEFINE ASSOCIATION_NO  
UNDEFINE COMPANY_NAME  
UNDEFINE COMPANY_ADDRESS1  
UNDEFINE COMPANY_ADDRESS2  
UNDEFINE COMPANY_ZIP_CITY 
UNDEFINE COMPANY_PHONE  
UNDEFINE CURRENCY_CODE    
UNDEFINE REPORTING_PERIOD   
UNDEFINE COMPANY_CONTACT   
UNDEFINE COMP_CONTACT_PHONE  
UNDEFINE COUNTRY_OF_ORIGIN  
UNDEFINE COUNTRY_DESTINATION  
UNDEFINE NATURE_OF_TRANSACTION   
UNDEFINE STAT_CODE       
UNDEFINE STAT_CODE_DESC 
UNDEFINE LINE_NO      
UNDEFINE NET_WEIGHT   
UNDEFINE ALT_QUANTITY   
UNDEFINE INVOICE_VALUE  
UNDEFINE TOT_INVOICED_VALUE  
UNDEFINE TOT_NET_WEIGHT