-----------------------------------------------------------------------------
--
--  Logical unit: InventoryPartInStock
--
--  File:         INVENTORYPARTCONDITIONTAG.RDF
--  Version:      Foundation1 2.2
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  130730  AwWelk TIBE-837, Removed global variables and introduced conditional compilation.
--  081201  HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  080317  HoInlk Bug 72069, Added missing "ifs_assert_safe" annotations.
--  060601  SaRalk Enlarge Part Description - Changed variable definitions.
--  060418  MaJalk Enlarge Identity - Changed view comments.
------------------------------------- 13.4.0 --------------------------------
--  051221  KeFelk Changed the xsl name to the Correct xsl.
--  051216  SuJalk Changed the parameter VIEW_RPV to TABLE in Define_Report_.
--  050830  NiDalk Changed to Report Designer Layout.
--  050316  KeFelk Changed the Manufacturer Id title to Manufacturer No.
--  041005  JOHESE Modified fetch of supplier
--  040812  IsWilk Modified the length of the variable manu_part_no_ from 25 to 80. 
--  040622  DaMase Moved module_ and lu_name_ to get F1 dictionary correct.
--  040610  NaWilk Bug 44975, Modified FROM clause in view IN_PRT_COND_TAG_REP.
--  040427  ChFolk Bug 40649, Used Purchase_PartSuppl_Manuf_API instead of Part_Manufacturer_API.
----------------------- 13.3.0 ----------------------------------------------
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  020726  MAEELK Redesigned the report.
--  021203  BrGr   Call 74051: Changed LU to InventoryPartInStock
--  020102  BrGr   Call 74075: Removed MANUFACTURE_NO and MANUFACTURE_PART_NO from report
--  011212  AdSc   Created.  
-----------------------------------------------------------------------------

DEFINE MODULE            = INVENT
DEFINE LU                = InventoryPartInStock 
DEFINE PKG               = INVENTORY_PART_COND_TAG_RPI

DEFINE TABLE             = INVENT_INFO_SERVICES_RPT
DEFINE VIEW              = IN_PRT_COND_TAG_REP
DEFINE VIEW_RPV          = INVENT_INFO_SERVICES_RPV

DEFINE METHOD            = Report_Tag

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';
   
PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORT
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY             RESULT_KEY,
       ROW_NO                 ROW_NO,
       s1                     PART_NO,
       s2                     PART_NO_DESCRIPTION,
       S3                     CONTRACT,
       s4                     SERIAL_NO,
       S5                     LOT_BATCH_NO,
       s6                     CONDITION_CODE,
       s7                     CONDITION_CODE_DESCRIPTION,
       s8                     SUPPLIER_ID,
       s9                     SUPPLIER_NAME,
       s10                    MANUFACTURER_ID,
       s11                    MANUFACTURER_NAME,
       s12                    MANUFACTURER_PART_NO,
       s13                    NOTE_TEXT
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Inventory Part Condition Tag^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^TITLE=Part No^ITEM_NAME=iPartNo^DATATYPE=STRING(25)/UPPERCASE^QUERY=Part No:^QFLAGS=MCS--^REF=INVENTORY_PART_LOV(CONTRACT)^';
COMMENT ON COLUMN &VIEW..part_no_description IS
   'FLAGS=A----^TITLE=Part No Description^ITEM_NAME=iPartNoDesc^DATATYPE=STRING(35)^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^TITLE=Site:^ITEM_NAME=iContract^DATATYPE=STRING(5)/UPPERCASE^QUERY=Contract:^QFLAGS=MCS--^REF=Site^';
COMMENT ON COLUMN &VIEW..serial_no IS
   'FLAGS=A----^TITLE=Serial No^ITEM_NAME=iSerialNo^DATATYPE=STRING(50)^QUERY=Serial No:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..lot_batch_no IS
   'FLAGS=A----^TITLE=Lot Batch No^ITEM_NAME=iLotBatchNo^DATATYPE=STRING(50)^QUERY=Lot Batch No:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^TITLE=Condition Code:^ITEM_NAME=iConditionCode^DATATYPE=STRING(40)/UPPERCASE^QUERY=Condition Code:^QFLAGS=MCS--^REF=CONDITION_CODE^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^TITLE=Condition Code Description:^ITEM_NAME=iCondCodeDesc^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..supplier_id IS
   'FLAGS=A----^TITLE=Supplier:^ITEM_NAME=iSupplierId^DATATYPE=STRING(20)^';
COMMENT ON COLUMN &VIEW..supplier_name IS
   'FLAGS=A----^TITLE=Supplier Name:^ITEM_NAME=iSupplierName^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..manufacturer_id IS
   'FLAGS=A----^TITLE=Manufacturer No:^ITEM_NAME=iManuId^DATATYPE=STRING(20)^';
COMMENT ON COLUMN &VIEW..manufacturer_name IS
   'FLAGS=A----^TITLE=Manufacturer Name:^ITEM_NAME=iManuName^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..manufacturer_part_no IS
   'FLAGS=A----^TITLE=Manufacturer Part No:^ITEM_NAME=iManuPartNo^DATATYPE=STRING(80)^';
COMMENT ON COLUMN &VIEW..note_text IS
   'FLAGS=A----^TITLE=Note:^ITEM_NAME=iNoteText^DATATYPE=STRING(2000)^';

BEGIN
   Report_SYS.Define_Report_( '&VIEW', '&MODULE', '&LU', 'Inventory Part Condition Tag', '&TABLE', '&PKG..&METHOD', 8,'','','','PLSQL1.2','TRUE','Warehouse Management','Goods Label');
   Report_SYS.Refresh_('&VIEW');
END;
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     INVENTORY_PART_CONDITION_TAG_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Purpose: Generate Customer Invoice Report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_          NUMBER;
   row_no_              NUMBER := 1;
   condition_code_      VARCHAR2(40);
   cond_code_desc_      VARCHAR2(100);
   serial_no_           VARCHAR2(50);
   part_no_             VARCHAR2(25);
   part_no_desc_        &VIEW..part_no_description%TYPE;
   supplier_id_         VARCHAR2(100);
   supplier_name_       VARCHAR2(100);
   manu_id_             VARCHAR2(20);
   manu_name_           VARCHAR2(100);
   manu_part_no_        VARCHAR2(80);
   note_text_           VARCHAR2(2000);
   contract_            VARCHAR2(5);
   lot_batch_no_        VARCHAR2(35);

   do_xml_              BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_               BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                 CLOB;
   package_name_        VARCHAR2(100) := 'IN_PRT_COND_TAG_REP';

   CURSOR get_note_text (part_no_ VARCHAR2, contract_ VARCHAR2) IS
   SELECT note_text
   FROM INVENTORY_PART
   WHERE part_no = part_no_
   AND   contract = contract_;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   result_key_ := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   part_no_ := Client_SYS.Get_Item_Value('PART_NO', parameter_attr_);
   contract_ := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   serial_no_ := Client_SYS.Get_Item_Value('SERIAL_NO', parameter_attr_);
   lot_batch_no_ := Client_SYS.Get_Item_Value('LOT_BATCH_NO', parameter_attr_); 
   condition_code_ := Client_SYS.Get_Item_Value('CONDITION_CODE', parameter_attr_); 

   IF (condition_code_ = Condition_Code_Manager_API.Get_Condition_Code (part_no_,serial_no_,lot_batch_no_ ) ) THEN
      cond_code_desc_ := Condition_Code_API.Get_Description(condition_code_);
      part_no_desc_ := Part_Catalog_API.Get_Description(part_no_);

      supplier_id_ := Part_Serial_Catalog_API.Get_Supplier_No(part_no_, serial_no_);
   
      supplier_name_ := Supplier_Info_API.Get_Name(supplier_id_);

      $IF (Component_Purch_SYS.INSTALLED)$THEN
         manu_id_      := Purchase_Part_Suppl_Manuf_API.Get_Preferred_Manufacturer_No(contract_, part_no_, supplier_id_);
         manu_name_    := Manufacturer_Info_API.Get_Name(manu_id_);  
         manu_part_no_ := Part_Manu_Part_No_API.Get_Preferred_Manu_Part (part_no_, manu_id_);
      $END 

      OPEN get_note_text (part_no_, contract_);
      FETCH get_note_text INTO note_text_;
      CLOSE get_note_text;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', part_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO_DESCRIPTION', part_no_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SERIAL_NO', serial_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LOT_BATCH_NO', lot_batch_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE', condition_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION', cond_code_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SUPPLIER_ID', supplier_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SUPPLIER_NAME', supplier_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MANUFACTURER_ID', manu_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MANUFACTURER_NAME', manu_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MANUFACTURER_PART_NO', manu_part_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NOTE_TEXT', note_text_);
      END IF;
   
      IF (do_rs_) THEN
         INSERT INTO &TABLE (
            RESULT_KEY, 
            ROW_NO, 
            PARENT_ROW_NO,
            s1,                     -- PART_NO
            s2,                     -- PART_NO_DESCRIPTION
            s3,                     -- CONTRACT
            s4,                     -- SERIAL_NO
            S5,                     -- LOT_BATCH_NO   
            s6,                     -- CONDITION_CODE
            s7,                     -- CONDITION_CODE_DESCRIPTION
            s8,                     -- SUPPLIER_ID
            s9,                     -- SUPPLIER_NAME
            s10,                    -- MANUFACTURER_ID
            s11,                    -- MANUFACTURER_NAME
            s12,                    -- MANUFACTURER_PART_NO
            s13)                    -- NOTE_TEXT   
         VALUES (
            result_key_,
            row_no_,
            0,
            part_no_,
            part_no_desc_,
            contract_,
            serial_no_,
            lot_batch_no_,
            condition_code_,
            cond_code_desc_,
            supplier_id_,
            supplier_name_,
            manu_id_,
            manu_name_,
            manu_part_no_,
            note_text_
         );
      END IF;

      row_no_ := row_no_ + 1;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;
-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------



----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
