-----------------------------------------------------------------------------
--
--  Logical unit: PartStorageRequirementsHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2019-02-21  SAGELK  SCUXXW4-6385, Added Save_Capacity_And_Conditions___, Get_Objid_Objversion_Part_Catalog_Invent_Attrib___ 
--                                   and override CRUD CREATE for Capacity and Condition Requirements tab
-- 2018-11-30  SAGELK  SCUXXW4-6385, Created
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Create_Remove_Capability___ (
   part_no_               IN VARCHAR2,
   storage_capability_id_ IN VARCHAR2 ) 
IS
   
BEGIN
   IF (NOT (Part_Catalog_Operative_Cap_Initial_Check___(part_no_, storage_capability_id_))) THEN
      Error_SYS.Appl_Failure(lu_name_, err_source_ => 'Part_Catalog_Operative_Cap_Initial_Check___(part_no_, storage_capability_id_)');
   END IF;
   
   Part_Catalog_Capability_API.Create_Removed_Line__(part_no_, storage_capability_id_);
END Create_Remove_Capability___;

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Capacities_And_Conditions_Virtual_Rec )
IS
   new_rec_          Capacities_And_Conditions_Virtual_Rec;
   part_catalog_invent_attrib_rec_    PART_CATALOG_INVENT_ATTRIB_TAB%ROWTYPE;
   
   CURSOR get_part_catalog_invent_attrib_ IS
      SELECT *
      FROM   part_catalog_invent_attrib_tab
      WHERE  part_no = rec_.part_no;
BEGIN
   new_rec_ := rec_;
   
   OPEN get_part_catalog_invent_attrib_;
   FETCH get_part_catalog_invent_attrib_ INTO part_catalog_invent_attrib_rec_;
   CLOSE get_part_catalog_invent_attrib_;
   
   new_rec_.width             := part_catalog_invent_attrib_rec_.storage_width_requirement;
   new_rec_.height            := part_catalog_invent_attrib_rec_.storage_height_requirement;
   new_rec_.depth             := part_catalog_invent_attrib_rec_.storage_depth_requirement;
   new_rec_.volume            := Part_Catalog_Invent_Attrib_API.Get_Storage_Volume_Req_Oper_Cl(new_rec_.part_no);
   new_rec_.weight            := part_catalog_invent_attrib_rec_.storage_weight_requirement;
   new_rec_.min_temperature   := part_catalog_invent_attrib_rec_.min_storage_temperature;
   new_rec_.max_temperature   := part_catalog_invent_attrib_rec_.max_storage_temperature;
   new_rec_.min_humidity      := part_catalog_invent_attrib_rec_.min_storage_humidity;
   new_rec_.max_humidity      := part_catalog_invent_attrib_rec_.max_storage_humidity;
   
   new_rec_.weight_uom        := NVL(part_catalog_invent_attrib_rec_.uom_for_weight, Storage_Capacity_Req_Group_API.Get_Uom_For_Weight(part_catalog_invent_attrib_rec_.capacity_req_group_id));
   new_rec_.length_uom        := NVL(part_catalog_invent_attrib_rec_.uom_for_length, Storage_Capacity_Req_Group_API.Get_Uom_For_Length(part_catalog_invent_attrib_rec_.capacity_req_group_id));
   new_rec_.temperature_uom   := NVL(part_catalog_invent_attrib_rec_.uom_for_temperature, Storage_Cond_Req_Group_API.Get_Uom_For_Temperature(part_catalog_invent_attrib_rec_.condition_req_group_id));
   new_rec_.volume_uom := NVL(part_catalog_invent_attrib_rec_.uom_for_volume, Company_Invent_Info_API.Get_Uom_For_Volume(User_Finance_API.get_default_company_func));
   
   super(new_rec_);
END CRUD_Create___;

PROCEDURE Save_Capacity_And_Conditions___ (
   key_ IN Capacities_And_Conditions_Virtual_Key ) 
IS
   rec_                   Capacities_And_Conditions_Virtual_Rec := Get_Record___(key_);
   part_catalog_invent_attrib_rec_    PART_CATALOG_INVENT_ATTRIB_TAB%ROWTYPE;
   part_catalog_invent_attrib_key_    Part_Catalog_Invent_Attrib_Key;
   objid_                 VARCHAR2(32000);
   objversion_            VARCHAR2(32000);
   attr_                  VARCHAR2(32000);
   info_                  VARCHAR2(32000);
   
   CURSOR get_part_catalog_invent_attrib_ IS
      SELECT *
      FROM   part_catalog_invent_attrib_tab
      WHERE  part_no = rec_.part_no;
   
BEGIN
   rec_  := Get_Record___(key_);
   
   OPEN get_part_catalog_invent_attrib_;
   FETCH get_part_catalog_invent_attrib_ INTO part_catalog_invent_attrib_rec_;
   CLOSE get_part_catalog_invent_attrib_;
   
   part_catalog_invent_attrib_key_.part_no   := part_catalog_invent_attrib_rec_.part_no;
   Get_Objid_Objversion_Part_Catalog_Invent_Attrib___(objid_, objversion_, part_catalog_invent_attrib_key_);
   
   Client_SYS.Clear_Attr(attr_);
   
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.storage_width_requirement), 'X') != nvl(TO_CHAR(rec_.width), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_WIDTH_REQUIREMENT', rec_.width, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.storage_height_requirement), 'X') != nvl(TO_CHAR(rec_.height), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_HEIGHT_REQUIREMENT', rec_.height, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.storage_depth_requirement), 'X') != nvl(TO_CHAR(rec_.depth), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_DEPTH_REQUIREMENT', rec_.depth, attr_);
   END IF;
   IF (nvl(TO_CHAR(rec_.volume), 'X') != '0' AND nvl(TO_CHAR(part_catalog_invent_attrib_rec_.storage_volume_requirement), 'X') != nvl(TO_CHAR(rec_.volume), 'X')) THEN
      Client_SYS.Add_To_Attr('STORAGE_VOLUME_REQUIREMENT', 1 / rec_.volume, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.storage_weight_requirement), 'X') != nvl(TO_CHAR(rec_.weight), 'X') THEN
      Client_SYS.Add_To_Attr('STORAGE_WEIGHT_REQUIREMENT', rec_.weight, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.min_storage_temperature), 'X') != nvl(TO_CHAR(rec_.min_temperature), 'X') THEN
      Client_SYS.Add_To_Attr('MIN_STORAGE_TEMPERATURE', rec_.min_temperature, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.max_storage_temperature), 'X') != nvl(TO_CHAR(rec_.max_temperature), 'X') THEN
      Client_SYS.Add_To_Attr('MAX_STORAGE_TEMPERATURE', rec_.max_temperature, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.min_storage_humidity), 'X') != nvl(TO_CHAR(rec_.min_humidity), 'X') THEN
      Client_SYS.Add_To_Attr('MIN_STORAGE_HUMIDITY', rec_.min_humidity, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.max_storage_humidity), 'X') != nvl(TO_CHAR(rec_.max_humidity), 'X') THEN
      Client_SYS.Add_To_Attr('MAX_STORAGE_HUMIDITY', rec_.max_humidity, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.uom_for_weight), 'X') != nvl(TO_CHAR(rec_.weight_uom), 'X') THEN
      Client_SYS.Add_To_Attr('UOM_FOR_WEIGHT', rec_.weight_uom, attr_);
   END IF;
   IF nvl(TO_CHAR(part_catalog_invent_attrib_rec_.uom_for_length), 'X') != nvl(TO_CHAR(rec_.length_uom), 'X') THEN
      Client_SYS.Add_To_Attr('UOM_FOR_LENGTH', rec_.length_uom, attr_);
   END IF;
   IF nvl(part_catalog_invent_attrib_rec_.uom_for_temperature, 'X') != nvl(rec_.temperature_uom, 'X') THEN
      Client_SYS.Add_To_Attr('UOM_FOR_TEMPERATURE', rec_.temperature_uom, attr_);
   END IF;
   IF nvl(part_catalog_invent_attrib_rec_.uom_for_volume, 'X') != nvl(rec_.volume_uom, 'X') THEN
      Client_SYS.Add_To_Attr('UOM_FOR_VOLUME', rec_.volume_uom, attr_);
   END IF;
   
   Part_Catalog_Invent_Attrib_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
   
END Save_Capacity_And_Conditions___;

PROCEDURE Get_Objid_Objversion_Part_Catalog_Invent_Attrib___ (
   objid_      OUT VARCHAR2,
   objversion_ OUT VARCHAR2,
   key_        IN  Part_Catalog_Invent_Attrib_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  part_catalog_invent_attrib
      WHERE part_no = key_.part_no;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Part_Catalog_Invent_Attrib_API.lu_name_);
END Get_Objid_Objversion_Part_Catalog_Invent_Attrib___;

FUNCTION Part_Catalog_Operative_Cap_Initial_Check___ (
   part_no_               IN VARCHAR2,
   storage_capability_id_ IN VARCHAR2) RETURN BOOLEAN
IS
   found_ BOOLEAN := FALSE;
   dummy_ NUMBER;
   
   CURSOR check_record IS
      SELECT 1
      FROM  part_catalog_operative_cap
      WHERE part_no = part_no_
      AND storage_capability_id = storage_capability_id_;
BEGIN
   OPEN check_record;
   FETCH check_record INTO dummy_;
   IF check_record%FOUND THEN 
      found_ := TRUE;
   END IF ;
   CLOSE check_record;
   RETURN found_;
END Part_Catalog_Operative_Cap_Initial_Check___;

