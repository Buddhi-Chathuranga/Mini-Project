-----------------------------------------------------------------------------
--
--  Fragment:     HandlingUnitsInStockBaseList
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-05-06  PAMMLK  MF2020R1-940,Modified Change_Ownership_To_Company___ to add the ownership_transfer_reason_id.
--  2020-05-04  PAMMLK  MF2020R1-939,Modified Change_Ownership_Between_Customer___ to add the ownership_transfer_reason_id.
--  2019-08-16  ChFolk  SCUXXW4-23743, Modified Scrap_Hu___ to point out the variables and their values for method call Handling_Unit_API.Scrap.
--  2019-05-27  ChFolk  SCUXXW4-21153, Removed functions Generate_Unattach_Parts_From_Hu_Where_Clause___ and Generate_Unattach_Part_In_Stock_Where_Clause___.
--  2019-05-27          Modified Get_Connected_Objids___ to concatenate Objid list in a different way.
--  2019-02-25  fandse  SCUXXW4-16155, Unattach Part in the Part Node should only unattach that part. Broken out method to get objid to cater for this.
--  2018-12-14  fandse  SCUXXW4-7102,  Moved GetCodepartsSettings into PrePostingWithoutSourceAssitant.fragment
--  2018-12-07  ChFolk  SCUXXW4-6121, Added Generate_Unattach_Part_In_Stock_Where_Clause___ to support unattach handling units from bottom list.
--  2018-12-06  FANDSE  SCUXXW4-7655, Initial Aurena implmentation of dlgGivenValue. Added Get_Codeparts_Settings
--  2018-12-06  ChFolk  SCUXXW4-6121, Move methods from handlingUnitsInStock as this will be the base.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Get_Record_Separated_Hu_List___ (
   selection_    IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_list_                 VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_        VARCHAR2(32000);
   current_handling_unit_id_ NUMBER;
   handling_unit_id_list_    VARCHAR2(2000);
BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_  := substr(key_list_, 0, INSTR(key_list_, ';'));
      current_handling_unit_id_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID');      
      Handling_Unit_Extended_Initial_Check___(current_handling_unit_id_);
      
      IF (handling_unit_id_list_ IS NULL) THEN
         handling_unit_id_list_ := current_handling_unit_id_;
      ELSE
         handling_unit_id_list_ := handling_unit_id_list_ || Client_SYS.record_separator_ || current_handling_unit_id_;
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));
   END LOOP;
   RETURN handling_unit_id_list_;
END Get_Record_Separated_Hu_List___;   
   
PROCEDURE Issue_With_Posting___ (
   selection_    IN VARCHAR2,
   code_a_       IN VARCHAR2,
   code_b_       IN VARCHAR2,
   code_c_       IN VARCHAR2,
   code_d_       IN VARCHAR2,
   code_e_       IN VARCHAR2,
   code_f_       IN VARCHAR2,
   code_g_       IN VARCHAR2,
   code_h_       IN VARCHAR2,
   code_i_       IN VARCHAR2,
   code_j_       IN VARCHAR2 ) 
IS
   handling_unit_id_list_    VARCHAR2(32000);
  
BEGIN
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Issue_With_Posting(handling_unit_id_list_      => handling_unit_id_list_,
                                        account_no_                 => code_a_,
                                        code_b_                     => code_b_,
                                        code_c_                     => code_c_,
                                        code_d_                     => code_d_,
                                        code_e_                     => code_e_,
                                        code_f_                     => code_f_,
                                        code_g_                     => code_g_,
                                        code_h_                     => code_h_,
                                        code_i_                     => code_i_,
                                        code_j_                     => code_j_,
                                        source_                     => '',
                                        error_when_stock_not_exist_ => FALSE);
END Issue_With_Posting___;

PROCEDURE Scrap_Hu___ (
   handling_unit_id_             IN NUMBER,
   scrap_cause_                  IN VARCHAR2,
   scrap_note_                   IN VARCHAR2,
   print_serviceability_tag_db_  IN VARCHAR2 )
IS
BEGIN  
   Handling_Unit_API.Scrap(handling_unit_id_            => handling_unit_id_,
                           scrap_cause_                 => scrap_cause_,
                           scrap_note_                  => scrap_note_,
                           print_serviceability_tag_db_ => print_serviceability_tag_db_,
                           error_when_stock_not_exist_  => FALSE);

END Scrap_Hu___;

PROCEDURE Perform_Putaway___ (
   selection_ IN  VARCHAR2,
   info$_     OUT VARCHAR2 ) 
IS
   handling_unit_id_list_ VARCHAR2(32000);
BEGIN
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Putaway(info$_, handling_unit_id_list_);
END Perform_Putaway___;

PROCEDURE Move_With_Transport_Task___ (   
   selection_      IN VARCHAR2,
   contract_       IN VARCHAR2,
   location_no_    IN VARCHAR2,
   destination_    IN VARCHAR2 )
IS    
   destination_db_         VARCHAR2(1);
   handling_unit_id_list_  VARCHAR2(32000);
BEGIN  
   IF destination_ = 'MoveToTransit' THEN
      destination_db_ := INVENTORY_PART_DESTINATION_API.DB_MOVE_TO_TRANSIT;
   ELSE
      destination_db_ := INVENTORY_PART_DESTINATION_API.DB_MOVE_TO_INVENTORY;
   END IF;
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Add_To_Transport_Task(handling_unit_id_list_  => handling_unit_id_list_,
                                           to_contract_            => contract_,
                                           to_location_no_         => location_no_,
                                           to_destination_         => Inventory_Part_Destination_API.Decode(destination_db_) );
END Move_With_Transport_Task___;

PROCEDURE Change_Part_Availability_Control_Hu___ (
   selection_                IN VARCHAR2,
   availability_control_id_  IN VARCHAR2
  )
IS
   handling_unit_id_list_    VARCHAR2(32000);
BEGIN
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Modify_Availability_Control_Id(handling_unit_id_list_, availability_control_id_);
END Change_Part_Availability_Control_Hu___;

PROCEDURE Change_Waiv_Dev_Rej_No___ (
   selection_          IN VARCHAR2,
   waiv_dev_rej_no_    IN VARCHAR2,
   source_ref1_        IN VARCHAR2,
   source_ref_type_    IN VARCHAR2)
IS
   handling_unit_id_list_    VARCHAR2(32000);
BEGIN
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Modify_Waiv_Dev_Rej_No(handling_unit_id_list_,
                                            waiv_dev_rej_no_,
                                            source_ref1_,
                                            source_ref_type_);
END Change_Waiv_Dev_Rej_No___;

PROCEDURE Receive_From_Inventory_Transit___ (
   selection_ IN VARCHAR2 ) 
IS
   handling_unit_id_list_    VARCHAR2(32000);
BEGIN
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Receive_From_Inventory_Transit(handling_unit_id_list_);
END Receive_From_Inventory_Transit___;
   
PROCEDURE Update_Expiration_Date___ (
   selection_         IN VARCHAR2,
   expiration_date_   IN DATE )
IS
   handling_unit_id_list_    VARCHAR2(32000);
BEGIN
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Modify_Expiration_Date(handling_unit_id_list_, expiration_date_);
END Update_Expiration_Date___;

PROCEDURE Validate_Different_Locations___ (
   selection_   IN VARCHAR2 ) 
IS
   key_list_               VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_      VARCHAR2(32000);
   previous_location_no_   VARCHAR2(35);

BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_ := substr(key_list_, 0, INSTR(key_list_, ';'));
      IF (previous_location_no_ IS NULL) THEN         
         previous_location_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LOCATION_NO');
      ELSE
         IF (previous_location_no_ != Client_SYS.Get_Key_Reference_Value(current_selection_, 'LOCATION_NO')) THEN
            Error_SYS.Record_General(lu_name_, 'NEED_SAME_LOCATION: Selected records should be on same location.');
         END IF;   
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));
   END LOOP;   
END Validate_Different_Locations___;

FUNCTION Get_Selected_Handling_Units___(
   selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_list_                 VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_        VARCHAR2(32000);
   current_handling_unit_id_ NUMBER;
   handling_unit_id_list_    VARCHAR2(2000);

BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_  := substr(key_list_, 0, INSTR(key_list_, ';'));
      current_handling_unit_id_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID');      
      
      IF (handling_unit_id_list_ IS NULL) THEN
         handling_unit_id_list_ := current_handling_unit_id_;
      ELSE
         handling_unit_id_list_ := handling_unit_id_list_ || ',' || current_handling_unit_id_;
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));
   END LOOP;   
   RETURN handling_unit_id_list_;
END Get_Selected_Handling_Units___;

FUNCTION Validate_Company___ (
   contract_list_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   unique_contract_     VARCHAR2(5);
   unique_company_      VARCHAR2(20);
   local_contract_list_ VARCHAR2(32000) := CONCAT(contract_list_, Client_Sys.record_separator_);
   current_contract_    VARCHAR2(5);
   current_company_     VARCHAR2(20);
   
BEGIN
   local_contract_list_ := contract_list_;  
   WHILE (INSTR(local_contract_list_, Client_Sys.record_separator_) > 0) LOOP
      current_contract_ := substr(local_contract_list_, 0, INSTR(local_contract_list_, Client_Sys.record_separator_ ) -1);    
      IF (unique_contract_ IS NULL) THEN
         unique_contract_ := current_contract_;
         unique_company_ := Site_API.Get_Company(current_contract_);
      ELSE
         IF (current_contract_ != unique_contract_) THEN
            current_company_ := Site_API.Get_Company(current_contract_);
            IF (current_company_ != unique_company_) THEN
               unique_company_ := NULL;
               Error_SYS.Record_General(lu_name_, 'DIFFERENT_COMPANY: Parts belonging to different companies cannot be transferred to the same project.');
               EXIT;
            END IF;   
         END IF;   
      END IF;
      local_contract_list_ := SUBSTR(local_contract_list_, (INSTR(local_contract_list_, Client_Sys.record_separator_) + 1));      
   END LOOP;   
   RETURN unique_company_;
END Validate_Company___;   

FUNCTION Get_Selected_Contract___(
   selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_list_                 VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_        VARCHAR2(32000);
   current_contract_         VARCHAR2(5);
   current_handling_unit_id_ NUMBER;
   contract_                 VARCHAR2(5);
BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_  := substr(key_list_, 0, INSTR(key_list_, ';'));
      current_handling_unit_id_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID');      
      
      current_contract_ := Handling_Unit_API.Get_Contract(current_handling_unit_id_);
      IF (contract_ IS NOT NULL AND contract_ != current_contract_) THEN
         contract_ := NULL;
      ELSE
         contract_ := current_contract_;
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));
   END LOOP;   
   RETURN contract_;
END Get_Selected_Contract___;

FUNCTION Get_Selected_Location_Type_Db___(
   selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_list_                  VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_         VARCHAR2(32000);
   current_location_type_db_  VARCHAR2(20);
   current_handling_unit_id_  NUMBER;
   location_type_db_          VARCHAR2(20);
BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_  := substr(key_list_, 0, INSTR(key_list_, ';'));
      current_handling_unit_id_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID');      
      
      current_location_type_db_ := Handling_Unit_API.Get_Location_Type_Db(Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID'));
      IF (location_type_db_ IS NOT NULL AND location_type_db_ != current_location_type_db_) THEN
         location_type_db_ := NULL;
      ELSE
      location_type_db_ := current_location_type_db_;
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));
   END LOOP;   
   RETURN location_type_db_;
END Get_Selected_Location_Type_Db___;

PROCEDURE Create_Sscc___ (
   selection_ IN VARCHAR2 )
IS
   handling_unit_id_list_    VARCHAR2(32000);
BEGIN
   handling_unit_id_list_ := Get_Record_Separated_Hu_List___(selection_);
   Handling_Unit_API.Create_Sscc(handling_unit_id_list_);
END  Create_Sscc___;

FUNCTION Get_Handling_Unit_Label_Result_Key___ (
   selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_list_                  VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_         VARCHAR2(32000);
   parameter_attr_            VARCHAR2(32000);
   report_attr_               VARCHAR2(32000);
   current_handling_unit_id_  NUMBER;
   result_key_                NUMBER;    
   result_key_list_           VARCHAR2(5000);
   end_user_                  VARCHAR2(200) := Fnd_Session_API.Get_Fnd_User;
BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_  := substr(key_list_, 0, INSTR(key_list_, ';'));
      Client_SYS.Clear_attr(report_attr_);
      Client_SYS.Add_To_Attr('REPORT_ID', 'HANDLING_UNIT_LABEL_REP', report_attr_);      
      Client_SYS.Clear_attr(parameter_attr_);      
      Client_SYS.Add_To_Attr('LU_NAME', 'HandlingUnitLabel', parameter_attr_);
      current_handling_unit_id_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID'));
      Handling_Unit_Extended_Initial_Check___(current_handling_unit_id_);
      Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', current_handling_unit_id_, parameter_attr_);      
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, end_user_);  
      IF (result_key_list_ IS NULL) THEN
         result_key_list_ := result_key_;
      ELSE
         result_key_list_ := result_key_list_ || ',' || result_key_;
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));      
   END LOOP;
   
   RETURN result_key_list_;
END Get_Handling_Unit_Label_Result_Key___;


FUNCTION Get_Handling_Unit_Label_Content_Result_Key___ (
   selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_list_                  VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_         VARCHAR2(32000);
   parameter_attr_            VARCHAR2(32000);
   report_attr_               VARCHAR2(32000);
   current_handling_unit_id_  NUMBER;
   result_key_                NUMBER;    
   result_key_list_           VARCHAR2(5000);
   end_user_                  VARCHAR2(200) := Fnd_Session_API.Get_Fnd_User;
BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_  := substr(key_list_, 0, INSTR(key_list_, ';'));
      Client_SYS.Clear_attr(report_attr_);
      Client_SYS.Add_To_Attr('REPORT_ID', 'HANDL_UNIT_CONTENT_LABEL_REP', report_attr_);      
      Client_SYS.Clear_attr(parameter_attr_);      
      Client_SYS.Add_To_Attr('LU_NAME', 'HandlingUnitLabel', parameter_attr_);
      current_handling_unit_id_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID'));
      Handling_Unit_Extended_Initial_Check___(current_handling_unit_id_);
      Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', current_handling_unit_id_, parameter_attr_);      
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, end_user_);  
      IF (result_key_list_ IS NULL) THEN
         result_key_list_ := result_key_;
      ELSE
         result_key_list_ := result_key_list_ || ',' || result_key_;
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));      
   END LOOP;
   
   RETURN result_key_list_;
END Get_Handling_Unit_Label_Content_Result_Key___;

FUNCTION Get_Connected_Objids___(
   selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   key_list_                VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_       VARCHAR2(32000);
   inv_part_in_stock_keys_  Inventory_Part_In_Stock_For_Hu_key;
   objid_                   INVENTORY_PART_IN_STOCK.OBJID%TYPE;
   objid_list_              VARCHAR2(32000);
BEGIN
   WHILE (INSTR(key_list_, ';') > 0) LOOP
      current_selection_  := substr(key_list_, 0, INSTR(key_list_, ';'));
      inv_part_in_stock_keys_.contract := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CONTRACT');
      inv_part_in_stock_keys_.part_no := Client_SYS.Get_Key_Reference_Value(current_selection_, 'PART_NO');
      inv_part_in_stock_keys_.configuration_id := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CONFIGURATION_ID');
      inv_part_in_stock_keys_.location_no := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LOCATION_NO');
      inv_part_in_stock_keys_.lot_batch_no := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LOT_BATCH_NO');
      inv_part_in_stock_keys_.serial_no := Client_SYS.Get_Key_Reference_Value(current_selection_, 'SERIAL_NO');      
      inv_part_in_stock_keys_.eng_chg_level := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ENG_CHG_LEVEL');
      inv_part_in_stock_keys_.waiv_dev_rej_no := Client_SYS.Get_Key_Reference_Value(current_selection_, 'WAIV_DEV_REJ_NO');
      inv_part_in_stock_keys_.activity_seq := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Key_Reference_Value(current_selection_, 'ACTIVITY_SEQ'));
      inv_part_in_stock_keys_.handling_unit_id := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID'));

      objid_ := Get_Inventory_Part_In_Stock_Objid_By_Keys___(inv_part_in_stock_keys_.contract,
                                                             inv_part_in_stock_keys_.part_no,
                                                             inv_part_in_stock_keys_.configuration_id,
                                                             inv_part_in_stock_keys_.location_no,
                                                             inv_part_in_stock_keys_.lot_batch_no,
                                                             inv_part_in_stock_keys_.serial_no,
                                                             inv_part_in_stock_keys_.eng_chg_level,
                                                             inv_part_in_stock_keys_.waiv_dev_rej_no,
                                                             inv_part_in_stock_keys_.activity_seq,
                                                             inv_part_in_stock_keys_.handling_unit_id);
      IF (objid_list_ IS NULL) THEN
         objid_list_ := objid_;
      ELSE
         objid_list_ := objid_list_ || ',' ||objid_;
      END IF;
      key_list_ := SUBSTR(key_list_, (INSTR(key_list_, ';') + 1));
   END LOOP;   
   RETURN objid_list_;
END Get_Connected_Objids___;

FUNCTION Get_Inventory_Part_In_Stock_Objid_By_Keys___(
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   location_no_      IN VARCHAR2,
   lot_batch_no_     IN VARCHAR2,
   serial_no_        IN VARCHAR2,
   eng_chg_level_    IN VARCHAR2,
   waiv_dev_rej_no_  IN VARCHAR2,
   activity_seq_     IN NUMBER,
   handling_unit_id_ IN NUMBER) RETURN VARCHAR2
IS
   objid_                   INVENTORY_PART_IN_STOCK.OBJID%TYPE;
   objversion_              INVENTORY_PART_IN_STOCK.OBJVERSION%TYPE;
BEGIN
   Inventory_Part_In_Stock_API.Get_Id_Version_By_Keys(objid_,
                                                      objversion_,
                                                      contract_,
                                                      part_no_,
                                                      configuration_id_,
                                                      location_no_,
                                                      lot_batch_no_,
                                                      serial_no_,
                                                      eng_chg_level_,
                                                      waiv_dev_rej_no_,
                                                      activity_seq_,
                                                      handling_unit_id_);
   RETURN objid_;
END Get_Inventory_Part_In_Stock_Objid_By_Keys___;   

