-----------------------------------------------------------------------------
--
--  Logical unit: INVENT
--
--  File:         MaterialRequisition.RDF
--  Version:      Foundation1 2.2.3a
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  160705  SBalLK  Bug 130223, Modified Report_Material_Requis() method to compare date but not the time. Modified cursor to avoid selecting duplicate records.
--  160705          Removed code block added from Bug 35150 which is no longer needed.
--- 150512  MAHPLK  KES-402, Renamed usage of order_no, release_no, sequence_no, line_item_no attributes of InventoryTransactionHist 
--  150512          to source_ref1, source_ref2, source_ref3, source_ref4
--  110228  ChJalk  Used material_requis_line_tab instead of material_requis_line base view and used material_requisition_tab for material_requisition base view in cursors. 
--  051216  SuJalk  Changed the parameter VIEW_RPV to TABLE in Define_Report_.
--                  Changed the view INFO_SERVICES_RPV to INVENT_INFO_SERVICES_RPV. 
--  050824  NiDalk  Changed to Report Designer layout.
--  041217  DaZase  Changed TABLE from INFO_SERVICES_RPT to INVENT_INFO_SERVICES_RPT
--  040610  NaWilk  Bug 44975, Modified FROM clause in view MATERIAL_REQUIS_REP.
--  040430  DaRulk  Renamed 'Delivery Date' to 'Planned Delivery Date' in view comments.
--  040302  GeKalk  Replaced substrb with substr for UNICODE modifications.
--  ---------------- EDGE Package Group 3 Unicode Changes --------------------
--  040120  NaWalk  Replaced lengthb() with length() and instrb() with instr() for Unicode modification.
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  030731  MaGulk  Merged SP4
--  030114  GeKaLk  Bug 35150, Changed the delivery_date_ format to correct the comparison
--                  in the Report_SYS.Parse_Parameter function.
--  020815  AjShlk  Bug 29445, Remove the decoding of Status_Code.
--  020408  ROAL  IID 10115 removed control character from title
--  020402  ROAL  IID 10115 change tables reference and replace by views instead
--  020208  ROAL  Changed view comments to include letter/A4 sized reports
--  010320  DISH  changed the title of the report
--  000425  MOST  Created - US Tax project
-----------------------------------------------------------------------------

define MODULE             = INVENT
define LU                 = MaterialRequisLine
define PKG                = MATERIAL_REQUIS_RPI

define TABLE              = INVENT_INFO_SERVICES_RPT
define VIEW               = MATERIAL_REQUIS_REP
DEFINE VIEW_RPV           = INVENT_INFO_SERVICES_RPV
define METHOD             = Report_Material_Requis

define CUSTOMER_ID =    S1
define NAME =           S2
define ORDER_NO =       S3
define LINE_NO =        S4
define RELEASE_NO =     S5
define STATUS =         S6
define PART_NO =        S7
define UOM =            S8
define ACCOUNT =        S9
define PRE_ACC_ID =     S10 
define QTY =            N1
define COST =           N2
define TRANSACTION_ID = N3
define DELIVERY_DATE =  D1


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';
field_separator_ CONSTANT VARCHAR2(1) := Client_SYS.field_separator_;

PROCEDURE Enumerate_Customer (
   list_ OUT VARCHAR2 );

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                               RESULT_KEY,
       ROW_NO                                   ROW_NO,
       &CUSTOMER_ID                             CUSTOMER_ID,
       &NAME                                    NAME,
       &ORDER_NO                                ORDER_NO,
       &LINE_NO                                 LINE_NO,
       &RELEASE_NO                              RELEASE_NO,
       &STATUS                                  STATUS,
       &PART_NO                                 PART_NO,
       &UOM                                     UOM,
       &ACCOUNT                                 ACCOUNT,
       &QTY                                     QTY,
       &COST                                    COST,
       &TRANSACTION_ID                          TRANSACTION_ID,
       &DELIVERY_DATE                           DELIVERY_DATE
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..CUSTOMER_ID IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Customer^QUERY=Internal Customer ID^QFLAGS=----L^ENUMERATE=&PKG..Enumerate_Customer^ITEM_NAME=iCustomerId^';
COMMENT ON COLUMN &VIEW..NAME IS
   'FLAGS=A----^DATATYPE=VARCHAR2(30)^TITLE=Name^ITEM_NAME=iName^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS
   'FLAGS=A----^DATATYPE=VARCHAR2(12)^TITLE=Order No^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=VARCHAR2(4)^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..RELEASE_NO IS
   'FLAGS=A----^DATATYPE=VARCHAR2(4)^TITLE=Release No^ITEM_NAME=iReleaseNo^';
COMMENT ON COLUMN &VIEW..STATUS IS
   'FLAGS=A----^DATATYPE=VARCHAR2(30)^TITLE=Order Status^ITEM_NAME=iStatus^';
COMMENT ON COLUMN &VIEW..PART_NO IS
   'FLAGS=A----^DATATYPE=VARCHAR2(25)^TITLE=Part No^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &VIEW..UOM IS
   'FLAGS=A----^DATATYPE=VARCHAR2(10)^TITLE=UOM^ITEM_NAME=iUom^';
COMMENT ON COLUMN &VIEW..ACCOUNT IS
   'FLAGS=A----^DATATYPE=VARCHAR2(10)^TITLE=Account^ITEM_NAME=iAccount^';
COMMENT ON COLUMN &VIEW..QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iQty^';
COMMENT ON COLUMN &VIEW..COST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cost^ITEM_NAME=iCost^';
COMMENT ON COLUMN &VIEW..TRANSACTION_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Transaction ID^ITEM_NAME=iTransactionId^';
COMMENT ON COLUMN &VIEW..DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE^QUERY=Delivery date^QFLAGS=---B-^TITLE=Planned Delivery Date^ITEM_NAME=iDeliveryDate^';

BEGIN
   Report_SYS.Define_Report_( '&VIEW', '&MODULE', '&LU', 'Material Requisition (US)', '&TABLE', '&PKG..&METHOD', 8,'','','','PLSQL1.2','TRUE','Warehouse Management','Warehouse Operations');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   CURSOR get_data IS
      SELECT ic.int_customer_no        customer_no, 
             ic.name                   name, 
             mrl.order_no              order_no,
             mrl.line_no               line_no,
             mrl.release_no            release_no,
             mrl.status_code           status_code,
             mrl.part_no               part_no,
             mrl.qty_due               qty,
             mrl.unit_meas             uom,
             mrl.planned_delivery_date delivery_date,
             mrl.pre_accounting_id     pre_acc_id, 
             ith.transaction_id        transaction_id
      FROM   material_requisition_tab mr, 
             material_requis_line_tab mrl,
             internal_customer ic,
             inventory_transaction_hist_tab ith
      WHERE  ic.int_customer_no  = mr.int_customer_no
      AND    mr.order_no         = mrl.order_no
      AND    mr.order_class      = mrl.order_class
      AND    ith.part_no         = mrl.part_no
      AND    ith.contract        = mrl.contract
      AND    ith.source_ref1     = mrl.order_no
      AND    ith.source_ref2     = mrl.line_no
      AND    ith.source_ref3     = mrl.release_no
      AND    ith.source_ref4     = mrl.line_item_no
      and    ith.source_ref_type = 'MTRL REQ';
   
   CURSOR get_account(pre_acc_id_ IN VARCHAR2) IS 
      SELECT account_no 
        FROM pre_accounting 
       WHERE pre_accounting_id = pre_acc_id_;

   result_key_    NUMBER;
   row_no_        NUMBER := 1;
   delivery_date_ VARCHAR2(200);
   customer_      VARCHAR2(200);   
   do_xml_        BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_           CLOB;
   package_name_  VARCHAR2(100) := 'MATERIAL_REQUIS_REP';   
   account_no_    VARCHAR2(30);
   cost_          NUMBER := 0;           
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_    := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   delivery_date_ := nvl(Client_SYS.Get_Item_Value('DELIVERY_DATE', parameter_attr_), '%');
   customer_      := nvl(Client_SYS.Get_Item_Value('CUSTOMER_ID', parameter_attr_), '%');
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'REQUIS_ITEMS');
   END IF;
 
   FOR rec_ IN get_data LOOP
      IF ((Report_SYS.Parse_Parameter(trunc(rec_.delivery_date), delivery_date_, 'DATE') = 'TRUE') AND
          (Report_SYS.Parse_Parameter(rec_.customer_no, customer_) = 'TRUE')) THEN
             
         account_no_ := '';
         cost_ := 0;    
         cost_ := Inventory_Transaction_Hist_API.Get_Cost(rec_.transaction_id);
         OPEN get_account(rec_.pre_acc_id);
         FETCH get_account INTO account_no_;
         CLOSE get_account;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REQUIS_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_ID', rec_.customer_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NAME', rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO', rec_.order_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', rec_.line_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'RELEASE_NO', rec_.release_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'STATUS', rec_.status_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', rec_.part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'UOM', rec_.uom);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ACCOUNT', account_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'QTY', rec_.qty);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COST', cost_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TRANSACTION_ID', rec_.transaction_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_DATE', rec_.delivery_date);
            Xml_Record_Writer_SYS.End_Element(xml_, 'REQUIS_ITEM');
         END IF;
         
         IF (do_rs_) THEN
            INSERT INTO &TABLE (                                                                             
               RESULT_KEY,
               PARENT_ROW_NO,
               ROW_NO,
               &CUSTOMER_ID,
               &NAME,
               &ORDER_NO,
               &LINE_NO,
               &RELEASE_NO,
               &STATUS,
               &PART_NO,
               &UOM,
               &QTY,
               &COST,
               &TRANSACTION_ID,
               &PRE_ACC_ID,
               &DELIVERY_DATE)
            VALUES (                                                                                         
               result_key_,
               1,
               row_no_,
               rec_.customer_no,
               rec_.name,
               rec_.order_no,
               rec_.line_no,
               rec_.release_no,
               rec_.status_code,
               rec_.part_no,
               rec_.uom,
               rec_.qty,
               cost_,
               rec_.transaction_id,
               rec_.pre_acc_id,
               rec_.delivery_date);
         END IF;
         row_no_ := row_no_ + 1;
      END IF;--parse parameters
      UPDATE &TABLE tab
         SET (&ACCOUNT) =
            (SELECT account_no FROM pre_accounting pa
             WHERE pre_accounting_id = tab.&PRE_ACC_ID)
         WHERE result_key = result_key_;
   END LOOP;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'REQUIS_ITEMS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
END &METHOD;


PROCEDURE Enumerate_Customer (
   list_ OUT VARCHAR2 )
IS
CURSOR get_internal_customers IS
  SELECT int_customer_no
  FROM internal_customer;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Enumerate_Customer');
   list_ := NULL;
   FOR rec_ IN get_internal_customers LOOP
      list_ := list_ || rec_.int_customer_no || field_separator_;
   END LOOP;
END Enumerate_Customer;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE CUSTOMER_ID
UNDEFINE NAME
UNDEFINE ORDER_NO
UNDEFINE LINE_NO
UNDEFINE RELEASE_NO
UNDEFINE STATUS
UNDEFINE PART_NO
UNDEFINE UOM
UNDEFINE ACCOUNT
UNDEFINE PRE_ACC_ID
UNDEFINE QTY
UNDEFINE COST
UNDEFINE TRANSACTION_ID
UNDEFINE DELIVERY_DATE
