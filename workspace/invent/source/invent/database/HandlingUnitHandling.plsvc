-----------------------------------------------------------------------------
--
--  Logical unit: HandlingUnitHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-09-15  DaZase  SC2020R1-7510, Added Modify_Handing_Unit_Wadaco___.
--  2019-02-22  fandse  SCUXXW4-16737, Handling Unit Page - Print Labels for Structure didn't work
--  2019-02-11  fandse  UXXPERF-27, Performance improvments. Methods removed as where-conditions could be moved to client file instead.
--  2019-01-23  ChFolk  SCUXXW4-6101, Removed Create_Handling_Unit___. 
--  2019-01-09  ChFolk  SCUXXW4-6101, Added methods Repack_Part_In_Handling_Unit___ and Repack_Accessory_In_Handling_Unit___
--  2019-01-09          to support moving parts and accessories between the tree nodes.
--  2018-12-31  ChFolk  SCUXXW4-6101, Added new method Create_Handling_Unit___ to enter new handling Unit.
--  2018-12-07  ChFolk  SCUXXW4-6101, Created.
-----------------------------------------------------------------------------

layer Core;
PROCEDURE Modify_Parent_Handling_Unit___ (
   handling_unit_id_        IN  NUMBER,
   parent_handling_unit_id_ IN  NUMBER,
   info$_                   OUT VARCHAR2 ) 
IS
   
BEGIN
   Handling_Unit_API.Modify_Parent_Handling_Unit_Id(handling_unit_id_, parent_handling_unit_id_);
   info$_ := Handling_Unit_API.Get_Max_Capacity_Exceeded_Info(handling_unit_id_);
END Modify_Parent_Handling_Unit___;

PROCEDURE Copy_Structure___ (
   from_handling_unit_id_  IN  NUMBER,
   to_handling_unit_id_    IN  NUMBER,
   info$_                  OUT VARCHAR2 ) 
IS
   new_handling_unit_id_ NUMBER;
   old_handling_rec_     HANDLING_UNIT_API.Public_Rec;
BEGIN
   old_handling_rec_ := Handling_Unit_API.Get(from_handling_unit_id_);
   Handling_Unit_API.Copy_Structure(new_handling_unit_id_, from_handling_unit_id_, to_handling_unit_id_);
   info$_ := Handling_Unit_API.Get_Max_Capacity_Exceeded_Info(new_handling_unit_id_);
END Copy_Structure___;

PROCEDURE Remove_Hu_Structure___ (
   handling_unit_id_ IN NUMBER ) 
IS
   
BEGIN
   Handling_Unit_API.Remove_Structure(handling_unit_id_);
END Remove_Hu_Structure___;

PROCEDURE Remove_Handling_Unit___ (
   handling_unit_id_ IN NUMBER ) 
IS
   
BEGIN
   Handling_Unit_API.Remove(handling_unit_id_);
END Remove_Handling_Unit___;

PROCEDURE Create_Sscc_For_Hu___ (
   handling_unit_id_ IN NUMBER ) 
IS
   
BEGIN
   Handling_Unit_API.Create_Ssccs_For_Structure(handling_unit_id_);
END Create_Sscc_For_Hu___;

FUNCTION Get_Hu_Label_Result_Key___ (
   handling_unit_id_ IN NUMBER ) RETURN VARCHAR2
IS
   handling_unit_list_        VARCHAR2(4000);
   result_key_list_           VARCHAR2(5000);
   report_id_                 VARCHAR2(30) := 'HANDLING_UNIT_LABEL_REP';
BEGIN
   Handling_Unit_API.Get_Print_Labels_For_Structure(handling_unit_list_, handling_unit_id_);
   result_key_list_ := Create_Reports_For_Handling_Unit___(report_id_, handling_unit_list_);
   RETURN result_key_list_;
END Get_Hu_Label_Result_Key___;

-- Bound method
FUNCTION Get_Hu_Label_Result_Key___ (
	key_ IN Handling_Unit_Key) RETURN VARCHAR2
IS
BEGIN
	RETURN Get_Hu_Label_Result_Key___(key_.handling_unit_id);
END Get_Hu_Label_Result_Key___;

FUNCTION Get_Hu_Content_Label_Result_Key___ (
   handling_unit_id_ IN NUMBER ) RETURN VARCHAR2
IS
   handling_unit_list_        VARCHAR2(4000);
   result_key_list_           VARCHAR2(5000);
   report_id_                 VARCHAR2(30) := 'HANDL_UNIT_CONTENT_LABEL_REP';
BEGIN
   Handling_Unit_API.Get_Prnt_Cnt_Labels_For_Struct(handling_unit_list_, handling_unit_id_);
   result_key_list_ := Create_Reports_For_Handling_Unit___(report_id_, handling_unit_list_);      
   RETURN result_key_list_;
END Get_Hu_Content_Label_Result_Key___;

-- Bound method
FUNCTION Get_Hu_Content_Label_Result_Key___ (
	key_ IN Handling_Unit_Key) RETURN VARCHAR2
IS
BEGIN
	RETURN Get_Hu_Content_Label_Result_Key___(key_.handling_unit_id);
END Get_Hu_Content_Label_Result_Key___;

-- Create_Reports_For_Handling_Unit___
--    Create report_id_ reports for the handling units listed in handling_unit_list_.
FUNCTION Create_Reports_For_Handling_Unit___ (
   report_id_          IN VARCHAR2,
   handling_unit_list_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   list_                      VARCHAR2(32000) := handling_unit_list_;
   handling_unit_id_          NUMBER;
   no_of_labels_              NUMBER;
   parameter_attr_            VARCHAR2(2000);
   report_attr_               VARCHAR2(2000);  
   result_key_                NUMBER;    
   end_user_                  VARCHAR2(200) := Fnd_Session_API.Get_Fnd_User;
   result_key_list_           VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_attr(report_attr_);
   
   Client_SYS.Add_To_Attr('REPORT_ID', report_id_, report_attr_);    
   
   Get_Next_Handling_Unit_From_List___(handling_unit_id_, no_of_labels_, list_);
   WHILE (handling_unit_id_ IS NOT NULL) LOOP
      Client_SYS.Clear_attr(parameter_attr_);      
      Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', handling_unit_id_, parameter_attr_);
      
      FOR i_ IN 1..no_of_labels_ LOOP
         result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, end_user_);  
         IF (result_key_list_ IS NULL) THEN
            result_key_list_ := result_key_;
         ELSE
            result_key_list_ := result_key_list_ || ',' || result_key_;
         END IF;
      END LOOP;
      Get_Next_Handling_Unit_From_List___(handling_unit_id_, no_of_labels_, list_);
   END LOOP;   
         
   RETURN result_key_list_;
END Create_Reports_For_Handling_Unit___;

-- Get_Next_Handling_Unit_From_List___
--    Extract next handling_unit_id and no_of_labels from handling_unit_list_ and remove them from the list.
PROCEDURE Get_Next_Handling_Unit_From_List___ (
   handling_unit_id_   OUT    NUMBER,
   no_of_labels_       OUT    NUMBER,
   handling_unit_list_ IN OUT VARCHAR2 )
IS
   next_delimiter_pos_    NUMBER;
BEGIN
   next_delimiter_pos_ := INSTR(handling_unit_list_, '^');
   IF (next_delimiter_pos_ > 0) THEN 
      handling_unit_id_ := Client_SYS.Attr_Value_To_Number(SUBSTR(handling_unit_list_, 0, next_delimiter_pos_  - 1));
      handling_unit_list_ := SUBSTR(handling_unit_list_, next_delimiter_pos_ + 1);
      next_delimiter_pos_ := INSTR(handling_unit_list_, '^');
      no_of_labels_ := Client_SYS.Attr_Value_To_Number(SUBSTR(handling_unit_list_, 0, next_delimiter_pos_ - 1 ));
      next_delimiter_pos_ := INSTR(handling_unit_list_, '^');
      handling_unit_list_ := SUBSTR(handling_unit_list_, next_delimiter_pos_ + 1);            
   ELSE
      handling_unit_id_   := NULL;
      no_of_labels_       := NULL;
      handling_unit_list_ := NULL;
   END IF;
END Get_Next_Handling_Unit_From_List___;

FUNCTION Get_Default_Values_For_Hu_Type___(
   handling_unit_type_id_ IN VARCHAR2 )  RETURN Hu_Type_Detail_Structure_Rec
IS
   hu_type_details_ Hu_Type_Detail_Structure_Rec;
   hu_type_rec_     Handling_Unit_Type_API.Public_Rec;
BEGIN
   hu_type_rec_ := Handling_Unit_Type_API.Get(handling_unit_type_id_);
   hu_type_details_.handling_unit_category_id := hu_type_rec_.handling_unit_category_id;
   hu_type_details_.width := hu_type_rec_.width;
   hu_type_details_.height := hu_type_rec_.height;
   hu_type_details_.depth := hu_type_rec_.depth;
   hu_type_details_.uom_for_length := hu_type_rec_.uom_for_length;
   hu_type_details_.uom_for_volume := hu_type_rec_.uom_for_volume;
   hu_type_details_.uom_for_weight := hu_type_rec_.uom_for_weight;
   hu_type_details_.max_volume_capacity := hu_type_rec_.max_volume_capacity;
   hu_type_details_.max_weight_capacity := hu_type_rec_.max_weight_capacity;
   hu_type_details_.tare_weight := hu_type_rec_.tare_weight;
   hu_type_details_.additive_volume_db := CASE hu_type_rec_.additive_volume WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                          ELSE FALSE END;
   hu_type_details_.stackable_db := CASE hu_type_rec_.stackable WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                    ELSE FALSE END;
   hu_type_details_.generate_sscc_db := CASE hu_type_rec_.generate_sscc_no WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                        ELSE FALSE END;
   hu_type_details_.print_label_db := CASE hu_type_rec_.print_label WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                      ELSE FALSE END;   
   hu_type_details_.print_content_label_db := CASE hu_type_rec_.print_content_label WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                              ELSE FALSE END;
   hu_type_details_.print_shipment_label_db := CASE hu_type_rec_.print_shipment_label WHEN Fnd_Boolean_API.DB_TRUE THEN TRUE
                                               ELSE FALSE END;
   RETURN hu_type_details_;
END Get_Default_Values_For_Hu_Type___;

FUNCTION Generate_Unattach_Part_Fom_Hu_Where_Clause___(   
   handling_unit_id_ IN NUMBER )  RETURN VARCHAR2
IS
   where_clause_             VARCHAR2(32000);
   
BEGIN   
   where_clause_ := '((QTY_ONHAND > 0 OR QTY_IN_TRANSIT > 0)
                       AND (HANDLING_UNIT_ID IN (SELECT HANDLING_UNIT_ID 
                                                 FROM HANDLING_UNIT
                                                 CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                                  START WITH HANDLING_UNIT_ID = ' || handling_unit_id_ || ')))'; 
   RETURN where_clause_;
END Generate_Unattach_Part_Fom_Hu_Where_Clause___;

PROCEDURE Repack_Part_In_Handling_Unit___ (
   old_handling_unit_id_ IN  NUMBER,
   new_handling_unit_id_ IN  NUMBER,
   contract_             IN  VARCHAR2,
   part_no_              IN  VARCHAR2,
   configuration_id_     IN  VARCHAR2,
   location_no_          IN  VARCHAR2,
   lot_batch_no_         IN  VARCHAR2,
   serial_no_            IN  VARCHAR2,
   eng_chg_level_        IN  VARCHAR2,
   waiv_dev_rej_no_      IN  VARCHAR2,
   activity_seq_         IN  NUMBER,
   qty_to_move_          IN  NUMBER,
   catch_qty_to_move_    IN  NUMBER,
   info$_                OUT VARCHAR2 ) 
IS
   
BEGIN
   Inventory_Part_In_Stock_API.Change_Handling_Unit_Id(contract_                      => contract_,
                                                       part_no_                       => part_no_,
                                                       configuration_id_              => configuration_id_,
                                                       location_no_                   => location_no_,
                                                       lot_batch_no_                  => lot_batch_no_,
                                                       serial_no_                     => serial_no_,
                                                       eng_chg_level_                 => eng_chg_level_,
                                                       waiv_dev_rej_no_               => waiv_dev_rej_no_,
                                                       activity_seq_                  => activity_seq_,
                                                       old_handling_unit_id_          => old_handling_unit_id_, 
                                                       new_handling_unit_id_          => new_handling_unit_id_,
                                                       quantity_                      => qty_to_move_,
                                                       catch_quantity_                => catch_qty_to_move_,
                                                       discon_zero_stock_handl_unit_  => FALSE);
info$_ := Handling_Unit_API.Get_Max_Capacity_Exceeded_Info(new_handling_unit_id_);                                                      
                                                       
END Repack_Part_In_Handling_Unit___;


PROCEDURE Repack_Accessory_In_Handling_Unit___ (
   old_handling_unit_id_       IN  NUMBER,
   new_handling_unit_id_       IN  NUMBER,
   handling_unit_accessory_id_ IN  VARCHAR2,
   qty_to_move_                IN  NUMBER,
   info$_                      OUT VARCHAR2 ) 
IS
   
BEGIN
   Accessory_On_Handling_Unit_API.Change_Handling_Unit_Id(old_handling_unit_id_       => old_handling_unit_id_,
                                                          new_handling_unit_id_       => new_handling_unit_id_, 
                                                          handling_unit_accessory_id_ => handling_unit_accessory_id_,
                                                          quantity_                   => qty_to_move_);
   info$_ := Handling_Unit_API.Get_Max_Capacity_Exceeded_Info(new_handling_unit_id_);                                                          
END Repack_Accessory_In_Handling_Unit___;

FUNCTION Double_Handling_Unit_Extended_Initial_Check___ (
   first_handling_unit_id_ IN NUMBER,
   second_handling_unit_id_ IN NUMBER) RETURN BOOLEAN
IS

BEGIN
   IF (Handling_Unit_Extended_Initial_Check___(first_handling_unit_id_)) AND
      (Handling_Unit_Extended_Initial_Check___(second_handling_unit_id_)) THEN
      RETURN TRUE; 
   ELSE 
      RETURN FALSE; 
   END IF;   
     
END Double_Handling_Unit_Extended_Initial_Check___;

-- Dummy action created for wadaco process DataCaptModifyHndlUnit security
PROCEDURE Modify_Handing_Unit_Wadaco___
IS
BEGIN
   NULL;
END Modify_Handing_Unit_Wadaco___;

