-----------------------------------------------------------------------------
--
--  Fragment:     InventoryLocationsTab
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2022-01-18  SBalLK  Bug SC21R2-7237, Modified Get_Location_Number_Barcode_Result_Key___() method to pass contract to enable custom field for report.
--  2021-08-06  GrGalk  SCZ-15804, overrode the CRUD_Default_Copy___ to handle Location Sequence getting created alternatively in Aurena
--  2021-07-16  JaThlk  Bug 160098(SCZ-15544), Modified Get_Location_Number_Barcode_Result_Key___ to create one report instead of multiple reports and 
--  2021-07-16          to avoid issues when switching the layouts.
--  2020-11-09  PamPlk  SC2020R1-10310, Modified the CRUD_Default_Copy___ in order to fetch the location_sequence_no and fetch
--  2020-11-09          bay_id, row_id, bin_id, tier_id.
--  2020-03-12  DaZase  SCXTEND-2292, Added CRUD_Default_Copy___ to simulate IEE duplicate handling.
--  2019-06-18  AwWelk  SCUXXW4-22664, Modified Crud_Default__() to match with IFSEE behaviour on bay, row, tier and bin ids.
--  2018-12-21  KoDelk  SCUXXW4-14231, Created.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Get_Location_Sequence_Barcode_Result_Key___(
   selection_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   parameter_attr_            VARCHAR2(32000);
   report_attr_               VARCHAR2(32000);
   result_key_                NUMBER;    
   result_key_list_           VARCHAR2(5000);
   location_no_               VARCHAR2(50);
BEGIN
   FOR rec_ IN (SELECT regexp_substr(selection_ ,'[^;]+', 1, LEVEL) AS rec_ FROM dual CONNECT BY regexp_substr(selection_, '[^;]+', 1, LEVEL) IS NOT NULL) LOOP
      Client_SYS.Clear_attr(report_attr_);
      Client_SYS.Add_To_Attr('REPORT_ID', 'INVENTORY_LOCATION_REP', report_attr_); 
      
      Client_SYS.Clear_attr(parameter_attr_);
      location_no_ := Warehouse_Bay_Bin_API.Get_Location_Sequence(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'CONTRACT'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'WAREHOUSE_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BAY_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TIER_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'ROW_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BIN_ID'));
      Client_SYS.Add_To_Attr('LOCATION_SEQUENCE', location_no_, parameter_attr_);
      Warehouse_Bay_Bin_Initial_Check___(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'CONTRACT'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'WAREHOUSE_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BAY_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TIER_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'ROW_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BIN_ID'));
         
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);  
      IF (result_key_list_ IS NULL) THEN
         result_key_list_ := result_key_;
      ELSE
         result_key_list_ := result_key_list_ || ',' || result_key_;
      END IF;       
   END LOOP; 
   RETURN result_key_list_;
END Get_Location_Sequence_Barcode_Result_Key___;


FUNCTION Get_Location_Number_Barcode_Result_Key___(
   selection_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   parameter_attr_            VARCHAR2(32000);
   report_attr_               VARCHAR2(32000);    
   result_key_list_           VARCHAR2(5000);
   location_no_               VARCHAR2(50);
   location_no_list_          VARCHAR2(32000);
   contract_                  VARCHAR2(5);
BEGIN
   FOR rec_ IN (SELECT regexp_substr(selection_ ,'[^;]+', 1, LEVEL) AS rec_ FROM dual CONNECT BY regexp_substr(selection_, '[^;]+', 1, LEVEL) IS NOT NULL) LOOP
      IF (contract_ IS NULL ) THEN
         contract_ := Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'CONTRACT');
      END IF;
      
      location_no_ := Warehouse_Bay_Bin_API.Get_Location_No(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'CONTRACT'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'WAREHOUSE_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BAY_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TIER_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'ROW_ID'),
                                                            Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BIN_ID'));

      Warehouse_Bay_Bin_Initial_Check___(Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'CONTRACT'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'WAREHOUSE_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BAY_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'TIER_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'ROW_ID'),
                                         Client_SYS.Get_Key_Reference_Value(rec_.rec_, 'BIN_ID'));      
      
      location_no_list_ := location_no_list_ || location_no_ || ';';
      
   END LOOP; 
   
   IF (location_no_list_ IS NOT NULL) THEN
      Client_SYS.Clear_attr(report_attr_);
      Client_SYS.Add_To_Attr('REPORT_ID', 'INVENT_LOCATION_NO_BARCODE_REP', report_attr_); 
      Client_SYS.Clear_attr(parameter_attr_);
      Client_SYS.Add_To_Attr('CONTRACT',   contract_, parameter_attr_);
      Client_SYS.Add_To_Attr('LOCATION_NO',SUBSTR(location_no_list_,0,length(location_no_list_)-1), parameter_attr_);
      result_key_list_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);  
   END IF; 
   
   RETURN result_key_list_;
END Get_Location_Number_Barcode_Result_Key___;

@Override
PROCEDURE CRUD_Default___ (
   key_  IN  Warehouse_Bay_Bin_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
BEGIN
   super(key_, attr_, info_);
   Client_SYS.Add_To_Attr('BAY_ID',  '  -', attr_);
   Client_SYS.Add_To_Attr('ROW_ID',  '  -', attr_);
   Client_SYS.Add_To_Attr('TIER_ID', '  -', attr_);
   Client_SYS.Add_To_Attr('BIN_ID',  '  -', attr_);
   Client_SYS.Add_To_Attr('ROUTE_ORDER', '  -', attr_);
END CRUD_Default___;

@Override
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN  VARCHAR2,
   key_    IN  Warehouse_Bay_Bin_Key,
   values_ IN  Copy_Values_Rec,
   attr_   OUT VARCHAR2,
   info_   OUT VARCHAR2 )
IS
BEGIN
   
   super(objid_, key_, values_, attr_, info_);
   
   Client_SYS.Set_Item_Value('BAY_ID',  key_.bay_id, attr_);
   Client_SYS.Set_Item_Value('TIER_ID', key_.tier_id, attr_);
   Client_SYS.Set_Item_Value('ROW_ID',  key_.row_id, attr_);
   Client_SYS.Set_Item_Value('BIN_ID',  key_.bin_id, attr_);
   Client_SYS.Set_Item_Value('LOCATION_NO', Client_SYS.Get_Item_Value('LOCATION_SEQUENCE', attr_), attr_);
   
END CRUD_Default_Copy___;

@Override
PROCEDURE CRUD_Default_Copy___ (
   rec_ IN OUT NOCOPY Warehouse_Bay_Bin_Rec )
IS
BEGIN
   super(rec_);
   rec_.location_sequence := NULL;
END CRUD_Default_Copy___;