-----------------------------------------------------------------------------
--
--  Logical unit: AssortmentHandling
--  Component:    INVENT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-04-30  AyAmlk  PR21R2-170, STRATEGIC_PROCUREMENT: Added missing dynamic dependencies for SRM in Create_Assortment_Structure___.
--  2020-11-30  NaLrlk  PR2020R1-367, Added Get_Connected_Parts___() for populate parts data.
--  2020-09-23  RaVdlk  SC2020R1-9759, Overridden the CRUD_CREATE of Customer_Assortment_Struct to fetch classification standard
--  2020-07-09  AyAmlk  PR2020R1-53, Moved common code in AssortmentHandling and ProcurementCategoryAssortmentHandling to
--  2020-07-09          AssortmentCommonObjects fragment.
--  2019-07-03  MeAblk  SCUXXW4-22545, Added Create_Assortment_Structure___.
--  2019-06-30  AwWelk  SCUXXW4-16313, Merged the parameters lot_quantity_rule, sub_lot_rule, serial_rule to Create_Part_Node___().
--  2019-05-19  bajelk  SCUXXW4-19062, Added Filter_Added_Parts___() function to Part List Dialog.
--  2019-04-25  ChFolk  SCUXXW4-18402, Removed function Get_Connected_Parts___ as it could be handled from projection.
--  2019-04-11  ChFolk  SCUXXW-18403, Removed function Get_Assortment_Nodes___ as it could be handled from projection.
--  2018-11-27  KoDelk  SCUXXW4-5961, Converted from frmWarehouseMgrTaskPlanning using MTG Version: 1.32
---------------------------------------------------------------------------------

layer Core;


FUNCTION Get_Default_Seach_Context___ RETURN Assortment_Context_Search_Structure_Rec
IS
   return_val_    Assortment_Context_Search_Structure_Rec;
BEGIN
   return_val_.part_view_type := 'SELECTED';
   return_val_.part_no := '';
   RETURN return_val_;
END Get_Default_Seach_Context___;


@Override
PROCEDURE CRUD_Default___ (
   rec_ IN OUT Create_Part_Virtual_Rec )
IS
   info_       VARCHAR2(32000);
   objid_      VARCHAR2(32000);
   objversion_ VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   ptr_        NUMBER;
   name_       VARCHAR2(30);
   value_      VARCHAR2(32000);
BEGIN
   Part_Catalog_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('STD_NAME_ID') THEN
         rec_.std_name_id := Client_SYS.Attr_Value_To_Number(value_);
      WHEN ('LOT_TRACKING_CODE') THEN
         rec_.lot_tracking_code := Part_Lot_Tracking_API.Encode(value_);
      WHEN ('SERIAL_RULE') THEN
         rec_.serial_rule := Part_Serial_Rule_API.Encode(value_);
      WHEN ('SERIAL_TRACKING_CODE_DB') THEN
         rec_.serial_tracking_code_db := value_;
      WHEN ('ENG_SERIAL_TRACKING_CODE_DB') THEN
         rec_.eng_serial_tracking_code_db := value_;
      WHEN ('CONFIGURABLE_DB') THEN
         rec_.configurable_db := value_;
      WHEN ('CONDITION_CODE_USAGE_DB') THEN
         rec_.condition_code_usage_db := value_;
      WHEN ('SUB_LOT_RULE') THEN
         rec_.sub_lot_rule := Sub_Lot_Rule_API.Encode(value_);
      WHEN ('LOT_QUANTITY_RULE') THEN
         rec_.lot_quantity_rule := Lot_Quantity_Rule_API.Encode(value_);
      WHEN ('CATCH_UNIT_ENABLED_DB') THEN
         rec_.catch_unit_enabled_db := CASE value_ WHEN 'TRUE' THEN TRUE ELSE FALSE END;
      WHEN ('MULTILEVEL_TRACKING_DB') THEN
         rec_.multilevel_tracking_db := value_;
      WHEN ('FREIGHT_FACTOR') THEN
         rec_.freight_factor := Client_SYS.Attr_Value_To_Number(value_);
      WHEN ('RECEIPT_ISSUE_SERIAL_TRACK_DB') THEN
         rec_.receipt_issue_serial_track_db := CASE value_ WHEN 'TRUE' THEN TRUE ELSE FALSE END;
      ELSE
         NULL;
      END CASE;
   END LOOP;
   super(rec_);
END CRUD_Default___;


PROCEDURE Create_Part_Node___ (
   key_ IN Assortment_Virtual_Key ) 
IS
BEGIN
   FOR rec_ IN Get_Create_Part_Virtual_Array___(key_) LOOP
      Gtin_Factory_Util_API.Validate_Gtin_Digits(rec_.gtin_no, rec_.gtin_series);
 
      Assortment_Node_API.Create_Part_Node__(rec_.assortment_id,
                                             rec_.part_no,
                                             rec_.description,
                                             rec_.unit_code,
                                             rec_.parent_node_id,
                                             rec_.std_name_id,
                                             rec_.info_text,
                                             rec_.part_main_group,
                                             Part_Serial_Tracking_API.Decode(rec_.eng_serial_tracking_code_db),
                                             Part_Serial_Tracking_API.Decode(rec_.serial_tracking_code_db),
                                             rec_.configurable_db,
                                             rec_.condition_code_usage_db,
                                             rec_.lot_tracking_code,
                                             'NOT POSITION PART',
                                             rec_.gtin_no,
                                             rec_.gtin_series,
                                             rec_.net_weight,
                                             rec_.net_weight_uom,
                                             rec_.net_volume,
                                             rec_.net_volume_uom,
                                             rec_.freight_factor,
                                             CASE rec_.catch_unit_enabled_db WHEN 1 THEN 'TRUE' ELSE 'FALSE' END,
                                             rec_.multilevel_tracking_db,
                                             CASE rec_.create_automatically WHEN 1 THEN 'TRUE' ELSE 'FALSE' END,
                                             CASE rec_.receipt_issue_serial_track_db WHEN 1 THEN 'TRUE' ELSE 'FALSE' END,
                                             rec_.input_unit_meas_group_id,
                                             Lot_Quantity_Rule_API.Decode(rec_.lot_quantity_rule),
                                             Sub_Lot_Rule_API.Decode(rec_.sub_lot_rule),
                                             Part_Serial_Rule_API.Decode(rec_.serial_rule));
   END LOOP;
END Create_Part_Node___;


-- STRATEGIC_PROCUREMENT: Passed proc_category_assortment_.
PROCEDURE Create_Assortment_Structure___ (
   assortment_id_             IN  VARCHAR2,
   description_               IN  VARCHAR2,
   classification_standard_   IN  VARCHAR2,
   notes_                     IN  VARCHAR2,
   proc_category_assortment_  IN BOOLEAN,
   info$_                     OUT VARCHAR2 ) 
IS
   objid_                        VARCHAR2(32000);
   objversion_                   VARCHAR2(32000);
   attr_                         VARCHAR2(32000);
   proc_category_assortment_db_  VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ASSORTMENT_ID',           assortment_id_,           attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION',             description_,             attr_);
   Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', classification_standard_, attr_);
   Client_SYS.Add_To_Attr('NOTES',                    notes_,                  attr_);
   -- STRATEGIC_PROCUREMENT: start
   $IF Component_Srm_SYS.INSTALLED $THEN
   IF proc_category_assortment_ THEN
      proc_category_assortment_db_ := Fnd_Boolean_API.DB_TRUE;
   END IF;
   $END
   -- STRATEGIC_PROCUREMENT: end
   Client_SYS.Add_To_Attr('PROC_CATEGORY_ASSORTMENT_DB', proc_category_assortment_db_, attr_);
   Assortment_Structure_API.New__(info$_, objid_, objversion_, attr_, 'DO');
END Create_Assortment_Structure___;

@DynamicComponentDependency ORDER
@Override
PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Customer_Assortment_Struct_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   assortment_id_   VARCHAR2 (2000);
BEGIN
   assortment_id_ := Client_SYS.Get_Item_Value('ASSORTMENT_ID', attr_);
   Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', Assortment_Structure_API.Get_Classification_Standard(assortment_id_),  attr_);
   super(etag_,key_,attr_,info_,action_);
END CRUD_Create___;

FUNCTION Get_Connected_Parts___ (
   assortment_id_      IN VARCHAR2,
   assortment_node_id_ IN VARCHAR2,
   part_selection_     IN VARCHAR2) RETURN Objid_Arr
IS
BEGIN
   RETURN Get_Parts_Selection___(assortment_id_, assortment_node_id_, part_selection_);
END Get_Connected_Parts___;
