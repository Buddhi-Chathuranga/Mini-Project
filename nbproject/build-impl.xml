<?xml version="1.0" encoding="UTF-8"?>
<!--
*****************************************************************************
*** GENERATED FILE DO NOT EDIT. IT WILL BE OVEWRITTEN. Note: If you edit  ***
*** this file it will be backed up to nbproject/private and replaced with ***
*** the latest build-impl.xml which is included with Developer Studio.    ***
***           TargetVersion APPS_10_ALPHA or Later                        ***
*****************************************************************************

        -->
<project name="MiniProject-impl" default="dist" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant" xmlns:ear2="http://www.netbeans.org/ns/j2ee-earproject/2">
   <!-- Script to build IFS Applications -->
   <property file="nbproject/project.properties"/>
   <property file="nbproject/private/private.properties"/>
   <!-- Loads all NetBeans registred "Ant Libraries" as variables -->
   <property file="${user.properties.file}"/>
                
   <property name="server.thirdparty.libs" value="${basedir}/lib/jars/thirdparty" />
   <property name="server.fragment.libs"   value="${basedir}/lib/jars/fragment" />
   <property name="server.util.libs"       value="${basedir}/lib/jars/util" />
   <property name="server.framework.libs"   value="${basedir}/lib/jars/framework" />
   

   <property name="ws.dist"              value="${basedir}/${dist.dir}/server" />
   <property name="server.gen.src.dir"   value="${build.generated.sources.dir}/server" />

   <property name="projections.gen.src.dir"   value="${build.generated.sources.dir}/projection" />
   <property name="projection.build"          value="${basedir}/${build.classes.dir}/projection" />
   <property name="projection.dist"           value="${basedir}/${dist.dir}/projection"/>

   <property name="build.root"          value="${basedir}/workspace" />
   <property name="generate.root"       value="${basedir}" />
   <property name="tmp.dir"             value="${build.dir}/temp" />
   
   <property name="build.home.server.lob"                 value="${project.build.home}/server/lob" />
   <property name="build.home.framework.dir"              value="${project.build.home}/source/fndbas/framework/" />
   <property name="build.home.framework.libs"             value="${build.home.framework.dir}/thirdparty" />
   <property name="build.home.odata.api.libs"             value="${build.home.framework.dir}/odata-api" />
   <property name="build.home.odata.thirdparty.libs"      value="${build.home.framework.dir}/odp-thirdparty-libs" />

  <!-- ============================================================== -->
  <!--  TASK DEFINITIONS                                              -->
  <!-- ============================================================== -->

   <path id="maven-ant-tasks.classpath" path="${libs.maven-ant-tasks.classpath}" />
   <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="maven-ant-tasks.classpath" />

   <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
         <pathelement location="${libs.ant_contrib_lib.classpath}"/>
      </classpath>
   </taskdef>
                
   <taskdef resource="net/sf/antcontrib/antlib.xml">
     <classpath>
         <pathelement location="${libs.ant_contrib_lib.classpath}"/>
     </classpath>
   </taskdef>  

   <taskdef name="setTargetVersionJavaProperties" classname="ifs.dev.buildtasks.apps10.VersionPropertySetterTask">
      <classpath>
         <fileset dir="${codegen.modules.path}">
            <include name="ifs-dev-buildtasks-apps10.jar"/>
            <include name="ifs-dev-util.jar"/>
         </fileset>
      </classpath>
   </taskdef>

   <path id="sources">
       <pathelement location="${server.gen.src.dir}"/>
   </path>

   <!-- Set java.source.level and project.javaee.version -->
   <setTargetVersionJavaProperties targetVersion="${applications.version}" />
                            
  <!-- check if any projections have been added to the Application Server (to build) -->
  <condition property="build.projections">
      <matches string="${build.source.artifacts}" pattern="\b,Projection\b"/>
  </condition>                              


            

  <!-- ============================================================== -->
  <!--  TARGETS FOR JAVA IMPL DEVELOPMENT                             -->
  <!-- ============================================================== -->

   <target name="dist" depends="init-check">    
      <antcall target="dist-projections-if-included"/>                      
   </target>

   <target name="dist-projections-if-included" if="build.projections">
      <antcall target="compile-projections"/>
   </target> 

   <target name="init-projection-info">
      <script language="javascript">  <![CDATA[
          buildArtifacts = project.getProperty("build.source.artifacts");
          buildProjectionImpls = "";
          buildProjectionModules = "";
          if (buildArtifacts!=null && buildArtifacts!=""){
              buildArtifactsArr = buildArtifacts.split(";");
              if (buildArtifactsArr.length>0){
                  for (i=0; i< buildArtifactsArr.length; i++)
                  {
                      buildArtifactInfo = buildArtifactsArr[i].split(",");
                      if (buildArtifactInfo.length==3 && (buildArtifactInfo[2]=="Projection" || buildArtifactInfo[2]=="Fragment")) {
                         buildProjectionImpls = buildProjectionImpls.concat("workspace/",buildArtifactInfo[0],"/source/",buildArtifactInfo[0],"/projection/packages/;");
                         buildProjectionImpls = buildProjectionImpls.concat(buildArtifactInfo[1],";");
                         buildProjectionImpls = buildProjectionImpls.concat(buildArtifactInfo[2],";");
                         buildProjectionImpls = buildProjectionImpls.concat(buildArtifactInfo[0],",");
                         if (buildProjectionModules.indexOf(buildArtifactInfo[0]+",")<0) {
                            buildProjectionModules = buildProjectionModules.concat(buildArtifactInfo[0],",");
                         }
                      }
                  }
                  if (buildProjectionImpls!=null && buildProjectionImpls!=""){
                    project.setProperty("build.projection.impls", buildProjectionImpls);
                  }
                  if (buildProjectionModules!=null && buildProjectionModules!=""){
                    project.setProperty("build.projection.modules", buildProjectionModules);
                  }
              }
           }
         ]]>
      </script>      
   </target>
   
   <target name="create-temparary-package-for-compilation">
      <mkdir dir="${basedir}/temp/com/ifsworld/projection"/>
      <copy todir="${basedir}/temp/com/ifsworld/projection" flatten="true">
        <fileset dir="${projections.gen.src.dir}/com/ifsworld/projection" erroronmissingdir="false">
            <include name="**/${model.name}Functions.java"/>
            <include name="**/${model.name}FunctionsFragmentsWrapper.java"/>
            <include name="**/${model.name}Actions.java"/>
            <include name="**/${model.name}ActionsFragmentsWrapper.java"/>
            <include name="**/${model.name}StreamAttributesHandler.java"/>
            <include name="**/${model.name}StreamAttributesHandlerFragmentsWrapper.java"/>
         </fileset>
      </copy> 
   </target>
   
   <target name="copy-dependant-jars">
      <foreach list="${build.projection.modules}" delimiter="," param="module" target="copy-module-jars" inheritall="true"/>
   </target>
   
   <target name="copy-module-jars">
      <copy todir="${ws.dist}/lob/${module}/javaimpl-lib" flatten="true" failonerror="false">
         <fileset dir="${build.root}/${module}/source/${module}/projection/lib">
            <include name="*.jar"/>
         </fileset>
      </copy>
   </target>
   
   <target name="compile-and-create-util-jar">
      <if>
         <available file="${path.for.java.implementations}/utils" type="dir" />
	 <then>
	    <if>
               <not>
                  <available file="${ws.dist}/lob/${component.name}/javaimpl-lib" type="dir" />
               </not>
               <then>
                  <mkdir dir="${ws.dist}/lob/${component.name}/javaimpl-lib"/>
               </then>
            </if>
            <mkdir dir="${projection.build}/${component.name}/utils"/>
            <javac includeantruntime="false" debug="true" debuglevel="lines,vars,source" destdir="${projection.build}/${component.name}/utils" optimize="true" source="${java.source.level}" target="${java.source.level}" deprecation="on" errorproperty="compile.failed">
               <src path="${path.for.java.implementations}/utils"/>         
               <classpath>           
                  <fileset dir="${server.thirdparty.libs}">
                     <include name="*.jar"/>
                  </fileset>
                  <fileset dir="${server.framework.libs}">
                     <include name="*.jar"/>
                  </fileset>
                  <fileset dir="${ws.dist}/lob/${component.name}/javaimpl-lib">
                     <include name="*.jar"/>
                  </fileset>
               </classpath>
            </javac>
	    <if>
	       <isset property="compile.failed" />
	       <then>
	          <echo message="ERROR: Projection util compilation failed for module '${component.name}'"/>
	       </then>
	       <else>
	          <jar destfile="${ws.dist}/lob/${component.name}/javaimpl-lib/${component.name}-util.jar"
                          basedir="${projection.build}/${component.name}/utils"/>
                  <copy todir="${server.util.libs}" flatten="true" overwrite="true">
                     <fileset dir="${ws.dist}/lob/${component.name}/javaimpl-lib/">
                        <include name = "${component.name}-util.jar"/>
		     </fileset>
	          </copy>
	       </else>
	    </if>
         </then>
      </if>
   </target>
   
   <target name="compile-fragments" depends="init-projection-info, init-projection-build, copy-dependant-jars">
      <foreach list="${build.projection.impls}" delimiter="," param="path.and.name" target="compile-fragment" inheritall="true"/>
   </target>
   
   <target name="compile-fragment">
      <script language="javascript">
            arr = project.getProperty('path.and.name').split(';');
            project.setProperty('projection.path', arr[0]);
            project.setProperty('projection.name', arr[1]);
			project.setProperty('model.type', arr[2]);
            project.setProperty('component.name', arr[3]);
      </script>
      <antcall target="compile-and-create-util-jar">
         <param name="path.for.java.implementations" value="${projection.path}"/>
         <param name="component.name" value="${component.name}"/>
      </antcall>
      <if>
         <equals arg1="${model.type}" arg2="Fragment"/>
	 <then>
	    <antcall target="create-temparary-package-for-compilation">
      	       <param name="model.name" value="${projection.name}"/>
            </antcall>
            <if>
               <not>
                  <available file="${ws.dist}/lob/${component.name}/javaimpl-lib" type="dir" />
               </not>
               <then>
                  <mkdir dir="${ws.dist}/lob/${component.name}/javaimpl-lib"/>
               </then>
            </if>
            <mkdir dir="${projection.build}/${projection.name}"/>
            <javac includeantruntime="false" debug="true" debuglevel="lines,vars,source" destdir="${projection.build}/${projection.name}" optimize="true" source="${java.source.level}" target="${java.source.level}" deprecation="on" errorproperty="compile.failed">
               <src path="${basedir}/temp"/>
               <src path="${projection.path}/${projection.name}"/>         
               <classpath>           
                  <fileset dir="${server.thirdparty.libs}">
                     <include name="*.jar"/>
                  </fileset>
                  <fileset dir="${server.framework.libs}">
                     <include name="*.jar"/>
                  </fileset>
                  <fileset dir="${server.util.libs}">
                     <include name="*.jar"/>
                  </fileset>
                  <fileset dir="${ws.dist}/lob/${component.name}/javaimpl-lib">
                     <include name="*.jar"/>
                  </fileset>
               </classpath>
            </javac>
	    <if>
               <isset property="compile.failed" />
               <then>
                  <echo message="ERROR: Java Impl Compilation failed for Fragment '${projection.name}'"/>
               </then>
               <else>
                  <jar destfile="${ws.dist}/lob/${component.name}/javaimpl/${projection.name}/${projection.name}.jar"
                             basedir="${projection.build}/${projection.name}"/>
		  <copy todir="${server.fragment.libs}" flatten="true" overwrite="true">
                     <fileset dir="${ws.dist}/lob/${component.name}/javaimpl/${projection.name}/">
                        <include name = "${projection.name}.jar"/>
		     </fileset>
	          </copy>
               </else>
            </if>
            <delete dir="${basedir}/temp"/>
	 </then>
      </if>
   </target>  
            
            
   <target name="compile-projections" depends="compile-fragments">
      <foreach list="${build.projection.impls}" delimiter="," param="path.and.name" target="compile-projection" inheritall="true"/>
   </target>
   
   <target name="compile-projection" >
     <script language="javascript">
            arr = project.getProperty('path.and.name').split(';');
            project.setProperty('projection.path', arr[0]);
            project.setProperty('projection.name', arr[1]);
            project.setProperty('model.type', arr[2]);
            project.setProperty('component.name', arr[3]);
     </script>
     <if>
        <equals arg1="${model.type}" arg2="Projection"/>
        <then>
           <antcall target="create-temparary-package-for-compilation">
      	      <param name="model.name" value="${projection.name}"/>
           </antcall>
           <antcall target="compile-and-create-util-jar">
	      <param name="path.for.java.implementations" value="${projection.path}"/>
	      <param name="component.name" value="${component.name}"/>
	   </antcall>
           <if>
              <not>
                 <available file="${ws.dist}/lob/${component.name}/javaimpl-lib" type="dir" />
              </not>
              <then>
                 <mkdir dir="${ws.dist}/lob/${component.name}/javaimpl-lib"/>
              </then>
           </if>
           <mkdir dir="${projection.build}/${projection.name}"/>
           <javac includeantruntime="false" debug="true" debuglevel="lines,vars,source" destdir="${projection.build}/${projection.name}" optimize="true" source="${java.source.level}" target="${java.source.level}" deprecation="on" errorproperty="compile.failed">
              <src path="${basedir}/temp"/>
              <src path="${projection.path}/${projection.name}"/>         
              <classpath>           
                 <fileset dir="${server.thirdparty.libs}">
                    <include name="*.jar"/>
                 </fileset>
                 <fileset dir="${server.framework.libs}">
                     <include name="*.jar"/>
                  </fileset>
                 <fileset dir="${server.fragment.libs}">
                    <include name="*.jar"/>
                 </fileset>
                 <fileset dir="${server.util.libs}">
                    <include name="*.jar"/>
                 </fileset>
                 <fileset dir="${ws.dist}/lob/${component.name}/javaimpl-lib">
                    <include name="*.jar"/>
                 </fileset>
              </classpath>
           </javac>
           <if>
              <isset property="compile.failed" />
              <then>
                 <echo message="ERROR: Java Impl Compilation failed for projection '${projection.name}'"/>
              </then>
              <else>
                 <jar destfile="${ws.dist}/lob/${component.name}/javaimpl/${projection.name}/${projection.name}.jar"
                        basedir="${projection.build}/${projection.name}"/>
              </else>
           </if>
           <delete dir="${basedir}/temp"/>
        </then>
     </if>
   </target>
                            
   <!-- This enables "compile" to be called standalone (not currently used maybe useful in future..JRebel???) -->
   <target name="compile" depends="init-check">      
      <antcall target="compile-projections-if-included"/>
   </target>

      
   <target name="compile-projections-if-included" if="build.projections">
      <antcall target="compile-projections"/>
   </target>  
  
            

  <target name="clean">    
      <delete dir="${ws.dist}"/>
      <delete dir="${ext.jars.folder}"/>            
      <delete dir="${projections.gen.src.dir}"/>
      <delete dir="${projection.build}"/>
      <delete dir="${projection.dist}"/>   
  </target>


  <target name="init-check">
      <fail unless="build.source.artifacts">The Application Server is empty, there is nothing to deploy!</fail>
   </target>

  <target name="init-projection-build" if="build.projections">
      <tstamp/>
      <delete dir="${basedir}/temp"/>                
      <delete dir="${projection.dist}"/>
      <mkdir dir="${projection.build}"/>
      <mkdir dir="${projection.dist}/lib"/>
   </target>

   <!-- IMPORTANT: The targets from here onwards are ONLY used for synchronizing libraries
       with a project share. (i.e. Not for building ifsapp.ear)
   -->
   <property name="sync.jars"           value="lib/jars"/>
   
   <target name="syncjars">      
      <delete dir="${server.fragment.libs}"/>    
      <copy todir="${server.fragment.libs}" flatten="true" verbose="true">
         <fileset dir="${build.home.server.lob}">
            <include name = "**/javaimpl/**/*.jar"/>
         </fileset>
      </copy>
      <delete dir="${server.util.libs}"/>
      <copy todir="${server.util.libs}" flatten="true" verbose="true">
         <fileset dir="${build.home.server.lob}">
            <include name = "**/javaimpl-lib/*-util.jar"/>
         </fileset>
      </copy>
      <delete dir="${server.thirdparty.libs}"/>
      <copy todir="${server.thirdparty.libs}" flatten="true" verbose="true">
         <fileset dir="${build.home.server.lob}">
            <exclude name = "**/javaimpl-lib/*-util.jar"/>
            <include name = "**/javaimpl-lib/*.jar"/>
         </fileset>
      </copy>
      <delete dir="${server.framework.libs}"/>
      <copy todir="${server.framework.libs}" flatten="true" verbose="true">
         <fileset dir="${build.home.odata.thirdparty.libs}">
            <include name = "*.jar"/>
         </fileset>
      </copy>
      <copy todir="${server.framework.libs}" flatten="true" verbose="true">
         <fileset dir="${build.home.framework.libs}">
            <include name = "javaee-api-7.0.jar"/>
         </fileset>
      </copy>
      <copy todir="${server.framework.libs}" flatten="true" verbose="true">
         <fileset dir="${build.home.odata.api.libs}">
            <include name = "odata-provider-api.jar"/>
         </fileset>
      </copy>
   </target>
 

            </project>
